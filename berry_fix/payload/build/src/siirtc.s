@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 AgbLibRtcVersion,object
	.size	 AgbLibRtcVersion,12
AgbLibRtcVersion:
	.ascii	"SIIRTC_V001\000"
	.align	2, 0
.LC0:
	.word	sLocked
.text
	.align	2, 0
	.globl	SiiRtcUnprotect
	.type	 SiiRtcUnprotect,function
	.thumb_func
SiiRtcUnprotect:
	push	{r7, lr}
	mov	r7, sp
	bl	EnableGpioPortRead
	ldr	r0, .L3
	mov	r1, #0
	strb	r1, [r0]
.L2:
	pop	{r7}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sLocked
.Lfe1:
	.size	 SiiRtcUnprotect,.Lfe1-SiiRtcUnprotect
	.section .rodata
	.align	2, 0
.LC1:
	.word	sLocked
.text
	.align	2, 0
	.globl	SiiRtcProtect
	.type	 SiiRtcProtect,function
	.thumb_func
SiiRtcProtect:
	push	{r7, lr}
	mov	r7, sp
	bl	DisableGpioPortRead
	ldr	r0, .L6
	mov	r1, #1
	strb	r1, [r0]
.L5:
	pop	{r7}
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	sLocked
.Lfe2:
	.size	 SiiRtcProtect,.Lfe2-SiiRtcProtect
	.align	2, 0
	.globl	SiiRtcProbe
	.type	 SiiRtcProbe,function
	.thumb_func
SiiRtcProbe:
	push	{r7, lr}
	add	sp, sp, #-16
	mov	r7, sp
	add	r1, r7, #4
	add	r0, r1, #0
	bl	SiiRtcGetStatus
	lsl	r1, r0, #24
	lsr	r0, r1, #24
	cmp	r0, #0
	bne	.L9	@cond_branch
	mov	r0, #0
	b	.L8
.L9:
	add	r0, r7, #0
	mov	r1, #0
	strb	r1, [r0]
	add	r0, r7, #4
	ldrb	r1, [r0, #7]
	mov	r2, #192
	add	r0, r1, #0
	and	r0, r0, r2
	add	r2, r0, #0
	lsl	r1, r2, #24
	lsr	r0, r1, #24
	cmp	r0, #128
	beq	.L11	@cond_branch
	add	r0, r7, #4
	ldrb	r1, [r0, #7]
	mov	r2, #192
	add	r0, r1, #0
	and	r0, r0, r2
	add	r2, r0, #0
	lsl	r1, r2, #24
	lsr	r0, r1, #24
	cmp	r0, #0
	bne	.L10	@cond_branch
	b	.L11
.L11:
	bl	SiiRtcReset
	lsl	r1, r0, #24
	lsr	r0, r1, #24
	cmp	r0, #0
	bne	.L12	@cond_branch
	mov	r0, #0
	b	.L8
.L12:
	add	r1, r7, #0
	add	r0, r7, #0
	add	r1, r7, #0
	ldrb	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strb	r2, [r0]
.L10:
	add	r1, r7, #4
	add	r0, r1, #0
	bl	SiiRtcGetTime
	add	r0, r7, #4
	ldrb	r1, [r0, #6]
	mov	r2, #128
	add	r0, r1, #0
	and	r0, r0, r2
	add	r2, r0, #0
	lsl	r1, r2, #24
	lsr	r0, r1, #24
	cmp	r0, #0
	beq	.L13	@cond_branch
	bl	SiiRtcReset
	lsl	r1, r0, #24
	lsr	r0, r1, #24
	cmp	r0, #0
	bne	.L14	@cond_branch
	add	r0, r7, #0
	ldrb	r1, [r0]
	lsl	r0, r1, #4
	add	r1, r0, #0
	mov	r2, #15
	add	r0, r1, #0
	bic	r0, r0, r2
	add	r1, r0, #0
	lsl	r0, r1, #24
	lsr	r1, r0, #24
	add	r0, r1, #0
	b	.L8
.L14:
	add	r1, r7, #0
	add	r0, r7, #0
	add	r1, r7, #0
	ldrb	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strb	r2, [r0]
.L13:
	add	r0, r7, #0
	ldrb	r1, [r0]
	lsl	r0, r1, #4
	add	r1, r0, #0
	mov	r2, #1
	add	r0, r1, #0
	orr	r0, r0, r2
	add	r1, r0, #0
	lsl	r0, r1, #24
	lsr	r1, r0, #24
	add	r0, r1, #0
	b	.L8
.L8:
	add	sp, sp, #16
	pop	{r7}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 SiiRtcProbe,.Lfe3-SiiRtcProbe
	.section .rodata
	.align	2, 0
.LC2:
	.word	sLocked
.text
	.align	2, 0
	.globl	SiiRtcReset
	.type	 SiiRtcReset,function
	.thumb_func
SiiRtcReset:
	push	{r7, lr}
	add	sp, sp, #-16
	mov	r7, sp
	ldr	r0, .L17
	ldrb	r1, [r0]
	cmp	r1, #1
	bne	.L16	@cond_branch
	mov	r0, #0
	b	.L15
.L18:
	.align	2, 0
.L17:
	.word	sLocked
.L16:
	ldr	r0, .L19
	mov	r1, #1
	strb	r1, [r0]
	ldr	r0, .L19+4
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L19+4
	mov	r1, #5
	strh	r1, [r0]
	ldr	r0, .L19+8
	mov	r1, #7
	strh	r1, [r0]
	mov	r0, #96
	bl	WriteCommand
	ldr	r0, .L19+4
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L19+4
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L19
	mov	r1, #0
	strb	r1, [r0]
	add	r0, r7, #4
	ldrb	r1, [r0, #7]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #64
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0, #7]
	add	r1, r7, #4
	add	r0, r1, #0
	bl	SiiRtcSetStatus
	add	r1, r7, #0
	strb	r0, [r1]
	add	r0, r7, #0
	ldrb	r1, [r0]
	add	r0, r1, #0
	b	.L15
.L20:
	.align	2, 0
.L19:
	.word	sLocked
	.word	134217924
	.word	134217926
.L15:
	add	sp, sp, #16
	pop	{r7}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 SiiRtcReset,.Lfe4-SiiRtcReset
	.section .rodata
	.align	2, 0
.LC3:
	.word	sLocked
.text
	.align	2, 0
	.globl	SiiRtcGetStatus
	.type	 SiiRtcGetStatus,function
	.thumb_func
SiiRtcGetStatus:
	push	{r4, r7, lr}
	add	sp, sp, #-8
	mov	r7, sp
	str	r0, [r7]
	ldr	r0, .L23
	ldrb	r1, [r0]
	cmp	r1, #1
	bne	.L22	@cond_branch
	mov	r0, #0
	b	.L21
.L24:
	.align	2, 0
.L23:
	.word	sLocked
.L22:
	ldr	r0, .L25
	mov	r1, #1
	strb	r1, [r0]
	ldr	r0, .L25+4
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L25+4
	mov	r1, #5
	strh	r1, [r0]
	ldr	r0, .L25+8
	mov	r1, #7
	strh	r1, [r0]
	mov	r0, #99
	bl	WriteCommand
	ldr	r0, .L25+8
	mov	r1, #5
	strh	r1, [r0]
	bl	ReadData
	add	r1, r7, #4
	strb	r0, [r1]
	ldr	r0, [r7]
	add	r1, r7, #4
	ldrb	r2, [r1]
	mov	r3, #192
	add	r1, r2, #0
	and	r1, r1, r3
	add	r2, r7, #4
	ldrb	r3, [r2]
	mov	r4, #32
	add	r2, r3, #0
	and	r2, r2, r4
	add	r4, r2, #0
	lsl	r3, r4, #24
	lsr	r2, r3, #24
	lsr	r3, r2, #3
	add	r2, r3, #0
	orr	r1, r1, r2
	add	r2, r7, #4
	ldrb	r3, [r2]
	mov	r4, #8
	add	r2, r3, #0
	and	r2, r2, r4
	add	r4, r2, #0
	lsl	r3, r4, #24
	lsr	r2, r3, #24
	lsr	r3, r2, #2
	add	r2, r3, #0
	orr	r1, r1, r2
	add	r2, r7, #4
	ldrb	r3, [r2]
	mov	r4, #2
	add	r2, r3, #0
	and	r2, r2, r4
	add	r4, r2, #0
	lsl	r3, r4, #24
	lsr	r2, r3, #24
	lsr	r3, r2, #1
	add	r2, r3, #0
	orr	r1, r1, r2
	ldrb	r2, [r0, #7]
	mov	r3, #0
	and	r2, r2, r3
	add	r3, r2, #0
	add	r2, r3, #0
	orr	r2, r2, r1
	add	r1, r2, #0
	strb	r1, [r0, #7]
	ldr	r0, .L25+4
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L25+4
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L25
	mov	r1, #0
	strb	r1, [r0]
	mov	r0, #1
	b	.L21
.L26:
	.align	2, 0
.L25:
	.word	sLocked
	.word	134217924
	.word	134217926
.L21:
	add	sp, sp, #8
	pop	{r4, r7}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 SiiRtcGetStatus,.Lfe5-SiiRtcGetStatus
	.section .rodata
	.align	2, 0
.LC4:
	.word	sLocked
.text
	.align	2, 0
	.globl	SiiRtcSetStatus
	.type	 SiiRtcSetStatus,function
	.thumb_func
SiiRtcSetStatus:
	push	{r4, r7, lr}
	add	sp, sp, #-8
	mov	r7, sp
	str	r0, [r7]
	ldr	r0, .L29
	ldrb	r1, [r0]
	cmp	r1, #1
	bne	.L28	@cond_branch
	mov	r0, #0
	b	.L27
.L30:
	.align	2, 0
.L29:
	.word	sLocked
.L28:
	ldr	r0, .L31
	mov	r1, #1
	strb	r1, [r0]
	ldr	r0, .L31+4
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L31+4
	mov	r1, #5
	strh	r1, [r0]
	add	r0, r7, #4
	ldr	r1, [r7]
	ldrb	r2, [r1, #7]
	mov	r3, #4
	add	r1, r2, #0
	and	r1, r1, r3
	add	r2, r1, #0
	lsl	r1, r2, #3
	ldr	r2, [r7]
	ldrb	r3, [r2, #7]
	mov	r4, #2
	add	r2, r3, #0
	and	r2, r2, r4
	add	r3, r2, #0
	lsl	r2, r3, #2
	add	r3, r2, #0
	mov	r4, #64
	add	r2, r3, #0
	orr	r2, r2, r4
	orr	r1, r1, r2
	ldr	r2, [r7]
	ldrb	r3, [r2, #7]
	mov	r4, #1
	add	r2, r3, #0
	and	r2, r2, r4
	add	r3, r2, #0
	lsl	r2, r3, #1
	orr	r1, r1, r2
	add	r2, r1, #0
	strb	r2, [r0]
	ldr	r0, .L31+8
	mov	r1, #7
	strh	r1, [r0]
	mov	r0, #98
	bl	WriteCommand
	add	r0, r7, #4
	ldrb	r1, [r0]
	add	r0, r1, #0
	bl	WriteData
	ldr	r0, .L31+4
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L31+4
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L31
	mov	r1, #0
	strb	r1, [r0]
	mov	r0, #1
	b	.L27
.L32:
	.align	2, 0
.L31:
	.word	sLocked
	.word	134217924
	.word	134217926
.L27:
	add	sp, sp, #8
	pop	{r4, r7}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 SiiRtcSetStatus,.Lfe6-SiiRtcSetStatus
	.section .rodata
	.align	2, 0
.LC5:
	.word	sLocked
.text
	.align	2, 0
	.globl	SiiRtcGetDateTime
	.type	 SiiRtcGetDateTime,function
	.thumb_func
SiiRtcGetDateTime:
	push	{r7, lr}
	add	sp, sp, #-8
	mov	r7, sp
	str	r0, [r7]
	ldr	r0, .L39
	ldrb	r1, [r0]
	cmp	r1, #1
	bne	.L34	@cond_branch
	mov	r0, #0
	b	.L33
.L40:
	.align	2, 0
.L39:
	.word	sLocked
.L34:
	ldr	r0, .L41
	mov	r1, #1
	strb	r1, [r0]
	ldr	r0, .L41+4
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L41+4
	mov	r1, #5
	strh	r1, [r0]
	ldr	r0, .L41+8
	mov	r1, #7
	strh	r1, [r0]
	mov	r0, #101
	bl	WriteCommand
	ldr	r0, .L41+8
	mov	r1, #5
	strh	r1, [r0]
	add	r0, r7, #4
	mov	r1, #0
	strb	r1, [r0]
.L35:
	add	r0, r7, #4
	ldrb	r1, [r0]
	cmp	r1, #6
	bls	.L38	@cond_branch
	b	.L36
.L42:
	.align	2, 0
.L41:
	.word	sLocked
	.word	134217924
	.word	134217926
.L38:
	bl	ReadData
	add	r1, r7, #4
	ldrb	r2, [r1]
	ldr	r3, [r7]
	add	r1, r2, r3
	strb	r0, [r1]
.L37:
	add	r1, r7, #4
	add	r0, r7, #4
	add	r1, r7, #4
	ldrb	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strb	r2, [r0]
	b	.L35
.L36:
	ldr	r1, [r7]
	add	r0, r1, #4
	ldr	r2, [r7]
	add	r1, r2, #4
	ldrb	r2, [r1]
	mov	r3, #127
	add	r1, r2, #0
	and	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0]
	ldr	r0, .L43
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L43
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L43+4
	mov	r1, #0
	strb	r1, [r0]
	mov	r0, #1
	b	.L33
.L44:
	.align	2, 0
.L43:
	.word	134217924
	.word	sLocked
.L33:
	add	sp, sp, #8
	pop	{r7}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 SiiRtcGetDateTime,.Lfe7-SiiRtcGetDateTime
	.section .rodata
	.align	2, 0
.LC6:
	.word	sLocked
.text
	.align	2, 0
	.globl	SiiRtcSetDateTime
	.type	 SiiRtcSetDateTime,function
	.thumb_func
SiiRtcSetDateTime:
	push	{r7, lr}
	add	sp, sp, #-8
	mov	r7, sp
	str	r0, [r7]
	ldr	r0, .L51
	ldrb	r1, [r0]
	cmp	r1, #1
	bne	.L46	@cond_branch
	mov	r0, #0
	b	.L45
.L52:
	.align	2, 0
.L51:
	.word	sLocked
.L46:
	ldr	r0, .L53
	mov	r1, #1
	strb	r1, [r0]
	ldr	r0, .L53+4
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L53+4
	mov	r1, #5
	strh	r1, [r0]
	ldr	r0, .L53+8
	mov	r1, #7
	strh	r1, [r0]
	mov	r0, #100
	bl	WriteCommand
	add	r0, r7, #4
	mov	r1, #0
	strb	r1, [r0]
.L47:
	add	r0, r7, #4
	ldrb	r1, [r0]
	cmp	r1, #6
	bls	.L50	@cond_branch
	b	.L48
.L54:
	.align	2, 0
.L53:
	.word	sLocked
	.word	134217924
	.word	134217926
.L50:
	add	r0, r7, #4
	ldrb	r1, [r0]
	ldr	r2, [r7]
	add	r0, r1, r2
	ldrb	r1, [r0]
	add	r0, r1, #0
	bl	WriteData
.L49:
	add	r1, r7, #4
	add	r0, r7, #4
	add	r1, r7, #4
	ldrb	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strb	r2, [r0]
	b	.L47
.L48:
	ldr	r0, .L55
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L55
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L55+4
	mov	r1, #0
	strb	r1, [r0]
	mov	r0, #1
	b	.L45
.L56:
	.align	2, 0
.L55:
	.word	134217924
	.word	sLocked
.L45:
	add	sp, sp, #8
	pop	{r7}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 SiiRtcSetDateTime,.Lfe8-SiiRtcSetDateTime
	.section .rodata
	.align	2, 0
.LC7:
	.word	sLocked
.text
	.align	2, 0
	.globl	SiiRtcGetTime
	.type	 SiiRtcGetTime,function
	.thumb_func
SiiRtcGetTime:
	push	{r7, lr}
	add	sp, sp, #-8
	mov	r7, sp
	str	r0, [r7]
	ldr	r0, .L63
	ldrb	r1, [r0]
	cmp	r1, #1
	bne	.L58	@cond_branch
	mov	r0, #0
	b	.L57
.L64:
	.align	2, 0
.L63:
	.word	sLocked
.L58:
	ldr	r0, .L65
	mov	r1, #1
	strb	r1, [r0]
	ldr	r0, .L65+4
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L65+4
	mov	r1, #5
	strh	r1, [r0]
	ldr	r0, .L65+8
	mov	r1, #7
	strh	r1, [r0]
	mov	r0, #103
	bl	WriteCommand
	ldr	r0, .L65+8
	mov	r1, #5
	strh	r1, [r0]
	add	r0, r7, #4
	mov	r1, #0
	strb	r1, [r0]
.L59:
	add	r0, r7, #4
	ldrb	r1, [r0]
	cmp	r1, #2
	bls	.L62	@cond_branch
	b	.L60
.L66:
	.align	2, 0
.L65:
	.word	sLocked
	.word	134217924
	.word	134217926
.L62:
	bl	ReadData
	add	r1, r7, #4
	ldrb	r2, [r1]
	ldr	r3, [r7]
	add	r1, r2, r3
	add	r2, r1, #4
	strb	r0, [r2]
.L61:
	add	r1, r7, #4
	add	r0, r7, #4
	add	r1, r7, #4
	ldrb	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strb	r2, [r0]
	b	.L59
.L60:
	ldr	r1, [r7]
	add	r0, r1, #4
	ldr	r2, [r7]
	add	r1, r2, #4
	ldrb	r2, [r1]
	mov	r3, #127
	add	r1, r2, #0
	and	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0]
	ldr	r0, .L67
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L67
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L67+4
	mov	r1, #0
	strb	r1, [r0]
	mov	r0, #1
	b	.L57
.L68:
	.align	2, 0
.L67:
	.word	134217924
	.word	sLocked
.L57:
	add	sp, sp, #8
	pop	{r7}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 SiiRtcGetTime,.Lfe9-SiiRtcGetTime
	.section .rodata
	.align	2, 0
.LC8:
	.word	sLocked
.text
	.align	2, 0
	.globl	SiiRtcSetTime
	.type	 SiiRtcSetTime,function
	.thumb_func
SiiRtcSetTime:
	push	{r7, lr}
	add	sp, sp, #-8
	mov	r7, sp
	str	r0, [r7]
	ldr	r0, .L75
	ldrb	r1, [r0]
	cmp	r1, #1
	bne	.L70	@cond_branch
	mov	r0, #0
	b	.L69
.L76:
	.align	2, 0
.L75:
	.word	sLocked
.L70:
	ldr	r0, .L77
	mov	r1, #1
	strb	r1, [r0]
	ldr	r0, .L77+4
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L77+4
	mov	r1, #5
	strh	r1, [r0]
	ldr	r0, .L77+8
	mov	r1, #7
	strh	r1, [r0]
	mov	r0, #102
	bl	WriteCommand
	add	r0, r7, #4
	mov	r1, #0
	strb	r1, [r0]
.L71:
	add	r0, r7, #4
	ldrb	r1, [r0]
	cmp	r1, #2
	bls	.L74	@cond_branch
	b	.L72
.L78:
	.align	2, 0
.L77:
	.word	sLocked
	.word	134217924
	.word	134217926
.L74:
	add	r0, r7, #4
	ldrb	r1, [r0]
	ldr	r2, [r7]
	add	r0, r1, r2
	add	r1, r0, #4
	ldrb	r2, [r1]
	add	r0, r2, #0
	bl	WriteData
.L73:
	add	r1, r7, #4
	add	r0, r7, #4
	add	r1, r7, #4
	ldrb	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strb	r2, [r0]
	b	.L71
.L72:
	ldr	r0, .L79
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L79
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L79+4
	mov	r1, #0
	strb	r1, [r0]
	mov	r0, #1
	b	.L69
.L80:
	.align	2, 0
.L79:
	.word	134217924
	.word	sLocked
.L69:
	add	sp, sp, #8
	pop	{r7}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 SiiRtcSetTime,.Lfe10-SiiRtcSetTime
	.section .rodata
	.align	2, 0
.LC9:
	.word	sLocked
	.align	2, 0
.LC10:
	.word	GPIOPortDirection
.text
	.align	2, 0
	.globl	SiiRtcSetAlarm
	.type	 SiiRtcSetAlarm,function
	.thumb_func
SiiRtcSetAlarm:
	push	{r4, r7, lr}
	add	sp, sp, #-12
	mov	r7, sp
	str	r0, [r7]
	ldr	r0, .L89
	ldrb	r1, [r0]
	cmp	r1, #1
	bne	.L82	@cond_branch
	mov	r0, #0
	b	.L81
.L90:
	.align	2, 0
.L89:
	.word	sLocked
.L82:
	ldr	r0, .L91
	mov	r1, #1
	strb	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #8
	ldr	r1, [r7]
	ldrb	r2, [r1, #8]
	mov	r3, #15
	add	r1, r2, #0
	and	r1, r1, r3
	ldr	r2, [r7]
	ldrb	r3, [r2, #8]
	lsr	r2, r3, #4
	add	r3, r2, #0
	mov	r4, #15
	add	r2, r3, #0
	and	r2, r2, r4
	add	r4, r2, #0
	lsl	r3, r4, #24
	lsr	r2, r3, #24
	add	r4, r2, #0
	lsl	r3, r4, #2
	add	r3, r3, r2
	lsl	r2, r3, #1
	add	r1, r1, r2
	ldrb	r2, [r0]
	mov	r3, #0
	and	r2, r2, r3
	add	r3, r2, #0
	add	r2, r3, #0
	orr	r2, r2, r1
	add	r1, r2, #0
	strb	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #8
	ldrb	r1, [r0]
	cmp	r1, #11
	bhi	.L83	@cond_branch
	add	r0, r7, #0
	add	r0, r0, #8
	ldr	r1, [r7]
	ldrb	r2, [r0]
	mov	r3, #0
	and	r2, r2, r3
	add	r3, r2, #0
	ldrb	r1, [r1, #8]
	add	r2, r3, #0
	orr	r2, r2, r1
	add	r1, r2, #0
	strb	r1, [r0]
	b	.L84
.L92:
	.align	2, 0
.L91:
	.word	sLocked
.L83:
	add	r0, r7, #0
	add	r0, r0, #8
	ldr	r1, [r7]
	ldrb	r2, [r1, #8]
	mov	r3, #128
	add	r1, r2, #0
	orr	r1, r1, r3
	ldrb	r2, [r0]
	mov	r3, #0
	and	r2, r2, r3
	add	r3, r2, #0
	add	r2, r3, #0
	orr	r2, r2, r1
	add	r1, r2, #0
	strb	r1, [r0]
.L84:
	add	r0, r7, #0
	add	r0, r0, #8
	ldr	r1, [r7]
	ldrb	r2, [r0, #1]
	mov	r3, #0
	and	r2, r2, r3
	add	r3, r2, #0
	ldrb	r1, [r1, #9]
	add	r2, r3, #0
	orr	r2, r2, r1
	add	r1, r2, #0
	strb	r1, [r0, #1]
	ldr	r0, .L93
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L93
	mov	r1, #5
	strh	r1, [r0]
	ldr	r0, .L93+4
	mov	r1, #7
	strh	r1, [r0]
	mov	r0, #104
	bl	WriteCommand
	add	r0, r7, #4
	mov	r1, #0
	strb	r1, [r0]
.L85:
	add	r0, r7, #4
	ldrb	r1, [r0]
	cmp	r1, #1
	bls	.L88	@cond_branch
	b	.L86
.L94:
	.align	2, 0
.L93:
	.word	134217924
	.word	GPIOPortDirection
.L88:
	add	r0, r7, #0
	add	r0, r0, #8
	add	r1, r7, #4
	ldrb	r2, [r1]
	add	r0, r0, r2
	ldrb	r1, [r0]
	add	r0, r1, #0
	bl	WriteData
.L87:
	add	r1, r7, #4
	add	r0, r7, #4
	add	r1, r7, #4
	ldrb	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strb	r2, [r0]
	b	.L85
.L86:
	ldr	r0, .L95
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L95
	mov	r1, #1
	strh	r1, [r0]
	ldr	r0, .L95+4
	mov	r1, #0
	strb	r1, [r0]
	mov	r0, #1
	b	.L81
.L96:
	.align	2, 0
.L95:
	.word	134217924
	.word	sLocked
.L81:
	add	sp, sp, #12
	pop	{r4, r7}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 SiiRtcSetAlarm,.Lfe11-SiiRtcSetAlarm
	.align	2, 0
	.type	 WriteCommand,function
	.thumb_func
WriteCommand:
	push	{r4, r5, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r1, r0, #0
	add	r2, r7, #0
	strb	r1, [r2]
	add	r1, r7, #1
	mov	r2, #0
	strb	r2, [r1]
.L98:
	add	r1, r7, #1
	ldrb	r2, [r1]
	cmp	r2, #7
	bls	.L101	@cond_branch
	b	.L99
.L101:
	add	r1, r7, #2
	add	r3, r7, #0
	ldrb	r2, [r3]
	add	r3, r7, #1
	ldrb	r4, [r3]
	mov	r5, #7
	sub	r3, r5, r4
	asr	r2, r2, r3
	add	r3, r2, #0
	mov	r4, #1
	add	r2, r3, #0
	and	r2, r2, r4
	add	r3, r2, #0
	strb	r3, [r1]
	ldr	r1, .L102
	add	r2, r7, #2
	ldrb	r3, [r2]
	add	r2, r3, #0
	lsl	r3, r2, #1
	add	r2, r3, #0
	mov	r3, #4
	orr	r2, r2, r3
	add	r3, r2, #0
	strh	r3, [r1]
	ldr	r1, .L102
	add	r2, r7, #2
	ldrb	r3, [r2]
	add	r2, r3, #0
	lsl	r3, r2, #1
	add	r2, r3, #0
	mov	r3, #4
	orr	r2, r2, r3
	add	r3, r2, #0
	strh	r3, [r1]
	ldr	r1, .L102
	add	r2, r7, #2
	ldrb	r3, [r2]
	add	r2, r3, #0
	lsl	r3, r2, #1
	add	r2, r3, #0
	mov	r3, #4
	orr	r2, r2, r3
	add	r3, r2, #0
	strh	r3, [r1]
	ldr	r1, .L102
	add	r2, r7, #2
	ldrb	r3, [r2]
	add	r2, r3, #0
	lsl	r3, r2, #1
	add	r2, r3, #0
	mov	r3, #5
	orr	r2, r2, r3
	add	r3, r2, #0
	strh	r3, [r1]
.L100:
	add	r2, r7, #1
	add	r1, r7, #1
	add	r2, r7, #1
	ldrb	r3, [r2]
	add	r2, r3, #1
	add	r3, r2, #0
	strb	r3, [r1]
	b	.L98
.L103:
	.align	2, 0
.L102:
	.word	134217924
.L99:
.L97:
	add	sp, sp, #4
	pop	{r4, r5, r7}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 WriteCommand,.Lfe12-WriteCommand
	.align	2, 0
	.type	 WriteData,function
	.thumb_func
WriteData:
	push	{r4, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r1, r0, #0
	add	r2, r7, #0
	strb	r1, [r2]
	add	r1, r7, #1
	mov	r2, #0
	strb	r2, [r1]
.L105:
	add	r1, r7, #1
	ldrb	r2, [r1]
	cmp	r2, #7
	bls	.L108	@cond_branch
	b	.L106
.L108:
	add	r1, r7, #2
	add	r3, r7, #0
	ldrb	r2, [r3]
	add	r3, r7, #1
	ldrb	r4, [r3]
	asr	r2, r2, r4
	add	r3, r2, #0
	mov	r4, #1
	add	r2, r3, #0
	and	r2, r2, r4
	add	r3, r2, #0
	strb	r3, [r1]
	ldr	r1, .L109
	add	r2, r7, #2
	ldrb	r3, [r2]
	add	r2, r3, #0
	lsl	r3, r2, #1
	add	r2, r3, #0
	mov	r3, #4
	orr	r2, r2, r3
	add	r3, r2, #0
	strh	r3, [r1]
	ldr	r1, .L109
	add	r2, r7, #2
	ldrb	r3, [r2]
	add	r2, r3, #0
	lsl	r3, r2, #1
	add	r2, r3, #0
	mov	r3, #4
	orr	r2, r2, r3
	add	r3, r2, #0
	strh	r3, [r1]
	ldr	r1, .L109
	add	r2, r7, #2
	ldrb	r3, [r2]
	add	r2, r3, #0
	lsl	r3, r2, #1
	add	r2, r3, #0
	mov	r3, #4
	orr	r2, r2, r3
	add	r3, r2, #0
	strh	r3, [r1]
	ldr	r1, .L109
	add	r2, r7, #2
	ldrb	r3, [r2]
	add	r2, r3, #0
	lsl	r3, r2, #1
	add	r2, r3, #0
	mov	r3, #5
	orr	r2, r2, r3
	add	r3, r2, #0
	strh	r3, [r1]
.L107:
	add	r2, r7, #1
	add	r1, r7, #1
	add	r2, r7, #1
	ldrb	r3, [r2]
	add	r2, r3, #1
	add	r3, r2, #0
	strb	r3, [r1]
	b	.L105
.L110:
	.align	2, 0
.L109:
	.word	134217924
.L106:
.L104:
	add	sp, sp, #4
	pop	{r4, r7}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 WriteData,.Lfe13-WriteData
	.align	2, 0
	.type	 ReadData,function
	.thumb_func
ReadData:
	push	{r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r0, r7, #0
	mov	r1, #0
	strb	r1, [r0]
.L112:
	add	r0, r7, #0
	ldrb	r1, [r0]
	cmp	r1, #7
	bls	.L115	@cond_branch
	b	.L113
.L115:
	ldr	r0, .L116
	mov	r1, #4
	strh	r1, [r0]
	ldr	r0, .L116
	mov	r1, #4
	strh	r1, [r0]
	ldr	r0, .L116
	mov	r1, #4
	strh	r1, [r0]
	ldr	r0, .L116
	mov	r1, #4
	strh	r1, [r0]
	ldr	r0, .L116
	mov	r1, #4
	strh	r1, [r0]
	ldr	r0, .L116
	mov	r1, #5
	strh	r1, [r0]
	add	r0, r7, #1
	ldr	r1, .L116
	ldrh	r2, [r1]
	mov	r3, #2
	add	r1, r2, #0
	and	r1, r1, r3
	add	r3, r1, #0
	lsl	r2, r3, #16
	lsr	r1, r2, #16
	lsr	r2, r1, #1
	add	r1, r2, #0
	strb	r1, [r0]
	add	r0, r7, #2
	add	r1, r7, #2
	ldrb	r2, [r1]
	lsr	r1, r2, #1
	add	r2, r7, #1
	ldrb	r3, [r2]
	lsl	r2, r3, #7
	orr	r1, r1, r2
	add	r2, r1, #0
	strb	r2, [r0]
.L114:
	add	r1, r7, #0
	add	r0, r7, #0
	add	r1, r7, #0
	ldrb	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strb	r2, [r0]
	b	.L112
.L117:
	.align	2, 0
.L116:
	.word	134217924
.L113:
	add	r0, r7, #2
	ldrb	r1, [r0]
	add	r0, r1, #0
	b	.L111
.L111:
	add	sp, sp, #4
	pop	{r7}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 ReadData,.Lfe14-ReadData
	.align	2, 0
	.type	 EnableGpioPortRead,function
	.thumb_func
EnableGpioPortRead:
	push	{r7, lr}
	mov	r7, sp
	ldr	r0, .L119
	mov	r1, #1
	strh	r1, [r0]
.L118:
	pop	{r7}
	pop	{r0}
	bx	r0
.L120:
	.align	2, 0
.L119:
	.word	134217928
.Lfe15:
	.size	 EnableGpioPortRead,.Lfe15-EnableGpioPortRead
	.align	2, 0
	.type	 DisableGpioPortRead,function
	.thumb_func
DisableGpioPortRead:
	push	{r7, lr}
	mov	r7, sp
	ldr	r0, .L122
	mov	r1, #0
	strh	r1, [r0]
.L121:
	pop	{r7}
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	134217928
.Lfe16:
	.size	 DisableGpioPortRead,.Lfe16-DisableGpioPortRead

	.lcomm	sDummy,2

	.lcomm	sLocked,1
.text
	.align	2, 0

