@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	sDefaultRTC
	.section .rodata
	.align	2, 0
	.type	 sDefaultRTC,object
	.size	 sDefaultRTC,12
sDefaultRTC:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	2
	.globl	sDaysPerMonth
	.align	2, 0
	.type	 sDaysPerMonth,object
sDaysPerMonth:
	.word	0x1f
	.word	0x1c
	.word	0x1f
	.word	0x1e
	.word	0x1f
	.word	0x1e
	.word	0x1f
	.word	0x1f
	.word	0x1e
	.word	0x1f
	.word	0x1e
	.word	0x1f
	.size	 sDaysPerMonth,48
.text
	.align	2, 0
	.globl	rtc_intr_disable
	.type	 rtc_intr_disable,function
	.thumb_func
rtc_intr_disable:
	ldr	r2, .L3
	ldr	r1, .L3+0x4
	ldrh	r0, [r1]
	strh	r0, [r2]
	mov	r0, #0x0
	strh	r0, [r1]
	bx	lr
.L4:
	.align	2, 0
.L3:
	.word	sImeBak
	.word	0x4000208
.Lfe1:
	.size	 rtc_intr_disable,.Lfe1-rtc_intr_disable
	.align	2, 0
	.globl	rtc_intr_enable
	.type	 rtc_intr_enable,function
	.thumb_func
rtc_intr_enable:
	ldr	r0, .L6
	ldr	r1, .L6+0x4
	ldrh	r1, [r1]
	strh	r1, [r0]
	bx	lr
.L7:
	.align	2, 0
.L6:
	.word	0x4000208
	.word	sImeBak
.Lfe2:
	.size	 rtc_intr_enable,.Lfe2-rtc_intr_enable
	.align	2, 0
	.globl	bcd_to_hex
	.type	 bcd_to_hex,function
	.thumb_func
bcd_to_hex:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x9f
	bhi	.L10	@cond_branch
	mov	r3, #0xf
	and	r3, r3, r2
	cmp	r3, #0x9
	bls	.L9	@cond_branch
.L10:
	mov	r0, #0xff
	b	.L11
.L9:
	lsr	r1, r0, #0x1c
	mov	r0, #0xf
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r3
.L11:
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 bcd_to_hex,.Lfe3-bcd_to_hex
	.align	2, 0
	.globl	is_leap_year
	.type	 is_leap_year,function
	.thumb_func
is_leap_year:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r4, r1, #0
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L15	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L14	@cond_branch
.L15:
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r4, #0
	bl	__modsi3
	cmp	r0, #0
	bne	.L13	@cond_branch
.L14:
	mov	r0, #0x1
	b	.L16
.L13:
	mov	r0, #0x0
.L16:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 is_leap_year,.Lfe4-is_leap_year
	.align	2, 0
	.globl	rtc_count_days_parameterized
	.type	 rtc_count_days_parameterized,function
	.thumb_func
rtc_count_days_parameterized:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	mov	r5, #0x0
	sub	r4, r7, #0x1
	cmp	r4, #0
	ble	.L19	@cond_branch
.L21:
	ldr	r1, .L30
	add	r0, r5, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	is_leap_year
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L20	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L20:
	sub	r4, r4, #0x1
	cmp	r4, #0
	bgt	.L21	@cond_branch
.L19:
	sub	r0, r6, #0x1
	cmp	r0, #0
	ble	.L25	@cond_branch
	ldr	r1, .L30+0x4
	add	r4, r0, #0
.L27:
	ldmia	r1!, {r0}
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L27	@cond_branch
.L25:
	cmp	r6, #0x2
	bls	.L29	@cond_branch
	add	r0, r7, #0
	bl	is_leap_year
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L29	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L29:
	mov	r1, r8
	add	r0, r5, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r5, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L31:
	.align	2, 0
.L30:
	.word	0x16d
	.word	sDaysPerMonth
.Lfe5:
	.size	 rtc_count_days_parameterized,.Lfe5-rtc_count_days_parameterized
	.align	2, 0
	.globl	rtc_count_days_from_info
	.type	 rtc_count_days_from_info,function
	.thumb_func
rtc_count_days_from_info:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldrb	r0, [r6]
	bl	bcd_to_hex
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r6, #0x1]
	bl	bcd_to_hex
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6, #0x2]
	bl	bcd_to_hex
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	rtc_count_days_parameterized
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 rtc_count_days_from_info,.Lfe6-rtc_count_days_from_info
	.align	2, 0
	.type	 rtc_probe_status,function
	.thumb_func
rtc_probe_status:
	push	{r4, r5, lr}
	ldr	r5, .L38
	mov	r0, #0x0
	strh	r0, [r5]
	bl	rtc_intr_disable
	bl	SiiRtcUnprotect
	bl	SiiRtcProbe
	ldr	r4, .L38+0x4
	strb	r0, [r4]
	bl	rtc_intr_enable
	ldrb	r4, [r4]
	mov	r0, #0xf
	and	r0, r0, r4
	cmp	r0, #0x1
	beq	.L34	@cond_branch
	mov	r0, #0x1
	strh	r0, [r5]
	b	.L35
.L39:
	.align	2, 0
.L38:
	.word	sRtcProbeStatus
	.word	sRtcProbeCode
.L34:
	mov	r0, #0xf0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L36	@cond_branch
	mov	r0, #0x2
.L36:
	strh	r0, [r5]
	ldr	r4, .L40
	add	r0, r4, #0
	bl	rtc_get_status_and_datetime
	add	r0, r4, #0
	bl	rtc_validate_datetime
	ldr	r1, .L40+0x4
	strh	r0, [r1]
.L35:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	sRtcInfoBuffer
	.word	sRtcProbeStatus
.Lfe7:
	.size	 rtc_probe_status,.Lfe7-rtc_probe_status
	.align	2, 0
	.globl	rtc_get_probe_status
	.type	 rtc_get_probe_status,function
	.thumb_func
rtc_get_probe_status:
	ldr	r0, .L43
	ldrh	r0, [r0]
	bx	lr
.L44:
	.align	2, 0
.L43:
	.word	sRtcProbeStatus
.Lfe8:
	.size	 rtc_get_probe_status,.Lfe8-rtc_get_probe_status
	.align	2, 0
	.globl	sub_020106EC
	.type	 sub_020106EC,function
	.thumb_func
sub_020106EC:
	push	{r4, lr}
	add	r2, r0, #0
	ldr	r0, .L48
	ldrh	r1, [r0]
	mov	r0, #0xff
	lsl	r0, r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L46	@cond_branch
	add	r1, r2, #0
	ldr	r0, .L48+0x4
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	b	.L47
.L49:
	.align	2, 0
.L48:
	.word	sRtcProbeStatus
	.word	sDefaultRTC
.L46:
	add	r0, r2, #0
	bl	rtc_get_status_and_datetime
.L47:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 sub_020106EC,.Lfe9-sub_020106EC
	.align	2, 0
	.globl	rtc_get_datetime
	.type	 rtc_get_datetime,function
	.thumb_func
rtc_get_datetime:
	push	{r4, lr}
	add	r4, r0, #0
	bl	rtc_intr_disable
	add	r0, r4, #0
	bl	SiiRtcGetDateTime
	bl	rtc_intr_enable
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 rtc_get_datetime,.Lfe10-rtc_get_datetime
	.align	2, 0
	.globl	rtc_get_status
	.type	 rtc_get_status,function
	.thumb_func
rtc_get_status:
	push	{r4, lr}
	add	r4, r0, #0
	bl	rtc_intr_disable
	add	r0, r4, #0
	bl	SiiRtcGetStatus
	bl	rtc_intr_enable
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 rtc_get_status,.Lfe11-rtc_get_status
	.align	2, 0
	.globl	rtc_get_status_and_datetime
	.type	 rtc_get_status_and_datetime,function
	.thumb_func
rtc_get_status_and_datetime:
	push	{r4, lr}
	add	r4, r0, #0
	bl	rtc_get_status
	add	r0, r4, #0
	bl	rtc_get_datetime
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 rtc_get_status_and_datetime,.Lfe12-rtc_get_status_and_datetime
	.align	2, 0
	.globl	rtc_validate_datetime
	.type	 rtc_validate_datetime,function
	.thumb_func
rtc_validate_datetime:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	ldrb	r1, [r7, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	neg	r0, r0
	asr	r4, r0, #0x1f
	mov	r0, #0x20
	and	r4, r4, r0
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L56	@cond_branch
	mov	r0, #0x10
	orr	r4, r4, r0
.L56:
	ldrb	r0, [r7]
	bl	bcd_to_hex
	mov	r8, r0
	cmp	r0, #0xff
	bne	.L57	@cond_branch
	mov	r0, #0x40
	orr	r4, r4, r0
	lsl	r0, r4, #0x10
	lsr	r4, r0, #0x10
.L57:
	ldrb	r0, [r7, #0x1]
	bl	bcd_to_hex
	add	r6, r0, #0
	cmp	r6, #0xff
	beq	.L59	@cond_branch
	cmp	r6, #0
	beq	.L59	@cond_branch
	cmp	r6, #0xc
	ble	.L58	@cond_branch
.L59:
	mov	r0, #0x80
	orr	r4, r4, r0
	lsl	r0, r4, #0x10
	lsr	r4, r0, #0x10
.L58:
	ldrb	r0, [r7, #0x2]
	bl	bcd_to_hex
	add	r5, r0, #0
	cmp	r5, #0xff
	bne	.L60	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	orr	r4, r4, r0
	lsl	r0, r4, #0x10
	lsr	r4, r0, #0x10
.L60:
	cmp	r6, #0x2
	bne	.L61	@cond_branch
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	is_leap_year
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L69
	ldr	r1, [r1, #0x4]
	add	r0, r0, r1
	b	.L68
.L70:
	.align	2, 0
.L69:
	.word	sDaysPerMonth
.L61:
	ldr	r0, .L71
	sub	r1, r6, #0x1
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
.L68:
	cmp	r5, r0
	ble	.L63	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	orr	r4, r4, r0
	lsl	r0, r4, #0x10
	lsr	r4, r0, #0x10
.L63:
	ldrb	r0, [r7, #0x4]
	bl	bcd_to_hex
	add	r5, r0, #0
	cmp	r5, #0x18
	ble	.L65	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	add	r0, r1, #0
	orr	r4, r4, r0
	lsl	r0, r4, #0x10
	lsr	r4, r0, #0x10
.L65:
	ldrb	r0, [r7, #0x5]
	bl	bcd_to_hex
	add	r5, r0, #0
	cmp	r5, #0x3c
	ble	.L66	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	add	r0, r1, #0
	orr	r4, r4, r0
	lsl	r0, r4, #0x10
	lsr	r4, r0, #0x10
.L66:
	ldrb	r0, [r7, #0x6]
	bl	bcd_to_hex
	add	r5, r0, #0
	cmp	r5, #0x3c
	ble	.L67	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	add	r0, r1, #0
	orr	r4, r4, r0
	lsl	r0, r4, #0x10
	lsr	r4, r0, #0x10
.L67:
	add	r0, r4, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L72:
	.align	2, 0
.L71:
	.word	sDaysPerMonth
.Lfe13:
	.size	 rtc_validate_datetime,.Lfe13-rtc_validate_datetime
	.align	2, 0
	.globl	rtc_reset
	.type	 rtc_reset,function
	.thumb_func
rtc_reset:
	push	{lr}
	bl	rtc_intr_disable
	bl	SiiRtcReset
	bl	rtc_intr_enable
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 rtc_reset,.Lfe14-rtc_reset
	.align	2, 0
	.globl	rtc_sub_time_from_datetime
	.type	 rtc_sub_time_from_datetime,function
	.thumb_func
rtc_sub_time_from_datetime:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r7, r1, #0
	add	r6, r2, #0
	bl	rtc_count_days_from_info
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5, #0x6]
	bl	bcd_to_hex
	ldrb	r1, [r6, #0x4]
	sub	r0, r0, r1
	strb	r0, [r7, #0x4]
	ldrb	r0, [r5, #0x5]
	bl	bcd_to_hex
	ldrb	r1, [r6, #0x3]
	sub	r0, r0, r1
	strb	r0, [r7, #0x3]
	ldrb	r0, [r5, #0x4]
	bl	bcd_to_hex
	ldrb	r1, [r6, #0x2]
	sub	r0, r0, r1
	strb	r0, [r7, #0x2]
	ldrh	r0, [r6]
	sub	r4, r4, r0
	strh	r4, [r7]
	ldrb	r1, [r7, #0x4]
	mov	r0, #0x4
	ldrsb	r0, [r7, r0]
	cmp	r0, #0
	bge	.L75	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x3c
	strb	r0, [r7, #0x4]
	ldrb	r0, [r7, #0x3]
	sub	r0, r0, #0x1
	strb	r0, [r7, #0x3]
.L75:
	ldrb	r1, [r7, #0x3]
	mov	r0, #0x3
	ldrsb	r0, [r7, r0]
	cmp	r0, #0
	bge	.L76	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x3c
	strb	r0, [r7, #0x3]
	ldrb	r0, [r7, #0x2]
	sub	r0, r0, #0x1
	strb	r0, [r7, #0x2]
.L76:
	ldrb	r1, [r7, #0x2]
	mov	r0, #0x2
	ldrsb	r0, [r7, r0]
	cmp	r0, #0
	bge	.L77	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x18
	strb	r0, [r7, #0x2]
	ldrh	r0, [r7]
	sub	r0, r0, #0x1
	strh	r0, [r7]
.L77:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 rtc_sub_time_from_datetime,.Lfe15-rtc_sub_time_from_datetime
	.align	2, 0
	.globl	rtc_sub_time_from_time
	.type	 rtc_sub_time_from_time,function
	.thumb_func
rtc_sub_time_from_time:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldrb	r3, [r2, #0x4]
	ldrb	r0, [r1, #0x4]
	sub	r5, r3, r0
	strb	r5, [r4, #0x4]
	ldrb	r3, [r2, #0x3]
	ldrb	r0, [r1, #0x3]
	sub	r6, r3, r0
	strb	r6, [r4, #0x3]
	ldrb	r0, [r2, #0x2]
	ldrb	r3, [r1, #0x2]
	sub	r0, r0, r3
	strb	r0, [r4, #0x2]
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	sub	r0, r0, r1
	strh	r0, [r4]
	lsl	r0, r5, #0x18
	cmp	r0, #0
	bge	.L79	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x3c
	strb	r0, [r4, #0x4]
	sub	r0, r6, #0x1
	strb	r0, [r4, #0x3]
.L79:
	ldrb	r1, [r4, #0x3]
	mov	r0, #0x3
	ldrsb	r0, [r4, r0]
	cmp	r0, #0
	bge	.L80	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x3c
	strb	r0, [r4, #0x3]
	ldrb	r0, [r4, #0x2]
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x2]
.L80:
	ldrb	r1, [r4, #0x2]
	mov	r0, #0x2
	ldrsb	r0, [r4, r0]
	cmp	r0, #0
	bge	.L81	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x18
	strb	r0, [r4, #0x2]
	ldrh	r0, [r4]
	sub	r0, r0, #0x1
	strh	r0, [r4]
.L81:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 rtc_sub_time_from_time,.Lfe16-rtc_sub_time_from_time
	.align	2, 0
	.globl	rtc_maincb_is_rtc_working
	.type	 rtc_maincb_is_rtc_working,function
	.thumb_func
rtc_maincb_is_rtc_working:
	push	{lr}
	bl	rtc_probe_status
	bl	rtc_get_probe_status
	mov	r1, #0xff
	lsl	r1, r1, #0x4
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L83	@cond_branch
	mov	r0, #0x1
	b	.L84
.L83:
	mov	r0, #0x0
.L84:
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 rtc_maincb_is_rtc_working,.Lfe17-rtc_maincb_is_rtc_working
	.align	2, 0
	.globl	rtc_set_datetime
	.type	 rtc_set_datetime,function
	.thumb_func
rtc_set_datetime:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r2, sp
	ldr	r4, .L86
	ldrh	r1, [r4]
	strh	r1, [r2]
	mov	r1, #0x0
	strh	r1, [r4]
	bl	SiiRtcSetDateTime
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L87:
	.align	2, 0
.L86:
	.word	0x4000208
.Lfe18:
	.size	 rtc_set_datetime,.Lfe18-rtc_set_datetime
	.align	2, 0
	.globl	rtc_maincb_is_time_since_last_berry_update_positive
	.type	 rtc_maincb_is_time_since_last_berry_update_positive,function
	.thumb_func
rtc_maincb_is_time_since_last_berry_update_positive:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L91
	add	r0, r4, #0
	bl	rtc_get_status_and_datetime
	ldrb	r0, [r4]
	bl	bcd_to_hex
	strb	r0, [r5]
	ldr	r5, .L91+0x4
	ldr	r2, .L91+0x8
	add	r0, r4, #0
	add	r1, r5, #0
	bl	rtc_sub_time_from_datetime
	ldr	r4, .L91+0xc
	ldr	r1, .L91+0x10
	add	r0, r4, #0
	add	r2, r5, #0
	bl	rtc_sub_time_from_time
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	lsl	r1, r1, #0x5
	mov	r2, #0x2
	ldrsb	r2, [r4, r2]
	lsl	r0, r2, #0x4
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	mov	r0, #0x3
	ldrsb	r0, [r4, r0]
	add	r1, r1, r0
	cmp	r1, #0
	bge	.L89	@cond_branch
	mov	r0, #0x0
	b	.L90
.L92:
	.align	2, 0
.L91:
	.word	sRtcInfoWork
	.word	gRtcUTCTime
	.word	0x2028098
	.word	gTimeSinceBerryUpdate
	.word	0x20280a0
.L89:
	mov	r0, #0x1
.L90:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 rtc_maincb_is_time_since_last_berry_update_positive,.Lfe19-rtc_maincb_is_time_since_last_berry_update_positive
	.align	2, 0
	.globl	hex_to_bcd
	.type	 hex_to_bcd,function
	.thumb_func
hex_to_bcd:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x63
	bhi	.L94	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xa
	bl	Div
	add	r4, r0, #0
	lsl	r4, r4, #0x4
	add	r0, r5, #0
	mov	r1, #0xa
	bl	Mod
	orr	r4, r4, r0
	add	r0, r4, #0
	b	.L95
.L94:
	mov	r0, #0xff
.L95:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 hex_to_bcd,.Lfe20-hex_to_bcd
	.align	2, 0
	.globl	sii_rtc_inc
	.type	 sii_rtc_inc,function
	.thumb_func
sii_rtc_inc:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	bl	bcd_to_hex
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	hex_to_bcd
	strb	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 sii_rtc_inc,.Lfe21-sii_rtc_inc
	.align	2, 0
	.globl	sii_rtc_inc_month
	.type	 sii_rtc_inc_month,function
	.thumb_func
sii_rtc_inc_month:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r4, #0x1
	bl	sii_rtc_inc
	ldrb	r0, [r4, #0x1]
	bl	bcd_to_hex
	cmp	r0, #0xc
	ble	.L98	@cond_branch
	add	r0, r4, #0
	bl	sii_rtc_inc
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
.L98:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 sii_rtc_inc_month,.Lfe22-sii_rtc_inc_month
	.align	2, 0
	.globl	sii_rtc_inc_day
	.type	 sii_rtc_inc_day,function
	.thumb_func
sii_rtc_inc_day:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r0, r6, #0x2
	bl	sii_rtc_inc
	ldrb	r0, [r6, #0x2]
	bl	bcd_to_hex
	add	r5, r0, #0
	ldr	r4, .L103
	ldrb	r0, [r6, #0x1]
	bl	bcd_to_hex
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	cmp	r5, r0
	ble	.L100	@cond_branch
	ldrb	r0, [r6]
	bl	bcd_to_hex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	is_leap_year
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L102	@cond_branch
	ldrb	r0, [r6, #0x1]
	bl	bcd_to_hex
	cmp	r0, #0x2
	bne	.L102	@cond_branch
	ldrb	r0, [r6, #0x2]
	bl	bcd_to_hex
	cmp	r0, #0x1d
	beq	.L100	@cond_branch
.L102:
	mov	r0, #0x1
	strb	r0, [r6, #0x2]
	add	r0, r6, #0
	bl	sii_rtc_inc_month
.L100:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	sDaysPerMonth
.Lfe23:
	.size	 sii_rtc_inc_day,.Lfe23-sii_rtc_inc_day
	.align	2, 0
	.globl	rtc_is_past_feb_28_2000
	.type	 rtc_is_past_feb_28_2000,function
	.thumb_func
rtc_is_past_feb_28_2000:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	bl	bcd_to_hex
	cmp	r0, #0
	bne	.L106	@cond_branch
	ldrb	r0, [r4, #0x1]
	bl	bcd_to_hex
	cmp	r0, #0x1
	beq	.L112	@cond_branch
	ldrb	r0, [r4, #0x1]
	bl	bcd_to_hex
	cmp	r0, #0x2
	bgt	.L110	@cond_branch
	ldrb	r0, [r4, #0x2]
	bl	bcd_to_hex
	cmp	r0, #0x1d
	beq	.L110	@cond_branch
	b	.L112
.L106:
	ldrb	r0, [r4]
	bl	bcd_to_hex
	cmp	r0, #0x1
	beq	.L110	@cond_branch
.L112:
	mov	r0, #0x0
	b	.L111
.L110:
	mov	r0, #0x1
.L111:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 rtc_is_past_feb_28_2000,.Lfe24-rtc_is_past_feb_28_2000
	.align	2, 0
	.globl	rtc_maincb_fix_date
	.type	 rtc_maincb_fix_date,function
	.thumb_func
rtc_maincb_fix_date:
	push	{r4, lr}
	ldr	r4, .L120
	add	r0, r4, #0
	bl	rtc_get_status_and_datetime
	ldrb	r0, [r4]
	bl	bcd_to_hex
	cmp	r0, #0
	beq	.L115	@cond_branch
	ldrb	r0, [r4]
	bl	bcd_to_hex
	cmp	r0, #0x1
	bne	.L114	@cond_branch
.L115:
	ldrb	r0, [r4]
	bl	bcd_to_hex
	add	r1, r0, #0
	cmp	r1, #0x1
	bne	.L116	@cond_branch
	mov	r0, #0x2
	strb	r0, [r4]
	strb	r1, [r4, #0x1]
	strb	r0, [r4, #0x2]
	add	r0, r4, #0
	bl	rtc_set_datetime
	b	.L114
.L121:
	.align	2, 0
.L120:
	.word	sRtcInfoWork
.L116:
	add	r0, r4, #0
	bl	rtc_is_past_feb_28_2000
	cmp	r0, #0x1
	bne	.L118	@cond_branch
	add	r0, r4, #0
	bl	sii_rtc_inc_day
	add	r0, r4, #0
	bl	sii_rtc_inc
	b	.L119
.L118:
	add	r0, r4, #0
	bl	sii_rtc_inc
.L119:
	ldr	r0, .L122
	bl	rtc_set_datetime
.L114:
	pop	{r4}
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	sRtcInfoWork
.Lfe25:
	.size	 rtc_maincb_fix_date,.Lfe25-rtc_maincb_fix_date
	.comm	gTimeSinceBerryUpdate, 8	@ 8
	.comm	gRtcUTCTime, 8	@ 8

	.lcomm	sRtcProbeStatus,2

	.lcomm	sRtcInfoBuffer,12

	.lcomm	sRtcProbeCode,1

	.lcomm	sImeBak,2

	.lcomm	sRtcInfoWork,12
.text
	.align	2, 0

