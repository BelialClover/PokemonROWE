@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gSharedMem
	.section ewram_data,"aw"
	.type	 gSharedMem,object
	.size	 gSharedMem,32768
gSharedMem:
	.space	32768
	.globl	gBerryFixGameCode
	.section .rodata
	.align	2, 0
	.type	 gBerryFixGameCode,object
	.size	 gBerryFixGameCode,5
gBerryFixGameCode:
	.ascii	"AGBJ\000"
	.globl	gIntrFuncPointers
	.align	2, 0
	.type	 gIntrFuncPointers,object
gIntrFuncPointers:
	.word	dummy_intr_0
	.word	dummy_intr_1
	.word	dummy_intr_0
	.word	dummy_intr_0
	.word	dummy_intr_0
	.word	dummy_intr_0
	.word	dummy_intr_0
	.word	dummy_intr_0
	.word	dummy_intr_0
	.word	dummy_intr_0
	.word	0x0
	.word	0x0
	.word	0x0
	.size	 gIntrFuncPointers,52
	.globl	gVersionData
	.type	 gVersionData,object
gVersionData:
	.byte	0x4a
	.byte	0x1
	.byte	0x45
	.byte	0x2
	.byte	0x44
	.byte	0x1
	.byte	0x46
	.byte	0x1
	.byte	0x49
	.byte	0x1
	.byte	0x53
	.byte	0x1
	.size	 gVersionData,12
	.globl	gRubyTitleAndCode
	.align	2, 0
	.type	 gRubyTitleAndCode,object
	.size	 gRubyTitleAndCode,16
gRubyTitleAndCode:
	.ascii	"POKEMON RUBYAXV\000"
	.globl	gSapphireTitleAndCode
	.align	2, 0
	.type	 gSapphireTitleAndCode,object
	.size	 gSapphireTitleAndCode,16
gSapphireTitleAndCode:
	.ascii	"POKEMON SAPPAXP\000"
	.globl	sDebugPals
	.align	1, 0
	.type	 sDebugPals,object
	.size	 sDebugPals,40
sDebugPals:
	.short	0x0
	.short	0x1f
	.short	0x3e0
	.short	0x7c00
	.space	32
	.globl	sDebugDigitsGfx
	.align	1, 0
	.type	 sDebugDigitsGfx,object
sDebugDigitsGfx:
	.short	0x1100
	.short	0x1
	.short	0x10
	.short	0x11
	.short	0x11
	.short	0x110
	.short	0x11
	.short	0x110
	.short	0x11
	.short	0x110
	.short	0x110
	.short	0x10
	.short	0x1100
	.short	0x1
	.short	0x0
	.short	0x0
	.short	0x1000
	.short	0x1
	.short	0x1100
	.short	0x1
	.short	0x1110
	.short	0x1
	.short	0x1000
	.short	0x1
	.short	0x1000
	.short	0x1
	.short	0x1000
	.short	0x1
	.short	0x1000
	.short	0x1
	.short	0x0
	.short	0x0
	.short	0x1110
	.short	0x11
	.short	0x11
	.short	0x110
	.short	0x11
	.short	0x110
	.short	0x1000
	.short	0x11
	.short	0x1110
	.short	0x0
	.short	0x11
	.short	0x0
	.short	0x1111
	.short	0x111
	.short	0x0
	.short	0x0
	.short	0x1110
	.short	0x111
	.short	0x0
	.short	0x11
	.short	0x1000
	.short	0x1
	.short	0x1100
	.short	0x11
	.short	0x0
	.short	0x110
	.short	0x11
	.short	0x110
	.short	0x1110
	.short	0x11
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x11
	.short	0x1000
	.short	0x11
	.short	0x1100
	.short	0x11
	.short	0x110
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x1111
	.short	0x111
	.short	0x0
	.short	0x11
	.short	0x0
	.short	0x0
	.short	0x1111
	.short	0x11
	.short	0x11
	.short	0x0
	.short	0x11
	.short	0x0
	.short	0x1111
	.short	0x11
	.short	0x0
	.short	0x110
	.short	0x11
	.short	0x110
	.short	0x1110
	.short	0x11
	.short	0x0
	.short	0x0
	.short	0x1100
	.short	0x11
	.short	0x110
	.short	0x0
	.short	0x11
	.short	0x0
	.short	0x1111
	.short	0x11
	.short	0x11
	.short	0x110
	.short	0x11
	.short	0x110
	.short	0x1110
	.short	0x11
	.short	0x0
	.short	0x0
	.short	0x1111
	.short	0x111
	.short	0x0
	.short	0x111
	.short	0x1000
	.short	0x11
	.short	0x1100
	.short	0x1
	.short	0x1100
	.short	0x0
	.short	0x1100
	.short	0x0
	.short	0x1100
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1110
	.short	0x11
	.short	0x11
	.short	0x110
	.short	0x11
	.short	0x110
	.short	0x1110
	.short	0x11
	.short	0x11
	.short	0x110
	.short	0x11
	.short	0x110
	.short	0x1110
	.short	0x11
	.short	0x0
	.short	0x0
	.short	0x1110
	.short	0x11
	.short	0x11
	.short	0x110
	.short	0x11
	.short	0x110
	.short	0x1110
	.short	0x111
	.short	0x0
	.short	0x110
	.short	0x0
	.short	0x11
	.short	0x1110
	.short	0x1
	.short	0x0
	.short	0x0
	.size	 sDebugDigitsGfx,320
.text
	.align	2, 0
	.globl	AgbMain
	.type	 AgbMain,function
	.thumb_func
AgbMain:
	push	{lr}
	mov	r0, #0x1e
	bl	RegisterRamReset
	ldr	r1, .L7
	ldr	r0, .L7+0x4
	str	r0, [r1]
	ldr	r0, .L7+0x8
	str	r0, [r1, #0x4]
	ldr	r0, .L7+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	ldr	r0, .L7+0x10
	str	r0, [r1]
	ldr	r2, .L7+0x14
	str	r2, [r1, #0x4]
	ldr	r0, .L7+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	ldr	r0, .L7+0x1c
	str	r2, [r0]
	ldr	r3, .L7+0x20
	mov	r0, #0x1
	strh	r0, [r3]
	ldr	r0, .L7+0x24
	ldrb	r0, [r0]
	cmp	r0, #0x96
	bne	.L3	@cond_branch
	ldr	r0, .L7+0x28
	ldr	r1, .L7+0x2c
	ldr	r2, [r0]
	ldr	r0, [r1]
	cmp	r2, r0
	bne	.L3	@cond_branch
	ldrh	r0, [r3]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	add	r1, r2, #0
	orr	r0, r0, r1
	strh	r0, [r3]
.L3:
	ldr	r1, .L7+0x30
	mov	r0, #0x8
	strh	r0, [r1]
	ldr	r1, .L7+0x34
	mov	r0, #0x1
	strh	r0, [r1]
	bl	msg_load_gfx
	ldr	r0, .L7+0x38
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L7+0x3c
	str	r1, [r0]
.L4:
	bl	VBlankIntrWait
	bl	ReadKeys
	ldr	r0, .L7+0x38
	ldr	r1, .L7+0x40
	ldr	r2, .L7+0x44
	bl	main_callback
	b	.L4
.L8:
	.align	2, 0
.L7:
	.word	0x40000d4
	.word	gIntrFuncPointers
	.word	gIntrTable
	.word	-0x7bfffff3
	.word	IntrMain
	.word	gIntrVector
	.word	-0x7bffffc0
	.word	0x3007ffc
	.word	0x4000200
	.word	0x80000b2
	.word	0x80000ac
	.word	gBerryFixGameCode
	.word	0x4000004
	.word	0x4000208
	.word	gMainCallbackState
	.word	gUnknown_3001194
	.word	gUnknown_30011A0
	.word	gSharedMem
.Lfe1:
	.size	 AgbMain,.Lfe1-AgbMain
	.align	2, 0
	.globl	dummy_intr_1
	.type	 dummy_intr_1,function
	.thumb_func
dummy_intr_1:
	bx	lr
.Lfe2:
	.size	 dummy_intr_1,.Lfe2-dummy_intr_1
	.align	2, 0
	.globl	dummy_intr_0
	.type	 dummy_intr_0,function
	.thumb_func
dummy_intr_0:
	bx	lr
.Lfe3:
	.size	 dummy_intr_0,.Lfe3-dummy_intr_0
	.align	2, 0
	.globl	ReadKeys
	.type	 ReadKeys,function
	.thumb_func
ReadKeys:
	push	{r4, lr}
	ldr	r0, .L12
	ldrh	r0, [r0]
	ldr	r2, .L12+0x4
	add	r1, r2, #0
	eor	r1, r1, r0
	ldr	r4, .L12+0x8
	ldr	r3, .L12+0xc
	ldrh	r2, [r3]
	add	r0, r1, #0
	bic	r0, r0, r2
	strh	r0, [r4]
	strh	r1, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	0x4000130
	.word	0x3ff
	.word	gNewKeys
	.word	gHeldKeys
.Lfe4:
	.size	 ReadKeys,.Lfe4-ReadKeys
	.align	2, 0
	.globl	fill_palette
	.type	 fill_palette,function
	.thumb_func
fill_palette:
	push	{lr}
	add	r3, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L16	@cond_branch
	lsl	r2, r2, #0xc
.L18:
	ldrb	r0, [r3]
	orr	r0, r0, r2
	strh	r0, [r1]
	add	r3, r3, #0x1
	add	r1, r1, #0x2
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L18	@cond_branch
.L16:
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 fill_palette,.Lfe5-fill_palette
	.align	2, 0
	.globl	berry_fix_memcmp
	.type	 berry_fix_memcmp,function
	.thumb_func
berry_fix_memcmp:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r3, #0x0
	cmp	r3, r2
	bcs	.L22	@cond_branch
.L24:
	add	r0, r5, r3
	add	r1, r4, r3
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L23	@cond_branch
	mov	r0, #0x0
	b	.L27
.L23:
	add	r3, r3, #0x1
	cmp	r3, r2
	bcc	.L24	@cond_branch
.L22:
	mov	r0, #0x1
.L27:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 berry_fix_memcmp,.Lfe6-berry_fix_memcmp
	.align	2, 0
	.globl	validate_rom_header_internal
	.type	 validate_rom_header_internal,function
	.thumb_func
validate_rom_header_internal:
	push	{r4, r5, r6, lr}
	ldr	r0, .L47
	ldrb	r3, [r0]
	add	r0, r0, #0xd
	ldrb	r4, [r0]
	mov	r5, #0x1
	neg	r5, r5
	mov	r2, #0x0
	ldr	r1, .L47+0x4
	sub	r0, r1, #0x1
	b	.L46
.L48:
	.align	2, 0
.L47:
	.word	0x80000af
	.word	gVersionData+0x1
.L31:
	add	r1, r1, #0x2
	add	r0, r0, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x5
	bhi	.L30	@cond_branch
.L46:
	ldrb	r6, [r0]
	cmp	r3, r6
	bne	.L31	@cond_branch
	mov	r5, #0x1
	ldrb	r1, [r1]
	cmp	r4, r1
	blt	.L30	@cond_branch
	mov	r5, #0x0
.L30:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	beq	.L37	@cond_branch
	ldr	r4, .L49
	ldr	r1, .L49+0x4
	add	r0, r4, #0
	mov	r2, #0xf
	bl	berry_fix_memcmp
	cmp	r0, #0x1
	bne	.L38	@cond_branch
	cmp	r5, #0
	bne	.L39	@cond_branch
	mov	r0, #0x5
	b	.L45
.L50:
	.align	2, 0
.L49:
	.word	0x80000a0
	.word	gRubyTitleAndCode
.L39:
	ldr	r1, .L51
	mov	r0, #0x2
	str	r0, [r1]
	mov	r0, #0x3
	b	.L45
.L52:
	.align	2, 0
.L51:
	.word	gGameVersion
.L38:
	ldr	r1, .L53
	add	r0, r4, #0
	mov	r2, #0xf
	bl	berry_fix_memcmp
	add	r1, r0, #0
	cmp	r1, #0x1
	bne	.L37	@cond_branch
	cmp	r5, #0
	bne	.L43	@cond_branch
	mov	r0, #0x4
	b	.L45
.L54:
	.align	2, 0
.L53:
	.word	gSapphireTitleAndCode
.L43:
	ldr	r0, .L55
	str	r1, [r0]
	mov	r0, #0x2
	b	.L45
.L56:
	.align	2, 0
.L55:
	.word	gGameVersion
.L37:
	mov	r0, #0x6
.L45:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 validate_rom_header_internal,.Lfe7-validate_rom_header_internal
	.align	2, 0
	.globl	validate_rom_header
	.type	 validate_rom_header,function
	.thumb_func
validate_rom_header:
	push	{lr}
	ldr	r0, .L61
	ldrb	r0, [r0]
	cmp	r0, #0x30
	bne	.L58	@cond_branch
	ldr	r0, .L61+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x31
	bne	.L58	@cond_branch
	ldr	r0, .L61+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x96
	bne	.L58	@cond_branch
	bl	validate_rom_header_internal
	b	.L60
.L62:
	.align	2, 0
.L61:
	.word	0x80000b0
	.word	0x80000b1
	.word	0x80000b2
.L58:
	mov	r0, #0x6
.L60:
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 validate_rom_header,.Lfe8-validate_rom_header
	.align	2, 0
	.globl	main_callback
	.type	 main_callback,function
	.thumb_func
main_callback:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldr	r0, [r4]
	cmp	r0, #0xb
	bls	.LCB444
	b	.L64	@long jump
.LCB444:
	lsl	r0, r0, #0x2
	ldr	r1, .L110
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L111:
	.align	2, 0
.L110:
	.word	.L104
	.align	2, 0
	.align	2, 0
.L104:
	.word	.L65
	.word	.L75
	.word	.L78
	.word	.L81
	.word	.L84
	.word	.L91
	.word	.L101
	.word	.L102
	.word	.L98
	.word	.L92
	.word	.L95
	.word	.L103
.L65:
	mov	r0, #0x0
	bl	msg_display
	ldr	r1, .L112
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0xb3
	bgt	.LCB470
	b	.L64	@long jump
.LCB470:
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r1, .L112+0x4
	str	r0, [r1]
	bl	validate_rom_header
	sub	r0, r0, #0x2
	cmp	r0, #0x4
	bls	.LCB481
	b	.L64	@long jump
.LCB481:
	lsl	r0, r0, #0x2
	ldr	r1, .L112+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L113:
	.align	2, 0
.L112:
	.word	gInitialWaitTimer
	.word	gUpdateSuccessful
	.word	.L73
	.align	2, 0
	.align	2, 0
.L73:
	.word	.L89
	.word	.L89
	.word	.L106
	.word	.L106
	.word	.L96
.L75:
	bl	rtc_maincb_is_rtc_working
	cmp	r0, #0
	beq	.L96	@cond_branch
	b	.L89
.L78:
	bl	flash_maincb_ident_is_valid
.L109:
	cmp	r0, #0x1
	beq	.L89	@cond_branch
	b	.L96
.L81:
	mov	r0, #0x0
	bl	flash_maincb_read_save
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L109
.L84:
	mov	r0, sp
	bl	rtc_maincb_is_time_since_last_berry_update_positive
	cmp	r0, #0x1
	bne	.L85	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L89	@cond_branch
	b	.L107
.L85:
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L89	@cond_branch
	mov	r0, #0x7
	str	r0, [r4]
	b	.L64
.L89:
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
	b	.L64
.L91:
	bl	rtc_maincb_fix_date
	ldr	r2, .L114
	ldr	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	str	r0, [r2]
.L107:
	mov	r0, #0x9
	str	r0, [r4]
	b	.L64
.L115:
	.align	2, 0
.L114:
	.word	gUpdateSuccessful
.L92:
	bl	flash_maincb_check_need_reset_pacifidlog_tm
	cmp	r0, #0x1
	beq	.L108	@cond_branch
	mov	r0, #0xa
	str	r0, [r4]
	b	.L64
.L95:
	mov	r0, #0x4
	bl	msg_display
	bl	flash_maincb_reset_pacifidlog_tm
	add	r2, r0, #0
	cmp	r2, #0x1
	bne	.L96	@cond_branch
	ldr	r0, .L116
	ldr	r1, [r0]
	orr	r1, r1, r2
	str	r1, [r0]
.L108:
	mov	r0, #0x8
	str	r0, [r4]
	b	.L64
.L117:
	.align	2, 0
.L116:
	.word	gUpdateSuccessful
.L96:
	mov	r0, #0xb
	str	r0, [r4]
	b	.L64
.L98:
	ldr	r0, .L118
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L99	@cond_branch
.L106:
	mov	r0, #0x6
	str	r0, [r4]
	b	.L64
.L119:
	.align	2, 0
.L118:
	.word	gUpdateSuccessful
.L99:
	mov	r0, #0x1
	bl	msg_display
	b	.L64
.L101:
	mov	r0, #0x3
	bl	msg_display
	b	.L64
.L102:
	mov	r0, #0x2
	bl	msg_display
	b	.L64
.L103:
	mov	r0, #0x2
	bl	msg_display
.L64:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 main_callback,.Lfe9-main_callback
	.align	2, 0
	.globl	DBG_LoadDigitsPal
	.type	 DBG_LoadDigitsPal,function
	.thumb_func
DBG_LoadDigitsPal:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r3, .L126
	mov	r1, sp
	ldr	r2, .L126+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L126+0x8
	mov	r0, sp
	str	r0, [r1]
	mov	r0, #0xa0
	lsl	r0, r0, #0x13
	str	r0, [r1, #0x4]
	ldr	r0, .L126+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	ldr	r2, .L126+0x10
	mov	r1, #0x3
.L124:
	ldrh	r0, [r2]
	strh	r0, [r3]
	add	r3, r3, #0x20
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L124	@cond_branch
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L127:
	.align	2, 0
.L126:
	.word	0x5000002
	.word	0x7fff
	.word	0x40000d4
	.word	-0x7effff00
	.word	sDebugPals
.Lfe10:
	.size	 DBG_LoadDigitsPal,.Lfe10-DBG_LoadDigitsPal
	.align	2, 0
	.globl	DBG_LoadDigits
	.type	 DBG_LoadDigits,function
	.thumb_func
DBG_LoadDigits:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	ldr	r2, .L129
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L129+0x4
	str	r1, [r0]
	ldr	r1, .L129+0x8
	str	r1, [r0, #0x4]
	ldr	r1, .L129+0xc
	str	r1, [r0, #0x8]
	ldr	r1, [r0, #0x8]
	ldr	r1, .L129+0x10
	str	r1, [r0]
	ldr	r1, .L129+0x14
	str	r1, [r0, #0x4]
	ldr	r1, .L129+0x18
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	bl	DBG_LoadDigitsPal
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	0x1111
	.word	0x40000d4
	.word	0x6008420
	.word	-0x7efff400
	.word	sDebugDigitsGfx
	.word	0x6008600
	.word	-0x7bffff80
.Lfe11:
	.size	 DBG_LoadDigits,.Lfe11-DBG_LoadDigits
	.comm	gIntrTable, 64	@ 64
	.comm	gHeldKeys, 4	@ 2
	.comm	gNewKeys, 4	@ 2
	.comm	gIntrVector, 256	@ 256
	.comm	gUpdateSuccessful, 4	@ 4
	.comm	gUnknown_3001194, 4	@ 4
	.comm	gUnknown_30011A0, 100	@ 100
	.comm	gMainCallbackState, 4	@ 4
	.comm	gGameVersion, 4	@ 4

	.lcomm	gInitialWaitTimer,4
.text
	.align	2, 0

