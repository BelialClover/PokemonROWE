@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sEscalatorAnim_TaskId,object
	.size	 sEscalatorAnim_TaskId,1
sEscalatorAnim_TaskId:
	.byte	0x0
	.section .rodata
	.align	1, 0
	.type	 sEscalatorMetatiles_1F_0,object
	.size	 sEscalatorMetatiles_1F_0,6
sEscalatorMetatiles_1F_0:
	.short	0x284
	.short	0x282
	.short	0x280
	.align	1, 0
	.type	 sEscalatorMetatiles_1F_1,object
	.size	 sEscalatorMetatiles_1F_1,6
sEscalatorMetatiles_1F_1:
	.short	0x285
	.short	0x283
	.short	0x281
	.align	1, 0
	.type	 sEscalatorMetatiles_1F_2,object
	.size	 sEscalatorMetatiles_1F_2,6
sEscalatorMetatiles_1F_2:
	.short	0x28c
	.short	0x28a
	.short	0x288
	.align	1, 0
	.type	 sEscalatorMetatiles_1F_3,object
	.size	 sEscalatorMetatiles_1F_3,6
sEscalatorMetatiles_1F_3:
	.short	0x28d
	.short	0x28b
	.short	0x289
	.align	1, 0
	.type	 sEscalatorMetatiles_2F_0,object
	.size	 sEscalatorMetatiles_2F_0,6
sEscalatorMetatiles_2F_0:
	.short	0x2a0
	.short	0x2a2
	.short	0x2a4
	.align	1, 0
	.type	 sEscalatorMetatiles_2F_1,object
	.size	 sEscalatorMetatiles_2F_1,6
sEscalatorMetatiles_2F_1:
	.short	0x2a1
	.short	0x2a3
	.short	0x2a5
	.align	1, 0
	.type	 sEscalatorMetatiles_2F_2,object
	.size	 sEscalatorMetatiles_2F_2,6
sEscalatorMetatiles_2F_2:
	.short	0x2a8
	.short	0x2aa
	.short	0x2ac
.text
	.align	2, 0
	.type	 SetEscalatorMetatile,function
	.thumb_func
SetEscalatorMetatile:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	mov	r9, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	sl, r2
	ldr	r2, .L31
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r0, [r1, #0x10]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r1, #0x12]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldrh	r4, [r1, #0xa]
	mov	r2, #0xc
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L3	@cond_branch
	mov	r2, #0x0
	lsl	r5, r5, #0x10
	str	r5, [sp, #0xc]
	lsl	r0, r3, #0x10
	lsl	r1, r4, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp]
	asr	r1, r1, #0x10
	str	r1, [sp, #0x4]
	lsl	r0, r1, #0x1
	mov	r1, r9
	add	r7, r0, r1
.L7:
	mov	r4, #0x0
	lsl	r2, r2, #0x10
	mov	r8, r2
	asr	r0, r2, #0x10
	ldr	r2, [sp]
	add	r6, r2, r0
.L11:
	ldr	r0, [sp, #0xc]
	asr	r1, r0, #0x10
	lsl	r4, r4, #0x10
	asr	r0, r4, #0x10
	add	r5, r1, r0
	add	r0, r5, #0
	add	r1, r6, #0
	bl	MapGridGetMetatileIdAt
	mov	r2, #0x0
	ldrsh	r1, [r7, r2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r1, r0
	bne	.L10	@cond_branch
	ldr	r0, [sp, #0x4]
	cmp	r0, #0x2
	beq	.L13	@cond_branch
	ldrh	r0, [r7, #0x2]
	mov	r2, sl
	orr	r2, r2, r0
	add	r0, r5, #0
	add	r1, r6, #0
	bl	MapGridSetMetatileIdAt
	b	.L10
.L32:
	.align	2, 0
.L31:
	.word	gTasks
.L13:
	mov	r1, r9
	ldrh	r0, [r1]
	mov	r2, sl
	orr	r2, r2, r0
	add	r0, r5, #0
	add	r1, r6, #0
	bl	MapGridSetMetatileIdAt
.L10:
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r0, r4, r2
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L11	@cond_branch
	add	r0, r2, #0
	add	r0, r0, r8
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L7	@cond_branch
	b	.L17
.L3:
	mov	r2, #0x0
	lsl	r5, r5, #0x10
	str	r5, [sp, #0xc]
	lsl	r0, r3, #0x10
	lsl	r1, r4, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp, #0x8]
	asr	r7, r1, #0x10
.L21:
	mov	r4, #0x0
	lsl	r2, r2, #0x10
	mov	r8, r2
	asr	r0, r2, #0x10
	ldr	r1, [sp, #0x8]
	add	r6, r1, r0
.L25:
	ldr	r2, [sp, #0xc]
	asr	r1, r2, #0x10
	lsl	r4, r4, #0x10
	asr	r0, r4, #0x10
	add	r5, r1, r0
	add	r0, r5, #0
	add	r1, r6, #0
	bl	MapGridGetMetatileIdAt
	mov	r1, #0x2
	sub	r1, r1, r7
	lsl	r1, r1, #0x1
	add	r1, r1, r9
	mov	r2, #0x0
	ldrsh	r1, [r1, r2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r1, r0
	bne	.L24	@cond_branch
	cmp	r7, #0x2
	beq	.L27	@cond_branch
	mov	r0, #0x1
	sub	r0, r0, r7
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r2, sl
	orr	r2, r2, r0
	add	r0, r5, #0
	add	r1, r6, #0
	bl	MapGridSetMetatileIdAt
	b	.L24
.L27:
	mov	r1, r9
	ldrh	r0, [r1, #0x4]
	mov	r2, sl
	orr	r2, r2, r0
	add	r0, r5, #0
	add	r1, r6, #0
	bl	MapGridSetMetatileIdAt
.L24:
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r0, r4, r2
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L25	@cond_branch
	add	r0, r2, #0
	add	r0, r0, r8
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L21	@cond_branch
.L17:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 SetEscalatorMetatile,.Lfe1-SetEscalatorMetatile
	.align	2, 0
	.type	 Task_DrawEscalator,function
	.thumb_func
Task_DrawEscalator:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	ldr	r1, .L47
	add	r4, r0, r1
	mov	r0, #0x1
	strh	r0, [r4, #0x6]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x6
	bhi	.L34	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L47+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L48:
	.align	2, 0
.L47:
	.word	gTasks+0x8
	.word	.L42
	.align	2, 0
	.align	2, 0
.L42:
	.word	.L35
	.word	.L36
	.word	.L37
	.word	.L38
	.word	.L39
	.word	.L40
	.word	.L41
.L35:
	ldr	r1, .L49
	b	.L45
.L50:
	.align	2, 0
.L49:
	.word	sEscalatorMetatiles_1F_0
.L36:
	ldr	r1, .L51
	b	.L45
.L52:
	.align	2, 0
.L51:
	.word	sEscalatorMetatiles_1F_1
.L37:
	ldr	r1, .L53
	b	.L46
.L54:
	.align	2, 0
.L53:
	.word	sEscalatorMetatiles_1F_2
.L38:
	ldr	r1, .L55
	b	.L45
.L56:
	.align	2, 0
.L55:
	.word	sEscalatorMetatiles_1F_3
.L39:
	ldr	r1, .L57
.L46:
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r0, r3, #0
	bl	SetEscalatorMetatile
	b	.L34
.L58:
	.align	2, 0
.L57:
	.word	sEscalatorMetatiles_2F_0
.L40:
	ldr	r1, .L59
.L45:
	add	r0, r3, #0
	mov	r2, #0x0
	bl	SetEscalatorMetatile
	b	.L34
.L60:
	.align	2, 0
.L59:
	.word	sEscalatorMetatiles_2F_1
.L41:
	ldr	r1, .L61
	add	r0, r3, #0
	mov	r2, #0x0
	bl	SetEscalatorMetatile
.L34:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	mov	r1, #0x7
	and	r0, r0, r1
	strh	r0, [r4]
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L44	@cond_branch
	bl	DrawWholeMapView
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	add	r0, r0, #0x1
	mov	r1, #0x3
	bl	__modsi3
	strh	r0, [r4, #0x2]
	strh	r5, [r4, #0x6]
.L44:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	sEscalatorMetatiles_2F_2
.Lfe2:
	.size	 Task_DrawEscalator,.Lfe2-Task_DrawEscalator
	.align	2, 0
	.type	 CreateEscalatorTask,function
	.thumb_func
CreateEscalatorTask:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r6, .L64
	add	r0, r6, #0
	mov	r1, #0x0
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L64+0x4
	add	r7, r0, r1
	add	r0, r7, #0
	add	r0, r0, #0x8
	add	r1, r7, #0
	add	r1, r1, #0xa
	bl	PlayerGetDestCoords
	mov	r0, #0x0
	strh	r0, [r7]
	strh	r0, [r7, #0x2]
	strh	r5, [r7, #0x4]
	add	r0, r4, #0
	bl	_call_via_r6
	add	r0, r4, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L65:
	.align	2, 0
.L64:
	.word	Task_DrawEscalator
	.word	gTasks+0x8
.Lfe3:
	.size	 CreateEscalatorTask,.Lfe3-CreateEscalatorTask
	.align	2, 0
	.globl	StartEscalator
	.type	 StartEscalator,function
	.thumb_func
StartEscalator:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	CreateEscalatorTask
	ldr	r1, .L67
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	sEscalatorAnim_TaskId
.Lfe4:
	.size	 StartEscalator,.Lfe4-StartEscalator
	.align	2, 0
	.globl	StopEscalator
	.type	 StopEscalator,function
	.thumb_func
StopEscalator:
	push	{lr}
	ldr	r0, .L70
	ldrb	r0, [r0]
	bl	DestroyTask
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	sEscalatorAnim_TaskId
.Lfe5:
	.size	 StopEscalator,.Lfe5-StopEscalator
	.align	2, 0
	.globl	IsEscalatorMoving
	.type	 IsEscalatorMoving,function
	.thumb_func
IsEscalatorMoving:
	push	{lr}
	ldr	r2, .L76
	ldr	r0, .L76+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	mov	r2, #0xe
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L73	@cond_branch
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x2
	bne	.L73	@cond_branch
	mov	r0, #0x0
	b	.L75
.L77:
	.align	2, 0
.L76:
	.word	gTasks
	.word	sEscalatorAnim_TaskId
.L73:
	mov	r0, #0x1
.L75:
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 IsEscalatorMoving,.Lfe6-IsEscalatorMoving
.text
	.align	2, 0

