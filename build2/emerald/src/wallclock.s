@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sHand_Gfx,object
sHand_Gfx:
	.word	0x120010
	.word	-0xfffffc1
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f02
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe5fff
	.word	-0x20fcff58
	.word	-0xf00fd00
	.word	0xf00001a
	.word	-0x2fcff41
	.word	0x1f01cf0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	0x1001f001
	.word	-0xf39efff
	.word	0x340ff03
	.word	0x3b014f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xf000fff
	.word	-0xffd
	.word	-0xffc10
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xf290fff
	.word	-0xffc0f01
	.word	0x1f0ffff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xf000f01
	.word	-0xf000fec
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0x4f000f21
	.word	0x320f003
	.word	0x34018f0
	.word	0x3100405
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	-0x153afe10
	.word	-0x215f14c0
	.word	0x316fb15
	.word	-0x6f0018a0
	.word	-0xf04eae4
	.word	-0xffe0f06
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf01fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x4501f001
	.word	0x75efddeb
	.word	0x1403b007
	.word	0x355ddef
	.word	0x4df003f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x3f0fff5
	.word	-0xc0f0090
	.word	0x1f0fff0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x3f0ffff
	.word	-0xf0010
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xf000fff
	.word	-0x21b6fd
	.word	0xf78f3f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0x5ffe6f80
	.word	-0x55fff556
	.word	0xeaaaa
	.word	-0xf5ffff6
	.word	0x1f101c
	.word	0xbca002
	.word	0x100a022
	.word	0x2bf02710
	.word	-0x5555b470
	.word	0x2800a047
	.word	-0xff5ff60
	.word	0x2001f020
	.word	-0xf5588ff
	.word	-0x5f800f81
	.word	0x2b000a7f
	.word	0x7ff027f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x110
	.size	 sHand_Gfx,636
	.align	1, 0
	.type	 sTextPrompt_Pal,object
sTextPrompt_Pal:
	.short	0x0
	.short	0x5ec9
	.short	0x7fff
	.short	0x0
	.size	 sTextPrompt_Pal,8
	.align	2, 0
	.type	 sWindowTemplates,object
sWindowTemplates:
	.byte	0x0
	.byte	0x3
	.byte	0x11
	.byte	0x18
	.byte	0x2
	.byte	0xe
	.short	0x200
	.byte	0x2
	.byte	0x18
	.byte	0x10
	.byte	0x6
	.byte	0x2
	.byte	0xc
	.short	0x230
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sWindowTemplates,24
	.align	2, 0
	.type	 sWindowTemplate_ConfirmYesNo,object
	.size	 sWindowTemplate_ConfirmYesNo,8
sWindowTemplate_ConfirmYesNo:
	.byte	0x0
	.byte	0x18
	.byte	0x9
	.byte	0x5
	.byte	0x4
	.byte	0xe
	.short	0x23c
	.align	2, 0
	.type	 sBgTemplates,object
	.size	 sBgTemplates,12
sBgTemplates:
	.byte	0xf8
	.byte	0x1
	.space	2
	.byte	0x86
	.byte	0x10
	.space	2
	.byte	0x73
	.byte	0x20
	.space	2
	.align	2, 0
	.type	 sSpriteSheet_ClockHand,object
	.size	 sSpriteSheet_ClockHand,8
sSpriteSheet_ClockHand:
	.word	sHand_Gfx
	.short	0x2000
	.short	0x1000
	.type	 sUnused,object
	.size	 sUnused,8
sUnused:
	.byte	0x0
	.space	7
	.align	2, 0
	.type	 sSpritePalettes_Clock,object
sSpritePalettes_Clock:
	.word	gWallClockMale_Pal
	.short	0x1000
	.space	2
	.word	gWallClockFemale_Pal
	.short	0x1001
	.space	2
	.space	8
	.size	 sSpritePalettes_Clock,24
	.align	2, 0
	.type	 sOam_ClockHand,object
	.size	 sOam_ClockHand,8
sOam_ClockHand:
	.byte	0xa0
	.byte	0x0
	.space	1
	.byte	0xc0
	.space	1
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 sAnim_MinuteHand,object
sAnim_MinuteHand:
	.short	0x0
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_MinuteHand,8
	.align	2, 0
	.type	 sAnim_HourHand,object
sAnim_HourHand:
	.short	0x40
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_HourHand,8
	.align	2, 0
	.type	 sAnims_MinuteHand,object
sAnims_MinuteHand:
	.word	sAnim_MinuteHand
	.size	 sAnims_MinuteHand,4
	.align	2, 0
	.type	 sAnims_HourHand,object
sAnims_HourHand:
	.word	sAnim_HourHand
	.size	 sAnims_HourHand,4
	.align	2, 0
	.type	 sSpriteTemplate_MinuteHand,object
	.size	 sSpriteTemplate_MinuteHand,24
sSpriteTemplate_MinuteHand:
	.short	0x1000
	.short	0x1000
	.word	sOam_ClockHand
	.word	sAnims_MinuteHand
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_MinuteHand
	.align	2, 0
	.type	 sSpriteTemplate_HourHand,object
	.size	 sSpriteTemplate_HourHand,24
sSpriteTemplate_HourHand:
	.short	0x1000
	.short	0x1000
	.word	sOam_ClockHand
	.word	sAnims_HourHand
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HourHand
	.align	2, 0
	.type	 sOam_PeriodIndicator,object
	.size	 sOam_PeriodIndicator,8
sOam_PeriodIndicator:
	.byte	0xa0
	.byte	0x0
	.space	1
	.byte	0x40
	.space	1
	.byte	0xc
	.space	2
	.align	2, 0
	.type	 sAnim_PM,object
sAnim_PM:
	.short	0x84
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_PM,8
	.align	2, 0
	.type	 sAnim_AM,object
sAnim_AM:
	.short	0x80
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_AM,8
	.align	2, 0
	.type	 sAnims_PM,object
sAnims_PM:
	.word	sAnim_PM
	.size	 sAnims_PM,4
	.align	2, 0
	.type	 sAnims_AM,object
sAnims_AM:
	.word	sAnim_AM
	.size	 sAnims_AM,4
	.align	2, 0
	.type	 sSpriteTemplate_PM,object
	.size	 sSpriteTemplate_PM,24
sSpriteTemplate_PM:
	.short	0x1000
	.short	0x1000
	.word	sOam_PeriodIndicator
	.word	sAnims_PM
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_PMIndicator
	.align	2, 0
	.type	 sSpriteTemplate_AM,object
	.size	 sSpriteTemplate_AM,24
sSpriteTemplate_AM:
	.short	0x1000
	.short	0x1000
	.word	sOam_PeriodIndicator
	.word	sAnims_AM
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_AMIndicator
	.type	 sClockHandCoords,object
sClockHandCoords:
	.byte	0x0
	.byte	-0x18
	.byte	0x1
	.byte	-0x19
	.byte	0x1
	.byte	-0x19
	.byte	0x2
	.byte	-0x19
	.byte	0x2
	.byte	-0x19
	.byte	0x2
	.byte	-0x19
	.byte	0x3
	.byte	-0x18
	.byte	0x3
	.byte	-0x19
	.byte	0x4
	.byte	-0x19
	.byte	0x4
	.byte	-0x19
	.byte	0x4
	.byte	-0x19
	.byte	0x5
	.byte	-0x19
	.byte	0x5
	.byte	-0x19
	.byte	0x6
	.byte	-0x18
	.byte	0x6
	.byte	-0x18
	.byte	0x6
	.byte	-0x18
	.byte	0x7
	.byte	-0x18
	.byte	0x7
	.byte	-0x18
	.byte	0x7
	.byte	-0x18
	.byte	0x8
	.byte	-0x18
	.byte	0x8
	.byte	-0x18
	.byte	0x9
	.byte	-0x18
	.byte	0x9
	.byte	-0x18
	.byte	0xa
	.byte	-0x17
	.byte	0xa
	.byte	-0x17
	.byte	0xb
	.byte	-0x16
	.byte	0xb
	.byte	-0x16
	.byte	0xb
	.byte	-0x16
	.byte	0xc
	.byte	-0x16
	.byte	0xc
	.byte	-0x15
	.byte	0xd
	.byte	-0x15
	.byte	0xd
	.byte	-0x15
	.byte	0xd
	.byte	-0x15
	.byte	0xe
	.byte	-0x15
	.byte	0xe
	.byte	-0x15
	.byte	0xe
	.byte	-0x14
	.byte	0xe
	.byte	-0x14
	.byte	0xf
	.byte	-0x14
	.byte	0xf
	.byte	-0x13
	.byte	0x10
	.byte	-0x13
	.byte	0x10
	.byte	-0x13
	.byte	0x10
	.byte	-0x13
	.byte	0x10
	.byte	-0x12
	.byte	0x10
	.byte	-0x12
	.byte	0x11
	.byte	-0x12
	.byte	0x11
	.byte	-0x11
	.byte	0x11
	.byte	-0x11
	.byte	0x12
	.byte	-0x11
	.byte	0x12
	.byte	-0x11
	.byte	0x12
	.byte	-0x10
	.byte	0x12
	.byte	-0x10
	.byte	0x13
	.byte	-0x10
	.byte	0x13
	.byte	-0xf
	.byte	0x13
	.byte	-0xf
	.byte	0x14
	.byte	-0xf
	.byte	0x14
	.byte	-0xe
	.byte	0x14
	.byte	-0xe
	.byte	0x14
	.byte	-0xd
	.byte	0x14
	.byte	-0xd
	.byte	0x15
	.byte	-0xd
	.byte	0x15
	.byte	-0xd
	.byte	0x15
	.byte	-0xc
	.byte	0x16
	.byte	-0xc
	.byte	0x16
	.byte	-0xc
	.byte	0x16
	.byte	-0xb
	.byte	0x16
	.byte	-0xb
	.byte	0x16
	.byte	-0xa
	.byte	0x17
	.byte	-0xa
	.byte	0x17
	.byte	-0x9
	.byte	0x17
	.byte	-0x9
	.byte	0x17
	.byte	-0x9
	.byte	0x17
	.byte	-0x9
	.byte	0x17
	.byte	-0x8
	.byte	0x17
	.byte	-0x8
	.byte	0x17
	.byte	-0x7
	.byte	0x17
	.byte	-0x7
	.byte	0x17
	.byte	-0x6
	.byte	0x18
	.byte	-0x6
	.byte	0x18
	.byte	-0x6
	.byte	0x19
	.byte	-0x5
	.byte	0x19
	.byte	-0x5
	.byte	0x18
	.byte	-0x4
	.byte	0x19
	.byte	-0x4
	.byte	0x18
	.byte	-0x3
	.byte	0x19
	.byte	-0x3
	.byte	0x19
	.byte	-0x3
	.byte	0x19
	.byte	-0x2
	.byte	0x19
	.byte	-0x2
	.byte	0x18
	.byte	-0x1
	.byte	0x19
	.byte	-0x1
	.byte	0x18
	.byte	0x0
	.byte	0x18
	.byte	0x0
	.byte	0x18
	.byte	0x0
	.byte	0x18
	.byte	0x1
	.byte	0x18
	.byte	0x1
	.byte	0x19
	.byte	0x2
	.byte	0x18
	.byte	0x2
	.byte	0x19
	.byte	0x2
	.byte	0x18
	.byte	0x3
	.byte	0x18
	.byte	0x3
	.byte	0x19
	.byte	0x4
	.byte	0x18
	.byte	0x4
	.byte	0x18
	.byte	0x5
	.byte	0x18
	.byte	0x5
	.byte	0x18
	.byte	0x5
	.byte	0x18
	.byte	0x6
	.byte	0x17
	.byte	0x6
	.byte	0x17
	.byte	0x6
	.byte	0x17
	.byte	0x7
	.byte	0x17
	.byte	0x8
	.byte	0x17
	.byte	0x8
	.byte	0x17
	.byte	0x8
	.byte	0x17
	.byte	0x9
	.byte	0x17
	.byte	0x9
	.byte	0x17
	.byte	0xa
	.byte	0x16
	.byte	0xa
	.byte	0x16
	.byte	0xa
	.byte	0x16
	.byte	0xb
	.byte	0x16
	.byte	0xb
	.byte	0x16
	.byte	0xb
	.byte	0x16
	.byte	0xc
	.byte	0x15
	.byte	0xc
	.byte	0x15
	.byte	0xc
	.byte	0x15
	.byte	0xd
	.byte	0x14
	.byte	0xd
	.byte	0x14
	.byte	0xd
	.byte	0x13
	.byte	0xd
	.byte	0x13
	.byte	0xd
	.byte	0x13
	.byte	0xe
	.byte	0x13
	.byte	0xe
	.byte	0x13
	.byte	0xf
	.byte	0x13
	.byte	0xf
	.byte	0x12
	.byte	0xf
	.byte	0x12
	.byte	0x10
	.byte	0x11
	.byte	0x10
	.byte	0x11
	.byte	0x10
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x10
	.byte	0x11
	.byte	0x10
	.byte	0x12
	.byte	0x10
	.byte	0x12
	.byte	0xf
	.byte	0x12
	.byte	0xe
	.byte	0x12
	.byte	0xf
	.byte	0x13
	.byte	0xe
	.byte	0x13
	.byte	0xe
	.byte	0x13
	.byte	0xd
	.byte	0x13
	.byte	0xd
	.byte	0x14
	.byte	0xd
	.byte	0x14
	.byte	0xd
	.byte	0x14
	.byte	0xc
	.byte	0x14
	.byte	0xc
	.byte	0x14
	.byte	0xc
	.byte	0x15
	.byte	0xb
	.byte	0x15
	.byte	0xb
	.byte	0x15
	.byte	0xb
	.byte	0x15
	.byte	0xa
	.byte	0x15
	.byte	0xa
	.byte	0x16
	.byte	0xa
	.byte	0x16
	.byte	0x9
	.byte	0x16
	.byte	0x9
	.byte	0x16
	.byte	0x8
	.byte	0x16
	.byte	0x7
	.byte	0x16
	.byte	0x7
	.byte	0x17
	.byte	0x7
	.byte	0x17
	.byte	0x6
	.byte	0x17
	.byte	0x6
	.byte	0x17
	.byte	0x5
	.byte	0x17
	.byte	0x5
	.byte	0x17
	.byte	0x5
	.byte	0x18
	.byte	0x4
	.byte	0x18
	.byte	0x4
	.byte	0x18
	.byte	0x4
	.byte	0x18
	.byte	0x3
	.byte	0x18
	.byte	0x2
	.byte	0x18
	.byte	0x2
	.byte	0x18
	.byte	0x1
	.byte	0x18
	.byte	0x1
	.byte	0x18
	.byte	0x0
	.byte	0x18
	.byte	0x0
	.byte	0x18
	.byte	-0x1
	.byte	0x17
	.byte	0x0
	.byte	0x18
	.byte	0x0
	.byte	0x18
	.byte	-0x1
	.byte	0x18
	.byte	-0x1
	.byte	0x18
	.byte	-0x2
	.byte	0x18
	.byte	-0x2
	.byte	0x18
	.byte	-0x3
	.byte	0x18
	.byte	-0x3
	.byte	0x18
	.byte	-0x4
	.byte	0x18
	.byte	-0x4
	.byte	0x18
	.byte	-0x5
	.byte	0x18
	.byte	-0x5
	.byte	0x17
	.byte	-0x5
	.byte	0x17
	.byte	-0x6
	.byte	0x17
	.byte	-0x6
	.byte	0x17
	.byte	-0x7
	.byte	0x17
	.byte	-0x7
	.byte	0x17
	.byte	-0x7
	.byte	0x17
	.byte	-0x8
	.byte	0x17
	.byte	-0x8
	.byte	0x16
	.byte	-0x9
	.byte	0x16
	.byte	-0x9
	.byte	0x16
	.byte	-0xa
	.byte	0x16
	.byte	-0xa
	.byte	0x16
	.byte	-0xa
	.byte	0x15
	.byte	-0xb
	.byte	0x15
	.byte	-0xb
	.byte	0x15
	.byte	-0xb
	.byte	0x15
	.byte	-0xb
	.byte	0x14
	.byte	-0xc
	.byte	0x14
	.byte	-0xc
	.byte	0x14
	.byte	-0xd
	.byte	0x14
	.byte	-0xd
	.byte	0x14
	.byte	-0xd
	.byte	0x13
	.byte	-0xe
	.byte	0x13
	.byte	-0xe
	.byte	0x13
	.byte	-0xe
	.byte	0x13
	.byte	-0xe
	.byte	0x12
	.byte	-0xf
	.byte	0x12
	.byte	-0xf
	.byte	0x12
	.byte	-0xf
	.byte	0x11
	.byte	-0x10
	.byte	0x11
	.byte	-0x10
	.byte	0x11
	.byte	-0x11
	.byte	0x11
	.byte	-0x11
	.byte	0x10
	.byte	-0x11
	.byte	0x10
	.byte	-0x12
	.byte	0x10
	.byte	-0x11
	.byte	0xf
	.byte	-0x12
	.byte	0xf
	.byte	-0x12
	.byte	0xf
	.byte	-0x13
	.byte	0xf
	.byte	-0x13
	.byte	0xe
	.byte	-0x13
	.byte	0xe
	.byte	-0x13
	.byte	0xd
	.byte	-0x13
	.byte	0xd
	.byte	-0x14
	.byte	0xd
	.byte	-0x14
	.byte	0xc
	.byte	-0x14
	.byte	0xc
	.byte	-0x15
	.byte	0xc
	.byte	-0x15
	.byte	0xc
	.byte	-0x15
	.byte	0xb
	.byte	-0x15
	.byte	0xb
	.byte	-0x15
	.byte	0xa
	.byte	-0x15
	.byte	0xa
	.byte	-0x15
	.byte	0x9
	.byte	-0x16
	.byte	0x9
	.byte	-0x16
	.byte	0x9
	.byte	-0x16
	.byte	0x8
	.byte	-0x16
	.byte	0x8
	.byte	-0x16
	.byte	0x7
	.byte	-0x17
	.byte	0x7
	.byte	-0x17
	.byte	0x7
	.byte	-0x17
	.byte	0x6
	.byte	-0x17
	.byte	0x6
	.byte	-0x17
	.byte	0x5
	.byte	-0x18
	.byte	0x5
	.byte	-0x17
	.byte	0x4
	.byte	-0x17
	.byte	0x4
	.byte	-0x18
	.byte	0x4
	.byte	-0x18
	.byte	0x4
	.byte	-0x18
	.byte	0x3
	.byte	-0x18
	.byte	0x3
	.byte	-0x18
	.byte	0x2
	.byte	-0x18
	.byte	0x2
	.byte	-0x18
	.byte	0x1
	.byte	-0x18
	.byte	0x1
	.byte	-0x18
	.byte	0x1
	.byte	-0x18
	.byte	0x0
	.byte	-0x19
	.byte	0x0
	.byte	-0x18
	.byte	-0x1
	.byte	-0x19
	.byte	-0x1
	.byte	-0x18
	.byte	-0x1
	.byte	-0x18
	.byte	-0x2
	.byte	-0x18
	.byte	-0x2
	.byte	-0x18
	.byte	-0x3
	.byte	-0x18
	.byte	-0x3
	.byte	-0x18
	.byte	-0x4
	.byte	-0x18
	.byte	-0x4
	.byte	-0x18
	.byte	-0x4
	.byte	-0x18
	.byte	-0x5
	.byte	-0x18
	.byte	-0x5
	.byte	-0x18
	.byte	-0x6
	.byte	-0x18
	.byte	-0x6
	.byte	-0x17
	.byte	-0x6
	.byte	-0x17
	.byte	-0x7
	.byte	-0x17
	.byte	-0x7
	.byte	-0x17
	.byte	-0x8
	.byte	-0x17
	.byte	-0x8
	.byte	-0x17
	.byte	-0x9
	.byte	-0x17
	.byte	-0x9
	.byte	-0x16
	.byte	-0x9
	.byte	-0x16
	.byte	-0x9
	.byte	-0x16
	.byte	-0xa
	.byte	-0x16
	.byte	-0xa
	.byte	-0x15
	.byte	-0xa
	.byte	-0x15
	.byte	-0xb
	.byte	-0x16
	.byte	-0xb
	.byte	-0x16
	.byte	-0xc
	.byte	-0x15
	.byte	-0xc
	.byte	-0x15
	.byte	-0xd
	.byte	-0x15
	.byte	-0xd
	.byte	-0x14
	.byte	-0xd
	.byte	-0x15
	.byte	-0xe
	.byte	-0x14
	.byte	-0xe
	.byte	-0x14
	.byte	-0xe
	.byte	-0x13
	.byte	-0xe
	.byte	-0x13
	.byte	-0xf
	.byte	-0x13
	.byte	-0xf
	.byte	-0x12
	.byte	-0x10
	.byte	-0x12
	.byte	-0x10
	.byte	-0x12
	.byte	-0x10
	.byte	-0x12
	.byte	-0x11
	.byte	-0x12
	.byte	-0x11
	.byte	-0x11
	.byte	-0x11
	.byte	-0x11
	.byte	-0x12
	.byte	-0x11
	.byte	-0x12
	.byte	-0x10
	.byte	-0x12
	.byte	-0x10
	.byte	-0x12
	.byte	-0x10
	.byte	-0x13
	.byte	-0x10
	.byte	-0x13
	.byte	-0xf
	.byte	-0x13
	.byte	-0xf
	.byte	-0x13
	.byte	-0xf
	.byte	-0x14
	.byte	-0xe
	.byte	-0x14
	.byte	-0xe
	.byte	-0x14
	.byte	-0xe
	.byte	-0x15
	.byte	-0xd
	.byte	-0x15
	.byte	-0xd
	.byte	-0x15
	.byte	-0xd
	.byte	-0x15
	.byte	-0xc
	.byte	-0x15
	.byte	-0xc
	.byte	-0x16
	.byte	-0xb
	.byte	-0x16
	.byte	-0xb
	.byte	-0x16
	.byte	-0xb
	.byte	-0x16
	.byte	-0xa
	.byte	-0x16
	.byte	-0xa
	.byte	-0x16
	.byte	-0x9
	.byte	-0x16
	.byte	-0x9
	.byte	-0x17
	.byte	-0x9
	.byte	-0x17
	.byte	-0x8
	.byte	-0x17
	.byte	-0x8
	.byte	-0x17
	.byte	-0x7
	.byte	-0x17
	.byte	-0x7
	.byte	-0x17
	.byte	-0x7
	.byte	-0x18
	.byte	-0x6
	.byte	-0x18
	.byte	-0x6
	.byte	-0x18
	.byte	-0x5
	.byte	-0x18
	.byte	-0x5
	.byte	-0x18
	.byte	-0x4
	.byte	-0x18
	.byte	-0x4
	.byte	-0x18
	.byte	-0x4
	.byte	-0x18
	.byte	-0x4
	.byte	-0x19
	.byte	-0x3
	.byte	-0x19
	.byte	-0x2
	.byte	-0x19
	.byte	-0x2
	.byte	-0x18
	.byte	-0x2
	.byte	-0x18
	.byte	-0x1
	.byte	-0x19
	.byte	-0x1
	.byte	-0x19
	.byte	0x0
	.byte	-0x19
	.size	 sClockHandCoords,720
.text
	.align	2, 0
	.type	 VBlankCB_WallClock,function
	.thumb_func
VBlankCB_WallClock:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 VBlankCB_WallClock,.Lfe1-VBlankCB_WallClock
	.align	2, 0
	.type	 LoadWallClockGraphics,function
	.thumb_func
LoadWallClockGraphics:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xe
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xc
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xa
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x8
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r3, #0xc0
	lsl	r3, r3, #0x13
	mov	r4, #0xc0
	lsl	r4, r4, #0x9
	add	r0, sp, #0x4
	mov	r8, r0
	mov	r2, sp
	mov	r6, #0x0
	ldr	r1, .L11
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	ldr	r7, .L11+0x4
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	mov	ip, r0
.L6:
	strh	r6, [r2]
	mov	r0, sp
	str	r0, [r1]
	str	r3, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r3, r3, r5
	sub	r4, r4, r5
	cmp	r4, r5
	bhi	.L6	@cond_branch
	strh	r6, [r2]
	mov	r2, sp
	str	r2, [r1]
	str	r3, [r1, #0x4]
	lsr	r0, r4, #0x1
	mov	r2, ip
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, #0xe0
	lsl	r0, r0, #0x13
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r2, .L11
	mov	r1, r8
	str	r1, [r2]
	str	r0, [r2, #0x4]
	lsr	r0, r3, #0x2
	mov	r1, #0x85
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	mov	r0, sp
	strh	r4, [r0]
	str	r0, [r2]
	str	r1, [r2, #0x4]
	lsr	r3, r3, #0x1
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	str	r3, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	ldr	r0, .L11+0x8
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	bl	LZ77UnCompVram
	ldr	r0, .L11+0xc
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L9	@cond_branch
	ldr	r0, .L11+0x10
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	b	.L10
.L12:
	.align	2, 0
.L11:
	.word	0x40000d4
	.word	-0x7efff800
	.word	gWallClock_Gfx
	.word	gSpecialVar_0x8004
	.word	gWallClockMale_Pal
.L9:
	ldr	r0, .L13
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
.L10:
	bl	GetOverworldTextboxPalettePtr
	mov	r1, #0xe0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L13+0x4
	mov	r1, #0xc0
	mov	r2, #0x8
	bl	LoadPalette
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L13+0x8
	mov	r0, #0x0
	mov	r2, #0x3
	bl	InitBgsFromTemplates
	ldr	r0, .L13+0xc
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	mov	r1, #0x94
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	mov	r2, #0xd0
	bl	LoadUserWindowBorderGfx
	bl	ClearScheduledBgCopiesToVram
	bl	ScanlineEffect_Stop
	bl	ResetTasks
	bl	ResetSpriteData
	bl	ResetPaletteFade
	bl	FreeAllSpritePalettes
	ldr	r0, .L13+0x10
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L13+0x14
	bl	LoadSpritePalettes
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gWallClockFemale_Pal
	.word	sTextPrompt_Pal
	.word	sBgTemplates
	.word	sWindowTemplates
	.word	sSpriteSheet_ClockHand
	.word	sSpritePalettes_Clock
.Lfe2:
	.size	 LoadWallClockGraphics,.Lfe2-LoadWallClockGraphics
	.align	2, 0
	.type	 WallClockInit,function
	.thumb_func
WallClockInit:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r0, #0x1
	bl	EnableInterrupts
	ldr	r0, .L16
	bl	SetVBlankCallback
	ldr	r0, .L16+0x4
	bl	SetMainCallback2
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	VBlankCB_WallClock
	.word	CB2_WallClock
.Lfe3:
	.size	 WallClockInit,.Lfe3-WallClockInit
	.align	2, 0
	.globl	CB2_StartWallClock
	.type	 CB2_StartWallClock,function
	.thumb_func
CB2_StartWallClock:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0xc
	bl	LoadWallClockGraphics
	ldr	r0, .L19
	ldr	r1, .L19+0x4
	bl	LZ77UnCompVram
	ldr	r0, .L19+0x8
	mov	r1, #0x0
	bl	CreateTask
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r1, .L19+0xc
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	mov	r8, r1
	mov	r1, #0xa
	strh	r1, [r0, #0xc]
	mov	r2, r8
	strh	r2, [r0, #0xe]
	strh	r2, [r0, #0x10]
	strh	r2, [r0, #0x12]
	strh	r2, [r0, #0x14]
	strh	r2, [r0, #0x8]
	mov	r1, #0x96
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0xa]
	ldr	r0, .L19+0x10
	mov	r1, #0x78
	mov	r2, #0x50
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L19+0x14
	mov	r9, r1
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	strh	r6, [r1, #0x2e]
	ldrb	r2, [r1, #0x1]
	mov	r5, #0x4
	neg	r5, r5
	add	r0, r5, #0
	and	r0, r0, r2
	mov	r2, #0x1
	mov	sl, r2
	mov	r2, sl
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r2, [r1, #0x3]
	mov	r4, #0x3f
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x3]
	ldr	r0, .L19+0x18
	mov	r1, #0x78
	mov	r2, #0x50
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	strh	r6, [r1, #0x2e]
	ldrb	r0, [r1, #0x1]
	and	r5, r5, r0
	mov	r0, sl
	orr	r5, r5, r0
	strb	r5, [r1, #0x1]
	ldrb	r0, [r1, #0x3]
	and	r4, r4, r0
	mov	r0, #0x2
	orr	r4, r4, r0
	strb	r4, [r1, #0x3]
	ldr	r0, .L19+0x1c
	mov	r1, #0x78
	mov	r2, #0x50
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	strh	r6, [r1, #0x2e]
	mov	r0, #0x2d
	strh	r0, [r1, #0x30]
	ldr	r0, .L19+0x20
	mov	r1, #0x78
	mov	r2, #0x50
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	strh	r6, [r1, #0x2e]
	mov	r0, #0x5a
	strh	r0, [r1, #0x30]
	bl	WallClockInit
	ldr	r2, .L19+0x24
	mov	r0, #0x1
	str	r0, [sp]
	mov	r1, r8
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	gWallClockStart_Tilemap
	.word	0x6003800
	.word	Task_SetClock_WaitFadeIn
	.word	gTasks
	.word	sSpriteTemplate_MinuteHand
	.word	gSprites
	.word	sSpriteTemplate_HourHand
	.word	sSpriteTemplate_PM
	.word	sSpriteTemplate_AM
	.word	gText_Confirm3
.Lfe4:
	.size	 CB2_StartWallClock,.Lfe4-CB2_StartWallClock
	.align	2, 0
	.globl	CB2_ViewWallClock
	.type	 CB2_ViewWallClock,function
	.thumb_func
CB2_ViewWallClock:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	bl	LoadWallClockGraphics
	ldr	r0, .L24
	ldr	r1, .L24+0x4
	bl	LZ77UnCompVram
	ldr	r0, .L24+0x8
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r7, #0
	bl	InitClockWithRtc
	ldr	r1, .L24+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x12
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L22	@cond_branch
	mov	r2, #0x2d
	mov	sl, r2
	mov	r0, #0x5a
	str	r0, [sp, #0xc]
	b	.L23
.L25:
	.align	2, 0
.L24:
	.word	gWallClockView_Tilemap
	.word	0x6003800
	.word	Task_ViewClock_WaitFadeIn
	.word	gTasks
.L22:
	mov	r1, #0x5a
	mov	sl, r1
	mov	r2, #0x87
	str	r2, [sp, #0xc]
.L23:
	ldr	r0, .L26
	mov	r1, #0x78
	mov	r2, #0x50
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r6, .L26+0x4
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r0, #0x0
	mov	r9, r0
	strh	r7, [r1, #0x2e]
	ldrb	r2, [r1, #0x1]
	mov	r5, #0x4
	neg	r5, r5
	add	r0, r5, #0
	and	r0, r0, r2
	mov	r2, #0x1
	mov	r8, r2
	mov	r2, r8
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r2, [r1, #0x3]
	mov	r4, #0x3f
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x3]
	ldr	r0, .L26+0x8
	mov	r1, #0x78
	mov	r2, #0x50
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	strh	r7, [r1, #0x2e]
	ldrb	r0, [r1, #0x1]
	and	r5, r5, r0
	mov	r0, r8
	orr	r5, r5, r0
	strb	r5, [r1, #0x1]
	ldrb	r0, [r1, #0x3]
	and	r4, r4, r0
	mov	r0, #0x2
	orr	r4, r4, r0
	strb	r4, [r1, #0x3]
	ldr	r0, .L26+0xc
	mov	r1, #0x78
	mov	r2, #0x50
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	strh	r7, [r1, #0x2e]
	mov	r2, sl
	strh	r2, [r1, #0x30]
	ldr	r0, .L26+0x10
	mov	r1, #0x78
	mov	r2, #0x50
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	strh	r7, [r1, #0x2e]
	mov	r0, sp
	ldrh	r0, [r0, #0xc]
	strh	r0, [r1, #0x30]
	bl	WallClockInit
	ldr	r2, .L26+0x14
	mov	r0, #0x1
	str	r0, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	sSpriteTemplate_MinuteHand
	.word	gSprites
	.word	sSpriteTemplate_HourHand
	.word	sSpriteTemplate_PM
	.word	sSpriteTemplate_AM
	.word	gText_Cancel4
.Lfe5:
	.size	 CB2_ViewWallClock,.Lfe5-CB2_ViewWallClock
	.align	2, 0
	.type	 CB2_WallClock,function
	.thumb_func
CB2_WallClock:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	DoScheduledBgTilemapCopiesToVram
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 CB2_WallClock,.Lfe6-CB2_WallClock
	.align	2, 0
	.type	 Task_SetClock_WaitFadeIn,function
	.thumb_func
Task_SetClock_WaitFadeIn:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L31
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L30	@cond_branch
	ldr	r0, .L31+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L31+0x8
	str	r0, [r1]
.L30:
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gPaletteFade
	.word	gTasks
	.word	Task_SetClock_HandleInput
.Lfe7:
	.size	 Task_SetClock_WaitFadeIn,.Lfe7-Task_SetClock_WaitFadeIn
	.align	2, 0
	.type	 Task_SetClock_HandleInput,function
	.thumb_func
Task_SetClock_HandleInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L43
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	mov	r1, #0x6
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L34	@cond_branch
	ldrh	r0, [r5, #0x8]
	ldrb	r1, [r5, #0x10]
	ldrb	r2, [r5, #0x14]
	bl	CalcNewMinHandAngle
	strh	r0, [r5, #0x8]
	b	.L35
.L44:
	.align	2, 0
.L43:
	.word	gTasks
.L34:
	mov	r2, #0xe
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	mov	r3, #0xc
	ldrsh	r0, [r5, r3]
	mov	r1, #0xc
	bl	__modsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r4, r0, #0x4
	sub	r4, r4, r0
	lsl	r4, r4, #0x1
	mov	r1, #0xe
	ldrsh	r0, [r5, r1]
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	add	r4, r4, r1
	strh	r4, [r5, #0xa]
	ldr	r2, .L45
	ldrh	r0, [r2, #0x2e]
	mov	r3, #0x1
	add	r1, r3, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L36	@cond_branch
	ldr	r0, .L45+0x4
	str	r0, [r5]
	b	.L35
.L46:
	.align	2, 0
.L45:
	.word	gMain
	.word	Task_SetClock_AskConfirm
.L36:
	strh	r1, [r5, #0x10]
	ldrh	r1, [r2, #0x2c]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L38	@cond_branch
	strh	r3, [r5, #0x10]
.L38:
	ldrh	r1, [r2, #0x2c]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L39	@cond_branch
	mov	r0, #0x2
	strh	r0, [r5, #0x10]
.L39:
	ldrh	r1, [r5, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L40	@cond_branch
	ldrh	r2, [r5, #0x14]
	mov	r3, #0x14
	ldrsh	r0, [r5, r3]
	cmp	r0, #0xfe
	bgt	.L41	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r5, #0x14]
.L41:
	ldrh	r0, [r5, #0x8]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r5, #0x14]
	bl	CalcNewMinHandAngle
	strh	r0, [r5, #0x8]
	ldrb	r1, [r5, #0x10]
	add	r0, r6, #0
	bl	AdvanceClock
	b	.L35
.L40:
	strh	r0, [r5, #0x14]
.L35:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 Task_SetClock_HandleInput,.Lfe8-Task_SetClock_HandleInput
	.align	2, 0
	.type	 Task_SetClock_AskConfirm,function
	.thumb_func
Task_SetClock_AskConfirm:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r5, #0x94
	lsl	r5, r5, #0x2
	mov	r0, #0x0
	mov	r1, #0x0
	add	r2, r5, #0
	mov	r3, #0xd
	bl	DrawStdFrameWithCustomTileAndPalette
	ldr	r2, .L48
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, .L48+0x4
	add	r1, r5, #0
	mov	r2, #0xd
	mov	r3, #0x1
	bl	CreateYesNoMenu
	ldr	r1, .L48+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L48+0xc
	str	r1, [r0]
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	gText_IsThisTheCorrectTime
	.word	sWindowTemplate_ConfirmYesNo
	.word	gTasks
	.word	Task_SetClock_HandleConfirmInput
.Lfe9:
	.size	 Task_SetClock_AskConfirm,.Lfe9-Task_SetClock_AskConfirm
	.align	2, 0
	.type	 Task_SetClock_HandleConfirmInput,function
	.thumb_func
Task_SetClock_HandleConfirmInput:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L52	@cond_branch
	cmp	r1, #0
	bgt	.L57	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L54	@cond_branch
	b	.L51
.L57:
	cmp	r1, #0x1
	beq	.L54	@cond_branch
	b	.L51
.L52:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L59
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L59+0x4
	b	.L58
.L60:
	.align	2, 0
.L59:
	.word	gTasks
	.word	Task_SetClock_Confirmed
.L54:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x0
	bl	ClearWindowTilemap
	ldr	r0, .L61
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L61+0x4
.L58:
	str	r0, [r1]
.L51:
	pop	{r4}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	gTasks
	.word	Task_SetClock_HandleInput
.Lfe10:
	.size	 Task_SetClock_HandleConfirmInput,.Lfe10-Task_SetClock_HandleConfirmInput
	.align	2, 0
	.type	 Task_SetClock_Confirmed,function
	.thumb_func
Task_SetClock_Confirmed:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L64
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	mov	r2, #0xe
	ldrsh	r1, [r4, r2]
	bl	RtcInitLocalTimeOffset
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L64+0x4
	str	r0, [r4]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L65:
	.align	2, 0
.L64:
	.word	gTasks
	.word	Task_SetClock_Exit
.Lfe11:
	.size	 Task_SetClock_Confirmed,.Lfe11-Task_SetClock_Confirmed
	.align	2, 0
	.type	 Task_SetClock_Exit,function
	.thumb_func
Task_SetClock_Exit:
	push	{lr}
	ldr	r0, .L68
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L67	@cond_branch
	bl	FreeAllWindowBuffers
	ldr	r0, .L68+0x4
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
.L67:
	pop	{r0}
	bx	r0
.L69:
	.align	2, 0
.L68:
	.word	gPaletteFade
	.word	gMain
.Lfe12:
	.size	 Task_SetClock_Exit,.Lfe12-Task_SetClock_Exit
	.align	2, 0
	.type	 Task_ViewClock_WaitFadeIn,function
	.thumb_func
Task_ViewClock_WaitFadeIn:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L72
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L71	@cond_branch
	ldr	r0, .L72+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L72+0x8
	str	r0, [r1]
.L71:
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	gPaletteFade
	.word	gTasks
	.word	Task_ViewClock_HandleInput
.Lfe13:
	.size	 Task_ViewClock_WaitFadeIn,.Lfe13-Task_ViewClock_WaitFadeIn
	.align	2, 0
	.type	 Task_ViewClock_HandleInput,function
	.thumb_func
Task_ViewClock_HandleInput:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	InitClockWithRtc
	ldr	r0, .L76
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L75	@cond_branch
	ldr	r0, .L76+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L76+0x8
	str	r0, [r1]
.L75:
	pop	{r4}
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	gMain
	.word	gTasks
	.word	Task_ViewClock_FadeOut
.Lfe14:
	.size	 Task_ViewClock_HandleInput,.Lfe14-Task_ViewClock_HandleInput
	.align	2, 0
	.type	 Task_ViewClock_FadeOut,function
	.thumb_func
Task_ViewClock_FadeOut:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L79
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L79+0x4
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gTasks
	.word	Task_ViewClock_Exit
.Lfe15:
	.size	 Task_ViewClock_FadeOut,.Lfe15-Task_ViewClock_FadeOut
	.align	2, 0
	.type	 Task_ViewClock_Exit,function
	.thumb_func
Task_ViewClock_Exit:
	push	{lr}
	ldr	r0, .L83
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L82	@cond_branch
	ldr	r0, .L83+0x4
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
.L82:
	pop	{r0}
	bx	r0
.L84:
	.align	2, 0
.L83:
	.word	gPaletteFade
	.word	gMain
.Lfe16:
	.size	 Task_ViewClock_Exit,.Lfe16-Task_ViewClock_Exit
	.align	2, 0
	.type	 CalcMinHandDelta,function
	.thumb_func
CalcMinHandDelta:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r0, #0
	cmp	r0, #0x3c
	bls	.L86	@cond_branch
	mov	r0, #0x6
	b	.L89
.L86:
	cmp	r0, #0x1e
	bls	.L87	@cond_branch
	mov	r0, #0x3
	b	.L89
.L87:
	cmp	r1, #0xa
	bhi	.L88	@cond_branch
	mov	r0, #0x1
	b	.L89
.L88:
	mov	r0, #0x2
.L89:
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 CalcMinHandDelta,.Lfe17-CalcMinHandDelta
	.align	2, 0
	.type	 CalcNewMinHandAngle,function
	.thumb_func
CalcNewMinHandAngle:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r2, #0
	bl	CalcMinHandDelta
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r5, #0x1
	beq	.L92	@cond_branch
	cmp	r5, #0x2
	beq	.L95	@cond_branch
	b	.L91
.L92:
	cmp	r4, #0
	beq	.L93	@cond_branch
	sub	r0, r4, r1
	b	.L100
.L93:
	mov	r2, #0xb4
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	sub	r0, r0, r1
	b	.L100
.L95:
	mov	r0, #0xb4
	lsl	r0, r0, #0x1
	sub	r0, r0, r1
	cmp	r4, r0
	bge	.L96	@cond_branch
	add	r0, r4, r1
.L100:
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	b	.L91
.L96:
	mov	r4, #0x0
.L91:
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 CalcNewMinHandAngle,.Lfe18-CalcNewMinHandAngle
	.align	2, 0
	.type	 AdvanceClock,function
	.thumb_func
AdvanceClock:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	cmp	r4, #0x1
	beq	.L103	@cond_branch
	cmp	r4, #0x2
	beq	.L108	@cond_branch
	b	.L102
.L103:
	ldr	r0, .L116
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0xe]
	mov	r5, #0xe
	ldrsh	r0, [r1, r5]
	cmp	r0, #0
	ble	.L104	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0xe]
	b	.L102
.L117:
	.align	2, 0
.L116:
	.word	gTasks
.L104:
	mov	r0, #0x3b
	strh	r0, [r1, #0xe]
	ldrh	r2, [r1, #0xc]
	mov	r6, #0xc
	ldrsh	r0, [r1, r6]
	cmp	r0, #0
	ble	.L106	@cond_branch
	sub	r0, r2, #0x1
	b	.L115
.L106:
	mov	r0, #0x17
.L115:
	strh	r0, [r1, #0xc]
	add	r0, r3, #0
	add	r1, r4, #0
	bl	UpdateClockPeriod
	b	.L102
.L108:
	ldr	r0, .L118
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0xe]
	mov	r5, #0xe
	ldrsh	r0, [r1, r5]
	cmp	r0, #0x3a
	bgt	.L109	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0xe]
	b	.L102
.L119:
	.align	2, 0
.L118:
	.word	gTasks
.L109:
	mov	r5, #0x0
	strh	r5, [r1, #0xe]
	ldrh	r2, [r1, #0xc]
	mov	r6, #0xc
	ldrsh	r0, [r1, r6]
	cmp	r0, #0x16
	bgt	.L111	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0xc]
	b	.L112
.L111:
	strh	r5, [r1, #0xc]
.L112:
	add	r0, r3, #0
	add	r1, r4, #0
	bl	UpdateClockPeriod
.L102:
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 AdvanceClock,.Lfe19-AdvanceClock
	.align	2, 0
	.type	 UpdateClockPeriod,function
	.thumb_func
UpdateClockPeriod:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	ldr	r2, .L137
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r0, [r1, #0xc]
	cmp	r3, #0x1
	beq	.L122	@cond_branch
	cmp	r3, #0x2
	beq	.L128	@cond_branch
	b	.L121
.L138:
	.align	2, 0
.L137:
	.word	gTasks
.L122:
	cmp	r0, #0xb
	beq	.L124	@cond_branch
	cmp	r0, #0x17
	beq	.L125	@cond_branch
	b	.L121
.L124:
	mov	r0, #0x0
	b	.L136
.L125:
	strh	r3, [r1, #0x12]
	b	.L121
.L128:
	cmp	r0, #0
	beq	.L136	@cond_branch
	cmp	r0, #0xc
	bne	.L121	@cond_branch
	mov	r0, #0x1
.L136:
	strh	r0, [r1, #0x12]
.L121:
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 UpdateClockPeriod,.Lfe20-UpdateClockPeriod
	.align	2, 0
	.type	 InitClockWithRtc,function
	.thumb_func
InitClockWithRtc:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	RtcCalcLocalTime
	ldr	r1, .L143
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldr	r5, .L143+0x4
	mov	r0, #0x2
	ldrsb	r0, [r5, r0]
	strh	r0, [r6, #0xc]
	mov	r0, #0x3
	ldrsb	r0, [r5, r0]
	strh	r0, [r6, #0xe]
	mov	r0, #0xe
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	mov	r1, #0xc
	ldrsh	r0, [r6, r1]
	mov	r1, #0xc
	bl	__modsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r4, r0, #0x4
	sub	r4, r4, r0
	lsl	r4, r4, #0x1
	mov	r1, #0xe
	ldrsh	r0, [r6, r1]
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	add	r4, r4, r1
	strh	r4, [r6, #0xa]
	mov	r0, #0x2
	ldrsb	r0, [r5, r0]
	cmp	r0, #0xb
	bgt	.L140	@cond_branch
	mov	r0, #0x0
	b	.L142
.L144:
	.align	2, 0
.L143:
	.word	gTasks
	.word	gLocalTime
.L140:
	mov	r0, #0x1
.L142:
	strh	r0, [r6, #0x12]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 InitClockWithRtc,.Lfe21-InitClockWithRtc
	.align	2, 0
	.type	 SpriteCB_MinuteHand,function
	.thumb_func
SpriteCB_MinuteHand:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r2, .L150
	mov	r0, #0x2e
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r4, [r0, #0x8]
	add	r7, r4, #0
	add	r0, r4, #0
	bl	Sin2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L146	@cond_branch
	add	r0, r0, #0xf
.L146:
	lsl	r0, r0, #0xc
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	bl	Cos2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L147	@cond_branch
	add	r0, r0, #0xf
.L147:
	lsl	r1, r0, #0xc
	lsr	r1, r1, #0x10
	lsl	r3, r5, #0x10
	lsr	r2, r3, #0x10
	neg	r3, r3
	lsr	r3, r3, #0x10
	str	r1, [sp]
	mov	r0, #0x0
	bl	SetOamMatrix
	ldr	r1, .L150+0x4
	lsl	r2, r7, #0x1
	add	r0, r2, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r1, r1, #0x1
	add	r2, r2, r1
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r3, #0x80
	bls	.L148	@cond_branch
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	add	r0, r1, #0
	orr	r3, r3, r0
.L148:
	cmp	r2, #0x80
	bls	.L149	@cond_branch
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	add	r0, r1, #0
	orr	r2, r2, r0
.L149:
	strh	r3, [r6, #0x24]
	strh	r2, [r6, #0x26]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L151:
	.align	2, 0
.L150:
	.word	gTasks
	.word	sClockHandCoords
.Lfe22:
	.size	 SpriteCB_MinuteHand,.Lfe22-SpriteCB_MinuteHand
	.align	2, 0
	.type	 SpriteCB_HourHand,function
	.thumb_func
SpriteCB_HourHand:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r2, .L157
	mov	r0, #0x2e
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r4, [r0, #0xa]
	add	r7, r4, #0
	add	r0, r4, #0
	bl	Sin2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L153	@cond_branch
	add	r0, r0, #0xf
.L153:
	lsl	r0, r0, #0xc
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	bl	Cos2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L154	@cond_branch
	add	r0, r0, #0xf
.L154:
	lsl	r1, r0, #0xc
	lsr	r1, r1, #0x10
	lsl	r3, r5, #0x10
	lsr	r2, r3, #0x10
	neg	r3, r3
	lsr	r3, r3, #0x10
	str	r1, [sp]
	mov	r0, #0x1
	bl	SetOamMatrix
	ldr	r1, .L157+0x4
	lsl	r2, r7, #0x1
	add	r0, r2, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r1, r1, #0x1
	add	r2, r2, r1
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r3, #0x80
	bls	.L155	@cond_branch
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	add	r0, r1, #0
	orr	r3, r3, r0
.L155:
	cmp	r2, #0x80
	bls	.L156	@cond_branch
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	add	r0, r1, #0
	orr	r2, r2, r0
.L156:
	strh	r3, [r6, #0x24]
	strh	r2, [r6, #0x26]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L158:
	.align	2, 0
.L157:
	.word	gTasks
	.word	sClockHandCoords
.Lfe23:
	.size	 SpriteCB_HourHand,.Lfe23-SpriteCB_HourHand
	.align	2, 0
	.type	 SpriteCB_PMIndicator,function
	.thumb_func
SpriteCB_PMIndicator:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r2, .L169
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x12
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L160	@cond_branch
	ldrh	r1, [r4, #0x30]
	add	r0, r1, #0
	sub	r0, r0, #0x3c
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1d
	bhi	.L161	@cond_branch
	add	r0, r1, #0x5
	strh	r0, [r4, #0x30]
.L161:
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x3b
	bgt	.L163	@cond_branch
	add	r0, r1, #0x1
	b	.L168
.L170:
	.align	2, 0
.L169:
	.word	gTasks
.L160:
	ldrh	r1, [r4, #0x30]
	add	r0, r1, #0
	sub	r0, r0, #0x2e
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1d
	bhi	.L164	@cond_branch
	sub	r0, r1, #0x5
	strh	r0, [r4, #0x30]
.L164:
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x4b
	ble	.L163	@cond_branch
	sub	r0, r1, #0x1
.L168:
	strh	r0, [r4, #0x30]
.L163:
	ldrh	r0, [r4, #0x30]
	bl	Cos2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	lsl	r0, r1, #0x1
	cmp	r0, #0
	bge	.L166	@cond_branch
	ldr	r1, .L171
	add	r0, r0, r1
.L166:
	asr	r0, r0, #0xc
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	bl	Sin2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	lsl	r0, r1, #0x1
	cmp	r0, #0
	bge	.L167	@cond_branch
	ldr	r2, .L171
	add	r0, r0, r2
.L167:
	asr	r0, r0, #0xc
	strh	r0, [r4, #0x26]
	pop	{r4}
	pop	{r0}
	bx	r0
.L172:
	.align	2, 0
.L171:
	.word	0xfff
.Lfe24:
	.size	 SpriteCB_PMIndicator,.Lfe24-SpriteCB_PMIndicator
	.align	2, 0
	.type	 SpriteCB_AMIndicator,function
	.thumb_func
SpriteCB_AMIndicator:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r2, .L183
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x12
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L174	@cond_branch
	ldrh	r1, [r4, #0x30]
	add	r0, r1, #0
	sub	r0, r0, #0x69
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1d
	bhi	.L175	@cond_branch
	add	r0, r1, #0x5
	strh	r0, [r4, #0x30]
.L175:
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x68
	bgt	.L177	@cond_branch
	add	r0, r1, #0x1
	b	.L182
.L184:
	.align	2, 0
.L183:
	.word	gTasks
.L174:
	ldrh	r1, [r4, #0x30]
	add	r0, r1, #0
	sub	r0, r0, #0x5b
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1d
	bhi	.L178	@cond_branch
	sub	r0, r1, #0x5
	strh	r0, [r4, #0x30]
.L178:
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x78
	ble	.L177	@cond_branch
	sub	r0, r1, #0x1
.L182:
	strh	r0, [r4, #0x30]
.L177:
	ldrh	r0, [r4, #0x30]
	bl	Cos2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	lsl	r0, r1, #0x1
	cmp	r0, #0
	bge	.L180	@cond_branch
	ldr	r1, .L185
	add	r0, r0, r1
.L180:
	asr	r0, r0, #0xc
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	bl	Sin2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	lsl	r0, r1, #0x1
	cmp	r0, #0
	bge	.L181	@cond_branch
	ldr	r2, .L185
	add	r0, r0, r2
.L181:
	asr	r0, r0, #0xc
	strh	r0, [r4, #0x26]
	pop	{r4}
	pop	{r0}
	bx	r0
.L186:
	.align	2, 0
.L185:
	.word	0xfff
.Lfe25:
	.size	 SpriteCB_AMIndicator,.Lfe25-SpriteCB_AMIndicator
.text
	.align	2, 0

