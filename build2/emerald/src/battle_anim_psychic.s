@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sAffineAnim_PsychUpSpiral,object
sAffineAnim_PsychUpSpiral:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x2
	.short	-0x2
	.byte	0xf6
	.byte	0x78
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_PsychUpSpiral,24
	.align	2, 0
	.type	 sAffineAnims_PsychUpSpiral,object
sAffineAnims_PsychUpSpiral:
	.word	sAffineAnim_PsychUpSpiral
	.size	 sAffineAnims_PsychUpSpiral,4
	.globl	gPsychUpSpiralSpriteTemplate
	.align	2, 0
	.type	 gPsychUpSpiralSpriteTemplate,object
	.size	 gPsychUpSpiralSpriteTemplate,24
gPsychUpSpiralSpriteTemplate:
	.short	0x27d4
	.short	0x27d4
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_PsychUpSpiral
	.word	AnimSpriteOnMonPos
	.globl	gLightScreenWallSpriteTemplate
	.align	2, 0
	.type	 gLightScreenWallSpriteTemplate,object
	.size	 gLightScreenWallSpriteTemplate,24
gLightScreenWallSpriteTemplate:
	.short	0x27b6
	.short	0x27b6
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimDefensiveWall
	.globl	gReflectWallSpriteTemplate
	.align	2, 0
	.type	 gReflectWallSpriteTemplate,object
	.size	 gReflectWallSpriteTemplate,24
gReflectWallSpriteTemplate:
	.short	0x27b7
	.short	0x27b7
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimDefensiveWall
	.globl	gMirrorCoatWallSpriteTemplate
	.align	2, 0
	.type	 gMirrorCoatWallSpriteTemplate,object
	.size	 gMirrorCoatWallSpriteTemplate,24
gMirrorCoatWallSpriteTemplate:
	.short	0x27b8
	.short	0x27b8
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimDefensiveWall
	.globl	gBarrierWallSpriteTemplate
	.align	2, 0
	.type	 gBarrierWallSpriteTemplate,object
	.size	 gBarrierWallSpriteTemplate,24
gBarrierWallSpriteTemplate:
	.short	0x27b9
	.short	0x27b9
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimDefensiveWall
	.globl	gMagicCoatWallSpriteTemplate
	.align	2, 0
	.type	 gMagicCoatWallSpriteTemplate,object
	.size	 gMagicCoatWallSpriteTemplate,24
gMagicCoatWallSpriteTemplate:
	.short	0x27ba
	.short	0x27ba
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimDefensiveWall
	.align	2, 0
	.type	 sAnim_ReflectSparkle,object
sAnim_ReflectSparkle:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ReflectSparkle,24
	.align	2, 0
	.type	 sAnims_ReflectSparkle,object
sAnims_ReflectSparkle:
	.word	sAnim_ReflectSparkle
	.size	 sAnims_ReflectSparkle,4
	.globl	gReflectSparkleSpriteTemplate
	.align	2, 0
	.type	 gReflectSparkleSpriteTemplate,object
	.size	 gReflectSparkleSpriteTemplate,24
gReflectSparkleSpriteTemplate:
	.short	0x2757
	.short	0x2757
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_ReflectSparkle
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWallSparkle
	.align	2, 0
	.type	 sAnim_SpecialScreenSparkle,object
sAnim_SpecialScreenSparkle:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_SpecialScreenSparkle,20
	.align	2, 0
	.type	 sAnims_SpecialScreenSparkle,object
sAnims_SpecialScreenSparkle:
	.word	sAnim_SpecialScreenSparkle
	.size	 sAnims_SpecialScreenSparkle,4
	.globl	gSpecialScreenSparkleSpriteTemplate
	.align	2, 0
	.type	 gSpecialScreenSparkleSpriteTemplate,object
	.size	 gSpecialScreenSparkleSpriteTemplate,24
gSpecialScreenSparkleSpriteTemplate:
	.short	0x2756
	.short	0x2756
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sAnims_SpecialScreenSparkle
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWallSparkle
	.globl	gGoldRingSpriteTemplate
	.align	2, 0
	.type	 gGoldRingSpriteTemplate,object
	.size	 gGoldRingSpriteTemplate,24
gGoldRingSpriteTemplate:
	.short	0x27b3
	.short	0x27b3
	.word	gOamData_AffineOff_ObjNormal_16x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	TranslateAnimSpriteToTargetMonLocation
	.align	2, 0
	.type	 sAnim_BentSpoon_0,object
sAnim_BentSpoon_0:
	.short	0x8
	.byte	0x7c
	.space	1
	.short	0x10
	.byte	0x45
	.space	1
	.short	0x8
	.byte	0x45
	.space	1
	.short	0x0
	.byte	0x45
	.space	1
	.short	0x8
	.byte	0x56
	.space	1
	.short	-0x3
	.byte	0x0
	.space	1
	.short	0x10
	.byte	0x45
	.space	1
	.short	0x8
	.byte	0x45
	.space	1
	.short	0x0
	.byte	0x45
	.space	1
	.short	0x8
	.byte	0x45
	.space	1
	.short	-0x3
	.byte	0x1
	.space	1
	.short	0x8
	.byte	0x56
	.space	1
	.short	0x18
	.byte	0x43
	.space	1
	.short	0x20
	.byte	0x43
	.space	1
	.short	0x28
	.byte	0x56
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_BentSpoon_0,64
	.align	2, 0
	.type	 sAnim_BentSpoon_1,object
sAnim_BentSpoon_1:
	.short	0x8
	.byte	0x3c
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x16
	.space	1
	.short	-0x3
	.byte	0x0
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x3
	.byte	0x1
	.space	1
	.short	0x8
	.byte	0x16
	.space	1
	.short	0x18
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x28
	.byte	0x16
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_BentSpoon_1,64
	.align	2, 0
	.type	 sAnims_BentSpoon,object
sAnims_BentSpoon:
	.word	sAnim_BentSpoon_0
	.word	sAnim_BentSpoon_1
	.size	 sAnims_BentSpoon,8
	.globl	gBentSpoonSpriteTemplate
	.align	2, 0
	.type	 gBentSpoonSpriteTemplate,object
	.size	 gBentSpoonSpriteTemplate,24
gBentSpoonSpriteTemplate:
	.short	0x2771
	.short	0x2771
	.word	gOamData_AffineOff_ObjNormal_16x32
	.word	sAnims_BentSpoon
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBentSpoon
	.align	2, 0
	.type	 sAnim_QuestionMark,object
sAnim_QuestionMark:
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0x6
	.space	1
	.short	0x30
	.byte	0x6
	.space	1
	.short	0x40
	.byte	0x6
	.space	1
	.short	0x50
	.byte	0x6
	.space	1
	.short	0x60
	.byte	0x12
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_QuestionMark,32
	.align	2, 0
	.type	 sAnims_QuestionMark,object
sAnims_QuestionMark:
	.word	sAnim_QuestionMark
	.size	 sAnims_QuestionMark,4
	.align	2, 0
	.type	 sAffineAnim_QuestionMark,object
sAffineAnim_QuestionMark:
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0x8
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x4
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_QuestionMark,40
	.align	2, 0
	.type	 sAffineAnims_QuestionMark,object
sAffineAnims_QuestionMark:
	.word	sAffineAnim_QuestionMark
	.size	 sAffineAnims_QuestionMark,4
	.globl	gQuestionMarkSpriteTemplate
	.align	2, 0
	.type	 gQuestionMarkSpriteTemplate,object
	.size	 gQuestionMarkSpriteTemplate,24
gQuestionMarkSpriteTemplate:
	.short	0x276d
	.short	0x276d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_QuestionMark
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimQuestionMark
	.align	2, 0
	.type	 sAffineAnim_MeditateStretchAttacker,object
sAffineAnim_MeditateStretchAttacker:
	.short	-0x8
	.short	0xa
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x12
	.short	-0x12
	.byte	0x0
	.byte	0x10
	.space	2
	.short	-0x14
	.short	0x10
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_MeditateStretchAttacker,32
	.align	2, 0
	.type	 sAffineAnim_Teleport,object
sAffineAnim_Teleport:
	.short	0x40
	.short	-0x4
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0xc8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Teleport,24
	.globl	gImprisonOrbSpriteTemplate
	.align	2, 0
	.type	 gImprisonOrbSpriteTemplate,object
	.size	 gImprisonOrbSpriteTemplate,24
gImprisonOrbSpriteTemplate:
	.short	0x2809
	.short	0x2809
	.word	gOamData_AffineOff_ObjBlend_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gRedXSpriteTemplate
	.align	2, 0
	.type	 gRedXSpriteTemplate,object
	.size	 gRedXSpriteTemplate,24
gRedXSpriteTemplate:
	.short	0x280a
	.short	0x280a
	.word	gOamData_AffineOff_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRedX
	.align	2, 0
	.type	 sAffineAnim_SkillSwapOrb_0,object
sAffineAnim_SkillSwapOrb_0:
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sAffineAnim_SkillSwapOrb_0,24
	.align	2, 0
	.type	 sAffineAnim_SkillSwapOrb_1,object
sAffineAnim_SkillSwapOrb_1:
	.short	0xf0
	.short	0xf0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x2
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sAffineAnim_SkillSwapOrb_1,40
	.align	2, 0
	.type	 sAffineAnim_SkillSwapOrb_2,object
sAffineAnim_SkillSwapOrb_2:
	.short	0xd0
	.short	0xd0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sAffineAnim_SkillSwapOrb_2,40
	.align	2, 0
	.type	 sAffineAnim_SkillSwapOrb_3,object
sAffineAnim_SkillSwapOrb_3:
	.short	0xb0
	.short	0xb0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x2
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sAffineAnim_SkillSwapOrb_3,40
	.align	2, 0
	.type	 sAffineAnims_SkillSwapOrb,object
sAffineAnims_SkillSwapOrb:
	.word	sAffineAnim_SkillSwapOrb_0
	.word	sAffineAnim_SkillSwapOrb_1
	.word	sAffineAnim_SkillSwapOrb_2
	.word	sAffineAnim_SkillSwapOrb_3
	.size	 sAffineAnims_SkillSwapOrb,16
	.globl	gSkillSwapOrbSpriteTemplate
	.align	2, 0
	.type	 gSkillSwapOrbSpriteTemplate,object
	.size	 gSkillSwapOrbSpriteTemplate,24
gSkillSwapOrbSpriteTemplate:
	.short	0x280b
	.short	0x280b
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_SkillSwapOrb
	.word	AnimSkillSwapOrb
	.align	2, 0
	.type	 sAffineAnim_LusterPurgeCircle,object
sAffineAnim_LusterPurgeCircle:
	.short	0x20
	.short	0x20
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x78
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 sAffineAnim_LusterPurgeCircle,24
	.globl	gAffineAnims_LusterPurgeCircle
	.align	2, 0
	.type	 gAffineAnims_LusterPurgeCircle,object
gAffineAnims_LusterPurgeCircle:
	.word	sAffineAnim_LusterPurgeCircle
	.size	 gAffineAnims_LusterPurgeCircle,4
	.globl	gLusterPurgeCircleSpriteTemplate
	.align	2, 0
	.type	 gLusterPurgeCircleSpriteTemplate,object
	.size	 gLusterPurgeCircleSpriteTemplate,24
gLusterPurgeCircleSpriteTemplate:
	.short	0x281b
	.short	0x281b
	.word	gOamData_AffineDouble_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_LusterPurgeCircle
	.word	AnimSpriteOnMonPos
	.align	2, 0
	.type	 sAffineAnim_PsychoBoostOrb_0,object
sAffineAnim_PsychoBoostOrb_0:
	.short	0x20
	.short	0x20
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x11
	.space	2
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7ffd
	.short	0x4
	.space	4
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	-0x10
	.short	-0x10
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7ffd
	.short	0x7
	.space	4
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_PsychoBoostOrb_0,88
	.align	2, 0
	.type	 sAffineAnim_PsychoBoostOrb_1,object
sAffineAnim_PsychoBoostOrb_1:
	.short	-0x14
	.short	0x18
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_PsychoBoostOrb_1,16
	.globl	gAffineAnims_PsychoBoostOrb
	.align	2, 0
	.type	 gAffineAnims_PsychoBoostOrb,object
gAffineAnims_PsychoBoostOrb:
	.word	sAffineAnim_PsychoBoostOrb_0
	.word	sAffineAnim_PsychoBoostOrb_1
	.size	 gAffineAnims_PsychoBoostOrb,8
	.globl	gPsychoBoostOrbSpriteTemplate
	.align	2, 0
	.type	 gPsychoBoostOrbSpriteTemplate,object
	.size	 gPsychoBoostOrbSpriteTemplate,24
gPsychoBoostOrbSpriteTemplate:
	.short	0x27e4
	.short	0x27e4
	.word	gOamData_AffineDouble_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_PsychoBoostOrb
	.word	AnimPsychoBoost
	.globl	gZenHeadbuttAffineAnimCmd
	.align	2, 0
	.type	 gZenHeadbuttAffineAnimCmd,object
gZenHeadbuttAffineAnimCmd:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x12
	.space	2
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	-0x5
	.short	-0x5
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x5
	.short	0x5
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffd
	.short	0x5
	.space	4
	.short	0x7fff
	.space	6
	.size	 gZenHeadbuttAffineAnimCmd,56
	.globl	gZenHeadbuttAffineAnims
	.align	2, 0
	.type	 gZenHeadbuttAffineAnims,object
gZenHeadbuttAffineAnims:
	.word	gZenHeadbuttAffineAnimCmd
	.size	 gZenHeadbuttAffineAnims,4
	.globl	gZenHeadbuttSpriteTemplate
	.align	2, 0
	.type	 gZenHeadbuttSpriteTemplate,object
	.size	 gZenHeadbuttSpriteTemplate,24
gZenHeadbuttSpriteTemplate:
	.short	0x27e4
	.short	0x27a4
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gZenHeadbuttAffineAnims
	.word	AnimateZenHeadbutt
	.globl	gPsychoCutSpiralSpriteTemplate
	.align	2, 0
	.type	 gPsychoCutSpiralSpriteTemplate,object
	.size	 gPsychoCutSpiralSpriteTemplate,24
gPsychoCutSpiralSpriteTemplate:
	.short	0x27d4
	.short	0x2844
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_PsychUpSpiral
	.word	AnimSpriteOnMonPos
	.globl	gPsychoCutSpriteTemplate
	.align	2, 0
	.type	 gPsychoCutSpriteTemplate,object
	.size	 gPsychoCutSpriteTemplate,24
gPsychoCutSpriteTemplate:
	.short	0x2844
	.short	0x2844
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPsychoCut
.text
	.align	2, 0
	.type	 AnimPsychoCut,function
	.thumb_func
AnimPsychoCut:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r7, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r1, .L9
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
	b	.L4
.L10:
	.align	2, 0
.L9:
	.word	gBattleAnimArgs
.L3:
	ldr	r0, .L11
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4	@cond_branch
	ldr	r1, .L11+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
	ldrh	r0, [r1, #0x6]
	neg	r0, r0
	strh	r0, [r1, #0x6]
.L4:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L6	@cond_branch
	ldr	r0, .L11
	ldrb	r0, [r0]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldr	r5, .L11+0x8
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L6	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L8	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L6	@cond_branch
.L8:
	ldr	r0, .L11+0x4
	mov	r2, #0x4
	ldrsh	r1, [r0, r2]
	neg	r1, r1
	strh	r1, [r0, #0x4]
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	neg	r1, r1
	strh	r1, [r0]
.L6:
	add	r0, r7, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r5, .L11+0x8
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	ldr	r6, .L11+0x4
	lsr	r4, r4, #0x18
	ldrh	r0, [r6, #0x4]
	add	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrh	r2, [r6, #0x6]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	ldrh	r2, [r7, #0x20]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r7, #0x22]
	lsr	r5, r1, #0x10
	asr	r1, r1, #0x10
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2Neg
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r0, [sp]
	add	r0, r7, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	ldrh	r0, [r6, #0x8]
	strh	r0, [r7, #0x2e]
	strh	r4, [r7, #0x32]
	strh	r5, [r7, #0x36]
	ldr	r0, .L11+0xc
	str	r0, [r7, #0x1c]
	ldr	r1, .L11+0x10
	add	r0, r7, #0
	bl	StoreSpriteCallbackInData6
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe1:
	.size	 AnimPsychoCut,.Lfe1-AnimPsychoCut
	.align	2, 0
	.type	 AnimateZenHeadbutt,function
	.thumb_func
AnimateZenHeadbutt:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L17
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L14	@cond_branch
	ldr	r4, .L17+0x4
	b	.L16
.L18:
	.align	2, 0
.L17:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L14:
	ldr	r4, .L19
.L16:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x12
	strh	r0, [r5, #0x22]
	ldr	r1, .L19+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L19+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	gBattleAnimTarget
	.word	DestroySpriteAndMatrix
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe2:
	.size	 AnimateZenHeadbutt,.Lfe2-AnimateZenHeadbutt
	.align	2, 0
	.type	 AnimDefensiveWall,function
	.thumb_func
AnimDefensiveWall:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L37
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L23	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	beq	.L35	@cond_branch
.L23:
	ldrb	r1, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	add	r1, r5, #0
	add	r1, r1, #0x43
	mov	r0, #0xc8
	strb	r0, [r1]
	mov	r1, r8
	cmp	r1, #0
	bne	.L28	@cond_branch
.L35:
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r7, r4, #0
	add	r0, r4, #0
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	eor	r0, r0, r1
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r6, r1, #0x1f
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L26	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x0
	bl	MoveBattlerSpriteToBG
.L26:
	mov	r0, #0x2
	add	r4, r0, #0
	eor	r4, r4, r7
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L24	@cond_branch
	mov	r0, #0x1
	eor	r6, r6, r0
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x0
	bl	MoveBattlerSpriteToBG
.L24:
	mov	r0, r8
	cmp	r0, #0
	bne	.L28	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L28	@cond_branch
	ldr	r0, .L37
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L29	@cond_branch
	mov	r0, #0x48
	strh	r0, [r5, #0x20]
	mov	r0, #0x50
	b	.L36
.L38:
	.align	2, 0
.L37:
	.word	gBattleAnimAttacker
.L29:
	mov	r0, #0xb0
	strh	r0, [r5, #0x20]
	mov	r0, #0x28
	b	.L36
.L28:
	ldr	r6, .L39
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L32	@cond_branch
	ldr	r1, .L39+0x4
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r1]
.L32:
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L39+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
.L36:
	strh	r0, [r5, #0x22]
	ldr	r0, .L39+0x4
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r5, #0x2e]
	mov	r0, r8
	cmp	r0, #0
	beq	.L33	@cond_branch
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0x9
	strh	r0, [r5, #0x22]
	ldr	r1, .L39+0x8
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	b	.L34
.L40:
	.align	2, 0
.L39:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimDefensiveWall_Step2
.L33:
	ldr	r0, .L41
	str	r0, [r5, #0x1c]
.L34:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L42:
	.align	2, 0
.L41:
	.word	AnimDefensiveWall_Step1
.Lfe3:
	.size	 AnimDefensiveWall,.Lfe3-AnimDefensiveWall
	.align	2, 0
	.type	 AnimDefensiveWall_Step1,function
	.thumb_func
AnimDefensiveWall_Step1:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r1, #0x3c
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L44	@cond_branch
	mov	r0, #0x1
	strh	r0, [r5, #0x3c]
	b	.L43
.L44:
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L45	@cond_branch
	ldr	r2, .L47
	ldr	r0, .L47+0x4
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L45:
	mov	r0, #0x2
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L46	@cond_branch
	ldr	r2, .L47
	ldr	r0, .L47+0x4
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L46:
	ldr	r1, .L47+0x8
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
.L43:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L48:
	.align	2, 0
.L47:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	AnimDefensiveWall_Step2
.Lfe4:
	.size	 AnimDefensiveWall_Step1,.Lfe4-AnimDefensiveWall_Step1
	.align	2, 0
	.type	 AnimDefensiveWall_Step2,function
	.thumb_func
AnimDefensiveWall_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r1, [r4, #0x34]
	mov	r2, #0x34
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xd
	bne	.L50	@cond_branch
	ldr	r0, .L52
	str	r0, [r4, #0x1c]
	b	.L51
.L53:
	.align	2, 0
.L52:
	.word	AnimDefensiveWall_Step3
.L50:
	add	r0, r1, #0x1
	strh	r0, [r4, #0x34]
.L51:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 AnimDefensiveWall_Step2,.Lfe5-AnimDefensiveWall_Step2
	.align	2, 0
	.type	 AnimDefensiveWall_Step3,function
	.thumb_func
AnimDefensiveWall_Step3:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L55	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x30]
	ldrh	r4, [r3, #0x2e]
	ldr	r1, .L62
	add	r0, r4, #0
	add	r0, r0, #0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r7, [r0]
	mov	r5, #0x8
	add	r6, r1, #0
	add	r1, r4, #0x7
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	add	r2, r0, #0
	add	r2, r2, #0x10
	lsl	r1, r1, #0x1
	add	r1, r1, r6
.L59:
	ldrh	r0, [r1]
	strh	r0, [r2]
	sub	r1, r1, #0x2
	sub	r2, r2, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bgt	.L59	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	strh	r7, [r0]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	bne	.L55	@cond_branch
	ldr	r0, .L62+0x4
	str	r0, [r3, #0x1c]
.L55:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	gPlttBufferFaded
	.word	AnimDefensiveWall_Step4
.Lfe6:
	.size	 AnimDefensiveWall_Step3,.Lfe6-AnimDefensiveWall_Step3
	.align	2, 0
	.type	 AnimDefensiveWall_Step4,function
	.thumb_func
AnimDefensiveWall_Step4:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x34]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r0, [r5, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L65	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L66	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L67	@cond_branch
	ldr	r2, .L69
	ldr	r0, .L69+0x4
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
.L67:
	mov	r0, #0x2
	add	r4, r0, #0
	eor	r4, r4, r6
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L66	@cond_branch
	ldr	r2, .L69
	ldr	r0, .L69+0x4
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
.L66:
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L69+0x8
	str	r0, [r5, #0x1c]
.L65:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	AnimDefensiveWall_Step5
.Lfe7:
	.size	 AnimDefensiveWall_Step4,.Lfe7-AnimDefensiveWall_Step4
	.align	2, 0
	.type	 AnimDefensiveWall_Step5,function
	.thumb_func
AnimDefensiveWall_Step5:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L72	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	eor	r0, r0, r1
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r5, r1, #0x1f
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L74	@cond_branch
	add	r0, r5, #0
	bl	sub_80A477C
.L74:
	mov	r0, #0x2
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L72	@cond_branch
	mov	r0, #0x1
	eor	r5, r5, r0
	add	r0, r5, #0
	bl	sub_80A477C
.L72:
	ldr	r0, .L76
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	DestroyAnimSprite
.Lfe8:
	.size	 AnimDefensiveWall_Step5,.Lfe8-AnimDefensiveWall_Step5
	.align	2, 0
	.type	 AnimWallSparkle,function
	.thumb_func
AnimWallSparkle:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L79	@cond_branch
	ldr	r5, .L89
	mov	r1, #0x6
	ldrsh	r0, [r5, r1]
	mov	r6, #0x0
	cmp	r0, #0
	bne	.L80	@cond_branch
	mov	r6, #0x1
.L80:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L81	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L81	@cond_branch
	ldr	r0, .L89+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L82	@cond_branch
	ldrh	r0, [r5]
	mov	r1, #0x48
	sub	r1, r1, r0
	strh	r1, [r4, #0x20]
	ldrh	r0, [r5, #0x2]
	add	r0, r0, #0x50
	strh	r0, [r4, #0x22]
	b	.L84
.L90:
	.align	2, 0
.L89:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L82:
	ldrh	r0, [r5]
	add	r0, r0, #0xb0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0x2]
	add	r0, r0, #0x28
	strh	r0, [r4, #0x22]
	b	.L84
.L81:
	ldr	r0, .L91
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L85	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	bl	InitSpritePosToAnimAttacker
	b	.L84
.L92:
	.align	2, 0
.L91:
	.word	gBattleAnimArgs
.L85:
	add	r0, r4, #0
	add	r1, r6, #0
	bl	InitSpritePosToAnimTarget
.L84:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L87
.L79:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L87	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L87:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 AnimWallSparkle,.Lfe9-AnimWallSparkle
	.align	2, 0
	.type	 AnimBentSpoon,function
	.thumb_func
AnimBentSpoon:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L97
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L94	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0xa
	strh	r0, [r5, #0x22]
	ldr	r0, .L97+0x4
	b	.L96
.L98:
	.align	2, 0
.L97:
	.word	gBattleAnimAttacker
	.word	0xffff
.L94:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x22]
	sub	r0, r0, #0xa
	strh	r0, [r5, #0x22]
	mov	r0, #0x1
.L96:
	strh	r0, [r5, #0x30]
	ldr	r1, .L99
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L99+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	DestroyAnimSprite
	.word	RunStoredCallbackWhenAnimEnds
.Lfe10:
	.size	 AnimBentSpoon,.Lfe10-AnimBentSpoon
	.align	2, 0
	.type	 AnimQuestionMark,function
	.thumb_func
AnimQuestionMark:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r6, .L104
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	lsr	r0, r0, #0x1f
	add	r1, r1, r0
	lsl	r1, r1, #0xf
	lsr	r4, r1, #0x10
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	lsr	r0, r0, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L102	@cond_branch
	lsl	r0, r4, #0x10
	neg	r0, r0
	lsr	r4, r0, #0x10
.L102:
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r7
	strh	r0, [r5, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	bgt	.L103	@cond_branch
	mov	r0, #0x10
	strh	r0, [r5, #0x22]
.L103:
	ldr	r1, .L104+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L104+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L105:
	.align	2, 0
.L104:
	.word	gBattleAnimAttacker
	.word	AnimQuestionMark_Step1
	.word	RunStoredCallbackWhenAnimEnds
.Lfe11:
	.size	 AnimQuestionMark,.Lfe11-AnimQuestionMark
	.align	2, 0
	.type	 AnimQuestionMark_Step1,function
	.thumb_func
AnimQuestionMark_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	ldr	r0, .L107
	str	r0, [r4, #0x10]
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	InitSpriteAffineAnim
	ldr	r0, .L107+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	sAffineAnims_QuestionMark
	.word	AnimQuestionMark_Step2
.Lfe12:
	.size	 AnimQuestionMark_Step1,.Lfe12-AnimQuestionMark_Step1
	.align	2, 0
	.type	 AnimQuestionMark_Step2,function
	.thumb_func
AnimQuestionMark_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L111	@cond_branch
	cmp	r0, #0x1
	beq	.L113	@cond_branch
	b	.L110
.L111:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L110	@cond_branch
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	mov	r0, #0x12
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L110
.L113:
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L110	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L110:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 AnimQuestionMark_Step2,.Lfe13-AnimQuestionMark_Step2
	.align	2, 0
	.globl	AnimTask_MeditateStretchAttacker
	.type	 AnimTask_MeditateStretchAttacker,function
	.thumb_func
AnimTask_MeditateStretchAttacker:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L118
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	strh	r1, [r4, #0x8]
	ldr	r2, .L118+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L118+0x8
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L119:
	.align	2, 0
.L118:
	.word	gTasks
	.word	sAffineAnim_MeditateStretchAttacker
	.word	AnimTask_MeditateStretchAttacker_Step
.Lfe14:
	.size	 AnimTask_MeditateStretchAttacker,.Lfe14-AnimTask_MeditateStretchAttacker
	.align	2, 0
	.type	 AnimTask_MeditateStretchAttacker_Step,function
	.thumb_func
AnimTask_MeditateStretchAttacker_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L122
	add	r0, r0, r1
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L121	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L121:
	pop	{r4}
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	gTasks
.Lfe15:
	.size	 AnimTask_MeditateStretchAttacker_Step,.Lfe15-AnimTask_MeditateStretchAttacker_Step
	.align	2, 0
	.globl	AnimTask_Teleport
	.type	 AnimTask_Teleport,function
	.thumb_func
AnimTask_Teleport:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L127
	add	r4, r1, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	strh	r0, [r4, #0x8]
	strh	r1, [r4, #0xa]
	strh	r1, [r4, #0xc]
	ldr	r0, .L127+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0x8
	cmp	r0, #0
	beq	.L125	@cond_branch
	mov	r1, #0x4
.L125:
	strh	r1, [r4, #0xe]
	ldrb	r1, [r4, #0x8]
	ldr	r2, .L127+0x8
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L127+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L128:
	.align	2, 0
.L127:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	sAffineAnim_Teleport
	.word	AnimTask_Teleport_Step
.Lfe16:
	.size	 AnimTask_Teleport,.Lfe16-AnimTask_Teleport
	.align	2, 0
	.type	 AnimTask_Teleport_Step,function
	.thumb_func
AnimTask_Teleport_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L138
	add	r4, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L131	@cond_branch
	cmp	r0, #0x1
	beq	.L133	@cond_branch
	b	.L130
.L139:
	.align	2, 0
.L138:
	.word	gTasks
.L131:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L130	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L130
.L133:
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L134	@cond_branch
	ldr	r2, .L140
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	sub	r1, r1, #0x8
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L130
.L141:
	.align	2, 0
.L140:
	.word	gSprites
.L134:
	ldr	r3, .L142
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrb	r0, [r4, #0x8]
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L130:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	gSprites
.Lfe17:
	.size	 AnimTask_Teleport_Step,.Lfe17-AnimTask_Teleport_Step
	.align	2, 0
	.globl	AnimTask_ImprisonOrbs
	.type	 AnimTask_ImprisonOrbs,function
	.thumb_func
AnimTask_ImprisonOrbs:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L146
	add	r5, r1, r0
	mov	r1, #0x0
	mov	r0, #0x10
	strh	r0, [r5, #0xe]
	strh	r1, [r5, #0x10]
	ldr	r4, .L146+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x24]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r0, #0
	cmp	r0, r6
	bcs	.L145	@cond_branch
	add	r1, r6, #0
.L145:
	strh	r1, [r5, #0x20]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r0, .L146+0x8
	str	r0, [r5]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L147:
	.align	2, 0
.L146:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	AnimTask_ImprisonOrbs_Step
.Lfe18:
	.size	 AnimTask_ImprisonOrbs,.Lfe18-AnimTask_ImprisonOrbs
	.align	2, 0
	.type	 AnimTask_ImprisonOrbs_Step,function
	.thumb_func
AnimTask_ImprisonOrbs_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L179
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L162	@cond_branch
	cmp	r1, #0x1
	bgt	.L176	@cond_branch
	cmp	r1, #0
	beq	.L150	@cond_branch
	b	.L149
.L180:
	.align	2, 0
.L179:
	.word	gTasks
.L176:
	cmp	r1, #0x2
	bne	.LCB1635
	b	.L172	@long jump
.LCB1635:
	cmp	r1, #0x3
	bne	.LCB1637
	b	.L173	@long jump
.LCB1637:
	b	.L149
.L150:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	bgt	.LCB1649
	b	.L149	@long jump
.LCB1649:
	strh	r1, [r4, #0xa]
	ldr	r0, .L181
	mov	r2, #0x22
	ldrsh	r1, [r4, r2]
	mov	r3, #0x24
	ldrsh	r2, [r4, r3]
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r0, #0xc
	ldrsh	r1, [r4, r0]
	add	r1, r1, #0x8
	lsl	r1, r1, #0x1
	add	r0, r4, #0
	add	r0, r0, #0x8
	add	r0, r0, r1
	strh	r2, [r0]
	cmp	r2, #0x40
	beq	.L152	@cond_branch
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L155	@cond_branch
	cmp	r0, #0x1
	bgt	.L160	@cond_branch
	cmp	r0, #0
	beq	.L154	@cond_branch
	b	.L152
.L182:
	.align	2, 0
.L181:
	.word	gImprisonOrbSpriteTemplate
.L160:
	cmp	r0, #0x2
	beq	.L156	@cond_branch
	cmp	r0, #0x3
	beq	.L157	@cond_branch
	b	.L152
.L154:
	ldr	r0, .L183
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r4, #0x20]
	b	.L177
.L184:
	.align	2, 0
.L183:
	.word	gSprites
.L155:
	ldr	r0, .L185
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r4, #0x20]
	neg	r0, r0
	strh	r0, [r1, #0x24]
	ldrh	r0, [r4, #0x20]
	b	.L178
.L186:
	.align	2, 0
.L185:
	.word	gSprites
.L156:
	ldr	r1, .L187
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r4, #0x20]
	strh	r1, [r0, #0x24]
	ldrh	r1, [r4, #0x20]
	strh	r1, [r0, #0x26]
	b	.L152
.L188:
	.align	2, 0
.L187:
	.word	gSprites
.L157:
	ldr	r0, .L189
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r4, #0x20]
	neg	r0, r0
.L177:
	strh	r0, [r1, #0x24]
	ldrh	r0, [r4, #0x20]
	neg	r0, r0
.L178:
	strh	r0, [r1, #0x26]
.L152:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L149	@cond_branch
	b	.L172
.L190:
	.align	2, 0
.L189:
	.word	gSprites
.L162:
	ldrh	r0, [r4, #0xa]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L163	@cond_branch
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L164
.L163:
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
.L164:
	ldrh	r1, [r4, #0x10]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0xe]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x20
	bne	.L149	@cond_branch
	mov	r5, #0x8
	add	r6, r4, #0
	add	r6, r6, #0x8
.L169:
	lsl	r0, r5, #0x1
	add	r1, r6, r0
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x40
	beq	.L168	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L191
	add	r0, r0, r1
	bl	DestroySprite
.L168:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xc
	bls	.L169	@cond_branch
.L172:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L149
.L192:
	.align	2, 0
.L191:
	.word	gSprites
.L173:
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L149:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimTask_ImprisonOrbs_Step,.Lfe19-AnimTask_ImprisonOrbs_Step
	.align	2, 0
	.type	 sub_810FB60,function
	.thumb_func
sub_810FB60:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	sub	r0, r0, #0xa
	cmp	r1, r0
	ble	.L194	@cond_branch
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x1
	and	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L194:
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L195	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L195:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 sub_810FB60,.Lfe20-sub_810FB60
	.align	2, 0
	.type	 AnimRedX,function
	.thumb_func
AnimRedX:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L198
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L197	@cond_branch
	ldr	r4, .L198+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L197:
	ldrh	r0, [r6, #0x2]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L198+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L199:
	.align	2, 0
.L198:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	sub_810FB60
.Lfe21:
	.size	 AnimRedX,.Lfe21-AnimRedX
	.align	2, 0
	.globl	AnimTask_SkillSwap
	.type	 AnimTask_SkillSwap,function
	.thumb_func
AnimTask_SkillSwap:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L209
	add	r5, r1, r0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L201	@cond_branch
	ldr	r0, .L209+0x4
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	bne	.L202	@cond_branch
	ldr	r0, .L209+0x8
	strh	r0, [r5, #0x1c]
	ldr	r4, .L209+0xc
	ldrb	r0, [r4]
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	strh	r0, [r5, #0x1e]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r5, #0x20]
	ldr	r4, .L209+0x10
	ldrb	r0, [r4]
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	b	.L207
.L210:
	.align	2, 0
.L209:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	0xfff6
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
.L202:
	mov	r0, #0xa
	strh	r0, [r5, #0x1c]
	ldr	r4, .L211
	ldrb	r0, [r4]
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r5, #0x1e]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	strh	r0, [r5, #0x20]
	ldr	r4, .L211+0x4
	ldrb	r0, [r4]
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	b	.L208
.L212:
	.align	2, 0
.L211:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L201:
	ldr	r0, .L213
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	bne	.L205	@cond_branch
	ldr	r0, .L213+0x4
	strh	r0, [r5, #0x1c]
	ldr	r4, .L213+0x8
	ldrb	r0, [r4]
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r5, #0x1e]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r5, #0x20]
	ldr	r4, .L213+0xc
	ldrb	r0, [r4]
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	b	.L207
.L214:
	.align	2, 0
.L213:
	.word	gBattleAnimArgs
	.word	0xfff6
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
.L205:
	mov	r0, #0xa
	strh	r0, [r5, #0x1c]
	ldr	r4, .L215
	ldrb	r0, [r4]
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	strh	r0, [r5, #0x1e]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	strh	r0, [r5, #0x20]
	ldr	r4, .L215+0x4
	ldrb	r0, [r4]
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
.L208:
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
.L207:
	strh	r0, [r5, #0x24]
	mov	r0, #0x6
	strh	r0, [r5, #0xa]
	ldr	r0, .L215+0x8
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L216:
	.align	2, 0
.L215:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	AnimTask_SkillSwap_Step
.Lfe22:
	.size	 AnimTask_SkillSwap,.Lfe22-AnimTask_SkillSwap
	.align	2, 0
	.type	 AnimTask_SkillSwap_Step,function
	.thumb_func
AnimTask_SkillSwap_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L227
	add	r5, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	cmp	r1, #0
	beq	.L219	@cond_branch
	cmp	r1, #0x1
	beq	.L223	@cond_branch
	b	.L218
.L228:
	.align	2, 0
.L227:
	.word	gTasks
.L219:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	ble	.L218	@cond_branch
	strh	r1, [r5, #0xa]
	ldr	r0, .L229
	mov	r2, #0x1e
	ldrsh	r1, [r5, r2]
	mov	r3, #0x20
	ldrsh	r2, [r5, r3]
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x40
	beq	.L221	@cond_branch
	ldr	r0, .L229+0x4
	lsl	r4, r1, #0x4
	add	r4, r4, r1
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	mov	r0, #0x10
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r5, #0x24]
	strh	r0, [r4, #0x36]
	ldrh	r0, [r5, #0x1c]
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrb	r0, [r5, #0xc]
	mov	r1, #0x3
	and	r1, r1, r0
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
.L221:
	ldrh	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	bne	.L218	@cond_branch
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L218
.L230:
	.align	2, 0
.L229:
	.word	gSkillSwapOrbSpriteTemplate
	.word	gSprites
.L223:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x11
	ble	.L218	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L218:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 AnimTask_SkillSwap_Step,.Lfe23-AnimTask_SkillSwap_Step
	.align	2, 0
	.type	 AnimSkillSwapOrb,function
	.thumb_func
AnimSkillSwapOrb:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L232	@cond_branch
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
.L232:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 AnimSkillSwapOrb,.Lfe24-AnimSkillSwapOrb
	.align	2, 0
	.globl	AnimTask_ExtrasensoryDistortion
	.type	 AnimTask_ExtrasensoryDistortion,function
	.thumb_func
AnimTask_ExtrasensoryDistortion:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L250
	add	r4, r1, r0
	ldr	r0, .L250+0x4
	ldrb	r0, [r0]
	bl	GetBattlerYCoordWithElevation
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r0, r1, #0
	sub	r0, r0, #0x20
	strh	r0, [r4, #0x24]
	ldr	r0, .L250+0x8
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	cmp	r0, #0x1
	beq	.L236	@cond_branch
	cmp	r0, #0x1
	bgt	.L240	@cond_branch
	cmp	r0, #0
	beq	.L235	@cond_branch
	b	.L234
.L251:
	.align	2, 0
.L250:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L240:
	cmp	r0, #0x2
	beq	.L237	@cond_branch
	b	.L234
.L235:
	mov	r0, #0x2
	strh	r0, [r4, #0x1e]
	mov	r0, #0x5
	strh	r0, [r4, #0x20]
	mov	r0, #0x40
	b	.L248
.L236:
	mov	r0, #0x2
	strh	r0, [r4, #0x1e]
	mov	r0, #0x5
	strh	r0, [r4, #0x20]
	mov	r0, #0xc0
	b	.L248
.L237:
	mov	r0, #0x4
	strh	r0, [r4, #0x1e]
	strh	r0, [r4, #0x20]
	mov	r0, #0x0
.L248:
	strh	r0, [r4, #0x22]
	add	r0, r1, #0
	add	r0, r0, #0x20
	strh	r0, [r4, #0x26]
.L234:
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L241	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
.L241:
	ldr	r0, .L252
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L242	@cond_branch
	ldr	r0, .L252+0x4
	ldrh	r0, [r0]
	strh	r0, [r4, #0x1c]
	ldr	r0, .L252+0x8
	b	.L249
.L253:
	.align	2, 0
.L252:
	.word	gBattleAnimTarget
	.word	gBattle_BG1_X
	.word	0x4000014
.L242:
	ldr	r0, .L254
	ldrh	r0, [r0]
	strh	r0, [r4, #0x1c]
	ldr	r0, .L254+0x4
.L249:
	str	r0, [sp]
	ldrh	r1, [r4, #0x24]
	lsl	r3, r1, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x40
	cmp	r1, r0
	bgt	.L245	@cond_branch
	ldr	r5, .L254+0x8
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r6, r5, r0
.L246:
	asr	r3, r3, #0x10
	lsl	r1, r3, #0x1
	add	r2, r1, r5
	ldrh	r0, [r4, #0x1c]
	strh	r0, [r2]
	add	r1, r1, r6
	ldrh	r0, [r4, #0x1c]
	strh	r0, [r1]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x40
	cmp	r1, r0
	ble	.L246	@cond_branch
.L245:
	ldr	r0, .L254+0xc
	str	r0, [sp, #0x4]
	mov	r1, sp
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
	mov	r0, sp
	strb	r2, [r0, #0x9]
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	ldr	r0, .L254+0x10
	str	r0, [r4]
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L255:
	.align	2, 0
.L254:
	.word	gBattle_BG2_X
	.word	0x4000018
	.word	gScanlineEffectRegBuffers
	.word	-0x5d9fffff
	.word	AnimTask_ExtrasensoryDistortion_Step
.Lfe25:
	.size	 AnimTask_ExtrasensoryDistortion,.Lfe25-AnimTask_ExtrasensoryDistortion
	.align	2, 0
	.type	 AnimTask_ExtrasensoryDistortion_Step,function
	.thumb_func
AnimTask_ExtrasensoryDistortion_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L274
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L267	@cond_branch
	cmp	r0, #0x1
	bgt	.L271	@cond_branch
	cmp	r0, #0
	beq	.L258	@cond_branch
	b	.L257
.L275:
	.align	2, 0
.L274:
	.word	gTasks
.L271:
	cmp	r0, #0x2
	beq	.L268	@cond_branch
	b	.L257
.L258:
	ldrh	r3, [r5, #0x22]
	ldrh	r4, [r5, #0x24]
	mov	r2, #0x24
	ldrsh	r1, [r5, r2]
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	cmp	r1, r0
	bgt	.L260	@cond_branch
	ldr	r0, .L276
	mov	r9, r0
	mov	r7, #0x3
	ldr	r1, .L276+0x4
	mov	ip, r1
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r2, r2, ip
	mov	r8, r2
.L261:
	lsl	r2, r3, #0x10
	asr	r0, r2, #0xf
	add	r0, r0, r9
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	mov	r3, #0x20
	ldrsh	r1, [r5, r3]
	asr	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	asr	r3, r0, #0x10
	add	r6, r2, #0
	cmp	r3, #0
	ble	.L262	@cond_branch
	ldrh	r1, [r5, #0xa]
	add	r0, r7, #0
	and	r0, r0, r1
	add	r0, r3, r0
	b	.L272
.L277:
	.align	2, 0
.L276:
	.word	gSineTable
	.word	gScanlineEffectRegBuffers
.L262:
	cmp	r3, #0
	bge	.L263	@cond_branch
	ldrh	r1, [r5, #0xa]
	add	r0, r7, #0
	and	r0, r0, r1
	sub	r0, r3, r0
.L272:
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L263:
	lsl	r2, r4, #0x10
	asr	r2, r2, #0x10
	lsl	r3, r2, #0x1
	mov	r0, ip
	add	r4, r3, r0
	ldrh	r0, [r5, #0x1c]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r1, r0
	strh	r0, [r4]
	add	r3, r3, r8
	ldrh	r0, [r5, #0x1c]
	add	r1, r1, r0
	strh	r1, [r3]
	asr	r0, r6, #0x10
	ldrh	r1, [r5, #0x1e]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r2, r2, #0x1
	lsl	r2, r2, #0x10
	lsr	r4, r2, #0x10
	asr	r2, r2, #0x10
	mov	r1, #0x26
	ldrsh	r0, [r5, r1]
	cmp	r2, r0
	ble	.L261	@cond_branch
.L260:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x17
	ble	.L257	@cond_branch
	b	.L273
.L267:
	ldr	r1, .L278
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
.L273:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L257
.L279:
	.align	2, 0
.L278:
	.word	gScanlineEffect
.L268:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L257:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 AnimTask_ExtrasensoryDistortion_Step,.Lfe26-AnimTask_ExtrasensoryDistortion_Step
	.align	2, 0
	.globl	AnimTask_TransparentCloneGrowAndShrink
	.type	 AnimTask_TransparentCloneGrowAndShrink,function
	.thumb_func
AnimTask_TransparentCloneGrowAndShrink:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r8, r4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L283
	add	r7, r0, r1
	bl	AllocOamMatrix
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	sl, r5
	add	r6, r5, #0
	cmp	r6, #0xff
	bne	.L281	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L280
.L284:
	.align	2, 0
.L283:
	.word	gTasks
.L281:
	ldr	r1, .L285
	ldrb	r0, [r1]
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	r9, r1
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L282	@cond_branch
	add	r0, r5, #0
	bl	FreeOamMatrix
	mov	r0, r8
	bl	DestroyAnimVisualTask
	b	.L280
.L286:
	.align	2, 0
.L285:
	.word	gBattleAnimArgs
.L282:
	ldr	r2, .L287
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x1c
	add	r0, r4, r0
	ldr	r1, .L287+0x4
	str	r1, [r0]
	add	r4, r4, r2
	ldrb	r0, [r4, #0x1]
	mov	r1, #0x3
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	mov	r0, #0x1f
	and	r6, r6, r0
	lsl	r2, r6, #0x1
	ldrb	r1, [r4, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4, #0x3]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r1, r4, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
	ldr	r1, .L287+0x8
	ldrb	r0, [r1]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x22]
	mov	r0, sl
	strh	r0, [r7, #0x24]
	mov	r1, r9
	strh	r1, [r7, #0x26]
	ldr	r0, .L287+0xc
	str	r0, [r7]
.L280:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L288:
	.align	2, 0
.L287:
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	gBattleAnimArgs
	.word	AnimTask_TransparentCloneGrowAndShrink_Step
.Lfe27:
	.size	 AnimTask_TransparentCloneGrowAndShrink,.Lfe27-AnimTask_TransparentCloneGrowAndShrink
	.align	2, 0
	.type	 AnimTask_TransparentCloneGrowAndShrink_Step,function
	.thumb_func
AnimTask_TransparentCloneGrowAndShrink_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L301
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L293	@cond_branch
	cmp	r0, #0x1
	bgt	.L299	@cond_branch
	cmp	r0, #0
	beq	.L291	@cond_branch
	b	.L290
.L302:
	.align	2, 0
.L301:
	.word	gTasks
.L299:
	cmp	r0, #0x2
	beq	.L295	@cond_branch
	cmp	r0, #0x3
	beq	.L296	@cond_branch
	b	.L290
.L291:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x4
	strh	r0, [r4, #0xa]
	ldr	r1, .L303
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x11
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	sub	r0, r0, r1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0xc
	ldrsh	r2, [r4, r1]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x22]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	SetBattlerSpriteYOffsetFromOtherYScale
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x30
	bne	.L290	@cond_branch
	b	.L300
.L304:
	.align	2, 0
.L303:
	.word	gSineTable
.L293:
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x4
	strh	r0, [r4, #0xa]
	ldr	r1, .L305
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x11
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	sub	r0, r0, r1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0xc
	ldrsh	r2, [r4, r1]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x22]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	SetBattlerSpriteYOffsetFromOtherYScale
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L290	@cond_branch
	b	.L300
.L306:
	.align	2, 0
.L305:
	.word	gSineTable
.L295:
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L307
	add	r0, r0, r1
	bl	obj_delete_but_dont_free_vram
.L300:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L290
.L308:
	.align	2, 0
.L307:
	.word	gSprites
.L296:
	ldrh	r0, [r4, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	FreeOamMatrix
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L290:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 AnimTask_TransparentCloneGrowAndShrink_Step,.Lfe28-AnimTask_TransparentCloneGrowAndShrink_Step
	.align	2, 0
	.globl	AnimPsychoBoost
	.type	 AnimPsychoBoost,function
	.thumb_func
AnimPsychoBoost:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L313	@cond_branch
	cmp	r0, #0x1
	bgt	.L321	@cond_branch
	cmp	r0, #0
	beq	.L311	@cond_branch
	b	.L310
.L321:
	cmp	r0, #0x2
	beq	.L315	@cond_branch
	cmp	r0, #0x3
	beq	.L318	@cond_branch
	b	.L310
.L311:
	ldr	r4, .L323
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L312	@cond_branch
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0xc
	strh	r0, [r5, #0x22]
.L312:
	mov	r0, #0x8
	strh	r0, [r5, #0x30]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r0, [r5, #0x30]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L322
.L324:
	.align	2, 0
.L323:
	.word	gBattleAnimAttacker
.L313:
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L310	@cond_branch
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xcb
	bl	PlaySE12WithPanning
	add	r0, r5, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
.L322:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L310
.L315:
	ldrh	r0, [r5, #0x32]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L316	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x32]
	ldrh	r1, [r5, #0x30]
	sub	r1, r1, #0x1
	strh	r1, [r5, #0x30]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L316	@cond_branch
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L316:
	mov	r0, #0xe0
	lsl	r0, r0, #0x2
	add	r2, r0, #0
	ldrh	r1, [r5, #0x34]
	add	r2, r2, r1
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r5, #0x26]
	sub	r0, r0, r1
	strh	r0, [r5, #0x26]
	mov	r0, #0xff
	and	r2, r2, r0
	strh	r2, [r5, #0x34]
	b	.L310
.L318:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimSprite
.L310:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 AnimPsychoBoost,.Lfe29-AnimPsychoBoost
.text
	.align	2, 0

