@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gAnimTaskAffineAnim,object
	.size	 gAnimTaskAffineAnim,4
gAnimTaskAffineAnim:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sBattlerCoords,object
sBattlerCoords:
	.byte	0x48
	.byte	0x50
	.space	2
	.byte	0xb0
	.byte	0x28
	.space	2
	.byte	0x30
	.byte	0x28
	.space	2
	.byte	0x70
	.byte	0x50
	.space	2
	.byte	0x20
	.byte	0x50
	.space	2
	.byte	0xc8
	.byte	0x28
	.space	2
	.byte	0x5a
	.byte	0x58
	.space	2
	.byte	0x98
	.byte	0x20
	.space	2
	.size	 sBattlerCoords,32
	.globl	gCastformFrontSpriteCoords
	.align	2, 0
	.type	 gCastformFrontSpriteCoords,object
gCastformFrontSpriteCoords:
	.byte	0x44
	.byte	0x11
	.space	2
	.byte	0x66
	.byte	0x9
	.space	2
	.byte	0x46
	.byte	0x9
	.space	2
	.byte	0x86
	.byte	0x8
	.space	2
	.size	 gCastformFrontSpriteCoords,16
	.type	 sCastformElevations,object
sCastformElevations:
	.byte	0xd
	.byte	0xe
	.byte	0xd
	.byte	0xd
	.size	 sCastformElevations,4
	.type	 sCastformBackSpriteYCoords,object
sCastformBackSpriteYCoords:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sCastformBackSpriteYCoords,4
	.align	2, 0
	.type	 sUnknown_08525F90,object
sUnknown_08525F90:
	.short	0xd755
	.short	0xd755
	.word	gOamData_AffineNormal_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd756
	.short	0xd756
	.word	gOamData_AffineNormal_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.size	 sUnknown_08525F90,48
	.align	2, 0
	.type	 sUnknown_08525FC0,object
sUnknown_08525FC0:
	.word	gMiscBlank_Gfx
	.short	0x800
	.short	0xd755
	.word	gMiscBlank_Gfx
	.short	0x800
	.short	0xd756
	.size	 sUnknown_08525FC0,16
.text
	.align	2, 0
	.globl	GetBattlerSpriteCoord
	.type	 GetBattlerSpriteCoord,function
	.thumb_func
GetBattlerSpriteCoord:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	cmp	r6, #0x3
	bne	.L3	@cond_branch
	cmp	r5, #0x3
	bne	.L3	@cond_branch
	mov	r6, #0x1
.L3:
	cmp	r6, #0x4
	bhi	.L11	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L26
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L27:
	.align	2, 0
.L26:
	.word	.L23
	.align	2, 0
	.align	2, 0
.L23:
	.word	.L7
	.word	.L8
	.word	.L7
	.word	.L11
	.word	.L11
.L7:
	ldr	r4, .L28
	add	r0, r5, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L28+0x4
	ldr	r1, [r1]
	mov	r2, #0x1
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r4
	ldrb	r0, [r0]
	b	.L5
.L29:
	.align	2, 0
.L28:
	.word	sBattlerCoords
	.word	gBattleTypeFlags
.L8:
	ldr	r4, .L30
	add	r0, r5, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L30+0x4
	ldr	r1, [r1]
	mov	r2, #0x1
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r4
	ldrb	r0, [r0, #0x1]
	b	.L5
.L31:
	.align	2, 0
.L30:
	.word	sBattlerCoords
	.word	gBattleTypeFlags
.L11:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L12	@cond_branch
	ldr	r0, .L32
	ldr	r0, [r0]
	ldr	r2, [r0, #0x18]
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L13	@cond_branch
	ldrh	r1, [r2, #0x2]
	b	.L15
.L33:
	.align	2, 0
.L32:
	.word	gContestResources
.L13:
	ldrh	r1, [r2]
	b	.L15
.L12:
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L16	@cond_branch
	ldr	r1, .L34
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L34+0x4
	b	.L24
.L35:
	.align	2, 0
.L34:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L16:
	ldr	r1, .L36
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L36+0x4
.L24:
	add	r4, r1, r0
	add	r0, r5, #0
	bl	GetIllusionMonPtr
	cmp	r0, #0
	beq	.L18	@cond_branch
	add	r4, r0, #0
.L18:
	ldr	r0, .L36+0x8
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L19	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	b	.L15
.L37:
	.align	2, 0
.L36:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleSpritesDataPtr
.L19:
	ldrh	r1, [r1, #0x2]
.L15:
	cmp	r6, #0x3
	bne	.L21	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x1
	b	.L25
.L21:
	add	r0, r5, #0
	mov	r2, #0x0
.L25:
	bl	GetBattlerSpriteFinal_Y
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L5:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 GetBattlerSpriteCoord,.Lfe1-GetBattlerSpriteCoord
	.align	2, 0
	.globl	GetBattlerYDelta
	.type	 GetBattlerYDelta,function
	.thumb_func
GetBattlerYDelta:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L40	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L39	@cond_branch
.L40:
	cmp	r4, #0xc9
	bne	.L41	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L42	@cond_branch
	ldr	r0, .L65
	ldr	r0, [r0]
	ldr	r2, [r0, #0x18]
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldr	r0, [r2, #0x10]
	b	.L45
.L66:
	.align	2, 0
.L65:
	.word	gContestResources
.L43:
	ldr	r0, [r2, #0x8]
	b	.L45
.L42:
	ldr	r0, .L67
	ldr	r0, [r0]
	ldr	r0, [r0]
	lsl	r1, r5, #0x2
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L46	@cond_branch
	ldr	r1, .L67+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L67+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	bl	GetMonData
	b	.L45
.L68:
	.align	2, 0
.L67:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L46:
	ldr	r0, .L69
	add	r0, r1, r0
	ldr	r0, [r0]
.L45:
	bl	GetUnownSpeciesId
	lsl	r0, r0, #0x10
	ldr	r1, .L69+0x4
	lsr	r0, r0, #0xe
	b	.L62
.L70:
	.align	2, 0
.L69:
	.word	gTransformedPersonalities
	.word	gMonBackPicCoords
.L41:
	ldr	r0, .L71
	cmp	r4, r0
	bne	.L49	@cond_branch
	ldr	r0, .L71+0x4
	ldr	r1, .L71+0x8
	add	r1, r5, r1
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r0, [r1]
	b	.L53
.L72:
	.align	2, 0
.L71:
	.word	0x15f
	.word	sCastformBackSpriteYCoords
	.word	gBattleMonForms
.L49:
	ldr	r0, .L73
	cmp	r4, r0
	bls	.L51	@cond_branch
	ldr	r0, .L73+0x4
	b	.L63
.L74:
	.align	2, 0
.L73:
	.word	0x4b7
	.word	gMonBackPicCoords
.L51:
	ldr	r1, .L75
	b	.L64
.L76:
	.align	2, 0
.L75:
	.word	gMonBackPicCoords
.L39:
	cmp	r4, #0xc9
	bne	.L54	@cond_branch
	ldr	r0, .L77
	ldr	r0, [r0]
	ldr	r0, [r0]
	lsl	r1, r5, #0x2
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L55	@cond_branch
	ldr	r1, .L77+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L77+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	bl	GetMonData
	b	.L56
.L78:
	.align	2, 0
.L77:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L55:
	ldr	r0, .L79
	add	r0, r1, r0
	ldr	r0, [r0]
.L56:
	bl	GetUnownSpeciesId
	lsl	r0, r0, #0x10
	ldr	r1, .L79+0x4
	lsr	r0, r0, #0xe
	b	.L62
.L80:
	.align	2, 0
.L79:
	.word	gTransformedPersonalities
	.word	gMonFrontPicCoords
.L54:
	ldr	r0, .L81
	cmp	r4, r0
	bne	.L58	@cond_branch
	ldr	r0, .L81+0x4
	ldr	r1, .L81+0x8
	add	r1, r5, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	b	.L53
.L82:
	.align	2, 0
.L81:
	.word	0x15f
	.word	gCastformFrontSpriteCoords
	.word	gBattleMonForms
.L58:
	ldr	r0, .L83
	cmp	r4, r0
	bls	.L60	@cond_branch
	ldr	r0, .L83+0x4
	b	.L63
.L84:
	.align	2, 0
.L83:
	.word	0x4b7
	.word	gMonFrontPicCoords
.L60:
	ldr	r1, .L85
.L64:
	lsl	r0, r4, #0x2
.L62:
	add	r0, r0, r1
.L63:
	ldrb	r0, [r0, #0x1]
.L53:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L86:
	.align	2, 0
.L85:
	.word	gMonFrontPicCoords
.Lfe2:
	.size	 GetBattlerYDelta,.Lfe2-GetBattlerYDelta
	.align	2, 0
	.globl	GetBattlerElevation
	.type	 GetBattlerElevation,function
	.thumb_func
GetBattlerElevation:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r7, r4, #0
	mov	r5, #0x0
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L88	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L88	@cond_branch
	ldr	r0, .L95
	cmp	r4, r0
	bne	.L90	@cond_branch
	ldr	r0, .L95+0x4
	ldr	r1, .L95+0x8
	add	r1, r6, r1
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r5, [r1]
	b	.L88
.L96:
	.align	2, 0
.L95:
	.word	0x15f
	.word	sCastformElevations
	.word	gBattleMonForms
.L90:
	ldr	r0, .L97
	cmp	r4, r0
	bls	.L92	@cond_branch
	ldr	r0, .L97+0x4
	b	.L94
.L98:
	.align	2, 0
.L97:
	.word	0x4b7
	.word	gEnemyMonElevation
.L92:
	ldr	r0, .L99
	add	r0, r7, r0
.L94:
	ldrb	r5, [r0]
.L88:
	add	r0, r5, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L100:
	.align	2, 0
.L99:
	.word	gEnemyMonElevation
.Lfe3:
	.size	 GetBattlerElevation,.Lfe3-GetBattlerElevation
	.align	2, 0
	.globl	GetBattlerSpriteFinal_Y
	.type	 GetBattlerSpriteFinal_Y,function
	.thumb_func
GetBattlerSpriteFinal_Y:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L103	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L102	@cond_branch
.L103:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	GetBattlerYDelta
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	b	.L104
.L102:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	GetBattlerYDelta
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	bl	GetBattlerElevation
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L104:
	add	r0, r6, #0
	bl	GetBattlerPosition
	ldr	r3, .L108
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L108+0x4
	ldr	r1, [r1]
	mov	r2, #0x1
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1]
	add	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r7, #0
	beq	.L105	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L106	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L106:
	cmp	r4, #0x68
	bls	.L105	@cond_branch
	mov	r4, #0x68
.L105:
	add	r0, r4, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L109:
	.align	2, 0
.L108:
	.word	sBattlerCoords
	.word	gBattleTypeFlags
.Lfe4:
	.size	 GetBattlerSpriteFinal_Y,.Lfe4-GetBattlerSpriteFinal_Y
	.align	2, 0
	.globl	GetBattlerSpriteCoord2
	.type	 GetBattlerSpriteCoord2,function
	.thumb_func
GetBattlerSpriteCoord2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	mov	r0, #0xfd
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	bhi	.L111	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L112	@cond_branch
	ldr	r0, .L125
	ldr	r0, [r0]
	ldr	r2, [r0, #0x18]
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L113	@cond_branch
	ldrh	r1, [r2, #0x2]
	b	.L115
.L126:
	.align	2, 0
.L125:
	.word	gContestResources
.L113:
	ldrh	r1, [r2]
	b	.L115
.L112:
	ldr	r0, .L127
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r4, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L116	@cond_branch
	ldr	r1, .L127+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	b	.L115
.L128:
	.align	2, 0
.L127:
	.word	gBattleSpritesDataPtr
	.word	gAnimBattlerSpecies
.L116:
	ldrh	r1, [r1, #0x2]
.L115:
	cmp	r5, #0x3
	bne	.L118	@cond_branch
	add	r0, r4, #0
	mov	r2, #0x1
	bl	GetBattlerSpriteFinal_Y
	b	.L123
.L118:
	add	r0, r4, #0
	mov	r2, #0x0
	bl	GetBattlerSpriteFinal_Y
	b	.L123
.L111:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	GetBattlerSpriteCoord
.L123:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 GetBattlerSpriteCoord2,.Lfe5-GetBattlerSpriteCoord2
	.align	2, 0
	.globl	GetBattlerSpriteDefault_Y
	.type	 GetBattlerSpriteDefault_Y,function
	.thumb_func
GetBattlerSpriteDefault_Y:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x4
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 GetBattlerSpriteDefault_Y,.Lfe6-GetBattlerSpriteDefault_Y
	.align	2, 0
	.globl	GetSubstituteSpriteDefault_Y
	.type	 GetSubstituteSpriteDefault_Y,function
	.thumb_func
GetSubstituteSpriteDefault_Y:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L131	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	b	.L133
.L131:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r1, #0x88
	lsl	r1, r1, #0xd
.L133:
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 GetSubstituteSpriteDefault_Y,.Lfe7-GetSubstituteSpriteDefault_Y
	.align	2, 0
	.globl	GetBattlerYCoordWithElevation
	.type	 GetBattlerYCoordWithElevation,function
	.thumb_func
GetBattlerYCoordWithElevation:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L135	@cond_branch
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L136	@cond_branch
	ldr	r0, .L144
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L140	@cond_branch
	ldr	r1, .L144+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L144+0x8
	b	.L143
.L145:
	.align	2, 0
.L144:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L136:
	ldr	r0, .L146
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L140	@cond_branch
	ldr	r1, .L146+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L146+0x8
.L143:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	b	.L139
.L147:
	.align	2, 0
.L146:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L140:
	ldrh	r4, [r1, #0x2]
.L139:
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L135	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetBattlerElevation
	sub	r0, r6, r0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L135:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 GetBattlerYCoordWithElevation,.Lfe8-GetBattlerYCoordWithElevation
	.align	2, 0
	.globl	GetAnimBattlerSpriteId
	.type	 GetAnimBattlerSpriteId,function
	.thumb_func
GetAnimBattlerSpriteId:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0
	bne	.L149	@cond_branch
	ldr	r4, .L169
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L166	@cond_branch
	ldr	r1, .L169+0x4
	ldrb	r0, [r4]
	b	.L165
.L170:
	.align	2, 0
.L169:
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
.L149:
	cmp	r0, #0x1
	bne	.L153	@cond_branch
	ldr	r4, .L171
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L166	@cond_branch
	ldr	r1, .L171+0x4
	ldrb	r0, [r4]
	b	.L165
.L172:
	.align	2, 0
.L171:
	.word	gBattleAnimTarget
	.word	gBattlerSpriteIds
.L153:
	cmp	r1, #0x2
	bne	.L157	@cond_branch
	ldr	r5, .L173
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L166	@cond_branch
	b	.L161
.L174:
	.align	2, 0
.L173:
	.word	gBattleAnimAttacker
.L157:
	ldr	r5, .L175
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L161	@cond_branch
.L166:
	mov	r0, #0xff
	b	.L163
.L176:
	.align	2, 0
.L175:
	.word	gBattleAnimTarget
.L161:
	ldr	r1, .L177
	ldrb	r0, [r5]
	eor	r0, r0, r4
.L165:
	add	r0, r0, r1
	ldrb	r0, [r0]
.L163:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L178:
	.align	2, 0
.L177:
	.word	gBattlerSpriteIds
.Lfe9:
	.size	 GetAnimBattlerSpriteId,.Lfe9-GetAnimBattlerSpriteId
	.align	2, 0
	.globl	StoreSpriteCallbackInData6
	.type	 StoreSpriteCallbackInData6,function
	.thumb_func
StoreSpriteCallbackInData6:
	strh	r1, [r0, #0x3a]
	lsr	r1, r1, #0x10
	strh	r1, [r0, #0x3c]
	bx	lr
.Lfe10:
	.size	 StoreSpriteCallbackInData6,.Lfe10-StoreSpriteCallbackInData6
	.align	2, 0
	.globl	SetCallbackToStoredInData6
	.type	 SetCallbackToStoredInData6,function
	.thumb_func
SetCallbackToStoredInData6:
	ldrh	r2, [r0, #0x3a]
	mov	r3, #0x3c
	ldrsh	r1, [r0, r3]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	str	r2, [r0, #0x1c]
	bx	lr
.Lfe11:
	.size	 SetCallbackToStoredInData6,.Lfe11-SetCallbackToStoredInData6
	.align	2, 0
	.globl	TranslateSpriteInCircleOverDuration
	.type	 TranslateSpriteInCircleOverDuration,function
	.thumb_func
TranslateSpriteInCircleOverDuration:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L182	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L183	@cond_branch
	ldr	r2, .L188
	b	.L187
.L189:
	.align	2, 0
.L188:
	.word	-0x100
.L183:
	cmp	r0, #0
	bge	.L184	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L187:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L184:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L186
.L182:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L186:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 TranslateSpriteInCircleOverDuration,.Lfe12-TranslateSpriteInCircleOverDuration
	.align	2, 0
	.globl	TranslateSpriteInGrowingCircleOverDuration
	.type	 TranslateSpriteInGrowingCircleOverDuration,function
	.thumb_func
TranslateSpriteInGrowingCircleOverDuration:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L191	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r2, [r4, #0x30]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r2, [r4, #0x30]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x36]
	ldrh	r2, [r4, #0x38]
	add	r0, r0, r2
	strh	r0, [r4, #0x38]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L192	@cond_branch
	ldr	r2, .L197
	b	.L196
.L198:
	.align	2, 0
.L197:
	.word	-0x100
.L192:
	cmp	r0, #0
	bge	.L193	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L196:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L193:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L195
.L191:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L195:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 TranslateSpriteInGrowingCircleOverDuration,.Lfe13-TranslateSpriteInGrowingCircleOverDuration
	.align	2, 0
	.globl	sub_80A63C8
	.type	 sub_80A63C8,function
	.thumb_func
sub_80A63C8:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L200	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x38]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L201	@cond_branch
	ldr	r2, .L210
	b	.L208
.L211:
	.align	2, 0
.L210:
	.word	-0x100
.L201:
	cmp	r0, #0
	bge	.L202	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L208:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L202:
	ldrh	r1, [r4, #0x36]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xff
	ble	.L204	@cond_branch
	ldr	r2, .L212
	b	.L209
.L213:
	.align	2, 0
.L212:
	.word	-0x100
.L204:
	cmp	r0, #0
	bge	.L205	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L209:
	add	r0, r1, r2
	strh	r0, [r4, #0x36]
.L205:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L207
.L200:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L207:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 sub_80A63C8,.Lfe14-sub_80A63C8
	.align	2, 0
	.globl	TranslateSpriteInEllipseOverDuration
	.type	 TranslateSpriteInEllipseOverDuration,function
	.thumb_func
TranslateSpriteInEllipseOverDuration:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L215	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L216	@cond_branch
	ldr	r2, .L221
	b	.L220
.L222:
	.align	2, 0
.L221:
	.word	-0x100
.L216:
	cmp	r0, #0
	bge	.L217	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L220:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L217:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L219
.L215:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L219:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 TranslateSpriteInEllipseOverDuration,.Lfe15-TranslateSpriteInEllipseOverDuration
	.align	2, 0
	.globl	WaitAnimForDuration
	.type	 WaitAnimForDuration,function
	.thumb_func
WaitAnimForDuration:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	ble	.L224	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x2e]
	b	.L225
.L224:
	add	r0, r1, #0
	bl	SetCallbackToStoredInData6
.L225:
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 WaitAnimForDuration,.Lfe16-WaitAnimForDuration
	.align	2, 0
	.type	 sub_80A64D0,function
	.thumb_func
sub_80A64D0:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_80A64EC
	ldr	r1, .L227
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L228:
	.align	2, 0
.L227:
	.word	TranslateSpriteLinear
.Lfe17:
	.size	 sub_80A64D0,.Lfe17-sub_80A64D0
	.align	2, 0
	.globl	sub_80A64EC
	.type	 sub_80A64EC,function
	.thumb_func
sub_80A64EC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	ble	.L230	@cond_branch
	ldrh	r0, [r4, #0x2e]
	neg	r0, r0
	strh	r0, [r4, #0x2e]
.L230:
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	ldrh	r5, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	cmp	r0, #0
	bge	.L231	@cond_branch
	neg	r0, r0
.L231:
	strh	r0, [r4, #0x2e]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	strh	r0, [r4, #0x32]
	strh	r5, [r4, #0x30]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 sub_80A64EC,.Lfe18-sub_80A64EC
	.align	2, 0
	.globl	TranslateSpriteLinear
	.type	 TranslateSpriteLinear,function
	.thumb_func
TranslateSpriteLinear:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	ble	.L233	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x2e]
	ldrh	r0, [r1, #0x30]
	ldrh	r2, [r1, #0x24]
	add	r0, r0, r2
	strh	r0, [r1, #0x24]
	ldrh	r0, [r1, #0x32]
	ldrh	r3, [r1, #0x26]
	add	r0, r0, r3
	strh	r0, [r1, #0x26]
	b	.L234
.L233:
	add	r0, r1, #0
	bl	SetCallbackToStoredInData6
.L234:
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 TranslateSpriteLinear,.Lfe19-TranslateSpriteLinear
	.align	2, 0
	.globl	TranslateSpriteLinearFixedPoint
	.type	 TranslateSpriteLinearFixedPoint,function
	.thumb_func
TranslateSpriteLinearFixedPoint:
	push	{lr}
	add	r2, r0, #0
	ldrh	r1, [r2, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L236	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x34]
	add	r0, r0, r1
	strh	r0, [r2, #0x34]
	ldrh	r1, [r2, #0x32]
	ldrh	r3, [r2, #0x36]
	add	r1, r1, r3
	strh	r1, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r2, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r2, #0x26]
	b	.L237
.L236:
	add	r0, r2, #0
	bl	SetCallbackToStoredInData6
.L237:
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 TranslateSpriteLinearFixedPoint,.Lfe20-TranslateSpriteLinearFixedPoint
	.align	2, 0
	.type	 TranslateSpriteLinearFixedPointIconFrame,function
	.thumb_func
TranslateSpriteLinearFixedPointIconFrame:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L239	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r1, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r1, r1, r2
	strh	r1, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r4, #0x26]
	b	.L240
.L239:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L240:
	add	r0, r4, #0
	bl	UpdateMonIconFrame
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 TranslateSpriteLinearFixedPointIconFrame,.Lfe21-TranslateSpriteLinearFixedPointIconFrame
	.align	2, 0
	.globl	sub_80A65EC
	.type	 sub_80A65EC,function
	.thumb_func
sub_80A65EC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldr	r5, .L242
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L242+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L243:
	.align	2, 0
.L242:
	.word	gBattleAnimTarget
	.word	sub_80A64D0
.Lfe22:
	.size	 sub_80A65EC,.Lfe22-sub_80A65EC
	.align	2, 0
	.globl	TranslateMonSpriteLinear
	.type	 TranslateMonSpriteLinear,function
	.thumb_func
TranslateMonSpriteLinear:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L245	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x2e]
	ldr	r2, .L247
	mov	r4, #0x34
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x30]
	ldrh	r4, [r0, #0x24]
	add	r1, r1, r4
	strh	r1, [r0, #0x24]
	mov	r0, #0x34
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x32]
	ldrh	r2, [r0, #0x26]
	add	r1, r1, r2
	strh	r1, [r0, #0x26]
	b	.L246
.L248:
	.align	2, 0
.L247:
	.word	gSprites
.L245:
	add	r0, r3, #0
	bl	SetCallbackToStoredInData6
.L246:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 TranslateMonSpriteLinear,.Lfe23-TranslateMonSpriteLinear
	.align	2, 0
	.globl	TranslateMonSpriteLinearFixedPoint
	.type	 TranslateMonSpriteLinearFixedPoint,function
	.thumb_func
TranslateMonSpriteLinearFixedPoint:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L250	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	ldrh	r0, [r4, #0x34]
	add	r1, r1, r0
	strh	r1, [r4, #0x34]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	ldr	r3, .L252
	mov	r0, #0x38
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r0, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x26]
	b	.L251
.L253:
	.align	2, 0
.L252:
	.word	gSprites
.L250:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L251:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 TranslateMonSpriteLinearFixedPoint,.Lfe24-TranslateMonSpriteLinearFixedPoint
	.align	2, 0
	.globl	TranslateSpriteLinearAndFlicker
	.type	 TranslateSpriteLinearAndFlicker,function
	.thumb_func
TranslateSpriteLinearAndFlicker:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L255	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r1, r1, r0
	strh	r1, [r4, #0x32]
	ldrh	r1, [r4, #0x36]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r1, r1, r0
	strh	r1, [r4, #0x36]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	__modsi3
	cmp	r0, #0
	bne	.L258	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L258	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L258
.L255:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L258:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 TranslateSpriteLinearAndFlicker,.Lfe25-TranslateSpriteLinearAndFlicker
	.align	2, 0
	.globl	DestroySpriteAndMatrix
	.type	 DestroySpriteAndMatrix,function
	.thumb_func
DestroySpriteAndMatrix:
	push	{r4, lr}
	add	r4, r0, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 DestroySpriteAndMatrix,.Lfe26-DestroySpriteAndMatrix
	.align	2, 0
	.globl	sub_80A6760
	.type	 sub_80A6760,function
	.thumb_func
sub_80A6760:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldr	r5, .L261
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L261+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L262:
	.align	2, 0
.L261:
	.word	gBattleAnimAttacker
	.word	sub_80A64D0
.Lfe27:
	.size	 sub_80A6760,.Lfe27-sub_80A6760
	.align	2, 0
	.globl	sub_80A67A4
	.type	 sub_80A67A4,function
	.thumb_func
sub_80A67A4:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	bl	ResetPaletteStructByUid
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 sub_80A67A4,.Lfe28-sub_80A67A4
	.align	2, 0
	.globl	RunStoredCallbackWhenAffineAnimEnds
	.type	 RunStoredCallbackWhenAffineAnimEnds,function
	.thumb_func
RunStoredCallbackWhenAffineAnimEnds:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L265	@cond_branch
	add	r0, r2, #0
	bl	SetCallbackToStoredInData6
.L265:
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 RunStoredCallbackWhenAffineAnimEnds,.Lfe29-RunStoredCallbackWhenAffineAnimEnds
	.align	2, 0
	.globl	RunStoredCallbackWhenAnimEnds
	.type	 RunStoredCallbackWhenAnimEnds,function
	.thumb_func
RunStoredCallbackWhenAnimEnds:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L267	@cond_branch
	add	r0, r2, #0
	bl	SetCallbackToStoredInData6
.L267:
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 RunStoredCallbackWhenAnimEnds,.Lfe30-RunStoredCallbackWhenAnimEnds
	.align	2, 0
	.globl	DestroyAnimSpriteAndDisableBlend
	.type	 DestroyAnimSpriteAndDisableBlend,function
	.thumb_func
DestroyAnimSpriteAndDisableBlend:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 DestroyAnimSpriteAndDisableBlend,.Lfe31-DestroyAnimSpriteAndDisableBlend
	.align	2, 0
	.globl	DestroyAnimVisualTaskAndDisableBlend
	.type	 DestroyAnimVisualTaskAndDisableBlend,function
	.thumb_func
DestroyAnimVisualTaskAndDisableBlend:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 DestroyAnimVisualTaskAndDisableBlend,.Lfe32-DestroyAnimVisualTaskAndDisableBlend
	.align	2, 0
	.globl	SetSpriteCoordsToAnimAttackerCoords
	.type	 SetSpriteCoordsToAnimAttackerCoords,function
	.thumb_func
SetSpriteCoordsToAnimAttackerCoords:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L271
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L272:
	.align	2, 0
.L271:
	.word	gBattleAnimAttacker
.Lfe33:
	.size	 SetSpriteCoordsToAnimAttackerCoords,.Lfe33-SetSpriteCoordsToAnimAttackerCoords
	.align	2, 0
	.globl	SetAnimSpriteInitialXOffset
	.type	 SetAnimSpriteInitialXOffset,function
	.thumb_func
SetAnimSpriteInitialXOffset:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r8, r5
	ldr	r7, .L282
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L282+0x4
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	bhi	.L280	@cond_branch
	cmp	r6, r0
	bcs	.L276	@cond_branch
	lsl	r0, r5, #0x10
	b	.L281
.L283:
	.align	2, 0
.L282:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L276:
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L278	@cond_branch
.L280:
	ldrh	r1, [r4, #0x20]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	sub	r1, r1, r0
	strh	r1, [r4, #0x20]
	b	.L275
.L278:
	mov	r1, r8
	lsl	r0, r1, #0x10
.L281:
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
.L275:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 SetAnimSpriteInitialXOffset,.Lfe34-SetAnimSpriteInitialXOffset
	.align	2, 0
	.globl	InitAnimArcTranslation
	.type	 InitAnimArcTranslation,function
	.thumb_func
InitAnimArcTranslation:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	mov	r5, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	bl	__divsi3
	strh	r0, [r4, #0x3a]
	strh	r5, [r4, #0x3c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 InitAnimArcTranslation,.Lfe35-InitAnimArcTranslation
	.align	2, 0
	.globl	TranslateAnimHorizontalArc
	.type	 TranslateAnimHorizontalArc,function
	.thumb_func
TranslateAnimHorizontalArc:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L286	@cond_branch
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x3c]
	add	r0, r0, r1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	mov	r0, #0x0
	b	.L287
.L286:
	mov	r0, #0x1
.L287:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 TranslateAnimHorizontalArc,.Lfe36-TranslateAnimHorizontalArc
	.align	2, 0
	.globl	TranslateAnimVerticalArc
	.type	 TranslateAnimVerticalArc,function
	.thumb_func
TranslateAnimVerticalArc:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L289	@cond_branch
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x3c]
	add	r0, r0, r1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r0, #0x0
	b	.L290
.L289:
	mov	r0, #0x1
.L290:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 TranslateAnimVerticalArc,.Lfe37-TranslateAnimVerticalArc
	.align	2, 0
	.globl	SetSpritePrimaryCoordsFromSecondaryCoords
	.type	 SetSpritePrimaryCoordsFromSecondaryCoords,function
	.thumb_func
SetSpritePrimaryCoordsFromSecondaryCoords:
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r1, [r0, #0x20]
	ldrh	r1, [r0, #0x26]
	ldrh	r3, [r0, #0x22]
	add	r1, r1, r3
	strh	r1, [r0, #0x22]
	strh	r2, [r0, #0x24]
	strh	r2, [r0, #0x26]
	bx	lr
.Lfe38:
	.size	 SetSpritePrimaryCoordsFromSecondaryCoords,.Lfe38-SetSpritePrimaryCoordsFromSecondaryCoords
	.align	2, 0
	.globl	InitSpritePosToAnimTarget
	.type	 InitSpritePosToAnimTarget,function
	.thumb_func
InitSpritePosToAnimTarget:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L293	@cond_branch
	ldr	r4, .L294
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L293:
	ldr	r4, .L294+0x4
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L295:
	.align	2, 0
.L294:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.Lfe39:
	.size	 InitSpritePosToAnimTarget,.Lfe39-InitSpritePosToAnimTarget
	.align	2, 0
	.globl	InitSpritePosToAnimAttacker
	.type	 InitSpritePosToAnimAttacker,function
	.thumb_func
InitSpritePosToAnimAttacker:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L297	@cond_branch
	ldr	r4, .L300
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	b	.L299
.L301:
	.align	2, 0
.L300:
	.word	gBattleAnimAttacker
.L297:
	ldr	r4, .L302
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
.L299:
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L302+0x4
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L303:
	.align	2, 0
.L302:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe40:
	.size	 InitSpritePosToAnimAttacker,.Lfe40-InitSpritePosToAnimAttacker
	.align	2, 0
	.globl	InitSpritePosToAnimAttackerPartner
	.type	 InitSpritePosToAnimAttackerPartner,function
	.thumb_func
InitSpritePosToAnimAttackerPartner:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L305	@cond_branch
	ldr	r5, .L308
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x20]
	ldrb	r0, [r5]
	eor	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x1
	b	.L307
.L309:
	.align	2, 0
.L308:
	.word	gBattleAnimAttacker
.L305:
	ldr	r5, .L310
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x20]
	ldrb	r0, [r5]
	eor	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x3
.L307:
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x22]
	ldr	r4, .L310+0x4
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r6, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r6, #0x22]
	add	r0, r0, r1
	strh	r0, [r6, #0x22]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L311:
	.align	2, 0
.L310:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe41:
	.size	 InitSpritePosToAnimAttackerPartner,.Lfe41-InitSpritePosToAnimAttackerPartner
	.align	2, 0
	.globl	InitSpritePosToAnimBattler
	.type	 InitSpritePosToAnimBattler,function
	.thumb_func
InitSpritePosToAnimBattler:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r4, r7, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetAnimBattlerId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L314	@cond_branch
	add	r4, r6, #0
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L313	@cond_branch
.L314:
	add	r0, r5, #0
	bl	DestroyAnimSprite
	mov	r0, #0x0
	b	.L318
.L313:
	mov	r0, r8
	cmp	r0, #0
	bne	.L315	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r4, #0
	mov	r1, #0x1
	b	.L319
.L315:
	cmp	r7, #0x1
	beq	.L316	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r4, #0
	mov	r1, #0x3
.L319:
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L316:
	ldr	r4, .L320
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	mov	r0, #0x1
.L318:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L321:
	.align	2, 0
.L320:
	.word	gBattleAnimArgs
.Lfe42:
	.size	 InitSpritePosToAnimBattler,.Lfe42-InitSpritePosToAnimBattler
	.align	2, 0
	.globl	GetBattlerSide
	.type	 GetBattlerSide,function
	.thumb_func
GetBattlerSide:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L323
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	bx	lr
.L324:
	.align	2, 0
.L323:
	.word	gBattlerPositions
.Lfe43:
	.size	 GetBattlerSide,.Lfe43-GetBattlerSide
	.align	2, 0
	.globl	GetBattlerPosition
	.type	 GetBattlerPosition,function
	.thumb_func
GetBattlerPosition:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L326
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L327:
	.align	2, 0
.L326:
	.word	gBattlerPositions
.Lfe44:
	.size	 GetBattlerPosition,.Lfe44-GetBattlerPosition
	.align	2, 0
	.globl	GetBattlerAtPosition
	.type	 GetBattlerAtPosition,function
	.thumb_func
GetBattlerAtPosition:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r1, #0x0
	ldr	r0, .L335
	ldrb	r2, [r0]
	cmp	r1, r2
	bcs	.L330	@cond_branch
	ldr	r4, .L335+0x4
	ldrb	r0, [r4]
	cmp	r0, r3
	beq	.L330	@cond_branch
.L331:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	bcs	.L330	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, r3
	bne	.L331	@cond_branch
.L330:
	add	r0, r1, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L336:
	.align	2, 0
.L335:
	.word	gBattlersCount
	.word	gBattlerPositions
.Lfe45:
	.size	 GetBattlerAtPosition,.Lfe45-GetBattlerAtPosition
	.align	2, 0
	.globl	IsBattlerSpritePresent
	.type	 IsBattlerSpritePresent,function
	.thumb_func
IsBattlerSpritePresent:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L338	@cond_branch
	ldr	r0, .L353
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L345	@cond_branch
	ldr	r0, .L353+0x4
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L345	@cond_branch
	b	.L351
.L354:
	.align	2, 0
.L353:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L338:
	ldr	r0, .L355
	add	r0, r4, r0
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L351	@cond_branch
	ldr	r0, .L355+0x4
	ldr	r0, [r0]
	ldr	r1, .L355+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L345	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L346	@cond_branch
	ldr	r1, .L355+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L355+0x10
	b	.L352
.L356:
	.align	2, 0
.L355:
	.word	gBattlerPositions
	.word	gBattleStruct
	.word	0x2da
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L346:
	ldr	r1, .L357
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L357+0x4
.L352:
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.L345	@cond_branch
.L351:
	mov	r0, #0x0
	b	.L350
.L358:
	.align	2, 0
.L357:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L345:
	mov	r0, #0x1
.L350:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 IsBattlerSpritePresent,.Lfe46-IsBattlerSpritePresent
	.align	2, 0
	.globl	IsDoubleBattle
	.type	 IsDoubleBattle,function
	.thumb_func
IsDoubleBattle:
	ldr	r0, .L360
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	bx	lr
.L361:
	.align	2, 0
.L360:
	.word	gBattleTypeFlags
.Lfe47:
	.size	 IsDoubleBattle,.Lfe47-IsDoubleBattle
	.align	2, 0
	.globl	sub_80A6B30
	.type	 sub_80A6B30,function
	.thumb_func
sub_80A6B30:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L363	@cond_branch
	ldr	r0, .L366
	ldr	r0, [r0]
	str	r0, [r4]
	ldr	r0, .L366+0x4
	ldr	r0, [r0]
	str	r0, [r4, #0x4]
	mov	r1, #0x0
	mov	r0, #0xe
	strb	r0, [r4, #0x8]
	mov	r0, #0x1
	strb	r0, [r4, #0x9]
	strh	r1, [r4, #0xa]
	b	.L365
.L367:
	.align	2, 0
.L366:
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.L363:
	ldr	r0, .L368
	ldr	r0, [r0]
	str	r0, [r4]
	ldr	r0, .L368+0x4
	ldr	r0, [r0]
	str	r0, [r4, #0x4]
	mov	r0, #0x8
	strb	r0, [r4, #0x8]
	mov	r0, #0x1
	strb	r0, [r4, #0x9]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	strh	r0, [r4, #0xa]
.L365:
	strh	r1, [r4, #0xc]
	pop	{r4}
	pop	{r0}
	bx	r0
.L369:
	.align	2, 0
.L368:
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.Lfe48:
	.size	 sub_80A6B30,.Lfe48-sub_80A6B30
	.align	2, 0
	.globl	sub_80A6B90
	.type	 sub_80A6B90,function
	.thumb_func
sub_80A6B90:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L371	@cond_branch
	ldr	r0, .L376
	ldr	r0, [r0]
	str	r0, [r4]
	ldr	r0, .L376+0x4
	ldr	r0, [r0]
	str	r0, [r4, #0x4]
	mov	r1, #0x0
	mov	r0, #0xe
	strb	r0, [r4, #0x8]
	mov	r0, #0x1
	strb	r0, [r4, #0x9]
	strh	r1, [r4, #0xa]
	b	.L375
.L377:
	.align	2, 0
.L376:
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.L371:
	cmp	r5, #0x1
	bne	.L373	@cond_branch
	add	r0, r4, #0
	bl	sub_80A6B30
	b	.L372
.L373:
	ldr	r0, .L378
	ldr	r0, [r0]
	str	r0, [r4]
	ldr	r0, .L378+0x4
	ldr	r0, [r0]
	str	r0, [r4, #0x4]
	mov	r0, #0x9
	strb	r0, [r4, #0x8]
	mov	r0, #0x2
	strb	r0, [r4, #0x9]
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	strh	r0, [r4, #0xa]
.L375:
	strh	r1, [r4, #0xc]
.L372:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L379:
	.align	2, 0
.L378:
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.Lfe49:
	.size	 sub_80A6B90,.Lfe49-sub_80A6B90
	.align	2, 0
	.globl	sub_80A6BFC
	.type	 sub_80A6BFC,function
	.thumb_func
sub_80A6BFC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, .L386
	ldr	r0, [r0]
	str	r0, [r4]
	ldr	r0, .L386+0x4
	ldr	r0, [r0]
	str	r0, [r4, #0x4]
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	beq	.L381	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xe
	strb	r1, [r4, #0x8]
	mov	r1, #0x1
	strb	r1, [r4, #0x9]
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	b	.L382
.L387:
	.align	2, 0
.L386:
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.L381:
	ldr	r0, .L388
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x1
	bne	.L383	@cond_branch
	mov	r0, #0x8
	strb	r0, [r4, #0x8]
	strb	r1, [r4, #0x9]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	b	.L385
.L389:
	.align	2, 0
.L388:
	.word	gBattleAnimAttacker
.L383:
	mov	r0, #0x9
	strb	r0, [r4, #0x8]
	mov	r0, #0x2
	strb	r0, [r4, #0x9]
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
.L385:
	strh	r0, [r4, #0xa]
	strh	r5, [r4, #0xc]
.L382:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 sub_80A6BFC,.Lfe50-sub_80A6BFC
	.align	2, 0
	.globl	sub_80A6C68
	.type	 sub_80A6C68,function
	.thumb_func
sub_80A6C68:
	push	{lr}
	add	sp, sp, #-0x20
	add	r1, r0, #0
	add	r0, sp, #0xc
	bl	sub_80A6B90
	mov	r0, #0x0
	str	r0, [sp, #0x1c]
	add	r0, sp, #0x1c
	ldr	r1, [sp, #0xc]
	ldr	r2, .L391
	bl	CpuSet
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x9]
	ldr	r1, [sp, #0xc]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	add	r3, sp, #0xc
	ldrh	r3, [r3, #0xa]
	bl	LoadBgTiles
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x9]
	mov	r1, #0x20
	str	r1, [sp]
	mov	r1, #0x40
	str	r1, [sp, #0x4]
	mov	r1, #0x11
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x9]
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x20
	pop	{r0}
	bx	r0
.L392:
	.align	2, 0
.L391:
	.word	0x5000800
.Lfe51:
	.size	 sub_80A6C68,.Lfe51-sub_80A6C68
	.align	2, 0
	.globl	AnimLoadCompressedBgGfx
	.type	 AnimLoadCompressedBgGfx,function
	.thumb_func
AnimLoadCompressedBgGfx:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	mov	r8, r1
	add	r6, r2, #0
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r4, .L394
	ldr	r1, [r4]
	ldr	r2, .L394+0x4
	mov	r0, sp
	bl	CpuSet
	ldr	r1, [r4]
	mov	r0, r8
	bl	LZDecompressWram
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r1, [r4]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	add	r0, r5, #0
	add	r3, r6, #0
	bl	LoadBgTiles
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L395:
	.align	2, 0
.L394:
	.word	gUnknown_0202305C
	.word	0x5000800
.Lfe52:
	.size	 AnimLoadCompressedBgGfx,.Lfe52-AnimLoadCompressedBgGfx
	.align	2, 0
	.type	 InitAnimBgTilemapBuffer,function
	.thumb_func
InitAnimBgTilemapBuffer:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x40
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 InitAnimBgTilemapBuffer,.Lfe53-InitAnimBgTilemapBuffer
	.align	2, 0
	.globl	AnimLoadCompressedBgTilemap
	.type	 AnimLoadCompressedBgTilemap,function
	.thumb_func
AnimLoadCompressedBgTilemap:
	push	{r4, lr}
	add	r4, r0, #0
	bl	InitAnimBgTilemapBuffer
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	CopyBgTilemapBufferToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 AnimLoadCompressedBgTilemap,.Lfe54-AnimLoadCompressedBgTilemap
	.align	2, 0
	.globl	AnimLoadCompressedBgTilemapHandleContest
	.type	 AnimLoadCompressedBgTilemapHandleContest,function
	.thumb_func
AnimLoadCompressedBgTilemapHandleContest:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r2, #0
	ldrb	r0, [r4, #0x9]
	bl	InitAnimBgTilemapBuffer
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L399	@cond_branch
	ldrb	r0, [r4, #0x8]
	ldr	r1, [r4, #0x4]
	lsl	r3, r5, #0x18
	lsr	r3, r3, #0x18
	mov	r2, #0x0
	bl	sub_80A4720
.L399:
	ldrb	r0, [r4, #0x9]
	bl	CopyBgTilemapBufferToVram
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 AnimLoadCompressedBgTilemapHandleContest,.Lfe55-AnimLoadCompressedBgTilemapHandleContest
	.align	2, 0
	.globl	GetBattleBgPaletteNum
	.type	 GetBattleBgPaletteNum,function
	.thumb_func
GetBattleBgPaletteNum:
	push	{lr}
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L401	@cond_branch
	mov	r0, #0x2
	b	.L403
.L401:
	mov	r0, #0x1
.L403:
	pop	{r1}
	bx	r1
.Lfe56:
	.size	 GetBattleBgPaletteNum,.Lfe56-GetBattleBgPaletteNum
	.align	2, 0
	.globl	sub_80A6DAC
	.type	 sub_80A6DAC,function
	.thumb_func
sub_80A6DAC:
	push	{lr}
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L406	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L405	@cond_branch
.L406:
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	b	.L407
.L405:
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L407:
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 sub_80A6DAC,.Lfe57-sub_80A6DAC
	.align	2, 0
	.globl	TradeMenuBouncePartySprites
	.type	 TradeMenuBouncePartySprites,function
	.thumb_func
TradeMenuBouncePartySprites:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitSpriteDataForLinearTranslation
	ldr	r1, .L409
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L410:
	.align	2, 0
.L409:
	.word	TranslateSpriteLinearFixedPointIconFrame
.Lfe58:
	.size	 TradeMenuBouncePartySprites,.Lfe58-TradeMenuBouncePartySprites
	.align	2, 0
	.globl	InitSpriteDataForLinearTranslation
	.type	 InitSpriteDataForLinearTranslation,function
	.thumb_func
InitSpriteDataForLinearTranslation:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x32]
	ldrh	r1, [r5, #0x30]
	sub	r0, r0, r1
	ldrh	r4, [r5, #0x36]
	ldrh	r1, [r5, #0x34]
	sub	r4, r4, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x10
	mov	r2, #0x2e
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	mov	r6, #0x0
	strh	r0, [r5, #0x30]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x2e
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	__divsi3
	strh	r0, [r5, #0x32]
	strh	r6, [r5, #0x36]
	strh	r6, [r5, #0x34]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 InitSpriteDataForLinearTranslation,.Lfe59-InitSpriteDataForLinearTranslation
	.align	2, 0
	.globl	InitAnimLinearTranslation
	.type	 InitAnimLinearTranslation,function
	.thumb_func
InitAnimLinearTranslation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r7, r0]
	mov	r2, #0x30
	ldrsh	r0, [r7, r2]
	sub	r1, r1, r0
	mov	r3, #0x36
	ldrsh	r2, [r7, r3]
	mov	r3, #0x34
	ldrsh	r0, [r7, r3]
	sub	r2, r2, r0
	lsr	r0, r1, #0x1f
	mov	r8, r0
	lsr	r3, r2, #0x1f
	mov	r9, r3
	cmp	r1, #0
	bge	.L413	@cond_branch
	neg	r1, r1
.L413:
	lsl	r0, r1, #0x18
	lsr	r6, r0, #0x10
	add	r0, r2, #0
	cmp	r0, #0
	bge	.L414	@cond_branch
	neg	r0, r0
.L414:
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x10
	mov	r0, #0x2e
	ldrsh	r4, [r7, r0]
	add	r0, r6, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r2, r8
	cmp	r2, #0
	beq	.L415	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
	b	.L416
.L415:
	ldr	r0, .L419
	and	r6, r6, r0
.L416:
	mov	r3, r9
	cmp	r3, #0
	beq	.L417	@cond_branch
	mov	r0, #0x1
	orr	r5, r5, r0
	b	.L418
.L420:
	.align	2, 0
.L419:
	.word	0xfffe
.L417:
	ldr	r0, .L421
	and	r5, r5, r0
.L418:
	mov	r0, #0x0
	strh	r6, [r7, #0x30]
	strh	r5, [r7, #0x32]
	strh	r0, [r7, #0x36]
	strh	r0, [r7, #0x34]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L422:
	.align	2, 0
.L421:
	.word	0xfffe
.Lfe60:
	.size	 InitAnimLinearTranslation,.Lfe60-InitAnimLinearTranslation
	.align	2, 0
	.globl	StartAnimLinearTranslation
	.type	 StartAnimLinearTranslation,function
	.thumb_func
StartAnimLinearTranslation:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L424
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L425:
	.align	2, 0
.L424:
	.word	sub_80A6F98
.Lfe61:
	.size	 StartAnimLinearTranslation,.Lfe61-StartAnimLinearTranslation
	.align	2, 0
	.globl	sub_80A6F14
	.type	 sub_80A6F14,function
	.thumb_func
sub_80A6F14:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L427
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L428:
	.align	2, 0
.L427:
	.word	sub_80A6FB4
.Lfe62:
	.size	 sub_80A6F14,.Lfe62-sub_80A6F14
	.align	2, 0
	.globl	AnimTranslateLinear
	.type	 AnimTranslateLinear,function
	.thumb_func
AnimTranslateLinear:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L430	@cond_branch
	mov	r0, #0x1
	b	.L435
.L430:
	ldrh	r1, [r2, #0x30]
	ldrh	r4, [r2, #0x32]
	ldrh	r6, [r2, #0x34]
	ldrh	r5, [r2, #0x36]
	add	r0, r6, r1
	lsl	r3, r0, #0x10
	lsr	r6, r3, #0x10
	add	r0, r5, r4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L431	@cond_branch
	lsr	r0, r3, #0x18
	neg	r0, r0
	b	.L436
.L431:
	lsr	r0, r3, #0x18
.L436:
	strh	r0, [r2, #0x24]
	mov	r0, #0x1
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L433	@cond_branch
	lsr	r0, r5, #0x8
	neg	r0, r0
	b	.L437
.L433:
	lsr	r0, r5, #0x8
.L437:
	strh	r0, [r2, #0x26]
	strh	r6, [r2, #0x34]
	strh	r5, [r2, #0x36]
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	mov	r0, #0x0
.L435:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe63:
	.size	 AnimTranslateLinear,.Lfe63-AnimTranslateLinear
	.align	2, 0
	.globl	sub_80A6F98
	.type	 sub_80A6F98,function
	.thumb_func
sub_80A6F98:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L439	@cond_branch
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L439:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 sub_80A6F98,.Lfe64-sub_80A6F98
	.align	2, 0
	.type	 sub_80A6FB4,function
	.thumb_func
sub_80A6FB4:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8039E9C
	add	r0, r4, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L441	@cond_branch
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L441:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 sub_80A6FB4,.Lfe65-sub_80A6FB4
	.align	2, 0
	.globl	sub_80A6FD4
	.type	 sub_80A6FD4,function
	.thumb_func
sub_80A6FD4:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	sub	r0, r1, r0
	cmp	r0, #0
	bge	.L443	@cond_branch
	neg	r0, r0
.L443:
	lsl	r0, r0, #0x8
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe66:
	.size	 sub_80A6FD4,.Lfe66-sub_80A6FD4
	.align	2, 0
	.globl	sub_80A7000
	.type	 sub_80A7000,function
	.thumb_func
sub_80A7000:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	sub_80A6FD4
	ldr	r1, .L445
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L446:
	.align	2, 0
.L445:
	.word	sub_80A6F98
.Lfe67:
	.size	 sub_80A7000,.Lfe67-sub_80A7000
	.align	2, 0
	.type	 InitAnimFastLinearTranslation,function
	.thumb_func
InitAnimFastLinearTranslation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r7, r0]
	mov	r2, #0x30
	ldrsh	r0, [r7, r2]
	sub	r1, r1, r0
	mov	r3, #0x36
	ldrsh	r2, [r7, r3]
	mov	r3, #0x34
	ldrsh	r0, [r7, r3]
	sub	r2, r2, r0
	lsr	r0, r1, #0x1f
	mov	r8, r0
	lsr	r3, r2, #0x1f
	mov	r9, r3
	cmp	r1, #0
	bge	.L448	@cond_branch
	neg	r1, r1
.L448:
	lsl	r0, r1, #0x14
	lsr	r6, r0, #0x10
	add	r0, r2, #0
	cmp	r0, #0
	bge	.L449	@cond_branch
	neg	r0, r0
.L449:
	lsl	r0, r0, #0x14
	lsr	r5, r0, #0x10
	mov	r0, #0x2e
	ldrsh	r4, [r7, r0]
	add	r0, r6, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r2, r8
	cmp	r2, #0
	beq	.L450	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
	b	.L451
.L450:
	ldr	r0, .L454
	and	r6, r6, r0
.L451:
	mov	r3, r9
	cmp	r3, #0
	beq	.L452	@cond_branch
	mov	r0, #0x1
	orr	r5, r5, r0
	b	.L453
.L455:
	.align	2, 0
.L454:
	.word	0xfffe
.L452:
	ldr	r0, .L456
	and	r5, r5, r0
.L453:
	mov	r0, #0x0
	strh	r6, [r7, #0x30]
	strh	r5, [r7, #0x32]
	strh	r0, [r7, #0x36]
	strh	r0, [r7, #0x34]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L457:
	.align	2, 0
.L456:
	.word	0xfffe
.Lfe68:
	.size	 InitAnimFastLinearTranslation,.Lfe68-InitAnimFastLinearTranslation
	.align	2, 0
	.globl	InitAndRunAnimFastLinearTranslation
	.type	 InitAndRunAnimFastLinearTranslation,function
	.thumb_func
InitAndRunAnimFastLinearTranslation:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimFastLinearTranslation
	ldr	r1, .L459
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L460:
	.align	2, 0
.L459:
	.word	sub_80A7144
.Lfe69:
	.size	 InitAndRunAnimFastLinearTranslation,.Lfe69-InitAndRunAnimFastLinearTranslation
	.align	2, 0
	.globl	AnimFastTranslateLinear
	.type	 AnimFastTranslateLinear,function
	.thumb_func
AnimFastTranslateLinear:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L462	@cond_branch
	mov	r0, #0x1
	b	.L467
.L462:
	ldrh	r1, [r2, #0x30]
	ldrh	r4, [r2, #0x32]
	ldrh	r6, [r2, #0x34]
	ldrh	r5, [r2, #0x36]
	add	r0, r6, r1
	lsl	r3, r0, #0x10
	lsr	r6, r3, #0x10
	add	r0, r5, r4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L463	@cond_branch
	lsr	r0, r3, #0x14
	neg	r0, r0
	b	.L468
.L463:
	lsr	r0, r3, #0x14
.L468:
	strh	r0, [r2, #0x24]
	mov	r0, #0x1
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L465	@cond_branch
	lsr	r0, r5, #0x4
	neg	r0, r0
	b	.L469
.L465:
	lsr	r0, r5, #0x4
.L469:
	strh	r0, [r2, #0x26]
	strh	r6, [r2, #0x34]
	strh	r5, [r2, #0x36]
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	mov	r0, #0x0
.L467:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe70:
	.size	 AnimFastTranslateLinear,.Lfe70-AnimFastTranslateLinear
	.align	2, 0
	.type	 sub_80A7144,function
	.thumb_func
sub_80A7144:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimFastTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L471	@cond_branch
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L471:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe71:
	.size	 sub_80A7144,.Lfe71-sub_80A7144
	.align	2, 0
	.globl	InitAnimFastLinearTranslationWithSpeed
	.type	 InitAnimFastLinearTranslationWithSpeed,function
	.thumb_func
InitAnimFastLinearTranslationWithSpeed:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	sub	r0, r1, r0
	cmp	r0, #0
	bge	.L473	@cond_branch
	neg	r0, r0
.L473:
	lsl	r0, r0, #0x4
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	InitAnimFastLinearTranslation
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe72:
	.size	 InitAnimFastLinearTranslationWithSpeed,.Lfe72-InitAnimFastLinearTranslationWithSpeed
	.align	2, 0
	.globl	sub_80A718C
	.type	 sub_80A718C,function
	.thumb_func
sub_80A718C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimFastLinearTranslationWithSpeed
	ldr	r1, .L475
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L476:
	.align	2, 0
.L475:
	.word	sub_80A7144
.Lfe73:
	.size	 sub_80A718C,.Lfe73-sub_80A718C
	.align	2, 0
	.globl	SetSpriteRotScale
	.type	 SetSpriteRotScale,function
	.thumb_func
SetSpriteRotScale:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r5, .L479
	lsl	r2, r2, #0x10
	lsr	r1, r1, #0x10
	orr	r1, r1, r2
	str	r1, [sp]
	ldr	r0, [sp, #0x4]
	and	r0, r0, r5
	orr	r0, r0, r3
	str	r0, [sp, #0x4]
	bl	sub_80A7238
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L478	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0]
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp]
	and	r1, r1, r5
	orr	r1, r1, r0
	str	r1, [sp]
.L478:
	ldr	r1, .L479+0x4
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x3]
	lsl	r4, r4, #0x1a
	lsr	r4, r4, #0x1b
	add	r5, sp, #0x8
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ObjAffineSet
	ldr	r0, .L479+0x8
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r5]
	strh	r0, [r4]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x2]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x4]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x6]
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L480:
	.align	2, 0
.L479:
	.word	-0x10000
	.word	gSprites
	.word	gOamMatrices
.Lfe74:
	.size	 SetSpriteRotScale,.Lfe74-SetSpriteRotScale
	.align	2, 0
	.type	 sub_80A7238,function
	.thumb_func
sub_80A7238:
	push	{r4, lr}
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L482	@cond_branch
	ldr	r4, .L487
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r2, #0x32
	ldrsh	r0, [r1, r2]
	cmp	r0, #0xc9
	beq	.L482	@cond_branch
	mov	r0, #0x1
	b	.L486
.L488:
	.align	2, 0
.L487:
	.word	gSprites
.L482:
	mov	r0, #0x0
.L486:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe75:
	.size	 sub_80A7238,.Lfe75-sub_80A7238
	.align	2, 0
	.globl	PrepareBattlerSpriteForRotScale
	.type	 PrepareBattlerSpriteForRotScale,function
	.thumb_func
PrepareBattlerSpriteForRotScale:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	ldr	r1, .L493
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L491	@cond_branch
	add	r0, r7, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L490	@cond_branch
.L491:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L490:
	ldr	r1, .L493
	lsl	r4, r6, #0x4
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	mov	r0, #0x3
	mov	r1, r8
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x1]
	add	r2, r5, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L492	@cond_branch
	ldrb	r0, [r5, #0x1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L492	@cond_branch
	ldr	r0, .L493+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r5, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
.L492:
	ldr	r1, .L493
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r3, [r0, #0x1]
	mov	r1, #0x3
	orr	r3, r3, r1
	strb	r3, [r0, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r0, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	bl	CalcCenterToCornerVec
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L494:
	.align	2, 0
.L493:
	.word	gSprites
	.word	gBattleSpritesDataPtr
.Lfe76:
	.size	 PrepareBattlerSpriteForRotScale,.Lfe76-PrepareBattlerSpriteForRotScale
	.align	2, 0
	.globl	ResetSpriteRotScale
	.type	 ResetSpriteRotScale,function
	.thumb_func
ResetSpriteRotScale:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r4, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldr	r1, .L496
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x1]
	mov	r1, #0x4
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x1
	orr	r1, r1, r2
	mov	r2, #0xd
	neg	r2, r2
	and	r1, r1, r2
	strb	r1, [r0, #0x1]
	add	r3, r0, #0
	add	r3, r3, #0x2c
	ldrb	r2, [r3]
	mov	r1, #0x7f
	and	r1, r1, r2
	strb	r1, [r3]
	ldrb	r3, [r0, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r0, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	bl	CalcCenterToCornerVec
	pop	{r4}
	pop	{r0}
	bx	r0
.L497:
	.align	2, 0
.L496:
	.word	gSprites
.Lfe77:
	.size	 ResetSpriteRotScale,.Lfe77-ResetSpriteRotScale
	.align	2, 0
	.globl	SetBattlerSpriteYOffsetFromRotation
	.type	 SetBattlerSpriteYOffsetFromRotation,function
	.thumb_func
SetBattlerSpriteYOffsetFromRotation:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L500
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	ldr	r1, .L500+0x4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x4]
	mov	r3, #0x4
	ldrsh	r0, [r0, r3]
	cmp	r0, #0
	bge	.L499	@cond_branch
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L499:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r2, #0x26]
	pop	{r0}
	bx	r0
.L501:
	.align	2, 0
.L500:
	.word	gSprites
	.word	gOamMatrices
.Lfe78:
	.size	 SetBattlerSpriteYOffsetFromRotation,.Lfe78-SetBattlerSpriteYOffsetFromRotation
	.align	2, 0
	.globl	TrySetSpriteRotScale
	.type	 TrySetSpriteRotScale,function
	.thumb_func
TrySetSpriteRotScale:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	ldr	r0, [sp, #0x28]
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r7, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L503	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	cmp	r6, #0
	beq	.L504	@cond_branch
	ldrb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
.L504:
	ldr	r6, .L506
	lsl	r0, r7, #0x10
	orr	r5, r5, r0
	str	r5, [sp]
	ldr	r0, [sp, #0x4]
	and	r0, r0, r6
	mov	r1, r8
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	bl	sub_80A7238
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L505	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0]
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp]
	and	r1, r1, r6
	orr	r1, r1, r0
	str	r1, [sp]
.L505:
	ldrb	r4, [r4, #0x3]
	lsl	r4, r4, #0x1a
	lsr	r4, r4, #0x1b
	add	r5, sp, #0x8
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ObjAffineSet
	ldr	r0, .L506+0x4
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r5]
	strh	r0, [r4]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x2]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x4]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x6]
.L503:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L507:
	.align	2, 0
.L506:
	.word	-0x10000
	.word	gOamMatrices
.Lfe79:
	.size	 TrySetSpriteRotScale,.Lfe79-TrySetSpriteRotScale
	.align	2, 0
	.globl	sub_80A749C
	.type	 sub_80A749C,function
	.thumb_func
sub_80A749C:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 sub_80A749C,.Lfe80-sub_80A749C
	.align	2, 0
	.type	 ArcTan2_,function
	.thumb_func
ArcTan2_:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe81:
	.size	 ArcTan2_,.Lfe81-ArcTan2_
	.align	2, 0
	.globl	ArcTan2Neg
	.type	 ArcTan2Neg,function
	.thumb_func
ArcTan2Neg:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2_
	lsl	r0, r0, #0x10
	neg	r0, r0
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe82:
	.size	 ArcTan2Neg,.Lfe82-ArcTan2Neg
	.align	2, 0
	.globl	SetGreyscaleOrOriginalPalette
	.type	 SetGreyscaleOrOriginalPalette,function
	.thumb_func
SetGreyscaleOrOriginalPalette:
	push	{r4, r5, r6, r7, lr}
	lsl	r1, r1, #0x18
	lsl	r0, r0, #0x14
	lsr	r0, r0, #0x10
	cmp	r1, #0
	bne	.L512	@cond_branch
	ldr	r2, .L519
	ldr	r1, .L519+0x4
	lsl	r0, r0, #0x1
	add	r4, r0, r1
	add	r5, r0, r2
	mov	r6, #0xf
.L516:
	ldr	r0, [r5]
	lsl	r2, r0, #0x1b
	lsr	r2, r2, #0x1b
	lsl	r1, r0, #0x16
	lsr	r1, r1, #0x1b
	add	r2, r2, r1
	lsl	r0, r0, #0x11
	lsr	r0, r0, #0x1b
	add	r0, r0, r2
	mov	r1, #0x3
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1f
	and	r0, r0, r1
	ldrb	r1, [r4]
	mov	r3, #0x20
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4]
	lsl	r3, r0, #0x5
	ldrh	r1, [r4]
	ldr	r7, .L519+0x8
	add	r2, r7, #0
	and	r1, r1, r2
	orr	r1, r1, r3
	strh	r1, [r4]
	lsl	r0, r0, #0x2
	ldrb	r1, [r4, #0x1]
	mov	r3, #0x7d
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
	add	r4, r4, #0x2
	add	r5, r5, #0x2
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L516	@cond_branch
	b	.L518
.L520:
	.align	2, 0
.L519:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	-0x3e1
.L512:
	lsl	r1, r0, #0x1
	ldr	r0, .L521
	add	r0, r1, r0
	ldr	r2, .L521+0x4
	add	r1, r1, r2
	ldr	r2, .L521+0x8
	bl	CpuSet
.L518:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L522:
	.align	2, 0
.L521:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x4000008
.Lfe83:
	.size	 SetGreyscaleOrOriginalPalette,.Lfe83-SetGreyscaleOrOriginalPalette
	.align	2, 0
	.globl	sub_80A75AC
	.type	 sub_80A75AC,function
	.thumb_func
sub_80A75AC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	ldr	r6, [sp, #0x30]
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	sl, r4
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp, #0x4]
	mov	r4, #0x0
	cmp	r0, #0
	beq	.L524	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L525	@cond_branch
	mov	r4, #0xe
	b	.L524
.L525:
	bl	GetBattleBgPaletteNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0x1
	lsl	r4, r4, r0
.L524:
	cmp	r7, #0
	beq	.L527	@cond_branch
	ldr	r0, .L539
	ldrb	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L527:
	mov	r0, r8
	cmp	r0, #0
	beq	.L528	@cond_branch
	ldr	r0, .L539+0x4
	ldrb	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L528:
	mov	r0, r9
	cmp	r0, #0
	beq	.L529	@cond_branch
	ldr	r6, .L539
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L529	@cond_branch
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L529:
	mov	r0, sl
	cmp	r0, #0
	beq	.L531	@cond_branch
	ldr	r6, .L539+0x4
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L531	@cond_branch
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L531:
	ldr	r0, [sp]
	cmp	r0, #0
	beq	.L533	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L534	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	b	.L538
.L540:
	.align	2, 0
.L539:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L534:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
.L538:
	orr	r4, r4, r0
.L533:
	ldr	r0, [sp, #0x4]
	cmp	r0, #0
	beq	.L536	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L536	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	orr	r4, r4, r0
.L536:
	add	r0, r4, #0
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe84:
	.size	 sub_80A75AC,.Lfe84-sub_80A75AC
	.align	2, 0
	.globl	sub_80A76C4
	.type	 sub_80A76C4,function
	.thumb_func
sub_80A76C4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	mov	r4, #0x0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L542	@cond_branch
	cmp	r5, #0
	beq	.L544	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0xb
	b	.L544
.L542:
	cmp	r5, #0
	beq	.L545	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L545	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r4, #0x1
	lsl	r4, r4, r0
.L545:
	cmp	r6, #0
	beq	.L547	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L547	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L547:
	cmp	r7, #0
	beq	.L549	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L549	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L549:
	mov	r0, r8
	cmp	r0, #0
	beq	.L544	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L544	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L544:
	add	r0, r4, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 sub_80A76C4,.Lfe85-sub_80A76C4
	.align	2, 0
	.globl	sub_80A77AC
	.type	 sub_80A77AC,function
	.thumb_func
sub_80A77AC:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.Lfe86:
	.size	 sub_80A77AC,.Lfe86-sub_80A77AC
	.align	2, 0
	.type	 GetBattlerAtPosition_,function
	.thumb_func
GetBattlerAtPosition_:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe87:
	.size	 GetBattlerAtPosition_,.Lfe87-GetBattlerAtPosition_
	.align	2, 0
	.globl	AnimSpriteOnMonPos
	.type	 AnimSpriteOnMonPos,function
	.thumb_func
AnimSpriteOnMonPos:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L557	@cond_branch
	ldr	r2, .L567
	mov	r3, #0x6
	ldrsh	r0, [r2, r3]
	mov	r1, #0x0
	cmp	r0, #0
	bne	.L558	@cond_branch
	mov	r1, #0x1
.L558:
	mov	r3, #0x4
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L560	@cond_branch
	add	r0, r4, #0
	bl	InitSpritePosToAnimAttacker
	b	.L561
.L568:
	.align	2, 0
.L567:
	.word	gBattleAnimArgs
.L560:
	cmp	r0, #0x1
	bne	.L562	@cond_branch
	add	r0, r4, #0
	bl	InitSpritePosToAnimTarget
	b	.L561
.L562:
	cmp	r0, #0x2
	bne	.L561	@cond_branch
	add	r0, r4, #0
	bl	InitSpritePosToAnimAttackerPartner
.L561:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L565
.L557:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L565	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L565:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe88:
	.size	 AnimSpriteOnMonPos,.Lfe88-AnimSpriteOnMonPos
	.align	2, 0
	.globl	TranslateAnimSpriteToTargetMonLocation
	.type	 TranslateAnimSpriteToTargetMonLocation,function
	.thumb_func
TranslateAnimSpriteToTargetMonLocation:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r6, .L575
	mov	r1, #0xa
	ldrsh	r0, [r6, r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0x0
	cmp	r0, #0
	bne	.L570	@cond_branch
	mov	r1, #0x1
.L570:
	ldrb	r0, [r6, #0xa]
	mov	r7, #0x1
	cmp	r0, #0
	bne	.L572	@cond_branch
	mov	r7, #0x3
.L572:
	add	r0, r5, #0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L575+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L574	@cond_branch
	ldrh	r0, [r6, #0x4]
	neg	r0, r0
	strh	r0, [r6, #0x4]
.L574:
	ldrh	r0, [r6, #0x8]
	strh	r0, [r5, #0x2e]
	ldr	r4, .L575+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	add	r1, r7, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x6]
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	ldr	r0, .L575+0xc
	str	r0, [r5, #0x1c]
	ldr	r1, .L575+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L576:
	.align	2, 0
.L575:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe89:
	.size	 TranslateAnimSpriteToTargetMonLocation,.Lfe89-TranslateAnimSpriteToTargetMonLocation
	.align	2, 0
	.globl	AnimThrowProjectile
	.type	 AnimThrowProjectile,function
	.thumb_func
AnimThrowProjectile:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L579
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L578	@cond_branch
	ldr	r1, .L579+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L578:
	ldr	r4, .L579+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x2e]
	ldr	r5, .L579+0x8
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r6, #0x36]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r6, #0x38]
	add	r0, r6, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L579+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L580:
	.align	2, 0
.L579:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimThrowProjectile_Step
.Lfe90:
	.size	 AnimThrowProjectile,.Lfe90-AnimThrowProjectile
	.align	2, 0
	.type	 AnimThrowProjectile_Step,function
	.thumb_func
AnimThrowProjectile_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L582	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L582:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 AnimThrowProjectile_Step,.Lfe91-AnimThrowProjectile_Step
	.align	2, 0
	.globl	AnimTravelDiagonally
	.type	 AnimTravelDiagonally,function
	.thumb_func
AnimTravelDiagonally:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r0, .L590
	mov	r2, #0xc
	ldrsh	r1, [r0, r2]
	cmp	r1, #0
	bne	.L584	@cond_branch
	mov	r4, #0x1
	mov	r7, #0x3
	b	.L585
.L591:
	.align	2, 0
.L590:
	.word	gBattleAnimArgs
.L584:
	mov	r4, #0x0
	mov	r7, #0x1
.L585:
	mov	r1, #0xa
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L586	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L592
	b	.L589
.L593:
	.align	2, 0
.L592:
	.word	gBattleAnimAttacker
.L586:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	InitSpritePosToAnimTarget
	ldr	r0, .L594
.L589:
	ldrb	r6, [r0]
	ldr	r0, .L594+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L588	@cond_branch
	ldr	r1, .L594+0x8
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L588:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	InitSpritePosToAnimTarget
	ldr	r4, .L594+0x8
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x2e]
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r4, #0x4]
	add	r0, r0, r2
	strh	r0, [r5, #0x32]
	add	r0, r6, #0
	add	r1, r7, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x6]
	add	r0, r0, r4
	strh	r0, [r5, #0x36]
	ldr	r0, .L594+0xc
	str	r0, [r5, #0x1c]
	ldr	r1, .L594+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L595:
	.align	2, 0
.L594:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe92:
	.size	 AnimTravelDiagonally,.Lfe92-AnimTravelDiagonally
	.align	2, 0
	.globl	CloneBattlerSpriteWithBlend
	.type	 CloneBattlerSpriteWithBlend,function
	.thumb_func
CloneBattlerSpriteWithBlend:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L597	@cond_branch
	mov	r6, #0x0
	ldr	r2, .L605
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r1, r0, #0x2
.L601:
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	add	r5, r4, #0
	add	r5, r5, #0x3e
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L600	@cond_branch
	add	r0, r4, #0
	add	r1, r1, r2
	mov	r2, #0x44
	bl	memcpy
	ldrb	r1, [r4, #0x1]
	mov	r2, #0xd
	neg	r2, r2
	add	r0, r2, #0
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
	ldrb	r0, [r5]
	add	r2, r2, #0x8
	add	r1, r2, #0
	and	r0, r0, r1
	strb	r0, [r5]
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	b	.L604
.L606:
	.align	2, 0
.L605:
	.word	gSprites
.L600:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x3f
	bls	.L601	@cond_branch
.L597:
	mov	r0, #0x1
	neg	r0, r0
.L604:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe93:
	.size	 CloneBattlerSpriteWithBlend,.Lfe93-CloneBattlerSpriteWithBlend
	.align	2, 0
	.globl	obj_delete_but_dont_free_vram
	.type	 obj_delete_but_dont_free_vram,function
	.thumb_func
obj_delete_but_dont_free_vram:
	push	{lr}
	add	r3, r0, #0
	add	r3, r3, #0x3f
	ldrb	r1, [r3]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r3]
	bl	DestroySprite
	pop	{r0}
	bx	r0
.Lfe94:
	.size	 obj_delete_but_dont_free_vram,.Lfe94-obj_delete_but_dont_free_vram
	.align	2, 0
	.globl	AnimTask_AlphaFadeIn
	.type	 AnimTask_AlphaFadeIn,function
	.thumb_func
AnimTask_AlphaFadeIn:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	mov	r3, #0x0
	ldr	r2, .L613
	mov	r0, #0x4
	ldrsh	r1, [r2, r0]
	mov	r4, #0x0
	ldrsh	r0, [r2, r4]
	cmp	r1, r0
	ble	.L609	@cond_branch
	mov	r3, #0x1
.L609:
	cmp	r1, r0
	bge	.L610	@cond_branch
	ldr	r3, .L613+0x4
.L610:
	mov	r0, #0x6
	ldrsh	r1, [r2, r0]
	mov	r4, #0x2
	ldrsh	r0, [r2, r4]
	cmp	r1, r0
	ble	.L611	@cond_branch
	mov	r6, #0x1
.L611:
	cmp	r1, r0
	bge	.L612	@cond_branch
	ldr	r6, .L613+0x4
.L612:
	ldr	r0, .L613+0x8
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	mov	r1, #0x0
	strh	r1, [r4, #0x8]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r4, #0xa]
	strh	r1, [r4, #0xc]
	ldrh	r0, [r2]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r4, #0x10]
	strh	r3, [r4, #0x12]
	strh	r6, [r4, #0x14]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r4, #0x16]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r4, #0x18]
	ldrh	r1, [r2, #0x2]
	lsl	r1, r1, #0x8
	ldrh	r0, [r2]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L613+0xc
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L614:
	.align	2, 0
.L613:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	gTasks
	.word	sub_80A7AFC
.Lfe95:
	.size	 AnimTask_AlphaFadeIn,.Lfe95-AnimTask_AlphaFadeIn
	.align	2, 0
	.type	 sub_80A7AFC,function
	.thumb_func
sub_80A7AFC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L622
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	ble	.L616	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L617	@cond_branch
	ldrh	r2, [r4, #0xe]
	mov	r3, #0xe
	ldrsh	r1, [r4, r3]
	mov	r3, #0x16
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	beq	.L619	@cond_branch
	ldrh	r0, [r4, #0x12]
	add	r0, r2, r0
	strh	r0, [r4, #0xe]
	b	.L619
.L623:
	.align	2, 0
.L622:
	.word	gTasks
.L617:
	ldrh	r2, [r4, #0x10]
	mov	r0, #0x10
	ldrsh	r1, [r4, r0]
	mov	r3, #0x18
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	beq	.L619	@cond_branch
	ldrh	r0, [r4, #0x14]
	add	r0, r2, r0
	strh	r0, [r4, #0x10]
.L619:
	ldrh	r1, [r4, #0x10]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0xe]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0xe
	ldrsh	r1, [r4, r0]
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L616	@cond_branch
	mov	r3, #0x10
	ldrsh	r1, [r4, r3]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L616	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L616:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 sub_80A7AFC,.Lfe96-sub_80A7AFC
	.align	2, 0
	.globl	AnimTask_BlendMonInAndOut
	.type	 AnimTask_BlendMonInAndOut,function
	.thumb_func
AnimTask_BlendMonInAndOut:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L626
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	bne	.L625	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L624
.L627:
	.align	2, 0
.L626:
	.word	gBattleAnimArgs
.L625:
	ldr	r1, .L628
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r2, .L628+0x4
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x5]
	lsr	r1, r1, #0x4
	lsl	r1, r1, #0x4
	ldr	r3, .L628+0x8
	add	r2, r3, #0
	add	r1, r1, r2
	strh	r1, [r0, #0x8]
	bl	AnimTask_BlendPalInAndOutSetup
.L624:
	pop	{r4}
	pop	{r0}
	bx	r0
.L629:
	.align	2, 0
.L628:
	.word	gTasks
	.word	gSprites
	.word	0x101
.Lfe97:
	.size	 AnimTask_BlendMonInAndOut,.Lfe97-AnimTask_BlendMonInAndOut
	.align	2, 0
	.type	 AnimTask_BlendPalInAndOutSetup,function
	.thumb_func
AnimTask_BlendPalInAndOutSetup:
	ldr	r3, .L631
	ldrh	r1, [r3, #0x2]
	mov	r2, #0x0
	strh	r1, [r0, #0xa]
	strh	r2, [r0, #0xc]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r0, #0xe]
	strh	r2, [r0, #0x10]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r0, #0x12]
	strh	r2, [r0, #0x14]
	ldrh	r1, [r3, #0x8]
	strh	r1, [r0, #0x16]
	ldr	r1, .L631+0x4
	str	r1, [r0]
	bx	lr
.L632:
	.align	2, 0
.L631:
	.word	gBattleAnimArgs
	.word	AnimTask_BlendMonInAndOutStep
.Lfe98:
	.size	 AnimTask_BlendPalInAndOutSetup,.Lfe98-AnimTask_BlendPalInAndOutSetup
	.align	2, 0
	.type	 AnimTask_BlendMonInAndOutStep,function
	.thumb_func
AnimTask_BlendMonInAndOutStep:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L641
	add	r4, r0, r1
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x12
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L634	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L635	@cond_branch
	ldrh	r2, [r4, #0xc]
	add	r2, r2, #0x1
	strh	r2, [r4, #0xc]
	ldrh	r0, [r4, #0x8]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrh	r3, [r4, #0xa]
	mov	r1, #0xf
	bl	BlendPalette
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L634	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
	b	.L634
.L642:
	.align	2, 0
.L641:
	.word	gTasks
.L635:
	ldrh	r2, [r4, #0xc]
	sub	r2, r2, #0x1
	strh	r2, [r4, #0xc]
	ldrh	r0, [r4, #0x8]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrh	r3, [r4, #0xa]
	mov	r1, #0xf
	bl	BlendPalette
	mov	r0, #0xc
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L634	@cond_branch
	ldrh	r0, [r4, #0x16]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L639	@cond_branch
	strh	r1, [r4, #0x10]
	strh	r1, [r4, #0x14]
	b	.L634
.L639:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L634:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 AnimTask_BlendMonInAndOutStep,.Lfe99-AnimTask_BlendMonInAndOutStep
	.align	2, 0
	.globl	AnimTask_BlendPalInAndOutByTag
	.type	 AnimTask_BlendPalInAndOutByTag,function
	.thumb_func
AnimTask_BlendPalInAndOutByTag:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L645
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	bne	.L644	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L643
.L646:
	.align	2, 0
.L645:
	.word	gBattleAnimArgs
.L644:
	ldr	r1, .L647
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	lsl	r1, r2, #0x4
	ldr	r2, .L647+0x4
	add	r1, r1, r2
	strh	r1, [r0, #0x8]
	bl	AnimTask_BlendPalInAndOutSetup
.L643:
	pop	{r4}
	pop	{r0}
	bx	r0
.L648:
	.align	2, 0
.L647:
	.word	gTasks
	.word	0x101
.Lfe100:
	.size	 AnimTask_BlendPalInAndOutByTag,.Lfe100-AnimTask_BlendPalInAndOutByTag
	.align	2, 0
	.globl	PrepareAffineAnimInTaskData
	.type	 PrepareAffineAnimInTaskData,function
	.thumb_func
PrepareAffineAnimInTaskData:
	push	{r4, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x0
	strh	r1, [r3, #0x16]
	strh	r1, [r3, #0x18]
	strh	r1, [r3, #0x1a]
	strh	r4, [r3, #0x26]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r3, #0x1c]
	strh	r0, [r3, #0x1e]
	strh	r1, [r3, #0x20]
	add	r0, r3, #0
	add	r0, r0, #0x22
	add	r3, r3, #0x24
	add	r1, r3, #0
	bl	StorePointerInVars
	add	r0, r4, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 PrepareAffineAnimInTaskData,.Lfe101-PrepareAffineAnimInTaskData
	.align	2, 0
	.globl	RunAffineAnimFromTaskData
	.type	 RunAffineAnimFromTaskData,function
	.thumb_func
RunAffineAnimFromTaskData:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L671
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	bl	LoadPointerFromVars
	mov	r3, #0x16
	ldrsh	r1, [r4, r3]
	lsl	r1, r1, #0x3
	add	r1, r0, r1
	str	r1, [r5]
	mov	r6, #0x0
	ldrsh	r2, [r1, r6]
	ldr	r0, .L671+0x4
	cmp	r2, r0
	beq	.L655	@cond_branch
	cmp	r2, r0
	bgt	.L667	@cond_branch
	sub	r0, r0, #0x1
	cmp	r2, r0
	beq	.L656	@cond_branch
	ldrb	r0, [r1, #0x5]
	cmp	r0, #0
	bne	.L653	@cond_branch
	ldrh	r0, [r1]
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x1e]
	ldrb	r0, [r1, #0x4]
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	add	r0, r1, #0
	add	r0, r0, #0x8
	str	r0, [r5]
.L653:
	ldr	r1, [r5]
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x1c]
	add	r0, r0, r2
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r1, #0x2]
	ldrh	r3, [r4, #0x1e]
	add	r0, r0, r3
	strh	r0, [r4, #0x1e]
	ldrh	r0, [r4, #0x20]
	ldrb	r1, [r1, #0x4]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x1c
	ldrsh	r1, [r4, r6]
	mov	r3, #0x1e
	ldrsh	r2, [r4, r3]
	ldrh	r3, [r4, #0x20]
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromYScale
	ldrh	r0, [r4, #0x18]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x18]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r1, [r5]
	ldrb	r1, [r1, #0x5]
	cmp	r0, r1
	blt	.L651	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x18]
	b	.L657
.L672:
	.align	2, 0
.L671:
	.word	gAnimTaskAffineAnim
	.word	0x7ffe
.L655:
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x16]
	b	.L651
.L656:
	ldrh	r2, [r1, #0x2]
	mov	r6, #0x2
	ldrsh	r0, [r1, r6]
	cmp	r0, #0
	beq	.L657	@cond_branch
	ldrh	r1, [r4, #0x1a]
	mov	r3, #0x1a
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L658	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L660	@cond_branch
	b	.L657
.L658:
	strh	r2, [r4, #0x1a]
.L660:
	mov	r6, #0x16
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	beq	.L651	@cond_branch
	ldr	r3, .L673
	ldr	r5, .L673+0x4
.L662:
	ldrh	r2, [r4, #0x16]
	sub	r1, r2, #0x1
	strh	r1, [r4, #0x16]
	ldr	r0, [r3]
	sub	r0, r0, #0x8
	str	r0, [r3]
	mov	r6, #0x0
	ldrsh	r0, [r0, r6]
	cmp	r0, r5
	beq	.L670	@cond_branch
	lsl	r0, r1, #0x10
	cmp	r0, #0
	bne	.L662	@cond_branch
	b	.L651
.L674:
	.align	2, 0
.L673:
	.word	gAnimTaskAffineAnim
	.word	0x7ffd
.L657:
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	b	.L651
.L667:
	ldr	r2, .L675
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	mov	r0, #0x0
	b	.L669
.L676:
	.align	2, 0
.L675:
	.word	gSprites
.L670:
	strh	r2, [r4, #0x16]
.L651:
	mov	r0, #0x1
.L669:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe102:
	.size	 RunAffineAnimFromTaskData,.Lfe102-RunAffineAnimFromTaskData
	.align	2, 0
	.globl	SetBattlerSpriteYOffsetFromYScale
	.type	 SetBattlerSpriteYOffsetFromYScale,function
	.thumb_func
SetBattlerSpriteYOffsetFromYScale:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBattlerYDeltaFromSpriteId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	mov	r1, #0x40
	sub	r5, r1, r0
	ldr	r1, .L679
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1b
	lsl	r0, r5, #0x8
	ldr	r2, .L679+0x4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x6
	ldrsh	r1, [r1, r2]
	bl	__divsi3
	cmp	r0, #0x80
	ble	.L678	@cond_branch
	mov	r0, #0x80
.L678:
	sub	r0, r5, r0
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L680:
	.align	2, 0
.L679:
	.word	gSprites
	.word	gOamMatrices
.Lfe103:
	.size	 SetBattlerSpriteYOffsetFromYScale,.Lfe103-SetBattlerSpriteYOffsetFromYScale
	.align	2, 0
	.globl	SetBattlerSpriteYOffsetFromOtherYScale
	.type	 SetBattlerSpriteYOffsetFromOtherYScale,function
	.thumb_func
SetBattlerSpriteYOffsetFromOtherYScale:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerYDeltaFromSpriteId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	mov	r1, #0x40
	sub	r5, r1, r0
	ldr	r1, .L683
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1b
	lsl	r0, r5, #0x8
	ldr	r2, .L683+0x4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x6
	ldrsh	r1, [r1, r2]
	bl	__divsi3
	cmp	r0, #0x80
	ble	.L682	@cond_branch
	mov	r0, #0x80
.L682:
	sub	r0, r5, r0
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L684:
	.align	2, 0
.L683:
	.word	gSprites
	.word	gOamMatrices
.Lfe104:
	.size	 SetBattlerSpriteYOffsetFromOtherYScale,.Lfe104-SetBattlerSpriteYOffsetFromOtherYScale
	.align	2, 0
	.type	 GetBattlerYDeltaFromSpriteId,function
	.thumb_func
GetBattlerYDeltaFromSpriteId:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L707
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r1, .L707+0x4
	ldr	r7, .L707+0x8
	ldr	r0, .L707+0xc
	add	r6, r5, r0
.L689:
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.LCB6512
	b	.L688	@long jump
.LCB6512:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L691	@cond_branch
	ldr	r0, .L707+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldrh	r2, [r0]
	ldr	r1, .L707+0x14
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	b	.L704
.L708:
	.align	2, 0
.L707:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	0x15f
	.word	gBattleMonForms
	.word	gContestResources
	.word	gMonBackPicCoords
.L691:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L693	@cond_branch
	ldr	r0, .L709
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L694	@cond_branch
	ldr	r1, .L709+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L709+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	b	.L695
.L710:
	.align	2, 0
.L709:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L694:
	ldrh	r2, [r1, #0x2]
.L695:
	cmp	r2, r7
	bne	.L696	@cond_branch
	ldr	r0, .L711
	b	.L705
.L712:
	.align	2, 0
.L711:
	.word	sCastformBackSpriteYCoords
.L696:
	ldr	r0, .L713
	b	.L706
.L714:
	.align	2, 0
.L713:
	.word	gMonBackPicCoords
.L693:
	ldr	r0, .L715
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L699	@cond_branch
	ldr	r1, .L715+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L715+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	b	.L700
.L716:
	.align	2, 0
.L715:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L699:
	ldrh	r2, [r1, #0x2]
.L700:
	cmp	r2, r7
	bne	.L701	@cond_branch
	ldr	r0, .L717
.L705:
	ldrb	r1, [r6]
	add	r1, r1, r0
	ldrb	r0, [r1]
	b	.L704
.L718:
	.align	2, 0
.L717:
	.word	sCastformElevations
.L701:
	ldr	r0, .L719
.L706:
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	b	.L704
.L720:
	.align	2, 0
.L719:
	.word	gMonFrontPicCoords
.L688:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bhi	.LCB6690
	b	.L689	@long jump
.LCB6690:
	mov	r0, #0x40
.L704:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe105:
	.size	 GetBattlerYDeltaFromSpriteId,.Lfe105-GetBattlerYDeltaFromSpriteId
	.align	2, 0
	.globl	StorePointerInVars
	.type	 StorePointerInVars,function
	.thumb_func
StorePointerInVars:
	strh	r2, [r0]
	asr	r2, r2, #0x10
	strh	r2, [r1]
	bx	lr
.Lfe106:
	.size	 StorePointerInVars,.Lfe106-StorePointerInVars
	.align	2, 0
	.globl	LoadPointerFromVars
	.type	 LoadPointerFromVars,function
	.thumb_func
LoadPointerFromVars:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	bx	lr
.Lfe107:
	.size	 LoadPointerFromVars,.Lfe107-LoadPointerFromVars
	.align	2, 0
	.globl	sub_80A805C
	.type	 sub_80A805C,function
	.thumb_func
sub_80A805C:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	mov	r8, r0
	add	r5, r3, #0
	ldr	r0, [sp, #0x14]
	ldr	r4, [sp, #0x18]
	ldr	r6, [sp, #0x1c]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r3, r8
	strh	r6, [r3, #0x18]
	strh	r1, [r3, #0x26]
	strh	r2, [r3, #0x1a]
	strh	r5, [r3, #0x1c]
	strh	r0, [r3, #0x22]
	strh	r4, [r3, #0x24]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	sub	r0, r0, r2
	add	r1, r6, #0
	bl	__divsi3
	mov	r1, r8
	strh	r0, [r1, #0x1e]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	sub	r4, r4, r5
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__divsi3
	mov	r3, r8
	strh	r0, [r3, #0x20]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe108:
	.size	 sub_80A805C,.Lfe108-sub_80A805C
	.align	2, 0
	.globl	sub_80A80C8
	.type	 sub_80A80C8,function
	.thumb_func
sub_80A80C8:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x18]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L725	@cond_branch
	mov	r0, #0x0
	b	.L730
.L725:
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x18]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L726	@cond_branch
	ldrh	r0, [r4, #0x1e]
	ldrh	r3, [r4, #0x1a]
	add	r0, r0, r3
	strh	r0, [r4, #0x1a]
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	b	.L731
.L726:
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x1a]
	ldrh	r0, [r4, #0x24]
.L731:
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x1a
	ldrsh	r1, [r4, r2]
	mov	r3, #0x1c
	ldrsh	r2, [r4, r3]
	mov	r3, #0x0
	bl	SetSpriteRotScale
	mov	r0, #0x18
	ldrsh	r3, [r4, r0]
	cmp	r3, #0
	beq	.L728	@cond_branch
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromYScale
	b	.L729
.L728:
	ldr	r2, .L732
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
.L729:
	ldrb	r0, [r4, #0x18]
.L730:
	pop	{r4}
	pop	{r1}
	bx	r1
.L733:
	.align	2, 0
.L732:
	.word	gSprites
.Lfe109:
	.size	 sub_80A80C8,.Lfe109-sub_80A80C8
	.align	2, 0
	.globl	AnimTask_GetFrustrationPowerLevel
	.type	 AnimTask_GetFrustrationPowerLevel,function
	.thumb_func
AnimTask_GetFrustrationPowerLevel:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L741
	ldrb	r0, [r0]
	mov	r1, #0x0
	cmp	r0, #0x1e
	bls	.L736	@cond_branch
	mov	r1, #0x1
	cmp	r0, #0x64
	bls	.L736	@cond_branch
	mov	r1, #0x3
	cmp	r0, #0xc8
	bhi	.L736	@cond_branch
	mov	r1, #0x2
.L736:
	ldr	r0, .L741+0x4
	strh	r1, [r0, #0xe]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L742:
	.align	2, 0
.L741:
	.word	gAnimFriendship
	.word	gBattleAnimArgs
.Lfe110:
	.size	 AnimTask_GetFrustrationPowerLevel,.Lfe110-AnimTask_GetFrustrationPowerLevel
	.align	2, 0
	.globl	sub_80A8174
	.type	 sub_80A8174,function
	.thumb_func
sub_80A8174:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r7, r4, #0
	ldr	r6, .L748
	ldrb	r0, [r6]
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L744	@cond_branch
	ldr	r2, .L748+0x4
	ldr	r1, .L748+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	add	r2, r4, #0
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L744:
	ldr	r0, .L748+0xc
	mov	r8, r0
	ldrb	r0, [r0]
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L745	@cond_branch
	ldr	r2, .L748+0x4
	ldr	r1, .L748+0x8
	mov	r3, r8
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	add	r2, r4, #0
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L745:
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L746	@cond_branch
	ldr	r2, .L748+0x4
	ldr	r1, .L748+0x8
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	add	r2, r4, #0
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L746:
	mov	r1, r8
	ldrb	r0, [r1]
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L747	@cond_branch
	ldr	r2, .L748+0x4
	ldr	r1, .L748+0x8
	mov	r3, r8
	ldrb	r0, [r3]
	eor	r0, r0, r5
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	and	r7, r7, r0
	lsl	r3, r7, #0x2
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
.L747:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L749:
	.align	2, 0
.L748:
	.word	gBattleAnimTarget
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.Lfe111:
	.size	 sub_80A8174,.Lfe111-sub_80A8174
	.align	2, 0
	.globl	sub_80A8278
	.type	 sub_80A8278,function
	.thumb_func
sub_80A8278:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	ldr	r0, .L757
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L752	@cond_branch
	ldr	r6, .L757+0x4
.L754:
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L753	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSpriteSubpriority
	ldr	r3, .L757+0x8
	add	r3, r5, r3
	ldrb	r2, [r3]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r2, [r0, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r2, r2, r1
	mov	r1, #0x8
	orr	r2, r2, r1
	strb	r2, [r0, #0x5]
.L753:
	add	r5, r5, #0x1
	ldr	r0, .L757
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L754	@cond_branch
.L752:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L758:
	.align	2, 0
.L757:
	.word	gBattlersCount
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe112:
	.size	 sub_80A8278,.Lfe112-sub_80A8278
	.align	2, 0
	.globl	GetBattlerSpriteSubpriority
	.type	 GetBattlerSpriteSubpriority,function
	.thumb_func
GetBattlerSpriteSubpriority:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L760	@cond_branch
	cmp	r4, #0x2
	bne	.L761	@cond_branch
	mov	r0, #0x1e
	b	.L770
.L761:
	mov	r0, #0x28
	b	.L770
.L760:
	add	r0, r4, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1e
	cmp	r0, #0
	beq	.L763	@cond_branch
	mov	r1, #0x14
	cmp	r0, #0x2
	beq	.L763	@cond_branch
	mov	r1, #0x32
	cmp	r0, #0x1
	bne	.L763	@cond_branch
	mov	r1, #0x28
.L763:
	add	r0, r1, #0
.L770:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe113:
	.size	 GetBattlerSpriteSubpriority,.Lfe113-GetBattlerSpriteSubpriority
	.align	2, 0
	.globl	GetBattlerSpriteBGPriority
	.type	 GetBattlerSpriteBGPriority,function
	.thumb_func
GetBattlerSpriteBGPriority:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L772	@cond_branch
	mov	r0, #0x2
	b	.L777
.L772:
	cmp	r4, #0
	beq	.L775	@cond_branch
	cmp	r4, #0x3
	bne	.L774	@cond_branch
.L775:
	mov	r0, #0x2
	b	.L779
.L774:
	mov	r0, #0x1
.L779:
	mov	r1, #0x4
	bl	GetAnimBgAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L777:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe114:
	.size	 GetBattlerSpriteBGPriority,.Lfe114-GetBattlerSpriteBGPriority
	.align	2, 0
	.globl	GetBattlerSpriteBGPriorityRank
	.type	 GetBattlerSpriteBGPriorityRank,function
	.thumb_func
GetBattlerSpriteBGPriorityRank:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L781	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L783	@cond_branch
	cmp	r0, #0x3
	bne	.L782	@cond_branch
.L783:
	mov	r0, #0x2
	b	.L785
.L782:
.L781:
	mov	r0, #0x1
.L785:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe115:
	.size	 GetBattlerSpriteBGPriorityRank,.Lfe115-GetBattlerSpriteBGPriorityRank
	.align	2, 0
	.globl	sub_80A8394
	.type	 sub_80A8394,function
	.thumb_func
sub_80A8394:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r6, r0, #0
	ldr	r0, [sp, #0x30]
	ldr	r4, [sp, #0x34]
	ldr	r5, [sp, #0x48]
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	sl, r3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x4]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x8]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r0, r7, #0x3
	ldr	r1, .L794
	add	r0, r0, r1
	bl	LoadSpriteSheet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0xc]
	ldr	r1, .L794+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	add	r0, r6, #0
	add	r1, r5, #0
	bl	GetFormSpeciesId
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r4, .L794+0x8
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L787	@cond_branch
	mov	r1, #0xbe
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L787	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	ldr	r1, [r4]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	str	r0, [r1]
.L787:
	mov	r3, r9
	cmp	r3, #0
	bne	.L788	@cond_branch
	add	r0, r6, #0
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x38]
	bl	GetMonSpritePalFromSpeciesAndPersonality
	mov	r5, r8
	lsl	r1, r5, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r1, r1, r2
	lsr	r1, r1, #0x10
	mov	r2, #0x20
	bl	LoadCompressedPalette
	lsl	r0, r6, #0x3
	ldr	r1, .L794+0xc
	add	r0, r0, r1
	ldr	r1, .L794+0x8
	ldr	r1, [r1]
	mov	r3, #0xbe
	lsl	r3, r3, #0x1
	add	r1, r1, r3
	ldr	r1, [r1]
	mov	r2, #0x1
	str	r2, [sp]
	add	r2, r6, #0
	ldr	r3, [sp, #0x38]
	bl	LoadSpecialPokePic_DontHandleDeoxys
	b	.L789
.L795:
	.align	2, 0
.L794:
	.word	sUnknown_08525FC0
	.word	sUnknown_08525F90
	.word	gMonSpritesGfxPtr
	.word	gMonFrontPicTable
.L788:
	add	r0, r6, #0
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x38]
	bl	GetMonSpritePalFromSpeciesAndPersonality
	mov	r5, r8
	lsl	r1, r5, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r1, r1, r2
	lsr	r1, r1, #0x10
	mov	r2, #0x20
	bl	LoadCompressedPalette
	lsl	r0, r6, #0x3
	ldr	r1, .L796
	add	r0, r0, r1
	ldr	r1, .L796+0x4
	ldr	r1, [r1]
	mov	r3, #0xbe
	lsl	r3, r3, #0x1
	add	r1, r1, r3
	ldr	r1, [r1]
	mov	r2, #0x0
	str	r2, [sp]
	add	r2, r6, #0
	ldr	r3, [sp, #0x38]
	bl	LoadSpecialPokePic_DontHandleDeoxys
.L789:
	ldr	r5, .L796+0x4
	ldr	r0, [r5]
	mov	r4, #0xbe
	lsl	r4, r4, #0x1
	add	r0, r0, r4
	ldr	r0, [r0]
	ldr	r2, [sp, #0xc]
	lsl	r1, r2, #0x5
	ldr	r3, .L796+0x8
	add	r1, r1, r3
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	r3, #0x1
	bl	RequestDma3Copy
	ldr	r0, [r5]
	add	r0, r0, r4
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, #0x0
	str	r1, [r0]
	mov	r5, r9
	cmp	r5, #0
	bne	.L790	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L796+0xc
	add	r0, r0, r1
	mov	r2, sl
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	ldr	r3, .L796+0x10
	b	.L793
.L797:
	.align	2, 0
.L796:
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
	.word	0x6010000
	.word	sUnknown_08525F90
	.word	gMonFrontPicCoords
.L790:
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L798
	add	r0, r0, r1
	mov	r5, sl
	lsl	r1, r5, #0x10
	asr	r1, r1, #0x10
	ldr	r3, .L798+0x4
.L793:
	lsl	r2, r6, #0x2
	add	r2, r2, r3
	ldrb	r2, [r2, #0x1]
	ldr	r3, [sp, #0x4]
	add	r2, r2, r3
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldr	r3, [sp, #0x8]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L792	@cond_branch
	ldr	r3, .L798+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r3, #0
	add	r1, r1, #0x10
	add	r1, r0, r1
	ldr	r2, .L798+0xc
	str	r2, [r1]
	add	r0, r0, r3
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
.L792:
	add	r0, r4, #0
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L799:
	.align	2, 0
.L798:
	.word	sUnknown_08525F90
	.word	gMonBackPicCoords
	.word	gSprites
	.word	gUnknown_082FF6C0
.Lfe116:
	.size	 sub_80A8394,.Lfe116-sub_80A8394
	.align	2, 0
	.globl	DestroySpriteAndFreeResources_
	.type	 DestroySpriteAndFreeResources_,function
	.thumb_func
DestroySpriteAndFreeResources_:
	push	{lr}
	bl	DestroySpriteAndFreeResources
	pop	{r0}
	bx	r0
.Lfe117:
	.size	 DestroySpriteAndFreeResources_,.Lfe117-DestroySpriteAndFreeResources_
	.align	2, 0
	.globl	GetBattlerSpriteCoordAttr
	.type	 GetBattlerSpriteCoordAttr,function
	.thumb_func
GetBattlerSpriteCoordAttr:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L802	@cond_branch
	ldr	r0, .L845
	ldr	r0, [r0]
	ldr	r2, [r0, #0x18]
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L803	@cond_branch
	ldrh	r7, [r2, #0x2]
	ldr	r0, [r2, #0x10]
	b	.L804
.L846:
	.align	2, 0
.L845:
	.word	gContestResources
.L803:
	ldrh	r7, [r2]
	ldr	r0, [r2, #0x8]
.L804:
	cmp	r7, #0xc9
	beq	.L839	@cond_branch
	ldr	r0, .L847
	cmp	r7, r0
	bne	.LCB7659
	b	.L840	@long jump
.LCB7659:
	ldr	r0, .L847+0x4
	cmp	r7, r0
	bhi	.L842	@cond_branch
	lsl	r1, r7, #0x2
	ldr	r0, .L847+0x8
	b	.L841
.L848:
	.align	2, 0
.L847:
	.word	0x15f
	.word	0x4b7
	.word	gMonBackPicCoords
.L802:
	mov	r0, r8
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L812	@cond_branch
	ldr	r0, .L849
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r1, r8
	lsl	r2, r1, #0x2
	add	r1, r2, r0
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L813	@cond_branch
	ldr	r0, .L849+0x4
	mov	r1, r8
	lsl	r4, r1, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L849+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldrh	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	b	.L814
.L850:
	.align	2, 0
.L849:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L813:
	ldrh	r7, [r1, #0x2]
	ldr	r0, .L851
	add	r0, r2, r0
	ldr	r0, [r0]
.L814:
	cmp	r7, #0xc9
	bne	.L815	@cond_branch
.L839:
	bl	GetUnownSpeciesId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xe
	ldr	r1, .L851+0x4
	add	r4, r0, r1
	b	.L811
.L852:
	.align	2, 0
.L851:
	.word	gTransformedPersonalities
	.word	gMonBackPicCoords
.L815:
	ldr	r0, .L853
	cmp	r7, r0
	bls	.L817	@cond_branch
.L842:
	ldr	r4, .L853+0x4
	b	.L811
.L854:
	.align	2, 0
.L853:
	.word	0x4b7
	.word	gMonBackPicCoords
.L817:
	lsl	r1, r7, #0x2
	ldr	r0, .L855
	b	.L841
.L856:
	.align	2, 0
.L855:
	.word	gMonBackPicCoords
.L812:
	ldr	r0, .L857
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r1, r8
	lsl	r2, r1, #0x2
	add	r1, r2, r0
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L820	@cond_branch
	ldr	r0, .L857+0x4
	mov	r1, r8
	lsl	r4, r1, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L857+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldrh	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	b	.L821
.L858:
	.align	2, 0
.L857:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L820:
	ldrh	r7, [r1, #0x2]
	ldr	r0, .L859
	add	r0, r2, r0
	ldr	r0, [r0]
.L821:
	cmp	r7, #0xc9
	bne	.L822	@cond_branch
	bl	GetUnownSpeciesId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xe
	ldr	r1, .L859+0x4
	add	r4, r0, r1
	b	.L811
.L860:
	.align	2, 0
.L859:
	.word	gTransformedPersonalities
	.word	gMonFrontPicCoords
.L822:
	ldr	r0, .L861
	cmp	r7, r0
	bne	.L824	@cond_branch
.L840:
	ldr	r0, .L861+0x4
	add	r0, r0, r8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	ldr	r1, .L861+0x8
	add	r4, r0, r1
	b	.L811
.L862:
	.align	2, 0
.L861:
	.word	0x15f
	.word	gBattleMonForms
	.word	gCastformFrontSpriteCoords
.L824:
	ldr	r0, .L863
	cmp	r7, r0
	bls	.L826	@cond_branch
	ldr	r4, .L863+0x4
	b	.L811
.L864:
	.align	2, 0
.L863:
	.word	0x4b7
	.word	gMonFrontPicCoords
.L826:
	lsl	r1, r7, #0x2
	ldr	r0, .L865
.L841:
	add	r4, r1, r0
.L811:
	mov	r0, r9
	cmp	r0, #0x6
	bhi	.L836	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L865+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L866:
	.align	2, 0
.L865:
	.word	gMonFrontPicCoords
	.word	.L837
	.align	2, 0
	.align	2, 0
.L837:
	.word	.L829
	.word	.L830
	.word	.L833
	.word	.L834
	.word	.L831
	.word	.L832
	.word	.L835
.L829:
	ldrb	r1, [r4]
	mov	r0, #0xf
	and	r0, r0, r1
	lsl	r0, r0, #0x3
	b	.L838
.L830:
	ldrb	r0, [r4]
	lsr	r0, r0, #0x4
	lsl	r0, r0, #0x3
	b	.L838
.L831:
	mov	r0, r8
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4]
	lsr	r1, r1, #0x4
	b	.L843
.L832:
	mov	r0, r8
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4]
	lsr	r1, r1, #0x4
	b	.L844
.L833:
	mov	r0, r8
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r4]
	mov	r1, #0xf
	and	r1, r1, r2
.L843:
	lsl	r1, r1, #0x2
	sub	r0, r0, r1
	b	.L838
.L834:
	mov	r0, r8
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r4]
	mov	r1, #0xf
	and	r1, r1, r2
.L844:
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	b	.L838
.L835:
	mov	r0, r8
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1f
	ldrb	r1, [r4, #0x1]
	sub	r0, r0, r1
	b	.L838
.L836:
	mov	r0, #0x0
.L838:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe118:
	.size	 GetBattlerSpriteCoordAttr,.Lfe118-GetBattlerSpriteCoordAttr
	.align	2, 0
	.globl	SetAverageBattlerPositions
	.type	 SetAverageBattlerPositions,function
	.thumb_func
SetAverageBattlerPositions:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r2
	mov	sl, r3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L868	@cond_branch
	mov	r5, #0x0
	mov	r6, #0x1
	b	.L869
.L868:
	mov	r5, #0x2
	mov	r6, #0x3
.L869:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	add	r0, r4, #0
	add	r1, r6, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L870	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L870	@cond_branch
	mov	r0, #0x2
	eor	r4, r4, r0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r4, #0
	add	r1, r6, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r0, r8
	lsl	r1, r0, #0x10
	lsl	r2, r7, #0x10
	b	.L871
.L870:
	mov	r0, r8
	lsl	r1, r0, #0x10
	lsr	r5, r1, #0x10
	lsl	r0, r7, #0x10
	lsr	r3, r0, #0x10
	add	r2, r0, #0
.L871:
	asr	r0, r1, #0x10
	add	r0, r0, r5
	asr	r0, r0, #0x1
	mov	r1, r9
	strh	r0, [r1]
	asr	r0, r2, #0x10
	add	r0, r0, r3
	asr	r0, r0, #0x1
	mov	r1, sl
	strh	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe119:
	.size	 SetAverageBattlerPositions,.Lfe119-SetAverageBattlerPositions
	.align	2, 0
	.globl	sub_80A89C8
	.type	 sub_80A89C8,function
	.thumb_func
sub_80A89C8:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x4
	lsl	r6, r1, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L873
	mov	sl, r0
	bl	CreateInvisibleSpriteWithCallback
	mov	r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L873+0x4
	mov	r9, r0
	mov	r0, r8
	lsl	r3, r0, #0x4
	add	r3, r3, r8
	lsl	r3, r3, #0x2
	mov	r0, r9
	add	r5, r3, r0
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r4, r4, r9
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x44
	str	r3, [sp]
	bl	memcpy
	add	r2, r5, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r2, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r5, #0x5]
	ldrb	r0, [r5, #0x1]
	and	r1, r1, r0
	mov	r0, #0x8
	orr	r1, r1, r0
	strb	r1, [r5, #0x1]
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	ldrh	r2, [r5, #0x4]
	ldr	r0, .L873+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	mov	r0, #0x1c
	add	r9, r9, r0
	ldr	r3, [sp]
	add	r3, r3, r9
	mov	r0, sl
	str	r0, [r3]
	mov	r0, r8
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L874:
	.align	2, 0
.L873:
	.word	SpriteCallbackDummy
	.word	gSprites
	.word	-0x400
.Lfe120:
	.size	 sub_80A89C8,.Lfe120-sub_80A89C8
	.align	2, 0
	.globl	sub_80A8A6C
	.type	 sub_80A8A6C,function
	.thumb_func
sub_80A8A6C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L878
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L876	@cond_branch
	ldr	r2, .L878+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x6]
	neg	r0, r0
	strh	r0, [r2, #0x6]
	add	r3, r4, #0
	add	r3, r3, #0x3f
	ldrb	r0, [r3]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r1, r2, #0
	b	.L877
.L879:
	.align	2, 0
.L878:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L876:
	ldr	r1, .L880
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
.L877:
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x38]
	ldr	r1, .L880+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L880+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L881:
	.align	2, 0
.L880:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteLinearAndFlicker
.Lfe121:
	.size	 sub_80A8A6C,.Lfe121-sub_80A8A6C
	.align	2, 0
	.globl	sub_80A8AEC
	.type	 sub_80A8AEC,function
	.thumb_func
sub_80A8AEC:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L885
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L883	@cond_branch
	ldr	r2, .L885+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	mov	r1, #0x6
	ldrsh	r0, [r2, r1]
	neg	r0, r0
	strh	r0, [r2, #0x6]
	add	r1, r2, #0
	b	.L884
.L886:
	.align	2, 0
.L885:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L883:
	ldr	r1, .L887
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
.L884:
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x38]
	ldrb	r1, [r1, #0xc]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r1, .L887+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L887+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L888:
	.align	2, 0
.L887:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteLinearAndFlicker
.Lfe122:
	.size	 sub_80A8AEC,.Lfe122-sub_80A8AEC
	.align	2, 0
	.globl	AnimSpinningSparkle
	.type	 AnimSpinningSparkle,function
	.thumb_func
AnimSpinningSparkle:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L892
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L890	@cond_branch
	ldr	r0, .L892+0x4
	ldrh	r1, [r4, #0x20]
	ldrh	r2, [r0]
	sub	r1, r1, r2
	strh	r1, [r4, #0x20]
	b	.L891
.L893:
	.align	2, 0
.L892:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L890:
	ldr	r1, .L894
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	add	r0, r1, #0
.L891:
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L894+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L894+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L895:
	.align	2, 0
.L894:
	.word	gBattleAnimArgs
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe123:
	.size	 AnimSpinningSparkle,.Lfe123-AnimSpinningSparkle
	.align	2, 0
	.globl	AnimTask_AttackerPunchWithTrace
	.type	 AnimTask_AttackerPunchWithTrace,function
	.thumb_func
AnimTask_AttackerPunchWithTrace:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L903
	add	r5, r1, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	strh	r0, [r5, #0x8]
	ldr	r7, .L903+0x4
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0x8
	cmp	r0, #0
	beq	.L897	@cond_branch
	mov	r0, #0x8
	neg	r0, r0
	add	r1, r0, #0
.L897:
	strh	r1, [r5, #0xa]
	strh	r6, [r5, #0xc]
	strh	r6, [r5, #0xe]
	ldr	r4, .L903+0x8
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r5, #0x8]
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldr	r0, .L903+0xc
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x10]
	strh	r6, [r5, #0x12]
	mov	r1, #0x10
	ldrsh	r0, [r5, r1]
	add	r0, r0, #0x10
	lsl	r0, r0, #0x14
	lsr	r6, r0, #0x10
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	lsl	r4, r0, #0x4
	ldrb	r0, [r7]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	cmp	r0, #0x14
	beq	.L900	@cond_branch
	cmp	r0, #0x28
	bne	.L899	@cond_branch
.L900:
	mov	r0, #0x2
	b	.L902
.L904:
	.align	2, 0
.L903:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	0x2771
.L899:
	mov	r0, #0x3
.L902:
	strh	r0, [r5, #0x14]
	lsl	r0, r4, #0x1
	ldr	r1, .L905
	add	r0, r0, r1
	lsl	r1, r6, #0x1
	ldr	r2, .L905+0x4
	add	r1, r1, r2
	ldr	r2, .L905+0x8
	bl	CpuSet
	ldr	r0, .L905+0xc
	ldrb	r2, [r0, #0x2]
	ldrh	r3, [r0]
	add	r0, r6, #0
	mov	r1, #0x10
	bl	BlendPalette
	ldr	r0, .L905+0x10
	str	r0, [r5]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L906:
	.align	2, 0
.L905:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x4000008
	.word	gBattleAnimArgs
	.word	sub_80A8CAC
.Lfe124:
	.size	 AnimTask_AttackerPunchWithTrace,.Lfe124-AnimTask_AttackerPunchWithTrace
	.align	2, 0
	.type	 sub_80A8CAC,function
	.thumb_func
sub_80A8CAC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L919
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L911	@cond_branch
	cmp	r0, #0x1
	bgt	.L917	@cond_branch
	cmp	r0, #0
	beq	.L909	@cond_branch
	b	.L908
.L920:
	.align	2, 0
.L919:
	.word	gTasks
.L917:
	cmp	r0, #0x2
	beq	.L913	@cond_branch
	b	.L908
.L909:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80A8D78
	ldr	r2, .L921
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0xa]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r1, [r4, #0xe]
	add	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L908	@cond_branch
	strh	r1, [r4, #0xe]
	b	.L918
.L922:
	.align	2, 0
.L921:
	.word	gSprites
.L911:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80A8D78
	ldr	r3, .L923
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r4, #0xa]
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	bne	.L908	@cond_branch
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	strh	r2, [r1, #0x24]
.L918:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L908
.L924:
	.align	2, 0
.L923:
	.word	gSprites
.L913:
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L908	@cond_branch
	ldr	r0, .L925
	bl	FreeSpritePaletteByTag
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L908:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L926:
	.align	2, 0
.L925:
	.word	0x2771
.Lfe125:
	.size	 sub_80A8CAC,.Lfe125-sub_80A8CAC
	.align	2, 0
	.type	 sub_80A8D78,function
	.thumb_func
sub_80A8D78:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r0, #0x0
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	blt	.L928	@cond_branch
	ldr	r5, .L929
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r3, r4, r5
	mov	r0, #0x3
	ldrb	r1, [r6, #0x14]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x5]
	ldrb	r1, [r6, #0x10]
	lsl	r1, r1, #0x4
	mov	r2, #0xf
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x5]
	mov	r0, #0x8
	strh	r0, [r3, #0x2e]
	mov	r0, r8
	strh	r0, [r3, #0x30]
	strh	r7, [r3, #0x32]
	mov	r0, #0x8
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r0, [r0, #0x24]
	strh	r0, [r3, #0x24]
	add	r5, r5, #0x1c
	add	r4, r4, r5
	ldr	r0, .L929+0x4
	str	r0, [r4]
	ldrh	r0, [r6, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x12]
.L928:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L930:
	.align	2, 0
.L929:
	.word	gSprites
	.word	sub_80A8DFC
.Lfe126:
	.size	 sub_80A8D78,.Lfe126-sub_80A8D78
	.align	2, 0
	.type	 sub_80A8DFC,function
	.thumb_func
sub_80A8DFC:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L932	@cond_branch
	ldr	r2, .L933
	mov	r0, #0x30
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x12]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x12]
	add	r0, r3, #0
	bl	obj_delete_but_dont_free_vram
.L932:
	pop	{r0}
	bx	r0
.L934:
	.align	2, 0
.L933:
	.word	gTasks
.Lfe127:
	.size	 sub_80A8DFC,.Lfe127-sub_80A8DFC
	.align	2, 0
	.globl	AnimWeatherBallUp
	.type	 AnimWeatherBallUp,function
	.thumb_func
AnimWeatherBallUp:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L939
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L936	@cond_branch
	mov	r0, #0x5
	b	.L938
.L940:
	.align	2, 0
.L939:
	.word	gBattleAnimAttacker
.L936:
	ldr	r0, .L941
.L938:
	strh	r0, [r5, #0x2e]
	ldr	r0, .L941+0x4
	strh	r0, [r5, #0x30]
	ldr	r0, .L941+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L942:
	.align	2, 0
.L941:
	.word	0xfff6
	.word	0xffd8
	.word	sub_80A8E88
.Lfe128:
	.size	 AnimWeatherBallUp,.Lfe128-AnimWeatherBallUp
	.align	2, 0
	.type	 sub_80A8E88,function
	.thumb_func
sub_80A8E88:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r5, [r4, #0x30]
	ldrh	r2, [r4, #0x34]
	add	r0, r5, r2
	strh	r0, [r4, #0x34]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	__divsi3
	strh	r0, [r4, #0x24]
	mov	r2, #0x34
	ldrsh	r0, [r4, r2]
	mov	r1, #0xa
	bl	__divsi3
	strh	r0, [r4, #0x26]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x14
	neg	r1, r1
	cmp	r0, r1
	bge	.L944	@cond_branch
	add	r0, r5, #0x1
	strh	r0, [r4, #0x30]
.L944:
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L945	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L945:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe129:
	.size	 sub_80A8E88,.Lfe129-sub_80A8E88
	.align	2, 0
	.globl	AnimWeatherBallDown
	.type	 AnimWeatherBallDown,function
	.thumb_func
AnimWeatherBallDown:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L950
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x8]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r5, #0xa]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	ldr	r0, .L950+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L947	@cond_branch
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1e
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, #0x14
	b	.L949
.L951:
	.align	2, 0
.L950:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L947:
	ldrh	r0, [r5, #0x8]
	sub	r0, r0, #0x1e
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, #0x50
.L949:
	strh	r0, [r4, #0x22]
	ldr	r0, .L952
	str	r0, [r4, #0x1c]
	ldr	r1, .L952+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L953:
	.align	2, 0
.L952:
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe130:
	.size	 AnimWeatherBallDown,.Lfe130-AnimWeatherBallDown
.text
	.align	2, 0

