@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sCurSecretBaseId,object
	.size	 sCurSecretBaseId,1
sCurSecretBaseId:
	.byte	0x0
	.type	 sInFriendSecretBase,object
	.size	 sInFriendSecretBase,1
sInFriendSecretBase:
	.byte	0x0
	.align	2, 0
	.type	 sRegistryMenu,object
	.size	 sRegistryMenu,4
sRegistryMenu:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sSecretBaseEntranceMetatiles,object
sSecretBaseEntranceMetatiles:
	.short	0x26
	.short	0x36
	.short	0x27
	.short	0x37
	.short	0x1a0
	.short	0x1a1
	.short	0x1a8
	.short	0x1a9
	.short	0x1b0
	.short	0x1b1
	.short	0x208
	.short	0x210
	.short	0x271
	.short	0x278
	.size	 sSecretBaseEntranceMetatiles,28
	.type	 sSecretBaseEntrancePositions,object
sSecretBaseEntrancePositions:
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x6
	.byte	0x0
	.byte	0x5
	.byte	0x9
	.byte	0xc
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x12
	.byte	0x0
	.byte	0x7
	.byte	0xd
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.byte	0x7
	.byte	0x0
	.byte	0x9
	.byte	0x2
	.byte	0xd
	.byte	0x0
	.byte	0xd
	.byte	0x4
	.byte	0x13
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x8
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0xe
	.byte	0x0
	.byte	0x3
	.byte	0xf
	.byte	0x14
	.byte	0x0
	.byte	0x3
	.byte	0xe
	.byte	0x3
	.byte	0x0
	.byte	0x9
	.byte	0x3
	.byte	0x9
	.byte	0x0
	.byte	0x8
	.byte	0x7
	.byte	0xf
	.byte	0x0
	.byte	0x3
	.byte	0x6
	.byte	0x15
	.byte	0x0
	.byte	0x5
	.byte	0x9
	.byte	0x4
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.byte	0xa
	.byte	0x0
	.byte	0x5
	.byte	0x6
	.byte	0x10
	.byte	0x0
	.byte	0xf
	.byte	0x3
	.byte	0x16
	.byte	0x0
	.byte	0x4
	.byte	0xa
	.byte	0x5
	.byte	0x0
	.byte	0x3
	.byte	0x3
	.byte	0xb
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x11
	.byte	0x0
	.byte	0x7
	.byte	0x8
	.byte	0x17
	.byte	0x0
	.byte	0x9
	.byte	0x6
	.size	 sSecretBaseEntrancePositions,96
	.align	2, 0
	.type	 sRegistryMenuActions,object
sRegistryMenuActions:
	.word	gText_DelRegist
	.word	ShowRegistryMenuDeleteConfirmation
	.word	gText_Cancel
	.word	ReturnToMainRegistryMenu
	.size	 sRegistryMenuActions,16
	.align	2, 0
	.type	 sDeleteRegistryYesNoFuncs,object
	.size	 sDeleteRegistryYesNoFuncs,8
sDeleteRegistryYesNoFuncs:
	.word	DeleteRegistry_Yes
	.word	DeleteRegistry_No
	.type	 sSecretBaseOwnerGfxIds,object
	.size	 sSecretBaseOwnerGfxIds,10
sSecretBaseOwnerGfxIds:
	.byte	0x23
	.byte	0x24
	.byte	0xf
	.byte	0x1f
	.byte	0x21
	.byte	0x2f
	.byte	0xe
	.byte	0x14
	.byte	0x20
	.byte	0x22
	.align	2, 0
	.type	 sRegistryWindowTemplates,object
sRegistryWindowTemplates:
	.byte	0x0
	.byte	0x12
	.byte	0x1
	.byte	0xb
	.byte	0x12
	.byte	0xf
	.short	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x1
	.byte	0x1c
	.byte	0x4
	.byte	0xf
	.short	0xc7
	.size	 sRegistryWindowTemplates,16
	.align	2, 0
	.type	 sRegistryListMenuTemplate,object
	.size	 sRegistryListMenuTemplate,24
sRegistryListMenuTemplate:
	.word	0x0
	.word	RegistryMenu_OnCursorMove
	.word	0x0
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x29
	.byte	0x31
	.byte	0x0
	.byte	0x1
.text
	.align	2, 0
	.type	 ClearSecretBase,function
	.thumb_func
ClearSecretBase:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r2, .L8
	mov	r0, sp
	add	r1, r4, #0
	bl	CpuFastSet
	mov	r2, #0x0
	add	r4, r4, #0x2
	mov	r3, #0xff
.L6:
	add	r0, r4, r2
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x6
	bls	.L6	@cond_branch
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	0x1000028
.Lfe1:
	.size	 ClearSecretBase,.Lfe1-ClearSecretBase
	.align	2, 0
	.globl	ClearSecretBases
	.type	 ClearSecretBases,function
	.thumb_func
ClearSecretBases:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r5, .L16
.L14:
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	ldr	r0, .L16+0x4
	add	r1, r1, r0
	ldr	r0, [r5]
	add	r0, r0, r1
	bl	ClearSecretBase
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x4
	bls	.L14	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gSaveBlock1Ptr
	.word	0x207c
.Lfe2:
	.size	 ClearSecretBases,.Lfe2-ClearSecretBases
	.align	2, 0
	.type	 SetCurSecretBaseId,function
	.thumb_func
SetCurSecretBaseId:
	ldr	r0, .L19
	ldr	r1, .L19+0x4
	ldrh	r1, [r1]
	strb	r1, [r0]
	bx	lr
.L20:
	.align	2, 0
.L19:
	.word	sCurSecretBaseId
	.word	gSpecialVar_0x8004
.Lfe3:
	.size	 SetCurSecretBaseId,.Lfe3-SetCurSecretBaseId
	.align	2, 0
	.globl	TrySetCurSecretBaseIndex
	.type	 TrySetCurSecretBaseIndex,function
	.thumb_func
TrySetCurSecretBaseIndex:
	push	{r4, lr}
	ldr	r0, .L28
	mov	r1, #0x0
	strh	r1, [r0]
	mov	r3, #0x0
	add	r4, r0, #0
	b	.L22
.L29:
	.align	2, 0
.L28:
	.word	gSpecialVar_Result
.L24:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
.L22:
	cmp	r3, #0x4
	bhi	.L23	@cond_branch
	ldr	r2, .L30
	ldr	r0, .L30+0x4
	ldr	r1, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldr	r0, .L30+0x8
	add	r1, r1, r0
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L24	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4]
	ldr	r0, .L30+0xc
	add	r1, r3, #0
	bl	VarSet
.L23:
	pop	{r4}
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	sCurSecretBaseId
	.word	gSaveBlock1Ptr
	.word	0x207c
	.word	0x4054
.Lfe4:
	.size	 TrySetCurSecretBaseIndex,.Lfe4-TrySetCurSecretBaseIndex
	.align	2, 0
	.globl	CheckPlayerHasSecretBase
	.type	 CheckPlayerHasSecretBase,function
	.thumb_func
CheckPlayerHasSecretBase:
	push	{lr}
	ldr	r0, .L35
	ldr	r0, [r0]
	ldr	r1, .L35+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	cmp	r1, #0
	beq	.L33	@cond_branch
	ldr	r1, .L35+0x8
	mov	r0, #0x1
	strh	r0, [r1]
	b	.L34
.L36:
	.align	2, 0
.L35:
	.word	gSaveBlock1Ptr
	.word	0x207c
	.word	gSpecialVar_Result
.L33:
	ldr	r0, .L37
	strh	r1, [r0]
.L34:
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	gSpecialVar_Result
.Lfe5:
	.size	 CheckPlayerHasSecretBase,.Lfe5-CheckPlayerHasSecretBase
	.align	2, 0
	.type	 GetSecretBaseTypeInFrontOfPlayer_,function
	.thumb_func
GetSecretBaseTypeInFrontOfPlayer_:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetXYCoordsOneStepInFrontOfPlayer
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileBehaviorAt
	add	r1, r0, #0
	ldr	r2, .L48
	add	r0, r2, #0
	and	r1, r1, r0
	add	r0, r1, #0
	sub	r0, r0, #0x90
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L40	@cond_branch
	mov	r0, #0x1
	b	.L47
.L49:
	.align	2, 0
.L48:
	.word	0xfff
.L40:
	add	r0, r1, #0
	sub	r0, r0, #0x92
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L41	@cond_branch
	mov	r0, #0x2
	b	.L47
.L41:
	add	r0, r1, #0
	sub	r0, r0, #0x9a
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L42	@cond_branch
	mov	r0, #0x3
	b	.L47
.L42:
	add	r0, r1, #0
	sub	r0, r0, #0x94
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L43	@cond_branch
	mov	r0, #0x4
	b	.L47
.L43:
	add	r0, r1, #0
	sub	r0, r0, #0x96
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bls	.L45	@cond_branch
	cmp	r1, #0x9c
	beq	.L45	@cond_branch
	cmp	r1, #0x9d
	bne	.L44	@cond_branch
.L45:
	mov	r0, #0x5
	b	.L47
.L44:
	add	r0, r1, #0
	sub	r0, r0, #0x98
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bls	.L46	@cond_branch
	mov	r0, #0x0
	b	.L47
.L46:
	mov	r0, #0x6
.L47:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 GetSecretBaseTypeInFrontOfPlayer_,.Lfe6-GetSecretBaseTypeInFrontOfPlayer_
	.align	2, 0
	.globl	GetSecretBaseTypeInFrontOfPlayer
	.type	 GetSecretBaseTypeInFrontOfPlayer,function
	.thumb_func
GetSecretBaseTypeInFrontOfPlayer:
	push	{r4, lr}
	ldr	r4, .L51
	bl	GetSecretBaseTypeInFrontOfPlayer_
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	gSpecialVar_0x8007
.Lfe7:
	.size	 GetSecretBaseTypeInFrontOfPlayer,.Lfe7-GetSecretBaseTypeInFrontOfPlayer
	.align	2, 0
	.type	 FindMetatileIdMapCoords,function
	.thumb_func
FindMetatileIdMapCoords:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	str	r0, [sp]
	str	r1, [sp, #0x4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	sl, r2
	ldr	r0, .L65
	ldr	r0, [r0]
	mov	r8, r0
	mov	r0, #0x0
	mov	ip, r0
	mov	r1, r8
	ldr	r0, [r1, #0x4]
	cmp	ip, r0
	bge	.L53	@cond_branch
	ldr	r4, [r1]
.L57:
	mov	r2, #0x0
	mov	r0, ip
	lsl	r7, r0, #0x10
	cmp	r2, r4
	bge	.L56	@cond_branch
	asr	r0, r7, #0x10
	mov	r6, r0
	mul	r6, r6, r4
	mov	r1, r8
	ldr	r5, [r1, #0xc]
	ldr	r0, .L65+0x4
	mov	r9, r0
.L61:
	lsl	r0, r2, #0x10
	asr	r3, r0, #0x10
	add	r0, r6, r3
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r1, [r0]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, sl
	bne	.L60	@cond_branch
	ldr	r1, [sp]
	strh	r2, [r1]
	mov	r0, ip
	ldr	r2, [sp, #0x4]
	strh	r0, [r2]
	b	.L53
.L66:
	.align	2, 0
.L65:
	.word	gMapHeader
	.word	0x3ff
.L60:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r4
	blt	.L61	@cond_branch
.L56:
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r1, r7, r2
	lsr	r0, r1, #0x10
	mov	ip, r0
	asr	r1, r1, #0x10
	mov	r2, r8
	ldr	r0, [r2, #0x4]
	cmp	r1, r0
	blt	.L57	@cond_branch
.L53:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 FindMetatileIdMapCoords,.Lfe8-FindMetatileIdMapCoords
	.align	2, 0
	.globl	ToggleSecretBaseEntranceMetatile
	.type	 ToggleSecretBaseEntranceMetatile,function
	.thumb_func
ToggleSecretBaseEntranceMetatile:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetXYCoordsOneStepInFrontOfPlayer
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileIdAt
	mov	r5, #0x0
	mov	ip, r4
	lsl	r0, r0, #0x10
	asr	r3, r0, #0x10
	ldr	r1, .L81
	mov	r8, r1
	add	r7, r0, #0
	mov	r4, sp
	mov	r6, ip
.L71:
	ldr	r0, .L81
	lsl	r1, r5, #0x2
	add	r2, r1, r0
	ldrh	r0, [r2]
	cmp	r0, r3
	bne	.L70	@cond_branch
	mov	r3, #0x0
	ldrsh	r0, [r4, r3]
	mov	r5, #0x0
	ldrsh	r1, [r6, r5]
	ldrh	r3, [r2, #0x2]
	b	.L80
.L82:
	.align	2, 0
.L81:
	.word	sSecretBaseEntranceMetatiles
.L70:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x6
	bls	.L71	@cond_branch
	mov	r5, #0x0
	mov	r4, sp
	mov	r6, ip
.L77:
	lsl	r0, r5, #0x2
	mov	r1, r8
	add	r3, r0, r1
	ldrh	r1, [r3, #0x2]
	asr	r0, r7, #0x10
	cmp	r1, r0
	bne	.L76	@cond_branch
	mov	r2, #0x0
	ldrsh	r0, [r4, r2]
	mov	r5, #0x0
	ldrsh	r1, [r6, r5]
	ldrh	r3, [r3]
.L80:
	mov	r5, #0xc0
	lsl	r5, r5, #0x4
	add	r2, r5, #0
	orr	r2, r2, r3
	bl	MapGridSetMetatileIdAt
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r2, #0x0
	ldrsh	r1, [r6, r2]
	bl	CurrentMapDrawMetatileAt
	b	.L67
.L76:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x6
	bls	.L77	@cond_branch
.L67:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 ToggleSecretBaseEntranceMetatile,.Lfe9-ToggleSecretBaseEntranceMetatile
	.align	2, 0
	.type	 GetNameLength,function
	.thumb_func
GetNameLength:
	push	{lr}
	add	r2, r0, #0
	mov	r1, #0x0
.L87:
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L86	@cond_branch
	add	r0, r1, #0
	b	.L90
.L86:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x6
	bls	.L87	@cond_branch
	mov	r0, #0x7
.L90:
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 GetNameLength,.Lfe10-GetNameLength
	.align	2, 0
	.globl	SetPlayerSecretBase
	.type	 SetPlayerSecretBase,function
	.thumb_func
SetPlayerSecretBase:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r2, .L97
	ldr	r0, [r2]
	ldr	r1, .L97+0x4
	ldrb	r1, [r1]
	ldr	r3, .L97+0x8
	add	r0, r0, r3
	strb	r1, [r0]
	mov	r3, #0x0
	ldr	r5, .L97+0xc
	ldr	r4, .L97+0x10
.L95:
	ldr	r1, [r2]
	add	r1, r1, r5
	add	r1, r1, r3
	ldr	r0, [r4]
	add	r0, r0, #0xa
	add	r0, r0, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x3
	bls	.L95	@cond_branch
	ldr	r0, .L97+0x14
	mov	r1, #0x0
	bl	VarSet
	ldr	r6, .L97
	ldr	r4, [r6]
	ldr	r0, .L97+0x18
	add	r4, r4, r0
	ldr	r1, .L97+0x10
	mov	r8, r1
	ldr	r5, [r1]
	add	r0, r5, #0
	bl	GetNameLength
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	bl	StringCopyN
	ldr	r3, [r6]
	mov	r1, r8
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x8]
	ldr	r1, .L97+0x1c
	add	r3, r3, r1
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x4
	ldrb	r2, [r3]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, [r6]
	ldr	r3, .L97+0x20
	add	r0, r0, r3
	mov	r1, #0x2
	strb	r1, [r0]
	ldr	r0, .L97+0x24
	ldr	r1, .L97+0x28
	ldrb	r1, [r1, #0x14]
	bl	VarSet
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L98:
	.align	2, 0
.L97:
	.word	gSaveBlock1Ptr
	.word	sCurSecretBaseId
	.word	0x207c
	.word	0x2085
	.word	gSaveBlock2Ptr
	.word	0x4054
	.word	0x207e
	.word	0x207d
	.word	0x2089
	.word	0x4026
	.word	gMapHeader
.Lfe11:
	.size	 SetPlayerSecretBase,.Lfe11-SetPlayerSecretBase
	.align	2, 0
	.globl	SetOccupiedSecretBaseEntranceMetatiles
	.type	 SetOccupiedSecretBaseEntranceMetatiles,function
	.thumb_func
SetOccupiedSecretBaseEntranceMetatiles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r8, r0
	mov	r5, #0x0
	b	.L118
.L103:
	mov	r0, r8
	ldr	r1, [r0, #0x10]
	lsl	r2, r5, #0x1
	add	r0, r2, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x5]
	add	r6, r1, #0
	add	r1, r5, #0x1
	mov	r9, r1
	cmp	r0, #0x8
	bne	.L102	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L119
.L108:
	ldr	r1, [r7]
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldr	r0, .L119+0x4
	add	r1, r1, r0
	ldrb	r1, [r1]
	add	r0, r2, r5
	lsl	r0, r0, #0x2
	add	r3, r0, r6
	ldr	r0, [r3, #0x8]
	cmp	r1, r0
	bne	.L107	@cond_branch
	ldrh	r5, [r3]
	add	r5, r5, #0x7
	ldrh	r4, [r3, #0x2]
	add	r4, r4, #0x7
	lsl	r5, r5, #0x10
	asr	r0, r5, #0x10
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	bl	MapGridGetMetatileIdAt
	mov	r3, #0x0
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	ldr	r6, .L119+0x8
.L113:
	lsl	r0, r3, #0x2
	add	r2, r0, r6
	ldrh	r0, [r2]
	cmp	r0, r1
	bne	.L112	@cond_branch
	ldrh	r0, [r2, #0x2]
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	add	r2, r1, #0
	orr	r2, r2, r0
	asr	r0, r5, #0x10
	asr	r1, r4, #0x10
	bl	MapGridSetMetatileIdAt
	b	.L102
.L120:
	.align	2, 0
.L119:
	.word	gSaveBlock1Ptr
	.word	0x207c
	.word	sSecretBaseEntranceMetatiles
.L112:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x6
	bls	.L113	@cond_branch
	b	.L102
.L107:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x4
	bls	.L108	@cond_branch
.L102:
	mov	r1, r9
	lsl	r0, r1, #0x10
	lsr	r5, r0, #0x10
	mov	r0, r8
.L118:
	ldrb	r0, [r0, #0x3]
	cmp	r5, r0
	bcc	.L103	@cond_branch
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 SetOccupiedSecretBaseEntranceMetatiles,.Lfe12-SetOccupiedSecretBaseEntranceMetatiles
	.align	2, 0
	.type	 SetSecretBaseWarpDestination,function
	.thumb_func
SetSecretBaseWarpDestination:
	push	{lr}
	ldr	r0, .L122
	ldrb	r0, [r0]
	mov	r1, #0xa
	bl	__udivsi3
	ldr	r2, .L122+0x4
	lsl	r0, r0, #0x1a
	asr	r0, r0, #0x18
	add	r1, r0, r2
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	add	r0, r0, #0x1
	add	r0, r0, r2
	mov	r2, #0x0
	ldrsb	r2, [r0, r2]
	mov	r0, #0x19
	bl	SetWarpDestinationToMapWarp
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	sCurSecretBaseId
	.word	sSecretBaseEntrancePositions
.Lfe13:
	.size	 SetSecretBaseWarpDestination,.Lfe13-SetSecretBaseWarpDestination
	.align	2, 0
	.type	 Task_EnterSecretBase,function
	.thumb_func
Task_EnterSecretBase:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L132
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L126	@cond_branch
	cmp	r0, #0x1
	beq	.L128	@cond_branch
	b	.L125
.L133:
	.align	2, 0
.L132:
	.word	gTasks
.L126:
	ldr	r0, .L134
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L125	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2, #0x8]
	b	.L125
.L135:
	.align	2, 0
.L134:
	.word	gPaletteFade
.L128:
	ldr	r0, .L136
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L136+0x4
	ldr	r2, [r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	add	r2, r2, r1
	ldr	r0, .L136+0x8
	add	r2, r2, r0
	ldrb	r0, [r2]
	cmp	r0, #0xfe
	bhi	.L129	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r2]
.L129:
	bl	SetSecretBaseWarpDestination
	bl	WarpIntoMap
	ldr	r0, .L136+0xc
	ldr	r1, .L136+0x10
	str	r1, [r0]
	ldr	r0, .L136+0x14
	bl	SetMainCallback2
	add	r0, r4, #0
	bl	DestroyTask
.L125:
	pop	{r4}
	pop	{r0}
	bx	r0
.L137:
	.align	2, 0
.L136:
	.word	0x4054
	.word	gSaveBlock1Ptr
	.word	0x208c
	.word	gFieldCallback
	.word	FieldCB_ContinueScriptHandleMusic
	.word	CB2_LoadMap
.Lfe14:
	.size	 Task_EnterSecretBase,.Lfe14-Task_EnterSecretBase
	.align	2, 0
	.globl	EnterSecretBase
	.type	 EnterSecretBase,function
	.thumb_func
EnterSecretBase:
	push	{lr}
	ldr	r0, .L139
	mov	r1, #0x0
	bl	CreateTask
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FadeScreen
	ldr	r0, .L139+0x4
	ldr	r0, [r0]
	mov	r1, #0x4
	ldrsb	r1, [r0, r1]
	mov	r2, #0x5
	ldrsb	r2, [r0, r2]
	mov	r3, #0x1
	neg	r3, r3
	mov	r0, #0x0
	bl	SetDynamicWarp
	pop	{r0}
	bx	r0
.L140:
	.align	2, 0
.L139:
	.word	Task_EnterSecretBase
	.word	gSaveBlock1Ptr
.Lfe15:
	.size	 EnterSecretBase,.Lfe15-EnterSecretBase
	.align	2, 0
	.globl	SecretBaseMapPopupEnabled
	.type	 SecretBaseMapPopupEnabled,function
	.thumb_func
SecretBaseMapPopupEnabled:
	push	{lr}
	ldr	r0, .L144
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0x9
	bne	.L142	@cond_branch
	ldr	r0, .L144+0x4
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L142	@cond_branch
	mov	r0, #0x0
	b	.L143
.L145:
	.align	2, 0
.L144:
	.word	gMapHeader
	.word	0x4097
.L142:
	mov	r0, #0x1
.L143:
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 SecretBaseMapPopupEnabled,.Lfe16-SecretBaseMapPopupEnabled
	.align	2, 0
	.type	 EnterNewlyCreatedSecretBase_WaitFadeIn,function
	.thumb_func
EnterNewlyCreatedSecretBase_WaitFadeIn:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L148
	ldrb	r1, [r0, #0x5]
	lsl	r1, r1, #0x19
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L148+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	bl	ObjectEventTurn
	bl	IsWeatherNotFadingIn
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L147	@cond_branch
	bl	EnableBothScriptContexts
	add	r0, r4, #0
	bl	DestroyTask
.L147:
	pop	{r4}
	pop	{r0}
	bx	r0
.L149:
	.align	2, 0
.L148:
	.word	gPlayerAvatar
	.word	gObjectEvents
.Lfe17:
	.size	 EnterNewlyCreatedSecretBase_WaitFadeIn,.Lfe17-EnterNewlyCreatedSecretBase_WaitFadeIn
	.align	2, 0
	.type	 EnterNewlyCreatedSecretBase_StartFadeIn,function
	.thumb_func
EnterNewlyCreatedSecretBase_StartFadeIn:
	push	{r4, lr}
	add	sp, sp, #-0x4
	bl	ScriptContext2_Enable
	bl	HideMapNamePopUpWindow
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r2, #0x88
	lsl	r2, r2, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	FindMetatileIdMapCoords
	mov	r1, sp
	mov	r0, sp
	ldrh	r0, [r0]
	add	r0, r0, #0x7
	strh	r0, [r1]
	ldrh	r0, [r4]
	add	r0, r0, #0x7
	strh	r0, [r4]
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	mov	r2, #0xe2
	lsl	r2, r2, #0x4
	bl	MapGridSetMetatileIdAt
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	CurrentMapDrawMetatileAt
	bl	FadeInFromBlack
	ldr	r0, .L151
	mov	r1, #0x0
	bl	CreateTask
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L152:
	.align	2, 0
.L151:
	.word	EnterNewlyCreatedSecretBase_WaitFadeIn
.Lfe18:
	.size	 EnterNewlyCreatedSecretBase_StartFadeIn,.Lfe18-EnterNewlyCreatedSecretBase_StartFadeIn
	.align	2, 0
	.type	 Task_EnterNewlyCreatedSecretBase,function
	.thumb_func
Task_EnterNewlyCreatedSecretBase:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L155
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L154	@cond_branch
	ldr	r0, .L155+0x4
	ldrb	r0, [r0]
	mov	r1, #0xa
	bl	__udivsi3
	ldr	r1, .L155+0x8
	ldr	r1, [r1]
	mov	r5, #0x4
	ldrsb	r5, [r1, r5]
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	mov	r2, #0x1
	neg	r2, r2
	ldr	r4, .L155+0xc
	lsl	r0, r0, #0x1a
	asr	r0, r0, #0x18
	add	r3, r0, #0x2
	add	r3, r3, r4
	ldrb	r3, [r3, #0]
	lsl	r3, r3, #24
	asr	r3, r3, #24
	add	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	str	r0, [sp]
	add	r0, r5, #0
	bl	SetWarpDestination
	bl	WarpIntoMap
	ldr	r1, .L155+0x10
	ldr	r0, .L155+0x14
	str	r0, [r1]
	ldr	r0, .L155+0x18
	bl	SetMainCallback2
	add	r0, r6, #0
	bl	DestroyTask
.L154:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L156:
	.align	2, 0
.L155:
	.word	gPaletteFade
	.word	sCurSecretBaseId
	.word	gSaveBlock1Ptr
	.word	sSecretBaseEntrancePositions
	.word	gFieldCallback
	.word	EnterNewlyCreatedSecretBase_StartFadeIn
	.word	CB2_LoadMap
.Lfe19:
	.size	 Task_EnterNewlyCreatedSecretBase,.Lfe19-Task_EnterNewlyCreatedSecretBase
	.align	2, 0
	.globl	EnterNewlyCreatedSecretBase
	.type	 EnterNewlyCreatedSecretBase,function
	.thumb_func
EnterNewlyCreatedSecretBase:
	push	{lr}
	ldr	r0, .L158
	mov	r1, #0x0
	bl	CreateTask
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FadeScreen
	pop	{r0}
	bx	r0
.L159:
	.align	2, 0
.L158:
	.word	Task_EnterNewlyCreatedSecretBase
.Lfe20:
	.size	 EnterNewlyCreatedSecretBase,.Lfe20-EnterNewlyCreatedSecretBase
	.align	2, 0
	.globl	CurMapIsSecretBase
	.type	 CurMapIsSecretBase,function
	.thumb_func
CurMapIsSecretBase:
	push	{lr}
	ldr	r0, .L164
	ldr	r1, [r0]
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x19
	bne	.L161	@cond_branch
	ldrb	r0, [r1, #0x5]
	cmp	r0, #0x17
	bhi	.L161	@cond_branch
	mov	r0, #0x1
	b	.L163
.L165:
	.align	2, 0
.L164:
	.word	gSaveBlock1Ptr
.L161:
	mov	r0, #0x0
.L163:
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 CurMapIsSecretBase,.Lfe21-CurMapIsSecretBase
	.align	2, 0
	.globl	InitSecretBaseAppearance
	.type	 InitSecretBaseAppearance,function
	.thumb_func
InitSecretBaseAppearance:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	CurMapIsSecretBase
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L167	@cond_branch
	ldr	r0, .L177
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r1, .L177+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	ldr	r2, .L177+0x8
	add	r0, r0, r2
	ldr	r1, [r1]
	add	r1, r1, r0
	add	r7, r1, #0
	add	r7, r7, #0x12
	add	r6, r1, #0
	add	r6, r6, #0x22
	mov	r1, #0x0
	mov	r0, sp
	strh	r1, [r0]
	mov	r4, sp
.L171:
	ldrh	r2, [r4]
	add	r1, r7, r2
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x77
	bhi	.L170	@cond_branch
	ldr	r0, .L177+0xc
	ldrb	r3, [r1]
	lsl	r1, r3, #0x5
	add	r1, r1, r0
	ldrb	r0, [r1, #0x11]
	cmp	r0, #0x4
	beq	.L170	@cond_branch
	add	r0, r6, r2
	ldrb	r2, [r0]
	lsr	r0, r2, #0x4
	add	r0, r0, #0x7
	mov	r1, #0xf
	and	r1, r1, r2
	add	r1, r1, #0x7
	add	r2, r3, #0
	bl	ShowDecorationOnMap
.L170:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strh	r0, [r4]
	cmp	r0, #0xf
	bls	.L171	@cond_branch
	cmp	r5, #0
	beq	.L174	@cond_branch
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r2, #0x88
	lsl	r2, r2, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	FindMetatileIdMapCoords
	mov	r0, sp
	ldrh	r0, [r0]
	add	r0, r0, #0x7
	ldrh	r1, [r4]
	add	r1, r1, #0x7
	ldr	r2, .L177+0x10
	bl	MapGridSetMetatileIdAt
	b	.L167
.L178:
	.align	2, 0
.L177:
	.word	0x4054
	.word	gSaveBlock1Ptr
	.word	0x207c
	.word	gDecorations
	.word	0xe21
.L174:
	mov	r0, r8
	cmp	r0, #0x1
	bne	.L167	@cond_branch
	ldr	r0, .L179
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L167	@cond_branch
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r2, #0x88
	lsl	r2, r2, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	FindMetatileIdMapCoords
	mov	r0, sp
	ldrh	r0, [r0]
	add	r0, r0, #0x7
	ldrh	r1, [r4]
	add	r1, r1, #0x7
	ldr	r2, .L179+0x4
	bl	MapGridSetMetatileIdAt
.L167:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L180:
	.align	2, 0
.L179:
	.word	0x4089
	.word	0xe0a
.Lfe22:
	.size	 InitSecretBaseAppearance,.Lfe22-InitSecretBaseAppearance
	.align	2, 0
	.globl	InitSecretBaseDecorationSprites
	.type	 InitSecretBaseDecorationSprites,function
	.thumb_func
InitSecretBaseDecorationSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	bl	CurMapIsSecretBase
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L182	@cond_branch
	ldr	r0, .L205
	ldr	r0, [r0]
	ldr	r1, .L205+0x4
	add	r1, r0, r1
	str	r1, [sp, #0x4]
	ldr	r2, .L205+0x8
	add	r2, r0, r2
	str	r2, [sp, #0x8]
	mov	r3, #0xc
	str	r3, [sp, #0x10]
	b	.L183
.L206:
	.align	2, 0
.L205:
	.word	gSaveBlock1Ptr
	.word	0x239c
	.word	0x23a8
.L182:
	ldr	r0, .L207
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L207+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	ldr	r4, .L207+0x8
	add	r1, r1, r4
	ldr	r0, [r2]
	add	r0, r0, r1
	add	r1, r0, #0
	add	r1, r1, #0x12
	str	r1, [sp, #0x4]
	add	r0, r0, #0x22
	str	r0, [sp, #0x8]
	mov	r2, #0x10
	str	r2, [sp, #0x10]
.L183:
	mov	r6, #0x0
	b	.L204
.L208:
	.align	2, 0
.L207:
	.word	0x4054
	.word	gSaveBlock1Ptr
	.word	0x207c
.L187:
	ldr	r4, [sp, #0x4]
	add	r0, r4, r6
	ldrb	r1, [r0]
	mov	sl, r0
	add	r0, r6, #0x1
	str	r0, [sp, #0x14]
	cmp	r1, #0
	bne	.LCB1608
	b	.L186	@long jump
.LCB1608:
	mov	r1, sl
	ldrb	r0, [r1]
	lsl	r0, r0, #0x5
	ldr	r2, .L209
	add	r0, r0, r2
	ldrb	r1, [r0, #0x11]
	ldrb	r0, [r0, #0x13]
	str	r0, [sp, #0xc]
	cmp	r1, #0x4
	beq	.LCB1619
	b	.L186	@long jump
.LCB1619:
	mov	r5, #0x0
	ldr	r0, .L209+0x4
	ldr	r3, [r0, #0x4]
	ldrb	r4, [r3]
	mov	r9, r0
	cmp	r5, r4
	bcs	.L191	@cond_branch
	ldr	r0, [r3, #0x4]
	ldrh	r2, [r0, #0x14]
	ldr	r1, .L209+0x8
	ldrh	r0, [r1]
	add	r0, r0, #0xae
	add	r7, r1, #0
	cmp	r2, r0
	beq	.L191	@cond_branch
	add	r2, r4, #0
.L192:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r2
	bcs	.L191	@cond_branch
	ldr	r1, [r3, #0x4]
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x14]
	ldrh	r0, [r7]
	add	r0, r0, #0xae
	cmp	r1, r0
	bne	.L192	@cond_branch
.L191:
	mov	r3, r9
	ldr	r0, [r3, #0x4]
	ldrb	r0, [r0]
	cmp	r5, r0
	bne	.LCB1676
	b	.L186	@long jump
.LCB1676:
	ldr	r4, .L209+0xc
	mov	r8, r4
	ldr	r0, [sp, #0x8]
	add	r1, r0, r6
	ldrb	r0, [r1]
	lsr	r0, r0, #0x4
	strh	r0, [r4]
	ldr	r7, .L209+0x10
	ldrb	r1, [r1]
	mov	r0, #0xf
	and	r0, r0, r1
	strh	r0, [r7]
	ldrh	r0, [r4]
	add	r0, r0, #0x7
	ldrh	r1, [r7]
	add	r1, r1, #0x7
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	MetatileBehavior_HoldsSmallDecoration
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L198	@cond_branch
	add	r0, r4, #0
	bl	MetatileBehavior_HoldsLargeDecoration
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L186	@cond_branch
.L198:
	ldr	r6, .L209+0x14
	mov	r1, r9
	ldr	r0, [r1, #0x4]
	ldr	r1, [r0, #0x4]
	lsl	r4, r5, #0x1
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r1, r4, r1
	ldr	r2, .L209+0x18
	add	r0, r2, #0
	ldrb	r1, [r1, #0x1]
	add	r0, r0, r1
	strh	r0, [r6]
	ldrh	r0, [r6]
	mov	r3, sl
	ldrb	r1, [r3]
	lsl	r1, r1, #0x5
	ldr	r2, .L209+0x1c
	add	r1, r1, r2
	ldr	r1, [r1]
	ldrh	r1, [r1]
	bl	VarSet
	mov	r3, r9
	ldr	r0, [r3, #0x4]
	ldr	r0, [r0, #0x4]
	add	r4, r4, r0
	ldrb	r0, [r4]
	strh	r0, [r6]
	ldr	r0, .L209+0x8
	ldrh	r0, [r0]
	add	r0, r0, #0xae
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagClear
	ldrb	r0, [r6]
	ldr	r5, .L209+0x20
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	TrySpawnObjectEvent
	ldrb	r0, [r6]
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	mov	r4, r8
	mov	r3, #0x0
	ldrsh	r4, [r4, r3]
	mov	r8, r4
	mov	r4, #0x0
	ldrsh	r7, [r7, r4]
	str	r7, [sp]
	mov	r3, r8
	bl	TryMoveObjectEventToMapCoords
	ldrb	r0, [r6]
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	TryOverrideObjectEventTemplateCoords
	bl	CurMapIsSecretBase
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L199	@cond_branch
	ldr	r0, .L209+0x24
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L199	@cond_branch
	ldr	r0, [sp, #0xc]
	cmp	r0, #0x6
	bne	.L200	@cond_branch
	ldrb	r0, [r6]
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	mov	r3, #0x6
	bl	OverrideSecretBaseDecorationSpriteScript
	b	.L199
.L210:
	.align	2, 0
.L209:
	.word	gDecorations
	.word	gMapHeader
	.word	gSpecialVar_0x8004
	.word	gSpecialVar_0x8006
	.word	gSpecialVar_0x8007
	.word	gSpecialVar_Result
	.word	0x3f1c
	.word	gDecorations+0x1c
	.word	gSaveBlock1Ptr
	.word	0x4054
.L200:
	ldr	r1, [sp, #0xc]
	cmp	r1, #0x7
	bne	.L199	@cond_branch
	ldrb	r0, [r6]
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	mov	r3, #0x7
	bl	OverrideSecretBaseDecorationSpriteScript
.L199:
	ldr	r1, .L211
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L186:
	ldr	r2, [sp, #0x14]
	lsl	r0, r2, #0x18
	lsr	r6, r0, #0x18
.L204:
	ldr	r3, [sp, #0x10]
	cmp	r6, r3
	bcs	.LCB1880
	b	.L187	@long jump
.LCB1880:
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L212:
	.align	2, 0
.L211:
	.word	gSpecialVar_0x8004
.Lfe23:
	.size	 InitSecretBaseDecorationSprites,.Lfe23-InitSecretBaseDecorationSprites
	.align	2, 0
	.globl	HideSecretBaseDecorationSprites
	.type	 HideSecretBaseDecorationSprites,function
	.thumb_func
HideSecretBaseDecorationSprites:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	ldr	r1, .L220
	ldr	r0, [r1, #0x4]
	ldrb	r0, [r0]
	cmp	r5, r0
	bcs	.L215	@cond_branch
	add	r6, r1, #0
.L217:
	ldr	r0, [r6, #0x4]
	ldr	r1, [r0, #0x4]
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r4, [r1, #0x14]
	add	r0, r4, #0
	sub	r0, r0, #0xae
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xd
	bhi	.L216	@cond_branch
	ldrb	r0, [r1]
	ldr	r1, .L220+0x4
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	RemoveObjectEventByLocalIdAndMap
	add	r0, r4, #0
	bl	FlagSet
.L216:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, [r6, #0x4]
	ldrb	r0, [r0]
	cmp	r5, r0
	bcc	.L217	@cond_branch
.L215:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L221:
	.align	2, 0
.L220:
	.word	gMapHeader
	.word	gSaveBlock1Ptr
.Lfe24:
	.size	 HideSecretBaseDecorationSprites,.Lfe24-HideSecretBaseDecorationSprites
	.align	2, 0
	.globl	SetSecretBaseOwnerGfxId
	.type	 SetSecretBaseOwnerGfxId,function
	.thumb_func
SetSecretBaseOwnerGfxId:
	push	{r4, r5, lr}
	ldr	r5, .L223
	ldr	r4, .L223+0x4
	ldr	r0, .L223+0x8
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetSecretBaseOwnerType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	VarSet
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L224:
	.align	2, 0
.L223:
	.word	0x401f
	.word	sSecretBaseOwnerGfxIds
	.word	0x4054
.Lfe25:
	.size	 SetSecretBaseOwnerGfxId,.Lfe25-SetSecretBaseOwnerGfxId
	.align	2, 0
	.globl	SetCurSecretBaseIdFromPosition
	.type	 SetCurSecretBaseIdFromPosition,function
	.thumb_func
SetCurSecretBaseIdFromPosition:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r3, #0x0
	ldrb	r0, [r4, #0x3]
	cmp	r3, r0
	bge	.L227	@cond_branch
	ldr	r6, .L232
.L229:
	lsl	r3, r3, #0x10
	asr	r1, r3, #0x10
	ldr	r2, [r4, #0x10]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x5]
	cmp	r0, #0x8
	bne	.L228	@cond_branch
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	ldrh	r0, [r2]
	add	r0, r0, #0x7
	cmp	r1, r0
	bne	.L228	@cond_branch
	mov	r0, #0x2
	ldrsh	r1, [r5, r0]
	ldrh	r0, [r2, #0x2]
	add	r0, r0, #0x7
	cmp	r1, r0
	bne	.L228	@cond_branch
	ldr	r0, [r2, #0x8]
	strb	r0, [r6]
	b	.L227
.L233:
	.align	2, 0
.L232:
	.word	sCurSecretBaseId
.L228:
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r3, r1
	lsr	r3, r0, #0x10
	asr	r0, r0, #0x10
	ldrb	r1, [r4, #0x3]
	cmp	r0, r1
	blt	.L229	@cond_branch
.L227:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 SetCurSecretBaseIdFromPosition,.Lfe26-SetCurSecretBaseIdFromPosition
	.align	2, 0
	.globl	WarpIntoSecretBase
	.type	 WarpIntoSecretBase,function
	.thumb_func
WarpIntoSecretBase:
	push	{lr}
	bl	SetCurSecretBaseIdFromPosition
	bl	TrySetCurSecretBaseIndex
	ldr	r0, .L235
	bl	ScriptContext1_SetupScript
	pop	{r0}
	bx	r0
.L236:
	.align	2, 0
.L235:
	.word	SecretBase_EventScript_Enter
.Lfe27:
	.size	 WarpIntoSecretBase,.Lfe27-WarpIntoSecretBase
	.align	2, 0
	.globl	TrySetCurSecretBase
	.type	 TrySetCurSecretBase,function
	.thumb_func
TrySetCurSecretBase:
	push	{lr}
	bl	SetCurSecretBaseId
	bl	TrySetCurSecretBaseIndex
	ldr	r0, .L240
	ldrh	r0, [r0]
	cmp	r0, #0x1
	beq	.L238	@cond_branch
	mov	r0, #0x1
	b	.L239
.L241:
	.align	2, 0
.L240:
	.word	gSpecialVar_Result
.L238:
	mov	r0, #0x0
.L239:
	pop	{r1}
	bx	r1
.Lfe28:
	.size	 TrySetCurSecretBase,.Lfe28-TrySetCurSecretBase
	.align	2, 0
	.type	 Task_WarpOutOfSecretBase,function
	.thumb_func
Task_WarpOutOfSecretBase:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L251
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L245	@cond_branch
	cmp	r0, #0x1
	bgt	.L250	@cond_branch
	cmp	r0, #0
	beq	.L244	@cond_branch
	b	.L243
.L252:
	.align	2, 0
.L251:
	.word	gTasks
.L250:
	cmp	r0, #0x2
	beq	.L247	@cond_branch
	b	.L243
.L244:
	bl	ScriptContext2_Enable
	mov	r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L243
.L245:
	ldr	r0, .L253
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L243	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x8]
	b	.L243
.L254:
	.align	2, 0
.L253:
	.word	gPaletteFade
.L247:
	mov	r0, #0x7e
	bl	SetWarpDestinationToDynamicWarp
	bl	WarpIntoMap
	ldr	r0, .L255
	ldr	r1, .L255+0x4
	str	r1, [r0]
	ldr	r0, .L255+0x8
	bl	SetMainCallback2
	bl	ScriptContext2_Disable
	add	r0, r5, #0
	bl	DestroyTask
.L243:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L256:
	.align	2, 0
.L255:
	.word	gFieldCallback
	.word	FieldCB_DefaultWarpExit
	.word	CB2_LoadMap
.Lfe29:
	.size	 Task_WarpOutOfSecretBase,.Lfe29-Task_WarpOutOfSecretBase
	.align	2, 0
	.type	 WarpOutOfSecretBase,function
	.thumb_func
WarpOutOfSecretBase:
	push	{lr}
	ldr	r0, .L258
	mov	r1, #0x0
	bl	CreateTask
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FadeScreen
	pop	{r0}
	bx	r0
.L259:
	.align	2, 0
.L258:
	.word	Task_WarpOutOfSecretBase
.Lfe30:
	.size	 WarpOutOfSecretBase,.Lfe30-WarpOutOfSecretBase
	.align	2, 0
	.globl	IsCurSecretBaseOwnedByAnotherPlayer
	.type	 IsCurSecretBaseOwnedByAnotherPlayer,function
	.thumb_func
IsCurSecretBaseOwnedByAnotherPlayer:
	push	{lr}
	ldr	r0, .L264
	ldr	r0, [r0]
	ldr	r1, .L264+0x4
	add	r0, r0, r1
	ldr	r1, .L264+0x8
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L261	@cond_branch
	ldr	r1, .L264+0xc
	mov	r0, #0x1
	b	.L263
.L265:
	.align	2, 0
.L264:
	.word	gSaveBlock1Ptr
	.word	0x207c
	.word	sCurSecretBaseId
	.word	gSpecialVar_Result
.L261:
	ldr	r1, .L266
	mov	r0, #0x0
.L263:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L267:
	.align	2, 0
.L266:
	.word	gSpecialVar_Result
.Lfe31:
	.size	 IsCurSecretBaseOwnedByAnotherPlayer,.Lfe31-IsCurSecretBaseOwnedByAnotherPlayer
	.align	2, 0
	.type	 GetSecretBaseName,function
	.thumb_func
GetSecretBaseName:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L269
	mov	r8, r0
	lsl	r5, r1, #0x2
	add	r5, r5, r1
	lsl	r5, r5, #0x5
	ldr	r4, [r0]
	add	r4, r5, r4
	ldr	r1, .L269+0x4
	add	r4, r4, r1
	add	r0, r4, #0
	bl	GetNameLength
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r6, #0
	add	r1, r4, #0
	bl	StringCopyN
	mov	r1, #0xff
	strb	r1, [r0]
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r5
	ldr	r1, .L269+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r6, #0
	bl	ConvertInternationalString
	ldr	r1, .L269+0xc
	add	r0, r6, #0
	bl	StringAppend
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L270:
	.align	2, 0
.L269:
	.word	gSaveBlock1Ptr
	.word	0x207e
	.word	0x2089
	.word	gText_ApostropheSBase
.Lfe32:
	.size	 GetSecretBaseName,.Lfe32-GetSecretBaseName
	.align	2, 0
	.globl	GetSecretBaseMapName
	.type	 GetSecretBaseMapName,function
	.thumb_func
GetSecretBaseMapName:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L272
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	GetSecretBaseName
	pop	{r4}
	pop	{r1}
	bx	r1
.L273:
	.align	2, 0
.L272:
	.word	0x4054
.Lfe33:
	.size	 GetSecretBaseMapName,.Lfe33-GetSecretBaseMapName
	.align	2, 0
	.globl	CopyCurSecretBaseOwnerName_StrVar1
	.type	 CopyCurSecretBaseOwnerName_StrVar1,function
	.thumb_func
CopyCurSecretBaseOwnerName_StrVar1:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r0, .L275
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L275+0x4
	mov	r8, r1
	lsl	r5, r0, #0x2
	add	r5, r5, r0
	lsl	r5, r5, #0x5
	ldr	r4, [r1]
	add	r4, r5, r4
	ldr	r0, .L275+0x8
	add	r4, r4, r0
	ldr	r6, .L275+0xc
	add	r0, r4, #0
	bl	GetNameLength
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r6, #0
	add	r1, r4, #0
	bl	StringCopyN
	mov	r1, #0xff
	strb	r1, [r0]
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r5
	ldr	r1, .L275+0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r6, #0
	bl	ConvertInternationalString
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L276:
	.align	2, 0
.L275:
	.word	0x4054
	.word	gSaveBlock1Ptr
	.word	0x207e
	.word	gStringVar1
	.word	0x2089
.Lfe34:
	.size	 CopyCurSecretBaseOwnerName_StrVar1,.Lfe34-CopyCurSecretBaseOwnerName_StrVar1
	.align	2, 0
	.type	 IsSecretBaseRegistered,function
	.thumb_func
IsSecretBaseRegistered:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L280
	ldr	r2, [r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	add	r2, r2, r1
	ldr	r0, .L280+0x4
	add	r2, r2, r0
	ldrb	r0, [r2]
	lsr	r0, r0, #0x6
	cmp	r0, #0
	bne	.L278	@cond_branch
	mov	r0, #0x0
	b	.L279
.L281:
	.align	2, 0
.L280:
	.word	gSaveBlock1Ptr
	.word	0x207d
.L278:
	mov	r0, #0x1
.L279:
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 IsSecretBaseRegistered,.Lfe35-IsSecretBaseRegistered
	.align	2, 0
	.type	 GetAverageEVs,function
	.thumb_func
GetAverageEVs:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x1a
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x1b
	bl	GetMonData
	add	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x1c
	bl	GetMonData
	add	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x1d
	bl	GetMonData
	add	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x1e
	bl	GetMonData
	add	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x1f
	bl	GetMonData
	add	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r4, #0
	mov	r1, #0x6
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 GetAverageEVs,.Lfe36-GetAverageEVs
	.align	2, 0
	.globl	SetPlayerSecretBaseParty
	.type	 SetPlayerSecretBaseParty,function
	.thumb_func
SetPlayerSecretBaseParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	mov	r0, #0x0
	mov	sl, r0
	ldr	r0, .L301
	ldr	r1, [r0]
	ldr	r2, .L301+0x4
	add	r2, r1, r2
	str	r2, [sp]
	ldr	r3, .L301+0x8
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB2566
	b	.L284	@long jump
.LCB2566:
	mov	r6, #0x0
	ldr	r7, .L301+0xc
	add	r7, r1, r7
	str	r7, [sp, #0x14]
	ldr	r0, .L301+0x10
	add	r0, r1, r0
	str	r0, [sp, #0xc]
	ldr	r2, .L301+0x14
	add	r2, r1, r2
	str	r2, [sp, #0x10]
	add	r3, r3, #0x94
	add	r3, r1, r3
	str	r3, [sp, #0x18]
	ldr	r7, .L301+0x18
	add	r7, r1, r7
	str	r7, [sp, #0x1c]
	mov	r9, r6
.L288:
	mov	r4, #0x0
	lsl	r5, r6, #0x2
	lsl	r3, r6, #0x1
	ldr	r0, .L301+0x1c
	mov	r8, r0
	add	r1, r6, #0x1
	str	r1, [sp, #0x4]
	add	r2, r5, #0
	ldr	r1, [sp, #0x14]
.L292:
	add	r0, r2, r4
	lsl	r0, r0, #0x1
	add	r0, r1, r0
	mov	r7, r9
	strh	r7, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L292	@cond_branch
	ldr	r1, [sp, #0xc]
	add	r0, r1, r3
	mov	r2, r9
	strh	r2, [r0]
	ldr	r7, [sp, #0x10]
	add	r0, r7, r3
	strh	r2, [r0]
	ldr	r1, [sp, #0x18]
	add	r0, r1, r6
	mov	r2, r9
	strb	r2, [r0]
	ldr	r3, [sp]
	add	r0, r3, r5
	mov	r7, r9
	str	r7, [r0]
	ldr	r1, [sp, #0x1c]
	add	r0, r1, r6
	strb	r7, [r0]
	mov	r2, #0x64
	mov	r5, r6
	mul	r5, r5, r2
	mov	r3, r8
	add	r4, r5, r3
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L287	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L287	@cond_branch
	mov	r4, #0x0
	mov	r7, sl
	lsl	r7, r7, #0x2
	mov	r8, r7
	mov	r0, sl
	lsl	r7, r0, #0x1
	add	r0, r0, #0x1
	str	r0, [sp, #0x8]
	ldr	r2, .L301+0x1c
.L298:
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r5, r2
	str	r2, [sp, #0x20]
	bl	GetMonData
	mov	r3, r8
	add	r1, r3, r4
	lsl	r1, r1, #0x1
	ldr	r3, [sp, #0x14]
	add	r1, r3, r1
	strh	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r2, [sp, #0x20]
	cmp	r4, #0x3
	bls	.L298	@cond_branch
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L301+0x1c
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	ldr	r2, [sp, #0xc]
	add	r1, r2, r7
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	ldr	r3, [sp, #0x10]
	add	r1, r3, r7
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x18]
	add	r1, r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	ldr	r1, [sp]
	add	r1, r1, r8
	str	r0, [r1]
	add	r0, r4, #0
	bl	GetAverageEVs
	ldr	r1, [sp, #0x1c]
	add	r1, r1, sl
	strb	r0, [r1]
	ldr	r7, [sp, #0x8]
	lsl	r0, r7, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
.L287:
	ldr	r1, [sp, #0x4]
	lsl	r0, r1, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x5
	bhi	.LCB2757
	b	.L288	@long jump
.LCB2757:
.L284:
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L302:
	.align	2, 0
.L301:
	.word	gSaveBlock1Ptr
	.word	0x20b0
	.word	0x207c
	.word	0x20c8
	.word	0x20f8
	.word	0x2104
	.word	0x2116
	.word	gPlayerParty
.Lfe37:
	.size	 SetPlayerSecretBaseParty,.Lfe37-SetPlayerSecretBaseParty
	.align	2, 0
	.globl	ClearAndLeaveSecretBase
	.type	 ClearAndLeaveSecretBase,function
	.thumb_func
ClearAndLeaveSecretBase:
	push	{r4, r5, r6, lr}
	ldr	r5, .L304
	ldr	r0, [r5]
	ldr	r4, .L304+0x4
	add	r1, r0, r4
	ldrh	r6, [r1]
	ldr	r1, .L304+0x8
	add	r0, r0, r1
	bl	ClearSecretBase
	ldr	r0, [r5]
	add	r0, r0, r4
	strh	r6, [r0]
	bl	WarpOutOfSecretBase
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L305:
	.align	2, 0
.L304:
	.word	gSaveBlock1Ptr
	.word	0x208a
	.word	0x207c
.Lfe38:
	.size	 ClearAndLeaveSecretBase,.Lfe38-ClearAndLeaveSecretBase
	.align	2, 0
	.globl	MoveOutOfSecretBase
	.type	 MoveOutOfSecretBase,function
	.thumb_func
MoveOutOfSecretBase:
	push	{lr}
	mov	r0, #0x14
	bl	IncrementGameStat
	bl	ClearAndLeaveSecretBase
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 MoveOutOfSecretBase,.Lfe39-MoveOutOfSecretBase
	.align	2, 0
	.type	 ClosePlayerSecretBaseEntrance,function
	.thumb_func
ClosePlayerSecretBaseEntrance:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L322
	ldr	r4, [r0, #0x4]
	mov	r6, #0x0
	b	.L321
.L323:
	.align	2, 0
.L322:
	.word	gMapHeader
.L311:
	ldr	r2, [r4, #0x10]
	lsl	r1, r6, #0x1
	add	r0, r1, r6
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x5]
	add	r7, r1, #0
	cmp	r0, #0x8
	bne	.L310	@cond_branch
	ldr	r0, .L324
	ldr	r0, [r0]
	ldr	r1, .L324+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r0, [r2, #0x8]
	cmp	r1, r0
	bne	.L310	@cond_branch
	ldrh	r0, [r2]
	add	r0, r0, #0x7
	ldrh	r1, [r2, #0x2]
	add	r1, r1, #0x7
	bl	MapGridGetMetatileIdAt
	mov	r1, #0x0
	ldr	r5, .L324+0x8
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
.L316:
	lsl	r0, r1, #0x2
	add	r3, r0, r5
	ldrh	r0, [r3, #0x2]
	cmp	r0, r2
	beq	.L320	@cond_branch
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x6
	bls	.L316	@cond_branch
.L314:
	bl	DrawWholeMapView
	b	.L309
.L325:
	.align	2, 0
.L324:
	.word	gSaveBlock1Ptr
	.word	0x207c
	.word	sSecretBaseEntranceMetatiles
.L320:
	ldr	r0, [r4, #0x10]
	add	r1, r7, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x7
	ldrh	r1, [r1, #0x2]
	add	r1, r1, #0x7
	ldrh	r3, [r3]
	mov	r4, #0xc0
	lsl	r4, r4, #0x4
	add	r2, r4, #0
	orr	r2, r2, r3
	bl	MapGridSetMetatileIdAt
	b	.L314
.L310:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L321:
	ldrb	r0, [r4, #0x3]
	cmp	r6, r0
	bcc	.L311	@cond_branch
.L309:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 ClosePlayerSecretBaseEntrance,.Lfe40-ClosePlayerSecretBaseEntrance
	.align	2, 0
	.globl	MoveOutOfSecretBaseFromOutside
	.type	 MoveOutOfSecretBaseFromOutside,function
	.thumb_func
MoveOutOfSecretBaseFromOutside:
	push	{r4, r5, r6, lr}
	bl	ClosePlayerSecretBaseEntrance
	mov	r0, #0x14
	bl	IncrementGameStat
	ldr	r5, .L327
	ldr	r0, [r5]
	ldr	r4, .L327+0x4
	add	r1, r0, r4
	ldrh	r6, [r1]
	ldr	r1, .L327+0x8
	add	r0, r0, r1
	bl	ClearSecretBase
	ldr	r0, [r5]
	add	r0, r0, r4
	strh	r6, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L328:
	.align	2, 0
.L327:
	.word	gSaveBlock1Ptr
	.word	0x208a
	.word	0x207c
.Lfe41:
	.size	 MoveOutOfSecretBaseFromOutside,.Lfe41-MoveOutOfSecretBaseFromOutside
	.align	2, 0
	.type	 GetNumRegisteredSecretBases,function
	.thumb_func
GetNumRegisteredSecretBases:
	push	{r4, r5, lr}
	mov	r5, #0x0
	mov	r4, #0x1
.L333:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	IsSecretBaseRegistered
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L332	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L332:
	lsl	r0, r4, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L333	@cond_branch
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 GetNumRegisteredSecretBases,.Lfe42-GetNumRegisteredSecretBases
	.align	2, 0
	.globl	GetCurSecretBaseRegistrationValidity
	.type	 GetCurSecretBaseRegistrationValidity,function
	.thumb_func
GetCurSecretBaseRegistrationValidity:
	push	{lr}
	ldr	r0, .L342
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsSecretBaseRegistered
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x1
	bne	.L337	@cond_branch
	ldr	r0, .L342+0x4
	strh	r1, [r0]
	b	.L338
.L343:
	.align	2, 0
.L342:
	.word	0x4054
	.word	gSpecialVar_Result
.L337:
	bl	GetNumRegisteredSecretBases
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x9
	bls	.L339	@cond_branch
	ldr	r1, .L344
	mov	r0, #0x2
	b	.L341
.L345:
	.align	2, 0
.L344:
	.word	gSpecialVar_Result
.L339:
	ldr	r1, .L346
	mov	r0, #0x0
.L341:
	strh	r0, [r1]
.L338:
	pop	{r0}
	bx	r0
.L347:
	.align	2, 0
.L346:
	.word	gSpecialVar_Result
.Lfe43:
	.size	 GetCurSecretBaseRegistrationValidity,.Lfe43-GetCurSecretBaseRegistrationValidity
	.align	2, 0
	.globl	ToggleCurSecretBaseRegistry
	.type	 ToggleCurSecretBaseRegistry,function
	.thumb_func
ToggleCurSecretBaseRegistry:
	push	{lr}
	ldr	r0, .L349
	bl	VarGet
	ldr	r1, .L349+0x4
	ldr	r2, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	add	r2, r2, r1
	ldr	r0, .L349+0x8
	add	r2, r2, r0
	ldrb	r3, [r2]
	lsr	r1, r3, #0x6
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x6
	mov	r0, #0x3f
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x86
	lsl	r0, r0, #0x1
	bl	FlagSet
	pop	{r0}
	bx	r0
.L350:
	.align	2, 0
.L349:
	.word	0x4054
	.word	gSaveBlock1Ptr
	.word	0x207d
.Lfe44:
	.size	 ToggleCurSecretBaseRegistry,.Lfe44-ToggleCurSecretBaseRegistry
	.align	2, 0
	.globl	ShowSecretBaseDecorationMenu
	.type	 ShowSecretBaseDecorationMenu,function
	.thumb_func
ShowSecretBaseDecorationMenu:
	push	{lr}
	ldr	r0, .L352
	mov	r1, #0x0
	bl	CreateTask
	pop	{r0}
	bx	r0
.L353:
	.align	2, 0
.L352:
	.word	DoSecretBaseDecorationMenu
.Lfe45:
	.size	 ShowSecretBaseDecorationMenu,.Lfe45-ShowSecretBaseDecorationMenu
	.align	2, 0
	.globl	ShowSecretBaseRegistryMenu
	.type	 ShowSecretBaseRegistryMenu,function
	.thumb_func
ShowSecretBaseRegistryMenu:
	push	{lr}
	ldr	r0, .L355
	mov	r1, #0x0
	bl	CreateTask
	pop	{r0}
	bx	r0
.L356:
	.align	2, 0
.L355:
	.word	Task_ShowSecretBaseRegistryMenu
.Lfe46:
	.size	 ShowSecretBaseRegistryMenu,.Lfe46-ShowSecretBaseRegistryMenu
	.align	2, 0
	.type	 Task_ShowSecretBaseRegistryMenu,function
	.thumb_func
Task_ShowSecretBaseRegistryMenu:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r7, r0, #0x3
	ldr	r0, .L360
	mov	r8, r0
	add	r5, r7, r0
	bl	ScriptContext2_Enable
	bl	GetNumRegisteredSecretBases
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	cmp	r0, #0
	beq	.L358	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2]
	strh	r0, [r5, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	ClearDialogWindowAndFrame
	ldr	r4, .L360+0x4
	mov	r0, #0xdc
	lsl	r0, r0, #0x1
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r0, .L360+0x8
	bl	AddWindow
	strh	r0, [r5, #0xc]
	add	r0, r6, #0
	bl	BuildRegistryMenuItems
	add	r0, r6, #0
	bl	FinalizeRegistryMenu
	mov	r0, r8
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L360+0xc
	str	r1, [r0]
	b	.L359
.L361:
	.align	2, 0
.L360:
	.word	gTasks+0x8
	.word	sRegistryMenu
	.word	sRegistryWindowTemplates
	.word	HandleRegistryMenuInput
.L358:
	ldr	r1, .L362
	ldr	r2, .L362+0x4
	add	r0, r6, #0
	bl	DisplayItemMessageOnField
.L359:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L363:
	.align	2, 0
.L362:
	.word	gText_NoRegistry
	.word	GoToSecretBasePCRegisterMenu
.Lfe47:
	.size	 Task_ShowSecretBaseRegistryMenu,.Lfe47-Task_ShowSecretBaseRegistryMenu
	.align	2, 0
	.type	 BuildRegistryMenuItems,function
	.thumb_func
BuildRegistryMenuItems:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L373
	add	r7, r1, r0
	mov	r6, #0x0
	mov	r5, #0x1
	ldr	r0, .L373+0x4
	mov	r8, r0
.L368:
	add	r0, r5, #0
	bl	IsSecretBaseRegistered
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L367	@cond_branch
	lsl	r4, r6, #0x5
	add	r4, r4, #0x58
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r4
	add	r1, r5, #0
	bl	GetSecretBaseName
	mov	r3, r8
	ldr	r0, [r3]
	lsl	r2, r6, #0x3
	add	r1, r0, r2
	add	r4, r0, r4
	str	r4, [r1]
	add	r0, r0, #0x4
	add	r0, r0, r2
	str	r5, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L367:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bls	.L368	@cond_branch
	ldr	r4, .L373+0x4
	ldr	r1, [r4]
	lsl	r3, r6, #0x3
	add	r2, r1, r3
	ldr	r0, .L373+0x8
	str	r0, [r2]
	add	r1, r1, #0x4
	add	r1, r1, r3
	mov	r0, #0x2
	neg	r0, r0
	str	r0, [r1]
	add	r2, r6, #0x1
	strh	r2, [r7]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	bgt	.L371	@cond_branch
	strh	r2, [r7, #0x6]
	b	.L372
.L374:
	.align	2, 0
.L373:
	.word	gTasks+0x8
	.word	sRegistryMenu
	.word	gText_Cancel
.L371:
	mov	r0, #0x8
	strh	r0, [r7, #0x6]
.L372:
	ldr	r2, .L375
	add	r1, r2, #0
	ldr	r0, .L375+0x4
	ldmia	r0!, {r3, r5, r6}
	stmia	r1!, {r3, r5, r6}
	ldmia	r0!, {r3, r5, r6}
	stmia	r1!, {r3, r5, r6}
	ldrh	r0, [r7, #0xc]
	strb	r0, [r2, #0x10]
	ldrh	r0, [r7]
	strh	r0, [r2, #0xc]
	ldr	r0, [r4]
	str	r0, [r2]
	ldrh	r0, [r7, #0x6]
	strh	r0, [r2, #0xe]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L376:
	.align	2, 0
.L375:
	.word	gMultiuseListMenuTemplate
	.word	sRegistryListMenuTemplate
.Lfe48:
	.size	 BuildRegistryMenuItems,.Lfe48-BuildRegistryMenuItems
	.align	2, 0
	.type	 RegistryMenu_OnCursorMove,function
	.thumb_func
RegistryMenu_OnCursorMove:
	push	{lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	beq	.L378	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L378:
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 RegistryMenu_OnCursorMove,.Lfe49-RegistryMenu_OnCursorMove
	.align	2, 0
	.type	 FinalizeRegistryMenu,function
	.thumb_func
FinalizeRegistryMenu:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L380
	add	r4, r4, r0
	ldrb	r0, [r4, #0xc]
	mov	r1, #0x0
	bl	SetStandardWindowBorderStyle
	ldr	r0, .L380+0x4
	ldrh	r1, [r4, #0x4]
	ldrh	r2, [r4, #0x2]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0xa]
	add	r0, r5, #0
	bl	AddRegistryMenuScrollArrows
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L381:
	.align	2, 0
.L380:
	.word	gTasks+0x8
	.word	gMultiuseListMenuTemplate
.Lfe50:
	.size	 FinalizeRegistryMenu,.Lfe50-FinalizeRegistryMenu
	.align	2, 0
	.type	 AddRegistryMenuScrollArrows,function
	.thumb_func
AddRegistryMenuScrollArrows:
	push	{r4, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L383
	add	r4, r4, r0
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r2, #0x6
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	str	r0, [sp]
	ldr	r0, .L383+0x4
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	add	r0, r4, #0x4
	str	r0, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0xbc
	mov	r2, #0xc
	mov	r3, #0x94
	bl	AddScrollIndicatorArrowPairParameterized
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x10]
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L384:
	.align	2, 0
.L383:
	.word	gTasks+0x8
	.word	0x13f8
.Lfe51:
	.size	 AddRegistryMenuScrollArrows,.Lfe51-AddRegistryMenuScrollArrows
	.align	2, 0
	.type	 HandleRegistryMenuInput,function
	.thumb_func
HandleRegistryMenuInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L391
	add	r4, r0, r1
	ldrb	r0, [r4, #0xa]
	bl	ListMenu_ProcessInput
	add	r5, r0, #0
	ldrb	r0, [r4, #0xa]
	add	r1, r4, #0x4
	add	r2, r4, #0x2
	bl	ListMenuGetScrollAndRow
	mov	r0, #0x2
	neg	r0, r0
	cmp	r5, r0
	beq	.L388	@cond_branch
	add	r0, r0, #0x1
	cmp	r5, r0
	bne	.L389	@cond_branch
	b	.L386
.L392:
	.align	2, 0
.L391:
	.word	gTasks+0x8
.L388:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0xa]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	ldrb	r0, [r4, #0x10]
	bl	RemoveScrollIndicatorArrowPair
	ldrb	r0, [r4, #0xc]
	mov	r1, #0x0
	bl	ClearStdWindowAndFrame
	ldrb	r0, [r4, #0xc]
	bl	ClearWindowTilemap
	ldrb	r0, [r4, #0xc]
	bl	RemoveWindow
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, .L393
	ldr	r0, [r0]
	bl	Free
	add	r0, r6, #0
	bl	GoToSecretBasePCRegisterMenu
	b	.L386
.L394:
	.align	2, 0
.L393:
	.word	sRegistryMenu
.L389:
	mov	r0, #0x5
	bl	PlaySE
	strh	r5, [r4, #0x8]
	add	r0, r6, #0
	bl	ShowRegistryMenuActions
.L386:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 HandleRegistryMenuInput,.Lfe52-HandleRegistryMenuInput
	.align	2, 0
	.type	 ShowRegistryMenuActions,function
	.thumb_func
ShowRegistryMenuActions:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r6, .L396
	add	r5, r4, r6
	ldrb	r0, [r5, #0x10]
	bl	RemoveScrollIndicatorArrowPair
	ldr	r0, .L396+0x4
	ldr	r1, [r0, #0xc]		@ created by thumb_load_double_from_address
	ldr	r0, [r0, #0x8]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldr	r0, .L396+0x8
	mov	r8, r0
	mov	r1, #0x2
	bl	GetMaxWidthInMenuTable
	lsl	r0, r0, #0x18
	ldr	r2, .L396+0xc
	ldr	r1, [sp]
	and	r1, r1, r2
	orr	r1, r1, r0
	str	r1, [sp]
	mov	r0, sp
	bl	AddWindow
	strh	r0, [r5, #0xe]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	SetStandardWindowBorderStyle
	ldrb	r0, [r5, #0xe]
	mov	r1, #0x2
	mov	r2, r8
	bl	PrintMenuTable
	ldrb	r0, [r5, #0xe]
	mov	r1, #0x2
	mov	r2, #0x0
	bl	InitMenuInUpperLeftCornerPlaySoundWhenAPressed
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	sub	r6, r6, #0x8
	add	r4, r4, r6
	ldr	r0, .L396+0x10
	str	r0, [r4]
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L397:
	.align	2, 0
.L396:
	.word	gTasks+0x8
	.word	sRegistryWindowTemplates
	.word	sRegistryMenuActions
	.word	0xffffff
	.word	HandleRegistryMenuActionsInput
.Lfe53:
	.size	 ShowRegistryMenuActions,.Lfe53-ShowRegistryMenuActions
	.align	2, 0
	.type	 HandleRegistryMenuActionsInput,function
	.thumb_func
HandleRegistryMenuActionsInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	bl	Menu_ProcessInputNoWrap
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L399	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L402	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	ReturnToMainRegistryMenu
	b	.L399
.L402:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L404
	lsl	r1, r4, #0x3
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r6, #0
	bl	_call_via_r1
.L399:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L405:
	.align	2, 0
.L404:
	.word	sRegistryMenuActions
.Lfe54:
	.size	 HandleRegistryMenuActionsInput,.Lfe54-HandleRegistryMenuActionsInput
	.align	2, 0
	.type	 ShowRegistryMenuDeleteConfirmation,function
	.thumb_func
ShowRegistryMenuDeleteConfirmation:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L407
	add	r4, r4, r0
	ldrb	r0, [r4, #0xc]
	mov	r1, #0x0
	bl	ClearStdWindowAndFrame
	ldrb	r0, [r4, #0xe]
	mov	r1, #0x0
	bl	ClearStdWindowAndFrame
	ldrb	r0, [r4, #0xc]
	bl	ClearWindowTilemap
	ldrb	r0, [r4, #0xe]
	bl	ClearWindowTilemap
	ldrb	r0, [r4, #0xe]
	bl	RemoveWindow
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, .L407+0x4
	ldrb	r1, [r4, #0x8]
	bl	GetSecretBaseName
	ldr	r4, .L407+0x8
	ldr	r1, .L407+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r2, .L407+0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	DisplayItemMessageOnField
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L408:
	.align	2, 0
.L407:
	.word	gTasks+0x8
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_OkayToDeleteFromRegistry
	.word	ShowRegistryMenuDeleteYesNo
.Lfe55:
	.size	 ShowRegistryMenuDeleteConfirmation,.Lfe55-ShowRegistryMenuDeleteConfirmation
	.align	2, 0
	.type	 ShowRegistryMenuDeleteYesNo,function
	.thumb_func
ShowRegistryMenuDeleteYesNo:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	DisplayYesNoMenuDefaultYes
	ldr	r1, .L410
	add	r0, r4, #0
	bl	DoYesNoFuncWithChoice
	pop	{r4}
	pop	{r0}
	bx	r0
.L411:
	.align	2, 0
.L410:
	.word	sDeleteRegistryYesNoFuncs
.Lfe56:
	.size	 ShowRegistryMenuDeleteYesNo,.Lfe56-ShowRegistryMenuDeleteYesNo
	.align	2, 0
	.globl	DeleteRegistry_Yes_Callback
	.type	 DeleteRegistry_Yes_Callback,function
	.thumb_func
DeleteRegistry_Yes_Callback:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r4, #0x2
	add	r5, r5, r4
	lsl	r5, r5, #0x3
	ldr	r0, .L413
	mov	r8, r0
	add	r6, r5, r0
	mov	r0, #0x0
	mov	r1, #0x0
	bl	ClearDialogWindowAndFrame
	ldrb	r0, [r6, #0xa]
	add	r1, r6, #0x4
	mov	r9, r1
	add	r1, r6, #0x2
	mov	sl, r1
	mov	r1, r9
	mov	r2, sl
	bl	DestroyListMenuTask
	ldr	r0, .L413+0x4
	ldr	r2, [r0]
	mov	r0, #0x8
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x5
	add	r2, r2, r0
	ldr	r1, .L413+0x8
	add	r2, r2, r1
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	bl	BuildRegistryMenuItems
	ldrb	r2, [r6, #0x6]
	ldrb	r3, [r6]
	mov	r0, r9
	mov	r1, sl
	bl	sub_812225C
	add	r0, r4, #0
	bl	FinalizeRegistryMenu
	mov	r0, #0x8
	neg	r0, r0
	add	r8, r8, r0
	add	r5, r5, r8
	ldr	r0, .L413+0xc
	str	r0, [r5]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L414:
	.align	2, 0
.L413:
	.word	gTasks+0x8
	.word	gSaveBlock1Ptr
	.word	0x207d
	.word	HandleRegistryMenuInput
.Lfe57:
	.size	 DeleteRegistry_Yes_Callback,.Lfe57-DeleteRegistry_Yes_Callback
	.align	2, 0
	.type	 DeleteRegistry_Yes,function
	.thumb_func
DeleteRegistry_Yes:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L416
	ldr	r2, .L416+0x4
	bl	DisplayItemMessageOnField
	pop	{r0}
	bx	r0
.L417:
	.align	2, 0
.L416:
	.word	gText_RegisteredDataDeleted
	.word	DeleteRegistry_Yes_Callback
.Lfe58:
	.size	 DeleteRegistry_Yes,.Lfe58-DeleteRegistry_Yes
	.align	2, 0
	.type	 DeleteRegistry_No,function
	.thumb_func
DeleteRegistry_No:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L419
	mov	r8, r0
	add	r6, r4, r0
	mov	r0, #0x0
	mov	r1, #0x0
	bl	ClearDialogWindowAndFrame
	ldrb	r0, [r6, #0xa]
	add	r1, r6, #0x4
	add	r6, r6, #0x2
	add	r2, r6, #0
	bl	DestroyListMenuTask
	add	r0, r5, #0
	bl	FinalizeRegistryMenu
	mov	r0, #0x8
	neg	r0, r0
	add	r8, r8, r0
	add	r4, r4, r8
	ldr	r0, .L419+0x4
	str	r0, [r4]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L420:
	.align	2, 0
.L419:
	.word	gTasks+0x8
	.word	HandleRegistryMenuInput
.Lfe59:
	.size	 DeleteRegistry_No,.Lfe59-DeleteRegistry_No
	.align	2, 0
	.type	 ReturnToMainRegistryMenu,function
	.thumb_func
ReturnToMainRegistryMenu:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r6, .L422
	add	r5, r4, r6
	bl	AddRegistryMenuScrollArrows
	ldrb	r0, [r5, #0xe]
	mov	r1, #0x0
	bl	ClearStdWindowAndFrame
	ldrb	r0, [r5, #0xe]
	bl	ClearWindowTilemap
	ldrb	r0, [r5, #0xe]
	bl	RemoveWindow
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	sub	r6, r6, #0x8
	add	r4, r4, r6
	ldr	r0, .L422+0x4
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L423:
	.align	2, 0
.L422:
	.word	gTasks+0x8
	.word	HandleRegistryMenuInput
.Lfe60:
	.size	 ReturnToMainRegistryMenu,.Lfe60-ReturnToMainRegistryMenu
	.align	2, 0
	.type	 GoToSecretBasePCRegisterMenu,function
	.thumb_func
GoToSecretBasePCRegisterMenu:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L427
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L425	@cond_branch
	ldr	r0, .L427+0x4
	bl	ScriptContext1_SetupScript
	b	.L426
.L428:
	.align	2, 0
.L427:
	.word	0x4054
	.word	SecretBase_EventScript_PCCancel
.L425:
	ldr	r0, .L429
	bl	ScriptContext1_SetupScript
.L426:
	add	r0, r4, #0
	bl	DestroyTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L430:
	.align	2, 0
.L429:
	.word	SecretBase_EventScript_ShowRegisterMenu
.Lfe61:
	.size	 GoToSecretBasePCRegisterMenu,.Lfe61-GoToSecretBasePCRegisterMenu
	.align	2, 0
	.type	 GetSecretBaseOwnerType,function
	.thumb_func
GetSecretBaseOwnerType:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L432
	ldr	r4, [r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	add	r4, r4, r1
	ldr	r1, .L432+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	mov	r1, #0x5
	bl	__umodsi3
	ldr	r1, .L432+0x8
	add	r4, r4, r1
	ldrb	r2, [r4]
	lsl	r2, r2, #0x1b
	lsr	r2, r2, #0x1f
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.L433:
	.align	2, 0
.L432:
	.word	gSaveBlock1Ptr
	.word	0x2085
	.word	0x207d
.Lfe62:
	.size	 GetSecretBaseOwnerType,.Lfe62-GetSecretBaseOwnerType
	.align	2, 0
	.globl	GetSecretBaseTrainerLoseText
	.type	 GetSecretBaseTrainerLoseText,function
	.thumb_func
GetSecretBaseTrainerLoseText:
	push	{lr}
	ldr	r0, .L454
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetSecretBaseOwnerType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0
	bne	.L435	@cond_branch
	ldr	r0, .L454+0x4
	b	.L453
.L455:
	.align	2, 0
.L454:
	.word	0x4054
	.word	SecretBase_Text_Trainer0Defeated
.L435:
	cmp	r0, #0x1
	bne	.L437	@cond_branch
	ldr	r0, .L456
	b	.L453
.L457:
	.align	2, 0
.L456:
	.word	SecretBase_Text_Trainer1Defeated
.L437:
	cmp	r0, #0x2
	bne	.L439	@cond_branch
	ldr	r0, .L458
	b	.L453
.L459:
	.align	2, 0
.L458:
	.word	SecretBase_Text_Trainer2Defeated
.L439:
	cmp	r0, #0x3
	bne	.L441	@cond_branch
	ldr	r0, .L460
	b	.L453
.L461:
	.align	2, 0
.L460:
	.word	SecretBase_Text_Trainer3Defeated
.L441:
	cmp	r0, #0x4
	bne	.L443	@cond_branch
	ldr	r0, .L462
	b	.L453
.L463:
	.align	2, 0
.L462:
	.word	SecretBase_Text_Trainer4Defeated
.L443:
	cmp	r0, #0x5
	bne	.L445	@cond_branch
	ldr	r0, .L464
	b	.L453
.L465:
	.align	2, 0
.L464:
	.word	SecretBase_Text_Trainer5Defeated
.L445:
	cmp	r0, #0x6
	bne	.L447	@cond_branch
	ldr	r0, .L466
	b	.L453
.L467:
	.align	2, 0
.L466:
	.word	SecretBase_Text_Trainer6Defeated
.L447:
	cmp	r0, #0x7
	bne	.L449	@cond_branch
	ldr	r0, .L468
	b	.L453
.L469:
	.align	2, 0
.L468:
	.word	SecretBase_Text_Trainer7Defeated
.L449:
	cmp	r1, #0x8
	beq	.L451	@cond_branch
	ldr	r0, .L470
	b	.L453
.L471:
	.align	2, 0
.L470:
	.word	SecretBase_Text_Trainer9Defeated
.L451:
	ldr	r0, .L472
.L453:
	pop	{r1}
	bx	r1
.L473:
	.align	2, 0
.L472:
	.word	SecretBase_Text_Trainer8Defeated
.Lfe63:
	.size	 GetSecretBaseTrainerLoseText,.Lfe63-GetSecretBaseTrainerLoseText
	.align	2, 0
	.globl	PrepSecretBaseBattleFlags
	.type	 PrepSecretBaseBattleFlags,function
	.thumb_func
PrepSecretBaseBattleFlags:
	push	{lr}
	mov	r0, #0x1
	bl	TryGainNewFanFromCounter
	ldr	r1, .L475
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L475+0x4
	ldr	r0, .L475+0x8
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L476:
	.align	2, 0
.L475:
	.word	gTrainerBattleOpponent_A
	.word	gBattleTypeFlags
	.word	0x8000008
.Lfe64:
	.size	 PrepSecretBaseBattleFlags,.Lfe64-PrepSecretBaseBattleFlags
	.align	2, 0
	.globl	SetBattledOwnerFromResult
	.type	 SetBattledOwnerFromResult,function
	.thumb_func
SetBattledOwnerFromResult:
	push	{lr}
	ldr	r0, .L478
	bl	VarGet
	ldr	r1, .L478+0x4
	ldr	r3, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	add	r3, r3, r1
	ldr	r0, .L478+0x8
	ldrb	r0, [r0]
	ldr	r1, .L478+0xc
	add	r3, r3, r1
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x5
	ldrb	r2, [r3]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	pop	{r0}
	bx	r0
.L479:
	.align	2, 0
.L478:
	.word	0x4054
	.word	gSaveBlock1Ptr
	.word	gSpecialVar_Result
	.word	0x207d
.Lfe65:
	.size	 SetBattledOwnerFromResult,.Lfe65-SetBattledOwnerFromResult
	.align	2, 0
	.globl	GetSecretBaseOwnerAndState
	.type	 GetSecretBaseOwnerAndState,function
	.thumb_func
GetSecretBaseOwnerAndState:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L487
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L487+0x4
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L481	@cond_branch
	mov	r3, #0x0
	ldr	r7, .L487+0x8
	ldr	r4, .L487+0xc
	mov	r6, #0x21
	neg	r6, r6
.L485:
	ldr	r1, [r7]
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, r4
	ldrb	r2, [r1]
	add	r0, r6, #0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x4
	bls	.L485	@cond_branch
	ldr	r0, .L487+0x4
	bl	FlagSet
.L481:
	ldr	r4, .L487+0x10
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetSecretBaseOwnerType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	ldr	r2, .L487+0x14
	ldr	r0, .L487+0x8
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldr	r0, .L487+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1f
	strh	r0, [r2]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L488:
	.align	2, 0
.L487:
	.word	0x4054
	.word	0x922
	.word	gSaveBlock1Ptr
	.word	0x207d
	.word	gSpecialVar_0x8004
	.word	gSpecialVar_Result
.Lfe66:
	.size	 GetSecretBaseOwnerAndState,.Lfe66-GetSecretBaseOwnerAndState
	.align	2, 0
	.globl	SecretBasePerStepCallback
	.type	 SecretBasePerStepCallback,function
	.thumb_func
SecretBasePerStepCallback:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L554
	add	r5, r1, r0
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L494	@cond_branch
	cmp	r0, #0x1
	bgt	.L549	@cond_branch
	cmp	r0, #0
	beq	.L491	@cond_branch
	b	.L490
.L555:
	.align	2, 0
.L554:
	.word	gTasks+0x8
.L549:
	cmp	r0, #0x2
	bne	.LCB4502
	b	.L545	@long jump
.LCB4502:
	b	.L490
.L491:
	ldr	r0, .L556
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L492	@cond_branch
	ldr	r1, .L556+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L493
.L557:
	.align	2, 0
.L556:
	.word	0x4054
	.word	sInFriendSecretBase
.L492:
	ldr	r0, .L558
	strb	r1, [r0]
.L493:
	add	r0, r5, #0x4
	add	r1, r5, #0x6
	bl	PlayerGetDestCoords
	b	.L550
.L559:
	.align	2, 0
.L558:
	.word	sInFriendSecretBase
.L494:
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	PlayerGetDestCoords
	mov	r0, sp
	ldrh	r2, [r0]
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	mov	r3, #0x4
	ldrsh	r0, [r5, r3]
	add	r6, r4, #0
	cmp	r1, r0
	bne	.L496	@cond_branch
	mov	r0, #0x0
	ldrsh	r1, [r6, r0]
	mov	r3, #0x6
	ldrsh	r0, [r5, r3]
	cmp	r1, r0
	bne	.LCB4568
	b	.L490	@long jump
.LCB4568:
.L496:
	strh	r2, [r5, #0x4]
	ldrh	r0, [r6]
	strh	r0, [r5, #0x6]
	ldr	r4, .L560
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r6, r2]
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, sp
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	mov	r2, #0x0
	ldrsh	r1, [r6, r2]
	bl	MapGridGetMetatileIdAt
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x8d
	lsl	r0, r0, #0x2
	cmp	r4, r0
	beq	.L498	@cond_branch
	add	r0, r0, #0x8
	cmp	r4, r0
	bne	.L497	@cond_branch
.L498:
	ldr	r0, .L560+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB4620
	b	.L490	@long jump
.LCB4620:
	ldr	r4, .L560+0x8
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x20
	b	.L551
.L561:
	.align	2, 0
.L560:
	.word	0x40ec
	.word	sInFriendSecretBase
	.word	0x40ef
.L497:
	ldr	r3, .L562
	add	r0, r4, r3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bls	.L502	@cond_branch
	mov	r0, #0xb0
	lsl	r0, r0, #0x2
	cmp	r4, r0
	beq	.L502	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	beq	.L502	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	beq	.L502	@cond_branch
	add	r0, r0, #0x6
	cmp	r4, r0
	beq	.L502	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	beq	.L502	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L501	@cond_branch
.L502:
	ldr	r0, .L562+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB4684
	b	.L490	@long jump
.LCB4684:
	ldr	r4, .L562+0x8
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x1
	b	.L551
.L563:
	.align	2, 0
.L562:
	.word	-0x2b8
	.word	sInFriendSecretBase
	.word	0x40ee
.L501:
	ldr	r0, .L564
	cmp	r4, r0
	beq	.L506	@cond_branch
	add	r0, r0, #0x8
	cmp	r4, r0
	beq	.L506	@cond_branch
	add	r0, r0, #0x10
	cmp	r4, r0
	beq	.L506	@cond_branch
	add	r0, r0, #0x8
	cmp	r4, r0
	bne	.L505	@cond_branch
.L506:
	ldr	r0, .L564+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB4729
	b	.L490	@long jump
.LCB4729:
	ldr	r4, .L564+0x8
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x4
	b	.L551
.L565:
	.align	2, 0
.L564:
	.word	0x239
	.word	sInFriendSecretBase
	.word	0x40ee
.L505:
	cmp	r5, #0x34
	bne	.L511	@cond_branch
	ldr	r0, .L566
	cmp	r4, r0
	beq	.L510	@cond_branch
.L511:
	cmp	r5, #0x35
	bne	.L509	@cond_branch
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r6, r2]
	bl	MapGridGetMetatileIdAt
	ldr	r1, .L566+0x4
	cmp	r0, r1
	bne	.L509	@cond_branch
.L510:
	ldr	r0, .L566+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB4774
	b	.L490	@long jump
.LCB4774:
	ldr	r4, .L566+0xc
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	add	r0, r3, #0
	b	.L551
.L567:
	.align	2, 0
.L566:
	.word	0x26d
	.word	0x26a
	.word	sInFriendSecretBase
	.word	0x40ef
.L509:
	cmp	r5, #0xc1
	bne	.L514	@cond_branch
	ldr	r0, .L568
	cmp	r4, r0
	bne	.L514	@cond_branch
	ldr	r0, .L568+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB4808
	b	.L490	@long jump
.LCB4808:
	ldr	r4, .L568+0x8
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r3, #0x80
	lsl	r3, r3, #0x6
	add	r0, r3, #0
	b	.L551
.L569:
	.align	2, 0
.L568:
	.word	0x23d
	.word	sInFriendSecretBase
	.word	0x40ef
.L514:
	cmp	r5, #0x47
	bne	.L517	@cond_branch
	ldr	r0, .L570
	cmp	r4, r0
	bne	.L517	@cond_branch
	ldr	r0, .L570+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB4854
	b	.L490	@long jump
.LCB4854:
	ldr	r4, .L570+0x8
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r3, #0x80
	lsl	r3, r3, #0x6
	add	r0, r3, #0
	eor	r1, r1, r0
	b	.L552
.L571:
	.align	2, 0
.L570:
	.word	0x23e
	.word	sInFriendSecretBase
	.word	0x40ef
.L517:
	add	r0, r5, #0
	bl	MetatileBehavior_IsSecretBaseGlitterMat
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L520	@cond_branch
	ldr	r0, .L572
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB4901
	b	.L490	@long jump
.LCB4901:
	ldr	r4, .L572+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x80
	b	.L551
.L573:
	.align	2, 0
.L572:
	.word	sInFriendSecretBase
	.word	0x40ef
.L520:
	add	r0, r5, #0
	bl	MetatileBehavior_IsSecretBaseBalloon
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L523	@cond_branch
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r6, r2]
	bl	MapGridGetMetatileIdAt
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, sp
	mov	r3, #0x0
	ldrsh	r1, [r1, r3]
	mov	r3, #0x0
	ldrsh	r2, [r6, r3]
	bl	PopSecretBaseBalloon
	ldr	r0, .L574
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB4948
	b	.L490	@long jump
.LCB4948:
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r6, r2]
	bl	MapGridGetMetatileIdAt
	add	r1, r0, #0
	mov	r0, #0xce
	lsl	r0, r0, #0x2
	cmp	r1, r0
	beq	.L528	@cond_branch
	cmp	r1, r0
	bgt	.L532	@cond_branch
	mov	r0, #0x8a
	lsl	r0, r0, #0x2
	cmp	r1, r0
	beq	.L529	@cond_branch
	b	.L490
.L575:
	.align	2, 0
.L574:
	.word	sInFriendSecretBase
.L532:
	mov	r0, #0xcf
	lsl	r0, r0, #0x2
	cmp	r1, r0
	beq	.L528	@cond_branch
	add	r0, r0, #0x4
	cmp	r1, r0
	beq	.LCB4982
	b	.L490	@long jump
.LCB4982:
.L528:
	ldr	r4, .L576
	b	.L553
.L577:
	.align	2, 0
.L576:
	.word	0x40ee
.L529:
	ldr	r4, .L578
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	b	.L551
.L579:
	.align	2, 0
.L578:
	.word	0x40ee
.L523:
	add	r0, r5, #0
	bl	MetatileBehavior_IsSecretBaseBreakableDoor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L534	@cond_branch
	ldr	r0, .L580
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L535	@cond_branch
	ldr	r4, .L580+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
.L535:
	mov	r0, sp
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	mov	r2, #0x0
	ldrsh	r1, [r6, r2]
	bl	ShatterSecretBaseBreakableDoor
	b	.L490
.L581:
	.align	2, 0
.L580:
	.word	sInFriendSecretBase
	.word	0x40ef
.L534:
	add	r0, r5, #0
	bl	MetatileBehavior_IsSecretBaseSoundMat
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L537	@cond_branch
	ldr	r0, .L582
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L490	@cond_branch
	ldr	r4, .L582+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r3, #0x80
	lsl	r3, r3, #0x8
	add	r0, r3, #0
	b	.L551
.L583:
	.align	2, 0
.L582:
	.word	sInFriendSecretBase
	.word	0x40ee
.L537:
	add	r0, r5, #0
	bl	MetatileBehavior_IsSecretBaseJumpMat
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L540	@cond_branch
	ldr	r0, .L584
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L490	@cond_branch
	ldr	r4, .L584+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x7
	add	r0, r2, #0
	b	.L551
.L585:
	.align	2, 0
.L584:
	.word	sInFriendSecretBase
	.word	0x40ef
.L540:
	add	r0, r5, #0
	bl	MetatileBehavior_IsSecretBaseSpinMat
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L490	@cond_branch
	ldr	r0, .L586
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L490	@cond_branch
	ldr	r4, .L586+0x4
.L553:
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x2
.L551:
	orr	r1, r1, r0
.L552:
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
	b	.L490
.L587:
	.align	2, 0
.L586:
	.word	sInFriendSecretBase
	.word	0x40ef
.L545:
	ldrb	r0, [r5, #0x8]
	bl	FieldEffectActiveListContains
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L490	@cond_branch
.L550:
	mov	r0, #0x1
	strh	r0, [r5, #0x2]
.L490:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 SecretBasePerStepCallback,.Lfe67-SecretBasePerStepCallback
	.align	2, 0
	.type	 SetSecretBaseDataAndLanguage,function
	.thumb_func
SetSecretBaseDataAndLanguage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r2, #0
	mov	r8, r3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L598
	ldr	r0, [r6]
	lsl	r2, r5, #0x2
	add	r2, r2, r5
	lsl	r4, r2, #0x5
	add	r0, r0, r4
	ldr	r2, .L598+0x4
	mov	r9, r2
	add	r0, r0, r9
	mov	r2, #0xa0
	bl	memcpy
	ldr	r2, [r6]
	add	r2, r2, r4
	ldr	r0, .L598+0x8
	add	r2, r2, r0
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	sub	r0, r7, #0x1
	cmp	r0, #0x1
	bhi	.L589	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r4
	ldr	r1, .L598+0xc
	add	r0, r0, r1
	mov	r1, #0x2
	strb	r1, [r0]
.L589:
	cmp	r7, #0x3
	bne	.L590	@cond_branch
	mov	r2, r8
	cmp	r2, #0x1
	bne	.L590	@cond_branch
	mov	r1, r9
	add	r0, r4, r1
	ldr	r1, [r6]
	add	r1, r1, r0
	add	r2, r1, #0x2
	mov	r3, #0x0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0xff
	beq	.L592	@cond_branch
.L593:
	add	r3, r3, #0x1
	cmp	r3, #0x6
	bgt	.L592	@cond_branch
	add	r0, r2, r3
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L593	@cond_branch
.L592:
	cmp	r3, #0x5
	ble	.L590	@cond_branch
	ldr	r0, .L598
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldr	r2, .L598+0xc
	add	r1, r1, r2
	mov	r0, #0x2
	strb	r0, [r1]
.L590:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L599:
	.align	2, 0
.L598:
	.word	gSaveBlock1Ptr
	.word	0x207c
	.word	0x207d
	.word	0x2089
.Lfe68:
	.size	 SetSecretBaseDataAndLanguage,.Lfe68-SetSecretBaseDataAndLanguage
	.align	2, 0
	.type	 SecretBasesHaveSameTrainerId,function
	.thumb_func
SecretBasesHaveSameTrainerId:
	push	{r4, lr}
	mov	r2, #0x0
	add	r4, r0, #0
	add	r4, r4, #0x9
	add	r3, r1, #0
	add	r3, r3, #0x9
.L604:
	add	r0, r4, r2
	add	r1, r3, r2
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L603	@cond_branch
	mov	r0, #0x0
	b	.L607
.L603:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L604	@cond_branch
	mov	r0, #0x1
.L607:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe69:
	.size	 SecretBasesHaveSameTrainerId,.Lfe69-SecretBasesHaveSameTrainerId
	.align	2, 0
	.type	 SecretBasesHaveSameTrainerName,function
	.thumb_func
SecretBasesHaveSameTrainerName:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	mov	r3, #0x0
	ldrb	r0, [r6, #0x2]
	cmp	r0, #0xff
	bne	.L612	@cond_branch
	ldrb	r0, [r5, #0x2]
	cmp	r0, #0xff
	beq	.L610	@cond_branch
.L612:
	add	r2, r6, #0x2
	add	r0, r2, r3
	add	r4, r5, #0x2
	add	r1, r4, r3
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L611	@cond_branch
	mov	r0, #0x0
	b	.L616
.L611:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x6
	bhi	.L610	@cond_branch
	add	r0, r2, r3
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L612	@cond_branch
	add	r0, r4, r3
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L612	@cond_branch
.L610:
	mov	r0, #0x1
.L616:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe70:
	.size	 SecretBasesHaveSameTrainerName,.Lfe70-SecretBasesHaveSameTrainerName
	.align	2, 0
	.type	 SecretBasesBelongToSamePlayer,function
	.thumb_func
SecretBasesBelongToSamePlayer:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldrb	r2, [r4, #0x1]
	mov	r0, #0x10
	add	r1, r0, #0
	and	r1, r1, r2
	ldrb	r2, [r5, #0x1]
	and	r0, r0, r2
	cmp	r1, r0
	bne	.L618	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	bl	SecretBasesHaveSameTrainerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L618	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	bl	SecretBasesHaveSameTrainerName
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L618	@cond_branch
	mov	r0, #0x1
	b	.L619
.L618:
	mov	r0, #0x0
.L619:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe71:
	.size	 SecretBasesBelongToSamePlayer,.Lfe71-SecretBasesBelongToSamePlayer
	.align	2, 0
	.type	 GetSecretBaseIndexFromId,function
	.thumb_func
GetSecretBaseIndexFromId:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r1, #0x0
	ldr	r0, .L628
	ldr	r2, [r0]
	ldr	r4, .L628+0x4
.L624:
	lsl	r0, r1, #0x10
	asr	r1, r0, #0x10
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x5
	add	r0, r2, r0
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, r3
	bne	.L623	@cond_branch
	add	r0, r1, #0
	b	.L627
.L629:
	.align	2, 0
.L628:
	.word	gSaveBlock1Ptr
	.word	0x207c
.L623:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L624	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
.L627:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe72:
	.size	 GetSecretBaseIndexFromId,.Lfe72-GetSecretBaseIndexFromId
	.align	2, 0
	.type	 FindAvailableSecretBaseIndex,function
	.thumb_func
FindAvailableSecretBaseIndex:
	push	{r4, lr}
	mov	r2, #0x1
	ldr	r0, .L638
	ldr	r3, [r0]
	ldr	r4, .L638+0x4
.L634:
	lsl	r0, r2, #0x10
	asr	r1, r0, #0x10
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x5
	add	r0, r3, r0
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L633	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	b	.L637
.L639:
	.align	2, 0
.L638:
	.word	gSaveBlock1Ptr
	.word	0x207c
.L633:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L634	@cond_branch
	mov	r0, #0x0
.L637:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe73:
	.size	 FindAvailableSecretBaseIndex,.Lfe73-FindAvailableSecretBaseIndex
	.align	2, 0
	.type	 sub_80EAA18,function
	.thumb_func
sub_80EAA18:
	push	{r4, lr}
	mov	r3, #0x1
	ldr	r0, .L648
	ldr	r4, [r0]
.L644:
	lsl	r2, r3, #0x10
	asr	r1, r2, #0x10
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x5
	add	r0, r4, r0
	ldr	r1, .L648+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsr	r0, r1, #0x6
	cmp	r0, #0
	bne	.L643	@cond_branch
	lsl	r0, r1, #0x1c
	cmp	r0, #0
	bne	.L643	@cond_branch
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	b	.L647
.L649:
	.align	2, 0
.L648:
	.word	gSaveBlock1Ptr
	.word	0x207d
.L643:
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r2, r1
	lsr	r3, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L644	@cond_branch
	mov	r0, #0x0
.L647:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe74:
	.size	 sub_80EAA18,.Lfe74-sub_80EAA18
	.align	2, 0
	.type	 sub_80EAA64,function
	.thumb_func
sub_80EAA64:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	add	r7, r2, #0
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L652	@cond_branch
	ldrb	r0, [r5]
	bl	GetSecretBaseIndexFromId
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	beq	.L652	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r2, r0
	beq	.L653	@cond_branch
	ldr	r0, .L662
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldr	r0, .L662+0x4
	add	r1, r1, r0
	ldrb	r1, [r1]
	lsl	r0, r1, #0x1c
	lsr	r0, r0, #0x1c
	cmp	r0, #0x1
	beq	.L652	@cond_branch
	lsr	r0, r1, #0x6
	cmp	r0, #0x2
	bne	.L656	@cond_branch
	ldrb	r1, [r5, #0x1]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L652	@cond_branch
.L656:
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	b	.L661
.L663:
	.align	2, 0
.L662:
	.word	gSaveBlock1Ptr
	.word	0x207d
.L653:
	bl	FindAvailableSecretBaseIndex
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L661	@cond_branch
	bl	sub_80EAA18
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L652	@cond_branch
.L661:
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	add	r3, r7, #0
	bl	SetSecretBaseDataAndLanguage
	add	r0, r4, #0
	b	.L660
.L652:
	mov	r0, #0x0
.L660:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe75:
	.size	 sub_80EAA64,.Lfe75-sub_80EAA64
	.align	2, 0
	.type	 SortSecretBasesByRegistryStatus,function
	.thumb_func
SortSecretBasesByRegistryStatus:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0xa0
	ldr	r0, .L678
	ldr	r0, [r0]
	ldr	r1, .L678+0x4
	add	r7, r0, r1
	mov	r2, #0x1
.L668:
	add	r1, r2, #0x1
	lsl	r0, r1, #0x18
	lsr	r5, r0, #0x18
	mov	r9, r1
	cmp	r5, #0x4
	bhi	.L667	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x5
	add	r6, r0, r7
	mov	r0, #0xc0
	mov	r8, r0
.L672:
	ldrb	r0, [r6, #0x1]
	mov	r3, r8
	and	r3, r3, r0
	cmp	r3, #0
	bne	.L675	@cond_branch
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x5
	add	r0, r0, r7
	ldrb	r1, [r0, #0x1]
	mov	r0, r8
	and	r0, r0, r1
	add	r4, r2, #0
	cmp	r0, #0x40
	beq	.L674	@cond_branch
.L675:
	cmp	r3, #0x80
	bne	.L671	@cond_branch
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x5
	add	r0, r0, r7
	ldrb	r1, [r0, #0x1]
	mov	r0, r8
	and	r0, r0, r1
	add	r4, r2, #0
	cmp	r0, #0x80
	beq	.L671	@cond_branch
.L674:
	mov	r0, sp
	add	r1, r6, #0
	mov	r2, #0xa0
	bl	memcpy
	add	r4, r4, r5
	lsl	r4, r4, #0x5
	add	r4, r4, r7
	add	r0, r6, #0
	add	r1, r4, #0
	mov	r2, #0xa0
	bl	memcpy
	add	r0, r4, #0
	mov	r1, sp
	mov	r2, #0xa0
	bl	memcpy
.L671:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bls	.L672	@cond_branch
.L667:
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x12
	bls	.L668	@cond_branch
	add	sp, sp, #0xa0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L679:
	.align	2, 0
.L678:
	.word	gSaveBlock1Ptr
	.word	0x207c
.Lfe76:
	.size	 SortSecretBasesByRegistryStatus,.Lfe76-SortSecretBasesByRegistryStatus
	.align	2, 0
	.globl	sub_80EABA4
	.type	 sub_80EABA4,function
	.thumb_func
sub_80EABA4:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r4, #0x1
.L684:
	ldr	r0, [r5]
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	add	r3, r1, r0
	ldrb	r0, [r3, #0x1]
	lsr	r0, r0, #0x6
	cmp	r0, r6
	bne	.L683	@cond_branch
	ldr	r1, [r5, #0x4]
	ldr	r2, [r5, #0x8]
	add	r0, r3, #0
	bl	sub_80EAA64
.L683:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x4
	bls	.L684	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe77:
	.size	 sub_80EABA4,.Lfe77-sub_80EABA4
	.align	2, 0
	.globl	SecretBaseBelongsToPlayer
	.type	 SecretBaseBelongsToPlayer,function
	.thumb_func
SecretBaseBelongsToPlayer:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L706	@cond_branch
	ldrb	r0, [r5, #0x1]
	lsl	r0, r0, #0x1b
	ldr	r1, .L709
	ldr	r3, [r1]
	lsr	r0, r0, #0x1f
	add	r6, r1, #0
	ldrb	r1, [r3, #0x8]
	cmp	r0, r1
	beq	.L689	@cond_branch
.L705:
.L706:
	mov	r0, #0x0
	b	.L703
.L710:
	.align	2, 0
.L709:
	.word	gSaveBlock2Ptr
.L689:
	mov	r2, #0x0
	add	r4, r5, #0
	add	r4, r4, #0x9
	add	r3, r3, #0xa
.L693:
	add	r0, r4, r2
	add	r1, r3, r2
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L705	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L693	@cond_branch
	mov	r2, #0x0
	ldrb	r0, [r5, #0x2]
	cmp	r0, #0xff
	bne	.L699	@cond_branch
	ldr	r0, [r6]
	b	.L708
.L699:
	add	r3, r5, #0x2
	add	r0, r3, r2
	ldr	r4, [r6]
	add	r1, r4, r2
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L706	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x6
	bhi	.L697	@cond_branch
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L699	@cond_branch
	add	r0, r4, r2
.L708:
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L699	@cond_branch
.L697:
	mov	r0, #0x1
.L703:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe78:
	.size	 SecretBaseBelongsToPlayer,.Lfe78-SecretBaseBelongsToPlayer
	.align	2, 0
	.globl	DeleteFirstOldBaseFromPlayerInRecordMixingFriendsRecords
	.type	 DeleteFirstOldBaseFromPlayerInRecordMixingFriendsRecords,function
	.thumb_func
DeleteFirstOldBaseFromPlayerInRecordMixingFriendsRecords:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r0
	mov	r9, r1
	mov	r8, r2
	mov	r5, #0x0
	mov	r6, #0x0
.L715:
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L716	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x5
	mov	r1, sl
	add	r4, r1, r0
	add	r0, r4, #0
	bl	SecretBaseBelongsToPlayer
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L716	@cond_branch
	add	r0, r4, #0
	bl	ClearSecretBase
	mov	r0, #0x1
	orr	r5, r5, r0
.L716:
	mov	r7, #0x2
	mov	r0, #0x2
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L718	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x5
	mov	r1, r9
	add	r4, r1, r0
	add	r0, r4, #0
	bl	SecretBaseBelongsToPlayer
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L718	@cond_branch
	add	r0, r4, #0
	bl	ClearSecretBase
	orr	r5, r5, r7
	lsl	r0, r5, #0x18
	lsr	r5, r0, #0x18
.L718:
	mov	r7, #0x4
	mov	r0, #0x4
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L720	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	bl	SecretBaseBelongsToPlayer
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L720	@cond_branch
	add	r0, r4, #0
	bl	ClearSecretBase
	orr	r5, r5, r7
	lsl	r0, r5, #0x18
	lsr	r5, r0, #0x18
.L720:
	cmp	r5, #0x7
	beq	.L713	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x4
	bls	.L715	@cond_branch
.L713:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe79:
	.size	 DeleteFirstOldBaseFromPlayerInRecordMixingFriendsRecords,.Lfe79-DeleteFirstOldBaseFromPlayerInRecordMixingFriendsRecords
	.align	2, 0
	.type	 ClearDuplicateOwnedSecretBases,function
	.thumb_func
ClearDuplicateOwnedSecretBases:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	mov	r5, #0x0
.L728:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	mov	r1, r8
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L727	@cond_branch
	add	r0, r6, #0
	add	r1, r4, #0
	bl	SecretBasesBelongToSamePlayer
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L727	@cond_branch
	cmp	r7, #0
	bne	.L731	@cond_branch
	add	r0, r4, #0
	bl	ClearSecretBase
	b	.L735
.L731:
	ldrh	r0, [r6, #0xe]
	ldrh	r3, [r4, #0xe]
	cmp	r0, r3
	bls	.L732	@cond_branch
	add	r0, r4, #0
	bl	ClearSecretBase
	b	.L735
.L732:
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	ldrb	r1, [r4, #0x1]
	mov	r3, #0x10
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
	add	r0, r6, #0
	bl	ClearSecretBase
	mov	r0, #0x1
	b	.L734
.L727:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bls	.L728	@cond_branch
.L735:
	mov	r0, #0x0
.L734:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe80:
	.size	 ClearDuplicateOwnedSecretBases,.Lfe80-ClearDuplicateOwnedSecretBases
	.align	2, 0
	.globl	sub_80EAD94
	.type	 sub_80EAD94,function
	.thumb_func
sub_80EAD94:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r0
	add	r7, r1, #0
	mov	r8, r2
	add	r6, r3, #0
	mov	r5, #0x1
.L740:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	mov	r1, r9
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L739	@cond_branch
	ldrb	r1, [r4, #0x1]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x40
	bne	.L742	@cond_branch
	mov	r2, #0x10
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
.L742:
	add	r0, r4, #0
	add	r1, r7, #0
	add	r2, r5, #0
	bl	ClearDuplicateOwnedSecretBases
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L739	@cond_branch
	add	r0, r4, #0
	mov	r1, r8
	add	r2, r5, #0
	bl	ClearDuplicateOwnedSecretBases
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L739	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	ClearDuplicateOwnedSecretBases
.L739:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bls	.L740	@cond_branch
	mov	r5, #0x0
.L749:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	add	r4, r0, r7
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L748	@cond_branch
	ldrb	r0, [r4, #0x1]
	mov	r2, #0x21
	neg	r2, r2
	add	r1, r2, #0
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	add	r0, r4, #0
	mov	r1, r8
	add	r2, r5, #0
	bl	ClearDuplicateOwnedSecretBases
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L748	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	ClearDuplicateOwnedSecretBases
.L748:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bls	.L749	@cond_branch
	mov	r5, #0x0
	mov	r0, #0x21
	neg	r0, r0
	add	r7, r0, #0
.L756:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r4, r0, #0x5
	mov	r2, r8
	add	r1, r4, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L757	@cond_branch
	ldrb	r0, [r1, #0x1]
	and	r0, r0, r7
	strb	r0, [r1, #0x1]
	add	r0, r1, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	ClearDuplicateOwnedSecretBases
.L757:
	add	r1, r4, r6
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L755	@cond_branch
	ldrb	r0, [r1, #0x1]
	and	r0, r0, r7
	strb	r0, [r1, #0x1]
.L755:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bls	.L756	@cond_branch
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 sub_80EAD94,.Lfe81-sub_80EAD94
	.align	2, 0
	.globl	sub_80EAE90
	.type	 sub_80EAE90,function
	.thumb_func
sub_80EAE90:
	push	{r4, lr}
	add	r4, r0, #0
	add	r3, r1, #0
	ldrb	r1, [r4, #0x1]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L761	@cond_branch
	add	r0, r4, #0
	add	r1, r3, #0
	bl	sub_80EAA64
	add	r0, r4, #0
	bl	ClearSecretBase
.L761:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 sub_80EAE90,.Lfe82-sub_80EAE90
	.align	2, 0
	.globl	sub_80EAEB4
	.type	 sub_80EAEB4,function
	.thumb_func
sub_80EAEB4:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r6, #0x0
.L766:
	lsl	r4, r6, #0x2
	add	r4, r4, r6
	lsl	r4, r4, #0x5
	ldr	r0, [r5]
	add	r0, r0, r4
	ldr	r1, [r5, #0x4]
	ldr	r2, [r5, #0x8]
	bl	sub_80EAE90
	ldr	r0, [r5, #0xc]
	add	r0, r0, r4
	ldr	r1, [r5, #0x10]
	ldr	r2, [r5, #0x14]
	bl	sub_80EAE90
	ldr	r0, [r5, #0x18]
	add	r0, r0, r4
	ldr	r1, [r5, #0x1c]
	ldr	r2, [r5, #0x20]
	bl	sub_80EAE90
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x4
	bls	.L766	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 sub_80EAEB4,.Lfe83-sub_80EAEB4
	.align	2, 0
	.globl	sub_80EAEF4
	.type	 sub_80EAEF4,function
	.thumb_func
sub_80EAEF4:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r0, [r4]
	ldr	r1, [r4, #0xc]
	ldr	r2, [r4, #0x18]
	bl	DeleteFirstOldBaseFromPlayerInRecordMixingFriendsRecords
	ldr	r0, .L769
	ldr	r0, [r0]
	ldr	r1, .L769+0x4
	add	r0, r0, r1
	ldr	r1, [r4]
	ldr	r2, [r4, #0xc]
	ldr	r3, [r4, #0x18]
	bl	sub_80EAD94
	add	r0, r4, #0
	bl	sub_80EAEB4
	ldr	r0, [r4]
	ldr	r1, [r4, #0x4]
	ldr	r2, [r4, #0x8]
	bl	sub_80EAA64
	ldr	r0, [r4, #0xc]
	ldr	r1, [r4, #0x10]
	ldr	r2, [r4, #0x14]
	bl	sub_80EAA64
	ldr	r0, [r4, #0x18]
	ldr	r1, [r4, #0x1c]
	ldr	r2, [r4, #0x20]
	bl	sub_80EAA64
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_80EABA4
	add	r6, r4, #0
	add	r6, r6, #0xc
	add	r0, r6, #0
	mov	r1, #0x1
	bl	sub_80EABA4
	add	r5, r4, #0
	add	r5, r5, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	sub_80EABA4
	add	r0, r4, #0
	mov	r1, #0x0
	bl	sub_80EABA4
	add	r0, r6, #0
	mov	r1, #0x0
	bl	sub_80EABA4
	add	r0, r5, #0
	mov	r1, #0x0
	bl	sub_80EABA4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L770:
	.align	2, 0
.L769:
	.word	gSaveBlock1Ptr
	.word	0x207c
.Lfe84:
	.size	 sub_80EAEF4,.Lfe84-sub_80EAEF4
	.align	2, 0
	.globl	ReceiveSecretBasesData
	.type	 ReceiveSecretBasesData,function
	.thumb_func
ReceiveSecretBasesData:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x24
	add	r6, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	mov	r0, #0x60
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB6639
	b	.L772	@long jump
.LCB6639:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	beq	.L774	@cond_branch
	cmp	r0, #0x3
	beq	.L775	@cond_branch
	b	.L773
.L774:
	lsl	r4, r5, #0x1
	add	r0, r6, r4
	mov	r1, #0x0
	add	r2, r5, #0
	bl	memset
	add	r4, r4, r5
	add	r4, r6, r4
	add	r0, r4, #0
	mov	r1, #0x0
	add	r2, r5, #0
	bl	memset
	b	.L773
.L775:
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	add	r0, r6, r0
	mov	r1, #0x0
	add	r2, r5, #0
	bl	memset
.L773:
	cmp	r7, #0x1
	beq	.L780	@cond_branch
	cmp	r7, #0x1
	bgt	.L785	@cond_branch
	cmp	r7, #0
	beq	.L779	@cond_branch
	b	.L778
.L785:
	cmp	r7, #0x2
	beq	.L781	@cond_branch
	cmp	r7, #0x3
	beq	.L782	@cond_branch
	b	.L778
.L779:
	add	r0, r6, r5
	str	r0, [sp]
	ldr	r4, .L800
	mov	r3, #0xff
	ldrb	r0, [r4, #0x1c]
	str	r0, [sp, #0x4]
	ldrh	r0, [r4, #0x36]
	str	r0, [sp, #0x8]
	lsl	r1, r5, #0x1
	add	r0, r6, r1
	str	r0, [sp, #0xc]
	ldrh	r2, [r4, #0x38]
	add	r0, r3, #0
	and	r0, r0, r2
	str	r0, [sp, #0x10]
	add	r0, r4, #0
	add	r0, r0, #0x52
	ldrh	r0, [r0]
	str	r0, [sp, #0x14]
	add	r1, r1, r5
	add	r1, r6, r1
	str	r1, [sp, #0x18]
	add	r0, r4, #0
	add	r0, r0, #0x54
	ldrh	r0, [r0]
	and	r3, r3, r0
	str	r3, [sp, #0x1c]
	add	r0, r4, #0
	add	r0, r0, #0x6e
	ldrh	r0, [r0]
	b	.L799
.L801:
	.align	2, 0
.L800:
	.word	gLinkPlayers
.L780:
	lsl	r2, r5, #0x1
	add	r0, r6, r2
	str	r0, [sp]
	ldr	r4, .L802
	ldrh	r3, [r4, #0x38]
	mov	r1, #0xff
	add	r0, r1, #0
	and	r0, r0, r3
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	add	r0, r0, #0x52
	ldrh	r0, [r0]
	str	r0, [sp, #0x8]
	add	r2, r2, r5
	add	r2, r6, r2
	str	r2, [sp, #0xc]
	add	r0, r4, #0
	add	r0, r0, #0x54
	ldrh	r2, [r0]
	add	r0, r1, #0
	and	r0, r0, r2
	str	r0, [sp, #0x10]
	add	r0, r4, #0
	add	r0, r0, #0x6e
	ldrh	r0, [r0]
	str	r0, [sp, #0x14]
	str	r6, [sp, #0x18]
	ldrh	r0, [r4]
	and	r1, r1, r0
	str	r1, [sp, #0x1c]
	ldrh	r0, [r4, #0x1a]
	b	.L799
.L803:
	.align	2, 0
.L802:
	.word	gLinkPlayers
.L781:
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	add	r0, r6, r0
	str	r0, [sp]
	ldr	r1, .L804
	add	r0, r1, #0
	add	r0, r0, #0x54
	ldrb	r0, [r0]
	str	r0, [sp, #0x4]
	add	r0, r1, #0
	add	r0, r0, #0x6e
	ldrh	r0, [r0]
	str	r0, [sp, #0x8]
	str	r6, [sp, #0xc]
	ldrb	r0, [r1]
	str	r0, [sp, #0x10]
	ldrh	r0, [r1, #0x1a]
	str	r0, [sp, #0x14]
	add	r0, r6, r5
	str	r0, [sp, #0x18]
	ldrb	r0, [r1, #0x1c]
	str	r0, [sp, #0x1c]
	ldrh	r0, [r1, #0x36]
	b	.L799
.L805:
	.align	2, 0
.L804:
	.word	gLinkPlayers
.L782:
	str	r6, [sp]
	ldr	r1, .L806
	ldrb	r0, [r1]
	str	r0, [sp, #0x4]
	ldrh	r0, [r1, #0x1a]
	str	r0, [sp, #0x8]
	add	r0, r6, r5
	str	r0, [sp, #0xc]
	mov	r2, #0xff
	ldrb	r0, [r1, #0x1c]
	str	r0, [sp, #0x10]
	ldrh	r0, [r1, #0x36]
	str	r0, [sp, #0x14]
	lsl	r0, r5, #0x1
	add	r0, r6, r0
	str	r0, [sp, #0x18]
	ldrh	r0, [r1, #0x38]
	and	r2, r2, r0
	str	r2, [sp, #0x1c]
	add	r1, r1, #0x52
	ldrh	r0, [r1]
.L799:
	str	r0, [sp, #0x20]
.L778:
	mov	r0, sp
	bl	sub_80EAEF4
	mov	r3, #0x1
	ldr	r6, .L806+0x4
	mov	r7, #0x10
	neg	r7, r7
.L789:
	ldr	r0, [r6]
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r4, r1, #0x5
	add	r0, r0, r4
	ldr	r5, .L806+0x8
	add	r2, r0, r5
	ldrb	r1, [r2]
	lsl	r0, r1, #0x1c
	lsr	r0, r0, #0x1c
	cmp	r0, #0x1
	bne	.L788	@cond_branch
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r6]
	add	r1, r1, r4
	add	r1, r1, r5
	ldrb	r2, [r1]
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1]
.L788:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x4
	bls	.L789	@cond_branch
	bl	SortSecretBasesByRegistryStatus
	mov	r3, #0x1
	ldr	r7, .L806+0x4
	add	r6, r7, #0
	add	r4, r5, #0
	mov	r5, #0x3f
.L795:
	ldr	r0, [r6]
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	add	r2, r0, r4
	ldrb	r1, [r2]
	lsr	r0, r1, #0x6
	cmp	r0, #0x2
	bne	.L794	@cond_branch
	add	r0, r5, #0
	and	r0, r0, r1
	strb	r0, [r2]
.L794:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x4
	bls	.L795	@cond_branch
	ldr	r1, [r7]
	ldr	r2, .L806+0xc
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L772	@cond_branch
	ldr	r0, .L806+0x10
	add	r2, r1, r0
	ldrh	r1, [r2]
	ldr	r0, .L806+0x14
	cmp	r1, r0
	beq	.L772	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r2]
.L772:
	add	sp, sp, #0x24
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L807:
	.align	2, 0
.L806:
	.word	gLinkPlayers
	.word	gSaveBlock1Ptr
	.word	0x207d
	.word	0x207c
	.word	0x208a
	.word	0xffff
.Lfe85:
	.size	 ReceiveSecretBasesData,.Lfe85-ReceiveSecretBasesData
	.align	2, 0
	.globl	ClearJapaneseSecretBases
	.type	 ClearJapaneseSecretBases,function
	.thumb_func
ClearJapaneseSecretBases:
	push	{r4, r5, lr}
	mov	r5, #0x0
	add	r4, r0, #0
.L812:
	ldrb	r0, [r4, #0xd]
	cmp	r0, #0x1
	bne	.L811	@cond_branch
	add	r0, r4, #0
	bl	ClearSecretBase
.L811:
	add	r4, r4, #0xa0
	add	r5, r5, #0x1
	cmp	r5, #0x4
	bls	.L812	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 ClearJapaneseSecretBases,.Lfe86-ClearJapaneseSecretBases
	.align	2, 0
	.globl	InitSecretBaseVars
	.type	 InitSecretBaseVars,function
	.thumb_func
InitSecretBaseVars:
	push	{lr}
	ldr	r0, .L818
	mov	r1, #0x0
	bl	VarSet
	ldr	r0, .L818+0x4
	mov	r1, #0x0
	bl	VarSet
	ldr	r0, .L818+0x8
	mov	r1, #0x0
	bl	VarSet
	ldr	r0, .L818+0xc
	mov	r1, #0x0
	bl	VarSet
	ldr	r0, .L818+0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L816	@cond_branch
	ldr	r0, .L818+0x14
	mov	r1, #0x1
	bl	VarSet
	b	.L817
.L819:
	.align	2, 0
.L818:
	.word	0x40ec
	.word	0x40ed
	.word	0x40ee
	.word	0x40ef
	.word	0x4054
	.word	0x40f0
.L816:
	ldr	r0, .L820
	mov	r1, #0x0
	bl	VarSet
.L817:
	ldr	r1, .L820+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L821:
	.align	2, 0
.L820:
	.word	0x40f0
	.word	sInFriendSecretBase
.Lfe87:
	.size	 InitSecretBaseVars,.Lfe87-InitSecretBaseVars
	.align	2, 0
	.globl	CheckLeftFriendsSecretBase
	.type	 CheckLeftFriendsSecretBase,function
	.thumb_func
CheckLeftFriendsSecretBase:
	push	{r4, r5, r6, lr}
	ldr	r5, .L824
	add	r0, r5, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L823	@cond_branch
	ldr	r6, .L824+0x4
	ldrb	r0, [r6]
	cmp	r0, #0x1
	bne	.L823	@cond_branch
	bl	CurMapIsSecretBase
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L823	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	VarSet
	strb	r4, [r6]
	bl	TryPutSecretBaseSecretsOnAir
	ldr	r0, .L824+0x8
	mov	r1, #0x0
	bl	VarSet
	ldr	r0, .L824+0xc
	mov	r1, #0x0
	bl	VarSet
	ldr	r0, .L824+0x10
	mov	r1, #0x0
	bl	VarSet
	ldr	r0, .L824+0x14
	mov	r1, #0x0
	bl	VarSet
	add	r0, r5, #0
	mov	r1, #0x0
	bl	VarSet
.L823:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L825:
	.align	2, 0
.L824:
	.word	0x40f0
	.word	sInFriendSecretBase
	.word	0x40ec
	.word	0x40ed
	.word	0x40ee
	.word	0x40ef
.Lfe88:
	.size	 CheckLeftFriendsSecretBase,.Lfe88-CheckLeftFriendsSecretBase
	.align	2, 0
	.globl	CheckInteractedWithFriendsDollDecor
	.type	 CheckInteractedWithFriendsDollDecor,function
	.thumb_func
CheckInteractedWithFriendsDollDecor:
	push	{r4, lr}
	ldr	r0, .L828
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L827	@cond_branch
	ldr	r4, .L828+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
.L827:
	pop	{r4}
	pop	{r0}
	bx	r0
.L829:
	.align	2, 0
.L828:
	.word	0x4054
	.word	0x40ef
.Lfe89:
	.size	 CheckInteractedWithFriendsDollDecor,.Lfe89-CheckInteractedWithFriendsDollDecor
	.align	2, 0
	.globl	CheckInteractedWithFriendsCushionDecor
	.type	 CheckInteractedWithFriendsCushionDecor,function
	.thumb_func
CheckInteractedWithFriendsCushionDecor:
	push	{r4, lr}
	ldr	r0, .L832
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L831	@cond_branch
	ldr	r4, .L832+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
.L831:
	pop	{r4}
	pop	{r0}
	bx	r0
.L833:
	.align	2, 0
.L832:
	.word	0x4054
	.word	0x40ee
.Lfe90:
	.size	 CheckInteractedWithFriendsCushionDecor,.Lfe90-CheckInteractedWithFriendsCushionDecor
	.align	2, 0
	.globl	DeclinedSecretBaseBattle
	.type	 DeclinedSecretBaseBattle,function
	.thumb_func
DeclinedSecretBaseBattle:
	push	{r4, r5, lr}
	ldr	r0, .L836
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L835	@cond_branch
	ldr	r5, .L836+0x4
	add	r0, r5, #0
	bl	VarGet
	ldr	r1, .L836+0x8
	and	r1, r1, r0
	add	r0, r5, #0
	bl	VarSet
	ldr	r4, .L836+0xc
	add	r0, r4, #0
	bl	VarGet
	ldr	r1, .L836+0x10
	and	r1, r1, r0
	add	r0, r4, #0
	bl	VarSet
	add	r0, r5, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	add	r0, r2, #0
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	bl	VarSet
.L835:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L837:
	.align	2, 0
.L836:
	.word	0x4054
	.word	0x40ee
	.word	0xc7ff
	.word	0x40ef
	.word	0xfffe
.Lfe91:
	.size	 DeclinedSecretBaseBattle,.Lfe91-DeclinedSecretBaseBattle
	.align	2, 0
	.globl	WonSecretBaseBattle
	.type	 WonSecretBaseBattle,function
	.thumb_func
WonSecretBaseBattle:
	push	{r4, r5, lr}
	ldr	r0, .L840
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L839	@cond_branch
	ldr	r5, .L840+0x4
	add	r0, r5, #0
	bl	VarGet
	ldr	r1, .L840+0x8
	and	r1, r1, r0
	add	r0, r5, #0
	bl	VarSet
	ldr	r4, .L840+0xc
	add	r0, r4, #0
	bl	VarGet
	ldr	r1, .L840+0x10
	and	r1, r1, r0
	add	r0, r4, #0
	bl	VarSet
	add	r0, r5, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	bl	VarSet
.L839:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L841:
	.align	2, 0
.L840:
	.word	0x4054
	.word	0x40ee
	.word	0xc7ff
	.word	0x40ef
	.word	0xfffe
.Lfe92:
	.size	 WonSecretBaseBattle,.Lfe92-WonSecretBaseBattle
	.align	2, 0
	.globl	LostSecretBaseBattle
	.type	 LostSecretBaseBattle,function
	.thumb_func
LostSecretBaseBattle:
	push	{r4, r5, lr}
	ldr	r0, .L844
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L843	@cond_branch
	ldr	r5, .L844+0x4
	add	r0, r5, #0
	bl	VarGet
	ldr	r1, .L844+0x8
	and	r1, r1, r0
	add	r0, r5, #0
	bl	VarSet
	ldr	r4, .L844+0xc
	add	r0, r4, #0
	bl	VarGet
	ldr	r1, .L844+0x10
	and	r1, r1, r0
	add	r0, r4, #0
	bl	VarSet
	add	r0, r5, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	bl	VarSet
.L843:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L845:
	.align	2, 0
.L844:
	.word	0x4054
	.word	0x40ee
	.word	0xc7ff
	.word	0x40ef
	.word	0xfffe
.Lfe93:
	.size	 LostSecretBaseBattle,.Lfe93-LostSecretBaseBattle
	.align	2, 0
	.globl	DrewSecretBaseBattle
	.type	 DrewSecretBaseBattle,function
	.thumb_func
DrewSecretBaseBattle:
	push	{r4, lr}
	ldr	r0, .L848
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L847	@cond_branch
	ldr	r4, .L848+0x4
	add	r0, r4, #0
	bl	VarGet
	ldr	r1, .L848+0x8
	and	r1, r1, r0
	add	r0, r4, #0
	bl	VarSet
	add	r4, r4, #0x1
	add	r0, r4, #0
	bl	VarGet
	ldr	r1, .L848+0xc
	and	r1, r1, r0
	add	r0, r4, #0
	bl	VarSet
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x1
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
.L847:
	pop	{r4}
	pop	{r0}
	bx	r0
.L849:
	.align	2, 0
.L848:
	.word	0x4054
	.word	0x40ee
	.word	0xc7ff
	.word	0xfffe
.Lfe94:
	.size	 DrewSecretBaseBattle,.Lfe94-DrewSecretBaseBattle
	.align	2, 0
	.globl	CheckInteractedWithFriendsPosterDecor
	.type	 CheckInteractedWithFriendsPosterDecor,function
	.thumb_func
CheckInteractedWithFriendsPosterDecor:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetXYCoordsOneStepInFrontOfPlayer
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileIdAt
	ldr	r1, .L870
	add	r0, r0, r1
	cmp	r0, #0x18
	bhi	.L851	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L870+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L871:
	.align	2, 0
.L870:
	.word	-0x31c
	.word	.L868
	.align	2, 0
	.align	2, 0
.L868:
	.word	.L866
	.word	.L866
	.word	.L866
	.word	.L866
	.word	.L851
	.word	.L851
	.word	.L851
	.word	.L851
	.word	.L866
	.word	.L866
	.word	.L866
	.word	.L866
	.word	.L851
	.word	.L851
	.word	.L851
	.word	.L851
	.word	.L866
	.word	.L866
	.word	.L851
	.word	.L851
	.word	.L866
	.word	.L866
	.word	.L866
	.word	.L866
	.word	.L866
.L866:
	ldr	r0, .L872
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L851	@cond_branch
	ldr	r4, .L872+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x7
	add	r0, r2, #0
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
.L851:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L873:
	.align	2, 0
.L872:
	.word	0x4054
	.word	0x40ee
.Lfe95:
	.size	 CheckInteractedWithFriendsPosterDecor,.Lfe95-CheckInteractedWithFriendsPosterDecor
	.align	2, 0
	.globl	CheckInteractedWithFriendsFurnitureBottom
	.type	 CheckInteractedWithFriendsFurnitureBottom,function
	.thumb_func
CheckInteractedWithFriendsFurnitureBottom:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetXYCoordsOneStepInFrontOfPlayer
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileIdAt
	ldr	r1, .L935
	add	r0, r0, r1
	cmp	r0, #0xcf
	bls	.LCB7606
	b	.L875	@long jump
.LCB7606:
	lsl	r0, r0, #0x2
	ldr	r1, .L935+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L936:
	.align	2, 0
.L935:
	.word	-0x22c
	.word	.L932
	.align	2, 0
	.align	2, 0
.L932:
	.word	.L899
	.word	.L906
	.word	.L906
	.word	.L906
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L899
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L930
	.word	.L902
	.word	.L902
	.word	.L877
	.word	.L877
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L930
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L930
	.word	.L930
	.word	.L930
	.word	.L930
	.word	.L930
	.word	.L930
	.word	.L930
	.word	.L930
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L930
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L930
	.word	.L930
	.word	.L930
	.word	.L875
	.word	.L930
	.word	.L930
	.word	.L930
	.word	.L930
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L930
	.word	.L930
	.word	.L930
	.word	.L930
	.word	.L930
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L896
	.word	.L896
	.word	.L896
	.word	.L896
	.word	.L896
	.word	.L896
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L896
	.word	.L896
	.word	.L896
	.word	.L896
	.word	.L896
	.word	.L896
	.word	.L896
	.word	.L896
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L875
	.word	.L896
	.word	.L896
	.word	.L896
	.word	.L896
.L877:
	ldr	r0, .L937
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L875	@cond_branch
	ldr	r4, .L937+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x40
	b	.L934
.L938:
	.align	2, 0
.L937:
	.word	0x4054
	.word	0x40ee
.L896:
	ldr	r0, .L939
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L875	@cond_branch
	ldr	r4, .L939+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x8
	b	.L934
.L940:
	.align	2, 0
.L939:
	.word	0x4054
	.word	0x40ee
.L899:
	ldr	r0, .L941
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L875	@cond_branch
	ldr	r4, .L941+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x40
	b	.L934
.L942:
	.align	2, 0
.L941:
	.word	0x4054
	.word	0x40ef
.L902:
	ldr	r0, .L943
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L875	@cond_branch
	ldr	r4, .L943+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	b	.L934
.L944:
	.align	2, 0
.L943:
	.word	0x4054
	.word	0x40ef
.L906:
	ldr	r0, .L945
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L875	@cond_branch
	ldr	r4, .L945+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x10
.L934:
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
	b	.L875
.L946:
	.align	2, 0
.L945:
	.word	0x4054
	.word	0x40ef
.L930:
	ldr	r0, .L947
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L875	@cond_branch
	ldr	r4, .L947+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
.L875:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L948:
	.align	2, 0
.L947:
	.word	0x4054
	.word	0x40ef
.Lfe96:
	.size	 CheckInteractedWithFriendsFurnitureBottom,.Lfe96-CheckInteractedWithFriendsFurnitureBottom
	.align	2, 0
	.globl	CheckInteractedWithFriendsFurnitureMiddle
	.type	 CheckInteractedWithFriendsFurnitureMiddle,function
	.thumb_func
CheckInteractedWithFriendsFurnitureMiddle:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetXYCoordsOneStepInFrontOfPlayer
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileIdAt
	ldr	r1, .L965
	add	r0, r0, r1
	cmp	r0, #0x35
	bls	.LCB7812
	b	.L950	@long jump
.LCB7812:
	lsl	r0, r0, #0x2
	ldr	r1, .L965+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L966:
	.align	2, 0
.L965:
	.word	-0x291
	.word	.L963
	.align	2, 0
	.align	2, 0
.L963:
	.word	.L961
	.word	.L950
	.word	.L950
	.word	.L961
	.word	.L950
	.word	.L950
	.word	.L961
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L961
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L961
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L961
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L961
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L961
	.word	.L950
	.word	.L950
	.word	.L961
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L950
	.word	.L961
	.word	.L950
	.word	.L950
	.word	.L961
.L961:
	ldr	r0, .L967
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L950	@cond_branch
	ldr	r4, .L967+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
.L950:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L968:
	.align	2, 0
.L967:
	.word	0x4054
	.word	0x40ef
.Lfe97:
	.size	 CheckInteractedWithFriendsFurnitureMiddle,.Lfe97-CheckInteractedWithFriendsFurnitureMiddle
	.align	2, 0
	.globl	CheckInteractedWithFriendsFurnitureTop
	.type	 CheckInteractedWithFriendsFurnitureTop,function
	.thumb_func
CheckInteractedWithFriendsFurnitureTop:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetXYCoordsOneStepInFrontOfPlayer
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileIdAt
	ldr	r1, .L1004
	add	r0, r0, r1
	cmp	r0, #0xa2
	bls	.LCB7890
	b	.L970	@long jump
.LCB7890:
	lsl	r0, r0, #0x2
	ldr	r1, .L1004+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1005:
	.align	2, 0
.L1004:
	.word	-0x225
	.word	.L1001
	.align	2, 0
	.align	2, 0
.L1001:
	.word	.L999
	.word	.L999
	.word	.L999
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L995
	.word	.L995
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L992
	.word	.L970
	.word	.L992
	.word	.L992
	.word	.L970
	.word	.L992
	.word	.L992
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L992
	.word	.L970
	.word	.L992
	.word	.L992
	.word	.L992
	.word	.L970
	.word	.L992
	.word	.L992
	.word	.L992
	.word	.L970
	.word	.L992
	.word	.L970
	.word	.L992
	.word	.L970
	.word	.L992
	.word	.L992
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L992
	.word	.L992
	.word	.L970
	.word	.L992
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L970
	.word	.L992
	.word	.L992
	.word	.L970
	.word	.L992
.L992:
	ldr	r0, .L1006
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L970	@cond_branch
	ldr	r4, .L1006+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x8
	b	.L1003
.L1007:
	.align	2, 0
.L1006:
	.word	0x4054
	.word	0x40ef
.L995:
	ldr	r0, .L1008
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L970	@cond_branch
	ldr	r4, .L1008+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
.L1003:
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
	b	.L970
.L1009:
	.align	2, 0
.L1008:
	.word	0x4054
	.word	0x40ef
.L999:
	ldr	r0, .L1010
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L970	@cond_branch
	ldr	r4, .L1010+0x4
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x10
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
.L970:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1011:
	.align	2, 0
.L1010:
	.word	0x4054
	.word	0x40ef
.Lfe98:
	.size	 CheckInteractedWithFriendsFurnitureTop,.Lfe98-CheckInteractedWithFriendsFurnitureTop
	.align	2, 0
	.globl	CheckInteractedWithFriendsSandOrnament
	.type	 CheckInteractedWithFriendsSandOrnament,function
	.thumb_func
CheckInteractedWithFriendsSandOrnament:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetXYCoordsOneStepInFrontOfPlayer
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileIdAt
	add	r1, r0, #0
	ldr	r0, .L1019
	cmp	r1, r0
	bgt	.L1013	@cond_branch
	sub	r0, r0, #0x1
	cmp	r1, r0
	blt	.L1013	@cond_branch
	ldr	r0, .L1019+0x4
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1013	@cond_branch
	ldr	r4, .L1019+0x8
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	mov	r0, #0x4
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
.L1013:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1020:
	.align	2, 0
.L1019:
	.word	0x28e
	.word	0x4054
	.word	0x40ef
.Lfe99:
	.size	 CheckInteractedWithFriendsSandOrnament,.Lfe99-CheckInteractedWithFriendsSandOrnament
.text
	.align	2, 0

