@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.type	 sLastCursorPositions,object
sLastCursorPositions:
	.byte	0x2
	.byte	0x3
	.byte	0x4
	.byte	0x2
	.byte	0x5
	.size	 sLastCursorPositions,5
	.type	 sMenuItems,object
sMenuItems:
	.byte	0x0
	.byte	0x1
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x7
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x8
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.size	 sMenuItems,30
.text
	.align	2, 0
	.type	 GetPokenavMainMenuType,function
	.thumb_func
GetPokenavMainMenuType:
	push	{r4, lr}
	mov	r4, #0x0
	mov	r0, #0x98
	lsl	r0, r0, #0x1
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	mov	r4, #0x1
	ldr	r0, .L5
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	mov	r4, #0x2
.L3:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L6:
	.align	2, 0
.L5:
	.word	0x89b
.Lfe1:
	.size	 GetPokenavMainMenuType,.Lfe1-GetPokenavMainMenuType
	.align	2, 0
	.globl	PokenavCallback_Init_MainMenuCursorOnMap
	.type	 PokenavCallback_Init_MainMenuCursorOnMap,function
	.thumb_func
PokenavCallback_Init_MainMenuCursorOnMap:
	push	{r4, lr}
	mov	r0, #0x1
	mov	r1, #0x10
	bl	AllocSubstruct
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L8	@cond_branch
	bl	GetPokenavMainMenuType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	strh	r0, [r4]
	strh	r1, [r4, #0x2]
	strh	r1, [r4, #0x4]
	strh	r1, [r4, #0x6]
	add	r0, r4, #0
	bl	SetMenuInputHandler
	mov	r0, #0x1
	b	.L9
.L8:
	mov	r0, #0x0
.L9:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 PokenavCallback_Init_MainMenuCursorOnMap,.Lfe2-PokenavCallback_Init_MainMenuCursorOnMap
	.align	2, 0
	.globl	PokenavCallback_Init_MainMenuCursorOnMatchCall
	.type	 PokenavCallback_Init_MainMenuCursorOnMatchCall,function
	.thumb_func
PokenavCallback_Init_MainMenuCursorOnMatchCall:
	push	{r4, lr}
	mov	r0, #0x1
	mov	r1, #0x10
	bl	AllocSubstruct
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L11	@cond_branch
	bl	GetPokenavMainMenuType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	strh	r0, [r4]
	mov	r0, #0x2
	strh	r0, [r4, #0x2]
	strh	r0, [r4, #0x4]
	strh	r1, [r4, #0x6]
	add	r0, r4, #0
	bl	SetMenuInputHandler
	mov	r0, #0x1
	b	.L12
.L11:
	mov	r0, #0x0
.L12:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 PokenavCallback_Init_MainMenuCursorOnMatchCall,.Lfe3-PokenavCallback_Init_MainMenuCursorOnMatchCall
	.align	2, 0
	.globl	PokenavCallback_Init_MainMenuCursorOnRibbons
	.type	 PokenavCallback_Init_MainMenuCursorOnRibbons,function
	.thumb_func
PokenavCallback_Init_MainMenuCursorOnRibbons:
	push	{r4, lr}
	mov	r0, #0x1
	mov	r1, #0x10
	bl	AllocSubstruct
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L14	@cond_branch
	bl	GetPokenavMainMenuType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, #0x3
	strh	r0, [r4, #0x2]
	strh	r0, [r4, #0x4]
	add	r0, r4, #0
	bl	SetMenuInputHandler
	mov	r0, #0x1
	b	.L15
.L14:
	mov	r0, #0x0
.L15:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 PokenavCallback_Init_MainMenuCursorOnRibbons,.Lfe4-PokenavCallback_Init_MainMenuCursorOnRibbons
	.align	2, 0
	.globl	PokenavCallback_Init_ConditionMenu
	.type	 PokenavCallback_Init_ConditionMenu,function
	.thumb_func
PokenavCallback_Init_ConditionMenu:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x10
	bl	AllocSubstruct
	add	r2, r0, #0
	cmp	r2, #0
	beq	.L17	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x3
	strh	r1, [r2]
	strh	r0, [r2, #0x2]
	mov	r1, #0x5
	strh	r1, [r2, #0x4]
	strh	r0, [r2, #0x6]
	add	r0, r2, #0
	bl	SetMenuInputHandler
	mov	r0, #0x1
	b	.L18
.L17:
	mov	r0, #0x0
.L18:
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 PokenavCallback_Init_ConditionMenu,.Lfe5-PokenavCallback_Init_ConditionMenu
	.align	2, 0
	.globl	PokenavCallback_Init_ConditionSearchMenu
	.type	 PokenavCallback_Init_ConditionSearchMenu,function
	.thumb_func
PokenavCallback_Init_ConditionSearchMenu:
	push	{r4, r5, lr}
	mov	r0, #0x1
	mov	r1, #0x10
	bl	AllocSubstruct
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L20	@cond_branch
	mov	r4, #0x0
	mov	r0, #0x4
	strh	r0, [r5]
	bl	GetSelectedConditionSearch
	strh	r0, [r5, #0x2]
	add	r0, r0, #0x8
	strh	r0, [r5, #0x4]
	strh	r4, [r5, #0x6]
	add	r0, r5, #0
	bl	SetMenuInputHandler
	mov	r0, #0x1
	b	.L21
.L20:
	mov	r0, #0x0
.L21:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 PokenavCallback_Init_ConditionSearchMenu,.Lfe6-PokenavCallback_Init_ConditionSearchMenu
	.align	2, 0
	.type	 SetMenuInputHandler,function
	.thumb_func
SetMenuInputHandler:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4]
	cmp	r0, #0x4
	bhi	.L23	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L32
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L33:
	.align	2, 0
.L32:
	.word	.L29
	.align	2, 0
	.align	2, 0
.L29:
	.word	.L24
	.word	.L26
	.word	.L26
	.word	.L27
	.word	.L28
.L24:
	mov	r0, #0x0
	bl	SetPokenavMode
.L26:
	bl	GetMainMenuInputHandler
	b	.L31
.L27:
	ldr	r0, .L34
	b	.L31
.L35:
	.align	2, 0
.L34:
	.word	HandleConditionMenuInput
.L28:
	ldr	r0, .L36
.L31:
	str	r0, [r4, #0xc]
.L23:
	pop	{r4}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	HandleConditionSearchMenuInput
.Lfe7:
	.size	 SetMenuInputHandler,.Lfe7-SetMenuInputHandler
	.align	2, 0
	.type	 GetMainMenuInputHandler,function
	.thumb_func
GetMainMenuInputHandler:
	push	{lr}
	bl	GetPokenavMode
	cmp	r0, #0x1
	beq	.L42	@cond_branch
	cmp	r0, #0x1
	bcc	.L41	@cond_branch
	cmp	r0, #0x2
	beq	.L43	@cond_branch
.L41:
	ldr	r0, .L46
	b	.L45
.L47:
	.align	2, 0
.L46:
	.word	HandleMainMenuInput
.L42:
	ldr	r0, .L48
	b	.L45
.L49:
	.align	2, 0
.L48:
	.word	HandleMainMenuInputTutorial
.L43:
	ldr	r0, .L50
.L45:
	pop	{r1}
	bx	r1
.L51:
	.align	2, 0
.L50:
	.word	HandleMainMenuInputEndTutorial
.Lfe8:
	.size	 GetMainMenuInputHandler,.Lfe8-GetMainMenuInputHandler
	.align	2, 0
	.globl	GetMenuHandlerCallback
	.type	 GetMenuHandlerCallback,function
	.thumb_func
GetMenuHandlerCallback:
	push	{lr}
	mov	r0, #0x1
	bl	GetSubstructPtr
	ldr	r1, [r0, #0xc]
	bl	_call_via_r1
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 GetMenuHandlerCallback,.Lfe9-GetMenuHandlerCallback
	.align	2, 0
	.globl	FreeMenuHandlerSubstruct1
	.type	 FreeMenuHandlerSubstruct1,function
	.thumb_func
FreeMenuHandlerSubstruct1:
	push	{lr}
	mov	r0, #0x1
	bl	FreePokenavSubstruct
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 FreeMenuHandlerSubstruct1,.Lfe10-FreeMenuHandlerSubstruct1
	.align	2, 0
	.type	 HandleMainMenuInput,function
	.thumb_func
HandleMainMenuInput:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	UpdateMenuCursorPos
	cmp	r0, #0
	beq	.L55	@cond_branch
	mov	r0, #0x1
	b	.L70
.L55:
	ldr	r2, .L72
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	add	r5, r2, #0
	cmp	r0, #0
	beq	.L56	@cond_branch
	ldr	r3, .L72+0x4
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	ldrh	r2, [r4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0x4
	bhi	.L56	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L72+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L73:
	.align	2, 0
.L72:
	.word	gMain
	.word	sMenuItems
	.word	.L67
	.align	2, 0
	.align	2, 0
.L67:
	.word	.L58
	.word	.L61
	.word	.L62
	.word	.L63
	.word	.L69
.L58:
	ldr	r0, .L74
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	mov	r1, #0x1
	cmp	r0, #0
	beq	.L59	@cond_branch
	mov	r1, #0x2
.L59:
	strh	r1, [r4, #0x6]
	ldr	r1, .L74+0x4
	b	.L71
.L75:
	.align	2, 0
.L74:
	.word	gSaveBlock2Ptr
	.word	0x186a6
.L61:
	mov	r1, #0x0
	mov	r0, #0x3
	strh	r0, [r4]
	strh	r1, [r4, #0x2]
	ldrb	r0, [r3, #0x12]
	strh	r0, [r4, #0x4]
	ldr	r0, .L76
	str	r0, [r4, #0xc]
	mov	r0, #0x2
	b	.L70
.L77:
	.align	2, 0
.L76:
	.word	HandleConditionMenuInput
.L62:
	mov	r0, #0x6
	strh	r0, [r4, #0x6]
	ldr	r1, .L78
	b	.L71
.L79:
	.align	2, 0
.L78:
	.word	0x186ab
.L63:
	bl	CanViewRibbonsMenu
	cmp	r0, #0
	beq	.L64	@cond_branch
	mov	r0, #0x9
	strh	r0, [r4, #0x6]
	ldr	r1, .L80
.L71:
	add	r0, r4, #0
	bl	SetMenuIdAndCB
	mov	r0, #0x8
	b	.L70
.L81:
	.align	2, 0
.L80:
	.word	0x186ac
.L64:
	ldr	r0, .L82
	str	r0, [r4, #0xc]
	mov	r0, #0x6
	b	.L70
.L83:
	.align	2, 0
.L82:
	.word	HandleCantOpenRibbonsInput
.L56:
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L69	@cond_branch
	mov	r0, #0x0
	b	.L70
.L69:
	mov	r0, #0x1
	neg	r0, r0
.L70:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 HandleMainMenuInput,.Lfe11-HandleMainMenuInput
	.align	2, 0
	.type	 HandleMainMenuInputTutorial,function
	.thumb_func
HandleMainMenuInputTutorial:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdateMenuCursorPos
	cmp	r0, #0
	beq	.L85	@cond_branch
	mov	r0, #0x1
	b	.L90
.L85:
	ldr	r0, .L92
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L86	@cond_branch
	ldr	r3, .L92+0x4
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	ldrh	r2, [r4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0x2
	bne	.L89	@cond_branch
	mov	r0, #0x6
	strh	r0, [r4, #0x6]
	ldr	r1, .L92+0x8
	add	r0, r4, #0
	bl	SetMenuIdAndCB
	mov	r0, #0x8
	b	.L90
.L93:
	.align	2, 0
.L92:
	.word	gMain
	.word	sMenuItems
	.word	0x186ab
.L86:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L91	@cond_branch
.L89:
	mov	r0, #0x20
	bl	PlaySE
.L91:
	mov	r0, #0x0
.L90:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 HandleMainMenuInputTutorial,.Lfe12-HandleMainMenuInputTutorial
	.align	2, 0
	.type	 HandleMainMenuInputEndTutorial,function
	.thumb_func
HandleMainMenuInputEndTutorial:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdateMenuCursorPos
	cmp	r0, #0
	beq	.L95	@cond_branch
	mov	r0, #0x1
	b	.L103
.L95:
	ldr	r0, .L105
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L96	@cond_branch
	ldr	r3, .L105+0x4
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	ldrh	r2, [r4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0x2
	beq	.L104	@cond_branch
	cmp	r0, #0x4
	beq	.L101	@cond_branch
	mov	r0, #0x20
	bl	PlaySE
	mov	r0, #0x0
	b	.L103
.L106:
	.align	2, 0
.L105:
	.word	gMain
	.word	sMenuItems
.L104:
	mov	r0, #0x6
	strh	r0, [r4, #0x6]
	ldr	r1, .L107
	add	r0, r4, #0
	bl	SetMenuIdAndCB
	mov	r0, #0x8
	b	.L103
.L108:
	.align	2, 0
.L107:
	.word	0x186ab
.L96:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L101	@cond_branch
	mov	r0, #0x0
	b	.L103
.L101:
	mov	r0, #0x1
	neg	r0, r0
.L103:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 HandleMainMenuInputEndTutorial,.Lfe13-HandleMainMenuInputEndTutorial
	.align	2, 0
	.type	 HandleCantOpenRibbonsInput,function
	.thumb_func
HandleCantOpenRibbonsInput:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdateMenuCursorPos
	cmp	r0, #0
	beq	.L110	@cond_branch
	bl	GetMainMenuInputHandler
	str	r0, [r4, #0xc]
	mov	r0, #0x1
	b	.L112
.L110:
	ldr	r0, .L113
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L111	@cond_branch
	mov	r0, #0x0
	b	.L112
.L114:
	.align	2, 0
.L113:
	.word	gMain
.L111:
	bl	GetMainMenuInputHandler
	str	r0, [r4, #0xc]
	mov	r0, #0x7
.L112:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 HandleCantOpenRibbonsInput,.Lfe14-HandleCantOpenRibbonsInput
	.align	2, 0
	.type	 HandleConditionMenuInput,function
	.thumb_func
HandleConditionMenuInput:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	bl	UpdateMenuCursorPos
	add	r3, r0, #0
	cmp	r3, #0
	beq	.L116	@cond_branch
	mov	r0, #0x1
	b	.L128
.L116:
	ldr	r2, .L129
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	add	r6, r2, #0
	cmp	r0, #0
	beq	.L117	@cond_branch
	ldr	r5, .L129+0x4
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	ldrh	r2, [r4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r0, #0x6
	beq	.L119	@cond_branch
	cmp	r0, #0x6
	bgt	.L124	@cond_branch
	cmp	r0, #0x5
	beq	.L120	@cond_branch
	b	.L117
.L130:
	.align	2, 0
.L129:
	.word	gMain
	.word	sMenuItems
.L124:
	cmp	r0, #0x7
	beq	.L126	@cond_branch
	b	.L117
.L119:
	mov	r0, #0x4
	strh	r0, [r4]
	strh	r3, [r4, #0x2]
	ldrb	r0, [r5, #0x18]
	strh	r0, [r4, #0x4]
	ldr	r0, .L131
	str	r0, [r4, #0xc]
	mov	r0, #0x4
	b	.L128
.L132:
	.align	2, 0
.L131:
	.word	HandleConditionSearchMenuInput
.L120:
	strh	r3, [r4, #0x6]
	ldr	r1, .L133
	add	r0, r4, #0
	bl	SetMenuIdAndCB
	mov	r0, #0x8
	b	.L128
.L134:
	.align	2, 0
.L133:
	.word	0x186a7
.L117:
	ldrh	r1, [r6, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L125	@cond_branch
	mov	r0, #0x2
	ldrsh	r2, [r4, r0]
	ldr	r1, .L135
	ldrh	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r2, r0
	beq	.L126	@cond_branch
	strh	r0, [r4, #0x2]
	ldr	r0, .L135+0x4
	str	r0, [r4, #0xc]
	mov	r0, #0x1
	b	.L128
.L136:
	.align	2, 0
.L135:
	.word	sLastCursorPositions
	.word	CB2_ReturnToMainMenu
.L126:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	ReturnToMainMenu
	mov	r0, #0x3
	b	.L128
.L125:
	mov	r0, #0x0
.L128:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 HandleConditionMenuInput,.Lfe15-HandleConditionMenuInput
	.align	2, 0
	.type	 HandleConditionSearchMenuInput,function
	.thumb_func
HandleConditionSearchMenuInput:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdateMenuCursorPos
	cmp	r0, #0
	beq	.L138	@cond_branch
	mov	r0, #0x1
	b	.L145
.L138:
	ldr	r0, .L146
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L139	@cond_branch
	ldr	r3, .L146+0x4
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	ldrh	r2, [r4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0xd
	beq	.L143	@cond_branch
	sub	r0, r0, #0x8
	bl	SetSelectedConditionSearch
	ldr	r1, .L146+0x8
	add	r0, r4, #0
	bl	SetMenuIdAndCB
	mov	r0, #0x3
	strh	r0, [r4, #0x6]
	mov	r0, #0x8
	b	.L145
.L147:
	.align	2, 0
.L146:
	.word	gMain
	.word	sMenuItems
	.word	0x186a8
.L139:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L142	@cond_branch
	mov	r0, #0x2
	ldrsh	r2, [r4, r0]
	ldr	r1, .L148
	ldrh	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r2, r0
	beq	.L143	@cond_branch
	strh	r0, [r4, #0x2]
	ldr	r0, .L148+0x4
	str	r0, [r4, #0xc]
	mov	r0, #0x1
	b	.L145
.L149:
	.align	2, 0
.L148:
	.word	sLastCursorPositions
	.word	CB2_ReturnToConditionMenu
.L143:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	ReturnToConditionMenu
	mov	r0, #0x5
	b	.L145
.L142:
	mov	r0, #0x0
.L145:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 HandleConditionSearchMenuInput,.Lfe16-HandleConditionSearchMenuInput
	.align	2, 0
	.type	 CB2_ReturnToMainMenu,function
	.thumb_func
CB2_ReturnToMainMenu:
	push	{lr}
	bl	ReturnToMainMenu
	mov	r0, #0x3
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 CB2_ReturnToMainMenu,.Lfe17-CB2_ReturnToMainMenu
	.align	2, 0
	.type	 CB2_ReturnToConditionMenu,function
	.thumb_func
CB2_ReturnToConditionMenu:
	push	{lr}
	bl	ReturnToConditionMenu
	mov	r0, #0x5
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 CB2_ReturnToConditionMenu,.Lfe18-CB2_ReturnToConditionMenu
	.align	2, 0
	.type	 SetMenuIdAndCB,function
	.thumb_func
SetMenuIdAndCB:
	str	r1, [r0, #0x8]
	ldr	r1, .L153
	str	r1, [r0, #0xc]
	bx	lr
.L154:
	.align	2, 0
.L153:
	.word	GetMenuId
.Lfe19:
	.size	 SetMenuIdAndCB,.Lfe19-SetMenuIdAndCB
	.align	2, 0
	.type	 GetMenuId,function
	.thumb_func
GetMenuId:
	ldr	r0, [r0, #0x8]
	bx	lr
.Lfe20:
	.size	 GetMenuId,.Lfe20-GetMenuId
	.align	2, 0
	.type	 ReturnToMainMenu,function
	.thumb_func
ReturnToMainMenu:
	push	{r4, lr}
	add	r4, r0, #0
	bl	GetPokenavMainMenuType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, #0x1
	strh	r0, [r4, #0x2]
	ldr	r2, .L157
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r4, #0x4]
	ldr	r0, .L157+0x4
	str	r0, [r4, #0xc]
	pop	{r4}
	pop	{r0}
	bx	r0
.L158:
	.align	2, 0
.L157:
	.word	sMenuItems
	.word	HandleMainMenuInput
.Lfe21:
	.size	 ReturnToMainMenu,.Lfe21-ReturnToMainMenu
	.align	2, 0
	.type	 ReturnToConditionMenu,function
	.thumb_func
ReturnToConditionMenu:
	mov	r1, #0x3
	strh	r1, [r0]
	mov	r1, #0x1
	strh	r1, [r0, #0x2]
	ldr	r1, .L160
	ldrb	r1, [r1, #0x13]
	strh	r1, [r0, #0x4]
	ldr	r1, .L160+0x4
	str	r1, [r0, #0xc]
	bx	lr
.L161:
	.align	2, 0
.L160:
	.word	sMenuItems
	.word	HandleConditionMenuInput
.Lfe22:
	.size	 ReturnToConditionMenu,.Lfe22-ReturnToConditionMenu
	.align	2, 0
	.type	 UpdateMenuCursorPos,function
	.thumb_func
UpdateMenuCursorPos:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, .L170
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0
	beq	.L163	@cond_branch
	ldrh	r0, [r4, #0x2]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	ldrh	r3, [r4]
	cmp	r0, #0
	bge	.L167	@cond_branch
	ldr	r0, .L170+0x4
	add	r0, r3, r0
	ldrb	r0, [r0]
	strh	r0, [r4, #0x2]
	b	.L167
.L171:
	.align	2, 0
.L170:
	.word	gMain
	.word	sLastCursorPositions
.L163:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L166	@cond_branch
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	mov	r0, #0x2
	ldrsh	r2, [r4, r0]
	ldr	r0, .L172
	ldrh	r1, [r4]
	add	r0, r1, r0
	add	r3, r1, #0
	ldrb	r0, [r0]
	cmp	r2, r0
	ble	.L167	@cond_branch
	strh	r5, [r4, #0x2]
.L167:
	ldr	r2, .L172+0x4
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1]
	strh	r0, [r4, #0x4]
	mov	r0, #0x1
	b	.L169
.L173:
	.align	2, 0
.L172:
	.word	sLastCursorPositions
	.word	sMenuItems
.L166:
	mov	r0, #0x0
.L169:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 UpdateMenuCursorPos,.Lfe23-UpdateMenuCursorPos
	.align	2, 0
	.globl	GetPokenavMenuType
	.type	 GetPokenavMenuType,function
	.thumb_func
GetPokenavMenuType:
	push	{lr}
	mov	r0, #0x1
	bl	GetSubstructPtr
	ldrh	r0, [r0]
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 GetPokenavMenuType,.Lfe24-GetPokenavMenuType
	.align	2, 0
	.globl	GetPokenavCursorPos
	.type	 GetPokenavCursorPos,function
	.thumb_func
GetPokenavCursorPos:
	push	{lr}
	mov	r0, #0x1
	bl	GetSubstructPtr
	mov	r1, #0x2
	ldrsh	r0, [r0, r1]
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 GetPokenavCursorPos,.Lfe25-GetPokenavCursorPos
	.align	2, 0
	.globl	GetCurrentMenuItemId
	.type	 GetCurrentMenuItemId,function
	.thumb_func
GetCurrentMenuItemId:
	push	{lr}
	mov	r0, #0x1
	bl	GetSubstructPtr
	ldrh	r0, [r0, #0x4]
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 GetCurrentMenuItemId,.Lfe26-GetCurrentMenuItemId
	.align	2, 0
	.globl	GetHelpBarTextId
	.type	 GetHelpBarTextId,function
	.thumb_func
GetHelpBarTextId:
	push	{lr}
	mov	r0, #0x1
	bl	GetSubstructPtr
	ldrh	r0, [r0, #0x6]
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 GetHelpBarTextId,.Lfe27-GetHelpBarTextId
.text
	.align	2, 0

