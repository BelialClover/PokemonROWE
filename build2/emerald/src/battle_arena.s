@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.type	 sMindRatings,object
sMindRatings:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	-0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	-0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	-0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.size	 sMindRatings,355
	.align	2, 0
	.type	 sJudgementIconOamData,object
	.size	 sJudgementIconOamData,8
sJudgementIconOamData:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0xf0
	.short	0x0
	.align	2, 0
	.type	 sJudgementIconAnimCmd0,object
sJudgementIconAnimCmd0:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sJudgementIconAnimCmd0,8
	.align	2, 0
	.type	 sJudgementIconAnimCmd1,object
sJudgementIconAnimCmd1:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sJudgementIconAnimCmd1,8
	.align	2, 0
	.type	 sJudgementIconAnimCmd2,object
sJudgementIconAnimCmd2:
	.short	0x8
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sJudgementIconAnimCmd2,8
	.align	2, 0
	.type	 sJudgementIconAnimCmd3,object
sJudgementIconAnimCmd3:
	.short	0xc
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sJudgementIconAnimCmd3,8
	.align	2, 0
	.type	 sJudgementIconAnimCmds,object
sJudgementIconAnimCmds:
	.word	sJudgementIconAnimCmd0
	.word	sJudgementIconAnimCmd1
	.word	sJudgementIconAnimCmd2
	.word	sJudgementIconAnimCmd3
	.size	 sJudgementIconAnimCmds,16
	.align	2, 0
	.type	 sSpriteTemplate_JudgmentIcon,object
	.size	 sSpriteTemplate_JudgmentIcon,24
sSpriteTemplate_JudgmentIcon:
	.short	0x3e8
	.short	0xffff
	.word	sJudgementIconOamData
	.word	sJudgementIconAnimCmds
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCb_JudgmentIcon
	.align	2, 0
	.type	 sBattleArenaJudgementSymbolsSpriteSheet,object
sBattleArenaJudgementSymbolsSpriteSheet:
	.word	gBattleArenaJudgementSymbolsGfx
	.short	0x200
	.short	0x3e8
	.word	0x0
	.space	4
	.size	 sBattleArenaJudgementSymbolsSpriteSheet,16
	.align	2, 0
	.type	 sArenaFunctions,object
sArenaFunctions:
	.word	InitArenaChallenge
	.word	GetArenaData
	.word	SetArenaData
	.word	SaveArenaChallenge
	.word	SetArenaPrize
	.word	GiveArenaPrize
	.word	BufferArenaOpponentName
	.size	 sArenaFunctions,28
	.align	1, 0
	.type	 sShortStreakPrizeItems,object
sShortStreakPrizeItems:
	.short	0x46
	.short	0x47
	.short	0x48
	.short	0x4a
	.short	0x49
	.short	0x4d
	.size	 sShortStreakPrizeItems,12
	.align	1, 0
	.type	 sLongStreakPrizeItems,object
sLongStreakPrizeItems:
	.short	0xd3
	.short	0xd4
	.short	0xd7
	.short	0xe5
	.short	0xd9
	.short	0xdb
	.short	0xe1
	.short	0xe3
	.short	0xda
	.size	 sLongStreakPrizeItems,18
.text
	.align	2, 0
	.globl	CallBattleArenaFunction
	.type	 CallBattleArenaFunction,function
	.thumb_func
CallBattleArenaFunction:
	push	{lr}
	ldr	r1, .L3
	ldr	r0, .L3+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sArenaFunctions
	.word	gSpecialVar_0x8004
.Lfe1:
	.size	 CallBattleArenaFunction,.Lfe1-CallBattleArenaFunction
	.align	2, 0
	.globl	BattleArena_ShowJudgmentWindow
	.type	 BattleArena_ShowJudgmentWindow,function
	.thumb_func
BattleArena_ShowJudgmentWindow:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	mov	r6, #0x0
	ldrb	r0, [r5]
	cmp	r0, #0xa
	bls	.LCB35
	b	.L6	@long jump
.LCB35:
	lsl	r0, r0, #0x2
	ldr	r1, .L36
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L37:
	.align	2, 0
.L36:
	.word	.L31
	.align	2, 0
	.align	2, 0
.L31:
	.word	.L7
	.word	.L8
	.word	.L10
	.word	.L12
	.word	.L19
	.word	.L20
	.word	.L21
	.word	.L22
	.word	.L33
	.word	.L28
	.word	.L29
.L7:
	ldr	r0, .L38
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x8
	bl	BeginNormalPaletteFade
	ldr	r1, .L38+0x4
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, .L38+0x8
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L38+0xc
	mov	r1, #0xf8
	lsl	r1, r1, #0x1
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r1, .L38+0x10
	mov	r0, #0xff
	strh	r0, [r1]
	ldr	r1, .L38+0x14
	mov	r0, #0x70
	strh	r0, [r1]
	b	.L33
.L39:
	.align	2, 0
.L38:
	.word	0x7fffff1c
	.word	0x3f3e
	.word	sBattleArenaJudgementSymbolsSpriteSheet
	.word	gBattleArenaJudgementSymbolsPalette
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
.L8:
	ldr	r0, .L40
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB103
	b	.L6	@long jump
.LCB103:
	str	r0, [sp]
	mov	r0, #0x5
	mov	r1, #0x0
	mov	r2, #0x18
	mov	r3, #0xd
	bl	HandleBattleWindow
	b	.L33
.L41:
	.align	2, 0
.L40:
	.word	gPaletteFade
.L10:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB125
	b	.L6	@long jump
.LCB125:
	ldr	r1, .L42
	mov	r2, #0xa1
	strb	r2, [r1]
	mov	r0, #0xff
	strb	r0, [r1, #0x1]
	ldr	r1, .L42+0x4
	strb	r2, [r1]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x1]
	ldr	r0, .L42+0x8
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r4, .L42+0xc
	add	r0, r4, #0
	mov	r1, #0xf
	bl	BattlePutTextOnWindow
	ldr	r0, .L42+0x10
	mov	r1, #0x10
	bl	BattlePutTextOnWindow
	ldr	r0, .L42+0x14
	bl	BattleStringExpandPlaceholdersToDisplayedString
	add	r0, r4, #0
	mov	r1, #0x11
	bl	BattlePutTextOnWindow
	ldr	r0, .L42+0x18
	mov	r1, #0x12
	bl	BattlePutTextOnWindow
	ldr	r0, .L42+0x1c
	mov	r1, #0x13
	bl	BattlePutTextOnWindow
	ldr	r0, .L42+0x20
	mov	r1, #0x14
	bl	BattlePutTextOnWindow
	ldr	r0, .L42+0x24
	bl	BattleStringExpandPlaceholdersToDisplayedString
	add	r0, r4, #0
	mov	r1, #0x15
	bl	BattlePutTextOnWindow
	b	.L33
.L43:
	.align	2, 0
.L42:
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gText_PlayerMon1Name
	.word	gDisplayedStringBattle
	.word	gText_Vs
	.word	gText_OpponentMon1Name
	.word	gText_Mind
	.word	gText_Skill
	.word	gText_Body
	.word	gText_Judgement
.L12:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB199
	b	.L6	@long jump
.LCB199:
	ldr	r1, .L44
	mov	r0, #0x48
	bl	SetGpuReg
	mov	r6, #0x80
	lsl	r6, r6, #0xf
	mov	r4, #0x7
.L17:
	asr	r1, r6, #0x10
	ldr	r0, .L44+0x4
	mov	r2, #0x54
	mov	r3, #0x0
	bl	CreateSprite
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L44+0x8
	add	r0, r0, r1
	mov	r1, #0x3
	bl	StartSpriteAnim
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	add	r6, r6, r0
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L17	@cond_branch
	b	.L34
.L45:
	.align	2, 0
.L44:
	.word	0x3f3f
	.word	sSpriteTemplate_JudgmentIcon
	.word	gSprites
.L19:
	ldr	r0, .L46
	bl	PlaySE
	mov	r0, #0x50
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x0
	bl	ShowJudgmentSprite
	mov	r0, #0xa0
	mov	r1, #0x28
	mov	r2, #0x0
	b	.L35
.L47:
	.align	2, 0
.L46:
	.word	0x109
.L20:
	ldr	r0, .L48
	bl	PlaySE
	mov	r0, #0x50
	mov	r1, #0x38
	mov	r2, #0x1
	mov	r3, #0x0
	bl	ShowJudgmentSprite
	mov	r0, #0xa0
	mov	r1, #0x38
	mov	r2, #0x1
	b	.L35
.L49:
	.align	2, 0
.L48:
	.word	0x109
.L21:
	ldr	r0, .L50
	bl	PlaySE
	mov	r0, #0x50
	mov	r1, #0x48
	mov	r2, #0x2
	mov	r3, #0x0
	bl	ShowJudgmentSprite
	mov	r0, #0xa0
	mov	r1, #0x48
	mov	r2, #0x2
.L35:
	mov	r3, #0x1
	bl	ShowJudgmentSprite
	ldr	r0, .L50+0x4
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r0, .L50+0x8
	mov	r1, #0x15
	bl	BattlePutTextOnWindow
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	mov	r6, #0x1
	b	.L6
.L51:
	.align	2, 0
.L50:
	.word	0x109
	.word	gText_Judgement
	.word	gDisplayedStringBattle
.L22:
	mov	r0, #0x85
	lsl	r0, r0, #0x1
	bl	PlaySE
	ldr	r0, .L52
	ldr	r1, .L52+0x4
	ldrb	r2, [r0]
	ldrb	r0, [r1]
	cmp	r2, r0
	bls	.L23	@cond_branch
	mov	r6, #0x2
	ldr	r1, .L52+0x8
	mov	r0, #0x0
	strb	r0, [r1, #0x17]
	b	.L33
.L53:
	.align	2, 0
.L52:
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gBattleScripting
.L23:
	cmp	r2, r0
	bcs	.L25	@cond_branch
	mov	r6, #0x3
	ldr	r1, .L54
	mov	r0, #0x1
	strb	r0, [r1, #0x17]
	b	.L33
.L55:
	.align	2, 0
.L54:
	.word	gBattleScripting
.L25:
	mov	r6, #0x4
	b	.L33
.L28:
	ldr	r1, .L56
	mov	r0, #0x48
	bl	SetGpuReg
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x5
	mov	r1, #0x0
	mov	r2, #0x18
	mov	r3, #0xd
	bl	HandleBattleWindow
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	ldr	r0, .L56+0x4
	ldr	r1, .L56+0x8
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	ldr	r0, .L56+0xc
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x8
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	b	.L33
.L57:
	.align	2, 0
.L56:
	.word	0x3f3e
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	0x7fffff1c
.L29:
	ldr	r0, .L58
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L6	@cond_branch
	ldr	r1, .L58+0x4
	mov	r0, #0x48
	bl	SetGpuReg
	mov	r0, #0xfa
	lsl	r0, r0, #0x2
	bl	FreeSpriteTilesByTag
.L34:
	mov	r6, #0x1
.L33:
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
.L6:
	add	r0, r6, #0
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L59:
	.align	2, 0
.L58:
	.word	gPaletteFade
	.word	0x3f3f
.Lfe2:
	.size	 BattleArena_ShowJudgmentWindow,.Lfe2-BattleArena_ShowJudgmentWindow
	.align	2, 0
	.type	 ShowJudgmentSprite,function
	.thumb_func
ShowJudgmentSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	mov	r6, #0x0
	mov	r1, #0x0
	ldr	r0, .L78
	ldr	r0, [r0]
	mov	r3, #0x9b
	lsl	r3, r3, #0x2
	add	r4, r0, r3
	ldr	r5, .L78+0x4
	add	r3, r0, r5
	add	r5, r5, #0x2
	add	r5, r5, r0
	mov	r8, r5
	cmp	r2, #0x1
	beq	.L63	@cond_branch
	cmp	r2, #0x1
	bgt	.L67	@cond_branch
	cmp	r2, #0
	beq	.L62	@cond_branch
	b	.L61
.L79:
	.align	2, 0
.L78:
	.word	gBattleStruct
	.word	0x26e
.L67:
	mov	r0, r9
	cmp	r0, #0x2
	beq	.L64	@cond_branch
	b	.L61
.L62:
	add	r0, r4, r7
	mov	r6, #0x0
	ldrsb	r6, [r0, r6]
	mov	r1, #0x1
	add	r0, r7, #0
	eor	r0, r0, r1
	add	r0, r4, r0
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	b	.L61
.L63:
	add	r0, r3, r7
	mov	r6, #0x0
	ldrsb	r6, [r0, r6]
	mov	r1, #0x1
	add	r0, r7, #0
	eor	r0, r0, r1
	add	r0, r3, r0
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	b	.L61
.L64:
	ldr	r3, .L80
	mov	r9, r3
	mov	r5, #0x5c
	mov	r0, r7
	mul	r0, r0, r5
	add	r0, r0, r9
	ldrh	r0, [r0, #0x2a]
	mov	r4, #0x64
	mul	r0, r0, r4
	lsl	r1, r7, #0x1
	add	r1, r1, r8
	ldrh	r1, [r1]
	bl	__divsi3
	add	r6, r0, #0
	mov	r0, #0x1
	add	r1, r7, #0
	eor	r1, r1, r0
	mov	r0, r1
	mul	r0, r0, r5
	add	r0, r0, r9
	ldrh	r0, [r0, #0x2a]
	mul	r0, r0, r4
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	ldrh	r1, [r1]
	bl	__divsi3
	add	r1, r0, #0
.L61:
	cmp	r6, r1
	ble	.L68	@cond_branch
	mov	r4, #0x2
	cmp	r7, #0
	beq	.L69	@cond_branch
	ldr	r1, .L80+0x4
	b	.L76
.L81:
	.align	2, 0
.L80:
	.word	gBattleMons
	.word	gBattleTextBuff2
.L69:
	ldr	r1, .L82
.L76:
	ldrb	r0, [r1]
	add	r0, r0, #0x2
	strb	r0, [r1]
	b	.L71
.L83:
	.align	2, 0
.L82:
	.word	gBattleTextBuff1
.L68:
	cmp	r6, r1
	bne	.L72	@cond_branch
	mov	r4, #0x1
	cmp	r7, #0
	beq	.L73	@cond_branch
	ldr	r1, .L84
	b	.L77
.L85:
	.align	2, 0
.L84:
	.word	gBattleTextBuff2
.L73:
	ldr	r1, .L86
.L77:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L71
.L87:
	.align	2, 0
.L86:
	.word	gBattleTextBuff1
.L72:
	mov	r4, #0x0
.L71:
	ldr	r0, .L88
	ldr	r1, [sp]
	mov	r2, sl
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	ldr	r1, .L88+0x4
	add	r0, r0, r1
	add	r1, r4, #0
	bl	StartSpriteAnim
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L89:
	.align	2, 0
.L88:
	.word	sSpriteTemplate_JudgmentIcon
	.word	gSprites
.Lfe3:
	.size	 ShowJudgmentSprite,.Lfe3-ShowJudgmentSprite
	.align	2, 0
	.type	 SpriteCb_JudgmentIcon,function
	.thumb_func
SpriteCb_JudgmentIcon:
	push	{lr}
	add	r1, r0, #0
	ldr	r0, .L92
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bls	.L91	@cond_branch
	add	r0, r1, #0
	bl	DestroySprite
.L91:
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	gBattleCommunication
.Lfe4:
	.size	 SpriteCb_JudgmentIcon,.Lfe4-SpriteCb_JudgmentIcon
	.align	2, 0
	.globl	BattleArena_InitPoints
	.type	 BattleArena_InitPoints,function
	.thumb_func
BattleArena_InitPoints:
	ldr	r0, .L95
	ldr	r2, [r0]
	mov	r0, #0x9b
	lsl	r0, r0, #0x2
	add	r1, r2, r0
	add	r0, r0, #0x2
	add	r3, r2, r0
	add	r0, r0, #0x2
	add	r2, r2, r0
	mov	r0, #0x0
	strb	r0, [r1]
	strb	r0, [r1, #0x1]
	strb	r0, [r3]
	strb	r0, [r3, #0x1]
	ldr	r0, .L95+0x4
	ldrh	r1, [r0, #0x2a]
	strh	r1, [r2]
	add	r0, r0, #0x86
	ldrh	r0, [r0]
	strh	r0, [r2, #0x2]
	bx	lr
.L96:
	.align	2, 0
.L95:
	.word	gBattleStruct
	.word	gBattleMons
.Lfe5:
	.size	 BattleArena_InitPoints,.Lfe5-BattleArena_InitPoints
	.align	2, 0
	.globl	BattleArena_AddMindPoints
	.type	 BattleArena_AddMindPoints,function
	.thumb_func
BattleArena_AddMindPoints:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L98
	ldr	r1, [r1]
	mov	r2, #0x9b
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	add	r1, r1, r0
	ldr	r2, .L98+0x4
	ldr	r0, .L98+0x8
	ldrh	r0, [r0]
	add	r0, r0, r2
	ldrb	r0, [r0]
	ldrb	r2, [r1]
	add	r0, r0, r2
	strb	r0, [r1]
	bx	lr
.L99:
	.align	2, 0
.L98:
	.word	gBattleStruct
	.word	sMindRatings
	.word	gCurrentMove
.Lfe6:
	.size	 BattleArena_AddMindPoints,.Lfe6-BattleArena_AddMindPoints
	.align	2, 0
	.globl	BattleArena_AddSkillPoints
	.type	 BattleArena_AddSkillPoints,function
	.thumb_func
BattleArena_AddSkillPoints:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r6, r3, #0
	ldr	r0, .L117
	ldr	r2, [r0]
	ldr	r0, .L117+0x4
	add	r5, r2, r0
	ldr	r0, .L117+0x8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L101	@cond_branch
	ldr	r0, .L117+0xc
	add	r4, r2, r0
	ldrb	r2, [r4]
	ldr	r0, .L117+0x10
	lsl	r1, r3, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L102	@cond_branch
	bic	r2, r2, r1
	strb	r2, [r4]
	add	r1, r5, r3
	ldrb	r0, [r1]
	sub	r0, r0, #0x2
	b	.L115
.L118:
	.align	2, 0
.L117:
	.word	gBattleStruct
	.word	0x26e
	.word	gHitMarker
	.word	0x276
	.word	gBitTable
.L102:
	ldr	r0, .L119
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L104	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L106	@cond_branch
	ldr	r0, .L119+0x4
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	beq	.L101	@cond_branch
.L106:
	add	r1, r5, r3
	ldrb	r0, [r1]
	sub	r0, r0, #0x2
	b	.L115
.L120:
	.align	2, 0
.L119:
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L104:
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0x6
	bne	.L108	@cond_branch
	add	r1, r5, r3
	b	.L116
.L108:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L110	@cond_branch
	add	r1, r5, r3
	ldrb	r0, [r1]
	add	r0, r0, #0x2
	b	.L115
.L110:
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L112	@cond_branch
	add	r1, r5, r3
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	b	.L115
.L112:
	ldr	r0, .L121
	lsl	r1, r6, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L101	@cond_branch
	add	r1, r5, r6
.L116:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
.L115:
	strb	r0, [r1]
.L101:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L122:
	.align	2, 0
.L121:
	.word	gProtectStructs
.Lfe7:
	.size	 BattleArena_AddSkillPoints,.Lfe7-BattleArena_AddSkillPoints
	.align	2, 0
	.globl	BattleArena_DeductMindPoints
	.type	 BattleArena_DeductMindPoints,function
	.thumb_func
BattleArena_DeductMindPoints:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r2, r1, #0
	ldr	r0, .L149
	ldr	r0, [r0]
	ldr	r5, .L149+0x4
	add	r3, r0, r5
	mov	r0, #0x99
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bgt	.L146	@cond_branch
	sub	r0, r0, #0x1
	cmp	r1, r0
	bge	.L143	@cond_branch
	cmp	r1, #0xc5
	bgt	.L147	@cond_branch
	cmp	r1, #0xc3
	bge	.L143	@cond_branch
	cmp	r1, #0x77
	beq	.L143	@cond_branch
	b	.L124
.L150:
	.align	2, 0
.L149:
	.word	gBattleStruct
	.word	0x26e
.L147:
	cmp	r1, #0xc7
	blt	.L124	@cond_branch
	cmp	r1, #0xcc
	ble	.L143	@cond_branch
	cmp	r1, #0xce
	beq	.L143	@cond_branch
	b	.L124
.L146:
	ldr	r0, .L151
	cmp	r1, r0
	beq	.L143	@cond_branch
	cmp	r1, r0
	bgt	.L148	@cond_branch
	sub	r0, r0, #0x12
	cmp	r1, r0
	beq	.L143	@cond_branch
	add	r0, r0, #0x2
	cmp	r1, r0
	beq	.L143	@cond_branch
	b	.L124
.L152:
	.align	2, 0
.L151:
	.word	0x147
.L148:
	mov	r0, #0xad
	lsl	r0, r0, #0x1
	cmp	r2, r0
	blt	.L124	@cond_branch
	add	r0, r0, #0x1
	cmp	r2, r0
	ble	.L143	@cond_branch
	add	r0, r0, #0x3
	cmp	r2, r0
	bne	.L124	@cond_branch
.L143:
	add	r1, r3, r4
	ldrb	r0, [r1]
	sub	r0, r0, #0x3
	strb	r0, [r1]
.L124:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 BattleArena_DeductMindPoints,.Lfe8-BattleArena_DeductMindPoints
	.align	2, 0
	.globl	sub_81A586C
	.type	 sub_81A586C,function
	.thumb_func
sub_81A586C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L155
	ldr	r3, [r1]
	mov	r1, #0x9c
	lsl	r1, r1, #0x2
	add	r3, r3, r1
	lsl	r2, r0, #0x1
	add	r2, r2, r3
	ldr	r5, .L155+0x4
	mov	r4, #0x5c
	mov	r1, r0
	mul	r1, r1, r4
	add	r1, r1, r5
	ldrh	r1, [r1, #0x2a]
	strh	r1, [r2]
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r1, r0, #0x1
	add	r1, r1, r3
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r2, [r0, #0x2a]
	ldrh	r0, [r1]
	cmp	r0, r2
	bls	.L154	@cond_branch
	strh	r2, [r1]
.L154:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L156:
	.align	2, 0
.L155:
	.word	gBattleStruct
	.word	gBattleMons
.Lfe9:
	.size	 sub_81A586C,.Lfe9-sub_81A586C
	.align	2, 0
	.type	 InitArenaChallenge,function
	.thumb_func
InitArenaChallenge:
	push	{r4, r5, r6, lr}
	ldr	r4, .L162
	ldr	r1, [r4]
	ldr	r3, .L162+0x4
	add	r0, r1, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r5, r0, #0x1e
	mov	r0, #0xc3
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	mov	r2, #0x0
	strb	r2, [r1]
	ldr	r1, [r4]
	ldr	r6, .L162+0x8
	add	r0, r1, r6
	strh	r2, [r0]
	add	r1, r1, r3
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r4]
	add	r1, r1, r3
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	cmp	r5, #0
	beq	.L158	@cond_branch
	ldr	r0, [r4]
	ldr	r1, .L162+0xc
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, #0x80
	b	.L161
.L163:
	.align	2, 0
.L162:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	0xc3a
	.word	0xc64
.L158:
	ldr	r0, [r4]
	ldr	r3, .L164
	add	r0, r0, r3
	ldr	r2, [r0]
	mov	r0, #0x40
.L161:
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L160	@cond_branch
	ldr	r0, [r4]
	lsl	r1, r5, #0x1
	ldr	r6, .L164+0x4
	add	r0, r0, r6
	add	r0, r0, r1
	strh	r2, [r0]
.L160:
	ldr	r0, .L164+0x8
	ldr	r0, [r0]
	mov	r1, #0x4
	ldrsb	r1, [r0, r1]
	mov	r2, #0x5
	ldrsb	r2, [r0, r2]
	mov	r3, #0x1
	neg	r3, r3
	mov	r0, #0x0
	bl	SetDynamicWarp
	ldr	r1, .L164+0xc
	mov	r0, #0x0
	strh	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L165:
	.align	2, 0
.L164:
	.word	0xc64
	.word	0xd62
	.word	gSaveBlock1Ptr
	.word	gTrainerBattleOpponent_A
.Lfe10:
	.size	 InitArenaChallenge,.Lfe10-InitArenaChallenge
	.align	2, 0
	.type	 GetArenaData,function
	.thumb_func
GetArenaData:
	push	{r4, lr}
	ldr	r0, .L178
	ldr	r3, [r0]
	ldr	r1, .L178+0x4
	add	r0, r3, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r1, r0, #0x1e
	ldr	r0, .L178+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x1
	beq	.L169	@cond_branch
	cmp	r0, #0x1
	bgt	.L175	@cond_branch
	cmp	r0, #0
	beq	.L168	@cond_branch
	b	.L167
.L179:
	.align	2, 0
.L178:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	gSpecialVar_0x8005
.L175:
	cmp	r0, #0x2
	beq	.L170	@cond_branch
	b	.L167
.L168:
	ldr	r0, .L180
	mov	r2, #0xd6
	lsl	r2, r2, #0x4
	add	r1, r3, r2
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L167
.L181:
	.align	2, 0
.L180:
	.word	gSpecialVar_Result
.L169:
	ldr	r2, .L182
	lsl	r1, r1, #0x1
	ldr	r4, .L182+0x4
	add	r0, r3, r4
	add	r0, r0, r1
	ldrh	r0, [r0]
	b	.L176
.L183:
	.align	2, 0
.L182:
	.word	gSpecialVar_Result
	.word	0xd62
.L170:
	cmp	r1, #0
	beq	.L171	@cond_branch
	ldr	r2, .L184
	ldr	r1, .L184+0x4
	add	r0, r3, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	b	.L177
.L185:
	.align	2, 0
.L184:
	.word	gSpecialVar_Result
	.word	0xc64
.L171:
	ldr	r2, .L186
	ldr	r4, .L186+0x4
	add	r0, r3, r4
	ldr	r0, [r0]
	mov	r1, #0x40
.L177:
	and	r0, r0, r1
.L176:
	strh	r0, [r2]
.L167:
	pop	{r4}
	pop	{r0}
	bx	r0
.L187:
	.align	2, 0
.L186:
	.word	gSpecialVar_Result
	.word	0xc64
.Lfe11:
	.size	 GetArenaData,.Lfe11-GetArenaData
	.align	2, 0
	.type	 SetArenaData,function
	.thumb_func
SetArenaData:
	push	{lr}
	ldr	r0, .L204
	ldr	r2, [r0]
	ldr	r1, .L204+0x4
	add	r0, r2, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r1, r0, #0x1e
	ldr	r0, .L204+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x1
	beq	.L191	@cond_branch
	cmp	r0, #0x1
	bgt	.L201	@cond_branch
	cmp	r0, #0
	beq	.L190	@cond_branch
	b	.L189
.L205:
	.align	2, 0
.L204:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	gSpecialVar_0x8005
.L201:
	cmp	r0, #0x2
	beq	.L192	@cond_branch
	b	.L189
.L190:
	ldr	r0, .L206
	ldrh	r1, [r0]
	mov	r3, #0xd6
	lsl	r3, r3, #0x4
	add	r0, r2, r3
	strh	r1, [r0]
	b	.L189
.L207:
	.align	2, 0
.L206:
	.word	gSpecialVar_0x8006
.L191:
	lsl	r1, r1, #0x1
	ldr	r3, .L208
	add	r0, r2, r3
	add	r0, r0, r1
	ldr	r1, .L208+0x4
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L189
.L209:
	.align	2, 0
.L208:
	.word	0xd62
	.word	gSpecialVar_0x8006
.L192:
	cmp	r1, #0
	beq	.L193	@cond_branch
	ldr	r0, .L210
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L194	@cond_branch
	ldr	r1, .L210+0x4
	add	r0, r2, r1
	ldr	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	b	.L202
.L211:
	.align	2, 0
.L210:
	.word	gSpecialVar_0x8006
	.word	0xc64
.L194:
	ldr	r3, .L212
	add	r0, r2, r3
	ldr	r1, [r0]
	mov	r2, #0x81
	neg	r2, r2
	b	.L203
.L213:
	.align	2, 0
.L212:
	.word	0xc64
.L193:
	ldr	r0, .L214
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L197	@cond_branch
	ldr	r1, .L214+0x4
	add	r0, r2, r1
	ldr	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	b	.L202
.L215:
	.align	2, 0
.L214:
	.word	gSpecialVar_0x8006
	.word	0xc64
.L197:
	ldr	r3, .L216
	add	r0, r2, r3
	ldr	r1, [r0]
	mov	r2, #0x41
	neg	r2, r2
.L203:
	and	r1, r1, r2
.L202:
	str	r1, [r0]
.L189:
	pop	{r0}
	bx	r0
.L217:
	.align	2, 0
.L216:
	.word	0xc64
.Lfe12:
	.size	 SetArenaData,.Lfe12-SetArenaData
	.align	2, 0
	.type	 SaveArenaChallenge,function
	.thumb_func
SaveArenaChallenge:
	push	{r4, lr}
	ldr	r4, .L219
	ldr	r0, [r4]
	ldr	r1, .L219+0x4
	ldrh	r1, [r1]
	mov	r2, #0xc3
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	strb	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	mov	r1, #0x0
	bl	VarSet
	ldr	r1, [r4]
	ldr	r0, .L219+0x8
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	bl	SaveGameFrontier
	pop	{r4}
	pop	{r0}
	bx	r0
.L220:
	.align	2, 0
.L219:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8005
	.word	0xc31
.Lfe13:
	.size	 SaveArenaChallenge,.Lfe13-SaveArenaChallenge
	.align	2, 0
	.type	 SetArenaPrize,function
	.thumb_func
SetArenaPrize:
	push	{r4, r5, lr}
	ldr	r4, .L225
	ldr	r1, [r4]
	ldr	r2, .L225+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1d
	ldr	r2, .L225+0x8
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0x29
	bls	.L222	@cond_branch
	bl	Random
	ldr	r4, [r4]
	ldr	r5, .L225+0xc
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x9
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	add	r0, r0, r5
	ldrh	r0, [r0]
	mov	r1, #0xd6
	lsl	r1, r1, #0x4
	add	r4, r4, r1
	b	.L224
.L226:
	.align	2, 0
.L225:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	0xd62
	.word	sLongStreakPrizeItems
.L222:
	bl	Random
	ldr	r4, [r4]
	ldr	r5, .L227
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x6
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	add	r0, r0, r5
	ldrh	r0, [r0]
	mov	r2, #0xd6
	lsl	r2, r2, #0x4
	add	r4, r4, r2
.L224:
	strh	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L228:
	.align	2, 0
.L227:
	.word	sShortStreakPrizeItems
.Lfe14:
	.size	 SetArenaPrize,.Lfe14-SetArenaPrize
	.align	2, 0
	.type	 GiveArenaPrize,function
	.thumb_func
GiveArenaPrize:
	push	{r4, r5, lr}
	ldr	r4, .L232
	ldr	r0, [r4]
	mov	r1, #0xd6
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0x1
	bl	AddBagItem
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x1
	bne	.L230	@cond_branch
	ldr	r0, [r4]
	mov	r1, #0xd6
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldr	r1, .L232+0x4
	bl	CopyItemName
	ldr	r0, [r4]
	mov	r1, #0xd6
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L232+0x8
	strh	r5, [r0]
	b	.L231
.L233:
	.align	2, 0
.L232:
	.word	gSaveBlock2Ptr
	.word	gStringVar1
	.word	gSpecialVar_Result
.L230:
	ldr	r1, .L234
	mov	r0, #0x0
	strh	r0, [r1]
.L231:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L235:
	.align	2, 0
.L234:
	.word	gSpecialVar_Result
.Lfe15:
	.size	 GiveArenaPrize,.Lfe15-GiveArenaPrize
	.align	2, 0
	.type	 BufferArenaOpponentName,function
	.thumb_func
BufferArenaOpponentName:
	push	{lr}
	ldr	r0, .L237
	ldr	r1, .L237+0x4
	ldrh	r1, [r1]
	bl	GetFrontierTrainerName
	pop	{r0}
	bx	r0
.L238:
	.align	2, 0
.L237:
	.word	gStringVar1
	.word	gTrainerBattleOpponent_A
.Lfe16:
	.size	 BufferArenaOpponentName,.Lfe16-BufferArenaOpponentName
	.align	2, 0
	.globl	DrawArenaRefereeTextBox
	.type	 DrawArenaRefereeTextBox,function
	.thumb_func
DrawArenaRefereeTextBox:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0xc
	mov	r0, #0x1b
	mov	r8, r0
	mov	r5, #0x7
	mov	r4, #0x1
	str	r4, [sp]
	mov	r6, #0x6
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xfe
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x20
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x31
	mov	r2, #0x0
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x33
	mov	r2, #0x1
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	mov	r0, r8
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x34
	mov	r2, #0x2
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	mov	r0, #0x1c
	mov	r8, r0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x35
	mov	r2, #0x1c
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x36
	mov	r2, #0x1d
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	mov	r6, #0x5
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x37
	mov	r2, #0x0
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	mov	r0, r8
	str	r0, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x39
	mov	r2, #0x1
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x3a
	mov	r2, #0x1d
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	ldr	r1, .L240
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	ldr	r1, .L240+0x4
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x1
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	ldr	r1, .L240+0x8
	mov	r0, #0x1a
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x2
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	ldr	r1, .L240+0xc
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x1c
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	ldr	r1, .L240+0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L241:
	.align	2, 0
.L240:
	.word	0x831
	.word	0x833
	.word	0x834
	.word	0x835
	.word	0x836
.Lfe17:
	.size	 DrawArenaRefereeTextBox,.Lfe17-DrawArenaRefereeTextBox
	.align	2, 0
	.globl	RemoveArenaRefereeTextBox
	.type	 RemoveArenaRefereeTextBox,function
	.thumb_func
RemoveArenaRefereeTextBox:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0xc
	mov	r5, #0x0
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x3
	mov	r2, #0x0
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	mov	r6, #0x4
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x4
	mov	r2, #0x1
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	mov	r0, #0x1b
	mov	r8, r0
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x5
	mov	r2, #0x2
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x6
	mov	r2, #0x1c
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x7
	mov	r2, #0x1d
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x8
	mov	r2, #0x0
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x9
	mov	r2, #0x1
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	mov	r0, r8
	str	r0, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0xa
	mov	r2, #0x2
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0xb
	mov	r2, #0x1c
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0xc
	mov	r2, #0x1d
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0xd
	mov	r2, #0x0
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0xe
	mov	r2, #0x1
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	mov	r0, r8
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0xf
	mov	r2, #0x2
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x10
	mov	r2, #0x1c
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x11
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 RemoveArenaRefereeTextBox,.Lfe18-RemoveArenaRefereeTextBox
.text
	.align	2, 0

