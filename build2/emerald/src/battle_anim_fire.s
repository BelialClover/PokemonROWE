@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sAnim_FireSpiralSpread_0,object
sAnim_FireSpiralSpread_0:
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_FireSpiralSpread_0,16
	.align	2, 0
	.type	 sAnim_FireSpiralSpread_1,object
sAnim_FireSpiralSpread_1:
	.short	0x10
	.byte	0xc4
	.space	1
	.short	0x20
	.byte	0xc4
	.space	1
	.short	0x30
	.byte	0xc4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_FireSpiralSpread_1,16
	.align	2, 0
	.type	 sAnims_FireSpiralSpread,object
sAnims_FireSpiralSpread:
	.word	sAnim_FireSpiralSpread_0
	.word	sAnim_FireSpiralSpread_1
	.size	 sAnims_FireSpiralSpread,8
	.globl	gFireSpiralInwardSpriteTemplate
	.align	2, 0
	.type	 gFireSpiralInwardSpriteTemplate,object
	.size	 gFireSpiralInwardSpriteTemplate,24
gFireSpiralInwardSpriteTemplate:
	.short	0x272d
	.short	0x272d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_FireSpiralSpread
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFireSpiralInward
	.globl	gFireSpreadSpriteTemplate
	.align	2, 0
	.type	 gFireSpreadSpriteTemplate,object
	.size	 gFireSpreadSpriteTemplate,24
gFireSpreadSpriteTemplate:
	.short	0x272d
	.short	0x272d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_FireSpiralSpread
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFireSpread
	.align	2, 0
	.type	 sAnim_LargeFlame,object
sAnim_LargeFlame:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x3
	.space	1
	.short	0x50
	.byte	0x3
	.space	1
	.short	0x60
	.byte	0x3
	.space	1
	.short	0x70
	.byte	0x3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_LargeFlame,36
	.align	2, 0
	.type	 sAnims_LargeFlame,object
sAnims_LargeFlame:
	.word	sAnim_LargeFlame
	.size	 sAnims_LargeFlame,4
	.align	2, 0
	.type	 sAnim_FirePlume,object
sAnim_FirePlume:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	0x30
	.byte	0x5
	.space	1
	.short	0x40
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_FirePlume,24
	.align	2, 0
	.type	 sAnims_FirePlume,object
sAnims_FirePlume:
	.word	sAnim_FirePlume
	.size	 sAnims_FirePlume,4
	.align	2, 0
	.type	 sAffineAnim_LargeFlame,object
sAffineAnim_LargeFlame:
	.short	0x32
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x20
	.short	0x0
	.byte	0x0
	.byte	0x7
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_LargeFlame,24
	.align	2, 0
	.type	 sAffineAnims_LargeFlame,object
sAffineAnims_LargeFlame:
	.word	sAffineAnim_LargeFlame
	.size	 sAffineAnims_LargeFlame,4
	.globl	gLargeFlameSpriteTemplate
	.align	2, 0
	.type	 gLargeFlameSpriteTemplate,object
	.size	 gLargeFlameSpriteTemplate,24
gLargeFlameSpriteTemplate:
	.short	0x2731
	.short	0x2731
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sAnims_LargeFlame
	.word	0x0
	.word	sAffineAnims_LargeFlame
	.word	AnimLargeFlame
	.globl	gLargeFlameScatterSpriteTemplate
	.align	2, 0
	.type	 gLargeFlameScatterSpriteTemplate,object
	.size	 gLargeFlameScatterSpriteTemplate,24
gLargeFlameScatterSpriteTemplate:
	.short	0x2731
	.short	0x2731
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_LargeFlame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimLargeFlame
	.globl	gFirePlumeSpriteTemplate
	.align	2, 0
	.type	 gFirePlumeSpriteTemplate,object
	.size	 gFirePlumeSpriteTemplate,24
gFirePlumeSpriteTemplate:
	.short	0x2733
	.short	0x2733
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_FirePlume
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFirePlume
	.globl	gUnknown_08595440
	.align	2, 0
	.type	 gUnknown_08595440,object
	.size	 gUnknown_08595440,24
gUnknown_08595440:
	.short	0x272d
	.short	0x272d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_FirePlume
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFirePlume
	.align	2, 0
	.type	 gUnknown_08595458,object
gUnknown_08595458:
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0x6
	.space	1
	.short	0x30
	.byte	0x6
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08595458,16
	.align	2, 0
	.type	 gUnknown_08595468,object
gUnknown_08595468:
	.word	gUnknown_08595458
	.size	 gUnknown_08595468,4
	.globl	gUnknown_0859546C
	.align	2, 0
	.type	 gUnknown_0859546C,object
	.size	 gUnknown_0859546C,24
gUnknown_0859546C:
	.short	0x272d
	.short	0x272d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gUnknown_08595468
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8109064
	.align	2, 0
	.type	 sAffineAnim_SunlightRay,object
sAffineAnim_SunlightRay:
	.short	0x50
	.short	0x50
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x2
	.short	0x2
	.byte	0xa
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sAffineAnim_SunlightRay,24
	.align	2, 0
	.type	 sAffineAnims_SunlightRay,object
sAffineAnims_SunlightRay:
	.word	sAffineAnim_SunlightRay
	.size	 sAffineAnims_SunlightRay,4
	.globl	gSunlightRaySpriteTemplate
	.align	2, 0
	.type	 gSunlightRaySpriteTemplate,object
	.size	 gSunlightRaySpriteTemplate,24
gSunlightRaySpriteTemplate:
	.short	0x27ad
	.short	0x27ad
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_SunlightRay
	.word	AnimSunlight
	.align	2, 0
	.type	 sAnim_BasicFire,object
sAnim_BasicFire:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_BasicFire,24
	.globl	gAnims_BasicFire
	.align	2, 0
	.type	 gAnims_BasicFire,object
gAnims_BasicFire:
	.word	sAnim_BasicFire
	.size	 gAnims_BasicFire,4
	.globl	gEmberSpriteTemplate
	.align	2, 0
	.type	 gEmberSpriteTemplate,object
	.size	 gEmberSpriteTemplate,24
gEmberSpriteTemplate:
	.short	0x272d
	.short	0x272d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	TranslateAnimSpriteToTargetMonLocation
	.globl	gEmberFlareSpriteTemplate
	.align	2, 0
	.type	 gEmberFlareSpriteTemplate,object
	.size	 gEmberFlareSpriteTemplate,24
gEmberFlareSpriteTemplate:
	.short	0x272d
	.short	0x272d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_BasicFire
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimEmberFlare
	.globl	gIncinerateAnim1
	.align	2, 0
	.type	 gIncinerateAnim1,object
gIncinerateAnim1:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gIncinerateAnim1,16
	.globl	gIncinerateAnims
	.align	2, 0
	.type	 gIncinerateAnims,object
gIncinerateAnims:
	.word	gIncinerateAnim1
	.size	 gIncinerateAnims,4
	.globl	gIncinerateSpriteTemplate
	.align	2, 0
	.type	 gIncinerateSpriteTemplate,object
	.size	 gIncinerateSpriteTemplate,24
gIncinerateSpriteTemplate:
	.short	0x272d
	.short	0x272d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gIncinerateAnims
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	TranslateAnimSpriteToTargetMonLocation
	.globl	gBurnFlameSpriteTemplate
	.align	2, 0
	.type	 gBurnFlameSpriteTemplate,object
	.size	 gBurnFlameSpriteTemplate,24
gBurnFlameSpriteTemplate:
	.short	0x272d
	.short	0x272d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_BasicFire
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBurnFlame
	.globl	gFireBlastRingSpriteTemplate
	.align	2, 0
	.type	 gFireBlastRingSpriteTemplate,object
	.size	 gFireBlastRingSpriteTemplate,24
gFireBlastRingSpriteTemplate:
	.short	0x272d
	.short	0x272d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_BasicFire
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFireRing
	.align	2, 0
	.type	 sAnim_FireBlastCross,object
sAnim_FireBlastCross:
	.short	0x20
	.byte	0x6
	.space	1
	.short	0x30
	.byte	0x6
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_FireBlastCross,12
	.globl	gAnims_FireBlastCross
	.align	2, 0
	.type	 gAnims_FireBlastCross,object
gAnims_FireBlastCross:
	.word	sAnim_FireBlastCross
	.size	 gAnims_FireBlastCross,4
	.align	2, 0
	.type	 gUnknown_08595544,object
gUnknown_08595544:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08595544,16
	.align	2, 0
	.type	 gUnknown_08595554,object
gUnknown_08595554:
	.short	0xa0
	.short	0xa0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08595554,16
	.align	2, 0
	.type	 gUnknown_08595564,object
gUnknown_08595564:
	.word	gUnknown_08595544
	.word	gUnknown_08595554
	.size	 gUnknown_08595564,8
	.globl	gFireBlastCrossSpriteTemplate
	.align	2, 0
	.type	 gFireBlastCrossSpriteTemplate,object
	.size	 gFireBlastCrossSpriteTemplate,24
gFireBlastCrossSpriteTemplate:
	.short	0x272d
	.short	0x272d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_FireBlastCross
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFireCross
	.globl	gFireSpiralOutwardSpriteTemplate
	.align	2, 0
	.type	 gFireSpiralOutwardSpriteTemplate,object
	.size	 gFireSpiralOutwardSpriteTemplate,24
gFireSpiralOutwardSpriteTemplate:
	.short	0x272d
	.short	0x272d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_BasicFire
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFireSpiralOutward
	.globl	gWeatherBallFireDownSpriteTemplate
	.align	2, 0
	.type	 gWeatherBallFireDownSpriteTemplate,object
	.size	 gWeatherBallFireDownSpriteTemplate,24
gWeatherBallFireDownSpriteTemplate:
	.short	0x272d
	.short	0x272d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_BasicFire
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWeatherBallDown
	.globl	gEruptionLaunchRockSpriteTemplate
	.align	2, 0
	.type	 gEruptionLaunchRockSpriteTemplate,object
	.size	 gEruptionLaunchRockSpriteTemplate,24
gEruptionLaunchRockSpriteTemplate:
	.short	0x27d9
	.short	0x27d9
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimEruptionLaunchRock
	.align	1, 0
	.type	 sEruptionLaunchRockCoords,object
sEruptionLaunchRockCoords:
	.short	-0x2
	.short	-0x5
	.short	-0x1
	.short	-0x1
	.short	0x3
	.short	-0x6
	.short	0x4
	.short	-0x2
	.short	0x2
	.short	-0x8
	.short	-0x5
	.short	-0x5
	.short	0x4
	.short	-0x7
	.size	 sEruptionLaunchRockCoords,28
	.globl	gEruptionFallingRockSpriteTemplate
	.align	2, 0
	.type	 gEruptionFallingRockSpriteTemplate,object
	.size	 gEruptionFallingRockSpriteTemplate,24
gEruptionFallingRockSpriteTemplate:
	.short	0x27d9
	.short	0x27d9
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimEruptionFallingRock
	.align	2, 0
	.type	 sAnim_WillOWispOrb_0,object
sAnim_WillOWispOrb_0:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_WillOWispOrb_0,20
	.align	2, 0
	.type	 sAnim_WillOWispOrb_1,object
sAnim_WillOWispOrb_1:
	.short	0x10
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_WillOWispOrb_1,8
	.align	2, 0
	.type	 sAnim_WillOWispOrb_2,object
sAnim_WillOWispOrb_2:
	.short	0x14
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_WillOWispOrb_2,8
	.align	2, 0
	.type	 sAnim_WillOWispOrb_3,object
sAnim_WillOWispOrb_3:
	.short	0x14
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_WillOWispOrb_3,8
	.align	2, 0
	.type	 sAnims_WillOWispOrb,object
sAnims_WillOWispOrb:
	.word	sAnim_WillOWispOrb_0
	.word	sAnim_WillOWispOrb_1
	.word	sAnim_WillOWispOrb_2
	.word	sAnim_WillOWispOrb_3
	.size	 sAnims_WillOWispOrb,16
	.globl	gWillOWispOrbSpriteTemplate
	.align	2, 0
	.type	 gWillOWispOrbSpriteTemplate,object
	.size	 gWillOWispOrbSpriteTemplate,24
gWillOWispOrbSpriteTemplate:
	.short	0x27f7
	.short	0x27f7
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sAnims_WillOWispOrb
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWillOWispOrb
	.align	2, 0
	.type	 sAnim_WillOWispFire,object
sAnim_WillOWispFire:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	0x30
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_WillOWispFire,20
	.align	2, 0
	.type	 sAnims_WillOWispFire,object
sAnims_WillOWispFire:
	.word	sAnim_WillOWispFire
	.size	 sAnims_WillOWispFire,4
	.globl	gWillOWispFireSpriteTemplate
	.align	2, 0
	.type	 gWillOWispFireSpriteTemplate,object
	.size	 gWillOWispFireSpriteTemplate,24
gWillOWispFireSpriteTemplate:
	.short	0x27f8
	.short	0x27f8
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_WillOWispFire
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWillOWispFire
	.type	 sShakeDirsPattern0,object
	.size	 sShakeDirsPattern0,16
sShakeDirsPattern0:
	.byte	-0x1
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	-0x1
	.byte	-0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.type	 sShakeDirsPattern1,object
	.size	 sShakeDirsPattern1,16
sShakeDirsPattern1:
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.globl	gLavaPlumeAffineAnimCmd
	.align	2, 0
	.type	 gLavaPlumeAffineAnimCmd,object
gLavaPlumeAffineAnimCmd:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gLavaPlumeAffineAnimCmd,24
	.globl	gLavaPlumeAffineAnims
	.align	2, 0
	.type	 gLavaPlumeAffineAnims,object
gLavaPlumeAffineAnims:
	.word	gLavaPlumeAffineAnimCmd
	.size	 gLavaPlumeAffineAnims,4
	.globl	gLavaPlumeSpriteTemplate
	.align	2, 0
	.type	 gLavaPlumeSpriteTemplate,object
	.size	 gLavaPlumeSpriteTemplate,24
gLavaPlumeSpriteTemplate:
	.short	0x2733
	.short	0x2733
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_FirePlume
	.word	0x0
	.word	gLavaPlumeAffineAnims
	.word	AnimLavaPlumeOrbitScatter
	.globl	gSpacialRendBladesTemplate
	.align	2, 0
	.type	 gSpacialRendBladesTemplate,object
	.size	 gSpacialRendBladesTemplate,24
gSpacialRendBladesTemplate:
	.short	0x284c
	.short	0x273d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_BasicFire
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFireSpiralOutward
	.globl	gSpacialRendBladesTemplate2
	.align	2, 0
	.type	 gSpacialRendBladesTemplate2,object
	.size	 gSpacialRendBladesTemplate2,24
gSpacialRendBladesTemplate2:
	.short	0x284c
	.short	0x273d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_FireSpiralSpread
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFireSpread
.text
	.align	2, 0
	.type	 AnimLavaPlumeOrbitScatter,function
	.thumb_func
AnimLavaPlumeOrbitScatter:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L3
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L3+0x4
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	Sin
	strh	r0, [r5, #0x2e]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0x7
	bl	Cos
	strh	r0, [r5, #0x30]
	ldr	r0, .L3+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimLavaPlumeOrbitScatterStep
.Lfe1:
	.size	 AnimLavaPlumeOrbitScatter,.Lfe1-AnimLavaPlumeOrbitScatter
	.align	2, 0
	.type	 AnimLavaPlumeOrbitScatterStep,function
	.thumb_func
AnimLavaPlumeOrbitScatterStep:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x30]
	ldrh	r3, [r2, #0x26]
	add	r0, r0, r3
	strh	r0, [r2, #0x26]
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	mov	r3, #0x24
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	add	r0, r0, #0x10
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bhi	.L7	@cond_branch
	mov	r0, #0x22
	ldrsh	r1, [r2, r0]
	mov	r3, #0x26
	ldrsh	r0, [r2, r3]
	add	r1, r1, r0
	cmp	r1, #0xa0
	bgt	.L7	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	bge	.L6	@cond_branch
.L7:
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L6:
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 AnimLavaPlumeOrbitScatterStep,.Lfe2-AnimLavaPlumeOrbitScatterStep
	.align	2, 0
	.type	 AnimFireSpiralInward,function
	.thumb_func
AnimFireSpiralInward:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L9
	ldrh	r0, [r0]
	strh	r0, [r4, #0x2e]
	mov	r0, #0x3c
	strh	r0, [r4, #0x30]
	mov	r0, #0x9
	strh	r0, [r4, #0x32]
	mov	r0, #0x1e
	strh	r0, [r4, #0x34]
	mov	r0, #0xfe
	lsl	r0, r0, #0x8
	strh	r0, [r4, #0x36]
	ldr	r1, .L9+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L9+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L10:
	.align	2, 0
.L9:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	TranslateSpriteInGrowingCircleOverDuration
.Lfe3:
	.size	 AnimFireSpiralInward,.Lfe3-AnimFireSpiralInward
	.align	2, 0
	.globl	AnimFireSpread
	.type	 AnimFireSpread,function
	.thumb_func
AnimFireSpread:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L12
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x32]
	ldr	r0, .L12+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L12+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	gBattleAnimArgs
	.word	TranslateSpriteLinearFixedPoint
	.word	DestroyAnimSprite
.Lfe4:
	.size	 AnimFireSpread,.Lfe4-AnimFireSpread
	.align	2, 0
	.type	 AnimFirePlume,function
	.thumb_func
AnimFirePlume:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L17
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L15	@cond_branch
	ldr	r2, .L17+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r2, #0x8]
	neg	r0, r0
	strh	r0, [r4, #0x32]
	add	r1, r2, #0
	b	.L16
.L18:
	.align	2, 0
.L17:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L15:
	ldr	r1, .L19
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x32]
.L16:
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x36]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x34]
	ldr	r0, .L19+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	gBattleAnimArgs
	.word	sub_8109028
.Lfe5:
	.size	 AnimFirePlume,.Lfe5-AnimFirePlume
	.align	2, 0
	.type	 AnimLargeFlame,function
	.thumb_func
AnimLargeFlame:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L24
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L22	@cond_branch
	ldr	r2, .L24+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r4, #0x32]
	add	r1, r2, #0
	b	.L23
.L25:
	.align	2, 0
.L24:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L22:
	ldr	r1, .L26
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x8]
	neg	r0, r0
	strh	r0, [r4, #0x32]
.L23:
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x36]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x34]
	ldr	r0, .L26+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	gBattleAnimArgs
	.word	sub_8109028
.Lfe6:
	.size	 AnimLargeFlame,.Lfe6-AnimLargeFlame
	.align	2, 0
	.type	 sub_8109028,function
	.thumb_func
sub_8109028:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x36
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	bge	.L29	@cond_branch
	ldrh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x34]
	ldrh	r3, [r2, #0x26]
	add	r0, r0, r3
	strh	r0, [r2, #0x26]
.L29:
	mov	r0, #0x2e
	ldrsh	r1, [r2, r0]
	mov	r3, #0x30
	ldrsh	r0, [r2, r3]
	cmp	r1, r0
	bne	.L30	@cond_branch
	add	r0, r2, #0
	bl	DestroySpriteAndMatrix
.L30:
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 sub_8109028,.Lfe7-sub_8109028
	.align	2, 0
	.type	 sub_8109064,function
	.thumb_func
sub_8109064:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L35
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L32	@cond_branch
	ldr	r0, .L35+0x4
	ldrh	r1, [r4, #0x20]
	ldrh	r2, [r0]
	sub	r1, r1, r2
	strh	r1, [r4, #0x20]
	b	.L34
.L36:
	.align	2, 0
.L35:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L32:
	ldr	r0, .L37
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	add	r2, r4, #0
	add	r2, r2, #0x43
	mov	r1, #0x8
	strb	r1, [r2]
.L34:
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x22]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r2, #0xa]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r2, #0xc]
	strh	r0, [r4, #0x36]
	strh	r1, [r4, #0x38]
	ldr	r0, .L37+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	gBattleAnimArgs
	.word	sub_81090D8
.Lfe8:
	.size	 sub_8109064,.Lfe8-sub_8109064
	.align	2, 0
	.type	 sub_81090D8,function
	.thumb_func
sub_81090D8:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L40	@cond_branch
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	ldr	r0, .L47
	cmp	r1, r0
	ble	.L41	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1
	strb	r0, [r1]
.L41:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r2, [r4, #0x30]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r2, [r4, #0x30]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x36]
	ldrh	r2, [r4, #0x38]
	add	r0, r0, r2
	strh	r0, [r4, #0x38]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L42	@cond_branch
	ldr	r2, .L47+0x4
	b	.L46
.L48:
	.align	2, 0
.L47:
	.word	0x2710
	.word	-0x100
.L42:
	cmp	r0, #0
	bge	.L43	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L46:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L43:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L45
.L40:
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L45:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 sub_81090D8,.Lfe9-sub_81090D8
	.align	2, 0
	.type	 AnimSunlight,function
	.thumb_func
AnimSunlight:
	push	{lr}
	mov	r1, #0x0
	strh	r1, [r0, #0x20]
	strh	r1, [r0, #0x22]
	mov	r1, #0x3c
	strh	r1, [r0, #0x2e]
	mov	r1, #0x8c
	strh	r1, [r0, #0x32]
	mov	r1, #0x50
	strh	r1, [r0, #0x36]
	ldr	r1, .L50
	str	r1, [r0, #0x1c]
	ldr	r1, .L50+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe10:
	.size	 AnimSunlight,.Lfe10-AnimSunlight
	.align	2, 0
	.type	 AnimEmberFlare,function
	.thumb_func
AnimEmberFlare:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r5, .L55
	ldrb	r0, [r5]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldr	r0, .L55+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L53	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	ldrb	r1, [r5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	beq	.L54	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	ldrb	r1, [r5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	bne	.L53	@cond_branch
.L54:
	ldr	r1, .L55+0x8
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L53:
	ldr	r1, .L55+0xc
	str	r1, [r6, #0x1c]
	add	r0, r6, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimTravelDiagonally
.Lfe11:
	.size	 AnimEmberFlare,.Lfe11-AnimEmberFlare
	.align	2, 0
	.type	 AnimBurnFlame,function
	.thumb_func
AnimBurnFlame:
	ldr	r2, .L58
	ldrh	r1, [r2]
	neg	r1, r1
	strh	r1, [r2]
	ldrh	r1, [r2, #0x4]
	neg	r1, r1
	strh	r1, [r2, #0x4]
	ldr	r1, .L58+0x4
	str	r1, [r0, #0x1c]
	bx	lr
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimArgs
	.word	AnimTravelDiagonally
.Lfe12:
	.size	 AnimBurnFlame,.Lfe12-AnimBurnFlame
	.align	2, 0
	.type	 AnimFireRing,function
	.thumb_func
AnimFireRing:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L61
	ldrh	r0, [r0, #0x4]
	mov	r1, #0x0
	strh	r0, [r4, #0x3c]
	strh	r1, [r4, #0x2e]
	ldr	r0, .L61+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	gBattleAnimArgs
	.word	AnimFireRing_Step1
.Lfe13:
	.size	 AnimFireRing,.Lfe13-AnimFireRing
	.align	2, 0
	.type	 AnimFireRing_Step1,function
	.thumb_func
AnimFireRing_Step1:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	UpdateFireRingCircleOffset
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x12
	bne	.L64	@cond_branch
	mov	r0, #0x19
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x30]
	ldr	r4, .L65
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	InitAnimLinearTranslation
	ldr	r0, .L65+0x4
	str	r0, [r5, #0x1c]
.L64:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	gBattleAnimTarget
	.word	AnimFireRing_Step2
.Lfe14:
	.size	 AnimFireRing_Step1,.Lfe14-AnimFireRing_Step1
	.align	2, 0
	.type	 AnimFireRing_Step2,function
	.thumb_func
AnimFireRing_Step2:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L68	@cond_branch
	mov	r4, #0x0
	strh	r4, [r6, #0x2e]
	ldr	r5, .L70
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x22]
	strh	r4, [r6, #0x26]
	strh	r4, [r6, #0x24]
	ldr	r1, .L70+0x4
	str	r1, [r6, #0x1c]
	add	r0, r6, #0
	bl	_call_via_r1
	b	.L69
.L71:
	.align	2, 0
.L70:
	.word	gBattleAnimTarget
	.word	AnimFireRing_Step3
.L68:
	mov	r1, #0x3c
	ldrsh	r0, [r6, r1]
	mov	r1, #0x1c
	bl	Sin
	ldrh	r1, [r6, #0x24]
	add	r0, r0, r1
	strh	r0, [r6, #0x24]
	mov	r1, #0x3c
	ldrsh	r0, [r6, r1]
	mov	r1, #0x1c
	bl	Cos
	ldrh	r1, [r6, #0x26]
	add	r0, r0, r1
	strh	r0, [r6, #0x26]
	ldrh	r0, [r6, #0x3c]
	add	r0, r0, #0x14
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r6, #0x3c]
.L69:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 AnimFireRing_Step2,.Lfe15-AnimFireRing_Step2
	.align	2, 0
	.type	 AnimFireRing_Step3,function
	.thumb_func
AnimFireRing_Step3:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdateFireRingCircleOffset
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L73	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L73:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 AnimFireRing_Step3,.Lfe16-AnimFireRing_Step3
	.align	2, 0
	.type	 UpdateFireRingCircleOffset,function
	.thumb_func
UpdateFireRingCircleOffset:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	mov	r1, #0x1c
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	mov	r1, #0x1c
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x14
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x3c]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 UpdateFireRingCircleOffset,.Lfe17-UpdateFireRingCircleOffset
	.align	2, 0
	.type	 AnimFireCross,function
	.thumb_func
AnimFireCross:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L76
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x32]
	ldr	r1, .L76+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L76+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	TranslateSpriteLinear
.Lfe18:
	.size	 AnimFireCross,.Lfe18-AnimFireCross
	.align	2, 0
	.globl	AnimFireSpiralOutward
	.type	 AnimFireSpiralOutward,function
	.thumb_func
AnimFireSpiralOutward:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r1, .L79
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x2e]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L79+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L79+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	AnimFireSpiralOutward_Step1
.Lfe19:
	.size	 AnimFireSpiralOutward,.Lfe19-AnimFireSpiralOutward
	.align	2, 0
	.type	 AnimFireSpiralOutward_Step1,function
	.thumb_func
AnimFireSpiralOutward_Step1:
	push	{lr}
	add	r3, r0, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r3]
	ldrh	r1, [r0, #0x30]
	mov	r2, #0x0
	strh	r1, [r0, #0x2e]
	strh	r2, [r0, #0x30]
	ldr	r1, .L82
	str	r1, [r0, #0x1c]
	bl	_call_via_r1
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	AnimFireSpiralOutward_Step2
.Lfe20:
	.size	 AnimFireSpiralOutward_Step1,.Lfe20-AnimFireSpiralOutward_Step1
	.align	2, 0
	.type	 AnimFireSpiralOutward_Step2,function
	.thumb_func
AnimFireSpiralOutward_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0xa
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0xd0
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L85	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L85:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 AnimFireSpiralOutward_Step2,.Lfe21-AnimFireSpiralOutward_Step2
	.align	2, 0
	.globl	AnimTask_EruptionLaunchRocks
	.type	 AnimTask_EruptionLaunchRocks,function
	.thumb_func
AnimTask_EruptionLaunchRocks:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L87
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x26]
	strh	r5, [r4, #0x8]
	strh	r5, [r4, #0xa]
	strh	r5, [r4, #0xc]
	strh	r5, [r4, #0xe]
	ldr	r2, .L87+0x4
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x22]
	strh	r0, [r4, #0x10]
	ldr	r0, .L87+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x12]
	strh	r5, [r4, #0x14]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r0, .L87+0xc
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gTasks
	.word	gSprites
	.word	gBattleAnimAttacker
	.word	AnimTask_EruptionLaunchRocks_Step
.Lfe22:
	.size	 AnimTask_EruptionLaunchRocks,.Lfe22-AnimTask_EruptionLaunchRocks
	.align	2, 0
	.type	 AnimTask_EruptionLaunchRocks_Step,function
	.thumb_func
AnimTask_EruptionLaunchRocks_Step:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L123
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x6
	bls	.LCB1123
	b	.L90	@long jump
.LCB1123:
	lsl	r0, r0, #0x2
	ldr	r1, .L123+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L124:
	.align	2, 0
.L123:
	.word	gTasks
	.word	.L119
	.align	2, 0
	.align	2, 0
.L119:
	.word	.L91
	.word	.L92
	.word	.L99
	.word	.L103
	.word	.L105
	.word	.L113
	.word	.L116
.L91:
	ldrh	r1, [r4, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	mov	r0, #0xe0
	str	r0, [sp]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x20
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	add	r2, r3, #0
	bl	sub_80A805C
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L92:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L93	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L94	@cond_branch
	ldr	r2, .L125
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	b	.L120
.L126:
	.align	2, 0
.L125:
	.word	gSprites
.L94:
	ldr	r2, .L127
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L127+0x4
.L120:
	strh	r1, [r0, #0x24]
.L93:
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L96	@cond_branch
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L96	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xe]
	ldr	r2, .L127
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x22]
.L96:
	add	r0, r4, #0
	bl	sub_80A80C8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	beq	.LCB1247
	b	.L90	@long jump
.LCB1247:
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromYScale
	ldr	r2, .L127
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r5, [r0, #0x24]
	strh	r5, [r4, #0xa]
	strh	r5, [r4, #0xc]
	strh	r5, [r4, #0xe]
	b	.L121
.L128:
	.align	2, 0
.L127:
	.word	gSprites
	.word	0xfffd
.L99:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bgt	.LCB1281
	b	.L90	@long jump
.LCB1281:
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L101	@cond_branch
	ldrh	r1, [r4, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	str	r0, [sp]
	mov	r0, #0xf0
	str	r0, [sp, #0x4]
	mov	r0, #0x6
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	mov	r2, #0xe0
	bl	sub_80A805C
	b	.L102
.L101:
	ldrh	r1, [r4, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	str	r0, [sp]
	mov	r0, #0xc0
	str	r0, [sp, #0x4]
	mov	r0, #0x6
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	mov	r2, #0xe0
	bl	sub_80A805C
.L102:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L121
.L103:
	add	r0, r4, #0
	bl	sub_80A80C8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1340
	b	.L90	@long jump
.LCB1340:
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r5, #0
	mov	r2, #0x6
	bl	CreateEruptionLaunchRocks
	b	.L121
.L105:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L106	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L107	@cond_branch
	ldr	r2, .L129
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	add	r1, r1, #0x3
	b	.L122
.L130:
	.align	2, 0
.L129:
	.word	gSprites
.L107:
	ldr	r2, .L131
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	sub	r1, r1, #0x3
.L122:
	strh	r1, [r0, #0x26]
.L106:
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x18
	ble	.L90	@cond_branch
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L110	@cond_branch
	ldrh	r1, [r4, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0xc0
	lsl	r2, r2, #0x1
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x8
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	mov	r3, #0xf0
	bl	sub_80A805C
	b	.L111
.L132:
	.align	2, 0
.L131:
	.word	gSprites
.L110:
	ldrh	r1, [r4, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0xc0
	lsl	r2, r2, #0x1
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x8
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	mov	r3, #0xc0
	bl	sub_80A805C
.L111:
	ldrh	r1, [r4, #0xc]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L112	@cond_branch
	ldr	r2, .L133
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	sub	r1, r1, #0x3
	strh	r1, [r0, #0x26]
.L112:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	b	.L121
.L134:
	.align	2, 0
.L133:
	.word	gSprites
.L113:
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L114	@cond_branch
	ldr	r2, .L135
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x22]
.L114:
	add	r0, r4, #0
	bl	sub_80A80C8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L90	@cond_branch
	ldr	r2, .L135
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x10]
	strh	r1, [r0, #0x22]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	strh	r5, [r4, #0xc]
.L121:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L90
.L136:
	.align	2, 0
.L135:
	.word	gSprites
.L116:
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L90	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L90:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 AnimTask_EruptionLaunchRocks_Step,.Lfe23-AnimTask_EruptionLaunchRocks_Step
	.align	2, 0
	.type	 CreateEruptionLaunchRocks,function
	.thumb_func
CreateEruptionLaunchRocks:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	add	r0, r4, #0
	bl	GetEruptionLaunchRockInitialYPos
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldr	r1, .L147
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0, #0x20]
	ldr	r0, .L147+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L138	@cond_branch
	add	r0, r4, #0
	sub	r0, r0, #0xc
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x1
	b	.L139
.L148:
	.align	2, 0
.L147:
	.word	gSprites
	.word	gBattleAnimAttacker
.L138:
	add	r0, r4, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0xff
.L139:
	mov	r6, #0x0
	mov	r5, #0x0
	lsl	r4, r4, #0x10
	str	r4, [sp, #0x8]
	mov	r1, r9
	lsl	r1, r1, #0x10
	str	r1, [sp, #0x4]
	ldr	r2, .L149
	mov	r9, r2
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	str	r0, [sp]
	mov	r3, r8
	lsl	r3, r3, #0x1
	mov	sl, r3
.L143:
	ldr	r0, .L149+0x4
	ldr	r2, [sp, #0x8]
	asr	r1, r2, #0x10
	ldr	r3, [sp, #0x4]
	asr	r2, r3, #0x10
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L142	@cond_branch
	ldr	r1, .L149+0x8
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	lsl	r0, r5, #0x2
	add	r0, r0, #0x40
	add	r1, r1, r0
	ldr	r3, .L149+0xc
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r3, .L149+0x10
	add	r0, r3, #0
	and	r2, r2, r0
	orr	r2, r2, r1
	strh	r2, [r4, #0x4]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x4
	bls	.L145	@cond_branch
	mov	r5, #0x0
.L145:
	lsl	r2, r6, #0x2
	mov	r1, r9
	add	r0, r2, r1
	ldrh	r0, [r0]
	ldr	r3, [sp]
	mov	r1, r0
	mul	r1, r1, r3
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldr	r0, .L149+0x14
	add	r2, r2, r0
	mov	r3, #0x0
	ldrsh	r2, [r2, r3]
	add	r0, r4, #0
	bl	InitEruptionLaunchRockCoordData
	strh	r7, [r4, #0x3a]
	mov	r0, r8
	strh	r0, [r4, #0x3c]
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	ldr	r1, .L149+0x18
	add	r0, r0, r1
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
.L142:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x6
	bls	.L143	@cond_branch
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	sEruptionLaunchRockCoords
	.word	gEruptionLaunchRockSpriteTemplate
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	sEruptionLaunchRockCoords+0x2
	.word	gTasks+0x8
.Lfe24:
	.size	 CreateEruptionLaunchRocks,.Lfe24-CreateEruptionLaunchRocks
	.align	2, 0
	.type	 AnimEruptionLaunchRock,function
	.thumb_func
AnimEruptionLaunchRock:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdateEruptionLaunchRockPos
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L152	@cond_branch
	ldr	r3, .L153
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L152:
	pop	{r4}
	pop	{r0}
	bx	r0
.L154:
	.align	2, 0
.L153:
	.word	gTasks
.Lfe25:
	.size	 AnimEruptionLaunchRock,.Lfe25-AnimEruptionLaunchRock
	.align	2, 0
	.type	 GetEruptionLaunchRockInitialYPos,function
	.thumb_func
GetEruptionLaunchRockInitialYPos:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L159
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r1, #0x26]
	ldrh	r0, [r1, #0x22]
	add	r2, r2, r0
	add	r1, r1, #0x29
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L159+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L156	@cond_branch
	lsl	r0, r4, #0x10
	mov	r1, #0x94
	lsl	r1, r1, #0xf
	b	.L158
.L160:
	.align	2, 0
.L159:
	.word	gSprites
	.word	gBattleAnimAttacker
.L156:
	lsl	r0, r4, #0x10
	mov	r1, #0xb0
	lsl	r1, r1, #0xe
.L158:
	add	r0, r0, r1
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 GetEruptionLaunchRockInitialYPos,.Lfe26-GetEruptionLaunchRockInitialYPos
	.align	2, 0
	.type	 InitEruptionLaunchRockCoordData,function
	.thumb_func
InitEruptionLaunchRockCoordData:
	mov	r3, #0x0
	strh	r3, [r0, #0x2e]
	strh	r3, [r0, #0x30]
	ldrh	r3, [r0, #0x20]
	lsl	r3, r3, #0x3
	strh	r3, [r0, #0x32]
	ldrh	r3, [r0, #0x22]
	lsl	r3, r3, #0x3
	strh	r3, [r0, #0x34]
	lsl	r1, r1, #0x3
	strh	r1, [r0, #0x36]
	lsl	r2, r2, #0x3
	strh	r2, [r0, #0x38]
	bx	lr
.Lfe27:
	.size	 InitEruptionLaunchRockCoordData,.Lfe27-InitEruptionLaunchRockCoordData
	.align	2, 0
	.type	 UpdateEruptionLaunchRockPos,function
	.thumb_func
UpdateEruptionLaunchRockPos:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L163	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	ldrh	r0, [r2, #0x30]
	mov	r1, r0
	mul	r1, r1, r0
	add	r0, r1, #0
	ldrh	r3, [r2, #0x34]
	add	r0, r0, r3
	strh	r0, [r2, #0x34]
.L163:
	ldrh	r0, [r2, #0x36]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r2, #0x20]
	ldrh	r1, [r2, #0x38]
	ldrh	r3, [r2, #0x34]
	add	r1, r1, r3
	strh	r1, [r2, #0x34]
	lsl	r1, r1, #0x10
	asr	r3, r1, #0x13
	strh	r3, [r2, #0x22]
	add	r0, r0, #0x8
	lsl	r0, r0, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.L165	@cond_branch
	add	r1, r3, #0
	mov	r0, #0x8
	neg	r0, r0
	cmp	r1, r0
	blt	.L165	@cond_branch
	cmp	r1, #0x78
	ble	.L164	@cond_branch
.L165:
	add	r0, r2, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L164:
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 UpdateEruptionLaunchRockPos,.Lfe28-UpdateEruptionLaunchRockPos
	.align	2, 0
	.type	 AnimEruptionFallingRock,function
	.thumb_func
AnimEruptionFallingRock:
	push	{r4, r5, lr}
	ldr	r3, .L167
	ldrh	r1, [r3]
	mov	r2, #0x0
	strh	r1, [r0, #0x20]
	ldrh	r1, [r3, #0x2]
	strh	r1, [r0, #0x22]
	strh	r2, [r0, #0x2e]
	strh	r2, [r0, #0x30]
	strh	r2, [r0, #0x32]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r0, #0x3a]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r0, #0x3c]
	ldrh	r4, [r0, #0x4]
	lsl	r2, r4, #0x16
	lsr	r2, r2, #0x16
	mov	r5, #0x8
	ldrsh	r1, [r3, r5]
	lsl	r1, r1, #0x4
	add	r2, r2, r1
	ldr	r3, .L167+0x4
	add	r1, r3, #0
	and	r2, r2, r1
	ldr	r1, .L167+0x8
	and	r1, r1, r4
	orr	r1, r1, r2
	strh	r1, [r0, #0x4]
	ldr	r1, .L167+0xc
	str	r1, [r0, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L168:
	.align	2, 0
.L167:
	.word	gBattleAnimArgs
	.word	0x3ff
	.word	-0x400
	.word	AnimEruptionFallingRock_Step
.Lfe29:
	.size	 AnimEruptionFallingRock,.Lfe29-AnimEruptionFallingRock
	.align	2, 0
	.type	 AnimEruptionFallingRock_Step,function
	.thumb_func
AnimEruptionFallingRock_Step:
	push	{r4, lr}
	add	r2, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x1
	beq	.L173	@cond_branch
	cmp	r0, #0x1
	bgt	.L182	@cond_branch
	cmp	r0, #0
	beq	.L171	@cond_branch
	b	.L169
.L182:
	cmp	r0, #0x2
	beq	.L175	@cond_branch
	b	.L169
.L171:
	ldrh	r1, [r2, #0x3a]
	mov	r3, #0x3a
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L172	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x3a]
	b	.L169
.L172:
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
.L173:
	ldrh	r0, [r2, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r2, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r3, [r2, #0x3c]
	mov	r4, #0x3c
	ldrsh	r1, [r2, r4]
	cmp	r0, r1
	blt	.L169	@cond_branch
	strh	r3, [r2, #0x22]
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	b	.L169
.L175:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L176	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
	ldrh	r0, [r2, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x32]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L177	@cond_branch
	ldr	r0, .L184
	b	.L183
.L185:
	.align	2, 0
.L184:
	.word	0xfffd
.L177:
	mov	r0, #0x3
.L183:
	strh	r0, [r2, #0x26]
.L176:
	ldrh	r0, [r2, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L169	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L169:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 AnimEruptionFallingRock_Step,.Lfe30-AnimEruptionFallingRock_Step
	.align	2, 0
	.type	 AnimWillOWispOrb,function
	.thumb_func
AnimWillOWispOrb:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L191	@cond_branch
	cmp	r0, #0x1
	bgt	.L199	@cond_branch
	cmp	r0, #0
	beq	.L188	@cond_branch
	b	.L187
.L199:
	cmp	r0, #0x2
	beq	.L195	@cond_branch
	b	.L187
.L188:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r4, .L203
	ldrb	r1, [r4, #0x4]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x3c]
	ldr	r0, .L203+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L189	@cond_branch
	mov	r0, #0x4
	b	.L200
.L204:
	.align	2, 0
.L203:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L189:
	ldr	r0, .L205
.L200:
	strh	r0, [r5, #0x36]
	ldr	r0, .L205+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L201
.L206:
	.align	2, 0
.L205:
	.word	0xfffc
	.word	gBattleAnimTarget
.L191:
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0xc0
	strh	r0, [r5, #0x30]
	ldr	r0, .L207
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L192	@cond_branch
	ldrh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	neg	r0, r0
	b	.L202
.L208:
	.align	2, 0
.L207:
	.word	gBattleAnimAttacker
.L192:
	ldrh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
.L202:
	strh	r0, [r5, #0x26]
	mov	r2, #0x32
	ldrsh	r0, [r5, r2]
	mov	r2, #0x36
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x4
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L187	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x34]
.L201:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L187
.L195:
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	mov	r2, #0x36
	ldrsh	r1, [r5, r2]
	bl	Sin
	add	r2, r0, #0
	mov	r3, #0x0
	strh	r2, [r5, #0x24]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x4
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L187	@cond_branch
	ldrh	r0, [r5, #0x20]
	add	r1, r2, r0
	strh	r1, [r5, #0x20]
	ldrh	r0, [r5, #0x26]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	strh	r3, [r5, #0x26]
	strh	r3, [r5, #0x24]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	strh	r1, [r5, #0x30]
	ldr	r4, .L209
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	sub_80A6FD4
	ldr	r0, .L209+0x4
	str	r0, [r5, #0x1c]
.L187:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L210:
	.align	2, 0
.L209:
	.word	gBattleAnimTarget
	.word	AnimWillOWispOrb_Step
.Lfe31:
	.size	 AnimWillOWispOrb,.Lfe31-AnimWillOWispOrb
	.align	2, 0
	.type	 AnimWillOWispOrb_Step,function
	.thumb_func
AnimWillOWispOrb_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L212	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x10
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x38]
	add	r0, r2, #0x4
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x38]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0
	beq	.L214	@cond_branch
	cmp	r2, #0xc4
	ble	.L215	@cond_branch
.L214:
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L215	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L215	@cond_branch
	ldr	r0, .L216
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	mov	r0, #0x90
	bl	PlaySE12WithPanning
	b	.L215
.L217:
	.align	2, 0
.L216:
	.word	gAnimCustomPanning
.L212:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L215:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 AnimWillOWispOrb_Step,.Lfe32-AnimWillOWispOrb_Step
	.align	2, 0
	.type	 AnimWillOWispFire,function
	.thumb_func
AnimWillOWispFire:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L219	@cond_branch
	ldr	r0, .L229
	ldrh	r0, [r0]
	strh	r0, [r4, #0x30]
	add	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
.L219:
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	add	r1, r0, #0
	ldrh	r2, [r4, #0x34]
	add	r1, r1, r2
	strh	r1, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0xa0
	strh	r0, [r4, #0x36]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x36]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x7
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L220	@cond_branch
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x83
	bls	.L221	@cond_branch
	ldr	r0, .L229+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	b	.L223
.L230:
	.align	2, 0
.L229:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L221:
	ldr	r0, .L231
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
	b	.L223
.L232:
	.align	2, 0
.L231:
	.word	gBattleAnimTarget
.L220:
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x83
	bls	.L224	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1d
	b	.L228
.L224:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1f
.L228:
	strb	r0, [r1]
.L223:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L226	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L226:
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1e
	bne	.L227	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L227:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 AnimWillOWispFire,.Lfe33-AnimWillOWispFire
	.align	2, 0
	.globl	AnimTask_MoveHeatWaveTargets
	.type	 AnimTask_MoveHeatWaveTargets,function
	.thumb_func
AnimTask_MoveHeatWaveTargets:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L236
	add	r4, r1, r0
	ldr	r0, .L236+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L234	@cond_branch
	mov	r1, #0x1
.L234:
	strh	r1, [r4, #0x20]
	ldr	r0, .L236+0x8
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r0, #0x3
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L236+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L237:
	.align	2, 0
.L236:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	AnimTask_MoveHeatWaveTargets_Step
.Lfe34:
	.size	 AnimTask_MoveHeatWaveTargets,.Lfe34-AnimTask_MoveHeatWaveTargets
	.align	2, 0
	.type	 AnimTask_MoveHeatWaveTargets_Step,function
	.thumb_func
AnimTask_MoveHeatWaveTargets_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L282
	add	r2, r0, r1
	mov	r0, #0x8
	ldrsh	r3, [r2, r0]
	cmp	r3, #0x1
	beq	.L250	@cond_branch
	cmp	r3, #0x1
	bgt	.L278	@cond_branch
	cmp	r3, #0
	beq	.L240	@cond_branch
	b	.L239
.L283:
	.align	2, 0
.L282:
	.word	gTasks
.L278:
	cmp	r3, #0x2
	bne	.LCB2696
	b	.L260	@long jump
.LCB2696:
	cmp	r3, #0x3
	bne	.LCB2698
	b	.L270	@long jump
.LCB2698:
	b	.L239
.L240:
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	lsl	r0, r0, #0x1
	ldrh	r5, [r2, #0x1c]
	add	r0, r0, r5
	strh	r0, [r2, #0x1c]
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L241	@cond_branch
	strh	r3, [r2, #0xa]
	ldrh	r0, [r2, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L242	@cond_branch
	mov	r0, #0x2
	b	.L279
.L242:
	ldr	r0, .L284
.L279:
	strh	r0, [r2, #0x1e]
.L241:
	mov	r1, #0x0
	strh	r1, [r2, #0xe]
	mov	r7, #0x22
	ldrsh	r0, [r2, r7]
	cmp	r1, r0
	bge	.L245	@cond_branch
	ldr	r4, .L284+0x4
	add	r3, r2, #0
	add	r3, r3, #0x8
.L247:
	mov	r1, #0xe
	ldrsh	r0, [r2, r1]
	add	r0, r0, #0xe
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	mov	r5, #0x0
	ldrsh	r0, [r0, r5]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r2, #0x1e]
	ldrh	r7, [r2, #0x1c]
	add	r0, r0, r7
	strh	r0, [r1, #0x24]
	ldrh	r0, [r2, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x22
	ldrsh	r1, [r2, r5]
	cmp	r0, r1
	blt	.L247	@cond_branch
.L245:
	ldrh	r0, [r2, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	beq	.LCB2788
	b	.L239	@long jump
.LCB2788:
	mov	r0, #0x0
	strh	r0, [r2, #0x1a]
	b	.L280
.L285:
	.align	2, 0
.L284:
	.word	0xfffe
	.word	gSprites
.L250:
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L251	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0xa]
	ldrh	r0, [r2, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xc]
	and	r0, r0, r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L252	@cond_branch
	mov	r0, #0x2
	b	.L281
.L252:
	ldr	r0, .L286
.L281:
	strh	r0, [r2, #0x1e]
.L251:
	mov	r1, #0x0
	strh	r1, [r2, #0xe]
	mov	r7, #0x22
	ldrsh	r0, [r2, r7]
	cmp	r1, r0
	bge	.L255	@cond_branch
	ldr	r4, .L286+0x4
	add	r3, r2, #0
	add	r3, r3, #0x8
.L257:
	mov	r1, #0xe
	ldrsh	r0, [r2, r1]
	add	r0, r0, #0xe
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	mov	r5, #0x0
	ldrsh	r0, [r0, r5]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r2, #0x1e]
	ldrh	r7, [r2, #0x1c]
	add	r0, r0, r7
	strh	r0, [r1, #0x24]
	ldrh	r0, [r2, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x22
	ldrsh	r1, [r2, r5]
	cmp	r0, r1
	blt	.L257	@cond_branch
.L255:
	ldrh	r0, [r2, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x60
	bne	.L239	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x1a]
	b	.L280
.L287:
	.align	2, 0
.L286:
	.word	0xfffe
	.word	gSprites
.L260:
	mov	r7, #0x20
	ldrsh	r1, [r2, r7]
	lsl	r1, r1, #0x1
	ldrh	r0, [r2, #0x1c]
	sub	r0, r0, r1
	strh	r0, [r2, #0x1c]
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L261	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0xa]
	ldrh	r0, [r2, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L262	@cond_branch
	strh	r3, [r2, #0x1e]
	b	.L261
.L262:
	ldr	r0, .L288
	strh	r0, [r2, #0x1e]
.L261:
	mov	r1, #0x0
	strh	r1, [r2, #0xe]
	mov	r3, #0x22
	ldrsh	r0, [r2, r3]
	cmp	r1, r0
	bge	.L265	@cond_branch
	ldr	r4, .L288+0x4
	add	r3, r2, #0
	add	r3, r3, #0x8
.L267:
	mov	r5, #0xe
	ldrsh	r0, [r2, r5]
	add	r0, r0, #0xe
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	mov	r7, #0x0
	ldrsh	r0, [r0, r7]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r2, #0x1e]
	ldrh	r5, [r2, #0x1c]
	add	r0, r0, r5
	strh	r0, [r1, #0x24]
	ldrh	r0, [r2, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r7, #0x22
	ldrsh	r1, [r2, r7]
	cmp	r0, r1
	blt	.L267	@cond_branch
.L265:
	ldrh	r0, [r2, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	bne	.L239	@cond_branch
.L280:
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	b	.L239
.L289:
	.align	2, 0
.L288:
	.word	0xfffe
	.word	gSprites
.L270:
	mov	r1, #0x0
	strh	r1, [r2, #0xe]
	mov	r3, #0x22
	ldrsh	r0, [r2, r3]
	cmp	r1, r0
	bge	.L272	@cond_branch
	ldr	r6, .L290
	add	r3, r2, #0
	add	r3, r3, #0x8
	mov	r5, #0x0
.L274:
	mov	r7, #0xe
	ldrsh	r0, [r2, r7]
	add	r0, r0, #0xe
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	mov	r7, #0x0
	ldrsh	r1, [r0, r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r5, [r0, #0x24]
	ldrh	r0, [r2, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r7, #0x22
	ldrsh	r1, [r2, r7]
	cmp	r0, r1
	blt	.L274	@cond_branch
.L272:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L239:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L291:
	.align	2, 0
.L290:
	.word	gSprites
.Lfe35:
	.size	 AnimTask_MoveHeatWaveTargets_Step,.Lfe35-AnimTask_MoveHeatWaveTargets_Step
	.align	2, 0
	.globl	AnimTask_BlendBackground
	.type	 AnimTask_BlendBackground,function
	.thumb_func
AnimTask_BlendBackground:
	push	{r4, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x4
	ldr	r1, .L293
	ldrb	r2, [r1]
	ldrh	r3, [r1, #0x2]
	mov	r1, #0x10
	bl	BlendPalette
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	gBattleAnimArgs
.Lfe36:
	.size	 AnimTask_BlendBackground,.Lfe36-AnimTask_BlendBackground
	.align	2, 0
	.globl	AnimTask_ShakeTargetInPattern
	.type	 AnimTask_ShakeTargetInPattern,function
	.thumb_func
AnimTask_ShakeTargetInPattern:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L304
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r3, #0x8
	ldrsh	r0, [r2, r3]
	mov	r9, r1
	ldr	r4, .L304+0x4
	mov	r8, r4
	cmp	r0, #0
	bne	.L296	@cond_branch
	ldrh	r0, [r4]
	strh	r0, [r2, #0xa]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r2, #0xc]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r2, #0xe]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r2, #0x10]
.L296:
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	ldr	r1, .L304+0x8
	ldr	r0, .L304+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r6, [r0]
	mov	r5, #0x10
	ldrsh	r0, [r2, r5]
	cmp	r0, #0
	bne	.L297	@cond_branch
	ldr	r4, .L304+0x10
	mov	r1, #0x8
	ldrsh	r0, [r2, r1]
	b	.L303
.L305:
	.align	2, 0
.L304:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
	.word	sShakeDirsPattern0
.L297:
	ldr	r4, .L306
	mov	r3, #0x8
	ldrsh	r0, [r2, r3]
.L303:
	mov	r1, #0xa
	bl	__modsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r4
	ldrb	r5, [r0]
	lsl	r0, r7, #0x2
	add	r1, r0, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r9
	mov	r4, #0xe
	ldrsh	r1, [r1, r4]
	mov	ip, r0
	cmp	r1, #0x1
	bne	.L299	@cond_branch
	ldr	r2, .L306+0x4
	lsl	r3, r6, #0x4
	add	r0, r3, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	sl, r0
	mov	r0, r8
	mov	r4, #0x2
	ldrsh	r1, [r0, r4]
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	mul	r0, r0, r1
	cmp	r0, #0
	bge	.L300	@cond_branch
	neg	r0, r0
.L300:
	mov	r5, sl
	strh	r0, [r5, #0x26]
	b	.L301
.L307:
	.align	2, 0
.L306:
	.word	sShakeDirsPattern1
	.word	gSprites
.L299:
	ldr	r3, .L308
	lsl	r4, r6, #0x4
	add	r2, r4, r6
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	mov	r5, r8
	ldrh	r1, [r5, #0x2]
	mul	r0, r0, r1
	strh	r0, [r2, #0x24]
	add	r2, r3, #0
	add	r3, r4, #0
.L301:
	mov	r1, ip
	add	r0, r1, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	mov	r4, #0x8
	ldrsh	r1, [r0, r4]
	mov	r5, #0xa
	ldrsh	r0, [r0, r5]
	cmp	r1, r0
	bne	.L302	@cond_branch
	add	r0, r3, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
	strh	r1, [r0, #0x26]
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L302:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	gSprites
.Lfe37:
	.size	 AnimTask_ShakeTargetInPattern,.Lfe37-AnimTask_ShakeTargetInPattern
.text
	.align	2, 0

