@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gSpinningPokenavPaletteData
	.section .rodata
	.align	1, 0
	.type	 gSpinningPokenavPaletteData,object
gSpinningPokenavPaletteData:
	.short	0x7fff
	.short	0x1595
	.short	0x4a55
	.short	0x56b6
	.short	0x3b1f
	.short	0x31fe
	.short	0x6694
	.short	0x798c
	.short	0x7fff
	.short	0x7ec1
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x6b39
	.short	0x5eb5
	.size	 gSpinningPokenavPaletteData,32
	.globl	gSpinningPokenavGfx
	.align	2, 0
	.type	 gSpinningPokenavGfx,object
gSpinningPokenavGfx:
	.word	0x100010
	.word	-0xfffffc8
	.word	-0x1ffe0fff
	.word	0x1101
	.word	0x30331038
	.word	0x1f003
	.word	0x133001c
	.word	-0xffccf08
	.word	-0xffe0fff
	.word	0x10016001
	.word	0x11041000
	.word	0x14410033
	.word	0x31410300
	.word	0x41441001
	.word	0x44141014
	.word	0x44000500
	.word	0x14144111
	.word	0x414155
	.word	0x11331551
	.word	0x41330001
	.word	0x13001404
	.word	0x26001414
	.word	0x980144
	.word	0x11011d
	.word	0x141c0021
	.word	0xf61551
	.word	0x6053f014
	.word	0x109e4001
	.word	0x1e00380
	.word	0x51110144
	.word	0x51411471
	.word	-0x7f94ef8f
	.word	0x41555200
	.word	0x10114114
	.word	0x44150051
	.word	0x44155510
	.word	0x41005100
	.word	0x11151711
	.word	-0x1deae8bc
	.word	0x6b002100
	.word	0x11141c00
	.word	0x51850014
	.word	0x44011500
	.word	0x11015551
	.word	0x20157c14
	.word	-0xffcaf9d
	.word	-0xefe0fff
	.word	-0xcbbbbff
	.word	0x3005101
	.word	-0x600fa9df
	.word	-0x5cfffebc
	.word	-0xf00e310
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xf000eff
	.word	-0xafcffe4
	.word	0x1f0fff1
	.word	0x1f001f0
	.word	0x10ff0100
	.word	0x10a0ff01
	.word	-0x16ffbefd
	.word	0x10444441
	.word	0x44110014
	.word	0x41555110
	.word	-0x7e6ceaf0
	.word	0x11444ff
	.word	0x2014425
	.word	0x7c03101e
	.word	-0xffcafec
	.word	-0xffe0fb1
	.word	0x717e8101
	.word	0x20157c17
	.word	0x206b0003
	.word	0x307b0073
	.word	-0x71aaeb79
	.word	0x11559b02
	.word	0x60670011
	.word	0x11731001
	.word	-0x5dfffe9d
	.word	0x140300
	.word	-0xf810feb
	.word	0x1f0de01
	.word	0x151ffd1
	.word	-0xeb7effd
	.word	0x450100e2
	.word	-0xf000e02
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x13ffb101
	.word	0x71fff1de
	.word	-0xece01
	.word	0x1f001f0
	.word	0x430001f0
	.word	0x44dd1031
	.word	0x411000
	.word	-0x9f4fcfd
	.word	0x60010310
	.word	0x310ec11
	.word	0x10850011
	.word	0x147744ff
	.word	0xb110701
	.word	0x60140320
	.word	-0xfb00ffd
	.word	0x1f0ef01
	.word	0x7700cc90
	.word	0x10470411
	.word	0x21da0303
	.word	-0x78af2005
	.word	0x2148810
	.word	0x107f020a
	.word	0x760403
	.word	0x7710ff92
	.word	0x7ef08740
	.word	0x1f001f0
	.word	0x7f0001c0
	.word	-0xe009400
	.word	0xff43ff
	.word	-0xf95ff9d
	.word	-0xffe0fe4
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x344ff51
	.word	-0xafe10
	.word	0x1f001f0
	.word	0x3201f0e9
	.word	0x44ff55ff
	.word	0x1144ff05
	.word	0x417d0300
	.word	0x3607501
	.word	0x310ff53
	.word	0x3044ff13
	.word	-0x5fc20fd
	.word	0x23119901
	.word	-0xffe0fc9
	.word	0x6101f001
	.word	0x11141d7d
	.word	0x20690041
	.word	0x10010003
	.word	0xff6400
	.word	0x11032083
	.word	0x100fe
	.word	0x6f0011
	.word	-0x3090eb95
	.word	-0xdce0ea
	.word	0x3244114
	.word	0x1f051f0
	.word	-0xa18fe10
	.word	0x50fff1ff
	.word	0x200019f
	.word	-0xfe30f7e
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	-0xafe10
	.word	-0xee310
	.word	-0xf07fe10
	.word	-0x8fe0fff
	.word	0x30ff37ff
	.word	0x11114103
	.word	0x41fff7bf
	.word	0x21200310
	.word	0x52f09211
	.word	-0x80009
	.word	0x42ff97ff
	.word	0x2207124c
	.word	0x12830001
	.word	0x10ec1307
	.word	-0x1de409a
	.word	0x1f41144
	.word	0x10ff11ee
	.word	0xff1105
	.word	0x2200ff8b
	.word	0x1f0fff7
	.word	-0x5efe10
	.word	-0x1d0e00cc
	.word	-0xa0094cf
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xefe0fff
	.word	-0x6000e01
	.word	0x1f0fff7
	.word	0x1f001f0
	.word	0x3314ffe3
	.word	0x1ffff43
	.word	0x3034068
	.word	-0x8000820
	.word	-0xffe0f01
	.word	-0x10fe0fff
	.word	0x6b605f51
	.word	0x19410710
	.word	0x28300df
	.word	-0x800ee79
	.word	-0xae8ebde
	.word	0x2a120340
	.word	0x835411
	.word	-0xc810ffd
	.word	0x1f001f0
	.word	0x4400ffc1
	.word	-0xebeef
	.word	-0xf000007
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0x8e90eff
	.word	-0x801
	.word	0x1f0fff1
	.word	-0x8fe10
	.word	0x370fff7
	.word	-0xa80009
	.word	0x320117f
	.word	0x1f04ff0
	.word	-0x38fe10
	.word	0x340d70b
	.word	0x27fff7ff
	.word	-0x8fccf01
	.word	-0xfb10f01
	.word	-0x8fe0fff
	.word	-0x80001
	.word	0x1bf0fff7
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0x800fe10
	.word	-0xe000a01
	.word	-0xffe0f01
	.word	-0x8000dff
	.word	-0x53004801
	.word	0x14416700
	.word	0x7b410103
	.word	0x41110300
	.word	0x55140100
	.word	0x15510115
	.word	-0x7e0f08af
	.word	0x1f001f0
	.word	0x17117da1
	.word	0x130ff
	.word	-0xf8478e
	.word	0x13ff1341
	.word	0x510300fb
	.word	0x173f7151
	.word	0x32001
	.word	0x1073106b
	.word	0xe87107b
	.word	0x55003e0b
	.word	0x1f00415
	.word	0x1f001f0
	.word	-0x20ab006d
	.word	0x170fff5
	.word	0x2fc0115
	.word	-0xfe30f86
	.word	-0x7ffe0fff
	.word	0x100
	.size	 gSpinningPokenavGfx,996
	.globl	gUnused_SpinningPokenavGfx2
	.align	2, 0
	.type	 gUnused_SpinningPokenavGfx2,object
gUnused_SpinningPokenavGfx2:
	.word	0x10010
	.word	-0xff10200
	.word	-0xff0001
	.word	-0x1f10ff61
	.word	-0xff06601
	.word	0xe01999f
	.word	0x999ffe
	.word	0x36099ff
	.word	-0x666660fd
	.word	-0xf666607
	.word	0x4015001
	.word	-0x101ff001
	.word	-0x66bfff07
	.word	-0x1f1ff01
	.word	-0xff00667
	.word	-0x10d40667
	.word	0x1500e0
	.word	-0xffffcb0
	.word	-0xfe4fff
	.word	0x7b106b80
	.word	-0x74ef7cf0
	.word	-0x64ef6cf0
	.word	0x17071f0
	.word	0x709b30ff
	.word	0x107b206b
	.word	0x108b0083
	.word	-0xf64ef6d
	.word	0x1b08070
	.size	 gUnused_SpinningPokenavGfx2,112
	.globl	gPokenavMainMenuBgTemplates
	.align	2, 0
	.type	 gPokenavMainMenuBgTemplates,object
	.size	 gPokenavMainMenuBgTemplates,4
gPokenavMainMenuBgTemplates:
	.byte	0x50
	.byte	0x0
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sHelpBarWindowTemplate,object
sHelpBarWindowTemplate:
	.byte	0x0
	.byte	0x1
	.byte	0x16
	.byte	0x10
	.byte	0x2
	.byte	0x0
	.short	0x36
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sHelpBarWindowTemplate,16
	.align	2, 0
	.type	 sHelpBarTexts,object
	.size	 sHelpBarTexts,48
sHelpBarTexts:
	.word	gText_Pokenav_ClearButtonList
	.word	gText_PokenavMap_ZoomedOutButtons
	.word	gText_PokenavMap_ZoomedInButtons
	.word	gText_PokenavCondition_MonListButtons
	.word	gText_PokenavCondition_MonStatusButtons
	.word	gText_PokenavCondition_MarkingButtons
	.word	gText_PokenavMatchCall_TrainerListButtons
	.word	gText_PokenavMatchCall_CallMenuButtons
	.word	gText_PokenavMatchCall_CheckTrainerButtons
	.word	gText_PokenavRibbons_MonListButtons
	.word	gText_PokenavRibbons_RibbonListButtons
	.word	gText_PokenavRibbons_RibbonCheckButtons
	.type	 sHelpBarTextColors,object
	.size	 sHelpBarTextColors,3
sHelpBarTextColors:
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.align	2, 0
	.type	 gSpinningPokenavSpriteSheet,object
gSpinningPokenavSpriteSheet:
	.word	gSpinningPokenavGfx
	.short	0x1000
	.short	0x0
	.size	 gSpinningPokenavSpriteSheet,8
	.align	2, 0
	.type	 gSpinningNavgearPalettes,object
gSpinningNavgearPalettes:
	.word	gSpinningPokenavPaletteData
	.short	0x0
	.space	2
	.space	8
	.size	 gSpinningNavgearPalettes,16
	.align	2, 0
	.type	 sPokenavHoennMapLeftHeaderSpriteSheet,object
	.size	 sPokenavHoennMapLeftHeaderSpriteSheet,8
sPokenavHoennMapLeftHeaderSpriteSheet:
	.word	gPokenavLeftHeaderHoennMap_Gfx
	.short	0xc00
	.short	0x2
	.align	2, 0
	.type	 sPokenavMenuLeftHeaderSpriteSheets,object
sPokenavMenuLeftHeaderSpriteSheets:
	.word	gPokenavLeftHeaderMainMenu_Gfx
	.short	0x20
	.short	0x3
	.word	gPokenavLeftHeaderCondition_Gfx
	.short	0x20
	.short	0x1
	.word	gPokenavLeftHeaderRibbons_Gfx
	.short	0x20
	.short	0x2
	.word	gPokenavLeftHeaderMatchCall_Gfx
	.short	0x20
	.short	0x4
	.word	gPokenavLeftHeaderHoennMap_Gfx
	.short	0x20
	.short	0x0
	.word	gPokenavLeftHeaderHoennMap_Gfx
	.short	0x40
	.short	0x0
	.size	 sPokenavMenuLeftHeaderSpriteSheets,48
	.align	2, 0
	.type	 sPokenavSubMenuLeftHeaderSpriteSheets,object
sPokenavSubMenuLeftHeaderSpriteSheets:
	.word	gPokenavLeftHeaderParty_Gfx
	.word	0x1
	.word	gPokenavLeftHeaderSearch_Gfx
	.word	0x1
	.word	gPokenavLeftHeaderCool_Gfx
	.word	0x4
	.word	gPokenavLeftHeaderBeauty_Gfx
	.word	0x1
	.word	gPokenavLeftHeaderCute_Gfx
	.word	0x2
	.word	gPokenavLeftHeaderSmart_Gfx
	.word	0x0
	.word	gPokenavLeftHeaderTough_Gfx
	.word	0x0
	.size	 sPokenavSubMenuLeftHeaderSpriteSheets,56
	.align	2, 0
	.type	 sSpinningPokenavSpriteOam,object
	.size	 sSpinningPokenavSpriteOam,8
sSpinningPokenavSpriteOam:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.align	2, 0
	.type	 sSpinningPokenavAnims,object
sSpinningPokenavAnims:
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x10
	.byte	0x8
	.space	1
	.short	0x20
	.byte	0x8
	.space	1
	.short	0x30
	.byte	0x8
	.space	1
	.short	0x40
	.byte	0x8
	.space	1
	.short	0x50
	.byte	0x8
	.space	1
	.short	0x60
	.byte	0x8
	.space	1
	.short	0x70
	.byte	0x8
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpinningPokenavAnims,36
	.align	2, 0
	.type	 sSpinningPokenavAnimTable,object
sSpinningPokenavAnimTable:
	.word	sSpinningPokenavAnims
	.size	 sSpinningPokenavAnimTable,4
	.align	2, 0
	.type	 sSpinningPokenavSpriteTemplate,object
	.size	 sSpinningPokenavSpriteTemplate,24
sSpinningPokenavSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	sSpinningPokenavSpriteOam
	.word	sSpinningPokenavAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_SpinningPokenav
	.align	2, 0
	.type	 sPokenavLeftHeaderHoennMapSpriteOam,object
	.size	 sPokenavLeftHeaderHoennMapSpriteOam,8
sPokenavLeftHeaderHoennMapSpriteOam:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 sUnknown_0861FB24,object
	.size	 sUnknown_0861FB24,8
sUnknown_0861FB24:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 sPokenavLeftHeaderHoennMapSpriteTemplate,object
	.size	 sPokenavLeftHeaderHoennMapSpriteTemplate,24
sPokenavLeftHeaderHoennMapSpriteTemplate:
	.short	0x2
	.short	0x1
	.word	sPokenavLeftHeaderHoennMapSpriteOam
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0861FB44,object
	.size	 sUnknown_0861FB44,24
sUnknown_0861FB44:
	.short	0x2
	.short	0x2
	.word	sUnknown_0861FB24
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
.text
	.align	2, 0
	.globl	InitPokenavMainMenu
	.type	 InitPokenavMainMenu,function
	.thumb_func
InitPokenavMainMenu:
	push	{r4, lr}
	ldr	r1, .L5
	mov	r0, #0x0
	bl	AllocSubstruct
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L3	@cond_branch
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	ldr	r0, .L5+0x4
	mov	r1, #0x1
	bl	CreateLoopedTask
	str	r0, [r4, #0xc]
	mov	r0, #0x1
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	0x82c
	.word	LoopedTask_InitPokenavMenu
.L3:
	mov	r0, #0x0
.L4:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 InitPokenavMainMenu,.Lfe1-InitPokenavMainMenu
	.align	2, 0
	.globl	PokenavMainMenuLoopedTaskIsActive
	.type	 PokenavMainMenuLoopedTaskIsActive,function
	.thumb_func
PokenavMainMenuLoopedTaskIsActive:
	push	{lr}
	mov	r0, #0x0
	bl	GetSubstructPtr
	ldr	r0, [r0, #0xc]
	bl	IsLoopedTaskActive
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 PokenavMainMenuLoopedTaskIsActive,.Lfe2-PokenavMainMenuLoopedTaskIsActive
	.align	2, 0
	.globl	ShutdownPokenav
	.type	 ShutdownPokenav,function
	.thumb_func
ShutdownPokenav:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x6f
	bl	PlaySE
	bl	ResetBldCnt_
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r1, #0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 ShutdownPokenav,.Lfe3-ShutdownPokenav
	.align	2, 0
	.globl	WaitForPokenavShutdownFade
	.type	 WaitForPokenavShutdownFade,function
	.thumb_func
WaitForPokenavShutdownFade:
	push	{lr}
	ldr	r0, .L12
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L10	@cond_branch
	mov	r0, #0x1
	b	.L11
.L13:
	.align	2, 0
.L12:
	.word	gPaletteFade
.L10:
	bl	FreeMenuHandlerSubstruct2
	bl	CleanupPokenavMainMenuResources
	bl	FreeAllWindowBuffers
	mov	r0, #0x0
.L11:
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 WaitForPokenavShutdownFade,.Lfe4-WaitForPokenavShutdownFade
	.align	2, 0
	.type	 LoopedTask_InitPokenavMenu,function
	.thumb_func
LoopedTask_InitPokenavMenu:
	push	{r4, lr}
	add	sp, sp, #-0x4
	cmp	r0, #0x1
	beq	.L17	@cond_branch
	cmp	r0, #0x1
	bgt	.L24	@cond_branch
	cmp	r0, #0
	beq	.L16	@cond_branch
	b	.L22
.L24:
	cmp	r0, #0x2
	beq	.L18	@cond_branch
	cmp	r0, #0x3
	beq	.L20	@cond_branch
	b	.L22
.L16:
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	bl	FreeAllWindowBuffers
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L27
	mov	r0, #0x0
	mov	r2, #0x1
	bl	InitBgsFromTemplates
	bl	ResetBgPositions
	bl	ResetTempTileDataBuffers
	mov	r0, #0x1
	b	.L25
.L28:
	.align	2, 0
.L27:
	.word	gPokenavMainMenuBgTemplates
.L17:
	mov	r0, #0x0
	bl	GetSubstructPtr
	add	r4, r0, #0
	ldr	r1, .L29
	mov	r0, #0x0
	str	r0, [sp]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	add	r4, r4, #0x2c
	mov	r0, #0x0
	add	r1, r4, #0
	bl	SetBgTilemapBuffer
	ldr	r1, .L29+0x4
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	ldr	r0, .L29+0x8
	mov	r1, #0x0
	mov	r2, #0x20
	bl	CopyPaletteIntoBufferUnfaded
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x0
	b	.L25
.L30:
	.align	2, 0
.L29:
	.word	gPokenavHeader_Gfx
	.word	gPokenavHeader_Tilemap
	.word	gPokenavHeader_Pal
.L18:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L26	@cond_branch
	bl	InitHelpBar
	mov	r0, #0x0
	b	.L25
.L20:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L21	@cond_branch
.L26:
	mov	r0, #0x2
	b	.L25
.L21:
	bl	InitPokenavMainMenuResources
	bl	InitHoennMapHeaderSprites
	mov	r0, #0x0
	bl	ShowBg
.L22:
	mov	r0, #0x4
.L25:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 LoopedTask_InitPokenavMenu,.Lfe5-LoopedTask_InitPokenavMenu
	.align	2, 0
	.globl	SetActiveMenuLoopTasks
	.type	 SetActiveMenuLoopTasks,function
	.thumb_func
SetActiveMenuLoopTasks:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r0, #0x0
	bl	GetSubstructPtr
	str	r4, [r0]
	str	r5, [r0, #0x4]
	mov	r1, #0x0
	str	r1, [r0, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 SetActiveMenuLoopTasks,.Lfe6-SetActiveMenuLoopTasks
	.align	2, 0
	.globl	RunMainMenuLoopedTask
	.type	 RunMainMenuLoopedTask,function
	.thumb_func
RunMainMenuLoopedTask:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x0
	bl	GetSubstructPtr
	mov	r1, #0x0
	str	r1, [r0, #0x8]
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 RunMainMenuLoopedTask,.Lfe7-RunMainMenuLoopedTask
	.align	2, 0
	.globl	IsActiveMenuLoopTaskActive
	.type	 IsActiveMenuLoopTaskActive,function
	.thumb_func
IsActiveMenuLoopTaskActive:
	push	{lr}
	mov	r0, #0x0
	bl	GetSubstructPtr
	ldr	r0, [r0, #0x4]
	bl	_call_via_r0
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 IsActiveMenuLoopTaskActive,.Lfe8-IsActiveMenuLoopTaskActive
	.align	2, 0
	.globl	SlideMenuHeaderUp
	.type	 SlideMenuHeaderUp,function
	.thumb_func
SlideMenuHeaderUp:
	push	{r4, lr}
	mov	r0, #0x0
	bl	GetSubstructPtr
	add	r4, r0, #0
	ldr	r0, .L35
	mov	r1, #0x4
	bl	CreateLoopedTask
	str	r0, [r4, #0xc]
	pop	{r4}
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	LoopedTask_SlideMenuHeaderUp
.Lfe9:
	.size	 SlideMenuHeaderUp,.Lfe9-SlideMenuHeaderUp
	.align	2, 0
	.globl	SlideMenuHeaderDown
	.type	 SlideMenuHeaderDown,function
	.thumb_func
SlideMenuHeaderDown:
	push	{r4, lr}
	mov	r0, #0x0
	bl	GetSubstructPtr
	add	r4, r0, #0
	ldr	r0, .L38
	mov	r1, #0x4
	bl	CreateLoopedTask
	str	r0, [r4, #0xc]
	pop	{r4}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	LoopedTask_SlideMenuHeaderDown
.Lfe10:
	.size	 SlideMenuHeaderDown,.Lfe10-SlideMenuHeaderDown
	.align	2, 0
	.globl	MainMenuLoopedTaskIsBusy
	.type	 MainMenuLoopedTaskIsBusy,function
	.thumb_func
MainMenuLoopedTaskIsBusy:
	push	{lr}
	mov	r0, #0x0
	bl	GetSubstructPtr
	ldr	r0, [r0, #0xc]
	bl	IsLoopedTaskActive
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 MainMenuLoopedTaskIsBusy,.Lfe11-MainMenuLoopedTaskIsBusy
	.align	2, 0
	.type	 LoopedTask_SlideMenuHeaderUp,function
	.thumb_func
LoopedTask_SlideMenuHeaderUp:
	push	{lr}
	cmp	r0, #0x1
	beq	.L44	@cond_branch
	cmp	r0, #0x1
	bgt	.L49	@cond_branch
	cmp	r0, #0
	beq	.L45	@cond_branch
	b	.L51
.L49:
	cmp	r0, #0x2
	beq	.L46	@cond_branch
	b	.L51
.L44:
.L45:
	mov	r0, #0x0
	b	.L50
.L46:
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	mov	r0, #0x0
	mov	r2, #0x1
	bl	ChangeBgY
	ldr	r1, .L52
	cmp	r0, r1
	bhi	.L47	@cond_branch
	mov	r0, #0x2
	b	.L50
.L53:
	.align	2, 0
.L52:
	.word	0x1fff
.L47:
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
.L51:
	mov	r0, #0x4
.L50:
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 LoopedTask_SlideMenuHeaderUp,.Lfe12-LoopedTask_SlideMenuHeaderUp
	.align	2, 0
	.type	 LoopedTask_SlideMenuHeaderDown,function
	.thumb_func
LoopedTask_SlideMenuHeaderDown:
	push	{lr}
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	mov	r0, #0x0
	mov	r2, #0x2
	bl	ChangeBgY
	cmp	r0, #0
	ble	.L55	@cond_branch
	mov	r0, #0x2
	b	.L56
.L55:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x4
.L56:
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 LoopedTask_SlideMenuHeaderDown,.Lfe13-LoopedTask_SlideMenuHeaderDown
	.align	2, 0
	.globl	CopyPaletteIntoBufferUnfaded
	.type	 CopyPaletteIntoBufferUnfaded,function
	.thumb_func
CopyPaletteIntoBufferUnfaded:
	push	{lr}
	lsl	r1, r1, #0x1
	ldr	r3, .L58
	add	r1, r1, r3
	lsl	r2, r2, #0xa
	lsr	r2, r2, #0xb
	bl	CpuSet
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gPlttBufferUnfaded
.Lfe14:
	.size	 CopyPaletteIntoBufferUnfaded,.Lfe14-CopyPaletteIntoBufferUnfaded
	.align	2, 0
	.globl	Pokenav_AllocAndLoadPalettes
	.type	 Pokenav_AllocAndLoadPalettes,function
	.thumb_func
Pokenav_AllocAndLoadPalettes:
	push	{r4, lr}
	add	r4, r0, #0
	b	.L61
.L65:
	lsl	r0, r1, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r0, r2
	ldr	r0, [r4]
	mov	r2, #0x20
	bl	CopyPaletteIntoBufferUnfaded
	add	r4, r4, #0x8
.L61:
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L62	@cond_branch
	ldrh	r0, [r4, #0x4]
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	bne	.L65	@cond_branch
.L62:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 Pokenav_AllocAndLoadPalettes,.Lfe15-Pokenav_AllocAndLoadPalettes
	.align	2, 0
	.globl	PokenavFillPalette
	.type	 PokenavFillPalette,function
	.thumb_func
PokenavFillPalette:
	push	{lr}
	add	sp, sp, #-0x4
	add	r3, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, sp
	strh	r1, [r0]
	lsl	r3, r3, #0x5
	ldr	r0, .L69
	add	r3, r3, r0
	ldr	r2, .L69+0x4
	mov	r0, sp
	add	r1, r3, #0
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	gPlttBufferFaded+0x200
	.word	0x1000010
.Lfe16:
	.size	 PokenavFillPalette,.Lfe16-PokenavFillPalette
	.align	2, 0
	.globl	PokenavCopyPalette
	.type	 PokenavCopyPalette,function
	.thumb_func
PokenavCopyPalette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	str	r0, [sp]
	str	r1, [sp, #0x4]
	mov	sl, r2
	str	r3, [sp, #0x8]
	ldr	r0, [sp, #0x2c]
	cmp	r0, #0
	bne	.L72	@cond_branch
	ldr	r2, .L82
	mov	r1, sl
	and	r2, r2, r1
	ldr	r0, [sp]
	b	.L80
.L83:
	.align	2, 0
.L82:
	.word	0x1fffff
.L72:
	ldr	r2, [sp, #0x2c]
	ldr	r0, [sp, #0x8]
	cmp	r2, r0
	blt	.L74	@cond_branch
	ldr	r2, .L84
	mov	r1, sl
	and	r2, r2, r1
	ldr	r0, [sp, #0x4]
.L80:
	ldr	r1, [sp, #0x30]
	bl	CpuSet
	b	.L73
.L85:
	.align	2, 0
.L84:
	.word	0x1fffff
.L74:
	mov	r2, #0x1
	neg	r2, r2
	add	sl, sl, r2
	b	.L81
.L78:
	ldr	r1, [sp]
	ldrh	r0, [r1]
	mov	r2, #0x1f
	mov	r9, r2
	mov	r1, r9
	and	r1, r1, r0
	mov	r9, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x15
	mov	r1, #0x1f
	and	r1, r1, r2
	mov	r8, r1
	lsr	r7, r0, #0x1a
	mov	r2, #0x1f
	and	r7, r7, r2
	ldr	r0, [sp, #0x4]
	ldrh	r4, [r0]
	mov	r0, #0x1f
	and	r0, r0, r4
	mov	r1, r9
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	ldr	r1, [sp, #0x8]
	bl	__divsi3
	ldr	r2, [sp, #0x2c]
	mov	r6, r0
	mul	r6, r6, r2
	asr	r6, r6, #0x8
	lsl	r4, r4, #0x10
	lsr	r0, r4, #0x15
	mov	r1, #0x1f
	and	r0, r0, r1
	mov	r2, r8
	sub	r0, r0, r2
	lsl	r0, r0, #0x8
	ldr	r1, [sp, #0x8]
	bl	__divsi3
	ldr	r1, [sp, #0x2c]
	mov	r5, r0
	mul	r5, r5, r1
	asr	r5, r5, #0x8
	lsr	r4, r4, #0x1a
	mov	r2, #0x1f
	and	r4, r4, r2
	sub	r4, r4, r7
	lsl	r4, r4, #0x8
	add	r0, r4, #0
	ldr	r1, [sp, #0x8]
	bl	__divsi3
	ldr	r1, [sp, #0x2c]
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	add	r6, r6, r9
	mov	r2, #0x1f
	and	r6, r6, r2
	add	r5, r5, r8
	and	r5, r5, r2
	add	r0, r7, r0
	and	r0, r0, r2
	lsl	r0, r0, #0xa
	lsl	r5, r5, #0x5
	orr	r0, r0, r5
	orr	r0, r0, r6
	ldr	r1, [sp, #0x30]
	strh	r0, [r1]
	ldr	r2, [sp]
	add	r2, r2, #0x2
	str	r2, [sp]
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x2
	str	r0, [sp, #0x4]
	add	r1, r1, #0x2
	str	r1, [sp, #0x30]
	mov	r1, #0x1
	neg	r1, r1
	add	sl, sl, r1
.L81:
	mov	r0, #0x1
	neg	r0, r0
	cmp	sl, r0
	bne	.L78	@cond_branch
.L73:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 PokenavCopyPalette,.Lfe17-PokenavCopyPalette
	.align	2, 0
	.globl	PokenavFadeScreen
	.type	 PokenavFadeScreen,function
	.thumb_func
PokenavFadeScreen:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r0, #0x0
	bl	GetSubstructPtr
	cmp	r4, #0x1
	beq	.L89	@cond_branch
	cmp	r4, #0x1
	bgt	.L94	@cond_branch
	cmp	r4, #0
	beq	.L88	@cond_branch
	b	.L87
.L94:
	cmp	r4, #0x2
	beq	.L90	@cond_branch
	cmp	r4, #0x3
	beq	.L91	@cond_branch
	b	.L87
.L88:
	ldr	r0, [r0, #0x14]
	mov	r1, #0x2
	neg	r1, r1
	str	r4, [sp]
	mov	r2, #0x0
	b	.L95
.L89:
	ldr	r0, [r0, #0x14]
	mov	r1, #0x2
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	b	.L87
.L90:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x2
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
.L95:
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L87
.L91:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x2
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L87:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 PokenavFadeScreen,.Lfe18-PokenavFadeScreen
	.align	2, 0
	.globl	IsPaletteFadeActive
	.type	 IsPaletteFadeActive,function
	.thumb_func
IsPaletteFadeActive:
	ldr	r0, .L97
	ldrb	r0, [r0, #0x7]
	lsr	r0, r0, #0x7
	bx	lr
.L98:
	.align	2, 0
.L97:
	.word	gPaletteFade
.Lfe19:
	.size	 IsPaletteFadeActive,.Lfe19-IsPaletteFadeActive
	.align	2, 0
	.globl	sub_81C7B40
	.type	 sub_81C7B40,function
	.thumb_func
sub_81C7B40:
	push	{lr}
	ldr	r0, .L100
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	-0x10002
.Lfe20:
	.size	 sub_81C7B40,.Lfe20-sub_81C7B40
	.align	2, 0
	.globl	InitBgTemplates
	.type	 InitBgTemplates,function
	.thumb_func
InitBgTemplates:
	push	{r4, r5, lr}
	add	r5, r0, #0
	cmp	r1, #0
	ble	.L104	@cond_branch
	add	r4, r1, #0
.L106:
	add	r0, r5, #0
	add	r5, r5, #0x4
	bl	InitBgFromTemplate
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L106	@cond_branch
.L104:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 InitBgTemplates,.Lfe21-InitBgTemplates
	.align	2, 0
	.type	 InitHelpBar,function
	.thumb_func
InitHelpBar:
	push	{r4, lr}
	mov	r0, #0x0
	bl	GetSubstructPtr
	add	r4, r0, #0
	ldr	r0, .L109
	bl	InitWindows
	mov	r0, #0x0
	str	r0, [r4, #0x10]
	bl	DrawHelpBar
	ldrb	r0, [r4, #0x10]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x10]
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L110:
	.align	2, 0
.L109:
	.word	sHelpBarWindowTemplate
.Lfe22:
	.size	 InitHelpBar,.Lfe22-InitHelpBar
	.align	2, 0
	.globl	PrintHelpBarText
	.type	 PrintHelpBarText,function
	.thumb_func
PrintHelpBarText:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	mov	r0, #0x0
	bl	GetSubstructPtr
	add	r5, r0, #0
	ldr	r0, [r5, #0x10]
	bl	DrawHelpBar
	ldrb	r0, [r5, #0x10]
	ldr	r1, .L112
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	ldr	r1, .L112+0x4
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldr	r1, [r4]
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	sHelpBarTextColors
	.word	sHelpBarTexts
.Lfe23:
	.size	 PrintHelpBarText,.Lfe23-PrintHelpBarText
	.align	2, 0
	.globl	WaitForHelpBar
	.type	 WaitForHelpBar,function
	.thumb_func
WaitForHelpBar:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 WaitForHelpBar,.Lfe24-WaitForHelpBar
	.align	2, 0
	.type	 DrawHelpBar,function
	.thumb_func
DrawHelpBar:
	push	{r4, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x44
	bl	FillWindowPixelBuffer
	mov	r0, #0x80
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	mov	r1, #0x55
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillWindowPixelRect
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 DrawHelpBar,.Lfe25-DrawHelpBar
	.align	2, 0
	.type	 InitPokenavMainMenuResources,function
	.thumb_func
InitPokenavMainMenuResources:
	push	{r4, r5, r6, lr}
	mov	r0, #0x0
	bl	GetSubstructPtr
	add	r6, r0, #0
	mov	r5, #0x0
	ldr	r4, .L122
.L120:
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheet
	add	r4, r4, #0x8
	add	r5, r5, #0x1
	cmp	r5, #0
	beq	.L120	@cond_branch
	ldr	r0, .L122+0x4
	bl	Pokenav_AllocAndLoadPalettes
	mov	r0, #0x0
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	lsl	r1, r1, r0
	mov	r0, #0x2
	neg	r0, r0
	bic	r0, r0, r1
	str	r0, [r6, #0x14]
	ldr	r0, .L122+0x8
	mov	r1, #0xdc
	mov	r2, #0xc
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L122+0xc
	add	r1, r1, r0
	str	r1, [r6, #0x18]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	gSpinningPokenavSpriteSheet
	.word	gSpinningNavgearPalettes
	.word	sSpinningPokenavSpriteTemplate
	.word	gSprites
.Lfe26:
	.size	 InitPokenavMainMenuResources,.Lfe26-InitPokenavMainMenuResources
	.align	2, 0
	.type	 CleanupPokenavMainMenuResources,function
	.thumb_func
CleanupPokenavMainMenuResources:
	push	{lr}
	mov	r0, #0x0
	bl	GetSubstructPtr
	ldr	r0, [r0, #0x18]
	bl	DestroySprite
	mov	r0, #0x0
	bl	FreeSpriteTilesByTag
	mov	r0, #0x0
	bl	FreeSpritePaletteByTag
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 CleanupPokenavMainMenuResources,.Lfe27-CleanupPokenavMainMenuResources
	.align	2, 0
	.type	 SpriteCB_SpinningPokenav,function
	.thumb_func
SpriteCB_SpinningPokenav:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x0
	bl	GetBgY
	lsr	r0, r0, #0x8
	neg	r0, r0
	strh	r0, [r4, #0x26]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 SpriteCB_SpinningPokenav,.Lfe28-SpriteCB_SpinningPokenav
	.align	2, 0
	.globl	PauseSpinningPokenavSprite
	.type	 PauseSpinningPokenavSprite,function
	.thumb_func
PauseSpinningPokenavSprite:
	push	{lr}
	mov	r0, #0x0
	bl	GetSubstructPtr
	ldr	r0, [r0, #0x18]
	ldr	r1, .L127
	str	r1, [r0, #0x1c]
	pop	{r1}
	bx	r1
.L128:
	.align	2, 0
.L127:
	.word	SpriteCallbackDummy
.Lfe29:
	.size	 PauseSpinningPokenavSprite,.Lfe29-PauseSpinningPokenavSprite
	.align	2, 0
	.globl	ResumeSpinningPokenavSprite
	.type	 ResumeSpinningPokenavSprite,function
	.thumb_func
ResumeSpinningPokenavSprite:
	push	{r4, lr}
	mov	r0, #0x0
	bl	GetSubstructPtr
	ldr	r2, [r0, #0x18]
	mov	r4, #0x0
	mov	r1, #0xdc
	strh	r1, [r2, #0x20]
	ldr	r2, [r0, #0x18]
	mov	r1, #0xc
	strh	r1, [r2, #0x22]
	ldr	r2, [r0, #0x18]
	ldr	r1, .L130
	str	r1, [r2, #0x1c]
	add	r2, r2, #0x3e
	ldrb	r3, [r2]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r3
	strb	r1, [r2]
	ldr	r3, [r0, #0x18]
	ldrb	r2, [r3, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r3, #0x5]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x43
	strb	r4, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L131:
	.align	2, 0
.L130:
	.word	SpriteCB_SpinningPokenav
.Lfe30:
	.size	 ResumeSpinningPokenavSprite,.Lfe30-ResumeSpinningPokenavSprite
	.align	2, 0
	.type	 InitHoennMapHeaderSprites,function
	.thumb_func
InitHoennMapHeaderSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r0, #0x0
	bl	GetSubstructPtr
	add	r6, r0, #0
	ldr	r0, .L138
	bl	LoadCompressedSpriteSheet
	mov	r0, #0x1
	bl	AllocSpritePalette
	mov	r0, #0x2
	bl	AllocSpritePalette
	mov	r5, #0x0
	ldr	r0, .L138+0x4
	mov	r8, r0
	mov	r7, #0x4
.L136:
	ldr	r0, .L138+0x8
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	lsl	r4, r5, #0x2
	add	r2, r6, #0
	add	r2, r2, #0x1c
	add	r2, r2, r4
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	str	r0, [r2]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r7
	strb	r1, [r0]
	ldr	r1, [r2]
	lsl	r0, r5, #0x6
	strh	r0, [r1, #0x24]
	ldr	r0, .L138+0xc
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r2, r6, #0
	add	r2, r2, #0x24
	add	r2, r2, r4
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	str	r0, [r2]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r7
	strb	r1, [r0]
	ldr	r1, [r2]
	lsl	r0, r5, #0x5
	strh	r0, [r1, #0x24]
	ldr	r1, [r2]
	mov	r0, #0x12
	strh	r0, [r1, #0x26]
	ldr	r3, [r2]
	ldrh	r2, [r3, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	lsl	r0, r5, #0x3
	add	r0, r0, #0x40
	add	r1, r1, r0
	ldr	r4, .L138+0x10
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r4, .L138+0x14
	add	r0, r4, #0
	and	r2, r2, r0
	orr	r2, r2, r1
	strh	r2, [r3, #0x4]
	add	r5, r5, #0x1
	cmp	r5, #0x1
	ble	.L136	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L139:
	.align	2, 0
.L138:
	.word	sPokenavHoennMapLeftHeaderSpriteSheet
	.word	gSprites
	.word	sPokenavLeftHeaderHoennMapSpriteTemplate
	.word	sUnknown_0861FB44
	.word	0x3ff
	.word	-0x400
.Lfe31:
	.size	 InitHoennMapHeaderSprites,.Lfe31-InitHoennMapHeaderSprites
	.align	2, 0
	.globl	LoadLeftHeaderGfxForIndex
	.type	 LoadLeftHeaderGfxForIndex,function
	.thumb_func
LoadLeftHeaderGfxForIndex:
	push	{lr}
	cmp	r0, #0x5
	bhi	.L141	@cond_branch
	bl	LoadLeftHeaderGfxForMenu
	b	.L142
.L141:
	sub	r0, r0, #0x6
	bl	LoadLeftHeaderGfxForSubMenu
.L142:
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 LoadLeftHeaderGfxForIndex,.Lfe32-LoadLeftHeaderGfxForIndex
	.align	2, 0
	.globl	UpdateRegionMapRightHeaderTiles
	.type	 UpdateRegionMapRightHeaderTiles,function
	.thumb_func
UpdateRegionMapRightHeaderTiles:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x0
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x4
	bne	.L144	@cond_branch
	mov	r0, #0x2
	bl	GetSpriteTileStartByTag
	ldr	r3, [r5, #0x20]
	add	r0, r0, #0x20
	b	.L146
.L144:
	mov	r0, #0x2
	bl	GetSpriteTileStartByTag
	ldr	r3, [r5, #0x20]
	add	r0, r0, #0x40
.L146:
	ldr	r2, .L147
	add	r1, r2, #0
	and	r0, r0, r1
	ldrh	r2, [r3, #0x4]
	ldr	r1, .L147+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	0x3ff
	.word	-0x400
.Lfe33:
	.size	 UpdateRegionMapRightHeaderTiles,.Lfe33-UpdateRegionMapRightHeaderTiles
	.align	2, 0
	.type	 LoadLeftHeaderGfxForMenu,function
	.thumb_func
LoadLeftHeaderGfxForMenu:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r0
	cmp	r0, #0x5
	bhi	.L149	@cond_branch
	mov	r0, #0x0
	bl	GetSubstructPtr
	add	r7, r0, #0
	ldr	r0, .L154
	mov	r1, r9
	lsl	r6, r1, #0x3
	add	r6, r6, r0
	ldrh	r4, [r6, #0x6]
	ldr	r2, [r6]
	mov	r8, r2
	mov	r0, r8
	bl	GetDecompressedDataSize
	add	r5, r0, #0
	lsl	r4, r4, #0x5
	ldr	r0, .L154+0x4
	add	r4, r4, r0
	mov	r0, #0x1
	bl	IndexOfSpritePaletteTag
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r4, .L154+0x8
	mov	r0, r8
	add	r1, r4, #0
	bl	LZ77UnCompWram
	mov	r0, #0x2
	bl	GetSpriteTileStartByTag
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0xb
	ldr	r2, .L154+0xc
	add	r1, r1, r2
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r4, #0
	add	r2, r5, #0
	mov	r3, #0x1
	bl	RequestDma3Copy
	mov	r0, #0x2
	bl	GetSpriteTileStartByTag
	ldr	r3, [r7, #0x20]
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
	ldr	r2, .L154+0x10
	add	r1, r2, #0
	and	r0, r0, r1
	ldrh	r2, [r3, #0x4]
	ldr	r1, .L154+0x14
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x4]
	mov	r0, r9
	sub	r0, r0, #0x4
	cmp	r0, #0x1
	bhi	.L151	@cond_branch
	ldr	r1, [r7, #0x20]
	mov	r0, #0x38
	b	.L153
.L155:
	.align	2, 0
.L154:
	.word	sPokenavMenuLeftHeaderSpriteSheets
	.word	gPokenavLeftHeader_Pal
	.word	gDecompressionBuffer
	.word	0x6010000
	.word	0x3ff
	.word	-0x400
.L151:
	ldr	r1, [r7, #0x20]
	mov	r0, #0x40
.L153:
	strh	r0, [r1, #0x24]
.L149:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 LoadLeftHeaderGfxForMenu,.Lfe34-LoadLeftHeaderGfxForMenu
	.align	2, 0
	.type	 LoadLeftHeaderGfxForSubMenu,function
	.thumb_func
LoadLeftHeaderGfxForSubMenu:
	push	{r4, r5, r6, lr}
	cmp	r0, #0x6
	bhi	.L156	@cond_branch
	ldr	r2, .L158
	lsl	r1, r0, #0x3
	add	r0, r2, #0x4
	add	r0, r1, r0
	ldr	r4, [r0]
	add	r1, r1, r2
	ldr	r6, [r1]
	add	r0, r6, #0
	bl	GetDecompressedDataSize
	add	r5, r0, #0
	lsl	r4, r4, #0x5
	ldr	r0, .L158+0x4
	add	r4, r4, r0
	mov	r0, #0x2
	bl	IndexOfSpritePaletteTag
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r4, .L158+0x8
	add	r0, r6, #0
	add	r1, r4, #0
	bl	LZ77UnCompWram
	mov	r0, #0x2
	bl	GetSpriteTileStartByTag
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0xb
	ldr	r0, .L158+0xc
	add	r1, r1, r0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r4, #0
	add	r2, r5, #0
	mov	r3, #0x1
	bl	RequestDma3Copy
.L156:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L159:
	.align	2, 0
.L158:
	.word	sPokenavSubMenuLeftHeaderSpriteSheets
	.word	gPokenavLeftHeader_Pal
	.word	gDecompressionBuffer+0x1000
	.word	0x6010800
.Lfe35:
	.size	 LoadLeftHeaderGfxForSubMenu,.Lfe35-LoadLeftHeaderGfxForSubMenu
	.align	2, 0
	.globl	ShowLeftHeaderGfx
	.type	 ShowLeftHeaderGfx,function
	.thumb_func
ShowLeftHeaderGfx:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0x10
	cmp	r1, #0
	bne	.L161	@cond_branch
	mov	r0, #0x30
.L161:
	cmp	r3, #0x5
	bhi	.L163	@cond_branch
	add	r1, r2, #0
	bl	ShowLeftHeaderSprites
	b	.L164
.L163:
	add	r1, r2, #0
	bl	ShowLeftHeaderSubmenuSprites
.L164:
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 ShowLeftHeaderGfx,.Lfe36-ShowLeftHeaderGfx
	.align	2, 0
	.globl	HideMainOrSubMenuLeftHeader
	.type	 HideMainOrSubMenuLeftHeader,function
	.thumb_func
HideMainOrSubMenuLeftHeader:
	push	{lr}
	cmp	r0, #0x5
	bhi	.L166	@cond_branch
	add	r0, r1, #0
	bl	HideLeftHeaderSprites
	b	.L167
.L166:
	add	r0, r1, #0
	bl	HideLeftHeaderSubmenuSprites
.L167:
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 HideMainOrSubMenuLeftHeader,.Lfe37-HideMainOrSubMenuLeftHeader
	.align	2, 0
	.globl	SetLeftHeaderSpritesInvisibility
	.type	 SetLeftHeaderSpritesInvisibility,function
	.thumb_func
SetLeftHeaderSpritesInvisibility:
	push	{r4, lr}
	mov	r0, #0x0
	bl	GetSubstructPtr
	mov	r4, #0x4
	add	r2, r0, #0
	add	r2, r2, #0x1c
	mov	r3, #0x1
.L172:
	ldr	r1, [r2]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r4
	strb	r0, [r1]
	ldr	r1, [r2, #0x8]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r4
	strb	r0, [r1]
	add	r2, r2, #0x4
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L172	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 SetLeftHeaderSpritesInvisibility,.Lfe38-SetLeftHeaderSpritesInvisibility
	.align	2, 0
	.globl	AreLeftHeaderSpritesMoving
	.type	 AreLeftHeaderSpritesMoving,function
	.thumb_func
AreLeftHeaderSpritesMoving:
	push	{lr}
	mov	r0, #0x0
	bl	GetSubstructPtr
	add	r1, r0, #0
	ldr	r0, [r1, #0x1c]
	ldr	r2, [r0, #0x1c]
	ldr	r0, .L178
	cmp	r2, r0
	bne	.L175	@cond_branch
	ldr	r0, [r1, #0x24]
	ldr	r0, [r0, #0x1c]
	cmp	r0, r2
	bne	.L175	@cond_branch
	mov	r0, #0x0
	b	.L177
.L179:
	.align	2, 0
.L178:
	.word	SpriteCallbackDummy
.L175:
	mov	r0, #0x1
.L177:
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 AreLeftHeaderSpritesMoving,.Lfe39-AreLeftHeaderSpritesMoving
	.align	2, 0
	.type	 ShowLeftHeaderSprites,function
	.thumb_func
ShowLeftHeaderSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r0
	add	r4, r1, #0
	mov	r0, #0x0
	bl	GetSubstructPtr
	cmp	r4, #0
	bne	.L181	@cond_branch
	mov	r7, #0x60
	neg	r7, r7
	mov	r6, #0x20
	b	.L182
.L181:
	mov	r7, #0x80
	lsl	r7, r7, #0x1
	mov	r6, #0xa0
.L182:
	add	r4, r0, #0
	add	r4, r4, #0x1c
	mov	r5, #0x1
.L186:
	ldr	r0, [r4]
	mov	r1, r8
	strh	r1, [r0, #0x22]
	ldmia	r4!, {r0}
	add	r1, r7, #0
	add	r2, r6, #0
	mov	r3, #0xc
	bl	MoveLeftHeader
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L186	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 ShowLeftHeaderSprites,.Lfe40-ShowLeftHeaderSprites
	.align	2, 0
	.type	 ShowLeftHeaderSubmenuSprites,function
	.thumb_func
ShowLeftHeaderSubmenuSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r0
	add	r4, r1, #0
	mov	r0, #0x0
	bl	GetSubstructPtr
	cmp	r4, #0
	bne	.L189	@cond_branch
	mov	r7, #0x60
	neg	r7, r7
	mov	r6, #0x10
	b	.L190
.L189:
	mov	r7, #0x80
	lsl	r7, r7, #0x1
	mov	r6, #0xc0
.L190:
	add	r4, r0, #0
	add	r4, r4, #0x24
	mov	r5, #0x1
.L194:
	ldr	r0, [r4]
	mov	r1, r8
	strh	r1, [r0, #0x22]
	ldmia	r4!, {r0}
	add	r1, r7, #0
	add	r2, r6, #0
	mov	r3, #0xc
	bl	MoveLeftHeader
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L194	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 ShowLeftHeaderSubmenuSprites,.Lfe41-ShowLeftHeaderSubmenuSprites
	.align	2, 0
	.type	 HideLeftHeaderSprites,function
	.thumb_func
HideLeftHeaderSprites:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	mov	r0, #0x0
	bl	GetSubstructPtr
	cmp	r4, #0
	bne	.L197	@cond_branch
	mov	r6, #0x20
	mov	r5, #0x60
	neg	r5, r5
	b	.L198
.L197:
	mov	r6, #0xc0
	mov	r5, #0x80
	lsl	r5, r5, #0x1
.L198:
	add	r7, r0, #0
	add	r7, r7, #0x1c
	mov	r4, #0x1
.L202:
	ldmia	r7!, {r0}
	add	r1, r6, #0
	add	r2, r5, #0
	mov	r3, #0xc
	bl	MoveLeftHeader
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L202	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 HideLeftHeaderSprites,.Lfe42-HideLeftHeaderSprites
	.align	2, 0
	.type	 HideLeftHeaderSubmenuSprites,function
	.thumb_func
HideLeftHeaderSubmenuSprites:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	mov	r0, #0x0
	bl	GetSubstructPtr
	cmp	r4, #0
	bne	.L205	@cond_branch
	mov	r6, #0x10
	mov	r5, #0x60
	neg	r5, r5
	b	.L206
.L205:
	mov	r6, #0xc0
	mov	r5, #0x80
	lsl	r5, r5, #0x1
.L206:
	add	r7, r0, #0
	add	r7, r7, #0x24
	mov	r4, #0x1
.L210:
	ldmia	r7!, {r0}
	add	r1, r6, #0
	add	r2, r5, #0
	mov	r3, #0xc
	bl	MoveLeftHeader
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L210	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 HideLeftHeaderSubmenuSprites,.Lfe43-HideLeftHeaderSubmenuSprites
	.align	2, 0
	.type	 MoveLeftHeader,function
	.thumb_func
MoveLeftHeader:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	add	r6, r2, #0
	add	r5, r3, #0
	strh	r0, [r4, #0x20]
	lsl	r1, r0, #0x4
	strh	r1, [r4, #0x2e]
	sub	r0, r6, r0
	lsl	r0, r0, #0x4
	add	r1, r5, #0
	bl	__divsi3
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x32]
	strh	r6, [r4, #0x3c]
	ldr	r0, .L213
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L214:
	.align	2, 0
.L213:
	.word	SpriteCB_MoveLeftHeader
.Lfe44:
	.size	 MoveLeftHeader,.Lfe44-MoveLeftHeader
	.align	2, 0
	.type	 SpriteCB_MoveLeftHeader,function
	.thumb_func
SpriteCB_MoveLeftHeader:
	push	{lr}
	add	r2, r0, #0
	ldrh	r1, [r2, #0x32]
	mov	r3, #0x32
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L216	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x32]
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x2e]
	add	r0, r0, r1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x20]
	add	r0, r0, #0x10
	lsl	r0, r0, #0x10
	mov	r1, #0x88
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bls	.L217	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L219
.L217:
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	b	.L219
.L216:
	ldrh	r0, [r2, #0x3c]
	strh	r0, [r2, #0x20]
	ldr	r0, .L220
	str	r0, [r2, #0x1c]
.L219:
	pop	{r0}
	bx	r0
.L221:
	.align	2, 0
.L220:
	.word	SpriteCallbackDummy
.Lfe45:
	.size	 SpriteCB_MoveLeftHeader,.Lfe45-SpriteCB_MoveLeftHeader
.text
	.align	2, 0

