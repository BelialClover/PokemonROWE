@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gDecompressionBuffer
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gDecompressionBuffer,object
	.size	 gDecompressionBuffer,16384
gDecompressionBuffer:
	.byte	0x0
	.space	16383
.text
	.align	2, 0
	.globl	LZDecompressWram
	.type	 LZDecompressWram,function
	.thumb_func
LZDecompressWram:
	push	{lr}
	bl	LZ77UnCompWram
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 LZDecompressWram,.Lfe1-LZDecompressWram
	.align	2, 0
	.globl	LZDecompressVram
	.type	 LZDecompressVram,function
	.thumb_func
LZDecompressVram:
	push	{lr}
	bl	LZ77UnCompVram
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 LZDecompressVram,.Lfe2-LZDecompressVram
	.align	2, 0
	.globl	LoadCompressedSpriteSheet
	.type	 LoadCompressedSpriteSheet,function
	.thumb_func
LoadCompressedSpriteSheet:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	ldr	r0, [r4]
	ldr	r5, .L5
	add	r1, r5, #0
	bl	LZ77UnCompWram
	str	r5, [sp]
	ldrh	r1, [r4, #0x6]
	lsl	r1, r1, #0x10
	ldrh	r0, [r4, #0x4]
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpriteSheet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L6:
	.align	2, 0
.L5:
	.word	gDecompressionBuffer
.Lfe3:
	.size	 LoadCompressedSpriteSheet,.Lfe3-LoadCompressedSpriteSheet
	.align	2, 0
	.globl	LoadCompressedSpriteSheetOverrideBuffer
	.type	 LoadCompressedSpriteSheetOverrideBuffer,function
	.thumb_func
LoadCompressedSpriteSheetOverrideBuffer:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r0, [r4]
	bl	LZ77UnCompWram
	str	r5, [sp]
	ldrh	r1, [r4, #0x6]
	lsl	r1, r1, #0x10
	ldrh	r0, [r4, #0x4]
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpriteSheet
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 LoadCompressedSpriteSheetOverrideBuffer,.Lfe4-LoadCompressedSpriteSheetOverrideBuffer
	.align	2, 0
	.globl	LoadCompressedSpritePalette
	.type	 LoadCompressedSpritePalette,function
	.thumb_func
LoadCompressedSpritePalette:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	ldr	r0, [r5]
	ldr	r4, .L9
	add	r1, r4, #0
	bl	LZ77UnCompWram
	str	r4, [sp]
	ldrh	r2, [r5, #0x4]
	ldr	r1, .L9+0x4
	ldr	r0, [sp, #0x4]
	and	r0, r0, r1
	orr	r0, r0, r2
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpritePalette
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L10:
	.align	2, 0
.L9:
	.word	gDecompressionBuffer
	.word	-0x10000
.Lfe5:
	.size	 LoadCompressedSpritePalette,.Lfe5-LoadCompressedSpritePalette
	.align	2, 0
	.globl	LoadCompressedSpritePaletteOverrideBuffer
	.type	 LoadCompressedSpritePaletteOverrideBuffer,function
	.thumb_func
LoadCompressedSpritePaletteOverrideBuffer:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	add	r4, r1, #0
	ldr	r0, [r5]
	bl	LZ77UnCompWram
	str	r4, [sp]
	ldrh	r2, [r5, #0x4]
	ldr	r1, .L12
	ldr	r0, [sp, #0x4]
	and	r0, r0, r1
	orr	r0, r0, r2
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpritePalette
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	-0x10000
.Lfe6:
	.size	 LoadCompressedSpritePaletteOverrideBuffer,.Lfe6-LoadCompressedSpritePaletteOverrideBuffer
	.align	2, 0
	.globl	DecompressPicFromTable
	.type	 DecompressPicFromTable,function
	.thumb_func
DecompressPicFromTable:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r0, .L17
	cmp	r5, r0
	ble	.L15	@cond_branch
	ldr	r0, .L17+0x4
	ldr	r0, [r0]
	bl	LZ77UnCompWram
	b	.L16
.L18:
	.align	2, 0
.L17:
	.word	0x4b7
	.word	gMonFrontPicTable
.L15:
	ldr	r0, [r3]
	add	r1, r4, #0
	bl	LZ77UnCompWram
.L16:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	DuplicateDeoxysTiles
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 DecompressPicFromTable,.Lfe7-DecompressPicFromTable
	.align	2, 0
	.globl	HandleLoadSpecialPokePic
	.type	 HandleLoadSpecialPokePic,function
	.thumb_func
HandleLoadSpecialPokePic:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r0, r2, #0x3
	ldr	r1, .L22
	add	r0, r0, r1
	mov	r1, #0x0
	cmp	r4, r0
	bne	.L20	@cond_branch
	mov	r1, #0x1
.L20:
	str	r1, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	LoadSpecialPokePic_2
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gMonFrontPicTable
.Lfe8:
	.size	 HandleLoadSpecialPokePic,.Lfe8-HandleLoadSpecialPokePic
	.align	2, 0
	.globl	LoadSpecialPokePic
	.type	 LoadSpecialPokePic,function
	.thumb_func
LoadSpecialPokePic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r8, r0
	add	r5, r1, #0
	add	r4, r2, #0
	add	r7, r3, #0
	ldr	r0, [sp, #0x1c]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r4, #0xc9
	bne	.L25	@cond_branch
	add	r0, r7, #0
	bl	GetUnownSpeciesId
	add	r1, r0, #0
	cmp	r6, #0
	bne	.L26	@cond_branch
	ldr	r0, .L37
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L35
.L38:
	.align	2, 0
.L37:
	.word	gMonBackPicTable
.L26:
	ldr	r0, .L39
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, [r1]
	add	r1, r5, #0
	bl	LZ77UnCompWram
	lsl	r1, r4, #0x10
	mov	r9, r1
	b	.L28
.L40:
	.align	2, 0
.L39:
	.word	gMonFrontPicTable
.L25:
	ldr	r0, .L41
	cmp	r4, r0
	ble	.L29	@cond_branch
	ldr	r0, .L41+0x4
	ldr	r0, [r0]
.L35:
	add	r1, r5, #0
	bl	LZ77UnCompWram
	lsl	r0, r4, #0x10
	mov	r9, r0
	b	.L28
.L42:
	.align	2, 0
.L41:
	.word	0x4b7
	.word	gMonFrontPicTable
.L29:
	ldr	r0, .L43
	add	r0, r4, r0
	ldrb	r0, [r0]
	lsl	r1, r4, #0x10
	mov	r9, r1
	cmp	r0, #0
	beq	.L31	@cond_branch
	lsr	r0, r1, #0x10
	add	r1, r7, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xfe
	bne	.L31	@cond_branch
	cmp	r6, #0
	beq	.L32	@cond_branch
	ldr	r0, .L43+0x4
	b	.L36
.L44:
	.align	2, 0
.L43:
	.word	SpeciesHasGenderDifference
	.word	gMonFrontPicTableFemale
.L32:
	ldr	r0, .L45
.L36:
	lsl	r1, r4, #0x3
	add	r1, r1, r0
	ldr	r0, [r1]
	add	r1, r5, #0
	bl	LZ77UnCompWram
	b	.L28
.L46:
	.align	2, 0
.L45:
	.word	gMonBackPicTableFemale
.L31:
	mov	r1, r8
	ldr	r0, [r1]
	add	r1, r5, #0
	bl	LZ77UnCompWram
.L28:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	DuplicateDeoxysTiles
	mov	r1, r9
	lsr	r0, r1, #0x10
	add	r1, r7, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	DrawSpindaSpots
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 LoadSpecialPokePic,.Lfe9-LoadSpecialPokePic
	.align	2, 0
	.globl	Unused_LZDecompressWramIndirect
	.type	 Unused_LZDecompressWramIndirect,function
	.thumb_func
Unused_LZDecompressWramIndirect:
	push	{lr}
	ldr	r0, [r0]
	bl	LZ77UnCompWram
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 Unused_LZDecompressWramIndirect,.Lfe10-Unused_LZDecompressWramIndirect
	.align	2, 0
	.globl	sub_803471C
	.type	 sub_803471C,function
	.thumb_func
sub_803471C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	mov	r9, r0
	str	r1, [sp]
	str	r2, [sp, #0x4]
	add	r5, r3, #0
	mov	r0, #0x1
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB451
	b	.L49	@long jump
.LCB451:
	asr	r0, r1, #0x1
	add	r0, r0, #0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	ldr	r2, [sp]
	cmp	r0, r2
	blt	.LCB461
	b	.L109	@long jump
.LCB461:
	mov	r4, #0x8
	sub	r1, r4, r1
	str	r1, [sp, #0x10]
.L53:
	mov	r7, #0x0
	add	r0, r0, #0x1
	str	r0, [sp, #0x14]
	ldr	r0, [sp, #0x10]
	cmp	r7, r0
	bge	.L55	@cond_branch
	ldr	r1, [sp, #0x8]
	lsl	r1, r1, #0x8
	str	r1, [sp, #0x18]
	mov	r2, #0x0
	mov	sl, r2
	mov	r0, r9
	mov	r4, #0x8
	sub	r0, r4, r0
	str	r0, [sp, #0xc]
.L57:
	mov	r3, #0x0
	asr	r0, r7, #0x1
	add	r1, r7, #0
	mov	r2, #0x1
	and	r1, r1, r2
	str	r1, [sp, #0x20]
	lsl	r0, r0, #0x8
	mov	r8, r0
	mov	ip, r5
.L61:
	lsl	r1, r3, #0x5
	ldr	r4, [sp, #0x18]
	add	r0, r5, r4
	add	r0, r0, r1
	mov	r1, r8
	add	r2, r0, r1
	mov	r1, ip
	add	r1, r1, r8
	mov	r6, #0xf
.L65:
	ldr	r4, [sp, #0x20]
	cmp	r4, #0
	bne	.L66	@cond_branch
	strb	r4, [r1]
	add	r4, sp, #0x20
	ldrb	r4, [r4]
	strb	r4, [r2, #0x10]
	b	.L64
.L66:
	mov	r0, sl
	strb	r0, [r1, #0x10]
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r4, r2, r4
	str	r4, [sp, #0x1c]
	strb	r0, [r4]
.L64:
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L65	@cond_branch
	mov	r0, #0x20
	add	ip, ip, r0
	add	r3, r3, #0x1
	cmp	r3, #0x7
	ble	.L61	@cond_branch
	add	r7, r7, #0x1
	ldr	r1, [sp, #0xc]
	cmp	r7, r1
	blt	.L57	@cond_branch
.L55:
	mov	r7, #0x0
	mov	r2, #0x0
.L74:
	mov	r6, #0x0
	add	r4, r7, #0x1
	mov	r8, r4
	lsl	r4, r7, #0x5
.L78:
	add	r0, r6, #0x1
	mov	sl, r0
	lsl	r1, r6, #0x8
	add	r0, r1, #0
	add	r0, r0, #0xc0
	add	r0, r5, r0
	add	r0, r0, r4
	add	r1, r5, r1
	add	r1, r1, r4
	mov	r3, #0x1f
.L82:
	strb	r2, [r1]
	strb	r2, [r0]
	add	r0, r0, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L82	@cond_branch
	mov	r6, sl
	cmp	r6, #0x7
	ble	.L78	@cond_branch
	mov	r7, r8
	cmp	r7, #0x1
	ble	.L74	@cond_branch
	mov	r1, r9
	cmp	r1, #0x5
	bne	.L86	@cond_branch
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	add	r5, r5, r2
.L86:
	mov	r7, #0x0
	cmp	r7, r9
	bge	.L88	@cond_branch
.L90:
	mov	r3, #0x0
	add	r7, r7, #0x1
	mov	r8, r7
	cmp	r3, r9
	bge	.L92	@cond_branch
.L94:
	add	r3, r3, #0x1
	mov	sl, r3
	ldr	r4, [sp, #0x4]
	add	r4, r4, #0x20
	add	r7, r5, #0
	add	r7, r7, #0x20
	mov	r0, #0x12
	add	r0, r0, r5
	mov	ip, r0
	ldr	r2, [sp, #0x4]
	add	r3, r5, #0
	mov	r6, #0x3
.L98:
	ldrb	r0, [r2]
	mov	r1, ip
	strb	r0, [r1]
	ldrb	r0, [r2, #0x1]
	strb	r0, [r1, #0x1]
	ldrb	r0, [r2, #0x2]
	strb	r0, [r1, #0x1e]
	ldrb	r0, [r2, #0x3]
	strb	r0, [r1, #0x1f]
	mov	r0, #0x81
	lsl	r0, r0, #0x1
	add	r1, r3, r0
	ldrb	r0, [r2, #0x10]
	strb	r0, [r1]
	ldr	r0, .L149
	add	r1, r3, r0
	ldrb	r0, [r2, #0x11]
	strb	r0, [r1]
	mov	r0, #0x90
	lsl	r0, r0, #0x1
	add	r1, r3, r0
	ldrb	r0, [r2, #0x12]
	strb	r0, [r1]
	ldr	r0, .L149+0x4
	add	r1, r3, r0
	ldrb	r0, [r2, #0x13]
	strb	r0, [r1]
	mov	r1, #0x4
	add	ip, ip, r1
	add	r2, r2, #0x4
	add	r3, r3, #0x4
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L98	@cond_branch
	str	r4, [sp, #0x4]
	add	r5, r7, #0
	mov	r3, sl
	cmp	r3, r9
	blt	.L94	@cond_branch
.L92:
	mov	r2, r9
	cmp	r2, #0x7
	bne	.L101	@cond_branch
	add	r5, r5, #0x20
	b	.L89
.L150:
	.align	2, 0
.L149:
	.word	0x103
	.word	0x121
.L101:
	mov	r4, r9
	cmp	r4, #0x5
	bne	.L89	@cond_branch
	add	r5, r5, #0x60
.L89:
	mov	r7, r8
	cmp	r7, r9
	blt	.L90	@cond_branch
.L88:
	mov	r0, r9
	cmp	r0, #0x7
	bne	.L105	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r5, r5, r1
	b	.L52
.L105:
	mov	r2, r9
	cmp	r2, #0x5
	bne	.L52	@cond_branch
	mov	r4, #0xf0
	lsl	r4, r4, #0x1
	add	r5, r5, r4
.L52:
	ldr	r0, [sp, #0x14]
	ldr	r1, [sp]
	cmp	r0, r1
	bge	.LCB772
	b	.L53	@long jump
.LCB772:
	b	.L109
.L49:
	mov	r6, #0x0
	ldr	r2, [sp]
	cmp	r6, r2
	bge	.L109	@cond_branch
.L113:
	add	r6, r6, #0x1
	mov	sl, r6
	mov	r4, r9
	cmp	r4, #0x6
	bne	.L114	@cond_branch
	mov	r0, #0x0
	mov	r3, #0xff
.L118:
	strb	r0, [r5]
	add	r5, r5, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L118	@cond_branch
.L114:
	mov	r7, #0x0
	cmp	r7, r9
	bge	.L121	@cond_branch
.L123:
	add	r7, r7, #0x1
	mov	r8, r7
	mov	r1, r9
	lsl	r0, r1, #0x5
	cmp	r1, #0x6
	bne	.L124	@cond_branch
	mov	r1, #0x0
	mov	r3, #0x1f
.L128:
	strb	r1, [r5]
	add	r5, r5, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L128	@cond_branch
.L124:
	add	r1, r0, #0
	cmp	r1, #0
	ble	.L131	@cond_branch
	add	r3, r1, #0
.L133:
	ldr	r2, [sp, #0x4]
	ldrb	r0, [r2]
	strb	r0, [r5]
	add	r2, r2, #0x1
	str	r2, [sp, #0x4]
	add	r5, r5, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L133	@cond_branch
.L131:
	mov	r4, r9
	cmp	r4, #0x6
	bne	.L122	@cond_branch
	mov	r0, #0x0
	mov	r3, #0x1f
.L139:
	strb	r0, [r5]
	add	r5, r5, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L139	@cond_branch
.L122:
	mov	r7, r8
	cmp	r7, r9
	blt	.L123	@cond_branch
.L121:
	mov	r0, r9
	cmp	r0, #0x6
	bne	.L112	@cond_branch
	mov	r0, #0x0
	mov	r3, #0xff
.L146:
	strb	r0, [r5]
	add	r5, r5, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L146	@cond_branch
.L112:
	mov	r6, sl
	ldr	r1, [sp]
	cmp	r6, r1
	blt	.L113	@cond_branch
.L109:
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 sub_803471C,.Lfe11-sub_803471C
	.align	2, 0
	.globl	GetDecompressedDataSize
	.type	 GetDecompressedDataSize,function
	.thumb_func
GetDecompressedDataSize:
	add	r2, r0, #0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	ldrb	r1, [r2, #0x2]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x1]
	orr	r0, r0, r1
	bx	lr
.Lfe12:
	.size	 GetDecompressedDataSize,.Lfe12-GetDecompressedDataSize
	.align	2, 0
	.globl	LoadCompressedSpriteSheetUsingHeap
	.type	 LoadCompressedSpriteSheetUsingHeap,function
	.thumb_func
LoadCompressedSpriteSheetUsingHeap:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	ldr	r0, [r4]
	ldr	r0, [r0]
	lsr	r0, r0, #0x8
	bl	AllocZeroed
	add	r5, r0, #0
	ldr	r0, [r4]
	add	r1, r5, #0
	bl	LZ77UnCompWram
	str	r5, [sp]
	ldrh	r1, [r4, #0x6]
	lsl	r1, r1, #0x10
	ldrh	r0, [r4, #0x4]
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpriteSheet
	add	r0, r5, #0
	bl	Free
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 LoadCompressedSpriteSheetUsingHeap,.Lfe13-LoadCompressedSpriteSheetUsingHeap
	.align	2, 0
	.globl	LoadCompressedSpritePaletteUsingHeap
	.type	 LoadCompressedSpritePaletteUsingHeap,function
	.thumb_func
LoadCompressedSpritePaletteUsingHeap:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	ldr	r0, [r4]
	ldr	r0, [r0]
	lsr	r0, r0, #0x8
	bl	AllocZeroed
	add	r5, r0, #0
	ldr	r0, [r4]
	add	r1, r5, #0
	bl	LZ77UnCompWram
	str	r5, [sp]
	ldrh	r2, [r4, #0x4]
	ldr	r1, .L154
	ldr	r0, [sp, #0x4]
	and	r0, r0, r1
	orr	r0, r0, r2
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpritePalette
	add	r0, r5, #0
	bl	Free
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L155:
	.align	2, 0
.L154:
	.word	-0x10000
.Lfe14:
	.size	 LoadCompressedSpritePaletteUsingHeap,.Lfe14-LoadCompressedSpritePaletteUsingHeap
	.align	2, 0
	.globl	DecompressPicFromTable_2
	.type	 DecompressPicFromTable_2,function
	.thumb_func
DecompressPicFromTable_2:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r0, .L159
	cmp	r5, r0
	ble	.L157	@cond_branch
	ldr	r0, .L159+0x4
	ldr	r0, [r0]
	bl	LZ77UnCompWram
	b	.L158
.L160:
	.align	2, 0
.L159:
	.word	0x4b7
	.word	gMonFrontPicTable
.L157:
	ldr	r0, [r3]
	add	r1, r4, #0
	bl	LZ77UnCompWram
.L158:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	DuplicateDeoxysTiles
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 DecompressPicFromTable_2,.Lfe15-DecompressPicFromTable_2
	.align	2, 0
	.globl	LoadSpecialPokePic_2
	.type	 LoadSpecialPokePic_2,function
	.thumb_func
LoadSpecialPokePic_2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r8, r0
	add	r5, r1, #0
	add	r4, r2, #0
	add	r7, r3, #0
	ldr	r0, [sp, #0x1c]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r4, #0xc9
	bne	.L162	@cond_branch
	add	r0, r7, #0
	bl	GetUnownSpeciesId
	add	r1, r0, #0
	cmp	r6, #0
	bne	.L163	@cond_branch
	ldr	r0, .L174
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L172
.L175:
	.align	2, 0
.L174:
	.word	gMonBackPicTable
.L163:
	ldr	r0, .L176
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, [r1]
	add	r1, r5, #0
	bl	LZ77UnCompWram
	lsl	r1, r4, #0x10
	mov	r9, r1
	b	.L165
.L177:
	.align	2, 0
.L176:
	.word	gMonFrontPicTable
.L162:
	ldr	r0, .L178
	cmp	r4, r0
	ble	.L166	@cond_branch
	ldr	r0, .L178+0x4
	ldr	r0, [r0]
.L172:
	add	r1, r5, #0
	bl	LZ77UnCompWram
	lsl	r0, r4, #0x10
	mov	r9, r0
	b	.L165
.L179:
	.align	2, 0
.L178:
	.word	0x4b7
	.word	gMonFrontPicTable
.L166:
	ldr	r0, .L180
	add	r0, r4, r0
	ldrb	r0, [r0]
	lsl	r1, r4, #0x10
	mov	r9, r1
	cmp	r0, #0
	beq	.L168	@cond_branch
	lsr	r0, r1, #0x10
	add	r1, r7, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xfe
	bne	.L168	@cond_branch
	cmp	r6, #0
	beq	.L169	@cond_branch
	ldr	r0, .L180+0x4
	b	.L173
.L181:
	.align	2, 0
.L180:
	.word	SpeciesHasGenderDifference
	.word	gMonFrontPicTableFemale
.L169:
	ldr	r0, .L182
.L173:
	lsl	r1, r4, #0x3
	add	r1, r1, r0
	ldr	r0, [r1]
	add	r1, r5, #0
	bl	LZ77UnCompWram
	b	.L165
.L183:
	.align	2, 0
.L182:
	.word	gMonBackPicTableFemale
.L168:
	mov	r1, r8
	ldr	r0, [r1]
	add	r1, r5, #0
	bl	LZ77UnCompWram
.L165:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	DuplicateDeoxysTiles
	mov	r1, r9
	lsr	r0, r1, #0x10
	add	r1, r7, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	DrawSpindaSpots
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 LoadSpecialPokePic_2,.Lfe16-LoadSpecialPokePic_2
	.align	2, 0
	.globl	HandleLoadSpecialPokePic_2
	.type	 HandleLoadSpecialPokePic_2,function
	.thumb_func
HandleLoadSpecialPokePic_2:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r0, r2, #0x3
	ldr	r1, .L187
	add	r0, r0, r1
	mov	r1, #0x0
	cmp	r4, r0
	bne	.L185	@cond_branch
	mov	r1, #0x1
.L185:
	str	r1, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	LoadSpecialPokePic_2
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L188:
	.align	2, 0
.L187:
	.word	gMonFrontPicTable
.Lfe17:
	.size	 HandleLoadSpecialPokePic_2,.Lfe17-HandleLoadSpecialPokePic_2
	.align	2, 0
	.globl	DecompressPicFromTable_DontHandleDeoxys
	.type	 DecompressPicFromTable_DontHandleDeoxys,function
	.thumb_func
DecompressPicFromTable_DontHandleDeoxys:
	push	{lr}
	add	r3, r0, #0
	ldr	r0, .L192
	cmp	r2, r0
	ble	.L190	@cond_branch
	ldr	r0, .L192+0x4
	ldr	r0, [r0]
	bl	LZ77UnCompWram
	b	.L191
.L193:
	.align	2, 0
.L192:
	.word	0x4b7
	.word	gMonFrontPicTable
.L190:
	ldr	r0, [r3]
	bl	LZ77UnCompWram
.L191:
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 DecompressPicFromTable_DontHandleDeoxys,.Lfe18-DecompressPicFromTable_DontHandleDeoxys
	.align	2, 0
	.globl	HandleLoadSpecialPokePic_DontHandleDeoxys
	.type	 HandleLoadSpecialPokePic_DontHandleDeoxys,function
	.thumb_func
HandleLoadSpecialPokePic_DontHandleDeoxys:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r0, r2, #0x3
	ldr	r1, .L197
	add	r0, r0, r1
	mov	r1, #0x0
	cmp	r4, r0
	bne	.L195	@cond_branch
	mov	r1, #0x1
.L195:
	str	r1, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	LoadSpecialPokePic_DontHandleDeoxys
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L198:
	.align	2, 0
.L197:
	.word	gMonFrontPicTable
.Lfe19:
	.size	 HandleLoadSpecialPokePic_DontHandleDeoxys,.Lfe19-HandleLoadSpecialPokePic_DontHandleDeoxys
	.align	2, 0
	.globl	LoadSpecialPokePic_DontHandleDeoxys
	.type	 LoadSpecialPokePic_DontHandleDeoxys,function
	.thumb_func
LoadSpecialPokePic_DontHandleDeoxys:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r0
	add	r5, r1, #0
	add	r4, r2, #0
	add	r7, r3, #0
	ldr	r0, [sp, #0x1c]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r4, #0xc9
	bne	.L200	@cond_branch
	add	r0, r7, #0
	bl	GetUnownSpeciesId
	add	r1, r0, #0
	cmp	r6, #0
	bne	.L201	@cond_branch
	ldr	r0, .L212
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L210
.L213:
	.align	2, 0
.L212:
	.word	gMonBackPicTable
.L201:
	ldr	r0, .L214
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L210
.L215:
	.align	2, 0
.L214:
	.word	gMonFrontPicTable
.L200:
	ldr	r0, .L216
	cmp	r4, r0
	ble	.L204	@cond_branch
	ldr	r0, .L216+0x4
	ldr	r0, [r0]
.L210:
	add	r1, r5, #0
	bl	LZ77UnCompWram
	lsl	r4, r4, #0x10
	mov	r8, r4
	b	.L203
.L217:
	.align	2, 0
.L216:
	.word	0x4b7
	.word	gMonFrontPicTable
.L204:
	ldr	r0, .L218
	add	r0, r4, r0
	ldrb	r0, [r0]
	lsl	r1, r4, #0x10
	mov	r8, r1
	cmp	r0, #0
	beq	.L206	@cond_branch
	lsr	r0, r1, #0x10
	add	r1, r7, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xfe
	bne	.L206	@cond_branch
	cmp	r6, #0
	beq	.L207	@cond_branch
	ldr	r0, .L218+0x4
	b	.L211
.L219:
	.align	2, 0
.L218:
	.word	SpeciesHasGenderDifference
	.word	gMonFrontPicTableFemale
.L207:
	ldr	r0, .L220
.L211:
	lsl	r1, r4, #0x3
	add	r1, r1, r0
	ldr	r0, [r1]
	add	r1, r5, #0
	bl	LZ77UnCompWram
	b	.L203
.L221:
	.align	2, 0
.L220:
	.word	gMonBackPicTableFemale
.L206:
	mov	r1, r9
	ldr	r0, [r1]
	add	r1, r5, #0
	bl	LZ77UnCompWram
.L203:
	mov	r1, r8
	lsr	r0, r1, #0x10
	add	r1, r7, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	DrawSpindaSpots
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 LoadSpecialPokePic_DontHandleDeoxys,.Lfe20-LoadSpecialPokePic_DontHandleDeoxys
	.align	2, 0
	.type	 DuplicateDeoxysTiles,function
	.thumb_func
DuplicateDeoxysTiles:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0xc1
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L223	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	add	r0, r3, r1
	ldr	r2, .L224
	add	r1, r3, #0
	bl	CpuSet
.L223:
	pop	{r0}
	bx	r0
.L225:
	.align	2, 0
.L224:
	.word	0x4000200
.Lfe21:
	.size	 DuplicateDeoxysTiles,.Lfe21-DuplicateDeoxysTiles
.text
	.align	2, 0

