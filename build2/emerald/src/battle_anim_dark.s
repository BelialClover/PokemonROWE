@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_08596FC8
	.section .rodata
	.align	2, 0
	.type	 gUnknown_08596FC8,object
	.size	 gUnknown_08596FC8,24
gUnknown_08596FC8:
	.short	0x271f
	.short	0x271f
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81138D4
	.align	2, 0
	.type	 sAffineAnim_Bite_0,object
sAffineAnim_Bite_0:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Bite_0,16
	.align	2, 0
	.type	 sAffineAnim_Bite_1,object
sAffineAnim_Bite_1:
	.short	0x0
	.short	0x0
	.byte	0x20
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Bite_1,16
	.align	2, 0
	.type	 sAffineAnim_Bite_2,object
sAffineAnim_Bite_2:
	.short	0x0
	.short	0x0
	.byte	0x40
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Bite_2,16
	.align	2, 0
	.type	 sAffineAnim_Bite_3,object
sAffineAnim_Bite_3:
	.short	0x0
	.short	0x0
	.byte	0x60
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Bite_3,16
	.align	2, 0
	.type	 sAffineAnim_Bite_4,object
sAffineAnim_Bite_4:
	.short	0x0
	.short	0x0
	.byte	0x80
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Bite_4,16
	.align	2, 0
	.type	 sAffineAnim_Bite_5,object
sAffineAnim_Bite_5:
	.short	0x0
	.short	0x0
	.byte	0xa0
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Bite_5,16
	.align	2, 0
	.type	 sAffineAnim_Bite_6,object
sAffineAnim_Bite_6:
	.short	0x0
	.short	0x0
	.byte	0xc0
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Bite_6,16
	.align	2, 0
	.type	 sAffineAnim_Bite_7,object
sAffineAnim_Bite_7:
	.short	0x0
	.short	0x0
	.byte	0xe0
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Bite_7,16
	.globl	gAffineAnims_Bite
	.align	2, 0
	.type	 gAffineAnims_Bite,object
gAffineAnims_Bite:
	.word	sAffineAnim_Bite_0
	.word	sAffineAnim_Bite_1
	.word	sAffineAnim_Bite_2
	.word	sAffineAnim_Bite_3
	.word	sAffineAnim_Bite_4
	.word	sAffineAnim_Bite_5
	.word	sAffineAnim_Bite_6
	.word	sAffineAnim_Bite_7
	.size	 gAffineAnims_Bite,32
	.globl	gSharpTeethSpriteTemplate
	.align	2, 0
	.type	 gSharpTeethSpriteTemplate,object
	.size	 gSharpTeethSpriteTemplate,24
gSharpTeethSpriteTemplate:
	.short	0x279b
	.short	0x279b
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_Bite
	.word	AnimBite
	.globl	gClampJawSpriteTemplate
	.align	2, 0
	.type	 gClampJawSpriteTemplate,object
	.size	 gClampJawSpriteTemplate,24
gClampJawSpriteTemplate:
	.short	0x27a1
	.short	0x27a1
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_Bite
	.word	AnimBite
	.align	2, 0
	.type	 sAffineAnim_TearDrop_0,object
sAffineAnim_TearDrop_0:
	.short	0xc0
	.short	0xc0
	.byte	0x50
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfe
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_TearDrop_0,24
	.align	2, 0
	.type	 sAffineAnim_TearDrop_1,object
sAffineAnim_TearDrop_1:
	.short	0xc0
	.short	0xc0
	.byte	0xb0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x2
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_TearDrop_1,24
	.globl	gAffineAnims_TearDrop
	.align	2, 0
	.type	 gAffineAnims_TearDrop,object
gAffineAnims_TearDrop:
	.word	sAffineAnim_TearDrop_0
	.word	sAffineAnim_TearDrop_1
	.size	 gAffineAnims_TearDrop,8
	.globl	gTearDropSpriteTemplate
	.align	2, 0
	.type	 gTearDropSpriteTemplate,object
	.size	 gTearDropSpriteTemplate,24
gTearDropSpriteTemplate:
	.short	0x27ab
	.short	0x27ab
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_TearDrop
	.word	AnimTearDrop
	.align	2, 0
	.type	 sAnim_ClawSlash_0,object
sAnim_ClawSlash_0:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ClawSlash_0,24
	.align	2, 0
	.type	 sAnim_ClawSlash_1,object
sAnim_ClawSlash_1:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	0x30
	.byte	0x44
	.space	1
	.short	0x40
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ClawSlash_1,24
	.globl	gAnims_ClawSlash
	.align	2, 0
	.type	 gAnims_ClawSlash,object
gAnims_ClawSlash:
	.word	sAnim_ClawSlash_0
	.word	sAnim_ClawSlash_1
	.size	 gAnims_ClawSlash,8
	.globl	gClawSlashSpriteTemplate
	.align	2, 0
	.type	 gClawSlashSpriteTemplate,object
	.size	 gClawSlashSpriteTemplate,24
gClawSlashSpriteTemplate:
	.short	0x2737
	.short	0x2737
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_ClawSlash
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimClawSlash
	.globl	gPunishmentImpactAffineAnimCmd_1
	.align	2, 0
	.type	 gPunishmentImpactAffineAnimCmd_1,object
gPunishmentImpactAffineAnimCmd_1:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gPunishmentImpactAffineAnimCmd_1,16
	.globl	gPunishmentImpactAffineAnimCmd_2
	.align	2, 0
	.type	 gPunishmentImpactAffineAnimCmd_2,object
gPunishmentImpactAffineAnimCmd_2:
	.short	0xd8
	.short	0xd8
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gPunishmentImpactAffineAnimCmd_2,24
	.globl	gPunishmentImpactAffineAnimCmd_3
	.align	2, 0
	.type	 gPunishmentImpactAffineAnimCmd_3,object
gPunishmentImpactAffineAnimCmd_3:
	.short	0xb0
	.short	0xb0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gPunishmentImpactAffineAnimCmd_3,24
	.globl	gPunishmentImpactAffineAnimCmd_4
	.align	2, 0
	.type	 gPunishmentImpactAffineAnimCmd_4,object
gPunishmentImpactAffineAnimCmd_4:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gPunishmentImpactAffineAnimCmd_4,24
	.globl	gPunishmentImpactAffineAnim
	.align	2, 0
	.type	 gPunishmentImpactAffineAnim,object
gPunishmentImpactAffineAnim:
	.word	gPunishmentImpactAffineAnimCmd_1
	.word	gPunishmentImpactAffineAnimCmd_2
	.word	gPunishmentImpactAffineAnimCmd_3
	.word	gPunishmentImpactAffineAnimCmd_4
	.size	 gPunishmentImpactAffineAnim,16
	.globl	gPunishmentAnimCmd
	.align	2, 0
	.type	 gPunishmentAnimCmd,object
gPunishmentAnimCmd:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gPunishmentAnimCmd,24
	.globl	gPunishmentAnim
	.align	2, 0
	.type	 gPunishmentAnim,object
gPunishmentAnim:
	.word	gPunishmentAnimCmd
	.size	 gPunishmentAnim,4
	.globl	gPunishmentSpriteTemplate
	.align	2, 0
	.type	 gPunishmentSpriteTemplate,object
	.size	 gPunishmentSpriteTemplate,24
gPunishmentSpriteTemplate:
	.short	0x2799
	.short	0x27a6
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gPunishmentAnim
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpriteOnMonPos
	.globl	gPunishmentImpactSpriteTemplate
	.align	2, 0
	.type	 gPunishmentImpactSpriteTemplate,object
	.size	 gPunishmentImpactSpriteTemplate,24
gPunishmentImpactSpriteTemplate:
	.short	0x2797
	.short	0x27a6
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gPunishmentImpactAffineAnim
	.word	AnimPunishment
.text
	.align	2, 0
	.type	 AnimPunishment,function
	.thumb_func
AnimPunishment:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L5
	ldrb	r1, [r4, #0x6]
	bl	StartSpriteAffineAnim
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L3	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	gBattleAnimArgs
.L3:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
.L4:
	ldr	r0, .L7
	str	r0, [r5, #0x1c]
	ldr	r1, .L7+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	RunStoredCallbackWhenAffineAnimEnds
	.word	DestroyAnimSprite
.Lfe1:
	.size	 AnimPunishment,.Lfe1-AnimPunishment
	.align	2, 0
	.globl	AnimTask_AttackerFadeToInvisible
	.type	 AnimTask_AttackerFadeToInvisible,function
	.thumb_func
AnimTask_AttackerFadeToInvisible:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L12
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L12+0x4
	ldrh	r1, [r1]
	strh	r1, [r0, #0x8]
	ldr	r1, .L12+0x8
	ldrb	r4, [r1]
	mov	r1, #0x10
	strh	r1, [r0, #0xa]
	mov	r0, #0x52
	bl	SetGpuReg
	add	r0, r4, #0
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L10	@cond_branch
	ldr	r1, .L12+0xc
	mov	r0, #0x50
	bl	SetGpuReg
	b	.L11
.L13:
	.align	2, 0
.L12:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	0x3f42
.L10:
	ldr	r1, .L14
	mov	r0, #0x50
	bl	SetGpuReg
.L11:
	ldr	r0, .L14+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L14+0x8
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	0x3f44
	.word	gTasks
	.word	AnimTask_AttackerFadeToInvisible_Step
.Lfe2:
	.size	 AnimTask_AttackerFadeToInvisible,.Lfe2-AnimTask_AttackerFadeToInvisible
	.align	2, 0
	.type	 AnimTask_AttackerFadeToInvisible_Step,function
	.thumb_func
AnimTask_AttackerFadeToInvisible_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L20
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrh	r0, [r6, #0xa]
	lsr	r4, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xc
	ldrsh	r0, [r6, r2]
	ldrb	r2, [r6, #0x8]
	cmp	r0, r2
	bne	.L17	@cond_branch
	add	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	sub	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r4, #0x8
	orr	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r6, #0xa]
	ldrh	r1, [r6, #0xa]
	mov	r0, #0x52
	bl	SetGpuReg
	strh	r5, [r6, #0xc]
	cmp	r4, #0x10
	bne	.L19	@cond_branch
	ldr	r2, .L20+0x4
	ldr	r1, .L20+0x8
	ldr	r0, .L20+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
	b	.L19
.L21:
	.align	2, 0
.L20:
	.word	gTasks
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.L17:
	ldrh	r0, [r6, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xc]
.L19:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 AnimTask_AttackerFadeToInvisible_Step,.Lfe3-AnimTask_AttackerFadeToInvisible_Step
	.align	2, 0
	.globl	AnimTask_AttackerFadeFromInvisible
	.type	 AnimTask_AttackerFadeFromInvisible,function
	.thumb_func
AnimTask_AttackerFadeFromInvisible:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L23
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	ldr	r0, .L23+0x4
	ldrh	r0, [r0]
	strh	r0, [r2, #0x8]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	strh	r1, [r2, #0xa]
	ldr	r0, .L23+0x8
	str	r0, [r2]
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_AttackerFadeFromInvisible_Step
.Lfe4:
	.size	 AnimTask_AttackerFadeFromInvisible,.Lfe4-AnimTask_AttackerFadeFromInvisible
	.align	2, 0
	.type	 AnimTask_AttackerFadeFromInvisible_Step,function
	.thumb_func
AnimTask_AttackerFadeFromInvisible_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L29
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrh	r0, [r6, #0xa]
	lsr	r4, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xc
	ldrsh	r0, [r6, r2]
	ldrb	r2, [r6, #0x8]
	cmp	r0, r2
	bne	.L26	@cond_branch
	sub	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r4, #0x8
	orr	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r6, #0xa]
	ldrh	r1, [r6, #0xa]
	mov	r0, #0x52
	bl	SetGpuReg
	strh	r5, [r6, #0xc]
	cmp	r4, #0
	bne	.L28	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
	b	.L28
.L30:
	.align	2, 0
.L29:
	.word	gTasks
.L26:
	ldrh	r0, [r6, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xc]
.L28:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 AnimTask_AttackerFadeFromInvisible_Step,.Lfe5-AnimTask_AttackerFadeFromInvisible_Step
	.align	2, 0
	.globl	AnimTask_InitAttackerFadeFromInvisible
	.type	 AnimTask_InitAttackerFadeFromInvisible,function
	.thumb_func
AnimTask_InitAttackerFadeFromInvisible:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L34
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L32	@cond_branch
	ldr	r1, .L34+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	b	.L33
.L35:
	.align	2, 0
.L34:
	.word	gBattleAnimAttacker
	.word	0x3f42
.L32:
	ldr	r1, .L36
	mov	r0, #0x50
	bl	SetGpuReg
.L33:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	0x3f44
.Lfe6:
	.size	 AnimTask_InitAttackerFadeFromInvisible,.Lfe6-AnimTask_InitAttackerFadeFromInvisible
	.align	2, 0
	.type	 sub_81138D4,function
	.thumb_func
sub_81138D4:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L39
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x30]
	ldr	r5, .L39+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	mov	r0, #0x7e
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	InitSpriteDataForLinearTranslation
	ldrh	r0, [r4, #0x30]
	neg	r0, r0
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x32]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldr	r0, .L39+0x8
	strh	r0, [r4, #0x3a]
	ldr	r1, .L39+0xc
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	0xffd8
	.word	sub_8113950
.Lfe7:
	.size	 sub_81138D4,.Lfe7-sub_81138D4
	.align	2, 0
	.type	 sub_8113950,function
	.thumb_func
sub_8113950:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldrh	r5, [r4, #0x30]
	ldrh	r0, [r4, #0x34]
	add	r2, r5, r0
	strh	r2, [r4, #0x34]
	ldrh	r3, [r4, #0x32]
	ldrh	r6, [r4, #0x36]
	add	r1, r3, r6
	strh	r1, [r4, #0x36]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	mov	r6, #0x3c
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bne	.L42	@cond_branch
	add	r0, r2, r5
	strh	r0, [r4, #0x34]
	add	r1, r1, r3
	strh	r1, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r4, #0x26]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
.L42:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x3a
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r6, [r4, #0x26]
	add	r0, r0, r6
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	cmp	r0, #0x7f
	ble	.L43	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x14
	strh	r0, [r4, #0x3a]
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
.L43:
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L44	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L44:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 sub_8113950,.Lfe8-sub_8113950
	.align	2, 0
	.globl	AnimBite
	.type	 AnimBite,function
	.thumb_func
AnimBite:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L46
	ldrh	r0, [r5]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrb	r1, [r5, #0x4]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r4, #0x32]
	ldr	r0, .L46+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	gBattleAnimArgs
	.word	AnimBite_Step1
.Lfe9:
	.size	 AnimBite,.Lfe9-AnimBite
	.align	2, 0
	.type	 AnimBite_Step1,function
	.thumb_func
AnimBite_Step1:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x36]
	add	r0, r0, r1
	strh	r0, [r2, #0x36]
	ldrh	r1, [r2, #0x30]
	ldrh	r3, [r2, #0x38]
	add	r1, r1, r3
	strh	r1, [r2, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r2, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r2, #0x26]
	ldrh	r0, [r2, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x32
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	bne	.L49	@cond_branch
	ldr	r0, .L50
	str	r0, [r2, #0x1c]
.L49:
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	AnimBite_Step2
.Lfe10:
	.size	 AnimBite_Step1,.Lfe10-AnimBite_Step1
	.align	2, 0
	.type	 AnimBite_Step2,function
	.thumb_func
AnimBite_Step2:
	push	{lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x36]
	ldrh	r0, [r3, #0x2e]
	sub	r1, r1, r0
	strh	r1, [r3, #0x36]
	ldrh	r0, [r3, #0x38]
	ldrh	r2, [r3, #0x30]
	sub	r0, r0, r2
	strh	r0, [r3, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r3, #0x24]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r3, #0x26]
	ldrh	r0, [r3, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x34]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L53	@cond_branch
	add	r0, r3, #0
	bl	DestroySpriteAndMatrix
.L53:
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 AnimBite_Step2,.Lfe11-AnimBite_Step2
	.align	2, 0
	.globl	AnimTearDrop
	.type	 AnimTearDrop,function
	.thumb_func
AnimTearDrop:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r0, .L67
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	add	r3, r0, #0
	cmp	r1, #0
	bne	.L55	@cond_branch
	ldr	r0, .L67+0x4
	b	.L65
.L68:
	.align	2, 0
.L67:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L55:
	ldr	r0, .L69
.L65:
	ldrb	r5, [r0]
	mov	r6, #0x14
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x4
	ldr	r7, .L69+0x4
	add	r0, r7, #0
	and	r1, r1, r0
	ldr	r0, .L69+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	mov	r1, #0x2
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x1
	beq	.L59	@cond_branch
	cmp	r0, #0x1
	bgt	.L64	@cond_branch
	cmp	r0, #0
	beq	.L58	@cond_branch
	b	.L57
.L70:
	.align	2, 0
.L69:
	.word	gBattleAnimTarget
	.word	0x3ff
	.word	-0x400
.L64:
	cmp	r0, #0x2
	beq	.L60	@cond_branch
	cmp	r0, #0x3
	beq	.L61	@cond_branch
	b	.L57
.L58:
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r4, #0x22]
	b	.L57
.L59:
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0xe
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x10
	strh	r0, [r4, #0x22]
	b	.L57
.L60:
	add	r0, r5, #0
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	b	.L66
.L61:
	add	r0, r5, #0
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0xe
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x10
.L66:
	strh	r0, [r4, #0x22]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	mov	r6, #0xec
.L57:
	mov	r0, #0x20
	strh	r0, [r4, #0x2e]
	lsl	r0, r6, #0x18
	asr	r0, r0, #0x18
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0xc
	strh	r0, [r4, #0x36]
	ldr	r0, .L71
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L71+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L72:
	.align	2, 0
.L71:
	.word	0xfff4
	.word	AnimTearDrop_Step
.Lfe12:
	.size	 AnimTearDrop,.Lfe12-AnimTearDrop
	.align	2, 0
	.type	 AnimTearDrop_Step,function
	.thumb_func
AnimTearDrop_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L74	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L74:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 AnimTearDrop_Step,.Lfe13-AnimTearDrop_Step
	.align	2, 0
	.globl	AnimTask_MoveAttackerMementoShadow
	.type	 AnimTask_MoveAttackerMementoShadow,function
	.thumb_func
AnimTask_MoveAttackerMementoShadow:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L89
	add	r5, r1, r0
	ldr	r4, .L89+0x4
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1f
	mov	r6, #0x0
	strh	r0, [r5, #0x16]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x7
	strh	r0, [r5, #0x14]
	ldrh	r1, [r5, #0x16]
	strh	r1, [r5, #0x12]
	strh	r0, [r5, #0x10]
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	strh	r1, [r5, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	sub	r1, r1, #0x20
	strh	r1, [r5, #0x24]
	add	r0, r0, #0x20
	strh	r0, [r5, #0x26]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L76	@cond_branch
	ldr	r0, .L89+0x8
	b	.L87
.L90:
	.align	2, 0
.L89:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	0xfff4
.L76:
	ldr	r0, .L91
.L87:
	strh	r0, [r5, #0x18]
	ldr	r0, .L91+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xe]
	cmp	r0, #0x1
	bne	.L78	@cond_branch
	add	r4, sp, #0xc
	add	r0, r4, #0
	bl	sub_80A6B30
	ldr	r0, .L91+0x8
	ldrh	r0, [r0]
	strh	r0, [r5, #0x1c]
	ldr	r1, .L91+0xc
	mov	r0, #0x50
	bl	SetGpuReg
	ldrb	r1, [r4, #0x8]
	lsl	r1, r1, #0x4
	mov	r0, #0x0
	mov	r2, #0x20
	bl	FillPalette
	ldr	r0, .L91+0x10
	str	r0, [sp]
	mov	r7, #0x2
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L80	@cond_branch
	ldr	r1, .L91+0x14
	b	.L88
.L92:
	.align	2, 0
.L91:
	.word	0xffc0
	.word	gBattleAnimAttacker
	.word	gBattle_BG1_Y
	.word	0x3f42
	.word	0x4000016
	.word	gBattle_BG2_X
.L78:
	ldr	r0, .L93
	ldrh	r0, [r0]
	strh	r0, [r5, #0x1c]
	ldr	r1, .L93+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x0
	mov	r1, #0x90
	mov	r2, #0x20
	bl	FillPalette
	ldr	r0, .L93+0x8
	str	r0, [sp]
	mov	r7, #0x4
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L80	@cond_branch
	ldr	r1, .L93+0xc
.L88:
	ldrh	r0, [r1]
	add	r0, r0, #0xf0
	strh	r0, [r1]
.L80:
	ldr	r0, .L93+0x10
	str	r0, [sp, #0x4]
	mov	r2, sp
	mov	r1, #0x0
	mov	r0, #0x1
	strb	r0, [r2, #0x8]
	mov	r0, sp
	strb	r1, [r0, #0x9]
	strh	r1, [r5, #0x1e]
	mov	r0, #0x10
	strh	r0, [r5, #0x20]
	strh	r1, [r5, #0x8]
	strh	r1, [r5, #0xa]
	strh	r1, [r5, #0xc]
	mov	r0, #0x3
	bl	sub_8114374
	mov	r3, #0x0
	ldr	r4, .L93+0x14
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r6, r4, r0
.L85:
	lsl	r1, r3, #0x1
	add	r2, r1, r4
	ldrh	r0, [r5, #0x1c]
	strh	r0, [r2]
	add	r1, r1, r6
	ldrh	r0, [r5, #0x1c]
	strh	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x6f
	bls	.L85	@cond_branch
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	mov	r0, #0x3f
	eor	r7, r7, r0
	mov	r1, #0xfc
	lsl	r1, r1, #0x6
	add	r0, r1, #0
	orr	r7, r7, r0
	mov	r0, #0x4a
	add	r1, r7, #0
	bl	SetGpuReg
	ldr	r1, .L93+0x18
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r2, .L93+0x1c
	ldrh	r0, [r5, #0x24]
	lsl	r0, r0, #0x8
	ldrh	r1, [r5, #0x26]
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L93+0x20
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r0, .L93+0x24
	str	r0, [r5]
	add	sp, sp, #0x1c
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	gBattle_BG2_Y
	.word	0x3f44
	.word	0x400001a
	.word	gBattle_BG1_X
	.word	-0x5d9fffff
	.word	gScanlineEffectRegBuffers
	.word	0x3f3f
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	AnimTask_MoveAttackerMementoShadow_Step
.Lfe14:
	.size	 AnimTask_MoveAttackerMementoShadow,.Lfe14-AnimTask_MoveAttackerMementoShadow
	.align	2, 0
	.type	 AnimTask_MoveAttackerMementoShadow_Step,function
	.thumb_func
AnimTask_MoveAttackerMementoShadow_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L114
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB1115
	b	.L96	@long jump
.LCB1115:
	lsl	r0, r0, #0x2
	ldr	r1, .L114+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L115:
	.align	2, 0
.L114:
	.word	gTasks
	.word	.L111
	.align	2, 0
	.align	2, 0
.L111:
	.word	.L97
	.word	.L104
	.word	.L106
	.word	.L109
	.word	.L110
.L97:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L96	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L99	@cond_branch
	ldrh	r1, [r4, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xc
	beq	.L101	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x1e]
	b	.L101
.L99:
	ldrh	r1, [r4, #0x20]
	mov	r2, #0x20
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x8
	beq	.L101	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x20]
.L101:
	ldrh	r1, [r4, #0x20]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x1e]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xc
	bne	.L96	@cond_branch
	mov	r2, #0x20
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x8
	bne	.L96	@cond_branch
	b	.L113
.L104:
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x8
	strh	r0, [r4, #0x10]
	add	r0, r4, #0
	bl	sub_8114244
	mov	r0, #0x10
	ldrsh	r1, [r4, r0]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bge	.L96	@cond_branch
	b	.L113
.L106:
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x8
	strh	r0, [r4, #0x10]
	add	r0, r4, #0
	bl	sub_8114244
	ldrh	r1, [r4, #0x24]
	add	r1, r1, #0x4
	strh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x26]
	sub	r2, r0, #0x4
	strh	r2, [r4, #0x26]
	lsl	r1, r1, #0x10
	lsl	r0, r2, #0x10
	cmp	r1, r0
	blt	.L107	@cond_branch
	strh	r2, [r4, #0x24]
.L107:
	ldr	r3, .L116
	ldrh	r2, [r4, #0x24]
	lsl	r0, r2, #0x8
	ldrh	r1, [r4, #0x26]
	orr	r0, r0, r1
	strh	r0, [r3]
	lsl	r2, r2, #0x10
	lsl	r1, r1, #0x10
	cmp	r2, r1
	bne	.L96	@cond_branch
	b	.L113
.L117:
	.align	2, 0
.L116:
	.word	gBattle_WIN0H
.L109:
	ldr	r1, .L118
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
.L113:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L96
.L119:
	.align	2, 0
.L118:
	.word	gScanlineEffect
.L110:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L96:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 AnimTask_MoveAttackerMementoShadow_Step,.Lfe15-AnimTask_MoveAttackerMementoShadow_Step
	.align	2, 0
	.globl	AnimTask_MoveTargetMementoShadow
	.type	 AnimTask_MoveTargetMementoShadow,function
	.thumb_func
AnimTask_MoveTargetMementoShadow:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L150
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x4
	bls	.LCB1297
	b	.L121	@long jump
.LCB1297:
	lsl	r0, r0, #0x2
	ldr	r1, .L150+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L151:
	.align	2, 0
.L150:
	.word	gTasks
	.word	.L144
	.align	2, 0
	.align	2, 0
.L144:
	.word	.L122
	.word	.L127
	.word	.L130
	.word	.L133
	.word	.L141
.L122:
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L123	@cond_branch
	ldr	r0, .L152
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L152+0x4
	strh	r1, [r0]
	ldr	r4, .L152+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L121
.L153:
	.align	2, 0
.L152:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
.L123:
	ldr	r0, .L154
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xe]
	cmp	r0, #0x1
	bne	.L125	@cond_branch
	ldr	r1, .L154+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L154+0x8
	b	.L146
.L155:
	.align	2, 0
.L154:
	.word	gBattleAnimTarget
	.word	0x3f42
	.word	gBattle_BG2_X
.L125:
	ldr	r1, .L156
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L156+0x4
.L146:
	ldrh	r0, [r1]
	add	r0, r0, #0xf0
	strh	r0, [r1]
	b	.L147
.L157:
	.align	2, 0
.L156:
	.word	0x3f44
	.word	gBattle_BG1_X
.L127:
	mov	r1, #0xe
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L128	@cond_branch
	mov	r0, sp
	bl	sub_80A6B30
	ldr	r0, .L158
	ldrh	r0, [r0]
	strh	r0, [r5, #0x1c]
	mov	r0, sp
	ldrb	r1, [r0, #0x8]
	lsl	r1, r1, #0x4
	mov	r0, #0x0
	mov	r2, #0x20
	bl	FillPalette
	b	.L129
.L159:
	.align	2, 0
.L158:
	.word	gBattle_BG1_Y
.L128:
	ldr	r0, .L160
	ldrh	r0, [r0]
	strh	r0, [r5, #0x1c]
	mov	r0, #0x0
	mov	r1, #0x90
	mov	r2, #0x20
	bl	FillPalette
.L129:
	mov	r0, #0x3
	bl	sub_8114374
	b	.L147
.L161:
	.align	2, 0
.L160:
	.word	gBattle_BG2_Y
.L130:
	ldr	r4, .L162
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1f
	mov	r6, #0x0
	strh	r0, [r5, #0x16]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x7
	strh	r0, [r5, #0x14]
	ldrh	r1, [r5, #0x16]
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	strh	r1, [r5, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r1, r0, #0x4
	strh	r1, [r5, #0x24]
	add	r0, r0, #0x4
	strh	r0, [r5, #0x26]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L131	@cond_branch
	ldr	r0, .L162+0x4
	b	.L148
.L163:
	.align	2, 0
.L162:
	.word	gBattleAnimTarget
	.word	0xfff4
.L131:
	ldr	r0, .L164
.L148:
	strh	r0, [r5, #0x18]
	ldrh	r0, [r5, #0x18]
	strh	r0, [r5, #0x10]
	strh	r0, [r5, #0x12]
	mov	r0, #0xc
	strh	r0, [r5, #0x1e]
	mov	r0, #0x8
	strh	r0, [r5, #0x20]
	b	.L147
.L165:
	.align	2, 0
.L164:
	.word	0xffc0
.L133:
	mov	r1, #0xe
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L134	@cond_branch
	ldr	r0, .L166
	b	.L149
.L167:
	.align	2, 0
.L166:
	.word	0x4000016
.L134:
	ldr	r0, .L168
.L149:
	str	r0, [sp, #0x10]
	mov	r3, #0x0
	add	r4, sp, #0x10
	ldr	r6, .L168+0x4
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r7, r6, r0
.L139:
	lsl	r1, r3, #0x1
	add	r2, r1, r6
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x9f
	sub	r0, r0, r3
	strh	r0, [r2]
	add	r1, r1, r7
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x9f
	sub	r0, r0, r3
	strh	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x6f
	bls	.L139	@cond_branch
	ldr	r1, .L168+0x8
	str	r1, [r4, #0x4]
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r4, #0x8]
	strb	r2, [r4, #0x9]
	ldr	r0, [sp, #0x10]
	ldr	r2, [r4, #0x8]
	bl	ScanlineEffect_SetParams
.L147:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L121
.L169:
	.align	2, 0
.L168:
	.word	0x400001a
	.word	gScanlineEffectRegBuffers
	.word	-0x5d9fffff
.L141:
	mov	r1, #0xe
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L142	@cond_branch
	ldr	r1, .L170
	mov	r0, #0x4a
	bl	SetGpuReg
	b	.L143
.L171:
	.align	2, 0
.L170:
	.word	0x3f3d
.L142:
	ldr	r1, .L172
	mov	r0, #0x4a
	bl	SetGpuReg
.L143:
	ldr	r1, .L172+0x4
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r2, .L172+0x8
	ldrh	r0, [r5, #0x24]
	lsl	r0, r0, #0x8
	ldrh	r1, [r5, #0x26]
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L172+0xc
	mov	r0, #0xa0
	strh	r0, [r1]
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	strh	r0, [r5, #0xa]
	strh	r0, [r5, #0xc]
	ldr	r1, .L172+0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L172+0x14
	str	r0, [r5]
.L121:
	add	sp, sp, #0x1c
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	0x3f3b
	.word	0x3f3f
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x80c
	.word	AnimTask_MoveTargetMementoShadow_Step
.Lfe16:
	.size	 AnimTask_MoveTargetMementoShadow,.Lfe16-AnimTask_MoveTargetMementoShadow
	.align	2, 0
	.type	 AnimTask_MoveTargetMementoShadow_Step,function
	.thumb_func
AnimTask_MoveTargetMementoShadow_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L196
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB1681
	b	.L175	@long jump
.LCB1681:
	lsl	r0, r0, #0x2
	ldr	r1, .L196+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L197:
	.align	2, 0
.L196:
	.word	gTasks
	.word	.L193
	.align	2, 0
	.align	2, 0
.L193:
	.word	.L176
	.word	.L179
	.word	.L184
	.word	.L191
	.word	.L192
.L176:
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r4, #0x16]
	mov	r3, #0x16
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	blt	.L177	@cond_branch
	strh	r2, [r4, #0x12]
.L177:
	add	r0, r4, #0
	bl	sub_8114244
	mov	r0, #0x12
	ldrsh	r1, [r4, r0]
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	beq	.LCB1723
	b	.L175	@long jump
.LCB1723:
	b	.L195
.L179:
	mov	r3, #0x26
	ldrsh	r0, [r4, r3]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	cmp	r0, #0x3f
	bgt	.L180	@cond_branch
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, #0x4
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x4
	strh	r0, [r4, #0x26]
	b	.L181
.L180:
	mov	r0, #0x1
	strh	r0, [r4, #0xa]
.L181:
	ldr	r2, .L198
	ldrh	r0, [r4, #0x24]
	lsl	r0, r0, #0x8
	ldrh	r1, [r4, #0x26]
	orr	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r4, #0x14]
	mov	r3, #0x14
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	blt	.L182	@cond_branch
	strh	r2, [r4, #0x10]
.L182:
	add	r0, r4, #0
	bl	sub_8114244
	mov	r0, #0x10
	ldrsh	r1, [r4, r0]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L175	@cond_branch
	mov	r3, #0xa
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L175	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L195
.L199:
	.align	2, 0
.L198:
	.word	gBattle_WIN0H
.L184:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L175	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L186	@cond_branch
	ldrh	r1, [r4, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L188	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x1e]
	b	.L188
.L186:
	ldrh	r1, [r4, #0x20]
	mov	r3, #0x20
	ldrsh	r0, [r4, r3]
	cmp	r0, #0xf
	bgt	.L188	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x20]
.L188:
	ldrh	r1, [r4, #0x20]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x1e]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L175	@cond_branch
	mov	r2, #0x20
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x10
	bne	.L175	@cond_branch
	b	.L195
.L191:
	ldr	r1, .L200
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
.L195:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L175
.L201:
	.align	2, 0
.L200:
	.word	gScanlineEffect
.L192:
	ldr	r0, .L202
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L202+0x4
	strh	r1, [r0]
	ldr	r4, .L202+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L175:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L203:
	.align	2, 0
.L202:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
.Lfe17:
	.size	 AnimTask_MoveTargetMementoShadow_Step,.Lfe17-AnimTask_MoveTargetMementoShadow_Step
	.align	2, 0
	.type	 sub_8114244,function
	.thumb_func
sub_8114244:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	ldrh	r0, [r6, #0x12]
	ldrh	r4, [r6, #0x10]
	sub	r0, r0, r4
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L205	@cond_branch
	mov	r2, #0x22
	ldrsh	r0, [r6, r2]
	bl	__divsi3
	mov	r8, r0
	mov	r3, #0x14
	ldrsh	r0, [r6, r3]
	lsl	r5, r0, #0x8
	lsl	r0, r4, #0x10
	mov	r4, #0x0
	cmp	r0, #0
	ble	.L207	@cond_branch
	ldr	r0, .L229
	mov	ip, r0
	ldr	r7, .L229+0x4
.L209:
	lsl	r2, r4, #0x10
	asr	r2, r2, #0x10
	lsl	r3, r2, #0x1
	ldrb	r1, [r7, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r3, r3, r0
	add	r3, r3, ip
	add	r1, r2, #0
	sub	r1, r1, #0x9f
	ldrh	r0, [r6, #0x1c]
	sub	r0, r0, r1
	strh	r0, [r3]
	add	r2, r2, #0x1
	lsl	r2, r2, #0x10
	lsr	r4, r2, #0x10
	asr	r2, r2, #0x10
	mov	r1, #0x10
	ldrsh	r0, [r6, r1]
	cmp	r2, r0
	blt	.L209	@cond_branch
.L207:
	ldrh	r4, [r6, #0x10]
	lsl	r3, r4, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0x12
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	bgt	.L212	@cond_branch
	ldr	r0, .L229
	mov	ip, r0
	ldr	r7, .L229+0x4
.L214:
	asr	r4, r3, #0x10
	cmp	r4, #0
	blt	.L215	@cond_branch
	asr	r1, r5, #0x8
	sub	r1, r1, r4
	lsl	r3, r4, #0x1
	ldrb	r2, [r7, #0x14]
	lsl	r0, r2, #0x4
	sub	r0, r0, r2
	lsl	r0, r0, #0x7
	add	r3, r3, r0
	add	r3, r3, ip
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldrh	r2, [r6, #0x1c]
	add	r1, r1, r2
	strh	r1, [r3]
.L215:
	add	r5, r5, r8
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	lsl	r3, r4, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0x12
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	ble	.L214	@cond_branch
.L212:
	mov	r3, #0x1c
	ldrsh	r0, [r6, r3]
	add	r0, r0, #0x9f
	lsl	r2, r4, #0x10
	asr	r1, r2, #0x10
	sub	r5, r0, r1
	mov	r3, #0x16
	ldrsh	r0, [r6, r3]
	cmp	r1, r0
	bge	.L223	@cond_branch
	ldr	r7, .L229
	ldr	r4, .L229+0x4
.L220:
	asr	r3, r2, #0x10
	cmp	r3, #0
	blt	.L219	@cond_branch
	lsl	r2, r3, #0x1
	ldrb	r1, [r4, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r7
	strh	r5, [r2]
	sub	r5, r5, #0x1
.L219:
	add	r0, r3, #0x1
	lsl	r2, r0, #0x10
	asr	r1, r2, #0x10
	mov	r3, #0x16
	ldrsh	r0, [r6, r3]
	cmp	r1, r0
	blt	.L220	@cond_branch
	b	.L223
.L230:
	.align	2, 0
.L229:
	.word	gScanlineEffectRegBuffers
	.word	gScanlineEffect
.L205:
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	add	r5, r0, #0
	add	r5, r5, #0x9f
	mov	r4, #0x0
	ldr	r3, .L231
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r6, r3, r2
.L227:
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	lsl	r2, r0, #0x1
	add	r1, r2, r3
	strh	r5, [r1]
	add	r2, r2, r6
	strh	r5, [r2]
	sub	r5, r5, #0x1
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6f
	ble	.L227	@cond_branch
.L223:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L232:
	.align	2, 0
.L231:
	.word	gScanlineEffectRegBuffers
.Lfe18:
	.size	 sub_8114244,.Lfe18-sub_8114244
	.align	2, 0
	.type	 sub_8114374,function
	.thumb_func
sub_8114374:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0x0
	ldr	r7, .L240
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r5, r0, #0x2
	mov	r0, #0xd
	neg	r0, r0
	add	r6, r0, #0
.L237:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L236	@cond_branch
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r0, [r1, #0x5]
	and	r0, r0, r6
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
.L236:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L237	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L241:
	.align	2, 0
.L240:
	.word	gSprites
.Lfe19:
	.size	 sub_8114374,.Lfe19-sub_8114374
	.align	2, 0
	.globl	AnimTask_InitMementoShadow
	.type	 AnimTask_InitMementoShadow,function
	.thumb_func
AnimTask_InitMementoShadow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r6, .L245
	ldrb	r0, [r6]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	eor	r0, r0, r1
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r4, r1, #0x1f
	ldrb	r0, [r6]
	add	r1, r4, #0
	mov	r2, #0x1
	bl	MoveBattlerSpriteToBG
	ldr	r0, .L245+0x4
	mov	r9, r0
	ldr	r0, .L245+0x8
	mov	r8, r0
	ldrb	r0, [r6]
	add	r0, r0, r8
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r7, #0x5
	neg	r7, r7
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L244	@cond_branch
	ldrb	r0, [r6]
	eor	r0, r0, r5
	mov	r1, #0x1
	eor	r4, r4, r1
	add	r1, r4, #0
	mov	r2, #0x1
	bl	MoveBattlerSpriteToBG
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r0, r0, r8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	add	r1, r7, #0
	and	r1, r1, r2
	strb	r1, [r0]
.L244:
	mov	r0, sl
	bl	DestroyAnimVisualTask
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L246:
	.align	2, 0
.L245:
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe20:
	.size	 AnimTask_InitMementoShadow,.Lfe20-AnimTask_InitMementoShadow
	.align	2, 0
	.globl	sub_8114470
	.type	 sub_8114470,function
	.thumb_func
sub_8114470:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L250
	ldrb	r0, [r4]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	eor	r0, r0, r1
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r5, r1, #0x1f
	add	r0, r5, #0
	bl	sub_80A477C
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L249	@cond_branch
	mov	r0, #0x1
	eor	r5, r5, r0
	add	r0, r5, #0
	bl	sub_80A477C
.L249:
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L251:
	.align	2, 0
.L250:
	.word	gBattleAnimAttacker
.Lfe21:
	.size	 sub_8114470,.Lfe21-sub_8114470
	.align	2, 0
	.globl	AnimClawSlash
	.type	 AnimClawSlash,function
	.thumb_func
AnimClawSlash:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L253
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrb	r1, [r1, #0x4]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r0, .L253+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L253+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L254:
	.align	2, 0
.L253:
	.word	gBattleAnimArgs
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe22:
	.size	 AnimClawSlash,.Lfe22-AnimClawSlash
	.align	2, 0
	.globl	AnimTask_MetallicShine
	.type	 AnimTask_MetallicShine,function
	.thumb_func
AnimTask_MetallicShine:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r6, #0x0
	ldr	r0, .L268
	strh	r6, [r0]
	ldr	r0, .L268+0x4
	strh	r6, [r0]
	ldr	r1, .L268+0x8
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L268+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L268+0x10
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L268+0x14
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L256	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L256:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L257	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L257	@cond_branch
	ldr	r4, .L268+0x18
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L259	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L257	@cond_branch
.L259:
	ldrb	r0, [r4]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L257	@cond_branch
	ldr	r3, .L268+0x1c
	ldr	r1, .L268+0x20
	ldrb	r0, [r4]
	eor	r0, r0, r5
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r6, #0x1
.L257:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L261	@cond_branch
	ldr	r0, .L268+0x24
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldrh	r5, [r0]
	b	.L262
.L269:
	.align	2, 0
.L268:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	0xc08
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gContestResources
.L261:
	ldr	r4, .L270
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L263	@cond_branch
	ldr	r1, .L270+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L270+0x8
	b	.L267
.L271:
	.align	2, 0
.L270:
	.word	gBattleAnimAttacker
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L263:
	ldr	r1, .L272
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L272+0x4
.L267:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L262:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L272+0x8
	ldrb	r0, [r0]
	add	r1, r4, #0
	add	r2, r5, #0
	bl	sub_80A89C8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L272+0xc
	bl	AnimLoadCompressedBgTilemap
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L272+0x10
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L272+0x14
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r2, .L272+0x18
	ldr	r0, .L272+0x1c
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	neg	r0, r0
	add	r0, r0, #0x60
	strh	r0, [r2]
	ldr	r2, .L272+0x20
	ldrh	r0, [r1, #0x22]
	neg	r0, r0
	add	r0, r0, #0x20
	strh	r0, [r2]
	ldrb	r0, [r1, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	add	r1, r0, #0
	ldr	r2, .L272+0x24
	mov	r3, #0x2
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L265	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x0
	bl	SetGreyscaleOrOriginalPalette
	b	.L266
.L273:
	.align	2, 0
.L272:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleAnimAttacker
	.word	gMetalShineTilemap
	.word	gMetalShineGfx
	.word	gMetalShinePalette
	.word	gBattle_BG1_X
	.word	gSprites
	.word	gBattle_BG1_Y
	.word	gBattleAnimArgs
.L265:
	lsl	r0, r1, #0x4
	ldrh	r3, [r2, #0x4]
	mov	r1, #0x10
	mov	r2, #0xb
	bl	BlendPalette
.L266:
	ldr	r1, .L274
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	ldr	r2, .L274+0x4
	ldrh	r1, [r2]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0xe]
	strh	r6, [r0, #0x14]
	ldr	r1, .L274+0x8
	str	r1, [r0]
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L275:
	.align	2, 0
.L274:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_MetallicShine_Step
.Lfe23:
	.size	 AnimTask_MetallicShine,.Lfe23-AnimTask_MetallicShine
	.align	2, 0
	.type	 AnimTask_MetallicShine_Step,function
	.thumb_func
AnimTask_MetallicShine_Step:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L284
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x4
	mov	r5, #0x0
	strh	r0, [r4, #0x1c]
	ldr	r2, .L284+0x4
	ldrh	r3, [r2]
	sub	r1, r3, #0x4
	strh	r1, [r2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x80
	beq	.LCB2748
	b	.L277	@long jump
.LCB2748:
	strh	r5, [r4, #0x1c]
	add	r0, r3, #0
	add	r0, r0, #0x7c
	strh	r0, [r2]
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L278	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L284+0x8
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	add	r1, r0, #0
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L279	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x1
	bl	SetGreyscaleOrOriginalPalette
.L279:
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	bl	sub_80A6C68
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L277	@cond_branch
	ldr	r2, .L284+0xc
	ldr	r0, .L284+0x10
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	b	.L277
.L285:
	.align	2, 0
.L284:
	.word	gTasks
	.word	gBattle_BG1_X
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.L278:
	cmp	r0, #0x3
	bne	.L277	@cond_branch
	ldr	r0, .L286
	strh	r5, [r0]
	ldr	r0, .L286+0x4
	strh	r5, [r0]
	ldr	r4, .L286+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L283	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L283:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L277:
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L287:
	.align	2, 0
.L286:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
.Lfe24:
	.size	 AnimTask_MetallicShine_Step,.Lfe24-AnimTask_MetallicShine_Step
	.align	2, 0
	.globl	AnimTask_SetGreyscaleOrOriginalPal
	.type	 AnimTask_SetGreyscaleOrOriginalPal,function
	.thumb_func
AnimTask_SetGreyscaleOrOriginalPal:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L305
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	add	r2, r0, #0
	cmp	r1, #0x7
	bhi	.L298	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L305+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L306:
	.align	2, 0
.L305:
	.word	gBattleAnimArgs
	.word	.L299
	.align	2, 0
	.align	2, 0
.L299:
	.word	.L293
	.word	.L293
	.word	.L293
	.word	.L293
	.word	.L294
	.word	.L295
	.word	.L296
	.word	.L297
.L293:
	ldrb	r0, [r2]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	b	.L289
.L294:
	mov	r4, #0x0
	b	.L304
.L295:
	mov	r4, #0x2
	b	.L304
.L296:
	mov	r4, #0x1
	b	.L304
.L297:
	mov	r4, #0x3
	b	.L304
.L298:
	mov	r2, #0xff
.L289:
	mov	r0, #0x0
	cmp	r0, #0
	beq	.L300	@cond_branch
.L304:
	add	r0, r4, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L301	@cond_branch
	ldr	r0, .L307
	add	r0, r4, r0
	ldrb	r2, [r0]
	b	.L300
.L308:
	.align	2, 0
.L307:
	.word	gBattlerSpriteIds
.L301:
	mov	r2, #0xff
.L300:
	cmp	r2, #0xff
	beq	.L303	@cond_branch
	ldr	r1, .L309
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	ldr	r1, .L309+0x4
	ldrb	r1, [r1, #0x2]
	bl	SetGreyscaleOrOriginalPalette
.L303:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L310:
	.align	2, 0
.L309:
	.word	gSprites
	.word	gBattleAnimArgs
.Lfe25:
	.size	 AnimTask_SetGreyscaleOrOriginalPal,.Lfe25-AnimTask_SetGreyscaleOrOriginalPal
	.align	2, 0
	.globl	GetIsDoomDesireHitTurn
	.type	 GetIsDoomDesireHitTurn,function
	.thumb_func
GetIsDoomDesireHitTurn:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L314
	ldrb	r0, [r2]
	cmp	r0, #0x1
	bhi	.L312	@cond_branch
	ldr	r1, .L314+0x4
	mov	r0, #0x0
	strh	r0, [r1, #0xe]
.L312:
	ldrb	r0, [r2]
	cmp	r0, #0x2
	bne	.L313	@cond_branch
	ldr	r1, .L314+0x4
	mov	r0, #0x1
	strh	r0, [r1, #0xe]
.L313:
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L315:
	.align	2, 0
.L314:
	.word	gAnimMoveTurn
	.word	gBattleAnimArgs
.Lfe26:
	.size	 GetIsDoomDesireHitTurn,.Lfe26-GetIsDoomDesireHitTurn
.text
	.align	2, 0

