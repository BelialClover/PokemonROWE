@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gSaveblock2
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gSaveblock2,object
	.size	 gSaveblock2,3864
gSaveblock2:
	.byte	0x0
	.space	7
	.space	3856
	.globl	gSaveblock2_DMA
	.type	 gSaveblock2_DMA,object
	.size	 gSaveblock2_DMA,128
gSaveblock2_DMA:
	.byte	0x0
	.space	127
	.globl	gSaveblock1
	.align	2, 0
	.type	 gSaveblock1,object
	.size	 gSaveblock1,13856
gSaveblock1:
	.short	0x0
	.space	2
	.space	13852
	.globl	gSaveblock1_DMA
	.type	 gSaveblock1_DMA,object
	.size	 gSaveblock1_DMA,128
gSaveblock1_DMA:
	.byte	0x0
	.space	127
	.globl	gPokemonStorage
	.align	2, 0
	.type	 gPokemonStorage,object
	.size	 gPokemonStorage,33744
gPokemonStorage:
	.byte	0x0
	.space	33743
	.globl	gSaveblock3_DMA
	.type	 gSaveblock3_DMA,object
	.size	 gSaveblock3_DMA,128
gSaveblock3_DMA:
	.byte	0x0
	.space	127
	.globl	gLoadedSaveData
	.align	2, 0
	.type	 gLoadedSaveData,object
	.size	 gLoadedSaveData,3680
gLoadedSaveData:
	.short	0x0
	.space	2
	.space	316
	.space	3360
	.globl	gLastEncryptionKey
	.align	2, 0
	.type	 gLastEncryptionKey,object
	.size	 gLastEncryptionKey,4
gLastEncryptionKey:
	.word	0x0
.text
	.align	2, 0
	.globl	CheckForFlashMemory
	.type	 CheckForFlashMemory,function
	.thumb_func
CheckForFlashMemory:
	push	{lr}
	bl	IdentifyFlash
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L3	@cond_branch
	ldr	r1, .L5
	mov	r0, #0x1
	str	r0, [r1]
	bl	InitFlashTimer
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	gFlashMemoryPresent
.L3:
	ldr	r1, .L7
	mov	r0, #0x0
	str	r0, [r1]
.L4:
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gFlashMemoryPresent
.Lfe1:
	.size	 CheckForFlashMemory,.Lfe1-CheckForFlashMemory
	.align	2, 0
	.globl	ClearSav2
	.type	 ClearSav2,function
	.thumb_func
ClearSav2:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L10
	ldr	r2, .L10+0x4
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L11:
	.align	2, 0
.L10:
	.word	gSaveblock2
	.word	0x10007cc
.Lfe2:
	.size	 ClearSav2,.Lfe2-ClearSav2
	.align	2, 0
	.globl	ClearSav1
	.type	 ClearSav1,function
	.thumb_func
ClearSav1:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L13
	ldr	r2, .L13+0x4
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gSaveblock1
	.word	0x1001b50
.Lfe3:
	.size	 ClearSav1,.Lfe3-ClearSav1
	.align	2, 0
	.globl	SetSaveBlocksPointers
	.type	 SetSaveBlocksPointers,function
	.thumb_func
SetSaveBlocksPointers:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r5, .L16
	bl	Random
	add	r4, r4, r0
	mov	r0, #0x7c
	and	r4, r4, r0
	ldr	r1, .L16+0x4
	ldr	r0, .L16+0x8
	add	r0, r4, r0
	str	r0, [r1]
	ldr	r0, .L16+0xc
	add	r0, r4, r0
	str	r0, [r5]
	ldr	r1, .L16+0x10
	ldr	r0, .L16+0x14
	add	r4, r4, r0
	str	r4, [r1]
	bl	SetBagItemsPointers
	bl	SetDecorationInventoriesPointers
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gSaveBlock1Ptr
	.word	gSaveBlock2Ptr
	.word	gSaveblock2
	.word	gSaveblock1
	.word	gPokemonStoragePtr
	.word	gPokemonStorage
.Lfe4:
	.size	 SetSaveBlocksPointers,.Lfe4-SetSaveBlocksPointers
	.align	2, 0
	.globl	MoveSaveBlocks_ResetHeap
	.type	 MoveSaveBlocks_ResetHeap,function
	.thumb_func
MoveSaveBlocks_ResetHeap:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r5, .L19
	ldr	r0, [r5, #0xc]
	str	r0, [sp]
	ldr	r1, [r5, #0x10]
	str	r1, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [r5, #0xc]
	str	r0, [r5, #0x10]
	ldr	r1, .L19+0x4
	str	r0, [r1]
	ldr	r4, .L19+0x8
	ldr	r0, .L19+0xc
	ldr	r1, [r0]
	ldr	r6, .L19+0x10
	add	r0, r4, #0
	add	r2, r6, #0
	bl	memcpy
	ldr	r1, .L19+0x14
	mov	sl, r1
	ldr	r1, [r1]
	ldr	r7, .L19+0x18
	ldr	r0, .L19+0x1c
	add	r2, r7, #0
	bl	memcpy
	ldr	r0, .L19+0x20
	mov	r8, r0
	ldr	r1, [r0]
	ldr	r0, .L19+0x24
	mov	r9, r0
	ldr	r0, .L19+0x28
	mov	r2, r9
	bl	memcpy
	ldrb	r1, [r4, #0xa]
	ldrb	r0, [r4, #0xb]
	add	r1, r1, r0
	ldrb	r0, [r4, #0xc]
	add	r1, r1, r0
	ldrb	r0, [r4, #0xd]
	add	r0, r0, r1
	bl	SetSaveBlocksPointers
	ldr	r1, .L19+0xc
	ldr	r0, [r1]
	add	r1, r4, #0
	add	r2, r6, #0
	bl	memcpy
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r1, .L19+0x1c
	add	r2, r7, #0
	bl	memcpy
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r1, .L19+0x28
	mov	r2, r9
	bl	memcpy
	mov	r1, #0xe0
	lsl	r1, r1, #0x9
	add	r0, r4, #0
	bl	InitHeap
	ldr	r0, [sp, #0x4]
	str	r0, [r5, #0x10]
	ldr	r1, [sp]
	str	r1, [r5, #0xc]
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r4, r4, r0
	add	r0, r4, #0
	bl	ApplyNewEncryptionKeyToAllEncryptedData
	ldr	r1, .L19+0xc
	ldr	r0, [r1]
	str	r4, [r0, #0x44]
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	gMain
	.word	gTrainerHillVBlankCounter
	.word	gHeap
	.word	gSaveBlock2Ptr
	.word	0xf18
	.word	gSaveBlock1Ptr
	.word	0x3620
	.word	gHeap+0xf18
	.word	gPokemonStoragePtr
	.word	0x83d0
	.word	gHeap+0x4538
.Lfe5:
	.size	 MoveSaveBlocks_ResetHeap,.Lfe5-MoveSaveBlocks_ResetHeap
	.align	2, 0
	.globl	UseContinueGameWarp
	.type	 UseContinueGameWarp,function
	.thumb_func
UseContinueGameWarp:
	ldr	r0, .L22
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x9]
	mov	r0, #0x1
	and	r0, r0, r1
	bx	lr
.L23:
	.align	2, 0
.L22:
	.word	gSaveBlock2Ptr
.Lfe6:
	.size	 UseContinueGameWarp,.Lfe6-UseContinueGameWarp
	.align	2, 0
	.globl	ClearContinueGameWarpStatus
	.type	 ClearContinueGameWarpStatus,function
	.thumb_func
ClearContinueGameWarpStatus:
	ldr	r0, .L25
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0xfe
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	bx	lr
.L26:
	.align	2, 0
.L25:
	.word	gSaveBlock2Ptr
.Lfe7:
	.size	 ClearContinueGameWarpStatus,.Lfe7-ClearContinueGameWarpStatus
	.align	2, 0
	.globl	SetContinueGameWarpStatus
	.type	 SetContinueGameWarpStatus,function
	.thumb_func
SetContinueGameWarpStatus:
	ldr	r0, .L28
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	bx	lr
.L29:
	.align	2, 0
.L28:
	.word	gSaveBlock2Ptr
.Lfe8:
	.size	 SetContinueGameWarpStatus,.Lfe8-SetContinueGameWarpStatus
	.align	2, 0
	.globl	SetContinueGameWarpStatusToDynamicWarp
	.type	 SetContinueGameWarpStatusToDynamicWarp,function
	.thumb_func
SetContinueGameWarpStatusToDynamicWarp:
	push	{lr}
	mov	r0, #0x0
	bl	SetContinueGameWarpToDynamicWarp
	ldr	r0, .L31
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gSaveBlock2Ptr
.Lfe9:
	.size	 SetContinueGameWarpStatusToDynamicWarp,.Lfe9-SetContinueGameWarpStatusToDynamicWarp
	.align	2, 0
	.globl	ClearContinueGameWarpStatus2
	.type	 ClearContinueGameWarpStatus2,function
	.thumb_func
ClearContinueGameWarpStatus2:
	ldr	r0, .L34
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0xfe
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	bx	lr
.L35:
	.align	2, 0
.L34:
	.word	gSaveBlock2Ptr
.Lfe10:
	.size	 ClearContinueGameWarpStatus2,.Lfe10-ClearContinueGameWarpStatus2
	.align	2, 0
	.globl	SavePlayerParty
	.type	 SavePlayerParty,function
	.thumb_func
SavePlayerParty:
	push	{r4, lr}
	ldr	r0, .L42
	ldr	r0, [r0]
	ldr	r1, .L42+0x4
	ldrb	r1, [r1]
	mov	r2, #0x8d
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	strb	r1, [r0]
	mov	r4, #0x0
.L40:
	ldr	r0, .L42
	ldr	r0, [r0]
	mov	r1, #0x64
	mul	r1, r1, r4
	add	r0, r0, r1
	mov	r2, #0x8e
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	ldr	r2, .L42+0x8
	add	r1, r1, r2
	mov	r2, #0x64
	bl	memcpy
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L40	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	gSaveBlock1Ptr
	.word	gPlayerPartyCount
	.word	gPlayerParty
.Lfe11:
	.size	 SavePlayerParty,.Lfe11-SavePlayerParty
	.align	2, 0
	.globl	LoadPlayerParty
	.type	 LoadPlayerParty,function
	.thumb_func
LoadPlayerParty:
	push	{r4, r5, lr}
	ldr	r1, .L50
	ldr	r0, .L50+0x4
	ldr	r0, [r0]
	mov	r2, #0x8d
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	mov	r4, #0x0
	ldr	r5, .L50+0x8
.L48:
	mov	r0, #0x64
	mov	r2, r4
	mul	r2, r2, r0
	add	r0, r2, r5
	ldr	r1, .L50+0x4
	ldr	r1, [r1]
	add	r1, r1, r2
	mov	r2, #0x8e
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	mov	r2, #0x64
	bl	memcpy
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L48	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	gPlayerPartyCount
	.word	gSaveBlock1Ptr
	.word	gPlayerParty
.Lfe12:
	.size	 LoadPlayerParty,.Lfe12-LoadPlayerParty
	.align	2, 0
	.globl	SaveObjectEvents
	.type	 SaveObjectEvents,function
	.thumb_func
SaveObjectEvents:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L58
	mov	ip, r0
	ldr	r5, .L58+0x4
	mov	r8, r5
	ldr	r4, .L58+0x8
	mov	r3, #0x0
	mov	r2, #0xf
.L56:
	mov	r6, ip
	ldr	r1, [r6]
	add	r1, r1, r3
	add	r1, r1, r8
	add	r0, r4, #0
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	add	r4, r4, #0x24
	add	r3, r3, #0x24
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L56	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gSaveBlock1Ptr
	.word	0x1010
	.word	gObjectEvents
.Lfe13:
	.size	 SaveObjectEvents,.Lfe13-SaveObjectEvents
	.align	2, 0
	.globl	LoadObjectEvents
	.type	 LoadObjectEvents,function
	.thumb_func
LoadObjectEvents:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L66
	mov	ip, r0
	ldr	r5, .L66+0x4
	mov	r8, r5
	ldr	r4, .L66+0x8
	mov	r3, #0x0
	mov	r2, #0xf
.L64:
	mov	r6, ip
	ldr	r1, [r6]
	add	r1, r1, r3
	add	r0, r4, #0
	add	r1, r1, r8
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	add	r4, r4, #0x24
	add	r3, r3, #0x24
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L64	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L67:
	.align	2, 0
.L66:
	.word	gSaveBlock1Ptr
	.word	0x1010
	.word	gObjectEvents
.Lfe14:
	.size	 LoadObjectEvents,.Lfe14-LoadObjectEvents
	.align	2, 0
	.globl	SaveSerializedGame
	.type	 SaveSerializedGame,function
	.thumb_func
SaveSerializedGame:
	push	{lr}
	bl	SavePlayerParty
	bl	SaveObjectEvents
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 SaveSerializedGame,.Lfe15-SaveSerializedGame
	.align	2, 0
	.globl	LoadSerializedGame
	.type	 LoadSerializedGame,function
	.thumb_func
LoadSerializedGame:
	push	{lr}
	bl	LoadPlayerParty
	bl	LoadObjectEvents
	bl	DeserializeTmHmItemSlots
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 LoadSerializedGame,.Lfe16-LoadSerializedGame
	.align	2, 0
	.globl	LoadPlayerBag
	.type	 LoadPlayerBag,function
	.thumb_func
LoadPlayerBag:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r2, #0x0
	ldr	r0, .L126
	mov	ip, r0
	ldr	r1, .L126+0x4
	mov	sl, r1
	ldr	r5, .L126+0x8
	mov	r3, #0xac
	lsl	r3, r3, #0x3
	ldr	r4, .L126+0xc
.L74:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0x4f
	ble	.L74	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L126+0xc
	ldr	r5, .L126+0x8
	mov	r6, #0xa0
	lsl	r6, r6, #0x1
	add	r4, r0, r6
	mov	r3, #0xd4
	lsl	r3, r3, #0x3
.L79:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0x31
	ble	.L79	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L126+0xc
	ldr	r5, .L126+0x8
	mov	r7, #0x82
	lsl	r7, r7, #0x2
	add	r4, r0, r7
	mov	r3, #0xed
	lsl	r3, r3, #0x3
.L84:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0x1e
	ble	.L84	@cond_branch
	ldr	r0, .L126+0xc
	ldr	r3, .L126+0x10
	mov	r2, #0xa1
	lsl	r2, r2, #0x2
	add	r1, r0, r2
	mov	r2, #0xcf
.L89:
	ldmia	r3!, {r0}
	stmia	r1!, {r0}
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L89	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L126+0xc
	ldr	r5, .L126+0x8
	ldr	r6, .L126+0x14
	add	r4, r0, r6
	mov	r3, #0x80
	lsl	r3, r3, #0x4
.L94:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0x45
	ble	.L94	@cond_branch
	ldr	r0, .L126+0xc
	ldr	r7, .L126+0x8
	mov	r8, r7
	ldr	r1, .L126+0x18
	add	r4, r0, r1
	mov	r3, #0x0
	ldr	r2, .L126+0x1c
	mov	r9, r2
	mov	r2, #0xf
.L99:
	mov	r5, r8
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r0, r4, #0
	add	r1, r1, r9
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	add	r4, r4, #0x24
	add	r3, r3, #0x24
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L99	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L126+0xc
	ldr	r5, .L126+0x8
	ldr	r6, .L126+0x20
	add	r4, r0, r6
	ldr	r3, .L126+0x24
.L104:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0x27
	ble	.L104	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L126+0xc
	ldr	r5, .L126+0x8
	ldr	r7, .L126+0x28
	add	r4, r0, r7
	ldr	r3, .L126+0x2c
.L109:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0x63
	ble	.L109	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L126+0xc
	ldr	r5, .L126+0x8
	ldr	r1, .L126+0x30
	add	r4, r0, r1
	ldr	r3, .L126+0x34
.L114:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0x45
	ble	.L114	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L126+0xc
	ldr	r5, .L126+0x8
	ldr	r6, .L126+0x38
	add	r4, r0, r6
	mov	r3, #0xc6
	lsl	r3, r3, #0x4
.L119:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0x4f
	ble	.L119	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L126+0xc
	ldr	r5, .L126+0x8
	ldr	r7, .L126+0x3c
	add	r4, r0, r7
	mov	r3, #0xda
	lsl	r3, r3, #0x4
.L124:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0x2e
	ble	.L124	@cond_branch
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r0, [r0, #0x44]
	mov	r2, ip
	str	r0, [r2]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L127:
	.align	2, 0
.L126:
	.word	gLastEncryptionKey
	.word	gSaveBlock2Ptr
	.word	gSaveBlock1Ptr
	.word	gLoadedSaveData
	.word	gTmHmItemSlots
	.word	0x5c4
	.word	0x6dc
	.word	0x2860
	.word	0x91c
	.word	0x918
	.word	0x9bc
	.word	0x9b8
	.word	0xb4c
	.word	0xb48
	.word	0xc64
	.word	0xda4
.Lfe17:
	.size	 LoadPlayerBag,.Lfe17-LoadPlayerBag
	.align	2, 0
	.globl	SavePlayerBag
	.type	 SavePlayerBag,function
	.thumb_func
SavePlayerBag:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r2, #0x0
	ldr	r0, .L184
	mov	r8, r0
	ldr	r1, .L184+0x4
	mov	ip, r1
	ldr	r5, .L184+0x8
	mov	r3, #0xac
	lsl	r3, r3, #0x3
	ldr	r4, .L184+0xc
.L132:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r3
	add	r0, r0, r1
	ldmia	r4!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x4f
	ble	.L132	@cond_branch
	mov	r2, #0x0
	ldr	r5, .L184+0x8
	mov	r4, #0xd4
	lsl	r4, r4, #0x3
	ldr	r0, .L184+0xc
	mov	r6, #0xa0
	lsl	r6, r6, #0x1
	add	r3, r0, r6
.L137:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r4
	add	r0, r0, r1
	ldmia	r3!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x31
	ble	.L137	@cond_branch
	mov	r2, #0x0
	ldr	r5, .L184+0x8
	mov	r4, #0xed
	lsl	r4, r4, #0x3
	ldr	r0, .L184+0xc
	mov	r7, #0x82
	lsl	r7, r7, #0x2
	add	r3, r0, r7
.L142:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r4
	add	r0, r0, r1
	ldmia	r3!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x1e
	ble	.L142	@cond_branch
	ldr	r0, .L184+0xc
	mov	r1, #0xa1
	lsl	r1, r1, #0x2
	add	r3, r0, r1
	ldr	r1, .L184+0x10
	mov	r2, #0xcf
.L147:
	ldmia	r3!, {r0}
	stmia	r1!, {r0}
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L147	@cond_branch
	mov	r2, #0x0
	ldr	r5, .L184+0x8
	mov	r4, #0x80
	lsl	r4, r4, #0x4
	ldr	r0, .L184+0xc
	ldr	r6, .L184+0x14
	add	r3, r0, r6
.L152:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r4
	add	r0, r0, r1
	ldmia	r3!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x45
	ble	.L152	@cond_branch
	ldr	r7, .L184+0x8
	mov	r9, r7
	ldr	r0, .L184+0x18
	mov	sl, r0
	ldr	r4, .L184+0xc
	mov	r3, #0x0
	mov	r2, #0xf
.L157:
	mov	r5, r9
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, sl
	ldr	r6, .L184+0x1c
	add	r0, r4, r6
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	add	r4, r4, #0x24
	add	r3, r3, #0x24
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L157	@cond_branch
	mov	r2, #0x0
	ldr	r5, .L184+0x8
	ldr	r4, .L184+0x20
	ldr	r0, .L184+0xc
	ldr	r7, .L184+0x24
	add	r3, r0, r7
.L162:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r4
	add	r0, r0, r1
	ldmia	r3!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x27
	ble	.L162	@cond_branch
	mov	r2, #0x0
	ldr	r5, .L184+0x8
	ldr	r4, .L184+0x28
	ldr	r0, .L184+0xc
	ldr	r1, .L184+0x2c
	add	r3, r0, r1
.L167:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r4
	add	r0, r0, r1
	ldmia	r3!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x63
	ble	.L167	@cond_branch
	mov	r2, #0x0
	ldr	r5, .L184+0x8
	ldr	r4, .L184+0x30
	ldr	r0, .L184+0xc
	ldr	r6, .L184+0x34
	add	r3, r0, r6
.L172:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r4
	add	r0, r0, r1
	ldmia	r3!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x45
	ble	.L172	@cond_branch
	mov	r2, #0x0
	ldr	r5, .L184+0x8
	mov	r4, #0xc6
	lsl	r4, r4, #0x4
	ldr	r0, .L184+0xc
	ldr	r7, .L184+0x38
	add	r3, r0, r7
.L177:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r4
	add	r0, r0, r1
	ldmia	r3!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x4f
	ble	.L177	@cond_branch
	mov	r2, #0x0
	ldr	r5, .L184+0x8
	mov	r4, #0xda
	lsl	r4, r4, #0x4
	ldr	r0, .L184+0xc
	ldr	r1, .L184+0x3c
	add	r3, r0, r1
.L182:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r4
	add	r0, r0, r1
	ldmia	r3!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x2e
	ble	.L182	@cond_branch
	mov	r2, r8
	ldr	r1, [r2]
	ldr	r4, [r1, #0x44]
	mov	r5, ip
	ldr	r0, [r5]
	str	r0, [r1, #0x44]
	add	r0, r4, #0
	bl	ApplyNewEncryptionKeyToBagItems
	mov	r6, r8
	ldr	r0, [r6]
	str	r4, [r0, #0x44]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L185:
	.align	2, 0
.L184:
	.word	gSaveBlock2Ptr
	.word	gLastEncryptionKey
	.word	gSaveBlock1Ptr
	.word	gLoadedSaveData
	.word	gTmHmItemSlots
	.word	0x5c4
	.word	0x2860
	.word	0x6dc
	.word	0x918
	.word	0x91c
	.word	0x9b8
	.word	0x9bc
	.word	0xb48
	.word	0xb4c
	.word	0xc64
	.word	0xda4
.Lfe18:
	.size	 SavePlayerBag,.Lfe18-SavePlayerBag
	.align	2, 0
	.globl	ApplyNewEncryptionKeyToHword
	.type	 ApplyNewEncryptionKeyToHword,function
	.thumb_func
ApplyNewEncryptionKeyToHword:
	ldr	r2, .L187
	ldr	r2, [r2]
	ldr	r2, [r2, #0x44]
	ldrh	r3, [r0]
	eor	r2, r2, r3
	eor	r2, r2, r1
	strh	r2, [r0]
	bx	lr
.L188:
	.align	2, 0
.L187:
	.word	gSaveBlock2Ptr
.Lfe19:
	.size	 ApplyNewEncryptionKeyToHword,.Lfe19-ApplyNewEncryptionKeyToHword
	.align	2, 0
	.globl	ApplyNewEncryptionKeyToWord
	.type	 ApplyNewEncryptionKeyToWord,function
	.thumb_func
ApplyNewEncryptionKeyToWord:
	ldr	r2, .L190
	ldr	r3, [r2]
	ldr	r2, [r0]
	ldr	r3, [r3, #0x44]
	eor	r2, r2, r3
	eor	r2, r2, r1
	str	r2, [r0]
	bx	lr
.L191:
	.align	2, 0
.L190:
	.word	gSaveBlock2Ptr
.Lfe20:
	.size	 ApplyNewEncryptionKeyToWord,.Lfe20-ApplyNewEncryptionKeyToWord
	.align	2, 0
	.type	 ApplyNewEncryptionKeyToAllEncryptedData,function
	.thumb_func
ApplyNewEncryptionKeyToAllEncryptedData:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	ApplyNewEncryptionKeyToGameStats
	add	r0, r4, #0
	bl	ApplyNewEncryptionKeyToBagItems_
	add	r0, r4, #0
	bl	ApplyNewEncryptionKeyToBerryPowder
	ldr	r5, .L193
	ldr	r0, [r5]
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r1, r4, #0
	bl	ApplyNewEncryptionKeyToWord
	ldr	r0, [r5]
	ldr	r1, .L193+0x4
	add	r0, r0, r1
	add	r1, r4, #0
	bl	ApplyNewEncryptionKeyToHword
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L194:
	.align	2, 0
.L193:
	.word	gSaveBlock1Ptr
	.word	0x494
.Lfe21:
	.size	 ApplyNewEncryptionKeyToAllEncryptedData,.Lfe21-ApplyNewEncryptionKeyToAllEncryptedData
	.comm	gSaveBlock2Ptr, 4	@ 4
	.comm	gSaveBlock1Ptr, 4	@ 4
	.comm	gFlashMemoryPresent, 4	@ 4
	.comm	gPokemonStoragePtr, 4	@ 4
.text
	.align	2, 0

