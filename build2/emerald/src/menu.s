@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sStartMenuWindowId,object
	.size	 sStartMenuWindowId,1
sStartMenuWindowId:
	.byte	0x0
	.type	 sMapNamePopupWindowId,object
	.size	 sMapNamePopupWindowId,1
sMapNamePopupWindowId:
	.byte	0x0
	.align	2, 0
	.type	 sMenu,object
	.size	 sMenu,12
sMenu:
	.byte	0x0
	.space	11
	.align	1, 0
	.type	 sTileNum,object
	.size	 sTileNum,2
sTileNum:
	.short	0x0
	.type	 sPaletteNum,object
	.size	 sPaletteNum,1
sPaletteNum:
	.byte	0x0
	.type	 sYesNoWindowId,object
	.size	 sYesNoWindowId,1
sYesNoWindowId:
	.byte	0x0
	.type	 sWindowId,object
	.size	 sWindowId,1
sWindowId:
	.byte	0x0
	.align	1, 0
	.type	 sFiller,object
	.size	 sFiller,2
sFiller:
	.short	0x0
	.type	 sScheduledBgCopiesToVram,object
	.size	 sScheduledBgCopiesToVram,4
sScheduledBgCopiesToVram:
	.byte	0x0
	.space	3
	.align	1, 0
	.type	 sTempTileDataBufferIdx,object
	.size	 sTempTileDataBufferIdx,2
sTempTileDataBufferIdx:
	.short	0x0
	.align	2, 0
	.type	 sTempTileDataBuffer,object
	.size	 sTempTileDataBuffer,128
sTempTileDataBuffer:
	.word	0x0
	.space	124
	.globl	gUnknown_0860F074
	.section .rodata
	.align	1, 0
	.type	 gUnknown_0860F074,object
gUnknown_0860F074:
	.short	0x7fff
	.short	0x7fff
	.short	0x318c
	.short	0x675a
	.short	0x43c
	.short	0x3aff
	.short	0x664
	.short	0x4bd2
	.short	0x6546
	.short	0x7b14
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gUnknown_0860F074,32
	.type	 sTextSpeedFrameDelays,object
sTextSpeedFrameDelays:
	.byte	0x4
	.byte	0x2
	.byte	0x1
	.byte	0x40
	.size	 sTextSpeedFrameDelays,4
	.align	2, 0
	.type	 sStandardTextBox_WindowTemplates,object
sStandardTextBox_WindowTemplates:
	.byte	0x0
	.byte	0x2
	.byte	0xf
	.byte	0x1b
	.byte	0x4
	.byte	0xf
	.short	0x194
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sStandardTextBox_WindowTemplates,16
	.align	2, 0
	.type	 sYesNo_WindowTemplates,object
	.size	 sYesNo_WindowTemplates,8
sYesNo_WindowTemplates:
	.byte	0x0
	.byte	0x15
	.byte	0x9
	.byte	0x5
	.byte	0x4
	.byte	0xf
	.short	0x125
	.globl	gUnknown_0860F0B0
	.align	1, 0
	.type	 gUnknown_0860F0B0,object
gUnknown_0860F0B0:
	.short	0x532e
	.short	0x7fff
	.short	0x318c
	.short	0x675a
	.short	0x43c
	.short	0x3aff
	.short	0x664
	.short	0x4bd2
	.short	0x6546
	.short	0x7b14
	.short	0x7fff
	.short	0x7729
	.short	0x7686
	.short	0x4160
	.short	0x6183
	.short	0x2e20
	.size	 gUnknown_0860F0B0,32
	.globl	sTextColors
	.type	 sTextColors,object
sTextColors:
	.byte	0xf
	.byte	0x1
	.byte	0x2
	.size	 sTextColors,3
	.align	2, 0
	.type	 sMenuInfoIcons,object
sMenuInfoIcons:
	.byte	0xc
	.byte	0xc
	.short	0x0
	.byte	0x20
	.byte	0xc
	.short	0x20
	.byte	0x20
	.byte	0xc
	.short	0x64
	.byte	0x20
	.byte	0xc
	.short	0x60
	.byte	0x20
	.byte	0xc
	.short	0x80
	.byte	0x20
	.byte	0xc
	.short	0x48
	.byte	0x20
	.byte	0xc
	.short	0x44
	.byte	0x20
	.byte	0xc
	.short	0x6c
	.byte	0x20
	.byte	0xc
	.short	0x68
	.byte	0x20
	.byte	0xc
	.short	0x88
	.byte	0x20
	.byte	0xc
	.short	0xa4
	.byte	0x20
	.byte	0xc
	.short	0x24
	.byte	0x20
	.byte	0xc
	.short	0x28
	.byte	0x20
	.byte	0xc
	.short	0x2c
	.byte	0x20
	.byte	0xc
	.short	0x40
	.byte	0x20
	.byte	0xc
	.short	0x84
	.byte	0x20
	.byte	0xc
	.short	0x4c
	.byte	0x20
	.byte	0xc
	.short	0xa0
	.byte	0x20
	.byte	0xc
	.short	0x8c
	.space	4
	.byte	0x2a
	.byte	0xc
	.short	0xa8
	.byte	0x2a
	.byte	0xc
	.short	0xc0
	.byte	0x2a
	.byte	0xc
	.short	0xc8
	.byte	0x2a
	.byte	0xc
	.short	0xe0
	.byte	0x2a
	.byte	0xc
	.short	0xe8
	.byte	0x8
	.byte	0x8
	.short	0xae
	.byte	0x8
	.byte	0x8
	.short	0xaf
	.size	 sMenuInfoIcons,108
.text
	.align	2, 0
	.globl	InitStandardTextBoxWindows
	.type	 InitStandardTextBoxWindows,function
	.thumb_func
InitStandardTextBoxWindows:
	push	{lr}
	ldr	r0, .L3
	bl	InitWindows
	ldr	r0, .L3+0x4
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r0, .L3+0x8
	strb	r1, [r0]
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sStandardTextBox_WindowTemplates
	.word	sStartMenuWindowId
	.word	sMapNamePopupWindowId
.Lfe1:
	.size	 InitStandardTextBoxWindows,.Lfe1-InitStandardTextBoxWindows
	.align	2, 0
	.globl	FreeAllOverworldWindowBuffers
	.type	 FreeAllOverworldWindowBuffers,function
	.thumb_func
FreeAllOverworldWindowBuffers:
	push	{lr}
	bl	FreeAllWindowBuffers
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 FreeAllOverworldWindowBuffers,.Lfe2-FreeAllOverworldWindowBuffers
	.align	2, 0
	.globl	InitTextBoxGfxAndPrinters
	.type	 InitTextBoxGfxAndPrinters,function
	.thumb_func
InitTextBoxGfxAndPrinters:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	bl	DeactivateAllTextPrinters
	bl	LoadMessageBoxAndBorderGfx
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 InitTextBoxGfxAndPrinters,.Lfe3-InitTextBoxGfxAndPrinters
	.align	2, 0
	.globl	RunTextPrintersAndIsPrinter0Active
	.type	 RunTextPrintersAndIsPrinter0Active,function
	.thumb_func
RunTextPrintersAndIsPrinter0Active:
	push	{lr}
	bl	RunTextPrinters
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 RunTextPrintersAndIsPrinter0Active,.Lfe4-RunTextPrintersAndIsPrinter0Active
	.align	2, 0
	.globl	AddTextPrinterParameterized2
	.type	 AddTextPrinterParameterized2,function
	.thumb_func
AddTextPrinterParameterized2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	ldr	r7, [sp, #0x28]
	ldr	r4, [sp, #0x2c]
	mov	r8, r4
	ldr	r5, [sp, #0x30]
	ldr	r6, [sp, #0x34]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	str	r2, [sp]
	mov	r2, sp
	mov	r4, #0x0
	strb	r0, [r2, #0x4]
	mov	r0, sp
	strb	r1, [r0, #0x5]
	strb	r4, [r0, #0x6]
	mov	r1, #0x1
	strb	r1, [r0, #0x7]
	strb	r4, [r0, #0x8]
	strb	r1, [r0, #0x9]
	strb	r4, [r0, #0xa]
	strb	r4, [r0, #0xb]
	mov	r4, sp
	ldrb	r2, [r4, #0xc]
	sub	r1, r1, #0x11
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r4, #0xc]
	mov	r0, sp
	mov	r2, r8
	lsl	r2, r2, #0x4
	mov	r4, #0xf
	strb	r2, [r0, #0xc]
	mov	r2, sp
	and	r5, r5, r4
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	orr	r1, r1, r5
	strb	r1, [r2, #0xd]
	mov	r0, sp
	lsr	r6, r6, #0x14
	and	r1, r1, r4
	orr	r1, r1, r6
	strb	r1, [r0, #0xd]
	ldr	r2, .L9
	ldrb	r1, [r2]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, sp
	add	r1, r3, #0
	add	r2, r7, #0
	bl	AddTextPrinter
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L10:
	.align	2, 0
.L9:
	.word	gTextFlags
.Lfe5:
	.size	 AddTextPrinterParameterized2,.Lfe5-AddTextPrinterParameterized2
	.align	2, 0
	.globl	AddTextPrinterForMessage
	.type	 AddTextPrinterForMessage,function
	.thumb_func
AddTextPrinterForMessage:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	ldr	r3, .L12
	mov	r4, #0x1
	and	r0, r0, r4
	ldrb	r2, [r3]
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3]
	bl	GetPlayerTextSpeedDelay
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r2, .L12+0x4
	str	r5, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	AddTextPrinterParameterized2
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	gTextFlags
	.word	gStringVar4
.Lfe6:
	.size	 AddTextPrinterForMessage,.Lfe6-AddTextPrinterForMessage
	.align	2, 0
	.globl	AddTextPrinterForMessage_2
	.type	 AddTextPrinterForMessage_2,function
	.thumb_func
AddTextPrinterForMessage_2:
	push	{r4, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L15
	mov	r4, #0x1
	and	r0, r0, r4
	ldrb	r2, [r3]
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3]
	bl	GetPlayerTextSpeedDelay
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r2, .L15+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	AddTextPrinterParameterized2
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gTextFlags
	.word	gStringVar4
.Lfe7:
	.size	 AddTextPrinterForMessage_2,.Lfe7-AddTextPrinterForMessage_2
	.align	2, 0
	.globl	AddTextPrinterWithCustomSpeedForMessage
	.type	 AddTextPrinterWithCustomSpeedForMessage,function
	.thumb_func
AddTextPrinterWithCustomSpeedForMessage:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r4, .L18
	mov	r5, #0x1
	and	r0, r0, r5
	ldrb	r2, [r4]
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4]
	ldr	r2, .L18+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	AddTextPrinterParameterized2
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gTextFlags
	.word	gStringVar4
.Lfe8:
	.size	 AddTextPrinterWithCustomSpeedForMessage,.Lfe8-AddTextPrinterWithCustomSpeedForMessage
	.align	2, 0
	.globl	LoadMessageBoxAndBorderGfx
	.type	 LoadMessageBoxAndBorderGfx,function
	.thumb_func
LoadMessageBoxAndBorderGfx:
	push	{lr}
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	mov	r2, #0xf0
	bl	LoadMessageBoxGfx
	mov	r1, #0x85
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	mov	r2, #0xe0
	bl	LoadUserWindowBorderGfx
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 LoadMessageBoxAndBorderGfx,.Lfe9-LoadMessageBoxAndBorderGfx
	.align	2, 0
	.globl	DrawDialogueFrame
	.type	 DrawDialogueFrame,function
	.thumb_func
DrawDialogueFrame:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L23
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	PutWindowTilemap
	cmp	r4, #0x1
	bne	.L22	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L22:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	WindowFunc_DrawDialogueFrame
.Lfe10:
	.size	 DrawDialogueFrame,.Lfe10-DrawDialogueFrame
	.align	2, 0
	.globl	DrawStdWindowFrame
	.type	 DrawStdWindowFrame,function
	.thumb_func
DrawStdWindowFrame:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L27
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	PutWindowTilemap
	cmp	r4, #0x1
	bne	.L26	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L26:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	WindowFunc_DrawStandardFrame
.Lfe11:
	.size	 DrawStdWindowFrame,.Lfe11-DrawStdWindowFrame
	.align	2, 0
	.globl	ClearDialogWindowAndFrame
	.type	 ClearDialogWindowAndFrame,function
	.thumb_func
ClearDialogWindowAndFrame:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L31
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	ClearWindowTilemap
	cmp	r4, #0x1
	bne	.L30	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L30:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	WindowFunc_ClearDialogWindowAndFrame
.Lfe12:
	.size	 ClearDialogWindowAndFrame,.Lfe12-ClearDialogWindowAndFrame
	.align	2, 0
	.globl	ClearStdWindowAndFrame
	.type	 ClearStdWindowAndFrame,function
	.thumb_func
ClearStdWindowAndFrame:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L35
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	ClearWindowTilemap
	cmp	r4, #0x1
	bne	.L34	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L34:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	WindowFunc_ClearStdWindowAndFrame
.Lfe13:
	.size	 ClearStdWindowAndFrame,.Lfe13-ClearStdWindowAndFrame
	.align	2, 0
	.globl	WindowFunc_DrawStandardFrame
	.type	 WindowFunc_DrawStandardFrame,function
	.thumb_func
WindowFunc_DrawStandardFrame:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	add	r4, r2, #0
	ldr	r2, [sp, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x10]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x14]
	mov	r3, #0x85
	lsl	r3, r3, #0x2
	lsr	r0, r1, #0x18
	str	r0, [sp, #0xc]
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r2, r2, r1
	mov	r8, r2
	lsr	r2, r2, #0x18
	lsr	r0, r4, #0x18
	mov	r9, r0
	mov	r0, #0xff
	lsl	r0, r0, #0x18
	add	r4, r4, r0
	lsr	r4, r4, #0x18
	mov	r5, #0x1
	str	r5, [sp]
	str	r5, [sp, #0x4]
	mov	r6, #0xe
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	add	r1, r3, #0
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L43
	ldr	r2, [sp, #0x10]
	str	r2, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0xc]
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L43+0x4
	ldr	r3, [sp, #0xc]
	ldr	r2, [sp, #0x10]
	add	r0, r3, r2
	lsl	r0, r0, #0x18
	mov	sl, r0
	lsr	r2, r0, #0x18
	str	r5, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	mov	r5, r9
	ldr	r0, [sp, #0x14]
	add	r0, r0, r9
	cmp	r9, r0
	bge	.L39	@cond_branch
	mov	r3, r8
	str	r3, [sp, #0x18]
	mov	r6, #0x1
	mov	r0, #0xe
	mov	r8, r0
.L41:
	lsl	r4, r5, #0x18
	lsr	r4, r4, #0x18
	str	r6, [sp]
	str	r6, [sp, #0x4]
	mov	r2, r8
	str	r2, [sp, #0x8]
	add	r0, r7, #0
	ldr	r1, .L43+0x8
	ldr	r3, [sp, #0x18]
	lsr	r2, r3, #0x18
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	str	r6, [sp]
	str	r6, [sp, #0x4]
	mov	r0, r8
	str	r0, [sp, #0x8]
	add	r0, r7, #0
	ldr	r1, .L43+0xc
	mov	r3, sl
	lsr	r2, r3, #0x18
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	add	r5, r5, #0x1
	ldr	r0, [sp, #0x14]
	add	r0, r0, r9
	cmp	r5, r0
	blt	.L41	@cond_branch
.L39:
	ldr	r1, .L43+0x10
	ldr	r2, [sp, #0xc]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r4, [sp, #0x14]
	add	r4, r4, r9
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r5, #0x1
	str	r5, [sp]
	str	r5, [sp, #0x4]
	mov	r6, #0xe
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L43+0x14
	ldr	r0, [sp, #0x10]
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0xc]
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	mov	r1, #0x87
	lsl	r1, r1, #0x2
	ldr	r3, [sp, #0xc]
	ldr	r0, [sp, #0x10]
	add	r2, r3, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r5, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	0x215
	.word	0x216
	.word	0x217
	.word	0x219
	.word	0x21a
	.word	0x21b
.Lfe14:
	.size	 WindowFunc_DrawStandardFrame,.Lfe14-WindowFunc_DrawStandardFrame
	.align	2, 0
	.globl	WindowFunc_DrawDialogueFrame
	.type	 WindowFunc_DrawDialogueFrame,function
	.thumb_func
WindowFunc_DrawDialogueFrame:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	add	r6, r0, #0
	add	r5, r2, #0
	mov	r8, r3
	ldr	r2, [sp, #0x44]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r0, r1, #0x18
	lsl	r5, r5, #0x18
	mov	r1, r8
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x10]
	ldr	r1, .L46
	lsr	r2, r0, #0x18
	str	r2, [sp, #0xc]
	mov	r3, #0xfe
	lsl	r3, r3, #0x18
	add	r2, r0, r3
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x14]
	lsr	r0, r5, #0x18
	mov	sl, r0
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r5, r5, r2
	lsr	r5, r5, #0x18
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r3, #0xf
	mov	r9, r3
	str	r3, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x14]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L46+0x4
	ldr	r0, [sp, #0xc]
	sub	r0, r0, #0x1
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x18]
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, r9
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r1, #0x81
	lsl	r1, r1, #0x2
	mov	r0, r8
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x1c]
	str	r0, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r9
	str	r2, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0xc]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L46+0x8
	ldr	r7, [sp, #0xc]
	add	r7, r7, r8
	sub	r0, r7, #0x1
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x20]
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r3, r9
	str	r3, [sp, #0x8]
	add	r0, r6, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L46+0xc
	lsl	r2, r7, #0x18
	lsr	r7, r2, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, r9
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	add	r2, r7, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L46+0x10
	str	r4, [sp]
	mov	r5, #0x5
	str	r5, [sp, #0x4]
	mov	r2, r9
	str	r2, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x14]
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	ldr	r1, .L46+0x14
	add	r8, r8, r4
	mov	r3, r8
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp]
	str	r5, [sp, #0x4]
	mov	r0, r9
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x18]
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	ldr	r1, .L46+0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	mov	r2, r9
	str	r2, [sp, #0x8]
	add	r0, r6, #0
	add	r2, r7, #0
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	ldr	r1, .L46+0x1c
	ldr	r3, [sp, #0x10]
	add	sl, sl, r3
	mov	r0, sl
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r9
	str	r2, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x14]
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	ldr	r1, .L46+0x20
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r3, r9
	str	r3, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x18]
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	ldr	r1, .L46+0x24
	ldr	r0, [sp, #0x1c]
	str	r0, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r9
	str	r2, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0xc]
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	ldr	r1, .L46+0x28
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r3, r9
	str	r3, [sp, #0x8]
	add	r0, r6, #0
	ldr	r2, [sp, #0x20]
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	ldr	r1, .L46+0x2c
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, r9
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	add	r2, r7, #0
	mov	r3, sl
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	0x201
	.word	0x203
	.word	0x205
	.word	0x206
	.word	0x207
	.word	0x209
	.word	0x20a
	.word	0xa01
	.word	0xa03
	.word	0xa04
	.word	0xa05
	.word	0xa06
.Lfe15:
	.size	 WindowFunc_DrawDialogueFrame,.Lfe15-WindowFunc_DrawDialogueFrame
	.align	2, 0
	.globl	WindowFunc_ClearStdWindowAndFrame
	.type	 WindowFunc_ClearStdWindowAndFrame,function
	.thumb_func
WindowFunc_ClearStdWindowAndFrame:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r1, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsl	r1, r1, #0x18
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r4, r4, r2
	lsr	r4, r4, #0x18
	add	r5, r5, r2
	lsr	r5, r5, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	add	r3, r3, r2
	lsr	r3, r3, #0x18
	str	r3, [sp]
	add	r1, r1, r2
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	mov	r1, #0xe
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	add	r2, r4, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 WindowFunc_ClearStdWindowAndFrame,.Lfe16-WindowFunc_ClearStdWindowAndFrame
	.align	2, 0
	.globl	WindowFunc_ClearDialogWindowAndFrame
	.type	 WindowFunc_ClearDialogWindowAndFrame,function
	.thumb_func
WindowFunc_ClearDialogWindowAndFrame:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r1, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsl	r1, r1, #0x18
	mov	r2, #0xfd
	lsl	r2, r2, #0x18
	add	r4, r4, r2
	lsr	r4, r4, #0x18
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r5, r5, r2
	lsr	r5, r5, #0x18
	mov	r2, #0xc0
	lsl	r2, r2, #0x13
	add	r3, r3, r2
	lsr	r3, r3, #0x18
	str	r3, [sp]
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	add	r1, r1, r2
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	mov	r1, #0xe
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	add	r2, r4, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 WindowFunc_ClearDialogWindowAndFrame,.Lfe17-WindowFunc_ClearDialogWindowAndFrame
	.align	2, 0
	.globl	SetStandardWindowBorderStyle
	.type	 SetStandardWindowBorderStyle,function
	.thumb_func
SetStandardWindowBorderStyle:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x85
	lsl	r2, r2, #0x2
	mov	r3, #0xe
	bl	DrawStdFrameWithCustomTileAndPalette
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 SetStandardWindowBorderStyle,.Lfe18-SetStandardWindowBorderStyle
	.align	2, 0
	.globl	sub_819786C
	.type	 sub_819786C,function
	.thumb_func
sub_819786C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r6, #0x80
	lsl	r6, r6, #0x2
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0xf0
	bl	LoadMessageBoxGfx
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	mov	r3, #0xf
	bl	DrawDialogFrameWithCustomTileAndPalette
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 sub_819786C,.Lfe19-sub_819786C
	.align	2, 0
	.globl	sub_819789C
	.type	 sub_819789C,function
	.thumb_func
sub_819789C:
	push	{lr}
	ldr	r0, .L53
	mov	r1, #0xe0
	mov	r2, #0x14
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gUnknown_0860F074
.Lfe20:
	.size	 sub_819789C,.Lfe20-sub_819789C
	.align	2, 0
	.globl	Menu_LoadStdPalAt
	.type	 Menu_LoadStdPalAt,function
	.thumb_func
Menu_LoadStdPalAt:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L56
	mov	r2, #0x14
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	gUnknown_0860F074
.Lfe21:
	.size	 Menu_LoadStdPalAt,.Lfe21-Menu_LoadStdPalAt
	.align	2, 0
	.globl	sub_81978C8
	.type	 sub_81978C8,function
	.thumb_func
sub_81978C8:
	ldr	r0, .L59
	bx	lr
.L60:
	.align	2, 0
.L59:
	.word	gUnknown_0860F074
.Lfe22:
	.size	 sub_81978C8,.Lfe22-sub_81978C8
	.align	2, 0
	.globl	sub_81978D0
	.type	 sub_81978D0,function
	.thumb_func
sub_81978D0:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xf
	bls	.L62	@cond_branch
	mov	r1, #0x0
.L62:
	ldr	r0, .L63
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	pop	{r1}
	bx	r1
.L64:
	.align	2, 0
.L63:
	.word	gUnknown_0860F074
.Lfe23:
	.size	 sub_81978D0,.Lfe23-sub_81978D0
	.align	2, 0
	.globl	DisplayItemMessageOnField
	.type	 DisplayItemMessageOnField,function
	.thumb_func
DisplayItemMessageOnField:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	LoadMessageBoxAndBorderGfx
	bl	GetPlayerTextSpeedDelay
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	mov	r1, #0x1
	str	r1, [sp]
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r6, [sp, #0xc]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r3, #0xf
	bl	DisplayMessageAndContinueTask
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 DisplayItemMessageOnField,.Lfe24-DisplayItemMessageOnField
	.align	2, 0
	.globl	DisplayYesNoMenuDefaultYes
	.type	 DisplayYesNoMenuDefaultYes,function
	.thumb_func
DisplayYesNoMenuDefaultYes:
	push	{lr}
	ldr	r0, .L67
	mov	r1, #0x85
	lsl	r1, r1, #0x2
	mov	r2, #0xe
	mov	r3, #0x0
	bl	CreateYesNoMenu
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	sYesNo_WindowTemplates
.Lfe25:
	.size	 DisplayYesNoMenuDefaultYes,.Lfe25-DisplayYesNoMenuDefaultYes
	.align	2, 0
	.globl	DisplayYesNoMenuWithDefault
	.type	 DisplayYesNoMenuWithDefault,function
	.thumb_func
DisplayYesNoMenuWithDefault:
	push	{lr}
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L70
	mov	r1, #0x85
	lsl	r1, r1, #0x2
	mov	r2, #0xe
	bl	CreateYesNoMenu
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	sYesNo_WindowTemplates
.Lfe26:
	.size	 DisplayYesNoMenuWithDefault,.Lfe26-DisplayYesNoMenuWithDefault
	.align	2, 0
	.globl	GetPlayerTextSpeed
	.type	 GetPlayerTextSpeed,function
	.thumb_func
GetPlayerTextSpeed:
	push	{lr}
	ldr	r0, .L75
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L73	@cond_branch
	ldr	r0, .L75+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	b	.L74
.L76:
	.align	2, 0
.L75:
	.word	gTextFlags
	.word	gSaveBlock2Ptr
.L73:
	mov	r0, #0x1
.L74:
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 GetPlayerTextSpeed,.Lfe27-GetPlayerTextSpeed
	.align	2, 0
	.globl	GetPlayerTextSpeedDelay
	.type	 GetPlayerTextSpeedDelay,function
	.thumb_func
GetPlayerTextSpeedDelay:
	push	{lr}
	ldr	r0, .L79
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x14]
	lsl	r0, r1, #0x1d
	lsr	r0, r0, #0x1d
	cmp	r0, #0x3
	bls	.L78	@cond_branch
	mov	r0, #0x8
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x14]
.L78:
	bl	GetPlayerTextSpeed
	ldr	r1, .L79+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	pop	{r1}
	bx	r1
.L80:
	.align	2, 0
.L79:
	.word	gSaveBlock2Ptr
	.word	sTextSpeedFrameDelays
.Lfe28:
	.size	 GetPlayerTextSpeedDelay,.Lfe28-GetPlayerTextSpeedDelay
	.align	2, 0
	.globl	sub_81979C4
	.type	 sub_81979C4,function
	.thumb_func
sub_81979C4:
	push	{r4, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r4, .L83
	ldrb	r0, [r4]
	cmp	r0, #0xff
	bne	.L82	@cond_branch
	lsl	r0, r1, #0x19
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0xf
	str	r0, [sp, #0x4]
	ldr	r0, .L83+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x16
	mov	r2, #0x1
	mov	r3, #0x7
	bl	sub_8198AA4
	strb	r0, [r4]
.L82:
	ldrb	r0, [r4]
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r1}
	bx	r1
.L84:
	.align	2, 0
.L83:
	.word	sStartMenuWindowId
	.word	0x139
.Lfe29:
	.size	 sub_81979C4,.Lfe29-sub_81979C4
	.align	2, 0
	.globl	GetStartMenuWindowId
	.type	 GetStartMenuWindowId,function
	.thumb_func
GetStartMenuWindowId:
	ldr	r0, .L86
	ldrb	r0, [r0]
	bx	lr
.L87:
	.align	2, 0
.L86:
	.word	sStartMenuWindowId
.Lfe30:
	.size	 GetStartMenuWindowId,.Lfe30-GetStartMenuWindowId
	.align	2, 0
	.globl	RemoveStartMenuWindow
	.type	 RemoveStartMenuWindow,function
	.thumb_func
RemoveStartMenuWindow:
	push	{r4, lr}
	ldr	r4, .L90
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L89	@cond_branch
	bl	RemoveWindow
	mov	r0, #0xff
	strb	r0, [r4]
.L89:
	pop	{r4}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	sStartMenuWindowId
.Lfe31:
	.size	 RemoveStartMenuWindow,.Lfe31-RemoveStartMenuWindow
	.align	2, 0
	.globl	sub_8197A30
	.type	 sub_8197A30,function
	.thumb_func
sub_8197A30:
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	bx	lr
.Lfe32:
	.size	 sub_8197A30,.Lfe32-sub_8197A30
	.align	2, 0
	.globl	sub_8197A38
	.type	 sub_8197A38,function
	.thumb_func
sub_8197A38:
	mov	r0, #0x85
	lsl	r0, r0, #0x2
	bx	lr
.Lfe33:
	.size	 sub_8197A38,.Lfe33-sub_8197A38
	.align	2, 0
	.globl	AddMapNamePopUpWindow
	.type	 AddMapNamePopUpWindow,function
	.thumb_func
AddMapNamePopUpWindow:
	push	{r4, lr}
	add	sp, sp, #-0xc
	ldr	r4, .L96
	ldrb	r0, [r4]
	cmp	r0, #0xff
	bne	.L95	@cond_branch
	mov	r0, #0x3
	str	r0, [sp]
	mov	r0, #0xe
	str	r0, [sp, #0x4]
	add	r0, r0, #0xf9
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0xa
	bl	sub_8198AA4
	strb	r0, [r4]
.L95:
	ldrb	r0, [r4]
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r1}
	bx	r1
.L97:
	.align	2, 0
.L96:
	.word	sMapNamePopupWindowId
.Lfe34:
	.size	 AddMapNamePopUpWindow,.Lfe34-AddMapNamePopUpWindow
	.align	2, 0
	.globl	GetMapNamePopUpWindowId
	.type	 GetMapNamePopUpWindowId,function
	.thumb_func
GetMapNamePopUpWindowId:
	ldr	r0, .L99
	ldrb	r0, [r0]
	bx	lr
.L100:
	.align	2, 0
.L99:
	.word	sMapNamePopupWindowId
.Lfe35:
	.size	 GetMapNamePopUpWindowId,.Lfe35-GetMapNamePopUpWindowId
	.align	2, 0
	.globl	RemoveMapNamePopUpWindow
	.type	 RemoveMapNamePopUpWindow,function
	.thumb_func
RemoveMapNamePopUpWindow:
	push	{r4, lr}
	ldr	r4, .L103
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L102	@cond_branch
	bl	RemoveWindow
	mov	r0, #0xff
	strb	r0, [r4]
.L102:
	pop	{r4}
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	sMapNamePopupWindowId
.Lfe36:
	.size	 RemoveMapNamePopUpWindow,.Lfe36-RemoveMapNamePopUpWindow
	.align	2, 0
	.globl	AddTextPrinterWithCallbackForMessage
	.type	 AddTextPrinterWithCallbackForMessage,function
	.thumb_func
AddTextPrinterWithCallbackForMessage:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L106
	mov	r4, #0x1
	and	r0, r0, r4
	ldrb	r2, [r3]
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3]
	bl	GetPlayerTextSpeedDelay
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r2, .L106+0x4
	str	r5, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	AddTextPrinterParameterized2
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	gTextFlags
	.word	gStringVar4
.Lfe37:
	.size	 AddTextPrinterWithCallbackForMessage,.Lfe37-AddTextPrinterWithCallbackForMessage
	.align	2, 0
	.globl	sub_8197AE8
	.type	 sub_8197AE8,function
	.thumb_func
sub_8197AE8:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x20
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect
	cmp	r4, #0x1
	bne	.L109	@cond_branch
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
.L109:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 sub_8197AE8,.Lfe38-sub_8197AE8
	.align	2, 0
	.globl	DrawDialogFrameWithCustomTileAndPalette
	.type	 DrawDialogFrameWithCustomTileAndPalette,function
	.thumb_func
DrawDialogFrameWithCustomTileAndPalette:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L112
	strh	r2, [r0]
	ldr	r0, .L112+0x4
	strb	r3, [r0]
	ldr	r1, .L112+0x8
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	PutWindowTilemap
	cmp	r4, #0x1
	bne	.L111	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L111:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	sTileNum
	.word	sPaletteNum
	.word	WindowFunc_DrawDialogFrameWithCustomTileAndPalette
.Lfe39:
	.size	 DrawDialogFrameWithCustomTileAndPalette,.Lfe39-DrawDialogFrameWithCustomTileAndPalette
	.align	2, 0
	.globl	DrawDialogFrameWithCustomTile
	.type	 DrawDialogFrameWithCustomTile,function
	.thumb_func
DrawDialogFrameWithCustomTile:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L116
	strh	r2, [r0]
	ldr	r5, .L116+0x4
	add	r0, r6, #0
	mov	r1, #0x5
	bl	GetWindowAttribute
	strb	r0, [r5]
	ldr	r1, .L116+0x8
	add	r0, r6, #0
	bl	CallWindowFunction
	add	r0, r6, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r6, #0
	bl	PutWindowTilemap
	cmp	r4, #0x1
	bne	.L115	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L115:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L117:
	.align	2, 0
.L116:
	.word	sTileNum
	.word	sPaletteNum
	.word	WindowFunc_DrawDialogFrameWithCustomTileAndPalette
.Lfe40:
	.size	 DrawDialogFrameWithCustomTile,.Lfe40-DrawDialogFrameWithCustomTile
	.align	2, 0
	.globl	WindowFunc_DrawDialogFrameWithCustomTileAndPalette
	.type	 WindowFunc_DrawDialogFrameWithCustomTileAndPalette,function
	.thumb_func
WindowFunc_DrawDialogFrameWithCustomTileAndPalette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	mov	r8, r0
	add	r5, r2, #0
	add	r6, r3, #0
	ldr	r2, [sp, #0x44]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r0, r1, #0x18
	lsl	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x10]
	ldr	r2, .L119
	ldrh	r1, [r2]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsr	r3, r0, #0x18
	str	r3, [sp, #0xc]
	mov	r3, #0xfe
	lsl	r3, r3, #0x18
	add	r2, r0, r3
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x14]
	lsr	r0, r5, #0x18
	mov	r9, r0
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r5, r5, r2
	lsr	r5, r5, #0x18
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	ldr	r3, .L119+0x4
	mov	sl, r3
	ldrb	r0, [r3]
	str	r0, [sp, #0x8]
	mov	r0, r8
	ldr	r2, [sp, #0x14]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r0, .L119
	ldrh	r1, [r0]
	add	r1, r1, #0x3
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0xc]
	sub	r0, r0, #0x1
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x18]
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, sl
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	mov	r0, r8
	ldr	r2, [sp, #0x18]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r3, .L119
	ldrh	r1, [r3]
	add	r1, r1, #0x4
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	sub	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x1c]
	str	r0, [sp]
	str	r4, [sp, #0x4]
	mov	r2, sl
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	mov	r0, r8
	ldr	r2, [sp, #0xc]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r3, .L119
	ldrh	r1, [r3]
	add	r1, r1, #0x5
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0xc]
	add	r7, r0, r6
	sub	r0, r7, #0x1
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x20]
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, sl
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	mov	r0, r8
	ldr	r2, [sp, #0x20]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r3, .L119
	ldrh	r1, [r3]
	add	r1, r1, #0x6
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r7, #0x18
	lsr	r7, r2, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, sl
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	mov	r0, r8
	add	r2, r7, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r3, .L119
	ldrh	r1, [r3]
	add	r1, r1, #0x7
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	mov	r5, #0x5
	str	r5, [sp, #0x4]
	mov	r2, sl
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	mov	r0, r8
	ldr	r2, [sp, #0x14]
	mov	r3, r9
	bl	FillBgTilemapBufferRect
	ldr	r3, .L119
	ldrh	r1, [r3]
	add	r1, r1, #0x9
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r6, r6, #0x1
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp]
	str	r5, [sp, #0x4]
	mov	r2, sl
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	mov	r0, r8
	ldr	r2, [sp, #0x18]
	mov	r3, r9
	bl	FillBgTilemapBufferRect
	ldr	r3, .L119
	ldrh	r1, [r3]
	add	r1, r1, #0xa
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r5, [sp, #0x4]
	mov	r2, sl
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	mov	r0, r8
	add	r2, r7, #0
	mov	r3, r9
	bl	FillBgTilemapBufferRect
	ldr	r3, .L119+0x8
	add	r1, r3, #0
	ldr	r0, .L119
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, [sp, #0x10]
	add	r9, r9, r2
	mov	r3, r9
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, sl
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	mov	r0, r8
	ldr	r2, [sp, #0x14]
	bl	FillBgTilemapBufferRect
	ldr	r3, .L119+0xc
	add	r1, r3, #0
	ldr	r0, .L119
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r2, sl
	ldrb	r0, [r2]
	str	r0, [sp, #0x8]
	mov	r0, r8
	ldr	r2, [sp, #0x18]
	mov	r3, r9
	bl	FillBgTilemapBufferRect
	ldr	r3, .L119+0x10
	add	r1, r3, #0
	ldr	r0, .L119
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, [sp, #0x1c]
	str	r2, [sp]
	str	r4, [sp, #0x4]
	mov	r3, sl
	ldrb	r0, [r3]
	str	r0, [sp, #0x8]
	mov	r0, r8
	ldr	r2, [sp, #0xc]
	mov	r3, r9
	bl	FillBgTilemapBufferRect
	ldr	r0, .L119+0x14
	add	r1, r0, #0
	ldr	r2, .L119
	ldrh	r2, [r2]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r3, sl
	ldrb	r0, [r3]
	str	r0, [sp, #0x8]
	mov	r0, r8
	ldr	r2, [sp, #0x20]
	mov	r3, r9
	bl	FillBgTilemapBufferRect
	ldr	r0, .L119+0x18
	add	r1, r0, #0
	ldr	r2, .L119
	ldrh	r2, [r2]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r3, sl
	ldrb	r0, [r3]
	str	r0, [sp, #0x8]
	mov	r0, r8
	add	r2, r7, #0
	mov	r3, r9
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L120:
	.align	2, 0
.L119:
	.word	sTileNum
	.word	sPaletteNum
	.word	0x801
	.word	0x803
	.word	0x804
	.word	0x805
	.word	0x806
.Lfe41:
	.size	 WindowFunc_DrawDialogFrameWithCustomTileAndPalette,.Lfe41-WindowFunc_DrawDialogFrameWithCustomTileAndPalette
	.align	2, 0
	.globl	ClearDialogWindowAndFrameToTransparent
	.type	 ClearDialogWindowAndFrameToTransparent,function
	.thumb_func
ClearDialogWindowAndFrameToTransparent:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L123
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	ClearWindowTilemap
	cmp	r4, #0x1
	bne	.L122	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L122:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L124:
	.align	2, 0
.L123:
	.word	WindowFunc_ClearDialogWindowAndFrameNullPalette
.Lfe42:
	.size	 ClearDialogWindowAndFrameToTransparent,.Lfe42-ClearDialogWindowAndFrameToTransparent
	.align	2, 0
	.globl	WindowFunc_ClearDialogWindowAndFrameNullPalette
	.type	 WindowFunc_ClearDialogWindowAndFrameNullPalette,function
	.thumb_func
WindowFunc_ClearDialogWindowAndFrameNullPalette:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r1, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsl	r1, r1, #0x18
	mov	r2, #0xfd
	lsl	r2, r2, #0x18
	add	r4, r4, r2
	lsr	r4, r4, #0x18
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r5, r5, r2
	lsr	r5, r5, #0x18
	mov	r2, #0xc0
	lsl	r2, r2, #0x13
	add	r3, r3, r2
	lsr	r3, r3, #0x18
	str	r3, [sp]
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	add	r1, r1, r2
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	add	r2, r4, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 WindowFunc_ClearDialogWindowAndFrameNullPalette,.Lfe43-WindowFunc_ClearDialogWindowAndFrameNullPalette
	.align	2, 0
	.globl	DrawStdFrameWithCustomTileAndPalette
	.type	 DrawStdFrameWithCustomTileAndPalette,function
	.thumb_func
DrawStdFrameWithCustomTileAndPalette:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L128
	strh	r2, [r0]
	ldr	r0, .L128+0x4
	strb	r3, [r0]
	ldr	r1, .L128+0x8
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	PutWindowTilemap
	cmp	r4, #0x1
	bne	.L127	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L127:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L129:
	.align	2, 0
.L128:
	.word	sTileNum
	.word	sPaletteNum
	.word	WindowFunc_DrawStdFrameWithCustomTileAndPalette
.Lfe44:
	.size	 DrawStdFrameWithCustomTileAndPalette,.Lfe44-DrawStdFrameWithCustomTileAndPalette
	.align	2, 0
	.globl	DrawStdFrameWithCustomTile
	.type	 DrawStdFrameWithCustomTile,function
	.thumb_func
DrawStdFrameWithCustomTile:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L132
	strh	r2, [r0]
	ldr	r5, .L132+0x4
	add	r0, r6, #0
	mov	r1, #0x5
	bl	GetWindowAttribute
	strb	r0, [r5]
	ldr	r1, .L132+0x8
	add	r0, r6, #0
	bl	CallWindowFunction
	add	r0, r6, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r6, #0
	bl	PutWindowTilemap
	cmp	r4, #0x1
	bne	.L131	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L131:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L133:
	.align	2, 0
.L132:
	.word	sTileNum
	.word	sPaletteNum
	.word	WindowFunc_DrawStdFrameWithCustomTileAndPalette
.Lfe45:
	.size	 DrawStdFrameWithCustomTile,.Lfe45-DrawStdFrameWithCustomTile
	.align	2, 0
	.globl	WindowFunc_DrawStdFrameWithCustomTileAndPalette
	.type	 WindowFunc_DrawStdFrameWithCustomTileAndPalette,function
	.thumb_func
WindowFunc_DrawStdFrameWithCustomTileAndPalette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	mov	r9, r0
	add	r6, r1, #0
	add	r4, r2, #0
	ldr	r0, [sp, #0x38]
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x10]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
	ldr	r2, .L135
	ldrh	r1, [r2]
	lsr	r0, r6, #0x18
	str	r0, [sp, #0xc]
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r6, r6, r2
	lsr	r6, r6, #0x18
	lsr	r0, r4, #0x18
	mov	r8, r0
	add	r4, r4, r2
	lsr	r4, r4, #0x18
	mov	r5, #0x1
	str	r5, [sp]
	str	r5, [sp, #0x4]
	ldr	r7, .L135+0x4
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	add	r2, r6, #0
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	ldr	r2, .L135
	ldrh	r1, [r2]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x10]
	str	r0, [sp]
	str	r5, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	ldr	r2, [sp, #0xc]
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	ldr	r2, .L135
	ldrh	r1, [r2]
	add	r1, r1, #0x2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0xc]
	ldr	r2, [sp, #0x10]
	add	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	str	r5, [sp]
	str	r5, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	mov	r2, sl
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	ldr	r0, .L135
	ldrh	r1, [r0]
	add	r1, r1, #0x3
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r5, [sp]
	ldr	r2, [sp, #0x14]
	str	r2, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	add	r2, r6, #0
	mov	r3, r8
	bl	FillBgTilemapBufferRect
	ldr	r0, .L135
	ldrh	r1, [r0]
	add	r1, r1, #0x5
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r5, [sp]
	ldr	r2, [sp, #0x14]
	str	r2, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	mov	r2, sl
	mov	r3, r8
	bl	FillBgTilemapBufferRect
	ldr	r0, .L135
	ldrh	r1, [r0]
	add	r1, r1, #0x6
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, [sp, #0x14]
	add	r8, r8, r2
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	str	r5, [sp]
	str	r5, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	add	r2, r6, #0
	mov	r3, r8
	bl	FillBgTilemapBufferRect
	ldr	r2, .L135
	ldrh	r1, [r2]
	add	r1, r1, #0x7
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x10]
	str	r0, [sp]
	str	r5, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	ldr	r2, [sp, #0xc]
	mov	r3, r8
	bl	FillBgTilemapBufferRect
	ldr	r2, .L135
	ldrh	r1, [r2]
	add	r1, r1, #0x8
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r5, [sp]
	str	r5, [sp, #0x4]
	ldrb	r0, [r7]
	str	r0, [sp, #0x8]
	mov	r0, r9
	mov	r2, sl
	mov	r3, r8
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	sTileNum
	.word	sPaletteNum
.Lfe46:
	.size	 WindowFunc_DrawStdFrameWithCustomTileAndPalette,.Lfe46-WindowFunc_DrawStdFrameWithCustomTileAndPalette
	.align	2, 0
	.globl	ClearStdWindowAndFrameToTransparent
	.type	 ClearStdWindowAndFrameToTransparent,function
	.thumb_func
ClearStdWindowAndFrameToTransparent:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L139
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	ClearWindowTilemap
	cmp	r4, #0x1
	bne	.L138	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L138:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L140:
	.align	2, 0
.L139:
	.word	WindowFunc_ClearStdWindowAndFrameToTransparent
.Lfe47:
	.size	 ClearStdWindowAndFrameToTransparent,.Lfe47-ClearStdWindowAndFrameToTransparent
	.align	2, 0
	.globl	WindowFunc_ClearStdWindowAndFrameToTransparent
	.type	 WindowFunc_ClearStdWindowAndFrameToTransparent,function
	.thumb_func
WindowFunc_ClearStdWindowAndFrameToTransparent:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r1, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsl	r1, r1, #0x18
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r4, r4, r2
	lsr	r4, r4, #0x18
	add	r5, r5, r2
	lsr	r5, r5, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	add	r3, r3, r2
	lsr	r3, r3, #0x18
	str	r3, [sp]
	add	r1, r1, r2
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	add	r2, r4, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 WindowFunc_ClearStdWindowAndFrameToTransparent,.Lfe48-WindowFunc_ClearStdWindowAndFrameToTransparent
	.align	2, 0
	.globl	sub_81980F0
	.type	 sub_81980F0,function
	.thumb_func
sub_81980F0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	ldr	r4, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	cmp	r6, #0x3
	bls	.L143	@cond_branch
	mov	r1, #0x0
	mov	r0, sp
	strb	r1, [r0]
	b	.L144
.L143:
	mov	r0, sp
	strb	r6, [r0]
.L144:
	mov	r1, sp
	mov	r0, r8
	strb	r0, [r1, #0x2]
	mov	r0, #0x2
	strb	r0, [r1, #0x4]
	mov	r0, #0x1e
	sub	r0, r0, r7
	strb	r0, [r1, #0x1]
	strb	r7, [r1, #0x3]
	strb	r5, [r1, #0x5]
	strh	r4, [r1, #0x6]
	ldr	r4, .L147
	mov	r0, sp
	bl	AddWindow
	strb	r0, [r4]
	cmp	r5, #0xf
	bls	.L145	@cond_branch
	mov	r5, #0xf0
	b	.L146
.L148:
	.align	2, 0
.L147:
	.word	sWindowId
.L145:
	lsl	r0, r5, #0x1c
	lsr	r5, r0, #0x18
.L146:
	ldr	r0, .L149
	add	r1, r5, #0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L149+0x4
	ldrb	r0, [r0]
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L150:
	.align	2, 0
.L149:
	.word	gUnknown_0860F0B0
	.word	sWindowId
.Lfe49:
	.size	 sub_81980F0,.Lfe49-sub_81980F0
	.align	2, 0
	.globl	sub_8198180
	.type	 sub_8198180,function
	.thumb_func
sub_8198180:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r5, .L154
	ldrb	r0, [r5]
	cmp	r0, #0xff
	beq	.L152	@cond_branch
	bl	PutWindowTilemap
	ldrb	r0, [r5]
	mov	r1, #0xff
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	add	r1, r6, #0
	mov	r2, #0x0
	bl	GetStringWidth
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetWindowAttribute
	mov	r2, #0xec
	sub	r2, r2, r7
	lsl	r0, r0, #0x3
	sub	r2, r2, r0
	sub	r2, r2, r4
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r0, [r5]
	ldr	r1, .L154+0x4
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	mov	r0, r8
	cmp	r0, #0
	beq	.L152	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	CopyWindowToVram
.L152:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L155:
	.align	2, 0
.L154:
	.word	sWindowId
	.word	sTextColors
.Lfe50:
	.size	 sub_8198180,.Lfe50-sub_8198180
	.align	2, 0
	.globl	sub_8198204
	.type	 sub_8198204,function
	.thumb_func
sub_8198204:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	mov	sl, r0
	add	r6, r1, #0
	ldr	r0, [sp, #0x38]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r4, #0x0
	ldr	r0, .L163
	ldrb	r1, [r0]
	add	r7, r0, #0
	cmp	r1, #0xff
	beq	.L157	@cond_branch
	cmp	r2, #0
	beq	.L158	@cond_branch
	add	r0, sp, #0x14
	strb	r4, [r0]
	add	r1, r0, #0
	b	.L162
.L164:
	.align	2, 0
.L163:
	.word	sWindowId
.L158:
	add	r1, sp, #0x14
	mov	r0, #0xf
	strb	r0, [r1]
.L162:
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	add	r5, r7, #0
	ldrb	r0, [r5]
	bl	PutWindowTilemap
	ldrb	r0, [r5]
	mov	r1, #0xff
	bl	FillWindowPixelBuffer
	cmp	r6, #0
	beq	.L160	@cond_branch
	mov	r0, #0x0
	add	r1, r6, #0
	mov	r2, #0x0
	bl	GetStringWidth
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetWindowAttribute
	mov	r2, #0xec
	mov	r1, r8
	sub	r2, r2, r1
	lsl	r0, r0, #0x3
	sub	r2, r2, r0
	sub	r2, r2, r4
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r0, [r5]
	add	r1, sp, #0x14
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
.L160:
	ldrb	r0, [r7]
	mov	r1, #0x0
	str	r1, [sp]
	str	r1, [sp, #0x4]
	add	r2, sp, #0x14
	str	r2, [sp, #0x8]
	str	r1, [sp, #0xc]
	mov	r1, sl
	str	r1, [sp, #0x10]
	mov	r1, #0x1
	mov	r2, #0x4
	mov	r3, #0x1
	bl	AddTextPrinterParameterized4
	mov	r2, r9
	cmp	r2, #0
	beq	.L157	@cond_branch
	ldrb	r0, [r7]
	mov	r1, #0x3
	bl	CopyWindowToVram
.L157:
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 sub_8198204,.Lfe51-sub_8198204
	.align	2, 0
	.globl	sub_81982D8
	.type	 sub_81982D8,function
	.thumb_func
sub_81982D8:
	push	{lr}
	ldr	r1, .L167
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L166	@cond_branch
	mov	r1, #0x3
	bl	CopyWindowToVram
.L166:
	pop	{r0}
	bx	r0
.L168:
	.align	2, 0
.L167:
	.word	sWindowId
.Lfe52:
	.size	 sub_81982D8,.Lfe52-sub_81982D8
	.align	2, 0
	.globl	sub_81982F0
	.type	 sub_81982F0,function
	.thumb_func
sub_81982F0:
	push	{r4, lr}
	ldr	r4, .L171
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L170	@cond_branch
	mov	r1, #0xff
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	CopyWindowToVram
.L170:
	pop	{r4}
	pop	{r0}
	bx	r0
.L172:
	.align	2, 0
.L171:
	.word	sWindowId
.Lfe53:
	.size	 sub_81982F0,.Lfe53-sub_81982F0
	.align	2, 0
	.globl	sub_8198314
	.type	 sub_8198314,function
	.thumb_func
sub_8198314:
	push	{r4, lr}
	ldr	r4, .L175
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L174	@cond_branch
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4]
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	bl	RemoveWindow
	mov	r0, #0xff
	strb	r0, [r4]
.L174:
	pop	{r4}
	pop	{r0}
	bx	r0
.L176:
	.align	2, 0
.L175:
	.word	sWindowId
.Lfe54:
	.size	 sub_8198314,.Lfe54-sub_8198314
	.align	2, 0
	.globl	Menu_InitCursorInternal
	.type	 Menu_InitCursorInternal,function
	.thumb_func
Menu_InitCursorInternal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, [sp, #0x18]
	mov	r8, r4
	ldr	r4, [sp, #0x1c]
	ldr	r5, [sp, #0x20]
	ldr	r6, [sp, #0x24]
	mov	ip, r6
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r7, r5, #0x18
	ldr	r5, .L181
	mov	r6, #0x0
	strb	r2, [r5]
	strb	r3, [r5, #0x1]
	strb	r6, [r5, #0x3]
	sub	r4, r4, #0x1
	strb	r4, [r5, #0x4]
	strb	r0, [r5, #0x5]
	strb	r1, [r5, #0x6]
	mov	r0, r8
	strb	r0, [r5, #0x8]
	mov	r4, ip
	strb	r4, [r5, #0xb]
	cmp	r7, #0
	blt	.L179	@cond_branch
	mov	r0, #0x4
	ldrsb	r0, [r5, r0]
	cmp	r7, r0
	ble	.L178	@cond_branch
.L179:
	strb	r6, [r5, #0x2]
	b	.L180
.L182:
	.align	2, 0
.L181:
	.word	sMenu
.L178:
	strb	r7, [r5, #0x2]
.L180:
	mov	r0, #0x0
	bl	Menu_MoveCursor
	ldr	r0, .L183
	ldrb	r0, [r0, #0x2]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L184:
	.align	2, 0
.L183:
	.word	sMenu
.Lfe55:
	.size	 Menu_InitCursorInternal,.Lfe55-Menu_InitCursorInternal
	.align	2, 0
	.globl	Menu_InitCursor
	.type	 Menu_InitCursor,function
	.thumb_func
Menu_InitCursor:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x20]
	ldr	r5, [sp, #0x24]
	ldr	r6, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r4, #0x0
	str	r4, [sp, #0xc]
	bl	Menu_InitCursorInternal
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe56:
	.size	 Menu_InitCursor,.Lfe56-Menu_InitCursor
	.align	2, 0
	.globl	sub_81983EC
	.type	 sub_81983EC,function
	.thumb_func
sub_81983EC:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x14
	mov	r8, r0
	add	r6, r1, #0
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	mov	r1, #0x1
	str	r2, [sp, #0xc]
	str	r3, [sp, #0x10]
	bl	GetMenuCursorDimensionByFont
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, r8
	add	r1, r6, #0
	ldr	r2, [sp, #0xc]
	ldr	r3, [sp, #0x10]
	bl	Menu_InitCursor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe57:
	.size	 sub_81983EC,.Lfe57-sub_81983EC
	.align	2, 0
	.globl	RedrawMenuCursor
	.type	 RedrawMenuCursor,function
	.thumb_func
RedrawMenuCursor:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	mov	r8, r1
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r5, .L188
	ldrb	r0, [r5, #0x6]
	mov	r1, #0x0
	bl	GetMenuCursorDimensionByFont
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r5, #0x6]
	mov	r1, #0x1
	bl	GetMenuCursorDimensionByFont
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r5, #0x5]
	mov	r9, r1
	ldrb	r2, [r5]
	ldrb	r1, [r5, #0x8]
	mov	r3, r1
	mul	r3, r3, r6
	ldrb	r6, [r5, #0x1]
	add	r3, r3, r6
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	str	r4, [sp]
	str	r0, [sp, #0x4]
	mov	r0, r9
	mov	r1, #0x11
	bl	FillWindowPixelRect
	ldrb	r0, [r5, #0x5]
	ldrb	r1, [r5, #0x6]
	ldr	r2, .L188+0x4
	ldrb	r3, [r5]
	ldrb	r4, [r5, #0x8]
	mov	r6, r8
	mul	r6, r6, r4
	add	r4, r6, #0
	ldrb	r5, [r5, #0x1]
	add	r4, r4, r5
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L189:
	.align	2, 0
.L188:
	.word	sMenu
	.word	gText_SelectorArrow3
.Lfe58:
	.size	 RedrawMenuCursor,.Lfe58-RedrawMenuCursor
	.align	2, 0
	.globl	Menu_MoveCursor
	.type	 Menu_MoveCursor,function
	.thumb_func
Menu_MoveCursor:
	push	{r4, r5, lr}
	ldr	r1, .L196
	ldrb	r5, [r1, #0x2]
	mov	r2, #0x2
	ldrsb	r2, [r1, r2]
	lsl	r0, r0, #0x18
	asr	r3, r0, #0x18
	add	r2, r2, r3
	mov	r0, #0x3
	ldrsb	r0, [r1, r0]
	add	r4, r1, #0
	cmp	r2, r0
	bge	.L191	@cond_branch
	ldrb	r0, [r4, #0x4]
	b	.L195
.L197:
	.align	2, 0
.L196:
	.word	sMenu
.L191:
	mov	r0, #0x4
	ldrsb	r0, [r4, r0]
	cmp	r2, r0
	ble	.L193	@cond_branch
	ldrb	r0, [r4, #0x3]
	b	.L195
.L193:
	add	r0, r3, r5
.L195:
	strb	r0, [r4, #0x2]
	ldrb	r1, [r4, #0x2]
	add	r0, r5, #0
	bl	RedrawMenuCursor
	ldrb	r0, [r4, #0x2]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe59:
	.size	 Menu_MoveCursor,.Lfe59-Menu_MoveCursor
	.align	2, 0
	.globl	Menu_MoveCursorNoWrapAround
	.type	 Menu_MoveCursorNoWrapAround,function
	.thumb_func
Menu_MoveCursorNoWrapAround:
	push	{r4, r5, lr}
	ldr	r1, .L204
	ldrb	r5, [r1, #0x2]
	mov	r2, #0x2
	ldrsb	r2, [r1, r2]
	lsl	r0, r0, #0x18
	asr	r3, r0, #0x18
	add	r2, r2, r3
	mov	r0, #0x3
	ldrsb	r0, [r1, r0]
	add	r4, r1, #0
	cmp	r2, r0
	bge	.L199	@cond_branch
	ldrb	r0, [r4, #0x3]
	b	.L203
.L205:
	.align	2, 0
.L204:
	.word	sMenu
.L199:
	mov	r0, #0x4
	ldrsb	r0, [r4, r0]
	cmp	r2, r0
	ble	.L201	@cond_branch
	ldrb	r0, [r4, #0x4]
	b	.L203
.L201:
	add	r0, r3, r5
.L203:
	strb	r0, [r4, #0x2]
	ldrb	r1, [r4, #0x2]
	add	r0, r5, #0
	bl	RedrawMenuCursor
	ldrb	r0, [r4, #0x2]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe60:
	.size	 Menu_MoveCursorNoWrapAround,.Lfe60-Menu_MoveCursorNoWrapAround
	.align	2, 0
	.globl	Menu_GetCursorPos
	.type	 Menu_GetCursorPos,function
	.thumb_func
Menu_GetCursorPos:
	ldr	r0, .L207
	ldrb	r0, [r0, #0x2]
	bx	lr
.L208:
	.align	2, 0
.L207:
	.word	sMenu
.Lfe61:
	.size	 Menu_GetCursorPos,.Lfe61-Menu_GetCursorPos
	.align	2, 0
	.globl	Menu_ProcessInput
	.type	 Menu_ProcessInput,function
	.thumb_func
Menu_ProcessInput:
	push	{r4, lr}
	ldr	r0, .L221
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L210	@cond_branch
	ldr	r4, .L221+0x4
	ldrb	r0, [r4, #0xb]
	cmp	r0, #0
	bne	.L211	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L211:
	mov	r0, #0x2
	ldrsb	r0, [r4, r0]
	b	.L218
.L222:
	.align	2, 0
.L221:
	.word	gMain
	.word	sMenu
.L210:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L213	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L218
.L213:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L215	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L219
.L215:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L220	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L219:
	bl	Menu_MoveCursor
.L220:
	mov	r0, #0x2
	neg	r0, r0
.L218:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe62:
	.size	 Menu_ProcessInput,.Lfe62-Menu_ProcessInput
	.align	2, 0
	.globl	Menu_ProcessInputNoWrap
	.type	 Menu_ProcessInputNoWrap,function
	.thumb_func
Menu_ProcessInputNoWrap:
	push	{r4, r5, r6, lr}
	ldr	r4, .L236
	ldrb	r5, [r4, #0x2]
	add	r6, r5, #0
	ldr	r0, .L236+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L224	@cond_branch
	ldrb	r0, [r4, #0xb]
	cmp	r0, #0
	bne	.L225	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L225:
	mov	r0, #0x2
	ldrsb	r0, [r4, r0]
	b	.L234
.L237:
	.align	2, 0
.L236:
	.word	sMenu
	.word	gMain
.L224:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L227	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L234
.L227:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L229	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	bl	Menu_MoveCursorNoWrapAround
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	beq	.L226	@cond_branch
	b	.L235
.L229:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L226	@cond_branch
	mov	r0, #0x1
	bl	Menu_MoveCursorNoWrapAround
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	beq	.L233	@cond_branch
.L235:
	mov	r0, #0x5
	bl	PlaySE
.L233:
.L226:
	mov	r0, #0x2
	neg	r0, r0
.L234:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe63:
	.size	 Menu_ProcessInputNoWrap,.Lfe63-Menu_ProcessInputNoWrap
	.align	2, 0
	.globl	ProcessMenuInput_other
	.type	 ProcessMenuInput_other,function
	.thumb_func
ProcessMenuInput_other:
	push	{r4, lr}
	ldr	r2, .L250
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L239	@cond_branch
	ldr	r4, .L250+0x4
	ldrb	r0, [r4, #0xb]
	cmp	r0, #0
	bne	.L240	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L240:
	mov	r0, #0x2
	ldrsb	r0, [r4, r0]
	b	.L247
.L251:
	.align	2, 0
.L250:
	.word	gMain
	.word	sMenu
.L239:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L242	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L247
.L242:
	ldrh	r0, [r2, #0x30]
	mov	r1, #0xf0
	and	r1, r1, r0
	cmp	r1, #0x40
	bne	.L244	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L248
.L244:
	cmp	r1, #0x80
	bne	.L249	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L248:
	bl	Menu_MoveCursor
.L249:
	mov	r0, #0x2
	neg	r0, r0
.L247:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 ProcessMenuInput_other,.Lfe64-ProcessMenuInput_other
	.align	2, 0
	.globl	Menu_ProcessInputNoWrapAround_other
	.type	 Menu_ProcessInputNoWrapAround_other,function
	.thumb_func
Menu_ProcessInputNoWrapAround_other:
	push	{r4, r5, r6, lr}
	ldr	r4, .L265
	ldrb	r5, [r4, #0x2]
	add	r6, r5, #0
	ldr	r2, .L265+0x4
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L253	@cond_branch
	ldrb	r0, [r4, #0xb]
	cmp	r0, #0
	bne	.L254	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L254:
	mov	r0, #0x2
	ldrsb	r0, [r4, r0]
	b	.L263
.L266:
	.align	2, 0
.L265:
	.word	sMenu
	.word	gMain
.L253:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L256	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L263
.L256:
	ldrh	r0, [r2, #0x30]
	mov	r1, #0xf0
	and	r1, r1, r0
	cmp	r1, #0x40
	bne	.L258	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	bl	Menu_MoveCursorNoWrapAround
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	beq	.L255	@cond_branch
	b	.L264
.L258:
	cmp	r1, #0x80
	bne	.L255	@cond_branch
	mov	r0, #0x1
	bl	Menu_MoveCursorNoWrapAround
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	beq	.L262	@cond_branch
.L264:
	mov	r0, #0x5
	bl	PlaySE
.L262:
.L255:
	mov	r0, #0x2
	neg	r0, r0
.L263:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 Menu_ProcessInputNoWrapAround_other,.Lfe65-Menu_ProcessInputNoWrapAround_other
	.align	2, 0
	.globl	PrintTextArray
	.type	 PrintTextArray,function
	.thumb_func
PrintTextArray:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	ldr	r4, [sp, #0x2c]
	ldr	r5, [sp, #0x30]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	lsl	r4, r4, #0x18
	lsr	r7, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L269	@cond_branch
.L271:
	lsl	r0, r4, #0x3
	ldr	r1, [sp, #0x34]
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, r7
	mul	r0, r0, r4
	add	r0, r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	mov	r1, sl
	mov	r3, r9
	bl	AddTextPrinterParameterized
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L271	@cond_branch
.L269:
	add	r0, r6, #0
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe66:
	.size	 PrintTextArray,.Lfe66-PrintTextArray
	.align	2, 0
	.globl	sub_81987BC
	.type	 sub_81987BC,function
	.thumb_func
sub_81987BC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r4, [sp, #0x40]
	ldr	r5, [sp, #0x44]
	ldr	r6, [sp, #0x4c]
	ldr	r7, [sp, #0x50]
	mov	r8, r7
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x14]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x18]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x1c]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	sl, r4
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r9, r6
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L275	@cond_branch
.L277:
	lsl	r0, r4, #0x3
	ldr	r1, [sp, #0x48]
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, sl
	mul	r0, r0, r4
	ldr	r1, [sp, #0x1c]
	add	r0, r1, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r0, r9
	str	r0, [sp, #0xc]
	str	r6, [sp, #0x10]
	add	r0, r7, #0
	ldr	r1, [sp, #0x14]
	ldr	r3, [sp, #0x18]
	bl	AddTextPrinterParameterized5
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L277	@cond_branch
.L275:
	add	r0, r7, #0
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 sub_81987BC,.Lfe67-sub_81987BC
	.align	2, 0
	.globl	sub_8198854
	.type	 sub_8198854,function
	.thumb_func
sub_8198854:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	mov	r8, r0
	add	r6, r1, #0
	add	r4, r2, #0
	add	r5, r3, #0
	ldr	r7, [sp, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetFontAttribute
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r0, r8
	add	r1, r6, #0
	mov	r3, #0x1
	bl	PrintTextArray
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 sub_8198854,.Lfe68-sub_8198854
	.align	2, 0
	.globl	AddItemMenuActionTextPrinters
	.type	 AddItemMenuActionTextPrinters,function
	.thumb_func
AddItemMenuActionTextPrinters:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	add	r6, r1, #0
	mov	r8, r2
	ldr	r1, [sp, #0x38]
	mov	r9, r1
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x40]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x10]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r4, r8
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r8, r4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x14]
	mov	r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	mov	r0, sp
	ldrb	r1, [r0, #0x10]
	strb	r1, [r0, #0x4]
	strb	r6, [r0, #0x5]
	add	r0, r6, #0
	mov	r1, #0x5
	bl	GetFontAttribute
	mov	r3, sp
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xc]
	mov	r5, #0xf
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xc]
	add	r0, r6, #0
	mov	r1, #0x6
	bl	GetFontAttribute
	mov	r3, sp
	add	r1, r5, #0
	and	r1, r1, r0
	ldrb	r2, [r3, #0xd]
	mov	r4, #0x10
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0xd]
	add	r0, r6, #0
	mov	r1, #0x7
	bl	GetFontAttribute
	mov	r3, sp
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xd]
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xd]
	add	r0, r6, #0
	mov	r1, #0x4
	bl	GetFontAttribute
	mov	r1, sp
	and	r5, r5, r0
	ldrb	r0, [r1, #0xc]
	and	r4, r4, r0
	orr	r4, r4, r5
	strb	r4, [r1, #0xc]
	mov	r0, sp
	mov	r2, r9
	strb	r2, [r0, #0xa]
	add	r0, r6, #0
	mov	r1, #0x3
	bl	GetFontAttribute
	mov	r1, sp
	strb	r0, [r1, #0xb]
	mov	r0, sp
	mov	r4, r8
	strb	r4, [r0, #0x6]
	strb	r4, [r0, #0x8]
	mov	r4, #0x0
	cmp	r4, r7
	bcs	.L282	@cond_branch
	mov	r5, sp
.L284:
	ldr	r1, [sp, #0x48]
	add	r0, r1, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	ldr	r2, [sp, #0x44]
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [sp]
	mov	r0, sl
	mul	r0, r0, r4
	ldr	r1, [sp, #0x14]
	add	r0, r1, r0
	strb	r0, [r5, #0x7]
	strb	r0, [r5, #0x9]
	mov	r0, sp
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r7
	bcc	.L284	@cond_branch
.L282:
	ldr	r0, [sp, #0x10]
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 AddItemMenuActionTextPrinters,.Lfe69-AddItemMenuActionTextPrinters
	.align	2, 0
	.globl	sub_81989B8
	.type	 sub_81989B8,function
	.thumb_func
sub_81989B8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	mov	r9, r0
	add	r4, r1, #0
	add	r6, r2, #0
	mov	r8, r3
	ldr	r7, [sp, #0x30]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetFontAttribute
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	str	r6, [sp, #0x4]
	mov	r0, r8
	str	r0, [sp, #0x8]
	str	r7, [sp, #0xc]
	ldr	r0, [sp, #0x34]
	str	r0, [sp, #0x10]
	mov	r0, r9
	add	r1, r4, #0
	add	r2, r5, #0
	mov	r3, #0x1
	bl	AddItemMenuActionTextPrinters
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 sub_81989B8,.Lfe70-sub_81989B8
	.align	2, 0
	.globl	SetWindowTemplateFields
	.type	 SetWindowTemplateFields,function
	.thumb_func
SetWindowTemplateFields:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, [sp, #0x18]
	ldr	r5, [sp, #0x1c]
	ldr	r6, [sp, #0x20]
	ldr	r7, [sp, #0x24]
	mov	r8, r7
	strb	r1, [r0]
	strb	r2, [r0, #0x1]
	strb	r3, [r0, #0x2]
	strb	r4, [r0, #0x3]
	strb	r5, [r0, #0x4]
	strb	r6, [r0, #0x5]
	mov	r1, r8
	strh	r1, [r0, #0x6]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe71:
	.size	 SetWindowTemplateFields,.Lfe71-SetWindowTemplateFields
	.align	2, 0
	.globl	CreateWindowTemplate
	.type	 CreateWindowTemplate,function
	.thumb_func
CreateWindowTemplate:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x18
	mov	r8, r0
	ldr	r0, [sp, #0x2c]
	ldr	r4, [sp, #0x30]
	ldr	r5, [sp, #0x34]
	ldr	r6, [sp, #0x38]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r6, [sp, #0xc]
	add	r0, sp, #0x10
	bl	SetWindowTemplateFields
	ldr	r0, [sp, #0x10]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x14]		@ created by thumb_load_double_from_address
	mov	r2, r8
	str	r0, [r2]
	str	r1, [r2, #0x4]
	mov	r0, r8
	add	sp, sp, #0x18
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r2}
	bx	r2
.Lfe72:
	.size	 CreateWindowTemplate,.Lfe72-CreateWindowTemplate
	.align	2, 0
	.globl	sub_8198AA4
	.type	 sub_8198AA4,function
	.thumb_func
sub_8198AA4:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x18
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	ldr	r0, [sp, #0x28]
	ldr	r1, [sp, #0x2c]
	ldr	r2, [sp, #0x30]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r3, [sp]
	str	r0, [sp, #0x4]
	str	r1, [sp, #0x8]
	str	r2, [sp, #0xc]
	add	r0, sp, #0x10
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	SetWindowTemplateFields
	add	r0, sp, #0x10
	bl	AddWindow
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	sp, sp, #0x18
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe73:
	.size	 sub_8198AA4,.Lfe73-sub_8198AA4
	.align	2, 0
	.globl	sub_8198AF8
	.type	 sub_8198AF8,function
	.thumb_func
sub_8198AF8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	add	r6, r1, #0
	mov	r8, r2
	mov	r9, r3
	ldr	r4, [sp, #0x3c]
	ldr	r5, [sp, #0x40]
	ldr	r1, [sp, #0x44]
	mov	sl, r1
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r1, r8
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, sl
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	ldr	r7, .L291
	bl	AddWindow
	strb	r0, [r7]
	ldrb	r0, [r7]
	mov	r1, #0x1
	add	r2, r4, #0
	add	r3, r5, #0
	bl	DrawStdFrameWithCustomTileAndPalette
	ldr	r0, .L291+0x4
	str	r0, [sp, #0xc]
	add	r1, sp, #0xc
	ldrb	r0, [r7]
	strb	r0, [r1, #0x4]
	add	r0, r1, #0
	strb	r6, [r0, #0x5]
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetFontAttribute
	add	r1, sp, #0xc
	add	r0, r0, r8
	strb	r0, [r1, #0x6]
	add	r0, r1, #0
	mov	r1, r9
	strb	r1, [r0, #0x7]
	add	r1, r0, #0
	ldrb	r0, [r0, #0x6]
	strb	r0, [r1, #0x8]
	add	r0, r1, #0
	ldrb	r0, [r0, #0x7]
	strb	r0, [r1, #0x9]
	add	r0, r6, #0
	mov	r1, #0x5
	bl	GetFontAttribute
	add	r3, sp, #0xc
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xc]
	mov	r5, #0xf
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xc]
	add	r0, r6, #0
	mov	r1, #0x6
	bl	GetFontAttribute
	add	r3, sp, #0xc
	add	r1, r5, #0
	and	r1, r1, r0
	ldrb	r2, [r3, #0xd]
	mov	r4, #0x10
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0xd]
	add	r0, r6, #0
	mov	r1, #0x7
	bl	GetFontAttribute
	add	r3, sp, #0xc
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xd]
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xd]
	add	r0, r6, #0
	mov	r1, #0x4
	bl	GetFontAttribute
	add	r1, sp, #0xc
	and	r5, r5, r0
	ldrb	r0, [r1, #0xc]
	and	r4, r4, r0
	orr	r4, r4, r5
	strb	r4, [r1, #0xc]
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetFontAttribute
	add	r1, sp, #0xc
	strb	r0, [r1, #0xa]
	add	r0, r6, #0
	mov	r1, #0x3
	bl	GetFontAttribute
	add	r1, sp, #0xc
	strb	r0, [r1, #0xb]
	add	r0, r1, #0
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r7]
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, sl
	str	r0, [sp, #0x8]
	add	r0, r1, #0
	add	r1, r6, #0
	mov	r2, r8
	mov	r3, r9
	bl	Menu_InitCursor
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L292:
	.align	2, 0
.L291:
	.word	sYesNoWindowId
	.word	gText_YesNo
.Lfe74:
	.size	 sub_8198AF8,.Lfe74-sub_8198AF8
	.align	2, 0
	.globl	sub_8198C34
	.type	 sub_8198C34,function
	.thumb_func
sub_8198C34:
	push	{lr}
	add	sp, sp, #-0xc
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r2, [sp]
	str	r3, [sp, #0x4]
	mov	r2, #0x0
	str	r2, [sp, #0x8]
	mov	r3, #0x1
	bl	sub_8198AF8
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 sub_8198C34,.Lfe75-sub_8198C34
	.align	2, 0
	.globl	Menu_ProcessInputNoWrapClearOnChoose
	.type	 Menu_ProcessInputNoWrapClearOnChoose,function
	.thumb_func
Menu_ProcessInputNoWrapClearOnChoose:
	push	{r4, lr}
	bl	Menu_ProcessInputNoWrap
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L295	@cond_branch
	bl	sub_8198C78
.L295:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 Menu_ProcessInputNoWrapClearOnChoose,.Lfe76-Menu_ProcessInputNoWrapClearOnChoose
	.align	2, 0
	.globl	sub_8198C78
	.type	 sub_8198C78,function
	.thumb_func
sub_8198C78:
	push	{r4, lr}
	ldr	r4, .L297
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	RemoveWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.L298:
	.align	2, 0
.L297:
	.word	sYesNoWindowId
.Lfe77:
	.size	 sub_8198C78,.Lfe77-sub_8198C78
	.align	2, 0
	.globl	sub_8198C94
	.type	 sub_8198C94,function
	.thumb_func
sub_8198C94:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r4, [sp, #0x40]
	ldr	r5, [sp, #0x44]
	ldr	r6, [sp, #0x48]
	ldr	r7, [sp, #0x4c]
	mov	r8, r7
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0xc]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x10]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x14]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x18]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp, #0x1c]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r5, #0x0
	cmp	r5, r9
	bcs	.L301	@cond_branch
.L303:
	mov	r4, #0x0
	add	r1, r5, #0x1
	mov	r8, r1
	cmp	r4, r6
	bcs	.L302	@cond_branch
	ldr	r7, [sp, #0x1c]
	mov	r0, r7
	mul	r0, r0, r5
	ldr	r1, [sp, #0x14]
	add	r0, r1, r0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L307:
	mov	r0, r5
	mul	r0, r0, r6
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, [sp, #0x50]
	add	r0, r0, r1
	ldr	r2, [r0]
	ldr	r0, [sp, #0x18]
	mov	r3, r0
	mul	r3, r3, r4
	ldr	r1, [sp, #0x10]
	add	r3, r1, r3
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r7, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r0, sl
	ldr	r1, [sp, #0xc]
	bl	AddTextPrinterParameterized
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r6
	bcc	.L307	@cond_branch
.L302:
	mov	r7, r8
	lsl	r0, r7, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r9
	bcc	.L303	@cond_branch
.L301:
	mov	r0, sl
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 sub_8198C94,.Lfe78-sub_8198C94
	.align	2, 0
	.globl	sub_8198D54
	.type	 sub_8198D54,function
	.thumb_func
sub_8198D54:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x18
	mov	r9, r0
	mov	r8, r1
	add	r4, r2, #0
	add	r5, r3, #0
	ldr	r6, [sp, #0x34]
	ldr	r3, [sp, #0x38]
	ldr	r7, [sp, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, #0x0
	str	r3, [sp, #0x14]
	bl	GetFontAttribute
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	ldr	r3, [sp, #0x14]
	str	r3, [sp, #0xc]
	str	r7, [sp, #0x10]
	mov	r0, r9
	mov	r1, r8
	mov	r3, #0x0
	bl	sub_8198C94
	add	sp, sp, #0x18
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe79:
	.size	 sub_8198D54,.Lfe79-sub_8198D54
	.align	2, 0
	.globl	sub_8198DBC
	.type	 sub_8198DBC,function
	.thumb_func
sub_8198DBC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r4, [sp, #0x40]
	ldr	r5, [sp, #0x44]
	ldr	r6, [sp, #0x48]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x10]
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x14]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x18]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x1c]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r8, r5
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	sl, r6
	mov	r0, sp
	ldrb	r1, [r0, #0x10]
	strb	r1, [r0, #0x4]
	strb	r7, [r0, #0x5]
	add	r0, r7, #0
	mov	r1, #0x5
	bl	GetFontAttribute
	mov	r3, sp
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xc]
	mov	r5, #0xf
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xc]
	add	r0, r7, #0
	mov	r1, #0x6
	bl	GetFontAttribute
	mov	r3, sp
	add	r1, r5, #0
	and	r1, r1, r0
	ldrb	r2, [r3, #0xd]
	mov	r4, #0x10
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0xd]
	add	r0, r7, #0
	mov	r1, #0x7
	bl	GetFontAttribute
	mov	r3, sp
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xd]
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xd]
	add	r0, r7, #0
	mov	r1, #0x4
	bl	GetFontAttribute
	mov	r1, sp
	and	r5, r5, r0
	ldrb	r0, [r1, #0xc]
	and	r4, r4, r0
	orr	r4, r4, r5
	strb	r4, [r1, #0xc]
	add	r0, r7, #0
	mov	r1, #0x2
	bl	GetFontAttribute
	mov	r1, sp
	strb	r0, [r1, #0xa]
	add	r0, r7, #0
	mov	r1, #0x3
	bl	GetFontAttribute
	mov	r1, sp
	strb	r0, [r1, #0xb]
	mov	r6, #0x0
	cmp	r6, sl
	bcs	.L313	@cond_branch
.L315:
	mov	r5, #0x0
	add	r2, r6, #0x1
	mov	r9, r2
	cmp	r5, r8
	bcs	.L314	@cond_branch
	mov	r4, sp
.L319:
	mov	r0, r8
	mul	r0, r0, r6
	add	r0, r0, r5
	ldr	r1, [sp, #0x50]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	ldr	r2, [sp, #0x4c]
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [sp]
	ldr	r1, [sp, #0x1c]
	mov	r0, r1
	mul	r0, r0, r5
	ldr	r2, [sp, #0x14]
	add	r0, r2, r0
	strb	r0, [r4, #0x6]
	add	r0, r7, #0
	mov	r1, #0x1
	bl	GetFontAttribute
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, [sp, #0x18]
	add	r1, r0, r1
	strb	r1, [r4, #0x7]
	ldrb	r0, [r4, #0x6]
	strb	r0, [r4, #0x8]
	strb	r1, [r4, #0x9]
	mov	r0, sp
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r8
	bcc	.L319	@cond_branch
.L314:
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, sl
	bcc	.L315	@cond_branch
.L313:
	ldr	r0, [sp, #0x10]
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 sub_8198DBC,.Lfe80-sub_8198DBC
	.align	2, 0
	.globl	sub_8198EF8
	.type	 sub_8198EF8,function
	.thumb_func
sub_8198EF8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x18
	mov	r8, r0
	add	r3, r1, #0
	add	r4, r2, #0
	ldr	r5, [sp, #0x30]
	ldr	r6, [sp, #0x34]
	ldr	r7, [sp, #0x38]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	add	r0, r3, #0
	mov	r1, #0x0
	str	r3, [sp, #0x14]
	bl	GetFontAttribute
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	str	r7, [sp, #0xc]
	ldr	r0, [sp, #0x3c]
	str	r0, [sp, #0x10]
	mov	r0, r8
	ldr	r3, [sp, #0x14]
	add	r1, r3, #0
	mov	r3, #0x0
	bl	sub_8198DBC
	add	sp, sp, #0x18
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 sub_8198EF8,.Lfe81-sub_8198EF8
	.align	2, 0
	.globl	sub_8198F58
	.type	 sub_8198F58,function
	.thumb_func
sub_8198F58:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, [sp, #0x20]
	mov	ip, r4
	ldr	r4, [sp, #0x24]
	mov	r8, r4
	ldr	r4, [sp, #0x28]
	mov	r9, r4
	ldr	r4, [sp, #0x2c]
	mov	sl, r4
	ldr	r4, [sp, #0x30]
	ldr	r5, [sp, #0x34]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r7, r5, #0x18
	ldr	r5, .L327
	mov	r6, #0x0
	strb	r2, [r5]
	strb	r3, [r5, #0x1]
	strb	r6, [r5, #0x3]
	sub	r4, r4, #0x1
	strb	r4, [r5, #0x4]
	strb	r0, [r5, #0x5]
	strb	r1, [r5, #0x6]
	mov	r0, ip
	strb	r0, [r5, #0x7]
	mov	r4, r8
	strb	r4, [r5, #0x8]
	mov	r0, r9
	strb	r0, [r5, #0x9]
	mov	r4, sl
	strb	r4, [r5, #0xa]
	cmp	r7, #0
	blt	.L325	@cond_branch
	mov	r0, #0x4
	ldrsb	r0, [r5, r0]
	cmp	r7, r0
	ble	.L324	@cond_branch
.L325:
	strb	r6, [r5, #0x2]
	b	.L326
.L328:
	.align	2, 0
.L327:
	.word	sMenu
.L324:
	strb	r7, [r5, #0x2]
.L326:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	ChangeListMenuCursorPosition
	ldr	r0, .L329
	ldrb	r0, [r0, #0x2]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L330:
	.align	2, 0
.L329:
	.word	sMenu
.Lfe82:
	.size	 sub_8198F58,.Lfe82-sub_8198F58
	.align	2, 0
	.globl	sub_8198FD4
	.type	 sub_8198FD4,function
	.thumb_func
sub_8198FD4:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x20
	mov	r9, r0
	mov	r8, r1
	mov	sl, r2
	ldr	r6, [sp, #0x3c]
	ldr	r4, [sp, #0x40]
	ldr	r5, [sp, #0x44]
	ldr	r2, [sp, #0x48]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, sl
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, r8
	mov	r1, #0x1
	str	r2, [sp, #0x18]
	str	r3, [sp, #0x1c]
	bl	GetMenuCursorDimensionByFont
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r4
	mul	r1, r1, r5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r6, [sp]
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	str	r5, [sp, #0xc]
	str	r1, [sp, #0x10]
	ldr	r2, [sp, #0x18]
	str	r2, [sp, #0x14]
	mov	r0, r9
	mov	r1, r8
	mov	r2, sl
	ldr	r3, [sp, #0x1c]
	bl	sub_8198F58
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe83:
	.size	 sub_8198FD4,.Lfe83-sub_8198FD4
	.align	2, 0
	.globl	sub_8199060
	.type	 sub_8199060,function
	.thumb_func
sub_8199060:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r0, r1, #0x18
	lsr	r7, r0, #0x18
	ldr	r5, .L333
	ldrb	r0, [r5, #0x6]
	mov	r1, #0x0
	bl	GetMenuCursorDimensionByFont
	mov	r9, r0
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	ldrb	r0, [r5, #0x6]
	mov	r1, #0x1
	bl	GetMenuCursorDimensionByFont
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldrb	r0, [r5, #0x9]
	mov	sl, r0
	mov	r0, r8
	mov	r1, sl
	bl	__umodsi3
	ldrb	r1, [r5, #0x7]
	mov	r4, r1
	mul	r4, r4, r0
	ldrb	r1, [r5]
	add	r4, r4, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	mov	r1, sl
	bl	__udivsi3
	ldrb	r1, [r5, #0x8]
	mov	r3, r1
	mul	r3, r3, r0
	ldrb	r0, [r5, #0x1]
	add	r3, r3, r0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r0, [r5, #0x5]
	mov	r1, r9
	str	r1, [sp]
	str	r6, [sp, #0x4]
	mov	r1, #0x11
	add	r2, r4, #0
	bl	FillWindowPixelRect
	ldrb	r6, [r5, #0x9]
	add	r0, r7, #0
	add	r1, r6, #0
	bl	__umodsi3
	ldrb	r1, [r5, #0x7]
	mov	r4, r1
	mul	r4, r4, r0
	ldrb	r0, [r5]
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r7, #0
	add	r1, r6, #0
	bl	__udivsi3
	ldrb	r1, [r5, #0x8]
	mov	r3, r1
	mul	r3, r3, r0
	ldrb	r1, [r5, #0x1]
	add	r3, r3, r1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r0, [r5, #0x5]
	ldrb	r1, [r5, #0x6]
	ldr	r2, .L333+0x4
	str	r3, [sp]
	mov	r3, #0x0
	str	r3, [sp, #0x4]
	str	r3, [sp, #0x8]
	add	r3, r4, #0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L334:
	.align	2, 0
.L333:
	.word	sMenu
	.word	gText_SelectorArrow3
.Lfe84:
	.size	 sub_8199060,.Lfe84-sub_8199060
	.align	2, 0
	.globl	ChangeListMenuCursorPosition
	.type	 ChangeListMenuCursorPosition,function
	.thumb_func
ChangeListMenuCursorPosition:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	ldr	r1, .L353
	ldrb	r2, [r1, #0x2]
	mov	r8, r2
	lsl	r0, r0, #0x18
	asr	r6, r0, #0x18
	add	r5, r1, #0
	cmp	r6, #0
	beq	.L336	@cond_branch
	mov	r7, #0x2
	ldrsb	r7, [r5, r7]
	ldrb	r4, [r5, #0x9]
	add	r0, r7, #0
	add	r1, r4, #0
	bl	__modsi3
	add	r0, r0, r6
	cmp	r0, #0
	bge	.L337	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0xff
	add	r0, r0, r8
	b	.L349
.L354:
	.align	2, 0
.L353:
	.word	sMenu
.L337:
	cmp	r0, r4
	blt	.L339	@cond_branch
	add	r0, r7, #0
	add	r1, r4, #0
	bl	__divsi3
	mul	r0, r0, r4
	b	.L349
.L339:
	mov	r1, r8
	add	r0, r6, r1
.L349:
	strb	r0, [r5, #0x2]
.L336:
	mov	r2, r9
	lsl	r0, r2, #0x18
	asr	r6, r0, #0x18
	cmp	r6, #0
	beq	.L341	@cond_branch
	mov	r0, #0x2
	ldrsb	r0, [r5, r0]
	ldrb	r4, [r5, #0x9]
	add	r1, r4, #0
	bl	__divsi3
	add	r1, r0, r6
	cmp	r1, #0
	bge	.L342	@cond_branch
	ldrb	r0, [r5, #0xa]
	sub	r0, r0, #0x1
	mul	r0, r0, r4
	ldrb	r1, [r5, #0x2]
	add	r0, r0, r1
	b	.L350
.L342:
	ldrb	r0, [r5, #0xa]
	cmp	r1, r0
	blt	.L344	@cond_branch
	sub	r0, r0, #0x1
	mov	r1, r4
	mul	r1, r1, r0
	ldrb	r0, [r5, #0x2]
	sub	r0, r0, r1
	b	.L350
.L344:
	mov	r0, r4
	mul	r0, r0, r6
	ldrb	r2, [r5, #0x2]
	add	r0, r0, r2
.L350:
	strb	r0, [r5, #0x2]
.L341:
	mov	r1, #0x2
	ldrsb	r1, [r5, r1]
	mov	r0, #0x4
	ldrsb	r0, [r5, r0]
	cmp	r1, r0
	bgt	.L346	@cond_branch
	ldrb	r1, [r5, #0x2]
	mov	r0, r8
	bl	sub_8199060
	b	.L352
.L346:
	mov	r0, r8
	strb	r0, [r5, #0x2]
.L352:
	ldrb	r0, [r5, #0x2]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 ChangeListMenuCursorPosition,.Lfe85-ChangeListMenuCursorPosition
	.align	2, 0
	.globl	ChangeGridMenuCursorPosition
	.type	 ChangeGridMenuCursorPosition,function
	.thumb_func
ChangeGridMenuCursorPosition:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	ldr	r1, .L365
	ldrb	r7, [r1, #0x2]
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	add	r5, r1, #0
	cmp	r4, #0
	beq	.L356	@cond_branch
	mov	r0, #0x2
	ldrsb	r0, [r5, r0]
	ldrb	r6, [r5, #0x9]
	add	r1, r6, #0
	bl	__modsi3
	add	r0, r0, r4
	cmp	r0, #0
	blt	.L356	@cond_branch
	cmp	r0, r6
	bge	.L356	@cond_branch
	add	r0, r4, r7
	strb	r0, [r5, #0x2]
.L356:
	mov	r1, r8
	lsl	r0, r1, #0x18
	asr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L358	@cond_branch
	mov	r0, #0x2
	ldrsb	r0, [r5, r0]
	ldrb	r6, [r5, #0x9]
	add	r1, r6, #0
	bl	__divsi3
	add	r0, r0, r4
	cmp	r0, #0
	blt	.L358	@cond_branch
	ldrb	r1, [r5, #0xa]
	cmp	r0, r1
	bge	.L358	@cond_branch
	mov	r0, r6
	mul	r0, r0, r4
	ldrb	r1, [r5, #0x2]
	add	r0, r0, r1
	strb	r0, [r5, #0x2]
.L358:
	mov	r1, #0x2
	ldrsb	r1, [r5, r1]
	mov	r0, #0x4
	ldrsb	r0, [r5, r0]
	cmp	r1, r0
	bgt	.L360	@cond_branch
	ldrb	r1, [r5, #0x2]
	add	r0, r7, #0
	bl	sub_8199060
	b	.L364
.L366:
	.align	2, 0
.L365:
	.word	sMenu
.L360:
	strb	r7, [r5, #0x2]
.L364:
	ldrb	r0, [r5, #0x2]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe86:
	.size	 ChangeGridMenuCursorPosition,.Lfe86-ChangeGridMenuCursorPosition
	.align	2, 0
	.globl	sub_8199284
	.type	 sub_8199284,function
	.thumb_func
sub_8199284:
	push	{r4, lr}
	ldr	r4, .L384
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L368	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L384+0x4
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	b	.L381
.L385:
	.align	2, 0
.L384:
	.word	gMain
	.word	sMenu
.L368:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L370	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L381
.L370:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L372	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	b	.L382
.L372:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L374	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	mov	r1, #0x1
	b	.L382
.L374:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L377	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L376	@cond_branch
.L377:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L383
.L376:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L380	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L369	@cond_branch
.L380:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L383:
	mov	r1, #0x0
.L382:
	bl	ChangeListMenuCursorPosition
.L369:
	mov	r0, #0x2
	neg	r0, r0
.L381:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe87:
	.size	 sub_8199284,.Lfe87-sub_8199284
	.align	2, 0
	.globl	Menu_ProcessInputGridLayout
	.type	 Menu_ProcessInputGridLayout,function
	.thumb_func
Menu_ProcessInputGridLayout:
	push	{r4, r5, r6, lr}
	ldr	r5, .L407
	ldrb	r4, [r5, #0x2]
	ldr	r6, .L407+0x4
	ldrh	r1, [r6, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L387	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x2
	ldrsb	r0, [r5, r0]
	b	.L404
.L408:
	.align	2, 0
.L407:
	.word	sMenu
	.word	gMain
.L387:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L389	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L404
.L389:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L391	@cond_branch
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	b	.L405
.L391:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L394	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x1
	b	.L405
.L394:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L398	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L397	@cond_branch
.L398:
	mov	r0, #0x1
	neg	r0, r0
	b	.L406
.L397:
	ldrh	r1, [r6, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L402	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L388	@cond_branch
.L402:
	mov	r0, #0x1
.L406:
	mov	r1, #0x0
.L405:
	bl	ChangeGridMenuCursorPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	beq	.L403	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L403:
.L388:
	mov	r0, #0x2
	neg	r0, r0
.L404:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe88:
	.size	 Menu_ProcessInputGridLayout,.Lfe88-Menu_ProcessInputGridLayout
	.align	2, 0
	.globl	sub_81993D8
	.type	 sub_81993D8,function
	.thumb_func
sub_81993D8:
	push	{r4, r5, lr}
	ldr	r4, .L426
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L410	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L426+0x4
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	b	.L423
.L427:
	.align	2, 0
.L426:
	.word	gMain
	.word	sMenu
.L410:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L412	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L423
.L412:
	ldrh	r0, [r4, #0x30]
	mov	r5, #0xf0
	add	r1, r5, #0
	and	r1, r1, r0
	cmp	r1, #0x40
	bne	.L414	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	b	.L424
.L414:
	cmp	r1, #0x80
	bne	.L416	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	mov	r1, #0x1
	b	.L424
.L416:
	cmp	r1, #0x20
	beq	.L419	@cond_branch
	bl	GetLRKeysPressedAndHeld
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L418	@cond_branch
.L419:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L425
.L418:
	ldrh	r1, [r4, #0x30]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0x10
	beq	.L422	@cond_branch
	bl	GetLRKeysPressedAndHeld
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L411	@cond_branch
.L422:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L425:
	mov	r1, #0x0
.L424:
	bl	ChangeListMenuCursorPosition
.L411:
	mov	r0, #0x2
	neg	r0, r0
.L423:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe89:
	.size	 sub_81993D8,.Lfe89-sub_81993D8
	.align	2, 0
	.globl	sub_8199484
	.type	 sub_8199484,function
	.thumb_func
sub_8199484:
	push	{r4, r5, r6, lr}
	ldr	r6, .L449
	ldrb	r4, [r6, #0x2]
	ldr	r5, .L449+0x4
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L429	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x2
	ldrsb	r0, [r6, r0]
	b	.L446
.L450:
	.align	2, 0
.L449:
	.word	sMenu
	.word	gMain
.L429:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L431	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L446
.L431:
	ldrh	r0, [r5, #0x30]
	mov	r6, #0xf0
	add	r1, r6, #0
	and	r1, r1, r0
	cmp	r1, #0x40
	bne	.L433	@cond_branch
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	b	.L447
.L433:
	cmp	r1, #0x80
	bne	.L436	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x1
	b	.L447
.L436:
	cmp	r1, #0x20
	beq	.L440	@cond_branch
	bl	GetLRKeysPressedAndHeld
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L439	@cond_branch
.L440:
	mov	r0, #0x1
	neg	r0, r0
	b	.L448
.L439:
	ldrh	r1, [r5, #0x30]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0x10
	beq	.L444	@cond_branch
	bl	GetLRKeysPressedAndHeld
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L430	@cond_branch
.L444:
	mov	r0, #0x1
.L448:
	mov	r1, #0x0
.L447:
	bl	ChangeGridMenuCursorPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	beq	.L445	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L445:
.L430:
	mov	r0, #0x2
	neg	r0, r0
.L446:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe90:
	.size	 sub_8199484,.Lfe90-sub_8199484
	.align	2, 0
	.globl	InitMenuInUpperLeftCorner
	.type	 InitMenuInUpperLeftCorner,function
	.thumb_func
InitMenuInUpperLeftCorner:
	push	{r4, r5, r6, lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	ldr	r4, .L455
	mov	r6, #0x0
	strb	r6, [r4]
	mov	r2, #0x1
	strb	r2, [r4, #0x1]
	strb	r6, [r4, #0x3]
	sub	r1, r1, #0x1
	strb	r1, [r4, #0x4]
	strb	r0, [r4, #0x5]
	strb	r2, [r4, #0x6]
	mov	r0, #0x10
	strb	r0, [r4, #0x8]
	strb	r3, [r4, #0xb]
	cmp	r5, #0
	blt	.L453	@cond_branch
	mov	r0, #0x4
	ldrsb	r0, [r4, r0]
	cmp	r5, r0
	ble	.L452	@cond_branch
.L453:
	strb	r6, [r4, #0x2]
	b	.L454
.L456:
	.align	2, 0
.L455:
	.word	sMenu
.L452:
	strb	r5, [r4, #0x2]
.L454:
	mov	r0, #0x0
	bl	Menu_MoveCursor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe91:
	.size	 InitMenuInUpperLeftCorner,.Lfe91-InitMenuInUpperLeftCorner
	.align	2, 0
	.globl	InitMenuInUpperLeftCornerPlaySoundWhenAPressed
	.type	 InitMenuInUpperLeftCornerPlaySoundWhenAPressed,function
	.thumb_func
InitMenuInUpperLeftCornerPlaySoundWhenAPressed:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r3, #0x0
	bl	InitMenuInUpperLeftCorner
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe92:
	.size	 InitMenuInUpperLeftCornerPlaySoundWhenAPressed,.Lfe92-InitMenuInUpperLeftCornerPlaySoundWhenAPressed
	.align	2, 0
	.globl	PrintMenuTable
	.type	 PrintMenuTable,function
	.thumb_func
PrintMenuTable:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	mov	r5, #0x0
	cmp	r5, r7
	bcs	.L460	@cond_branch
	mov	r6, #0x80
	lsl	r6, r6, #0x11
	add	r4, r2, #0
.L462:
	ldr	r2, [r4]
	lsr	r0, r6, #0x18
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r0, r8
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	mov	r0, #0x80
	lsl	r0, r0, #0x15
	add	r6, r6, r0
	add	r4, r4, #0x8
	add	r5, r5, #0x1
	cmp	r5, r7
	bcc	.L462	@cond_branch
.L460:
	mov	r0, r8
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe93:
	.size	 PrintMenuTable,.Lfe93-PrintMenuTable
	.align	2, 0
	.globl	sub_81995E4
	.type	 sub_81995E4,function
	.thumb_func
sub_81995E4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	mov	r9, r2
	mov	r8, r3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	mov	r0, sp
	mov	r1, #0x0
	mov	sl, r1
	strb	r6, [r0, #0x4]
	mov	r1, sp
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	mov	r1, #0x5
	bl	GetFontAttribute
	mov	r3, sp
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xc]
	mov	r5, #0xf
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xc]
	mov	r0, #0x1
	mov	r1, #0x6
	bl	GetFontAttribute
	mov	r3, sp
	add	r1, r5, #0
	and	r1, r1, r0
	ldrb	r2, [r3, #0xd]
	mov	r4, #0x10
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0xd]
	mov	r0, #0x1
	mov	r1, #0x7
	bl	GetFontAttribute
	mov	r3, sp
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xd]
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xd]
	mov	r0, #0x1
	mov	r1, #0x4
	bl	GetFontAttribute
	mov	r1, sp
	and	r5, r5, r0
	ldrb	r0, [r1, #0xc]
	and	r4, r4, r0
	orr	r4, r4, r5
	strb	r4, [r1, #0xc]
	mov	r0, sp
	mov	r1, sl
	strb	r1, [r0, #0xa]
	strb	r1, [r0, #0xb]
	mov	r1, #0x8
	strb	r1, [r0, #0x6]
	strb	r1, [r0, #0x8]
	mov	r4, #0x0
	cmp	r4, r7
	bcs	.L466	@cond_branch
	mov	r5, sp
.L468:
	mov	r1, r8
	add	r0, r1, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	ldr	r0, [r0]
	str	r0, [sp]
	lsl	r0, r4, #0x4
	add	r0, r0, #0x1
	strb	r0, [r5, #0x7]
	strb	r0, [r5, #0x9]
	mov	r0, sp
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r7
	bcc	.L468	@cond_branch
.L466:
	add	r0, r6, #0
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe94:
	.size	 sub_81995E4,.Lfe94-sub_81995E4
	.align	2, 0
	.globl	CreateYesNoMenu
	.type	 CreateYesNoMenu,function
	.thumb_func
CreateYesNoMenu:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x10
	add	r4, r1, #0
	add	r5, r2, #0
	add	r6, r3, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r1, .L471
	mov	r8, r1
	bl	AddWindow
	mov	r2, r8
	strb	r0, [r2]
	ldrb	r0, [r2]
	mov	r1, #0x1
	add	r2, r4, #0
	add	r3, r5, #0
	bl	DrawStdFrameWithCustomTileAndPalette
	ldr	r0, .L471+0x4
	str	r0, [sp]
	mov	r1, sp
	mov	r2, r8
	ldrb	r0, [r2]
	mov	r2, #0x0
	mov	r9, r2
	strb	r0, [r1, #0x4]
	mov	r0, sp
	mov	r2, #0x1
	strb	r2, [r0, #0x5]
	mov	r0, #0x8
	strb	r0, [r1, #0x6]
	mov	r0, sp
	strb	r2, [r0, #0x7]
	ldrb	r0, [r0, #0x6]
	strb	r0, [r1, #0x8]
	mov	r0, sp
	ldrb	r0, [r0, #0x7]
	strb	r0, [r1, #0x9]
	mov	r0, #0x1
	mov	r1, #0x5
	bl	GetFontAttribute
	mov	r3, sp
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xc]
	mov	r5, #0xf
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xc]
	mov	r0, #0x1
	mov	r1, #0x6
	bl	GetFontAttribute
	mov	r3, sp
	add	r1, r5, #0
	and	r1, r1, r0
	ldrb	r2, [r3, #0xd]
	mov	r4, #0x10
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0xd]
	mov	r0, #0x1
	mov	r1, #0x7
	bl	GetFontAttribute
	mov	r3, sp
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xd]
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xd]
	mov	r0, #0x1
	mov	r1, #0x4
	bl	GetFontAttribute
	mov	r1, sp
	and	r5, r5, r0
	ldrb	r0, [r1, #0xc]
	and	r4, r4, r0
	orr	r4, r4, r5
	strb	r4, [r1, #0xc]
	mov	r0, sp
	mov	r1, r9
	strb	r1, [r0, #0xa]
	strb	r1, [r0, #0xb]
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	mov	r2, r8
	ldrb	r0, [r2]
	mov	r1, #0x2
	add	r2, r6, #0
	bl	InitMenuInUpperLeftCornerPlaySoundWhenAPressed
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L472:
	.align	2, 0
.L471:
	.word	sYesNoWindowId
	.word	gText_YesNo
.Lfe95:
	.size	 CreateYesNoMenu,.Lfe95-CreateYesNoMenu
	.align	2, 0
	.globl	PrintMenuGridTable
	.type	 PrintMenuGridTable,function
	.thumb_func
PrintMenuGridTable:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0xc]
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x10]
	mov	r7, #0x0
	cmp	r7, r3
	bcs	.L475	@cond_branch
.L477:
	mov	r4, #0x0
	add	r0, r7, #0x1
	mov	r9, r0
	cmp	r4, r6
	bcs	.L476	@cond_branch
	lsl	r0, r7, #0x4
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x80
	lsl	r5, r5, #0x14
.L481:
	mov	r0, r7
	mul	r0, r0, r6
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, [sp, #0x34]
	add	r0, r0, r1
	ldr	r2, [r0]
	lsr	r3, r5, #0x18
	mov	r0, r8
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r0, sl
	mov	r1, #0x1
	bl	AddTextPrinterParameterized
	ldr	r1, [sp, #0xc]
	lsl	r0, r1, #0x18
	add	r5, r5, r0
	add	r4, r4, #0x1
	cmp	r4, r6
	bcc	.L481	@cond_branch
.L476:
	mov	r7, r9
	ldr	r4, [sp, #0x10]
	cmp	r7, r4
	bcc	.L477	@cond_branch
.L475:
	mov	r0, sl
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 PrintMenuGridTable,.Lfe96-PrintMenuGridTable
	.align	2, 0
	.globl	sub_819983C
	.type	 sub_819983C,function
	.thumb_func
sub_819983C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x10]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x14]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	sl, r3
	mov	r0, sp
	mov	r6, #0x0
	ldrb	r1, [r0, #0x10]
	strb	r1, [r0, #0x4]
	mov	r1, sp
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	mov	r1, #0x5
	bl	GetFontAttribute
	mov	r3, sp
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xc]
	mov	r5, #0xf
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xc]
	mov	r0, #0x1
	mov	r1, #0x6
	bl	GetFontAttribute
	mov	r3, sp
	add	r1, r5, #0
	and	r1, r1, r0
	ldrb	r2, [r3, #0xd]
	mov	r4, #0x10
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0xd]
	mov	r0, #0x1
	mov	r1, #0x7
	bl	GetFontAttribute
	mov	r3, sp
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xd]
	add	r1, r5, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xd]
	mov	r0, #0x1
	mov	r1, #0x4
	bl	GetFontAttribute
	mov	r1, sp
	and	r5, r5, r0
	ldrb	r0, [r1, #0xc]
	and	r4, r4, r0
	orr	r4, r4, r5
	strb	r4, [r1, #0xc]
	mov	r0, sp
	strb	r6, [r0, #0xa]
	strb	r6, [r0, #0xb]
	mov	r7, #0x0
	cmp	r7, sl
	bcs	.L486	@cond_branch
.L488:
	mov	r5, #0x0
	add	r2, r7, #0x1
	mov	r9, r2
	cmp	r5, r8
	bcs	.L487	@cond_branch
	mov	r4, sp
	lsl	r0, r7, #0x4
	add	r6, r0, #0x1
.L492:
	mov	r0, r8
	mul	r0, r0, r7
	add	r0, r0, r5
	ldr	r1, [sp, #0x3c]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	ldr	r2, [sp, #0x38]
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [sp]
	ldr	r1, [sp, #0x14]
	mov	r0, r1
	mul	r0, r0, r5
	add	r0, r0, #0x8
	strb	r0, [r4, #0x6]
	strb	r6, [r4, #0x7]
	strb	r0, [r4, #0x8]
	strb	r6, [r4, #0x9]
	mov	r0, sp
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r8
	bcc	.L492	@cond_branch
.L487:
	mov	r2, r9
	lsl	r0, r2, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, sl
	bcc	.L488	@cond_branch
.L486:
	ldr	r0, [sp, #0x10]
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe97:
	.size	 sub_819983C,.Lfe97-sub_819983C
	.align	2, 0
	.globl	sub_8199944
	.type	 sub_8199944,function
	.thumb_func
sub_8199944:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, [sp, #0x14]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r7, r4, #0x18
	ldr	r6, .L499
	mov	r4, #0x0
	mov	ip, r4
	mov	r4, ip
	strb	r4, [r6]
	mov	r5, #0x1
	strb	r5, [r6, #0x1]
	strb	r4, [r6, #0x3]
	mov	r4, r2
	mul	r4, r4, r3
	sub	r4, r4, #0x1
	strb	r4, [r6, #0x4]
	strb	r0, [r6, #0x5]
	strb	r5, [r6, #0x6]
	strb	r1, [r6, #0x7]
	mov	r0, #0x10
	strb	r0, [r6, #0x8]
	strb	r2, [r6, #0x9]
	strb	r3, [r6, #0xa]
	cmp	r7, #0
	blt	.L497	@cond_branch
	mov	r0, #0x4
	ldrsb	r0, [r6, r0]
	cmp	r7, r0
	ble	.L496	@cond_branch
.L497:
	mov	r0, ip
	strb	r0, [r6, #0x2]
	b	.L498
.L500:
	.align	2, 0
.L499:
	.word	sMenu
.L496:
	strb	r7, [r6, #0x2]
.L498:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	ChangeListMenuCursorPosition
	ldr	r0, .L501
	ldrb	r0, [r0, #0x2]
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L502:
	.align	2, 0
.L501:
	.word	sMenu
.Lfe98:
	.size	 sub_8199944,.Lfe98-sub_8199944
	.align	2, 0
	.globl	ClearScheduledBgCopiesToVram
	.type	 ClearScheduledBgCopiesToVram,function
	.thumb_func
ClearScheduledBgCopiesToVram:
	push	{lr}
	ldr	r0, .L504
	mov	r1, #0x0
	mov	r2, #0x4
	bl	memset
	pop	{r0}
	bx	r0
.L505:
	.align	2, 0
.L504:
	.word	sScheduledBgCopiesToVram
.Lfe99:
	.size	 ClearScheduledBgCopiesToVram,.Lfe99-ClearScheduledBgCopiesToVram
	.align	2, 0
	.globl	ScheduleBgCopyTilemapToVram
	.type	 ScheduleBgCopyTilemapToVram,function
	.thumb_func
ScheduleBgCopyTilemapToVram:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L507
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	bx	lr
.L508:
	.align	2, 0
.L507:
	.word	sScheduledBgCopiesToVram
.Lfe100:
	.size	 ScheduleBgCopyTilemapToVram,.Lfe100-ScheduleBgCopyTilemapToVram
	.align	2, 0
	.globl	DoScheduledBgTilemapCopiesToVram
	.type	 DoScheduledBgTilemapCopiesToVram,function
	.thumb_func
DoScheduledBgTilemapCopiesToVram:
	push	{r4, lr}
	ldr	r4, .L514
	ldrb	r0, [r4]
	cmp	r0, #0x1
	bne	.L510	@cond_branch
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x0
	strb	r0, [r4]
.L510:
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1
	bne	.L511	@cond_branch
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
.L511:
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0x1
	bne	.L512	@cond_branch
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x0
	strb	r0, [r4, #0x2]
.L512:
	ldrb	r0, [r4, #0x3]
	cmp	r0, #0x1
	bne	.L513	@cond_branch
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x0
	strb	r0, [r4, #0x3]
.L513:
	pop	{r4}
	pop	{r0}
	bx	r0
.L515:
	.align	2, 0
.L514:
	.word	sScheduledBgCopiesToVram
.Lfe101:
	.size	 DoScheduledBgTilemapCopiesToVram,.Lfe101-DoScheduledBgTilemapCopiesToVram
	.align	2, 0
	.globl	ResetTempTileDataBuffers
	.type	 ResetTempTileDataBuffers,function
	.thumb_func
ResetTempTileDataBuffers:
	push	{lr}
	ldr	r3, .L522
	ldr	r1, .L522+0x4
	mov	r2, #0x0
	add	r0, r1, #0
	add	r0, r0, #0x7c
.L520:
	str	r2, [r0]
	sub	r0, r0, #0x4
	cmp	r0, r1
	bge	.L520	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3]
	pop	{r0}
	bx	r0
.L523:
	.align	2, 0
.L522:
	.word	sTempTileDataBufferIdx
	.word	sTempTileDataBuffer
.Lfe102:
	.size	 ResetTempTileDataBuffers,.Lfe102-ResetTempTileDataBuffers
	.align	2, 0
	.globl	FreeTempTileDataBuffersIfPossible
	.type	 FreeTempTileDataBuffersIfPossible,function
	.thumb_func
FreeTempTileDataBuffersIfPossible:
	push	{r4, r5, r6, lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L525	@cond_branch
	ldr	r1, .L534
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L526	@cond_branch
	mov	r4, #0x0
	ldrh	r1, [r1]
	cmp	r4, r1
	bge	.L528	@cond_branch
	ldr	r5, .L534+0x4
	mov	r6, #0x0
.L530:
	ldr	r0, [r5]
	bl	Free
	stmia	r5!, {r6}
	add	r4, r4, #0x1
	ldr	r0, .L534
	ldrh	r0, [r0]
	cmp	r4, r0
	blt	.L530	@cond_branch
.L528:
	ldr	r1, .L534
	mov	r0, #0x0
	strh	r0, [r1]
.L526:
	mov	r0, #0x0
	b	.L533
.L535:
	.align	2, 0
.L534:
	.word	sTempTileDataBufferIdx
	.word	sTempTileDataBuffer
.L525:
	mov	r0, #0x1
.L533:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe103:
	.size	 FreeTempTileDataBuffersIfPossible,.Lfe103-FreeTempTileDataBuffersIfPossible
	.align	2, 0
	.globl	DecompressAndCopyTileDataToVram
	.type	 DecompressAndCopyTileDataToVram,function
	.thumb_func
DecompressAndCopyTileDataToVram:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r1, [sp, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r9, r3
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r6, .L541
	ldrh	r0, [r6]
	cmp	r0, #0x1f
	bhi	.L537	@cond_branch
	add	r0, r4, #0
	add	r1, sp, #0x4
	bl	malloc_and_decompress
	add	r4, r0, #0
	cmp	r5, #0
	bne	.L538	@cond_branch
	ldr	r5, [sp, #0x4]
.L538:
	cmp	r4, #0
	beq	.L539	@cond_branch
	lsl	r2, r5, #0x10
	lsr	r2, r2, #0x10
	str	r7, [sp]
	mov	r0, r8
	add	r1, r4, #0
	mov	r3, r9
	bl	copy_decompressed_tile_data_to_vram
	ldr	r2, .L541+0x4
	ldrh	r0, [r6]
	add	r1, r0, #0x1
	strh	r1, [r6]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xe
	add	r0, r0, r2
	str	r4, [r0]
.L539:
	add	r0, r4, #0
	b	.L540
.L542:
	.align	2, 0
.L541:
	.word	sTempTileDataBufferIdx
	.word	sTempTileDataBuffer
.L537:
	mov	r0, #0x0
.L540:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe104:
	.size	 DecompressAndCopyTileDataToVram,.Lfe104-DecompressAndCopyTileDataToVram
	.align	2, 0
	.globl	DecompressAndLoadBgGfxUsingHeap
	.type	 DecompressAndLoadBgGfxUsingHeap,function
	.thumb_func
DecompressAndLoadBgGfxUsingHeap:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	add	r5, r2, #0
	ldr	r2, [sp, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r9, r3
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	add	r0, r1, #0
	add	r1, sp, #0x4
	bl	malloc_and_decompress
	add	r6, r0, #0
	cmp	r5, #0
	bne	.L544	@cond_branch
	ldr	r5, [sp, #0x4]
.L544:
	cmp	r6, #0
	beq	.L545	@cond_branch
	ldr	r0, .L546
	mov	r1, #0x0
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r2, r5, #0x10
	lsr	r2, r2, #0x10
	str	r7, [sp]
	mov	r0, r8
	add	r1, r6, #0
	mov	r3, r9
	bl	copy_decompressed_tile_data_to_vram
	ldr	r2, .L546+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r6, #0
	bl	SetWordTaskArg
.L545:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L547:
	.align	2, 0
.L546:
	.word	task_free_buf_after_copying_tile_data_to_vram
	.word	gTasks
.Lfe105:
	.size	 DecompressAndLoadBgGfxUsingHeap,.Lfe105-DecompressAndLoadBgGfxUsingHeap
	.align	2, 0
	.globl	task_free_buf_after_copying_tile_data_to_vram
	.type	 task_free_buf_after_copying_tile_data_to_vram,function
	.thumb_func
task_free_buf_after_copying_tile_data_to_vram:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L550
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	bl	CheckForSpaceForDma3Request
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L549	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetWordTaskArg
	bl	Free
	add	r0, r4, #0
	bl	DestroyTask
.L549:
	pop	{r4}
	pop	{r0}
	bx	r0
.L551:
	.align	2, 0
.L550:
	.word	gTasks
.Lfe106:
	.size	 task_free_buf_after_copying_tile_data_to_vram,.Lfe106-task_free_buf_after_copying_tile_data_to_vram
	.align	2, 0
	.globl	malloc_and_decompress
	.type	 malloc_and_decompress,function
	.thumb_func
malloc_and_decompress:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrb	r0, [r5, #0x1]
	strb	r0, [r1]
	ldrb	r0, [r5, #0x2]
	strb	r0, [r1, #0x1]
	ldrb	r0, [r5, #0x3]
	strb	r0, [r1, #0x2]
	mov	r0, #0x0
	strb	r0, [r1, #0x3]
	ldr	r0, [r1]
	bl	Alloc
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L553	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	LZ77UnCompWram
.L553:
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe107:
	.size	 malloc_and_decompress,.Lfe107-malloc_and_decompress
	.align	2, 0
	.globl	copy_decompressed_tile_data_to_vram
	.type	 copy_decompressed_tile_data_to_vram,function
	.thumb_func
copy_decompressed_tile_data_to_vram:
	push	{r4, lr}
	add	r4, r1, #0
	ldr	r1, [sp, #0x8]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0
	beq	.L556	@cond_branch
	cmp	r1, #0x1
	beq	.L557	@cond_branch
	ldr	r0, .L563
	b	.L560
.L564:
	.align	2, 0
.L563:
	.word	0xffff
.L556:
	add	r1, r4, #0
	bl	LoadBgTiles
	b	.L562
.L557:
	add	r1, r4, #0
	bl	LoadBgTilemap
.L562:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L560:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe108:
	.size	 copy_decompressed_tile_data_to_vram,.Lfe108-copy_decompressed_tile_data_to_vram
	.align	2, 0
	.globl	SetBgTilemapPalette
	.type	 SetBgTilemapPalette,function
	.thumb_func
SetBgTilemapPalette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r5, r2, #0
	ldr	r4, [sp, #0x28]
	ldr	r2, [sp, #0x2c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x4]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	bl	GetBgTilemapBuffer
	mov	r8, r0
	add	r0, r5, r4
	cmp	r5, r0
	bge	.L567	@cond_branch
	mov	r9, r0
.L569:
	ldr	r3, [sp]
	ldr	r1, [sp, #0x4]
	add	r0, r3, r1
	add	r7, r5, #0x1
	cmp	r3, r0
	bge	.L568	@cond_branch
	lsl	r6, r5, #0x5
	ldr	r1, .L576
	mov	ip, r1
	mov	r1, sl
	lsl	r5, r1, #0xc
	add	r4, r0, #0
.L573:
	add	r1, r6, r3
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	ldrh	r2, [r1]
	mov	r0, ip
	and	r0, r0, r2
	orr	r0, r0, r5
	strh	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r4
	blt	.L573	@cond_branch
.L568:
	lsl	r0, r7, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r9
	blt	.L569	@cond_branch
.L567:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L577:
	.align	2, 0
.L576:
	.word	0xfff
.Lfe109:
	.size	 SetBgTilemapPalette,.Lfe109-SetBgTilemapPalette
	.align	2, 0
	.globl	CopyToBufferFromBgTilemap
	.type	 CopyToBufferFromBgTilemap,function
	.thumb_func
CopyToBufferFromBgTilemap:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	sl, r1
	ldr	r1, [sp, #0x24]
	ldr	r4, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp]
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r8, r4
	bl	GetBgTilemapBuffer
	add	r7, r0, #0
	mov	r0, #0x0
	cmp	r0, r8
	bcs	.L580	@cond_branch
.L582:
	mov	r2, #0x0
	add	r6, r0, #0x1
	cmp	r2, r5
	bcs	.L581	@cond_branch
	mov	r4, r0
	mul	r4, r4, r5
	ldr	r1, [sp]
	add	r0, r0, r1
	lsl	r3, r0, #0x5
.L586:
	add	r1, r4, r2
	lsl	r1, r1, #0x1
	add	r1, r1, sl
	add	r0, r3, r2
	add	r0, r0, r9
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r5
	bcc	.L586	@cond_branch
.L581:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r8
	bcc	.L582	@cond_branch
.L580:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 CopyToBufferFromBgTilemap,.Lfe110-CopyToBufferFromBgTilemap
	.align	2, 0
	.globl	sub_8199D3C
	.type	 sub_8199D3C,function
	.thumb_func
sub_8199D3C:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	ldr	r0, [sp, #0x14]
	mov	r4, r2
	mul	r4, r4, r3
	cmp	r0, #0x1
	bne	.L590	@cond_branch
	add	r3, r6, #0
	mov	r2, #0x0
	cmp	r2, r4
	bge	.L596	@cond_branch
.L594:
	add	r1, r3, r2
	ldrb	r0, [r1]
	add	r0, r0, r5
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L594	@cond_branch
	b	.L596
.L590:
	cmp	r4, #0
	ble	.L596	@cond_branch
	mov	r0, #0xfc
	lsl	r0, r0, #0x8
	mov	ip, r0
	ldr	r0, .L602
	add	r7, r0, #0
	add	r3, r6, #0
	add	r2, r4, #0
.L600:
	ldrh	r0, [r3]
	mov	r1, ip
	and	r1, r1, r0
	add	r0, r0, r5
	and	r0, r0, r7
	orr	r1, r1, r0
	strh	r1, [r3]
	add	r3, r3, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L600	@cond_branch
.L596:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L603:
	.align	2, 0
.L602:
	.word	0x3ff
.Lfe111:
	.size	 sub_8199D3C,.Lfe111-sub_8199D3C
	.align	2, 0
	.globl	ResetBgPositions
	.type	 ResetBgPositions,function
	.thumb_func
ResetBgPositions:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	pop	{r0}
	bx	r0
.Lfe112:
	.size	 ResetBgPositions,.Lfe112-ResetBgPositions
	.align	2, 0
	.globl	sub_8199DF0
	.type	 sub_8199DF0,function
	.thumb_func
sub_8199DF0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r8, r2
	mov	r9, r3
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	mov	r1, #0x4
	bl	GetBgAttribute
	lsl	r0, r0, #0x10
	mov	r7, #0x40
	cmp	r0, #0
	bne	.L606	@cond_branch
	mov	r7, #0x20
.L606:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBgAttribute
	add	r4, r0, #0
	add	r0, r5, #0
	mov	r1, #0xa
	bl	GetBgAttribute
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, r8
	mul	r0, r0, r7
	add	r4, r4, r0
	lsl	r0, r6, #0x18
	lsl	r1, r6, #0x10
	orr	r0, r0, r1
	lsl	r1, r6, #0x8
	orr	r0, r0, r1
	orr	r0, r0, r6
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r4, r4, r1
	mov	r2, r9
	mul	r2, r2, r7
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r1, r4, #0
	mov	r3, #0x1
	bl	RequestDma3Fill
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe113:
	.size	 sub_8199DF0,.Lfe113-sub_8199DF0
	.align	2, 0
	.globl	AddTextPrinterParameterized3
	.type	 AddTextPrinterParameterized3,function
	.thumb_func
AddTextPrinterParameterized3:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	add	r4, r1, #0
	ldr	r6, [sp, #0x20]
	ldr	r5, [sp, #0x24]
	ldr	r1, [sp, #0x28]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r1, [sp]
	mov	r1, sp
	strb	r0, [r1, #0x4]
	mov	r0, sp
	strb	r4, [r0, #0x5]
	strb	r2, [r0, #0x6]
	strb	r3, [r0, #0x7]
	ldrb	r0, [r0, #0x6]
	strb	r0, [r1, #0x8]
	mov	r0, sp
	ldrb	r0, [r0, #0x7]
	strb	r0, [r1, #0x9]
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetFontAttribute
	mov	r1, sp
	strb	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x3
	bl	GetFontAttribute
	mov	r1, sp
	strb	r0, [r1, #0xb]
	mov	r3, sp
	ldrb	r2, [r3, #0xc]
	mov	r1, #0x10
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	mov	r2, sp
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x4
	mov	r4, #0xf
	strb	r0, [r2, #0xc]
	ldrb	r2, [r6]
	add	r0, r4, #0
	and	r0, r0, r2
	ldrb	r2, [r3, #0xd]
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xd]
	mov	r2, sp
	ldrb	r0, [r6, #0x2]
	lsl	r0, r0, #0x4
	and	r1, r1, r4
	orr	r1, r1, r0
	strb	r1, [r2, #0xd]
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x0
	bl	AddTextPrinter
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 AddTextPrinterParameterized3,.Lfe114-AddTextPrinterParameterized3
	.align	2, 0
	.globl	AddTextPrinterParameterized4
	.type	 AddTextPrinterParameterized4,function
	.thumb_func
AddTextPrinterParameterized4:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x10
	add	r5, r1, #0
	ldr	r1, [sp, #0x28]
	mov	r8, r1
	ldr	r1, [sp, #0x2c]
	mov	r9, r1
	ldr	r6, [sp, #0x30]
	ldr	r1, [sp, #0x34]
	ldr	r4, [sp, #0x38]
	str	r4, [sp]
	mov	r4, sp
	strb	r0, [r4, #0x4]
	mov	r0, sp
	strb	r5, [r0, #0x5]
	strb	r2, [r0, #0x6]
	strb	r3, [r0, #0x7]
	mov	r2, sp
	ldrb	r0, [r0, #0x6]
	strb	r0, [r2, #0x8]
	mov	r0, sp
	ldrb	r0, [r0, #0x7]
	strb	r0, [r2, #0x9]
	mov	r0, sp
	mov	r2, r8
	strb	r2, [r0, #0xa]
	mov	r2, r9
	strb	r2, [r0, #0xb]
	ldrb	r3, [r4, #0xc]
	mov	r2, #0x10
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r3
	strb	r0, [r4, #0xc]
	mov	r3, sp
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x4
	mov	r5, #0xf
	strb	r0, [r3, #0xc]
	ldrb	r3, [r6]
	add	r0, r5, #0
	and	r0, r0, r3
	ldrb	r3, [r4, #0xd]
	and	r2, r2, r3
	orr	r2, r2, r0
	strb	r2, [r4, #0xd]
	mov	r3, sp
	ldrb	r0, [r6, #0x2]
	lsl	r0, r0, #0x4
	and	r2, r2, r5
	orr	r2, r2, r0
	strb	r2, [r3, #0xd]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, sp
	mov	r2, #0x0
	bl	AddTextPrinter
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe115:
	.size	 AddTextPrinterParameterized4,.Lfe115-AddTextPrinterParameterized4
	.align	2, 0
	.globl	AddTextPrinterParameterized5
	.type	 AddTextPrinterParameterized5,function
	.thumb_func
AddTextPrinterParameterized5:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	add	r6, r1, #0
	ldr	r4, [sp, #0x2c]
	ldr	r1, [sp, #0x30]
	mov	r8, r1
	ldr	r7, [sp, #0x34]
	ldr	r5, [sp, #0x38]
	ldr	r1, [sp, #0x3c]
	mov	r9, r1
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, r8
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	str	r2, [sp]
	mov	r1, sp
	strb	r0, [r1, #0x4]
	mov	r0, sp
	strb	r6, [r0, #0x5]
	strb	r3, [r0, #0x6]
	strb	r4, [r0, #0x7]
	strb	r3, [r0, #0x8]
	strb	r4, [r0, #0x9]
	strb	r5, [r0, #0xa]
	mov	r1, r9
	strb	r1, [r0, #0xb]
	mov	r2, sp
	ldrb	r1, [r2, #0xc]
	mov	r5, #0x10
	neg	r5, r5
	add	r0, r5, #0
	and	r0, r0, r1
	strb	r0, [r2, #0xc]
	add	r0, r6, #0
	mov	r1, #0x5
	bl	GetFontAttribute
	mov	r3, sp
	lsl	r0, r0, #0x4
	ldrb	r2, [r3, #0xc]
	mov	r4, #0xf
	add	r1, r4, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xc]
	add	r0, r6, #0
	mov	r1, #0x6
	bl	GetFontAttribute
	mov	r2, sp
	add	r1, r4, #0
	and	r1, r1, r0
	ldrb	r0, [r2, #0xd]
	and	r5, r5, r0
	orr	r5, r5, r1
	strb	r5, [r2, #0xd]
	add	r0, r6, #0
	mov	r1, #0x7
	bl	GetFontAttribute
	mov	r2, sp
	lsl	r0, r0, #0x4
	ldrb	r1, [r2, #0xd]
	and	r4, r4, r1
	orr	r4, r4, r0
	strb	r4, [r2, #0xd]
	mov	r0, sp
	mov	r1, r8
	add	r2, r7, #0
	bl	AddTextPrinter
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe116:
	.size	 AddTextPrinterParameterized5,.Lfe116-AddTextPrinterParameterized5
	.align	2, 0
	.globl	PrintPlayerNameOnWindow
	.type	 PrintPlayerNameOnWindow,function
	.thumb_func
PrintPlayerNameOnWindow:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r4, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r5, r3, #0x10
	mov	r2, #0x0
	ldr	r0, .L616
	ldr	r3, [r0]
	ldrb	r0, [r3]
	ldr	r6, .L616+0x4
	cmp	r0, #0xff
	beq	.L613	@cond_branch
.L614:
	add	r2, r2, #0x1
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L614	@cond_branch
.L613:
	add	r0, r6, #0
	bl	StringExpandPlaceholders
	lsl	r3, r4, #0x18
	lsr	r3, r3, #0x18
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, r7, #0
	mov	r1, #0x1
	add	r2, r6, #0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L617:
	.align	2, 0
.L616:
	.word	gSaveBlock2Ptr
	.word	gStringVar4
.Lfe117:
	.size	 PrintPlayerNameOnWindow,.Lfe117-PrintPlayerNameOnWindow
	.align	2, 0
	.globl	sub_819A080
	.type	 sub_819A080,function
	.thumb_func
sub_819A080:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldr	r0, [sp, #0x48]
	ldr	r4, [sp, #0x4c]
	ldr	r1, [sp, #0x50]
	ldr	r5, [sp, #0x54]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r2, [sp, #0x8]
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0xc]
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r2, [sp, #0x4]
	ldrh	r0, [r2, #0x4]
	ldr	r2, [sp, #0xc]
	sub	r0, r0, r2
	ldr	r2, [sp, #0x8]
	add	r2, r1, r2
	str	r2, [sp, #0x10]
	cmp	r0, r1
	bge	.L619	@cond_branch
	ldr	r1, [sp, #0x8]
	add	r0, r0, r1
	str	r0, [sp, #0x10]
.L619:
	ldr	r2, [sp, #0x4]
	ldrh	r1, [r2, #0x6]
	sub	r0, r1, r4
	cmp	r0, r5
	bge	.L621	@cond_branch
	add	r0, r3, r1
	sub	r0, r0, r4
	str	r0, [sp, #0x14]
	b	.L622
.L621:
	add	r5, r3, r5
	str	r5, [sp, #0x14]
.L622:
	ldr	r0, [sp]
	ldrh	r1, [r0, #0x4]
	mov	r2, #0x7
	add	r0, r1, #0
	and	r0, r0, r2
	add	r1, r1, r0
	asr	r1, r1, #0x3
	str	r1, [sp, #0x18]
	ldr	r0, [sp, #0x4]
	ldrh	r1, [r0, #0x4]
	add	r0, r1, #0
	and	r0, r0, r2
	add	r1, r1, r0
	asr	r1, r1, #0x3
	str	r1, [sp, #0x1c]
	mov	ip, r3
	mov	r8, r4
	ldr	r1, [sp, #0x14]
	cmp	ip, r1
	blt	.LCB7973
	b	.L624	@long jump
.LCB7973:
.L626:
	ldr	r5, [sp, #0x8]
	ldr	r6, [sp, #0xc]
	mov	r2, ip
	add	r2, r2, #0x1
	str	r2, [sp, #0x20]
	mov	r0, r8
	add	r0, r0, #0x1
	str	r0, [sp, #0x24]
	ldr	r1, [sp, #0x10]
	cmp	r5, r1
	blt	.LCB7987
	b	.L625	@long jump
.LCB7987:
	mov	r7, #0x1
	mov	r2, #0xf0
	mov	sl, r2
	mov	r0, #0xf
	mov	r9, r0
.L630:
	asr	r0, r5, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	ldr	r2, [sp]
	ldr	r1, [r2]
	add	r1, r1, r0
	asr	r0, r5, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	mov	r2, ip
	asr	r0, r2, #0x3
	ldr	r2, [sp, #0x18]
	mul	r0, r0, r2
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	mov	r2, ip
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1b
	add	r3, r1, r0
	asr	r0, r6, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	ldr	r2, [sp, #0x4]
	ldr	r1, [r2]
	add	r1, r1, r0
	asr	r0, r6, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	mov	r2, r8
	asr	r0, r2, #0x3
	ldr	r2, [sp, #0x1c]
	mul	r0, r0, r2
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	mov	r2, r8
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1b
	add	r4, r1, r0
	add	r0, r4, #0
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L631	@cond_branch
	sub	r4, r4, #0x1
	add	r0, r6, #0
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L632	@cond_branch
	ldrh	r0, [r4]
	ldr	r2, .L649
	and	r2, r2, r0
	add	r0, r5, #0
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L633	@cond_branch
	ldrb	r1, [r3]
	mov	r0, sl
	and	r0, r0, r1
	lsl	r0, r0, #0x8
	b	.L647
.L650:
	.align	2, 0
.L649:
	.word	0xfff
.L633:
	ldrb	r1, [r3]
	mov	r0, r9
	and	r0, r0, r1
	lsl	r0, r0, #0xc
	b	.L647
.L632:
	ldrh	r0, [r4]
	ldr	r2, .L651
	and	r2, r2, r0
	add	r0, r5, #0
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L636	@cond_branch
	ldrb	r1, [r3]
	mov	r0, sl
	and	r0, r0, r1
	lsl	r0, r0, #0x4
	b	.L647
.L652:
	.align	2, 0
.L651:
	.word	0xf0ff
.L636:
	ldrb	r1, [r3]
	mov	r0, r9
	and	r0, r0, r1
	lsl	r0, r0, #0x8
	b	.L647
.L631:
	add	r0, r6, #0
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L639	@cond_branch
	ldrh	r0, [r4]
	ldr	r2, .L653
	and	r2, r2, r0
	add	r0, r5, #0
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L640	@cond_branch
	ldrb	r1, [r3]
	mov	r0, sl
	b	.L648
.L654:
	.align	2, 0
.L653:
	.word	0xff0f
.L640:
	ldrb	r1, [r3]
	mov	r0, r9
	and	r0, r0, r1
	lsl	r0, r0, #0x4
	b	.L647
.L639:
	ldrh	r0, [r4]
	ldr	r2, .L655
	and	r2, r2, r0
	add	r0, r5, #0
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L643	@cond_branch
	ldrb	r1, [r3]
	mov	r0, sl
	and	r0, r0, r1
	lsr	r0, r0, #0x4
	b	.L647
.L656:
	.align	2, 0
.L655:
	.word	0xfff0
.L643:
	ldrb	r1, [r3]
	mov	r0, r9
.L648:
	and	r0, r0, r1
.L647:
	orr	r2, r2, r0
	strh	r2, [r4]
	.code	16
	add	r5, r5, #0x1
	add	r6, r6, #0x1
	ldr	r0, [sp, #0x10]
	cmp	r5, r0
	bge	.LCB8198
	b	.L630	@long jump
.LCB8198:
.L625:
	ldr	r1, [sp, #0x20]
	mov	ip, r1
	ldr	r2, [sp, #0x24]
	mov	r8, r2
	ldr	r0, [sp, #0x14]
	cmp	ip, r0
	bge	.LCB8209
	b	.L626	@long jump
.LCB8209:
.L624:
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe118:
	.size	 sub_819A080,.Lfe118-sub_819A080
	.align	2, 0
	.globl	sub_819A25C
	.type	 sub_819A25C,function
	.thumb_func
sub_819A25C:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	add	r1, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	GetValidMonIconPalettePtr
	add	r1, r4, #0
	mov	r2, #0x20
	bl	LoadPalette
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe119:
	.size	 sub_819A25C,.Lfe119-sub_819A25C
	.align	2, 0
	.globl	sub_819A27C
	.type	 sub_819A27C,function
	.thumb_func
sub_819A27C:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	add	r0, r1, #0
	add	r1, r2, #0
	add	r4, r3, #0
	ldr	r5, [sp, #0x18]
	ldr	r3, [sp, #0x1c]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r2, #0x1
	bl	GetMonIconPtr
	add	r1, r0, #0
	mov	r0, #0x20
	str	r0, [sp]
	str	r0, [sp, #0x4]
	add	r0, r6, #0
	add	r2, r4, #0
	add	r3, r5, #0
	bl	BlitBitmapToWindow
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe120:
	.size	 sub_819A27C,.Lfe120-sub_819A27C
	.align	2, 0
	.globl	ListMenuLoadStdPalAt
	.type	 ListMenuLoadStdPalAt,function
	.thumb_func
ListMenuLoadStdPalAt:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	beq	.L663	@cond_branch
	cmp	r1, #0x1
	ble	.L662	@cond_branch
	cmp	r1, #0x2
	beq	.L664	@cond_branch
.L662:
	ldr	r0, .L667
	b	.L660
.L668:
	.align	2, 0
.L667:
	.word	gFireRedMenuElements1_Pal
.L663:
	ldr	r0, .L669
	b	.L660
.L670:
	.align	2, 0
.L669:
	.word	gFireRedMenuElements2_Pal
.L664:
	ldr	r0, .L671
.L660:
	add	r1, r2, #0
	mov	r2, #0x20
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L672:
	.align	2, 0
.L671:
	.word	gFireRedMenuElements3_Pal
.Lfe121:
	.size	 ListMenuLoadStdPalAt,.Lfe121-ListMenuLoadStdPalAt
	.align	2, 0
	.globl	BlitMenuInfoIcon
	.type	 BlitMenuInfoIcon,function
	.thumb_func
BlitMenuInfoIcon:
	push	{r4, r5, lr}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r4, .L674
	lsr	r1, r1, #0x16
	add	r1, r1, r4
	ldrh	r5, [r1, #0x2]
	lsl	r5, r5, #0x5
	ldr	r4, .L674+0x4
	add	r5, r5, r4
	mov	r4, #0x80
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r2, [sp, #0x8]
	str	r3, [sp, #0xc]
	ldrb	r2, [r1]
	str	r2, [sp, #0x10]
	ldrb	r1, [r1, #0x1]
	str	r1, [sp, #0x14]
	add	r1, r5, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BlitBitmapRectToWindow
	add	sp, sp, #0x18
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L675:
	.align	2, 0
.L674:
	.word	sMenuInfoIcons
	.word	gFireRedMenuElements_Gfx
.Lfe122:
	.size	 BlitMenuInfoIcon,.Lfe122-BlitMenuInfoIcon
	.align	2, 0
	.globl	BufferSaveMenuText
	.type	 BufferSaveMenuText,function
	.thumb_func
BufferSaveMenuText:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r5, r1, #0
	mov	r1, #0xfc
	strb	r1, [r5]
	add	r5, r5, #0x1
	mov	r0, #0x1
	strb	r0, [r5]
	add	r5, r5, #0x1
	strb	r2, [r5]
	add	r5, r5, #0x1
	strb	r1, [r5]
	add	r5, r5, #0x1
	mov	r0, #0x3
	strb	r0, [r5]
	add	r5, r5, #0x1
	add	r2, r2, #0x1
	strb	r2, [r5]
	add	r5, r5, #0x1
	cmp	r3, #0x4
	bhi	.L677	@cond_branch
	lsl	r0, r3, #0x2
	ldr	r1, .L694
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L695:
	.align	2, 0
.L694:
	.word	.L691
	.align	2, 0
	.align	2, 0
.L691:
	.word	.L678
	.word	.L679
	.word	.L682
	.word	.L683
	.word	.L684
.L678:
	ldr	r0, .L696
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	StringCopy
	b	.L677
.L697:
	.align	2, 0
.L696:
	.word	gSaveBlock2Ptr
.L679:
	bl	IsNationalPokedexEnabled
	cmp	r0, #0
	beq	.L680	@cond_branch
	mov	r0, #0x1
	bl	GetNationalPokedexCount
	b	.L693
.L680:
	mov	r0, #0x1
	bl	GetHoennPokedexCount
.L693:
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r5, r0, #0
	mov	r0, #0xff
	strb	r0, [r5]
	b	.L677
.L682:
	ldr	r4, .L698
	ldr	r0, [r4]
	ldrh	r1, [r0, #0xe]
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r5, r0, #0
	mov	r0, #0xf0
	strb	r0, [r5]
	add	r5, r5, #0x1
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x10]
	add	r0, r5, #0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	b	.L677
.L699:
	.align	2, 0
.L698:
	.word	gSaveBlock2Ptr
.L683:
	ldr	r0, .L700
	ldrb	r1, [r0, #0x14]
	add	r0, r5, #0
	bl	GetMapNameGeneric
	b	.L677
.L701:
	.align	2, 0
.L700:
	.word	gMapHeader
.L684:
	ldr	r4, .L702
	mov	r6, #0x0
	add	r7, r5, #0x1
.L688:
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L687	@cond_branch
	add	r6, r6, #0x1
.L687:
	add	r4, r4, #0x1
	ldr	r0, .L702+0x4
	cmp	r4, r0
	ble	.L688	@cond_branch
	add	r0, r6, #0
	sub	r0, r0, #0x5f
	strb	r0, [r5]
	mov	r0, #0xff
	strb	r0, [r7]
.L677:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L703:
	.align	2, 0
.L702:
	.word	0x867
	.word	0x86e
.Lfe123:
	.size	 BufferSaveMenuText,.Lfe123-BufferSaveMenuText
.text
	.align	2, 0

