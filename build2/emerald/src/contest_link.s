@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	LinkContest_SendBlock
	.type	 LinkContest_SendBlock,function
	.thumb_func
LinkContest_SendBlock:
	push	{r4, r5, lr}
	add	r2, r0, #0
	lsl	r4, r1, #0x10
	lsr	r4, r4, #0x10
	ldr	r5, .L6
	add	r0, r5, #0
	add	r1, r2, #0
	add	r2, r4, #0
	bl	memcpy
	bl	bitmask_all_link_players_but_self
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r5, #0
	add	r2, r4, #0
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3	@cond_branch
	mov	r0, #0x0
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	gDecompressionBuffer
.L3:
	mov	r0, #0x1
.L5:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 LinkContest_SendBlock,.Lfe1-LinkContest_SendBlock
	.align	2, 0
	.globl	LinkContest_GetBlockReceived
	.type	 LinkContest_GetBlockReceived,function
	.thumb_func
LinkContest_GetBlockReceived:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x80
	lsl	r4, r4, #0x11
	lsl	r4, r4, r5
	lsr	r4, r4, #0x18
	bl	GetBlockReceivedStatus
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L9	@cond_branch
	add	r0, r5, #0
	bl	ResetBlockReceivedFlag
	mov	r0, #0x1
	b	.L11
.L9:
	mov	r0, #0x0
.L11:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 LinkContest_GetBlockReceived,.Lfe2-LinkContest_GetBlockReceived
	.align	2, 0
	.globl	LinkContest_GetBlockReceivedFromAllPlayers
	.type	 LinkContest_GetBlockReceivedFromAllPlayers,function
	.thumb_func
LinkContest_GetBlockReceivedFromAllPlayers:
	push	{r4, lr}
	bl	GetBlockReceivedStatus
	add	r4, r0, #0
	bl	GetLinkPlayerCountAsBitFlags
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L13	@cond_branch
	mov	r0, #0x0
	b	.L15
.L13:
	bl	ResetBlockReceivedFlags
	mov	r0, #0x1
.L15:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 LinkContest_GetBlockReceivedFromAllPlayers,.Lfe3-LinkContest_GetBlockReceivedFromAllPlayers
	.align	2, 0
	.globl	Task_LinkContest_Init
	.type	 Task_LinkContest_Init,function
	.thumb_func
Task_LinkContest_Init:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	ldr	r5, .L22
	ldr	r6, .L22+0x4
	ldr	r4, .L22+0x8
	mov	r3, #0xff
.L20:
	lsl	r0, r1, #0x8
	add	r0, r0, r4
	strh	r3, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bls	.L20	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	str	r6, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gTasks
	.word	Task_LinkContest_StartInitFlags
	.word	gBlockRecvBuffer
.Lfe4:
	.size	 Task_LinkContest_Init,.Lfe4-Task_LinkContest_Init
	.align	2, 0
	.type	 Task_LinkContest_StartInitFlags,function
	.thumb_func
Task_LinkContest_StartInitFlags:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L25
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L25+0x4
	str	r0, [r1]
	bx	lr
.L26:
	.align	2, 0
.L25:
	.word	gTasks
	.word	Task_LinkContest_InitFlags
.Lfe5:
	.size	 Task_LinkContest_StartInitFlags,.Lfe5-Task_LinkContest_StartInitFlags
	.align	2, 0
	.type	 Task_LinkContest_InitFlags,function
	.thumb_func
Task_LinkContest_InitFlags:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L37
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L27	@cond_branch
	bl	GetMultiplayerId
	ldr	r1, .L37+0x4
	strb	r0, [r1]
	bl	GetLinkPlayerCount
	ldr	r4, .L37+0x8
	strb	r0, [r4]
	ldr	r1, .L37+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L37+0x10
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L29	@cond_branch
	mov	r0, #0x3
	strb	r0, [r1]
.L29:
	mov	r3, #0x0
	ldrb	r2, [r4]
	cmp	r3, r2
	bge	.L36	@cond_branch
	ldr	r1, .L37+0x14
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	add	r6, r4, #0
	cmp	r0, #0x1
	bls	.L31	@cond_branch
	add	r4, r2, #0
	add	r2, r1, #0
	mov	r5, #0xff
.L32:
	add	r2, r2, #0x1c
	add	r3, r3, #0x1
	cmp	r3, r4
	bge	.L36	@cond_branch
	ldrh	r1, [r2]
	add	r0, r5, #0
	and	r0, r0, r1
	sub	r0, r0, #0x1
	cmp	r0, #0x1
	bhi	.L32	@cond_branch
.L31:
	ldrb	r6, [r6]
	cmp	r3, r6
	bge	.L36	@cond_branch
	ldr	r0, .L37+0xc
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L36:
	add	r0, r7, #0
	bl	SwitchTaskToFollowupFunc
.L27:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	gReceivedRemoteLinkPlayers
	.word	gContestPlayerMonIndex
	.word	gNumLinkContestPlayers
	.word	gLinkContestFlags
	.word	gWirelessCommType
	.word	gLinkPlayers
.Lfe6:
	.size	 Task_LinkContest_InitFlags,.Lfe6-Task_LinkContest_InitFlags
	.align	2, 0
	.globl	LinkContest_TryLinkStandby
	.type	 LinkContest_TryLinkStandby,function
	.thumb_func
LinkContest_TryLinkStandby:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L52
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L51	@cond_branch
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L42	@cond_branch
	cmp	r0, #0x1
	beq	.L44	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L46	@cond_branch
.L51:
	mov	r0, #0x1
	b	.L49
.L53:
	.align	2, 0
.L52:
	.word	gLinkContestFlags
.L42:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L46	@cond_branch
	bl	SetLinkStandbyCallback
.L44:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
.L46:
	mov	r0, #0x0
.L49:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 LinkContest_TryLinkStandby,.Lfe7-LinkContest_TryLinkStandby
	.align	2, 0
	.globl	Task_LinkContest_CommunicateMonsRS
	.type	 Task_LinkContest_CommunicateMonsRS,function
	.thumb_func
Task_LinkContest_CommunicateMonsRS:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r6, r7, #0x2
	add	r0, r6, r7
	lsl	r4, r0, #0x3
	ldr	r5, .L74
	add	r0, r4, r5
	add	r0, r0, #0x18
	bl	LinkContest_TryLinkStandby
	cmp	r0, #0
	bne	.LCB370
	b	.L54	@long jump
.LCB370:
	add	r0, r5, #0
	sub	r0, r0, #0x8
	add	r4, r4, r0
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L61	@cond_branch
	cmp	r0, #0x1
	bgt	.L72	@cond_branch
	cmp	r0, #0
	beq	.L57	@cond_branch
	b	.L70
.L75:
	.align	2, 0
.L74:
	.word	gTasks+0x8
.L72:
	cmp	r0, #0xa
	beq	.L68	@cond_branch
	b	.L70
.L57:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L58	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L54	@cond_branch
	ldr	r0, .L76
	ldr	r1, .L76+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x6
	ldr	r2, .L76+0x8
	add	r1, r1, r2
	mov	r2, #0x40
	bl	memcpy
	mov	r0, #0xa
	strh	r0, [r4, #0x8]
	b	.L54
.L77:
	.align	2, 0
.L76:
	.word	gBlockSendBuffer
	.word	gContestPlayerMonIndex
	.word	gContestMons
.L58:
	ldr	r0, .L78
	ldr	r1, .L78+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x6
	ldr	r2, .L78+0x8
	add	r1, r1, r2
	mov	r2, #0x40
	bl	memcpy
	b	.L73
.L79:
	.align	2, 0
.L78:
	.word	gBlockSendBuffer
	.word	gContestPlayerMonIndex
	.word	gContestMons
.L61:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L54	@cond_branch
	mov	r5, #0x0
	ldr	r0, .L80
	mov	r8, r6
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L64	@cond_branch
	ldr	r6, .L80+0x4
.L66:
	lsl	r4, r5, #0x6
	ldr	r0, .L80+0x8
	add	r4, r4, r0
	lsl	r1, r5, #0x8
	ldr	r0, .L80+0xc
	add	r1, r1, r0
	add	r0, r4, #0
	mov	r2, #0x40
	bl	memcpy
	ldrh	r1, [r6, #0x1a]
	add	r0, r4, #0
	bl	StripPlayerAndMonNamesForLinkContest
	add	r6, r6, #0x1c
	add	r5, r5, #0x1
	ldr	r0, .L80
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L66	@cond_branch
.L64:
	ldr	r0, .L80+0x10
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L54
.L81:
	.align	2, 0
.L80:
	.word	gNumLinkContestPlayers
	.word	gLinkPlayers
	.word	gContestMons
	.word	gBlockRecvBuffer
	.word	gTasks
.L68:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	mov	r1, #0x96
	lsl	r1, r1, #0x11
	cmp	r0, r1
	ble	.L54	@cond_branch
	mov	r0, #0x2
	bl	SendBlockRequest
.L73:
	mov	r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L54
.L70:
	ldr	r0, .L82
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	strh	r0, [r1, #0x1e]
	strh	r0, [r1, #0x20]
	add	r0, r7, #0
	bl	SwitchTaskToFollowupFunc
.L54:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gTasks
.Lfe8:
	.size	 Task_LinkContest_CommunicateMonsRS,.Lfe8-Task_LinkContest_CommunicateMonsRS
	.align	2, 0
	.globl	Task_LinkContest_CommunicateRngRS
	.type	 Task_LinkContest_CommunicateRngRS,function
	.thumb_func
Task_LinkContest_CommunicateRngRS:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L97
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L86	@cond_branch
	cmp	r0, #0x1
	beq	.L90	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	add	r0, r2, #0
	bl	SwitchTaskToFollowupFunc
	b	.L85
.L98:
	.align	2, 0
.L97:
	.word	gTasks
.L86:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L96	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L85	@cond_branch
	ldr	r0, .L99
	mov	r1, #0x4
	bl	LinkContest_SendBlock
	cmp	r0, #0x1
	bne	.L85	@cond_branch
	b	.L96
.L100:
	.align	2, 0
.L99:
	.word	gRngValue
.L90:
	mov	r0, #0x0
	bl	LinkContest_GetBlockReceived
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L85	@cond_branch
	ldr	r0, .L101
	ldr	r4, .L101+0x4
	add	r1, r4, #0
	mov	r2, #0x4
	bl	memcpy
	ldr	r0, .L101+0x8
	add	r1, r4, #0
	mov	r2, #0x4
	bl	memcpy
.L96:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
.L85:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L102:
	.align	2, 0
.L101:
	.word	gRngValue
	.word	gBlockRecvBuffer
	.word	gContestRngValue
.Lfe9:
	.size	 Task_LinkContest_CommunicateRngRS,.Lfe9-Task_LinkContest_CommunicateRngRS
	.align	2, 0
	.globl	Task_LinkContest_CommunicateCategoryRS
	.type	 Task_LinkContest_CommunicateCategoryRS,function
	.thumb_func
Task_LinkContest_CommunicateCategoryRS:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	mov	r8, r0
	add	r0, r0, r6
	lsl	r5, r0, #0x3
	ldr	r7, .L122
	add	r0, r5, r7
	add	r0, r0, #0x18
	bl	LinkContest_TryLinkStandby
	cmp	r0, #0
	beq	.L103	@cond_branch
	mov	r1, #0x8
	neg	r1, r1
	add	r1, r1, r7
	mov	r9, r1
	add	r4, r5, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L110	@cond_branch
	cmp	r0, #0x1
	bgt	.L121	@cond_branch
	cmp	r0, #0
	beq	.L106	@cond_branch
	b	.L119
.L123:
	.align	2, 0
.L122:
	.word	gTasks+0x8
.L121:
	cmp	r0, #0xa
	beq	.L117	@cond_branch
	b	.L119
.L106:
	ldr	r1, .L124
	ldrh	r0, [r4, #0x1a]
	strb	r0, [r1]
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L107	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L103	@cond_branch
	mov	r0, #0xa
	strh	r0, [r4, #0x8]
	b	.L103
.L125:
	.align	2, 0
.L124:
	.word	gBlockSendBuffer
.L107:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L103
.L110:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L103	@cond_branch
	mov	r3, #0x0
	ldr	r1, .L126
	ldrb	r0, [r1]
	cmp	r3, r0
	bge	.L113	@cond_branch
	ldr	r4, .L126+0x4
	add	r0, r7, #0x2
	add	r2, r5, r0
	mov	r5, #0x80
	lsl	r5, r5, #0x1
.L115:
	ldrh	r0, [r4]
	strh	r0, [r2]
	add	r4, r4, r5
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	ldrb	r0, [r1]
	cmp	r3, r0
	blt	.L115	@cond_branch
.L113:
	mov	r0, r8
	add	r1, r0, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r9
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L103
.L127:
	.align	2, 0
.L126:
	.word	gNumLinkContestPlayers
	.word	gBlockRecvBuffer
.L117:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	ble	.L103	@cond_branch
	mov	r0, #0x2
	bl	SendBlockRequest
	mov	r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L103
.L119:
	ldr	r0, .L128
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	strh	r0, [r1, #0x1e]
	strh	r0, [r1, #0x20]
	add	r0, r6, #0
	bl	SwitchTaskToFollowupFunc
.L103:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L129:
	.align	2, 0
.L128:
	.word	gTasks
.Lfe10:
	.size	 Task_LinkContest_CommunicateCategoryRS,.Lfe10-Task_LinkContest_CommunicateCategoryRS
	.align	2, 0
	.globl	Task_LinkContest_CommunicateMonIdxs
	.type	 Task_LinkContest_CommunicateMonIdxs,function
	.thumb_func
Task_LinkContest_CommunicateMonIdxs:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L142
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L132	@cond_branch
	cmp	r0, #0x1
	beq	.L135	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	add	r0, r2, #0
	bl	SwitchTaskToFollowupFunc
	b	.L131
.L143:
	.align	2, 0
.L142:
	.word	gTasks
.L132:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L131	@cond_branch
	ldr	r0, .L144
	mov	r1, #0x1
	bl	LinkContest_SendBlock
	cmp	r0, #0x1
	bne	.L131	@cond_branch
	b	.L141
.L145:
	.align	2, 0
.L144:
	.word	gContestPlayerMonIndex
.L135:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L131	@cond_branch
.L141:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L131:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 Task_LinkContest_CommunicateMonIdxs,.Lfe11-Task_LinkContest_CommunicateMonIdxs
	.align	2, 0
	.globl	Task_LinkContest_CommunicateMoveSelections
	.type	 Task_LinkContest_CommunicateMoveSelections,function
	.thumb_func
Task_LinkContest_CommunicateMoveSelections:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L162
	mov	r8, r0
	lsl	r7, r5, #0x2
	add	r0, r7, r5
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L148	@cond_branch
	cmp	r0, #0x1
	beq	.L151	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	add	r0, r5, #0
	bl	SwitchTaskToFollowupFunc
	b	.L147
.L163:
	.align	2, 0
.L162:
	.word	gTasks
.L148:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L147	@cond_branch
	ldr	r0, .L164
	ldr	r2, [r0]
	ldr	r0, .L164+0x4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, [r2, #0x4]
	add	r0, r0, r1
	add	r0, r0, #0x6
	mov	r1, #0x2
	bl	LinkContest_SendBlock
	cmp	r0, #0x1
	bne	.L147	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L147
.L165:
	.align	2, 0
.L164:
	.word	gContestResources
	.word	gContestPlayerMonIndex
.L151:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L147	@cond_branch
	mov	r2, #0x0
	ldr	r6, .L166
	mov	r9, r8
	mov	ip, r7
	ldrb	r0, [r6]
	cmp	r2, r0
	bge	.L154	@cond_branch
	ldr	r1, .L166+0x4
	mov	r8, r1
	ldr	r4, .L166+0x8
	mov	r3, #0x0
	mov	r7, #0x80
	lsl	r7, r7, #0x1
.L156:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r0, r3, r0
	ldrh	r1, [r4]
	strh	r1, [r0, #0x6]
	add	r4, r4, r7
	add	r3, r3, #0x1c
	add	r2, r2, #0x1
	ldrb	r0, [r6]
	cmp	r2, r0
	blt	.L156	@cond_branch
.L154:
	mov	r0, ip
	add	r1, r0, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r9
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
.L147:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L167:
	.align	2, 0
.L166:
	.word	gNumLinkContestPlayers
	.word	gContestResources
	.word	gBlockRecvBuffer
.Lfe12:
	.size	 Task_LinkContest_CommunicateMoveSelections,.Lfe12-Task_LinkContest_CommunicateMoveSelections
	.align	2, 0
	.globl	Task_LinkContest_CommunicateFinalStandings
	.type	 Task_LinkContest_CommunicateFinalStandings,function
	.thumb_func
Task_LinkContest_CommunicateFinalStandings:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L199
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r3, #0x8
	ldrsh	r0, [r2, r3]
	add	r3, r1, #0
	cmp	r0, #0xb
	bls	.LCB1082
	b	.L195	@long jump
.LCB1082:
	lsl	r0, r0, #0x2
	ldr	r1, .L199+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L200:
	.align	2, 0
.L199:
	.word	gTasks
	.word	.L196
	.align	2, 0
	.align	2, 0
.L196:
	.word	.L170
	.word	.L173
	.word	.L178
	.word	.L180
	.word	.L183
	.word	.L178
	.word	.L185
	.word	.L188
	.word	.L178
	.word	.L190
	.word	.L193
	.word	.L178
.L170:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1107
	b	.L169	@long jump
.LCB1107:
	ldr	r0, .L201
	mov	r1, #0x8
	b	.L197
.L202:
	.align	2, 0
.L201:
	.word	gContestMonTotalPoints
.L173:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1127
	b	.L169	@long jump
.LCB1127:
	ldr	r0, .L203
	ldr	r1, .L203+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	ldr	r2, .L203+0x8
	add	r1, r1, r2
	mov	r2, #0x8
	b	.L198
.L204:
	.align	2, 0
.L203:
	.word	gContestMonTotalPoints
	.word	gContestLinkLeaderIndex
	.word	gBlockRecvBuffer
.L178:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r3
	ldrh	r0, [r2, #0xa]
	add	r1, r0, #0x1
	strh	r1, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bgt	.LCB1160
	b	.L169	@long jump
.LCB1160:
	mov	r0, #0x0
	strh	r0, [r2, #0xa]
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	b	.L169
.L180:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L169	@cond_branch
	ldr	r0, .L205
	mov	r1, #0x8
	b	.L197
.L206:
	.align	2, 0
.L205:
	.word	gContestMonAppealPointTotals
.L183:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L169	@cond_branch
	ldr	r0, .L207
	ldr	r1, .L207+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	ldr	r2, .L207+0x8
	add	r1, r1, r2
	mov	r2, #0x8
	b	.L198
.L208:
	.align	2, 0
.L207:
	.word	gContestMonAppealPointTotals
	.word	gContestLinkLeaderIndex
	.word	gBlockRecvBuffer
.L185:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L169	@cond_branch
	ldr	r0, .L209
	mov	r1, #0x8
	b	.L197
.L210:
	.align	2, 0
.L209:
	.word	gContestMonRound2Points
.L188:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L169	@cond_branch
	ldr	r0, .L211
	ldr	r1, .L211+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	ldr	r2, .L211+0x8
	add	r1, r1, r2
	mov	r2, #0x8
	b	.L198
.L212:
	.align	2, 0
.L211:
	.word	gContestMonRound2Points
	.word	gContestLinkLeaderIndex
	.word	gBlockRecvBuffer
.L190:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L169	@cond_branch
	ldr	r0, .L213
	mov	r1, #0x4
.L197:
	bl	LinkContest_SendBlock
	cmp	r0, #0x1
	bne	.L169	@cond_branch
	ldr	r0, .L213+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L169
.L214:
	.align	2, 0
.L213:
	.word	gContestFinalStandings
	.word	gTasks
.L193:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L169	@cond_branch
	ldr	r0, .L215
	ldr	r1, .L215+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	ldr	r2, .L215+0x8
	add	r1, r1, r2
	mov	r2, #0x4
.L198:
	bl	memcpy
	ldr	r1, .L215+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L169
.L216:
	.align	2, 0
.L215:
	.word	gContestFinalStandings
	.word	gContestLinkLeaderIndex
	.word	gBlockRecvBuffer
	.word	gTasks
.L195:
	mov	r0, #0x0
	strh	r0, [r2, #0x8]
	add	r0, r4, #0
	bl	SwitchTaskToFollowupFunc
.L169:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 Task_LinkContest_CommunicateFinalStandings,.Lfe13-Task_LinkContest_CommunicateFinalStandings
	.align	2, 0
	.globl	Task_LinkContest_CommunicateAppealsState
	.type	 Task_LinkContest_CommunicateAppealsState,function
	.thumb_func
Task_LinkContest_CommunicateAppealsState:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L250
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r3, #0x8
	ldrsh	r0, [r2, r3]
	add	r3, r1, #0
	cmp	r0, #0xb
	bls	.LCB1361
	b	.L244	@long jump
.LCB1361:
	lsl	r0, r0, #0x2
	ldr	r1, .L250+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L251:
	.align	2, 0
.L250:
	.word	gTasks
	.word	.L245
	.align	2, 0
	.align	2, 0
.L245:
	.word	.L219
	.word	.L222
	.word	.L227
	.word	.L229
	.word	.L232
	.word	.L227
	.word	.L234
	.word	.L237
	.word	.L227
	.word	.L239
	.word	.L242
	.word	.L227
.L219:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1386
	b	.L218	@long jump
.LCB1386:
	ldr	r0, .L252
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	mov	r1, #0x70
	b	.L246
.L253:
	.align	2, 0
.L252:
	.word	gContestResources
.L222:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1408
	b	.L218	@long jump
.LCB1408:
	ldr	r0, .L254
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	ldr	r1, .L254+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	ldr	r2, .L254+0x8
	add	r1, r1, r2
	mov	r2, #0x70
	b	.L247
.L255:
	.align	2, 0
.L254:
	.word	gContestResources
	.word	gContestLinkLeaderIndex
	.word	gBlockRecvBuffer
.L227:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r3
	ldrh	r0, [r2, #0xa]
	add	r1, r0, #0x1
	strh	r1, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bgt	.LCB1443
	b	.L218	@long jump
.LCB1443:
	mov	r0, #0x0
	strh	r0, [r2, #0xa]
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	b	.L218
.L229:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L218	@cond_branch
	ldr	r0, .L256
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	mov	r1, #0x14
	b	.L246
.L257:
	.align	2, 0
.L256:
	.word	gContestResources
.L232:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L218	@cond_branch
	ldr	r0, .L258
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldr	r1, .L258+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	ldr	r2, .L258+0x8
	add	r1, r1, r2
	mov	r2, #0x14
	b	.L247
.L259:
	.align	2, 0
.L258:
	.word	gContestResources
	.word	gContestLinkLeaderIndex
	.word	gBlockRecvBuffer
.L234:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L218	@cond_branch
	ldr	r0, .L260
	ldr	r0, [r0]
	ldr	r0, [r0, #0x10]
	b	.L248
.L261:
	.align	2, 0
.L260:
	.word	gContestResources
.L237:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L218	@cond_branch
	ldr	r0, .L262
	ldr	r0, [r0]
	ldr	r0, [r0, #0x10]
	b	.L249
.L263:
	.align	2, 0
.L262:
	.word	gContestResources
.L239:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L218	@cond_branch
	ldr	r0, .L264
.L248:
	mov	r1, #0x4
.L246:
	bl	LinkContest_SendBlock
	cmp	r0, #0x1
	bne	.L218	@cond_branch
	ldr	r0, .L264+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L218
.L265:
	.align	2, 0
.L264:
	.word	gContestantTurnOrder
	.word	gTasks
.L242:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L218	@cond_branch
	ldr	r0, .L266
.L249:
	ldr	r1, .L266+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	ldr	r2, .L266+0x8
	add	r1, r1, r2
	mov	r2, #0x4
.L247:
	bl	memcpy
	ldr	r1, .L266+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L218
.L267:
	.align	2, 0
.L266:
	.word	gContestantTurnOrder
	.word	gContestLinkLeaderIndex
	.word	gBlockRecvBuffer
	.word	gTasks
.L244:
	mov	r0, #0x0
	strh	r0, [r2, #0x8]
	add	r0, r4, #0
	bl	SwitchTaskToFollowupFunc
.L218:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 Task_LinkContest_CommunicateAppealsState,.Lfe14-Task_LinkContest_CommunicateAppealsState
	.align	2, 0
	.globl	Task_LinkContest_CommunicateLeaderIdsRS
	.type	 Task_LinkContest_CommunicateLeaderIdsRS,function
	.thumb_func
Task_LinkContest_CommunicateLeaderIdsRS:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	mov	r8, r0
	add	r0, r0, r6
	lsl	r5, r0, #0x3
	ldr	r7, .L287
	add	r0, r5, r7
	add	r0, r0, #0x18
	bl	LinkContest_TryLinkStandby
	cmp	r0, #0
	beq	.L268	@cond_branch
	mov	r1, #0x8
	neg	r1, r1
	add	r1, r1, r7
	mov	r9, r1
	add	r4, r5, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L275	@cond_branch
	cmp	r0, #0x1
	bgt	.L286	@cond_branch
	cmp	r0, #0
	beq	.L271	@cond_branch
	b	.L284
.L288:
	.align	2, 0
.L287:
	.word	gTasks+0x8
.L286:
	cmp	r0, #0xa
	beq	.L282	@cond_branch
	b	.L284
.L271:
	ldr	r1, .L289
	mov	r0, #0x6e
	strb	r0, [r1]
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L272	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L268	@cond_branch
	mov	r0, #0xa
	strh	r0, [r4, #0x8]
	b	.L268
.L290:
	.align	2, 0
.L289:
	.word	gBlockSendBuffer
.L272:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L268
.L275:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L268	@cond_branch
	mov	r1, r8
	mov	r8, r9
	ldr	r4, .L291
	add	r0, r7, #0
	add	r0, r0, #0xa
	add	r2, r5, r0
	mov	r5, #0x80
	lsl	r5, r5, #0x1
	mov	r3, #0x3
.L280:
	ldrh	r0, [r4]
	strh	r0, [r2]
	add	r4, r4, r5
	add	r2, r2, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L280	@cond_branch
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r8
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L268
.L292:
	.align	2, 0
.L291:
	.word	gBlockRecvBuffer
.L282:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	ble	.L268	@cond_branch
	mov	r0, #0x2
	bl	SendBlockRequest
	mov	r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L268
.L284:
	ldr	r0, .L293
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	strh	r0, [r1, #0x1e]
	strh	r0, [r1, #0x20]
	add	r0, r6, #0
	bl	SwitchTaskToFollowupFunc
.L268:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	gTasks
.Lfe15:
	.size	 Task_LinkContest_CommunicateLeaderIdsRS,.Lfe15-Task_LinkContest_CommunicateLeaderIdsRS
	.align	2, 0
	.globl	Task_LinkContest_CommunicateRound1Points
	.type	 Task_LinkContest_CommunicateRound1Points,function
	.thumb_func
Task_LinkContest_CommunicateRound1Points:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r4, r0, #0x3
	ldr	r6, .L308
	add	r0, r4, r6
	add	r0, r0, #0x18
	bl	LinkContest_TryLinkStandby
	cmp	r0, #0
	beq	.L295	@cond_branch
	add	r0, r6, #0
	sub	r0, r0, #0x8
	add	r4, r4, r0
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L298	@cond_branch
	cmp	r0, #0x1
	beq	.L301	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	bl	SwitchTaskToFollowupFunc
	b	.L295
.L309:
	.align	2, 0
.L308:
	.word	gTasks+0x8
.L298:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L295	@cond_branch
	ldr	r0, .L310
	mov	r1, #0x8
	bl	LinkContest_SendBlock
	cmp	r0, #0x1
	bne	.L295	@cond_branch
	b	.L307
.L311:
	.align	2, 0
.L310:
	.word	gContestMonRound1Points
.L301:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L295	@cond_branch
	ldr	r0, .L312
	ldr	r1, .L312+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	ldr	r2, .L312+0x8
	add	r1, r1, r2
	mov	r2, #0x8
	bl	memcpy
.L307:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L295:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L313:
	.align	2, 0
.L312:
	.word	gContestMonRound1Points
	.word	gContestLinkLeaderIndex
	.word	gBlockRecvBuffer
.Lfe16:
	.size	 Task_LinkContest_CommunicateRound1Points,.Lfe16-Task_LinkContest_CommunicateRound1Points
	.align	2, 0
	.globl	Task_LinkContest_CommunicateTurnOrder
	.type	 Task_LinkContest_CommunicateTurnOrder,function
	.thumb_func
Task_LinkContest_CommunicateTurnOrder:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r4, r0, #0x3
	ldr	r6, .L327
	add	r0, r4, r6
	add	r0, r0, #0x18
	bl	LinkContest_TryLinkStandby
	cmp	r0, #0
	beq	.L314	@cond_branch
	add	r0, r6, #0
	sub	r0, r0, #0x8
	add	r4, r4, r0
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L317	@cond_branch
	cmp	r0, #0x1
	beq	.L320	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	bl	SwitchTaskToFollowupFunc
	b	.L314
.L328:
	.align	2, 0
.L327:
	.word	gTasks+0x8
.L317:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L314	@cond_branch
	ldr	r0, .L329
	mov	r1, #0x4
	bl	LinkContest_SendBlock
	cmp	r0, #0x1
	bne	.L314	@cond_branch
	b	.L326
.L330:
	.align	2, 0
.L329:
	.word	gContestantTurnOrder
.L320:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L314	@cond_branch
	ldr	r0, .L331
	ldr	r1, .L331+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	ldr	r2, .L331+0x8
	add	r1, r1, r2
	mov	r2, #0x4
	bl	memcpy
.L326:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L314:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L332:
	.align	2, 0
.L331:
	.word	gContestantTurnOrder
	.word	gContestLinkLeaderIndex
	.word	gBlockRecvBuffer
.Lfe17:
	.size	 Task_LinkContest_CommunicateTurnOrder,.Lfe17-Task_LinkContest_CommunicateTurnOrder
.text
	.align	2, 0

