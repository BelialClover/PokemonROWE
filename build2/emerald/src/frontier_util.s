@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.type	 sFrontierBrainStreakAppearances,object
	.size	 sFrontierBrainStreakAppearances,28
sFrontierBrainStreakAppearances:
	.byte	0x23
	.byte	0x46
	.byte	0x23
	.byte	0x1
	.byte	0x4
	.byte	0x9
	.byte	0x5
	.byte	0x0
	.byte	0x15
	.byte	0x2a
	.byte	0x15
	.byte	0x1
	.byte	0x1c
	.byte	0x38
	.byte	0x1c
	.byte	0x1
	.byte	0x15
	.byte	0x2a
	.byte	0x15
	.byte	0x1
	.byte	0x1c
	.byte	0x8c
	.byte	0x38
	.byte	0x1
	.byte	0x15
	.byte	0x46
	.byte	0x23
	.byte	0x0
	.align	2, 0
	.type	 sFrontierBrainsMons,object
sFrontierBrainsMons:
	.short	0x41
	.short	0xd3
	.byte	0x18
	.byte	0xf
	.byte	0x6a
	.byte	0x0
	.byte	0x98
	.byte	0x98
	.byte	0x64
	.byte	0x0
	.short	0x9
	.short	0x7
	.short	0x8
	.short	0x32
	.short	0xf4
	.short	0x98
	.byte	0x18
	.byte	0x1
	.byte	0x64
	.byte	0x98
	.byte	0x98
	.byte	0x0
	.byte	0x64
	.byte	0x6
	.short	0x7e
	.short	0x15b
	.short	0xd8
	.short	0x2e
	.short	0x8f
	.short	0xd7
	.byte	0x18
	.byte	0x3
	.byte	0x98
	.byte	0x98
	.byte	0x0
	.byte	0x0
	.byte	0x6a
	.byte	0x64
	.short	0x22
	.short	0xbb
	.short	0x119
	.short	0xf7
	.short	0xf3
	.short	0x98
	.byte	0x1f
	.byte	0xf
	.byte	0x9e
	.byte	0x0
	.byte	0xfc
	.byte	0x64
	.byte	0x0
	.byte	0x0
	.short	0x55
	.short	0x15b
	.short	0x73
	.short	0x9c
	.short	0x17d
	.short	0xd3
	.byte	0x1f
	.byte	0xf
	.byte	0xfc
	.byte	0x0
	.byte	0xfc
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.short	0x5e
	.short	0x15b
	.short	0x69
	.short	0x151
	.short	0x8f
	.short	0x91
	.byte	0x1f
	.byte	0x3
	.byte	0xfc
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x0
	.short	0xae
	.short	0xd8
	.short	0x9c
	.short	0xf7
	.short	0x104
	.short	0xe1
	.byte	0x14
	.byte	0x2
	.byte	0x98
	.byte	0x98
	.byte	0x6a
	.byte	0x0
	.byte	0x64
	.byte	0x0
	.short	0x39
	.short	0x59
	.short	0x3a
	.short	0x44
	.short	0x175
	.short	0x98
	.byte	0x14
	.byte	0x3
	.byte	0x98
	.byte	0x98
	.byte	0x6a
	.byte	0x64
	.byte	0x0
	.byte	0x0
	.short	0x59
	.short	0x118
	.short	0x151
	.short	0x14c
	.short	0x6
	.short	0xd4
	.byte	0x14
	.byte	0x11
	.byte	0x64
	.byte	0x98
	.byte	0x6a
	.byte	0x98
	.byte	0x0
	.byte	0x0
	.short	0x13b
	.short	0x9d
	.short	0x14c
	.short	0x59
	.short	0x104
	.short	0xe5
	.byte	0x1f
	.byte	0x2
	.byte	0xfc
	.byte	0xfc
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x39
	.short	0x59
	.short	0x3a
	.short	0xf3
	.short	0x178
	.short	0xd7
	.byte	0x1f
	.byte	0x2
	.byte	0xfc
	.byte	0xfc
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x5e
	.short	0x135
	.short	0x59
	.short	0xb6
	.short	0x17c
	.short	0x91
	.byte	0x1f
	.byte	0xf
	.byte	0xfc
	.byte	0x0
	.byte	0xfc
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.short	0x55
	.short	0x5e
	.short	0x15b
	.short	0x9c
	.short	0xa9
	.short	0xd3
	.byte	0x10
	.byte	0x3
	.byte	0x98
	.byte	0x0
	.byte	0x0
	.byte	0x98
	.byte	0x64
	.byte	0x6a
	.short	0x6d
	.short	0x68
	.short	0x5c
	.short	0x13
	.short	0x121
	.short	0xe3
	.byte	0x10
	.byte	0x0
	.byte	0x98
	.byte	0x98
	.byte	0x0
	.byte	0x6a
	.byte	0x64
	.byte	0x0
	.short	0x59
	.short	0xcf
	.short	0xf7
	.short	0x118
	.short	0x83
	.short	0xd7
	.byte	0x10
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0xfc
	.byte	0x0
	.byte	0x6a
	.byte	0x98
	.short	0x3a
	.short	0x20
	.short	0x6d
	.short	0xb6
	.short	0x3b
	.short	0xd4
	.byte	0x1f
	.byte	0xb
	.byte	0x6
	.byte	0xfc
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x13b
	.short	0xf5
	.short	0x2e
	.short	0xb6
	.short	0x121
	.short	0xe3
	.byte	0x1f
	.byte	0x0
	.byte	0x6
	.byte	0xfc
	.byte	0x0
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.short	0x3f
	.short	0x59
	.short	0xf7
	.short	0x119
	.short	0xf5
	.short	0xdb
	.byte	0x1f
	.byte	0xb
	.byte	0xfc
	.byte	0x0
	.byte	0xfc
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.short	0x3b
	.short	0x39
	.short	0x2c
	.short	0x15b
	.short	0xd6
	.short	0xc7
	.byte	0x14
	.byte	0xd
	.byte	0x6a
	.byte	0x98
	.byte	0x0
	.byte	0x98
	.byte	0x0
	.byte	0x64
	.short	0xe0
	.short	0x13d
	.short	0xcb
	.short	0xb3
	.short	0xc5
	.short	0xe5
	.byte	0x14
	.byte	0x14
	.byte	0x98
	.byte	0x0
	.byte	0x64
	.byte	0x0
	.byte	0x98
	.byte	0x6a
	.short	0x22
	.short	0x6d
	.short	0x5e
	.short	0xb9
	.short	0x124
	.short	0xd3
	.byte	0x14
	.byte	0x3
	.byte	0x0
	.byte	0xfc
	.byte	0x6
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.short	0xf7
	.short	0xd8
	.short	0x6d
	.short	0x14c
	.short	0xc5
	.short	0x91
	.byte	0x1f
	.byte	0x14
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfc
	.byte	0x6
	.short	0x26
	.short	0x6d
	.short	0x9c
	.short	0x5e
	.short	0x5e
	.short	0xe5
	.byte	0x1f
	.byte	0xf
	.byte	0xfc
	.byte	0x0
	.byte	0xfc
	.byte	0x0
	.byte	0x6
	.byte	0x0
	.short	0x5e
	.short	0x5f
	.short	0x8a
	.short	0xc2
	.short	0x11e
	.short	0x98
	.byte	0x1f
	.byte	0xd
	.byte	0x6
	.byte	0xfc
	.byte	0x0
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.short	0x93
	.short	0x108
	.short	0xca
	.short	0x1d
	.short	0x177
	.short	0x99
	.byte	0x1f
	.byte	0x2
	.byte	0x0
	.byte	0xfc
	.byte	0xfc
	.byte	0x0
	.byte	0x6
	.byte	0x0
	.short	0x71
	.short	0x5e
	.short	0x73
	.short	0xe8
	.short	0xe3
	.short	0x99
	.byte	0x1f
	.byte	0x8
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0xfc
	.short	0x5c
	.short	0x14c
	.short	0xb6
	.short	0xd3
	.short	0x132
	.short	0x99
	.byte	0x1f
	.byte	0x3
	.byte	0x0
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.byte	0xfc
	.byte	0x6
	.short	0x55
	.short	0xb6
	.short	0x4c
	.short	0x151
	.short	0x177
	.short	0x99
	.byte	0x1f
	.byte	0x2
	.byte	0x0
	.byte	0xfc
	.byte	0xfc
	.byte	0x0
	.byte	0x6
	.byte	0x0
	.short	0x71
	.short	0x5e
	.short	0x73
	.short	0xe8
	.short	0xe3
	.short	0x99
	.byte	0x1f
	.byte	0x8
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0xfc
	.short	0x5c
	.short	0x14c
	.short	0xb6
	.short	0xd3
	.short	0x132
	.short	0x99
	.byte	0x1f
	.byte	0x3
	.byte	0x0
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.byte	0xfc
	.byte	0x6
	.short	0x55
	.short	0xb6
	.short	0x4c
	.short	0x151
	.short	0x150
	.short	0xd7
	.byte	0x10
	.byte	0x2
	.byte	0xfc
	.byte	0x0
	.byte	0xfc
	.byte	0x0
	.byte	0x6
	.byte	0x0
	.short	0xcf
	.short	0xf2
	.short	0x131
	.short	0xca
	.short	0xd5
	.short	0x91
	.byte	0x10
	.byte	0x5
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x6a
	.byte	0xfc
	.short	0x5c
	.short	0xc9
	.short	0xb6
	.short	0x9c
	.short	0x15e
	.short	0xe5
	.byte	0x10
	.byte	0xf
	.byte	0x98
	.byte	0x0
	.byte	0x64
	.byte	0x0
	.byte	0x98
	.byte	0x6a
	.short	0x3a
	.short	0xf3
	.short	0x39
	.short	0x69
	.short	0x150
	.short	0xe1
	.byte	0x1f
	.byte	0x5
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfc
	.byte	0x6
	.short	0xcf
	.short	0xf2
	.short	0xbc
	.short	0xca
	.short	0xd0
	.short	0xd3
	.byte	0x1f
	.byte	0x2
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0xfc
	.short	0x59
	.short	0x9d
	.short	0x99
	.short	0x67
	.short	0x82
	.short	0x91
	.byte	0x1f
	.byte	0x3
	.byte	0xfc
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfc
	.short	0x15d
	.short	0xd8
	.short	0x2e
	.short	0x9c
	.short	0x179
	.short	0xd7
	.byte	0x10
	.byte	0x3
	.byte	0x98
	.byte	0x98
	.byte	0x0
	.byte	0x0
	.byte	0x6a
	.byte	0x64
	.short	0x99
	.short	0x114
	.short	0x59
	.short	0xf6
	.short	0x17b
	.short	0xe5
	.byte	0x10
	.byte	0x3
	.byte	0x98
	.byte	0x98
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0xc8
	.short	0x59
	.short	0xe8
	.short	0x5c
	.short	0x14e
	.short	0x17a
	.short	0x91
	.byte	0x10
	.byte	0xf
	.byte	0x6a
	.byte	0x0
	.byte	0x98
	.byte	0x0
	.byte	0x64
	.byte	0x98
	.short	0x3a
	.short	0x85
	.short	0x57
	.short	0x9c
	.short	0x90
	.short	0xe3
	.byte	0x1f
	.byte	0x10
	.byte	0x6
	.byte	0x0
	.byte	0xfc
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.short	0x3b
	.short	0x160
	.short	0x14c
	.short	0x73
	.short	0x91
	.short	0x98
	.byte	0x1f
	.byte	0x10
	.byte	0x6
	.byte	0x0
	.byte	0xfc
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.short	0x57
	.short	0xc5
	.short	0x41
	.short	0x71
	.short	0x92
	.short	0xd3
	.byte	0x1f
	.byte	0x10
	.byte	0x6
	.byte	0x0
	.byte	0xfc
	.byte	0xfc
	.byte	0x0
	.byte	0x0
	.short	0x7e
	.short	0x3f
	.short	0x14c
	.short	0xdb
	.size	 sFrontierBrainsMons,840
	.type	 sBattlePointAwards,object
sBattlePointAwards:
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0x5
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x6
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x6
	.byte	0x7
	.byte	0x7
	.byte	0x3
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x7
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x8
	.byte	0x3
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x7
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.byte	0x8
	.byte	0x9
	.byte	0x9
	.byte	0x4
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x7
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x9
	.byte	0xa
	.byte	0xa
	.byte	0x4
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x7
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0xb
	.byte	0x5
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x9
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x9
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xa
	.byte	0xb
	.byte	0xc
	.byte	0xc
	.byte	0x5
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x9
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x9
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xd
	.byte	0x6
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x9
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x9
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xe
	.byte	0x6
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x9
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x9
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0xe
	.byte	0xf
	.byte	0xf
	.byte	0x7
	.byte	0x7
	.byte	0x0
	.byte	0x0
	.byte	0xa
	.byte	0xb
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x9
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xb
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x7
	.byte	0x7
	.byte	0x0
	.byte	0x0
	.byte	0xa
	.byte	0xb
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x9
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xb
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x8
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0xb
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x9
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xa
	.byte	0xb
	.byte	0x0
	.byte	0x0
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x8
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0xb
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xa
	.byte	0xb
	.byte	0x0
	.byte	0x0
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x9
	.byte	0x9
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xb
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xb
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x9
	.byte	0x9
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xb
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xa
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xa
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xb
	.byte	0xb
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xb
	.byte	0xb
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xc
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xc
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xd
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xd
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xe
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xe
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sBattlePointAwards,840
	.align	1, 0
	.type	 sBattledBrainBitFlags,object
	.size	 sBattledBrainBitFlags,28
sBattledBrainBitFlags:
	.short	0x1
	.short	0x2
	.short	0x4
	.short	0x8
	.short	0x10
	.short	0x20
	.short	0x40
	.short	0x80
	.short	0x100
	.short	0x200
	.short	0x400
	.short	0x800
	.short	0x1000
	.short	0x2000
	.align	2, 0
	.type	 sFrontierUtilFuncs,object
sFrontierUtilFuncs:
	.word	GetChallengeStatus
	.word	GetFrontierData
	.word	SetFrontierData
	.word	SetSelectedPartyOrder
	.word	DoSoftReset_
	.word	SetFrontierTrainers
	.word	SaveSelectedParty
	.word	ShowFacilityResultsWindow
	.word	CheckPutFrontierTVShowOnAir
	.word	Script_GetFrontierBrainStatus
	.word	IsTrainerFrontierBrain
	.word	GiveBattlePoints
	.word	GetFacilitySymbolCount
	.word	GiveFacilitySymbol
	.word	CheckBattleTypeFlag
	.word	CheckPartyIneligibility
	.word	ValidateVisitingTrainer
	.word	IncrementWinStreak
	.word	RestoreHeldItems
	.word	SaveRecordBattle
	.word	BufferFrontierTrainerName
	.word	ResetSketchedMoves
	.word	SetFacilityBrainObjectEvent
	.size	 sFrontierUtilFuncs,92
	.align	2, 0
	.type	 sFrontierResultsWindowTemplate,object
	.size	 sFrontierResultsWindowTemplate,8
sFrontierResultsWindowTemplate:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1c
	.byte	0x12
	.byte	0xf
	.short	0x1
	.align	2, 0
	.type	 sLinkContestResultsWindowTemplate,object
	.size	 sLinkContestResultsWindowTemplate,8
sLinkContestResultsWindowTemplate:
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x1a
	.byte	0xf
	.byte	0xf
	.short	0x1
	.align	2, 0
	.type	 sRankingHallRecordsWindowTemplate,object
	.size	 sRankingHallRecordsWindowTemplate,8
sRankingHallRecordsWindowTemplate:
	.byte	0x0
	.byte	0x2
	.byte	0x1
	.byte	0x1a
	.byte	0x11
	.byte	0xf
	.short	0x1
	.type	 sFrontierBrainObjEventGfx,object
	.size	 sFrontierBrainObjEventGfx,14
sFrontierBrainObjEventGfx:
	.byte	0x46
	.byte	0x1
	.byte	0x47
	.byte	0x0
	.byte	0x49
	.byte	0x0
	.byte	0x48
	.byte	0x1
	.byte	0x4a
	.byte	0x0
	.byte	0x4b
	.byte	0x1
	.byte	0xea
	.byte	0x0
	.globl	gFrontierBannedSpecies
	.align	1, 0
	.type	 gFrontierBannedSpecies,object
gFrontierBannedSpecies:
	.short	0x97
	.short	0x96
	.short	0xfa
	.short	0xf9
	.short	0xfb
	.short	0x17e
	.short	0x17f
	.short	0x180
	.short	0x181
	.short	0x182
	.short	0xffff
	.size	 gFrontierBannedSpecies,22
	.align	2, 0
	.type	 sRecordsWindowChallengeTexts,object
sRecordsWindowChallengeTexts:
	.word	gText_BattleTower2
	.word	gText_FacilitySingle
	.word	gText_BattleTower2
	.word	gText_FacilityDouble
	.word	gText_BattleTower2
	.word	gText_FacilityMulti
	.word	gText_BattleDome
	.word	gText_FacilitySingle
	.word	gText_BattlePalace
	.word	gText_FacilitySingle
	.word	gText_BattleArena
	.word	gText_Facility
	.word	gText_BattleFactory
	.word	gText_FacilitySingle
	.word	gText_BattlePike
	.word	gText_Facility
	.word	gText_BattlePyramid
	.word	gText_Facility
	.word	gText_BattleTower2
	.word	gText_FacilityLink
	.size	 sRecordsWindowChallengeTexts,80
	.align	2, 0
	.type	 sLevelModeText,object
sLevelModeText:
	.word	gText_RecordsLv50
	.word	gText_RecordsOpenLevel
	.size	 sLevelModeText,8
	.align	2, 0
	.type	 sHallFacilityToRecordsText,object
sHallFacilityToRecordsText:
	.word	gText_FrontierFacilityWinStreak
	.word	gText_FrontierFacilityWinStreak
	.word	gText_FrontierFacilityWinStreak
	.word	gText_FrontierFacilityClearStreak
	.word	gText_FrontierFacilityWinStreak
	.word	gText_FrontierFacilityKOsStreak
	.word	gText_FrontierFacilityWinStreak
	.word	gText_FrontierFacilityRoomsCleared
	.word	gText_FrontierFacilityFloorsCleared
	.word	gText_FrontierFacilityWinStreak
	.size	 sHallFacilityToRecordsText,40
	.align	1, 0
	.type	 sFrontierBrainTrainerIds,object
	.size	 sFrontierBrainTrainerIds,14
sFrontierBrainTrainerIds:
	.short	0x325
	.short	0x326
	.short	0x327
	.short	0x328
	.short	0x329
	.short	0x32a
	.short	0x32b
	.align	2, 0
	.type	 sFrontierBrainPlayerLostSilverTexts,object
	.size	 sFrontierBrainPlayerLostSilverTexts,28
sFrontierBrainPlayerLostSilverTexts:
	.word	gText_AnabelWonSilver
	.word	gText_TuckerWonSilver
	.word	gText_SpenserWonSilver
	.word	gText_GretaWonSilver
	.word	gText_NolandWonSilver
	.word	gText_LucyWonSilver
	.word	gText_BrandonWonSilver
	.align	2, 0
	.type	 sFrontierBrainPlayerWonSilverTexts,object
	.size	 sFrontierBrainPlayerWonSilverTexts,28
sFrontierBrainPlayerWonSilverTexts:
	.word	gText_AnabelDefeatSilver
	.word	gText_TuckerDefeatSilver
	.word	gText_SpenserDefeatSilver
	.word	gText_GretaDefeatSilver
	.word	gText_NolandDefeatSilver
	.word	gText_LucyDefeatSilver
	.word	gText_BrandonDefeatSilver
	.align	2, 0
	.type	 sFrontierBrainPlayerLostGoldTexts,object
	.size	 sFrontierBrainPlayerLostGoldTexts,28
sFrontierBrainPlayerLostGoldTexts:
	.word	gText_AnabelWonGold
	.word	gText_TuckerWonGold
	.word	gText_SpenserWonGold
	.word	gText_GretaWonGold
	.word	gText_NolandWonGold
	.word	gText_LucyWonGold
	.word	gText_BrandonWonGold
	.align	2, 0
	.type	 sFrontierBrainPlayerWonGoldTexts,object
	.size	 sFrontierBrainPlayerWonGoldTexts,28
sFrontierBrainPlayerWonGoldTexts:
	.word	gText_AnabelDefeatGold
	.word	gText_TuckerDefeatGold
	.word	gText_SpenserDefeatGold
	.word	gText_GretaDefeatGold
	.word	gText_NolandDefeatGold
	.word	gText_LucyDefeatGold
	.word	gText_BrandonDefeatGold
	.align	2, 0
	.type	 sFrontierBrainPlayerLostTexts,object
sFrontierBrainPlayerLostTexts:
	.word	sFrontierBrainPlayerLostSilverTexts
	.word	sFrontierBrainPlayerLostGoldTexts
	.size	 sFrontierBrainPlayerLostTexts,8
	.align	2, 0
	.type	 sFrontierBrainPlayerWonTexts,object
sFrontierBrainPlayerWonTexts:
	.word	sFrontierBrainPlayerWonSilverTexts
	.word	sFrontierBrainPlayerWonGoldTexts
	.size	 sFrontierBrainPlayerWonTexts,8
.text
	.align	2, 0
	.globl	CallFrontierUtilFunc
	.type	 CallFrontierUtilFunc,function
	.thumb_func
CallFrontierUtilFunc:
	push	{lr}
	ldr	r1, .L3
	ldr	r0, .L3+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sFrontierUtilFuncs
	.word	gSpecialVar_0x8004
.Lfe1:
	.size	 CallFrontierUtilFunc,.Lfe1-CallFrontierUtilFunc
	.align	2, 0
	.type	 GetChallengeStatus,function
	.thumb_func
GetChallengeStatus:
	push	{lr}
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	mov	r1, #0xff
	bl	VarSet
	ldr	r0, .L15
	ldr	r0, [r0]
	mov	r1, #0xc3
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bhi	.L6	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L15+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L16:
	.align	2, 0
.L15:
	.word	gSaveBlock2Ptr
	.word	.L12
	.align	2, 0
	.align	2, 0
.L12:
	.word	.L6
	.word	.L8
	.word	.L11
	.word	.L10
	.word	.L9
.L8:
	mov	r0, #0x0
	b	.L14
.L9:
	mov	r0, #0x0
	b	.L14
.L10:
	mov	r0, #0x1
.L14:
	bl	FrontierGamblerSetWonOrLost
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	ldr	r1, .L17
	ldr	r1, [r1]
	mov	r2, #0xc3
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	VarSet
	b	.L6
.L18:
	.align	2, 0
.L17:
	.word	gSaveBlock2Ptr
.L11:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	ldr	r1, .L19
	ldr	r1, [r1]
	mov	r2, #0xc3
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	VarSet
.L6:
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	gSaveBlock2Ptr
.Lfe2:
	.size	 GetChallengeStatus,.Lfe2-GetChallengeStatus
	.align	2, 0
	.type	 GetFrontierData,function
	.thumb_func
GetFrontierData:
	push	{r4, r5, r6, lr}
	ldr	r0, .L34
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	bl	GetPlayerSymbolCountForFacility
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bne	.L22	@cond_branch
	mov	r5, #0x1
.L22:
	ldr	r0, .L34+0x4
	ldrh	r0, [r0]
	cmp	r0, #0x7
	bls	.LCB150
	b	.L23	@long jump
.LCB150:
	lsl	r0, r0, #0x2
	ldr	r1, .L34+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L35:
	.align	2, 0
.L34:
	.word	0x40cf
	.word	gSpecialVar_0x8005
	.word	.L31
	.align	2, 0
	.align	2, 0
.L31:
	.word	.L24
	.word	.L25
	.word	.L26
	.word	.L27
	.word	.L23
	.word	.L28
	.word	.L29
	.word	.L30
.L24:
	ldr	r1, .L36
	ldr	r0, .L36+0x4
	ldr	r0, [r0]
	mov	r2, #0xc3
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r1]
	b	.L23
.L37:
	.align	2, 0
.L36:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
.L25:
	ldr	r1, .L38
	ldr	r0, .L38+0x4
	ldr	r0, [r0]
	ldr	r2, .L38+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	strh	r0, [r1]
	b	.L23
.L39:
	.align	2, 0
.L38:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xc31
.L26:
	ldr	r1, .L40
	ldr	r0, .L40+0x4
	ldr	r0, [r0]
	ldr	r2, .L40+0x8
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	b	.L23
.L41:
	.align	2, 0
.L40:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xc3a
.L27:
	ldr	r1, .L42
	ldr	r0, .L42+0x4
	ldr	r0, [r0]
	ldr	r2, .L42+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	b	.L33
.L43:
	.align	2, 0
.L42:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xc31
.L28:
	ldr	r2, .L44
	ldr	r1, .L44+0x4
	ldrb	r0, [r1]
	strh	r0, [r2]
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L23
.L45:
	.align	2, 0
.L44:
	.word	gSpecialVar_Result
	.word	gBattleOutcome
.L29:
	ldr	r1, .L46
	ldr	r0, .L46+0x4
	ldr	r0, [r0]
	ldr	r2, .L46+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
.L33:
	lsr	r0, r0, #0x1f
	strh	r0, [r1]
	b	.L23
.L47:
	.align	2, 0
.L46:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xc31
.L30:
	ldr	r4, .L48
	ldr	r0, .L48+0x4
	ldr	r2, [r0]
	ldr	r0, .L48+0x8
	add	r2, r2, r0
	ldr	r3, .L48+0xc
	lsl	r0, r5, #0x1
	lsl	r1, r6, #0x2
	add	r0, r0, r1
	add	r0, r0, r3
	ldrh	r1, [r2]
	ldrh	r0, [r0]
	and	r0, r0, r1
	strh	r0, [r4]
.L23:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xc88
	.word	sBattledBrainBitFlags
.Lfe3:
	.size	 GetFrontierData,.Lfe3-GetFrontierData
	.align	2, 0
	.type	 SetFrontierData,function
	.thumb_func
SetFrontierData:
	push	{r4, r5, lr}
	ldr	r0, .L68
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	bl	GetPlayerSymbolCountForFacility
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bne	.L51	@cond_branch
	mov	r4, #0x1
.L51:
	ldr	r0, .L68+0x4
	ldrh	r0, [r0]
	cmp	r0, #0x7
	bls	.LCB349
	b	.L52	@long jump
.LCB349:
	lsl	r0, r0, #0x2
	ldr	r1, .L68+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L69:
	.align	2, 0
.L68:
	.word	0x40cf
	.word	gSpecialVar_0x8005
	.word	.L65
	.align	2, 0
	.align	2, 0
.L65:
	.word	.L53
	.word	.L54
	.word	.L55
	.word	.L56
	.word	.L57
	.word	.L52
	.word	.L63
	.word	.L64
.L53:
	ldr	r0, .L70
	ldr	r0, [r0]
	ldr	r1, .L70+0x4
	ldrh	r1, [r1]
	mov	r2, #0xc3
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	strb	r1, [r0]
	b	.L52
.L71:
	.align	2, 0
.L70:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
.L54:
	ldr	r0, .L72
	ldr	r2, [r0]
	ldr	r0, .L72+0x4
	ldrb	r0, [r0]
	ldr	r1, .L72+0x8
	add	r2, r2, r1
	mov	r1, #0x3
	and	r1, r1, r0
	ldrb	r3, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L52
.L73:
	.align	2, 0
.L72:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xc31
.L55:
	ldr	r0, .L74
	ldr	r0, [r0]
	ldr	r1, .L74+0x4
	ldrh	r1, [r1]
	ldr	r2, .L74+0x8
	add	r0, r0, r2
	strh	r1, [r0]
	b	.L52
.L75:
	.align	2, 0
.L74:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xc3a
.L56:
	ldr	r0, .L76
	ldr	r3, [r0]
	ldr	r0, .L76+0x4
	ldrb	r0, [r0]
	ldr	r1, .L76+0x8
	add	r3, r3, r1
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	b	.L67
.L77:
	.align	2, 0
.L76:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xc31
.L57:
	mov	r2, #0x0
	ldr	r5, .L78
	ldr	r4, .L78+0x4
	ldr	r3, .L78+0x8
.L61:
	ldr	r1, [r5]
	lsl	r0, r2, #0x1
	add	r1, r1, r4
	add	r1, r1, r0
	add	r0, r2, r3
	ldrb	r0, [r0]
	strh	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L61	@cond_branch
	b	.L52
.L79:
	.align	2, 0
.L78:
	.word	gSaveBlock2Ptr
	.word	0xc32
	.word	gSelectedOrderFromParty
.L63:
	ldr	r0, .L80
	ldr	r3, [r0]
	ldr	r0, .L80+0x4
	ldrb	r0, [r0]
	ldr	r2, .L80+0x8
	add	r3, r3, r2
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x3
	ldrb	r2, [r3]
	mov	r0, #0x9
	neg	r0, r0
.L67:
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L52
.L81:
	.align	2, 0
.L80:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xc31
.L64:
	ldr	r0, .L82
	ldr	r2, [r0]
	ldr	r0, .L82+0x4
	add	r2, r2, r0
	ldr	r3, .L82+0x8
	lsl	r1, r4, #0x1
	lsl	r0, r5, #0x2
	add	r1, r1, r0
	add	r1, r1, r3
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	orr	r0, r0, r1
	strh	r0, [r2]
.L52:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gSaveBlock2Ptr
	.word	0xc88
	.word	sBattledBrainBitFlags
.Lfe4:
	.size	 SetFrontierData,.Lfe4-SetFrontierData
	.align	2, 0
	.type	 SetSelectedPartyOrder,function
	.thumb_func
SetSelectedPartyOrder:
	push	{r4, r5, r6, r7, lr}
	bl	ClearSelectedPartyOrder
	mov	r3, #0x0
	ldr	r4, .L90
	ldrh	r0, [r4]
	cmp	r3, r0
	bge	.L86	@cond_branch
	ldr	r7, .L90+0x4
	ldr	r6, .L90+0x8
	ldr	r5, .L90+0xc
.L88:
	add	r2, r3, r7
	ldr	r0, [r6]
	lsl	r1, r3, #0x1
	add	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	strb	r0, [r2]
	add	r3, r3, #0x1
	ldrh	r0, [r4]
	cmp	r3, r0
	blt	.L88	@cond_branch
.L86:
	bl	ReducePlayerPartyToSelectedMons
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gSpecialVar_0x8005
	.word	gSelectedOrderFromParty
	.word	gSaveBlock2Ptr
	.word	0xc32
.Lfe5:
	.size	 SetSelectedPartyOrder,.Lfe5-SetSelectedPartyOrder
	.align	2, 0
	.type	 DoSoftReset_,function
	.thumb_func
DoSoftReset_:
	push	{lr}
	bl	DoSoftReset
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 DoSoftReset_,.Lfe6-DoSoftReset_
	.align	2, 0
	.type	 SetFrontierTrainers,function
	.thumb_func
SetFrontierTrainers:
	ldr	r1, .L94
	ldr	r0, .L94+0x4
	str	r0, [r1]
	bx	lr
.L95:
	.align	2, 0
.L94:
	.word	gFacilityTrainers
	.word	gBattleFrontierTrainers
.Lfe7:
	.size	 SetFrontierTrainers,.Lfe7-SetFrontierTrainers
	.align	2, 0
	.type	 SaveSelectedParty,function
	.thumb_func
SaveSelectedParty:
	push	{r4, r5, lr}
	mov	r4, #0x0
	mov	r5, #0x64
.L100:
	ldr	r0, .L103
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	ldr	r2, .L103+0x4
	add	r0, r0, r2
	add	r1, r0, r1
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5
	bhi	.L99	@cond_branch
	ldr	r0, .L103+0x8
	ldr	r0, [r0]
	ldrh	r1, [r1]
	sub	r1, r1, #0x1
	mul	r1, r1, r5
	add	r0, r0, r1
	mov	r1, #0x8e
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldr	r2, .L103+0xc
	mov	r1, r4
	mul	r1, r1, r5
	add	r1, r1, r2
	mov	r2, #0x64
	bl	memcpy
.L99:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L100	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	gSaveBlock2Ptr
	.word	0xc32
	.word	gSaveBlock1Ptr
	.word	gPlayerParty
.Lfe8:
	.size	 SaveSelectedParty,.Lfe8-SaveSelectedParty
	.align	2, 0
	.type	 ShowFacilityResultsWindow,function
	.thumb_func
ShowFacilityResultsWindow:
	push	{lr}
	ldr	r0, .L118
	ldrh	r1, [r0]
	add	r2, r0, #0
	cmp	r1, #0x3
	bls	.L106	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2]
.L106:
	ldr	r0, .L118+0x4
	ldrh	r0, [r0]
	cmp	r0, #0x7
	bhi	.L107	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L118+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L119:
	.align	2, 0
.L118:
	.word	gSpecialVar_0x8006
	.word	gSpecialVar_0x8005
	.word	.L116
	.align	2, 0
	.align	2, 0
.L116:
	.word	.L108
	.word	.L109
	.word	.L110
	.word	.L113
	.word	.L112
	.word	.L111
	.word	.L114
	.word	.L115
.L108:
	ldrb	r0, [r2]
	bl	ShowTowerResultsWindow
	b	.L107
.L109:
	ldrb	r0, [r2]
	bl	ShowDomeResultsWindow
	b	.L107
.L110:
	ldrb	r0, [r2]
	bl	ShowPalaceResultsWindow
	b	.L107
.L111:
	bl	ShowPikeResultsWindow
	b	.L107
.L112:
	ldrb	r0, [r2]
	bl	ShowFactoryResultsWindow
	b	.L107
.L113:
	bl	ShowArenaResultsWindow
	b	.L107
.L114:
	bl	ShowPyramidResultsWindow
	b	.L107
.L115:
	bl	ShowLinkContestResultsWindow
.L107:
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 ShowFacilityResultsWindow,.Lfe9-ShowFacilityResultsWindow
	.align	2, 0
	.type	 IsWinStreakActive,function
	.thumb_func
IsWinStreakActive:
	push	{lr}
	ldr	r1, .L124
	ldr	r1, [r1]
	ldr	r2, .L124+0x4
	add	r1, r1, r2
	ldr	r1, [r1]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L121	@cond_branch
	mov	r0, #0x0
	b	.L123
.L125:
	.align	2, 0
.L124:
	.word	gSaveBlock2Ptr
	.word	0xc64
.L121:
	mov	r0, #0x1
.L123:
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 IsWinStreakActive,.Lfe10-IsWinStreakActive
	.align	2, 0
	.type	 PrintAligned,function
	.thumb_func
PrintAligned:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r0, #0x1
	add	r1, r4, #0
	mov	r2, #0xe0
	bl	GetStringCenterAlignXOffset
	add	r3, r0, #0
	lsl	r0, r5, #0x3
	add	r5, r0, #0x1
	ldr	r0, .L127
	ldrb	r0, [r0]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	mov	r1, #0xff
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r4, #0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L128:
	.align	2, 0
.L127:
	.word	gRecordsWindowId
.Lfe11:
	.size	 PrintAligned,.Lfe11-PrintAligned
	.align	2, 0
	.type	 PrintHyphens,function
	.thumb_func
PrintHyphens:
	push	{r4, lr}
	add	sp, sp, #-0x34
	add	r2, r0, #0
	ldr	r3, .L135
	mov	r1, #0xae
	mov	r0, sp
	add	r0, r0, #0x2f
.L133:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	add	r4, sp, #0xc
	cmp	r0, r4
	bge	.L133	@cond_branch
	add	r1, sp, #0x30
	mov	r0, #0xff
	strb	r0, [r1]
	lsl	r0, r2, #0x3
	add	r2, r0, #0x1
	ldrb	r0, [r3]
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	mov	r1, #0xff
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x4
	bl	AddTextPrinterParameterized
	add	sp, sp, #0x34
	pop	{r4}
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	gRecordsWindowId
.Lfe12:
	.size	 PrintHyphens,.Lfe12-PrintHyphens
	.align	2, 0
	.type	 TowerPrintStreak,function
	.thumb_func
TowerPrintStreak:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	add	r4, r2, #0
	ldr	r0, [sp, #0x30]
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0xc]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r0, #0
	ldr	r0, .L139
	mov	sl, r0
	ldrb	r0, [r0]
	str	r7, [sp]
	mov	r1, #0xff
	mov	r9, r1
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r8, r1
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r5, #0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized
	ldr	r0, .L139+0x4
	cmp	r6, r0
	bls	.L138	@cond_branch
	add	r6, r0, #0
.L138:
	ldr	r0, .L139+0x8
	add	r1, r6, #0
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L139+0xc
	ldr	r1, .L139+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r1, sl
	ldrb	r0, [r1]
	str	r7, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r4, #0
	ldr	r3, [sp, #0xc]
	bl	AddTextPrinterParameterized
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L140:
	.align	2, 0
.L139:
	.word	gRecordsWindowId
	.word	0x270f
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_WinStreak
.Lfe13:
	.size	 TowerPrintStreak,.Lfe13-TowerPrintStreak
	.align	2, 0
	.type	 TowerPrintRecordStreak,function
	.thumb_func
TowerPrintRecordStreak:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r5, [sp, #0x10]
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r4, .L142
	ldr	r4, [r4]
	lsr	r1, r1, #0x17
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r0, .L142+0x4
	add	r4, r4, r0
	add	r4, r4, r1
	ldrh	r1, [r4]
	ldr	r0, .L142+0x8
	str	r5, [sp]
	bl	TowerPrintStreak
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	gSaveBlock2Ptr
	.word	0xc78
	.word	gText_Record
.Lfe14:
	.size	 TowerPrintRecordStreak,.Lfe14-TowerPrintRecordStreak
	.align	2, 0
	.type	 TowerGetWinStreak,function
	.thumb_func
TowerGetWinStreak:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	ldr	r2, .L148
	ldr	r2, [r2]
	lsr	r1, r1, #0x17
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r0, .L148+0x4
	add	r2, r2, r0
	add	r2, r2, r1
	ldrh	r0, [r2]
	ldr	r1, .L148+0x8
	cmp	r0, r1
	bls	.L147	@cond_branch
	add	r0, r1, #0
.L147:
	pop	{r1}
	bx	r1
.L149:
	.align	2, 0
.L148:
	.word	gSaveBlock2Ptr
	.word	0xc68
	.word	0x270f
.Lfe15:
	.size	 TowerGetWinStreak,.Lfe15-TowerGetWinStreak
	.align	2, 0
	.type	 TowerPrintPrevOrCurrentStreak,function
	.thumb_func
TowerPrintPrevOrCurrentStreak:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	lsl	r4, r4, #0x18
	lsr	r7, r4, #0x18
	add	r0, r5, #0
	add	r1, r6, #0
	bl	TowerGetWinStreak
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r5, #0x1
	beq	.L156	@cond_branch
	cmp	r5, #0x1
	ble	.L153	@cond_branch
	cmp	r5, #0x2
	beq	.L159	@cond_branch
	cmp	r5, #0x3
	beq	.L162	@cond_branch
.L153:
	cmp	r6, #0
	beq	.L154	@cond_branch
	mov	r0, #0x2
	b	.L169
.L154:
	mov	r0, #0x1
	b	.L169
.L156:
	cmp	r6, #0
	beq	.L157	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	b	.L169
.L157:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	b	.L169
.L159:
	cmp	r6, #0
	beq	.L160	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xa
	b	.L169
.L160:
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	b	.L169
.L162:
	cmp	r6, #0
	beq	.L163	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	b	.L169
.L163:
	mov	r0, #0x80
	lsl	r0, r0, #0xb
.L169:
	bl	IsWinStreakActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L167	@cond_branch
	ldr	r0, .L170
	str	r7, [sp]
	add	r1, r4, #0
	mov	r2, r8
	mov	r3, r9
	bl	TowerPrintStreak
	b	.L168
.L171:
	.align	2, 0
.L170:
	.word	gText_Current
.L167:
	ldr	r0, .L172
	str	r7, [sp]
	add	r1, r4, #0
	mov	r2, r8
	mov	r3, r9
	bl	TowerPrintStreak
.L168:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	gText_Prev
.Lfe16:
	.size	 TowerPrintPrevOrCurrentStreak,.Lfe16-TowerPrintPrevOrCurrentStreak
	.align	2, 0
	.type	 ShowTowerResultsWindow,function
	.thumb_func
ShowTowerResultsWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L181
	ldr	r0, .L181+0x4
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	DrawStdWindowFrame
	ldrb	r0, [r4]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	cmp	r7, #0
	bne	.L175	@cond_branch
	ldr	r0, .L181+0x8
	ldr	r1, .L181+0xc
	bl	StringExpandPlaceholders
	b	.L176
.L182:
	.align	2, 0
.L181:
	.word	gRecordsWindowId
	.word	sFrontierResultsWindowTemplate
	.word	gStringVar4
	.word	gText_SingleBattleRoomResults
.L175:
	cmp	r7, #0x1
	bne	.L177	@cond_branch
	ldr	r0, .L183
	ldr	r1, .L183+0x4
	bl	StringExpandPlaceholders
	b	.L176
.L184:
	.align	2, 0
.L183:
	.word	gStringVar4
	.word	gText_DoubleBattleRoomResults
.L177:
	cmp	r7, #0x2
	bne	.L179	@cond_branch
	ldr	r0, .L185
	ldr	r1, .L185+0x4
	bl	StringExpandPlaceholders
	b	.L176
.L186:
	.align	2, 0
.L185:
	.word	gStringVar4
	.word	gText_MultiBattleRoomResults
.L179:
	ldr	r0, .L187
	ldr	r1, .L187+0x4
	bl	StringExpandPlaceholders
.L176:
	ldr	r0, .L187
	mov	r1, #0x2
	bl	PrintAligned
	ldr	r6, .L187+0x8
	ldrb	r0, [r6]
	ldr	r2, .L187+0xc
	mov	r1, #0x31
	mov	r8, r1
	str	r1, [sp]
	mov	r5, #0xff
	str	r5, [sp, #0x4]
	mov	r4, #0x0
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x10
	bl	AddTextPrinterParameterized
	ldrb	r0, [r6]
	ldr	r2, .L187+0x10
	mov	r1, #0x61
	mov	r9, r1
	str	r1, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x10
	bl	AddTextPrinterParameterized
	mov	r0, #0xa
	bl	PrintHyphens
	mov	r0, r8
	str	r0, [sp]
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0x48
	mov	r3, #0x84
	bl	TowerPrintPrevOrCurrentStreak
	mov	r0, #0x41
	str	r0, [sp]
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0x48
	mov	r3, #0x84
	bl	TowerPrintRecordStreak
	mov	r1, r9
	str	r1, [sp]
	add	r0, r7, #0
	mov	r1, #0x1
	mov	r2, #0x48
	mov	r3, #0x84
	bl	TowerPrintPrevOrCurrentStreak
	mov	r0, #0x71
	str	r0, [sp]
	add	r0, r7, #0
	mov	r1, #0x1
	mov	r2, #0x48
	mov	r3, #0x84
	bl	TowerPrintRecordStreak
	ldrb	r0, [r6]
	bl	PutWindowTilemap
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L188:
	.align	2, 0
.L187:
	.word	gStringVar4
	.word	gText_LinkMultiBattleRoomResults
	.word	gRecordsWindowId
	.word	gText_Lv502
	.word	gText_OpenLv
.Lfe17:
	.size	 ShowTowerResultsWindow,.Lfe17-ShowTowerResultsWindow
	.align	2, 0
	.type	 DomeGetWinStreak,function
	.thumb_func
DomeGetWinStreak:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	ldr	r2, .L193
	ldr	r2, [r2]
	lsr	r1, r1, #0x17
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r0, .L193+0x4
	add	r2, r2, r0
	add	r2, r2, r1
	ldrh	r0, [r2]
	ldr	r1, .L193+0x8
	cmp	r0, r1
	bls	.L192	@cond_branch
	add	r0, r1, #0
.L192:
	pop	{r1}
	bx	r1
.L194:
	.align	2, 0
.L193:
	.word	gSaveBlock2Ptr
	.word	0xc94
	.word	0x270f
.Lfe18:
	.size	 DomeGetWinStreak,.Lfe18-DomeGetWinStreak
	.align	2, 0
	.type	 PrintTwoStrings,function
	.thumb_func
PrintTwoStrings:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	ip, r0
	add	r7, r1, #0
	add	r4, r2, #0
	ldr	r6, [sp, #0x2c]
	ldr	r5, [sp, #0x30]
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L196
	mov	sl, r0
	ldrb	r0, [r0]
	str	r5, [sp]
	mov	r1, #0xff
	mov	r9, r1
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r8, r1
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r2, ip
	bl	AddTextPrinterParameterized
	ldr	r0, .L196+0x4
	add	r1, r4, #0
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L196+0x8
	add	r0, r4, #0
	add	r1, r7, #0
	bl	StringExpandPlaceholders
	mov	r1, sl
	ldrb	r0, [r1]
	str	r5, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r4, #0
	add	r3, r6, #0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L197:
	.align	2, 0
.L196:
	.word	gRecordsWindowId
	.word	gStringVar1
	.word	gStringVar4
.Lfe19:
	.size	 PrintTwoStrings,.Lfe19-PrintTwoStrings
	.align	2, 0
	.type	 DomePrintPrevOrCurrentStreak,function
	.thumb_func
DomePrintPrevOrCurrentStreak:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	ldr	r4, [sp, #0x24]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	add	r1, r6, #0
	bl	DomeGetWinStreak
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	cmp	r5, #0
	beq	.L201	@cond_branch
	cmp	r5, #0x1
	beq	.L204	@cond_branch
.L201:
	cmp	r6, #0
	beq	.L202	@cond_branch
	mov	r0, #0x8
	b	.L210
.L202:
	mov	r0, #0x4
	b	.L210
.L204:
	cmp	r6, #0
	beq	.L205	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xe
	b	.L210
.L205:
	mov	r0, #0x80
	lsl	r0, r0, #0xd
.L210:
	bl	IsWinStreakActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L208	@cond_branch
	ldr	r0, .L211
	ldr	r1, .L211+0x4
	str	r7, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	mov	r3, r9
	bl	PrintTwoStrings
	b	.L209
.L212:
	.align	2, 0
.L211:
	.word	gText_Current
	.word	gText_ClearStreak
.L208:
	ldr	r0, .L213
	ldr	r1, .L213+0x4
	str	r7, [sp]
	str	r4, [sp, #0x4]
	mov	r2, r8
	mov	r3, r9
	bl	PrintTwoStrings
.L209:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L214:
	.align	2, 0
.L213:
	.word	gText_Prev
	.word	gText_ClearStreak
.Lfe20:
	.size	 DomePrintPrevOrCurrentStreak,.Lfe20-DomePrintPrevOrCurrentStreak
	.align	2, 0
	.type	 ShowDomeResultsWindow,function
	.thumb_func
ShowDomeResultsWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L218
	ldr	r0, .L218+0x4
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	DrawStdWindowFrame
	ldrb	r0, [r4]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	cmp	r7, #0
	bne	.L216	@cond_branch
	ldr	r0, .L218+0x8
	ldr	r1, .L218+0xc
	bl	StringExpandPlaceholders
	b	.L217
.L219:
	.align	2, 0
.L218:
	.word	gRecordsWindowId
	.word	sFrontierResultsWindowTemplate
	.word	gStringVar4
	.word	gText_SingleBattleTourneyResults
.L216:
	ldr	r0, .L220
	ldr	r1, .L220+0x4
	bl	StringExpandPlaceholders
.L217:
	ldr	r0, .L220
	mov	r1, #0x0
	bl	PrintAligned
	ldr	r1, .L220+0x8
	ldrb	r0, [r1]
	ldr	r2, .L220+0xc
	mov	r6, #0x21
	str	r6, [sp]
	mov	r5, #0xff
	str	r5, [sp, #0x4]
	mov	r4, #0x0
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	ldr	r1, .L220+0x8
	ldrb	r0, [r1]
	ldr	r2, .L220+0x10
	mov	r1, #0x61
	str	r1, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	mov	r0, #0xa
	bl	PrintHyphens
	str	r6, [sp]
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0x40
	mov	r3, #0x79
	bl	DomePrintPrevOrCurrentStreak
	ldr	r4, .L220+0x14
	ldr	r0, [r4]
	lsl	r5, r7, #0x2
	ldr	r1, .L220+0x18
	add	r0, r0, r1
	add	r0, r0, r5
	ldrh	r2, [r0]
	mov	r0, #0x79
	mov	r9, r0
	str	r0, [sp]
	mov	r0, #0x31
	str	r0, [sp, #0x4]
	ldr	r0, .L220+0x1c
	ldr	r1, .L220+0x20
	mov	r3, #0x40
	bl	PrintTwoStrings
	ldr	r1, .L220+0x24
	mov	sl, r1
	ldr	r0, .L220+0x28
	mov	r8, r0
	ldr	r0, [r4]
	ldr	r1, .L220+0x2c
	add	r0, r0, r1
	add	r0, r0, r5
	ldrh	r2, [r0]
	mov	r6, #0x70
	str	r6, [sp]
	mov	r0, #0x41
	str	r0, [sp, #0x4]
	mov	r0, sl
	mov	r1, r8
	mov	r3, #0x40
	bl	PrintTwoStrings
	mov	r0, #0x61
	str	r0, [sp]
	add	r0, r7, #0
	mov	r1, #0x1
	mov	r2, #0x40
	mov	r3, #0x79
	bl	DomePrintPrevOrCurrentStreak
	ldr	r0, [r4]
	ldr	r1, .L220+0x30
	add	r0, r0, r1
	add	r0, r0, r5
	ldrh	r2, [r0]
	mov	r0, r9
	str	r0, [sp]
	mov	r0, #0x71
	str	r0, [sp, #0x4]
	ldr	r0, .L220+0x1c
	ldr	r1, .L220+0x20
	mov	r3, #0x40
	bl	PrintTwoStrings
	ldr	r0, [r4]
	ldr	r1, .L220+0x34
	add	r0, r0, r1
	add	r0, r0, r5
	ldrh	r2, [r0]
	str	r6, [sp]
	mov	r0, #0x81
	str	r0, [sp, #0x4]
	mov	r0, sl
	mov	r1, r8
	mov	r3, #0x40
	bl	PrintTwoStrings
	ldr	r1, .L220+0x8
	ldrb	r0, [r1]
	bl	PutWindowTilemap
	ldr	r1, .L220+0x8
	ldrb	r0, [r1]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L221:
	.align	2, 0
.L220:
	.word	gStringVar4
	.word	gText_DoubleBattleTourneyResults
	.word	gRecordsWindowId
	.word	gText_Lv502
	.word	gText_OpenLv
	.word	gSaveBlock2Ptr
	.word	0xc9c
	.word	gText_Record
	.word	gText_ClearStreak
	.word	gText_Total
	.word	gText_Championships
	.word	0xca4
	.word	0xc9e
	.word	0xca6
.Lfe21:
	.size	 ShowDomeResultsWindow,.Lfe21-ShowDomeResultsWindow
	.align	2, 0
	.type	 PalacePrintStreak,function
	.thumb_func
PalacePrintStreak:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	add	r4, r2, #0
	ldr	r0, [sp, #0x30]
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0xc]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r0, #0
	ldr	r0, .L224
	mov	sl, r0
	ldrb	r0, [r0]
	str	r7, [sp]
	mov	r1, #0xff
	mov	r9, r1
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r8, r1
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r5, #0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized
	ldr	r0, .L224+0x4
	cmp	r6, r0
	bls	.L223	@cond_branch
	add	r6, r0, #0
.L223:
	ldr	r0, .L224+0x8
	add	r1, r6, #0
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L224+0xc
	ldr	r1, .L224+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r1, sl
	ldrb	r0, [r1]
	str	r7, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r4, #0
	ldr	r3, [sp, #0xc]
	bl	AddTextPrinterParameterized
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L225:
	.align	2, 0
.L224:
	.word	gRecordsWindowId
	.word	0x270f
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_WinStreak
.Lfe22:
	.size	 PalacePrintStreak,.Lfe22-PalacePrintStreak
	.align	2, 0
	.type	 PalacePrintRecordStreak,function
	.thumb_func
PalacePrintRecordStreak:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r5, [sp, #0x10]
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r4, .L227
	ldr	r4, [r4]
	lsr	r1, r1, #0x17
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r0, .L227+0x4
	add	r4, r4, r0
	add	r4, r4, r1
	ldrh	r1, [r4]
	ldr	r0, .L227+0x8
	str	r5, [sp]
	bl	PalacePrintStreak
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L228:
	.align	2, 0
.L227:
	.word	gSaveBlock2Ptr
	.word	0xd58
	.word	gText_Record
.Lfe23:
	.size	 PalacePrintRecordStreak,.Lfe23-PalacePrintRecordStreak
	.align	2, 0
	.type	 PalaceGetWinStreak,function
	.thumb_func
PalaceGetWinStreak:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	ldr	r2, .L233
	ldr	r2, [r2]
	lsr	r1, r1, #0x17
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	mov	r0, #0xd5
	lsl	r0, r0, #0x4
	add	r2, r2, r0
	add	r2, r2, r1
	ldrh	r0, [r2]
	ldr	r1, .L233+0x4
	cmp	r0, r1
	bls	.L232	@cond_branch
	add	r0, r1, #0
.L232:
	pop	{r1}
	bx	r1
.L234:
	.align	2, 0
.L233:
	.word	gSaveBlock2Ptr
	.word	0x270f
.Lfe24:
	.size	 PalaceGetWinStreak,.Lfe24-PalaceGetWinStreak
	.align	2, 0
	.type	 PalacePrintPrevOrCurrentStreak,function
	.thumb_func
PalacePrintPrevOrCurrentStreak:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	lsl	r4, r4, #0x18
	lsr	r7, r4, #0x18
	add	r0, r5, #0
	add	r1, r6, #0
	bl	PalaceGetWinStreak
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r5, #0
	beq	.L238	@cond_branch
	cmp	r5, #0x1
	beq	.L241	@cond_branch
.L238:
	cmp	r6, #0
	beq	.L239	@cond_branch
	mov	r0, #0x20
	b	.L247
.L239:
	mov	r0, #0x10
	b	.L247
.L241:
	cmp	r6, #0
	beq	.L242	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x10
	b	.L247
.L242:
	mov	r0, #0x80
	lsl	r0, r0, #0xf
.L247:
	bl	IsWinStreakActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L245	@cond_branch
	ldr	r0, .L248
	str	r7, [sp]
	add	r1, r4, #0
	mov	r2, r8
	mov	r3, r9
	bl	PalacePrintStreak
	b	.L246
.L249:
	.align	2, 0
.L248:
	.word	gText_Current
.L245:
	ldr	r0, .L250
	str	r7, [sp]
	add	r1, r4, #0
	mov	r2, r8
	mov	r3, r9
	bl	PalacePrintStreak
.L246:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L251:
	.align	2, 0
.L250:
	.word	gText_Prev
.Lfe25:
	.size	 PalacePrintPrevOrCurrentStreak,.Lfe25-PalacePrintPrevOrCurrentStreak
	.align	2, 0
	.type	 ShowPalaceResultsWindow,function
	.thumb_func
ShowPalaceResultsWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L255
	ldr	r0, .L255+0x4
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	DrawStdWindowFrame
	ldrb	r0, [r4]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	cmp	r7, #0
	bne	.L253	@cond_branch
	ldr	r0, .L255+0x8
	ldr	r1, .L255+0xc
	bl	StringExpandPlaceholders
	b	.L254
.L256:
	.align	2, 0
.L255:
	.word	gRecordsWindowId
	.word	sFrontierResultsWindowTemplate
	.word	gStringVar4
	.word	gText_SingleBattleHallResults
.L253:
	ldr	r0, .L257
	ldr	r1, .L257+0x4
	bl	StringExpandPlaceholders
.L254:
	ldr	r0, .L257
	mov	r1, #0x2
	bl	PrintAligned
	ldr	r6, .L257+0x8
	ldrb	r0, [r6]
	ldr	r2, .L257+0xc
	mov	r1, #0x31
	mov	r8, r1
	str	r1, [sp]
	mov	r5, #0xff
	str	r5, [sp, #0x4]
	mov	r4, #0x0
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x10
	bl	AddTextPrinterParameterized
	ldrb	r0, [r6]
	ldr	r2, .L257+0x10
	mov	r1, #0x61
	mov	r9, r1
	str	r1, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x10
	bl	AddTextPrinterParameterized
	mov	r0, #0xa
	bl	PrintHyphens
	mov	r0, r8
	str	r0, [sp]
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0x48
	mov	r3, #0x83
	bl	PalacePrintPrevOrCurrentStreak
	mov	r0, #0x41
	str	r0, [sp]
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0x48
	mov	r3, #0x83
	bl	PalacePrintRecordStreak
	mov	r1, r9
	str	r1, [sp]
	add	r0, r7, #0
	mov	r1, #0x1
	mov	r2, #0x48
	mov	r3, #0x83
	bl	PalacePrintPrevOrCurrentStreak
	mov	r0, #0x71
	str	r0, [sp]
	add	r0, r7, #0
	mov	r1, #0x1
	mov	r2, #0x48
	mov	r3, #0x83
	bl	PalacePrintRecordStreak
	ldrb	r0, [r6]
	bl	PutWindowTilemap
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L258:
	.align	2, 0
.L257:
	.word	gStringVar4
	.word	gText_DoubleBattleHallResults
	.word	gRecordsWindowId
	.word	gText_Lv502
	.word	gText_OpenLv
.Lfe26:
	.size	 ShowPalaceResultsWindow,.Lfe26-ShowPalaceResultsWindow
	.align	2, 0
	.type	 PikeGetWinStreak,function
	.thumb_func
PikeGetWinStreak:
	push	{lr}
	lsl	r0, r0, #0x18
	ldr	r1, .L263
	ldr	r1, [r1]
	lsr	r0, r0, #0x17
	ldr	r2, .L263+0x4
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L263+0x8
	cmp	r0, r1
	bls	.L262	@cond_branch
	add	r0, r1, #0
.L262:
	pop	{r1}
	bx	r1
.L264:
	.align	2, 0
.L263:
	.word	gSaveBlock2Ptr
	.word	0xd8c
	.word	0x270f
.Lfe27:
	.size	 PikeGetWinStreak,.Lfe27-PikeGetWinStreak
	.align	2, 0
	.type	 PikePrintCleared,function
	.thumb_func
PikePrintCleared:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	ip, r0
	add	r7, r1, #0
	add	r4, r2, #0
	ldr	r6, [sp, #0x2c]
	ldr	r5, [sp, #0x30]
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L266
	mov	sl, r0
	ldrb	r0, [r0]
	str	r5, [sp]
	mov	r1, #0xff
	mov	r9, r1
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r8, r1
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r2, ip
	bl	AddTextPrinterParameterized
	ldr	r0, .L266+0x4
	add	r1, r4, #0
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L266+0x8
	add	r0, r4, #0
	add	r1, r7, #0
	bl	StringExpandPlaceholders
	mov	r1, sl
	ldrb	r0, [r1]
	str	r5, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r4, #0
	add	r3, r6, #0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L267:
	.align	2, 0
.L266:
	.word	gRecordsWindowId
	.word	gStringVar1
	.word	gStringVar4
.Lfe28:
	.size	 PikePrintCleared,.Lfe28-PikePrintCleared
	.align	2, 0
	.type	 PikePrintPrevOrCurrentStreak,function
	.thumb_func
PikePrintPrevOrCurrentStreak:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	add	r0, r4, #0
	bl	PikeGetWinStreak
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r4, #0
	beq	.L269	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	b	.L273
.L269:
	mov	r0, #0x80
	lsl	r0, r0, #0x3
.L273:
	bl	IsWinStreakActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L271	@cond_branch
	ldr	r0, .L274
	ldr	r1, .L274+0x4
	str	r5, [sp]
	str	r6, [sp, #0x4]
	add	r2, r7, #0
	mov	r3, r8
	bl	PrintTwoStrings
	b	.L272
.L275:
	.align	2, 0
.L274:
	.word	gText_Current
	.word	gText_RoomsCleared
.L271:
	ldr	r0, .L276
	ldr	r1, .L276+0x4
	str	r5, [sp]
	str	r6, [sp, #0x4]
	add	r2, r7, #0
	mov	r3, r8
	bl	PrintTwoStrings
.L272:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L277:
	.align	2, 0
.L276:
	.word	gText_Prev
	.word	gText_RoomsCleared
.Lfe29:
	.size	 PikePrintPrevOrCurrentStreak,.Lfe29-PikePrintPrevOrCurrentStreak
	.align	2, 0
	.type	 ShowPikeResultsWindow,function
	.thumb_func
ShowPikeResultsWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	ldr	r6, .L279
	ldr	r0, .L279+0x4
	bl	AddWindow
	strb	r0, [r6]
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	DrawStdWindowFrame
	ldrb	r0, [r6]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r4, .L279+0x8
	ldr	r1, .L279+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x0
	bl	PrintAligned
	ldrb	r0, [r6]
	ldr	r2, .L279+0x10
	mov	r1, #0x21
	str	r1, [sp]
	mov	r5, #0xff
	str	r5, [sp, #0x4]
	mov	r4, #0x0
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	ldrb	r0, [r6]
	ldr	r2, .L279+0x14
	mov	r1, #0x61
	str	r1, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	mov	r0, #0xa
	bl	PrintHyphens
	mov	r0, #0x0
	mov	r1, #0x40
	mov	r2, #0x72
	mov	r3, #0x21
	bl	PikePrintPrevOrCurrentStreak
	ldr	r0, .L279+0x18
	mov	sl, r0
	ldr	r7, .L279+0x1c
	ldr	r5, .L279+0x20
	ldr	r0, [r5]
	mov	r1, #0xd9
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldrh	r2, [r0]
	mov	r4, #0x72
	str	r4, [sp]
	mov	r0, #0x31
	str	r0, [sp, #0x4]
	mov	r0, sl
	add	r1, r7, #0
	mov	r3, #0x40
	bl	PikePrintCleared
	ldr	r0, .L279+0x24
	mov	r8, r0
	ldr	r1, .L279+0x28
	mov	r9, r1
	ldr	r0, [r5]
	ldr	r1, .L279+0x2c
	add	r0, r0, r1
	ldrh	r2, [r0]
	str	r4, [sp]
	mov	r0, #0x41
	str	r0, [sp, #0x4]
	mov	r0, r8
	mov	r1, r9
	mov	r3, #0x40
	bl	PikePrintCleared
	mov	r0, #0x1
	mov	r1, #0x40
	mov	r2, #0x72
	mov	r3, #0x61
	bl	PikePrintPrevOrCurrentStreak
	ldr	r0, [r5]
	ldr	r1, .L279+0x30
	add	r0, r0, r1
	ldrh	r2, [r0]
	str	r4, [sp]
	mov	r0, #0x71
	str	r0, [sp, #0x4]
	mov	r0, sl
	add	r1, r7, #0
	mov	r3, #0x40
	bl	PikePrintCleared
	ldr	r0, [r5]
	ldr	r1, .L279+0x34
	add	r0, r0, r1
	ldrh	r2, [r0]
	str	r4, [sp]
	mov	r0, #0x81
	str	r0, [sp, #0x4]
	mov	r0, r8
	mov	r1, r9
	mov	r3, #0x40
	bl	PikePrintCleared
	ldrb	r0, [r6]
	bl	PutWindowTilemap
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L280:
	.align	2, 0
.L279:
	.word	gRecordsWindowId
	.word	sFrontierResultsWindowTemplate
	.word	gStringVar4
	.word	gText_BattleChoiceResults
	.word	gText_Lv502
	.word	gText_OpenLv
	.word	gText_Record
	.word	gText_RoomsCleared
	.word	gSaveBlock2Ptr
	.word	gText_Total
	.word	gText_TimesCleared
	.word	0xd94
	.word	0xd92
	.word	0xd96
.Lfe30:
	.size	 ShowPikeResultsWindow,.Lfe30-ShowPikeResultsWindow
	.align	2, 0
	.type	 ArenaPrintStreak,function
	.thumb_func
ArenaPrintStreak:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	add	r4, r2, #0
	ldr	r0, [sp, #0x30]
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0xc]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r0, #0
	ldr	r0, .L283
	mov	sl, r0
	ldrb	r0, [r0]
	str	r7, [sp]
	mov	r1, #0xff
	mov	r9, r1
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r8, r1
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r5, #0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized
	ldr	r0, .L283+0x4
	cmp	r6, r0
	bls	.L282	@cond_branch
	add	r6, r0, #0
.L282:
	ldr	r0, .L283+0x8
	add	r1, r6, #0
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L283+0xc
	ldr	r1, .L283+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r1, sl
	ldrb	r0, [r1]
	str	r7, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r4, #0
	ldr	r3, [sp, #0xc]
	bl	AddTextPrinterParameterized
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L284:
	.align	2, 0
.L283:
	.word	gRecordsWindowId
	.word	0x270f
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_KOsInARow
.Lfe31:
	.size	 ArenaPrintStreak,.Lfe31-ArenaPrintStreak
	.align	2, 0
	.type	 ArenaPrintRecordStreak,function
	.thumb_func
ArenaPrintRecordStreak:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r1, #0
	add	r5, r2, #0
	lsl	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r1, .L286
	ldr	r1, [r1]
	lsr	r0, r0, #0x17
	ldr	r2, .L286+0x4
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r1, [r1]
	ldr	r0, .L286+0x8
	str	r3, [sp]
	add	r2, r4, #0
	add	r3, r5, #0
	bl	ArenaPrintStreak
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L287:
	.align	2, 0
.L286:
	.word	gSaveBlock2Ptr
	.word	0xd66
	.word	gText_Record
.Lfe32:
	.size	 ArenaPrintRecordStreak,.Lfe32-ArenaPrintRecordStreak
	.align	2, 0
	.type	 ArenaGetWinStreak,function
	.thumb_func
ArenaGetWinStreak:
	push	{lr}
	lsl	r0, r0, #0x18
	ldr	r1, .L292
	ldr	r1, [r1]
	lsr	r0, r0, #0x17
	ldr	r2, .L292+0x4
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L292+0x8
	cmp	r0, r1
	bls	.L291	@cond_branch
	add	r0, r1, #0
.L291:
	pop	{r1}
	bx	r1
.L293:
	.align	2, 0
.L292:
	.word	gSaveBlock2Ptr
	.word	0xd62
	.word	0x270f
.Lfe33:
	.size	 ArenaGetWinStreak,.Lfe33-ArenaGetWinStreak
	.align	2, 0
	.type	 ArenaPrintPrevOrCurrentStreak,function
	.thumb_func
ArenaPrintPrevOrCurrentStreak:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	add	r0, r4, #0
	bl	ArenaGetWinStreak
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r4, #0
	beq	.L295	@cond_branch
	mov	r0, #0x80
	b	.L299
.L295:
	mov	r0, #0x40
.L299:
	bl	IsWinStreakActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L297	@cond_branch
	ldr	r0, .L300
	str	r6, [sp]
	add	r1, r5, #0
	add	r2, r7, #0
	mov	r3, r8
	bl	ArenaPrintStreak
	b	.L298
.L301:
	.align	2, 0
.L300:
	.word	gText_Current
.L297:
	ldr	r0, .L302
	str	r6, [sp]
	add	r1, r5, #0
	add	r2, r7, #0
	mov	r3, r8
	bl	ArenaPrintStreak
.L298:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L303:
	.align	2, 0
.L302:
	.word	gText_Prev
.Lfe34:
	.size	 ArenaPrintPrevOrCurrentStreak,.Lfe34-ArenaPrintPrevOrCurrentStreak
	.align	2, 0
	.type	 ShowArenaResultsWindow,function
	.thumb_func
ShowArenaResultsWindow:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	ldr	r5, .L305
	ldr	r0, .L305+0x4
	bl	AddWindow
	strb	r0, [r5]
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	DrawStdWindowFrame
	ldrb	r0, [r5]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0xa
	bl	PrintHyphens
	ldr	r4, .L305+0x8
	ldr	r1, .L305+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x2
	bl	PrintAligned
	ldrb	r0, [r5]
	ldr	r2, .L305+0x10
	mov	r1, #0x31
	str	r1, [sp]
	mov	r6, #0xff
	str	r6, [sp, #0x4]
	mov	r4, #0x0
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x10
	bl	AddTextPrinterParameterized
	ldrb	r0, [r5]
	ldr	r2, .L305+0x14
	mov	r1, #0x61
	str	r1, [sp]
	str	r6, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x10
	bl	AddTextPrinterParameterized
	mov	r0, #0x0
	mov	r1, #0x48
	mov	r2, #0x7e
	mov	r3, #0x31
	bl	ArenaPrintPrevOrCurrentStreak
	mov	r0, #0x0
	mov	r1, #0x48
	mov	r2, #0x7e
	mov	r3, #0x41
	bl	ArenaPrintRecordStreak
	mov	r0, #0x1
	mov	r1, #0x48
	mov	r2, #0x7e
	mov	r3, #0x61
	bl	ArenaPrintPrevOrCurrentStreak
	mov	r0, #0x1
	mov	r1, #0x48
	mov	r2, #0x7e
	mov	r3, #0x71
	bl	ArenaPrintRecordStreak
	ldrb	r0, [r5]
	bl	PutWindowTilemap
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L306:
	.align	2, 0
.L305:
	.word	gRecordsWindowId
	.word	sFrontierResultsWindowTemplate
	.word	gStringVar4
	.word	gText_SetKOTourneyResults
	.word	gText_Lv502
	.word	gText_OpenLv
.Lfe35:
	.size	 ShowArenaResultsWindow,.Lfe35-ShowArenaResultsWindow
	.align	2, 0
	.type	 FactoryPrintStreak,function
	.thumb_func
FactoryPrintStreak:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	mov	ip, r0
	ldr	r4, [sp, #0x38]
	ldr	r5, [sp, #0x3c]
	ldr	r0, [sp, #0x40]
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r2, [sp, #0xc]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x10]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r0, .L309
	mov	sl, r0
	ldrb	r0, [r0]
	str	r6, [sp]
	mov	r1, #0xff
	mov	r9, r1
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r8, r1
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r2, ip
	bl	AddTextPrinterParameterized
	ldr	r0, .L309+0x4
	cmp	r7, r0
	bls	.L308	@cond_branch
	add	r7, r0, #0
.L308:
	ldr	r5, .L309+0x8
	add	r0, r5, #0
	add	r1, r7, #0
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L309+0xc
	ldr	r1, .L309+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r1, sl
	ldrb	r0, [r1]
	str	r6, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r4, #0
	ldr	r3, [sp, #0x10]
	bl	AddTextPrinterParameterized
	add	r0, r5, #0
	ldr	r1, [sp, #0xc]
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L309+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r1, sl
	ldrb	r0, [r1]
	str	r6, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r4, #0
	ldr	r3, [sp, #0x14]
	bl	AddTextPrinterParameterized
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L310:
	.align	2, 0
.L309:
	.word	gRecordsWindowId
	.word	0x270f
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_WinStreak
	.word	gText_TimesVar1
.Lfe36:
	.size	 FactoryPrintStreak,.Lfe36-FactoryPrintStreak
	.align	2, 0
	.type	 FactoryPrintRecordStreak,function
	.thumb_func
FactoryPrintRecordStreak:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	add	r6, r2, #0
	ldr	r4, [sp, #0x24]
	ldr	r5, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r2, .L312
	ldr	r2, [r2]
	lsr	r1, r1, #0x17
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r7, .L312+0x4
	add	r0, r2, r7
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r8, r0
	ldr	r0, .L312+0x8
	add	r2, r2, r0
	add	r2, r2, r1
	ldrh	r2, [r2]
	ldr	r0, .L312+0xc
	str	r3, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, r8
	add	r3, r6, #0
	bl	FactoryPrintStreak
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L313:
	.align	2, 0
.L312:
	.word	gSaveBlock2Ptr
	.word	0xd72
	.word	0xd82
	.word	gText_Record
.Lfe37:
	.size	 FactoryPrintRecordStreak,.Lfe37-FactoryPrintRecordStreak
	.align	2, 0
	.type	 FactoryGetWinStreak,function
	.thumb_func
FactoryGetWinStreak:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	ldr	r2, .L318
	ldr	r2, [r2]
	lsr	r1, r1, #0x17
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r0, .L318+0x4
	add	r2, r2, r0
	add	r2, r2, r1
	ldrh	r0, [r2]
	ldr	r1, .L318+0x8
	cmp	r0, r1
	bls	.L317	@cond_branch
	add	r0, r1, #0
.L317:
	pop	{r1}
	bx	r1
.L319:
	.align	2, 0
.L318:
	.word	gSaveBlock2Ptr
	.word	0xd6a
	.word	0x270f
.Lfe38:
	.size	 FactoryGetWinStreak,.Lfe38-FactoryGetWinStreak
	.align	2, 0
	.type	 FactoryGetRentsCount,function
	.thumb_func
FactoryGetRentsCount:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	ldr	r2, .L324
	ldr	r2, [r2]
	lsr	r1, r1, #0x17
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r0, .L324+0x4
	add	r2, r2, r0
	add	r2, r2, r1
	ldrh	r0, [r2]
	ldr	r1, .L324+0x8
	cmp	r0, r1
	bls	.L323	@cond_branch
	add	r0, r1, #0
.L323:
	pop	{r1}
	bx	r1
.L325:
	.align	2, 0
.L324:
	.word	gSaveBlock2Ptr
	.word	0xd7a
	.word	0x270f
.Lfe39:
	.size	 FactoryGetRentsCount,.Lfe39-FactoryGetRentsCount
	.align	2, 0
	.type	 FactoryPrintPrevOrCurrentStreak,function
	.thumb_func
FactoryPrintPrevOrCurrentStreak:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x30]
	ldr	r5, [sp, #0x34]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0xc]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r9, r4
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	sl, r5
	add	r0, r6, #0
	add	r1, r7, #0
	bl	FactoryGetWinStreak
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r6, #0
	add	r1, r7, #0
	bl	FactoryGetRentsCount
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r6, #0
	beq	.L329	@cond_branch
	cmp	r6, #0x1
	beq	.L332	@cond_branch
.L329:
	cmp	r7, #0
	beq	.L330	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	b	.L338
.L330:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	b	.L338
.L332:
	cmp	r7, #0
	beq	.L333	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	b	.L338
.L333:
	mov	r0, #0x80
	lsl	r0, r0, #0x11
.L338:
	bl	IsWinStreakActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L336	@cond_branch
	ldr	r0, .L339
	mov	r1, r8
	str	r1, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	mov	r1, sl
	str	r1, [sp, #0x8]
	add	r1, r5, #0
	add	r2, r4, #0
	ldr	r3, [sp, #0xc]
	bl	FactoryPrintStreak
	b	.L337
.L340:
	.align	2, 0
.L339:
	.word	gText_Current
.L336:
	ldr	r0, .L341
	mov	r1, r8
	str	r1, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	mov	r1, sl
	str	r1, [sp, #0x8]
	add	r1, r5, #0
	add	r2, r4, #0
	ldr	r3, [sp, #0xc]
	bl	FactoryPrintStreak
.L337:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L342:
	.align	2, 0
.L341:
	.word	gText_Prev
.Lfe40:
	.size	 FactoryPrintPrevOrCurrentStreak,.Lfe40-FactoryPrintPrevOrCurrentStreak
	.align	2, 0
	.type	 ShowFactoryResultsWindow,function
	.thumb_func
ShowFactoryResultsWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L346
	ldr	r0, .L346+0x4
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	DrawStdWindowFrame
	ldrb	r0, [r4]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	cmp	r7, #0
	bne	.L344	@cond_branch
	ldr	r0, .L346+0x8
	ldr	r1, .L346+0xc
	bl	StringExpandPlaceholders
	b	.L345
.L347:
	.align	2, 0
.L346:
	.word	gRecordsWindowId
	.word	sFrontierResultsWindowTemplate
	.word	gStringVar4
	.word	gText_BattleSwapSingleResults
.L344:
	ldr	r0, .L348
	ldr	r1, .L348+0x4
	bl	StringExpandPlaceholders
.L345:
	ldr	r0, .L348
	mov	r1, #0x0
	bl	PrintAligned
	ldr	r0, .L348+0x8
	mov	r8, r0
	ldrb	r0, [r0]
	ldr	r2, .L348+0xc
	mov	r6, #0x21
	str	r6, [sp]
	mov	r5, #0xff
	str	r5, [sp, #0x4]
	mov	r4, #0x0
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	mov	r1, r8
	ldrb	r0, [r1]
	ldr	r2, .L348+0x10
	str	r6, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x98
	bl	AddTextPrinterParameterized
	mov	r1, r8
	ldrb	r0, [r1]
	ldr	r2, .L348+0x14
	mov	r1, #0x61
	str	r1, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	mov	r0, #0xa
	bl	PrintHyphens
	mov	r4, #0x9e
	str	r4, [sp]
	mov	r0, #0x31
	str	r0, [sp, #0x4]
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0x8
	mov	r3, #0x40
	bl	FactoryPrintPrevOrCurrentStreak
	str	r4, [sp]
	mov	r0, #0x41
	str	r0, [sp, #0x4]
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0x8
	mov	r3, #0x40
	bl	FactoryPrintRecordStreak
	str	r4, [sp]
	mov	r0, #0x71
	str	r0, [sp, #0x4]
	add	r0, r7, #0
	mov	r1, #0x1
	mov	r2, #0x8
	mov	r3, #0x40
	bl	FactoryPrintPrevOrCurrentStreak
	str	r4, [sp]
	mov	r0, #0x81
	str	r0, [sp, #0x4]
	add	r0, r7, #0
	mov	r1, #0x1
	mov	r2, #0x8
	mov	r3, #0x40
	bl	FactoryPrintRecordStreak
	mov	r1, r8
	ldrb	r0, [r1]
	bl	PutWindowTilemap
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L349:
	.align	2, 0
.L348:
	.word	gStringVar4
	.word	gText_BattleSwapDoubleResults
	.word	gRecordsWindowId
	.word	gText_Lv502
	.word	gText_RentalSwap
	.word	gText_OpenLv
.Lfe41:
	.size	 ShowFactoryResultsWindow,.Lfe41-ShowFactoryResultsWindow
	.align	2, 0
	.type	 PyramidPrintStreak,function
	.thumb_func
PyramidPrintStreak:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	add	r4, r2, #0
	ldr	r0, [sp, #0x30]
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0xc]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r0, #0
	ldr	r0, .L352
	mov	sl, r0
	ldrb	r0, [r0]
	str	r7, [sp]
	mov	r1, #0xff
	mov	r9, r1
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r8, r1
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r5, #0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized
	ldr	r0, .L352+0x4
	cmp	r6, r0
	bls	.L351	@cond_branch
	add	r6, r0, #0
.L351:
	ldr	r0, .L352+0x8
	add	r1, r6, #0
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L352+0xc
	ldr	r1, .L352+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r1, sl
	ldrb	r0, [r1]
	str	r7, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r4, #0
	ldr	r3, [sp, #0xc]
	bl	AddTextPrinterParameterized
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L353:
	.align	2, 0
.L352:
	.word	gRecordsWindowId
	.word	0x270f
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_FloorsCleared
.Lfe42:
	.size	 PyramidPrintStreak,.Lfe42-PyramidPrintStreak
	.align	2, 0
	.type	 PyramidPrintRecordStreak,function
	.thumb_func
PyramidPrintRecordStreak:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r1, #0
	add	r5, r2, #0
	lsl	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r1, .L355
	ldr	r1, [r1]
	lsr	r0, r0, #0x17
	ldr	r2, .L355+0x4
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r1, [r1]
	ldr	r0, .L355+0x8
	str	r3, [sp]
	add	r2, r4, #0
	add	r3, r5, #0
	bl	PyramidPrintStreak
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L356:
	.align	2, 0
.L355:
	.word	gSaveBlock2Ptr
	.word	0xda6
	.word	gText_Record
.Lfe43:
	.size	 PyramidPrintRecordStreak,.Lfe43-PyramidPrintRecordStreak
	.align	2, 0
	.type	 PyramidGetWinStreak,function
	.thumb_func
PyramidGetWinStreak:
	push	{lr}
	lsl	r0, r0, #0x18
	ldr	r1, .L361
	ldr	r1, [r1]
	lsr	r0, r0, #0x17
	ldr	r2, .L361+0x4
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L361+0x8
	cmp	r0, r1
	bls	.L360	@cond_branch
	add	r0, r1, #0
.L360:
	pop	{r1}
	bx	r1
.L362:
	.align	2, 0
.L361:
	.word	gSaveBlock2Ptr
	.word	0xda2
	.word	0x270f
.Lfe44:
	.size	 PyramidGetWinStreak,.Lfe44-PyramidGetWinStreak
	.align	2, 0
	.type	 PyramidPrintPrevOrCurrentStreak,function
	.thumb_func
PyramidPrintPrevOrCurrentStreak:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	add	r0, r4, #0
	bl	PyramidGetWinStreak
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r4, #0
	beq	.L364	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	b	.L368
.L364:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
.L368:
	bl	IsWinStreakActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L366	@cond_branch
	ldr	r0, .L369
	str	r6, [sp]
	add	r1, r5, #0
	add	r2, r7, #0
	mov	r3, r8
	bl	PyramidPrintStreak
	b	.L367
.L370:
	.align	2, 0
.L369:
	.word	gText_Current
.L366:
	ldr	r0, .L371
	str	r6, [sp]
	add	r1, r5, #0
	add	r2, r7, #0
	mov	r3, r8
	bl	PyramidPrintStreak
.L367:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L372:
	.align	2, 0
.L371:
	.word	gText_Prev
.Lfe45:
	.size	 PyramidPrintPrevOrCurrentStreak,.Lfe45-PyramidPrintPrevOrCurrentStreak
	.align	2, 0
	.type	 ShowPyramidResultsWindow,function
	.thumb_func
ShowPyramidResultsWindow:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	ldr	r5, .L374
	ldr	r0, .L374+0x4
	bl	AddWindow
	strb	r0, [r5]
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	DrawStdWindowFrame
	ldrb	r0, [r5]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r4, .L374+0x8
	ldr	r1, .L374+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x2
	bl	PrintAligned
	ldrb	r0, [r5]
	ldr	r2, .L374+0x10
	mov	r1, #0x31
	str	r1, [sp]
	mov	r6, #0xff
	str	r6, [sp, #0x4]
	mov	r4, #0x0
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	ldrb	r0, [r5]
	ldr	r2, .L374+0x14
	mov	r1, #0x61
	str	r1, [sp]
	str	r6, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	mov	r0, #0xa
	bl	PrintHyphens
	mov	r0, #0x0
	mov	r1, #0x40
	mov	r2, #0x6f
	mov	r3, #0x31
	bl	PyramidPrintPrevOrCurrentStreak
	mov	r0, #0x0
	mov	r1, #0x40
	mov	r2, #0x6f
	mov	r3, #0x41
	bl	PyramidPrintRecordStreak
	mov	r0, #0x1
	mov	r1, #0x40
	mov	r2, #0x6f
	mov	r3, #0x61
	bl	PyramidPrintPrevOrCurrentStreak
	mov	r0, #0x1
	mov	r1, #0x40
	mov	r2, #0x6f
	mov	r3, #0x71
	bl	PyramidPrintRecordStreak
	ldrb	r0, [r5]
	bl	PutWindowTilemap
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L375:
	.align	2, 0
.L374:
	.word	gRecordsWindowId
	.word	sFrontierResultsWindowTemplate
	.word	gStringVar4
	.word	gText_BattleQuestResults
	.word	gText_Lv502
	.word	gText_OpenLv
.Lfe46:
	.size	 ShowPyramidResultsWindow,.Lfe46-ShowPyramidResultsWindow
	.align	2, 0
	.type	 ShowLinkContestResultsWindow,function
	.thumb_func
ShowLinkContestResultsWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0xc
	ldr	r4, .L387
	ldr	r0, .L387+0x4
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	DrawStdWindowFrame
	ldrb	r0, [r4]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r0, .L387+0x8
	mov	r9, r0
	ldr	r1, .L387+0xc
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, r9
	mov	r2, #0xd0
	bl	GetStringCenterAlignXOffset
	add	r3, r0, #0
	ldrb	r0, [r4]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, #0x1
	str	r1, [sp]
	mov	r6, #0xff
	str	r6, [sp, #0x4]
	mov	r5, #0x0
	str	r5, [sp, #0x8]
	mov	r2, r9
	bl	AddTextPrinterParameterized
	ldr	r7, .L387+0x10
	mov	r0, #0x1
	add	r1, r7, #0
	mov	r2, #0x26
	bl	GetStringRightAlignXOffset
	add	r3, r0, #0
	add	r3, r3, #0x32
	ldrb	r0, [r4]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, #0x19
	mov	r8, r1
	str	r1, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r7, #0
	bl	AddTextPrinterParameterized
	ldr	r7, .L387+0x14
	mov	r0, #0x1
	add	r1, r7, #0
	mov	r2, #0x26
	bl	GetStringRightAlignXOffset
	add	r3, r0, #0
	add	r3, r3, #0x58
	ldrb	r0, [r4]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r2, r8
	str	r2, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r7, #0
	bl	AddTextPrinterParameterized
	ldr	r7, .L387+0x18
	mov	r0, #0x1
	add	r1, r7, #0
	mov	r2, #0x26
	bl	GetStringRightAlignXOffset
	add	r3, r0, #0
	add	r3, r3, #0x7e
	ldrb	r0, [r4]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, r8
	str	r1, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r7, #0
	bl	AddTextPrinterParameterized
	ldr	r7, .L387+0x1c
	mov	r0, #0x1
	add	r1, r7, #0
	mov	r2, #0x26
	bl	GetStringRightAlignXOffset
	add	r3, r0, #0
	add	r3, r3, #0xa4
	ldrb	r0, [r4]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r2, r8
	str	r2, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r7, #0
	bl	AddTextPrinterParameterized
	ldrb	r0, [r4]
	ldr	r2, .L387+0x20
	mov	r1, #0x29
	str	r1, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x6
	bl	AddTextPrinterParameterized
	ldrb	r0, [r4]
	ldr	r2, .L387+0x24
	mov	r1, #0x39
	str	r1, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x6
	bl	AddTextPrinterParameterized
	ldrb	r0, [r4]
	ldr	r2, .L387+0x28
	mov	r1, #0x49
	str	r1, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x6
	bl	AddTextPrinterParameterized
	ldrb	r0, [r4]
	ldr	r2, .L387+0x2c
	mov	r1, #0x59
	str	r1, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x6
	bl	AddTextPrinterParameterized
	ldrb	r0, [r4]
	ldr	r2, .L387+0x30
	mov	r1, #0x69
	str	r1, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x6
	bl	AddTextPrinterParameterized
	mov	r1, #0x0
.L380:
	mov	r5, #0x0
	add	r0, r1, #0x1
	mov	r8, r0
	lsl	r0, r1, #0x1c
	mov	r2, #0xa4
	lsl	r2, r2, #0x16
	add	r0, r0, r2
	lsr	r7, r0, #0x18
	lsl	r4, r1, #0x3
.L384:
	ldr	r0, .L387+0x34
	ldr	r0, [r0]
	ldr	r1, .L387+0x38
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r1, [r0]
	mov	r0, r9
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r6, .L387
	ldrb	r0, [r6]
	mov	r1, #0x26
	mov	r3, r5
	mul	r3, r3, r1
	add	r3, r3, #0x40
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r7, [sp]
	mov	r1, #0xff
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r2, r9
	bl	AddTextPrinterParameterized
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L384	@cond_branch
	mov	r1, r8
	cmp	r1, #0x4
	ble	.L380	@cond_branch
	ldrb	r0, [r6]
	bl	PutWindowTilemap
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L388:
	.align	2, 0
.L387:
	.word	gRecordsWindowId
	.word	sLinkContestResultsWindowTemplate
	.word	gStringVar4
	.word	gText_LinkContestResults
	.word	gText_1st
	.word	gText_2nd
	.word	gText_3rd
	.word	gText_4th
	.word	gText_Cool
	.word	gText_Beauty
	.word	gText_Cute
	.word	gText_Smart
	.word	gText_Tough
	.word	gSaveBlock2Ptr
	.word	0x5ac
.Lfe47:
	.size	 ShowLinkContestResultsWindow,.Lfe47-ShowLinkContestResultsWindow
	.align	2, 0
	.type	 CheckPutFrontierTVShowOnAir,function
	.thumb_func
CheckPutFrontierTVShowOnAir:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	ldr	r0, .L429
	ldr	r0, [r0]
	ldr	r1, .L429+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r7, r0, #0x1e
	ldr	r0, .L429+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L429+0xc
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	cmp	r4, #0x6
	bls	.LCB4178
	b	.L390	@long jump
.LCB4178:
	lsl	r0, r4, #0x2
	ldr	r1, .L429+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L430:
	.align	2, 0
.L429:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	0x40cf
	.word	0x40ce
	.word	.L427
	.align	2, 0
	.align	2, 0
.L427:
	.word	.L391
	.word	.L403
	.word	.L408
	.word	.L413
	.word	.L416
	.word	.L421
	.word	.L424
.L391:
	ldr	r2, .L431
	mov	r9, r2
	ldr	r0, [r2]
	lsl	r3, r7, #0x1
	mov	sl, r3
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, sl
	str	r1, [sp, #0x20]
	ldr	r3, .L431+0x4
	add	r1, r0, r3
	ldr	r2, [sp, #0x20]
	add	r1, r1, r2
	add	r3, r3, #0x10
	add	r0, r0, r3
	add	r0, r0, r2
	ldrh	r1, [r1]
	ldrh	r2, [r0]
	cmp	r1, r2
	bhi	.LCB4227
	b	.L390	@long jump
.LCB4227:
	strh	r1, [r0]
	mov	r3, r8
	cmp	r3, #0x3
	bne	.L393	@cond_branch
	ldr	r6, .L431+0x8
	add	r6, r6, #0x25
	ldrb	r0, [r6]
	mov	r4, #0x1
	eor	r0, r0, r4
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r5, .L431+0xc
	add	r1, r1, r5
	mov	r0, sp
	bl	StringCopy
	mov	r0, sp
	bl	StripExtCtrlCodes
	lsl	r1, r7, #0x3
	ldr	r0, .L431+0x10
	add	r1, r1, r0
	mov	r2, r9
	ldr	r0, [r2]
	add	r0, r0, r1
	mov	r1, sp
	bl	StringCopy
	ldrb	r0, [r6]
	eor	r4, r4, r0
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	sub	r5, r5, #0x4
	add	r0, r0, r5
	ldr	r0, [r0]
	lsl	r2, r7, #0x2
	ldr	r3, .L431+0x14
	add	r2, r2, r3
	mov	r7, r9
	ldr	r1, [r7]
	add	r1, r1, r2
	bl	SetTrainerId
.L393:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, .L431+0x4
	add	r0, r0, r2
	ldr	r3, [sp, #0x20]
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, #0x1
	bhi	.LCB4293
	b	.L390	@long jump
.LCB4293:
	bl	ShouldAirFrontierTVShow
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4299
	b	.L390	@long jump
.LCB4299:
	mov	r7, r8
	cmp	r7, #0x1
	beq	.L397	@cond_branch
	cmp	r7, #0x1
	bgt	.L402	@cond_branch
	cmp	r7, #0
	beq	.L396	@cond_branch
	b	.L390
.L432:
	.align	2, 0
.L431:
	.word	gSaveBlock2Ptr
	.word	0xc68
	.word	gBattleScripting
	.word	gLinkPlayers+0x8
	.word	0xe69
	.word	0xe79
.L402:
	mov	r0, r8
	cmp	r0, #0x2
	beq	.L398	@cond_branch
	cmp	r0, #0x3
	beq	.L399	@cond_branch
	b	.L390
.L396:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, .L433
	add	r0, r0, r2
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r1, #0x1
	bl	TryPutFrontierTVShowOnAir
	b	.L390
.L434:
	.align	2, 0
.L433:
	.word	0xc68
.L397:
	mov	r3, r9
	ldr	r0, [r3]
	mov	r1, sl
	add	r1, r1, #0x4
	ldr	r7, .L435
	add	r0, r0, r7
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0x2
	bl	TryPutFrontierTVShowOnAir
	b	.L390
.L436:
	.align	2, 0
.L435:
	.word	0xc68
.L398:
	mov	r1, r9
	ldr	r0, [r1]
	mov	r1, sl
	add	r1, r1, #0x8
	ldr	r2, .L437
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0x3
	bl	TryPutFrontierTVShowOnAir
	b	.L390
.L438:
	.align	2, 0
.L437:
	.word	0xc68
.L399:
	mov	r3, r9
	ldr	r0, [r3]
	mov	r1, sl
	add	r1, r1, #0xc
	ldr	r7, .L439
	add	r0, r0, r7
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0x4
	bl	TryPutFrontierTVShowOnAir
	b	.L390
.L440:
	.align	2, 0
.L439:
	.word	0xc68
.L403:
	ldr	r6, .L441
	ldr	r0, [r6]
	lsl	r7, r7, #0x1
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r4, r7, r1
	ldr	r5, .L441+0x4
	add	r1, r0, r5
	add	r1, r1, r4
	ldr	r3, .L441+0x8
	add	r0, r0, r3
	add	r0, r0, r4
	ldrh	r2, [r1]
	ldrh	r3, [r0]
	cmp	r2, r3
	bhi	.LCB4431
	b	.L390	@long jump
.LCB4431:
	strh	r2, [r0]
	ldrh	r0, [r1]
	cmp	r0, #0x1
	bhi	.LCB4438
	b	.L390	@long jump
.LCB4438:
	bl	ShouldAirFrontierTVShow
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4444
	b	.L390	@long jump
.LCB4444:
	mov	r0, r8
	cmp	r0, #0
	bne	.L406	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, #0x5
	bl	TryPutFrontierTVShowOnAir
	b	.L390
.L442:
	.align	2, 0
.L441:
	.word	gSaveBlock2Ptr
	.word	0xc94
	.word	0xc9c
.L406:
	ldr	r0, [r6]
	add	r0, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r1, #0x6
	bl	TryPutFrontierTVShowOnAir
	b	.L390
.L408:
	ldr	r6, .L443
	ldr	r0, [r6]
	lsl	r7, r7, #0x1
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r4, r7, r1
	mov	r5, #0xd5
	lsl	r5, r5, #0x4
	add	r1, r0, r5
	add	r1, r1, r4
	ldr	r3, .L443+0x4
	add	r0, r0, r3
	add	r0, r0, r4
	ldrh	r2, [r1]
	ldrh	r3, [r0]
	cmp	r2, r3
	bhi	.LCB4499
	b	.L390	@long jump
.LCB4499:
	strh	r2, [r0]
	ldrh	r0, [r1]
	cmp	r0, #0x1
	bhi	.LCB4506
	b	.L390	@long jump
.LCB4506:
	bl	ShouldAirFrontierTVShow
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4512
	b	.L390	@long jump
.LCB4512:
	mov	r0, r8
	cmp	r0, #0
	bne	.L411	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, #0xb
	bl	TryPutFrontierTVShowOnAir
	b	.L390
.L444:
	.align	2, 0
.L443:
	.word	gSaveBlock2Ptr
	.word	0xd58
.L411:
	ldr	r0, [r6]
	add	r0, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r1, #0xc
	bl	TryPutFrontierTVShowOnAir
	b	.L390
.L413:
	ldr	r6, .L445
	ldr	r1, [r6]
	lsl	r4, r7, #0x1
	ldr	r5, .L445+0x4
	add	r0, r1, r5
	add	r0, r0, r4
	ldr	r2, .L445+0x8
	add	r1, r1, r2
	add	r1, r1, r4
	ldrh	r2, [r0]
	ldrh	r3, [r1]
	cmp	r2, r3
	bhi	.LCB4562
	b	.L390	@long jump
.LCB4562:
	strh	r2, [r1]
	ldrh	r0, [r0]
	cmp	r0, #0x1
	bhi	.LCB4569
	b	.L390	@long jump
.LCB4569:
	bl	ShouldAirFrontierTVShow
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4575
	b	.L390	@long jump
.LCB4575:
	ldr	r0, [r6]
	add	r0, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r1, #0xa
	bl	TryPutFrontierTVShowOnAir
	b	.L390
.L446:
	.align	2, 0
.L445:
	.word	gSaveBlock2Ptr
	.word	0xd62
	.word	0xd66
.L416:
	ldr	r6, .L447
	ldr	r2, [r6]
	lsl	r7, r7, #0x1
	mov	r9, r7
	mov	r7, r8
	lsl	r0, r7, #0x2
	mov	r1, r9
	add	r4, r1, r0
	ldr	r5, .L447+0x4
	add	r0, r2, r5
	add	r3, r0, r4
	ldr	r7, .L447+0x8
	add	r0, r2, r7
	add	r0, r0, r4
	ldrh	r1, [r3]
	ldrh	r7, [r0]
	cmp	r1, r7
	bls	.L390	@cond_branch
	strh	r1, [r0]
	ldr	r0, .L447+0xc
	add	r1, r2, r0
	add	r1, r1, r4
	ldr	r7, .L447+0x10
	add	r0, r2, r7
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldrh	r0, [r3]
	cmp	r0, #0x1
	bls	.L390	@cond_branch
	bl	ShouldAirFrontierTVShow
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L390	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	bne	.L419	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r5
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r1, #0x7
	bl	TryPutFrontierTVShowOnAir
	b	.L390
.L448:
	.align	2, 0
.L447:
	.word	gSaveBlock2Ptr
	.word	0xd6a
	.word	0xd72
	.word	0xd82
	.word	0xd7a
.L419:
	ldr	r0, [r6]
	add	r0, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r1, #0x8
	bl	TryPutFrontierTVShowOnAir
	b	.L390
.L421:
	ldr	r6, .L449
	ldr	r1, [r6]
	lsl	r4, r7, #0x1
	ldr	r5, .L449+0x4
	add	r0, r1, r5
	add	r0, r0, r4
	mov	r2, #0xd9
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	add	r1, r1, r4
	ldrh	r2, [r0]
	ldrh	r3, [r1]
	cmp	r2, r3
	bls	.L390	@cond_branch
	strh	r2, [r1]
	ldrh	r0, [r0]
	cmp	r0, #0x1
	bls	.L390	@cond_branch
	bl	ShouldAirFrontierTVShow
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L390	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r1, #0x9
	bl	TryPutFrontierTVShowOnAir
	b	.L390
.L450:
	.align	2, 0
.L449:
	.word	gSaveBlock2Ptr
	.word	0xd8c
.L424:
	ldr	r6, .L451
	ldr	r1, [r6]
	lsl	r4, r7, #0x1
	ldr	r5, .L451+0x4
	add	r0, r1, r5
	add	r0, r0, r4
	ldr	r7, .L451+0x8
	add	r1, r1, r7
	add	r1, r1, r4
	ldrh	r2, [r0]
	ldrh	r3, [r1]
	cmp	r2, r3
	bls	.L390	@cond_branch
	strh	r2, [r1]
	ldrh	r0, [r0]
	cmp	r0, #0x1
	bls	.L390	@cond_branch
	bl	ShouldAirFrontierTVShow
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L390	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r1, #0xd
	bl	TryPutFrontierTVShowOnAir
.L390:
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L452:
	.align	2, 0
.L451:
	.word	gSaveBlock2Ptr
	.word	0xda2
	.word	0xda6
.Lfe48:
	.size	 CheckPutFrontierTVShowOnAir,.Lfe48-CheckPutFrontierTVShowOnAir
	.align	2, 0
	.type	 Script_GetFrontierBrainStatus,function
	.thumb_func
Script_GetFrontierBrainStatus:
	push	{r4, lr}
	ldr	r0, .L454
	bl	VarGet
	ldr	r4, .L454+0x4
	bl	GetFrontierBrainStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L455:
	.align	2, 0
.L454:
	.word	0x40cf
	.word	gSpecialVar_Result
.Lfe49:
	.size	 Script_GetFrontierBrainStatus,.Lfe49-Script_GetFrontierBrainStatus
	.align	2, 0
	.globl	GetFrontierBrainStatus
	.type	 GetFrontierBrainStatus,function
	.thumb_func
GetFrontierBrainStatus:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L472
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L472+0x4
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	GetCurrentFacilityWinStreak
	lsl	r0, r0, #0x10
	ldr	r1, .L472+0x8
	mov	r9, r1
	lsl	r7, r6, #0x2
	add	r1, r1, #0x3
	add	r1, r7, r1
	lsr	r0, r0, #0x10
	ldrb	r1, [r1]
	add	r5, r0, r1
	cmp	r4, #0
	beq	.L457	@cond_branch
	mov	r0, #0x0
	b	.L470
.L473:
	.align	2, 0
.L472:
	.word	0x40cf
	.word	0x40ce
	.word	sFrontierBrainStreakAppearances
.L457:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	GetPlayerSymbolCountForFacility
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	blt	.L463	@cond_branch
	cmp	r1, #0x1
	bgt	.L463	@cond_branch
	add	r0, r1, r7
	add	r0, r0, r9
	ldrb	r0, [r0]
	cmp	r5, r0
	bne	.L458	@cond_branch
	add	r1, r1, #0x1
	mov	r8, r1
	b	.L458
.L463:
	ldr	r1, .L474
	lsl	r2, r6, #0x2
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r5, r0
	bne	.L464	@cond_branch
	mov	r0, #0x3
	b	.L471
.L475:
	.align	2, 0
.L474:
	.word	sFrontierBrainStreakAppearances
.L464:
	add	r0, r1, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r5, r0
	bne	.L466	@cond_branch
	mov	r1, #0x4
	mov	r8, r1
	b	.L458
.L466:
	cmp	r5, r0
	ble	.L458	@cond_branch
	sub	r0, r5, r0
	add	r1, r1, #0x2
	add	r1, r2, r1
	ldrb	r1, [r1]
	bl	__modsi3
	cmp	r0, #0
	bne	.L458	@cond_branch
	mov	r0, #0x4
.L471:
	mov	r8, r0
.L458:
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
.L470:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe50:
	.size	 GetFrontierBrainStatus,.Lfe50-GetFrontierBrainStatus
	.align	2, 0
	.globl	CopyFrontierTrainerText
	.type	 CopyFrontierTrainerText,function
	.thumb_func
CopyFrontierTrainerText:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r0, #0
	lsl	r1, r1, #0x10
	lsr	r3, r1, #0x10
	cmp	r0, #0x1
	beq	.L487	@cond_branch
	cmp	r0, #0x1
	bgt	.L515	@cond_branch
	cmp	r0, #0
	beq	.L478	@cond_branch
	b	.L477
.L515:
	cmp	r2, #0x2
	bne	.LCB4957
	b	.L500	@long jump
.LCB4957:
	b	.L477
.L478:
	mov	r0, #0xfa
	lsl	r0, r0, #0x1
	cmp	r3, r0
	bne	.L479	@cond_branch
	ldr	r0, .L519
	ldr	r0, [r0]
	ldr	r1, .L519+0x4
	b	.L516
.L520:
	.align	2, 0
.L519:
	.word	gSaveBlock2Ptr
	.word	0xb84
.L479:
	ldr	r0, .L521
	cmp	r3, r0
	beq	.L517	@cond_branch
	ldr	r0, .L521+0x4
	cmp	r3, r0
	bhi	.L483	@cond_branch
	ldr	r2, .L521+0x8
	mov	r0, #0x34
	mov	r1, r3
	mul	r1, r1, r0
	ldr	r0, [r2]
	add	r0, r0, r1
	add	r0, r0, #0xc
	bl	FrontierSpeechToString
	b	.L477
.L522:
	.align	2, 0
.L521:
	.word	0x3fe
	.word	0x12b
	.word	gFacilityTrainers
.L483:
	ldr	r0, .L523
	cmp	r3, r0
	bhi	.L485	@cond_branch
	ldr	r1, .L523+0x4
	mov	r0, #0xec
	mul	r0, r0, r3
	ldr	r1, [r1]
	add	r0, r0, r1
	ldr	r1, .L523+0x8
	b	.L516
.L524:
	.align	2, 0
.L523:
	.word	0x18f
	.word	gSaveBlock2Ptr
	.word	-0x10dc0
.L485:
	add	r0, r3, #0
	add	r0, r0, #0x70
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	BufferApprenticeChallengeText
	b	.L477
.L487:
	mov	r0, #0xfa
	lsl	r0, r0, #0x1
	cmp	r3, r0
	bne	.L488	@cond_branch
	ldr	r0, .L525
	ldr	r0, [r0]
	mov	r1, #0xb9
	lsl	r1, r1, #0x4
	b	.L516
.L526:
	.align	2, 0
.L525:
	.word	gSaveBlock2Ptr
.L488:
	ldr	r0, .L527
	cmp	r3, r0
	bne	.L490	@cond_branch
.L517:
	mov	r0, #0x0
	bl	CopyFrontierBrainText
	b	.L477
.L528:
	.align	2, 0
.L527:
	.word	0x3fe
.L490:
	ldr	r0, .L529
	cmp	r3, r0
	bhi	.L492	@cond_branch
	ldr	r2, .L529+0x4
	mov	r0, #0x34
	mov	r1, r3
	mul	r1, r1, r0
	ldr	r0, [r2]
	add	r0, r0, r1
	add	r0, r0, #0x18
	bl	FrontierSpeechToString
	b	.L477
.L530:
	.align	2, 0
.L529:
	.word	0x12b
	.word	gFacilityTrainers
.L492:
	ldr	r0, .L531
	cmp	r3, r0
	bhi	.L494	@cond_branch
	ldr	r0, .L531+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L518	@cond_branch
	ldr	r1, .L531+0x8
	mov	r0, #0xec
	mul	r0, r0, r3
	ldr	r1, [r1]
	add	r0, r0, r1
	ldr	r1, .L531+0xc
	b	.L516
.L532:
	.align	2, 0
.L531:
	.word	0x18f
	.word	gBattleTypeFlags
	.word	gSaveBlock2Ptr
	.word	-0x10db4
.L494:
	ldr	r0, .L533
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L518	@cond_branch
	ldr	r1, .L533+0x4
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r1, [r1]
	add	r0, r0, r1
	ldr	r1, .L533+0x8
	b	.L516
.L534:
	.align	2, 0
.L533:
	.word	gBattleTypeFlags
	.word	gSaveBlock2Ptr
	.word	-0x69a4
.L500:
	mov	r0, #0xfa
	lsl	r0, r0, #0x1
	cmp	r3, r0
	bne	.L501	@cond_branch
	ldr	r0, .L535
	ldr	r0, [r0]
	ldr	r1, .L535+0x4
	b	.L516
.L536:
	.align	2, 0
.L535:
	.word	gSaveBlock2Ptr
	.word	0xb9c
.L501:
	ldr	r0, .L537
	cmp	r3, r0
	bne	.L503	@cond_branch
	mov	r0, #0x1
	bl	CopyFrontierBrainText
	b	.L477
.L538:
	.align	2, 0
.L537:
	.word	0x3fe
.L503:
	ldr	r0, .L539
	cmp	r3, r0
	bhi	.L505	@cond_branch
	ldr	r2, .L539+0x4
	mov	r0, #0x34
	mov	r1, r3
	mul	r1, r1, r0
	ldr	r0, [r2]
	add	r0, r0, r1
	add	r0, r0, #0x24
	bl	FrontierSpeechToString
	b	.L477
.L540:
	.align	2, 0
.L539:
	.word	0x12b
	.word	gFacilityTrainers
.L505:
	ldr	r0, .L541
	cmp	r3, r0
	bhi	.L507	@cond_branch
	ldr	r0, .L541+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L508	@cond_branch
.L518:
	bl	GetRecordedBattleEasyChatSpeech
	bl	FrontierSpeechToString
	b	.L477
.L542:
	.align	2, 0
.L541:
	.word	0x18f
	.word	gBattleTypeFlags
.L508:
	ldr	r1, .L543
	mov	r0, #0xec
	mul	r0, r0, r3
	ldr	r1, [r1]
	add	r0, r0, r1
	ldr	r1, .L543+0x4
	b	.L516
.L544:
	.align	2, 0
.L543:
	.word	gSaveBlock2Ptr
	.word	-0x10da8
.L507:
	ldr	r0, .L545
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L511	@cond_branch
	bl	GetRecordedBattleApprenticeId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r0, #0x58
	mul	r0, r0, r3
	ldr	r1, .L545+0x4
.L516:
	add	r0, r0, r1
	bl	FrontierSpeechToString
	b	.L477
.L546:
	.align	2, 0
.L545:
	.word	gBattleTypeFlags
	.word	gApprentices+0x4a
.L511:
	ldr	r0, .L547
	ldr	r1, [r0]
	ldr	r0, .L547+0x4
	add	r2, r3, r0
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, #0x74
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1b
	lsr	r3, r0, #0x1b
	mov	r0, #0x58
	mul	r0, r0, r3
	ldr	r1, .L547+0x8
	add	r0, r0, r1
	bl	FrontierSpeechToString
.L477:
	pop	{r0}
	bx	r0
.L548:
	.align	2, 0
.L547:
	.word	gSaveBlock2Ptr
	.word	-0x190
	.word	gApprentices+0x4a
.Lfe51:
	.size	 CopyFrontierTrainerText,.Lfe51-CopyFrontierTrainerText
	.align	2, 0
	.globl	ResetWinStreaks
	.type	 ResetWinStreaks,function
	.thumb_func
ResetWinStreaks:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L563
	ldr	r1, [r0]
	ldr	r2, .L563+0x4
	add	r1, r1, r2
	mov	r2, #0x0
	str	r2, [r1]
	mov	r4, #0x0
	mov	r9, r0
	mov	r8, r9
	mov	r6, #0x0
.L553:
	mov	r5, #0x0
	lsl	r7, r4, #0x2
	mov	sl, r7
	add	r0, r4, #0x1
	mov	ip, r0
.L557:
	mov	r1, r8
	ldr	r2, [r1]
	lsl	r3, r5, #0x1
	mov	r7, sl
	add	r1, r3, r7
	ldr	r7, .L563+0x8
	add	r0, r2, r7
	add	r0, r0, r1
	strh	r6, [r0]
	cmp	r4, #0x1
	bgt	.L558	@cond_branch
	add	r7, r7, #0x2c
	add	r0, r2, r7
	add	r0, r0, r1
	strh	r6, [r0]
	add	r7, r7, #0xbc
	add	r0, r2, r7
	add	r0, r0, r1
	strh	r6, [r0]
	add	r7, r7, #0x1a
	add	r0, r2, r7
	add	r0, r0, r1
	strh	r6, [r0]
.L558:
	cmp	r4, #0
	bne	.L556	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r2, .L563+0xc
	add	r1, r0, r2
	add	r1, r1, r3
	strh	r4, [r1]
	ldr	r7, .L563+0x10
	add	r1, r0, r7
	add	r1, r1, r3
	strh	r4, [r1]
	ldr	r1, .L563+0x14
	add	r0, r0, r1
	add	r0, r0, r3
	strh	r4, [r0]
.L556:
	add	r5, r5, #0x1
	cmp	r5, #0x1
	ble	.L557	@cond_branch
	mov	r4, ip
	cmp	r4, #0x3
	ble	.L553	@cond_branch
	mov	r2, r9
	ldr	r0, [r2]
	mov	r7, #0xc3
	lsl	r7, r7, #0x4
	add	r1, r0, r7
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L562	@cond_branch
	mov	r0, #0x1
	strb	r0, [r1]
.L562:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L564:
	.align	2, 0
.L563:
	.word	gSaveBlock2Ptr
	.word	0xc64
	.word	0xc68
	.word	0xd62
	.word	0xd8c
	.word	0xda2
.Lfe52:
	.size	 ResetWinStreaks,.Lfe52-ResetWinStreaks
	.align	2, 0
	.globl	GetCurrentFacilityWinStreak
	.type	 GetCurrentFacilityWinStreak,function
	.thumb_func
GetCurrentFacilityWinStreak:
	push	{r4, r5, lr}
	ldr	r0, .L578
	ldr	r0, [r0]
	ldr	r1, .L578+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r4, r0, #0x1e
	ldr	r0, .L578+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L578+0xc
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x6
	bhi	.L574	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L578+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L579:
	.align	2, 0
.L578:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	0x40ce
	.word	0x40cf
	.word	.L575
	.align	2, 0
	.align	2, 0
.L575:
	.word	.L567
	.word	.L568
	.word	.L569
	.word	.L570
	.word	.L571
	.word	.L572
	.word	.L573
.L567:
	ldr	r0, .L580
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	lsl	r2, r5, #0x2
	add	r1, r1, r2
	ldr	r2, .L580+0x4
	b	.L577
.L581:
	.align	2, 0
.L580:
	.word	gSaveBlock2Ptr
	.word	0xc68
.L568:
	ldr	r0, .L582
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	lsl	r2, r5, #0x2
	add	r1, r1, r2
	ldr	r2, .L582+0x4
	b	.L577
.L583:
	.align	2, 0
.L582:
	.word	gSaveBlock2Ptr
	.word	0xc94
.L569:
	ldr	r0, .L584
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	lsl	r2, r5, #0x2
	add	r1, r1, r2
	mov	r2, #0xd5
	lsl	r2, r2, #0x4
	b	.L577
.L585:
	.align	2, 0
.L584:
	.word	gSaveBlock2Ptr
.L570:
	ldr	r0, .L586
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	ldr	r2, .L586+0x4
	b	.L577
.L587:
	.align	2, 0
.L586:
	.word	gSaveBlock2Ptr
	.word	0xd62
.L571:
	ldr	r0, .L588
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	lsl	r2, r5, #0x2
	add	r1, r1, r2
	ldr	r2, .L588+0x4
	b	.L577
.L589:
	.align	2, 0
.L588:
	.word	gSaveBlock2Ptr
	.word	0xd6a
.L572:
	ldr	r0, .L590
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	ldr	r2, .L590+0x4
	b	.L577
.L591:
	.align	2, 0
.L590:
	.word	gSaveBlock2Ptr
	.word	0xd8c
.L573:
	ldr	r0, .L592
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	ldr	r2, .L592+0x4
.L577:
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	b	.L576
.L593:
	.align	2, 0
.L592:
	.word	gSaveBlock2Ptr
	.word	0xda2
.L574:
	mov	r0, #0x0
.L576:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 GetCurrentFacilityWinStreak,.Lfe53-GetCurrentFacilityWinStreak
	.align	2, 0
	.globl	ResetFrontierTrainerIds
	.type	 ResetFrontierTrainerIds,function
	.thumb_func
ResetFrontierTrainerIds:
	push	{r4, r5, lr}
	mov	r2, #0x0
	ldr	r5, .L600
	ldr	r4, .L600+0x4
	ldr	r0, .L600+0x8
	add	r3, r0, #0
.L598:
	ldr	r0, [r5]
	lsl	r1, r2, #0x1
	add	r0, r0, r4
	add	r0, r0, r1
	ldrh	r1, [r0]
	orr	r1, r1, r3
	strh	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x13
	ble	.L598	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L601:
	.align	2, 0
.L600:
	.word	gSaveBlock2Ptr
	.word	0xc3c
	.word	0xffff
.Lfe54:
	.size	 ResetFrontierTrainerIds,.Lfe54-ResetFrontierTrainerIds
	.align	2, 0
	.type	 IsTrainerFrontierBrain,function
	.thumb_func
IsTrainerFrontierBrain:
	push	{lr}
	ldr	r0, .L606
	ldrh	r1, [r0]
	ldr	r0, .L606+0x4
	cmp	r1, r0
	bne	.L603	@cond_branch
	ldr	r1, .L606+0x8
	mov	r0, #0x1
	b	.L605
.L607:
	.align	2, 0
.L606:
	.word	gTrainerBattleOpponent_A
	.word	0x3fe
	.word	gSpecialVar_Result
.L603:
	ldr	r1, .L608
	mov	r0, #0x0
.L605:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L609:
	.align	2, 0
.L608:
	.word	gSpecialVar_Result
.Lfe55:
	.size	 IsTrainerFrontierBrain,.Lfe55-IsTrainerFrontierBrain
	.align	2, 0
	.globl	GetPlayerSymbolCountForFacility
	.type	 GetPlayerSymbolCountForFacility,function
	.thumb_func
GetPlayerSymbolCountForFacility:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x17
	ldr	r1, .L611
	add	r0, r4, r1
	bl	FlagGet
	add	r5, r0, #0
	ldr	r0, .L611+0x4
	add	r4, r4, r0
	add	r0, r4, #0
	bl	FlagGet
	add	r5, r5, r0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L612:
	.align	2, 0
.L611:
	.word	0x8c4
	.word	0x8c5
.Lfe56:
	.size	 GetPlayerSymbolCountForFacility,.Lfe56-GetPlayerSymbolCountForFacility
	.align	2, 0
	.type	 GiveBattlePoints,function
	.thumb_func
GiveBattlePoints:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r5, #0x0
	ldr	r0, .L632
	ldr	r0, [r0]
	ldr	r1, .L632+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r4, r0, #0x1e
	ldr	r0, .L632+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, .L632+0xc
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r7, #0x6
	bhi	.L614	@cond_branch
	lsl	r0, r7, #0x2
	ldr	r1, .L632+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L633:
	.align	2, 0
.L632:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	0x40cf
	.word	0x40ce
	.word	.L622
	.align	2, 0
	.align	2, 0
.L622:
	.word	.L615
	.word	.L616
	.word	.L617
	.word	.L618
	.word	.L619
	.word	.L620
	.word	.L621
.L615:
	ldr	r0, .L634
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	lsl	r2, r6, #0x2
	add	r1, r1, r2
	ldr	r2, .L634+0x4
	b	.L630
.L635:
	.align	2, 0
.L634:
	.word	gSaveBlock2Ptr
	.word	0xc68
.L616:
	ldr	r0, .L636
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	lsl	r2, r6, #0x2
	add	r1, r1, r2
	ldr	r2, .L636+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r5, [r0]
	b	.L614
.L637:
	.align	2, 0
.L636:
	.word	gSaveBlock2Ptr
	.word	0xc94
.L617:
	ldr	r0, .L638
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	lsl	r2, r6, #0x2
	add	r1, r1, r2
	mov	r2, #0xd5
	lsl	r2, r2, #0x4
	b	.L630
.L639:
	.align	2, 0
.L638:
	.word	gSaveBlock2Ptr
.L618:
	ldr	r0, .L640
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	ldr	r2, .L640+0x4
	b	.L630
.L641:
	.align	2, 0
.L640:
	.word	gSaveBlock2Ptr
	.word	0xd62
.L619:
	ldr	r0, .L642
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	lsl	r2, r6, #0x2
	add	r1, r1, r2
	ldr	r2, .L642+0x4
	b	.L630
.L643:
	.align	2, 0
.L642:
	.word	gSaveBlock2Ptr
	.word	0xd6a
.L620:
	ldr	r0, .L644
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	ldr	r2, .L644+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0xe
	b	.L631
.L645:
	.align	2, 0
.L644:
	.word	gSaveBlock2Ptr
	.word	0xd8c
.L621:
	ldr	r0, .L646
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	ldr	r2, .L646+0x4
.L630:
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0x7
.L631:
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L614:
	cmp	r5, #0
	beq	.L624	@cond_branch
	sub	r5, r5, #0x1
.L624:
	cmp	r5, #0x1d
	bls	.L625	@cond_branch
	mov	r5, #0x1d
.L625:
	ldr	r2, .L646+0x8
	lsl	r1, r7, #0x2
	add	r1, r6, r1
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r7, r1, r2
	ldrb	r5, [r7]
	ldr	r0, .L646+0xc
	mov	r9, r0
	ldrh	r0, [r0]
	ldr	r1, .L646+0x10
	mov	r8, r1
	cmp	r0, r8
	bne	.L626	@cond_branch
	add	r5, r5, #0xa
.L626:
	ldr	r6, .L646
	ldr	r1, [r6]
	mov	r4, #0xe4
	lsl	r4, r4, #0x4
	add	r1, r1, r4
	ldrh	r0, [r1]
	add	r0, r0, r5
	strh	r0, [r1]
	ldr	r0, .L646+0x14
	add	r1, r5, #0
	mov	r2, #0x0
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r0, [r6]
	add	r2, r0, r4
	ldrh	r0, [r2]
	ldr	r1, .L646+0x18
	cmp	r0, r1
	bls	.L627	@cond_branch
	strh	r1, [r2]
.L627:
	ldr	r0, [r6]
	ldr	r4, .L646+0x1c
	add	r0, r0, r4
	ldrh	r5, [r0]
	ldrb	r0, [r7]
	add	r5, r5, r0
	bl	IncrementDailyBattlePoints
	mov	r2, r9
	ldrh	r0, [r2]
	cmp	r0, r8
	bne	.L628	@cond_branch
	add	r5, r5, #0xa
	mov	r0, #0xa
	bl	IncrementDailyBattlePoints
.L628:
	ldr	r0, .L646+0x20
	cmp	r5, r0
	ble	.L629	@cond_branch
	add	r5, r0, #0
.L629:
	ldr	r0, [r6]
	add	r0, r0, r4
	strh	r5, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L647:
	.align	2, 0
.L646:
	.word	gSaveBlock2Ptr
	.word	0xda2
	.word	sBattlePointAwards
	.word	gTrainerBattleOpponent_A
	.word	0x3fe
	.word	gStringVar1
	.word	0x270f
	.word	0xe42
	.word	0xffff
.Lfe57:
	.size	 GiveBattlePoints,.Lfe57-GiveBattlePoints
	.align	2, 0
	.type	 GetFacilitySymbolCount,function
	.thumb_func
GetFacilitySymbolCount:
	push	{r4, lr}
	ldr	r0, .L649
	bl	VarGet
	ldr	r4, .L649+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetPlayerSymbolCountForFacility
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L650:
	.align	2, 0
.L649:
	.word	0x40cf
	.word	gSpecialVar_Result
.Lfe58:
	.size	 GetFacilitySymbolCount,.Lfe58-GetFacilitySymbolCount
	.align	2, 0
	.type	 GiveFacilitySymbol,function
	.thumb_func
GiveFacilitySymbol:
	push	{r4, lr}
	ldr	r0, .L654
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetPlayerSymbolCountForFacility
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L652	@cond_branch
	lsl	r0, r4, #0x11
	ldr	r1, .L654+0x4
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	bl	FlagSet
	b	.L653
.L655:
	.align	2, 0
.L654:
	.word	0x40cf
	.word	0x8c40000
.L652:
	lsl	r0, r4, #0x11
	ldr	r1, .L656
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	bl	FlagSet
.L653:
	pop	{r4}
	pop	{r0}
	bx	r0
.L657:
	.align	2, 0
.L656:
	.word	0x8c50000
.Lfe59:
	.size	 GiveFacilitySymbol,.Lfe59-GiveFacilitySymbol
	.align	2, 0
	.type	 CheckBattleTypeFlag,function
	.thumb_func
CheckBattleTypeFlag:
	push	{lr}
	ldr	r0, .L661
	ldr	r1, .L661+0x4
	ldrh	r1, [r1]
	ldr	r2, [r0]
	and	r2, r2, r1
	cmp	r2, #0
	beq	.L659	@cond_branch
	ldr	r1, .L661+0x8
	mov	r0, #0x1
	strh	r0, [r1]
	b	.L660
.L662:
	.align	2, 0
.L661:
	.word	gBattleTypeFlags
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_Result
.L659:
	ldr	r0, .L663
	strh	r2, [r0]
.L660:
	pop	{r0}
	bx	r0
.L664:
	.align	2, 0
.L663:
	.word	gSpecialVar_Result
.Lfe60:
	.size	 CheckBattleTypeFlag,.Lfe60-CheckBattleTypeFlag
	.align	2, 0
	.type	 AppendCaughtBannedMonSpeciesName,function
	.thumb_func
AppendCaughtBannedMonSpeciesName:
	push	{r4, r5, r6, lr}
	add	r5, r2, #0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	add	r0, r6, #0
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L666	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	sub	r0, r4, #0x1
	cmp	r0, #0xa
	bhi	.L680	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L684
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L685:
	.align	2, 0
.L684:
	.word	.L683
	.align	2, 0
	.align	2, 0
.L683:
	.word	.L673
	.word	.L677
	.word	.L673
	.word	.L680
	.word	.L673
	.word	.L680
	.word	.L673
	.word	.L680
	.word	.L673
	.word	.L680
	.word	.L673
.L673:
	cmp	r5, r4
	bne	.L674	@cond_branch
	ldr	r0, .L686
	ldr	r1, .L686+0x4
	bl	StringAppend
	b	.L667
.L687:
	.align	2, 0
.L686:
	.word	gStringVar1
	.word	gText_SpaceAndSpace
.L674:
	cmp	r5, r4
	ble	.L667	@cond_branch
	ldr	r0, .L688
	ldr	r1, .L688+0x4
	bl	StringAppend
	b	.L667
.L689:
	.align	2, 0
.L688:
	.word	gStringVar1
	.word	gText_CommaSpace
.L677:
	cmp	r4, r5
	bne	.L678	@cond_branch
	ldr	r0, .L690
	ldr	r1, .L690+0x4
	bl	StringAppend
	b	.L679
.L691:
	.align	2, 0
.L690:
	.word	gStringVar1
	.word	gText_SpaceAndSpace
.L678:
	ldr	r0, .L692
	ldr	r1, .L692+0x4
	bl	StringAppend
.L679:
	ldr	r0, .L692
	ldr	r1, .L692+0x8
	bl	StringAppend
	b	.L667
.L693:
	.align	2, 0
.L692:
	.word	gStringVar1
	.word	gText_CommaSpace
	.word	gText_NewLine
.L680:
	cmp	r4, r5
	bne	.L681	@cond_branch
	ldr	r0, .L694
	ldr	r1, .L694+0x4
	bl	StringAppend
	b	.L682
.L695:
	.align	2, 0
.L694:
	.word	gStringVar1
	.word	gText_SpaceAndSpace
.L681:
	ldr	r0, .L696
	ldr	r1, .L696+0x4
	bl	StringAppend
.L682:
	ldr	r0, .L696
	ldr	r1, .L696+0x8
	bl	StringAppend
.L667:
	ldr	r0, .L696
	mov	r1, #0xb
	mul	r1, r1, r6
	ldr	r2, .L696+0xc
	add	r1, r1, r2
	bl	StringAppend
.L666:
	add	r0, r4, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L697:
	.align	2, 0
.L696:
	.word	gStringVar1
	.word	gText_CommaSpace
	.word	gText_LineBreak
	.word	gSpeciesNames
.Lfe61:
	.size	 AppendCaughtBannedMonSpeciesName,.Lfe61-AppendCaughtBannedMonSpeciesName
	.align	2, 0
	.type	 AppendIfValid,function
	.thumb_func
AppendIfValid:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r2, [sp, #0x20]
	ldr	r4, [sp, #0x24]
	mov	r9, r4
	ldr	r4, [sp, #0x28]
	mov	sl, r4
	ldr	r7, [sp, #0x2c]
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	ip, r3
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	mov	r2, #0x0
	ldr	r0, .L725
	cmp	r4, r0
	beq	.L698	@cond_branch
	cmp	r4, #0
	beq	.L698	@cond_branch
	ldr	r0, .L725+0x4
	ldrh	r1, [r0]
	ldr	r5, .L725+0x8
	add	r3, r0, #0
	cmp	r1, r5
	beq	.L724	@cond_branch
	cmp	r1, r4
	beq	.L702	@cond_branch
	add	r1, r3, #0
.L703:
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	ldrh	r0, [r1]
	cmp	r0, r5
	beq	.L724	@cond_branch
	cmp	r0, r4
	bne	.L703	@cond_branch
.L702:
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	ldrh	r1, [r0]
	ldr	r0, .L725+0x8
	cmp	r1, r0
	bne	.L698	@cond_branch
.L724:
	mov	r0, ip
	cmp	r0, #0
	bne	.L708	@cond_branch
	mov	r1, r8
	cmp	r1, #0x32
	bhi	.L698	@cond_branch
.L708:
	mov	r2, #0x0
	ldrb	r3, [r7]
	cmp	r2, r3
	bge	.L710	@cond_branch
	mov	r1, r9
	ldrh	r0, [r1]
	cmp	r0, r4
	beq	.L710	@cond_branch
	add	r5, r3, #0
.L711:
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, r5
	bge	.L710	@cond_branch
	ldrh	r0, [r1]
	cmp	r0, r4
	bne	.L711	@cond_branch
.L710:
	cmp	r2, r3
	bne	.L698	@cond_branch
	cmp	r6, #0
	beq	.L716	@cond_branch
	mov	r2, #0x0
	cmp	r2, r3
	bge	.L718	@cond_branch
	mov	r1, sl
	ldrh	r0, [r1]
	cmp	r0, r6
	beq	.L718	@cond_branch
	add	r5, r3, #0
.L719:
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, r5
	bge	.L718	@cond_branch
	ldrh	r0, [r1]
	cmp	r0, r6
	bne	.L719	@cond_branch
.L718:
	cmp	r2, r3
	bne	.L698	@cond_branch
.L716:
	lsl	r0, r3, #0x1
	add	r0, r0, r9
	strh	r4, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	strh	r6, [r0]
	ldrb	r0, [r7]
	add	r0, r0, #0x1
	strb	r0, [r7]
.L698:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L726:
	.align	2, 0
.L725:
	.word	0x4b7
	.word	gFrontierBannedSpecies
	.word	0xffff
.Lfe62:
	.size	 AppendIfValid,.Lfe62-AppendIfValid
	.align	2, 0
	.type	 CheckPartyIneligibility,function
	.thumb_func
CheckPartyIneligibility:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x34
	mov	r0, #0x0
	str	r0, [sp, #0x2c]
	add	r4, sp, #0x28
	strb	r0, [r4]
	ldr	r0, .L771
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r4
	cmp	r0, #0x1
	beq	.L732	@cond_branch
	cmp	r0, #0x1
	bgt	.L737	@cond_branch
	cmp	r0, #0
	beq	.L729	@cond_branch
	b	.L728
.L772:
	.align	2, 0
.L771:
	.word	0x40ce
.L737:
	cmp	r0, #0x3
	bgt	.L728	@cond_branch
	mov	r0, #0x2
	b	.L770
.L729:
	mov	r1, #0x3
	str	r1, [sp, #0x2c]
	b	.L728
.L732:
	ldr	r0, .L773
	bl	VarGet
	lsl	r0, r0, #0x10
	mov	r1, #0x3
	str	r1, [sp, #0x2c]
	cmp	r0, #0
	bne	.L728	@cond_branch
	mov	r0, #0x4
.L770:
	str	r0, [sp, #0x2c]
.L728:
	mov	r1, #0x0
	mov	r9, r1
	b	.L738
.L774:
	.align	2, 0
.L773:
	.word	0x40cf
.L752:
	mov	r1, sl
	ldrb	r0, [r1]
	ldr	r1, [sp, #0x2c]
	cmp	r0, r1
	blt	.LCB6630
	b	.L753	@long jump
.LCB6630:
.L738:
	mov	r5, r9
	mov	r0, #0x0
	mov	r1, sl
	strb	r0, [r1]
	mov	r0, r9
	add	r0, r0, #0x1
	str	r0, [sp, #0x30]
.L741:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L775
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L775+0x4
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L744	@cond_branch
	cmp	r7, #0
	bne	.L746	@cond_branch
	ldr	r0, .L775+0x8
	ldrb	r3, [r0]
	str	r6, [sp]
	add	r1, sp, #0x10
	str	r1, [sp, #0x4]
	add	r0, sp, #0x1c
	str	r0, [sp, #0x8]
	mov	r0, sl
	str	r0, [sp, #0xc]
	mov	r0, r8
	mov	r1, #0x0
	add	r2, r4, #0
	bl	AppendIfValid
	b	.L746
.L776:
	.align	2, 0
.L775:
	.word	gPlayerParty
	.word	0x40cf
	.word	gSpecialVar_Result
.L744:
	ldr	r0, .L777
	ldrb	r3, [r0]
	str	r6, [sp]
	add	r1, sp, #0x10
	str	r1, [sp, #0x4]
	add	r0, sp, #0x1c
	str	r0, [sp, #0x8]
	mov	r0, sl
	str	r0, [sp, #0xc]
	mov	r0, r8
	add	r1, r7, #0
	add	r2, r4, #0
	bl	AppendIfValid
.L746:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L743	@cond_branch
	mov	r5, #0x0
.L743:
	cmp	r5, r9
	bne	.L741	@cond_branch
	ldr	r1, [sp, #0x30]
	mov	r9, r1
	cmp	r1, #0x5
	ble	.L752	@cond_branch
	mov	r1, sl
	ldrb	r0, [r1]
	ldr	r1, [sp, #0x2c]
	cmp	r0, r1
	bge	.L753	@cond_branch
	mov	r6, #0x0
	ldr	r0, .L777+0x4
	ldrh	r2, [r0]
	ldr	r1, .L777+0x8
	mov	r8, r0
	cmp	r2, r1
	beq	.L755	@cond_branch
	mov	r4, r8
.L757:
	add	r0, r2, #0
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L756	@cond_branch
	add	r6, r6, #0x1
.L756:
	add	r4, r4, #0x2
	ldrh	r2, [r4]
	ldr	r0, .L777+0x8
	cmp	r2, r0
	bne	.L757	@cond_branch
.L755:
	ldr	r1, .L777+0xc
	mov	r0, #0xff
	strb	r0, [r1]
	ldr	r1, .L777+0x10
	mov	r0, #0x1
	strh	r0, [r1]
	mov	r0, #0x0
	mov	r1, sl
	strb	r0, [r1]
	mov	r1, r8
	ldrh	r0, [r1]
	ldr	r1, .L777+0x8
	cmp	r0, r1
	beq	.L761	@cond_branch
	mov	r5, sl
	add	r7, r1, #0
	mov	r4, r8
.L763:
	ldrh	r0, [r4]
	ldrb	r1, [r5]
	add	r2, r6, #0
	bl	AppendCaughtBannedMonSpeciesName
	strb	r0, [r5]
	add	r4, r4, #0x2
	ldrh	r0, [r4]
	cmp	r0, r7
	bne	.L763	@cond_branch
.L761:
	mov	r0, sl
	ldrb	r4, [r0]
	cmp	r4, #0
	bne	.L765	@cond_branch
	ldr	r4, .L777+0xc
	ldr	r1, .L777+0x14
	add	r0, r4, #0
	bl	StringAppend
	ldr	r1, .L777+0x18
	add	r0, r4, #0
	bl	StringAppend
	b	.L769
.L778:
	.align	2, 0
.L777:
	.word	gSpecialVar_Result
	.word	gFrontierBannedSpecies
	.word	0xffff
	.word	gStringVar1
	.word	gSpecialVar_0x8004
	.word	gText_Space2
	.word	gText_Are
.L765:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L767	@cond_branch
	ldr	r0, .L779
	ldr	r1, .L779+0x4
	bl	StringAppend
	b	.L768
.L780:
	.align	2, 0
.L779:
	.word	gStringVar1
	.word	gText_LineBreak
.L767:
	ldr	r0, .L781
	ldr	r1, .L781+0x4
	bl	StringAppend
.L768:
	ldr	r0, .L781
	ldr	r1, .L781+0x8
	bl	StringAppend
	b	.L769
.L782:
	.align	2, 0
.L781:
	.word	gStringVar1
	.word	gText_Space2
	.word	gText_Are2
.L753:
	ldr	r1, .L783
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L783+0x4
	ldr	r2, [r0]
	ldr	r0, .L783+0x8
	ldrb	r0, [r0]
	ldr	r1, .L783+0xc
	add	r2, r2, r1
	mov	r1, #0x3
	and	r1, r1, r0
	ldrb	r3, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
.L769:
	add	sp, sp, #0x34
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L784:
	.align	2, 0
.L783:
	.word	gSpecialVar_0x8004
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_Result
	.word	0xc31
.Lfe63:
	.size	 CheckPartyIneligibility,.Lfe63-CheckPartyIneligibility
	.align	2, 0
	.type	 ValidateVisitingTrainer,function
	.thumb_func
ValidateVisitingTrainer:
	push	{lr}
	bl	ValidateEReaderTrainer
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 ValidateVisitingTrainer,.Lfe64-ValidateVisitingTrainer
	.align	2, 0
	.type	 IncrementWinStreak,function
	.thumb_func
IncrementWinStreak:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L809
	ldr	r0, [r0]
	ldr	r1, .L809+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r4, r0, #0x1e
	ldr	r0, .L809+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L809+0xc
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x6
	bls	.LCB6998
	b	.L787	@long jump
.LCB6998:
	lsl	r0, r0, #0x2
	ldr	r1, .L809+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L810:
	.align	2, 0
.L809:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	0x40ce
	.word	0x40cf
	.word	.L804
	.align	2, 0
	.align	2, 0
.L804:
	.word	.L788
	.word	.L791
	.word	.L794
	.word	.L796
	.word	.L798
	.word	.L800
	.word	.L802
.L788:
	ldr	r7, .L811
	ldr	r0, [r7]
	lsl	r4, r4, #0x1
	lsl	r1, r5, #0x2
	add	r1, r4, r1
	ldr	r6, .L811+0x4
	add	r3, r0, r6
	add	r2, r3, r1
	ldrh	r1, [r2]
	ldr	r0, .L811+0x8
	cmp	r1, r0
	bhi	.L787	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r2]
	cmp	r5, #0
	bne	.L787	@cond_branch
	add	r0, r3, r4
	ldrh	r1, [r0]
	mov	r0, #0x20
	bl	SetGameStat
	ldr	r1, [r7]
	add	r0, r1, r6
	add	r0, r0, r4
	ldrh	r0, [r0]
	ldr	r2, .L811+0xc
	add	r1, r1, r2
	b	.L806
.L812:
	.align	2, 0
.L811:
	.word	gSaveBlock2Ptr
	.word	0xc68
	.word	0x270e
	.word	0xc8a
.L791:
	ldr	r6, .L813
	ldr	r0, [r6]
	lsl	r2, r4, #0x1
	lsl	r1, r5, #0x2
	add	r1, r2, r1
	ldr	r3, .L813+0x4
	add	r0, r0, r3
	add	r3, r0, r1
	ldrh	r0, [r3]
	ldr	r2, .L813+0x8
	cmp	r0, r2
	bhi	.L792	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r3]
.L792:
	ldr	r0, [r6]
	ldr	r3, .L813+0xc
	add	r0, r0, r3
	add	r1, r0, r1
	ldrh	r0, [r1]
	cmp	r0, r2
	bhi	.L787	@cond_branch
	add	r0, r0, #0x1
	b	.L806
.L814:
	.align	2, 0
.L813:
	.word	gSaveBlock2Ptr
	.word	0xc94
	.word	0x270e
	.word	0xca4
.L794:
	ldr	r0, .L815
	ldr	r2, [r0]
	lsl	r0, r4, #0x1
	lsl	r1, r5, #0x2
	add	r0, r0, r1
	mov	r1, #0xd5
	lsl	r1, r1, #0x4
	add	r2, r2, r1
	add	r1, r2, r0
	b	.L807
.L816:
	.align	2, 0
.L815:
	.word	gSaveBlock2Ptr
.L796:
	ldr	r0, .L817
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	ldr	r2, .L817+0x4
	add	r0, r0, r2
	b	.L808
.L818:
	.align	2, 0
.L817:
	.word	gSaveBlock2Ptr
	.word	0xd62
.L798:
	ldr	r0, .L819
	ldr	r2, [r0]
	lsl	r0, r4, #0x1
	lsl	r1, r5, #0x2
	add	r0, r0, r1
	ldr	r3, .L819+0x4
	add	r2, r2, r3
	add	r1, r2, r0
	b	.L807
.L820:
	.align	2, 0
.L819:
	.word	gSaveBlock2Ptr
	.word	0xd6a
.L800:
	ldr	r0, .L821
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	ldr	r2, .L821+0x4
	add	r0, r0, r2
	b	.L808
.L822:
	.align	2, 0
.L821:
	.word	gSaveBlock2Ptr
	.word	0xd8c
.L802:
	ldr	r0, .L823
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	ldr	r3, .L823+0x4
	add	r0, r0, r3
.L808:
	add	r1, r0, r1
.L807:
	ldrh	r3, [r1]
	ldr	r0, .L823+0x8
	cmp	r3, r0
	bhi	.L787	@cond_branch
	add	r0, r3, #0x1
.L806:
	strh	r0, [r1]
.L787:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L824:
	.align	2, 0
.L823:
	.word	gSaveBlock2Ptr
	.word	0xda2
	.word	0x270e
.Lfe65:
	.size	 IncrementWinStreak,.Lfe65-IncrementWinStreak
	.align	2, 0
	.type	 RestoreHeldItems,function
	.thumb_func
RestoreHeldItems:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	mov	r4, #0x0
	ldr	r6, .L832
	mov	r5, #0x64
.L829:
	ldr	r0, .L832+0x4
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	ldr	r2, .L832+0x8
	add	r0, r0, r2
	add	r1, r0, r1
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L828	@cond_branch
	mov	r1, r0
	mul	r1, r1, r5
	mov	r0, #0xea
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, [r6]
	add	r0, r0, r1
	mov	r1, #0xc
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	mov	r0, r4
	mul	r0, r0, r5
	ldr	r1, .L832+0xc
	add	r0, r0, r1
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
.L828:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L829	@cond_branch
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L833:
	.align	2, 0
.L832:
	.word	gSaveBlock1Ptr
	.word	gSaveBlock2Ptr
	.word	0xc32
	.word	gPlayerParty
.Lfe66:
	.size	 RestoreHeldItems,.Lfe66-RestoreHeldItems
	.align	2, 0
	.type	 SaveRecordBattle,function
	.thumb_func
SaveRecordBattle:
	push	{r4, lr}
	ldr	r4, .L835
	bl	MoveRecordedBattleToSaveData
	strh	r0, [r4]
	ldr	r0, .L835+0x4
	ldr	r1, [r0]
	ldr	r0, .L835+0x8
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x8
	orr	r0, r0, r2
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L836:
	.align	2, 0
.L835:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xc31
.Lfe67:
	.size	 SaveRecordBattle,.Lfe67-SaveRecordBattle
	.align	2, 0
	.type	 BufferFrontierTrainerName,function
	.thumb_func
BufferFrontierTrainerName:
	push	{lr}
	ldr	r0, .L843
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L839	@cond_branch
	cmp	r0, #0x1
	beq	.L840	@cond_branch
	b	.L838
.L844:
	.align	2, 0
.L843:
	.word	gSpecialVar_0x8005
.L839:
	ldr	r0, .L845
	ldr	r1, .L845+0x4
	ldrh	r1, [r1]
	bl	GetFrontierTrainerName
	b	.L838
.L846:
	.align	2, 0
.L845:
	.word	gStringVar1
	.word	gTrainerBattleOpponent_A
.L840:
	ldr	r0, .L847
	ldr	r1, .L847+0x4
	ldrh	r1, [r1]
	bl	GetFrontierTrainerName
.L838:
	pop	{r0}
	bx	r0
.L848:
	.align	2, 0
.L847:
	.word	gStringVar2
	.word	gTrainerBattleOpponent_A
.Lfe68:
	.size	 BufferFrontierTrainerName,.Lfe68-BufferFrontierTrainerName
	.align	2, 0
	.type	 ResetSketchedMoves,function
	.thumb_func
ResetSketchedMoves:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r0, #0x0
	str	r0, [sp]
.L853:
	ldr	r1, .L868
	ldr	r0, [r1]
	ldr	r2, [sp]
	lsl	r1, r2, #0x1
	ldr	r4, .L868+0x4
	add	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r1
	add	r2, r2, #0x1
	str	r2, [sp, #0x4]
	cmp	r0, #0x5
	bhi	.L852	@cond_branch
	mov	r6, #0x0
	ldr	r0, [sp]
	mov	r2, #0x64
	mov	r1, r0
	mul	r1, r1, r2
	ldr	r0, .L868+0x8
	add	r7, r1, r0
.L858:
	mov	r5, #0x0
	mov	r4, #0xd
	add	r4, r4, r6
	mov	r8, r4
	add	r0, r6, #0x1
	mov	sl, r0
.L862:
	ldr	r1, .L868
	ldr	r0, [r1]
	ldr	r2, .L868+0x4
	add	r0, r0, r2
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r4, #0x64
	mov	r1, r0
	mul	r1, r1, r4
	mov	r0, #0xea
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r2, .L868+0xc
	ldr	r0, [r2]
	add	r0, r0, r1
	add	r1, r5, #0
	add	r1, r1, #0xd
	mov	r2, #0x0
	bl	GetMonData
	add	r4, r0, #0
	add	r0, r7, #0
	mov	r1, r8
	mov	r2, #0x0
	bl	GetMonData
	cmp	r4, r0
	beq	.L860	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L862	@cond_branch
.L860:
	cmp	r5, #0x4
	bne	.L857	@cond_branch
	add	r0, r7, #0
	mov	r1, #0xa6
	add	r2, r6, #0
	bl	SetMonMoveSlot
.L857:
	mov	r4, sl
	lsl	r0, r4, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L858	@cond_branch
	ldr	r0, .L868+0xc
	ldr	r0, [r0]
	ldr	r2, .L868
	ldr	r1, [r2]
	ldr	r4, .L868+0x4
	add	r1, r1, r4
	add	r1, r1, r9
	ldrh	r1, [r1]
	sub	r1, r1, #0x1
	mov	r3, #0x64
	mul	r1, r1, r3
	add	r0, r0, r1
	mov	r1, #0x8e
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldr	r2, .L868+0x8
	ldr	r4, [sp]
	mov	r1, r4
	mul	r1, r1, r3
	add	r1, r1, r2
	mov	r2, #0x64
	bl	memcpy
.L852:
	ldr	r1, [sp, #0x4]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	cmp	r0, #0x3
	bls	.L853	@cond_branch
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L869:
	.align	2, 0
.L868:
	.word	gSaveBlock2Ptr
	.word	0xc32
	.word	gPlayerParty
	.word	gSaveBlock1Ptr
.Lfe69:
	.size	 ResetSketchedMoves,.Lfe69-ResetSketchedMoves
	.align	2, 0
	.type	 SetFacilityBrainObjectEvent,function
	.thumb_func
SetFacilityBrainObjectEvent:
	push	{lr}
	ldr	r0, .L871
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetFrontierBrainObjEventGfx
	pop	{r0}
	bx	r0
.L872:
	.align	2, 0
.L871:
	.word	0x40cf
.Lfe70:
	.size	 SetFacilityBrainObjectEvent,.Lfe70-SetFacilityBrainObjectEvent
	.align	2, 0
	.type	 Print1PRecord,function
	.thumb_func
Print1PRecord:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	mov	r8, r1
	add	r6, r3, #0
	ldr	r1, .L876
	ldrb	r5, [r1]
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	ldr	r1, .L876+0x4
	add	r4, r4, r1
	mov	r1, r8
	lsl	r3, r1, #0x1b
	lsr	r3, r3, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	add	r2, r2, r1
	lsl	r2, r2, #0x3
	add	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	str	r7, [sp]
	mov	r0, #0xff
	mov	sl, r0
	str	r0, [sp, #0x4]
	mov	r1, #0x0
	mov	r9, r1
	str	r1, [sp, #0x8]
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	AddTextPrinterParameterized
	mov	r0, #0xff
	strb	r0, [r6, #0xd]
	ldrh	r0, [r6, #0x4]
	cmp	r0, #0
	beq	.L874	@cond_branch
	add	r1, r6, #0x6
	ldrb	r2, [r6, #0xe]
	add	r0, sp, #0xc
	bl	TVShowConvertInternationalString
	ldr	r1, .L876
	ldrb	r0, [r1]
	mov	r3, r8
	add	r3, r3, #0x2
	lsl	r3, r3, #0x1b
	lsr	r3, r3, #0x18
	str	r7, [sp]
	mov	r1, sl
	str	r1, [sp, #0x4]
	mov	r1, r9
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, sp, #0xc
	bl	AddTextPrinterParameterized
	ldrh	r1, [r6, #0x4]
	ldr	r0, .L876+0x8
	cmp	r1, r0
	bls	.L875	@cond_branch
	add	r1, r0, #0
.L875:
	ldr	r0, .L876+0xc
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r5, .L876+0x10
	ldr	r1, .L876+0x14
	ldr	r0, [sp, #0x4c]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r4, [r0]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	add	r1, r4, #0
	mov	r2, #0xc8
	bl	GetStringRightAlignXOffset
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r1, .L876
	ldrb	r0, [r1]
	str	r7, [sp]
	mov	r1, sl
	str	r1, [sp, #0x4]
	mov	r1, r9
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r5, #0
	bl	AddTextPrinterParameterized
.L874:
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L877:
	.align	2, 0
.L876:
	.word	gRecordsWindowId
	.word	gText_123Dot
	.word	0x270f
	.word	gStringVar2
	.word	gStringVar4
	.word	sHallFacilityToRecordsText
.Lfe71:
	.size	 Print1PRecord,.Lfe71-Print1PRecord
	.align	2, 0
	.type	 Print2PRecord,function
	.thumb_func
Print2PRecord:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	add	r6, r0, #0
	add	r7, r1, #0
	mov	sl, r2
	add	r5, r3, #0
	ldr	r1, .L883
	ldrb	r0, [r1]
	lsl	r2, r6, #0x1
	add	r2, r2, r6
	ldr	r1, .L883+0x4
	add	r2, r2, r1
	lsl	r3, r7, #0x1b
	lsr	r3, r3, #0x18
	mov	ip, r3
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	mov	r3, sl
	add	r4, r3, r1
	lsl	r1, r4, #0x3
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	mov	r1, #0xff
	mov	r9, r1
	str	r1, [sp, #0x4]
	mov	r3, #0x0
	mov	r8, r3
	str	r3, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, ip
	bl	AddTextPrinterParameterized
	ldrh	r0, [r5, #0x8]
	cmp	r0, #0
	beq	.L879	@cond_branch
	mov	r0, #0xff
	strb	r0, [r5, #0x11]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r5, #0x19]
	add	r1, r5, #0
	add	r1, r1, #0xa
	ldrb	r2, [r5, #0x1a]
	add	r0, sp, #0xc
	bl	TVShowConvertInternationalString
	ldr	r1, .L883
	ldrb	r0, [r1]
	add	r3, r7, #0x2
	lsl	r3, r3, #0x1b
	lsr	r3, r3, #0x18
	sub	r1, r4, #0x1
	lsl	r1, r1, #0x3
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	mov	r2, r9
	str	r2, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, sp, #0xc
	bl	AddTextPrinterParameterized
	add	r4, r5, #0
	add	r4, r4, #0x12
	add	r0, r4, #0
	bl	IsStringJapanese
	cmp	r0, #0
	beq	.L880	@cond_branch
	add	r0, sp, #0xc
	add	r1, r4, #0
	mov	r2, #0x1
	bl	TVShowConvertInternationalString
	b	.L881
.L884:
	.align	2, 0
.L883:
	.word	gRecordsWindowId
	.word	gText_123Dot
.L880:
	add	r0, sp, #0xc
	add	r1, r4, #0
	bl	StringCopy
.L881:
	ldr	r2, .L885
	mov	r9, r2
	ldrb	r0, [r2]
	add	r3, r7, #0x4
	lsl	r3, r3, #0x1b
	lsr	r3, r3, #0x18
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	mov	r2, sl
	add	r6, r2, r1
	add	r1, r6, #0x1
	lsl	r1, r1, #0x3
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	mov	r1, #0xff
	mov	r8, r1
	str	r1, [sp, #0x4]
	mov	r7, #0x0
	str	r7, [sp, #0x8]
	mov	r1, #0x1
	add	r2, sp, #0xc
	bl	AddTextPrinterParameterized
	ldrh	r1, [r5, #0x8]
	ldr	r0, .L885+0x4
	cmp	r1, r0
	bls	.L882	@cond_branch
	add	r1, r0, #0
.L882:
	ldr	r0, .L885+0x8
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r5, .L885+0xc
	ldr	r0, .L885+0x10
	ldr	r4, [r0, #0x24]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	add	r1, r4, #0
	mov	r2, #0xc8
	bl	GetStringRightAlignXOffset
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r1, r6, #0x3
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	mov	r1, r8
	str	r1, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r5, #0
	bl	AddTextPrinterParameterized
.L879:
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L886:
	.align	2, 0
.L885:
	.word	gRecordsWindowId
	.word	0x270f
	.word	gStringVar2
	.word	gStringVar4
	.word	sHallFacilityToRecordsText
.Lfe72:
	.size	 Print2PRecord,.Lfe72-Print2PRecord
	.align	2, 0
	.type	 Fill1PRecords,function
	.thumb_func
Fill1PRecords:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x44
	mov	r9, r0
	mov	sl, r1
	str	r2, [sp, #0x40]
	mov	r0, #0xac
	lsl	r0, r0, #0x1
	bl	AllocZeroed
	mov	r8, r0
	bl	GetPlayerHallRecords
	add	r0, sp, #0x30
	mov	ip, r0
	ldr	r0, .L905
	ldr	r2, [r0]
	ldr	r3, [sp, #0x40]
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x4
	mov	r4, sl
	lsl	r0, r4, #0x1
	add	r0, r0, sl
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r4, r1, r2
	mov	r3, sp
	mov	r2, #0x2
.L891:
	add	r0, r3, #0
	mov	r5, #0xd2
	lsl	r5, r5, #0x1
	add	r1, r4, r5
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldr	r1, [r1]
	str	r1, [r0]
	add	r4, r4, #0x10
	add	r3, r3, #0x10
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L891	@cond_branch
	ldr	r6, [sp, #0x40]
	lsl	r0, r6, #0x4
	mov	r7, sl
	lsl	r1, r7, #0x5
	add	r0, r0, r1
	mov	r1, ip
	add	r0, r0, r8
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	ldr	r0, [r0]
	str	r0, [r1]
	mov	r2, #0x0
.L896:
	mov	r1, #0x0
	mov	r4, #0x0
	mov	r3, #0x0
	lsl	r5, r2, #0x4
	add	r6, r2, #0x1
	mov	r2, sp
.L900:
	ldrh	r0, [r2, #0x4]
	cmp	r0, r1
	ble	.L899	@cond_branch
	add	r4, r3, #0
	add	r1, r0, #0
.L899:
	add	r2, r2, #0x10
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L900	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0, #0x34]
	cmp	r0, r1
	blt	.L903	@cond_branch
	mov	r4, #0x3
.L903:
	lsl	r0, r4, #0x4
	mov	r7, sp
	add	r2, r7, r0
	mov	r0, r9
	add	r1, r5, r0
	add	r0, r2, #0
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldr	r0, [r0]
	str	r0, [r1]
	mov	r0, #0x0
	strh	r0, [r2, #0x4]
	add	r2, r6, #0
	cmp	r2, #0x2
	ble	.L896	@cond_branch
	mov	r0, r8
	bl	Free
	add	sp, sp, #0x44
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L906:
	.align	2, 0
.L905:
	.word	gSaveBlock2Ptr
.Lfe73:
	.size	 Fill1PRecords,.Lfe73-Fill1PRecords
	.align	2, 0
	.type	 Fill2PRecords,function
	.thumb_func
Fill2PRecords:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x74
	mov	r9, r0
	mov	sl, r1
	mov	r0, #0xac
	lsl	r0, r0, #0x1
	bl	AllocZeroed
	mov	r8, r0
	bl	GetPlayerHallRecords
	mov	r0, sp
	add	r0, r0, #0x54
	str	r0, [sp, #0x70]
	add	r1, sp, #0x5c
	mov	ip, r1
	ldr	r0, .L925
	ldr	r1, [r0]
	mov	r0, #0x54
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r3, r0, r1
	mov	r2, sp
	mov	r4, #0x2
.L911:
	add	r0, r2, #0
	ldr	r5, .L925+0x4
	add	r1, r3, r5
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldr	r1, [r1]
	str	r1, [r0]
	add	r3, r3, #0x1c
	add	r2, r2, #0x1c
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L911	@cond_branch
	mov	r6, sl
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldr	r1, [sp, #0x70]
	mov	r7, #0x90
	lsl	r7, r7, #0x1
	add	r0, r0, r7
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	ldr	r0, [r0]
	str	r0, [r1]
	mov	r4, #0x0
.L916:
	mov	r1, #0x0
	mov	r5, #0x0
	mov	r3, #0x0
	lsl	r6, r4, #0x3
	add	r7, r4, #0x1
	mov	r2, sp
.L920:
	ldrh	r0, [r2, #0x8]
	cmp	r0, r1
	ble	.L919	@cond_branch
	add	r5, r3, #0
	add	r1, r0, #0
.L919:
	add	r2, r2, #0x1c
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L920	@cond_branch
	mov	r2, ip
	ldrh	r0, [r2]
	cmp	r0, r1
	blt	.L923	@cond_branch
	mov	r5, #0x3
.L923:
	sub	r1, r6, r4
	lsl	r1, r1, #0x2
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	mov	r3, sp
	add	r2, r3, r0
	add	r1, r1, r9
	add	r0, r2, #0
	ldmia	r0!, {r4, r5, r6}
	stmia	r1!, {r4, r5, r6}
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldr	r0, [r0]
	str	r0, [r1]
	mov	r0, #0x0
	strh	r0, [r2, #0x8]
	add	r4, r7, #0
	cmp	r4, #0x2
	ble	.L916	@cond_branch
	mov	r0, r8
	bl	Free
	add	sp, sp, #0x74
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L926:
	.align	2, 0
.L925:
	.word	gSaveBlock2Ptr
	.word	0x504
.Lfe74:
	.size	 Fill2PRecords,.Lfe74-Fill2PRecords
	.align	2, 0
	.type	 PrintHallRecords,function
	.thumb_func
PrintHallRecords:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x94
	add	r7, r0, #0
	str	r1, [sp, #0x90]
	ldr	r0, .L940
	ldr	r4, .L940+0x4
	lsl	r5, r7, #0x3
	add	r1, r5, r4
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r6, .L940+0x8
	add	r4, r4, #0x4
	add	r5, r5, r4
	ldr	r1, [r5]
	add	r0, r6, #0
	bl	StringExpandPlaceholders
	ldr	r0, .L940+0xc
	mov	r8, r0
	ldrb	r0, [r0]
	mov	r1, #0x1
	mov	sl, r1
	str	r1, [sp]
	mov	r2, #0xff
	mov	r9, r2
	str	r2, [sp, #0x4]
	mov	r5, #0x0
	str	r5, [sp, #0x8]
	add	r2, r6, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	ldr	r1, .L940+0x10
	ldr	r2, [sp, #0x90]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r4, [r0]
	mov	r0, #0x1
	add	r1, r4, #0
	mov	r2, #0xd0
	bl	GetStringRightAlignXOffset
	add	r3, r0, #0
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r2, sl
	str	r2, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r4, #0
	bl	AddTextPrinterParameterized
	cmp	r7, #0x9
	bne	.L928	@cond_branch
	ldr	r2, .L940+0x14
	ldr	r0, [r2]
	mov	r1, #0xe7
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r2, .L940+0x18
	add	r0, r0, r2
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0]
	add	r4, sp, #0x3c
	add	r0, r4, #0
	ldr	r1, [sp, #0x90]
	bl	Fill2PRecords
.L932:
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r2, #0x4
	add	r3, r4, #0
	bl	Print2PRecord
	add	r4, r4, #0x1c
	add	r5, r5, #0x1
	cmp	r5, #0x2
	ble	.L932	@cond_branch
	b	.L934
.L941:
	.align	2, 0
.L940:
	.word	gStringVar1
	.word	sRecordsWindowChallengeTexts
	.word	gStringVar4
	.word	gRecordsWindowId
	.word	sLevelModeText
	.word	gSaveBlock2Ptr
	.word	0xe78
.L928:
	add	r0, sp, #0xc
	add	r1, r7, #0
	ldr	r2, [sp, #0x90]
	bl	Fill1PRecords
	mov	r5, #0x0
	add	r4, sp, #0xc
.L938:
	str	r7, [sp]
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r2, #0x4
	add	r3, r4, #0
	bl	Print1PRecord
	add	r4, r4, #0x10
	add	r5, r5, #0x1
	cmp	r5, #0x2
	ble	.L938	@cond_branch
.L934:
	add	sp, sp, #0x94
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 PrintHallRecords,.Lfe75-PrintHallRecords
	.align	2, 0
	.globl	ShowRankingHallRecordsWindow
	.type	 ShowRankingHallRecordsWindow,function
	.thumb_func
ShowRankingHallRecordsWindow:
	push	{r4, lr}
	ldr	r4, .L943
	ldr	r0, .L943+0x4
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	DrawStdWindowFrame
	ldrb	r0, [r4]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r0, .L943+0x8
	ldrh	r0, [r0]
	mov	r1, #0x0
	bl	PrintHallRecords
	ldrb	r0, [r4]
	bl	PutWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L944:
	.align	2, 0
.L943:
	.word	gRecordsWindowId
	.word	sRankingHallRecordsWindowTemplate
	.word	gSpecialVar_0x8005
.Lfe76:
	.size	 ShowRankingHallRecordsWindow,.Lfe76-ShowRankingHallRecordsWindow
	.align	2, 0
	.globl	ScrollRankingHallRecordsWindow
	.type	 ScrollRankingHallRecordsWindow,function
	.thumb_func
ScrollRankingHallRecordsWindow:
	push	{r4, lr}
	ldr	r4, .L946
	ldrb	r0, [r4]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r0, .L946+0x4
	ldrh	r0, [r0]
	mov	r1, #0x1
	bl	PrintHallRecords
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L947:
	.align	2, 0
.L946:
	.word	gRecordsWindowId
	.word	gSpecialVar_0x8005
.Lfe77:
	.size	 ScrollRankingHallRecordsWindow,.Lfe77-ScrollRankingHallRecordsWindow
	.align	2, 0
	.globl	ClearRankingHallRecords
	.type	 ClearRankingHallRecords,function
	.thumb_func
ClearRankingHallRecords:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r1, #0x0
	ldr	r3, .L974
.L952:
	mov	r6, #0x0
	lsl	r0, r1, #0x1
	add	r2, r1, #0x1
	mov	sl, r2
	add	r0, r0, r1
	lsl	r0, r0, #0x5
	mov	r8, r0
	mov	r7, #0x0
	mov	r0, #0xd2
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r9, r0
.L956:
	mov	r5, #0x0
	str	r7, [sp, #0x8]
	mov	r1, r8
	add	r4, r7, r1
.L960:
	ldr	r0, [r3]
	add	r0, r0, r9
	ldr	r2, [sp, #0x8]
	add	r0, r0, r2
	lsl	r1, r5, #0x4
	add	r0, r0, r1
	mov	r1, #0x0
	str	r3, [sp, #0x4]
	bl	CopyTrainerId
	ldr	r3, [sp, #0x4]
	ldr	r0, [r3]
	add	r0, r0, r4
	mov	r2, #0xd5
	lsl	r2, r2, #0x1
	add	r1, r0, r2
	mov	r0, #0xff
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, r4
	mov	r1, #0xd4
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	add	r4, r4, #0x10
	add	r5, r5, #0x1
	cmp	r5, #0x2
	ble	.L960	@cond_branch
	add	r7, r7, #0x30
	add	r6, r6, #0x1
	cmp	r6, #0x1
	ble	.L956	@cond_branch
	mov	r1, sl
	cmp	r1, #0x8
	ble	.L952	@cond_branch
	mov	r6, #0x0
	ldr	r7, .L974
	mov	r2, #0x54
	mov	sl, r2
	mov	r3, #0xff
	mov	r9, r3
.L967:
	add	r0, r6, #0x1
	mov	r8, r0
	mov	r1, sl
	mul	r1, r1, r6
	mov	r0, #0x54
	mov	r4, r6
	mul	r4, r4, r0
	mov	r2, #0x0
	ldr	r3, .L974+0x4
	add	r6, r1, r3
	mov	r5, #0x2
.L971:
	ldr	r0, [r7]
	add	r0, r0, r6
	add	r0, r0, r2
	mov	r1, #0x0
	str	r2, [sp]
	bl	CopyTrainerId
	ldr	r0, [r7]
	add	r0, r0, r6
	ldr	r2, [sp]
	add	r0, r0, r2
	add	r0, r0, #0x4
	mov	r1, #0x0
	bl	CopyTrainerId
	ldr	r1, [r7]
	add	r1, r1, r4
	ldr	r0, .L974+0x8
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r3, r9
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r1, [r7]
	add	r1, r1, r4
	ldr	r0, .L974+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r0, [r7]
	add	r0, r0, r4
	ldr	r1, .L974+0x10
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	add	r4, r4, #0x1c
	ldr	r2, [sp]
	add	r2, r2, #0x1c
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L971	@cond_branch
	mov	r6, r8
	cmp	r6, #0x1
	ble	.L967	@cond_branch
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L975:
	.align	2, 0
.L974:
	.word	gSaveBlock2Ptr
	.word	0x504
	.word	0x50e
	.word	0x516
	.word	0x50c
.Lfe78:
	.size	 ClearRankingHallRecords,.Lfe78-ClearRankingHallRecords
	.align	2, 0
	.globl	SaveGameFrontier
	.type	 SaveGameFrontier,function
	.thumb_func
SaveGameFrontier:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r0, #0x96
	lsl	r0, r0, #0x2
	bl	AllocZeroed
	add	r7, r0, #0
	add	r4, r7, #0
	mov	r5, #0x0
	mov	r0, #0xfa
	lsl	r0, r0, #0x1
	add	r6, r7, r0
	ldr	r0, .L987
	mov	r8, r0
.L980:
	mov	r0, r8
	add	r1, r5, r0
	add	r0, r4, #0
	mov	r2, #0x64
	bl	memcpy
	add	r4, r4, #0x64
	add	r5, r5, #0x64
	cmp	r4, r6
	ble	.L980	@cond_branch
	ldr	r4, .L987+0x4
	ldrb	r5, [r4]
	bl	LoadPlayerParty
	bl	SetContinueGameWarpStatusToDynamicWarp
	mov	r0, #0x1
	bl	TrySavingData
	bl	ClearContinueGameWarpStatus2
	strb	r5, [r4]
	add	r4, r7, #0
	ldr	r5, .L987
	mov	r0, #0xfa
	lsl	r0, r0, #0x1
	add	r6, r7, r0
.L985:
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x64
	bl	memcpy
	add	r4, r4, #0x64
	add	r5, r5, #0x64
	cmp	r4, r6
	ble	.L985	@cond_branch
	add	r0, r7, #0
	bl	Free
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L988:
	.align	2, 0
.L987:
	.word	gPlayerParty
	.word	gPlayerPartyCount
.Lfe79:
	.size	 SaveGameFrontier,.Lfe79-SaveGameFrontier
	.align	2, 0
	.globl	GetFrontierBrainTrainerPicIndex
	.type	 GetFrontierBrainTrainerPicIndex,function
	.thumb_func
GetFrontierBrainTrainerPicIndex:
	push	{lr}
	ldr	r0, .L992
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L990	@cond_branch
	bl	GetRecordedBattleFrontierFacility
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L991
.L993:
	.align	2, 0
.L992:
	.word	gBattleTypeFlags
.L990:
	ldr	r0, .L994
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L991:
	ldr	r2, .L994+0x4
	ldr	r1, .L994+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
	pop	{r1}
	bx	r1
.L995:
	.align	2, 0
.L994:
	.word	0x40cf
	.word	gTrainers
	.word	sFrontierBrainTrainerIds
.Lfe80:
	.size	 GetFrontierBrainTrainerPicIndex,.Lfe80-GetFrontierBrainTrainerPicIndex
	.align	2, 0
	.globl	GetFrontierBrainTrainerClass
	.type	 GetFrontierBrainTrainerClass,function
	.thumb_func
GetFrontierBrainTrainerClass:
	push	{lr}
	ldr	r0, .L999
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L997	@cond_branch
	bl	GetRecordedBattleFrontierFacility
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L998
.L1000:
	.align	2, 0
.L999:
	.word	gBattleTypeFlags
.L997:
	ldr	r0, .L1001
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L998:
	ldr	r2, .L1001+0x4
	ldr	r1, .L1001+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	pop	{r1}
	bx	r1
.L1002:
	.align	2, 0
.L1001:
	.word	0x40cf
	.word	gTrainers
	.word	sFrontierBrainTrainerIds
.Lfe81:
	.size	 GetFrontierBrainTrainerClass,.Lfe81-GetFrontierBrainTrainerClass
	.align	2, 0
	.globl	CopyFrontierBrainTrainerName
	.type	 CopyFrontierBrainTrainerName,function
	.thumb_func
CopyFrontierBrainTrainerName:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1011
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1004	@cond_branch
	bl	GetRecordedBattleFrontierFacility
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L1005
.L1012:
	.align	2, 0
.L1011:
	.word	gBattleTypeFlags
.L1004:
	ldr	r0, .L1013
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L1005:
	mov	r3, #0x0
	lsl	r0, r0, #0x1
	ldr	r2, .L1013+0x4
	ldr	r1, .L1013+0x8
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, #0x4
	add	r2, r0, r2
.L1009:
	add	r1, r4, r3
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x6
	ble	.L1009	@cond_branch
	add	r1, r4, r3
	mov	r0, #0xff
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1014:
	.align	2, 0
.L1013:
	.word	0x40cf
	.word	gTrainers
	.word	sFrontierBrainTrainerIds
.Lfe82:
	.size	 CopyFrontierBrainTrainerName,.Lfe82-CopyFrontierBrainTrainerName
	.align	2, 0
	.globl	IsFrontierBrainFemale
	.type	 IsFrontierBrainFemale,function
	.thumb_func
IsFrontierBrainFemale:
	push	{lr}
	ldr	r0, .L1016
	bl	VarGet
	lsl	r0, r0, #0x10
	ldr	r1, .L1016+0x4
	lsr	r0, r0, #0xf
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	pop	{r1}
	bx	r1
.L1017:
	.align	2, 0
.L1016:
	.word	0x40cf
	.word	sFrontierBrainObjEventGfx
.Lfe83:
	.size	 IsFrontierBrainFemale,.Lfe83-IsFrontierBrainFemale
	.align	2, 0
	.globl	SetFrontierBrainObjEventGfx_2
	.type	 SetFrontierBrainObjEventGfx_2,function
	.thumb_func
SetFrontierBrainObjEventGfx_2:
	push	{lr}
	ldr	r0, .L1019
	bl	VarGet
	lsl	r0, r0, #0x10
	ldr	r2, .L1019+0x4
	ldr	r1, .L1019+0x8
	lsr	r0, r0, #0xf
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r2, #0
	bl	VarSet
	pop	{r0}
	bx	r0
.L1020:
	.align	2, 0
.L1019:
	.word	0x40cf
	.word	0x4010
	.word	sFrontierBrainObjEventGfx
.Lfe84:
	.size	 SetFrontierBrainObjEventGfx_2,.Lfe84-SetFrontierBrainObjEventGfx_2
	.align	2, 0
	.globl	CreateFrontierBrainPokemon
	.type	 CreateFrontierBrainPokemon,function
	.thumb_func
CreateFrontierBrainPokemon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x50
	ldr	r0, .L1051
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x24]
	bl	GetFronterBrainSymbol
	str	r0, [sp, #0x28]
	ldr	r0, [sp, #0x24]
	cmp	r0, #0x1
	bne	.L1022	@cond_branch
	ldr	r0, .L1051+0x4
	bl	TrainerIdToDomeTournamentId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetDomeTrainerSelectedMons
	add	r4, r0, #0
	b	.L1023
.L1052:
	.align	2, 0
.L1051:
	.word	0x40cf
	.word	0x3fe
.L1022:
	mov	r4, #0x7
.L1023:
	bl	ZeroEnemyPartyMons
	mov	r1, #0x0
	str	r1, [sp, #0x1c]
	bl	SetFacilityPtrsGetLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x20]
	mov	r2, #0x0
	str	r2, [sp, #0x18]
.L1027:
	mov	r0, #0x1
	and	r0, r0, r4
	asr	r4, r4, #0x1
	str	r4, [sp, #0x34]
	ldr	r3, [sp, #0x18]
	add	r3, r3, #0x1
	str	r3, [sp, #0x44]
	cmp	r0, #0
	bne	.LCB9053
	b	.L1026	@long jump
.LCB9053:
	ldr	r4, [sp, #0x18]
	lsl	r4, r4, #0x2
	str	r4, [sp, #0x30]
	ldr	r5, [sp, #0x28]
	lsl	r5, r5, #0x4
	str	r5, [sp, #0x3c]
	ldr	r0, [sp, #0x24]
	lsl	r0, r0, #0x4
	str	r0, [sp, #0x38]
	ldr	r1, [sp, #0x20]
	lsl	r1, r1, #0x18
	str	r1, [sp, #0x40]
	ldr	r2, [sp, #0x1c]
	add	r2, r2, #0x1
	str	r2, [sp, #0x48]
	ldr	r3, [sp, #0x18]
	add	r0, r4, r3
	lsl	r5, r0, #0x2
.L1032:
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsr	r7, r4, #0x10
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	ldr	r0, .L1053
	add	r1, r7, #0
	bl	IsShinyOtIdPersonality
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1032	@cond_branch
	ldr	r4, [sp, #0x3c]
	ldr	r1, [sp, #0x28]
	sub	r0, r4, r1
	lsl	r0, r0, #0x2
	str	r0, [sp, #0x2c]
	add	r4, r5, r0
	ldr	r2, [sp, #0x38]
	ldr	r3, [sp, #0x24]
	sub	r0, r2, r3
	lsl	r0, r0, #0x3
	mov	sl, r0
	add	r4, r4, sl
	ldr	r0, .L1053+0x4
	add	r4, r4, r0
	add	r0, r7, #0
	bl	GetNatureFromPersonality
	ldrb	r1, [r4, #0x5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	bne	.L1032	@cond_branch
	ldr	r1, [sp, #0x30]
	ldr	r2, [sp, #0x18]
	add	r5, r1, r2
	lsl	r5, r5, #0x2
	ldr	r3, [sp, #0x2c]
	add	r4, r5, r3
	add	r4, r4, sl
	ldr	r0, .L1053+0x4
	add	r4, r4, r0
	ldrh	r6, [r4]
	add	r0, r6, #0
	bl	GetFormIdFromFormSpeciesId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [sp, #0x1c]
	mov	r3, #0x64
	mov	r1, r2
	mul	r1, r1, r3
	mov	r9, r1
	ldr	r1, .L1053+0x8
	add	r1, r1, r9
	mov	r8, r1
	ldr	r3, [sp, #0x40]
	lsr	r2, r3, #0x18
	ldrb	r3, [r4, #0x4]
	mov	r1, #0x1
	str	r1, [sp]
	str	r7, [sp, #0x4]
	str	r1, [sp, #0x8]
	ldr	r1, .L1053
	str	r1, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, r8
	add	r1, r6, #0
	bl	CreateMon
	ldr	r0, [sp, #0x2c]
	ldr	r1, .L1053+0x4
	add	r4, r0, r1
	add	r4, r4, sl
	add	r5, r4, r5
	add	r5, r5, #0x2
	mov	r0, r8
	mov	r1, #0xc
	add	r2, r5, #0
	bl	SetMonData
	mov	r7, #0x0
	mov	r6, r9
	ldr	r3, .L1053+0x8
.L1042:
	add	r1, r7, #0
	add	r1, r1, #0x1a
	ldr	r2, [sp, #0x30]
	ldr	r5, [sp, #0x18]
	add	r0, r2, r5
	lsl	r5, r0, #0x2
	add	r2, r4, r5
	add	r0, r7, #0x6
	add	r2, r2, r0
	add	r0, r6, r3
	str	r3, [sp, #0x4c]
	bl	SetMonData
	add	r7, r7, #0x1
	ldr	r3, [sp, #0x4c]
	cmp	r7, #0x5
	ble	.L1042	@cond_branch
	mov	r1, #0xff
	add	r0, sp, #0x14
	strb	r1, [r0]
	mov	r7, #0x0
	ldr	r0, [sp, #0x1c]
	mov	r1, #0x64
	mov	r6, r0
	mul	r6, r6, r1
	ldr	r2, .L1053+0xc
	mov	r8, r2
	ldr	r3, .L1053+0x8
.L1047:
	ldr	r4, [sp, #0x3c]
	ldr	r0, [sp, #0x28]
	sub	r1, r4, r0
	lsl	r1, r1, #0x2
	add	r1, r5, r1
	ldr	r2, [sp, #0x38]
	ldr	r4, [sp, #0x24]
	sub	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r1, r1, r8
	ldrh	r4, [r1]
	lsl	r2, r7, #0x18
	lsr	r2, r2, #0x18
	add	r0, r6, r3
	add	r1, r4, #0
	str	r3, [sp, #0x4c]
	bl	SetMonMoveSlot
	ldr	r3, [sp, #0x4c]
	cmp	r4, #0xda
	bne	.L1046	@cond_branch
	mov	r1, #0x0
	add	r0, sp, #0x14
	strb	r1, [r0]
.L1046:
	add	r5, r5, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L1047	@cond_branch
	ldr	r5, [sp, #0x1c]
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L1053+0x8
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x20
	add	r2, sp, #0x14
	bl	SetMonData
	add	r0, r4, #0
	bl	CalculateMonStats
	ldr	r1, [sp, #0x48]
	str	r1, [sp, #0x1c]
.L1026:
	ldr	r4, [sp, #0x34]
	ldr	r2, [sp, #0x44]
	str	r2, [sp, #0x18]
	cmp	r2, #0x2
	bgt	.LCB9300
	b	.L1027	@long jump
.LCB9300:
	add	sp, sp, #0x50
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1054:
	.align	2, 0
.L1053:
	.word	0xef2a
	.word	sFrontierBrainsMons
	.word	gEnemyParty
	.word	sFrontierBrainsMons+0xc
.Lfe85:
	.size	 CreateFrontierBrainPokemon,.Lfe85-CreateFrontierBrainPokemon
	.align	2, 0
	.globl	GetFrontierBrainMonSpecies
	.type	 GetFrontierBrainMonSpecies,function
	.thumb_func
GetFrontierBrainMonSpecies:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L1056
	bl	VarGet
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	bl	GetFronterBrainSymbol
	ldr	r3, .L1056+0x4
	lsl	r2, r4, #0x2
	add	r2, r2, r4
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	lsl	r0, r5, #0x4
	sub	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r1, r1, r3
	ldrh	r0, [r1]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1057:
	.align	2, 0
.L1056:
	.word	0x40cf
	.word	sFrontierBrainsMons
.Lfe86:
	.size	 GetFrontierBrainMonSpecies,.Lfe86-GetFrontierBrainMonSpecies
	.align	2, 0
	.globl	SetFrontierBrainObjEventGfx
	.type	 SetFrontierBrainObjEventGfx,function
	.thumb_func
SetFrontierBrainObjEventGfx:
	push	{lr}
	lsl	r0, r0, #0x18
	ldr	r2, .L1059
	ldr	r3, .L1059+0x4
	add	r1, r3, #0
	strh	r1, [r2]
	ldr	r2, .L1059+0x8
	ldr	r1, .L1059+0xc
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r2, #0
	bl	VarSet
	pop	{r0}
	bx	r0
.L1060:
	.align	2, 0
.L1059:
	.word	gTrainerBattleOpponent_A
	.word	0x3fe
	.word	0x4010
	.word	sFrontierBrainObjEventGfx
.Lfe87:
	.size	 SetFrontierBrainObjEventGfx,.Lfe87-SetFrontierBrainObjEventGfx
	.align	2, 0
	.globl	GetFrontierBrainMonMove
	.type	 GetFrontierBrainMonMove,function
	.thumb_func
GetFrontierBrainMonMove:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r4, r1, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L1062
	bl	VarGet
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	bl	GetFronterBrainSymbol
	ldr	r2, .L1062+0x4
	lsl	r4, r4, #0x1
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r4, r4, r1
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r4, r4, r1
	lsl	r0, r5, #0x4
	sub	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r4, r0
	add	r2, r2, #0xc
	add	r4, r4, r2
	ldrh	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1063:
	.align	2, 0
.L1062:
	.word	0x40cf
	.word	sFrontierBrainsMons
.Lfe88:
	.size	 GetFrontierBrainMonMove,.Lfe88-GetFrontierBrainMonMove
	.align	2, 0
	.globl	GetFrontierBrainMonNature
	.type	 GetFrontierBrainMonNature,function
	.thumb_func
GetFrontierBrainMonNature:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L1065
	bl	VarGet
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	bl	GetFronterBrainSymbol
	ldr	r3, .L1065+0x4
	lsl	r2, r4, #0x2
	add	r2, r2, r4
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	lsl	r0, r5, #0x4
	sub	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r1, r1, r3
	ldrb	r0, [r1, #0x5]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1066:
	.align	2, 0
.L1065:
	.word	0x40cf
	.word	sFrontierBrainsMons
.Lfe89:
	.size	 GetFrontierBrainMonNature,.Lfe89-GetFrontierBrainMonNature
	.align	2, 0
	.globl	GetFrontierBrainMonEvs
	.type	 GetFrontierBrainMonEvs,function
	.thumb_func
GetFrontierBrainMonEvs:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r4, r1, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L1068
	bl	VarGet
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	bl	GetFronterBrainSymbol
	ldr	r2, .L1068+0x4
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r4, r4, r1
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r4, r4, r1
	lsl	r0, r5, #0x4
	sub	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r4, r0
	add	r2, r2, #0x6
	add	r4, r4, r2
	ldrb	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1069:
	.align	2, 0
.L1068:
	.word	0x40cf
	.word	sFrontierBrainsMons
.Lfe90:
	.size	 GetFrontierBrainMonEvs,.Lfe90-GetFrontierBrainMonEvs
	.align	2, 0
	.globl	GetFronterBrainSymbol
	.type	 GetFronterBrainSymbol,function
	.thumb_func
GetFronterBrainSymbol:
	push	{r4, r5, lr}
	ldr	r0, .L1078
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetPlayerSymbolCountForFacility
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bne	.L1071	@cond_branch
	bl	GetCurrentFacilityWinStreak
	lsl	r0, r0, #0x10
	ldr	r3, .L1078+0x4
	lsl	r2, r5, #0x2
	add	r1, r3, #0x3
	add	r1, r2, r1
	lsr	r0, r0, #0x10
	ldrb	r1, [r1]
	add	r1, r0, r1
	add	r0, r2, r3
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L1072	@cond_branch
	mov	r4, #0x0
	b	.L1071
.L1079:
	.align	2, 0
.L1078:
	.word	0x40cf
	.word	sFrontierBrainStreakAppearances
.L1072:
	add	r0, r3, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r1, r0
	beq	.L1077	@cond_branch
	cmp	r1, r0
	ble	.L1071	@cond_branch
	sub	r0, r1, r0
	add	r1, r3, #0x2
	add	r1, r2, r1
	ldrb	r1, [r1]
	bl	__modsi3
	cmp	r0, #0
	bne	.L1071	@cond_branch
.L1077:
	mov	r4, #0x1
.L1071:
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe91:
	.size	 GetFronterBrainSymbol,.Lfe91-GetFronterBrainSymbol
	.align	2, 0
	.type	 CopyFrontierBrainText,function
	.thumb_func
CopyFrontierBrainText:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L1088
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1081	@cond_branch
	bl	GetRecordedBattleFrontierFacility
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	GetRecordedBattleFronterBrainSymbol
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	b	.L1082
.L1089:
	.align	2, 0
.L1088:
	.word	gBattleTypeFlags
.L1081:
	ldr	r0, .L1090
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	GetFronterBrainSymbol
	add	r1, r0, #0
.L1082:
	cmp	r5, #0
	beq	.L1084	@cond_branch
	cmp	r5, #0x1
	beq	.L1085	@cond_branch
	b	.L1083
.L1091:
	.align	2, 0
.L1090:
	.word	0x40cf
.L1084:
	ldr	r0, .L1092
	ldr	r2, .L1092+0x4
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r2, [r1]
	lsl	r1, r4, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	StringCopy
	b	.L1083
.L1093:
	.align	2, 0
.L1092:
	.word	gStringVar4
	.word	sFrontierBrainPlayerLostTexts
.L1085:
	ldr	r0, .L1094
	ldr	r2, .L1094+0x4
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r2, [r1]
	lsl	r1, r4, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	StringCopy
.L1083:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1095:
	.align	2, 0
.L1094:
	.word	gStringVar4
	.word	sFrontierBrainPlayerWonTexts
.Lfe92:
	.size	 CopyFrontierBrainText,.Lfe92-CopyFrontierBrainText
.text
	.align	2, 0

