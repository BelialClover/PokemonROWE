@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sSaveSectionOffsets,object
sSaveSectionOffsets:
	.short	0x0
	.short	0xf18
	.short	0x0
	.short	0xf80
	.short	0xf80
	.short	0xf80
	.short	0x1f00
	.short	0xf80
	.short	0x2e80
	.short	0x7a0
	.short	0x0
	.short	0xf80
	.short	0xf80
	.short	0xf80
	.short	0x1f00
	.short	0xf80
	.short	0x2e80
	.short	0xf80
	.short	0x3e00
	.short	0xf80
	.short	0x4d80
	.short	0xf80
	.short	0x5d00
	.short	0xf80
	.short	0x6c80
	.short	0xf80
	.short	0x7c00
	.short	0x7d0
	.size	 sSaveSectionOffsets,56
	.globl	gSaveDataBuffer
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gSaveDataBuffer,object
	.size	 gSaveDataBuffer,4096
gSaveDataBuffer:
	.byte	0x0
	.space	4083
	.space	12
	.type	 sUnusedVar,object
	.size	 sUnusedVar,1
sUnusedVar:
	.byte	0x0
.text
	.align	2, 0
	.globl	ClearSaveData
	.type	 ClearSaveData,function
	.thumb_func
ClearSaveData:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r5, .L8
.L6:
	ldr	r1, [r5]
	add	r0, r4, #0
	bl	_call_via_r1
	add	r0, r4, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [r5]
	bl	_call_via_r1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xf
	bls	.L6	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	EraseFlashSector
.Lfe1:
	.size	 ClearSaveData,.Lfe1-ClearSaveData
	.align	2, 0
	.globl	Save_ResetSaveCounters
	.type	 Save_ResetSaveCounters,function
	.thumb_func
Save_ResetSaveCounters:
	ldr	r0, .L11
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L11+0x4
	strh	r1, [r0]
	ldr	r0, .L11+0x8
	str	r1, [r0]
	bx	lr
.L12:
	.align	2, 0
.L11:
	.word	gSaveCounter
	.word	gLastWrittenSector
	.word	gDamagedSaveSectors
.Lfe2:
	.size	 Save_ResetSaveCounters,.Lfe2-Save_ResetSaveCounters
	.align	2, 0
	.type	 SetDamagedSectorBits,function
	.thumb_func
SetDamagedSectorBits:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	mov	r4, #0x0
	cmp	r0, #0x1
	beq	.L16	@cond_branch
	cmp	r0, #0x1
	bgt	.L21	@cond_branch
	cmp	r0, #0
	beq	.L15	@cond_branch
	b	.L14
.L21:
	cmp	r0, #0x2
	beq	.L17	@cond_branch
	b	.L14
.L15:
	ldr	r2, .L22
	mov	r1, #0x1
	lsl	r1, r1, r3
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L14
.L23:
	.align	2, 0
.L22:
	.word	gDamagedSaveSectors
.L16:
	ldr	r2, .L24
	add	r1, r0, #0
	lsl	r1, r1, r3
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	b	.L14
.L25:
	.align	2, 0
.L24:
	.word	gDamagedSaveSectors
.L17:
	ldr	r0, .L26
	mov	r1, #0x1
	lsl	r1, r1, r3
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L14	@cond_branch
	mov	r4, #0x1
.L14:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L27:
	.align	2, 0
.L26:
	.word	gDamagedSaveSectors
.Lfe3:
	.size	 SetDamagedSectorBits,.Lfe3-SetDamagedSectorBits
	.align	2, 0
	.type	 SaveWriteToFlash,function
	.thumb_func
SaveWriteToFlash:
	push	{r4, r5, r6, r7, lr}
	add	r7, r1, #0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r1, .L37
	ldr	r0, .L37+0x4
	str	r0, [r1]
	ldr	r0, .L37+0x8
	cmp	r2, r0
	beq	.L29	@cond_branch
	add	r0, r2, #0
	add	r1, r7, #0
	bl	HandleWriteSector
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L30
.L38:
	.align	2, 0
.L37:
	.word	gFastSaveSection
	.word	gSaveDataBuffer
	.word	0xffff
.L29:
	ldr	r1, .L39
	ldr	r5, .L39+0x4
	ldrh	r0, [r5]
	strh	r0, [r1]
	ldr	r1, .L39+0x8
	ldr	r6, .L39+0xc
	ldr	r4, [r6]
	str	r4, [r1]
	add	r0, r0, #0x1
	strh	r0, [r5]
	ldrh	r0, [r5]
	mov	r1, #0xe
	bl	__umodsi3
	strh	r0, [r5]
	add	r4, r4, #0x1
	str	r4, [r6]
	mov	r5, #0x1
	mov	r4, #0x0
.L34:
	add	r0, r4, #0
	add	r1, r7, #0
	bl	HandleWriteSector
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xd
	bls	.L34	@cond_branch
	ldr	r0, .L39+0x10
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L30	@cond_branch
	mov	r5, #0xff
	ldr	r1, .L39+0x4
	ldr	r0, .L39
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L39+0xc
	ldr	r0, .L39+0x8
	ldr	r0, [r0]
	str	r0, [r1]
.L30:
	add	r0, r5, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L40:
	.align	2, 0
.L39:
	.word	gLastKnownGoodSector
	.word	gLastWrittenSector
	.word	gLastSaveCounter
	.word	gSaveCounter
	.word	gDamagedSaveSectors
.Lfe4:
	.size	 SaveWriteToFlash,.Lfe4-SaveWriteToFlash
	.align	2, 0
	.type	 HandleWriteSector,function
	.thumb_func
HandleWriteSector:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L52
	ldrh	r0, [r0]
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r5, #0
	mov	r1, #0xe
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, .L52+0x4
	ldr	r1, [r2]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r0, r6, #0x3
	add	r0, r0, r4
	ldr	r1, [r0]
	mov	sl, r1
	ldrh	r4, [r0, #0x4]
	mov	r3, #0x0
	mov	r9, r2
	ldr	r2, .L52+0x8
	mov	ip, r2
	mov	r8, ip
	mov	r2, #0x0
	ldr	r1, .L52+0xc
.L45:
	mov	r7, r8
	ldr	r0, [r7]
	add	r0, r0, r3
	strb	r2, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r1
	bls	.L45	@cond_branch
	mov	r0, ip
	ldr	r1, [r0]
	ldr	r2, .L52+0x10
	add	r0, r1, r2
	strh	r6, [r0]
	ldr	r3, .L52+0x14
	add	r2, r1, r3
	ldr	r0, .L52+0x18
	str	r0, [r2]
	ldr	r6, .L52+0x1c
	add	r1, r1, r6
	mov	r7, r9
	ldr	r0, [r7]
	str	r0, [r1]
	mov	r3, #0x0
	lsl	r5, r5, #0x18
	cmp	r3, r4
	bcs	.L48	@cond_branch
	mov	r2, ip
.L50:
	ldr	r1, [r2]
	add	r1, r1, r3
	mov	r6, sl
	add	r0, r6, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r4
	bcc	.L50	@cond_branch
.L48:
	mov	r0, sl
	add	r1, r4, #0
	bl	CalculateChecksum
	ldr	r1, .L52+0x8
	ldr	r1, [r1]
	ldr	r7, .L52+0x20
	add	r2, r1, r7
	strh	r0, [r2]
	lsr	r0, r5, #0x18
	bl	TryWriteSector
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L53:
	.align	2, 0
.L52:
	.word	gLastWrittenSector
	.word	gSaveCounter
	.word	gFastSaveSection
	.word	0xfff
	.word	0xff4
	.word	0xff8
	.word	0x8012025
	.word	0xffc
	.word	0xff6
.Lfe5:
	.size	 HandleWriteSector,.Lfe5-HandleWriteSector
	.align	2, 0
	.type	 HandleWriteSectorNBytes,function
	.thumb_func
HandleWriteSectorNBytes:
	push	{r4, r5, r6, r7, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r4, .L65
	mov	r3, #0x0
	mov	r6, #0x0
	ldr	r1, .L65+0x4
.L58:
	add	r0, r4, r3
	strb	r6, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r1
	bls	.L58	@cond_branch
	ldr	r0, .L65+0x8
	add	r1, r4, r0
	ldr	r0, .L65+0xc
	str	r0, [r1]
	mov	r3, #0x0
	cmp	r3, r2
	bcs	.L61	@cond_branch
.L63:
	add	r1, r4, r3
	add	r0, r5, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r2
	bcc	.L63	@cond_branch
.L61:
	add	r0, r5, #0
	add	r1, r2, #0
	bl	CalculateChecksum
	ldr	r2, .L65+0x10
	add	r1, r4, r2
	strh	r0, [r1]
	add	r0, r7, #0
	add	r1, r4, #0
	bl	TryWriteSector
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L66:
	.align	2, 0
.L65:
	.word	gSaveDataBuffer
	.word	0xfff
	.word	0xff8
	.word	0x8012025
	.word	0xff4
.Lfe6:
	.size	 HandleWriteSectorNBytes,.Lfe6-HandleWriteSectorNBytes
	.align	2, 0
	.type	 TryWriteSector,function
	.thumb_func
TryWriteSector:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	ProgramFlashSectorAndVerify
	cmp	r0, #0
	bne	.L68	@cond_branch
	mov	r0, #0x1
	add	r1, r4, #0
	bl	SetDamagedSectorBits
	mov	r0, #0x1
	b	.L70
.L68:
	mov	r0, #0x0
	add	r1, r4, #0
	bl	SetDamagedSectorBits
	mov	r0, #0xff
.L70:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 TryWriteSector,.Lfe7-TryWriteSector
	.align	2, 0
	.type	 RestoreSaveBackupVarsAndIncrement,function
	.thumb_func
RestoreSaveBackupVarsAndIncrement:
	push	{r4, r5, r6, lr}
	ldr	r1, .L72
	ldr	r0, .L72+0x4
	str	r0, [r1]
	ldr	r1, .L72+0x8
	ldr	r5, .L72+0xc
	ldrh	r0, [r5]
	strh	r0, [r1]
	ldr	r1, .L72+0x10
	ldr	r6, .L72+0x14
	ldr	r4, [r6]
	str	r4, [r1]
	add	r0, r0, #0x1
	strh	r0, [r5]
	ldrh	r0, [r5]
	mov	r1, #0xe
	bl	__umodsi3
	strh	r0, [r5]
	add	r4, r4, #0x1
	str	r4, [r6]
	ldr	r1, .L72+0x18
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L72+0x1c
	mov	r0, #0x0
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L73:
	.align	2, 0
.L72:
	.word	gFastSaveSection
	.word	gSaveDataBuffer
	.word	gLastKnownGoodSector
	.word	gLastWrittenSector
	.word	gLastSaveCounter
	.word	gSaveCounter
	.word	gUnknown_03006208
	.word	gDamagedSaveSectors
.Lfe8:
	.size	 RestoreSaveBackupVarsAndIncrement,.Lfe8-RestoreSaveBackupVarsAndIncrement
	.align	2, 0
	.type	 RestoreSaveBackupVars,function
	.thumb_func
RestoreSaveBackupVars:
	ldr	r1, .L75
	ldr	r0, .L75+0x4
	str	r0, [r1]
	ldr	r1, .L75+0x8
	ldr	r0, .L75+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L75+0x10
	ldr	r0, .L75+0x14
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r1, .L75+0x18
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L75+0x1c
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L76:
	.align	2, 0
.L75:
	.word	gFastSaveSection
	.word	gSaveDataBuffer
	.word	gLastKnownGoodSector
	.word	gLastWrittenSector
	.word	gLastSaveCounter
	.word	gSaveCounter
	.word	gUnknown_03006208
	.word	gDamagedSaveSectors
.Lfe9:
	.size	 RestoreSaveBackupVars,.Lfe9-RestoreSaveBackupVars
	.align	2, 0
	.type	 sub_81529D4,function
	.thumb_func
sub_81529D4:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L81
	ldrh	r2, [r4]
	sub	r0, r0, #0x1
	cmp	r2, r0
	bge	.L78	@cond_branch
	mov	r5, #0x1
	add	r0, r2, #0
	bl	HandleWriteSector
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	ldr	r0, .L81+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L80	@cond_branch
	mov	r5, #0xff
	ldr	r1, .L81+0x8
	ldr	r0, .L81+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L81+0x10
	ldr	r0, .L81+0x14
	ldr	r0, [r0]
	str	r0, [r1]
	b	.L80
.L82:
	.align	2, 0
.L81:
	.word	gUnknown_03006208
	.word	gDamagedSaveSectors
	.word	gLastWrittenSector
	.word	gLastKnownGoodSector
	.word	gSaveCounter
	.word	gLastSaveCounter
.L78:
	mov	r5, #0xff
.L80:
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 sub_81529D4,.Lfe10-sub_81529D4
	.align	2, 0
	.type	 sub_8152A34,function
	.thumb_func
sub_8152A34:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	mov	r4, #0x1
	ldr	r2, .L85
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	bl	ClearSaveData_2
	ldr	r0, .L85+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L84	@cond_branch
	mov	r4, #0xff
	ldr	r1, .L85+0x8
	ldr	r0, .L85+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L85+0x10
	ldr	r0, .L85+0x14
	ldr	r0, [r0]
	str	r0, [r1]
.L84:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L86:
	.align	2, 0
.L85:
	.word	-0x10000
	.word	gDamagedSaveSectors
	.word	gLastWrittenSector
	.word	gLastKnownGoodSector
	.word	gSaveCounter
	.word	gLastSaveCounter
.Lfe11:
	.size	 sub_8152A34,.Lfe11-sub_8152A34
	.align	2, 0
	.type	 ClearSaveData_2,function
	.thumb_func
ClearSaveData_2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L116
	ldrh	r0, [r0]
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r5, #0
	mov	r1, #0xe
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, .L116+0x4
	ldr	r1, [r2]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r0, r6, #0x3
	add	r0, r0, r4
	ldr	r1, [r0]
	mov	sl, r1
	ldrh	r3, [r0, #0x4]
	mov	r4, #0x0
	mov	r9, r2
	ldr	r2, .L116+0x8
	mov	ip, r2
	mov	r8, ip
	mov	r2, #0x0
	ldr	r1, .L116+0xc
.L91:
	mov	r7, r8
	ldr	r0, [r7]
	add	r0, r0, r4
	strb	r2, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r1
	bls	.L91	@cond_branch
	mov	r0, ip
	ldr	r1, [r0]
	ldr	r2, .L116+0x10
	add	r0, r1, r2
	strh	r6, [r0]
	ldr	r6, .L116+0x14
	add	r2, r1, r6
	ldr	r0, .L116+0x18
	str	r0, [r2]
	ldr	r7, .L116+0x1c
	add	r1, r1, r7
	mov	r2, r9
	ldr	r0, [r2]
	str	r0, [r1]
	mov	r4, #0x0
	lsl	r6, r5, #0x18
	mov	r8, r6
	cmp	r4, r3
	bcs	.L94	@cond_branch
	mov	r2, ip
.L96:
	ldr	r1, [r2]
	add	r1, r1, r4
	mov	r7, sl
	add	r0, r7, r4
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r3
	bcc	.L96	@cond_branch
.L94:
	mov	r0, sl
	add	r1, r3, #0
	bl	CalculateChecksum
	ldr	r1, .L116+0x8
	ldr	r1, [r1]
	ldr	r2, .L116+0x20
	add	r1, r1, r2
	strh	r0, [r1]
	ldr	r0, .L116+0x24
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
	mov	r6, #0x1
	mov	r4, #0x0
	ldr	r7, .L116+0x28
	mov	r9, r7
	ldr	r7, .L116+0x2c
	b	.L98
.L117:
	.align	2, 0
.L116:
	.word	gLastWrittenSector
	.word	gSaveCounter
	.word	gFastSaveSection
	.word	0xfff
	.word	0xff4
	.word	0xff8
	.word	0x8012025
	.word	0xffc
	.word	0xff6
	.word	EraseFlashSector
	.word	0xff7
	.word	ProgramFlashByte
.L100:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L98:
	cmp	r4, r9
	bhi	.L99	@cond_branch
	ldr	r0, .L118
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrb	r2, [r0]
	ldr	r3, [r7]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	_call_via_r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L100	@cond_branch
	mov	r6, #0xff
.L99:
	cmp	r6, #0xff
	bne	.L104	@cond_branch
	mov	r0, r8
	lsr	r1, r0, #0x18
	b	.L115
.L119:
	.align	2, 0
.L118:
	.word	gFastSaveSection
.L104:
	mov	r6, #0x1
	mov	r4, #0x0
	ldr	r1, .L120
	mov	r9, r1
	ldr	r7, .L120+0x4
	b	.L106
.L121:
	.align	2, 0
.L120:
	.word	ProgramFlashByte
	.word	0xff9
.L108:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L106:
	cmp	r4, #0x6
	bhi	.L107	@cond_branch
	add	r1, r4, r7
	ldr	r0, .L122
	ldr	r0, [r0]
	add	r0, r4, r0
	add	r0, r0, r7
	ldrb	r2, [r0]
	mov	r0, r9
	ldr	r3, [r0]
	add	r0, r5, #0
	bl	_call_via_r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L108	@cond_branch
	mov	r6, #0xff
.L107:
	cmp	r6, #0xff
	beq	.L112	@cond_branch
	mov	r2, r8
	lsr	r1, r2, #0x18
	mov	r0, #0x1
	bl	SetDamagedSectorBits
	mov	r0, #0x1
	b	.L114
.L123:
	.align	2, 0
.L122:
	.word	gFastSaveSection
.L112:
	mov	r6, r8
	lsr	r1, r6, #0x18
.L115:
	mov	r0, #0x0
	bl	SetDamagedSectorBits
	mov	r0, #0xff
.L114:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 ClearSaveData_2,.Lfe12-ClearSaveData_2
	.align	2, 0
	.type	 sav12_xor_get,function
	.thumb_func
sav12_xor_get:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	ldr	r6, .L128
	lsr	r0, r0, #0x10
	ldrh	r1, [r6]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0xe
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r5, .L128+0x4
	ldr	r1, [r5]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L128+0x8
	ldr	r1, .L128+0xc
	ldr	r3, [r0]
	add	r0, r4, #0
	mov	r2, #0x25
	bl	_call_via_r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L125	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	SetDamagedSectorBits
	mov	r0, #0x1
	b	.L127
.L129:
	.align	2, 0
.L128:
	.word	gLastWrittenSector
	.word	gSaveCounter
	.word	ProgramFlashByte
	.word	0xff8
.L125:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	bl	SetDamagedSectorBits
	ldr	r0, .L130
	ldrh	r0, [r0]
	strh	r0, [r6]
	ldr	r0, .L130+0x4
	ldr	r0, [r0]
	str	r0, [r5]
	mov	r0, #0xff
.L127:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L131:
	.align	2, 0
.L130:
	.word	gLastKnownGoodSector
	.word	gLastSaveCounter
.Lfe13:
	.size	 sav12_xor_get,.Lfe13-sav12_xor_get
	.align	2, 0
	.type	 sub_8152CAC,function
	.thumb_func
sub_8152CAC:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	ldr	r6, .L136
	lsr	r0, r0, #0x10
	ldrh	r1, [r6]
	add	r0, r0, r1
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0xe
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r5, .L136+0x4
	ldr	r1, [r5]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r3, .L136+0x8
	ldr	r1, .L136+0xc
	ldr	r0, .L136+0x10
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	ldr	r3, [r3]
	add	r0, r4, #0
	bl	_call_via_r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L133	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	SetDamagedSectorBits
	mov	r0, #0x1
	b	.L135
.L137:
	.align	2, 0
.L136:
	.word	gLastWrittenSector
	.word	gSaveCounter
	.word	ProgramFlashByte
	.word	0xff8
	.word	gFastSaveSection
.L133:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	bl	SetDamagedSectorBits
	ldr	r0, .L138
	ldrh	r0, [r0]
	strh	r0, [r6]
	ldr	r0, .L138+0x4
	ldr	r0, [r0]
	str	r0, [r5]
	mov	r0, #0xff
.L135:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L139:
	.align	2, 0
.L138:
	.word	gLastKnownGoodSector
	.word	gLastSaveCounter
.Lfe14:
	.size	 sub_8152CAC,.Lfe14-sub_8152CAC
	.align	2, 0
	.type	 sub_8152D44,function
	.thumb_func
sub_8152D44:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	ldr	r6, .L144
	lsr	r0, r0, #0x10
	ldrh	r1, [r6]
	add	r0, r0, r1
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0xe
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r5, .L144+0x4
	ldr	r1, [r5]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L144+0x8
	ldr	r1, .L144+0xc
	ldr	r3, [r0]
	add	r0, r4, #0
	mov	r2, #0x25
	bl	_call_via_r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L141	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	SetDamagedSectorBits
	mov	r0, #0x1
	b	.L143
.L145:
	.align	2, 0
.L144:
	.word	gLastWrittenSector
	.word	gSaveCounter
	.word	ProgramFlashByte
	.word	0xff8
.L141:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	bl	SetDamagedSectorBits
	ldr	r0, .L146
	ldrh	r0, [r0]
	strh	r0, [r6]
	ldr	r0, .L146+0x4
	ldr	r0, [r0]
	str	r0, [r5]
	mov	r0, #0xff
.L143:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L147:
	.align	2, 0
.L146:
	.word	gLastKnownGoodSector
	.word	gLastSaveCounter
.Lfe15:
	.size	 sub_8152D44,.Lfe15-sub_8152D44
	.align	2, 0
	.type	 sub_8152DD0,function
	.thumb_func
sub_8152DD0:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r1, .L151
	ldr	r0, .L151+0x4
	str	r0, [r1]
	ldr	r0, .L151+0x8
	cmp	r4, r0
	beq	.L149	@cond_branch
	mov	r5, #0xff
	b	.L150
.L152:
	.align	2, 0
.L151:
	.word	gFastSaveSection
	.word	gSaveDataBuffer
	.word	0xffff
.L149:
	add	r0, r6, #0
	bl	GetSaveValidStatus
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r4, #0
	add	r1, r6, #0
	bl	sub_8152E10
.L150:
	add	r0, r5, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 sub_8152DD0,.Lfe16-sub_8152DD0
	.align	2, 0
	.type	 sub_8152E10,function
	.thumb_func
sub_8152E10:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r1
	ldr	r0, .L166
	ldr	r1, [r0]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x11
	lsr	r7, r0, #0x10
	mov	r5, #0x0
	ldr	r6, .L166+0x4
.L157:
	add	r0, r5, r7
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r6]
	bl	DoReadFlashWholeSection
	ldr	r0, [r6]
	ldr	r1, .L166+0x8
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, #0
	bne	.L158	@cond_branch
	ldr	r0, .L166+0xc
	strh	r5, [r0]
.L158:
	ldr	r0, [r6]
	lsl	r1, r1, #0x3
	mov	r2, r8
	add	r4, r1, r2
	ldrh	r1, [r4, #0x4]
	bl	CalculateChecksum
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r2, [r6]
	ldr	r1, .L166+0x10
	add	r0, r2, r1
	ldr	r1, [r0]
	ldr	r0, .L166+0x14
	add	r5, r5, #0x1
	cmp	r1, r0
	bne	.L156	@cond_branch
	ldr	r1, .L166+0x18
	add	r0, r2, r1
	ldrh	r0, [r0]
	cmp	r0, r3
	bne	.L156	@cond_branch
	mov	r2, #0x0
	ldrh	r0, [r4, #0x4]
	cmp	r2, r0
	bcs	.L156	@cond_branch
	add	r3, r4, #0
	ldr	r4, .L166+0x4
.L163:
	ldr	r1, [r3]
	add	r1, r1, r2
	ldr	r0, [r4]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrh	r1, [r3, #0x4]
	cmp	r2, r1
	bcc	.L163	@cond_branch
.L156:
	lsl	r0, r5, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xd
	bls	.L157	@cond_branch
	mov	r0, #0x1
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L167:
	.align	2, 0
.L166:
	.word	gSaveCounter
	.word	gFastSaveSection
	.word	0xff4
	.word	gLastWrittenSector
	.word	0xff8
	.word	0x8012025
	.word	0xff6
.Lfe17:
	.size	 sub_8152E10,.Lfe17-sub_8152E10
	.align	2, 0
	.type	 GetSaveValidStatus,function
	.thumb_func
GetSaveValidStatus:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	sl, r0
	mov	r0, #0x0
	mov	r8, r0
	mov	r9, r0
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r4, #0x0
	ldr	r7, .L208
.L172:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r7]
	bl	DoReadFlashWholeSection
	ldr	r2, [r7]
	ldr	r1, .L208+0x4
	add	r0, r2, r1
	ldr	r1, [r0]
	ldr	r0, .L208+0x8
	cmp	r1, r0
	bne	.L171	@cond_branch
	mov	r5, #0x1
	ldr	r3, .L208+0xc
	add	r0, r2, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	ldrh	r1, [r0, #0x4]
	add	r0, r2, #0
	bl	CalculateChecksum
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r1, [r7]
	ldr	r3, .L208+0x10
	add	r0, r1, r3
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L171	@cond_branch
	ldr	r2, .L208+0x14
	add	r0, r1, r2
	ldr	r0, [r0]
	mov	r8, r0
	sub	r3, r3, #0x2
	add	r1, r1, r3
	add	r0, r5, #0
	ldrh	r1, [r1]
	lsl	r0, r0, r1
	orr	r6, r6, r0
.L171:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xd
	bls	.L172	@cond_branch
	cmp	r5, #0
	beq	.L176	@cond_branch
	ldr	r0, .L208+0x18
	mov	r1, #0xff
	str	r1, [sp]
	cmp	r6, r0
	bne	.L179	@cond_branch
	mov	r2, #0x1
	str	r2, [sp]
	b	.L179
.L209:
	.align	2, 0
.L208:
	.word	gFastSaveSection
	.word	0xff8
	.word	0x8012025
	.word	0xff4
	.word	0xff6
	.word	0xffc
	.word	0x3fff
.L176:
	mov	r3, #0x0
	str	r3, [sp]
.L179:
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r4, #0x0
	ldr	r7, .L210
.L183:
	add	r0, r4, #0
	add	r0, r0, #0xe
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r7]
	bl	DoReadFlashWholeSection
	ldr	r2, [r7]
	ldr	r1, .L210+0x4
	add	r0, r2, r1
	ldr	r1, [r0]
	ldr	r0, .L210+0x8
	cmp	r1, r0
	bne	.L182	@cond_branch
	mov	r5, #0x1
	ldr	r3, .L210+0xc
	add	r0, r2, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	ldrh	r1, [r0, #0x4]
	add	r0, r2, #0
	bl	CalculateChecksum
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r1, [r7]
	ldr	r3, .L210+0x10
	add	r0, r1, r3
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L182	@cond_branch
	ldr	r2, .L210+0x14
	add	r0, r1, r2
	ldr	r0, [r0]
	mov	r9, r0
	sub	r3, r3, #0x2
	add	r1, r1, r3
	add	r0, r5, #0
	ldrh	r1, [r1]
	lsl	r0, r0, r1
	orr	r6, r6, r0
.L182:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xd
	bls	.L183	@cond_branch
	cmp	r5, #0
	beq	.L187	@cond_branch
	ldr	r0, .L210+0x18
	mov	r1, #0xff
	cmp	r6, r0
	bne	.L190	@cond_branch
	mov	r1, #0x1
	b	.L190
.L211:
	.align	2, 0
.L210:
	.word	gFastSaveSection
	.word	0xff8
	.word	0x8012025
	.word	0xff4
	.word	0xff6
	.word	0xffc
	.word	0x3fff
.L187:
	mov	r1, #0x0
.L190:
	ldr	r0, [sp]
	cmp	r0, #0x1
	bne	.L200	@cond_branch
	cmp	r1, #0x1
	bne	.L191	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r8, r0
	bne	.L194	@cond_branch
	mov	r1, r9
	cmp	r1, #0
	beq	.L193	@cond_branch
.L194:
	mov	r2, r8
	cmp	r2, #0
	bne	.L192	@cond_branch
	cmp	r9, r0
	bne	.L192	@cond_branch
.L193:
	mov	r1, r8
	add	r1, r1, #0x1
	mov	r0, r9
	add	r0, r0, #0x1
	cmp	r1, r0
	bcs	.L195	@cond_branch
	ldr	r0, .L212
	mov	r3, r9
	b	.L206
.L213:
	.align	2, 0
.L212:
	.word	gSaveCounter
.L195:
	ldr	r0, .L214
	mov	r1, r8
	str	r1, [r0]
	b	.L203
.L215:
	.align	2, 0
.L214:
	.word	gSaveCounter
.L192:
	cmp	r8, r9
	bcs	.L198	@cond_branch
	ldr	r0, .L216
	mov	r2, r9
	str	r2, [r0]
	b	.L203
.L217:
	.align	2, 0
.L216:
	.word	gSaveCounter
.L198:
	ldr	r0, .L218
	mov	r3, r8
.L206:
	str	r3, [r0]
	b	.L203
.L219:
	.align	2, 0
.L218:
	.word	gSaveCounter
.L191:
	ldr	r0, .L220
	mov	r2, r8
	str	r2, [r0]
	cmp	r1, #0xff
	beq	.L207	@cond_branch
	b	.L203
.L221:
	.align	2, 0
.L220:
	.word	gSaveCounter
.L200:
	cmp	r1, #0x1
	bne	.L202	@cond_branch
	ldr	r0, .L222
	mov	r3, r9
	str	r3, [r0]
	ldr	r0, [sp]
	cmp	r0, #0xff
	bne	.L203	@cond_branch
.L207:
	mov	r0, #0xff
	b	.L205
.L223:
	.align	2, 0
.L222:
	.word	gSaveCounter
.L203:
	mov	r0, #0x1
	b	.L205
.L202:
	ldr	r2, [sp]
	cmp	r2, #0
	bne	.L204	@cond_branch
	cmp	r1, #0
	bne	.L204	@cond_branch
	ldr	r0, .L224
	str	r1, [r0]
	ldr	r0, .L224+0x4
	strh	r1, [r0]
	mov	r0, #0x0
	b	.L205
.L225:
	.align	2, 0
.L224:
	.word	gSaveCounter
	.word	gLastWrittenSector
.L204:
	ldr	r0, .L226
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L226+0x4
	strh	r1, [r0]
	mov	r0, #0x2
.L205:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L227:
	.align	2, 0
.L226:
	.word	gSaveCounter
	.word	gLastWrittenSector
.Lfe18:
	.size	 GetSaveValidStatus,.Lfe18-GetSaveValidStatus
	.align	2, 0
	.type	 sub_81530DC,function
	.thumb_func
sub_81530DC:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r4, r2, #0x10
	ldr	r5, .L239
	add	r1, r5, #0
	bl	DoReadFlashWholeSection
	ldr	r1, .L239+0x4
	add	r0, r5, r1
	ldr	r1, [r0]
	ldr	r0, .L239+0x8
	cmp	r1, r0
	bne	.L229	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	CalculateChecksum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L239+0xc
	add	r1, r5, r2
	ldrh	r1, [r1]
	cmp	r1, r0
	bne	.L230	@cond_branch
	mov	r2, #0x0
	cmp	r2, r4
	bcs	.L232	@cond_branch
.L234:
	add	r1, r6, r2
	add	r0, r5, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r4
	bcc	.L234	@cond_branch
.L232:
	mov	r0, #0x1
	b	.L238
.L240:
	.align	2, 0
.L239:
	.word	gSaveDataBuffer
	.word	0xff8
	.word	0x8012025
	.word	0xff4
.L230:
	mov	r0, #0x2
	b	.L238
.L229:
	mov	r0, #0x0
.L238:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 sub_81530DC,.Lfe19-sub_81530DC
	.align	2, 0
	.type	 DoReadFlashWholeSection,function
	.thumb_func
DoReadFlashWholeSection:
	push	{lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	mov	r1, #0x0
	bl	ReadFlash
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 DoReadFlashWholeSection,.Lfe20-DoReadFlashWholeSection
	.align	2, 0
	.type	 CalculateChecksum,function
	.thumb_func
CalculateChecksum:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	mov	r2, #0x0
	mov	r3, #0x0
	lsr	r1, r1, #0x12
	cmp	r2, r1
	bcs	.L244	@cond_branch
.L246:
	ldmia	r4!, {r0}
	add	r2, r2, r0
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r1
	bcc	.L246	@cond_branch
.L244:
	lsr	r0, r2, #0x10
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 CalculateChecksum,.Lfe21-CalculateChecksum
	.align	2, 0
	.type	 UpdateSaveAddresses,function
	.thumb_func
UpdateSaveAddresses:
	push	{r4, r5, lr}
	ldr	r3, .L260
	ldr	r0, .L260+0x4
	ldr	r2, .L260+0x8
	ldrh	r1, [r2]
	ldr	r0, [r0]
	add	r0, r0, r1
	str	r0, [r3]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r3, #0x4]
	ldr	r5, .L260+0xc
	add	r3, r3, #0x8
	add	r2, r2, #0x4
	mov	r4, #0x3
.L252:
	ldrh	r0, [r2]
	ldr	r1, [r5]
	add	r1, r1, r0
	str	r1, [r3]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r3, #0x4]
	add	r3, r3, #0x8
	add	r2, r2, #0x4
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L252	@cond_branch
	mov	r4, #0x5
	ldr	r1, .L260
	ldr	r5, .L260+0x10
	ldr	r0, .L260+0x8
	add	r3, r1, #0
	add	r3, r3, #0x28
	add	r2, r0, #0
	add	r2, r2, #0x14
.L257:
	ldrh	r0, [r2]
	ldr	r1, [r5]
	add	r1, r1, r0
	str	r1, [r3]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r3, #0x4]
	add	r3, r3, #0x8
	add	r2, r2, #0x4
	add	r4, r4, #0x1
	cmp	r4, #0xd
	ble	.L257	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L261:
	.align	2, 0
.L260:
	.word	gRamSaveSectionLocations
	.word	gSaveBlock2Ptr
	.word	sSaveSectionOffsets
	.word	gSaveBlock1Ptr
	.word	gPokemonStoragePtr
.Lfe22:
	.size	 UpdateSaveAddresses,.Lfe22-UpdateSaveAddresses
	.align	2, 0
	.globl	HandleSavingData
	.type	 HandleSavingData,function
	.thumb_func
HandleSavingData:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L293
	ldr	r6, [r1]
	mov	r0, #0x0
	str	r0, [r1]
	bl	UpdateSaveAddresses
	cmp	r4, #0x5
	bhi	.L273	@cond_branch
	lsl	r0, r4, #0x2
	ldr	r1, .L293+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L294:
	.align	2, 0
.L293:
	.word	gTrainerHillVBlankCounter
	.word	.L292
	.align	2, 0
	.align	2, 0
.L292:
	.word	.L273
	.word	.L275
	.word	.L275
	.word	.L270
	.word	.L286
	.word	.L264
.L264:
	mov	r4, #0x1c
	ldr	r5, .L295
.L268:
	ldr	r1, [r5]
	add	r0, r4, #0
	bl	_call_via_r1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1f
	bls	.L268	@cond_branch
.L270:
	mov	r0, #0xa
	bl	GetGameStat
	ldr	r1, .L295+0x4
	cmp	r0, r1
	bhi	.L271	@cond_branch
	mov	r0, #0xa
	bl	IncrementGameStat
.L271:
	bl	SaveSerializedGame
	ldr	r0, .L295+0x8
	ldr	r1, .L295+0xc
	bl	SaveWriteToFlash
	ldr	r4, .L295+0x10
	mov	r5, #0xf8
	lsl	r5, r5, #0x4
	mov	r0, #0x1c
	add	r1, r4, #0
	add	r2, r5, #0
	bl	HandleWriteSectorNBytes
	add	r4, r4, r5
	mov	r0, #0x1d
	add	r1, r4, #0
	add	r2, r5, #0
	bl	HandleWriteSectorNBytes
	b	.L263
.L296:
	.align	2, 0
.L295:
	.word	EraseFlashSector
	.word	0x3e6
	.word	0xffff
	.word	gRamSaveSectionLocations
	.word	gDecompressionBuffer
.L273:
	bl	SaveSerializedGame
	ldr	r0, .L297
	ldr	r1, .L297+0x4
	bl	SaveWriteToFlash
	b	.L263
.L298:
	.align	2, 0
.L297:
	.word	0xffff
	.word	gRamSaveSectionLocations
.L275:
	bl	SaveSerializedGame
	mov	r4, #0x0
.L279:
	add	r0, r4, #0
	ldr	r1, .L299
	bl	ClearSaveData_2
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x4
	bls	.L279	@cond_branch
	mov	r4, #0x0
.L284:
	add	r0, r4, #0
	ldr	r1, .L299
	bl	sav12_xor_get
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x4
	bls	.L284	@cond_branch
	b	.L263
.L300:
	.align	2, 0
.L299:
	.word	gRamSaveSectionLocations
.L286:
	mov	r4, #0x1c
	ldr	r5, .L301
.L290:
	ldr	r1, [r5]
	add	r0, r4, #0
	bl	_call_via_r1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1f
	bls	.L290	@cond_branch
	bl	SaveSerializedGame
	ldr	r0, .L301+0x4
	ldr	r1, .L301+0x8
	bl	SaveWriteToFlash
.L263:
	ldr	r0, .L301+0xc
	str	r6, [r0]
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L302:
	.align	2, 0
.L301:
	.word	EraseFlashSector
	.word	0xffff
	.word	gRamSaveSectionLocations
	.word	gTrainerHillVBlankCounter
.Lfe23:
	.size	 HandleSavingData,.Lfe23-HandleSavingData
	.align	2, 0
	.globl	TrySavingData
	.type	 TrySavingData,function
	.thumb_func
TrySavingData:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L309
	ldr	r4, [r0]
	cmp	r4, #0x1
	bne	.L308	@cond_branch
	add	r0, r5, #0
	bl	HandleSavingData
	ldr	r0, .L309+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L305	@cond_branch
	add	r0, r5, #0
	bl	DoSaveFailedScreen
.L308:
	ldr	r1, .L309+0x8
	mov	r0, #0xff
	strh	r0, [r1]
	mov	r0, #0xff
	b	.L307
.L310:
	.align	2, 0
.L309:
	.word	gFlashMemoryPresent
	.word	gDamagedSaveSectors
	.word	gSaveAttemptStatus
.L305:
	ldr	r0, .L311
	strh	r4, [r0]
	mov	r0, #0x1
.L307:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L312:
	.align	2, 0
.L311:
	.word	gSaveAttemptStatus
.Lfe24:
	.size	 TrySavingData,.Lfe24-TrySavingData
	.align	2, 0
	.globl	sub_8153380
	.type	 sub_8153380,function
	.thumb_func
sub_8153380:
	push	{lr}
	ldr	r0, .L316
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L314	@cond_branch
	bl	UpdateSaveAddresses
	bl	SaveSerializedGame
	ldr	r0, .L316+0x4
	bl	RestoreSaveBackupVarsAndIncrement
	mov	r0, #0x0
	b	.L315
.L317:
	.align	2, 0
.L316:
	.word	gFlashMemoryPresent
	.word	gRamSaveSectionLocations
.L314:
	mov	r0, #0x1
.L315:
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 sub_8153380,.Lfe25-sub_8153380
	.align	2, 0
	.globl	sub_81533AC
	.type	 sub_81533AC,function
	.thumb_func
sub_81533AC:
	push	{r4, lr}
	ldr	r1, .L323
	mov	r0, #0xe
	bl	sub_81529D4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L323+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L319	@cond_branch
	mov	r0, #0x0
	bl	DoSaveFailedScreen
.L319:
	cmp	r4, #0xff
	beq	.L320	@cond_branch
	mov	r0, #0x0
	b	.L322
.L324:
	.align	2, 0
.L323:
	.word	gRamSaveSectionLocations
	.word	gDamagedSaveSectors
.L320:
	mov	r0, #0x1
.L322:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 sub_81533AC,.Lfe26-sub_81533AC
	.align	2, 0
	.globl	sub_81533E0
	.type	 sub_81533E0,function
	.thumb_func
sub_81533E0:
	push	{lr}
	ldr	r1, .L327
	mov	r0, #0xe
	bl	sub_8152A34
	ldr	r0, .L327+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L326	@cond_branch
	mov	r0, #0x0
	bl	DoSaveFailedScreen
.L326:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L328:
	.align	2, 0
.L327:
	.word	gRamSaveSectionLocations
	.word	gDamagedSaveSectors
.Lfe27:
	.size	 sub_81533E0,.Lfe27-sub_81533E0
	.align	2, 0
	.globl	sub_8153408
	.type	 sub_8153408,function
	.thumb_func
sub_8153408:
	push	{lr}
	ldr	r1, .L331
	mov	r0, #0xe
	bl	sub_8152CAC
	ldr	r0, .L331+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L330	@cond_branch
	mov	r0, #0x0
	bl	DoSaveFailedScreen
.L330:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L332:
	.align	2, 0
.L331:
	.word	gRamSaveSectionLocations
	.word	gDamagedSaveSectors
.Lfe28:
	.size	 sub_8153408,.Lfe28-sub_8153408
	.align	2, 0
	.globl	FullSaveGame
	.type	 FullSaveGame,function
	.thumb_func
FullSaveGame:
	push	{r4, lr}
	ldr	r0, .L336
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L334	@cond_branch
	bl	UpdateSaveAddresses
	bl	SaveSerializedGame
	ldr	r4, .L336+0x4
	add	r0, r4, #0
	bl	RestoreSaveBackupVars
	ldr	r0, .L336+0x8
	ldrh	r0, [r0]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	sub_8152A34
	mov	r0, #0x0
	b	.L335
.L337:
	.align	2, 0
.L336:
	.word	gFlashMemoryPresent
	.word	gRamSaveSectionLocations
	.word	gUnknown_03006208
.L334:
	mov	r0, #0x1
.L335:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 FullSaveGame,.Lfe29-FullSaveGame
	.align	2, 0
	.globl	CheckSaveFile
	.type	 CheckSaveFile,function
	.thumb_func
CheckSaveFile:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	ldr	r0, .L342
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	lsl	r0, r1, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x4
	bhi	.L339	@cond_branch
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L342+0x4
	add	r1, r4, #0
	bl	sub_8152A34
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_8152D44
	b	.L340
.L343:
	.align	2, 0
.L342:
	.word	gUnknown_03006208
	.word	gRamSaveSectionLocations
.L339:
	ldr	r1, .L344
	add	r0, r5, #0
	bl	sub_8152D44
	mov	r6, #0x1
.L340:
	ldr	r0, .L344+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L341	@cond_branch
	mov	r0, #0x1
	bl	DoSaveFailedScreen
.L341:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L345:
	.align	2, 0
.L344:
	.word	gRamSaveSectionLocations
	.word	gDamagedSaveSectors
.Lfe30:
	.size	 CheckSaveFile,.Lfe30-CheckSaveFile
	.align	2, 0
	.globl	Save_LoadGameData
	.type	 Save_LoadGameData,function
	.thumb_func
Save_LoadGameData:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L355
	ldr	r0, [r0]
	cmp	r0, #0x1
	beq	.L347	@cond_branch
	ldr	r1, .L355+0x4
	mov	r0, #0x4
	strh	r0, [r1]
	mov	r0, #0xff
	b	.L354
.L356:
	.align	2, 0
.L355:
	.word	gFlashMemoryPresent
	.word	gSaveFileStatus
.L347:
	bl	UpdateSaveAddresses
	cmp	r4, #0
	beq	.L350	@cond_branch
	cmp	r4, #0x3
	beq	.L351	@cond_branch
.L350:
	ldr	r0, .L357
	ldr	r1, .L357+0x4
	bl	sub_8152DD0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	LoadSerializedGame
	ldr	r0, .L357+0x8
	strh	r4, [r0]
	ldr	r1, .L357+0xc
	mov	r0, #0x0
	str	r0, [r1]
	b	.L348
.L358:
	.align	2, 0
.L357:
	.word	0xffff
	.word	gRamSaveSectionLocations
	.word	gSaveFileStatus
	.word	gGameContinueCallback
.L351:
	ldr	r5, .L359
	mov	r6, #0xf8
	lsl	r6, r6, #0x4
	mov	r0, #0x1c
	add	r1, r5, #0
	add	r2, r6, #0
	bl	sub_81530DC
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bne	.L348	@cond_branch
	add	r1, r5, r6
	mov	r0, #0x1d
	add	r2, r6, #0
	bl	sub_81530DC
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L348:
	add	r0, r4, #0
.L354:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L360:
	.align	2, 0
.L359:
	.word	gDecompressionBuffer
.Lfe31:
	.size	 Save_LoadGameData,.Lfe31-Save_LoadGameData
	.align	2, 0
	.globl	sub_815355C
	.type	 sub_815355C,function
	.thumb_func
sub_815355C:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L372
	ldr	r0, .L372+0x4
	str	r0, [r5]
	add	r7, r0, #0
	ldr	r0, .L372+0x8
	ldr	r4, [r0]
	cmp	r4, #0x1
	beq	.L362	@cond_branch
	b	.L371
.L373:
	.align	2, 0
.L372:
	.word	gFastSaveSection
	.word	gSaveDataBuffer
	.word	gFlashMemoryPresent
.L370:
	ldrb	r1, [r7, #0xa]
	ldrb	r0, [r7, #0xb]
	add	r1, r1, r0
	ldrb	r0, [r7, #0xc]
	add	r1, r1, r0
	ldrb	r0, [r7, #0xd]
	add	r0, r0, r1
	b	.L369
.L362:
	bl	UpdateSaveAddresses
	ldr	r0, .L374
	bl	GetSaveValidStatus
	ldr	r0, .L374+0x4
	ldr	r1, [r0]
	and	r1, r1, r4
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x11
	lsr	r6, r0, #0x10
	mov	r4, #0x0
.L366:
	add	r0, r4, r6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r5]
	bl	DoReadFlashWholeSection
	ldr	r0, [r5]
	ldr	r1, .L374+0x8
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L370	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xd
	bls	.L366	@cond_branch
.L371:
	mov	r0, #0x0
.L369:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L375:
	.align	2, 0
.L374:
	.word	gRamSaveSectionLocations
	.word	gSaveCounter
	.word	0xff4
.Lfe32:
	.size	 sub_815355C,.Lfe32-sub_815355C
	.align	2, 0
	.globl	TryReadSpecialSaveSection
	.type	 TryReadSpecialSaveSection,function
	.thumb_func
TryReadSpecialSaveSection:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xe2
	lsl	r2, r2, #0x18
	add	r0, r0, r2
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L385	@cond_branch
	ldr	r4, .L386
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	add	r0, r1, #0
	mov	r1, #0x0
	add	r2, r4, #0
	bl	ReadFlash
	ldr	r1, [r4]
	ldr	r0, .L386+0x4
	cmp	r1, r0
	beq	.L378	@cond_branch
.L385:
	mov	r0, #0xff
	b	.L384
.L387:
	.align	2, 0
.L386:
	.word	gSaveDataBuffer
	.word	0xb39d
.L378:
	mov	r3, #0x0
	ldr	r5, .L388
	add	r2, r4, #0x4
.L382:
	add	r0, r6, r3
	add	r1, r2, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, r5
	ble	.L382	@cond_branch
	mov	r0, #0x1
.L384:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L389:
	.align	2, 0
.L388:
	.word	0xffb
.Lfe33:
	.size	 TryReadSpecialSaveSection,.Lfe33-TryReadSpecialSaveSection
	.align	2, 0
	.globl	TryWriteSpecialSaveSection
	.type	 TryWriteSpecialSaveSection,function
	.thumb_func
TryWriteSpecialSaveSection:
	push	{r4, r5, r6, r7, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0xe2
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L397	@cond_branch
	ldr	r7, .L399
	ldr	r0, .L399+0x4
	add	r3, r7, #0
	stmia	r3!, {r0}
	mov	r2, #0x0
	ldr	r4, .L399+0x8
.L395:
	add	r0, r3, r2
	add	r1, r5, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r4
	ble	.L395	@cond_branch
	add	r0, r6, #0
	add	r1, r7, #0
	bl	ProgramFlashSectorAndVerify
	cmp	r0, #0
	bne	.L397	@cond_branch
	mov	r0, #0x1
	b	.L398
.L400:
	.align	2, 0
.L399:
	.word	gSaveDataBuffer
	.word	0xb39d
	.word	0xffb
.L397:
	mov	r0, #0xff
.L398:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 TryWriteSpecialSaveSection,.Lfe34-TryWriteSpecialSaveSection
	.align	2, 0
	.globl	Task_LinkSave
	.type	 Task_LinkSave,function
	.thumb_func
Task_LinkSave:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L427
	add	r4, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xb
	bls	.LCB2902
	b	.L402	@long jump
.LCB2902:
	lsl	r0, r0, #0x2
	ldr	r1, .L427+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L428:
	.align	2, 0
.L427:
	.word	gTasks+0x8
	.word	.L425
	.align	2, 0
	.align	2, 0
.L425:
	.word	.L403
	.word	.L404
	.word	.L405
	.word	.L408
	.word	.L410
	.word	.L412
	.word	.L415
	.word	.L416
	.word	.L418
	.word	.L420
	.word	.L421
	.word	.L423
.L403:
	ldr	r0, .L429
	mov	r1, #0x1
	strb	r1, [r0]
	mov	r0, #0x1
	strh	r0, [r4]
	b	.L402
.L430:
	.align	2, 0
.L429:
	.word	gSoftResetDisabled
.L404:
	bl	SetLinkStandbyCallback
	mov	r0, #0x2
	strh	r0, [r4]
	b	.L402
.L405:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L402	@cond_branch
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L407	@cond_branch
	bl	save_serialize_map
.L407:
	mov	r0, #0x3
	strh	r0, [r4]
	b	.L402
.L408:
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L409	@cond_branch
	bl	SetContinueGameWarpStatusToDynamicWarp
.L409:
	bl	sub_8153380
	b	.L413
.L410:
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0x5
	bne	.L402	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2]
	strh	r1, [r4]
	b	.L402
.L412:
	bl	sub_81533AC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L413	@cond_branch
	mov	r0, #0x6
	strh	r0, [r4]
	b	.L402
.L413:
	mov	r0, #0x4
	strh	r0, [r4]
	b	.L402
.L415:
	bl	sub_81533E0
	mov	r0, #0x7
	strh	r0, [r4]
	b	.L402
.L416:
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L417	@cond_branch
	bl	ClearContinueGameWarpStatus2
.L417:
	bl	SetLinkStandbyCallback
	mov	r0, #0x8
	strh	r0, [r4]
	b	.L402
.L418:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L402	@cond_branch
	bl	sub_8153408
	mov	r0, #0x9
	strh	r0, [r4]
	b	.L402
.L420:
	bl	SetLinkStandbyCallback
	mov	r0, #0xa
	strh	r0, [r4]
	b	.L402
.L421:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L402	@cond_branch
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L402
.L423:
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L402	@cond_branch
	ldr	r1, .L431
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r2, #0
	bl	DestroyTask
.L402:
	pop	{r4}
	pop	{r0}
	bx	r0
.L432:
	.align	2, 0
.L431:
	.word	gSoftResetDisabled
.Lfe35:
	.size	 Task_LinkSave,.Lfe35-Task_LinkSave
	.comm	gLastWrittenSector, 4	@ 2
	.comm	gLastSaveCounter, 4	@ 4
	.comm	gLastKnownGoodSector, 4	@ 2
	.comm	gDamagedSaveSectors, 4	@ 4
	.comm	gSaveCounter, 4	@ 4
	.comm	gFastSaveSection, 4	@ 4
	.comm	gUnknown_03006208, 4	@ 2
	.comm	gSaveFileStatus, 4	@ 2
	.comm	gGameContinueCallback, 4	@ 4
	.comm	gRamSaveSectionLocations, 112	@ 112
	.comm	gSaveUnusedVar, 4	@ 2
	.comm	gSaveUnusedVar2, 4	@ 2
	.comm	gSaveAttemptStatus, 4	@ 2
.text
	.align	2, 0

