@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.type	 sRequiredMoveCounts,object
sRequiredMoveCounts:
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.size	 sRequiredMoveCounts,7
	.align	1, 0
	.type	 sMoves_TotalPreparation,object
sMoves_TotalPreparation:
	.short	0xe
	.short	0x4a
	.short	0x60
	.short	0x61
	.short	0x68
	.short	0x6a
	.short	0x6b
	.short	0x6e
	.short	0x6f
	.short	0x70
	.short	0x74
	.short	0x85
	.short	0x97
	.short	0x9f
	.short	0xa0
	.short	0xb0
	.short	0xbb
	.short	0xf4
	.short	0x10c
	.short	0x121
	.short	0x126
	.short	0x142
	.short	0x14e
	.short	0x150
	.short	0x153
	.short	0x15b
	.short	0x15d
	.short	0x0
	.size	 sMoves_TotalPreparation,56
	.align	1, 0
	.type	 sMoves_ImpossibleToPredict,object
sMoves_ImpossibleToPredict:
	.short	0x66
	.short	0x76
	.short	0x77
	.short	0x90
	.short	0xa4
	.short	0xa6
	.short	0xae
	.short	0xd9
	.short	0x10a
	.short	0x10f
	.short	0x110
	.short	0x112
	.short	0x11d
	.short	0x125
	.short	0x0
	.size	 sMoves_ImpossibleToPredict,30
	.align	1, 0
	.type	 sMoves_WeakeningTheFoe,object
sMoves_WeakeningTheFoe:
	.short	0x1c
	.short	0x27
	.short	0x2b
	.short	0x2d
	.short	0x51
	.short	0x67
	.short	0x6c
	.short	0x86
	.short	0x94
	.short	0xb2
	.short	0xb4
	.short	0xb8
	.short	0xcc
	.short	0x11a
	.short	0xe6
	.short	0x129
	.short	0x139
	.short	0x13f
	.short	0x141
	.short	0x0
	.size	 sMoves_WeakeningTheFoe,40
	.align	1, 0
	.type	 sMoves_HighRiskHighReturn,object
sMoves_HighRiskHighReturn:
	.short	0xc
	.short	0x20
	.short	0x26
	.short	0x3f
	.short	0x44
	.short	0x5a
	.short	0x75
	.short	0x78
	.short	0x8f
	.short	0x99
	.short	0xaf
	.short	0xb3
	.short	0xc2
	.short	0xc3
	.short	0xdc
	.short	0xf3
	.short	0x106
	.short	0x120
	.short	0x107
	.short	0x108
	.short	0x133
	.short	0x134
	.short	0x13b
	.short	0x152
	.short	0x162
	.short	0x158
	.short	0x0
	.size	 sMoves_HighRiskHighReturn,54
	.align	1, 0
	.type	 sMoves_Endurance,object
sMoves_Endurance:
	.short	0x36
	.short	0x69
	.short	0x71
	.short	0x72
	.short	0x73
	.short	0x87
	.short	0x9c
	.short	0xb6
	.short	0xc5
	.short	0xcb
	.short	0xd0
	.short	0xd7
	.short	0xdb
	.short	0xe2
	.short	0xea
	.short	0xeb
	.short	0xec
	.short	0x100
	.short	0x111
	.short	0x113
	.short	0x115
	.short	0x116
	.short	0x11f
	.short	0x12c
	.short	0x12f
	.short	0x138
	.short	0x15a
	.short	0x0
	.size	 sMoves_Endurance,56
	.align	1, 0
	.type	 sMoves_SlowAndSteady,object
sMoves_SlowAndSteady:
	.short	0x2f
	.short	0x30
	.short	0x32
	.short	0x49
	.short	0x4d
	.short	0x4e
	.short	0x4f
	.short	0x56
	.short	0x5c
	.short	0x5f
	.short	0x6d
	.short	0x89
	.short	0x8b
	.short	0x8e
	.short	0x93
	.short	0xa9
	.short	0xba
	.short	0xbf
	.short	0xcf
	.short	0xd4
	.short	0xd5
	.short	0xe3
	.short	0x103
	.short	0x104
	.short	0x105
	.short	0x10d
	.short	0x119
	.short	0x11e
	.short	0x121
	.short	0x12a
	.short	0x140
	.short	0x14f
	.short	0x0
	.size	 sMoves_SlowAndSteady,66
	.align	1, 0
	.type	 sMoves_DependsOnTheBattlesFlow,object
sMoves_DependsOnTheBattlesFlow:
	.short	0xc9
	.short	0xf0
	.short	0xf1
	.short	0x102
	.short	0x137
	.short	0x0
	.size	 sMoves_DependsOnTheBattlesFlow,12
	.align	2, 0
	.type	 sMoveStyles,object
	.size	 sMoveStyles,28
sMoveStyles:
	.word	sMoves_TotalPreparation
	.word	sMoves_SlowAndSteady
	.word	sMoves_Endurance
	.word	sMoves_HighRiskHighReturn
	.word	sMoves_WeakeningTheFoe
	.word	sMoves_ImpossibleToPredict
	.word	sMoves_DependsOnTheBattlesFlow
	.align	2, 0
	.type	 sBattleFactoryFunctions,object
sBattleFactoryFunctions:
	.word	InitFactoryChallenge
	.word	GetBattleFactoryData
	.word	SetBattleFactoryData
	.word	SaveFactoryChallenge
	.word	nullsub_75
	.word	nullsub_123
	.word	SelectInitialRentalMons
	.word	SwapRentalMons
	.word	SetPerformedRentalSwap
	.word	SetRentalsToOpponentParty
	.word	SetPlayerAndOpponentParties
	.word	SetOpponentGfxVar
	.word	GenerateOpponentMons
	.word	GenerateInitialRentalMons
	.word	GetOpponentMostCommonMonType
	.word	GetOpponentBattleStyle
	.word	RestorePlayerPartyHeldItems
	.size	 sBattleFactoryFunctions,68
	.align	2, 0
	.type	 sWinStreakFlags,object
sWinStreakFlags:
	.word	0x100
	.word	0x200
	.word	0x1000000
	.word	0x2000000
	.size	 sWinStreakFlags,16
	.align	2, 0
	.type	 sWinStreakMasks,object
sWinStreakMasks:
	.word	-0x101
	.word	-0x201
	.word	-0x1000001
	.word	-0x2000001
	.size	 sWinStreakMasks,16
	.type	 sFixedIVTable,object
sFixedIVTable:
	.byte	0x3
	.byte	0x6
	.byte	0x6
	.byte	0x9
	.byte	0x9
	.byte	0xc
	.byte	0xc
	.byte	0xf
	.byte	0xf
	.byte	0x12
	.byte	0x15
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.size	 sFixedIVTable,16
	.align	1, 0
	.type	 sInitialRentalMonRanges,object
sInitialRentalMonRanges:
	.short	0x6e
	.short	0xc7
	.short	0xa2
	.short	0x10a
	.short	0x10b
	.short	0x173
	.short	0x174
	.short	0x1d3
	.short	0x1d4
	.short	0x233
	.short	0x234
	.short	0x293
	.short	0x294
	.short	0x2f3
	.short	0x174
	.short	0x351
	.short	0x174
	.short	0x1d3
	.short	0x1d4
	.short	0x233
	.short	0x234
	.short	0x293
	.short	0x294
	.short	0x2f3
	.short	0x174
	.short	0x371
	.short	0x174
	.short	0x371
	.short	0x174
	.short	0x371
	.short	0x174
	.short	0x371
	.size	 sInitialRentalMonRanges,64
.text
	.align	2, 0
	.globl	CallBattleFactoryFunction
	.type	 CallBattleFactoryFunction,function
	.thumb_func
CallBattleFactoryFunction:
	push	{lr}
	ldr	r1, .L3
	ldr	r0, .L3+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sBattleFactoryFunctions
	.word	gSpecialVar_0x8004
.Lfe1:
	.size	 CallBattleFactoryFunction,.Lfe1-CallBattleFactoryFunction
	.align	2, 0
	.type	 InitFactoryChallenge,function
	.thumb_func
InitFactoryChallenge:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L17
	ldr	r0, [r5]
	ldr	r4, .L17+0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r7, r0, #0x1e
	ldr	r0, .L17+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, [r5]
	mov	r1, #0xc3
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	mov	r2, #0x0
	strb	r2, [r0]
	ldr	r1, [r5]
	ldr	r3, .L17+0xc
	add	r0, r1, r3
	strh	r2, [r0]
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r5]
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r4, [r5]
	ldr	r0, .L17+0x10
	add	r3, r4, r0
	ldr	r2, .L17+0x14
	lsl	r0, r7, #0x2
	lsl	r1, r6, #0x3
	add	r0, r0, r1
	add	r0, r0, r2
	ldr	r3, [r3]
	ldr	r0, [r0]
	and	r3, r3, r0
	cmp	r3, #0
	bne	.L6	@cond_branch
	lsl	r1, r7, #0x1
	lsl	r0, r6, #0x2
	add	r1, r1, r0
	ldr	r2, .L17+0x18
	add	r0, r4, r2
	add	r0, r0, r1
	strh	r3, [r0]
	add	r2, r2, #0x10
	add	r0, r4, r2
	add	r0, r0, r1
	strh	r3, [r0]
.L6:
	ldr	r1, .L17+0x1c
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r2, #0x0
	ldr	r6, .L17+0x20
	ldr	r4, .L17+0x24
	ldr	r0, .L17+0x28
	add	r3, r0, #0
.L10:
	ldr	r1, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, r4
	ldrh	r0, [r1]
	orr	r0, r0, r3
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x5
	bls	.L10	@cond_branch
	mov	r2, #0x0
	ldr	r4, .L17+0x2c
	ldr	r1, .L17+0x28
	add	r3, r1, #0
.L15:
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	ldrh	r1, [r0]
	orr	r1, r1, r3
	strh	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x2
	bls	.L15	@cond_branch
	ldr	r0, [r6]
	mov	r1, #0x4
	ldrsb	r1, [r0, r1]
	mov	r2, #0x5
	ldrsb	r2, [r0, r2]
	mov	r3, #0x1
	neg	r3, r3
	mov	r0, #0x0
	bl	SetDynamicWarp
	ldr	r1, .L17+0x30
	mov	r0, #0x0
	strh	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	0x40ce
	.word	0xc3a
	.word	0xc64
	.word	sWinStreakFlags
	.word	0xd6a
	.word	sPerformedRentalSwap
	.word	gSaveBlock1Ptr
	.word	0xdf8
	.word	0xffff
	.word	gFrontierTempParty
	.word	gTrainerBattleOpponent_A
.Lfe2:
	.size	 InitFactoryChallenge,.Lfe2-InitFactoryChallenge
	.align	2, 0
	.type	 GetBattleFactoryData,function
	.thumb_func
GetBattleFactoryData:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L29
	ldr	r0, [r7]
	ldr	r1, .L29+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r6, r0, #0x1e
	ldr	r0, .L29+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L29+0xc
	ldrh	r0, [r0]
	cmp	r0, #0x2
	beq	.L22	@cond_branch
	cmp	r0, #0x2
	bgt	.L27	@cond_branch
	cmp	r0, #0x1
	beq	.L21	@cond_branch
	b	.L20
.L30:
	.align	2, 0
.L29:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	0x40ce
	.word	gSpecialVar_0x8005
.L27:
	cmp	r0, #0x3
	beq	.L24	@cond_branch
	b	.L20
.L21:
	ldr	r3, .L31
	ldr	r0, [r7]
	lsl	r1, r6, #0x1
	lsl	r2, r5, #0x2
	add	r1, r1, r2
	ldr	r2, .L31+0x4
	b	.L28
.L32:
	.align	2, 0
.L31:
	.word	gSpecialVar_Result
	.word	0xd6a
.L22:
	ldr	r4, .L33
	ldr	r2, [r7]
	ldr	r0, .L33+0x4
	add	r2, r2, r0
	ldr	r3, .L33+0x8
	lsl	r0, r6, #0x2
	lsl	r1, r5, #0x3
	add	r0, r0, r1
	add	r0, r0, r3
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	strh	r0, [r4]
	b	.L20
.L34:
	.align	2, 0
.L33:
	.word	gSpecialVar_Result
	.word	0xc64
	.word	sWinStreakFlags
.L24:
	ldr	r3, .L35
	ldr	r0, [r7]
	lsl	r1, r6, #0x1
	lsl	r2, r5, #0x2
	add	r1, r1, r2
	ldr	r2, .L35+0x4
.L28:
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r3]
.L20:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	gSpecialVar_Result
	.word	0xd7a
.Lfe3:
	.size	 GetBattleFactoryData,.Lfe3-GetBattleFactoryData
	.align	2, 0
	.type	 SetBattleFactoryData,function
	.thumb_func
SetBattleFactoryData:
	push	{r4, r5, r6, lr}
	ldr	r6, .L48
	ldr	r0, [r6]
	ldr	r1, .L48+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r5, r0, #0x1e
	ldr	r0, .L48+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L48+0xc
	ldrh	r0, [r0]
	cmp	r0, #0x2
	beq	.L40	@cond_branch
	cmp	r0, #0x2
	bgt	.L47	@cond_branch
	cmp	r0, #0x1
	beq	.L39	@cond_branch
	b	.L38
.L49:
	.align	2, 0
.L48:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	0x40ce
	.word	gSpecialVar_0x8005
.L47:
	cmp	r0, #0x3
	beq	.L43	@cond_branch
	b	.L38
.L39:
	ldr	r2, [r6]
	lsl	r0, r5, #0x1
	lsl	r1, r4, #0x2
	add	r0, r0, r1
	ldr	r1, .L50
	add	r2, r2, r1
	add	r2, r2, r0
	ldr	r0, .L50+0x4
	ldrh	r0, [r0]
	strh	r0, [r2]
	b	.L38
.L51:
	.align	2, 0
.L50:
	.word	0xd6a
	.word	gSpecialVar_0x8006
.L40:
	ldr	r0, .L52
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L41	@cond_branch
	ldr	r2, [r6]
	ldr	r0, .L52+0x4
	add	r2, r2, r0
	ldr	r3, .L52+0x8
	lsl	r1, r5, #0x2
	lsl	r0, r4, #0x3
	add	r1, r1, r0
	add	r1, r1, r3
	ldr	r0, [r2]
	ldr	r1, [r1]
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L38
.L53:
	.align	2, 0
.L52:
	.word	gSpecialVar_0x8006
	.word	0xc64
	.word	sWinStreakFlags
.L41:
	ldr	r2, [r6]
	ldr	r1, .L54
	add	r2, r2, r1
	ldr	r3, .L54+0x4
	lsl	r1, r5, #0x2
	lsl	r0, r4, #0x3
	add	r1, r1, r0
	add	r1, r1, r3
	ldr	r0, [r2]
	ldr	r1, [r1]
	and	r0, r0, r1
	str	r0, [r2]
	b	.L38
.L55:
	.align	2, 0
.L54:
	.word	0xc64
	.word	sWinStreakMasks
.L43:
	ldr	r3, .L56
	ldrb	r0, [r3]
	cmp	r0, #0x1
	bne	.L38	@cond_branch
	ldr	r2, [r6]
	lsl	r0, r5, #0x1
	lsl	r1, r4, #0x2
	add	r0, r0, r1
	ldr	r1, .L56+0x4
	add	r2, r2, r1
	add	r2, r2, r0
	ldr	r0, .L56+0x8
	ldrh	r0, [r0]
	mov	r1, #0x0
	strh	r0, [r2]
	strb	r1, [r3]
.L38:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	sPerformedRentalSwap
	.word	0xd7a
	.word	gSpecialVar_0x8006
.Lfe4:
	.size	 SetBattleFactoryData,.Lfe4-SetBattleFactoryData
	.align	2, 0
	.type	 SaveFactoryChallenge,function
	.thumb_func
SaveFactoryChallenge:
	push	{r4, lr}
	ldr	r4, .L59
	ldr	r0, [r4]
	ldr	r1, .L59+0x4
	ldrh	r1, [r1]
	mov	r2, #0xc3
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	strb	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	mov	r1, #0x0
	bl	VarSet
	ldr	r1, [r4]
	ldr	r0, .L59+0x8
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	bl	SaveGameFrontier
	pop	{r4}
	pop	{r0}
	bx	r0
.L60:
	.align	2, 0
.L59:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8005
	.word	0xc31
.Lfe5:
	.size	 SaveFactoryChallenge,.Lfe5-SaveFactoryChallenge
	.align	2, 0
	.type	 nullsub_75,function
	.thumb_func
nullsub_75:
	bx	lr
.Lfe6:
	.size	 nullsub_75,.Lfe6-nullsub_75
	.align	2, 0
	.type	 nullsub_123,function
	.thumb_func
nullsub_123:
	bx	lr
.Lfe7:
	.size	 nullsub_123,.Lfe7-nullsub_123
	.align	2, 0
	.type	 SelectInitialRentalMons,function
	.thumb_func
SelectInitialRentalMons:
	push	{lr}
	bl	ZeroPlayerPartyMons
	bl	DoBattleFactorySelectScreen
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 SelectInitialRentalMons,.Lfe8-SelectInitialRentalMons
	.align	2, 0
	.type	 SwapRentalMons,function
	.thumb_func
SwapRentalMons:
	push	{lr}
	bl	DoBattleFactorySwapScreen
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 SwapRentalMons,.Lfe9-SwapRentalMons
	.align	2, 0
	.type	 SetPerformedRentalSwap,function
	.thumb_func
SetPerformedRentalSwap:
	ldr	r1, .L66
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L67:
	.align	2, 0
.L66:
	.word	sPerformedRentalSwap
.Lfe10:
	.size	 SetPerformedRentalSwap,.Lfe10-SetPerformedRentalSwap
	.align	2, 0
	.type	 GenerateOpponentMons,function
	.thumb_func
GenerateOpponentMons:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	ldr	r4, .L108
	ldr	r0, [r4]
	ldr	r1, .L108+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	str	r0, [sp, #0x10]
	ldr	r0, .L108+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	ldr	r1, [r4]
	ldr	r3, [sp, #0x10]
	lsl	r2, r3, #0x1
	lsr	r0, r0, #0xe
	add	r2, r2, r0
	ldr	r6, .L108+0xc
	add	r1, r1, r6
	add	r1, r1, r2
	ldrh	r0, [r1]
	mov	r1, #0x7
	bl	__udivsi3
	ldr	r2, .L108+0x10
	ldr	r1, .L108+0x14
	str	r1, [r2]
	ldr	r5, .L108+0x18
	lsl	r0, r0, #0x18
	str	r0, [sp, #0x20]
	mov	r8, r0
.L69:
	ldr	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r2, r8
	lsr	r0, r2, #0x18
	bl	GetRandomScaledFrontierTrainerId
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r7, #0x0
	ldr	r1, [r4]
	add	r0, r1, r5
	ldr	r6, [sp, #0x10]
	lsl	r6, r6, #0x18
	str	r6, [sp, #0x1c]
	ldrh	r0, [r0]
	cmp	r7, r0
	bge	.L71	@cond_branch
	ldr	r2, .L108+0x1c
	add	r0, r1, r2
	ldrh	r0, [r0]
	ldr	r6, .L108
	cmp	r0, r3
	beq	.L71	@cond_branch
	ldr	r1, [r6]
	ldr	r6, .L108+0x18
	add	r0, r1, r6
	ldrh	r2, [r0]
	ldr	r0, .L108+0x1c
	add	r1, r1, r0
.L74:
	add	r1, r1, #0x2
	add	r7, r7, #0x1
	cmp	r7, r2
	bge	.L71	@cond_branch
	ldrh	r0, [r1]
	cmp	r0, r3
	bne	.L74	@cond_branch
.L71:
	ldr	r0, [r4]
	ldr	r1, .L108+0x18
	add	r0, r0, r1
	ldr	r6, .L108
	ldrh	r0, [r0]
	cmp	r7, r0
	bne	.L69	@cond_branch
	ldr	r0, .L108+0x20
	strh	r3, [r0]
	ldr	r2, [r6]
	add	r1, r2, r1
	ldrh	r0, [r1]
	cmp	r0, #0x5
	bhi	.L80	@cond_branch
	add	r1, r0, #0
	lsl	r1, r1, #0x1
	ldr	r4, .L108+0x1c
	add	r0, r2, r4
	add	r0, r0, r1
	strh	r3, [r0]
.L80:
	mov	r7, #0x0
	mov	sl, sp
	mov	r6, #0x0
	lsl	r6, r6, #0x1
	str	r6, [sp, #0x14]
	add	r6, r6, sp
	str	r6, [sp, #0x18]
.L83:
	ldr	r1, [sp, #0x1c]
	lsr	r0, r1, #0x18
	ldr	r2, [sp, #0x20]
	lsr	r1, r2, #0x18
	mov	r2, #0x0
	bl	GetFactoryMonId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldr	r4, .L108+0x24
	ldr	r2, [r4]
	lsl	r1, r0, #0x4
	add	r0, r1, r2
	ldrh	r0, [r0]
	cmp	r0, #0xc9
	beq	.L81	@cond_branch
	mov	r3, #0x0
	ldr	r6, .L108
	mov	r8, r1
	add	r5, r0, #0
	ldr	r1, [r6]
.L88:
	ldr	r4, .L108+0x28
	add	r0, r1, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L86	@cond_branch
	add	r1, r1, #0xc
	add	r3, r3, #0x1
	cmp	r3, #0x5
	ble	.L88	@cond_branch
.L86:
	cmp	r3, #0x6
	bne	.L81	@cond_branch
	ldr	r6, [sp, #0x10]
	cmp	r6, #0
	bne	.L92	@cond_branch
	ldr	r0, .L108+0x2c
	cmp	r9, r0
	bhi	.L81	@cond_branch
.L92:
	mov	r2, #0x0
	add	r4, r2, r7
	cmp	r2, r4
	bge	.L94	@cond_branch
	ldr	r1, [sp, #0x18]
	ldrh	r0, [r1]
	cmp	r0, r5
	beq	.L94	@cond_branch
	add	r6, r4, #0
	ldr	r3, .L108+0x24
	mov	ip, r3
	mov	r5, r8
	ldr	r3, [sp, #0x14]
	add	r3, r3, sp
.L95:
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	cmp	r2, r6
	bge	.L94	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r5, r0
	ldrh	r1, [r3]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L95	@cond_branch
.L94:
	cmp	r2, r4
	bne	.L81	@cond_branch
	mov	r2, #0x0
	cmp	r2, r4
	bge	.L101	@cond_branch
	ldr	r3, .L108+0x30
	mov	ip, r3
	add	r0, sp, #0x8
	ldr	r6, [sp, #0x14]
	add	r3, r0, r6
	mov	r0, r8
	str	r0, [sp, #0x24]
	add	r5, r4, #0
.L103:
	ldrh	r1, [r3]
	cmp	r1, #0
	beq	.L102	@cond_branch
	ldr	r6, .L108+0x24
	ldr	r0, [r6]
	ldr	r6, [sp, #0x24]
	add	r0, r6, r0
	ldrb	r0, [r0, #0xa]
	lsl	r0, r0, #0x1
	add	r0, r0, ip
	ldrh	r0, [r0]
	cmp	r1, r0
	beq	.L101	@cond_branch
.L102:
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	cmp	r2, r5
	blt	.L103	@cond_branch
.L101:
	cmp	r2, r4
	bne	.L81	@cond_branch
	lsl	r4, r7, #0x1
	ldr	r0, .L108+0x24
	ldr	r1, [r0]
	add	r1, r1, r8
	ldrh	r0, [r1]
	mov	r2, sl
	strh	r0, [r2]
	add	r2, sp, #0x8
	add	r2, r2, r4
	ldr	r3, .L108+0x30
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r2]
	ldr	r0, .L108+0x34
	add	r4, r4, r0
	mov	r3, r9
	strh	r3, [r4]
	mov	r4, #0x2
	add	sl, sl, r4
	add	r7, r7, #0x1
.L81:
	cmp	r7, #0x3
	bne	.L83	@cond_branch
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L109:
	.align	2, 0
.L108:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	0x40ce
	.word	0xd6a
	.word	gFacilityTrainers
	.word	gBattleFrontierTrainers
	.word	0xc3a
	.word	0xc3c
	.word	gTrainerBattleOpponent_A
	.word	gFacilityTrainerMons
	.word	0xdf8
	.word	0x351
	.word	gBattleFrontierHeldItems
	.word	gFrontierTempParty
.Lfe11:
	.size	 GenerateOpponentMons,.Lfe11-GenerateOpponentMons
	.align	2, 0
	.type	 SetOpponentGfxVar,function
	.thumb_func
SetOpponentGfxVar:
	push	{lr}
	ldr	r0, .L111
	ldrh	r0, [r0]
	mov	r1, #0x0
	bl	SetBattleFacilityTrainerGfxId
	pop	{r0}
	bx	r0
.L112:
	.align	2, 0
.L111:
	.word	gTrainerBattleOpponent_A
.Lfe12:
	.size	 SetOpponentGfxVar,.Lfe12-SetOpponentGfxVar
	.align	2, 0
	.type	 SetRentalsToOpponentParty,function
	.thumb_func
SetRentalsToOpponentParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L122
	ldr	r0, [r0]
	ldr	r1, .L122+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0x2
	beq	.L114	@cond_branch
	ldr	r1, .L122+0x8
	ldr	r0, .L122+0xc
	b	.L121
.L123:
	.align	2, 0
.L122:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	gFacilityTrainerMons
	.word	gBattleFrontierMons
.L114:
	ldr	r1, .L124
	ldr	r0, .L124+0x4
.L121:
	str	r0, [r1]
	mov	r7, #0x0
	ldr	r2, .L124+0x8
	mov	r8, r2
.L119:
	mov	r0, r8
	ldr	r1, [r0]
	add	r0, r7, #0x3
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r1, r1, r4
	ldr	r0, .L124+0xc
	lsl	r6, r7, #0x1
	add	r6, r6, r0
	ldrh	r0, [r6]
	ldr	r2, .L124+0x10
	add	r1, r1, r2
	strh	r0, [r1]
	mov	r0, #0x64
	mov	r5, r7
	mul	r5, r5, r0
	ldr	r0, .L124+0x14
	add	r5, r5, r0
	add	r0, r5, #0
	mov	r1, #0x28
	mov	r2, #0x0
	bl	GetBoxMonData
	mov	r2, r8
	ldr	r1, [r2]
	add	r1, r1, r4
	mov	r2, #0xe0
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetMonData
	mov	r2, r8
	ldr	r1, [r2]
	ldr	r2, .L124+0x18
	add	r1, r1, r2
	add	r1, r1, r4
	str	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x2e
	mov	r2, #0x0
	bl	GetBoxMonData
	mov	r2, r8
	ldr	r1, [r2]
	add	r1, r1, r4
	ldr	r2, .L124+0x1c
	add	r1, r1, r2
	strb	r0, [r1]
	ldrh	r1, [r6]
	ldr	r0, .L124
	ldr	r0, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xa]
	lsl	r2, r2, #0x1
	ldr	r0, .L124+0x20
	add	r2, r2, r0
	add	r0, r5, #0
	mov	r1, #0xc
	bl	SetMonData
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x2
	bls	.L119	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	gFacilityTrainerMons
	.word	gSlateportBattleTentMons
	.word	gSaveBlock2Ptr
	.word	gFrontierTempParty
	.word	0xdf8
	.word	gEnemyParty
	.word	0xdfc
	.word	0xe01
	.word	gBattleFrontierHeldItems
.Lfe13:
	.size	 SetRentalsToOpponentParty,.Lfe13-SetRentalsToOpponentParty
	.align	2, 0
	.type	 SetPlayerAndOpponentParties,function
	.thumb_func
SetPlayerAndOpponentParties:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	ldr	r0, .L181
	ldr	r0, [r0]
	ldr	r1, .L181+0x4
	add	r2, r0, r1
	ldrb	r1, [r2]
	mov	r3, #0x3
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0x2
	bne	.L127	@cond_branch
	ldr	r1, .L181+0x8
	ldr	r0, .L181+0xc
	str	r0, [r1]
	mov	r2, #0x1e
	str	r2, [sp, #0x18]
	b	.L128
.L182:
	.align	2, 0
.L181:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	gFacilityTrainerMons
	.word	gSlateportBattleTentMons
.L127:
	ldr	r1, .L183
	ldr	r0, .L183+0x4
	str	r0, [r1]
	ldrb	r1, [r2]
	add	r0, r3, #0
	and	r0, r0, r1
	mov	r4, #0x32
	str	r4, [sp, #0x18]
	cmp	r0, #0
	beq	.L128	@cond_branch
	mov	r5, #0x64
	str	r5, [sp, #0x18]
.L128:
	ldr	r0, .L183+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x1
	bls	.LCB1154
	b	.L131	@long jump
.LCB1154:
	bl	ZeroPlayerPartyMons
	mov	r0, #0x0
	mov	r8, r0
	mov	r1, sp
	add	r1, r1, #0x16
	str	r1, [sp, #0x20]
	ldr	r2, .L183
	mov	r9, r2
.L135:
	ldr	r4, .L183+0xc
	ldr	r2, [r4]
	mov	r5, r8
	lsl	r5, r5, #0x1
	mov	sl, r5
	mov	r3, sl
	add	r3, r3, r8
	lsl	r3, r3, #0x2
	add	r1, r2, r3
	ldr	r4, .L183+0x10
	add	r0, r1, r4
	ldrh	r7, [r0]
	mov	r5, #0xe0
	lsl	r5, r5, #0x4
	add	r1, r1, r5
	ldrb	r6, [r1]
	mov	r1, #0x64
	mov	r0, r8
	mul	r0, r0, r1
	ldr	r1, .L183+0x14
	add	r0, r0, r1
	mov	r4, r9
	ldr	r1, [r4]
	lsl	r4, r7, #0x4
	add	r1, r4, r1
	ldrh	r1, [r1]
	mov	r5, #0x1
	str	r5, [sp]
	ldr	r5, .L183+0x18
	add	r2, r2, r5
	add	r2, r2, r3
	ldr	r2, [r2]
	str	r2, [sp, #0x4]
	mov	r2, #0x0
	str	r2, [sp, #0x8]
	str	r2, [sp, #0xc]
	str	r2, [sp, #0x10]
	ldr	r2, [sp, #0x18]
	add	r3, r6, #0
	bl	CreateMon
	mov	r1, #0x0
	mov	r2, r9
	ldr	r0, [r2]
	add	r4, r4, r0
	ldrb	r4, [r4, #0xb]
	mov	r5, r8
	add	r5, r5, #0x1
	str	r5, [sp, #0x1c]
	mov	r5, #0x5
.L139:
	add	r0, r4, #0
	mov	r2, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L138	@cond_branch
	add	r1, r1, #0x1
.L138:
	lsr	r4, r4, #0x1
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L139	@cond_branch
	mov	r0, #0xff
	lsl	r0, r0, #0x1
	bl	__divsi3
	add	r1, sp, #0x14
	strh	r0, [r1]
	mov	r4, #0x1
	mov	r5, #0x0
	lsl	r7, r7, #0x4
	mov	r0, #0x64
	mov	r6, r8
	mul	r6, r6, r0
	ldr	r3, .L183+0x14
.L145:
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r7, r0
	ldrb	r0, [r0, #0xb]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L144	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x1a
	add	r0, r6, r3
	add	r2, sp, #0x14
	str	r3, [sp, #0x24]
	bl	SetMonData
	ldr	r3, [sp, #0x24]
.L144:
	lsl	r0, r4, #0x19
	lsr	r4, r0, #0x18
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L145	@cond_branch
	mov	r2, #0x64
	mov	r4, r8
	mul	r4, r4, r2
	ldr	r5, .L183+0x14
	add	r0, r4, r5
	bl	CalculateMonStats
	mov	r0, #0x0
	ldr	r1, [sp, #0x20]
	strb	r0, [r1]
	mov	r6, #0x0
.L151:
	mov	r2, r9
	ldr	r0, [r2]
	add	r0, r7, r0
	lsl	r1, r6, #0x1
	add	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r2, r6, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, r5
	bl	SetMonMoveAvoidReturn
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L151	@cond_branch
	mov	r5, #0x64
	mov	r4, r8
	mul	r4, r4, r5
	ldr	r0, .L183+0x14
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r7, r0
	ldrb	r2, [r0, #0xa]
	lsl	r2, r2, #0x1
	ldr	r0, .L183+0x1c
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r2, sl
	add	r2, r2, r8
	lsl	r2, r2, #0x2
	ldr	r5, .L183+0xc
	ldr	r0, [r5]
	add	r2, r2, r0
	ldr	r0, .L183+0x20
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	SetMonData
	ldr	r1, [sp, #0x1c]
	mov	r8, r1
	cmp	r1, #0x2
	bgt	.LCB1382
	b	.L135	@long jump
.LCB1382:
.L131:
	ldr	r0, .L183+0x8
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L156	@cond_branch
	cmp	r0, #0x2
	beq	.LCB1391
	b	.L154	@long jump
.LCB1391:
.L156:
	mov	r2, #0x0
	mov	r8, r2
	ldr	r4, .L183
	mov	r9, r4
.L160:
	ldr	r5, .L183+0xc
	ldr	r3, [r5]
	mov	r0, r8
	add	r0, r0, #0x3
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r1, r3, r2
	ldr	r4, .L183+0x10
	add	r0, r1, r4
	ldrh	r7, [r0]
	mov	r5, #0xe0
	lsl	r5, r5, #0x4
	add	r1, r1, r5
	ldrb	r6, [r1]
	mov	r1, #0x64
	mov	r0, r8
	mul	r0, r0, r1
	ldr	r1, .L183+0x24
	add	r0, r0, r1
	mov	r4, r9
	ldr	r1, [r4]
	lsl	r4, r7, #0x4
	add	r1, r4, r1
	ldrh	r1, [r1]
	mov	r5, #0x1
	str	r5, [sp]
	ldr	r5, .L183+0x18
	add	r3, r3, r5
	add	r3, r3, r2
	ldr	r2, [r3]
	str	r2, [sp, #0x4]
	mov	r2, #0x0
	str	r2, [sp, #0x8]
	str	r2, [sp, #0xc]
	str	r2, [sp, #0x10]
	ldr	r2, [sp, #0x18]
	add	r3, r6, #0
	bl	CreateMon
	mov	r1, #0x0
	mov	r2, r9
	ldr	r0, [r2]
	add	r4, r4, r0
	ldrb	r4, [r4, #0xb]
	mov	r5, r8
	lsl	r5, r5, #0x1
	mov	sl, r5
	mov	r0, r8
	add	r0, r0, #0x1
	str	r0, [sp, #0x1c]
	mov	r5, #0x5
.L164:
	add	r0, r4, #0
	mov	r2, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L163	@cond_branch
	add	r1, r1, #0x1
.L163:
	lsr	r4, r4, #0x1
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L164	@cond_branch
	add	r4, sp, #0x14
	mov	r0, #0xff
	lsl	r0, r0, #0x1
	bl	__divsi3
	strh	r0, [r4]
	mov	r4, #0x1
	mov	r5, #0x0
	lsl	r7, r7, #0x4
	mov	r0, #0x64
	mov	r6, r8
	mul	r6, r6, r0
	ldr	r3, .L183+0x24
.L170:
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r7, r0
	ldrb	r0, [r0, #0xb]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L169	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x1a
	add	r0, r6, r3
	add	r2, sp, #0x14
	str	r3, [sp, #0x24]
	bl	SetMonData
	ldr	r3, [sp, #0x24]
.L169:
	lsl	r0, r4, #0x19
	lsr	r4, r0, #0x18
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L170	@cond_branch
	mov	r2, #0x64
	mov	r4, r8
	mul	r4, r4, r2
	ldr	r5, .L183+0x24
	add	r0, r4, r5
	bl	CalculateMonStats
	mov	r6, #0x0
.L176:
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r7, r0
	lsl	r1, r6, #0x1
	add	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r2, r6, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, r5
	bl	SetMonMoveAvoidReturn
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L176	@cond_branch
	mov	r2, #0x64
	mov	r4, r8
	mul	r4, r4, r2
	ldr	r0, .L183+0x24
	add	r4, r4, r0
	mov	r5, r9
	ldr	r0, [r5]
	add	r0, r7, r0
	ldrb	r2, [r0, #0xa]
	lsl	r2, r2, #0x1
	ldr	r0, .L183+0x1c
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r2, sl
	add	r2, r2, r8
	lsl	r2, r2, #0x2
	ldr	r1, .L183+0xc
	ldr	r0, [r1]
	add	r2, r2, r0
	ldr	r5, .L183+0x28
	add	r2, r2, r5
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	SetMonData
	ldr	r0, [sp, #0x1c]
	mov	r8, r0
	cmp	r0, #0x2
	bgt	.LCB1608
	b	.L160	@long jump
.LCB1608:
.L154:
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L184:
	.align	2, 0
.L183:
	.word	gFacilityTrainerMons
	.word	gBattleFrontierMons
	.word	gSpecialVar_0x8005
	.word	gSaveBlock2Ptr
	.word	0xdf8
	.word	gPlayerParty
	.word	0xdfc
	.word	gBattleFrontierHeldItems
	.word	0xe01
	.word	gEnemyParty
	.word	0xe25
.Lfe14:
	.size	 SetPlayerAndOpponentParties,.Lfe14-SetPlayerAndOpponentParties
	.align	2, 0
	.type	 GenerateInitialRentalMons,function
	.thumb_func
GenerateInitialRentalMons:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4c
	ldr	r1, .L221
	ldr	r0, .L221+0x4
	str	r0, [r1]
	mov	r0, sp
	add	r0, r0, #0xc
	str	r0, [sp, #0x38]
	mov	r1, sp
	add	r1, r1, #0x18
	str	r1, [sp, #0x3c]
	ldr	r2, .L221+0x8
	mov	r9, r2
	mov	r2, #0x0
	add	r3, r1, #0
	add	r1, r0, #0
	mov	r0, sp
	mov	r4, #0x5
	mov	r8, r4
.L189:
	strh	r2, [r0]
	strh	r2, [r1]
	strh	r2, [r3]
	add	r3, r3, #0x2
	add	r1, r1, #0x2
	add	r0, r0, #0x2
	mov	r5, #0x1
	neg	r5, r5
	add	r8, r8, r5
	mov	r4, r8
	cmp	r4, #0
	bge	.L189	@cond_branch
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r7, .L221+0xc
	add	r0, r0, r7
	ldrb	r4, [r0]
	lsl	r4, r4, #0x1e
	lsr	r4, r4, #0x1e
	ldr	r6, .L221+0x10
	add	r0, r6, #0
	bl	VarGet
	lsl	r0, r0, #0x18
	ldr	r1, [r5]
	lsl	r4, r4, #0x1
	lsr	r0, r0, #0x16
	add	r4, r4, r0
	ldr	r5, .L221+0x14
	add	r1, r1, r5
	add	r1, r1, r4
	ldrh	r0, [r1]
	mov	r1, #0x7
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x24]
	add	r0, r6, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r2, #0x0
	cmp	r0, #0x1
	bne	.L191	@cond_branch
	mov	r2, #0x1
.L191:
	ldr	r1, .L221+0x18
	ldr	r0, .L221+0x1c
	str	r0, [r1]
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, r7
	ldrb	r1, [r0]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L193	@cond_branch
	mov	r4, #0x1
	str	r4, [sp, #0x28]
	b	.L194
.L222:
	.align	2, 0
.L221:
	.word	gFacilityTrainers
	.word	gBattleFrontierTrainers
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	0x40ce
	.word	0xd6a
	.word	gFacilityTrainerMons
	.word	gBattleFrontierMons
.L193:
	mov	r5, #0x0
	str	r5, [sp, #0x28]
.L194:
	add	r0, r2, #0
	ldr	r1, [sp, #0x28]
	bl	GetNumPastRentalsRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x2c]
	mov	r0, #0x0
	mov	sl, r0
	mov	r8, r0
	ldr	r1, [sp, #0x3c]
	str	r1, [sp, #0x40]
	mov	r2, sp
	str	r2, [sp, #0x44]
	lsl	r4, r0, #0x1
	str	r4, [sp, #0x30]
	ldr	r5, [sp, #0x38]
	add	r5, r5, r4
	str	r5, [sp, #0x34]
.L197:
	ldr	r0, [sp, #0x2c]
	cmp	r8, r0
	bge	.L198	@cond_branch
	ldr	r0, [sp, #0x28]
	ldr	r1, [sp, #0x24]
	mov	r2, #0x1
	b	.L220
.L198:
	ldr	r0, [sp, #0x28]
	ldr	r1, [sp, #0x24]
	mov	r2, #0x0
.L220:
	bl	GetFactoryMonId
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, .L223
	ldr	r1, [r0]
	lsl	r2, r7, #0x4
	add	r4, r2, r1
	ldrh	r1, [r4]
	mov	r9, r2
	cmp	r1, #0xc9
	beq	.L195	@cond_branch
	mov	r3, #0x0
	mov	r2, r8
	add	r6, r3, r2
	cmp	r3, r6
	bge	.L202	@cond_branch
	ldr	r5, [sp, #0x34]
	ldrh	r0, [r5]
	cmp	r0, r7
	beq	.L202	@cond_branch
	mov	ip, r4
	add	r2, r1, #0
	lsl	r4, r3, #0x1
	ldr	r1, [sp, #0x30]
	add	r1, r1, sp
	str	r6, [sp, #0x48]
.L205:
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L203	@cond_branch
	mov	r0, sl
	cmp	r0, #0
	bne	.L202	@cond_branch
	mov	r5, ip
	ldrh	r5, [r5]
	mov	sl, r5
.L203:
	add	r4, r4, #0x2
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	ldr	r0, [sp, #0x48]
	cmp	r3, r0
	bge	.L202	@cond_branch
	ldr	r5, [sp, #0x38]
	add	r0, r5, r4
	ldrh	r0, [r0]
	cmp	r0, r7
	bne	.L205	@cond_branch
.L202:
	cmp	r3, r6
	bne	.L195	@cond_branch
	mov	r3, #0x0
	cmp	r3, r6
	bge	.L212	@cond_branch
	ldr	r0, .L223+0x4
	mov	ip, r0
	ldr	r1, [sp, #0x30]
	ldr	r2, [sp, #0x3c]
	add	r5, r1, r2
.L214:
	ldrh	r4, [r5]
	cmp	r4, #0
	beq	.L213	@cond_branch
	ldr	r1, .L223
	ldr	r0, [r1]
	mov	r2, r9
	add	r1, r2, r0
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x1
	add	r0, r0, ip
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L213	@cond_branch
	ldrh	r0, [r1]
	cmp	r0, sl
	bne	.L212	@cond_branch
	mov	r4, #0x0
	mov	sl, r4
	b	.L212
.L224:
	.align	2, 0
.L223:
	.word	gFacilityTrainerMons
	.word	gBattleFrontierHeldItems
.L213:
	add	r5, r5, #0x2
	add	r3, r3, #0x1
	cmp	r3, r6
	blt	.L214	@cond_branch
.L212:
	cmp	r3, r6
	bne	.L195	@cond_branch
	ldr	r0, .L225
	ldr	r1, [r0]
	mov	r5, r8
	lsl	r3, r5, #0x1
	add	r0, r3, r5
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r0, .L225+0x4
	add	r1, r1, r0
	strh	r7, [r1]
	ldr	r2, .L225+0x8
	ldr	r1, [r2]
	add	r1, r1, r9
	ldrh	r0, [r1]
	ldr	r4, [sp, #0x44]
	strh	r0, [r4]
	ldr	r2, .L225+0xc
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldr	r5, [sp, #0x40]
	strh	r0, [r5]
	ldr	r0, [sp, #0x38]
	add	r3, r0, r3
	strh	r7, [r3]
	add	r5, r5, #0x2
	str	r5, [sp, #0x40]
	add	r4, r4, #0x2
	str	r4, [sp, #0x44]
	mov	r1, #0x1
	add	r8, r8, r1
.L195:
	mov	r2, r8
	cmp	r2, #0x6
	beq	.LCB1982
	b	.L197	@long jump
.LCB1982:
	add	sp, sp, #0x4c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L226:
	.align	2, 0
.L225:
	.word	gSaveBlock2Ptr
	.word	0xdf8
	.word	gFacilityTrainerMons
	.word	gBattleFrontierHeldItems
.Lfe15:
	.size	 GenerateInitialRentalMons,.Lfe15-GenerateInitialRentalMons
	.align	2, 0
	.type	 GetOpponentMostCommonMonType,function
	.thumb_func
GetOpponentMostCommonMonType:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x18
	ldr	r1, .L250
	ldr	r0, .L250+0x4
	str	r0, [r1]
	mov	r4, #0x0
	add	r5, sp, #0x14
	ldr	r7, .L250+0x8
	mov	r1, #0x0
.L231:
	mov	r2, sp
	add	r0, r2, r4
	strb	r1, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x12
	bls	.L231	@cond_branch
	mov	r4, #0x0
	ldr	r0, .L250+0xc
	mov	r8, r0
	ldr	r0, .L250
	ldr	r6, [r0]
	ldr	r1, .L250+0x10
	mov	ip, r1
.L236:
	lsl	r0, r4, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r6
	ldrh	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r2, ip
	add	r3, r0, r2
	ldrb	r2, [r3, #0x6]
	mov	r0, sp
	add	r1, r0, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldrb	r1, [r3, #0x7]
	cmp	r2, r1
	beq	.L235	@cond_branch
	ldrb	r0, [r3, #0x7]
	mov	r2, sp
	add	r1, r2, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L235:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L236	@cond_branch
	mov	r0, #0x0
	strb	r0, [r5]
	strb	r0, [r5, #0x1]
	mov	r4, #0x1
	add	r3, r5, #0
.L242:
	ldrb	r0, [r3]
	add	r0, r0, sp
	mov	r2, sp
	add	r1, r2, r4
	ldrb	r2, [r0]
	ldrb	r0, [r1]
	cmp	r2, r0
	bcs	.L243	@cond_branch
	strb	r4, [r5]
	b	.L241
.L251:
	.align	2, 0
.L250:
	.word	gFacilityTrainerMons
	.word	gBattleFrontierMons
	.word	gSpecialVar_Result
	.word	gFrontierTempParty
	.word	gBaseStats
.L243:
	cmp	r2, r0
	bne	.L241	@cond_branch
	strb	r4, [r3, #0x1]
.L241:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x12
	bls	.L242	@cond_branch
	ldrb	r1, [r5]
	mov	r4, sp
	add	r0, r4, r1
	ldrb	r2, [r0]
	cmp	r2, #0
	beq	.L247	@cond_branch
	ldrb	r3, [r5, #0x1]
	add	r0, r4, r3
	ldrb	r0, [r0]
	cmp	r2, r0
	bhi	.L248	@cond_branch
	cmp	r1, r3
	bne	.L247	@cond_branch
.L248:
	strh	r1, [r7]
	b	.L249
.L247:
	mov	r0, #0x13
	strh	r0, [r7]
.L249:
	add	sp, sp, #0x18
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 GetOpponentMostCommonMonType,.Lfe16-GetOpponentMostCommonMonType
	.align	2, 0
	.type	 GetOpponentBattleStyle,function
	.thumb_func
GetOpponentBattleStyle:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	mov	r7, #0x0
	ldr	r1, .L275
	ldr	r0, .L275+0x4
	str	r0, [r1]
	mov	r4, #0x0
	mov	r1, #0x0
.L256:
	mov	r2, sp
	add	r0, r2, r4
	strb	r1, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x7
	bls	.L256	@cond_branch
	mov	r4, #0x0
.L261:
	ldr	r1, .L275+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r6, [r0]
	mov	r5, #0x0
.L265:
	ldr	r0, .L275
	ldr	r1, [r0]
	lsl	r0, r6, #0x4
	add	r0, r0, r1
	lsl	r1, r5, #0x1
	add	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	GetMoveBattleStyle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L265	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L261	@cond_branch
	ldr	r1, .L275+0xc
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r4, #0x1
	add	r5, r1, #0
	ldr	r3, .L275+0x10
	add	r2, r5, #0
.L271:
	mov	r1, sp
	add	r0, r1, r4
	sub	r1, r4, #0x1
	add	r1, r1, r3
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L270	@cond_branch
	strh	r4, [r2]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L270:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x7
	bls	.L271	@cond_branch
	cmp	r7, #0x2
	bls	.L274	@cond_branch
	mov	r0, #0x8
	strh	r0, [r5]
.L274:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L276:
	.align	2, 0
.L275:
	.word	gFacilityTrainerMons
	.word	gBattleFrontierMons
	.word	gFrontierTempParty
	.word	gSpecialVar_Result
	.word	sRequiredMoveCounts
.Lfe17:
	.size	 GetOpponentBattleStyle,.Lfe17-GetOpponentBattleStyle
	.align	2, 0
	.type	 GetMoveBattleStyle,function
	.thumb_func
GetMoveBattleStyle:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r2, #0x0
	ldr	r6, .L290
.L281:
	mov	r3, #0x0
	lsl	r0, r2, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	ldrh	r0, [r1]
	add	r4, r2, #0x1
	cmp	r0, #0
	beq	.L280	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r2, r0, #0x18
.L285:
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r5
	bne	.L284	@cond_branch
	add	r0, r2, #0
	b	.L289
.L291:
	.align	2, 0
.L290:
	.word	sMoveStyles
.L284:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L285	@cond_branch
.L280:
	lsl	r0, r4, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x6
	bls	.L281	@cond_branch
	mov	r0, #0x0
.L289:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 GetMoveBattleStyle,.Lfe18-GetMoveBattleStyle
	.align	2, 0
	.globl	InBattleFactory
	.type	 InBattleFactory,function
	.thumb_func
InBattleFactory:
	push	{lr}
	mov	r2, #0x0
	ldr	r1, .L294
	ldr	r3, .L294+0x4
	add	r0, r3, #0
	ldrh	r1, [r1, #0x12]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L293	@cond_branch
	mov	r2, #0x1
.L293:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L295:
	.align	2, 0
.L294:
	.word	gMapHeader
	.word	-0x15b
.Lfe19:
	.size	 InBattleFactory,.Lfe19-InBattleFactory
	.align	2, 0
	.type	 RestorePlayerPartyHeldItems,function
	.thumb_func
RestorePlayerPartyHeldItems:
	push	{r4, lr}
	ldr	r0, .L305
	ldr	r0, [r0]
	ldr	r1, .L305+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0x2
	beq	.L297	@cond_branch
	ldr	r1, .L305+0x8
	ldr	r0, .L305+0xc
	b	.L304
.L306:
	.align	2, 0
.L305:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	gFacilityTrainerMons
	.word	gBattleFrontierMons
.L297:
	ldr	r1, .L307
	ldr	r0, .L307+0x4
.L304:
	str	r0, [r1]
	mov	r4, #0x0
.L302:
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L307+0x8
	add	r0, r0, r1
	ldr	r1, .L307+0xc
	ldr	r2, [r1]
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r2, r2, r1
	ldr	r1, .L307+0x10
	add	r2, r2, r1
	ldrh	r2, [r2]
	ldr	r1, .L307
	ldr	r1, [r1]
	lsl	r2, r2, #0x4
	add	r2, r2, r1
	ldrb	r2, [r2, #0xa]
	lsl	r2, r2, #0x1
	ldr	r1, .L307+0x14
	add	r2, r2, r1
	mov	r1, #0xc
	bl	SetMonData
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L302	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L308:
	.align	2, 0
.L307:
	.word	gFacilityTrainerMons
	.word	gSlateportBattleTentMons
	.word	gPlayerParty
	.word	gSaveBlock2Ptr
	.word	0xdf8
	.word	gBattleFrontierHeldItems
.Lfe20:
	.size	 RestorePlayerPartyHeldItems,.Lfe20-RestorePlayerPartyHeldItems
	.align	2, 0
	.globl	GetFactoryMonFixedIV
	.type	 GetFactoryMonFixedIV,function
	.thumb_func
GetFactoryMonFixedIV:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	neg	r2, r1
	orr	r2, r2, r1
	lsr	r2, r2, #0x1f
	lsr	r1, r0, #0x18
	cmp	r1, #0x8
	bls	.L311	@cond_branch
	mov	r1, #0x7
.L311:
	ldr	r0, .L313
	lsl	r1, r1, #0x1
	add	r1, r2, r1
	add	r1, r1, r0
	ldrb	r0, [r1]
	pop	{r1}
	bx	r1
.L314:
	.align	2, 0
.L313:
	.word	sFixedIVTable
.Lfe21:
	.size	 GetFactoryMonFixedIV,.Lfe21-GetFactoryMonFixedIV
	.align	2, 0
	.globl	FillFactoryBrainParty
	.type	 FillFactoryBrainParty,function
	.thumb_func
FillFactoryBrainParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	ldr	r4, .L348
	ldr	r0, [r4]
	ldr	r1, .L348+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	str	r0, [sp, #0x30]
	ldr	r0, .L348+0x8
	bl	VarGet
	lsl	r0, r0, #0x18
	ldr	r1, [r4]
	ldr	r3, [sp, #0x30]
	lsl	r2, r3, #0x1
	lsr	r0, r0, #0x16
	add	r2, r2, r0
	ldr	r7, .L348+0xc
	add	r1, r1, r7
	add	r1, r1, r2
	ldrh	r0, [r1]
	mov	r1, #0x7
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	str	r1, [sp, #0x34]
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	add	r0, r0, r2
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	GetFactoryMonFixedIV
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x28]
	bl	SetFacilityPtrsGetLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x24]
	mov	r3, #0x0
	mov	r9, r3
	ldr	r1, [r4]
	ldrb	r4, [r1, #0xa]
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r1, #0xd]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	str	r4, [sp, #0x2c]
.L318:
	ldr	r0, [sp, #0x30]
	ldr	r1, [sp, #0x34]
	mov	r2, #0x0
	bl	GetFactoryMonId
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r7, .L348+0x10
	ldr	r1, [r7]
	lsl	r0, r5, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0xc9
	bne	.LCB2655
	b	.L316	@long jump
.LCB2655:
	ldr	r0, [sp, #0x24]
	cmp	r0, #0x32
	bne	.L320	@cond_branch
	ldr	r0, .L348+0x14
	cmp	r5, r0
	bls	.LCB2663
	b	.L316	@long jump
.LCB2663:
.L320:
	mov	r2, #0x0
	ldr	r1, .L348
	ldr	r0, [r1]
	ldr	r3, .L348+0x18
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L322	@cond_branch
	add	r4, r1, #0
	mov	r1, #0x0
.L323:
	add	r1, r1, #0xc
	add	r2, r2, #0x1
	cmp	r2, #0x5
	bgt	.L322	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r5, r0
	bne	.L323	@cond_branch
.L322:
	cmp	r2, #0x6
	beq	.LCB2703
	b	.L316	@long jump
.LCB2703:
	mov	r4, #0x0
	cmp	r4, r9
	bge	.L329	@cond_branch
	add	r2, sp, #0x10
	ldr	r7, .L348+0x10
	ldr	r0, [r7]
	lsl	r1, r5, #0x4
	add	r0, r1, r0
	ldrh	r2, [r2]
	add	r7, r1, #0
	ldrh	r0, [r0]
	cmp	r2, r0
	beq	.L329	@cond_branch
	ldr	r6, .L348+0x10
	add	r3, r7, #0
	add	r2, sp, #0x10
.L330:
	add	r2, r2, #0x2
	add	r4, r4, #0x1
	cmp	r4, r9
	bge	.L329	@cond_branch
	ldr	r0, [r6]
	add	r0, r3, r0
	ldrh	r1, [r2]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L330	@cond_branch
.L329:
	cmp	r4, r9
	bne	.L316	@cond_branch
	mov	r4, #0x0
	cmp	r4, r9
	bge	.L336	@cond_branch
	ldr	r7, .L348+0x1c
	ldr	r6, .L348+0x10
	add	r2, sp, #0x18
	lsl	r3, r5, #0x4
.L338:
	ldrh	r1, [r2]
	cmp	r1, #0
	beq	.L337	@cond_branch
	ldr	r0, [r6]
	add	r0, r3, r0
	ldrb	r0, [r0, #0xa]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r1, r0
	beq	.L336	@cond_branch
.L337:
	add	r2, r2, #0x2
	add	r4, r4, #0x1
	cmp	r4, r9
	blt	.L338	@cond_branch
.L336:
	cmp	r4, r9
	bne	.L316	@cond_branch
	mov	r0, r9
	lsl	r2, r0, #0x1
	mov	r1, sp
	add	r1, r1, r2
	add	r1, r1, #0x10
	ldr	r3, .L348+0x10
	ldr	r4, [r3]
	lsl	r5, r5, #0x4
	mov	r8, r5
	add	r4, r4, r8
	ldrh	r0, [r4]
	strh	r0, [r1]
	add	r1, sp, #0x18
	add	r1, r1, r2
	ldr	r2, .L348+0x1c
	ldrb	r0, [r4, #0xa]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	mov	r0, #0x64
	mov	r5, r9
	mul	r5, r5, r0
	ldr	r6, .L348+0x20
	add	r0, r5, r6
	ldrh	r1, [r4]
	ldr	r7, [sp, #0x24]
	lsl	r2, r7, #0x18
	ldrb	r3, [r4, #0xc]
	ldr	r7, [sp, #0x28]
	str	r7, [sp]
	ldrb	r4, [r4, #0xb]
	str	r4, [sp, #0x4]
	ldr	r4, [sp, #0x2c]
	str	r4, [sp, #0x8]
	mov	r7, #0x0
	str	r7, [sp, #0xc]
	lsr	r2, r2, #0x18
	bl	CreateMonWithEVSpreadNatureOTID
	add	r0, sp, #0x20
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r4, #0x0
	mov	r7, r8
	mov	sl, r0
	mov	r2, #0x1
	add	r2, r2, r9
	mov	r8, r2
.L345:
	ldr	r3, .L348+0x10
	ldr	r0, [r3]
	add	r0, r7, r0
	lsl	r1, r4, #0x1
	add	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, r6
	bl	SetMonMoveAvoidReturn
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L345	@cond_branch
	mov	r0, #0x64
	mov	r4, r9
	mul	r4, r4, r0
	ldr	r0, .L348+0x20
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x20
	mov	r2, sl
	bl	SetMonData
	ldr	r1, .L348+0x10
	ldr	r0, [r1]
	add	r0, r7, r0
	ldrb	r2, [r0, #0xa]
	lsl	r2, r2, #0x1
	ldr	r0, .L348+0x1c
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r9, r8
.L316:
	mov	r2, r9
	cmp	r2, #0x3
	beq	.LCB2894
	b	.L318	@long jump
.LCB2894:
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L349:
	.align	2, 0
.L348:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	0x40ce
	.word	0xd6a
	.word	gFacilityTrainerMons
	.word	0x351
	.word	0xdf8
	.word	gBattleFrontierHeldItems
	.word	gEnemyParty
.Lfe22:
	.size	 FillFactoryBrainParty,.Lfe22-FillFactoryBrainParty
	.align	2, 0
	.type	 GetFactoryMonId,function
	.thumb_func
GetFactoryMonId:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r4, #0x8
	neg	r1, r0
	orr	r1, r1, r0
	asr	r1, r1, #0x1f
	and	r1, r1, r4
	add	r4, r1, #0
	cmp	r3, #0x6
	bhi	.L353	@cond_branch
	cmp	r2, #0
	beq	.L354	@cond_branch
	ldr	r2, .L359
	add	r1, r1, r3
	add	r1, r1, #0x1
	b	.L358
.L360:
	.align	2, 0
.L359:
	.word	sInitialRentalMonRanges
.L354:
	ldr	r2, .L361
	add	r1, r1, r3
	b	.L358
.L362:
	.align	2, 0
.L361:
	.word	sInitialRentalMonRanges
.L353:
	add	r1, r3, #0
	cmp	r1, #0x7
	beq	.L357	@cond_branch
	mov	r1, #0x7
.L357:
	ldr	r2, .L363
	add	r1, r4, r1
.L358:
	lsl	r1, r1, #0x2
	add	r0, r2, #0x2
	add	r0, r1, r0
	add	r1, r1, r2
	ldrh	r0, [r0]
	ldrh	r4, [r1]
	sub	r0, r0, r4
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r4, r0, r4
	lsl	r4, r4, #0x10
	lsr	r0, r4, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L364:
	.align	2, 0
.L363:
	.word	sInitialRentalMonRanges
.Lfe23:
	.size	 GetFactoryMonId,.Lfe23-GetFactoryMonId
	.align	2, 0
	.globl	GetNumPastRentalsRank
	.type	 GetNumPastRentalsRank,function
	.thumb_func
GetNumPastRentalsRank:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	ldr	r2, .L376
	ldr	r2, [r2]
	lsr	r1, r1, #0x17
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r0, .L376+0x4
	add	r2, r2, r0
	add	r2, r2, r1
	ldrb	r1, [r2]
	mov	r0, #0x0
	cmp	r1, #0xe
	bls	.L367	@cond_branch
	mov	r0, #0x1
	cmp	r1, #0x15
	bls	.L367	@cond_branch
	mov	r0, #0x2
	cmp	r1, #0x1c
	bls	.L367	@cond_branch
	mov	r0, #0x3
	cmp	r1, #0x23
	bls	.L367	@cond_branch
	mov	r0, #0x5
	cmp	r1, #0x2a
	bhi	.L367	@cond_branch
	mov	r0, #0x4
.L367:
	pop	{r1}
	bx	r1
.L377:
	.align	2, 0
.L376:
	.word	gSaveBlock2Ptr
	.word	0xd7a
.Lfe24:
	.size	 GetNumPastRentalsRank,.Lfe24-GetNumPastRentalsRank
	.align	2, 0
	.globl	GetAiScriptsInBattleFactory
	.type	 GetAiScriptsInBattleFactory,function
	.thumb_func
GetAiScriptsInBattleFactory:
	push	{r4, r5, lr}
	ldr	r5, .L390
	ldr	r0, [r5]
	ldr	r1, .L390+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r4, r0, #0x1e
	cmp	r4, #0x2
	beq	.L388	@cond_branch
	ldr	r0, .L390+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	ldr	r1, [r5]
	lsl	r2, r4, #0x1
	lsr	r0, r0, #0xe
	add	r2, r2, r0
	ldr	r0, .L390+0xc
	add	r1, r1, r0
	add	r1, r1, r2
	ldrh	r0, [r1]
	mov	r1, #0x7
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L390+0x10
	ldrh	r1, [r0]
	ldr	r0, .L390+0x14
	cmp	r1, r0
	beq	.L389	@cond_branch
	cmp	r2, #0x1
	bgt	.L383	@cond_branch
.L388:
	mov	r0, #0x0
	b	.L387
.L391:
	.align	2, 0
.L390:
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	0x40ce
	.word	0xd6a
	.word	gTrainerBattleOpponent_A
	.word	0x3fe
.L383:
	cmp	r2, #0x3
	ble	.L385	@cond_branch
.L389:
	mov	r0, #0x7
	b	.L387
.L385:
	mov	r0, #0x1
.L387:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 GetAiScriptsInBattleFactory,.Lfe25-GetAiScriptsInBattleFactory
	.align	2, 0
	.globl	SetMonMoveAvoidReturn
	.type	 SetMonMoveAvoidReturn,function
	.thumb_func
SetMonMoveAvoidReturn:
	push	{lr}
	lsl	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsr	r1, r1, #0x10
	cmp	r1, #0xd8
	bne	.L393	@cond_branch
	mov	r1, #0xda
.L393:
	bl	SetMonMoveSlot
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 SetMonMoveAvoidReturn,.Lfe26-SetMonMoveAvoidReturn

	.lcomm	sPerformedRentalSwap,1
.text
	.align	2, 0

