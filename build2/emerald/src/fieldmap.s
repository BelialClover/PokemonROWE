@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	1, 0
	.type	 gBackupMapData,object
	.size	 gBackupMapData,20480
gBackupMapData:
	.short	0x0
	.space	20478
	.globl	gMapHeader
	.align	2, 0
	.type	 gMapHeader,object
	.size	 gMapHeader,28
gMapHeader:
	.word	0x0
	.space	24
	.globl	gCamera
	.align	2, 0
	.type	 gCamera,object
	.size	 gCamera,12
gCamera:
	.byte	0x0
	.space	11
	.align	2, 0
	.type	 gMapConnectionFlags,object
	.size	 gMapConnectionFlags,4
gMapConnectionFlags:
	.byte	0x0
	.space	3
	.align	2, 0
	.type	 sFiller_02037344,object
	.size	 sFiller_02037344,4
sFiller_02037344:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sDummyConnectionFlags,object
	.size	 sDummyConnectionFlags,4
sDummyConnectionFlags:
	.byte	0x0
	.space	3
.text
	.align	2, 0
	.globl	GetMapHeaderFromConnection
	.type	 GetMapHeaderFromConnection,function
	.thumb_func
GetMapHeaderFromConnection:
	push	{lr}
	ldrb	r2, [r0, #0x8]
	ldrb	r1, [r0, #0x9]
	add	r0, r2, #0
	bl	Overworld_GetMapHeaderByGroupAndId
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 GetMapHeaderFromConnection,.Lfe1-GetMapHeaderFromConnection
	.align	2, 0
	.globl	InitMap
	.type	 InitMap,function
	.thumb_func
InitMap:
	push	{r4, lr}
	ldr	r4, .L4
	add	r0, r4, #0
	bl	InitMapLayoutData
	ldr	r0, [r4, #0x4]
	bl	SetOccupiedSecretBaseEntranceMetatiles
	bl	RunOnLoadMapScript
	pop	{r4}
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	gMapHeader
.Lfe2:
	.size	 InitMap,.Lfe2-InitMap
	.align	2, 0
	.globl	InitMapFromSavedGame
	.type	 InitMapFromSavedGame,function
	.thumb_func
InitMapFromSavedGame:
	push	{r4, lr}
	ldr	r4, .L7
	add	r0, r4, #0
	bl	InitMapLayoutData
	mov	r0, #0x0
	bl	InitSecretBaseAppearance
	ldr	r0, [r4, #0x4]
	bl	SetOccupiedSecretBaseEntranceMetatiles
	bl	LoadSavedMapView
	bl	RunOnLoadMapScript
	ldr	r1, .L7+0x4
	ldr	r0, [r1]
	ldr	r1, [r1, #0x4]
	bl	UpdateTVScreensOnMap
	pop	{r4}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gMapHeader
	.word	gBackupMapLayout
.Lfe3:
	.size	 InitMapFromSavedGame,.Lfe3-InitMapFromSavedGame
	.align	2, 0
	.globl	InitBattlePyramidMap
	.type	 InitBattlePyramidMap,function
	.thumb_func
InitBattlePyramidMap:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L10
	str	r0, [sp]
	ldr	r5, .L10+0x4
	ldr	r2, .L10+0x8
	mov	r0, sp
	add	r1, r5, #0
	bl	CpuFastSet
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GenerateBattlePyramidFloorLayout
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L11:
	.align	2, 0
.L10:
	.word	0x3ff03ff
	.word	gBackupMapData
	.word	0x1001400
.Lfe4:
	.size	 InitBattlePyramidMap,.Lfe4-InitBattlePyramidMap
	.align	2, 0
	.globl	InitTrainerHillMap
	.type	 InitTrainerHillMap,function
	.thumb_func
InitTrainerHillMap:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L13
	str	r0, [sp]
	ldr	r4, .L13+0x4
	ldr	r2, .L13+0x8
	mov	r0, sp
	add	r1, r4, #0
	bl	CpuFastSet
	add	r0, r4, #0
	bl	GenerateTrainerHillFloorLayout
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	0x3ff03ff
	.word	gBackupMapData
	.word	0x1001400
.Lfe5:
	.size	 InitTrainerHillMap,.Lfe5-InitTrainerHillMap
	.align	2, 0
	.type	 InitMapLayoutData,function
	.thumb_func
InitMapLayoutData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r5, [r6]
	ldr	r0, .L17
	str	r0, [sp]
	ldr	r4, .L17+0x4
	ldr	r2, .L17+0x8
	mov	r0, sp
	add	r1, r4, #0
	bl	CpuFastSet
	ldr	r2, .L17+0xc
	str	r4, [r2, #0x8]
	ldr	r1, [r5]
	add	r1, r1, #0xf
	str	r1, [r2]
	ldr	r0, [r5, #0x4]
	add	r0, r0, #0xe
	str	r0, [r2, #0x4]
	mul	r1, r1, r0
	mov	r0, #0xa0
	lsl	r0, r0, #0x6
	cmp	r1, r0
	bgt	.L16	@cond_branch
	ldr	r0, [r5, #0xc]
	ldrh	r1, [r5]
	ldrh	r2, [r5, #0x4]
	bl	InitBackupMapLayoutData
	add	r0, r6, #0
	bl	InitBackupMapLayoutConnections
.L16:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	0x3ff03ff
	.word	gBackupMapData
	.word	0x1001400
	.word	gBackupMapLayout
.Lfe6:
	.size	 InitMapLayoutData,.Lfe6-InitMapLayoutData
	.align	2, 0
	.type	 InitBackupMapLayoutData,function
	.thumb_func
InitBackupMapLayoutData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r0, .L25
	ldr	r4, [r0, #0x8]
	ldr	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, #0xe
	add	r4, r4, r0
	cmp	r2, #0
	beq	.L21	@cond_branch
	mov	r0, r8
	lsl	r6, r0, #0x1
	add	r5, r2, #0
	mov	r0, #0x1e
	add	r0, r0, r6
	mov	r9, r0
.L23:
	add	r0, r7, #0
	add	r1, r4, #0
	mov	r2, r8
	bl	CpuSet
	add	r4, r4, r9
	add	r7, r7, r6
	sub	r5, r5, #0x1
	cmp	r5, #0
	bne	.L23	@cond_branch
.L21:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	gBackupMapLayout
.Lfe7:
	.size	 InitBackupMapLayoutData,.Lfe7-InitBackupMapLayoutData
	.align	2, 0
	.type	 InitBackupMapLayoutConnections,function
	.thumb_func
InitBackupMapLayoutConnections:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldr	r0, [r6, #0xc]
	cmp	r0, #0
	beq	.L28	@cond_branch
	ldr	r1, [r0]
	ldr	r5, [r0, #0x4]
	ldr	r2, .L43
	ldr	r0, .L43+0x4
	ldr	r0, [r0]
	str	r0, [r2]
	cmp	r1, #0
	ble	.L28	@cond_branch
	add	r4, r2, #0
	add	r7, r1, #0
.L32:
	add	r0, r5, #0
	bl	GetMapHeaderFromConnection
	add	r1, r0, #0
	ldr	r2, [r5, #0x4]
	ldrb	r0, [r5]
	cmp	r0, #0x2
	beq	.L35	@cond_branch
	cmp	r0, #0x2
	bgt	.L40	@cond_branch
	cmp	r0, #0x1
	beq	.L34	@cond_branch
	b	.L31
.L44:
	.align	2, 0
.L43:
	.word	gMapConnectionFlags
	.word	sDummyConnectionFlags
.L40:
	cmp	r0, #0x3
	beq	.L36	@cond_branch
	cmp	r0, #0x4
	beq	.L37	@cond_branch
	b	.L31
.L34:
	add	r0, r6, #0
	bl	FillSouthConnection
	ldrb	r0, [r4]
	mov	r1, #0x1
	b	.L42
.L35:
	add	r0, r6, #0
	bl	FillNorthConnection
	ldrb	r0, [r4]
	mov	r1, #0x2
	b	.L42
.L36:
	add	r0, r6, #0
	bl	FillWestConnection
	ldrb	r0, [r4]
	mov	r1, #0x4
	b	.L42
.L37:
	add	r0, r6, #0
	bl	FillEastConnection
	ldrb	r0, [r4]
	mov	r1, #0x8
.L42:
	orr	r0, r0, r1
	strb	r0, [r4]
.L31:
	sub	r7, r7, #0x1
	add	r5, r5, #0xc
	cmp	r7, #0
	bne	.L32	@cond_branch
.L28:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 InitBackupMapLayoutConnections,.Lfe8-InitBackupMapLayoutConnections
	.align	2, 0
	.type	 sub_8087F54,function
	.thumb_func
sub_8087F54:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r5, [sp, #0x18]
	ldr	r4, [r2]
	ldr	r7, [r4]
	mov	r2, r7
	mul	r2, r2, r5
	add	r2, r2, r3
	lsl	r2, r2, #0x1
	ldr	r3, [r4, #0xc]
	add	r6, r3, r2
	ldr	r3, .L51
	ldr	r2, [r3]
	mul	r1, r1, r2
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	ldr	r0, [r3, #0x8]
	add	r5, r0, r1
	ldr	r0, [sp, #0x20]
	cmp	r0, #0
	ble	.L47	@cond_branch
	add	r4, r0, #0
	ldr	r3, .L51+0x4
	mov	r8, r3
.L49:
	add	r0, r6, #0
	add	r1, r5, #0
	ldr	r2, [sp, #0x1c]
	mov	r3, r8
	and	r2, r2, r3
	bl	CpuSet
	ldr	r0, .L51
	ldr	r0, [r0]
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	lsl	r0, r7, #0x1
	add	r6, r6, r0
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L49	@cond_branch
.L47:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	gBackupMapLayout
	.word	0x1fffff
.Lfe9:
	.size	 sub_8087F54,.Lfe9-sub_8087F54
	.align	2, 0
	.type	 FillSouthConnection,function
	.thumb_func
FillSouthConnection:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r3, r0, #0
	add	r5, r1, #0
	cmp	r5, #0
	beq	.L54	@cond_branch
	ldr	r0, [r5]
	ldr	r4, [r0]
	add	r2, r2, #0x7
	ldr	r0, [r3]
	ldr	r0, [r0, #0x4]
	add	r7, r0, #0x7
	cmp	r2, #0
	bge	.L55	@cond_branch
	neg	r6, r2
	add	r2, r2, r4
	ldr	r0, .L61
	ldr	r3, [r0]
	cmp	r2, r3
	bge	.L56	@cond_branch
	add	r3, r2, #0
.L56:
	mov	r2, #0x0
	b	.L58
.L62:
	.align	2, 0
.L61:
	.word	gBackupMapLayout
.L55:
	mov	r6, #0x0
	add	r0, r2, r4
	ldr	r1, .L63
	ldr	r1, [r1]
	sub	r3, r1, r2
	cmp	r0, r1
	bge	.L58	@cond_branch
	add	r3, r4, #0
.L58:
	mov	r0, #0x0
	str	r0, [sp]
	str	r3, [sp, #0x4]
	mov	r0, #0x7
	str	r0, [sp, #0x8]
	add	r0, r2, #0
	add	r1, r7, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	sub_8087F54
.L54:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L64:
	.align	2, 0
.L63:
	.word	gBackupMapLayout
.Lfe10:
	.size	 FillSouthConnection,.Lfe10-FillSouthConnection
	.align	2, 0
	.type	 FillNorthConnection,function
	.thumb_func
FillNorthConnection:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r5, r1, #0
	cmp	r5, #0
	beq	.L66	@cond_branch
	ldr	r0, [r5]
	ldr	r4, [r0]
	ldr	r0, [r0, #0x4]
	add	r2, r2, #0x7
	sub	r7, r0, #0x7
	cmp	r2, #0
	bge	.L67	@cond_branch
	neg	r6, r2
	add	r2, r2, r4
	ldr	r0, .L73
	ldr	r3, [r0]
	cmp	r2, r3
	bge	.L68	@cond_branch
	add	r3, r2, #0
.L68:
	mov	r2, #0x0
	b	.L70
.L74:
	.align	2, 0
.L73:
	.word	gBackupMapLayout
.L67:
	mov	r6, #0x0
	add	r0, r2, r4
	ldr	r1, .L75
	ldr	r1, [r1]
	sub	r3, r1, r2
	cmp	r0, r1
	bge	.L70	@cond_branch
	add	r3, r4, #0
.L70:
	str	r7, [sp]
	str	r3, [sp, #0x4]
	mov	r0, #0x7
	str	r0, [sp, #0x8]
	add	r0, r2, #0
	mov	r1, #0x0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	sub_8087F54
.L66:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gBackupMapLayout
.Lfe11:
	.size	 FillNorthConnection,.Lfe11-FillNorthConnection
	.align	2, 0
	.type	 FillWestConnection,function
	.thumb_func
FillWestConnection:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r5, r1, #0
	cmp	r5, #0
	beq	.L78	@cond_branch
	ldr	r0, [r5]
	ldr	r1, [r0]
	ldr	r4, [r0, #0x4]
	add	r2, r2, #0x7
	sub	r7, r1, #0x7
	cmp	r2, #0
	bge	.L79	@cond_branch
	neg	r6, r2
	add	r1, r2, r4
	ldr	r0, .L85
	ldr	r3, [r0, #0x4]
	cmp	r1, r3
	bge	.L80	@cond_branch
	add	r3, r1, #0
.L80:
	mov	r2, #0x0
	b	.L82
.L86:
	.align	2, 0
.L85:
	.word	gBackupMapLayout
.L79:
	mov	r6, #0x0
	add	r0, r2, r4
	ldr	r1, .L87
	ldr	r1, [r1, #0x4]
	sub	r3, r1, r2
	cmp	r0, r1
	bge	.L82	@cond_branch
	add	r3, r4, #0
.L82:
	str	r6, [sp]
	mov	r0, #0x7
	str	r0, [sp, #0x4]
	str	r3, [sp, #0x8]
	mov	r0, #0x0
	add	r1, r2, #0
	add	r2, r5, #0
	add	r3, r7, #0
	bl	sub_8087F54
.L78:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gBackupMapLayout
.Lfe12:
	.size	 FillWestConnection,.Lfe12-FillWestConnection
	.align	2, 0
	.type	 FillEastConnection,function
	.thumb_func
FillEastConnection:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r3, r0, #0
	add	r5, r1, #0
	cmp	r5, #0
	beq	.L90	@cond_branch
	ldr	r0, [r5]
	ldr	r4, [r0, #0x4]
	ldr	r0, [r3]
	ldr	r0, [r0]
	add	r7, r0, #0x7
	add	r2, r2, #0x7
	cmp	r2, #0
	bge	.L91	@cond_branch
	neg	r6, r2
	add	r1, r2, r4
	ldr	r0, .L97
	ldr	r3, [r0, #0x4]
	cmp	r1, r3
	bge	.L92	@cond_branch
	add	r3, r1, #0
.L92:
	mov	r2, #0x0
	b	.L94
.L98:
	.align	2, 0
.L97:
	.word	gBackupMapLayout
.L91:
	mov	r6, #0x0
	add	r0, r2, r4
	ldr	r1, .L99
	ldr	r1, [r1, #0x4]
	sub	r3, r1, r2
	cmp	r0, r1
	bge	.L94	@cond_branch
	add	r3, r4, #0
.L94:
	str	r6, [sp]
	mov	r0, #0x8
	str	r0, [sp, #0x4]
	str	r3, [sp, #0x8]
	add	r0, r7, #0
	add	r1, r2, #0
	add	r2, r5, #0
	mov	r3, #0x0
	bl	sub_8087F54
.L90:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	gBackupMapLayout
.Lfe13:
	.size	 FillEastConnection,.Lfe13-FillEastConnection
	.align	2, 0
	.globl	MapGridGetZCoordAt
	.type	 MapGridGetZCoordAt,function
	.thumb_func
MapGridGetZCoordAt:
	push	{r4, lr}
	add	r2, r0, #0
	add	r4, r1, #0
	cmp	r2, #0
	blt	.L102	@cond_branch
	ldr	r1, .L106
	ldr	r3, [r1]
	cmp	r2, r3
	bge	.L102	@cond_branch
	cmp	r4, #0
	blt	.L102	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r4, r0
	bge	.L102	@cond_branch
	mov	r0, r3
	mul	r0, r0, r4
	add	r0, r2, r0
	ldr	r1, [r1, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	b	.L103
.L107:
	.align	2, 0
.L106:
	.word	gBackupMapLayout
.L102:
	ldr	r0, .L108
	ldr	r3, [r0]
	add	r1, r2, #0x1
	mov	r2, #0x1
	and	r1, r1, r2
	add	r0, r4, #0x1
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r1, [r1]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	orr	r1, r1, r0
.L103:
	ldr	r0, .L108+0x4
	cmp	r1, r0
	beq	.L104	@cond_branch
	lsr	r0, r1, #0xc
	b	.L105
.L109:
	.align	2, 0
.L108:
	.word	gMapHeader
	.word	0x3ff
.L104:
	mov	r0, #0x0
.L105:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 MapGridGetZCoordAt,.Lfe14-MapGridGetZCoordAt
	.align	2, 0
	.globl	MapGridIsImpassableAt
	.type	 MapGridIsImpassableAt,function
	.thumb_func
MapGridIsImpassableAt:
	push	{r4, lr}
	add	r2, r0, #0
	add	r4, r1, #0
	cmp	r2, #0
	blt	.L111	@cond_branch
	ldr	r1, .L115
	ldr	r3, [r1]
	cmp	r2, r3
	bge	.L111	@cond_branch
	cmp	r4, #0
	blt	.L111	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r4, r0
	bge	.L111	@cond_branch
	mov	r0, r3
	mul	r0, r0, r4
	add	r0, r2, r0
	ldr	r1, [r1, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	b	.L112
.L116:
	.align	2, 0
.L115:
	.word	gBackupMapLayout
.L111:
	ldr	r0, .L117
	ldr	r3, [r0]
	add	r1, r2, #0x1
	mov	r2, #0x1
	and	r1, r1, r2
	add	r0, r4, #0x1
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r1, [r1]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	orr	r1, r1, r0
.L112:
	ldr	r0, .L117+0x4
	cmp	r1, r0
	beq	.L113	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x4
	and	r1, r1, r0
	lsr	r0, r1, #0xa
	b	.L114
.L118:
	.align	2, 0
.L117:
	.word	gMapHeader
	.word	0x3ff
.L113:
	mov	r0, #0x1
.L114:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 MapGridIsImpassableAt,.Lfe15-MapGridIsImpassableAt
	.align	2, 0
	.globl	MapGridGetMetatileIdAt
	.type	 MapGridGetMetatileIdAt,function
	.thumb_func
MapGridGetMetatileIdAt:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	cmp	r5, #0
	blt	.L120	@cond_branch
	ldr	r1, .L124
	ldr	r2, [r1]
	cmp	r5, r2
	bge	.L120	@cond_branch
	cmp	r6, #0
	blt	.L120	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r6, r0
	bge	.L120	@cond_branch
	mov	r0, r2
	mul	r0, r0, r6
	add	r0, r5, r0
	ldr	r1, [r1, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r4, [r0]
	b	.L121
.L125:
	.align	2, 0
.L124:
	.word	gBackupMapLayout
.L120:
	ldr	r0, .L126
	ldr	r3, [r0]
	add	r1, r5, #0x1
	mov	r2, #0x1
	and	r1, r1, r2
	add	r0, r6, #0x1
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r1, [r1]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	add	r4, r0, #0
	orr	r4, r4, r1
.L121:
	ldr	r0, .L126+0x4
	cmp	r4, r0
	beq	.L122	@cond_branch
	and	r4, r4, r0
	add	r0, r4, #0
	b	.L123
.L127:
	.align	2, 0
.L126:
	.word	gMapHeader
	.word	0x3ff
.L122:
	ldr	r0, .L128
	ldr	r3, [r0]
	add	r1, r5, #0x1
	mov	r2, #0x1
	and	r1, r1, r2
	add	r0, r6, #0x1
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r1, r2, #0
	orr	r0, r0, r1
	and	r0, r0, r4
.L123:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L129:
	.align	2, 0
.L128:
	.word	gMapHeader
.Lfe16:
	.size	 MapGridGetMetatileIdAt,.Lfe16-MapGridGetMetatileIdAt
	.align	2, 0
	.globl	MapGridGetMetatileBehaviorAt
	.type	 MapGridGetMetatileBehaviorAt,function
	.thumb_func
MapGridGetMetatileBehaviorAt:
	push	{lr}
	bl	MapGridGetMetatileIdAt
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetBehaviorByMetatileId
	add	r1, r0, #0
	mov	r0, #0xff
	and	r0, r0, r1
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 MapGridGetMetatileBehaviorAt,.Lfe17-MapGridGetMetatileBehaviorAt
	.align	2, 0
	.globl	MapGridGetMetatileLayerTypeAt
	.type	 MapGridGetMetatileLayerTypeAt,function
	.thumb_func
MapGridGetMetatileLayerTypeAt:
	push	{lr}
	bl	MapGridGetMetatileIdAt
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetBehaviorByMetatileId
	add	r1, r0, #0
	mov	r0, #0xf0
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0xc
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 MapGridGetMetatileLayerTypeAt,.Lfe18-MapGridGetMetatileLayerTypeAt
	.align	2, 0
	.globl	MapGridSetMetatileIdAt
	.type	 MapGridSetMetatileIdAt,function
	.thumb_func
MapGridSetMetatileIdAt:
	push	{r4, r5, lr}
	add	r3, r0, #0
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	cmp	r3, #0
	blt	.L133	@cond_branch
	ldr	r2, .L134
	ldr	r4, [r2]
	cmp	r3, r4
	bge	.L133	@cond_branch
	cmp	r1, #0
	blt	.L133	@cond_branch
	ldr	r0, [r2, #0x4]
	cmp	r1, r0
	bge	.L133	@cond_branch
	mul	r1, r1, r4
	add	r1, r3, r1
	ldr	r0, [r2, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x8
	and	r2, r2, r0
	ldr	r0, .L134+0x4
	and	r0, r0, r5
	orr	r2, r2, r0
	strh	r2, [r1]
.L133:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L135:
	.align	2, 0
.L134:
	.word	gBackupMapLayout
	.word	0xfff
.Lfe19:
	.size	 MapGridSetMetatileIdAt,.Lfe19-MapGridSetMetatileIdAt
	.align	2, 0
	.globl	MapGridSetMetatileEntryAt
	.type	 MapGridSetMetatileEntryAt,function
	.thumb_func
MapGridSetMetatileEntryAt:
	push	{r4, r5, lr}
	add	r3, r0, #0
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	cmp	r3, #0
	blt	.L137	@cond_branch
	ldr	r2, .L138
	ldr	r4, [r2]
	cmp	r3, r4
	bge	.L137	@cond_branch
	cmp	r1, #0
	blt	.L137	@cond_branch
	ldr	r0, [r2, #0x4]
	cmp	r1, r0
	bge	.L137	@cond_branch
	mov	r0, r4
	mul	r0, r0, r1
	add	r0, r3, r0
	ldr	r1, [r2, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r5, [r0]
.L137:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L139:
	.align	2, 0
.L138:
	.word	gBackupMapLayout
.Lfe20:
	.size	 MapGridSetMetatileEntryAt,.Lfe20-MapGridSetMetatileEntryAt
	.align	2, 0
	.globl	GetBehaviorByMetatileId
	.type	 GetBehaviorByMetatileId,function
	.thumb_func
GetBehaviorByMetatileId:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r3, r2, #0
	ldr	r0, .L148
	cmp	r2, r0
	bhi	.L141	@cond_branch
	ldr	r0, .L148+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x10]
	ldr	r1, [r0, #0x10]
	lsl	r0, r2, #0x1
	b	.L147
.L149:
	.align	2, 0
.L148:
	.word	0x1ff
	.word	gMapHeader
.L141:
	ldr	r0, .L150
	cmp	r2, r0
	bls	.L143	@cond_branch
	mov	r0, #0xff
	b	.L145
.L151:
	.align	2, 0
.L150:
	.word	0x3ff
.L143:
	ldr	r0, .L152
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r1, [r0, #0x10]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldr	r1, .L152+0x4
.L147:
	add	r0, r0, r1
	ldrh	r0, [r0]
.L145:
	pop	{r1}
	bx	r1
.L153:
	.align	2, 0
.L152:
	.word	gMapHeader
	.word	-0x400
.Lfe21:
	.size	 GetBehaviorByMetatileId,.Lfe21-GetBehaviorByMetatileId
	.align	2, 0
	.globl	save_serialize_map
	.type	 save_serialize_map,function
	.thumb_func
save_serialize_map:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L165
	ldr	r1, [r0]
	add	r4, r1, #0
	add	r4, r4, #0x34
	ldr	r0, .L165+0x4
	ldr	r0, [r0]
	mov	r8, r0
	mov	r0, #0x0
	ldrsh	r6, [r1, r0]
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	add	r1, r0, #0
	add	r1, r1, #0xe
	cmp	r0, r1
	bge	.L156	@cond_branch
	mov	ip, r1
	ldr	r1, .L165+0x8
	mov	r9, r1
	lsl	r7, r6, #0x1
.L158:
	add	r1, r6, #0
	add	r3, r1, #0
	add	r3, r3, #0xf
	add	r5, r0, #0x1
	cmp	r1, r3
	bge	.L157	@cond_branch
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	add	r2, r7, r0
	sub	r1, r3, r1
.L162:
	ldrh	r0, [r2]
	strh	r0, [r4]
	add	r4, r4, #0x2
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bne	.L162	@cond_branch
.L157:
	add	r0, r5, #0
	cmp	r0, ip
	blt	.L158	@cond_branch
.L156:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L166:
	.align	2, 0
.L165:
	.word	gSaveBlock1Ptr
	.word	gBackupMapLayout
	.word	gBackupMapData
.Lfe22:
	.size	 save_serialize_map,.Lfe22-save_serialize_map
	.align	2, 0
	.type	 SavedMapViewIsEmpty,function
	.thumb_func
SavedMapViewIsEmpty:
	push	{r4, lr}
	mov	r2, #0x0
	mov	r1, #0x0
	ldr	r0, .L176
	ldr	r0, [r0]
	add	r3, r0, #0
	add	r3, r3, #0x34
	ldr	r4, .L176+0x4
.L171:
	lsl	r0, r1, #0x1
	add	r0, r3, r0
	ldrh	r0, [r0]
	orr	r2, r2, r0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, r4
	bls	.L171	@cond_branch
	cmp	r2, #0
	beq	.L173	@cond_branch
	mov	r0, #0x0
	b	.L175
.L177:
	.align	2, 0
.L176:
	.word	gSaveBlock1Ptr
	.word	0x1ff
.L173:
	mov	r0, #0x1
.L175:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 SavedMapViewIsEmpty,.Lfe23-SavedMapViewIsEmpty
	.align	2, 0
	.type	 ClearSavedMapView,function
	.thumb_func
ClearSavedMapView:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L179
	ldr	r1, [r0]
	add	r1, r1, #0x34
	ldr	r2, .L179+0x4
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L180:
	.align	2, 0
.L179:
	.word	gSaveBlock1Ptr
	.word	0x1000100
.Lfe24:
	.size	 ClearSavedMapView,.Lfe24-ClearSavedMapView
	.align	2, 0
	.type	 LoadSavedMapView,function
	.thumb_func
LoadSavedMapView:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	ldr	r4, .L205
	ldr	r0, [r4]
	add	r7, r0, #0
	add	r7, r7, #0x34
	bl	SavedMapViewIsEmpty
	cmp	r0, #0
	bne	.L182	@cond_branch
	ldr	r0, .L205+0x4
	ldr	r0, [r0]
	str	r0, [sp]
	ldr	r0, [r4]
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	sl, r1
	mov	r2, #0x2
	ldrsh	r1, [r0, r2]
	mov	r8, r1
	mov	r6, r8
	add	r0, r6, #0
	add	r0, r0, #0xe
	cmp	r6, r0
	bge	.L184	@cond_branch
.L186:
	cmp	r6, r8
	bne	.L187	@cond_branch
	cmp	r6, #0
	beq	.L187	@cond_branch
	mov	r0, #0x0
	mov	r9, r0
	b	.L188
.L206:
	.align	2, 0
.L205:
	.word	gSaveBlock1Ptr
	.word	gBackupMapLayout
.L187:
	mov	r0, r8
	add	r0, r0, #0xd
	mov	r1, #0xff
	mov	r9, r1
	cmp	r6, r0
	bne	.L188	@cond_branch
	ldr	r0, .L207
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	sub	r0, r0, #0x1
	cmp	r6, r0
	beq	.L188	@cond_branch
	mov	r2, #0x1
	mov	r9, r2
.L188:
	mov	r5, sl
	add	r0, r5, #0
	add	r0, r0, #0xf
	mov	r1, r8
	add	r1, r1, #0xe
	str	r1, [sp, #0x8]
	add	r2, r6, #0x1
	str	r2, [sp, #0x4]
	cmp	r5, r0
	bge	.L185	@cond_branch
	ldr	r0, [sp]
	lsl	r3, r0, #0x10
.L194:
	ldr	r1, [sp]
	mov	r0, r1
	mul	r0, r0, r6
	add	r0, r5, r0
	lsl	r0, r0, #0x1
	ldr	r1, .L207+0x4
	add	r4, r0, r1
	add	r0, r4, #0
	lsr	r1, r3, #0x10
	mov	r2, r9
	str	r3, [sp, #0xc]
	bl	SkipCopyingMetatileFromSavedMap
	lsl	r0, r0, #0x18
	ldr	r3, [sp, #0xc]
	cmp	r0, #0
	bne	.L195	@cond_branch
	ldrh	r0, [r7]
	strh	r0, [r4]
.L195:
	add	r7, r7, #0x2
	add	r5, r5, #0x1
	mov	r0, sl
	add	r0, r0, #0xf
	cmp	r5, r0
	blt	.L194	@cond_branch
.L185:
	ldr	r6, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	cmp	r6, r2
	blt	.L186	@cond_branch
.L184:
	mov	r5, sl
	add	r0, r5, #0
	add	r0, r0, #0xf
	cmp	r5, r0
	bge	.L199	@cond_branch
	mov	r0, r8
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	mov	r9, r0
	lsl	r4, r5, #0x10
	mov	r0, r8
	add	r0, r0, #0xd
	lsl	r7, r0, #0x10
.L201:
	mov	r0, r8
	cmp	r0, #0
	beq	.L202	@cond_branch
	asr	r0, r4, #0x10
	mov	r2, r9
	asr	r1, r2, #0x10
	bl	FixLongGrassMetatilesWindowTop
.L202:
	ldr	r0, .L207
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	sub	r0, r0, #0x1
	cmp	r6, r0
	bge	.L200	@cond_branch
	asr	r0, r4, #0x10
	asr	r1, r7, #0x10
	bl	FixLongGrassMetatilesWindowBottom
.L200:
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	add	r4, r4, r0
	add	r5, r5, #0x1
	mov	r0, sl
	add	r0, r0, #0xf
	cmp	r5, r0
	blt	.L201	@cond_branch
.L199:
	bl	ClearSavedMapView
.L182:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L208:
	.align	2, 0
.L207:
	.word	gMapHeader
	.word	gBackupMapData
.Lfe25:
	.size	 LoadSavedMapView,.Lfe25-LoadSavedMapView
	.align	2, 0
	.globl	sub_80885C4
	.type	 sub_80885C4,function
	.thumb_func
sub_80885C4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r2, r3, #0
	ldr	r0, .L229
	ldr	r1, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x34
	str	r0, [sp, #0x4]
	ldr	r0, .L229+0x4
	ldr	r0, [r0]
	str	r0, [sp]
	mov	r4, #0x0
	mov	r9, r4
	mov	r8, r4
	mov	r0, #0x0
	ldrsh	r6, [r1, r0]
	str	r6, [sp, #0x8]
	mov	r4, #0x2
	ldrsh	r5, [r1, r4]
	mov	r7, #0xf
	mov	r6, #0xe
	mov	ip, r6
	cmp	r3, #0x2
	beq	.L211	@cond_branch
	cmp	r3, #0x2
	bgt	.L217	@cond_branch
	cmp	r3, #0x1
	beq	.L212	@cond_branch
	b	.L210
.L230:
	.align	2, 0
.L229:
	.word	gSaveBlock1Ptr
	.word	gBackupMapLayout
.L217:
	cmp	r2, #0x3
	beq	.L213	@cond_branch
	cmp	r2, #0x4
	beq	.L214	@cond_branch
	b	.L210
.L211:
	add	r5, r5, #0x1
	mov	r0, #0xd
	mov	ip, r0
	b	.L210
.L212:
	mov	r1, #0x1
	mov	r8, r1
	mov	r3, #0xd
	mov	ip, r3
	b	.L210
.L213:
	ldr	r4, [sp, #0x8]
	add	r4, r4, #0x1
	str	r4, [sp, #0x8]
	b	.L228
.L214:
	mov	r6, #0x1
	mov	r9, r6
.L228:
	mov	r7, #0xe
.L210:
	mov	r1, #0x0
	cmp	r1, ip
	bge	.L219	@cond_branch
	ldr	r0, .L231
	mov	sl, r0
.L221:
	add	r4, r1, #0x1
	cmp	r7, #0
	beq	.L220	@cond_branch
	add	r0, r1, r5
	ldr	r3, [sp]
	mov	r2, r3
	mul	r2, r2, r0
	add	r1, r1, r8
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	add	r0, r0, r9
	ldr	r6, [sp, #0x8]
	add	r2, r6, r2
	add	r3, r7, #0
	lsl	r2, r2, #0x1
	add	r2, r2, sl
	lsl	r0, r0, #0x1
	ldr	r6, [sp, #0x4]
	add	r1, r0, r6
.L225:
	ldrh	r0, [r1]
	strh	r0, [r2]
	add	r1, r1, #0x2
	add	r2, r2, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L225	@cond_branch
.L220:
	add	r1, r4, #0
	cmp	r1, ip
	blt	.L221	@cond_branch
.L219:
	bl	ClearSavedMapView
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L232:
	.align	2, 0
.L231:
	.word	gBackupMapData
.Lfe26:
	.size	 sub_80885C4,.Lfe26-sub_80885C4
	.align	2, 0
	.globl	GetMapBorderIdAt
	.type	 GetMapBorderIdAt,function
	.thumb_func
GetMapBorderIdAt:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	cmp	r4, #0
	blt	.L234	@cond_branch
	ldr	r1, .L254
	ldr	r2, [r1]
	cmp	r4, r2
	bge	.L234	@cond_branch
	cmp	r5, #0
	blt	.L234	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r5, r0
	bge	.L234	@cond_branch
	mov	r0, r2
	mul	r0, r0, r5
	add	r0, r4, r0
	ldr	r1, [r1, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L254+0x4
	cmp	r1, r0
	beq	.L253	@cond_branch
	b	.L239
.L255:
	.align	2, 0
.L254:
	.word	gBackupMapLayout
	.word	0x3ff
.L234:
	ldr	r0, .L256
	ldr	r3, [r0]
	add	r1, r4, #0x1
	mov	r2, #0x1
	and	r1, r1, r2
	add	r0, r5, #0x1
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r1, [r1]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	orr	r0, r0, r1
	ldr	r1, .L256+0x4
	cmp	r0, r1
	beq	.L253	@cond_branch
.L239:
	ldr	r1, .L256+0x8
	ldr	r0, [r1]
	sub	r0, r0, #0x8
	cmp	r4, r0
	blt	.L240	@cond_branch
	ldr	r0, .L256+0xc
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L253	@cond_branch
	mov	r0, #0x4
	b	.L252
.L257:
	.align	2, 0
.L256:
	.word	gMapHeader
	.word	0x3ff
	.word	gBackupMapLayout
	.word	gMapConnectionFlags
.L240:
	cmp	r4, #0x6
	bgt	.L243	@cond_branch
	ldr	r0, .L258
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L253	@cond_branch
	mov	r0, #0x3
	b	.L252
.L259:
	.align	2, 0
.L258:
	.word	gMapConnectionFlags
.L243:
	ldr	r0, [r1, #0x4]
	sub	r0, r0, #0x7
	cmp	r5, r0
	blt	.L246	@cond_branch
	ldr	r0, .L260
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L253	@cond_branch
	mov	r0, #0x1
	b	.L252
.L261:
	.align	2, 0
.L260:
	.word	gMapConnectionFlags
.L246:
	cmp	r5, #0x6
	bgt	.L249	@cond_branch
	ldr	r0, .L262
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L250	@cond_branch
.L253:
	mov	r0, #0x1
	neg	r0, r0
	b	.L252
.L263:
	.align	2, 0
.L262:
	.word	gMapConnectionFlags
.L250:
	mov	r0, #0x2
	b	.L252
.L249:
	mov	r0, #0x0
.L252:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 GetMapBorderIdAt,.Lfe27-GetMapBorderIdAt
	.align	2, 0
	.globl	GetPostCameraMoveMapBorderId
	.type	 GetPostCameraMoveMapBorderId,function
	.thumb_func
GetPostCameraMoveMapBorderId:
	push	{r4, lr}
	add	r3, r1, #0
	ldr	r1, .L265
	ldr	r1, [r1]
	mov	r4, #0x0
	ldrsh	r2, [r1, r4]
	add	r0, r0, #0x7
	add	r2, r2, r0
	mov	r0, #0x2
	ldrsh	r1, [r1, r0]
	add	r3, r3, #0x7
	add	r1, r1, r3
	add	r0, r2, #0
	bl	GetMapBorderIdAt
	pop	{r4}
	pop	{r1}
	bx	r1
.L266:
	.align	2, 0
.L265:
	.word	gSaveBlock1Ptr
.Lfe28:
	.size	 GetPostCameraMoveMapBorderId,.Lfe28-GetPostCameraMoveMapBorderId
	.align	2, 0
	.globl	CanCameraMoveInDirection
	.type	 CanCameraMoveInDirection,function
	.thumb_func
CanCameraMoveInDirection:
	push	{r4, r5, lr}
	ldr	r1, .L270
	ldr	r4, [r1]
	mov	r1, #0x0
	ldrsh	r3, [r4, r1]
	ldr	r2, .L270+0x4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldr	r1, [r1]
	add	r1, r1, #0x7
	add	r3, r3, r1
	mov	r5, #0x2
	ldrsh	r1, [r4, r5]
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r0, [r0]
	add	r0, r0, #0x7
	add	r1, r1, r0
	add	r0, r3, #0
	bl	GetMapBorderIdAt
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	beq	.L268	@cond_branch
	mov	r0, #0x1
	b	.L269
.L271:
	.align	2, 0
.L270:
	.word	gSaveBlock1Ptr
	.word	gDirectionToVectors
.L268:
	mov	r0, #0x0
.L269:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 CanCameraMoveInDirection,.Lfe29-CanCameraMoveInDirection
	.align	2, 0
	.globl	sub_80887F8
	.type	 sub_80887F8,function
	.thumb_func
sub_80887F8:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	add	r6, r2, #0
	add	r7, r3, #0
	bl	GetMapHeaderFromConnection
	add	r3, r0, #0
	cmp	r4, #0x2
	beq	.L277	@cond_branch
	cmp	r4, #0x2
	bgt	.L280	@cond_branch
	cmp	r4, #0x1
	beq	.L276	@cond_branch
	b	.L273
.L280:
	cmp	r4, #0x3
	beq	.L275	@cond_branch
	cmp	r4, #0x4
	bne	.L273	@cond_branch
	ldr	r0, .L282
	ldr	r1, [r0]
	neg	r0, r6
	strh	r0, [r1]
	ldr	r2, [r5, #0x4]
	ldrh	r0, [r1, #0x2]
	sub	r0, r0, r2
	b	.L281
.L283:
	.align	2, 0
.L282:
	.word	gSaveBlock1Ptr
.L275:
	ldr	r0, .L284
	ldr	r1, [r0]
	ldr	r0, [r3]
	ldr	r0, [r0]
	strh	r0, [r1]
	ldr	r2, [r5, #0x4]
	ldrh	r0, [r1, #0x2]
	sub	r0, r0, r2
	b	.L281
.L285:
	.align	2, 0
.L284:
	.word	gSaveBlock1Ptr
.L276:
	ldr	r0, .L286
	ldr	r1, [r0]
	ldr	r2, [r5, #0x4]
	ldrh	r0, [r1]
	sub	r0, r0, r2
	strh	r0, [r1]
	neg	r0, r7
	b	.L281
.L287:
	.align	2, 0
.L286:
	.word	gSaveBlock1Ptr
.L277:
	ldr	r0, .L288
	ldr	r1, [r0]
	ldr	r2, [r5, #0x4]
	ldrh	r0, [r1]
	sub	r0, r0, r2
	strh	r0, [r1]
	ldr	r0, [r3]
	ldr	r0, [r0, #0x4]
.L281:
	strh	r0, [r1, #0x2]
.L273:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L289:
	.align	2, 0
.L288:
	.word	gSaveBlock1Ptr
.Lfe30:
	.size	 sub_80887F8,.Lfe30-sub_80887F8
	.align	2, 0
	.globl	CameraMove
	.type	 CameraMove,function
	.thumb_func
CameraMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r0
	mov	r9, r1
	ldr	r1, .L293
	ldrb	r0, [r1]
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r0
	ldr	r2, .L293
	strb	r1, [r2]
	mov	r0, sl
	mov	r1, r9
	bl	GetPostCameraMoveMapBorderId
	add	r7, r0, #0
	add	r0, r7, #0x1
	cmp	r0, #0x1
	bhi	.L291	@cond_branch
	ldr	r0, .L293+0x4
	ldr	r1, [r0]
	ldrh	r0, [r1]
	add	r0, r0, sl
	strh	r0, [r1]
	ldrh	r0, [r1, #0x2]
	add	r0, r0, r9
	strh	r0, [r1, #0x2]
	b	.L292
.L294:
	.align	2, 0
.L293:
	.word	gCamera
	.word	gSaveBlock1Ptr
.L291:
	bl	save_serialize_map
	bl	ClearMirageTowerPulseBlendEffect
	ldr	r1, .L295
	ldr	r0, [r1]
	mov	r2, #0x0
	ldrsh	r5, [r0, r2]
	mov	r1, #0x2
	ldrsh	r6, [r0, r1]
	lsl	r2, r7, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r6, #0
	bl	sub_8088950
	add	r4, r0, #0
	add	r1, r7, #0
	mov	r2, sl
	mov	r3, r9
	bl	sub_80887F8
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r4, #0x9]
	bl	LoadMapFromCameraTransition
	ldr	r1, .L295+0x4
	ldrb	r0, [r1]
	mov	r1, #0x1
	orr	r0, r0, r1
	ldr	r2, .L295+0x4
	strb	r0, [r2]
	ldr	r0, .L295
	ldr	r1, [r0]
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	sub	r5, r5, r0
	ldr	r0, .L295+0x4
	str	r5, [r0, #0x4]
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	sub	r6, r6, r0
	ldr	r0, .L295+0x4
	str	r6, [r0, #0x8]
	ldrh	r0, [r1]
	add	r0, r0, sl
	strh	r0, [r1]
	ldrh	r0, [r1, #0x2]
	add	r0, r0, r9
	strh	r0, [r1, #0x2]
	mov	r0, r8
	bl	sub_80885C4
.L292:
	ldr	r0, .L295+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L296:
	.align	2, 0
.L295:
	.word	gSaveBlock1Ptr
	.word	gCamera
.Lfe31:
	.size	 CameraMove,.Lfe31-CameraMove
	.align	2, 0
	.globl	sub_8088950
	.type	 sub_8088950,function
	.thumb_func
sub_8088950:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r1
	mov	r8, r2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L305
	ldr	r0, [r0, #0xc]
	ldr	r7, [r0]
	ldr	r4, [r0, #0x4]
	mov	r5, #0x0
	cmp	r5, r7
	bge	.L299	@cond_branch
.L301:
	ldrb	r0, [r4]
	cmp	r0, r6
	bne	.L300	@cond_branch
	add	r0, r6, #0
	mov	r1, r9
	mov	r2, r8
	add	r3, r4, #0
	bl	sub_80889A8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L300	@cond_branch
	add	r0, r4, #0
	b	.L304
.L306:
	.align	2, 0
.L305:
	.word	gMapHeader
.L300:
	add	r5, r5, #0x1
	add	r4, r4, #0xc
	cmp	r5, r7
	blt	.L301	@cond_branch
.L299:
	mov	r0, #0x0
.L304:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 sub_8088950,.Lfe32-sub_8088950
	.align	2, 0
	.globl	sub_80889A8
	.type	 sub_80889A8,function
	.thumb_func
sub_80889A8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r1, #0
	mov	r8, r2
	add	r5, r3, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	add	r0, r5, #0
	bl	GetMapHeaderFromConnection
	add	r2, r0, #0
	cmp	r4, #0x1
	blt	.L308	@cond_branch
	cmp	r4, #0x2
	bgt	.L310	@cond_branch
	ldr	r0, .L317
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldr	r0, [r2]
	ldr	r2, [r0]
	ldr	r3, [r5, #0x4]
	add	r0, r7, #0
	b	.L316
.L318:
	.align	2, 0
.L317:
	.word	gMapHeader
.L310:
	cmp	r6, #0x4
	bgt	.L308	@cond_branch
	ldr	r0, .L319
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	ldr	r0, [r2]
	ldr	r2, [r0, #0x4]
	ldr	r3, [r5, #0x4]
	mov	r0, r8
.L316:
	bl	sub_8088A0C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L315
.L320:
	.align	2, 0
.L319:
	.word	gMapHeader
.L308:
	mov	r0, #0x0
.L315:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 sub_80889A8,.Lfe33-sub_80889A8
	.align	2, 0
	.globl	sub_8088A0C
	.type	 sub_8088A0C,function
	.thumb_func
sub_8088A0C:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r2, #0
	add	r2, r3, #0
	cmp	r3, #0
	bge	.L322	@cond_branch
	mov	r3, #0x0
.L322:
	add	r2, r0, r2
	cmp	r2, r1
	bge	.L323	@cond_branch
	add	r1, r2, #0
.L323:
	cmp	r3, r4
	bgt	.L324	@cond_branch
	cmp	r4, r1
	bgt	.L324	@cond_branch
	mov	r0, #0x1
	b	.L325
.L324:
	mov	r0, #0x0
.L325:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 sub_8088A0C,.Lfe34-sub_8088A0C
	.align	2, 0
	.globl	sub_8088A38
	.type	 sub_8088A38,function
	.thumb_func
sub_8088A38:
	push	{lr}
	cmp	r0, #0
	blt	.L327	@cond_branch
	cmp	r0, r1
	bge	.L327	@cond_branch
	mov	r0, #0x1
	b	.L328
.L327:
	mov	r0, #0x0
.L328:
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 sub_8088A38,.Lfe35-sub_8088A38
	.align	2, 0
	.globl	sub_8088A4C
	.type	 sub_8088A4C,function
	.thumb_func
sub_8088A4C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	bl	GetMapHeaderFromConnection
	add	r1, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0x1
	blt	.L330	@cond_branch
	cmp	r0, #0x2
	bgt	.L332	@cond_branch
	ldr	r0, [r4, #0x4]
	sub	r0, r5, r0
	ldr	r1, [r1]
	ldr	r1, [r1]
	bl	sub_8088A38
	b	.L337
.L332:
	cmp	r0, #0x4
	bgt	.L330	@cond_branch
	ldr	r0, [r4, #0x4]
	sub	r0, r6, r0
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
	bl	sub_8088A38
	b	.L337
.L330:
	mov	r0, #0x0
.L337:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 sub_8088A4C,.Lfe36-sub_8088A4C
	.align	2, 0
	.globl	GetConnectionAtCoords
	.type	 GetConnectionAtCoords,function
	.thumb_func
GetConnectionAtCoords:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L354
	ldr	r0, [r2, #0xc]
	cmp	r0, #0
	bne	.L339	@cond_branch
	b	.L340
.L355:
	.align	2, 0
.L354:
	.word	gMapHeader
.L353:
	add	r0, r4, #0
	b	.L352
.L339:
	ldr	r7, [r0]
	ldr	r4, [r0, #0x4]
	mov	r6, #0x0
	cmp	r6, r7
	bge	.L340	@cond_branch
	lsl	r0, r1, #0x10
	asr	r5, r0, #0x10
	mov	r9, r2
	mov	r1, r8
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	sl, r0
.L344:
	ldrb	r1, [r4]
	add	r3, r1, #0
	sub	r0, r1, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L343	@cond_branch
	cmp	r1, #0x2
	bne	.L347	@cond_branch
	cmp	r5, #0x6
	bgt	.L343	@cond_branch
.L347:
	cmp	r1, #0x1
	bne	.L348	@cond_branch
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	add	r0, r0, #0x7
	cmp	r5, r0
	blt	.L343	@cond_branch
.L348:
	mov	r0, r8
	lsl	r2, r0, #0x10
	cmp	r1, #0x3
	bne	.L349	@cond_branch
	mov	r1, sl
	cmp	r1, #0x6
	bgt	.L343	@cond_branch
.L349:
	cmp	r3, #0x4
	bne	.L345	@cond_branch
	asr	r1, r2, #0x10
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r0, [r0]
	add	r0, r0, #0x7
	cmp	r1, r0
	blt	.L343	@cond_branch
.L345:
	asr	r1, r2, #0x10
	sub	r1, r1, #0x7
	add	r0, r4, #0
	sub	r2, r5, #0x7
	bl	sub_8088A4C
	cmp	r0, #0x1
	beq	.L353	@cond_branch
.L343:
	add	r6, r6, #0x1
	add	r4, r4, #0xc
	cmp	r6, r7
	blt	.L344	@cond_branch
.L340:
	mov	r0, #0x0
.L352:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 GetConnectionAtCoords,.Lfe37-GetConnectionAtCoords
	.align	2, 0
	.globl	SetCameraFocusCoords
	.type	 SetCameraFocusCoords,function
	.thumb_func
SetCameraFocusCoords:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L357
	ldr	r2, [r2]
	sub	r0, r0, #0x7
	strh	r0, [r2]
	sub	r1, r1, #0x7
	strh	r1, [r2, #0x2]
	bx	lr
.L358:
	.align	2, 0
.L357:
	.word	gSaveBlock1Ptr
.Lfe38:
	.size	 SetCameraFocusCoords,.Lfe38-SetCameraFocusCoords
	.align	2, 0
	.globl	GetCameraFocusCoords
	.type	 GetCameraFocusCoords,function
	.thumb_func
GetCameraFocusCoords:
	ldr	r2, .L360
	ldr	r3, [r2]
	ldrh	r2, [r3]
	add	r2, r2, #0x7
	strh	r2, [r0]
	ldrh	r0, [r3, #0x2]
	add	r0, r0, #0x7
	strh	r0, [r1]
	bx	lr
.L361:
	.align	2, 0
.L360:
	.word	gSaveBlock1Ptr
.Lfe39:
	.size	 GetCameraFocusCoords,.Lfe39-GetCameraFocusCoords
	.align	2, 0
	.type	 SetCameraCoords,function
	.thumb_func
SetCameraCoords:
	ldr	r2, .L363
	ldr	r2, [r2]
	strh	r0, [r2]
	strh	r1, [r2, #0x2]
	bx	lr
.L364:
	.align	2, 0
.L363:
	.word	gSaveBlock1Ptr
.Lfe40:
	.size	 SetCameraCoords,.Lfe40-SetCameraCoords
	.align	2, 0
	.globl	GetCameraCoords
	.type	 GetCameraCoords,function
	.thumb_func
GetCameraCoords:
	ldr	r2, .L366
	ldr	r3, [r2]
	ldrh	r2, [r3]
	strh	r2, [r0]
	ldrh	r0, [r3, #0x2]
	strh	r0, [r1]
	bx	lr
.L367:
	.align	2, 0
.L366:
	.word	gSaveBlock1Ptr
.Lfe41:
	.size	 GetCameraCoords,.Lfe41-GetCameraCoords
	.align	2, 0
	.globl	MapGridSetMetatileImpassabilityAt
	.type	 MapGridSetMetatileImpassabilityAt,function
	.thumb_func
MapGridSetMetatileImpassabilityAt:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r3, r1, #0
	add	r5, r2, #0
	cmp	r4, #0
	blt	.L369	@cond_branch
	ldr	r2, .L372
	ldr	r1, [r2]
	cmp	r4, r1
	bge	.L369	@cond_branch
	cmp	r3, #0
	blt	.L369	@cond_branch
	ldr	r0, [r2, #0x4]
	cmp	r3, r0
	bge	.L369	@cond_branch
	cmp	r5, #0
	beq	.L370	@cond_branch
	mov	r0, r1
	mul	r0, r0, r3
	add	r0, r4, r0
	ldr	r1, [r2, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r3, #0xc0
	lsl	r3, r3, #0x4
	add	r2, r3, #0
	orr	r1, r1, r2
	strh	r1, [r0]
	b	.L369
.L373:
	.align	2, 0
.L372:
	.word	gBackupMapLayout
.L370:
	mul	r1, r1, r3
	add	r1, r4, r1
	ldr	r0, [r2, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r2, [r1]
	ldr	r0, .L374
	and	r0, r0, r2
	strh	r0, [r1]
.L369:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L375:
	.align	2, 0
.L374:
	.word	0xf3ff
.Lfe42:
	.size	 MapGridSetMetatileImpassabilityAt,.Lfe42-MapGridSetMetatileImpassabilityAt
	.align	2, 0
	.type	 SkipCopyingMetatileFromSavedMap,function
	.thumb_func
SkipCopyingMetatileFromSavedMap:
	push	{lr}
	add	r3, r0, #0
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x10
	add	r1, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r2, #0xff
	beq	.L382	@cond_branch
	cmp	r2, #0
	bne	.L378	@cond_branch
	lsl	r0, r0, #0x1
	sub	r3, r3, r0
	b	.L379
.L378:
	lsl	r0, r1, #0x1
	add	r3, r3, r0
.L379:
	ldrh	r1, [r3]
	ldr	r0, .L383
	and	r0, r0, r1
	add	r1, r2, #0
	bl	IsLargeBreakableDecoration
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L380	@cond_branch
.L382:
	mov	r0, #0x0
	b	.L381
.L384:
	.align	2, 0
.L383:
	.word	0x3ff
.L380:
	mov	r0, #0x1
.L381:
	pop	{r1}
	bx	r1
.Lfe43:
	.size	 SkipCopyingMetatileFromSavedMap,.Lfe43-SkipCopyingMetatileFromSavedMap
	.align	2, 0
	.type	 CopyTilesetToVram,function
	.thumb_func
CopyTilesetToVram:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r3, r0, #0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r6, r4, #0
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	add	r7, r5, #0
	cmp	r3, #0
	beq	.L386	@cond_branch
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L387	@cond_branch
	ldr	r1, [r3, #0x4]
	lsl	r2, r4, #0x15
	lsr	r2, r2, #0x10
	mov	r0, #0x2
	add	r3, r5, #0
	bl	LoadBgTiles
	b	.L386
.L387:
	ldr	r1, [r3, #0x4]
	lsl	r2, r6, #0x5
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	add	r3, r7, #0
	bl	DecompressAndCopyTileDataToVram
.L386:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 CopyTilesetToVram,.Lfe44-CopyTilesetToVram
	.align	2, 0
	.type	 CopyTilesetToVramUsingHeap,function
	.thumb_func
CopyTilesetToVramUsingHeap:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r3, r0, #0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r6, r4, #0
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	add	r7, r5, #0
	cmp	r3, #0
	beq	.L390	@cond_branch
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L391	@cond_branch
	ldr	r1, [r3, #0x4]
	lsl	r2, r4, #0x15
	lsr	r2, r2, #0x10
	mov	r0, #0x2
	add	r3, r5, #0
	bl	LoadBgTiles
	b	.L390
.L391:
	ldr	r1, [r3, #0x4]
	lsl	r2, r6, #0x5
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	add	r3, r7, #0
	bl	DecompressAndLoadBgGfxUsingHeap
.L390:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 CopyTilesetToVramUsingHeap,.Lfe45-CopyTilesetToVramUsingHeap
	.align	2, 0
	.globl	nullsub_3
	.type	 nullsub_3,function
	.thumb_func
nullsub_3:
	bx	lr
.Lfe46:
	.size	 nullsub_3,.Lfe46-nullsub_3
	.align	2, 0
	.globl	nullsub_90
	.type	 nullsub_90,function
	.thumb_func
nullsub_90:
	bx	lr
.Lfe47:
	.size	 nullsub_90,.Lfe47-nullsub_90
	.align	2, 0
	.globl	LoadTilesetPalette
	.type	 LoadTilesetPalette,function
	.thumb_func
LoadTilesetPalette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r8, r5
	lsl	r6, r2, #0x10
	lsr	r7, r6, #0x10
	add	r2, r7, #0
	mov	r1, #0x0
	mov	r0, sp
	strh	r1, [r0]
	cmp	r4, #0
	beq	.L396	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L397	@cond_branch
	ldr	r1, .L401
	ldr	r0, [r4, #0x18]
	str	r0, [r1]
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x2
	bl	LoadPaletteDayNight
	ldr	r0, [r4, #0x8]
	add	r0, r0, #0x2
	add	r5, r5, #0x1
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	sub	r4, r7, #0x2
	lsl	r2, r4, #0x10
	lsr	r2, r2, #0x10
	add	r1, r5, #0
	bl	LoadPaletteDayNight
	lsl	r4, r4, #0xf
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	nullsub_3
	b	.L396
.L402:
	.align	2, 0
.L401:
	.word	gPaletteOverrides
.L397:
	cmp	r0, #0x1
	bne	.L399	@cond_branch
	ldr	r1, .L403
	ldr	r0, [r4, #0x18]
	str	r0, [r1, #0x4]
	ldr	r0, [r4, #0x8]
	add	r0, r0, #0xc0
	add	r1, r5, #0
	add	r2, r7, #0
	bl	LoadPaletteDayNight
	lsr	r1, r6, #0x11
	add	r0, r5, #0
	bl	nullsub_3
	b	.L396
.L404:
	.align	2, 0
.L403:
	.word	gPaletteOverrides
.L399:
	ldr	r1, .L405
	ldr	r0, [r4, #0x18]
	str	r0, [r1, #0x8]
	ldr	r0, [r4, #0x8]
	mov	r1, r8
	bl	LoadCompressedPaletteDayNight
	lsr	r1, r6, #0x11
	mov	r0, r8
	bl	nullsub_3
.L396:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L406:
	.align	2, 0
.L405:
	.word	gPaletteOverrides
.Lfe48:
	.size	 LoadTilesetPalette,.Lfe48-LoadTilesetPalette
	.align	2, 0
	.globl	CopyPrimaryTilesetToVram
	.type	 CopyPrimaryTilesetToVram,function
	.thumb_func
CopyPrimaryTilesetToVram:
	push	{lr}
	ldr	r0, [r0, #0x10]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r2, #0x0
	bl	CopyTilesetToVram
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 CopyPrimaryTilesetToVram,.Lfe49-CopyPrimaryTilesetToVram
	.align	2, 0
	.globl	CopySecondaryTilesetToVram
	.type	 CopySecondaryTilesetToVram,function
	.thumb_func
CopySecondaryTilesetToVram:
	push	{lr}
	ldr	r0, [r0, #0x14]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r1, r2, #0
	bl	CopyTilesetToVram
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 CopySecondaryTilesetToVram,.Lfe50-CopySecondaryTilesetToVram
	.align	2, 0
	.globl	CopySecondaryTilesetToVramUsingHeap
	.type	 CopySecondaryTilesetToVramUsingHeap,function
	.thumb_func
CopySecondaryTilesetToVramUsingHeap:
	push	{lr}
	ldr	r0, [r0, #0x14]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r1, r2, #0
	bl	CopyTilesetToVramUsingHeap
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 CopySecondaryTilesetToVramUsingHeap,.Lfe51-CopySecondaryTilesetToVramUsingHeap
	.align	2, 0
	.type	 LoadPrimaryTilesetPalette,function
	.thumb_func
LoadPrimaryTilesetPalette:
	push	{lr}
	ldr	r0, [r0, #0x10]
	mov	r1, #0x0
	mov	r2, #0xc0
	bl	LoadTilesetPalette
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 LoadPrimaryTilesetPalette,.Lfe52-LoadPrimaryTilesetPalette
	.align	2, 0
	.globl	LoadSecondaryTilesetPalette
	.type	 LoadSecondaryTilesetPalette,function
	.thumb_func
LoadSecondaryTilesetPalette:
	push	{lr}
	ldr	r0, [r0, #0x14]
	mov	r1, #0x60
	mov	r2, #0xe0
	bl	LoadTilesetPalette
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 LoadSecondaryTilesetPalette,.Lfe53-LoadSecondaryTilesetPalette
	.align	2, 0
	.globl	CopyMapTilesetsToVram
	.type	 CopyMapTilesetsToVram,function
	.thumb_func
CopyMapTilesetsToVram:
	push	{r4, r5, lr}
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L413	@cond_branch
	ldr	r0, [r5, #0x10]
	mov	r4, #0x80
	lsl	r4, r4, #0x2
	add	r1, r4, #0
	mov	r2, #0x0
	bl	CopyTilesetToVramUsingHeap
	ldr	r0, [r5, #0x14]
	add	r1, r4, #0
	add	r2, r4, #0
	bl	CopyTilesetToVramUsingHeap
.L413:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 CopyMapTilesetsToVram,.Lfe54-CopyMapTilesetsToVram
	.align	2, 0
	.globl	LoadMapTilesetPalettes
	.type	 LoadMapTilesetPalettes,function
	.thumb_func
LoadMapTilesetPalettes:
	push	{r4, lr}
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L415	@cond_branch
	bl	LoadPrimaryTilesetPalette
	add	r0, r4, #0
	bl	LoadSecondaryTilesetPalette
.L415:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 LoadMapTilesetPalettes,.Lfe55-LoadMapTilesetPalettes
	.comm	gBackupMapLayout, 12	@ 12
.text
	.align	2, 0

