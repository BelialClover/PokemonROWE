@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gAIScriptPtr
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gAIScriptPtr,object
	.size	 gAIScriptPtr,4
gAIScriptPtr:
	.word	0x0
	.type	 sBattler_AI,object
	.size	 sBattler_AI,1
sBattler_AI:
	.byte	0x0
	.section .rodata
	.align	2, 0
	.type	 sBattleAICmdTable,object
sBattleAICmdTable:
	.word	Cmd_if_random_less_than
	.word	Cmd_if_random_greater_than
	.word	Cmd_if_random_equal
	.word	Cmd_if_random_not_equal
	.word	Cmd_score
	.word	Cmd_if_hp_less_than
	.word	Cmd_if_hp_more_than
	.word	Cmd_if_hp_equal
	.word	Cmd_if_hp_not_equal
	.word	Cmd_if_status
	.word	Cmd_if_not_status
	.word	Cmd_if_status2
	.word	Cmd_if_not_status2
	.word	Cmd_if_status3
	.word	Cmd_if_not_status3
	.word	Cmd_if_side_affecting
	.word	Cmd_if_not_side_affecting
	.word	Cmd_if_less_than
	.word	Cmd_if_more_than
	.word	Cmd_if_equal
	.word	Cmd_if_not_equal
	.word	Cmd_if_less_than_ptr
	.word	Cmd_if_more_than_ptr
	.word	Cmd_if_equal_ptr
	.word	Cmd_if_not_equal_ptr
	.word	Cmd_if_move
	.word	Cmd_if_not_move
	.word	Cmd_if_in_bytes
	.word	Cmd_if_not_in_bytes
	.word	Cmd_if_in_hwords
	.word	Cmd_if_not_in_hwords
	.word	Cmd_if_user_has_attacking_move
	.word	Cmd_if_user_has_no_attacking_moves
	.word	Cmd_get_turn_count
	.word	Cmd_get_type
	.word	Cmd_get_considered_move_power
	.word	Cmd_get_how_powerful_move_is
	.word	Cmd_get_last_used_battler_move
	.word	Cmd_if_equal_u32
	.word	Cmd_if_not_equal_u32
	.word	Cmd_if_user_goes
	.word	Cmd_if_cant_use_belch
	.word	Cmd_nullsub_2A
	.word	Cmd_nullsub_2B
	.word	Cmd_count_usable_party_mons
	.word	Cmd_get_considered_move
	.word	Cmd_get_considered_move_effect
	.word	Cmd_get_ability
	.word	Cmd_get_highest_type_effectiveness
	.word	Cmd_if_type_effectiveness
	.word	Cmd_nullsub_32
	.word	Cmd_nullsub_33
	.word	Cmd_if_status_in_party
	.word	Cmd_if_status_not_in_party
	.word	Cmd_get_weather
	.word	Cmd_if_effect
	.word	Cmd_if_not_effect
	.word	Cmd_if_stat_level_less_than
	.word	Cmd_if_stat_level_more_than
	.word	Cmd_if_stat_level_equal
	.word	Cmd_if_stat_level_not_equal
	.word	Cmd_if_can_faint
	.word	Cmd_if_cant_faint
	.word	Cmd_if_has_move
	.word	Cmd_if_doesnt_have_move
	.word	Cmd_if_has_move_with_effect
	.word	Cmd_if_doesnt_have_move_with_effect
	.word	Cmd_if_any_move_disabled_or_encored
	.word	Cmd_if_curr_move_disabled_or_encored
	.word	Cmd_flee
	.word	Cmd_if_random_safari_flee
	.word	Cmd_watch
	.word	Cmd_get_hold_effect
	.word	Cmd_get_gender
	.word	Cmd_is_first_turn_for
	.word	Cmd_get_stockpile_count
	.word	Cmd_is_double_battle
	.word	Cmd_get_used_held_item
	.word	Cmd_get_move_type_from_result
	.word	Cmd_get_move_power_from_result
	.word	Cmd_get_move_effect_from_result
	.word	Cmd_get_protect_count
	.word	Cmd_if_move_flag
	.word	Cmd_if_field_status
	.word	Cmd_get_move_accuracy
	.word	Cmd_call_if_eq
	.word	Cmd_call_if_move_flag
	.word	Cmd_nullsub_57
	.word	Cmd_call
	.word	Cmd_goto
	.word	Cmd_end
	.word	Cmd_if_level_cond
	.word	Cmd_if_target_taunted
	.word	Cmd_if_target_not_taunted
	.word	Cmd_if_target_is_ally
	.word	Cmd_is_of_type
	.word	Cmd_check_ability
	.word	Cmd_if_flash_fired
	.word	Cmd_if_holds_item
	.word	Cmd_get_ally_chosen_move
	.word	Cmd_if_has_no_attacking_moves
	.word	Cmd_get_hazards_count
	.word	Cmd_if_doesnt_hold_berry
	.word	Cmd_if_share_type
	.word	Cmd_if_cant_use_last_resort
	.word	Cmd_if_has_move_with_split
	.word	Cmd_if_has_no_move_with_split
	.word	Cmd_if_physical_moves_unusable
	.word	Cmd_if_ai_can_go_down
	.word	Cmd_if_has_move_with_type
	.word	Cmd_if_no_move_used
	.word	Cmd_if_has_move_with_flag
	.word	Cmd_if_battler_absent
	.word	Cmd_is_grounded
	.word	Cmd_get_best_dmg_hp_percent
	.word	Cmd_get_curr_dmg_hp_percent
	.word	Cmd_get_move_split_from_result
	.word	Cmd_get_considered_move_split
	.word	Cmd_get_considered_move_target
	.word	Cmd_compare_speeds
	.word	Cmd_is_wakeup_turn
	.word	Cmd_if_has_move_with_accuracy_lt
	.size	 sBattleAICmdTable,488
	.align	1, 0
	.type	 sDiscouragedPowerfulMoveEffects,object
sDiscouragedPowerfulMoveEffects:
	.short	0x7
	.short	0x8
	.short	0x50
	.short	0x91
	.short	0x97
	.short	0xa1
	.short	0xaa
	.short	0xb6
	.short	0xbe
	.short	0xcc
	.short	0x154
	.short	0xffff
	.size	 sDiscouragedPowerfulMoveEffects,24
.text
	.align	2, 0
	.globl	BattleAI_SetupItems
	.type	 BattleAI_SetupItems,function
	.thumb_func
BattleAI_SetupItems:
	push	{lr}
	ldr	r0, .L8
	ldr	r0, [r0]
	ldr	r2, [r0, #0x18]
	mov	r1, #0x0
	mov	r3, #0x0
.L6:
	add	r0, r2, r1
	strb	r3, [r0]
	add	r1, r1, #0x1
	cmp	r1, #0x57
	bls	.L6	@cond_branch
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gBattleResources
.Lfe1:
	.size	 BattleAI_SetupItems,.Lfe1-BattleAI_SetupItems
	.align	2, 0
	.globl	BattleAI_SetupFlags
	.type	 BattleAI_SetupFlags,function
	.thumb_func
BattleAI_SetupFlags:
	push	{r4, r5, lr}
	bl	GetPlayerUsableMons
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L28
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L11	@cond_branch
	bl	GetAiScriptsInRecordedBattle
	b	.L27
.L29:
	.align	2, 0
.L28:
	.word	gBattleTypeFlags
.L11:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L13	@cond_branch
	ldr	r0, .L30
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x80
	lsl	r0, r0, #0x17
	str	r0, [r1, #0xc]
	b	.L12
.L31:
	.align	2, 0
.L30:
	.word	gBattleResources
.L13:
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L15	@cond_branch
	ldr	r0, .L32
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x80
	lsl	r0, r0, #0x16
	str	r0, [r1, #0xc]
	b	.L12
.L33:
	.align	2, 0
.L32:
	.word	gBattleResources
.L15:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L17	@cond_branch
	ldr	r0, .L34
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x80
	lsl	r0, r0, #0x18
	str	r0, [r1, #0xc]
	b	.L12
.L35:
	.align	2, 0
.L34:
	.word	gBattleResources
.L17:
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L19	@cond_branch
	bl	GetAiScriptsInBattleFactory
.L27:
	ldr	r1, .L36
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	str	r0, [r1, #0xc]
	b	.L12
.L37:
	.align	2, 0
.L36:
	.word	gBattleResources
.L19:
	ldr	r0, .L38
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L21	@cond_branch
	ldr	r0, .L38+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x7
	str	r0, [r1, #0xc]
	b	.L12
.L39:
	.align	2, 0
.L38:
	.word	0xc3f0900
	.word	gBattleResources
.L21:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L23	@cond_branch
	ldr	r0, .L40
	ldr	r0, [r0]
	ldr	r4, [r0, #0x14]
	ldr	r3, .L40+0x4
	ldr	r0, .L40+0x8
	ldrh	r0, [r0]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r3, r3, #0x1c
	add	r1, r1, r3
	ldr	r0, .L40+0xc
	ldrh	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldr	r1, [r1]
	ldr	r0, [r0]
	orr	r1, r1, r0
	str	r1, [r4, #0xc]
	b	.L12
.L41:
	.align	2, 0
.L40:
	.word	gBattleResources
	.word	gTrainers
	.word	gTrainerBattleOpponent_A
	.word	gTrainerBattleOpponent_B
.L23:
	ldr	r0, .L42
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L42+0x4
	ldr	r0, .L42+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [r3, #0xc]
.L12:
	ldr	r0, .L42+0xc
	ldr	r0, [r0]
	ldr	r1, .L42+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L26	@cond_branch
	ldr	r2, .L42+0x4
	ldr	r0, .L42+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x18]
	cmp	r0, #0
	bne	.L26	@cond_branch
	ldr	r0, .L42+0x14
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L25	@cond_branch
	cmp	r5, #0x1
	bls	.L25	@cond_branch
.L26:
	ldr	r0, .L42
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, [r2, #0xc]
	mov	r1, #0x80
	orr	r0, r0, r1
	str	r0, [r2, #0xc]
.L25:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	gBattleResources
	.word	gTrainers
	.word	gTrainerBattleOpponent_A
	.word	gBattleTypeFlags
	.word	0x8001
	.word	0x2a2
.Lfe2:
	.size	 BattleAI_SetupFlags,.Lfe2-BattleAI_SetupFlags
	.align	2, 0
	.globl	BattleAI_SetupAIData
	.type	 BattleAI_SetupAIData,function
	.thumb_func
BattleAI_SetupAIData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L72
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	ldr	r5, [r0, #0xc]
	mov	r2, #0xac
	lsl	r2, r2, #0x1
	mov	r1, #0x0
	bl	memset
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	str	r5, [r0, #0xc]
	mov	r5, #0x0
	mov	r2, #0x1
.L48:
	add	r1, r6, #0
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L49	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r5
	mov	r1, #0x64
	b	.L71
.L73:
	.align	2, 0
.L72:
	.word	gBattleResources
.L49:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r5
.L71:
	strb	r1, [r0]
	lsr	r6, r6, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L48	@cond_branch
	ldr	r0, .L74
	ldrb	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r4, .L74+0x4
	mov	r3, #0x0
	ldr	r1, .L74+0x8
.L55:
	ldr	r0, [r1]
	mov	r2, r8
	and	r0, r0, r2
	ldr	r2, .L74+0x4
	cmp	r0, #0
	beq	.L54	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r5
	strb	r3, [r0]
.L54:
	add	r1, r1, #0x4
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L55	@cond_branch
	ldr	r0, [r2]
	ldr	r0, [r0, #0x1c]
	add	r0, r0, #0x20
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r3, .L74+0xc
	ldr	r0, .L74
	ldrb	r0, [r0]
	strb	r0, [r3]
	ldr	r0, .L74+0x10
	strb	r1, [r0]
	ldr	r2, .L74+0x14
	ldrb	r2, [r2]
	cmp	r1, r2
	bcs	.L59	@cond_branch
	ldr	r0, .L74+0x18
	mov	sl, r0
	ldr	r7, .L74+0x10
.L61:
	ldr	r1, .L74+0xc
	ldrb	r0, [r1]
	add	r0, r0, sl
	ldrb	r3, [r0]
	mov	r1, #0x1
	ldr	r2, .L74+0x10
	ldrb	r0, [r2]
	add	r0, r0, sl
	ldrb	r2, [r0]
	add	r0, r1, #0
	and	r0, r0, r3
	and	r1, r1, r2
	cmp	r0, r1
	beq	.L60	@cond_branch
	mov	r5, #0x0
	ldr	r0, .L74+0x1c
	mov	r9, r0
	mov	r6, #0x0
.L66:
	mov	r4, #0x0
	lsl	r1, r5, #0x1
	ldr	r0, .L74+0xc
	ldrb	r3, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, r9
	ldrh	r2, [r1]
	ldr	r1, .L74+0x20
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L67	@cond_branch
	ldr	r0, .L74+0x8
	add	r0, r6, r0
	ldr	r0, [r0]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L67	@cond_branch
	add	r0, r2, #0
	ldrb	r2, [r7]
	add	r1, r3, #0
	bl	AI_CalcDamage
	add	r4, r0, #0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	sub	r1, r1, r0
	mov	r0, r4
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L67	@cond_branch
	mov	r4, #0x1
.L67:
	ldr	r0, .L74+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r6, r1
	ldr	r0, .L74+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x14
	add	r2, r2, r1
	str	r4, [r2]
	add	r6, r6, #0x4
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L66	@cond_branch
.L60:
	ldrb	r0, [r7]
	add	r0, r0, #0x1
	strb	r0, [r7]
	ldr	r1, .L74+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L61	@cond_branch
.L59:
	ldr	r2, .L74+0xc
	ldrb	r0, [r2]
	bl	SetRandomTarget
	ldr	r1, .L74+0x10
	strb	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBitTable
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattlerPositions
	.word	gBattleMons+0xc
	.word	gBattleMoves
.Lfe3:
	.size	 BattleAI_SetupAIData,.Lfe3-BattleAI_SetupAIData
	.align	2, 0
	.globl	BattleAI_ChooseMoveOrAction
	.type	 BattleAI_ChooseMoveOrAction,function
	.thumb_func
BattleAI_ChooseMoveOrAction:
	push	{r4, lr}
	ldr	r0, .L80
	ldrh	r4, [r0]
	ldr	r0, .L80+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L77	@cond_branch
	bl	ChooseMoveOrAction_Singles
	b	.L79
.L81:
	.align	2, 0
.L80:
	.word	gCurrentMove
	.word	gBattleTypeFlags
.L77:
	bl	ChooseMoveOrAction_Doubles
.L79:
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L82
	strh	r4, [r0]
	add	r0, r1, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L83:
	.align	2, 0
.L82:
	.word	gCurrentMove
.Lfe4:
	.size	 BattleAI_ChooseMoveOrAction,.Lfe4-BattleAI_ChooseMoveOrAction
	.align	2, 0
	.type	 GetTotalBaseStat,function
	.thumb_func
GetTotalBaseStat:
	ldr	r2, .L85
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1]
	ldrb	r2, [r1, #0x1]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x2]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x3]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x4]
	add	r0, r0, r2
	ldrb	r1, [r1, #0x5]
	add	r0, r0, r1
	bx	lr
.L86:
	.align	2, 0
.L85:
	.word	gBaseStats
.Lfe5:
	.size	 GetTotalBaseStat,.Lfe5-GetTotalBaseStat
	.align	2, 0
	.globl	IsTruantMonVulnerable
	.type	 IsTruantMonVulnerable,function
	.thumb_func
IsTruantMonVulnerable:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r1, #0
	mov	r4, #0x0
	ldr	r6, .L97
	mov	r8, r6
	lsl	r7, r0, #0x18
.L91:
	ldr	r0, .L97+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x18]
	lsl	r0, r4, #0x1
	lsl	r1, r5, #0x4
	add	r0, r0, r1
	add	r2, r2, r0
	ldrh	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r0, [r0]
	cmp	r0, #0x6f
	bne	.L92	@cond_branch
	cmp	r1, #0xcb
	bne	.L96	@cond_branch
.L92:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0]
	cmp	r0, #0x9b
	bne	.L90	@cond_branch
	lsl	r1, r5, #0x18
	lsr	r0, r7, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x1
	bl	GetWhoStrikesFirst
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L90	@cond_branch
.L96:
	mov	r0, #0x1
	b	.L95
.L98:
	.align	2, 0
.L97:
	.word	gBattleMoves
	.word	gBattleResources
.L90:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L91	@cond_branch
	mov	r0, #0x0
.L95:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 IsTruantMonVulnerable,.Lfe6-IsTruantMonVulnerable
	.align	2, 0
	.type	 ChooseMoveOrAction_Singles,function
	.thumb_func
ChooseMoveOrAction_Singles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r5, .L135
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	ldr	r4, [r0, #0xc]
	bl	RecordLastUsedMoveByTarget
	cmp	r4, #0
	beq	.L101	@cond_branch
	mov	r6, #0x0
.L102:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L103	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0]
	bl	BattleAI_DoAIProcessing
.L103:
	lsr	r4, r4, #0x1
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1, #0x11]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0, #0x1]
	cmp	r4, #0
	bne	.L102	@cond_branch
.L101:
	mov	r4, #0x0
	ldr	r0, .L135
	mov	r8, r0
	ldr	r1, .L135+0x4
	mov	r9, r1
	ldr	r7, .L135+0x8
	ldr	r6, .L135+0xc
	mov	r5, r9
	mov	r3, #0xbf
	lsl	r3, r3, #0x2
.L108:
	ldr	r2, [r7]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r2, r2, r3
	add	r2, r2, r1
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L108	@cond_branch
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L110	@cond_branch
	mov	r0, #0x4
	b	.L133
.L136:
	.align	2, 0
.L135:
	.word	gBattleResources
	.word	sBattler_AI
	.word	gBattleStruct
	.word	gBattlerTarget
.L110:
	mov	r7, #0x4
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L111	@cond_branch
	mov	r0, #0x5
	b	.L133
.L111:
	ldr	r5, .L137
	mov	r2, r9
	ldrb	r0, [r2]
	strb	r0, [r5]
	ldrb	r0, [r2]
	bl	CountUsablePartyMons
	cmp	r0, #0
	bgt	.LCB844
	b	.L112	@long jump
.LCB844:
	mov	r1, r9
	ldrb	r0, [r1]
	bl	IsAbilityPreventingEscape
	cmp	r0, #0
	beq	.LCB851
	b	.L112	@long jump
.LCB851:
	ldr	r6, .L137+0x4
	ldrb	r2, [r5]
	mov	r4, #0x5c
	mov	r0, r2
	mul	r0, r0, r4
	add	r1, r6, #0
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L137+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB863
	b	.L112	@long jump
.LCB863:
	ldr	r1, .L137+0xc
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB872
	b	.L112	@long jump
.LCB872:
	ldr	r0, .L137+0x10
	ldr	r0, [r0]
	mov	r1, #0xc0
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB879
	b	.L112	@long jump
.LCB879:
	mov	r2, r8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x47
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB887
	b	.L112	@long jump
.LCB887:
	mov	r1, r9
	ldrb	r0, [r1]
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	bl	GetTotalBaseStat
	ldr	r1, .L137+0x14
	cmp	r0, r1
	bls	.L113	@cond_branch
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r1, [r0, #0x2e]
	ldrh	r0, [r0, #0x2a]
	lsr	r1, r1, #0x1
	cmp	r0, r1
	bcc	.L113	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r1, [r0, #0x14]
	ldr	r0, [r1, #0xc]
	and	r0, r0, r7
	mov	r2, #0x5d
	cmp	r0, #0
	beq	.L114	@cond_branch
	mov	r2, #0x5f
.L114:
	mov	r4, #0x0
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	cmp	r0, r2
	bgt	.L117	@cond_branch
	mov	r3, r8
.L118:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L117	@cond_branch
	ldr	r0, [r3]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r4
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, r2
	ble	.L118	@cond_branch
.L117:
	cmp	r4, #0x4
	bne	.L113	@cond_branch
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	beq	.L113	@cond_branch
	ldr	r0, .L137+0x18
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	mov	r2, #0xaa
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	b	.L134
.L138:
	.align	2, 0
.L137:
	.word	gActiveBattler
	.word	gBattleMons
	.word	0x4002000
	.word	gStatuses3
	.word	gBattleTypeFlags
	.word	0x135
	.word	gBattleResources
.L113:
	ldr	r4, .L139
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x36
	bne	.L112	@cond_branch
	ldrb	r0, [r4]
	ldr	r1, .L139+0x4
	ldrb	r1, [r1]
	bl	IsTruantMonVulnerable
	cmp	r0, #0
	beq	.L112	@cond_branch
	ldr	r0, .L139+0x8
	ldrb	r4, [r4]
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1a]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L112	@cond_branch
	ldr	r1, .L139+0xc
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2e]
	ldrh	r0, [r0, #0x2a]
	lsr	r1, r1, #0x1
	cmp	r0, r1
	bcc	.L112	@cond_branch
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	beq	.L112	@cond_branch
	ldr	r0, .L139+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	mov	r1, #0xaa
	lsl	r1, r1, #0x1
	add	r0, r0, r1
.L134:
	mov	r1, #0x1
	strb	r1, [r0]
	mov	r0, #0x7
	b	.L133
.L140:
	.align	2, 0
.L139:
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gDisableStructs
	.word	gBattleMons
	.word	gBattleResources
.L112:
	mov	r6, #0x1
	mov	r2, sp
	ldr	r3, .L141
	ldr	r0, [r3]
	ldr	r0, [r0, #0x14]
	ldrb	r0, [r0, #0x4]
	mov	r1, #0x0
	strb	r0, [r2]
	add	r0, sp, #0x4
	strb	r1, [r0]
	mov	r4, #0x1
	mov	r8, r3
	ldr	r2, .L141+0x4
	mov	sl, r0
	ldr	r1, .L141+0x8
	ldrb	r2, [r2]
	mov	r5, sp
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r3, r1, #0
	add	r3, r3, #0xe
	mov	r7, sl
.L128:
	ldrh	r0, [r3]
	cmp	r0, #0
	beq	.L127	@cond_branch
	ldrb	r1, [r5]
	mov	r2, r8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r4
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bne	.L130	@cond_branch
	mov	r1, sp
	add	r0, r1, r6
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r0, r7, r6
	strb	r4, [r0]
	add	r6, r6, #0x1
.L130:
	ldrb	r1, [r5]
	mov	r2, r8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r4
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bge	.L127	@cond_branch
	mov	r6, #0x1
	ldrb	r0, [r2]
	strb	r0, [r5]
	strb	r4, [r7]
.L127:
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L128	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	__umodsi3
	add	r0, r0, sl
	ldrb	r0, [r0]
.L133:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L142:
	.align	2, 0
.L141:
	.word	gBattleResources
	.word	sBattler_AI
	.word	gBattleMons
.Lfe7:
	.size	 ChooseMoveOrAction_Singles,.Lfe7-ChooseMoveOrAction_Singles
	.align	2, 0
	.type	 ChooseMoveOrAction_Doubles,function
	.thumb_func
ChooseMoveOrAction_Doubles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	mov	r0, #0x0
	mov	r8, r0
	ldr	r7, .L185
	mov	r1, sp
	add	r1, r1, #0xc
	str	r1, [sp, #0x1c]
	mov	r2, sp
	add	r2, r2, #0x8
	str	r2, [sp, #0x18]
	str	r1, [sp, #0x20]
	mov	r9, sp
.L147:
	ldrb	r0, [r7]
	cmp	r8, r0
	beq	.L149	@cond_branch
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r2, .L185+0x4
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L148	@cond_branch
.L149:
	mov	r0, #0xff
	ldr	r1, [sp, #0x20]
	strb	r0, [r1]
	ldr	r0, .L185+0x8
	mov	r2, r9
	strh	r0, [r2]
	b	.L146
.L186:
	.align	2, 0
.L185:
	.word	sBattler_AI
	.word	gBattleMons
	.word	0xffff
.L148:
	ldr	r0, .L187
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L151	@cond_branch
	ldr	r0, .L187+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x8b
	ldrb	r0, [r0]
	lsr	r0, r0, #0x4
	bl	BattleAI_SetupAIData
	b	.L152
.L188:
	.align	2, 0
.L187:
	.word	gBattleTypeFlags
	.word	gBattleStruct
.L151:
	mov	r0, #0xf
	bl	BattleAI_SetupAIData
.L152:
	ldr	r0, .L189
	mov	r7, r8
	strb	r7, [r0]
	mov	r1, #0x1
	mov	r2, r8
	and	r2, r2, r1
	ldr	r0, .L189+0x4
	ldrb	r0, [r0]
	and	r1, r1, r0
	cmp	r2, r1
	beq	.L153	@cond_branch
	bl	RecordLastUsedMoveByTarget
.L153:
	ldr	r2, .L189+0x8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	mov	r1, #0x0
	strb	r1, [r0, #0x11]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	strb	r1, [r0, #0x1]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	ldr	r4, [r0, #0xc]
	cmp	r4, #0
	beq	.L155	@cond_branch
	add	r5, r2, #0
	mov	r6, #0x0
.L156:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L157	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0]
	bl	BattleAI_DoAIProcessing
.L157:
	lsr	r4, r4, #0x1
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1, #0x11]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0, #0x1]
	cmp	r4, #0
	bne	.L156	@cond_branch
.L155:
	ldr	r1, .L189+0x8
	ldr	r0, [r1]
	ldr	r3, [r0, #0x14]
	ldrb	r1, [r3, #0x10]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L159	@cond_branch
	mov	r0, #0x4
	ldr	r2, [sp, #0x20]
	strb	r0, [r2]
	b	.L160
.L190:
	.align	2, 0
.L189:
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleResources
.L159:
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L161	@cond_branch
	mov	r0, #0x5
	ldr	r7, [sp, #0x20]
	strb	r0, [r7]
	b	.L160
.L161:
	add	r1, sp, #0x10
	ldrb	r0, [r3, #0x4]
	strb	r0, [r1]
	add	r0, sp, #0x14
	strb	r2, [r0]
	mov	r5, #0x1
	mov	r3, #0x1
	ldr	r7, .L191
	add	r6, r1, #0
	mov	sl, r0
	ldrb	r1, [r7]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r1, .L191+0x4
	add	r0, r0, r1
	add	r4, r0, #0x2
	mov	r7, sl
.L166:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L165	@cond_branch
	ldrb	r1, [r6]
	ldr	r2, .L191+0x8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bne	.L168	@cond_branch
	add	r0, r6, r5
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r0, r7, r5
	strb	r3, [r0]
	add	r5, r5, #0x1
.L168:
	ldrb	r1, [r6]
	ldr	r2, .L191+0x8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bge	.L165	@cond_branch
	ldrb	r0, [r2]
	strb	r0, [r6]
	strb	r3, [r7]
	mov	r5, #0x1
.L165:
	add	r4, r4, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L166	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	bl	__modsi3
	add	r0, r0, sl
	ldrb	r0, [r0]
	ldr	r7, [sp, #0x20]
	strb	r0, [r7]
	ldrb	r2, [r6]
	mov	r0, r9
	strh	r2, [r0]
	ldr	r0, .L191
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	cmp	r8, r0
	bne	.L160	@cond_branch
	cmp	r2, #0x63
	bgt	.L160	@cond_branch
	ldr	r0, .L191+0xc
	mov	r1, r9
	strh	r0, [r1]
.L160:
	mov	r3, #0x0
	ldr	r7, .L191
	ldr	r5, .L191+0x10
	ldr	r4, .L191+0x14
.L175:
	ldr	r2, [r5]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r3, r1
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	mov	r0, #0xbf
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, r1
	ldr	r1, .L191+0x8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r3
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L175	@cond_branch
.L146:
	ldr	r2, [sp, #0x20]
	add	r2, r2, #0x1
	str	r2, [sp, #0x20]
	mov	r0, #0x2
	add	r9, r9, r0
	mov	r1, #0x1
	add	r8, r8, r1
	mov	r2, r8
	cmp	r2, #0x3
	bgt	.LCB1532
	b	.L147	@long jump
.LCB1532:
	mov	r0, sp
	ldrh	r5, [r0]
	mov	r0, #0x0
	ldr	r7, [sp, #0x18]
	strb	r0, [r7]
	mov	r4, #0x1
	mov	r8, r4
	ldr	r6, .L191+0x14
	ldr	r3, [sp, #0x18]
	mov	r1, sp
	add	r1, r1, #0x2
.L181:
	lsl	r0, r5, #0x10
	asr	r2, r0, #0x10
	mov	r7, #0x0
	ldrsh	r0, [r1, r7]
	cmp	r2, r0
	bne	.L182	@cond_branch
	add	r0, r3, r4
	mov	r7, r8
	strb	r7, [r0]
	add	r4, r4, #0x1
.L182:
	mov	r7, #0x0
	ldrsh	r0, [r1, r7]
	cmp	r2, r0
	bge	.L180	@cond_branch
	ldrh	r5, [r1]
	mov	r0, r8
	strb	r0, [r3]
	mov	r4, #0x1
.L180:
	add	r1, r1, #0x2
	mov	r2, #0x1
	add	r8, r8, r2
	mov	r7, r8
	cmp	r7, #0x3
	ble	.L181	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	__modsi3
	ldr	r1, [sp, #0x18]
	add	r0, r1, r0
	ldrb	r0, [r0]
	strb	r0, [r6]
	ldrb	r0, [r6]
	ldr	r2, [sp, #0x1c]
	add	r0, r2, r0
	ldrb	r0, [r0]
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L192:
	.align	2, 0
.L191:
	.word	sBattler_AI
	.word	gBattleMons+0xc
	.word	gBattleResources
	.word	0xffff
	.word	gBattleStruct
	.word	gBattlerTarget
.Lfe8:
	.size	 ChooseMoveOrAction_Doubles,.Lfe8-ChooseMoveOrAction_Doubles
	.align	2, 0
	.type	 BattleAI_DoAIProcessing,function
	.thumb_func
BattleAI_DoAIProcessing:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r7, .L213
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	ldrb	r0, [r0]
	add	r6, r7, #0
	cmp	r0, #0x2
	bne	.LCB1649
	b	.L195	@long jump
.LCB1649:
	mov	r9, r7
	ldr	r0, .L213+0x4
	mov	r8, r0
.L196:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, [r0, #0x14]
	ldrb	r0, [r2]
	cmp	r0, #0x1
	beq	.L202	@cond_branch
	cmp	r0, #0x1
	bgt	.L194	@cond_branch
	cmp	r0, #0
	bne	.L194	@cond_branch
	ldr	r1, .L213+0x8
	ldrb	r0, [r2, #0x11]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, r8
	str	r0, [r1]
	ldr	r5, .L213+0xc
	ldrb	r4, [r2, #0x1]
	ldr	r0, .L213+0x10
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r4, r3
	add	r1, r5, #0
	add	r1, r1, #0x25
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L212	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r3
	add	r1, r5, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
.L212:
	strh	r0, [r2, #0x2]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L194
.L214:
	.align	2, 0
.L213:
	.word	gBattleResources
	.word	gAIScriptPtr
	.word	gBattleAI_ScriptsTable
	.word	gBattleMons
	.word	sBattler_AI
.L202:
	ldrh	r1, [r2, #0x2]
	cmp	r1, #0
	beq	.L203	@cond_branch
	ldr	r1, .L215
	mov	r2, r8
	ldr	r0, [r2]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	b	.L204
.L216:
	.align	2, 0
.L215:
	.word	sBattleAICmdTable
.L203:
	add	r0, r2, #0x4
	ldrb	r2, [r2, #0x1]
	add	r0, r0, r2
	strb	r1, [r0]
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
.L204:
	ldr	r2, .L217
	ldr	r0, [r2]
	ldr	r3, [r0, #0x14]
	ldrb	r1, [r3, #0x10]
	mov	r0, #0x1
	and	r0, r0, r1
	add	r6, r2, #0
	cmp	r0, #0
	beq	.L194	@cond_branch
	ldrb	r0, [r3, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r3, #0x1]
	ldr	r0, [r6]
	ldr	r2, [r0, #0x14]
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x3
	bhi	.L206	@cond_branch
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x8
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L206	@cond_branch
	strb	r0, [r2]
	b	.L207
.L218:
	.align	2, 0
.L217:
	.word	gBattleResources
.L206:
	ldr	r0, [r6]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L207:
	ldr	r0, [r6]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xfe
	and	r0, r0, r1
	strb	r0, [r2, #0x10]
.L194:
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.LCB1821
	b	.L196	@long jump
.LCB1821:
.L195:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 BattleAI_DoAIProcessing,.Lfe9-BattleAI_DoAIProcessing
	.align	2, 0
	.type	 RecordLastUsedMoveByTarget,function
	.thumb_func
RecordLastUsedMoveByTarget:
	push	{lr}
	ldr	r0, .L220
	ldrb	r0, [r0]
	ldr	r2, .L220+0x4
	lsl	r1, r0, #0x1
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	RecordKnownMove
	pop	{r0}
	bx	r0
.L221:
	.align	2, 0
.L220:
	.word	gBattlerTarget
	.word	gLastMoves
.Lfe10:
	.size	 RecordLastUsedMoveByTarget,.Lfe10-RecordLastUsedMoveByTarget
	.align	2, 0
	.globl	IsBattlerAIControlled
	.type	 IsBattlerAIControlled,function
	.thumb_func
IsBattlerAIControlled:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L228	@cond_branch
	cmp	r0, #0x1
	ble	.L225	@cond_branch
	cmp	r0, #0x2
	beq	.L227	@cond_branch
	cmp	r0, #0x3
	beq	.L228	@cond_branch
.L225:
	mov	r0, #0x0
	b	.L231
.L227:
	ldr	r0, .L232
	ldr	r0, [r0]
	lsr	r0, r0, #0x16
	mov	r1, #0x1
	and	r0, r0, r1
	b	.L231
.L233:
	.align	2, 0
.L232:
	.word	gBattleTypeFlags
.L228:
	mov	r0, #0x1
.L231:
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 IsBattlerAIControlled,.Lfe11-IsBattlerAIControlled
	.align	2, 0
	.globl	ClearBattlerMoveHistory
	.type	 ClearBattlerMoveHistory,function
	.thumb_func
ClearBattlerMoveHistory:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	ldr	r5, .L235
	ldr	r0, [r5]
	ldr	r0, [r0, #0x18]
	lsr	r4, r4, #0x14
	add	r0, r4, r0
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	ldr	r0, [r5]
	ldr	r0, [r0, #0x18]
	add	r0, r4, r0
	add	r0, r0, #0x8
	mov	r1, #0x0
	mov	r2, #0x6
	bl	memset
	ldr	r0, [r5]
	ldr	r0, [r0, #0x18]
	add	r0, r0, r4
	mov	r1, #0x0
	strb	r1, [r0, #0xe]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L236:
	.align	2, 0
.L235:
	.word	gBattleResources
.Lfe12:
	.size	 ClearBattlerMoveHistory,.Lfe12-ClearBattlerMoveHistory
	.align	2, 0
	.globl	RecordLastUsedMoveBy
	.type	 RecordLastUsedMoveBy,function
	.thumb_func
RecordLastUsedMoveBy:
	push	{r4, r5, lr}
	add	r5, r1, #0
	ldr	r4, .L239
	ldr	r1, [r4]
	lsl	r3, r0, #0x4
	ldr	r0, [r1, #0x18]
	add	r2, r0, r3
	ldrb	r0, [r2, #0xe]
	add	r0, r0, #0x1
	strb	r0, [r2, #0xe]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bls	.L238	@cond_branch
	mov	r0, #0x0
	strb	r0, [r2, #0xe]
.L238:
	ldr	r0, [r4]
	ldr	r1, [r0, #0x18]
	ldrb	r0, [r2, #0xe]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	add	r1, r1, #0x8
	add	r1, r1, r0
	strh	r5, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L240:
	.align	2, 0
.L239:
	.word	gBattleResources
.Lfe13:
	.size	 RecordLastUsedMoveBy,.Lfe13-RecordLastUsedMoveBy
	.align	2, 0
	.globl	RecordKnownMove
	.type	 RecordKnownMove,function
	.thumb_func
RecordKnownMove:
	push	{r4, r5, r6, r7, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	mov	r7, #0x0
	ldr	r2, .L249
	ldr	r1, [r2]
	ldr	r1, [r1, #0x18]
	lsr	r3, r0, #0x14
	add	r1, r1, r3
	ldrh	r0, [r1]
	cmp	r0, r6
	beq	.L243	@cond_branch
	mov	ip, r2
	mov	r5, #0x0
.L246:
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r4, [r0, #0x18]
	add	r1, r3, #0
	add	r0, r5, r1
	add	r2, r4, r0
	ldrh	r0, [r2]
	cmp	r0, #0
	bne	.L244	@cond_branch
	strh	r6, [r2]
	b	.L243
.L250:
	.align	2, 0
.L249:
	.word	gBattleResources
.L244:
	add	r5, r5, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bgt	.L243	@cond_branch
	add	r0, r5, r1
	add	r0, r4, r0
	ldrh	r0, [r0]
	cmp	r0, r6
	bne	.L246	@cond_branch
.L243:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 RecordKnownMove,.Lfe14-RecordKnownMove
	.align	2, 0
	.globl	RecordAbilityBattle
	.type	 RecordAbilityBattle,function
	.thumb_func
RecordAbilityBattle:
	lsl	r0, r0, #0x18
	ldr	r2, .L252
	ldr	r2, [r2]
	ldr	r2, [r2, #0x18]
	lsr	r0, r0, #0x17
	add	r2, r2, #0x40
	add	r2, r2, r0
	strh	r1, [r2]
	bx	lr
.L253:
	.align	2, 0
.L252:
	.word	gBattleResources
.Lfe15:
	.size	 RecordAbilityBattle,.Lfe15-RecordAbilityBattle
	.align	2, 0
	.globl	ClearBattlerAbilityHistory
	.type	 ClearBattlerAbilityHistory,function
	.thumb_func
ClearBattlerAbilityHistory:
	lsl	r0, r0, #0x18
	ldr	r1, .L255
	ldr	r1, [r1]
	ldr	r1, [r1, #0x18]
	lsr	r0, r0, #0x17
	add	r1, r1, #0x40
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1]
	bx	lr
.L256:
	.align	2, 0
.L255:
	.word	gBattleResources
.Lfe16:
	.size	 ClearBattlerAbilityHistory,.Lfe16-ClearBattlerAbilityHistory
	.align	2, 0
	.globl	RecordItemEffectBattle
	.type	 RecordItemEffectBattle,function
	.thumb_func
RecordItemEffectBattle:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L258
	ldr	r2, [r2]
	ldr	r2, [r2, #0x18]
	add	r2, r2, #0x48
	add	r2, r2, r0
	strb	r1, [r2]
	bx	lr
.L259:
	.align	2, 0
.L258:
	.word	gBattleResources
.Lfe17:
	.size	 RecordItemEffectBattle,.Lfe17-RecordItemEffectBattle
	.align	2, 0
	.globl	ClearBattlerItemEffectHistory
	.type	 ClearBattlerItemEffectHistory,function
	.thumb_func
ClearBattlerItemEffectHistory:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L261
	ldr	r1, [r1]
	ldr	r1, [r1, #0x18]
	add	r1, r1, #0x48
	add	r1, r1, r0
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L262:
	.align	2, 0
.L261:
	.word	gBattleResources
.Lfe18:
	.size	 ClearBattlerItemEffectHistory,.Lfe18-ClearBattlerItemEffectHistory
	.align	2, 0
	.type	 SaveBattlerData,function
	.thumb_func
SaveBattlerData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L264	@cond_branch
	ldr	r0, .L270
	mov	r8, r0
	ldr	r3, [r0]
	ldr	r1, [r3, #0x14]
	lsl	r5, r6, #0x4
	add	r1, r1, r5
	ldr	r4, .L270+0x4
	mov	r0, #0x5c
	mul	r6, r6, r0
	add	r2, r6, r4
	ldrh	r0, [r2, #0x20]
	mov	r7, #0x8a
	lsl	r7, r7, #0x1
	add	r1, r1, r7
	strh	r0, [r1]
	ldr	r0, [r3, #0x14]
	add	r0, r0, r5
	ldrh	r1, [r2, #0x30]
	add	r7, r7, #0xa
	add	r0, r0, r7
	strh	r1, [r0]
	ldr	r1, [r3, #0x14]
	add	r1, r1, r5
	ldrh	r0, [r2]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	strh	r0, [r1]
	mov	r2, #0x0
	mov	r7, r8
	mov	r3, #0x8b
	lsl	r3, r3, #0x1
	add	r4, r4, #0xc
	add	r6, r6, r4
.L268:
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	add	r0, r0, r3
	add	r0, r0, r5
	ldrh	r1, [r6]
	strh	r1, [r0]
	add	r6, r6, #0x2
	add	r5, r5, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bls	.L268	@cond_branch
.L264:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L271:
	.align	2, 0
.L270:
	.word	gBattleResources
	.word	gBattleMons
.Lfe19:
	.size	 SaveBattlerData,.Lfe19-SaveBattlerData
	.align	2, 0
	.type	 SetBattlerData,function
	.thumb_func
SetBattlerData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L273	@cond_branch
	ldr	r2, .L287
	ldr	r0, [r2]
	ldr	r0, [r0, #0x18]
	lsl	r1, r4, #0x1
	add	r0, r0, #0x40
	add	r0, r0, r1
	ldrh	r3, [r0]
	add	r7, r3, #0
	mov	ip, r2
	cmp	r7, #0
	beq	.L274	@cond_branch
	ldr	r1, .L287+0x4
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	strh	r3, [r0, #0x20]
	mov	r8, r1
	b	.L275
.L288:
	.align	2, 0
.L287:
	.word	gBattleResources
	.word	gBattleMons
.L274:
	ldr	r6, .L289
	ldr	r2, .L289+0x4
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r5, r0, r2
	ldrh	r0, [r5]
	lsl	r3, r0, #0x15
	lsr	r1, r3, #0x15
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0, #0x1a]
	mov	r8, r2
	cmp	r0, #0
	beq	.L277	@cond_branch
	add	r0, r1, #0
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	add	r2, r0, #0
	lsl	r0, r2, #0x3
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r1, [r1, #0x1a]
	ldrh	r0, [r0, #0x18]
	cmp	r1, r0
	bne	.L276	@cond_branch
.L277:
	lsr	r0, r3, #0x15
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r1, #0x18]
	strh	r0, [r5, #0x20]
	b	.L275
.L290:
	.align	2, 0
.L289:
	.word	gBaseStats
	.word	gBattleMons
.L276:
	strh	r7, [r5, #0x20]
.L275:
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x48
	add	r0, r0, r4
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L279	@cond_branch
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r8
	strh	r1, [r0, #0x30]
.L279:
	mov	r2, #0x0
	mov	r5, ip
	ldr	r0, .L291
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r0, r0, #0xc
	add	r1, r1, r0
	lsl	r3, r4, #0x4
.L283:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x18]
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L282	@cond_branch
	strh	r0, [r1]
.L282:
	add	r1, r1, #0x2
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bls	.L283	@cond_branch
	add	r0, r4, #0
	bl	GetIllusionMonPtr
	cmp	r0, #0
	beq	.L273	@cond_branch
	mov	r1, #0x41
	bl	GetMonData
	ldr	r3, .L291
	mov	r1, #0x5c
	mov	r2, r4
	mul	r2, r2, r1
	add	r2, r2, r3
	ldr	r3, .L291+0x4
	add	r1, r3, #0
	and	r0, r0, r1
	ldrh	r3, [r2]
	ldr	r1, .L291+0x8
	and	r1, r1, r3
	orr	r1, r1, r0
	strh	r1, [r2]
.L273:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L292:
	.align	2, 0
.L291:
	.word	gBattleMons
	.word	0x7ff
	.word	-0x800
.Lfe20:
	.size	 SetBattlerData,.Lfe20-SetBattlerData
	.align	2, 0
	.type	 RestoreBattlerData,function
	.thumb_func
RestoreBattlerData:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L294	@cond_branch
	ldr	r5, .L300
	mov	r0, #0x5c
	mov	r1, r4
	mul	r1, r1, r0
	mov	r8, r1
	add	r3, r1, r5
	ldr	r6, .L300+0x4
	ldr	r1, [r6]
	ldr	r0, [r1, #0x14]
	lsl	r4, r4, #0x4
	add	r0, r0, r4
	mov	r2, #0x8a
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r3, #0x20]
	ldr	r0, [r1, #0x14]
	add	r0, r0, r4
	add	r2, r2, #0xa
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r3, #0x30]
	ldr	r0, [r1, #0x14]
	add	r0, r0, r4
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldr	r1, .L300+0x8
	and	r1, r1, r0
	ldrh	r2, [r3]
	ldr	r0, .L300+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3]
	mov	r2, #0x0
	add	r5, r5, #0xc
	mov	r0, r8
	add	r1, r0, r5
	mov	r3, #0x8b
	lsl	r3, r3, #0x1
.L298:
	ldr	r0, [r6]
	ldr	r0, [r0, #0x14]
	add	r0, r0, r3
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	add	r4, r4, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bls	.L298	@cond_branch
.L294:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L301:
	.align	2, 0
.L300:
	.word	gBattleMons
	.word	gBattleResources
	.word	0x7ff
	.word	-0x800
.Lfe21:
	.size	 RestoreBattlerData,.Lfe21-RestoreBattlerData
	.align	2, 0
	.type	 AI_GetIfCrit,function
	.thumb_func
AI_GetIfCrit:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	add	r1, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r4, #0
	mov	r3, #0x0
	bl	CalcCritChanceStage
	add	r0, r0, #0x2
	cmp	r0, #0x6
	bhi	.L313	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L320
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L321:
	.align	2, 0
.L320:
	.word	.L318
	.align	2, 0
	.align	2, 0
.L318:
	.word	.L317
	.word	.L313
	.word	.L313
	.word	.L307
	.word	.L310
	.word	.L317
	.word	.L317
.L307:
	ldr	r1, .L322
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L313	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x10
	mov	r2, #0x1
	cmp	r0, #0
	beq	.L303	@cond_branch
	b	.L313
.L323:
	.align	2, 0
.L322:
	.word	gBattleMoves
.L310:
	ldr	r1, .L324
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L319	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L313	@cond_branch
	b	.L317
.L325:
	.align	2, 0
.L324:
	.word	gBattleMoves
.L319:
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	mov	r2, #0x1
	cmp	r1, #0
	beq	.L303	@cond_branch
.L313:
	mov	r2, #0x0
	b	.L303
.L317:
	mov	r2, #0x1
.L303:
	add	r0, r2, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 AI_GetIfCrit,.Lfe22-AI_GetIfCrit
	.align	2, 0
	.globl	AI_CalcDamage
	.type	 AI_CalcDamage,function
	.thumb_func
AI_CalcDamage:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	add	r0, r5, #0
	bl	SaveBattlerData
	add	r0, r7, #0
	bl	SaveBattlerData
	add	r0, r5, #0
	bl	SetBattlerData
	add	r0, r7, #0
	bl	SetBattlerData
	ldr	r4, .L329
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x12]
	add	r0, r6, #0
	add	r1, r5, #0
	bl	SetTypeBeforeUsingMove
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L327	@cond_branch
	mov	r4, #0x3f
	and	r4, r4, r0
	b	.L328
.L330:
	.align	2, 0
.L329:
	.word	gBattleStruct
.L327:
	ldr	r1, .L331
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x3]
.L328:
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r7, #0
	bl	AI_GetIfCrit
	add	r3, r4, #0
	mov	r1, #0x0
	str	r1, [sp]
	str	r0, [sp, #0x4]
	str	r1, [sp, #0x8]
	str	r1, [sp, #0xc]
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r7, #0
	bl	CalculateMoveDamage
	add	r4, r0, #0
	add	r0, r5, #0
	bl	RestoreBattlerData
	add	r0, r7, #0
	bl	RestoreBattlerData
	add	r0, r4, #0
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L332:
	.align	2, 0
.L331:
	.word	gBattleMoves
.Lfe23:
	.size	 AI_CalcDamage,.Lfe23-AI_CalcDamage
	.align	2, 0
	.globl	AI_CalcPartyMonDamage
	.type	 AI_CalcPartyMonDamage,function
	.thumb_func
AI_CalcPartyMonDamage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	str	r3, [sp, #0x4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	mov	r0, #0xb8
	lsl	r0, r0, #0x1
	bl	Alloc
	add	r7, r0, #0
	add	r4, r7, #0
	mov	r5, #0x0
	mov	r0, #0x8a
	lsl	r0, r0, #0x1
	add	r6, r7, r0
	ldr	r0, .L344
	mov	r8, r0
.L337:
	mov	r0, r8
	add	r1, r5, r0
	add	r0, r4, #0
	mov	r2, #0x5c
	bl	memcpy
	add	r4, r4, #0x5c
	add	r5, r5, #0x5c
	cmp	r4, r6
	bls	.L337	@cond_branch
	mov	r0, #0x5c
	mov	r1, r9
	mul	r1, r1, r0
	ldr	r4, .L344
	add	r1, r1, r4
	ldr	r0, [sp, #0x4]
	bl	PokemonToBattleMon
	ldr	r0, [sp]
	mov	r1, r9
	mov	r2, sl
	bl	AI_CalcDamage
	mov	r8, r0
	add	r5, r7, #0
	mov	r0, #0x8a
	lsl	r0, r0, #0x1
	add	r6, r7, r0
.L342:
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x5c
	bl	memcpy
	add	r5, r5, #0x5c
	add	r4, r4, #0x5c
	cmp	r5, r6
	bls	.L342	@cond_branch
	add	r0, r7, #0
	bl	Free
	mov	r0, r8
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L345:
	.align	2, 0
.L344:
	.word	gBattleMons
.Lfe24:
	.size	 AI_CalcPartyMonDamage,.Lfe24-AI_CalcPartyMonDamage
	.align	2, 0
	.globl	AI_GetTypeEffectiveness
	.type	 AI_GetTypeEffectiveness,function
	.thumb_func
AI_GetTypeEffectiveness:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	add	r0, r5, #0
	bl	SaveBattlerData
	add	r0, r7, #0
	bl	SaveBattlerData
	add	r0, r5, #0
	bl	SetBattlerData
	add	r0, r7, #0
	bl	SetBattlerData
	ldr	r4, .L349
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x12]
	add	r0, r6, #0
	add	r1, r5, #0
	bl	SetTypeBeforeUsingMove
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L347	@cond_branch
	mov	r1, #0x3f
	and	r1, r1, r0
	b	.L348
.L350:
	.align	2, 0
.L349:
	.word	gBattleStruct
.L347:
	ldr	r1, .L351
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x3]
.L348:
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r6, #0
	add	r2, r5, #0
	add	r3, r7, #0
	bl	CalcTypeEffectivenessMultiplier
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	RestoreBattlerData
	add	r0, r7, #0
	bl	RestoreBattlerData
	add	r0, r4, #0
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L352:
	.align	2, 0
.L351:
	.word	gBattleMoves
.Lfe25:
	.size	 AI_GetTypeEffectiveness,.Lfe25-AI_GetTypeEffectiveness
	.align	2, 0
	.type	 Cmd_if_random_less_than,function
	.thumb_func
Cmd_if_random_less_than:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L356
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bcs	.L354	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L355
.L357:
	.align	2, 0
.L356:
	.word	gAIScriptPtr
.L354:
	add	r0, r2, #0x6
	str	r0, [r3]
.L355:
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 Cmd_if_random_less_than,.Lfe26-Cmd_if_random_less_than
	.align	2, 0
	.type	 Cmd_if_random_greater_than,function
	.thumb_func
Cmd_if_random_greater_than:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L361
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bls	.L359	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L360
.L362:
	.align	2, 0
.L361:
	.word	gAIScriptPtr
.L359:
	add	r0, r2, #0x6
	str	r0, [r3]
.L360:
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 Cmd_if_random_greater_than,.Lfe27-Cmd_if_random_greater_than
	.align	2, 0
	.type	 Cmd_if_random_equal,function
	.thumb_func
Cmd_if_random_equal:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L366
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bne	.L364	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L365
.L367:
	.align	2, 0
.L366:
	.word	gAIScriptPtr
.L364:
	add	r0, r2, #0x6
	str	r0, [r3]
.L365:
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 Cmd_if_random_equal,.Lfe28-Cmd_if_random_equal
	.align	2, 0
	.type	 Cmd_if_random_not_equal,function
	.thumb_func
Cmd_if_random_not_equal:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L371
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	beq	.L369	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L370
.L372:
	.align	2, 0
.L371:
	.word	gAIScriptPtr
.L369:
	add	r0, r2, #0x6
	str	r0, [r3]
.L370:
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 Cmd_if_random_not_equal,.Lfe29-Cmd_if_random_not_equal
	.align	2, 0
	.type	 Cmd_score,function
	.thumb_func
Cmd_score:
	push	{r4, lr}
	ldr	r2, .L375
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r1, r0, #0x4
	ldrb	r0, [r0, #0x1]
	add	r1, r1, r0
	ldr	r3, .L375+0x4
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x1]
	ldrb	r4, [r1]
	add	r0, r0, r4
	strb	r0, [r1]
	ldr	r0, [r2]
	ldr	r1, [r0, #0x14]
	add	r0, r1, #0x4
	ldrb	r1, [r1, #0x1]
	add	r1, r0, r1
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bge	.L374	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
.L374:
	ldr	r0, [r3]
	add	r0, r0, #0x2
	str	r0, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L376:
	.align	2, 0
.L375:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe30:
	.size	 Cmd_score,.Lfe30-Cmd_score
	.align	2, 0
	.type	 BattleAI_GetWantedBattler,function
	.thumb_func
BattleAI_GetWantedBattler:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L379	@cond_branch
	ldr	r0, .L389
	ldrb	r0, [r0]
	b	.L387
.L390:
	.align	2, 0
.L389:
	.word	sBattler_AI
.L379:
	cmp	r0, #0x1
	ble	.L381	@cond_branch
	cmp	r0, #0x2
	beq	.L383	@cond_branch
	cmp	r0, #0x3
	beq	.L382	@cond_branch
.L381:
	ldr	r0, .L391
	ldrb	r0, [r0]
	b	.L387
.L392:
	.align	2, 0
.L391:
	.word	gBattlerTarget
.L382:
	ldr	r0, .L393
	b	.L388
.L394:
	.align	2, 0
.L393:
	.word	sBattler_AI
.L383:
	ldr	r0, .L395
.L388:
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
.L387:
	pop	{r1}
	bx	r1
.L396:
	.align	2, 0
.L395:
	.word	gBattlerTarget
.Lfe31:
	.size	 BattleAI_GetWantedBattler,.Lfe31-BattleAI_GetWantedBattler
	.align	2, 0
	.type	 Cmd_if_hp_less_than,function
	.thumb_func
Cmd_if_hp_less_than:
	push	{r4, lr}
	ldr	r4, .L400
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L400+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x2a]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bcs	.L398	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L399
.L401:
	.align	2, 0
.L400:
	.word	gAIScriptPtr
	.word	gBattleMons
.L398:
	add	r0, r2, #0x7
	str	r0, [r4]
.L399:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 Cmd_if_hp_less_than,.Lfe32-Cmd_if_hp_less_than
	.align	2, 0
	.type	 Cmd_if_hp_more_than,function
	.thumb_func
Cmd_if_hp_more_than:
	push	{r4, lr}
	ldr	r4, .L405
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L405+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x2a]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bls	.L403	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L404
.L406:
	.align	2, 0
.L405:
	.word	gAIScriptPtr
	.word	gBattleMons
.L403:
	add	r0, r2, #0x7
	str	r0, [r4]
.L404:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 Cmd_if_hp_more_than,.Lfe33-Cmd_if_hp_more_than
	.align	2, 0
	.type	 Cmd_if_hp_equal,function
	.thumb_func
Cmd_if_hp_equal:
	push	{r4, lr}
	ldr	r4, .L410
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L410+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x2a]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bne	.L408	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L409
.L411:
	.align	2, 0
.L410:
	.word	gAIScriptPtr
	.word	gBattleMons
.L408:
	add	r0, r2, #0x7
	str	r0, [r4]
.L409:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 Cmd_if_hp_equal,.Lfe34-Cmd_if_hp_equal
	.align	2, 0
	.type	 Cmd_if_hp_not_equal,function
	.thumb_func
Cmd_if_hp_not_equal:
	push	{r4, lr}
	ldr	r4, .L415
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L415+0x4
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x2a]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	beq	.L413	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L414
.L416:
	.align	2, 0
.L415:
	.word	gAIScriptPtr
	.word	gBattleMons
.L413:
	add	r0, r2, #0x7
	str	r0, [r4]
.L414:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 Cmd_if_hp_not_equal,.Lfe35-Cmd_if_hp_not_equal
	.align	2, 0
	.type	 Cmd_if_status,function
	.thumb_func
Cmd_if_status:
	push	{r4, r5, lr}
	ldr	r5, .L420
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	ldr	r1, .L420+0x4
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L418	@cond_branch
	ldrb	r1, [r4, #0x6]
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L419
.L421:
	.align	2, 0
.L420:
	.word	gAIScriptPtr
	.word	gBattleMons
.L418:
	add	r0, r4, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L419:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 Cmd_if_status,.Lfe36-Cmd_if_status
	.align	2, 0
	.type	 Cmd_if_not_status,function
	.thumb_func
Cmd_if_not_status:
	push	{r4, r5, lr}
	ldr	r5, .L425
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	ldr	r1, .L425+0x4
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L423	@cond_branch
	ldrb	r1, [r4, #0x6]
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L424
.L426:
	.align	2, 0
.L425:
	.word	gAIScriptPtr
	.word	gBattleMons
.L423:
	add	r0, r4, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L424:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 Cmd_if_not_status,.Lfe37-Cmd_if_not_status
	.align	2, 0
	.type	 Cmd_if_status2,function
	.thumb_func
Cmd_if_status2:
	push	{r4, r5, lr}
	ldr	r5, .L430
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	ldr	r1, .L430+0x4
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L428	@cond_branch
	ldrb	r1, [r4, #0x6]
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L429
.L431:
	.align	2, 0
.L430:
	.word	gAIScriptPtr
	.word	gBattleMons
.L428:
	add	r0, r4, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L429:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 Cmd_if_status2,.Lfe38-Cmd_if_status2
	.align	2, 0
	.type	 Cmd_if_not_status2,function
	.thumb_func
Cmd_if_not_status2:
	push	{r4, r5, lr}
	ldr	r5, .L435
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	ldr	r1, .L435+0x4
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L433	@cond_branch
	ldrb	r1, [r4, #0x6]
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L434
.L436:
	.align	2, 0
.L435:
	.word	gAIScriptPtr
	.word	gBattleMons
.L433:
	add	r0, r4, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L434:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 Cmd_if_not_status2,.Lfe39-Cmd_if_not_status2
	.align	2, 0
	.type	 Cmd_if_status3,function
	.thumb_func
Cmd_if_status3:
	push	{r4, lr}
	ldr	r4, .L440
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	ldr	r3, [r4]
	ldrb	r2, [r3, #0x2]
	ldrb	r1, [r3, #0x3]
	lsl	r1, r1, #0x8
	orr	r2, r2, r1
	ldrb	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	ldrb	r1, [r3, #0x5]
	lsl	r1, r1, #0x18
	orr	r2, r2, r1
	ldr	r1, .L440+0x4
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L438	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L439
.L441:
	.align	2, 0
.L440:
	.word	gAIScriptPtr
	.word	gStatuses3
.L438:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r4]
.L439:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 Cmd_if_status3,.Lfe40-Cmd_if_status3
	.align	2, 0
	.type	 Cmd_if_not_status3,function
	.thumb_func
Cmd_if_not_status3:
	push	{r4, lr}
	ldr	r4, .L445
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	ldr	r3, [r4]
	ldrb	r2, [r3, #0x2]
	ldrb	r1, [r3, #0x3]
	lsl	r1, r1, #0x8
	orr	r2, r2, r1
	ldrb	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	ldrb	r1, [r3, #0x5]
	lsl	r1, r1, #0x18
	orr	r2, r2, r1
	ldr	r1, .L445+0x4
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L443	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L444
.L446:
	.align	2, 0
.L445:
	.word	gAIScriptPtr
	.word	gStatuses3
.L443:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r4]
.L444:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 Cmd_if_not_status3,.Lfe41-Cmd_if_not_status3
	.align	2, 0
	.type	 Cmd_if_side_affecting,function
	.thumb_func
Cmd_if_side_affecting:
	push	{r4, r5, lr}
	ldr	r5, .L450
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	orr	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	orr	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	orr	r4, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r0, .L450+0x4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L448	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L449
.L451:
	.align	2, 0
.L450:
	.word	gAIScriptPtr
	.word	gSideStatuses
.L448:
	ldr	r0, [r5]
	add	r0, r0, #0xa
	str	r0, [r5]
.L449:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 Cmd_if_side_affecting,.Lfe42-Cmd_if_side_affecting
	.align	2, 0
	.type	 Cmd_if_not_side_affecting,function
	.thumb_func
Cmd_if_not_side_affecting:
	push	{r4, r5, lr}
	ldr	r5, .L455
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	orr	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	orr	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	orr	r4, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r0, .L455+0x4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L453	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L454
.L456:
	.align	2, 0
.L455:
	.word	gAIScriptPtr
	.word	gSideStatuses
.L453:
	ldr	r0, [r5]
	add	r0, r0, #0xa
	str	r0, [r5]
.L454:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 Cmd_if_not_side_affecting,.Lfe43-Cmd_if_not_side_affecting
	.align	2, 0
	.type	 Cmd_if_less_than,function
	.thumb_func
Cmd_if_less_than:
	push	{lr}
	ldr	r0, .L460
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L460+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bcs	.L458	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L459
.L461:
	.align	2, 0
.L460:
	.word	gBattleResources
	.word	gAIScriptPtr
.L458:
	add	r0, r2, #0x6
	str	r0, [r3]
.L459:
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 Cmd_if_less_than,.Lfe44-Cmd_if_less_than
	.align	2, 0
	.type	 Cmd_if_more_than,function
	.thumb_func
Cmd_if_more_than:
	push	{lr}
	ldr	r0, .L465
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L465+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bls	.L463	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L464
.L466:
	.align	2, 0
.L465:
	.word	gBattleResources
	.word	gAIScriptPtr
.L463:
	add	r0, r2, #0x6
	str	r0, [r3]
.L464:
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 Cmd_if_more_than,.Lfe45-Cmd_if_more_than
	.align	2, 0
	.type	 Cmd_if_equal,function
	.thumb_func
Cmd_if_equal:
	push	{lr}
	ldr	r0, .L470
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L470+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L468	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L469
.L471:
	.align	2, 0
.L470:
	.word	gBattleResources
	.word	gAIScriptPtr
.L468:
	add	r0, r2, #0x6
	str	r0, [r3]
.L469:
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 Cmd_if_equal,.Lfe46-Cmd_if_equal
	.align	2, 0
	.type	 Cmd_if_not_equal,function
	.thumb_func
Cmd_if_not_equal:
	push	{lr}
	ldr	r0, .L475
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L475+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	beq	.L473	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L474
.L476:
	.align	2, 0
.L475:
	.word	gBattleResources
	.word	gAIScriptPtr
.L473:
	add	r0, r2, #0x6
	str	r0, [r3]
.L474:
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 Cmd_if_not_equal,.Lfe47-Cmd_if_not_equal
	.align	2, 0
	.type	 Cmd_if_less_than_ptr,function
	.thumb_func
Cmd_if_less_than_ptr:
	push	{lr}
	ldr	r3, .L480
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L480+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L478	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L479
.L481:
	.align	2, 0
.L480:
	.word	gAIScriptPtr
	.word	gBattleResources
.L478:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L479:
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 Cmd_if_less_than_ptr,.Lfe48-Cmd_if_less_than_ptr
	.align	2, 0
	.type	 Cmd_if_more_than_ptr,function
	.thumb_func
Cmd_if_more_than_ptr:
	push	{lr}
	ldr	r3, .L485
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L485+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bls	.L483	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L484
.L486:
	.align	2, 0
.L485:
	.word	gAIScriptPtr
	.word	gBattleResources
.L483:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L484:
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 Cmd_if_more_than_ptr,.Lfe49-Cmd_if_more_than_ptr
	.align	2, 0
	.type	 Cmd_if_equal_ptr,function
	.thumb_func
Cmd_if_equal_ptr:
	push	{lr}
	ldr	r3, .L490
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L490+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L488	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L489
.L491:
	.align	2, 0
.L490:
	.word	gAIScriptPtr
	.word	gBattleResources
.L488:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L489:
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 Cmd_if_equal_ptr,.Lfe50-Cmd_if_equal_ptr
	.align	2, 0
	.type	 Cmd_if_not_equal_ptr,function
	.thumb_func
Cmd_if_not_equal_ptr:
	push	{lr}
	ldr	r3, .L495
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L495+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L493	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L494
.L496:
	.align	2, 0
.L495:
	.word	gAIScriptPtr
	.word	gBattleResources
.L493:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L494:
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 Cmd_if_not_equal_ptr,.Lfe51-Cmd_if_not_equal_ptr
	.align	2, 0
	.type	 Cmd_if_move,function
	.thumb_func
Cmd_if_move:
	push	{lr}
	ldr	r3, .L500
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, .L500+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	cmp	r0, r1
	bne	.L498	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L499
.L501:
	.align	2, 0
.L500:
	.word	gAIScriptPtr
	.word	gBattleResources
.L498:
	add	r0, r2, #0x7
	str	r0, [r3]
.L499:
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 Cmd_if_move,.Lfe52-Cmd_if_move
	.align	2, 0
	.type	 Cmd_if_not_move,function
	.thumb_func
Cmd_if_not_move:
	push	{lr}
	ldr	r3, .L505
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, .L505+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	cmp	r0, r1
	beq	.L503	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L504
.L506:
	.align	2, 0
.L505:
	.word	gAIScriptPtr
	.word	gBattleResources
.L503:
	add	r0, r2, #0x7
	str	r0, [r3]
.L504:
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 Cmd_if_not_move,.Lfe53-Cmd_if_not_move
	.align	2, 0
	.type	 Cmd_if_in_bytes,function
	.thumb_func
Cmd_if_in_bytes:
	push	{r4, lr}
	ldr	r2, .L513
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrb	r0, [r3]
	cmp	r0, #0xff
	beq	.L509	@cond_branch
	ldr	r0, .L513+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r1, [r0, #0x8]
	add	r4, r2, #0
.L510:
	ldrb	r0, [r3]
	cmp	r1, r0
	bne	.L511	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L507
.L514:
	.align	2, 0
.L513:
	.word	gAIScriptPtr
	.word	gBattleResources
.L511:
	add	r3, r3, #0x1
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L510	@cond_branch
.L509:
	ldr	r0, [r2]
	add	r0, r0, #0x9
	str	r0, [r2]
.L507:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 Cmd_if_in_bytes,.Lfe54-Cmd_if_in_bytes
	.align	2, 0
	.type	 Cmd_if_not_in_bytes,function
	.thumb_func
Cmd_if_not_in_bytes:
	push	{r4, lr}
	ldr	r2, .L521
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrb	r0, [r3]
	add	r4, r2, #0
	cmp	r0, #0xff
	beq	.L517	@cond_branch
	ldr	r0, .L521+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r2, [r0, #0x8]
	add	r1, r4, #0
.L518:
	ldrb	r0, [r3]
	cmp	r2, r0
	bne	.L519	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
	b	.L515
.L522:
	.align	2, 0
.L521:
	.word	gAIScriptPtr
	.word	gBattleResources
.L519:
	add	r3, r3, #0x1
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L518	@cond_branch
.L517:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L515:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 Cmd_if_not_in_bytes,.Lfe55-Cmd_if_not_in_bytes
	.align	2, 0
	.type	 Cmd_if_in_hwords,function
	.thumb_func
Cmd_if_in_hwords:
	push	{r4, r5, lr}
	ldr	r2, .L529
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrh	r0, [r3]
	ldr	r5, .L529+0x4
	cmp	r0, r5
	beq	.L525	@cond_branch
	ldr	r0, .L529+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r1, [r0, #0x8]
	add	r4, r2, #0
.L526:
	ldrh	r0, [r3]
	cmp	r1, r0
	bne	.L527	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L523
.L530:
	.align	2, 0
.L529:
	.word	gAIScriptPtr
	.word	0xffff
	.word	gBattleResources
.L527:
	add	r3, r3, #0x2
	ldrh	r0, [r3]
	cmp	r0, r5
	bne	.L526	@cond_branch
.L525:
	ldr	r0, [r2]
	add	r0, r0, #0x9
	str	r0, [r2]
.L523:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 Cmd_if_in_hwords,.Lfe56-Cmd_if_in_hwords
	.align	2, 0
	.type	 Cmd_if_not_in_hwords,function
	.thumb_func
Cmd_if_not_in_hwords:
	push	{r4, r5, lr}
	ldr	r2, .L537
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrh	r0, [r3]
	ldr	r4, .L537+0x4
	add	r5, r2, #0
	cmp	r0, r4
	beq	.L533	@cond_branch
	ldr	r0, .L537+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r2, [r0, #0x8]
	add	r1, r5, #0
.L534:
	ldrh	r0, [r3]
	cmp	r2, r0
	bne	.L535	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
	b	.L531
.L538:
	.align	2, 0
.L537:
	.word	gAIScriptPtr
	.word	0xffff
	.word	gBattleResources
.L535:
	add	r3, r3, #0x2
	ldrh	r0, [r3]
	cmp	r0, r4
	bne	.L534	@cond_branch
.L533:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
.L531:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 Cmd_if_not_in_hwords,.Lfe57-Cmd_if_not_in_hwords
	.align	2, 0
	.type	 Cmd_if_user_has_attacking_move,function
	.thumb_func
Cmd_if_user_has_attacking_move:
	push	{r4, r5, lr}
	mov	r3, #0x0
	ldr	r4, .L548
	ldr	r1, .L548+0x4
	ldr	r0, .L548+0x8
	ldrb	r2, [r0]
	ldr	r5, .L548+0xc
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L543:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L542	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L541	@cond_branch
.L542:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L543	@cond_branch
.L541:
	cmp	r3, #0x4
	bne	.L546	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	b	.L547
.L549:
	.align	2, 0
.L548:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
.L546:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L547:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 Cmd_if_user_has_attacking_move,.Lfe58-Cmd_if_user_has_attacking_move
	.align	2, 0
	.type	 Cmd_if_user_has_no_attacking_moves,function
	.thumb_func
Cmd_if_user_has_no_attacking_moves:
	push	{r4, r5, lr}
	mov	r3, #0x0
	ldr	r4, .L559
	ldr	r1, .L559+0x4
	ldr	r0, .L559+0x8
	ldrb	r2, [r0]
	ldr	r5, .L559+0xc
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L554:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L553	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L552	@cond_branch
.L553:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L554	@cond_branch
.L552:
	cmp	r3, #0x4
	beq	.L557	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	b	.L558
.L560:
	.align	2, 0
.L559:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
.L557:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L558:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 Cmd_if_user_has_no_attacking_moves,.Lfe59-Cmd_if_user_has_no_attacking_moves
	.align	2, 0
	.type	 Cmd_get_turn_count,function
	.thumb_func
Cmd_get_turn_count:
	ldr	r0, .L562
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	ldr	r0, .L562+0x4
	ldrb	r0, [r0, #0x13]
	str	r0, [r1, #0x8]
	ldr	r1, .L562+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L563:
	.align	2, 0
.L562:
	.word	gBattleResources
	.word	gBattleResults
	.word	gAIScriptPtr
.Lfe60:
	.size	 Cmd_get_turn_count,.Lfe60-Cmd_get_turn_count
	.align	2, 0
	.type	 Cmd_get_type,function
	.thumb_func
Cmd_get_type:
	push	{r4, lr}
	ldr	r1, .L574
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r0, #0x4
	bhi	.L565	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L574+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L575:
	.align	2, 0
.L574:
	.word	gAIScriptPtr
	.word	.L571
	.align	2, 0
	.align	2, 0
.L571:
	.word	.L567
	.word	.L566
	.word	.L569
	.word	.L568
	.word	.L570
.L566:
	ldr	r0, .L576
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L576+0x4
	ldr	r0, .L576+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	b	.L573
.L577:
	.align	2, 0
.L576:
	.word	gBattleResources
	.word	gBattleMons
	.word	sBattler_AI
.L567:
	ldr	r0, .L578
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L578+0x4
	ldr	r0, .L578+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	b	.L573
.L579:
	.align	2, 0
.L578:
	.word	gBattleResources
	.word	gBattleMons
	.word	gBattlerTarget
.L568:
	ldr	r0, .L580
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L580+0x4
	ldr	r0, .L580+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	b	.L573
.L581:
	.align	2, 0
.L580:
	.word	gBattleResources
	.word	gBattleMons
	.word	sBattler_AI
.L569:
	ldr	r0, .L582
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L582+0x4
	ldr	r0, .L582+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	b	.L573
.L583:
	.align	2, 0
.L582:
	.word	gBattleResources
	.word	gBattleMons
	.word	gBattlerTarget
.L570:
	ldr	r0, .L584
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L584+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
.L573:
	str	r0, [r3, #0x8]
.L565:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L585:
	.align	2, 0
.L584:
	.word	gBattleResources
	.word	gBattleMoves
.Lfe61:
	.size	 Cmd_get_type,.Lfe61-Cmd_get_type
	.align	2, 0
	.type	 Cmd_is_of_type,function
	.thumb_func
Cmd_is_of_type:
	push	{r4, lr}
	ldr	r4, .L591
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L591+0x4
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r3, r0, r2
	add	r1, r3, #0
	add	r1, r1, #0x22
	ldr	r0, [r4]
	ldrb	r1, [r1]
	ldrb	r2, [r0, #0x2]
	cmp	r1, r2
	beq	.L588	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L588	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L587	@cond_branch
.L588:
	ldr	r0, .L591+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x1
	b	.L590
.L592:
	.align	2, 0
.L591:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	gBattleResources
.L587:
	ldr	r0, .L593
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
.L590:
	str	r0, [r1, #0x8]
	ldr	r1, .L593+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L594:
	.align	2, 0
.L593:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe62:
	.size	 Cmd_is_of_type,.Lfe62-Cmd_is_of_type
	.align	2, 0
	.type	 Cmd_get_considered_move_power,function
	.thumb_func
Cmd_get_considered_move_power:
	ldr	r0, .L596
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L596+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	str	r0, [r3, #0x8]
	ldr	r1, .L596+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L597:
	.align	2, 0
.L596:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe63:
	.size	 Cmd_get_considered_move_power,.Lfe63-Cmd_get_considered_move_power
	.align	2, 0
	.type	 WhichMoveBetter,function
	.thumb_func
WhichMoveBetter:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	ldr	r7, .L620
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	AI_GetAbility
	add	r6, r0, #0
	ldr	r0, .L620+0x4
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x95
	beq	.L599	@cond_branch
	ldr	r0, .L620+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x48
	ldrb	r7, [r7]
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r0, #0x78
	beq	.L600	@cond_branch
	cmp	r6, #0xa0
	beq	.L600	@cond_branch
	cmp	r6, #0x18
	bne	.L599	@cond_branch
.L600:
	add	r0, r5, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L601	@cond_branch
	add	r0, r4, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L618	@cond_branch
.L601:
	add	r0, r4, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L599	@cond_branch
	add	r0, r5, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L619	@cond_branch
.L599:
	ldr	r0, .L620+0x4
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	lsl	r6, r5, #0x2
	lsl	r3, r4, #0x2
	cmp	r0, #0x45
	beq	.L603	@cond_branch
	ldr	r1, .L620+0xc
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r2, [r0]
	add	r7, r1, #0
	cmp	r2, #0x30
	beq	.L605	@cond_branch
	cmp	r2, #0x2d
	beq	.L605	@cond_branch
	ldr	r0, .L620+0x10
	cmp	r2, r0
	beq	.L605	@cond_branch
	cmp	r2, #0xc6
	beq	.L605	@cond_branch
	sub	r0, r0, #0x2
	cmp	r2, r0
	bne	.L604	@cond_branch
.L605:
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r2, [r0]
	add	r3, r1, #0
	cmp	r2, #0x30
	beq	.L607	@cond_branch
	cmp	r2, #0x2d
	beq	.L604	@cond_branch
	ldr	r0, .L620+0x10
	cmp	r2, r0
	beq	.L604	@cond_branch
	cmp	r2, #0xc6
	beq	.L604	@cond_branch
	sub	r0, r0, #0x2
	cmp	r2, r0
	beq	.L604	@cond_branch
	cmp	r2, #0x50
	bne	.L618	@cond_branch
.L604:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0]
	cmp	r1, #0x30
	beq	.L607	@cond_branch
	cmp	r1, #0x2d
	beq	.L607	@cond_branch
	ldr	r0, .L620+0x10
	cmp	r1, r0
	beq	.L607	@cond_branch
	cmp	r1, #0xc6
	beq	.L607	@cond_branch
	sub	r0, r0, #0x2
	cmp	r1, r0
	bne	.L603	@cond_branch
.L607:
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0]
	cmp	r1, #0x30
	beq	.L603	@cond_branch
	cmp	r1, #0x2d
	beq	.L603	@cond_branch
	ldr	r0, .L620+0x10
	cmp	r1, r0
	beq	.L603	@cond_branch
	cmp	r1, #0xc6
	beq	.L603	@cond_branch
	sub	r0, r0, #0x2
	cmp	r1, r0
	beq	.L603	@cond_branch
	cmp	r1, #0x50
	beq	.L613	@cond_branch
.L619:
	mov	r0, #0x0
	b	.L612
.L621:
	.align	2, 0
.L620:
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleResources
	.word	gBattleMoves
	.word	0x121
.L603:
	ldr	r0, .L622
	add	r1, r6, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r1, [r1]
	add	r7, r0, #0
	cmp	r1, #0x50
	bne	.L608	@cond_branch
.L613:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0x50
	beq	.L614	@cond_branch
.L618:
	mov	r0, #0x1
	b	.L612
.L623:
	.align	2, 0
.L622:
	.word	gBattleMoves
.L608:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0x50
	bne	.L609	@cond_branch
.L614:
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0x50
	bne	.L619	@cond_branch
.L609:
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L610	@cond_branch
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L615	@cond_branch
	b	.L618
.L610:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L611	@cond_branch
.L615:
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L619	@cond_branch
.L611:
	mov	r0, #0x2
.L612:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 WhichMoveBetter,.Lfe64-WhichMoveBetter
	.align	2, 0
	.type	 Cmd_get_how_powerful_move_is,function
	.thumb_func
Cmd_get_how_powerful_move_is:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	mov	r4, #0x0
	ldr	r0, .L671
	ldrh	r1, [r0]
	ldr	r3, .L671+0x4
	add	r5, r0, #0
	ldr	r6, .L671+0x8
	ldr	r0, .L671+0xc
	mov	sl, r0
	cmp	r1, r3
	beq	.L626	@cond_branch
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r2, [r0]
	add	r1, r5, #0
.L628:
	ldrh	r0, [r1]
	cmp	r2, r0
	beq	.L626	@cond_branch
	add	r1, r1, #0x2
	add	r4, r4, #0x1
	ldrh	r0, [r1]
	cmp	r0, r3
	bne	.L628	@cond_branch
.L626:
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.LCB5696
	b	.L631	@long jump
.LCB5696:
	lsl	r0, r4, #0x1
	add	r0, r0, r5
	ldrh	r1, [r0]
	ldr	r0, .L671+0x4
	cmp	r1, r0
	beq	.LCB5707
	b	.L631	@long jump
.LCB5707:
	mov	r0, #0x0
	ldr	r2, .L671+0x10
	mov	ip, r2
	mov	r9, r5
	ldrh	r4, [r5]
	str	r4, [sp, #0x10]
	add	r7, r1, #0
.L635:
	mov	r4, #0x0
	lsl	r3, r0, #0x1
	lsl	r5, r0, #0x2
	add	r0, r0, #0x1
	mov	r8, r0
	ldr	r0, [sp, #0x10]
	cmp	r0, r7
	beq	.L637	@cond_branch
	ldr	r2, .L671+0x8
	ldr	r0, .L671+0x14
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r3, r0
	ldr	r1, .L671+0x18
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r2, [r0]
	ldr	r1, .L671
.L639:
	ldrh	r0, [r1]
	cmp	r2, r0
	beq	.L637	@cond_branch
	add	r1, r1, #0x2
	add	r4, r4, #0x1
	ldrh	r0, [r1]
	cmp	r0, r7
	bne	.L639	@cond_branch
.L637:
	ldr	r1, .L671+0x14
	ldrb	r6, [r1]
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r0, r3, r0
	ldr	r1, .L671+0x1c
	add	r1, r1, #0xc
	add	r1, r0, r1
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L642	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	cmp	r0, r7
	bne	.L642	@cond_branch
	ldrh	r0, [r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L671+0x8
	add	r1, r1, r2
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L642	@cond_branch
	mov	r4, sp
	add	r3, r4, r5
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r2, [r0, #0x14]
	mov	r4, ip
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r5, r0
	lsl	r1, r6, #0x6
	add	r0, r0, r1
	add	r2, r2, #0x14
	add	r2, r2, r0
	ldr	r0, [r2]
	str	r0, [r3]
	b	.L634
.L672:
	.align	2, 0
.L671:
	.word	sDiscouragedPowerfulMoveEffects
	.word	0xffff
	.word	gBattleMoves
	.word	gBattleResources
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleMons+0xc
	.word	gBattleMons
.L642:
	mov	r0, sp
	add	r1, r0, r5
	mov	r0, #0x0
	str	r0, [r1]
.L634:
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L635	@cond_branch
	mov	r2, ip
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r4, .L673
	add	r0, r0, r4
	ldrh	r4, [r0, #0x2a]
	add	r0, r4, #0
	mov	r1, #0x5
	bl	__divsi3
	add	r6, r4, r0
	mov	r1, sp
	mov	r4, #0x3
.L648:
	ldr	r0, [r1]
	cmp	r0, r6
	ble	.L647	@cond_branch
	str	r6, [r1]
.L647:
	add	r1, r1, #0x4
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L648	@cond_branch
	mov	r7, #0x0
	mov	r4, #0x1
	ldr	r0, .L673+0x4
	mov	r8, r0
	add	r5, sp, #0x4
.L654:
	lsl	r0, r7, #0x2
	add	r0, r0, sp
	ldr	r1, [r5]
	ldr	r0, [r0]
	cmp	r1, r0
	ble	.L655	@cond_branch
	add	r7, r4, #0
.L655:
	lsl	r0, r7, #0x2
	add	r0, r0, sp
	ldr	r0, [r0]
	cmp	r1, r0
	bne	.L653	@cond_branch
	lsl	r1, r7, #0x1
	ldr	r0, .L673+0x8
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r1, r1, r8
	ldrh	r0, [r1]
	lsl	r1, r4, #0x1
	add	r1, r1, r2
	add	r1, r1, r8
	ldrh	r1, [r1]
	bl	WhichMoveBetter
	cmp	r0, #0x1
	beq	.L660	@cond_branch
	cmp	r0, #0x2
	bne	.L653	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L653	@cond_branch
.L660:
	add	r7, r4, #0
.L653:
	add	r5, r5, #0x4
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L654	@cond_branch
	ldr	r1, .L673+0xc
	mov	sl, r1
	ldr	r0, [r1]
	ldr	r1, [r0, #0x14]
	ldrb	r2, [r1, #0x1]
	mov	r8, r2
	cmp	r8, r7
	bne	.L664	@cond_branch
	mov	r0, #0x1
	b	.L670
.L674:
	.align	2, 0
.L673:
	.word	gBattleMons
	.word	gBattleMons+0xc
	.word	sBattler_AI
	.word	gBattleResources
.L664:
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, sp
	ldr	r0, [r0]
	mov	r9, r0
	lsl	r1, r7, #0x2
	cmp	r9, r6
	bge	.L667	@cond_branch
	mov	r2, sp
	add	r0, r2, r1
	ldr	r0, [r0]
	cmp	r0, r6
	bge	.L666	@cond_branch
.L667:
	mov	r4, sp
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	add	r1, r6, #0
	bl	__divsi3
	add	r4, r0, #0
	mov	r0, r9
	mul	r0, r0, r5
	add	r1, r6, #0
	bl	__divsi3
	sub	r4, r4, r0
	cmp	r4, #0x1e
	bgt	.L666	@cond_branch
	ldr	r3, .L675
	lsl	r1, r7, #0x1
	ldr	r0, .L675+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r3, r3, #0xc
	add	r1, r1, r3
	ldrh	r0, [r1]
	mov	r4, r8
	lsl	r1, r4, #0x1
	add	r1, r1, r2
	add	r1, r1, r3
	ldrh	r1, [r1]
	bl	WhichMoveBetter
	cmp	r0, #0
	beq	.L666	@cond_branch
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x2
	b	.L670
.L676:
	.align	2, 0
.L675:
	.word	gBattleMons
	.word	sBattler_AI
.L666:
	ldr	r0, .L677
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x3
	b	.L670
.L678:
	.align	2, 0
.L677:
	.word	gBattleResources
.L631:
	mov	r2, sl
	ldr	r0, [r2]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
.L670:
	str	r0, [r1, #0x8]
	ldr	r1, .L679
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L680:
	.align	2, 0
.L679:
	.word	gAIScriptPtr
.Lfe65:
	.size	 Cmd_get_how_powerful_move_is,.Lfe65-Cmd_get_how_powerful_move_is
	.align	2, 0
	.type	 Cmd_get_last_used_battler_move,function
	.thumb_func
Cmd_get_last_used_battler_move:
	push	{r4, lr}
	ldr	r4, .L682
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	ldr	r1, .L682+0x4
	ldr	r1, [r1]
	ldr	r2, [r1, #0x14]
	ldr	r1, .L682+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	ldrh	r0, [r0]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L683:
	.align	2, 0
.L682:
	.word	gAIScriptPtr
	.word	gBattleResources
	.word	gLastMoves
.Lfe66:
	.size	 Cmd_get_last_used_battler_move,.Lfe66-Cmd_get_last_used_battler_move
	.align	2, 0
	.type	 Cmd_if_equal_u32,function
	.thumb_func
Cmd_if_equal_u32:
	push	{lr}
	ldr	r3, .L687
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L687+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	cmp	r1, r0
	bne	.L685	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L686
.L688:
	.align	2, 0
.L687:
	.word	gAIScriptPtr
	.word	gBattleResources
.L685:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L686:
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 Cmd_if_equal_u32,.Lfe67-Cmd_if_equal_u32
	.align	2, 0
	.type	 Cmd_if_not_equal_u32,function
	.thumb_func
Cmd_if_not_equal_u32:
	push	{lr}
	ldr	r3, .L692
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L692+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	cmp	r1, r0
	beq	.L690	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L691
.L693:
	.align	2, 0
.L692:
	.word	gAIScriptPtr
	.word	gBattleResources
.L690:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L691:
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 Cmd_if_not_equal_u32,.Lfe68-Cmd_if_not_equal_u32
	.align	2, 0
	.type	 Cmd_if_user_goes,function
	.thumb_func
Cmd_if_user_goes:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r0, .L716
	ldrb	r0, [r0]
	ldr	r1, .L716+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	ldrh	r1, [r1, #0x2]
	bl	GetMovePriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r4, .L716+0x8
	ldrb	r0, [r4]
	bl	SaveBattlerData
	ldrb	r0, [r4]
	bl	SetBattlerData
	mov	r4, #0x0
	ldr	r0, .L716+0xc
	mov	sl, r0
	ldr	r1, .L716+0x10
	mov	r9, r1
.L698:
	lsl	r1, r4, #0x1
	ldr	r2, .L716+0x8
	ldrb	r3, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, sl
	ldrh	r0, [r1]
	add	r7, r2, #0
	cmp	r0, #0
	beq	.L697	@cond_branch
	cmp	r0, r9
	beq	.L697	@cond_branch
	add	r1, r0, #0
	add	r0, r3, #0
	bl	GetMovePriority
	mov	r2, r8
	lsl	r1, r2, #0x18
	asr	r1, r1, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r1, r0
	ble	.L701	@cond_branch
	add	r6, r6, #0x1
	b	.L697
.L717:
	.align	2, 0
.L716:
	.word	sBattler_AI
	.word	gBattleResources
	.word	gBattlerTarget
	.word	gBattleMons+0xc
	.word	0xffff
.L701:
	cmp	r0, r1
	ble	.L697	@cond_branch
	add	r5, r5, #0x1
.L697:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bls	.L698	@cond_branch
	ldrb	r0, [r7]
	bl	RestoreBattlerData
	cmp	r6, r5
	bls	.L705	@cond_branch
	ldr	r3, .L718
	ldr	r2, [r3]
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0
	beq	.L715	@cond_branch
	b	.L713
.L719:
	.align	2, 0
.L718:
	.word	gAIScriptPtr
.L705:
	cmp	r6, r5
	bcs	.L709	@cond_branch
	ldr	r3, .L720
	ldr	r2, [r3]
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x1
	beq	.L715	@cond_branch
	b	.L713
.L721:
	.align	2, 0
.L720:
	.word	gAIScriptPtr
.L709:
	ldr	r0, .L722
	ldrb	r0, [r0]
	ldrb	r1, [r7]
	mov	r2, #0x1
	bl	GetWhoStrikesFirst
	ldr	r3, .L722+0x4
	ldr	r2, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L713	@cond_branch
.L715:
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L708
.L723:
	.align	2, 0
.L722:
	.word	sBattler_AI
	.word	gAIScriptPtr
.L713:
	add	r0, r2, #0x6
	str	r0, [r3]
.L708:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 Cmd_if_user_goes,.Lfe69-Cmd_if_user_goes
	.align	2, 0
	.type	 Cmd_nullsub_2A,function
	.thumb_func
Cmd_nullsub_2A:
	bx	lr
.Lfe70:
	.size	 Cmd_nullsub_2A,.Lfe70-Cmd_nullsub_2A
	.align	2, 0
	.type	 Cmd_nullsub_2B,function
	.thumb_func
Cmd_nullsub_2B:
	bx	lr
.Lfe71:
	.size	 Cmd_nullsub_2B,.Lfe71-Cmd_nullsub_2B
	.align	2, 0
	.type	 CountUsablePartyMons,function
	.thumb_func
CountUsablePartyMons:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r5, #0
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L737
	mov	r9, r1
	cmp	r0, #0
	bne	.L727	@cond_branch
	ldr	r0, .L737+0x4
	mov	r9, r0
.L727:
	ldr	r0, .L737+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L729	@cond_branch
	ldr	r4, .L737+0xc
	lsl	r0, r5, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r8, r0
	add	r0, r5, #0
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrh	r6, [r0]
	b	.L730
.L738:
	.align	2, 0
.L737:
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
.L729:
	ldr	r1, .L739
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r6, [r0]
	mov	r8, r6
.L730:
	mov	r7, #0x0
	mov	r5, #0x0
.L734:
	cmp	r5, r8
	beq	.L733	@cond_branch
	cmp	r5, r6
	beq	.L733	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r9
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L733	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L733	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L739+0x4
	cmp	r0, r1
	beq	.L733	@cond_branch
	add	r7, r7, #0x1
.L733:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L734	@cond_branch
	add	r0, r7, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L740:
	.align	2, 0
.L739:
	.word	gBattlerPartyIndexes
	.word	0x4b7
.Lfe72:
	.size	 CountUsablePartyMons,.Lfe72-CountUsablePartyMons
	.align	2, 0
	.type	 Cmd_count_usable_party_mons,function
	.thumb_func
Cmd_count_usable_party_mons:
	push	{r4, lr}
	ldr	r4, .L742
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	CountUsablePartyMons
	ldr	r1, .L742+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	str	r0, [r1, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L743:
	.align	2, 0
.L742:
	.word	gAIScriptPtr
	.word	gBattleResources
.Lfe73:
	.size	 Cmd_count_usable_party_mons,.Lfe73-Cmd_count_usable_party_mons
	.align	2, 0
	.type	 Cmd_get_considered_move,function
	.thumb_func
Cmd_get_considered_move:
	ldr	r0, .L745
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	ldrh	r0, [r1, #0x2]
	str	r0, [r1, #0x8]
	ldr	r1, .L745+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L746:
	.align	2, 0
.L745:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe74:
	.size	 Cmd_get_considered_move,.Lfe74-Cmd_get_considered_move
	.align	2, 0
	.type	 Cmd_get_considered_move_effect,function
	.thumb_func
Cmd_get_considered_move_effect:
	ldr	r0, .L748
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L748+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	str	r0, [r3, #0x8]
	ldr	r1, .L748+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L749:
	.align	2, 0
.L748:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe75:
	.size	 Cmd_get_considered_move_effect,.Lfe75-Cmd_get_considered_move_effect
	.align	2, 0
	.type	 AI_GetAbility,function
	.thumb_func
AI_GetAbility:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L751	@cond_branch
	ldr	r1, .L760
	b	.L754
.L761:
	.align	2, 0
.L760:
	.word	gBattleMons
.L751:
	ldr	r0, .L762
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	lsl	r1, r4, #0x1
	add	r0, r0, #0x40
	add	r1, r0, r1
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L759	@cond_branch
	ldr	r0, .L762+0x4
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r5, r1, r0
	ldrh	r2, [r5, #0x20]
	add	r1, r0, #0
	cmp	r2, #0x17
	beq	.L754	@cond_branch
	cmp	r2, #0x2a
	beq	.L754	@cond_branch
	cmp	r2, #0x47
	bne	.L753	@cond_branch
.L754:
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x20]
	b	.L759
.L763:
	.align	2, 0
.L762:
	.word	gBattleResources
	.word	gBattleMons
.L753:
	ldr	r4, .L764
	ldrh	r0, [r5]
	lsl	r2, r0, #0x15
	lsr	r1, r2, #0x15
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0
	beq	.L755	@cond_branch
	add	r0, r1, #0
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0
	beq	.L756	@cond_branch
	cmp	r6, #0
	beq	.L755	@cond_branch
	bl	Random
	mov	r2, #0x1
	and	r2, r2, r0
	lsl	r2, r2, #0x1
	ldrh	r1, [r5]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x15
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	add	r0, r0, #0x18
	add	r2, r2, r0
	ldrh	r0, [r2]
	b	.L759
.L765:
	.align	2, 0
.L764:
	.word	gBaseStats
.L756:
	lsr	r0, r2, #0x15
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x18]
	b	.L759
.L755:
	mov	r0, #0x1
	neg	r0, r0
.L759:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 AI_GetAbility,.Lfe76-AI_GetAbility
	.align	2, 0
	.type	 Cmd_get_ability,function
	.thumb_func
Cmd_get_ability:
	push	{r4, lr}
	ldr	r4, .L767
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	AI_GetAbility
	ldr	r1, .L767+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	str	r0, [r1, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L768:
	.align	2, 0
.L767:
	.word	gAIScriptPtr
	.word	gBattleResources
.Lfe77:
	.size	 Cmd_get_ability,.Lfe77-Cmd_get_ability
	.align	2, 0
	.type	 Cmd_check_ability,function
	.thumb_func
Cmd_check_ability:
	push	{r4, lr}
	ldr	r4, .L775
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	AI_GetAbility
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L770	@cond_branch
	ldr	r0, .L775+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x2
	b	.L774
.L776:
	.align	2, 0
.L775:
	.word	gAIScriptPtr
	.word	gBattleResources
.L770:
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	cmp	r1, r0
	bne	.L772	@cond_branch
	ldr	r0, .L777
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x1
	b	.L774
.L778:
	.align	2, 0
.L777:
	.word	gBattleResources
.L772:
	ldr	r0, .L779
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
.L774:
	str	r0, [r1, #0x8]
	ldr	r1, .L779+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L780:
	.align	2, 0
.L779:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe78:
	.size	 Cmd_check_ability,.Lfe78-Cmd_check_ability
	.align	2, 0
	.type	 Cmd_get_highest_type_effectiveness,function
	.thumb_func
Cmd_get_highest_type_effectiveness:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r1, .L801
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L801+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
	str	r0, [r1, #0x8]
	mov	r5, #0x0
	ldr	r7, .L801+0x8
	ldr	r6, .L801+0xc
	ldr	r0, .L801+0x10
	mov	r8, r0
	ldr	r4, .L801+0x14
.L785:
	lsl	r1, r5, #0x1
	ldrb	r2, [r6]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r8
	ldrh	r0, [r1]
	strh	r0, [r7]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L784	@cond_branch
	ldrh	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, .L801+0x18
	ldrb	r2, [r2]
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	cmp	r1, r0
	beq	.L791	@cond_branch
	cmp	r1, r0
	bhi	.L796	@cond_branch
	cmp	r1, #0
	beq	.L789	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L790	@cond_branch
	b	.L789
.L802:
	.align	2, 0
.L801:
	.word	gMoveResultFlags
	.word	gBattleResources
	.word	gCurrentMove
	.word	sBattler_AI
	.word	gBattleMons+0xc
	.word	gBattleMoveDamage
	.word	gBattlerTarget
.L796:
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	cmp	r1, r0
	beq	.L793	@cond_branch
	cmp	r1, r0
	bhi	.L797	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	beq	.L792	@cond_branch
	b	.L789
.L797:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L794	@cond_branch
.L789:
	mov	r0, #0x0
	b	.L800
.L790:
	mov	r0, #0xa
	b	.L800
.L791:
	mov	r0, #0x14
	b	.L800
.L792:
	mov	r0, #0x28
	b	.L800
.L793:
	mov	r0, #0x50
	b	.L800
.L794:
	mov	r0, #0xa0
.L800:
	str	r0, [r4]
	ldr	r1, .L803
	ldr	r0, .L803+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, [r2, #0x8]
	ldr	r1, [r1]
	cmp	r0, r1
	bcs	.L784	@cond_branch
	str	r1, [r2, #0x8]
.L784:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L785	@cond_branch
	ldr	r1, .L803+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L804:
	.align	2, 0
.L803:
	.word	gBattleMoveDamage
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe79:
	.size	 Cmd_get_highest_type_effectiveness,.Lfe79-Cmd_get_highest_type_effectiveness
	.align	2, 0
	.type	 Cmd_if_type_effectiveness,function
	.thumb_func
Cmd_if_type_effectiveness:
	push	{lr}
	ldr	r1, .L819
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L819+0x4
	ldr	r0, .L819+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	strh	r0, [r1]
	ldrh	r0, [r1]
	ldr	r1, .L819+0xc
	ldrb	r1, [r1]
	ldr	r2, .L819+0x10
	ldrb	r2, [r2]
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	cmp	r1, r0
	beq	.L810	@cond_branch
	cmp	r1, r0
	bhi	.L815	@cond_branch
	cmp	r1, #0
	beq	.L808	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L809	@cond_branch
	b	.L808
.L820:
	.align	2, 0
.L819:
	.word	gMoveResultFlags
	.word	gCurrentMove
	.word	gBattleResources
	.word	sBattler_AI
	.word	gBattlerTarget
.L815:
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	cmp	r1, r0
	beq	.L812	@cond_branch
	cmp	r1, r0
	bhi	.L816	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	beq	.L811	@cond_branch
	b	.L808
.L816:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L813	@cond_branch
.L808:
	mov	r0, #0x0
	b	.L806
.L809:
	mov	r0, #0xa
	b	.L806
.L810:
	mov	r0, #0x14
	b	.L806
.L811:
	mov	r0, #0x28
	b	.L806
.L812:
	mov	r0, #0x50
	b	.L806
.L813:
	mov	r0, #0xa0
.L806:
	ldr	r3, .L821
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L817	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L818
.L822:
	.align	2, 0
.L821:
	.word	gAIScriptPtr
.L817:
	add	r0, r2, #0x6
	str	r0, [r3]
.L818:
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 Cmd_if_type_effectiveness,.Lfe80-Cmd_if_type_effectiveness
	.align	2, 0
	.type	 Cmd_nullsub_32,function
	.thumb_func
Cmd_nullsub_32:
	bx	lr
.Lfe81:
	.size	 Cmd_nullsub_32,.Lfe81-Cmd_nullsub_32
	.align	2, 0
	.type	 Cmd_nullsub_33,function
	.thumb_func
Cmd_nullsub_33:
	bx	lr
.Lfe82:
	.size	 Cmd_nullsub_33,.Lfe82-Cmd_nullsub_33
	.align	2, 0
	.type	 Cmd_if_status_in_party,function
	.thumb_func
Cmd_if_status_in_party:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L834
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L834+0x4
	mov	sl, r1
	cmp	r0, #0
	bne	.L826	@cond_branch
	ldr	r0, .L834+0x8
	mov	sl, r0
.L826:
	ldr	r1, [r4]
	ldrb	r7, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r7, r7, r0
	mov	r1, #0x0
	mov	r8, r1
	mov	r9, r4
.L831:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	cmp	r5, #0
	beq	.L830	@cond_branch
	ldr	r1, .L834+0xc
	cmp	r5, r1
	beq	.L830	@cond_branch
	cmp	r6, #0
	beq	.L830	@cond_branch
	cmp	r0, r7
	bne	.L830	@cond_branch
	mov	r0, r9
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r0, r9
	str	r1, [r0]
	b	.L825
.L835:
	.align	2, 0
.L834:
	.word	gAIScriptPtr
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x4b7
.L830:
	mov	r1, #0x1
	add	r8, r8, r1
	mov	r0, r8
	cmp	r0, #0x5
	ble	.L831	@cond_branch
	ldr	r1, .L836
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L825:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L837:
	.align	2, 0
.L836:
	.word	gAIScriptPtr
.Lfe83:
	.size	 Cmd_if_status_in_party,.Lfe83-Cmd_if_status_in_party
	.align	2, 0
	.type	 Cmd_if_status_not_in_party,function
	.thumb_func
Cmd_if_status_not_in_party:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L847
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L847+0x4
	mov	sl, r1
	cmp	r0, #0
	bne	.L839	@cond_branch
	ldr	r0, .L847+0x8
	mov	sl, r0
.L839:
	ldr	r1, [r4]
	ldrb	r7, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r7, r7, r0
	mov	r1, #0x0
	mov	r8, r1
	mov	r9, r4
.L844:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	cmp	r5, #0
	beq	.L843	@cond_branch
	ldr	r1, .L847+0xc
	cmp	r5, r1
	beq	.L843	@cond_branch
	cmp	r6, #0
	beq	.L843	@cond_branch
	cmp	r0, r7
	bne	.L843	@cond_branch
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
	b	.L838
.L848:
	.align	2, 0
.L847:
	.word	gAIScriptPtr
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x4b7
.L843:
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x5
	ble	.L844	@cond_branch
	ldr	r3, .L849
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L838:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L850:
	.align	2, 0
.L849:
	.word	gAIScriptPtr
.Lfe84:
	.size	 Cmd_if_status_not_in_party,.Lfe84-Cmd_if_status_not_in_party
	.align	2, 0
	.type	 Cmd_get_weather,function
	.thumb_func
Cmd_get_weather:
	push	{lr}
	ldr	r0, .L860
	ldrh	r2, [r0]
	mov	r0, #0x7
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L852	@cond_branch
	ldr	r0, .L860+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x2
	str	r0, [r1, #0x8]
	b	.L853
.L861:
	.align	2, 0
.L860:
	.word	gBattleWeather
	.word	gBattleResources
.L852:
	mov	r0, #0x18
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L854	@cond_branch
	ldr	r0, .L862
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x3
	str	r0, [r1, #0x8]
	b	.L853
.L863:
	.align	2, 0
.L862:
	.word	gBattleResources
.L854:
	mov	r0, #0x60
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L856	@cond_branch
	ldr	r0, .L864
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x1
	str	r0, [r1, #0x8]
	b	.L853
.L865:
	.align	2, 0
.L864:
	.word	gBattleResources
.L856:
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L858	@cond_branch
	ldr	r0, .L866
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x4
	str	r0, [r1, #0x8]
	b	.L853
.L867:
	.align	2, 0
.L866:
	.word	gBattleResources
.L858:
	ldr	r0, .L868
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	str	r1, [r0, #0x8]
.L853:
	ldr	r1, .L868+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L869:
	.align	2, 0
.L868:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe85:
	.size	 Cmd_get_weather,.Lfe85-Cmd_get_weather
	.align	2, 0
	.type	 Cmd_if_effect,function
	.thumb_func
Cmd_if_effect:
	push	{r4, lr}
	ldr	r2, .L873
	ldr	r0, .L873+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r2, [r0]
	ldr	r4, .L873+0x8
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r2, r1
	bne	.L871	@cond_branch
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L872
.L874:
	.align	2, 0
.L873:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gAIScriptPtr
.L871:
	add	r0, r3, #0x7
	str	r0, [r4]
.L872:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 Cmd_if_effect,.Lfe86-Cmd_if_effect
	.align	2, 0
	.type	 Cmd_if_not_effect,function
	.thumb_func
Cmd_if_not_effect:
	push	{r4, lr}
	ldr	r2, .L878
	ldr	r0, .L878+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r2, [r0]
	ldr	r4, .L878+0x8
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r2, r1
	beq	.L876	@cond_branch
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L877
.L879:
	.align	2, 0
.L878:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gAIScriptPtr
.L876:
	add	r0, r3, #0x7
	str	r0, [r4]
.L877:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 Cmd_if_not_effect,.Lfe87-Cmd_if_not_effect
	.align	2, 0
	.type	 Cmd_if_stat_level_less_than,function
	.thumb_func
Cmd_if_stat_level_less_than:
	push	{r4, lr}
	ldr	r0, .L886
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L881	@cond_branch
	ldr	r0, .L886+0x4
	b	.L885
.L887:
	.align	2, 0
.L886:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L881:
	ldr	r0, .L888
.L885:
	ldrb	r3, [r0]
	ldr	r1, .L888+0x4
	ldr	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	bge	.L883	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L884
.L889:
	.align	2, 0
.L888:
	.word	gBattlerTarget
	.word	gBattleMons
.L883:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L884:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe88:
	.size	 Cmd_if_stat_level_less_than,.Lfe88-Cmd_if_stat_level_less_than
	.align	2, 0
	.type	 Cmd_if_stat_level_more_than,function
	.thumb_func
Cmd_if_stat_level_more_than:
	push	{r4, lr}
	ldr	r0, .L896
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L891	@cond_branch
	ldr	r0, .L896+0x4
	b	.L895
.L897:
	.align	2, 0
.L896:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L891:
	ldr	r0, .L898
.L895:
	ldrb	r3, [r0]
	ldr	r1, .L898+0x4
	ldr	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	ble	.L893	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L894
.L899:
	.align	2, 0
.L898:
	.word	gBattlerTarget
	.word	gBattleMons
.L893:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L894:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe89:
	.size	 Cmd_if_stat_level_more_than,.Lfe89-Cmd_if_stat_level_more_than
	.align	2, 0
	.type	 Cmd_if_stat_level_equal,function
	.thumb_func
Cmd_if_stat_level_equal:
	push	{r4, lr}
	ldr	r0, .L906
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L901	@cond_branch
	ldr	r0, .L906+0x4
	b	.L905
.L907:
	.align	2, 0
.L906:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L901:
	ldr	r0, .L908
.L905:
	ldrb	r3, [r0]
	ldr	r1, .L908+0x4
	ldr	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	bne	.L903	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L904
.L909:
	.align	2, 0
.L908:
	.word	gBattlerTarget
	.word	gBattleMons
.L903:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L904:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe90:
	.size	 Cmd_if_stat_level_equal,.Lfe90-Cmd_if_stat_level_equal
	.align	2, 0
	.type	 Cmd_if_stat_level_not_equal,function
	.thumb_func
Cmd_if_stat_level_not_equal:
	push	{r4, lr}
	ldr	r0, .L916
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L911	@cond_branch
	ldr	r0, .L916+0x4
	b	.L915
.L917:
	.align	2, 0
.L916:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L911:
	ldr	r0, .L918
.L915:
	ldrb	r3, [r0]
	ldr	r1, .L918+0x4
	ldr	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	beq	.L913	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L914
.L919:
	.align	2, 0
.L918:
	.word	gBattlerTarget
	.word	gBattleMons
.L913:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L914:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 Cmd_if_stat_level_not_equal,.Lfe91-Cmd_if_stat_level_not_equal
	.align	2, 0
	.type	 Cmd_if_can_faint,function
	.thumb_func
Cmd_if_can_faint:
	push	{r4, lr}
	ldr	r2, .L924
	ldr	r0, .L924+0x4
	ldr	r0, [r0]
	ldr	r4, [r0, #0x14]
	ldrh	r1, [r4, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L922	@cond_branch
	ldrb	r1, [r4, #0x1]
	lsl	r1, r1, #0x2
	ldr	r0, .L924+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x4
	add	r1, r1, r0
	ldr	r0, .L924+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r0, r0, r1
	ldr	r2, [r0]
	ldr	r1, .L924+0x10
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, r2
	bgt	.L922	@cond_branch
	ldr	r3, .L924+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L920
.L925:
	.align	2, 0
.L924:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleMons
	.word	gAIScriptPtr
.L922:
	ldr	r1, .L926
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L920:
	pop	{r4}
	pop	{r0}
	bx	r0
.L927:
	.align	2, 0
.L926:
	.word	gAIScriptPtr
.Lfe92:
	.size	 Cmd_if_can_faint,.Lfe92-Cmd_if_can_faint
	.align	2, 0
	.type	 Cmd_if_cant_faint,function
	.thumb_func
Cmd_if_cant_faint:
	push	{r4, lr}
	ldr	r2, .L932
	ldr	r0, .L932+0x4
	ldr	r0, [r0]
	ldr	r4, [r0, #0x14]
	ldrh	r1, [r4, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x1
	bls	.L930	@cond_branch
	ldrb	r1, [r4, #0x1]
	lsl	r1, r1, #0x2
	ldr	r0, .L932+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x4
	add	r1, r1, r0
	ldr	r0, .L932+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r0, r0, r1
	ldr	r2, [r0]
	ldr	r1, .L932+0x10
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, r2
	ble	.L930	@cond_branch
	ldr	r3, .L932+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L928
.L933:
	.align	2, 0
.L932:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleMons
	.word	gAIScriptPtr
.L930:
	ldr	r1, .L934
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L928:
	pop	{r4}
	pop	{r0}
	bx	r0
.L935:
	.align	2, 0
.L934:
	.word	gAIScriptPtr
.Lfe93:
	.size	 Cmd_if_cant_faint,.Lfe93-Cmd_if_cant_faint
	.align	2, 0
	.type	 Cmd_if_has_move,function
	.thumb_func
Cmd_if_has_move:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L973
	ldr	r5, [r0]
	add	r7, r5, #0x2
	ldrb	r1, [r5, #0x1]
	add	r6, r0, #0
	cmp	r1, #0x1
	beq	.L938	@cond_branch
	cmp	r1, #0x1
	bgt	.L970	@cond_branch
	cmp	r1, #0
	beq	.L959	@cond_branch
	b	.L937
.L974:
	.align	2, 0
.L973:
	.word	gAIScriptPtr
.L970:
	cmp	r1, #0x2
	beq	.L959	@cond_branch
	cmp	r1, #0x3
	beq	.L947	@cond_branch
	b	.L937
.L938:
	mov	r4, #0x0
	ldr	r3, .L975
	ldr	r2, .L975+0x4
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldrh	r0, [r0]
	ldrh	r5, [r5, #0x2]
	cmp	r0, r5
	beq	.L940	@cond_branch
	mov	r5, #0x5c
.L941:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L940	@cond_branch
	lsl	r1, r4, #0x1
	ldrb	r0, [r2]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r3
	ldrh	r0, [r1]
	ldrh	r1, [r7]
	cmp	r0, r1
	bne	.L941	@cond_branch
.L940:
	cmp	r4, #0x4
	beq	.L971	@cond_branch
	b	.L966
.L976:
	.align	2, 0
.L975:
	.word	gBattleMons
	.word	sBattler_AI
.L947:
	ldr	r3, .L977
	ldr	r2, .L977+0x4
	ldrb	r1, [r2]
	mov	r0, #0x2
	eor	r0, r0, r1
	mov	r1, #0x5c
	mul	r1, r1, r0
	add	r0, r1, r3
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L948	@cond_branch
	add	r0, r5, #0
	b	.L972
.L978:
	.align	2, 0
.L977:
	.word	gBattleMons
	.word	sBattler_AI
.L948:
	mov	r4, #0x0
	add	r3, r3, #0xc
	add	r0, r1, r3
	ldrh	r0, [r0]
	ldrh	r5, [r5, #0x2]
	cmp	r0, r5
	beq	.L940	@cond_branch
	mov	ip, r3
	add	r5, r2, #0
	mov	r3, #0x2
.L952:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L940	@cond_branch
	lsl	r1, r4, #0x1
	ldrb	r0, [r5]
	add	r2, r3, #0
	eor	r2, r2, r0
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, ip
	ldrh	r0, [r1]
	ldrh	r1, [r7]
	cmp	r0, r1
	bne	.L952	@cond_branch
	b	.L940
.L959:
	mov	r4, #0x0
	ldr	r3, .L979
	ldr	r0, [r3]
	ldr	r1, [r0, #0x18]
	ldr	r2, .L979+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrh	r1, [r7]
	cmp	r0, r1
	beq	.L961	@cond_branch
	add	r7, r3, #0
	add	r5, r2, #0
	add	r3, r1, #0
.L962:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L961	@cond_branch
	ldr	r0, [r7]
	ldr	r2, [r0, #0x18]
	lsl	r1, r4, #0x1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r2, r2, r1
	ldrh	r0, [r2]
	cmp	r0, r3
	bne	.L962	@cond_branch
.L961:
	cmp	r4, #0x4
	bne	.L966	@cond_branch
.L971:
	ldr	r0, [r6]
.L972:
	add	r0, r0, #0x8
	str	r0, [r6]
	b	.L937
.L980:
	.align	2, 0
.L979:
	.word	gBattleResources
	.word	gBattlerTarget
.L966:
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r6]
.L937:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe94:
	.size	 Cmd_if_has_move,.Lfe94-Cmd_if_has_move
	.align	2, 0
	.type	 Cmd_if_doesnt_have_move,function
	.thumb_func
Cmd_if_doesnt_have_move:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L1007
	ldr	r0, [r1]
	add	r6, r0, #0x2
	ldrb	r0, [r0, #0x1]
	add	r5, r1, #0
	cmp	r0, #0x1
	beq	.L984	@cond_branch
	cmp	r0, #0x1
	bgt	.L1005	@cond_branch
	cmp	r0, #0
	beq	.L994	@cond_branch
	b	.L982
.L1008:
	.align	2, 0
.L1007:
	.word	gAIScriptPtr
.L1005:
	cmp	r0, #0x2
	beq	.L994	@cond_branch
	cmp	r0, #0x3
	bne	.L982	@cond_branch
.L984:
	mov	r3, #0x0
	ldr	r2, .L1009
	ldr	r4, .L1009+0x4
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldrh	r1, [r6]
	cmp	r0, r1
	beq	.L986	@cond_branch
	add	r7, r4, #0
	mov	r6, #0x5c
	add	r4, r2, #0
	add	r2, r1, #0
.L987:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L986	@cond_branch
	lsl	r1, r3, #0x1
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r1, r1, r0
	add	r1, r1, r4
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L987	@cond_branch
.L986:
	cmp	r3, #0x4
	bne	.L1006	@cond_branch
	b	.L1001
.L1010:
	.align	2, 0
.L1009:
	.word	gBattleMons
	.word	sBattler_AI
.L994:
	mov	r3, #0x0
	ldr	r4, .L1011
	ldr	r0, [r4]
	ldr	r1, [r0, #0x18]
	ldr	r2, .L1011+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrh	r1, [r6]
	cmp	r0, r1
	beq	.L996	@cond_branch
	add	r7, r4, #0
	add	r6, r2, #0
	add	r4, r1, #0
.L997:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L996	@cond_branch
	ldr	r0, [r7]
	ldr	r2, [r0, #0x18]
	lsl	r1, r3, #0x1
	ldrb	r0, [r6]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r2, r2, r1
	ldrh	r0, [r2]
	cmp	r0, r4
	bne	.L997	@cond_branch
.L996:
	cmp	r3, #0x4
	beq	.L1001	@cond_branch
.L1006:
	ldr	r0, [r5]
	add	r0, r0, #0x8
	str	r0, [r5]
	b	.L982
.L1012:
	.align	2, 0
.L1011:
	.word	gBattleResources
	.word	gBattlerTarget
.L1001:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
.L982:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe95:
	.size	 Cmd_if_doesnt_have_move,.Lfe95-Cmd_if_doesnt_have_move
	.align	2, 0
	.type	 Cmd_if_has_move_with_effect,function
	.thumb_func
Cmd_if_has_move_with_effect:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L1039
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r5, r1, #0
	cmp	r0, #0x1
	beq	.L1016	@cond_branch
	cmp	r0, #0x1
	bgt	.L1037	@cond_branch
	cmp	r0, #0
	beq	.L1026	@cond_branch
	b	.L1014
.L1040:
	.align	2, 0
.L1039:
	.word	gAIScriptPtr
.L1037:
	cmp	r0, #0x2
	beq	.L1026	@cond_branch
	cmp	r0, #0x3
	bne	.L1014	@cond_branch
.L1016:
	mov	r3, #0x0
	ldr	r1, .L1041
	ldr	r0, .L1041+0x4
	ldrb	r2, [r0]
	ldr	r6, .L1041+0x8
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
	ldr	r4, .L1041+0xc
.L1020:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1019	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r4]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1018	@cond_branch
.L1019:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1020	@cond_branch
.L1018:
	cmp	r3, #0x4
	beq	.L1038	@cond_branch
	b	.L1033
.L1042:
	.align	2, 0
.L1041:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
	.word	gAIScriptPtr
.L1026:
	mov	r3, #0x0
	ldr	r1, .L1043
	ldr	r0, .L1043+0x4
	ldrb	r2, [r0]
	ldr	r7, .L1043+0x8
	ldr	r6, .L1043+0xc
	lsl	r4, r2, #0x4
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L1030:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1029	@cond_branch
	ldr	r0, [r6]
	ldr	r0, [r0, #0x18]
	add	r0, r0, r4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, [r5]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1028	@cond_branch
.L1029:
	add	r4, r4, #0x2
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1030	@cond_branch
.L1028:
	cmp	r3, #0x4
	bne	.L1033	@cond_branch
.L1038:
	ldr	r0, [r5]
	add	r0, r0, #0x7
	str	r0, [r5]
	b	.L1014
.L1044:
	.align	2, 0
.L1043:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gBattleResources
.L1033:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
.L1014:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 Cmd_if_has_move_with_effect,.Lfe96-Cmd_if_has_move_with_effect
	.align	2, 0
	.type	 Cmd_if_doesnt_have_move_with_effect,function
	.thumb_func
Cmd_if_doesnt_have_move_with_effect:
	push	{r4, r5, r6, lr}
	ldr	r1, .L1071
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r0, #0x1
	beq	.L1048	@cond_branch
	cmp	r0, #0x1
	bgt	.L1069	@cond_branch
	cmp	r0, #0
	beq	.L1058	@cond_branch
	b	.L1046
.L1072:
	.align	2, 0
.L1071:
	.word	gAIScriptPtr
.L1069:
	cmp	r0, #0x2
	beq	.L1058	@cond_branch
	cmp	r0, #0x3
	bne	.L1046	@cond_branch
.L1048:
	mov	r3, #0x0
	ldr	r1, .L1073
	ldr	r0, .L1073+0x4
	ldrb	r2, [r0]
	ldr	r6, .L1073+0x8
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
	ldr	r5, .L1073+0xc
.L1052:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1051	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r5]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1050	@cond_branch
.L1051:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1052	@cond_branch
.L1050:
	cmp	r3, #0x4
	bne	.L1070	@cond_branch
	b	.L1065
.L1074:
	.align	2, 0
.L1073:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
	.word	gAIScriptPtr
.L1058:
	mov	r3, #0x0
	ldr	r0, .L1075
	ldr	r0, [r0]
	ldr	r1, [r0, #0x18]
	ldr	r0, .L1075+0x4
	ldrb	r0, [r0]
	ldr	r6, .L1075+0x8
	lsl	r0, r0, #0x4
	add	r2, r0, r1
	ldr	r5, .L1075+0xc
.L1062:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1061	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r5]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1060	@cond_branch
.L1061:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1062	@cond_branch
.L1060:
	cmp	r3, #0x4
	beq	.L1065	@cond_branch
.L1070:
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	b	.L1046
.L1076:
	.align	2, 0
.L1075:
	.word	gBattleResources
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gAIScriptPtr
.L1065:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L1046:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe97:
	.size	 Cmd_if_doesnt_have_move_with_effect,.Lfe97-Cmd_if_doesnt_have_move_with_effect
	.align	2, 0
	.type	 Cmd_if_any_move_disabled_or_encored,function
	.thumb_func
Cmd_if_any_move_disabled_or_encored:
	push	{r4, r5, lr}
	ldr	r0, .L1091
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L1078	@cond_branch
	ldr	r0, .L1091+0x4
	b	.L1088
.L1092:
	.align	2, 0
.L1091:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1078:
	ldr	r0, .L1093
.L1088:
	ldrb	r3, [r0]
	add	r4, r5, #0
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x2]
	cmp	r0, #0
	bne	.L1080	@cond_branch
	ldr	r0, .L1093+0x4
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L1089	@cond_branch
	b	.L1090
.L1094:
	.align	2, 0
.L1093:
	.word	gBattlerTarget
	.word	gDisableStructs
.L1080:
	cmp	r0, #0x1
	beq	.L1084	@cond_branch
.L1089:
	add	r0, r2, #0x7
	str	r0, [r4]
	b	.L1083
.L1084:
	ldr	r0, .L1095
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0
	beq	.L1086	@cond_branch
.L1090:
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1083
.L1096:
	.align	2, 0
.L1095:
	.word	gDisableStructs
.L1086:
	add	r0, r2, #0x7
	str	r0, [r5]
.L1083:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe98:
	.size	 Cmd_if_any_move_disabled_or_encored,.Lfe98-Cmd_if_any_move_disabled_or_encored
	.align	2, 0
	.type	 Cmd_if_curr_move_disabled_or_encored,function
	.thumb_func
Cmd_if_curr_move_disabled_or_encored:
	push	{r4, lr}
	ldr	r4, .L1108
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x1]
	cmp	r0, #0
	beq	.L1099	@cond_branch
	cmp	r0, #0x1
	beq	.L1102	@cond_branch
	b	.L1103
.L1109:
	.align	2, 0
.L1108:
	.word	gAIScriptPtr
.L1099:
	ldr	r2, .L1110
	ldr	r0, .L1110+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L1110+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	ldrh	r0, [r0, #0x4]
	ldrh	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L1107	@cond_branch
	b	.L1103
.L1111:
	.align	2, 0
.L1110:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	gBattleResources
.L1102:
	ldr	r2, .L1112
	ldr	r0, .L1112+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L1112+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	ldrh	r0, [r0, #0x6]
	ldrh	r1, [r1, #0x2]
	cmp	r0, r1
	bne	.L1103	@cond_branch
.L1107:
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1098
.L1113:
	.align	2, 0
.L1112:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	gBattleResources
.L1103:
	add	r0, r3, #0x6
	str	r0, [r4]
.L1098:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 Cmd_if_curr_move_disabled_or_encored,.Lfe99-Cmd_if_curr_move_disabled_or_encored
	.align	2, 0
	.type	 Cmd_flee,function
	.thumb_func
Cmd_flee:
	ldr	r0, .L1115
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xb
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
	bx	lr
.L1116:
	.align	2, 0
.L1115:
	.word	gBattleResources
.Lfe100:
	.size	 Cmd_flee,.Lfe100-Cmd_flee
	.align	2, 0
	.type	 Cmd_if_random_safari_flee,function
	.thumb_func
Cmd_if_random_safari_flee:
	push	{r4, lr}
	ldr	r0, .L1120
	ldr	r0, [r0]
	add	r0, r0, #0x7a
	ldrb	r0, [r0]
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcs	.L1118	@cond_branch
	ldr	r3, .L1120+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1119
.L1121:
	.align	2, 0
.L1120:
	.word	gBattleStruct
	.word	gAIScriptPtr
.L1118:
	ldr	r1, .L1122
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1119:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1123:
	.align	2, 0
.L1122:
	.word	gAIScriptPtr
.Lfe101:
	.size	 Cmd_if_random_safari_flee,.Lfe101-Cmd_if_random_safari_flee
	.align	2, 0
	.type	 Cmd_watch,function
	.thumb_func
Cmd_watch:
	ldr	r0, .L1125
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xd
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
	bx	lr
.L1126:
	.align	2, 0
.L1125:
	.word	gBattleResources
.Lfe102:
	.size	 Cmd_watch,.Lfe102-Cmd_watch
	.align	2, 0
	.type	 Cmd_get_hold_effect,function
	.thumb_func
Cmd_get_hold_effect:
	push	{r4, lr}
	ldr	r0, .L1131
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L1128	@cond_branch
	ldr	r0, .L1131+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x48
	add	r0, r0, r4
	ldrb	r0, [r0]
	b	.L1130
.L1132:
	.align	2, 0
.L1131:
	.word	gAIScriptPtr
	.word	gBattleResources
.L1128:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBattlerHoldEffect
	ldr	r1, .L1133
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
.L1130:
	str	r0, [r1, #0x8]
	ldr	r1, .L1133+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1134:
	.align	2, 0
.L1133:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe103:
	.size	 Cmd_get_hold_effect,.Lfe103-Cmd_get_hold_effect
	.align	2, 0
	.type	 Cmd_if_holds_item,function
	.thumb_func
Cmd_if_holds_item:
	push	{r4, lr}
	ldr	r0, .L1140
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r0, #0x1
	ldr	r1, .L1140+0x4
	ldrb	r2, [r1]
	add	r1, r3, #0
	and	r1, r1, r0
	and	r0, r0, r2
	cmp	r1, r0
	bne	.L1136	@cond_branch
	ldr	r1, .L1140+0x8
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r3, [r0, #0x30]
	b	.L1137
.L1141:
	.align	2, 0
.L1140:
	.word	gAIScriptPtr
	.word	sBattler_AI
	.word	gBattleMons
.L1136:
	ldr	r0, .L1142
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x48
	add	r0, r0, r3
	ldrb	r3, [r0]
.L1137:
	ldr	r4, .L1142+0x4
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r1, r3
	bne	.L1138	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1139
.L1143:
	.align	2, 0
.L1142:
	.word	gBattleResources
	.word	gAIScriptPtr
.L1138:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L1139:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe104:
	.size	 Cmd_if_holds_item,.Lfe104-Cmd_if_holds_item
	.align	2, 0
	.type	 Cmd_get_gender,function
	.thumb_func
Cmd_get_gender:
	push	{lr}
	ldr	r0, .L1148
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L1145	@cond_branch
	ldr	r0, .L1148+0x4
	b	.L1147
.L1149:
	.align	2, 0
.L1148:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1145:
	ldr	r0, .L1150
.L1147:
	ldrb	r1, [r0]
	ldr	r2, .L1150+0x4
	mov	r0, #0x5c
	mul	r1, r1, r0
	add	r0, r1, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	add	r2, r2, #0x4c
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	GetGenderFromSpeciesAndPersonality
	ldr	r1, .L1150+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r1, .L1150+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1151:
	.align	2, 0
.L1150:
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe105:
	.size	 Cmd_get_gender,.Lfe105-Cmd_get_gender
	.align	2, 0
	.type	 Cmd_is_first_turn_for,function
	.thumb_func
Cmd_is_first_turn_for:
	push	{r4, lr}
	ldr	r0, .L1156
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L1153	@cond_branch
	ldr	r0, .L1156+0x4
	b	.L1155
.L1157:
	.align	2, 0
.L1156:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1153:
	ldr	r0, .L1158
.L1155:
	ldrb	r3, [r0]
	ldr	r0, .L1158+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1158+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x19]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1159:
	.align	2, 0
.L1158:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gDisableStructs
.Lfe106:
	.size	 Cmd_is_first_turn_for,.Lfe106-Cmd_is_first_turn_for
	.align	2, 0
	.type	 Cmd_get_stockpile_count,function
	.thumb_func
Cmd_get_stockpile_count:
	push	{r4, lr}
	ldr	r0, .L1164
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L1161	@cond_branch
	ldr	r0, .L1164+0x4
	b	.L1163
.L1165:
	.align	2, 0
.L1164:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1161:
	ldr	r0, .L1166
.L1163:
	ldrb	r3, [r0]
	ldr	r0, .L1166+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1166+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x9]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1167:
	.align	2, 0
.L1166:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gDisableStructs
.Lfe107:
	.size	 Cmd_get_stockpile_count,.Lfe107-Cmd_get_stockpile_count
	.align	2, 0
	.type	 Cmd_is_double_battle,function
	.thumb_func
Cmd_is_double_battle:
	ldr	r0, .L1169
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, .L1169+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	str	r0, [r2, #0x8]
	ldr	r1, .L1169+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1170:
	.align	2, 0
.L1169:
	.word	gBattleResources
	.word	gBattleTypeFlags
	.word	gAIScriptPtr
.Lfe108:
	.size	 Cmd_is_double_battle,.Lfe108-Cmd_is_double_battle
	.align	2, 0
	.type	 Cmd_get_used_held_item,function
	.thumb_func
Cmd_get_used_held_item:
	push	{lr}
	ldr	r0, .L1175
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r3, r0, #0
	cmp	r1, #0x1
	bne	.L1172	@cond_branch
	ldr	r0, .L1175+0x4
	b	.L1174
.L1176:
	.align	2, 0
.L1175:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1172:
	ldr	r0, .L1177
.L1174:
	ldrb	r1, [r0]
	ldr	r0, .L1177+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, .L1177+0x8
	ldr	r0, [r0]
	lsl	r1, r1, #0x1
	add	r0, r0, #0xb0
	add	r0, r0, r1
	ldrh	r0, [r0]
	str	r0, [r2, #0x8]
	ldr	r0, [r3]
	add	r0, r0, #0x2
	str	r0, [r3]
	pop	{r0}
	bx	r0
.L1178:
	.align	2, 0
.L1177:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gBattleStruct
.Lfe109:
	.size	 Cmd_get_used_held_item,.Lfe109-Cmd_get_used_held_item
	.align	2, 0
	.type	 Cmd_get_move_type_from_result,function
	.thumb_func
Cmd_get_move_type_from_result:
	ldr	r0, .L1180
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1180+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
	str	r0, [r3, #0x8]
	ldr	r1, .L1180+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1181:
	.align	2, 0
.L1180:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe110:
	.size	 Cmd_get_move_type_from_result,.Lfe110-Cmd_get_move_type_from_result
	.align	2, 0
	.type	 Cmd_get_move_power_from_result,function
	.thumb_func
Cmd_get_move_power_from_result:
	ldr	r0, .L1183
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1183+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	str	r0, [r3, #0x8]
	ldr	r1, .L1183+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1184:
	.align	2, 0
.L1183:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe111:
	.size	 Cmd_get_move_power_from_result,.Lfe111-Cmd_get_move_power_from_result
	.align	2, 0
	.type	 Cmd_get_move_effect_from_result,function
	.thumb_func
Cmd_get_move_effect_from_result:
	ldr	r0, .L1186
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1186+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	str	r0, [r3, #0x8]
	ldr	r1, .L1186+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1187:
	.align	2, 0
.L1186:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe112:
	.size	 Cmd_get_move_effect_from_result,.Lfe112-Cmd_get_move_effect_from_result
	.align	2, 0
	.type	 Cmd_get_protect_count,function
	.thumb_func
Cmd_get_protect_count:
	push	{r4, lr}
	ldr	r0, .L1192
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L1189	@cond_branch
	ldr	r0, .L1192+0x4
	b	.L1191
.L1193:
	.align	2, 0
.L1192:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1189:
	ldr	r0, .L1194
.L1191:
	ldrb	r3, [r0]
	ldr	r0, .L1194+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1194+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1195:
	.align	2, 0
.L1194:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gDisableStructs
.Lfe113:
	.size	 Cmd_get_protect_count,.Lfe113-Cmd_get_protect_count
	.align	2, 0
	.type	 Cmd_if_move_flag,function
	.thumb_func
Cmd_if_move_flag:
	push	{r4, r5, lr}
	ldr	r5, .L1199
	ldr	r4, [r5]
	ldrb	r2, [r4, #0x1]
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r3, .L1199+0x4
	ldr	r0, .L1199+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1197	@cond_branch
	ldrb	r1, [r4, #0x5]
	ldrb	r0, [r4, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1198
.L1200:
	.align	2, 0
.L1199:
	.word	gAIScriptPtr
	.word	gBattleMoves
	.word	gBattleResources
.L1197:
	add	r0, r4, #0
	add	r0, r0, #0x9
	str	r0, [r5]
.L1198:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 Cmd_if_move_flag,.Lfe114-Cmd_if_move_flag
	.align	2, 0
	.type	 Cmd_if_field_status,function
	.thumb_func
Cmd_if_field_status:
	push	{lr}
	ldr	r3, .L1204
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L1204+0x4
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1202	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1203
.L1205:
	.align	2, 0
.L1204:
	.word	gAIScriptPtr
	.word	gFieldStatuses
.L1202:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L1203:
	pop	{r0}
	bx	r0
.Lfe115:
	.size	 Cmd_if_field_status,.Lfe115-Cmd_if_field_status
	.align	2, 0
	.type	 Cmd_get_move_accuracy,function
	.thumb_func
Cmd_get_move_accuracy:
	ldr	r0, .L1207
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1207+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	str	r0, [r3, #0x8]
	ldr	r1, .L1207+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1208:
	.align	2, 0
.L1207:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe116:
	.size	 Cmd_get_move_accuracy,.Lfe116-Cmd_get_move_accuracy
	.align	2, 0
	.type	 Cmd_call_if_eq,function
	.thumb_func
Cmd_call_if_eq:
	push	{r4, lr}
	ldr	r0, .L1212
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r4, .L1212+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, [r2, #0x8]
	cmp	r0, r1
	bne	.L1210	@cond_branch
	add	r0, r3, #0x7
	bl	AIStackPushVar
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1211
.L1213:
	.align	2, 0
.L1212:
	.word	gBattleResources
	.word	gAIScriptPtr
.L1210:
	add	r0, r3, #0x7
	str	r0, [r4]
.L1211:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe117:
	.size	 Cmd_call_if_eq,.Lfe117-Cmd_call_if_eq
	.align	2, 0
	.type	 Cmd_call_if_move_flag,function
	.thumb_func
Cmd_call_if_move_flag:
	push	{r4, r5, lr}
	ldr	r5, .L1217
	ldr	r4, [r5]
	ldrb	r2, [r4, #0x1]
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r3, .L1217+0x4
	ldr	r0, .L1217+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1215	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x9
	bl	AIStackPushVar
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1216
.L1218:
	.align	2, 0
.L1217:
	.word	gAIScriptPtr
	.word	gBattleMoves
	.word	gBattleResources
.L1215:
	add	r0, r4, #0
	add	r0, r0, #0x9
	str	r0, [r5]
.L1216:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe118:
	.size	 Cmd_call_if_move_flag,.Lfe118-Cmd_call_if_move_flag
	.align	2, 0
	.type	 Cmd_nullsub_57,function
	.thumb_func
Cmd_nullsub_57:
	bx	lr
.Lfe119:
	.size	 Cmd_nullsub_57,.Lfe119-Cmd_nullsub_57
	.align	2, 0
	.type	 Cmd_call,function
	.thumb_func
Cmd_call:
	push	{r4, lr}
	ldr	r4, .L1221
	ldr	r0, [r4]
	add	r0, r0, #0x5
	bl	AIStackPushVar
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1222:
	.align	2, 0
.L1221:
	.word	gAIScriptPtr
.Lfe120:
	.size	 Cmd_call,.Lfe120-Cmd_call
	.align	2, 0
	.type	 Cmd_goto,function
	.thumb_func
Cmd_goto:
	ldr	r3, .L1224
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	bx	lr
.L1225:
	.align	2, 0
.L1224:
	.word	gAIScriptPtr
.Lfe121:
	.size	 Cmd_goto,.Lfe121-Cmd_goto
	.align	2, 0
	.type	 Cmd_end,function
	.thumb_func
Cmd_end:
	push	{lr}
	bl	AIStackPop
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1227	@cond_branch
	ldr	r0, .L1228
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
.L1227:
	pop	{r0}
	bx	r0
.L1229:
	.align	2, 0
.L1228:
	.word	gBattleResources
.Lfe122:
	.size	 Cmd_end,.Lfe122-Cmd_end
	.align	2, 0
	.type	 Cmd_if_level_cond,function
	.thumb_func
Cmd_if_level_cond:
	push	{r4, r5, lr}
	ldr	r5, .L1245
	ldr	r4, [r5]
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1
	beq	.L1235	@cond_branch
	cmp	r0, #0x1
	bgt	.L1243	@cond_branch
	cmp	r0, #0
	beq	.L1232	@cond_branch
	b	.L1231
.L1246:
	.align	2, 0
.L1245:
	.word	gAIScriptPtr
.L1243:
	cmp	r0, #0x2
	beq	.L1238	@cond_branch
	b	.L1231
.L1232:
	ldr	r3, .L1247
	ldr	r0, .L1247+0x4
	ldrb	r0, [r0]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2c
	ldr	r0, .L1247+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bhi	.L1244	@cond_branch
	b	.L1239
.L1248:
	.align	2, 0
.L1247:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattlerTarget
.L1235:
	ldr	r3, .L1249
	ldr	r0, .L1249+0x4
	ldrb	r0, [r0]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2c
	ldr	r0, .L1249+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L1244	@cond_branch
	b	.L1239
.L1250:
	.align	2, 0
.L1249:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattlerTarget
.L1238:
	ldr	r3, .L1251
	ldr	r0, .L1251+0x4
	ldrb	r0, [r0]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2c
	ldr	r0, .L1251+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L1239	@cond_branch
.L1244:
	ldrb	r1, [r4, #0x2]
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1231
.L1252:
	.align	2, 0
.L1251:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattlerTarget
.L1239:
	add	r0, r4, #0x6
	str	r0, [r5]
.L1231:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe123:
	.size	 Cmd_if_level_cond,.Lfe123-Cmd_if_level_cond
	.align	2, 0
	.type	 Cmd_if_target_taunted,function
	.thumb_func
Cmd_if_target_taunted:
	push	{lr}
	ldr	r2, .L1256
	ldr	r0, .L1256+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x16]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L1254	@cond_branch
	ldr	r3, .L1256+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1255
.L1257:
	.align	2, 0
.L1256:
	.word	gDisableStructs
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L1254:
	ldr	r1, .L1258
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1255:
	pop	{r0}
	bx	r0
.L1259:
	.align	2, 0
.L1258:
	.word	gAIScriptPtr
.Lfe124:
	.size	 Cmd_if_target_taunted,.Lfe124-Cmd_if_target_taunted
	.align	2, 0
	.type	 Cmd_if_target_not_taunted,function
	.thumb_func
Cmd_if_target_not_taunted:
	push	{lr}
	ldr	r2, .L1263
	ldr	r0, .L1263+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x16]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bne	.L1261	@cond_branch
	ldr	r3, .L1263+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1262
.L1264:
	.align	2, 0
.L1263:
	.word	gDisableStructs
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L1261:
	ldr	r1, .L1265
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1262:
	pop	{r0}
	bx	r0
.L1266:
	.align	2, 0
.L1265:
	.word	gAIScriptPtr
.Lfe125:
	.size	 Cmd_if_target_not_taunted,.Lfe125-Cmd_if_target_not_taunted
	.align	2, 0
	.type	 Cmd_if_target_is_ally,function
	.thumb_func
Cmd_if_target_is_ally:
	push	{lr}
	ldr	r0, .L1270
	ldrb	r3, [r0]
	mov	r0, #0x1
	ldr	r1, .L1270+0x4
	ldrb	r2, [r1]
	add	r1, r0, #0
	and	r1, r1, r3
	and	r0, r0, r2
	cmp	r1, r0
	bne	.L1268	@cond_branch
	ldr	r3, .L1270+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1269
.L1271:
	.align	2, 0
.L1270:
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L1268:
	ldr	r1, .L1272
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1269:
	pop	{r0}
	bx	r0
.L1273:
	.align	2, 0
.L1272:
	.word	gAIScriptPtr
.Lfe126:
	.size	 Cmd_if_target_is_ally,.Lfe126-Cmd_if_target_is_ally
	.align	2, 0
	.type	 Cmd_if_flash_fired,function
	.thumb_func
Cmd_if_flash_fired:
	push	{r4, lr}
	ldr	r4, .L1277
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	ldr	r1, .L1277+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1275	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1276
.L1278:
	.align	2, 0
.L1277:
	.word	gAIScriptPtr
	.word	gBattleResources
.L1275:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L1276:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe127:
	.size	 Cmd_if_flash_fired,.Lfe127-Cmd_if_flash_fired
	.align	2, 0
	.type	 AIStackPushVar,function
	.thumb_func
AIStackPushVar:
	push	{r4, lr}
	ldr	r1, .L1280
	ldr	r1, [r1]
	ldr	r3, [r1, #0x1c]
	add	r4, r3, #0
	add	r4, r4, #0x20
	ldrb	r1, [r4]
	add	r2, r1, #0x1
	strb	r2, [r4]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x16
	add	r3, r3, r1
	str	r0, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1281:
	.align	2, 0
.L1280:
	.word	gBattleResources
.Lfe128:
	.size	 AIStackPushVar,.Lfe128-AIStackPushVar
	.align	2, 0
	.type	 AIStackPushVar_cursor,function
	.thumb_func
AIStackPushVar_cursor:
	ldr	r0, .L1283
	ldr	r0, [r0]
	ldr	r2, [r0, #0x1c]
	add	r3, r2, #0
	add	r3, r3, #0x20
	ldrb	r0, [r3]
	add	r1, r0, #0x1
	strb	r1, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r2, r2, r0
	ldr	r0, .L1283+0x4
	ldr	r0, [r0]
	str	r0, [r2]
	bx	lr
.L1284:
	.align	2, 0
.L1283:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe129:
	.size	 AIStackPushVar_cursor,.Lfe129-AIStackPushVar_cursor
	.align	2, 0
	.type	 AIStackPop,function
	.thumb_func
AIStackPop:
	push	{lr}
	ldr	r3, .L1289
	ldr	r0, [r3]
	ldr	r0, [r0, #0x1c]
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L1286	@cond_branch
	mov	r0, #0x0
	b	.L1288
.L1290:
	.align	2, 0
.L1289:
	.word	gBattleResources
.L1286:
	sub	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r2, .L1291
	ldr	r0, [r3]
	ldr	r1, [r0, #0x1c]
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r2]
	mov	r0, #0x1
.L1288:
	pop	{r1}
	bx	r1
.L1292:
	.align	2, 0
.L1291:
	.word	gAIScriptPtr
.Lfe130:
	.size	 AIStackPop,.Lfe130-AIStackPop
	.align	2, 0
	.type	 Cmd_get_ally_chosen_move,function
	.thumb_func
Cmd_get_ally_chosen_move:
	push	{r4, r5, lr}
	ldr	r5, .L1300
	ldrb	r0, [r5]
	mov	r1, #0x2
	add	r4, r1, #0
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L1299	@cond_branch
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L1299	@cond_branch
	ldrb	r5, [r5]
	cmp	r4, r5
	bls	.L1297	@cond_branch
.L1299:
	ldr	r0, .L1300+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
	str	r0, [r1, #0x8]
	b	.L1296
.L1301:
	.align	2, 0
.L1300:
	.word	sBattler_AI
	.word	gBattleResources
.L1297:
	ldr	r0, .L1302
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1302+0x4
	ldr	r0, .L1302+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x7f
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	str	r0, [r3, #0x8]
.L1296:
	ldr	r1, .L1302+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1303:
	.align	2, 0
.L1302:
	.word	gBattleResources
	.word	gBattleMons
	.word	gBattleStruct
	.word	gAIScriptPtr
.Lfe131:
	.size	 Cmd_get_ally_chosen_move,.Lfe131-Cmd_get_ally_chosen_move
	.align	2, 0
	.type	 Cmd_if_has_no_attacking_moves,function
	.thumb_func
Cmd_if_has_no_attacking_moves:
	push	{r4, r5, r6, lr}
	ldr	r5, .L1321
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L1305	@cond_branch
	mov	r3, #0x0
	add	r6, r5, #0
	ldr	r0, .L1321+0x4
	ldr	r5, .L1321+0x8
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r0, r0, #0xc
	add	r2, r1, r0
.L1309:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1308	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L1312	@cond_branch
.L1308:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1309	@cond_branch
	b	.L1312
.L1322:
	.align	2, 0
.L1321:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	gBattleMoves
.L1305:
	mov	r3, #0x0
	add	r6, r5, #0
	lsl	r1, r4, #0x4
	ldr	r0, .L1323
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldr	r4, .L1323+0x4
	add	r2, r1, r0
.L1316:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1315	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L1312	@cond_branch
.L1315:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1316	@cond_branch
.L1312:
	cmp	r3, #0x4
	bne	.L1319	@cond_branch
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r6]
	b	.L1320
.L1324:
	.align	2, 0
.L1323:
	.word	gBattleResources
	.word	gBattleMoves
.L1319:
	ldr	r0, [r6]
	add	r0, r0, #0x6
	str	r0, [r6]
.L1320:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe132:
	.size	 Cmd_if_has_no_attacking_moves,.Lfe132-Cmd_if_has_no_attacking_moves
	.align	2, 0
	.type	 Cmd_get_hazards_count,function
	.thumb_func
Cmd_get_hazards_count:
	push	{r4, lr}
	ldr	r4, .L1332
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r1, #0x70
	beq	.L1327	@cond_branch
	cmp	r1, #0xf7
	beq	.L1328	@cond_branch
	b	.L1326
.L1333:
	.align	2, 0
.L1332:
	.word	gAIScriptPtr
.L1327:
	ldr	r0, .L1334
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1334+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0xa]
	b	.L1331
.L1335:
	.align	2, 0
.L1334:
	.word	gBattleResources
	.word	gSideTimers
.L1328:
	ldr	r0, .L1336
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1336+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0xb]
.L1331:
	str	r0, [r2, #0x8]
.L1326:
	ldr	r1, .L1336+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1337:
	.align	2, 0
.L1336:
	.word	gBattleResources
	.word	gSideTimers
	.word	gAIScriptPtr
.Lfe133:
	.size	 Cmd_get_hazards_count,.Lfe133-Cmd_get_hazards_count
	.align	2, 0
	.type	 Cmd_if_doesnt_hold_berry,function
	.thumb_func
Cmd_if_doesnt_hold_berry:
	push	{r4, lr}
	ldr	r0, .L1343
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L1339	@cond_branch
	ldr	r1, .L1343+0x4
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x30]
	b	.L1340
.L1344:
	.align	2, 0
.L1343:
	.word	gAIScriptPtr
	.word	gBattleMons
.L1339:
	ldr	r0, .L1345
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x48
	add	r0, r0, r4
	ldrb	r0, [r0]
.L1340:
	bl	ItemId_GetPocket
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x7
	bne	.L1341	@cond_branch
	ldr	r1, .L1345+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
	b	.L1342
.L1346:
	.align	2, 0
.L1345:
	.word	gBattleResources
	.word	gAIScriptPtr
.L1341:
	ldr	r3, .L1347
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L1342:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1348:
	.align	2, 0
.L1347:
	.word	gAIScriptPtr
.Lfe134:
	.size	 Cmd_if_doesnt_hold_berry,.Lfe134-Cmd_if_doesnt_hold_berry
	.align	2, 0
	.type	 Cmd_if_share_type,function
	.thumb_func
Cmd_if_share_type:
	push	{r4, r5, lr}
	ldr	r5, .L1352
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	bl	BattleAI_GetWantedBattler
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	DoBattlersShareType
	cmp	r0, #0
	beq	.L1350	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1351
.L1353:
	.align	2, 0
.L1352:
	.word	gAIScriptPtr
.L1350:
	ldr	r0, [r5]
	add	r0, r0, #0x7
	str	r0, [r5]
.L1351:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe135:
	.size	 Cmd_if_share_type,.Lfe135-Cmd_if_share_type
	.align	2, 0
	.type	 Cmd_if_cant_use_last_resort,function
	.thumb_func
Cmd_if_cant_use_last_resort:
	push	{r4, lr}
	ldr	r4, .L1357
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	CanUseLastResort
	cmp	r0, #0
	beq	.L1355	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
	b	.L1356
.L1358:
	.align	2, 0
.L1357:
	.word	gAIScriptPtr
.L1355:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L1356:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe136:
	.size	 Cmd_if_cant_use_last_resort,.Lfe136-Cmd_if_cant_use_last_resort
	.align	2, 0
	.type	 GetMovesArray,function
	.thumb_func
GetMovesArray:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L1361	@cond_branch
	mov	r0, #0x2
	eor	r0, r0, r4
	bl	IsBattlerAIControlled
	cmp	r0, #0
	beq	.L1360	@cond_branch
.L1361:
	mov	r0, #0x5c
	mul	r0, r0, r4
	ldr	r1, .L1366
	b	.L1365
.L1367:
	.align	2, 0
.L1366:
	.word	gBattleMons+0xc
.L1360:
	ldr	r0, .L1368
	ldr	r0, [r0]
	lsl	r1, r4, #0x4
	ldr	r0, [r0, #0x18]
.L1365:
	add	r0, r0, r1
	pop	{r4}
	pop	{r1}
	bx	r1
.L1369:
	.align	2, 0
.L1368:
	.word	gBattleResources
.Lfe137:
	.size	 GetMovesArray,.Lfe137-GetMovesArray
	.align	2, 0
	.type	 HasMoveWithSplit,function
	.thumb_func
HasMoveWithSplit:
	push	{r4, r5, r6, r7, lr}
	add	r6, r1, #0
	bl	GetMovesArray
	mov	r5, #0x0
	ldr	r7, .L1378
	add	r4, r0, #0
.L1374:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L1373	@cond_branch
	cmp	r0, r7
	beq	.L1373	@cond_branch
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r6
	bne	.L1373	@cond_branch
	mov	r0, #0x1
	b	.L1377
.L1379:
	.align	2, 0
.L1378:
	.word	0xffff
.L1373:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1374	@cond_branch
	mov	r0, #0x0
.L1377:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe138:
	.size	 HasMoveWithSplit,.Lfe138-HasMoveWithSplit
	.align	2, 0
	.type	 Cmd_if_has_move_with_split,function
	.thumb_func
Cmd_if_has_move_with_split:
	push	{r4, lr}
	ldr	r4, .L1383
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	ldrb	r1, [r1, #0x2]
	bl	HasMoveWithSplit
	cmp	r0, #0
	beq	.L1381	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1382
.L1384:
	.align	2, 0
.L1383:
	.word	gAIScriptPtr
.L1381:
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
.L1382:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe139:
	.size	 Cmd_if_has_move_with_split,.Lfe139-Cmd_if_has_move_with_split
	.align	2, 0
	.type	 Cmd_if_has_no_move_with_split,function
	.thumb_func
Cmd_if_has_no_move_with_split:
	push	{r4, lr}
	ldr	r4, .L1388
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	ldrb	r1, [r1, #0x2]
	bl	HasMoveWithSplit
	cmp	r0, #0
	bne	.L1386	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1387
.L1389:
	.align	2, 0
.L1388:
	.word	gAIScriptPtr
.L1386:
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
.L1387:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe140:
	.size	 Cmd_if_has_no_move_with_split,.Lfe140-Cmd_if_has_no_move_with_split
	.align	2, 0
	.type	 MovesWithSplitUnusable,function
	.thumb_func
MovesWithSplitUnusable:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	add	r7, r0, #0
	add	r4, r1, #0
	str	r2, [sp, #0x4]
	mov	r0, #0x0
	mov	r9, r0
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	add	r0, r7, #0
	bl	GetMovesArray
	ldr	r1, .L1401
	mov	r8, r1
	add	r5, r0, #0
	mov	r6, r8
	lsl	r4, r4, #0x18
	mov	sl, r4
.L1394:
	ldrh	r1, [r5]
	cmp	r1, #0
	beq	.L1393	@cond_branch
	ldr	r0, .L1401+0x4
	cmp	r1, r0
	beq	.L1393	@cond_branch
	add	r0, r1, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [sp, #0x4]
	cmp	r0, r4
	bne	.L1393	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [sp, #0x8]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1393	@cond_branch
	ldrh	r0, [r5]
	lsl	r4, r7, #0x18
	lsr	r1, r4, #0x18
	bl	SetTypeBeforeUsingMove
	ldr	r0, .L1401+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L1396	@cond_branch
	mov	r1, #0x3f
	and	r1, r1, r0
	b	.L1397
.L1402:
	.align	2, 0
.L1401:
	.word	gBitTable
	.word	0xffff
	.word	gBattleStruct
.L1396:
	ldr	r2, .L1403
	ldrh	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x3]
.L1397:
	ldrh	r0, [r5]
	lsr	r2, r4, #0x18
	mov	r3, #0x0
	str	r3, [sp]
	mov	r4, sl
	lsr	r3, r4, #0x18
	bl	CalcTypeEffectivenessMultiplier
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1393	@cond_branch
	ldr	r0, [r6]
	mov	r1, r9
	orr	r1, r1, r0
	mov	r9, r1
.L1393:
	add	r5, r5, #0x2
	add	r6, r6, #0x4
	mov	r0, r8
	add	r0, r0, #0xc
	cmp	r6, r0
	ble	.L1394	@cond_branch
	mov	r0, #0x0
	mov	r4, r9
	cmp	r4, #0
	bne	.L1400	@cond_branch
	mov	r0, #0x1
.L1400:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1404:
	.align	2, 0
.L1403:
	.word	gBattleMoves
.Lfe141:
	.size	 MovesWithSplitUnusable,.Lfe141-MovesWithSplitUnusable
	.align	2, 0
	.type	 Cmd_if_physical_moves_unusable,function
	.thumb_func
Cmd_if_physical_moves_unusable:
	push	{r4, r5, lr}
	ldr	r5, .L1408
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	bl	BattleAI_GetWantedBattler
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x0
	bl	MovesWithSplitUnusable
	cmp	r0, #0
	beq	.L1406	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1407
.L1409:
	.align	2, 0
.L1408:
	.word	gAIScriptPtr
.L1406:
	ldr	r0, [r5]
	add	r0, r0, #0x7
	str	r0, [r5]
.L1407:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe142:
	.size	 Cmd_if_physical_moves_unusable,.Lfe142-Cmd_if_physical_moves_unusable
	.align	2, 0
	.type	 Cmd_if_ai_can_go_down,function
	.thumb_func
Cmd_if_ai_can_go_down:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r4, .L1417
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0xfd
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L1417+0x4
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	ldr	r1, [r1, #0x18]
	mov	r5, #0x0
	ldr	r6, .L1417+0x8
	ldr	r7, .L1417+0xc
	add	r4, r1, r0
	ldr	r0, .L1417+0x10
	mov	r9, r0
.L1414:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L1413	@cond_branch
	cmp	r0, r9
	beq	.L1413	@cond_branch
	ldr	r0, .L1417+0x14
	lsl	r1, r5, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1413	@cond_branch
	ldrh	r0, [r4]
	ldr	r1, .L1417
	ldrb	r1, [r1]
	ldrb	r2, [r6]
	bl	AI_CalcDamage
	ldr	r3, .L1417+0x18
	ldrb	r2, [r6]
	mov	r1, #0x5c
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrh	r1, [r1, #0x2a]
	cmp	r0, r1
	blt	.L1413	@cond_branch
	ldr	r2, [r7]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r7]
	b	.L1410
.L1418:
	.align	2, 0
.L1417:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	sBattler_AI
	.word	gAIScriptPtr
	.word	0xffff
	.word	gBitTable
	.word	gBattleMons
.L1413:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1414	@cond_branch
	ldr	r1, .L1419
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1410:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1420:
	.align	2, 0
.L1419:
	.word	gAIScriptPtr
.Lfe143:
	.size	 Cmd_if_ai_can_go_down,.Lfe143-Cmd_if_ai_can_go_down
	.align	2, 0
	.type	 Cmd_if_cant_use_belch,function
	.thumb_func
Cmd_if_cant_use_belch:
	push	{r4, lr}
	ldr	r4, .L1424
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1424+0x4
	ldr	r2, [r1]
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r3, .L1424+0x8
	add	r2, r2, r3
	add	r2, r2, r1
	ldrb	r2, [r2]
	ldr	r3, .L1424+0xc
	ldr	r1, .L1424+0x10
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L1422	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
	b	.L1423
.L1425:
	.align	2, 0
.L1424:
	.word	gAIScriptPtr
	.word	gBattleStruct
	.word	0x2b6
	.word	gBitTable
	.word	gBattlerPartyIndexes
.L1422:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L1423:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe144:
	.size	 Cmd_if_cant_use_belch,.Lfe144-Cmd_if_cant_use_belch
	.align	2, 0
	.type	 Cmd_if_has_move_with_type,function
	.thumb_func
Cmd_if_has_move_with_type:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1438
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetMovesArray
	mov	r6, #0x0
	ldr	r7, .L1438+0x4
	add	r5, r0, #0
	lsl	r4, r4, #0x18
.L1430:
	ldrh	r0, [r5]
	cmp	r0, #0
	beq	.L1429	@cond_branch
	lsr	r1, r4, #0x18
	bl	SetTypeBeforeUsingMove
	ldr	r0, .L1438+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L1432	@cond_branch
	mov	r1, #0x3f
	and	r1, r1, r0
	b	.L1433
.L1439:
	.align	2, 0
.L1438:
	.word	gAIScriptPtr
	.word	gBattleMoves
	.word	gBattleStruct
.L1432:
	ldrh	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r1, [r0, #0x3]
.L1433:
	ldr	r0, .L1440
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x2]
	cmp	r1, r0
	beq	.L1428	@cond_branch
.L1429:
	add	r5, r5, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	bls	.L1430	@cond_branch
.L1428:
	cmp	r6, #0x4
	bne	.L1436	@cond_branch
	ldr	r1, .L1440
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
	b	.L1437
.L1441:
	.align	2, 0
.L1440:
	.word	gAIScriptPtr
.L1436:
	ldr	r3, .L1442
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L1437:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1443:
	.align	2, 0
.L1442:
	.word	gAIScriptPtr
.Lfe145:
	.size	 Cmd_if_has_move_with_type,.Lfe145-Cmd_if_has_move_with_type
	.align	2, 0
	.type	 Cmd_if_has_move_with_flag,function
	.thumb_func
Cmd_if_has_move_with_flag:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1451
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetMovesArray
	ldr	r2, [r4]
	ldrb	r3, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	mov	r5, #0x0
	ldr	r6, .L1451+0x4
	add	r2, r0, #0
.L1448:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1447	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldr	r0, [r1]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1447	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1444
.L1452:
	.align	2, 0
.L1451:
	.word	gAIScriptPtr
	.word	gBattleMoves+0xc
.L1447:
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	bls	.L1448	@cond_branch
	ldr	r1, .L1453
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L1444:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1454:
	.align	2, 0
.L1453:
	.word	gAIScriptPtr
.Lfe146:
	.size	 Cmd_if_has_move_with_flag,.Lfe146-Cmd_if_has_move_with_flag
	.align	2, 0
	.type	 Cmd_if_no_move_used,function
	.thumb_func
Cmd_if_no_move_used:
	push	{r4, r5, lr}
	ldr	r5, .L1465
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAIControlled
	cmp	r0, #0
	bne	.L1456	@cond_branch
	mov	r3, #0x0
	lsl	r1, r4, #0x4
	ldr	r0, .L1465+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldr	r4, .L1465+0x8
	add	r0, r1, r0
.L1460:
	ldrh	r2, [r0]
	cmp	r2, #0
	beq	.L1459	@cond_branch
	cmp	r2, r4
	bne	.L1464	@cond_branch
.L1459:
	add	r0, r0, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bls	.L1460	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1455
.L1466:
	.align	2, 0
.L1465:
	.word	gAIScriptPtr
	.word	gBattleResources
	.word	0xffff
.L1464:
.L1456:
	ldr	r0, [r5]
	add	r0, r0, #0x6
	str	r0, [r5]
.L1455:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe147:
	.size	 Cmd_if_no_move_used,.Lfe147-Cmd_if_no_move_used
	.align	2, 0
	.type	 Cmd_if_battler_absent,function
	.thumb_func
Cmd_if_battler_absent:
	push	{r4, lr}
	ldr	r4, .L1470
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L1468	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1469
.L1471:
	.align	2, 0
.L1470:
	.word	gAIScriptPtr
.L1468:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L1469:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe148:
	.size	 Cmd_if_battler_absent,.Lfe148-Cmd_if_battler_absent
	.align	2, 0
	.type	 Cmd_is_grounded,function
	.thumb_func
Cmd_is_grounded:
	push	{r4, lr}
	ldr	r4, .L1475
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerGrounded
	cmp	r0, #0
	beq	.L1473	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1474
.L1476:
	.align	2, 0
.L1475:
	.word	gAIScriptPtr
.L1473:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L1474:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe149:
	.size	 Cmd_is_grounded,.Lfe149-Cmd_is_grounded
	.align	2, 0
	.type	 Cmd_get_best_dmg_hp_percent,function
	.thumb_func
Cmd_get_best_dmg_hp_percent:
	push	{r4, r5, r6, r7, lr}
	mov	r3, #0x0
	ldr	r4, .L1484
	ldr	r5, .L1484+0x4
	ldr	r7, .L1484+0x8
	ldr	r6, .L1484+0xc
	ldr	r0, [r4]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r5]
	ldr	r0, .L1484+0x10
	ldrb	r0, [r0]
	lsl	r1, r1, #0x4
	lsl	r0, r0, #0x6
	add	r0, r0, #0x14
	add	r1, r1, r0
	add	r1, r1, r2
	mov	r2, #0x3
.L1481:
	ldr	r0, [r1]
	cmp	r0, r3
	ble	.L1480	@cond_branch
	add	r3, r0, #0
.L1480:
	add	r1, r1, #0x4
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L1481	@cond_branch
	ldr	r0, [r4]
	ldr	r4, [r0, #0x14]
	mov	r0, #0x64
	mul	r0, r0, r3
	ldrb	r2, [r5]
	mov	r1, #0x5c
	mul	r1, r1, r2
	add	r1, r1, r7
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	str	r0, [r4, #0x8]
	ldr	r0, [r6]
	add	r0, r0, #0x1
	str	r0, [r6]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1485:
	.align	2, 0
.L1484:
	.word	gBattleResources
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gAIScriptPtr
	.word	sBattler_AI
.Lfe150:
	.size	 Cmd_get_best_dmg_hp_percent,.Lfe150-Cmd_get_best_dmg_hp_percent
	.align	2, 0
	.type	 Cmd_get_curr_dmg_hp_percent,function
	.thumb_func
Cmd_get_curr_dmg_hp_percent:
	push	{r4, lr}
	ldr	r0, .L1487
	ldr	r0, [r0]
	ldr	r4, [r0, #0x14]
	ldrb	r1, [r4, #0x1]
	lsl	r1, r1, #0x2
	ldr	r0, .L1487+0x4
	ldrb	r3, [r0]
	lsl	r0, r3, #0x4
	add	r1, r1, r0
	ldr	r0, .L1487+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r2, .L1487+0xc
	mov	r1, #0x5c
	mul	r1, r1, r3
	add	r1, r1, r2
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	str	r0, [r4, #0x8]
	ldr	r1, .L1487+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1488:
	.align	2, 0
.L1487:
	.word	gBattleResources
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleMons
	.word	gAIScriptPtr
.Lfe151:
	.size	 Cmd_get_curr_dmg_hp_percent,.Lfe151-Cmd_get_curr_dmg_hp_percent
	.align	2, 0
	.type	 Cmd_get_move_split_from_result,function
	.thumb_func
Cmd_get_move_split_from_result:
	push	{r4, lr}
	ldr	r4, .L1490
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	bl	GetBattleMoveSplit
	ldr	r1, [r4]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r1, .L1490+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1491:
	.align	2, 0
.L1490:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe152:
	.size	 Cmd_get_move_split_from_result,.Lfe152-Cmd_get_move_split_from_result
	.align	2, 0
	.type	 Cmd_get_considered_move_split,function
	.thumb_func
Cmd_get_considered_move_split:
	push	{r4, lr}
	ldr	r4, .L1493
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	bl	GetBattleMoveSplit
	ldr	r1, [r4]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r1, .L1493+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1494:
	.align	2, 0
.L1493:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe153:
	.size	 Cmd_get_considered_move_split,.Lfe153-Cmd_get_considered_move_split
	.align	2, 0
	.type	 Cmd_get_considered_move_target,function
	.thumb_func
Cmd_get_considered_move_target:
	ldr	r0, .L1496
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1496+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x7]
	str	r0, [r3, #0x8]
	ldr	r1, .L1496+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1497:
	.align	2, 0
.L1496:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe154:
	.size	 Cmd_get_considered_move_target,.Lfe154-Cmd_get_considered_move_target
	.align	2, 0
	.type	 Cmd_compare_speeds,function
	.thumb_func
Cmd_compare_speeds:
	push	{r4, r5, lr}
	ldr	r5, .L1499
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	bl	BattleAI_GetWantedBattler
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x1
	bl	GetWhoStrikesFirst
	ldr	r1, .L1499+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r5]
	add	r0, r0, #0x3
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1500:
	.align	2, 0
.L1499:
	.word	gAIScriptPtr
	.word	gBattleResources
.Lfe155:
	.size	 Cmd_compare_speeds,.Lfe155-Cmd_compare_speeds
	.align	2, 0
	.type	 FindMoveUsedXTurnsAgo,function
	.thumb_func
FindMoveUsedXTurnsAgo:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	ldr	r2, .L1508
	ldr	r0, [r2]
	ldr	r0, [r0, #0x18]
	lsl	r1, r5, #0x4
	add	r0, r0, r1
	ldrb	r1, [r0, #0xe]
	mov	r3, #0x0
	cmp	r3, r4
	bcs	.L1503	@cond_branch
.L1505:
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L1504	@cond_branch
	mov	r1, #0x2
.L1504:
	add	r3, r3, #0x1
	cmp	r3, r4
	bcc	.L1505	@cond_branch
.L1503:
	ldr	r0, [r2]
	ldr	r0, [r0, #0x18]
	lsl	r1, r1, #0x1
	lsl	r2, r5, #0x4
	add	r1, r1, r2
	add	r0, r0, #0x8
	add	r0, r0, r1
	ldrh	r0, [r0]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1509:
	.align	2, 0
.L1508:
	.word	gBattleResources
.Lfe156:
	.size	 FindMoveUsedXTurnsAgo,.Lfe156-FindMoveUsedXTurnsAgo
	.align	2, 0
	.type	 Cmd_is_wakeup_turn,function
	.thumb_func
Cmd_is_wakeup_turn:
	push	{r4, lr}
	ldr	r0, .L1513
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L1513+0x4
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r4, [r0]
	mov	r0, #0x7
	and	r4, r4, r0
	cmp	r4, #0x1
	bne	.L1511	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x2
	bl	FindMoveUsedXTurnsAgo
	cmp	r0, #0x9c
	bne	.L1511	@cond_branch
	ldr	r0, .L1513+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	str	r4, [r0, #0x8]
	b	.L1512
.L1514:
	.align	2, 0
.L1513:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	gBattleResources
.L1511:
	ldr	r0, .L1515
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
	str	r0, [r1, #0x8]
.L1512:
	ldr	r1, .L1515+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1516:
	.align	2, 0
.L1515:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe157:
	.size	 Cmd_is_wakeup_turn,.Lfe157-Cmd_is_wakeup_turn
	.align	2, 0
	.type	 Cmd_if_has_move_with_accuracy_lt,function
	.thumb_func
Cmd_if_has_move_with_accuracy_lt:
	push	{r4, r5, lr}
	ldr	r4, .L1526
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	ldrb	r4, [r1, #0x2]
	bl	GetMovesArray
	mov	r3, #0x0
	ldr	r5, .L1526+0x4
	add	r2, r0, #0
.L1521:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1520	@cond_branch
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r0, [r1]
	cmp	r0, #0x26
	beq	.L1520	@cond_branch
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0x1
	bls	.L1520	@cond_branch
	cmp	r0, r4
	bcc	.L1519	@cond_branch
.L1520:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bls	.L1521	@cond_branch
.L1519:
	cmp	r3, #0x4
	bne	.L1524	@cond_branch
	ldr	r1, .L1526
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
	b	.L1525
.L1527:
	.align	2, 0
.L1526:
	.word	gAIScriptPtr
	.word	gBattleMoves
.L1524:
	ldr	r3, .L1528
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L1525:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1529:
	.align	2, 0
.L1528:
	.word	gAIScriptPtr
.Lfe158:
	.size	 Cmd_if_has_move_with_accuracy_lt,.Lfe158-Cmd_if_has_move_with_accuracy_lt
.text
	.align	2, 0

