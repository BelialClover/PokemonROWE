@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.type	 sMovement_ShiftRight,object
sMovement_ShiftRight:
	.byte	0x94
	.byte	0xb
	.byte	0x95
	.byte	0xfe
	.size	 sMovement_ShiftRight,4
	.type	 sMovement_ShiftDown,object
sMovement_ShiftDown:
	.byte	0x94
	.byte	0x8
	.byte	0x95
	.byte	0xfe
	.size	 sMovement_ShiftDown,4
	.type	 sMovement_ShiftLeft,object
sMovement_ShiftLeft:
	.byte	0x94
	.byte	0xa
	.byte	0x95
	.byte	0xfe
	.size	 sMovement_ShiftLeft,4
	.type	 sMovement_ShiftUp,object
sMovement_ShiftUp:
	.byte	0x94
	.byte	0x9
	.byte	0x95
	.byte	0xfe
	.size	 sMovement_ShiftUp,4
	.type	 sMovement_FaceRight,object
sMovement_FaceRight:
	.byte	0x3
	.byte	0xfe
	.size	 sMovement_FaceRight,2
	.type	 sMovement_FaceDown,object
sMovement_FaceDown:
	.byte	0x0
	.byte	0xfe
	.size	 sMovement_FaceDown,2
	.type	 sMovement_FaceLeft,object
sMovement_FaceLeft:
	.byte	0x2
	.byte	0xfe
	.size	 sMovement_FaceLeft,2
	.type	 sMovement_FaceUp,object
sMovement_FaceUp:
	.byte	0x1
	.byte	0xfe
	.size	 sMovement_FaceUp,2
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sRotatingTilePuzzle,object
	.size	 sRotatingTilePuzzle,4
sRotatingTilePuzzle:
	.word	0x0
.text
	.align	2, 0
	.globl	InitRotatingTilePuzzle
	.type	 InitRotatingTilePuzzle,function
	.thumb_func
InitRotatingTilePuzzle:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L4
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L3	@cond_branch
	mov	r0, #0x44
	bl	AllocZeroed
	str	r0, [r4]
.L3:
	ldr	r0, [r4]
	add	r0, r0, #0x41
	strb	r5, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	sRotatingTilePuzzle
.Lfe1:
	.size	 InitRotatingTilePuzzle,.Lfe1-InitRotatingTilePuzzle
	.align	2, 0
	.globl	FreeRotatingTilePuzzle
	.type	 FreeRotatingTilePuzzle,function
	.thumb_func
FreeRotatingTilePuzzle:
	push	{r4, lr}
	ldr	r4, .L8
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L7	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L7:
	mov	r0, #0xff
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetObjectEventIdByLocalIdAndMap
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L8+0x4
	add	r0, r0, r1
	bl	ObjectEventClearHeldMovementIfFinished
	bl	ScriptMovement_UnfreezeObjectEvents
	pop	{r4}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	sRotatingTilePuzzle
	.word	gObjectEvents
.Lfe2:
	.size	 FreeRotatingTilePuzzle,.Lfe2-FreeRotatingTilePuzzle
	.align	2, 0
	.globl	MoveRotatingTileObjects
	.type	 MoveRotatingTileObjects,function
	.thumb_func
MoveRotatingTileObjects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	ldr	r0, .L35
	ldr	r0, [r0]
	ldr	r1, .L35+0x4
	add	r1, r1, r0
	mov	r9, r1
	mov	r3, #0x0
	mov	sl, r3
	mov	r8, r3
.L14:
	mov	r0, r8
	lsl	r4, r0, #0x1
	add	r1, r4, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r9
	ldrh	r0, [r1, #0x4]
	add	r0, r0, #0x7
	ldrh	r1, [r1, #0x6]
	add	r1, r1, #0x7
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	MapGridGetMetatileIdAt
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r0, .L35+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	mov	r2, #0xa6
	lsl	r2, r2, #0x2
	cmp	r0, #0
	bne	.L15	@cond_branch
	sub	r2, r2, #0x48
.L15:
	ldr	r0, .L35+0xc
	cmp	r1, r0
	bls	.L13	@cond_branch
	sub	r1, r1, r2
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L19	@cond_branch
	add	r0, r1, #0x7
.L19:
	asr	r2, r0, #0x3
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L13	@cond_branch
	ldr	r3, [sp]
	cmp	r0, r3
	bne	.L13	@cond_branch
	lsl	r0, r2, #0x3
	sub	r0, r1, r0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bhi	.L13	@cond_branch
	mov	r1, #0x0
	mov	r2, #0x0
	cmp	r5, #0x1
	beq	.L26	@cond_branch
	cmp	r5, #0x1
	bgt	.L31	@cond_branch
	cmp	r5, #0
	beq	.L25	@cond_branch
	b	.L13
.L36:
	.align	2, 0
.L35:
	.word	gSaveBlock1Ptr
	.word	0x1250
	.word	sRotatingTilePuzzle
	.word	0x24f
.L31:
	cmp	r5, #0x2
	beq	.L27	@cond_branch
	cmp	r5, #0x3
	beq	.L28	@cond_branch
	b	.L13
.L25:
	ldr	r7, .L37
	mov	r1, #0x1
	b	.L24
.L38:
	.align	2, 0
.L37:
	.word	sMovement_ShiftRight
.L26:
	ldr	r7, .L39
	mov	r2, #0x1
	b	.L24
.L40:
	.align	2, 0
.L39:
	.word	sMovement_ShiftDown
.L27:
	ldr	r7, .L41
	mov	r1, #0xff
	b	.L24
.L42:
	.align	2, 0
.L41:
	.word	sMovement_ShiftLeft
.L28:
	ldr	r7, .L43
	mov	r2, #0xff
.L24:
	mov	r3, r8
	add	r0, r4, r3
	lsl	r0, r0, #0x3
	mov	r3, r9
	add	r4, r0, r3
	lsl	r0, r1, #0x18
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r4, #0x4]
	lsl	r0, r2, #0x18
	asr	r0, r0, #0x18
	ldrh	r3, [r4, #0x6]
	add	r0, r0, r3
	strh	r0, [r4, #0x6]
	ldrb	r0, [r4]
	ldr	r6, .L43+0x4
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	GetObjectEventIdByLocalIdAndMap
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x10
	beq	.L32	@cond_branch
	mov	r0, r8
	add	r1, r5, #0
	bl	SaveRotatingTileObject
	ldrb	r4, [r4]
	mov	sl, r4
	mov	r0, sl
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	add	r3, r7, #0
	bl	ScriptMovement_StartObjectMovementScript
	b	.L13
.L44:
	.align	2, 0
.L43:
	.word	sMovement_ShiftUp
	.word	gSaveBlock1Ptr
.L32:
	mov	r0, r8
	add	r1, r5, #0
	bl	TurnUnsavedRotatingTileObject
.L13:
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x3f
	bhi	.LCB302
	b	.L14	@long jump
.LCB302:
	mov	r0, sl
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 MoveRotatingTileObjects,.Lfe3-MoveRotatingTileObjects
	.align	2, 0
	.globl	TurnRotatingTileObjects
	.type	 TurnRotatingTileObjects,function
	.thumb_func
TurnRotatingTileObjects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r1, .L85
	ldr	r2, [r1]
	cmp	r2, #0
	bne	.LCB322
	b	.L45	@long jump
.LCB322:
	add	r0, r2, #0
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	mov	r3, #0xa6
	lsl	r3, r3, #0x2
	mov	sl, r3
	cmp	r0, #0
	bne	.L47	@cond_branch
	mov	r0, #0x94
	lsl	r0, r0, #0x2
	mov	sl, r0
.L47:
	ldr	r0, .L85+0x4
	ldr	r0, [r0]
	ldr	r3, .L85+0x8
	add	r7, r0, r3
	mov	r0, #0x0
	mov	r9, r0
	add	r0, r2, #0
	add	r0, r0, #0x40
	ldrb	r0, [r0]
	cmp	r9, r0
	bcc	.LCB351
	b	.L45	@long jump
.LCB351:
	mov	r8, r1
.L52:
	mov	r1, r8
	ldr	r0, [r1]
	mov	r2, r9
	lsl	r4, r2, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r7
	ldrh	r0, [r1, #0x4]
	add	r0, r0, #0x7
	ldrh	r1, [r1, #0x6]
	add	r1, r1, #0x7
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	MapGridGetMetatileIdAt
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r3, sl
	sub	r1, r0, r3
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L53	@cond_branch
	add	r0, r1, #0x7
.L53:
	asr	r0, r0, #0x3
	lsl	r0, r0, #0x3
	sub	r0, r1, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, r8
	ldr	r1, [r2]
	add	r1, r1, r4
	ldrb	r1, [r1]
	sub	r0, r0, r1
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	blt	.L55	@cond_branch
	cmp	r1, #0x3
	bne	.L54	@cond_branch
.L55:
	mov	r0, #0x3
	neg	r0, r0
	mov	r6, #0x0
	cmp	r1, r0
	bne	.L58	@cond_branch
	b	.L82
.L86:
	.align	2, 0
.L85:
	.word	sRotatingTilePuzzle
	.word	gSaveBlock1Ptr
	.word	0x1250
.L54:
	mov	r6, #0x2
	cmp	r1, #0
	ble	.L58	@cond_branch
.L82:
	mov	r6, #0x1
.L58:
	ldr	r5, .L87
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	ldrb	r0, [r0]
	ldr	r1, .L87+0x4
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	GetObjectEventIdByLocalIdAndMap
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x10
	bne	.LCB459
	b	.L51	@long jump
.LCB459:
	ldr	r0, .L87+0x8
	lsl	r1, r2, #0x3
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x18]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	add	r1, r0, #0
	cmp	r6, #0
	bne	.L62	@cond_branch
	cmp	r0, #0x2
	beq	.L67	@cond_branch
	cmp	r0, #0x2
	bgt	.L70	@cond_branch
	cmp	r0, #0x1
	beq	.L65	@cond_branch
	b	.L51
.L88:
	.align	2, 0
.L87:
	.word	sRotatingTilePuzzle
	.word	gSaveBlock1Ptr
	.word	gObjectEvents
.L70:
	cmp	r0, #0x3
	beq	.L66	@cond_branch
	cmp	r0, #0x4
	beq	.LCB495
	b	.L51	@long jump
.LCB495:
	ldr	r3, .L89
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x7
	b	.L83
.L90:
	.align	2, 0
.L89:
	.word	sMovement_FaceUp
.L65:
	ldr	r3, .L91
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0xa
	b	.L83
.L92:
	.align	2, 0
.L91:
	.word	sMovement_FaceRight
.L66:
	ldr	r3, .L93
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x8
	b	.L83
.L94:
	.align	2, 0
.L93:
	.word	sMovement_FaceDown
.L67:
	ldr	r3, .L95
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x9
.L83:
	strb	r1, [r0, #0x9]
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	ldrb	r0, [r0]
	ldr	r1, .L95+0x4
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	ScriptMovement_StartObjectMovementScript
	b	.L51
.L96:
	.align	2, 0
.L95:
	.word	sMovement_FaceLeft
	.word	gSaveBlock1Ptr
.L62:
	cmp	r6, #0x1
	bne	.L51	@cond_branch
	cmp	r0, #0x2
	beq	.L77	@cond_branch
	cmp	r0, #0x2
	bgt	.L80	@cond_branch
	cmp	r0, #0x1
	beq	.L75	@cond_branch
	b	.L51
.L80:
	cmp	r1, #0x3
	beq	.L76	@cond_branch
	cmp	r1, #0x4
	bne	.L51	@cond_branch
	ldr	r3, .L97
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x8
	b	.L84
.L98:
	.align	2, 0
.L97:
	.word	sMovement_FaceDown
.L75:
	ldr	r3, .L99
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x9
	b	.L84
.L100:
	.align	2, 0
.L99:
	.word	sMovement_FaceLeft
.L76:
	ldr	r3, .L101
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x7
	b	.L84
.L102:
	.align	2, 0
.L101:
	.word	sMovement_FaceUp
.L77:
	ldr	r3, .L103
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0xa
.L84:
	strb	r1, [r0, #0x9]
	mov	r2, r8
	ldr	r0, [r2]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	ldrb	r0, [r0]
	ldr	r1, .L103+0x4
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	ScriptMovement_StartObjectMovementScript
.L51:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r3, r8
	ldr	r0, [r3]
	add	r0, r0, #0x40
	ldrb	r0, [r0]
	cmp	r9, r0
	bcs	.LCB713
	b	.L52	@long jump
.LCB713:
.L45:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	sMovement_FaceRight
	.word	gSaveBlock1Ptr
.Lfe4:
	.size	 TurnRotatingTileObjects,.Lfe4-TurnRotatingTileObjects
	.align	2, 0
	.type	 SaveRotatingTileObject,function
	.thumb_func
SaveRotatingTileObject:
	push	{r4, lr}
	ldr	r4, .L106
	ldr	r3, [r4]
	add	r2, r3, #0
	add	r2, r2, #0x40
	ldrb	r2, [r2]
	lsl	r2, r2, #0x2
	add	r3, r3, r2
	strb	r0, [r3, #0x1]
	ldr	r2, [r4]
	add	r0, r2, #0
	add	r0, r0, #0x40
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	strb	r1, [r2]
	ldr	r1, [r4]
	add	r1, r1, #0x40
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	sRotatingTilePuzzle
.Lfe5:
	.size	 SaveRotatingTileObject,.Lfe5-SaveRotatingTileObject
	.align	2, 0
	.type	 TurnUnsavedRotatingTileObject,function
	.thumb_func
TurnUnsavedRotatingTileObject:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	ldr	r0, .L138
	ldr	r0, [r0]
	ldr	r1, .L138+0x4
	add	r5, r0, r1
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrh	r0, [r1, #0x4]
	add	r0, r0, #0x7
	ldrh	r1, [r1, #0x6]
	add	r1, r1, #0x7
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	MapGridGetMetatileIdAt
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L138+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	mov	r1, #0xa6
	lsl	r1, r1, #0x2
	cmp	r0, #0
	bne	.L109	@cond_branch
	sub	r1, r1, #0x48
.L109:
	sub	r1, r2, r1
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L111	@cond_branch
	add	r0, r1, #0x7
.L111:
	asr	r0, r0, #0x3
	lsl	r0, r0, #0x3
	sub	r0, r1, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, r6
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	blt	.L113	@cond_branch
	cmp	r1, #0x3
	bne	.L112	@cond_branch
.L113:
	mov	r2, #0x0
	b	.L114
.L139:
	.align	2, 0
.L138:
	.word	gSaveBlock1Ptr
	.word	0x1250
	.word	sRotatingTilePuzzle
.L112:
	cmp	r1, #0
	bgt	.L116	@cond_branch
	mov	r0, #0x3
	neg	r0, r0
	cmp	r1, r0
	bne	.L115	@cond_branch
.L116:
	mov	r2, #0x1
	b	.L114
.L115:
	mov	r2, #0x2
.L114:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r5
	ldrb	r0, [r1, #0x9]
	add	r3, r0, #0
	cmp	r2, #0
	bne	.L118	@cond_branch
	cmp	r0, #0x8
	beq	.L133	@cond_branch
	cmp	r0, #0x8
	bgt	.L126	@cond_branch
	cmp	r0, #0x7
	beq	.L123	@cond_branch
	b	.L127
.L126:
	cmp	r0, #0x9
	beq	.L122	@cond_branch
	cmp	r0, #0xa
	bne	.L127	@cond_branch
	mov	r0, #0x7
	b	.L137
.L122:
	mov	r0, #0x8
	b	.L137
.L123:
	mov	r0, #0x9
	b	.L137
.L118:
	cmp	r2, #0x1
	bne	.L127	@cond_branch
	cmp	r0, #0x8
	beq	.L131	@cond_branch
	cmp	r0, #0x8
	bgt	.L136	@cond_branch
	cmp	r0, #0x7
	beq	.L133	@cond_branch
	b	.L127
.L136:
	cmp	r3, #0x9
	beq	.L132	@cond_branch
	cmp	r3, #0xa
	bne	.L127	@cond_branch
	mov	r0, #0x8
	b	.L137
.L131:
	mov	r0, #0x9
	b	.L137
.L132:
	mov	r0, #0x7
	b	.L137
.L133:
	mov	r0, #0xa
.L137:
	strb	r0, [r1, #0x9]
.L127:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 TurnUnsavedRotatingTileObject,.Lfe6-TurnUnsavedRotatingTileObject
.text
	.align	2, 0

