@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gRecordedBattleRngSeed
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gRecordedBattleRngSeed,object
	.size	 gRecordedBattleRngSeed,4
gRecordedBattleRngSeed:
	.word	0x0
	.globl	gBattlePalaceMoveSelectionRngValue
	.align	2, 0
	.type	 gBattlePalaceMoveSelectionRngValue,object
	.size	 gBattlePalaceMoveSelectionRngValue,4
gBattlePalaceMoveSelectionRngValue:
	.word	0x0
	.type	 sBattleRecords,object
	.size	 sBattleRecords,2656
sBattleRecords:
	.byte	0x0
	.space	663
	.space	1992
	.align	1, 0
	.type	 sRecordedBytesNo,object
	.size	 sRecordedBytesNo,8
sRecordedBytesNo:
	.short	0x0
	.space	6
	.align	1, 0
	.type	 sUnknown_0203C79C,object
	.size	 sUnknown_0203C79C,8
sUnknown_0203C79C:
	.short	0x0
	.space	6
	.align	1, 0
	.type	 sUnknown_0203C7A4,object
	.size	 sUnknown_0203C7A4,8
sUnknown_0203C7A4:
	.short	0x0
	.space	6
	.type	 sUnknown_0203C7AC,object
	.size	 sUnknown_0203C7AC,1
sUnknown_0203C7AC:
	.byte	0x0
	.type	 sLvlMode,object
	.size	 sLvlMode,1
sLvlMode:
	.byte	0x0
	.type	 sFrontierFacility,object
	.size	 sFrontierFacility,1
sFrontierFacility:
	.byte	0x0
	.type	 sFrontierBrainSymbol,object
	.size	 sFrontierBrainSymbol,1
sFrontierBrainSymbol:
	.byte	0x0
	.align	2, 0
	.type	 sCallback2_AfterRecordedBattle,object
	.size	 sCallback2_AfterRecordedBattle,4
sCallback2_AfterRecordedBattle:
	.word	0x0
	.globl	gUnknown_0203C7B4
	.type	 gUnknown_0203C7B4,object
	.size	 gUnknown_0203C7B4,1
gUnknown_0203C7B4:
	.byte	0x0
	.type	 sUnknown_0203C7B5,object
	.size	 sUnknown_0203C7B5,1
sUnknown_0203C7B5:
	.byte	0x0
	.type	 sBattleScene,object
	.size	 sBattleScene,1
sBattleScene:
	.byte	0x0
	.type	 sTextSpeed,object
	.size	 sTextSpeed,1
sTextSpeed:
	.byte	0x0
	.align	2, 0
	.type	 sBattleFlags,object
	.size	 sBattleFlags,4
sBattleFlags:
	.word	0x0
	.align	2, 0
	.type	 sAI_Scripts,object
	.size	 sAI_Scripts,4
sAI_Scripts:
	.word	0x0
	.align	2, 0
	.type	 sSavedPlayerParty,object
	.size	 sSavedPlayerParty,600
sSavedPlayerParty:
	.word	0x0
	.space	76
	.space	20
	.space	500
	.align	2, 0
	.type	 sSavedOpponentParty,object
	.size	 sSavedOpponentParty,600
sSavedOpponentParty:
	.word	0x0
	.space	76
	.space	20
	.space	500
	.align	1, 0
	.type	 sPlayerMonMoves,object
	.size	 sPlayerMonMoves,16
sPlayerMonMoves:
	.short	0x0
	.space	6
	.space	8
	.align	2, 0
	.type	 sPlayers,object
	.size	 sPlayers,80
sPlayers:
	.word	0x0
	.space	16
	.space	60
	.type	 sUnknown_0203CCD0,object
	.size	 sUnknown_0203CCD0,1
sUnknown_0203CCD0:
	.byte	0x0
	.type	 sRecordMixFriendName,object
	.size	 sRecordMixFriendName,8
sRecordMixFriendName:
	.byte	0x0
	.space	7
	.type	 sRecordMixFriendClass,object
	.size	 sRecordMixFriendClass,1
sRecordMixFriendClass:
	.byte	0x0
	.type	 sApprenticeId,object
	.size	 sApprenticeId,1
sApprenticeId:
	.byte	0x0
	.align	1, 0
	.type	 sEasyChatSpeech,object
	.size	 sEasyChatSpeech,12
sEasyChatSpeech:
	.short	0x0
	.space	10
	.type	 sBattleOutcome,object
	.size	 sBattleOutcome,1
sBattleOutcome:
	.byte	0x0
.text
	.align	2, 0
	.globl	sub_8184DA4
	.type	 sub_8184DA4,function
	.thumb_func
sub_8184DA4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	ldr	r0, .L14
	mov	r1, ip
	strb	r1, [r0]
	ldr	r1, .L14+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r2, #0x0
	mov	r7, #0x0
	ldr	r3, .L14+0x8
	mov	sl, r3
	ldr	r6, .L14+0xc
	mov	r9, r6
	ldr	r0, .L14+0x10
	mov	r8, r0
.L6:
	lsl	r0, r2, #0x1
	mov	r3, r9
	add	r1, r0, r3
	strh	r7, [r1]
	ldr	r6, .L14+0x14
	add	r1, r0, r6
	strh	r7, [r1]
	ldr	r1, .L14+0x18
	add	r0, r0, r1
	strh	r7, [r0]
	add	r4, r2, #0x1
	mov	r3, ip
	cmp	r3, #0x1
	bne	.L5	@cond_branch
	ldr	r5, .L14+0x1c
	mov	r3, #0xff
	mov	r1, #0xa6
	lsl	r1, r1, #0x2
	mov	r0, r2
	mul	r0, r0, r1
	mov	r6, r8
	add	r2, r0, r6
.L11:
	ldrb	r0, [r2]
	orr	r0, r0, r3
	strb	r0, [r2]
	add	r2, r2, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bne	.L11	@cond_branch
	ldr	r0, [r5]
	ldr	r1, .L14+0x20
	str	r0, [r1]
	ldr	r3, .L14+0x24
	ldr	r0, [r3]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0xc]
	mov	r6, sl
	str	r0, [r6]
.L5:
	add	r2, r4, #0
	cmp	r2, #0x3
	ble	.L6	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	sUnknown_0203C7AC
	.word	sUnknown_0203CCD0
	.word	sAI_Scripts
	.word	sRecordedBytesNo
	.word	sBattleRecords
	.word	sUnknown_0203C79C
	.word	sUnknown_0203C7A4
	.word	gBattleTypeFlags
	.word	sBattleFlags
	.word	gBattleResources
.Lfe1:
	.size	 sub_8184DA4,.Lfe1-sub_8184DA4
	.align	2, 0
	.globl	sub_8184E58
	.type	 sub_8184E58,function
	.thumb_func
sub_8184E58:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r0, .L39
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L17	@cond_branch
	ldr	r1, .L39+0x4
	ldr	r0, .L39+0x8
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r4, .L39+0xc
	ldr	r0, .L39+0x10
	bl	VarGet
	strb	r0, [r4]
	ldr	r4, .L39+0x14
	bl	GetFronterBrainSymbol
	strb	r0, [r4]
	b	.L18
.L40:
	.align	2, 0
.L39:
	.word	sUnknown_0203C7AC
	.word	gRecordedBattleRngSeed
	.word	gRngValue
	.word	sFrontierFacility
	.word	0x40cf
	.word	sFrontierBrainSymbol
.L17:
	cmp	r0, #0x2
	bne	.L18	@cond_branch
	ldr	r0, .L41
	ldr	r1, .L41+0x4
	ldr	r1, [r1]
	str	r1, [r0]
.L18:
	ldr	r0, .L41+0x8
	ldr	r5, [r0]
	mov	r0, #0x2
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L20	@cond_branch
	bl	GetMultiplayerId
	ldr	r1, .L41+0xc
	strb	r0, [r1]
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	mov	r5, #0x0
	ldr	r0, .L41+0x10
	mov	r9, r0
	ldr	r6, .L41+0x14
	mov	r0, #0x8
	add	r0, r0, r6
	mov	r8, r0
	mov	r7, r9
	add	r7, r7, #0x4
.L24:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r4, r0, #0x2
	mov	r0, r9
	add	r2, r4, r0
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r3, r0, #0x2
	add	r0, r6, #0x4
	add	r0, r3, r0
	ldr	r0, [r0]
	str	r0, [r2]
	add	r1, r3, r6
	ldrb	r0, [r1, #0x13]
	strb	r0, [r2, #0xc]
	ldrh	r0, [r1, #0x18]
	strh	r0, [r2, #0xe]
	ldrh	r0, [r1, #0x1a]
	strh	r0, [r2, #0x10]
	cmp	r5, sl
	bge	.L25	@cond_branch
	mov	r0, r8
	add	r1, r3, r0
	mov	r0, sp
	bl	StringCopy
	mov	r0, sp
	bl	StripExtCtrlCodes
	add	r0, r4, r7
	mov	r1, sp
	bl	StringCopy
	add	r5, r5, #0x1
	b	.L23
.L42:
	.align	2, 0
.L41:
	.word	gRngValue
	.word	gRecordedBattleRngSeed
	.word	gBattleTypeFlags
	.word	gUnknown_0203C7B4
	.word	sPlayers
	.word	gLinkPlayers
.L25:
	add	r5, r5, #0x1
	ldr	r0, .L43
	add	r1, r3, r0
	ldr	r0, .L43+0x4
	add	r2, r4, r0
	mov	r3, #0x7
.L30:
	ldrb	r0, [r1]
	strb	r0, [r2]
	add	r1, r1, #0x1
	add	r2, r2, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L30	@cond_branch
.L23:
	cmp	r5, #0x3
	ble	.L24	@cond_branch
	b	.L33
.L44:
	.align	2, 0
.L43:
	.word	gLinkPlayers+0x8
	.word	sPlayers+0x4
.L20:
	ldr	r3, .L45
	ldr	r4, .L45+0x4
	ldr	r2, [r4]
	ldrb	r1, [r2, #0xa]
	ldrb	r0, [r2, #0xb]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0xc]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0xd]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	ldrb	r0, [r2, #0x8]
	strb	r0, [r3, #0xc]
	strh	r5, [r3, #0xe]
	ldr	r0, .L45+0x8
	ldrb	r0, [r0]
	strh	r0, [r3, #0x10]
	mov	r5, #0x0
	add	r3, r3, #0x4
.L37:
	add	r0, r5, r3
	ldr	r1, [r4]
	add	r1, r1, r5
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r5, r5, #0x1
	cmp	r5, #0x7
	ble	.L37	@cond_branch
.L33:
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	sPlayers
	.word	gSaveBlock2Ptr
	.word	gGameLanguage
.Lfe2:
	.size	 sub_8184E58,.Lfe2-sub_8184E58
	.align	2, 0
	.globl	RecordedBattle_SetBattlerAction
	.type	 RecordedBattle_SetBattlerAction,function
	.thumb_func
RecordedBattle_SetBattlerAction:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	ldr	r1, .L49
	lsl	r0, r5, #0x1
	add	r4, r0, r1
	ldrh	r2, [r4]
	add	r3, r2, #0
	ldr	r0, .L49+0x4
	cmp	r3, r0
	bhi	.L48	@cond_branch
	ldr	r0, .L49+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L48	@cond_branch
	ldr	r1, .L49+0xc
	add	r0, r2, #0x1
	strh	r0, [r4]
	mov	r0, #0xa6
	lsl	r0, r0, #0x2
	mul	r0, r0, r5
	add	r0, r3, r0
	add	r0, r0, r1
	strb	r6, [r0]
.L48:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	sRecordedBytesNo
	.word	0x297
	.word	sUnknown_0203C7AC
	.word	sBattleRecords
.Lfe3:
	.size	 RecordedBattle_SetBattlerAction,.Lfe3-RecordedBattle_SetBattlerAction
	.align	2, 0
	.globl	RecordedBattle_ClearBattlerAction
	.type	 RecordedBattle_ClearBattlerAction,function
	.thumb_func
RecordedBattle_ClearBattlerAction:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	mov	r3, #0x0
	cmp	r3, r4
	bge	.L53	@cond_branch
	ldr	r0, .L58
	lsl	r1, r5, #0x1
	add	r2, r1, r0
	ldr	r7, .L58+0x4
	mov	r0, #0xa6
	lsl	r0, r0, #0x2
	mul	r5, r5, r0
	mov	r6, #0xff
.L55:
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
	strh	r0, [r2]
	ldrh	r1, [r2]
	add	r1, r1, r5
	add	r1, r1, r7
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L53	@cond_branch
	add	r3, r3, #0x1
	cmp	r3, r4
	blt	.L55	@cond_branch
.L53:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	sRecordedBytesNo
	.word	sBattleRecords
.Lfe4:
	.size	 RecordedBattle_ClearBattlerAction,.Lfe4-RecordedBattle_ClearBattlerAction
	.align	2, 0
	.globl	RecordedBattle_GetBattlerAction
	.type	 RecordedBattle_GetBattlerAction,function
	.thumb_func
RecordedBattle_GetBattlerAction:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L65
	lsl	r0, r3, #0x1
	add	r2, r0, r1
	ldrh	r1, [r2]
	ldr	r0, .L65+0x4
	cmp	r1, r0
	bhi	.L62	@cond_branch
	ldr	r4, .L65+0x8
	add	r0, r0, #0x1
	mul	r3, r3, r0
	add	r0, r1, r3
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L61	@cond_branch
.L62:
	ldr	r2, .L65+0xc
	ldr	r1, .L65+0x10
	mov	r0, #0x5
	strb	r0, [r1]
	mov	r0, #0x5
	strh	r0, [r2]
	bl	ResetPaletteFadeControl
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L65+0x14
	bl	SetMainCallback2
	mov	r0, #0xff
	b	.L64
.L66:
	.align	2, 0
.L65:
	.word	sRecordedBytesNo
	.word	0x297
	.word	sBattleRecords
	.word	gSpecialVar_Result
	.word	gBattleOutcome
	.word	CB2_QuitRecordedBattle
.L61:
	add	r0, r1, #0x1
	strh	r0, [r2]
	add	r0, r1, r3
	add	r0, r0, r4
	ldrb	r0, [r0]
.L64:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 RecordedBattle_GetBattlerAction,.Lfe5-RecordedBattle_GetBattlerAction
	.align	2, 0
	.globl	sub_81850D0
	.type	 sub_81850D0,function
	.thumb_func
sub_81850D0:
	ldr	r0, .L68
	ldrb	r0, [r0]
	bx	lr
.L69:
	.align	2, 0
.L68:
	.word	sUnknown_0203C7AC
.Lfe6:
	.size	 sub_81850D0,.Lfe6-sub_81850D0
	.align	2, 0
	.globl	sub_81850DC
	.type	 sub_81850DC,function
	.thumb_func
sub_81850DC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r0
	mov	r7, #0x0
	mov	r0, #0x0
	mov	ip, r0
.L74:
	mov	r1, ip
	lsl	r3, r1, #0x1
	ldr	r0, .L82
	add	r5, r3, r0
	ldr	r1, .L82+0x4
	add	r6, r3, r1
	ldrh	r0, [r5]
	mov	r9, r3
	mov	r1, ip
	add	r1, r1, #0x1
	str	r1, [sp]
	ldrh	r1, [r6]
	cmp	r0, r1
	beq	.L73	@cond_branch
	add	r1, r7, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r2, r7, #0
	add	r1, r1, r8
	mov	r0, ip
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r2, r2, r8
	ldrb	r0, [r5]
	ldrb	r1, [r6]
	sub	r0, r0, r1
	strb	r0, [r2]
	mov	r4, #0x0
	ldrh	r0, [r5]
	ldrh	r1, [r6]
	sub	r0, r0, r1
	cmp	r4, r0
	bge	.L77	@cond_branch
	ldr	r1, .L82+0x8
	mov	sl, r1
	ldr	r6, .L82+0x4
	mov	r0, #0xa6
	lsl	r0, r0, #0x2
	mov	r5, ip
	mul	r5, r5, r0
.L79:
	add	r1, r7, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r1, r1, r8
	add	r2, r3, r6
	ldrh	r0, [r2]
	add	r0, r0, r4
	add	r0, r0, r5
	add	r0, r0, sl
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L82
	add	r0, r3, r1
	ldrh	r1, [r0]
	ldrh	r0, [r2]
	sub	r1, r1, r0
	cmp	r4, r1
	blt	.L79	@cond_branch
.L77:
	ldr	r0, .L82+0x4
	add	r0, r0, r9
	ldr	r1, .L82
	add	r1, r1, r9
	ldrh	r1, [r1]
	strh	r1, [r0]
.L73:
	ldr	r1, [sp]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	cmp	r0, #0x3
	bls	.L74	@cond_branch
	add	r0, r7, #0
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L83:
	.align	2, 0
.L82:
	.word	sRecordedBytesNo
	.word	sUnknown_0203C79C
	.word	sBattleRecords
.Lfe7:
	.size	 sub_81850DC,.Lfe7-sub_81850DC
	.align	2, 0
	.globl	sub_81851A8
	.type	 sub_81851A8,function
	.thumb_func
sub_81851A8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	add	r7, r0, #0
	mov	r1, #0x2
	mov	r0, sp
	strb	r1, [r0]
	ldr	r0, .L103
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L84	@cond_branch
	mov	r5, #0x0
	ldr	r4, .L103+0x4
	b	.L86
.L104:
	.align	2, 0
.L103:
	.word	gBattleTypeFlags
	.word	gLinkPlayers
.L89:
	ldrb	r0, [r4]
	cmp	r0, #0x3
	bne	.L84	@cond_branch
	add	r4, r4, #0x1c
	add	r5, r5, #0x1
.L86:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	blt	.L89	@cond_branch
	ldr	r0, .L105
	ldr	r0, [r0]
	mov	r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L84	@cond_branch
	ldrb	r0, [r7]
	mov	r4, sp
	add	r4, r4, #0x1
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r8, r4
	cmp	r0, #0
	beq	.L84	@cond_branch
.L96:
	add	r0, r7, #0
	mov	r1, sp
	add	r2, r4, #0
	bl	sub_8185278
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r7, #0
	mov	r1, sp
	add	r2, r4, #0
	bl	sub_8185278
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L93	@cond_branch
	ldr	r3, .L105+0x4
	ldr	r0, .L105+0x8
	lsl	r1, r6, #0x1
	add	r4, r1, r0
	add	r5, r2, #0
	mov	r0, #0xa6
	lsl	r0, r0, #0x2
	mul	r6, r6, r0
.L100:
	add	r0, r7, #0
	mov	r1, sp
	mov	r2, r8
	str	r3, [sp, #0x4]
	bl	sub_8185278
	ldrh	r1, [r4]
	add	r2, r1, #0x1
	strh	r2, [r4]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r1, r1, r6
	ldr	r3, [sp, #0x4]
	add	r1, r1, r3
	strb	r0, [r1]
	sub	r5, r5, #0x1
	cmp	r5, #0
	bne	.L100	@cond_branch
.L93:
	mov	r4, r8
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L96	@cond_branch
.L84:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L106:
	.align	2, 0
.L105:
	.word	gBattleTypeFlags
	.word	sBattleRecords
	.word	sUnknown_0203C7A4
.Lfe8:
	.size	 sub_81851A8,.Lfe8-sub_81851A8
	.align	2, 0
	.type	 sub_8185278,function
	.thumb_func
sub_8185278:
	ldrb	r3, [r2]
	sub	r3, r3, #0x1
	strb	r3, [r2]
	ldrb	r2, [r1]
	add	r3, r2, #0x1
	strb	r3, [r1]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r0, r2
	ldrb	r0, [r0]
	bx	lr
.Lfe9:
	.size	 sub_8185278,.Lfe9-sub_8185278
	.align	2, 0
	.globl	CanCopyRecordedBattleSaveData
	.type	 CanCopyRecordedBattleSaveData,function
	.thumb_func
CanCopyRecordedBattleSaveData:
	push	{r4, r5, lr}
	mov	r0, #0xf8
	lsl	r0, r0, #0x4
	bl	AllocZeroed
	add	r4, r0, #0
	bl	CopyRecordedBattleFromSave
	add	r5, r0, #0
	add	r0, r4, #0
	bl	Free
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 CanCopyRecordedBattleSaveData,.Lfe10-CanCopyRecordedBattleSaveData
	.align	2, 0
	.type	 IsRecordedBattleSaveValid,function
	.thumb_func
IsRecordedBattleSaveValid:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r1, .L114
	add	r0, r5, r1
	ldr	r1, [r0]
	cmp	r1, #0
	beq	.L112	@cond_branch
	ldr	r0, .L114+0x4
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L112	@cond_branch
	ldr	r4, .L114+0x8
	add	r0, r5, #0
	add	r1, r4, #0
	bl	CalcByteArraySum
	add	r4, r5, r4
	ldr	r1, [r4]
	cmp	r0, r1
	bne	.L112	@cond_branch
	mov	r0, #0x1
	b	.L113
.L115:
	.align	2, 0
.L114:
	.word	0x4ec
	.word	0x7d007e92
	.word	0xf7c
.L112:
	mov	r0, #0x0
.L113:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 IsRecordedBattleSaveValid,.Lfe11-IsRecordedBattleSaveValid
	.align	2, 0
	.type	 RecordedBattleToSave,function
	.thumb_func
RecordedBattleToSave:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r0, r5, #0
	mov	r1, #0x0
	bl	memset
	mov	r2, #0xf8
	lsl	r2, r2, #0x4
	add	r0, r5, #0
	add	r1, r4, #0
	bl	memcpy
	ldr	r4, .L120
	add	r0, r5, #0
	add	r1, r4, #0
	bl	CalcByteArraySum
	add	r4, r5, r4
	str	r0, [r4]
	mov	r0, #0x1f
	add	r1, r5, #0
	bl	TryWriteSpecialSaveSection
	cmp	r0, #0x1
	bne	.L117	@cond_branch
	mov	r0, #0x1
	b	.L119
.L121:
	.align	2, 0
.L120:
	.word	0xf7c
.L117:
	mov	r0, #0x0
.L119:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 RecordedBattleToSave,.Lfe12-RecordedBattleToSave
	.align	2, 0
	.globl	MoveRecordedBattleToSaveData
	.type	 MoveRecordedBattleToSaveData,function
	.thumb_func
MoveRecordedBattleToSaveData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r0, #0xf8
	lsl	r0, r0, #0x4
	bl	AllocZeroed
	add	r7, r0, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	AllocZeroed
	str	r0, [sp]
	mov	r6, #0x0
.L126:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	add	r5, r7, r4
	ldr	r1, .L231
	add	r1, r4, r1
	add	r0, r5, #0
	mov	r2, #0x64
	bl	memcpy
	mov	r1, #0x96
	lsl	r1, r1, #0x2
	add	r5, r5, r1
	ldr	r0, .L231+0x4
	add	r4, r4, r0
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x64
	bl	memcpy
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L126	@cond_branch
	mov	r6, #0x0
	ldr	r2, .L231+0x8
	mov	r9, r2
	mov	r3, #0x9a
	lsl	r3, r3, #0x3
	add	r3, r7, r3
	str	r3, [sp, #0x8]
	ldr	r5, .L231+0xc
	mov	r8, r6
	mov	ip, r6
	mov	r4, #0x96
	lsl	r4, r4, #0x3
	add	r4, r4, r7
	mov	sl, r4
	ldr	r0, .L231+0x10
	add	r4, r7, r0
.L131:
	lsl	r1, r6, #0x3
	ldr	r0, .L231+0xc
	add	r0, r0, #0x4
	mov	r3, r8
	add	r2, r3, r0
	add	r1, r1, sl
	mov	r3, #0x7
.L135:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L135	@cond_branch
	ldr	r0, [sp, #0x8]
	add	r1, r0, r6
	ldrb	r0, [r5, #0xc]
	strb	r0, [r1]
	ldrh	r0, [r5, #0x10]
	strb	r0, [r4]
	ldrh	r0, [r5, #0xe]
	strb	r0, [r4, #0xc]
	ldr	r1, .L231+0x14
	add	r0, r7, r1
	add	r0, r0, ip
	ldr	r1, [r5]
	str	r1, [r0]
	add	r5, r5, #0x14
	mov	r2, #0x14
	add	r8, r8, r2
	mov	r3, #0x4
	add	ip, ip, r3
	add	r4, r4, #0x1
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L131	@cond_branch
	mov	r4, #0x9d
	lsl	r4, r4, #0x3
	add	r1, r7, r4
	ldr	r5, .L231+0x18
	ldr	r0, [r5]
	str	r0, [r1]
	ldr	r0, .L231+0x1c
	ldr	r2, [r0]
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L138	@cond_branch
	ldr	r1, .L231+0x20
	add	r3, r7, r1
	mov	r1, #0x23
	neg	r1, r1
	and	r1, r1, r2
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	orr	r1, r1, r0
	str	r1, [r3]
	mov	r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L139	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L152
.L232:
	.align	2, 0
.L231:
	.word	sSavedPlayerParty
	.word	sSavedOpponentParty
	.word	gSaveBlock2Ptr
	.word	sPlayers
	.word	0x4e4
	.word	0x4d4
	.word	gRecordedBattleRngSeed
	.word	sBattleFlags
	.word	0x4ec
.L139:
	mov	r0, #0x40
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L152	@cond_branch
	ldr	r2, .L233
	ldrh	r0, [r2, #0xe]
	cmp	r0, #0x1
	beq	.L147	@cond_branch
	cmp	r0, #0x1
	bgt	.L151	@cond_branch
	cmp	r0, #0
	beq	.L144	@cond_branch
	b	.L152
.L234:
	.align	2, 0
.L233:
	.word	sPlayers
.L151:
	cmp	r0, #0x2
	beq	.L144	@cond_branch
	cmp	r0, #0x3
	beq	.L147	@cond_branch
	b	.L152
.L144:
	ldr	r3, .L235
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L235+0x4
	add	r0, r0, r4
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L152	@cond_branch
	ldr	r5, .L235+0x8
	add	r0, r7, r5
	b	.L228
.L236:
	.align	2, 0
.L235:
	.word	gUnknown_0203C7B4
	.word	sPlayers
	.word	0x4ec
.L147:
	ldr	r0, .L237
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L237+0x4
	add	r0, r0, r1
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L152	@cond_branch
	ldr	r2, .L237+0x8
	add	r0, r7, r2
.L228:
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	str	r1, [r0]
	b	.L152
.L238:
	.align	2, 0
.L237:
	.word	gUnknown_0203C7B4
	.word	sPlayers
	.word	0x4ec
.L138:
	ldr	r3, .L239
	add	r0, r7, r3
	str	r2, [r0]
.L152:
	ldr	r4, .L239+0x4
	ldrh	r1, [r4]
	ldr	r5, .L239+0x8
	add	r0, r7, r5
	strh	r1, [r0]
	ldr	r0, .L239+0xc
	ldrh	r1, [r0]
	ldr	r2, .L239+0x10
	add	r0, r7, r2
	strh	r1, [r0]
	ldr	r3, .L239+0x14
	ldrh	r1, [r3]
	mov	r4, #0x9f
	lsl	r4, r4, #0x3
	add	r0, r7, r4
	strh	r1, [r0]
	ldr	r5, .L239+0x18
	ldrb	r1, [r5]
	add	r2, r2, #0x4
	add	r0, r7, r2
	strh	r1, [r0]
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r4, .L239+0x1c
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	ldr	r5, .L239+0x20
	add	r1, r7, r5
	strb	r0, [r1]
	ldr	r0, .L239+0x24
	ldrb	r1, [r0]
	add	r2, r2, #0x3
	add	r0, r7, r2
	strb	r1, [r0]
	ldr	r3, .L239+0x28
	ldrb	r1, [r3]
	ldr	r4, .L239+0x2c
	add	r0, r7, r4
	strb	r1, [r0]
	mov	r5, r9
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x15]
	lsl	r1, r1, #0x1c
	ldr	r0, .L239+0x30
	add	r3, r7, r0
	lsr	r1, r1, #0x1f
	ldrb	r2, [r3]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r1, [r5]
	ldrb	r1, [r1, #0x14]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1c
	mov	r2, #0xf
	neg	r2, r2
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	add	r1, r7, r2
	ldr	r3, .L239+0x34
	ldr	r0, [r3]
	str	r0, [r1]
	ldr	r4, .L239+0x38
	add	r1, r4, #0
	ldr	r5, .L239+0x4
	ldrh	r5, [r5]
	add	r0, r1, r5
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x63
	bls	.LCB1398
	b	.L153	@long jump
.LCB1398:
	mov	r6, #0x0
	ldr	r0, .L239+0x3c
	add	r3, r7, r0
	mov	sl, r9
	ldr	r1, .L239+0x4
	mov	ip, r1
	add	r2, r4, #0
	mov	r8, r2
	ldr	r4, .L239+0x40
.L157:
	add	r2, r3, r6
	mov	r5, sl
	ldr	r1, [r5]
	mov	r5, ip
	ldrh	r0, [r5]
	add	r0, r0, r8
	mov	r5, #0xec
	mul	r0, r0, r5
	add	r0, r6, r0
	add	r1, r1, r4
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L157	@cond_branch
	mov	r0, r9
	ldr	r2, [r0]
	ldr	r1, .L239+0x4
	ldrh	r0, [r1]
	ldr	r3, .L239+0x38
	add	r0, r0, r3
	mov	r1, #0xec
	mul	r0, r0, r1
	add	r2, r2, r0
	ldr	r4, .L239+0x44
	add	r2, r2, r4
	ldrb	r1, [r2]
	ldr	r5, .L239+0x48
	add	r0, r7, r5
	strb	r1, [r0]
	ldr	r1, .L239+0x4c
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bne	.L159	@cond_branch
	mov	r6, #0x0
	ldr	r2, .L239+0x50
	add	r4, r7, r2
	mov	sl, r9
	ldr	r5, .L239+0x4
	mov	r8, r5
	add	r5, r3, #0
.L163:
	lsl	r3, r6, #0x1
	mov	r0, sl
	ldr	r2, [r0]
	mov	r1, r8
	ldrh	r0, [r1]
	add	r0, r0, r5
	mov	r1, #0xec
	mul	r0, r0, r1
	add	r3, r3, r0
	mov	r0, #0xdd
	lsl	r0, r0, #0x3
	add	r2, r2, r0
	add	r2, r2, r3
	ldrh	r0, [r2]
	strh	r0, [r4]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L163	@cond_branch
	b	.L165
.L240:
	.align	2, 0
.L239:
	.word	0x4ec
	.word	gTrainerBattleOpponent_A
	.word	0x4f4
	.word	gTrainerBattleOpponent_B
	.word	0x4f6
	.word	gPartnerTrainerId
	.word	gUnknown_0203C7B4
	.word	0xc31
	.word	0x4fc
	.word	sFrontierFacility
	.word	sFrontierBrainSymbol
	.word	0x4fe
	.word	0x4ff
	.word	sAI_Scripts
	.word	-0x12c
	.word	0x504
	.word	0x6c4
	.word	0x6c1
	.word	0x50c
	.word	sBattleOutcome
	.word	0x50e
.L159:
	mov	r6, #0x0
	ldr	r1, .L241
	add	r4, r7, r1
	mov	sl, r9
	ldr	r2, .L241+0x4
	mov	r8, r2
	add	r5, r3, #0
.L169:
	lsl	r3, r6, #0x1
	mov	r0, sl
	ldr	r2, [r0]
	mov	r1, r8
	ldrh	r0, [r1]
	add	r0, r0, r5
	mov	r1, #0xec
	mul	r0, r0, r1
	add	r3, r3, r0
	ldr	r0, .L241+0x8
	add	r2, r2, r0
	add	r2, r2, r3
	ldrh	r0, [r2]
	strh	r0, [r4]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L169	@cond_branch
.L165:
	mov	r1, r9
	ldr	r2, [r1]
	ldr	r3, .L241+0x4
	ldrh	r0, [r3]
	ldr	r4, .L241+0xc
	add	r0, r0, r4
	mov	r1, #0xec
	mul	r0, r0, r1
	add	r2, r2, r0
	ldr	r5, .L241+0x10
	add	r2, r2, r5
	ldrb	r1, [r2]
	b	.L229
.L242:
	.align	2, 0
.L241:
	.word	0x50e
	.word	gTrainerBattleOpponent_A
	.word	0x6dc
	.word	-0x12c
	.word	0x7a4
.L153:
	ldr	r3, .L243
	ldrh	r3, [r3]
	add	r0, r1, r3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x63
	bls	.LCB1599
	b	.L172	@long jump
.LCB1599:
	mov	r6, #0x0
	ldr	r4, .L243+0x4
	add	r3, r7, r4
	mov	sl, r9
	ldr	r5, .L243
	mov	ip, r5
	ldr	r0, .L243+0x8
	mov	r8, r0
	ldr	r4, .L243+0xc
.L176:
	add	r2, r3, r6
	mov	r5, sl
	ldr	r1, [r5]
	mov	r5, ip
	ldrh	r0, [r5]
	add	r0, r0, r8
	mov	r5, #0xec
	mul	r0, r0, r5
	add	r0, r6, r0
	add	r1, r1, r4
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L176	@cond_branch
	mov	r0, r9
	ldr	r2, [r0]
	ldr	r1, .L243
	ldrh	r0, [r1]
	ldr	r3, .L243+0x8
	add	r0, r0, r3
	mov	r1, #0xec
	mul	r0, r0, r1
	add	r2, r2, r0
	ldr	r4, .L243+0x10
	add	r2, r2, r4
	ldrb	r1, [r2]
	ldr	r5, .L243+0x14
	add	r0, r7, r5
	strb	r1, [r0]
	ldr	r1, .L243+0x18
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bne	.L178	@cond_branch
	mov	r6, #0x0
	ldr	r2, .L243+0x1c
	add	r4, r7, r2
	mov	sl, r9
	ldr	r5, .L243
	mov	r8, r5
	add	r5, r3, #0
.L182:
	lsl	r3, r6, #0x1
	mov	r0, sl
	ldr	r2, [r0]
	mov	r1, r8
	ldrh	r0, [r1]
	add	r0, r0, r5
	mov	r1, #0xec
	mul	r0, r0, r1
	add	r3, r3, r0
	mov	r0, #0xdd
	lsl	r0, r0, #0x3
	add	r2, r2, r0
	add	r2, r2, r3
	ldrh	r0, [r2]
	strh	r0, [r4]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L182	@cond_branch
	b	.L184
.L244:
	.align	2, 0
.L243:
	.word	gTrainerBattleOpponent_B
	.word	0x504
	.word	-0x12c
	.word	0x6c4
	.word	0x6c1
	.word	0x50c
	.word	sBattleOutcome
	.word	0x50e
.L178:
	mov	r6, #0x0
	ldr	r1, .L245
	add	r4, r7, r1
	mov	sl, r9
	ldr	r2, .L245+0x4
	mov	r8, r2
	add	r5, r3, #0
.L188:
	lsl	r3, r6, #0x1
	mov	r0, sl
	ldr	r2, [r0]
	mov	r1, r8
	ldrh	r0, [r1]
	add	r0, r0, r5
	mov	r1, #0xec
	mul	r0, r0, r1
	add	r3, r3, r0
	ldr	r0, .L245+0x8
	add	r2, r2, r0
	add	r2, r2, r3
	ldrh	r0, [r2]
	strh	r0, [r4]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L188	@cond_branch
.L184:
	mov	r1, r9
	ldr	r2, [r1]
	ldr	r3, .L245+0x4
	ldrh	r0, [r3]
	ldr	r4, .L245+0xc
	add	r0, r0, r4
	mov	r1, #0xec
	mul	r0, r0, r1
	add	r2, r2, r0
	ldr	r5, .L245+0x10
	add	r2, r2, r5
	ldrb	r1, [r2]
	b	.L229
.L246:
	.align	2, 0
.L245:
	.word	0x50e
	.word	gTrainerBattleOpponent_B
	.word	0x6dc
	.word	-0x12c
	.word	0x7a4
.L172:
	ldr	r3, .L247
	ldrh	r3, [r3]
	add	r0, r1, r3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x63
	bhi	.L171	@cond_branch
	mov	r6, #0x0
	ldr	r4, .L247+0x4
	add	r3, r7, r4
	mov	sl, r9
	ldr	r5, .L247
	mov	ip, r5
	ldr	r0, .L247+0x8
	mov	r8, r0
	ldr	r4, .L247+0xc
.L195:
	add	r2, r3, r6
	mov	r5, sl
	ldr	r1, [r5]
	mov	r5, ip
	ldrh	r0, [r5]
	add	r0, r0, r8
	mov	r5, #0xec
	mul	r0, r0, r5
	add	r0, r6, r0
	add	r1, r1, r4
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L195	@cond_branch
	mov	r0, r9
	ldr	r1, [r0]
	ldr	r2, .L247
	ldrh	r0, [r2]
	ldr	r3, .L247+0x8
	add	r0, r0, r3
	mov	r2, #0xec
	mul	r0, r0, r2
	add	r1, r1, r0
	ldr	r4, .L247+0x10
	add	r1, r1, r4
	ldrb	r1, [r1]
	ldr	r5, .L247+0x14
	add	r0, r7, r5
	strb	r1, [r0]
	mov	r0, r9
	ldr	r1, [r0]
	ldr	r4, .L247
	ldrh	r0, [r4]
	add	r0, r0, r3
	mul	r0, r0, r2
	add	r1, r1, r0
	ldr	r5, .L247+0x18
	add	r1, r1, r5
	ldrb	r1, [r1]
.L229:
	ldr	r2, .L247+0x1c
	add	r0, r7, r2
	strb	r1, [r0]
.L171:
	ldr	r3, .L247+0x20
	ldrh	r0, [r3]
	ldr	r1, .L247+0x24
	cmp	r0, r1
	bls	.L197	@cond_branch
	mov	r4, r9
	ldr	r2, [r4]
	add	r1, r0, #0
	ldr	r3, .L247+0x28
	add	r1, r1, r3
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, #0x74
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	ldr	r5, .L247+0x2c
	add	r1, r7, r5
	strb	r0, [r1]
	mov	r6, #0x0
	ldr	r0, .L247+0x30
	add	r4, r7, r0
	mov	sl, r9
	ldr	r1, .L247+0x20
	mov	r8, r1
	add	r5, r3, #0
.L201:
	lsl	r3, r6, #0x1
	mov	r0, sl
	ldr	r2, [r0]
	mov	r0, r8
	ldrh	r1, [r0]
	add	r1, r1, r5
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r3, r0
	add	r2, r2, #0x9c
	add	r2, r2, r3
	ldrh	r0, [r2]
	strh	r0, [r4]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L201	@cond_branch
	mov	r1, r9
	ldr	r2, [r1]
	ldr	r3, .L247+0x20
	ldrh	r1, [r3]
	ldr	r4, .L247+0x28
	add	r1, r1, r4
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, #0xb3
	ldrb	r1, [r2]
	ldr	r5, .L247+0x34
	add	r0, r7, r5
	b	.L230
.L248:
	.align	2, 0
.L247:
	.word	gPartnerTrainerId
	.word	0x504
	.word	-0x12c
	.word	0x6c4
	.word	0x6c1
	.word	0x50c
	.word	0x7a4
	.word	0x51a
	.word	gTrainerBattleOpponent_A
	.word	0x18f
	.word	-0x190
	.word	0x50d
	.word	0x50e
	.word	0x51b
.L197:
	ldr	r2, .L249
	ldrh	r0, [r2]
	cmp	r0, r1
	bls	.L204	@cond_branch
	mov	r3, r9
	ldr	r2, [r3]
	ldr	r4, .L249
	ldrh	r1, [r4]
	ldr	r3, .L249+0x4
	add	r1, r1, r3
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, #0x74
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	ldr	r5, .L249+0x8
	add	r1, r7, r5
	strb	r0, [r1]
	mov	r6, #0x0
	ldr	r0, .L249+0xc
	add	r4, r7, r0
	mov	sl, r9
	ldr	r1, .L249
	mov	r8, r1
	add	r5, r3, #0
.L208:
	lsl	r3, r6, #0x1
	mov	r0, sl
	ldr	r2, [r0]
	mov	r0, r8
	ldrh	r1, [r0]
	add	r1, r1, r5
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r3, r0
	add	r2, r2, #0x9c
	add	r2, r2, r3
	ldrh	r0, [r2]
	strh	r0, [r4]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L208	@cond_branch
	mov	r1, r9
	ldr	r2, [r1]
	ldr	r3, .L249
	ldrh	r1, [r3]
	ldr	r4, .L249+0x4
	add	r1, r1, r4
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, #0xb3
	ldrb	r1, [r2]
	ldr	r5, .L249+0x10
	add	r0, r7, r5
	b	.L230
.L250:
	.align	2, 0
.L249:
	.word	gTrainerBattleOpponent_B
	.word	-0x190
	.word	0x50d
	.word	0x50e
	.word	0x51b
.L204:
	ldr	r2, .L251
	ldrh	r0, [r2]
	cmp	r0, r1
	bls	.L203	@cond_branch
	mov	r3, r9
	ldr	r2, [r3]
	ldr	r4, .L251
	ldrh	r1, [r4]
	ldr	r3, .L251+0x4
	add	r1, r1, r3
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, #0x74
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	ldr	r5, .L251+0x8
	add	r1, r7, r5
	strb	r0, [r1]
	mov	r0, r9
	ldr	r2, [r0]
	ldrh	r1, [r4]
	add	r1, r1, r3
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, #0xb3
	ldrb	r1, [r2]
	ldr	r2, .L251+0xc
	add	r0, r7, r2
.L230:
	strb	r1, [r0]
.L203:
	mov	r6, #0x0
	ldr	r3, .L251+0x10
	mov	sl, r3
	ldr	r4, .L251+0x14
	mov	r9, r4
	mov	r5, #0xa6
	lsl	r5, r5, #0x2
	mov	r8, r5
	ldr	r0, .L251+0x18
	add	r5, r7, r0
.L215:
	add	r4, r6, #0x1
	mov	r0, r8
	mul	r0, r0, r6
	mov	r1, r9
	add	r2, r0, r1
	add	r1, r0, r5
	mov	r3, sl
	add	r3, r3, #0x1
.L219:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L219	@cond_branch
	add	r6, r4, #0
	cmp	r6, #0x3
	ble	.L215	@cond_branch
.L222:
	add	r0, r7, #0
	ldr	r1, [sp]
	bl	RecordedBattleToSave
	add	r4, r0, #0
	cmp	r4, #0x1
	beq	.L223	@cond_branch
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	cmp	r0, #0x2
	bls	.L222	@cond_branch
.L223:
	add	r0, r7, #0
	bl	Free
	ldr	r0, [sp]
	bl	Free
	add	r0, r4, #0
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L252:
	.align	2, 0
.L251:
	.word	gPartnerTrainerId
	.word	-0x190
	.word	0x50d
	.word	0x51b
	.word	0x297
	.word	sBattleRecords
	.word	0x51c
.Lfe13:
	.size	 MoveRecordedBattleToSaveData,.Lfe13-MoveRecordedBattleToSaveData
	.align	2, 0
	.type	 TryCopyRecordedBattleSaveData,function
	.thumb_func
TryCopyRecordedBattleSaveData:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r0, #0x1f
	bl	TryReadSpecialSaveSection
	cmp	r0, #0x1
	bne	.L255	@cond_branch
	mov	r2, #0xf8
	lsl	r2, r2, #0x4
	add	r0, r5, #0
	add	r1, r4, #0
	bl	memcpy
	add	r0, r5, #0
	bl	IsRecordedBattleSaveValid
	cmp	r0, #0
	beq	.L255	@cond_branch
	mov	r0, #0x1
	b	.L256
.L255:
	mov	r0, #0x0
.L256:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 TryCopyRecordedBattleSaveData,.Lfe14-TryCopyRecordedBattleSaveData
	.align	2, 0
	.type	 CopyRecordedBattleFromSave,function
	.thumb_func
CopyRecordedBattleFromSave:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	AllocZeroed
	add	r5, r0, #0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	TryCopyRecordedBattleSaveData
	add	r4, r0, #0
	add	r0, r5, #0
	bl	Free
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 CopyRecordedBattleFromSave,.Lfe15-CopyRecordedBattleFromSave
	.align	2, 0
	.type	 CB2_RecordedBattleEnd,function
	.thumb_func
CB2_RecordedBattleEnd:
	push	{lr}
	ldr	r0, .L259
	ldr	r2, [r0]
	ldr	r0, .L259+0x4
	ldrb	r0, [r0]
	ldr	r1, .L259+0x8
	add	r2, r2, r1
	mov	r1, #0x3
	and	r1, r1, r0
	ldrb	r3, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L259+0xc
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L259+0x10
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L259+0x14
	strh	r1, [r0]
	ldr	r0, .L259+0x18
	strh	r1, [r0]
	ldr	r0, .L259+0x1c
	strh	r1, [r0]
	bl	RecordedBattle_RestoreSavedParties
	ldr	r0, .L259+0x20
	ldr	r0, [r0]
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L260:
	.align	2, 0
.L259:
	.word	gSaveBlock2Ptr
	.word	sLvlMode
	.word	0xc31
	.word	gBattleOutcome
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent_A
	.word	gTrainerBattleOpponent_B
	.word	gPartnerTrainerId
	.word	sCallback2_AfterRecordedBattle
.Lfe16:
	.size	 CB2_RecordedBattleEnd,.Lfe16-CB2_RecordedBattleEnd
	.align	2, 0
	.type	 Task_StartAfterCountdown,function
	.thumb_func
Task_StartAfterCountdown:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L263
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bne	.L262	@cond_branch
	ldr	r0, .L263+0x4
	ldr	r1, .L263+0x8
	str	r1, [r0, #0x8]
	ldr	r0, .L263+0xc
	bl	SetMainCallback2
	add	r0, r4, #0
	bl	DestroyTask
.L262:
	pop	{r4}
	pop	{r0}
	bx	r0
.L264:
	.align	2, 0
.L263:
	.word	gTasks
	.word	gMain
	.word	CB2_RecordedBattleEnd
	.word	CB2_InitBattle
.Lfe17:
	.size	 Task_StartAfterCountdown,.Lfe17-Task_StartAfterCountdown
	.align	2, 0
	.type	 SetVariablesForRecordedBattle,function
	.thumb_func
SetVariablesForRecordedBattle:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r7, r0, #0
	bl	ZeroPlayerPartyMons
	bl	ZeroEnemyPartyMons
	mov	r6, #0x0
	ldr	r0, .L303
	mov	r8, r0
.L269:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	mov	r1, r8
	add	r0, r4, r1
	add	r5, r7, r4
	add	r1, r5, #0
	mov	r2, #0x64
	bl	memcpy
	ldr	r0, .L303+0x4
	add	r4, r4, r0
	mov	r2, #0x96
	lsl	r2, r2, #0x2
	add	r5, r5, r2
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x64
	bl	memcpy
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L269	@cond_branch
	mov	r6, #0x0
	ldr	r3, .L303+0x8
	mov	r8, r3
	mov	r0, r8
	add	r0, r0, #0x8
	str	r0, [sp]
	mov	r4, r8
	add	r4, r4, #0x4
	mov	sl, r6
	mov	r9, r6
.L274:
	mov	r1, #0x0
	mov	ip, r1
	lsl	r5, r6, #0x2
	mov	r2, #0x96
	lsl	r2, r2, #0x3
	add	r0, r7, r2
	mov	r3, r9
	add	r2, r3, r0
	mov	r0, sl
	lsl	r1, r0, #0x2
	mov	r0, r8
	add	r0, r0, #0x8
	add	r1, r1, r0
	mov	r3, #0x7
.L278:
	ldrb	r0, [r2]
	strb	r0, [r1]
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L277	@cond_branch
	mov	r0, #0x1
	mov	ip, r0
.L277:
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L278	@cond_branch
	mov	r1, #0x9a
	lsl	r1, r1, #0x3
	add	r0, r7, r1
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r4, #0xf]
	ldr	r2, .L303+0xc
	add	r0, r7, r2
	add	r0, r0, r6
	ldrb	r1, [r0]
	strh	r1, [r4, #0x16]
	mov	r3, #0x9e
	lsl	r3, r3, #0x3
	add	r0, r7, r3
	add	r0, r0, r6
	ldrb	r0, [r0]
	strh	r0, [r4, #0x14]
	sub	r2, r2, #0x10
	add	r0, r7, r2
	add	r0, r0, r5
	ldr	r0, [r0]
	str	r0, [r4]
	mov	r3, ip
	cmp	r3, #0
	beq	.L273	@cond_branch
	ldr	r0, [sp]
	bl	ConvertInternationalString
.L273:
	ldr	r0, [sp]
	add	r0, r0, #0x1c
	str	r0, [sp]
	add	r4, r4, #0x1c
	mov	r1, #0x7
	add	sl, sl, r1
	mov	r2, #0x8
	add	r9, r9, r2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L274	@cond_branch
	ldr	r1, .L303+0x10
	mov	r3, #0x9d
	lsl	r3, r3, #0x3
	add	r0, r7, r3
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r2, .L303+0x14
	ldr	r1, .L303+0x18
	add	r0, r7, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L303+0x1c
	ldr	r2, .L303+0x20
	add	r0, r7, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L303+0x24
	add	r3, r3, #0xe
	add	r0, r7, r3
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L303+0x28
	add	r2, r2, #0x4
	add	r0, r7, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L303+0x2c
	add	r3, r3, #0x4
	add	r0, r7, r3
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L303+0x30
	ldr	r3, .L303+0x34
	ldr	r0, [r3]
	ldr	r2, .L303+0x38
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	strb	r0, [r1]
	ldr	r1, .L303+0x3c
	ldr	r2, .L303+0x40
	add	r0, r7, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L303+0x44
	add	r2, r2, #0x1
	add	r0, r7, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r2, .L303+0x48
	ldr	r1, .L303+0x4c
	add	r0, r7, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1f
	lsr	r0, r0, #0x1f
	strb	r0, [r2]
	ldr	r0, .L303+0x50
	lsl	r1, r1, #0x1c
	lsr	r1, r1, #0x1d
	strb	r1, [r0]
	ldr	r1, .L303+0x54
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	add	r0, r7, r2
	ldr	r0, [r0]
	str	r0, [r1]
	mov	r6, #0x0
	mov	sl, r3
	ldr	r2, .L303+0x58
	ldr	r3, .L303+0x5c
	ldr	r0, .L303+0x60
	mov	r8, r0
	ldr	r1, .L303+0x64
	mov	r9, r1
	ldr	r5, .L303+0x68
	ldr	r0, .L303+0x6c
	add	r4, r7, r0
.L286:
	add	r0, r6, r5
	add	r1, r4, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L286	@cond_branch
	ldr	r1, .L303+0x70
	add	r0, r7, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r2, .L303+0x74
	add	r0, r7, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	ldr	r3, .L303+0x78
	add	r0, r7, r3
	ldrb	r0, [r0]
	mov	r1, r8
	strb	r0, [r1]
	add	r2, r2, #0xe
	add	r0, r7, r2
	ldrb	r0, [r0]
	mov	r3, r9
	strb	r0, [r3]
	ldr	r0, .L303+0x7c
	add	r1, r7, r0
	ldr	r4, .L303+0x80
	mov	r6, #0x5
.L291:
	ldrh	r0, [r1]
	strh	r0, [r4]
	add	r1, r1, #0x2
	add	r4, r4, #0x2
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L291	@cond_branch
	mov	r1, sl
	ldr	r2, [r1]
	ldr	r3, .L303+0x84
	add	r0, r7, r3
	ldrb	r0, [r0]
	ldr	r1, .L303+0x38
	add	r2, r2, r1
	mov	r1, #0x3
	and	r1, r1, r0
	ldrb	r3, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r6, #0x0
	ldr	r2, .L303+0x88
	mov	sl, r2
	ldr	r3, .L303+0x8c
	mov	r9, r3
	mov	r0, #0xa6
	lsl	r0, r0, #0x2
	mov	r8, r0
	ldr	r1, .L303+0x90
	add	r5, r7, r1
.L296:
	add	r2, r6, #0x1
	mov	r0, r8
	mul	r0, r0, r6
	add	r1, r0, r5
	mov	r3, r9
	add	r4, r0, r3
	mov	r3, sl
	add	r3, r3, #0x1
.L300:
	ldrb	r0, [r1]
	strb	r0, [r4]
	add	r1, r1, #0x1
	add	r4, r4, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L300	@cond_branch
	add	r6, r2, #0
	cmp	r6, #0x3
	ble	.L296	@cond_branch
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gLinkPlayers
	.word	0x4e4
	.word	gRecordedBattleRngSeed
	.word	gBattleTypeFlags
	.word	0x4ec
	.word	gTrainerBattleOpponent_A
	.word	0x4f4
	.word	gTrainerBattleOpponent_B
	.word	gPartnerTrainerId
	.word	gUnknown_0203C7B4
	.word	sLvlMode
	.word	gSaveBlock2Ptr
	.word	0xc31
	.word	sFrontierFacility
	.word	0x4fd
	.word	sFrontierBrainSymbol
	.word	sBattleScene
	.word	0x4ff
	.word	sTextSpeed
	.word	sAI_Scripts
	.word	sRecordMixFriendClass
	.word	sApprenticeId
	.word	sRecordMixFriendLanguage
	.word	sApprenticeLanguage
	.word	sRecordMixFriendName
	.word	0x504
	.word	0x50c
	.word	0x50d
	.word	0x51a
	.word	0x50e
	.word	sEasyChatSpeech
	.word	0x4fc
	.word	0x297
	.word	sBattleRecords
	.word	0x51c
.Lfe18:
	.size	 SetVariablesForRecordedBattle,.Lfe18-SetVariablesForRecordedBattle
	.align	2, 0
	.globl	PlayRecordedBattle
	.type	 PlayRecordedBattle,function
	.thumb_func
PlayRecordedBattle:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r0, #0xf8
	lsl	r0, r0, #0x4
	bl	AllocZeroed
	add	r4, r0, #0
	bl	CopyRecordedBattleFromSave
	cmp	r0, #0x1
	bne	.L306	@cond_branch
	bl	RecordedBattle_SaveParties
	add	r0, r4, #0
	bl	SetVariablesForRecordedBattle
	ldr	r0, .L307
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L307+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x80
	strh	r0, [r1, #0x8]
	ldr	r0, .L307+0x8
	str	r5, [r0]
	mov	r0, #0x0
	bl	PlayMapChosenOrBattleBGM
	ldr	r0, .L307+0xc
	bl	SetMainCallback2
.L306:
	add	r0, r4, #0
	bl	Free
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L308:
	.align	2, 0
.L307:
	.word	Task_StartAfterCountdown
	.word	gTasks
	.word	sCallback2_AfterRecordedBattle
	.word	CB2_RecordedBattle
.Lfe19:
	.size	 PlayRecordedBattle,.Lfe19-PlayRecordedBattle
	.align	2, 0
	.type	 CB2_RecordedBattle,function
	.thumb_func
CB2_RecordedBattle:
	push	{lr}
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	RunTasks
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 CB2_RecordedBattle,.Lfe20-CB2_RecordedBattle
	.align	2, 0
	.globl	GetRecordedBattleFrontierFacility
	.type	 GetRecordedBattleFrontierFacility,function
	.thumb_func
GetRecordedBattleFrontierFacility:
	ldr	r0, .L311
	ldrb	r0, [r0]
	bx	lr
.L312:
	.align	2, 0
.L311:
	.word	sFrontierFacility
.Lfe21:
	.size	 GetRecordedBattleFrontierFacility,.Lfe21-GetRecordedBattleFrontierFacility
	.align	2, 0
	.globl	GetRecordedBattleFronterBrainSymbol
	.type	 GetRecordedBattleFronterBrainSymbol,function
	.thumb_func
GetRecordedBattleFronterBrainSymbol:
	ldr	r0, .L314
	ldrb	r0, [r0]
	bx	lr
.L315:
	.align	2, 0
.L314:
	.word	sFrontierBrainSymbol
.Lfe22:
	.size	 GetRecordedBattleFronterBrainSymbol,.Lfe22-GetRecordedBattleFronterBrainSymbol
	.align	2, 0
	.globl	RecordedBattle_SaveParties
	.type	 RecordedBattle_SaveParties,function
	.thumb_func
RecordedBattle_SaveParties:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	ldr	r6, .L322
.L320:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	add	r0, r4, r6
	ldr	r1, .L322+0x4
	add	r1, r4, r1
	mov	r2, #0x64
	bl	memcpy
	ldr	r0, .L322+0x8
	add	r0, r4, r0
	ldr	r1, .L322+0xc
	add	r4, r4, r1
	add	r1, r4, #0
	mov	r2, #0x64
	bl	memcpy
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L320	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L323:
	.align	2, 0
.L322:
	.word	sSavedPlayerParty
	.word	gPlayerParty
	.word	sSavedOpponentParty
	.word	gEnemyParty
.Lfe23:
	.size	 RecordedBattle_SaveParties,.Lfe23-RecordedBattle_SaveParties
	.align	2, 0
	.type	 RecordedBattle_RestoreSavedParties,function
	.thumb_func
RecordedBattle_RestoreSavedParties:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	ldr	r6, .L330
.L328:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	add	r0, r4, r6
	ldr	r1, .L330+0x4
	add	r1, r4, r1
	mov	r2, #0x64
	bl	memcpy
	ldr	r0, .L330+0x8
	add	r0, r4, r0
	ldr	r1, .L330+0xc
	add	r4, r4, r1
	add	r1, r4, #0
	mov	r2, #0x64
	bl	memcpy
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L328	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L331:
	.align	2, 0
.L330:
	.word	gPlayerParty
	.word	sSavedPlayerParty
	.word	gEnemyParty
	.word	sSavedOpponentParty
.Lfe24:
	.size	 RecordedBattle_RestoreSavedParties,.Lfe24-RecordedBattle_RestoreSavedParties
	.align	2, 0
	.globl	GetActiveBattlerLinkPlayerGender
	.type	 GetActiveBattlerLinkPlayerGender,function
	.thumb_func
GetActiveBattlerLinkPlayerGender:
	push	{r4, r5, lr}
	mov	r2, #0x0
	ldr	r0, .L341
	ldr	r3, .L341+0x4
	ldrh	r1, [r0, #0x18]
	add	r4, r0, #0
	ldrb	r0, [r3]
	cmp	r1, r0
	beq	.L334	@cond_branch
	add	r1, r4, #0
.L335:
	add	r1, r1, #0x1c
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L334	@cond_branch
	ldrh	r0, [r1, #0x18]
	ldrb	r5, [r3]
	cmp	r0, r5
	bne	.L335	@cond_branch
.L334:
	cmp	r2, #0x4
	bne	.L339	@cond_branch
	mov	r0, #0x0
	b	.L340
.L342:
	.align	2, 0
.L341:
	.word	gLinkPlayers
	.word	gActiveBattler
.L339:
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x13]
.L340:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 GetActiveBattlerLinkPlayerGender,.Lfe25-GetActiveBattlerLinkPlayerGender
	.align	2, 0
	.globl	sub_8185F84
	.type	 sub_8185F84,function
	.thumb_func
sub_8185F84:
	ldr	r1, .L344
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L345:
	.align	2, 0
.L344:
	.word	sUnknown_0203C7B5
.Lfe26:
	.size	 sub_8185F84,.Lfe26-sub_8185F84
	.align	2, 0
	.globl	sub_8185F90
	.type	 sub_8185F90,function
	.thumb_func
sub_8185F90:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L347
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x1f
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	bx	lr
.L348:
	.align	2, 0
.L347:
	.word	sUnknown_0203C7B5
.Lfe27:
	.size	 sub_8185F90,.Lfe27-sub_8185F90
	.align	2, 0
	.globl	sub_8185FAC
	.type	 sub_8185FAC,function
	.thumb_func
sub_8185FAC:
	ldr	r0, .L350
	ldrb	r0, [r0]
	bx	lr
.L351:
	.align	2, 0
.L350:
	.word	sUnknown_0203C7B5
.Lfe28:
	.size	 sub_8185FAC,.Lfe28-sub_8185FAC
	.align	2, 0
	.globl	GetBattleSceneInRecordedBattle
	.type	 GetBattleSceneInRecordedBattle,function
	.thumb_func
GetBattleSceneInRecordedBattle:
	ldr	r0, .L353
	ldrb	r0, [r0]
	bx	lr
.L354:
	.align	2, 0
.L353:
	.word	sBattleScene
.Lfe29:
	.size	 GetBattleSceneInRecordedBattle,.Lfe29-GetBattleSceneInRecordedBattle
	.align	2, 0
	.globl	GetTextSpeedInRecordedBattle
	.type	 GetTextSpeedInRecordedBattle,function
	.thumb_func
GetTextSpeedInRecordedBattle:
	ldr	r0, .L356
	ldrb	r0, [r0]
	bx	lr
.L357:
	.align	2, 0
.L356:
	.word	sTextSpeed
.Lfe30:
	.size	 GetTextSpeedInRecordedBattle,.Lfe30-GetTextSpeedInRecordedBattle
	.align	2, 0
	.globl	RecordedBattle_CopyBattlerMoves
	.type	 RecordedBattle_CopyBattlerMoves,function
	.thumb_func
RecordedBattle_CopyBattlerMoves:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L367
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L358	@cond_branch
	ldr	r0, .L367+0x4
	ldr	r0, [r0]
	ldr	r1, .L367+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L358	@cond_branch
	ldr	r0, .L367+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L358	@cond_branch
	mov	r3, #0x0
	ldr	r7, .L367+0x10
	add	r6, r4, #0
	ldr	r5, .L367+0x14
	mov	r4, #0x5c
.L365:
	lsl	r2, r3, #0x1
	ldrb	r1, [r6]
	lsr	r0, r1, #0x1
	lsl	r0, r0, #0x3
	add	r0, r2, r0
	add	r0, r0, r7
	mul	r1, r1, r4
	add	r2, r2, r1
	add	r2, r2, r5
	ldrh	r1, [r2]
	strh	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L365	@cond_branch
.L358:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L368:
	.align	2, 0
.L367:
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	0x2000002
	.word	sUnknown_0203C7AC
	.word	sPlayerMonMoves
	.word	gBattleMons+0xc
.Lfe31:
	.size	 RecordedBattle_CopyBattlerMoves,.Lfe31-RecordedBattle_CopyBattlerMoves
	.align	2, 0
	.globl	sub_818603C
	.type	 sub_818603C,function
	.thumb_func
sub_818603C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x50
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x24]
	ldr	r0, .L440
	ldr	r0, [r0]
	ldr	r1, .L440+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB3278
	b	.L369	@long jump
.LCB3278:
	mov	r0, #0x0
	mov	sl, r0
	b	.L439
.L441:
	.align	2, 0
.L440:
	.word	gBattleTypeFlags
	.word	0x2000002
.L374:
	mov	r1, sl
	lsl	r4, r1, #0x18
	lsr	r5, r4, #0x18
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r4, [sp, #0x4c]
	mov	r2, sl
	add	r2, r2, #0x1
	str	r2, [sp, #0x38]
	cmp	r0, #0x1
	bne	.LCB3310
	b	.L373	@long jump
.LCB3310:
	ldr	r3, [sp, #0x24]
	cmp	r3, #0x1
	bne	.L376	@cond_branch
	mov	r5, #0x0
	ldr	r4, .L442
	mov	r0, sl
	asr	r6, r0, #0x1f
	sub	r0, r0, r6
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x3
	add	r2, r0, r4
	mov	r1, #0x5c
	mov	r0, sl
	mul	r0, r0, r1
	ldr	r3, .L442+0x4
	add	r1, r0, r3
.L380:
	ldrh	r0, [r1]
	ldrh	r4, [r2]
	cmp	r0, r4
	bne	.L378	@cond_branch
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L380	@cond_branch
.L378:
	cmp	r5, #0x4
	bne	.LCB3361
	b	.L373	@long jump
.LCB3361:
	ldr	r5, [sp, #0x4c]
	lsr	r0, r5, #0x18
	mov	r1, #0x6
	bl	RecordedBattle_SetBattlerAction
	mov	r5, #0x0
	ldr	r0, .L442
	mov	r8, r0
	mov	r1, #0x5c
	mov	r7, sl
	mul	r7, r7, r1
	mov	r2, sl
	sub	r0, r2, r6
	asr	r4, r0, #0x1
.L387:
	mov	r2, #0x0
	lsl	r0, r5, #0x1
	add	r5, r5, #0x1
	add	r0, r0, r7
	ldr	r1, .L442+0x4
	add	r3, r0, r1
	lsl	r0, r4, #0x3
	mov	r6, r8
	add	r1, r0, r6
.L391:
	ldrh	r0, [r3]
	ldrh	r6, [r1]
	cmp	r0, r6
	bne	.L390	@cond_branch
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, [sp, #0x4c]
	lsr	r0, r2, #0x18
	bl	RecordedBattle_SetBattlerAction
	b	.L386
.L443:
	.align	2, 0
.L442:
	.word	sPlayerMonMoves
	.word	gBattleMons+0xc
.L390:
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L391	@cond_branch
.L386:
	cmp	r5, #0x3
	ble	.L387	@cond_branch
	b	.L373
.L376:
	ldr	r3, .L444
	ldr	r1, .L444+0x4
	mov	r4, sl
	lsl	r2, r4, #0x1
	add	r1, r2, r1
	mov	r0, #0xa6
	lsl	r0, r0, #0x2
	mov	r6, sl
	mul	r6, r6, r0
	add	r0, r6, #0
	ldrh	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	str	r2, [sp, #0x44]
	cmp	r0, #0x6
	beq	.LCB3474
	b	.L373	@long jump
.LCB3474:
	add	r0, r5, #0
	bl	RecordedBattle_GetBattlerAction
	mov	r5, #0x0
	mov	r0, sp
	add	r0, r0, #0x4
	str	r0, [sp, #0x28]
	mov	r1, sp
	add	r1, r1, #0xc
	str	r1, [sp, #0x30]
	mov	r2, sp
	add	r2, r2, #0x14
	str	r2, [sp, #0x34]
	mov	r3, sp
	add	r3, r3, #0x18
	str	r3, [sp, #0x3c]
	mov	r4, sp
	add	r4, r4, #0x8
	str	r4, [sp, #0x2c]
	mov	r6, sl
	lsl	r6, r6, #0x2
	str	r6, [sp, #0x48]
	mov	r1, #0x5c
	mov	r0, sl
	mul	r0, r0, r1
	ldr	r2, .L444+0x8
	add	r0, r0, r2
	add	r6, r0, #0
	add	r6, r6, #0x3d
	mov	r4, #0x3
.L400:
	mov	r0, sp
	add	r3, r0, r5
	ldrb	r1, [r6]
	lsl	r2, r5, #0x1
	add	r0, r4, #0
	lsl	r0, r0, r2
	and	r1, r1, r0
	asr	r1, r1, r2
	strb	r1, [r3]
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L400	@cond_branch
	mov	r5, #0x0
	ldr	r1, .L444+0x8
	mov	r9, r1
	mov	r2, #0x5c
	mov	r7, sl
	mul	r7, r7, r2
	ldr	r4, [sp, #0x28]
	ldr	r6, [sp, #0x30]
.L405:
	ldr	r3, [sp, #0x4c]
	lsr	r0, r3, #0x18
	bl	RecordedBattle_GetBattlerAction
	strb	r0, [r4]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	mov	r1, #0xc
	add	r1, r1, r9
	mov	r8, r1
	add	r0, r0, r8
	ldrh	r0, [r0]
	strh	r0, [r6]
	ldr	r2, [sp, #0x34]
	add	r1, r2, r5
	ldrb	r0, [r4]
	add	r0, r0, r7
	ldr	r3, .L444+0xc
	add	r0, r0, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, [sp, #0x3c]
	add	r1, r0, r5
	ldrb	r0, [r4]
	add	r0, r0, sp
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, [sp, #0x2c]
	add	r3, r1, r5
	ldr	r0, [sp, #0x48]
	add	r0, r0, sl
	lsl	r0, r0, #0x3
	ldr	r2, .L444+0x10
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1a]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1c
	ldr	r2, .L444+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	lsr	r1, r1, r5
	strb	r1, [r3]
	add	r4, r4, #0x1
	add	r6, r6, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L405	@cond_branch
	mov	r5, #0x0
	mov	r3, #0xc
	neg	r3, r3
	add	r3, r3, r8
	mov	ip, r3
	ldr	r4, .L444+0x10
	mov	r9, r4
	mov	r6, #0x5c
	mov	r1, sl
	mul	r1, r1, r6
	mov	r0, r8
	add	r0, r0, #0x19
	add	r4, r1, r0
	add	r3, r1, #0
	mov	r7, r8
	ldr	r6, [sp, #0x34]
	ldr	r2, [sp, #0x30]
.L410:
	add	r1, r3, r7
	ldrh	r0, [r2]
	strh	r0, [r1]
	add	r0, r6, r5
	ldrb	r0, [r0]
	strb	r0, [r4]
	add	r4, r4, #0x1
	add	r3, r3, #0x2
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L410	@cond_branch
	mov	r0, #0x5c
	mov	r4, sl
	mul	r4, r4, r0
	mov	r1, ip
	add	r0, r4, r1
	add	r0, r0, #0x3d
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r3, [sp, #0x48]
	add	r3, r3, sl
	lsl	r3, r3, #0x3
	mov	r5, r9
	add	r2, r3, r5
	ldrb	r0, [r2, #0x1a]
	mov	r6, #0x3d
	neg	r6, r6
	add	r1, r6, #0
	and	r0, r0, r1
	strb	r0, [r2, #0x1a]
	mov	r5, #0x0
	ldr	r0, .L444+0x8
	add	r4, r4, r0
	add	r4, r4, #0x3d
	ldr	r0, .L444+0x10
	add	r3, r3, r0
.L415:
	ldr	r1, [sp, #0x3c]
	add	r0, r1, r5
	ldrb	r0, [r0]
	lsl	r1, r5, #0x1
	lsl	r0, r0, r1
	ldrb	r1, [r4]
	orr	r0, r0, r1
	strb	r0, [r4]
	ldrb	r2, [r3, #0x1a]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1c
	ldr	r6, [sp, #0x2c]
	add	r0, r6, r5
	ldrb	r0, [r0]
	lsl	r0, r0, r5
	orr	r0, r0, r1
	mov	r1, #0xf
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r6, #0x3d
	neg	r6, r6
	add	r1, r6, #0
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r3, #0x1a]
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L415	@cond_branch
	mov	r1, #0x5c
	mov	r0, sl
	mul	r0, r0, r1
	mov	r1, ip
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB3723
	b	.L417	@long jump
.LCB3723:
	mov	r5, #0x0
	mov	r2, sp
	add	r2, r2, #0x20
	str	r2, [sp, #0x40]
	ldr	r0, .L444+0x18
	ldr	r3, [sp, #0x44]
	add	r6, r3, r0
.L421:
	ldrh	r1, [r6]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r4, .L444+0x1c
	add	r0, r0, r4
	mov	r1, #0x15
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, sp
	add	r3, r1, r5
	lsl	r2, r5, #0x1
	mov	r1, #0x3
	lsl	r1, r1, r2
	and	r0, r0, r1
	lsr	r0, r0, r2
	strb	r0, [r3]
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L421	@cond_branch
	mov	r5, #0x0
	ldr	r0, .L444+0x18
	ldr	r2, [sp, #0x44]
	add	r7, r2, r0
	mov	r3, #0x64
	mov	r9, r3
	mov	r8, r4
	ldr	r4, [sp, #0x28]
	ldr	r6, [sp, #0x30]
.L426:
	ldrh	r0, [r7]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	ldrb	r1, [r4]
	add	r1, r1, #0xd
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r6]
	ldrh	r0, [r7]
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r8
	ldrb	r1, [r4]
	add	r1, r1, #0x11
	mov	r2, #0x0
	bl	GetMonData
	ldr	r3, [sp, #0x34]
	add	r1, r3, r5
	strb	r0, [r1]
	ldr	r0, [sp, #0x3c]
	add	r1, r0, r5
	ldrb	r0, [r4]
	add	r0, r0, sp
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r4, r4, #0x1
	add	r6, r6, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L426	@cond_branch
	mov	r5, #0x0
	ldr	r0, .L444+0x18
	ldr	r1, [sp, #0x44]
	add	r7, r1, r0
	mov	r2, #0x64
	mov	r9, r2
	ldr	r3, .L444+0x1c
	mov	r8, r3
	ldr	r6, [sp, #0x30]
	add	r6, r6, #0x8
	ldr	r4, [sp, #0x30]
.L431:
	ldrh	r0, [r7]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	add	r1, r5, #0
	add	r1, r1, #0xd
	add	r2, r4, #0
	bl	SetMonData
	ldrh	r0, [r7]
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r8
	add	r1, r5, #0
	add	r1, r1, #0x11
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L431	@cond_branch
	mov	r0, #0x0
	ldr	r3, [sp, #0x40]
	strb	r0, [r3]
	mov	r5, #0x0
	ldr	r4, .L444+0x18
	ldr	r6, .L444+0x1c
	ldr	r3, [sp, #0x3c]
	ldr	r2, [sp, #0x40]
.L436:
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r5, #0x1
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L436	@cond_branch
	ldr	r5, [sp, #0x44]
	add	r0, r5, r4
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	add	r0, r0, r6
	mov	r1, #0x15
	ldr	r2, [sp, #0x40]
	bl	SetMonData
.L417:
	ldr	r2, .L444+0x20
	ldr	r6, [sp, #0x44]
	add	r2, r6, r2
	ldr	r0, .L444+0x24
	ldr	r0, [r0]
	add	r0, r0, sl
	add	r0, r0, #0x7f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r3, #0x5c
	mov	r1, sl
	mul	r1, r1, r3
	add	r0, r0, r1
	ldr	r1, .L444+0x8
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2]
.L373:
	ldr	r4, [sp, #0x38]
	mov	sl, r4
.L439:
	ldr	r0, .L444+0x28
	ldrb	r0, [r0]
	cmp	sl, r0
	bge	.LCB3943
	b	.L374	@long jump
.LCB3943:
.L369:
	add	sp, sp, #0x50
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L445:
	.align	2, 0
.L444:
	.word	sBattleRecords
	.word	sRecordedBytesNo
	.word	gBattleMons
	.word	gBattleMons+0x25
	.word	gDisableStructs
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gChosenMoveByBattler
	.word	gBattleStruct
	.word	gBattlersCount
.Lfe32:
	.size	 sub_818603C,.Lfe32-sub_818603C
	.align	2, 0
	.globl	GetAiScriptsInRecordedBattle
	.type	 GetAiScriptsInRecordedBattle,function
	.thumb_func
GetAiScriptsInRecordedBattle:
	ldr	r0, .L447
	ldr	r0, [r0]
	bx	lr
.L448:
	.align	2, 0
.L447:
	.word	sAI_Scripts
.Lfe33:
	.size	 GetAiScriptsInRecordedBattle,.Lfe33-GetAiScriptsInRecordedBattle
	.align	2, 0
	.globl	sub_8186444
	.type	 sub_8186444,function
	.thumb_func
sub_8186444:
	ldr	r1, .L450
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L451:
	.align	2, 0
.L450:
	.word	sUnknown_0203CCD0
.Lfe34:
	.size	 sub_8186444,.Lfe34-sub_8186444
	.align	2, 0
	.globl	sub_8186450
	.type	 sub_8186450,function
	.thumb_func
sub_8186450:
	push	{lr}
	mov	r1, #0x0
	ldr	r0, .L454
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L453	@cond_branch
	mov	r1, #0x1
.L453:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L455:
	.align	2, 0
.L454:
	.word	sUnknown_0203CCD0
.Lfe35:
	.size	 sub_8186450,.Lfe35-sub_8186450
	.align	2, 0
	.globl	sub_8186468
	.type	 sub_8186468,function
	.thumb_func
sub_8186468:
	push	{r4, r5, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	ldr	r5, .L462
	ldr	r4, .L462+0x4
.L460:
	add	r0, r3, r2
	add	r1, r2, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L460	@cond_branch
	mov	r0, #0xff
	strb	r0, [r3, #0x7]
	ldrb	r1, [r5]
	add	r0, r3, #0
	bl	ConvertInternationalString
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L463:
	.align	2, 0
.L462:
	.word	sRecordMixFriendLanguage
	.word	sRecordMixFriendName
.Lfe36:
	.size	 sub_8186468,.Lfe36-sub_8186468
	.align	2, 0
	.globl	GetRecordedBattleRecordMixFriendClass
	.type	 GetRecordedBattleRecordMixFriendClass,function
	.thumb_func
GetRecordedBattleRecordMixFriendClass:
	ldr	r0, .L465
	ldrb	r0, [r0]
	bx	lr
.L466:
	.align	2, 0
.L465:
	.word	sRecordMixFriendClass
.Lfe37:
	.size	 GetRecordedBattleRecordMixFriendClass,.Lfe37-GetRecordedBattleRecordMixFriendClass
	.align	2, 0
	.globl	GetRecordedBattleApprenticeId
	.type	 GetRecordedBattleApprenticeId,function
	.thumb_func
GetRecordedBattleApprenticeId:
	ldr	r0, .L468
	ldrb	r0, [r0]
	bx	lr
.L469:
	.align	2, 0
.L468:
	.word	sApprenticeId
.Lfe38:
	.size	 GetRecordedBattleApprenticeId,.Lfe38-GetRecordedBattleApprenticeId
	.align	2, 0
	.globl	GetRecordedBattleRecordMixFriendLanguage
	.type	 GetRecordedBattleRecordMixFriendLanguage,function
	.thumb_func
GetRecordedBattleRecordMixFriendLanguage:
	ldr	r0, .L471
	ldrb	r0, [r0]
	bx	lr
.L472:
	.align	2, 0
.L471:
	.word	sRecordMixFriendLanguage
.Lfe39:
	.size	 GetRecordedBattleRecordMixFriendLanguage,.Lfe39-GetRecordedBattleRecordMixFriendLanguage
	.align	2, 0
	.globl	GetRecordedBattleApprenticeLanguage
	.type	 GetRecordedBattleApprenticeLanguage,function
	.thumb_func
GetRecordedBattleApprenticeLanguage:
	ldr	r0, .L474
	ldrb	r0, [r0]
	bx	lr
.L475:
	.align	2, 0
.L474:
	.word	sApprenticeLanguage
.Lfe40:
	.size	 GetRecordedBattleApprenticeLanguage,.Lfe40-GetRecordedBattleApprenticeLanguage
	.align	2, 0
	.globl	RecordedBattle_SaveBattleOutcome
	.type	 RecordedBattle_SaveBattleOutcome,function
	.thumb_func
RecordedBattle_SaveBattleOutcome:
	ldr	r0, .L477
	ldr	r1, .L477+0x4
	ldrb	r1, [r1]
	strb	r1, [r0]
	bx	lr
.L478:
	.align	2, 0
.L477:
	.word	sBattleOutcome
	.word	gBattleOutcome
.Lfe41:
	.size	 RecordedBattle_SaveBattleOutcome,.Lfe41-RecordedBattle_SaveBattleOutcome
	.align	2, 0
	.globl	GetRecordedBattleEasyChatSpeech
	.type	 GetRecordedBattleEasyChatSpeech,function
	.thumb_func
GetRecordedBattleEasyChatSpeech:
	ldr	r0, .L480
	bx	lr
.L481:
	.align	2, 0
.L480:
	.word	sEasyChatSpeech
.Lfe42:
	.size	 GetRecordedBattleEasyChatSpeech,.Lfe42-GetRecordedBattleEasyChatSpeech

	.lcomm	sRecordMixFriendLanguage,1

	.lcomm	sApprenticeLanguage,1
.text
	.align	2, 0

