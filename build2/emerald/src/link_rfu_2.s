@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gHostRFUtgtGnameBuffer
	.section ewram_data,"aw"
	.align	1, 0
	.type	 gHostRFUtgtGnameBuffer,object
	.size	 gHostRFUtgtGnameBuffer,14
gHostRFUtgtGnameBuffer:
	.space	14
	.globl	gHostRFUtgtUnameBuffer
	.type	 gHostRFUtgtUnameBuffer,object
	.size	 gHostRFUtgtUnameBuffer,8
gHostRFUtgtUnameBuffer:
	.space	8
	.align	2, 0
	.type	 sRfuReqConfig,object
	.size	 sRfuReqConfig,24
sRfuReqConfig:
	.space	24
	.align	2, 0
	.type	 sRfuDebug,object
	.size	 sRfuDebug,220
sRfuDebug:
	.space	220
	.section .rodata
	.align	2, 0
	.type	 sRfuReqConfigTemplate,object
	.size	 sRfuReqConfigTemplate,24
sRfuReqConfigTemplate:
	.byte	0x4
	.byte	0x20
	.short	0x0
	.byte	0x0
	.space	1
	.short	0x2
	.word	gHostRFUtgtGnameBuffer
	.word	gHostRFUtgtUnameBuffer
	.byte	0x1
	.byte	0x0
	.short	0x258
	.short	0x12c
	.space	2
	.type	 sAvailSlots,object
sAvailSlots:
	.space	1
	.byte	0x3
	.byte	0x2
	.byte	0x1
	.byte	0x0
	.size	 sAvailSlots,5
	.align	2, 0
	.type	 sAllBlocksReceived,object
sAllBlocksReceived:
	.word	0x0
	.word	0x1
	.word	0x3
	.word	0x7
	.word	0xf
	.word	0x1f
	.word	0x3f
	.word	0x7f
	.word	0xff
	.word	0x1ff
	.word	0x3ff
	.word	0x7ff
	.word	0xfff
	.word	0x1fff
	.word	0x3fff
	.word	0x7fff
	.word	0xffff
	.word	0x1ffff
	.word	0x3ffff
	.word	0x7ffff
	.word	0xfffff
	.word	0x1fffff
	.word	0x3fffff
	.word	0x7fffff
	.word	0xffffff
	.size	 sAllBlocksReceived,100
	.type	 sUnknown_082ED68C,object
sUnknown_082ED68C:
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.size	 sUnknown_082ED68C,9
	.type	 sUnknown_082ED695,object
sUnknown_082ED695:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x4
	.size	 sUnknown_082ED695,16
	.type	 sUnknown_082ED6A5,object
sUnknown_082ED6A5:
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.size	 sUnknown_082ED6A5,16
	.align	2, 0
	.type	 sBlockRequests,object
sBlockRequests:
	.word	gBlockSendBuffer
	.word	0xc8
	.word	gBlockSendBuffer
	.word	0xc8
	.word	gBlockSendBuffer
	.word	0x64
	.word	gBlockSendBuffer
	.word	0xdc
	.word	gBlockSendBuffer
	.word	0x28
	.size	 sBlockRequests,40
	.align	1, 0
	.type	 sAcceptedSerialNos,object
sAcceptedSerialNos:
	.short	0x2
	.short	0x7f7d
	.short	0x0
	.short	0xffff
	.size	 sAcceptedSerialNos,8
	.type	 sASCII_RfuCmds,object
sASCII_RfuCmds:
	.ascii	"RFU WAIT\000"
	.space	6
	.ascii	"RFU BOOT\000"
	.space	6
	.ascii	"RFU ERROR\000"
	.space	5
	.ascii	"RFU RESET\000"
	.space	5
	.ascii	"RFU CONFIG\000"
	.space	4
	.ascii	"RFU START\000"
	.space	5
	.ascii	"RFU SC POLL\000"
	.space	3
	.ascii	"RFU SP POLL\000"
	.space	3
	.ascii	"RFU START\000"
	.space	5
	.ascii	"RFU SEND ERR\000"
	.space	2
	.ascii	"RFU CP POLL\000"
	.space	3
	.size	 sASCII_RfuCmds,165
	.type	 sASCII_RecoverCmds,object
sASCII_RecoverCmds:
	.ascii	"              \000"
	.space	1
	.ascii	"RECOVER START \000"
	.space	1
	.ascii	"DISSCONECT    \000"
	.space	1
	.ascii	"RECOVER SUUSES\000"
	.space	1
	.ascii	"RECOVER FAILED\000"
	.space	1
	.size	 sASCII_RecoverCmds,80
	.align	2, 0
	.type	 sUnknown_082ED7E0,object
sUnknown_082ED7E0:
	.word	sub_801084C
	.word	Task_ExchangeLinkPlayers
	.word	sub_8010D0C
	.size	 sUnknown_082ED7E0,12
	.align	2, 0
	.type	 sASCII_PokemonSioInfo,object
	.size	 sASCII_PokemonSioInfo,15
sASCII_PokemonSioInfo:
	.ascii	"PokemonSioInfo\000"
	.align	2, 0
	.type	 sASCII_LinkLossDisconnect,object
	.size	 sASCII_LinkLossDisconnect,22
sASCII_LinkLossDisconnect:
	.ascii	"LINK LOSS DISCONNECT!\000"
	.align	2, 0
	.type	 sASCII_LinkLossRecoveryNow,object
	.size	 sASCII_LinkLossRecoveryNow,23
sASCII_LinkLossRecoveryNow:
	.ascii	"LINK LOSS RECOVERY NOW\000"
	.align	2, 0
	.type	 sASCII_30Commas,object
	.size	 sASCII_30Commas,31
sASCII_30Commas:
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x0
	.type	 sASCII_15Commas,object
	.size	 sASCII_15Commas,16
sASCII_15Commas:
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x0
	.type	 sASCII_8Commas,object
	.size	 sASCII_8Commas,9
sASCII_8Commas:
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x0
	.align	2, 0
	.type	 sASCII_Space,object
	.size	 sASCII_Space,2
sASCII_Space:
	.byte	0x20
	.byte	0x0
	.type	 sASCII_Asterisk,object
	.size	 sASCII_Asterisk,2
sASCII_Asterisk:
	.byte	0x2a
	.byte	0x0
	.align	2, 0
	.type	 sASCII_NowSlot,object
	.size	 sASCII_NowSlot,8
sASCII_NowSlot:
	.ascii	"NOWSLOT\000"
	.type	 sASCII_ClockCmds,object
sASCII_ClockCmds:
	.ascii	"           \000"
	.ascii	"CLOCK DRIFT\000"
	.ascii	"BUSY SEND  \000"
	.ascii	"CMD REJECT \000"
	.ascii	"CLOCK SLAVE\000"
	.size	 sASCII_ClockCmds,60
	.type	 sASCII_ChildParentSearch,object
	.size	 sASCII_ChildParentSearch,24
sASCII_ChildParentSearch:
	.ascii	"CHILD \000"
	.space	1
	.ascii	"PARENT\000"
	.space	1
	.ascii	"SEARCH\000"
	.space	1
.text
	.align	2, 0
	.type	 Debug_PrintString,function
	.thumb_func
Debug_PrintString:
	bx	lr
.Lfe1:
	.size	 Debug_PrintString,.Lfe1-Debug_PrintString
	.align	2, 0
	.type	 Debug_PrintNum,function
	.thumb_func
Debug_PrintNum:
	bx	lr
.Lfe2:
	.size	 Debug_PrintNum,.Lfe2-Debug_PrintNum
	.align	2, 0
	.globl	ResetLinkRfuGFLayer
	.type	 ResetLinkRfuGFLayer,function
	.thumb_func
ResetLinkRfuGFLayer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	ldr	r6, .L11
	add	r5, r6, #0
	add	r5, r5, #0xee
	ldrb	r4, [r5]
	mov	r0, sp
	mov	r7, #0x0
	strh	r7, [r0]
	ldr	r2, .L11+0x4
	add	r1, r6, #0
	bl	CpuSet
	ldrb	r0, [r5]
	strb	r4, [r5]
	mov	r0, #0xff
	strb	r0, [r6, #0xc]
	ldrb	r0, [r5]
	cmp	r0, #0x4
	beq	.L5	@cond_branch
	ldrb	r0, [r5]
	strb	r7, [r5]
.L5:
	mov	r7, sp
	add	r7, r7, #0x2
	add	r0, sp, #0x4
	mov	r8, r0
	mov	r0, #0x6
	add	r0, r0, sp
	mov	r9, r0
	add	r5, r6, #0
	add	r5, r5, #0x80
	mov	r4, #0x4
.L9:
	add	r0, r5, #0
	bl	ResetSendDataManager
	add	r5, r5, #0x14
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L9	@cond_branch
	mov	r5, #0x0
	ldr	r4, .L11+0x8
	add	r0, r4, #0
	bl	ResetSendDataManager
	add	r0, r4, #0
	add	r0, r0, #0xb8
	bl	RfuRecvQueue_Reset
	ldr	r0, .L11+0xc
	add	r4, r4, r0
	add	r0, r4, #0
	bl	RfuSendQueue_Reset
	strh	r5, [r7]
	ldr	r1, .L11+0x10
	ldr	r2, .L11+0x14
	add	r0, r7, #0
	bl	CpuSet
	mov	r0, r8
	strh	r5, [r0]
	ldr	r1, .L11+0x18
	ldr	r2, .L11+0x1c
	bl	CpuSet
	mov	r0, r9
	strh	r5, [r0]
	ldr	r1, .L11+0x20
	ldr	r2, .L11+0x24
	bl	CpuSet
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	Rfu
	.word	0x100067a
	.word	Rfu+0x6c
	.word	0x97c
	.word	gSendCmd
	.word	0x1000008
	.word	gRecvCmds
	.word	0x1000028
	.word	gLinkPlayers
	.word	0x1000046
.Lfe3:
	.size	 ResetLinkRfuGFLayer,.Lfe3-ResetLinkRfuGFLayer
	.align	2, 0
	.globl	InitRFU
	.type	 InitRFU,function
	.thumb_func
InitRFU:
	push	{r4, r5, r6, lr}
	ldr	r4, .L14
	ldr	r5, [r4, #0x4]
	ldr	r6, [r4, #0x8]
	bl	InitRFUAPI
	bl	rfu_REQ_stopMode
	bl	rfu_waitREQComplete
	ldr	r1, .L14+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	str	r5, [r4, #0x4]
	str	r6, [r4, #0x8]
	mov	r0, #0x1
	strh	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gIntrTable
	.word	0x4000208
.Lfe4:
	.size	 InitRFU,.Lfe4-InitRFU
	.align	2, 0
	.globl	InitRFUAPI
	.type	 InitRFUAPI,function
	.thumb_func
InitRFUAPI:
	push	{r4, lr}
	ldr	r0, .L18
	ldr	r1, .L18+0x4
	ldr	r4, .L18+0x8
	add	r2, r4, #0
	mov	r3, #0x1
	bl	rfu_initializeAPI
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L17	@cond_branch
	ldr	r0, .L18+0xc
	strh	r1, [r0]
	bl	ClearSavedLinkPlayers
	mov	r0, #0x0
	bl	sub_80111B0
	bl	ResetLinkRfuGFLayer
	add	r1, r4, #0x4
	mov	r0, #0x3
	bl	rfu_setTimerInterrupt
.L17:
	pop	{r4}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gf_rfu_REQ_api
	.word	0xe64
	.word	gIntrTable+0x4
	.word	gLinkType
.Lfe5:
	.size	 InitRFUAPI,.Lfe5-InitRFUAPI
	.align	2, 0
	.type	 Task_LinkLeaderSearchForChildren,function
	.thumb_func
Task_LinkLeaderSearchForChildren:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	UpdateChildStatuses
	ldr	r0, .L31
	ldrh	r0, [r0, #0x4]
	cmp	r0, #0x12
	bls	.LCB236
	b	.L21	@long jump
.LCB236:
	lsl	r0, r0, #0x2
	ldr	r1, .L31+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L32:
	.align	2, 0
.L31:
	.word	Rfu
	.word	.L29
	.align	2, 0
	.align	2, 0
.L29:
	.word	.L22
	.word	.L21
	.word	.L24
	.word	.L21
	.word	.L26
	.word	.L21
	.word	.L21
	.word	.L21
	.word	.L21
	.word	.L21
	.word	.L21
	.word	.L21
	.word	.L21
	.word	.L21
	.word	.L21
	.word	.L21
	.word	.L21
	.word	.L21
	.word	.L28
.L22:
	ldr	r0, .L33
	bl	rfu_LMAN_initializeRFU
	ldr	r0, .L33+0x4
	mov	r2, #0x1
	strh	r2, [r0, #0x4]
	ldr	r1, .L33+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r2, [r0, #0xa]
	b	.L21
.L34:
	.align	2, 0
.L33:
	.word	sRfuReqConfig
	.word	Rfu
	.word	gTasks
.L24:
	ldr	r4, .L35
	ldrb	r0, [r4, #0xc]
	ldr	r3, .L35+0x4
	mov	r1, #0x0
	mov	r2, #0xf0
	bl	rfu_LMAN_establishConnection
	mov	r0, #0x3
	strh	r0, [r4, #0x4]
	ldr	r1, .L35+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x6
	strh	r1, [r0, #0xa]
	b	.L21
.L36:
	.align	2, 0
.L35:
	.word	Rfu
	.word	sAcceptedSerialNos
	.word	gTasks
.L26:
	mov	r0, #0x0
	bl	rfu_LMAN_stopManager
	ldr	r1, .L37
	mov	r0, #0x5
	strh	r0, [r1, #0x4]
	b	.L21
.L38:
	.align	2, 0
.L37:
	.word	Rfu
.L28:
	ldr	r4, .L39
	ldr	r0, .L39+0x4
	add	r1, r4, r0
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L39+0x8
	bl	rfu_LMAN_setMSCCallback
	bl	sub_800EAB4
	bl	sub_800EAFC
	mov	r0, #0x14
	strh	r0, [r4, #0x4]
	ldr	r1, .L39+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0, #0xa]
	ldr	r0, .L39+0x10
	mov	r1, #0x5
	bl	CreateTask
	add	r0, r5, #0
	bl	DestroyTask
.L21:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	Rfu
	.word	0xcdb
	.word	sub_800EDBC
	.word	gTasks
	.word	sub_801084C
.Lfe6:
	.size	 Task_LinkLeaderSearchForChildren,.Lfe6-Task_LinkLeaderSearchForChildren
	.align	2, 0
	.globl	sub_800E87C
	.type	 sub_800E87C,function
	.thumb_func
sub_800E87C:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L42
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L43:
	.align	2, 0
.L42:
	.word	sUnknown_082ED6A5
.Lfe7:
	.size	 sub_800E87C,.Lfe7-sub_800E87C
	.align	2, 0
	.globl	sub_800E88C
	.type	 sub_800E88C,function
	.thumb_func
sub_800E88C:
	push	{r4, r5, r6, r7, lr}
	add	r2, r0, #0
	add	r5, r1, #0
	mov	r4, #0x1
	add	r1, r2, #0
	mov	r6, #0x0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	bne	.L45	@cond_branch
	mov	r3, #0x0
	mov	r5, #0x1
	ldr	r1, .L77
.L49:
	add	r0, r2, #0
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L48	@cond_branch
	add	r0, r3, r1
	strb	r4, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L48:
	asr	r2, r2, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L49	@cond_branch
	b	.L52
.L78:
	.align	2, 0
.L77:
	.word	Rfu+0xcde
.L45:
	mov	r3, #0x0
	mvn	r0, r1
	mov	ip, r0
	mov	r7, #0x1
	ldr	r4, .L79
.L56:
	add	r2, r1, #0
	and	r2, r2, r7
	cmp	r2, #0
	bne	.L55	@cond_branch
	add	r0, r3, r4
	strb	r2, [r0]
.L55:
	asr	r1, r1, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L56	@cond_branch
	mov	r4, #0x4
	ldr	r0, .L79
	ldrb	r7, [r0]
.L62:
	mov	r3, #0x0
	sub	r1, r4, #0x1
	cmp	r7, r4
	beq	.L64	@cond_branch
	ldr	r2, .L79
.L65:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bhi	.L64	@cond_branch
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r0, r4
	bne	.L65	@cond_branch
.L64:
	cmp	r3, #0x4
	bne	.L61	@cond_branch
	add	r6, r4, #0
.L61:
	lsl	r0, r1, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L62	@cond_branch
	mov	r0, ip
	and	r5, r5, r0
	mov	r3, #0x0
	mov	r2, #0x1
	ldr	r1, .L79
.L74:
	add	r0, r5, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L73	@cond_branch
	add	r0, r3, r1
	strb	r6, [r0]
	add	r6, r6, #0x1
.L73:
	asr	r5, r5, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L74	@cond_branch
.L52:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	Rfu+0xcde
.Lfe8:
	.size	 sub_800E88C,.Lfe8-sub_800E88C
	.align	2, 0
	.type	 Task_JoinGroupSearchForParent,function
	.thumb_func
Task_JoinGroupSearchForParent:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L101
	ldrh	r3, [r0, #0x4]
	add	r7, r0, #0
	cmp	r3, #0xc
	bls	.LCB568
	b	.L82	@long jump
.LCB568:
	lsl	r0, r3, #0x2
	ldr	r1, .L101+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L102:
	.align	2, 0
.L101:
	.word	Rfu
	.word	.L98
	.align	2, 0
	.align	2, 0
.L98:
	.word	.L83
	.word	.L82
	.word	.L82
	.word	.L82
	.word	.L82
	.word	.L82
	.word	.L85
	.word	.L82
	.word	.L82
	.word	.L87
	.word	.L82
	.word	.L88
	.word	.L96
.L83:
	ldr	r0, .L103
	bl	rfu_LMAN_initializeRFU
	ldr	r0, .L103+0x4
	mov	r2, #0x1
	strh	r2, [r0, #0x4]
	b	.L100
.L104:
	.align	2, 0
.L103:
	.word	sRfuReqConfigTemplate
	.word	Rfu
.L85:
	ldrb	r0, [r7, #0xc]
	ldr	r3, .L105
	mov	r1, #0x0
	mov	r2, #0xf0
	bl	rfu_LMAN_establishConnection
	mov	r2, #0x7
	strh	r2, [r7, #0x4]
.L100:
	ldr	r1, .L105+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r2, [r0, #0xa]
	b	.L82
.L106:
	.align	2, 0
.L105:
	.word	sAcceptedSerialNos
	.word	gTasks
.L87:
	ldr	r0, .L107
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0xa
	strh	r0, [r1, #0xa]
	b	.L82
.L108:
	.align	2, 0
.L107:
	.word	gTasks
.L88:
	bl	sub_80107A0
	cmp	r0, #0x6
	beq	.L92	@cond_branch
	cmp	r0, #0x6
	bgt	.L95	@cond_branch
	cmp	r0, #0x5
	beq	.L90	@cond_branch
	b	.L82
.L95:
	cmp	r0, #0x9
	beq	.L92	@cond_branch
	b	.L82
.L90:
	ldr	r1, .L109
	mov	r0, #0xc
	strh	r0, [r1, #0x4]
	b	.L82
.L110:
	.align	2, 0
.L109:
	.word	Rfu
.L92:
	bl	rfu_LMAN_requestChangeAgbClockMaster
	ldr	r0, .L111
	ldr	r1, .L111+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	strb	r1, [r0]
	add	r0, r6, #0
	bl	DestroyTask
	b	.L82
.L112:
	.align	2, 0
.L111:
	.word	Rfu
	.word	0xce4
.L96:
	ldr	r0, .L113
	add	r4, r7, r0
	ldrb	r0, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0x11
	lsl	r5, r5, r0
	lsr	r5, r5, #0x18
	ldrb	r1, [r4]
	mov	r0, #0xc
	bl	rfu_clearSlot
	ldrb	r1, [r4]
	ldr	r0, .L113+0x4
	add	r2, r7, r0
	mov	r0, #0x10
	mov	r3, #0x46
	bl	rfu_setRecvBuffer
	add	r1, r7, #0
	add	r1, r1, #0x4c
	add	r0, r5, #0
	mov	r2, #0xe
	bl	rfu_UNI_setSendData
	ldr	r1, .L113+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0, #0xa]
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r4, .L113+0xc
	ldrb	r0, [r4, #0xf]
	cmp	r0, #0
	bne	.L97	@cond_branch
	bl	Debug_PrintEmpty
	ldrb	r0, [r4, #0xf]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xf]
.L97:
	ldr	r0, .L113+0x10
	mov	r1, #0x5
	bl	CreateTask
.L82:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	0xc3e
	.word	0xc3f
	.word	gTasks
	.word	sRfuDebug
	.word	sub_801084C
.Lfe9:
	.size	 Task_JoinGroupSearchForParent,.Lfe9-Task_JoinGroupSearchForParent
	.align	2, 0
	.type	 sub_800EAB4,function
	.thumb_func
sub_800EAB4:
	push	{r4, r5, lr}
	ldr	r0, .L122
	ldrb	r5, [r0]
	mov	r4, #0x0
.L119:
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L120	@cond_branch
	lsl	r2, r4, #0x3
	sub	r2, r2, r4
	lsl	r2, r2, #0x1
	ldr	r0, .L122+0x4
	add	r2, r2, r0
	mov	r0, #0x10
	add	r1, r4, #0
	mov	r3, #0xe
	bl	rfu_setRecvBuffer
	mov	r0, #0x3
	add	r1, r4, #0
	bl	rfu_clearSlot
.L120:
	lsr	r5, r5, #0x1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L119	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	lman
	.word	Rfu+0x14
.Lfe10:
	.size	 sub_800EAB4,.Lfe10-sub_800EAB4
	.align	2, 0
	.type	 sub_800EAFC,function
	.thumb_func
sub_800EAFC:
	push	{r4, r5, r6, lr}
	ldr	r0, .L125
	ldrb	r5, [r0]
	ldr	r4, .L125+0x4
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x46
	bl	rfu_UNI_setSendData
	add	r0, r5, #0
	bl	sub_800E87C
	ldr	r1, .L125+0x8
	add	r6, r4, r1
	add	r1, r4, #0
	add	r1, r1, #0x53
	strb	r0, [r1]
	add	r4, r4, #0x5b
	strb	r5, [r4]
	mov	r1, #0x1
	neg	r1, r1
	add	r0, r5, #0
	bl	sub_800E88C
	mov	r0, #0x1
	strb	r0, [r6, #0xc]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	lman
	.word	Rfu+0xc87
	.word	-0xc87
.Lfe11:
	.size	 sub_800EAFC,.Lfe11-sub_800EAFC
	.align	2, 0
	.type	 Task_LinkRfu_UnionRoomListen,function
	.thumb_func
Task_LinkRfu_UnionRoomListen:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	GetHostRFUtgtGname
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x54
	bne	.L128	@cond_branch
	bl	RfuGetStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L128	@cond_branch
	ldr	r0, .L143
	ldrb	r0, [r0]
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	mov	r0, #0x0
	mov	r1, #0x0
	bl	RfuSetStatus
.L128:
	ldr	r0, .L143+0x4
	ldrh	r2, [r0, #0x4]
	add	r6, r0, #0
	cmp	r2, #0x12
	bls	.LCB915
	b	.L129	@long jump
.LCB915:
	lsl	r0, r2, #0x2
	ldr	r1, .L143+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L144:
	.align	2, 0
.L143:
	.word	lman
	.word	Rfu
	.word	.L141
	.align	2, 0
	.align	2, 0
.L141:
	.word	.L130
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L134
	.word	.L138
	.word	.L129
	.word	.L140
	.word	.L132
	.word	.L129
.L130:
	ldr	r0, .L145
	bl	rfu_LMAN_initializeRFU
	ldr	r0, .L145+0x4
	mov	r2, #0x1
	strh	r2, [r0, #0x4]
	ldr	r1, .L145+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r2, [r0, #0xa]
	b	.L129
.L146:
	.align	2, 0
.L145:
	.word	sRfuReqConfig
	.word	Rfu
	.word	gTasks
.L132:
	ldr	r3, .L147
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0xf0
	bl	rfu_LMAN_establishConnection
	ldr	r0, .L147+0x4
	bl	rfu_LMAN_setMSCCallback
	ldr	r1, .L147+0x8
	mov	r0, #0x12
	strh	r0, [r1, #0x4]
	b	.L129
.L148:
	.align	2, 0
.L147:
	.word	sAcceptedSerialNos
	.word	sub_800ED34
	.word	Rfu
.L134:
	ldr	r1, .L149
	add	r0, r6, r1
	ldrb	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r1
	lsr	r0, r0, #0x18
	add	r1, r6, #0
	add	r1, r1, #0x4c
	mov	r2, #0xe
	bl	rfu_UNI_setSendData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L129	@cond_branch
	strb	r0, [r6, #0xc]
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r0, .L149+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x16
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L136	@cond_branch
	ldr	r0, .L149+0x8
	mov	r1, #0x1
	bl	CreateTask
	b	.L129
.L150:
	.align	2, 0
.L149:
	.word	0xc3e
	.word	gTasks
	.word	sub_8010D0C
.L136:
	ldr	r0, .L151
	mov	r1, #0x5
	bl	CreateTask
	b	.L129
.L152:
	.align	2, 0
.L151:
	.word	sub_801084C
.L138:
	mov	r0, #0x0
	bl	rfu_LMAN_stopManager
	ldr	r1, .L153
	mov	r0, #0xf
	strh	r0, [r1, #0x4]
	b	.L129
.L154:
	.align	2, 0
.L153:
	.word	Rfu
.L140:
	ldr	r0, .L155
	add	r1, r6, r0
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L155+0x4
	bl	rfu_LMAN_setMSCCallback
	mov	r0, #0x1
	bl	UpdateGameData_GroupLockedIn
	bl	sub_800EAB4
	bl	sub_800EAFC
	mov	r0, #0x14
	strh	r0, [r6, #0x4]
	ldr	r1, .L155+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0, #0xa]
	mov	r4, #0x1
	strb	r4, [r6, #0xc]
	ldr	r0, .L155+0xc
	mov	r1, #0x5
	bl	CreateTask
	ldr	r1, .L155+0x10
	add	r0, r6, r1
	strb	r4, [r0]
	add	r0, r5, #0
	bl	DestroyTask
.L129:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L156:
	.align	2, 0
.L155:
	.word	0xcdb
	.word	sub_800EDBC
	.word	gTasks
	.word	sub_801084C
	.word	0xce8
.Lfe12:
	.size	 Task_LinkRfu_UnionRoomListen,.Lfe12-Task_LinkRfu_UnionRoomListen
	.align	2, 0
	.globl	LinkRfu_CreateConnectionAsParent
	.type	 LinkRfu_CreateConnectionAsParent,function
	.thumb_func
LinkRfu_CreateConnectionAsParent:
	push	{lr}
	ldr	r3, .L158
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0xf0
	bl	rfu_LMAN_establishConnection
	pop	{r0}
	bx	r0
.L159:
	.align	2, 0
.L158:
	.word	sAcceptedSerialNos
.Lfe13:
	.size	 LinkRfu_CreateConnectionAsParent,.Lfe13-LinkRfu_CreateConnectionAsParent
	.align	2, 0
	.globl	LinkRfu_StopManagerBeforeEnteringChat
	.type	 LinkRfu_StopManagerBeforeEnteringChat,function
	.thumb_func
LinkRfu_StopManagerBeforeEnteringChat:
	push	{lr}
	mov	r0, #0x0
	bl	rfu_LMAN_stopManager
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 LinkRfu_StopManagerBeforeEnteringChat,.Lfe14-LinkRfu_StopManagerBeforeEnteringChat
	.align	2, 0
	.type	 sub_800ED34,function
	.thumb_func
sub_800ED34:
	push	{r4, lr}
	ldr	r0, .L168
	mov	r2, #0x0
	mov	r1, #0xd
	add	r0, r0, #0x59
.L165:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L165	@cond_branch
	bl	rfu_REQ_recvData
	bl	rfu_waitREQComplete
	ldr	r1, .L168+0x4
	ldr	r3, .L168
	ldr	r0, .L168+0x8
	add	r4, r3, r0
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L167	@cond_branch
	mov	r2, #0xcd
	lsl	r2, r2, #0x4
	add	r1, r3, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r1, #0x92
	lsl	r1, r1, #0x1
	add	r0, r3, r1
	ldr	r2, .L168+0xc
	add	r1, r3, r2
	bl	RfuRecvQueue_Enqueue
	ldr	r1, .L168+0x10
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	bl	UpdateBackupQueue
	ldrb	r0, [r4]
	bl	rfu_UNI_readySendData
	ldrb	r0, [r4]
	bl	rfu_UNI_clearRecvNewDataFlag
.L167:
	mov	r0, #0x1
	bl	rfu_LMAN_REQ_sendData
	pop	{r4}
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	Rfu
	.word	gRfuSlotStatusUNI
	.word	0xc3e
	.word	0xc3f
	.word	sRfuDebug
.Lfe15:
	.size	 sub_800ED34,.Lfe15-sub_800ED34
	.align	2, 0
	.type	 sub_800EDBC,function
	.thumb_func
sub_800EDBC:
	ldr	r0, .L171
	ldr	r1, .L171+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
	bx	lr
.L172:
	.align	2, 0
.L171:
	.word	Rfu
	.word	0xcdb
.Lfe16:
	.size	 sub_800EDBC,.Lfe16-sub_800EDBC
	.align	2, 0
	.globl	LinkRfu_Shutdown
	.type	 LinkRfu_Shutdown,function
	.thumb_func
LinkRfu_Shutdown:
	push	{r4, r5, r6, lr}
	bl	rfu_LMAN_powerDownRFU
	ldr	r4, .L189
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	bne	.L174	@cond_branch
	ldr	r0, .L189+0x4
	b	.L188
.L190:
	.align	2, 0
.L189:
	.word	Rfu
	.word	Task_LinkLeaderSearchForChildren
.L174:
	cmp	r0, #0
	bne	.L177	@cond_branch
	ldr	r0, .L191
.L188:
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L176	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x67
	ldrb	r0, [r0]
	bl	DestroyTask
	bl	ResetLinkRfuGFLayer
	b	.L176
.L192:
	.align	2, 0
.L191:
	.word	Task_JoinGroupSearchForParent
.L177:
	cmp	r0, #0x2
	bne	.L176	@cond_branch
	ldr	r0, .L193
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L176	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x67
	ldrb	r0, [r0]
	bl	DestroyTask
	bl	ResetLinkRfuGFLayer
.L176:
	mov	r5, #0x0
	ldr	r6, .L193+0x4
.L185:
	lsl	r0, r5, #0x2
	add	r0, r0, r6
	ldr	r4, [r0]
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L184	@cond_branch
	add	r0, r4, #0
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L184:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L185	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L194:
	.align	2, 0
.L193:
	.word	Task_LinkRfu_UnionRoomListen
	.word	sUnknown_082ED7E0
.Lfe17:
	.size	 LinkRfu_Shutdown,.Lfe17-LinkRfu_Shutdown
	.align	2, 0
	.type	 CreateTask_LinkLeaderSearchForChildren,function
	.thumb_func
CreateTask_LinkLeaderSearchForChildren:
	push	{lr}
	ldr	r0, .L196
	mov	r1, #0x1
	bl	CreateTask
	ldr	r1, .L196+0x4
	add	r1, r1, #0x67
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L197:
	.align	2, 0
.L196:
	.word	Task_LinkLeaderSearchForChildren
	.word	Rfu
.Lfe18:
	.size	 CreateTask_LinkLeaderSearchForChildren,.Lfe18-CreateTask_LinkLeaderSearchForChildren
	.align	2, 0
	.type	 sub_800EE94,function
	.thumb_func
sub_800EE94:
	push	{lr}
	ldr	r1, .L201
	ldrh	r0, [r1, #0x4]
	cmp	r0, #0x7
	bne	.L199	@cond_branch
	ldr	r2, .L201+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L199	@cond_branch
	mov	r0, #0x1
	b	.L200
.L202:
	.align	2, 0
.L201:
	.word	Rfu
	.word	0xccd
.L199:
	mov	r0, #0x0
.L200:
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 sub_800EE94,.Lfe19-sub_800EE94
	.align	2, 0
	.type	 IsParentSuccessfullyReconnected,function
	.thumb_func
IsParentSuccessfullyReconnected:
	push	{r4, lr}
	ldr	r4, .L206
	ldrh	r0, [r4, #0x4]
	cmp	r0, #0x7
	bne	.L204	@cond_branch
	ldr	r0, .L206+0x4
	ldr	r1, [r0]
	ldr	r2, .L206+0x8
	add	r0, r4, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldrh	r0, [r1, #0x14]
	mov	r1, #0xf0
	bl	rfu_LMAN_CHILD_connectParent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L204	@cond_branch
	mov	r0, #0x9
	strh	r0, [r4, #0x4]
	mov	r0, #0x1
	b	.L205
.L207:
	.align	2, 0
.L206:
	.word	Rfu
	.word	gRfuLinkStatus
	.word	0xc3d
.L204:
	mov	r0, #0x0
.L205:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 IsParentSuccessfullyReconnected,.Lfe20-IsParentSuccessfullyReconnected
	.align	2, 0
	.type	 CreateTask_JoinGroupSearchForParent,function
	.thumb_func
CreateTask_JoinGroupSearchForParent:
	push	{lr}
	ldr	r0, .L209
	mov	r1, #0x1
	bl	CreateTask
	ldr	r1, .L209+0x4
	add	r1, r1, #0x67
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L210:
	.align	2, 0
.L209:
	.word	Task_JoinGroupSearchForParent
	.word	Rfu
.Lfe21:
	.size	 CreateTask_JoinGroupSearchForParent,.Lfe21-CreateTask_JoinGroupSearchForParent
	.align	2, 0
	.globl	LmanAcceptSlotFlagIsNotZero
	.type	 LmanAcceptSlotFlagIsNotZero,function
	.thumb_func
LmanAcceptSlotFlagIsNotZero:
	push	{lr}
	ldr	r0, .L214
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L212	@cond_branch
	mov	r0, #0x0
	b	.L213
.L215:
	.align	2, 0
.L214:
	.word	lman
.L212:
	mov	r0, #0x1
.L213:
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 LmanAcceptSlotFlagIsNotZero,.Lfe22-LmanAcceptSlotFlagIsNotZero
	.align	2, 0
	.globl	LinkRfu_StopManagerAndFinalizeSlots
	.type	 LinkRfu_StopManagerAndFinalizeSlots,function
	.thumb_func
LinkRfu_StopManagerAndFinalizeSlots:
	ldr	r1, .L217
	mov	r0, #0x4
	strh	r0, [r1, #0x4]
	ldr	r0, .L217+0x4
	ldrb	r0, [r0]
	ldr	r2, .L217+0x8
	add	r1, r1, r2
	strb	r0, [r1]
	bx	lr
.L218:
	.align	2, 0
.L217:
	.word	Rfu
	.word	lman
	.word	0xce7
.Lfe23:
	.size	 LinkRfu_StopManagerAndFinalizeSlots,.Lfe23-LinkRfu_StopManagerAndFinalizeSlots
	.align	2, 0
	.globl	WaitRfuState
	.type	 WaitRfuState,function
	.thumb_func
WaitRfuState:
	push	{lr}
	add	r1, r0, #0
	ldr	r2, .L223
	ldrh	r0, [r2, #0x4]
	cmp	r0, #0x11
	beq	.L221	@cond_branch
	cmp	r1, #0
	beq	.L220	@cond_branch
.L221:
	mov	r0, #0x12
	strh	r0, [r2, #0x4]
	mov	r0, #0x1
	b	.L222
.L224:
	.align	2, 0
.L223:
	.word	Rfu
.L220:
	mov	r0, #0x0
.L222:
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 WaitRfuState,.Lfe24-WaitRfuState
	.align	2, 0
	.globl	sub_800EF7C
	.type	 sub_800EF7C,function
	.thumb_func
sub_800EF7C:
	ldr	r1, .L226
	mov	r0, #0xe
	strh	r0, [r1, #0x4]
	bx	lr
.L227:
	.align	2, 0
.L226:
	.word	Rfu
.Lfe25:
	.size	 sub_800EF7C,.Lfe25-sub_800EF7C
	.align	2, 0
	.type	 sub_800EF88,function
	.thumb_func
sub_800EF88:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0x0
	b	.L229
.L233:
	lsr	r1, r1, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L229:
	cmp	r2, #0x3
	bhi	.L230	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L233	@cond_branch
	add	r0, r2, #0
	bl	rfu_UNI_readySendData
.L230:
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 sub_800EF88,.Lfe26-sub_800EF88
	.align	2, 0
	.type	 sub_800EFB0,function
	.thumb_func
sub_800EFB0:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	mov	r2, #0x0
	ldr	r7, .L246
	ldr	r0, .L246+0x4
	add	r6, r7, #0
	ldr	r1, .L246+0x8
	add	r5, r0, r1
.L239:
	mov	r3, #0x0
	lsl	r0, r2, #0x3
	lsl	r1, r2, #0x4
	add	r4, r2, #0x1
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r2, r0, r5
	add	r1, r1, r6
.L243:
	ldrh	r0, [r1]
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x1]
	ldrh	r0, [r1]
	strb	r0, [r2]
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x6
	ble	.L243	@cond_branch
	add	r2, r4, #0
	cmp	r2, #0x4
	ble	.L239	@cond_branch
	mov	r0, #0x0
	mov	r1, sp
	strh	r0, [r1]
	ldr	r2, .L246+0xc
	mov	r0, sp
	add	r1, r7, #0
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L247:
	.align	2, 0
.L246:
	.word	gRecvCmds
	.word	Rfu
	.word	0xc87
	.word	0x1000028
.Lfe27:
	.size	 sub_800EFB0,.Lfe27-sub_800EFB0
	.align	2, 0
	.type	 sub_800F014,function
	.thumb_func
sub_800F014:
	push	{lr}
	ldr	r3, .L259
	ldr	r2, .L259+0x4
	mov	r1, #0x6
.L252:
	ldrh	r0, [r3]
	strh	r0, [r2]
	add	r3, r3, #0x2
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L252	@cond_branch
	ldr	r1, .L259
	mov	r2, #0x0
	add	r0, r1, #0
	add	r0, r0, #0xc
.L257:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r1
	bge	.L257	@cond_branch
	pop	{r0}
	bx	r0
.L260:
	.align	2, 0
.L259:
	.word	gSendCmd
	.word	gRecvCmds
.Lfe28:
	.size	 sub_800F014,.Lfe28-sub_800F014
	.align	2, 0
	.type	 UpdateBackupQueue,function
	.thumb_func
UpdateBackupQueue:
	push	{r4, r5, lr}
	ldr	r4, .L266
	ldr	r0, .L266+0x4
	add	r5, r4, r0
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L262	@cond_branch
	ldr	r1, .L266+0x8
	add	r0, r4, r1
	add	r1, r4, #0
	add	r1, r1, #0x4c
	bl	RfuBackupQueue_Dequeue
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L266+0xc
	add	r0, r4, r1
	ldrb	r0, [r0]
	add	r1, r0, #0
	cmp	r1, #0
	bne	.L263	@cond_branch
	ldrb	r0, [r5]
	strb	r1, [r5]
.L263:
	cmp	r2, #0
	bne	.L261	@cond_branch
.L262:
	ldr	r5, .L266
	ldr	r1, .L266+0x4
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L261	@cond_branch
	ldr	r1, .L266+0x10
	add	r0, r5, r1
	add	r4, r5, #0
	add	r4, r4, #0x4c
	add	r1, r4, #0
	bl	RfuSendQueue_Dequeue
	ldr	r1, .L266+0x8
	add	r0, r5, r1
	add	r1, r4, #0
	bl	RfuBackupQueue_Enqueue
.L261:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L267:
	.align	2, 0
.L266:
	.word	Rfu
	.word	0xc3c
	.word	0xc1c
	.word	0xc3a
	.word	0x9e8
.Lfe29:
	.size	 UpdateBackupQueue,.Lfe29-UpdateBackupQueue
	.align	2, 0
	.globl	IsRfuRecvQueueEmpty
	.type	 IsRfuRecvQueueEmpty,function
	.thumb_func
IsRfuRecvQueueEmpty:
	push	{r4, lr}
	ldr	r0, .L284
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	bne	.L269	@cond_branch
.L283:
	mov	r0, #0x0
	b	.L281
.L285:
	.align	2, 0
.L284:
	.word	gRfuLinkStatus
.L269:
	mov	r3, #0x0
	ldr	r4, .L286
.L273:
	mov	r2, #0x0
	lsl	r0, r3, #0x4
	add	r1, r0, r4
.L277:
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L283	@cond_branch
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x6
	ble	.L277	@cond_branch
	add	r3, r3, #0x1
	cmp	r3, #0x4
	ble	.L273	@cond_branch
	mov	r0, #0x1
.L281:
	pop	{r4}
	pop	{r1}
	bx	r1
.L287:
	.align	2, 0
.L286:
	.word	gRecvCmds
.Lfe30:
	.size	 IsRfuRecvQueueEmpty,.Lfe30-IsRfuRecvQueueEmpty
	.align	2, 0
	.type	 sub_800F0F8,function
	.thumb_func
sub_800F0F8:
	push	{r4, r5, r6, lr}
	ldr	r6, .L298
	ldrh	r0, [r6, #0x4]
	cmp	r0, #0x13
	bhi	.L289	@cond_branch
	bl	rfu_REQ_recvData
	bl	rfu_waitREQComplete
	mov	r0, #0x0
	bl	rfu_LMAN_REQ_sendData
	b	.L290
.L299:
	.align	2, 0
.L298:
	.word	Rfu
.L289:
	ldr	r0, .L300
	add	r1, r6, r0
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L300+0x4
	add	r1, r6, r0
	ldr	r0, .L300+0x8
	ldr	r0, [r0]
	ldrb	r1, [r1]
	ldrb	r0, [r0, #0x2]
	and	r0, r0, r1
	cmp	r0, r1
	bne	.L290	@cond_branch
	cmp	r0, #0
	beq	.L290	@cond_branch
	ldr	r1, .L300+0xc
	add	r0, r6, r1
	ldrb	r0, [r0]
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L292	@cond_branch
	ldr	r0, .L300+0x10
	add	r4, r6, r0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L293	@cond_branch
	bl	RfuReqDisconnectSlot
	strb	r5, [r4]
	ldr	r1, .L300+0x14
	add	r0, r6, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L294	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0x8
	mov	r0, #0x2
	add	r1, r4, #0
	bl	RfuSetStatus
	add	r0, r4, #0
	bl	GetLinkmanErrorParams
	b	.L290
.L301:
	.align	2, 0
.L300:
	.word	0xcdb
	.word	0xce2
	.word	gRfuLinkStatus
	.word	0xcdc
	.word	0xce3
	.word	0xce4
.L294:
	ldr	r0, .L302
	ldrb	r4, [r0]
	cmp	r4, #0
	bne	.L293	@cond_branch
	bl	LinkRfu_Shutdown
	ldr	r0, .L302+0x4
	strb	r4, [r0]
	b	.L290
.L303:
	.align	2, 0
.L302:
	.word	lman
	.word	gReceivedRemoteLinkPlayers
.L293:
	bl	sub_800EFB0
	ldr	r0, .L304
	ldr	r1, .L304+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	rfu_UNI_readySendData
	mov	r0, #0x1
	bl	rfu_LMAN_REQ_sendData
	b	.L296
.L305:
	.align	2, 0
.L304:
	.word	Rfu
	.word	0xcda
.L292:
	bl	rfu_REQ_PARENT_resumeRetransmitAndChange
.L296:
	ldr	r1, .L306
	mov	r0, #0x1
	strb	r0, [r1, #0xe]
.L290:
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L307:
	.align	2, 0
.L306:
	.word	Rfu
.Lfe31:
	.size	 sub_800F0F8,.Lfe31-sub_800F0F8
	.align	2, 0
	.type	 sub_800F1E0,function
	.thumb_func
sub_800F1E0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r0, .L343
	ldrh	r1, [r0, #0x4]
	add	r6, r0, #0
	cmp	r1, #0x13
	bhi	.LCB2153
	b	.L309	@long jump
.LCB2153:
	ldrb	r0, [r6, #0xe]
	cmp	r0, #0x1
	beq	.LCB2158
	b	.L309	@long jump
.LCB2158:
	bl	rfu_waitREQComplete
	ldr	r0, .L343+0x4
	add	r2, r6, r0
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L311	@cond_branch
	add	r1, r6, #0
	add	r1, r1, #0xee
.L312:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.LCB2179
	b	.L342	@long jump
.LCB2179:
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L312	@cond_branch
.L311:
	bl	rfu_REQ_recvData
	bl	rfu_waitREQComplete
	ldr	r2, .L343+0x8
	ldr	r4, .L343
	ldr	r1, .L343+0xc
	add	r0, r4, r1
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r0]
	and	r1, r1, r0
	cmp	r1, r0
	beq	.LCB2205
	b	.L315	@long jump
.LCB2205:
	ldr	r6, .L343+0x10
	add	r1, r4, r6
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L343+0x14
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	ldrb	r7, [r2]
	mov	r5, #0x0
.L319:
	mov	r0, #0x1
	and	r0, r0, r7
	lsr	r1, r7, #0x1
	str	r1, [sp, #0x4]
	add	r2, r5, #0x1
	str	r2, [sp]
	cmp	r0, #0
	bne	.LCB2236
	b	.L320	@long jump
.LCB2236:
	ldr	r1, .L343
	lsl	r2, r5, #0x3
	sub	r0, r2, r5
	lsl	r4, r0, #0x1
	add	r0, r1, #0
	add	r0, r0, #0x15
	add	r0, r4, r0
	ldrb	r0, [r0]
	add	r6, r1, #0
	add	r3, r2, #0
	lsl	r1, r5, #0x18
	mov	sl, r1
	cmp	r0, #0
	beq	.L321	@cond_branch
	ldr	r2, .L343+0x18
	add	r0, r6, r2
	add	r1, r5, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L322	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0x14
	add	r0, r4, r0
	ldrb	r2, [r0]
	lsr	r2, r2, #0x5
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r2, r0
	beq	.L322	@cond_branch
	ldr	r0, .L343+0x1c
	add	r1, r6, r0
	add	r1, r5, r1
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L321	@cond_branch
	mov	r0, #0x81
	lsl	r0, r0, #0x8
	bl	GetLinkmanErrorParams
	b	.L321
.L344:
	.align	2, 0
.L343:
	.word	Rfu
	.word	0xcdb
	.word	lman
	.word	0xce2
	.word	0xcdc
	.word	sRfuDebug
	.word	0xcee
	.word	0xcea
.L322:
	ldr	r2, .L345
	ldr	r6, .L345+0x4
	add	r1, r2, r6
	add	r1, r5, r1
	sub	r3, r3, r5
	lsl	r3, r3, #0x1
	add	r4, r2, #0
	add	r4, r4, #0x14
	add	r2, r3, r4
	ldrb	r0, [r2]
	lsr	r0, r0, #0x5
	strb	r0, [r1]
	ldr	r1, .L345
	sub	r6, r6, #0x4
	add	r0, r1, r6
	add	r0, r5, r0
	mov	r1, #0x0
	strb	r1, [r0]
	ldrb	r1, [r2]
	mov	r0, #0x1f
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L345+0x8
	add	r0, r5, r2
	ldrb	r0, [r0]
	mov	r6, #0x0
	lsl	r1, r5, #0x18
	mov	sl, r1
	lsr	r2, r7, #0x1
	str	r2, [sp, #0x4]
	add	r5, r5, #0x1
	str	r5, [sp]
	ldr	r1, .L345+0xc
	mov	r9, r1
	add	r5, r3, #0
	add	r7, r4, #0
	lsl	r0, r0, #0x4
	mov	r8, r0
	add	r2, r5, #0x1
	mov	ip, r2
.L328:
	lsl	r1, r6, #0x1
	mov	r0, r8
	add	r4, r1, r0
	add	r4, r4, r9
	mov	r2, ip
	add	r3, r1, r2
	add	r3, r3, r7
	ldrb	r2, [r3]
	lsl	r2, r2, #0x8
	add	r1, r1, r5
	add	r1, r1, r7
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strh	r0, [r4]
	mov	r0, #0x0
	strb	r0, [r3]
	strb	r0, [r1]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x6
	bls	.L328	@cond_branch
.L321:
	mov	r1, sl
	lsr	r0, r1, #0x18
	bl	rfu_UNI_clearRecvNewDataFlag
.L320:
	ldr	r2, [sp, #0x4]
	lsl	r0, r2, #0x10
	lsr	r7, r0, #0x10
	ldr	r6, [sp]
	lsl	r0, r6, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x3
	bhi	.LCB2417
	b	.L319	@long jump
.LCB2417:
	bl	sub_800F014
	mov	r0, #0x0
	bl	RfuHandleReceiveCommand
	bl	CallRfuFunc
	ldr	r4, .L345
	ldr	r1, .L345+0x10
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L338	@cond_branch
	ldr	r2, .L345+0x14
	add	r0, r4, r2
	ldrb	r2, [r0]
	cmp	r2, #0
	bne	.L338	@cond_branch
	ldr	r0, .L345+0x18
	ldrb	r1, [r0, #0xe]
	strb	r2, [r0, #0xe]
	ldr	r6, .L345+0x1c
	add	r0, r4, r6
	ldrb	r1, [r0]
	mov	r0, #0x3
	bl	rfu_clearSlot
	mov	r5, #0x0
	add	r7, r4, #0
	add	r7, r7, #0x14
.L335:
	ldr	r0, .L345+0x10
	add	r6, r4, r0
	ldrb	r0, [r6]
	asr	r0, r0, r5
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L334	@cond_branch
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r5, #0x3
	sub	r2, r2, r5
	lsl	r2, r2, #0x1
	add	r2, r2, r7
	mov	r0, #0x10
	mov	r3, #0xe
	bl	rfu_setRecvBuffer
.L334:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x3
	bls	.L335	@cond_branch
	sub	r4, r6, #0x3
	ldrb	r0, [r4]
	ldrb	r2, [r6]
	add	r1, r0, #0
	orr	r1, r1, r2
	bl	sub_800E88C
	ldrb	r1, [r6]
	mov	r2, #0x0
	strb	r1, [r6, #0x4]
	ldrb	r0, [r4]
	orr	r0, r0, r1
	strb	r0, [r4]
	strb	r2, [r6]
	ldrb	r0, [r4]
	add	r1, r6, #0
	sub	r1, r1, #0x5e
	mov	r2, #0x46
	bl	rfu_UNI_setSendData
	ldrb	r0, [r4]
	bl	sub_800E87C
	add	r1, r6, #0
	sub	r1, r1, #0xb
	strb	r0, [r1]
	ldr	r0, .L345+0x20
	mov	r1, #0x0
	bl	CreateTask
	b	.L338
.L346:
	.align	2, 0
.L345:
	.word	Rfu
	.word	0xcee
	.word	Rfu+0xcde
	.word	gRecvCmds
	.word	0xce5
	.word	0xcd9
	.word	sRfuDebug
	.word	0xcda
	.word	Task_ExchangeLinkPlayers
.L315:
	ldr	r2, .L347
	add	r1, r4, r2
	ldrb	r0, [r1]
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1]
	strb	r2, [r4, #0xe]
.L338:
	ldr	r1, .L347+0x4
	mov	r0, #0x0
	strb	r0, [r1, #0xe]
	add	r6, r1, #0
.L309:
	ldr	r1, .L347
	add	r0, r6, r1
	ldrb	r0, [r0]
	add	r1, r0, #0
	ldr	r0, .L347+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	beq	.L339	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	b	.L341
.L348:
	.align	2, 0
.L347:
	.word	0xcdc
	.word	Rfu
	.word	gRfuLinkStatus
.L342:
	mov	r0, #0x0
	b	.L341
.L339:
	mov	r0, #0x0
.L341:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 sub_800F1E0,.Lfe32-sub_800F1E0
	.align	2, 0
	.type	 sub_800F498,function
	.thumb_func
sub_800F498:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r2, r1, #0
	ldrh	r1, [r4]
	cmp	r1, #0
	beq	.L350	@cond_branch
	ldr	r0, .L362
	mov	r5, #0x81
	lsl	r5, r5, #0x1
	add	r3, r0, r5
	ldrb	r0, [r3]
	lsl	r0, r0, #0x5
	orr	r0, r0, r1
	strh	r0, [r4]
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	mov	r1, #0x7
	and	r0, r0, r1
	strb	r0, [r3]
	add	r3, r4, #0
	mov	r4, #0x6
.L354:
	ldrh	r1, [r3]
	lsr	r0, r1, #0x8
	strb	r0, [r2, #0x1]
	strb	r1, [r2]
	add	r2, r2, #0x2
	add	r3, r3, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L354	@cond_branch
	b	.L356
.L363:
	.align	2, 0
.L362:
	.word	Rfu
.L350:
	mov	r1, #0x0
	add	r0, r2, #0
	add	r0, r0, #0xd
.L360:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r2
	bge	.L360	@cond_branch
.L356:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 sub_800F498,.Lfe33-sub_800F498
	.align	2, 0
	.type	 RfuProcessEnqueuedRecvBlock,function
	.thumb_func
RfuProcessEnqueuedRecvBlock:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x58
	ldr	r0, .L384
	mov	r1, sp
	bl	RfuRecvQueue_Dequeue
	mov	r1, #0x0
	ldr	r0, .L384+0x4
	mov	ip, r0
.L368:
	mov	r4, #0x0
	lsl	r0, r1, #0x3
	add	r2, r1, #0x1
	mov	r8, r2
	lsl	r6, r1, #0x4
	sub	r0, r0, r1
	lsl	r5, r0, #0x1
.L372:
	lsl	r1, r4, #0x1
	add	r3, r1, r6
	add	r3, r3, ip
	add	r1, r5, r1
	add	r0, r1, #0x1
	add	r0, r0, sp
	ldrb	r2, [r0]
	lsl	r2, r2, #0x8
	mov	r7, sp
	add	r0, r7, r1
	ldrb	r0, [r0]
	orr	r0, r0, r2
	strh	r0, [r3]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bls	.L372	@cond_branch
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x4
	bls	.L368	@cond_branch
	mov	r0, #0x0
	bl	RfuHandleReceiveCommand
	ldr	r0, .L384+0x8
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L375	@cond_branch
	ldr	r0, .L384+0xc
	ldr	r2, .L384+0x10
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L375	@cond_branch
	ldr	r0, .L384+0x14
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	orr	r0, r0, r1
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	bl	RfuGetStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L376	@cond_branch
	cmp	r0, #0x6
	beq	.L376	@cond_branch
	cmp	r0, #0x9
	beq	.L376	@cond_branch
	mov	r1, #0x90
	lsl	r1, r1, #0x8
	mov	r0, #0x2
	bl	RfuSetStatus
.L376:
	bl	rfu_clearAllSlot
	ldr	r1, .L384+0x18
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L384+0xc
	mov	r5, #0x0
	str	r5, [r0]
	ldr	r7, .L384+0x10
	add	r6, r0, r7
	ldrb	r0, [r6]
	cmp	r0, #0x1
	bne	.L377	@cond_branch
	mov	r4, #0x90
	lsl	r4, r4, #0x8
	mov	r0, #0x2
	add	r1, r4, #0
	bl	RfuSetStatus
	add	r0, r4, #0
	bl	GetLinkmanErrorParams
.L377:
	ldr	r0, .L384+0x8
	strb	r5, [r0, #0x5]
	strb	r5, [r0, #0x4]
	strb	r5, [r6]
.L375:
	ldr	r6, .L384+0xc
	mov	r0, #0xcd
	lsl	r0, r0, #0x4
	add	r2, r6, r0
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L378	@cond_branch
	ldrb	r0, [r2]
	sub	r0, r0, #0x1
	ldrb	r1, [r2]
	strb	r0, [r2]
	bl	CallRfuFunc
	ldr	r5, .L384+0x1c
	add	r4, sp, #0x48
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_800F498
	ldr	r1, .L384+0x20
	add	r0, r6, r1
	add	r1, r4, #0
	bl	RfuSendQueue_Enqueue
	mov	r1, #0x0
	mov	r2, #0x0
.L382:
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x6
	bls	.L382	@cond_branch
.L378:
	bl	IsRfuRecvQueueEmpty
	add	sp, sp, #0x58
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L385:
	.align	2, 0
.L384:
	.word	Rfu+0x124
	.word	gRecvCmds
	.word	lman
	.word	Rfu
	.word	0xce4
	.word	gRfuLinkStatus
	.word	gReceivedRemoteLinkPlayers
	.word	gSendCmd
	.word	0x9e8
.Lfe34:
	.size	 RfuProcessEnqueuedRecvBlock,.Lfe34-RfuProcessEnqueuedRecvBlock
	.align	2, 0
	.type	 HandleSendFailure,function
	.thumb_func
HandleSendFailure:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L403
	ldr	r2, [r0, #0x70]
	mov	sl, r2
	mov	r5, #0x0
	add	r2, r0, #0
	add	r2, r2, #0x6e
	ldrh	r3, [r2]
	cmp	r5, r3
	bge	.L388	@cond_branch
	mov	r9, r0
	ldr	r0, .L403+0x4
	mov	r8, r0
.L390:
	mov	r0, #0x1
	and	r0, r0, r1
	lsr	r7, r1, #0x1
	add	r6, r5, #0x1
	cmp	r0, #0
	bne	.L391	@cond_branch
	ldr	r1, .L403+0x8
	add	r0, r1, #0
	add	r1, r5, #0
	orr	r1, r1, r0
	mov	r2, r8
	strh	r1, [r2]
	mov	r4, #0x0
	lsl	r0, r5, #0x1
	ldr	r3, .L403+0xc
	mov	ip, r3
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	mov	r1, sl
	add	r2, r0, r1
	mov	r3, r8
	add	r3, r3, #0x2
.L395:
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	ldrb	r0, [r2]
	orr	r0, r0, r1
	strh	r0, [r3]
	add	r2, r2, #0x2
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L395	@cond_branch
	mov	r4, #0x0
	ldr	r2, .L403+0x4
	ldr	r1, .L403+0xc
.L400:
	ldrh	r0, [r2]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x1]
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L400	@cond_branch
	ldr	r0, .L403+0x10
	mov	r1, ip
	bl	RfuSendQueue_Enqueue
	mov	r1, #0x1
	lsl	r1, r1, r5
	mov	r2, r9
	ldr	r0, [r2, #0x78]
	orr	r0, r0, r1
	str	r0, [r2, #0x78]
.L391:
	add	r1, r7, #0
	add	r5, r6, #0
	ldr	r3, .L403+0x14
	ldrh	r3, [r3]
	cmp	r5, r3
	blt	.L390	@cond_branch
.L388:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L404:
	.align	2, 0
.L403:
	.word	Rfu
	.word	sResendBlock16
	.word	-0x7700
	.word	sResendBlock8
	.word	Rfu+0x9e8
	.word	Rfu+0x6e
.Lfe35:
	.size	 HandleSendFailure,.Lfe35-HandleSendFailure
	.align	2, 0
	.globl	Rfu_SetBlockReceivedFlag
	.type	 Rfu_SetBlockReceivedFlag,function
	.thumb_func
Rfu_SetBlockReceivedFlag:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L408
	ldrb	r2, [r0, #0xc]
	cmp	r2, #0x1
	bne	.L406	@cond_branch
	cmp	r1, #0
	beq	.L406	@cond_branch
	add	r0, r0, #0x61
	add	r0, r1, r0
	strb	r2, [r0]
	b	.L407
.L409:
	.align	2, 0
.L408:
	.word	Rfu
.L406:
	add	r0, r0, #0x5c
	add	r0, r1, r0
	mov	r1, #0x1
	strb	r1, [r0]
.L407:
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 Rfu_SetBlockReceivedFlag,.Lfe36-Rfu_SetBlockReceivedFlag
	.align	2, 0
	.globl	Rfu_ResetBlockReceivedFlag
	.type	 Rfu_ResetBlockReceivedFlag,function
	.thumb_func
Rfu_ResetBlockReceivedFlag:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L411
	add	r1, r3, #0
	add	r1, r1, #0x5c
	add	r1, r0, r1
	mov	r2, #0x0
	strb	r2, [r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	add	r1, r1, #0x92
	strb	r2, [r1]
	bx	lr
.L412:
	.align	2, 0
.L411:
	.word	Rfu
.Lfe37:
	.size	 Rfu_ResetBlockReceivedFlag,.Lfe37-Rfu_ResetBlockReceivedFlag
	.align	2, 0
	.type	 sub_800F74C,function
	.thumb_func
sub_800F74C:
	push	{r4, r5, lr}
	add	r3, r0, #0
	ldr	r0, .L421
	ldrb	r1, [r0, #0xc]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L414	@cond_branch
	mov	r0, #0x0
	b	.L420
.L422:
	.align	2, 0
.L421:
	.word	Rfu
.L414:
	mov	r2, #0x0
	ldr	r0, .L423
	add	r4, r5, r0
.L418:
	add	r1, r2, r4
	add	r0, r3, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L418	@cond_branch
	ldr	r1, .L423+0x4
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r0, r0, r3
	ldrb	r0, [r0]
.L420:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L424:
	.align	2, 0
.L423:
	.word	0xcde
	.word	0xc3e
.Lfe38:
	.size	 sub_800F74C,.Lfe38-sub_800F74C
	.align	2, 0
	.type	 RfuFunc_SendKeysToRfu,function
	.thumb_func
RfuFunc_SendKeysToRfu:
	push	{lr}
	ldr	r0, .L427
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L426	@cond_branch
	ldr	r3, .L427+0x4
	ldrh	r2, [r3]
	cmp	r2, #0
	beq	.L426	@cond_branch
	ldr	r0, .L427+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L426	@cond_branch
	ldr	r1, .L427+0xc
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r0, r0, r2
	strh	r0, [r3]
	mov	r0, #0xbe
	lsl	r0, r0, #0x8
	bl	RfuPrepareSendBuffer
.L426:
	pop	{r0}
	bx	r0
.L428:
	.align	2, 0
.L427:
	.word	gReceivedRemoteLinkPlayers
	.word	gHeldKeyCodeToSend
	.word	gLinkTransferringData
	.word	sHeldKeyCount
.Lfe39:
	.size	 RfuFunc_SendKeysToRfu,.Lfe39-RfuFunc_SendKeysToRfu
	.align	2, 0
	.globl	GetHostRFUtgtGname
	.type	 GetHostRFUtgtGname,function
	.thumb_func
GetHostRFUtgtGname:
	ldr	r0, .L430
	bx	lr
.L431:
	.align	2, 0
.L430:
	.word	gHostRFUtgtGnameBuffer
.Lfe40:
	.size	 GetHostRFUtgtGname,.Lfe40-GetHostRFUtgtGname
	.align	2, 0
	.globl	IsSendingKeysToRfu
	.type	 IsSendingKeysToRfu,function
	.thumb_func
IsSendingKeysToRfu:
	push	{lr}
	mov	r2, #0x0
	ldr	r0, .L434
	ldr	r1, [r0]
	ldr	r0, .L434+0x4
	cmp	r1, r0
	bne	.L433	@cond_branch
	mov	r2, #0x1
.L433:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L435:
	.align	2, 0
.L434:
	.word	Rfu
	.word	RfuFunc_SendKeysToRfu
.Lfe41:
	.size	 IsSendingKeysToRfu,.Lfe41-IsSendingKeysToRfu
	.align	2, 0
	.globl	StartSendingKeysToRfu
	.type	 StartSendingKeysToRfu,function
	.thumb_func
StartSendingKeysToRfu:
	ldr	r1, .L437
	ldr	r0, .L437+0x4
	str	r0, [r1]
	bx	lr
.L438:
	.align	2, 0
.L437:
	.word	Rfu
	.word	RfuFunc_SendKeysToRfu
.Lfe42:
	.size	 StartSendingKeysToRfu,.Lfe42-StartSendingKeysToRfu
	.align	2, 0
	.globl	ClearLinkRfuCallback
	.type	 ClearLinkRfuCallback,function
	.thumb_func
ClearLinkRfuCallback:
	ldr	r1, .L440
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L441:
	.align	2, 0
.L440:
	.word	Rfu
.Lfe43:
	.size	 ClearLinkRfuCallback,.Lfe43-ClearLinkRfuCallback
	.align	2, 0
	.type	 Rfu_BerryBlenderSendHeldKeys,function
	.thumb_func
Rfu_BerryBlenderSendHeldKeys:
	push	{lr}
	mov	r0, #0x88
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L443	@cond_branch
	bl	GetBlenderArrowPosition
	ldr	r1, .L444
	strh	r0, [r1, #0xc]
.L443:
	ldr	r1, .L444+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L445:
	.align	2, 0
.L444:
	.word	gSendCmd
	.word	gBerryBlenderKeySendAttempts
.Lfe44:
	.size	 Rfu_BerryBlenderSendHeldKeys,.Lfe44-Rfu_BerryBlenderSendHeldKeys
	.align	2, 0
	.globl	Rfu_SetBerryBlenderLinkCallback
	.type	 Rfu_SetBerryBlenderLinkCallback,function
	.thumb_func
Rfu_SetBerryBlenderLinkCallback:
	push	{lr}
	ldr	r1, .L448
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L447	@cond_branch
	ldr	r0, .L448+0x4
	str	r0, [r1]
.L447:
	pop	{r0}
	bx	r0
.L449:
	.align	2, 0
.L448:
	.word	Rfu
	.word	Rfu_BerryBlenderSendHeldKeys
.Lfe45:
	.size	 Rfu_SetBerryBlenderLinkCallback,.Lfe45-Rfu_SetBerryBlenderLinkCallback
	.align	2, 0
	.type	 RfuHandleReceiveCommand,function
	.thumb_func
RfuHandleReceiveCommand:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	mov	r8, r0
.L454:
	mov	r1, r8
	lsl	r0, r1, #0x4
	ldr	r2, .L494
	add	r1, r0, r2
	ldrh	r7, [r1]
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	add	r1, r3, #0
	and	r1, r1, r7
	mov	r2, #0x88
	lsl	r2, r2, #0x8
	add	r5, r0, #0
	cmp	r1, r2
	beq	.L460	@cond_branch
	cmp	r1, r2
	bgt	.L486	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	cmp	r1, r0
	bne	.LCB3424
	b	.L473	@long jump
.LCB3424:
	cmp	r1, r0
	bgt	.L487	@cond_branch
	mov	r0, #0x88
	lsl	r0, r0, #0x7
	cmp	r1, r0
	bne	.LCB3430
	b	.L483	@long jump
.LCB3430:
	mov	r0, #0xbe
	lsl	r0, r0, #0x7
	cmp	r1, r0
	bne	.LCB3434
	b	.L472	@long jump
.LCB3434:
	b	.L493
.L495:
	.align	2, 0
.L494:
	.word	gRecvCmds
.L487:
	mov	r0, #0xee
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L458	@cond_branch
	mov	r0, #0xf0
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L456	@cond_branch
	b	.L493
.L486:
	mov	r0, #0xbe
	lsl	r0, r0, #0x8
	cmp	r1, r0
	bne	.LCB3458
	b	.L483	@long jump
.LCB3458:
	cmp	r1, r0
	bgt	.L488	@cond_branch
	mov	r0, #0x89
	lsl	r0, r0, #0x8
	cmp	r1, r0
	beq	.L462	@cond_branch
	mov	r0, #0xa1
	lsl	r0, r0, #0x8
	cmp	r1, r0
	bne	.LCB3468
	b	.L471	@long jump
.LCB3468:
	b	.L493
.L488:
	mov	r0, #0xed
	lsl	r0, r0, #0x8
	cmp	r1, r0
	bne	.LCB3475
	b	.L475	@long jump
.LCB3475:
	mov	r0, #0xee
	lsl	r0, r0, #0x8
	cmp	r1, r0
	bne	.LCB3479
	b	.L480	@long jump
.LCB3479:
	b	.L493
.L456:
	ldr	r4, .L496
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0
	bne	.L458	@cond_branch
	ldr	r0, .L496+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB3496
	b	.L450	@long jump
.LCB3496:
.L458:
	ldr	r0, .L496+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r0, #0
	beq	.LCB3506
	b	.L455	@long jump
.LCB3506:
	ldr	r1, .L496+0xc
	add	r0, r5, r1
	ldrh	r0, [r0]
	ldr	r2, .L496
	strb	r0, [r2, #0xd]
	ldr	r3, .L496+0x10
	add	r0, r5, r3
	bl	sub_800F74C
	ldr	r4, .L496+0x14
	strb	r0, [r4]
	b	.L455
.L497:
	.align	2, 0
.L496:
	.word	Rfu
	.word	gReceivedRemoteLinkPlayers
	.word	gRfuLinkStatus
	.word	gRecvCmds+0x2
	.word	gRecvCmds+0x4
	.word	Rfu+0xcce
.L460:
	ldr	r0, .L498
	mov	r9, r0
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r7, r0, #0x2
	mov	r2, r9
	add	r3, r7, r2
	mov	r4, #0x92
	add	r4, r4, r3
	mov	ip, r4
	ldrb	r4, [r4]
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r4, #0
	beq	.LCB3554
	b	.L455	@long jump
.LCB3554:
	add	r0, r3, #0
	add	r0, r0, #0x80
	mov	r2, #0x0
	strh	r4, [r0]
	ldr	r1, .L498+0x4
	add	r0, r5, r1
	ldrh	r0, [r0]
	add	r1, r3, #0
	add	r1, r1, #0x82
	strh	r0, [r1]
	ldr	r1, .L498+0x8
	add	r0, r5, r1
	ldrh	r1, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x91
	strb	r1, [r0]
	mov	r0, r9
	add	r0, r0, #0x88
	add	r0, r7, r0
	str	r4, [r0]
	mov	r0, #0x1
	mov	r3, ip
	strb	r0, [r3]
	mov	r0, r9
	add	r0, r0, #0x5c
	add	r0, r0, r8
	strb	r2, [r0]
	b	.L455
.L499:
	.align	2, 0
.L498:
	.word	Rfu
	.word	gRecvCmds+0x2
	.word	gRecvCmds+0x4
.L462:
	ldr	r4, .L500
	mov	r9, r4
	mov	r0, r8
	lsl	r1, r0, #0x2
	add	r0, r1, r0
	lsl	r4, r0, #0x2
	mov	r3, r9
	add	r2, r4, r3
	add	r0, r2, #0
	add	r0, r0, #0x92
	ldrb	r3, [r0]
	mov	sl, r1
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r3, #0x1
	beq	.LCB3612
	b	.L455	@long jump
.LCB3612:
	mov	r0, #0xff
	and	r0, r0, r7
	add	r2, r2, #0x80
	strh	r0, [r2]
	mov	r1, r9
	add	r1, r1, #0x88
	add	r1, r4, r1
	lsl	r3, r3, r0
	ldr	r0, [r1]
	orr	r0, r0, r3
	str	r0, [r1]
	mov	r4, #0x0
	ldr	r0, .L500+0x4
	mov	r9, r0
	mov	ip, r2
	mov	r1, r8
	lsl	r7, r1, #0x8
	add	r3, r5, #0
.L467:
	mov	r2, ip
	ldrh	r0, [r2]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	add	r1, r1, r9
	add	r2, r4, #0x1
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	ldr	r4, .L500+0x8
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	lsl	r2, r2, #0x10
	lsr	r4, r2, #0x10
	cmp	r4, #0x5
	bls	.L467	@cond_branch
	ldr	r4, .L500
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x88
	add	r1, r0, r1
	add	r2, r0, r4
	add	r0, r2, #0
	add	r0, r0, #0x82
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	ldr	r3, .L500+0xc
	add	r0, r0, r3
	ldr	r1, [r1]
	ldr	r0, [r0]
	cmp	r1, r0
	beq	.LCB3688
	b	.L455	@long jump
.LCB3688:
	add	r1, r2, #0
	add	r1, r1, #0x92
	mov	r0, #0x2
	strb	r0, [r1]
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	Rfu_SetBlockReceivedFlag
	bl	GetHostRFUtgtGname
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x45
	beq	.LCB3707
	b	.L455	@long jump
.LCB3707:
	ldr	r0, .L500+0x10
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB3713
	b	.L455	@long jump
.LCB3713:
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0
	beq	.LCB3718
	b	.L455	@long jump
.LCB3718:
	ldr	r0, .L500+0x4
	bl	ValidateAndReceivePokemonSioInfo
	b	.L455
.L501:
	.align	2, 0
.L500:
	.word	Rfu
	.word	gBlockRecvBuffer
	.word	gRecvCmds
	.word	sAllBlocksReceived
	.word	gReceivedRemoteLinkPlayers
.L471:
	ldr	r2, .L502
	ldr	r3, .L502+0x4
	add	r0, r5, r3
	ldrh	r1, [r0]
	lsl	r1, r1, #0x3
	add	r0, r1, r2
	ldr	r0, [r0]
	add	r2, r2, #0x4
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	Rfu_InitBlockSend
	b	.L493
.L503:
	.align	2, 0
.L502:
	.word	sBlockRequests
	.word	gRecvCmds+0x2
.L472:
	ldr	r1, .L504
	add	r1, r1, r8
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L493
.L505:
	.align	2, 0
.L504:
	.word	Rfu+0xe4
.L473:
	ldr	r2, .L506
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r0, r2, r4
	ldr	r3, .L506+0x4
	add	r1, r5, r3
	ldrh	r0, [r0]
	mov	r6, r8
	add	r6, r6, #0x1
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.LCB3791
	b	.L455	@long jump
.LCB3791:
	add	r0, r2, #0
	add	r0, r0, #0xe9
	add	r0, r0, r8
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L455
.L507:
	.align	2, 0
.L506:
	.word	Rfu
	.word	gRecvCmds+0x2
.L475:
	ldr	r7, .L508
	ldrb	r2, [r7, #0xc]
	cmp	r2, #0
	bne	.L476	@cond_branch
	ldr	r3, .L508+0x4
	ldrb	r0, [r3]
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r0, #0
	beq	.L455	@cond_branch
	ldr	r0, .L508+0x8
	add	r4, r5, r0
	ldrh	r1, [r4]
	ldr	r0, .L508+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x2]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L478	@cond_branch
	strb	r2, [r3]
	bl	rfu_LMAN_requestChangeAgbClockMaster
	ldr	r1, .L508+0x10
	add	r0, r5, r1
	ldrh	r1, [r0]
	ldr	r2, .L508+0x14
	add	r0, r7, r2
	strb	r1, [r0]
.L478:
	ldr	r0, .L508+0x18
	add	r0, r0, #0x6
	add	r0, r5, r0
	ldrh	r0, [r0]
	strb	r0, [r7, #0xd]
	ldrh	r0, [r4]
	bl	ClearSelectedLinkPlayerIds
	b	.L455
.L509:
	.align	2, 0
.L508:
	.word	Rfu
	.word	gReceivedRemoteLinkPlayers
	.word	gRecvCmds+0x2
	.word	gRfuLinkStatus
	.word	gRecvCmds+0x4
	.word	0xce4
	.word	gRecvCmds
.L476:
	mov	r0, #0xee
	lsl	r0, r0, #0x8
	bl	RfuPrepareSendBuffer
	ldr	r1, .L510
	ldr	r3, .L510+0x4
	add	r0, r5, r3
	ldrh	r0, [r0]
	strh	r0, [r1, #0x2]
	ldr	r4, .L510+0x8
	add	r0, r5, r4
	ldrh	r0, [r0]
	strh	r0, [r1, #0x4]
	ldr	r0, .L510+0xc
	add	r0, r0, #0x6
	add	r0, r5, r0
	ldrh	r0, [r0]
	strh	r0, [r1, #0x6]
	b	.L493
.L511:
	.align	2, 0
.L510:
	.word	gSendCmd
	.word	gRecvCmds+0x2
	.word	gRecvCmds+0x4
	.word	gRecvCmds
.L480:
	ldr	r4, .L512
	ldrb	r0, [r4, #0xc]
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r0, #0x1
	bne	.L453	@cond_branch
	ldr	r0, .L512+0x4
	add	r2, r4, r0
	ldr	r1, .L512+0x8
	add	r3, r5, r1
	ldrb	r1, [r3]
	ldrb	r0, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L512+0xc
	add	r0, r5, r2
	ldrh	r1, [r0]
	ldr	r2, .L512+0x10
	add	r0, r4, r2
	strb	r1, [r0]
	ldrh	r0, [r3]
	bl	ClearSelectedLinkPlayerIds
	b	.L455
.L513:
	.align	2, 0
.L512:
	.word	Rfu
	.word	0xce3
	.word	gRecvCmds+0x2
	.word	gRecvCmds+0x4
	.word	0xce4
.L483:
	ldr	r0, .L514
	mov	r3, r8
	lsl	r1, r3, #0x1
	add	r1, r1, r0
	ldr	r4, .L514+0x4
	add	r0, r5, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
.L493:
	mov	r6, r8
	add	r6, r6, #0x1
.L455:
	ldr	r3, .L514+0x8
	ldrb	r4, [r3, #0xc]
	cmp	r4, #0x1
	bne	.L453	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x61
	mov	r1, r8
	add	r2, r1, r0
	ldrb	r0, [r2]
	add	r1, r0, #0
	cmp	r1, #0
	beq	.L453	@cond_branch
	cmp	r1, #0x4
	bne	.L490	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x5c
	add	r0, r0, r8
	mov	r1, #0x0
	strb	r4, [r0]
	strb	r1, [r2]
	b	.L453
.L515:
	.align	2, 0
.L514:
	.word	gLinkPartnersHeldKeys
	.word	gRecvCmds+0x2
	.word	Rfu
.L490:
	add	r0, r0, #0x1
	strb	r0, [r2]
.L453:
	lsl	r0, r6, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	cmp	r0, #0x4
	bhi	.LCB4002
	b	.L454	@long jump
.LCB4002:
.L450:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 RfuHandleReceiveCommand,.Lfe46-RfuHandleReceiveCommand
	.align	2, 0
	.type	 AreNoPlayersReceiving,function
	.thumb_func
AreNoPlayersReceiving:
	push	{lr}
	mov	r2, #0x0
	ldr	r0, .L524
	add	r1, r0, #0
	add	r1, r1, #0x92
.L520:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L519	@cond_branch
	mov	r0, #0x0
	b	.L523
.L525:
	.align	2, 0
.L524:
	.word	Rfu
.L519:
	add	r1, r1, #0x14
	add	r2, r2, #0x1
	cmp	r2, #0x4
	ble	.L520	@cond_branch
	mov	r0, #0x1
.L523:
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 AreNoPlayersReceiving,.Lfe47-AreNoPlayersReceiving
	.align	2, 0
	.type	 sub_800FC88,function
	.thumb_func
sub_800FC88:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r2, .L535
	ldrb	r0, [r2, #0xd]
	cmp	r1, r0
	bge	.L528	@cond_branch
	add	r4, r0, #0
	add	r3, r2, #0
	add	r3, r3, #0x92
	add	r2, r2, #0x5c
.L530:
	ldrb	r0, [r3]
	cmp	r0, #0x2
	bne	.L532	@cond_branch
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L529	@cond_branch
.L532:
	mov	r0, #0x0
	b	.L534
.L536:
	.align	2, 0
.L535:
	.word	Rfu
.L529:
	add	r3, r3, #0x14
	add	r1, r1, #0x1
	cmp	r1, r4
	blt	.L530	@cond_branch
.L528:
	mov	r0, #0x1
.L534:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 sub_800FC88,.Lfe48-sub_800FC88
	.align	2, 0
	.type	 ResetSendDataManager,function
	.thumb_func
ResetSendDataManager:
	mov	r2, #0x0
	mov	r1, #0x0
	strh	r1, [r0]
	strh	r1, [r0, #0x2]
	str	r1, [r0, #0x4]
	str	r1, [r0, #0x8]
	strb	r2, [r0, #0x10]
	strb	r2, [r0, #0x11]
	strb	r2, [r0, #0x12]
	bx	lr
.Lfe49:
	.size	 ResetSendDataManager,.Lfe49-ResetSendDataManager
	.align	2, 0
	.globl	Rfu_GetBlockReceivedStatus
	.type	 Rfu_GetBlockReceivedStatus,function
	.thumb_func
Rfu_GetBlockReceivedStatus:
	push	{r4, lr}
	mov	r2, #0x0
	mov	r1, #0x0
	ldr	r0, .L545
	add	r3, r0, #0
	add	r3, r3, #0x92
	add	r4, r0, #0
	add	r4, r4, #0x5c
.L542:
	ldrb	r0, [r3]
	cmp	r0, #0x2
	bne	.L541	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L541	@cond_branch
	lsl	r0, r0, r1
	orr	r2, r2, r0
	lsl	r0, r2, #0x18
	lsr	r2, r0, #0x18
.L541:
	add	r3, r3, #0x14
	add	r1, r1, #0x1
	cmp	r1, #0x4
	ble	.L542	@cond_branch
	add	r0, r2, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L546:
	.align	2, 0
.L545:
	.word	Rfu
.Lfe50:
	.size	 Rfu_GetBlockReceivedStatus,.Lfe50-Rfu_GetBlockReceivedStatus
	.align	2, 0
	.type	 RfuPrepareSendBuffer,function
	.thumb_func
RfuPrepareSendBuffer:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r5, .L577
	strh	r1, [r5]
	mov	r0, #0xf0
	lsl	r0, r0, #0x7
	add	r4, r5, #0
	cmp	r1, r0
	beq	.L553	@cond_branch
	cmp	r1, r0
	bgt	.L573	@cond_branch
	mov	r0, #0xbe
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L560	@cond_branch
	cmp	r1, r0
	bgt	.L574	@cond_branch
	mov	r0, #0xbc
	lsl	r0, r0, #0x6
	cmp	r1, r0
	beq	.L562	@cond_branch
	mov	r0, #0x88
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L561	@cond_branch
	b	.L548
.L578:
	.align	2, 0
.L577:
	.word	gSendCmd
.L574:
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L560	@cond_branch
	mov	r0, #0xee
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L553	@cond_branch
	b	.L548
.L573:
	mov	r0, #0xbe
	lsl	r0, r0, #0x8
	cmp	r1, r0
	beq	.L568	@cond_branch
	cmp	r1, r0
	bgt	.L548	@cond_branch
	mov	r0, #0x88
	lsl	r0, r0, #0x8
	cmp	r1, r0
	beq	.L549	@cond_branch
	mov	r0, #0xa1
	lsl	r0, r0, #0x8
	cmp	r1, r0
	beq	.L550	@cond_branch
	b	.L548
.L549:
	ldr	r0, .L579
	add	r1, r0, #0
	add	r1, r1, #0x6e
	ldrh	r1, [r1]
	strh	r1, [r5, #0x2]
	add	r0, r0, #0x7d
	ldrb	r0, [r0]
	add	r0, r0, #0x80
	strh	r0, [r5, #0x4]
	b	.L548
.L580:
	.align	2, 0
.L579:
	.word	Rfu
.L550:
	bl	AreNoPlayersReceiving
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L548	@cond_branch
	ldr	r0, .L581
	add	r0, r0, #0x5a
	ldrb	r0, [r0]
	b	.L576
.L582:
	.align	2, 0
.L581:
	.word	Rfu
.L553:
	ldr	r3, .L583
	ldr	r1, .L583+0x4
	add	r0, r3, r1
	ldr	r2, .L583+0x8
	add	r1, r3, r2
	ldrb	r2, [r0]
	ldrb	r0, [r1]
	eor	r0, r0, r2
	ldr	r1, .L583+0xc
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	strb	r0, [r3, #0xd]
	ldrb	r0, [r3, #0xd]
	strh	r0, [r4, #0x2]
	add	r2, r4, #0x4
	mov	r4, #0x0
	ldr	r0, .L583+0x10
	add	r3, r3, r0
.L557:
	add	r1, r2, r4
	add	r0, r4, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L557	@cond_branch
	b	.L548
.L584:
	.align	2, 0
.L583:
	.word	Rfu
	.word	0xce2
	.word	0xce3
	.word	sUnknown_082ED695
	.word	0xcde
.L560:
	ldr	r0, .L585
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r4, #0x2]
	b	.L548
.L586:
	.align	2, 0
.L585:
	.word	Rfu
.L561:
	strh	r1, [r5]
	ldr	r0, .L587
	ldrh	r0, [r0, #0x2c]
	b	.L576
.L588:
	.align	2, 0
.L587:
	.word	gMain
.L562:
	mov	r4, #0x0
	ldr	r3, .L589
.L566:
	add	r2, r4, #0x1
	lsl	r1, r2, #0x1
	add	r1, r1, r5
	lsl	r0, r4, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r1]
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	cmp	r4, #0x5
	bls	.L566	@cond_branch
	b	.L548
.L590:
	.align	2, 0
.L589:
	.word	Rfu+0xf2
.L568:
	ldr	r0, .L591
	ldrh	r0, [r0]
.L576:
	strh	r0, [r5, #0x2]
.L548:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L592:
	.align	2, 0
.L591:
	.word	gHeldKeyCodeToSend
.Lfe51:
	.size	 RfuPrepareSendBuffer,.Lfe51-RfuPrepareSendBuffer
	.align	2, 0
	.globl	Rfu_SendPacket
	.type	 Rfu_SendPacket,function
	.thumb_func
Rfu_SendPacket:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L595
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L594	@cond_branch
	bl	RfuHasErrored
	cmp	r0, #0
	bne	.L594	@cond_branch
	ldr	r0, .L595+0x4
	add	r1, r4, #0
	mov	r2, #0xc
	bl	memcpy
	mov	r0, #0xbc
	lsl	r0, r0, #0x6
	bl	RfuPrepareSendBuffer
.L594:
	pop	{r4}
	pop	{r0}
	bx	r0
.L596:
	.align	2, 0
.L595:
	.word	gSendCmd
	.word	Rfu+0xf2
.Lfe52:
	.size	 Rfu_SendPacket,.Lfe52-Rfu_SendPacket
	.align	2, 0
	.globl	Rfu_InitBlockSend
	.type	 Rfu_InitBlockSend,function
	.thumb_func
Rfu_InitBlockSend:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	add	r6, r1, #0
	ldr	r5, .L608
	ldr	r0, [r5]
	cmp	r0, #0
	bne	.L607	@cond_branch
	ldr	r0, .L608+0x4
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L607	@cond_branch
	mov	r0, #0x7c
	add	r0, r0, r5
	mov	r9, r0
	ldrb	r1, [r0]
	mov	r8, r1
	cmp	r1, #0
	beq	.L600	@cond_branch
	ldr	r1, .L608+0x8
	add	r1, r1, #0x83
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L607:
	mov	r0, #0x0
	b	.L605
.L609:
	.align	2, 0
.L608:
	.word	Rfu
	.word	gSendCmd
	.word	sRfuDebug
.L600:
	add	r0, r6, #0
	mov	r1, #0xc
	bl	__umodsi3
	neg	r4, r0
	orr	r4, r4, r0
	lsr	r4, r4, #0x1f
	bl	GetMultiplayerId
	add	r1, r5, #0
	add	r1, r1, #0x7d
	strb	r0, [r1]
	mov	r0, #0x1
	mov	r1, r9
	strb	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0xc
	bl	__udivsi3
	add	r0, r0, r4
	add	r1, r5, #0
	add	r1, r1, #0x6e
	strh	r0, [r1]
	add	r0, r5, #0
	add	r0, r0, #0x6c
	mov	r1, r8
	strh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	cmp	r6, r0
	bls	.L602	@cond_branch
	str	r7, [r5, #0x70]
	b	.L603
.L602:
	ldr	r4, .L610
	cmp	r7, r4
	beq	.L604	@cond_branch
	add	r0, r4, #0
	add	r1, r7, #0
	add	r2, r6, #0
	bl	memcpy
.L604:
	str	r4, [r5, #0x70]
.L603:
	mov	r0, #0x88
	lsl	r0, r0, #0x8
	bl	RfuPrepareSendBuffer
	ldr	r0, .L610+0x4
	ldr	r1, .L610+0x8
	str	r1, [r0]
	add	r0, r0, #0x5b
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r0, #0x1
.L605:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L611:
	.align	2, 0
.L610:
	.word	gBlockSendBuffer
	.word	Rfu
	.word	HandleBlockSend
.Lfe53:
	.size	 Rfu_InitBlockSend,.Lfe53-Rfu_InitBlockSend
	.align	2, 0
	.type	 HandleBlockSend,function
	.thumb_func
HandleBlockSend:
	push	{r4, r5, lr}
	ldr	r0, .L619
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L613	@cond_branch
	mov	r5, #0x88
	lsl	r5, r5, #0x8
	add	r0, r5, #0
	bl	RfuPrepareSendBuffer
	ldr	r4, .L619+0x4
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	bne	.L614	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x5b
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bls	.L613	@cond_branch
	b	.L618
.L620:
	.align	2, 0
.L619:
	.word	gSendCmd
	.word	Rfu
.L614:
	bl	GetMultiplayerId
	ldr	r1, .L621
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, r5
	bne	.L613	@cond_branch
.L618:
	ldr	r0, .L621+0x4
	str	r0, [r4]
.L613:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L622:
	.align	2, 0
.L621:
	.word	gRecvCmds
	.word	SendNextBlock
.Lfe54:
	.size	 HandleBlockSend,.Lfe54-HandleBlockSend
	.align	2, 0
	.type	 SendNextBlock,function
	.thumb_func
SendNextBlock:
	push	{r4, r5, r6, lr}
	ldr	r0, .L630
	mov	ip, r0
	ldr	r5, [r0, #0x70]
	ldr	r3, .L630+0x4
	mov	r2, ip
	add	r2, r2, #0x6c
	ldrh	r1, [r2]
	mov	r4, #0x89
	lsl	r4, r4, #0x8
	add	r0, r4, #0
	orr	r0, r0, r1
	strh	r0, [r3]
	mov	r4, #0x0
	add	r6, r2, #0
	add	r3, r3, #0x2
.L627:
	lsl	r2, r4, #0x1
	ldrh	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0]
	orr	r0, r0, r1
	strh	r0, [r3]
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L627	@cond_branch
	mov	r0, ip
	add	r0, r0, #0x6c
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	add	r0, r0, #0x2
	ldrh	r0, [r0]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r0, r1
	bhi	.L629	@cond_branch
	mov	r0, ip
	add	r0, r0, #0x7c
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L630+0x8
	mov	r1, ip
	str	r0, [r1]
.L629:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L631:
	.align	2, 0
.L630:
	.word	Rfu
	.word	gSendCmd
	.word	SendLastBlock
.Lfe55:
	.size	 SendNextBlock,.Lfe55-SendNextBlock
	.align	2, 0
	.type	 SendLastBlock,function
	.thumb_func
SendLastBlock:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r5, .L643
	ldr	r0, [r5, #0x70]
	mov	r8, r0
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0
	bne	.L633	@cond_branch
	ldr	r3, .L643+0x4
	add	r2, r5, #0
	add	r2, r2, #0x6e
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
	ldr	r4, .L643+0x8
	add	r1, r4, #0
	orr	r0, r0, r1
	strh	r0, [r3]
	mov	r4, #0x0
	mov	r9, r5
	ldr	r0, .L643+0xc
	mov	ip, r0
	lsl	r5, r6, #0x4
	add	r7, r2, #0
	add	r3, r3, #0x2
.L637:
	lsl	r2, r4, #0x1
	ldrh	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, r8
	add	r1, r0, #0
	sub	r1, r1, #0xb
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	sub	r0, r0, #0xc
	ldrb	r0, [r0]
	orr	r0, r0, r1
	strh	r0, [r3]
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L637	@cond_branch
	mov	r1, ip
	add	r0, r5, r1
	ldrb	r1, [r0]
	mov	r3, r9
	add	r0, r3, #0
	add	r0, r0, #0x6e
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L642	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r1, r3, #0
	add	r1, r1, #0x88
	add	r1, r0, r1
	ldr	r2, .L643+0x10
	add	r0, r0, r3
	add	r0, r0, #0x82
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r1]
	ldr	r0, [r0]
	cmp	r1, r0
	beq	.L640	@cond_branch
	add	r0, r6, #0
	bl	HandleSendFailure
	ldr	r1, .L643+0x14
	add	r1, r1, #0x64
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L642
.L644:
	.align	2, 0
.L643:
	.word	Rfu
	.word	gSendCmd
	.word	-0x7700
	.word	gRecvCmds
	.word	sAllBlocksReceived
	.word	sRfuDebug
.L640:
	mov	r0, #0x0
	mov	r4, r9
	str	r0, [r4]
	b	.L642
.L633:
	mov	r0, #0x0
	str	r0, [r5]
.L642:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 SendLastBlock,.Lfe56-SendLastBlock
	.align	2, 0
	.globl	Rfu_SendBlockRequest
	.type	 Rfu_SendBlockRequest,function
	.thumb_func
Rfu_SendBlockRequest:
	push	{lr}
	ldr	r1, .L646
	add	r1, r1, #0x5a
	strb	r0, [r1]
	mov	r0, #0xa1
	lsl	r0, r0, #0x8
	bl	RfuPrepareSendBuffer
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L647:
	.align	2, 0
.L646:
	.word	Rfu
.Lfe57:
	.size	 Rfu_SendBlockRequest,.Lfe57-Rfu_SendBlockRequest
	.align	2, 0
	.type	 sub_801011C,function
	.thumb_func
sub_801011C:
	push	{lr}
	bl	rfu_clearAllSlot
	bl	rfu_LMAN_powerDownRFU
	ldr	r1, .L649
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r2, .L649+0x4
	add	r3, r2, #0
	add	r3, r3, #0xef
	mov	r1, #0x0
	mov	r0, #0x1
	strb	r0, [r3]
	str	r1, [r2]
	pop	{r0}
	bx	r0
.L650:
	.align	2, 0
.L649:
	.word	gReceivedRemoteLinkPlayers
	.word	Rfu
.Lfe58:
	.size	 sub_801011C,.Lfe58-sub_801011C
	.align	2, 0
	.type	 DisconnectRfu,function
	.thumb_func
DisconnectRfu:
	push	{lr}
	ldr	r0, .L652
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	orr	r0, r0, r1
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	bl	sub_801011C
	pop	{r0}
	bx	r0
.L653:
	.align	2, 0
.L652:
	.word	gRfuLinkStatus
.Lfe59:
	.size	 DisconnectRfu,.Lfe59-DisconnectRfu
	.align	2, 0
	.type	 TryDisconnectRfu,function
	.thumb_func
TryDisconnectRfu:
	push	{r4, lr}
	ldr	r4, .L657
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0
	bne	.L655	@cond_branch
	bl	rfu_LMAN_requestChangeAgbClockMaster
	ldr	r0, .L657+0x4
	add	r1, r4, r0
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L656
.L658:
	.align	2, 0
.L657:
	.word	Rfu
	.word	0xce4
.L655:
	ldr	r0, .L659
	str	r0, [r4]
.L656:
	pop	{r4}
	pop	{r0}
	bx	r0
.L660:
	.align	2, 0
.L659:
	.word	DisconnectRfu
.Lfe60:
	.size	 TryDisconnectRfu,.Lfe60-TryDisconnectRfu
	.align	2, 0
	.globl	LinkRfu_FatalError
	.type	 LinkRfu_FatalError,function
	.thumb_func
LinkRfu_FatalError:
	push	{lr}
	bl	rfu_LMAN_requestChangeAgbClockMaster
	ldr	r2, .L662
	ldr	r0, .L662+0x4
	add	r1, r2, r0
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L662+0x8
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x2]
	ldrb	r1, [r1, #0x3]
	orr	r0, r0, r1
	ldr	r1, .L662+0xc
	add	r2, r2, r1
	strb	r0, [r2]
	pop	{r0}
	bx	r0
.L663:
	.align	2, 0
.L662:
	.word	Rfu
	.word	0xce4
	.word	gRfuLinkStatus
	.word	0xce3
.Lfe61:
	.size	 LinkRfu_FatalError,.Lfe61-LinkRfu_FatalError
	.align	2, 0
	.type	 WaitAllReadyToCloseLink,function
	.thumb_func
WaitAllReadyToCloseLink:
	push	{r4, r5, lr}
	ldr	r0, .L674
	ldrb	r5, [r0, #0xd]
	mov	r2, #0x0
	mov	r1, #0x0
	add	r3, r0, #0
	add	r4, r3, #0
	add	r4, r4, #0xe4
.L668:
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L667	@cond_branch
	add	r2, r2, #0x1
.L667:
	add	r1, r1, #0x1
	cmp	r1, #0x4
	ble	.L668	@cond_branch
	cmp	r2, r5
	bne	.L671	@cond_branch
	ldr	r2, .L674+0x4
	ldr	r0, [r2]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r3, #0xc]
	cmp	r0, #0
	bne	.L672	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	mov	r1, #0x3
	strb	r1, [r0]
	bl	TryDisconnectRfu
	b	.L671
.L675:
	.align	2, 0
.L674:
	.word	Rfu
	.word	gBattleTypeFlags
.L672:
	ldr	r0, .L676
	str	r0, [r3]
.L671:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L677:
	.align	2, 0
.L676:
	.word	TryDisconnectRfu
.Lfe62:
	.size	 WaitAllReadyToCloseLink,.Lfe62-WaitAllReadyToCloseLink
	.align	2, 0
	.type	 SendReadyCloseLink,function
	.thumb_func
SendReadyCloseLink:
	push	{r4, lr}
	ldr	r0, .L680
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L679	@cond_branch
	ldr	r4, .L680+0x4
	ldr	r1, .L680+0x8
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L679	@cond_branch
	mov	r0, #0xbe
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	ldr	r0, .L680+0xc
	str	r0, [r4]
.L679:
	pop	{r4}
	pop	{r0}
	bx	r0
.L681:
	.align	2, 0
.L680:
	.word	gSendCmd
	.word	Rfu
	.word	0xce8
	.word	WaitAllReadyToCloseLink
.Lfe63:
	.size	 SendReadyCloseLink,.Lfe63-SendReadyCloseLink
	.align	2, 0
	.type	 Task_TryReadyCloseLink,function
	.thumb_func
Task_TryReadyCloseLink:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L684
	ldr	r0, [r2]
	cmp	r0, #0
	bne	.L683	@cond_branch
	ldr	r1, .L684+0x4
	add	r0, r2, r1
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L684+0x8
	str	r0, [r2]
	add	r0, r3, #0
	bl	DestroyTask
.L683:
	pop	{r0}
	bx	r0
.L685:
	.align	2, 0
.L684:
	.word	Rfu
	.word	0xcd9
	.word	SendReadyCloseLink
.Lfe64:
	.size	 Task_TryReadyCloseLink,.Lfe64-Task_TryReadyCloseLink
	.align	2, 0
	.globl	Rfu_SetCloseLinkCallback
	.type	 Rfu_SetCloseLinkCallback,function
	.thumb_func
Rfu_SetCloseLinkCallback:
	push	{r4, lr}
	ldr	r4, .L688
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L687	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x5
	bl	CreateTask
.L687:
	pop	{r4}
	pop	{r0}
	bx	r0
.L689:
	.align	2, 0
.L688:
	.word	Task_TryReadyCloseLink
.Lfe65:
	.size	 Rfu_SetCloseLinkCallback,.Lfe65-Rfu_SetCloseLinkCallback
	.align	2, 0
	.type	 SendReadyExitStandbyUntilAllReady,function
	.thumb_func
SendReadyExitStandbyUntilAllReady:
	push	{r4, r5, lr}
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L691	@cond_branch
	ldr	r1, .L705
	ldr	r2, .L705+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L691	@cond_branch
	add	r5, r1, #0
	add	r5, r5, #0xfe
	ldrh	r0, [r5]
	cmp	r0, #0x3c
	bls	.L691	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	strh	r4, [r5]
.L691:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	cmp	r1, r2
	bcs	.L694	@cond_branch
	ldr	r0, .L705
	add	r3, r0, #0
	add	r3, r3, #0xe9
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L694	@cond_branch
.L695:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	bcs	.L694	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L695	@cond_branch
.L694:
	ldr	r4, .L705
	cmp	r1, r2
	bne	.L699	@cond_branch
	mov	r1, #0x0
	add	r3, r4, #0
	add	r3, r3, #0xe9
	mov	r2, #0x0
.L703:
	add	r0, r1, r3
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x4
	bls	.L703	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	mov	r2, #0x0
	strh	r1, [r0]
	str	r2, [r4]
.L699:
	add	r1, r4, #0
	add	r1, r1, #0xfe
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L706:
	.align	2, 0
.L705:
	.word	Rfu
	.word	0x9e6
.Lfe66:
	.size	 SendReadyExitStandbyUntilAllReady,.Lfe66-SendReadyExitStandbyUntilAllReady
	.align	2, 0
	.type	 LinkLeaderReadyToExitStandby,function
	.thumb_func
LinkLeaderReadyToExitStandby:
	push	{r4, lr}
	ldr	r4, .L709
	ldr	r1, .L709+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L708	@cond_branch
	ldr	r0, .L709+0x8
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L708	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	ldr	r0, .L709+0xc
	str	r0, [r4]
.L708:
	pop	{r4}
	pop	{r0}
	bx	r0
.L710:
	.align	2, 0
.L709:
	.word	Rfu
	.word	0x9e6
	.word	gSendCmd
	.word	SendReadyExitStandbyUntilAllReady
.Lfe67:
	.size	 LinkLeaderReadyToExitStandby,.Lfe67-LinkLeaderReadyToExitStandby
	.align	2, 0
	.type	 Rfu_LinkStandby,function
	.thumb_func
Rfu_LinkStandby:
	push	{r4, lr}
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L712	@cond_branch
	ldr	r4, .L724
	ldr	r1, .L724+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L714	@cond_branch
	ldr	r0, .L724+0x8
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L714	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	ldr	r0, .L724+0xc
	b	.L723
.L725:
	.align	2, 0
.L724:
	.word	Rfu
	.word	0x9e6
	.word	gSendCmd
	.word	SendReadyExitStandbyUntilAllReady
.L712:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x1
	cmp	r1, r2
	bcs	.L716	@cond_branch
	ldr	r3, .L726
	add	r0, r3, #0
	add	r0, r0, #0xea
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L716	@cond_branch
	add	r3, r3, #0xe9
.L717:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	bcs	.L716	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L717	@cond_branch
.L716:
	cmp	r1, r2
	bne	.L714	@cond_branch
	ldr	r4, .L726
	ldr	r1, .L726+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L714	@cond_branch
	ldr	r0, .L726+0x8
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L714	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	ldr	r0, .L726+0xc
.L723:
	str	r0, [r4]
.L714:
	pop	{r4}
	pop	{r0}
	bx	r0
.L727:
	.align	2, 0
.L726:
	.word	Rfu
	.word	0x9e6
	.word	gSendCmd
	.word	LinkLeaderReadyToExitStandby
.Lfe68:
	.size	 Rfu_LinkStandby,.Lfe68-Rfu_LinkStandby
	.align	2, 0
	.globl	Rfu_SetLinkStandbyCallback
	.type	 Rfu_SetLinkStandbyCallback,function
	.thumb_func
Rfu_SetLinkStandbyCallback:
	push	{lr}
	ldr	r1, .L730
	ldr	r2, [r1]
	cmp	r2, #0
	bne	.L729	@cond_branch
	ldr	r0, .L730+0x4
	str	r0, [r1]
	add	r0, r1, #0
	add	r0, r0, #0xfe
	strh	r2, [r0]
.L729:
	pop	{r0}
	bx	r0
.L731:
	.align	2, 0
.L730:
	.word	Rfu
	.word	Rfu_LinkStandby
.Lfe69:
	.size	 Rfu_SetLinkStandbyCallback,.Lfe69-Rfu_SetLinkStandbyCallback
	.align	2, 0
	.globl	IsRfuSerialNumberValid
	.type	 IsRfuSerialNumberValid,function
	.thumb_func
IsRfuSerialNumberValid:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r1, .L740
	ldrh	r0, [r1]
	cmp	r0, r3
	beq	.L734	@cond_branch
	ldr	r4, .L740+0x4
	add	r2, r1, #0
.L736:
	ldrh	r0, [r2]
	cmp	r0, r4
	bne	.L735	@cond_branch
	mov	r0, #0x0
	b	.L739
.L741:
	.align	2, 0
.L740:
	.word	sAcceptedSerialNos
	.word	0xffff
.L735:
	add	r1, r1, #0x2
	add	r2, r2, #0x2
	ldrh	r0, [r1]
	cmp	r0, r3
	bne	.L736	@cond_branch
.L734:
	mov	r0, #0x1
.L739:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe70:
	.size	 IsRfuSerialNumberValid,.Lfe70-IsRfuSerialNumberValid
	.align	2, 0
	.globl	sub_801048C
	.type	 sub_801048C,function
	.thumb_func
sub_801048C:
	push	{lr}
	cmp	r0, #0
	beq	.L743	@cond_branch
	mov	r1, #0x96
	lsl	r1, r1, #0x2
	mov	r0, #0x1
	bl	rfu_LMAN_setLinkRecovery
	mov	r0, #0x0
	b	.L744
.L743:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	rfu_LMAN_setLinkRecovery
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L744:
	pop	{r1}
	bx	r1
.Lfe71:
	.size	 sub_801048C,.Lfe71-sub_801048C
	.align	2, 0
	.globl	sub_80104B0
	.type	 sub_80104B0,function
	.thumb_func
sub_80104B0:
	push	{lr}
	ldr	r0, .L746
	ldr	r1, .L746+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	mov	r0, #0x0
	bl	rfu_LMAN_stopManager
	pop	{r0}
	bx	r0
.L747:
	.align	2, 0
.L746:
	.word	Rfu
	.word	0xcd9
.Lfe72:
	.size	 sub_80104B0,.Lfe72-sub_80104B0
	.align	2, 0
	.globl	Rfu_GetMultiplayerId
	.type	 Rfu_GetMultiplayerId,function
	.thumb_func
Rfu_GetMultiplayerId:
	push	{lr}
	ldr	r1, .L751
	ldrb	r0, [r1, #0xc]
	cmp	r0, #0x1
	beq	.L749	@cond_branch
	ldr	r2, .L751+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	b	.L750
.L752:
	.align	2, 0
.L751:
	.word	Rfu
	.word	0xcce
.L749:
	mov	r0, #0x0
.L750:
	pop	{r1}
	bx	r1
.Lfe73:
	.size	 Rfu_GetMultiplayerId,.Lfe73-Rfu_GetMultiplayerId
	.align	2, 0
	.globl	Rfu_GetLinkPlayerCount
	.type	 Rfu_GetLinkPlayerCount,function
	.thumb_func
Rfu_GetLinkPlayerCount:
	ldr	r0, .L754
	ldrb	r0, [r0, #0xd]
	bx	lr
.L755:
	.align	2, 0
.L754:
	.word	Rfu
.Lfe74:
	.size	 Rfu_GetLinkPlayerCount,.Lfe74-Rfu_GetLinkPlayerCount
	.align	2, 0
	.globl	IsLinkRfuTaskFinished
	.type	 IsLinkRfuTaskFinished,function
	.thumb_func
IsLinkRfuTaskFinished:
	push	{lr}
	ldr	r2, .L760
	add	r0, r2, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L757	@cond_branch
	mov	r0, #0x0
	b	.L759
.L761:
	.align	2, 0
.L760:
	.word	Rfu
.L757:
	mov	r1, #0x0
	ldr	r0, [r2]
	cmp	r0, #0
	bne	.L758	@cond_branch
	mov	r1, #0x1
.L758:
	add	r0, r1, #0
.L759:
	pop	{r1}
	bx	r1
.Lfe75:
	.size	 IsLinkRfuTaskFinished,.Lfe75-IsLinkRfuTaskFinished
	.align	2, 0
	.type	 CallRfuFunc,function
	.thumb_func
CallRfuFunc:
	push	{lr}
	ldr	r0, .L764
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L763	@cond_branch
	bl	_call_via_r0
.L763:
	pop	{r0}
	bx	r0
.L765:
	.align	2, 0
.L764:
	.word	Rfu
.Lfe76:
	.size	 CallRfuFunc,.Lfe76-CallRfuFunc
	.align	2, 0
	.type	 CheckForLeavingGroupMembers,function
	.thumb_func
CheckForLeavingGroupMembers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r7, #0x0
	mov	r5, #0x0
	ldr	r6, .L778
	ldr	r0, .L778+0x4
	add	r0, r0, r6
	mov	r8, r0
.L770:
	ldr	r1, .L778+0x8
	add	r0, r6, r1
	add	r4, r5, r0
	ldrb	r0, [r4]
	sub	r0, r0, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L769	@cond_branch
	ldr	r1, .L778+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x46
	beq	.L773	@cond_branch
	cmp	r0, #0x48
	bne	.L772	@cond_branch
.L773:
	ldr	r2, .L778+0x10
	add	r0, r6, r2
	add	r1, r5, r0
	ldrb	r0, [r1]
	cmp	r0, #0x8
	bne	.L769	@cond_branch
	mov	r0, #0x9
	strb	r0, [r4]
	mov	r0, #0xa
	strb	r0, [r1]
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x8
	bl	rfu_clearSlot
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r5
	lsr	r0, r0, #0x18
	mov	r1, #0x8
	add	r2, r4, #0
	mov	r3, #0x1
	bl	rfu_NI_setSendData
	mov	r7, #0x1
	b	.L769
.L779:
	.align	2, 0
.L778:
	.word	Rfu
	.word	0xc3e
	.word	0xcd1
	.word	gRfuSlotStatusNI
	.word	0xcd5
.L772:
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x47
	bne	.L769	@cond_branch
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x8
	bl	rfu_clearSlot
.L769:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L770	@cond_branch
	add	r0, r7, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe77:
	.size	 CheckForLeavingGroupMembers,.Lfe77-CheckForLeavingGroupMembers
	.align	2, 0
	.globl	sub_80105EC
	.type	 sub_80105EC,function
	.thumb_func
sub_80105EC:
	push	{r4, r5, r6, lr}
	mov	r3, #0x0
	mov	r1, #0x0
	ldr	r5, .L795
	mov	r6, #0x1
	mov	r4, #0x0
.L784:
	add	r2, r1, r5
	ldrb	r0, [r2]
	cmp	r0, #0xb
	bne	.L783	@cond_branch
	add	r0, r6, #0
	lsl	r0, r0, r1
	orr	r3, r3, r0
	lsl	r0, r3, #0x18
	lsr	r3, r0, #0x18
	strb	r4, [r2]
.L783:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L784	@cond_branch
	cmp	r3, #0
	beq	.L787	@cond_branch
	add	r0, r3, #0
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
.L787:
	mov	r1, #0x0
	ldr	r2, .L795
.L791:
	add	r0, r1, r2
	ldrb	r0, [r0]
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L790	@cond_branch
	mov	r0, #0x1
	b	.L794
.L796:
	.align	2, 0
.L795:
	.word	Rfu+0xcd5
.L790:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L791	@cond_branch
	mov	r0, #0x0
.L794:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe78:
	.size	 sub_80105EC,.Lfe78-sub_80105EC
	.align	2, 0
	.globl	HasTrainerLeftPartnersList
	.type	 HasTrainerLeftPartnersList,function
	.thumb_func
HasTrainerLeftPartnersList:
	push	{lr}
	add	r2, r0, #0
	add	r0, r1, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r1, r2, #0
	bl	GetPartnerIndexByNameAndTrainerID
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L799	@cond_branch
	ldr	r0, .L801
	ldr	r2, .L801+0x4
	add	r0, r0, r2
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, #0x9
	beq	.L799	@cond_branch
	mov	r0, #0x0
	b	.L800
.L802:
	.align	2, 0
.L801:
	.word	Rfu
	.word	0xcd1
.L799:
	mov	r0, #0x1
.L800:
	pop	{r1}
	bx	r1
.Lfe79:
	.size	 HasTrainerLeftPartnersList,.Lfe79-HasTrainerLeftPartnersList
	.align	2, 0
	.globl	SendRfuStatusToPartner
	.type	 SendRfuStatusToPartner,function
	.thumb_func
SendRfuStatusToPartner:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r0, r2, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	GetPartnerIndexByNameAndTrainerID
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L804
	ldr	r0, .L804+0x4
	add	r5, r5, r0
	add	r5, r4, r5
	strb	r6, [r5]
	mov	r0, #0x4
	add	r1, r4, #0
	bl	rfu_clearSlot
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r4
	lsr	r0, r0, #0x18
	mov	r1, #0x8
	add	r2, r5, #0
	mov	r3, #0x1
	bl	rfu_NI_setSendData
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L805:
	.align	2, 0
.L804:
	.word	Rfu
	.word	0xcd1
.Lfe80:
	.size	 SendRfuStatusToPartner,.Lfe80-SendRfuStatusToPartner
	.align	2, 0
	.globl	SendLeaveGroupNotice
	.type	 SendLeaveGroupNotice,function
	.thumb_func
SendLeaveGroupNotice:
	push	{r4, r5, lr}
	ldr	r4, .L807
	ldr	r0, .L807+0x4
	add	r5, r4, r0
	mov	r0, #0x8
	strb	r0, [r5]
	ldr	r0, .L807+0x8
	add	r4, r4, r0
	ldrb	r1, [r4]
	mov	r0, #0x4
	bl	rfu_clearSlot
	ldrb	r1, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r1
	lsr	r0, r0, #0x18
	mov	r1, #0x8
	add	r2, r5, #0
	mov	r3, #0x1
	bl	rfu_NI_setSendData
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L808:
	.align	2, 0
.L807:
	.word	Rfu
	.word	0xc85
	.word	0xc3e
.Lfe81:
	.size	 SendLeaveGroupNotice,.Lfe81-SendLeaveGroupNotice
	.align	2, 0
	.globl	WaitSendRfuStatusToPartner
	.type	 WaitSendRfuStatusToPartner,function
	.thumb_func
WaitSendRfuStatusToPartner:
	push	{lr}
	add	r2, r0, #0
	add	r0, r1, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r1, r2, #0
	bl	GetPartnerIndexByNameAndTrainerID
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L810	@cond_branch
	mov	r0, #0x2
	b	.L812
.L810:
	ldr	r1, .L813
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L811	@cond_branch
	mov	r0, #0x0
	b	.L812
.L814:
	.align	2, 0
.L813:
	.word	gRfuSlotStatusNI
.L811:
	mov	r0, #0x1
.L812:
	pop	{r1}
	bx	r1
.Lfe82:
	.size	 WaitSendRfuStatusToPartner,.Lfe82-WaitSendRfuStatusToPartner
	.align	2, 0
	.type	 UpdateChildStatuses,function
	.thumb_func
UpdateChildStatuses:
	push	{r4, r5, lr}
	bl	CheckForLeavingGroupMembers
	mov	r4, #0x0
	ldr	r0, .L823
	ldr	r1, .L823+0x4
	add	r5, r0, r1
.L819:
	ldr	r1, .L823+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0]
	sub	r0, r0, #0x26
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L818	@cond_branch
	add	r1, r4, r5
	ldrb	r0, [r1]
	cmp	r0, #0xa
	bne	.L821	@cond_branch
	mov	r0, #0xb
	strb	r0, [r1]
.L821:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x4
	bl	rfu_clearSlot
.L818:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L819	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L824:
	.align	2, 0
.L823:
	.word	Rfu
	.word	0xcd5
	.word	gRfuSlotStatusNI
.Lfe83:
	.size	 UpdateChildStatuses,.Lfe83-UpdateChildStatuses
	.align	2, 0
	.type	 sub_80107A0,function
	.thumb_func
sub_80107A0:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r1, .L833
	ldr	r2, .L833+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.L826	@cond_branch
	ldr	r2, .L833+0x8
	ldr	r0, .L833+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0x26
	beq	.L828	@cond_branch
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0x27
	bne	.L826	@cond_branch
.L828:
	ldrb	r1, [r1]
	mov	r0, #0x4
	bl	rfu_clearSlot
.L826:
	ldr	r2, .L833+0x8
	ldr	r5, .L833
	ldr	r0, .L833+0xc
	add	r1, r5, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x46
	beq	.L830	@cond_branch
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x48
	bne	.L829	@cond_branch
.L830:
	ldrb	r1, [r1]
	mov	r0, #0x8
	bl	rfu_clearSlot
	ldr	r2, .L833+0x10
	add	r4, r5, r2
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	RfuSetStatus
	ldrb	r4, [r4]
	b	.L831
.L834:
	.align	2, 0
.L833:
	.word	Rfu
	.word	0xc85
	.word	gRfuSlotStatusNI
	.word	0xc3e
	.word	0xc86
.L829:
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x47
	bne	.L831	@cond_branch
	ldrb	r1, [r1]
	mov	r0, #0x8
	bl	rfu_clearSlot
	mov	r4, #0x6
.L831:
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe84:
	.size	 sub_80107A0,.Lfe84-sub_80107A0
	.align	2, 0
	.type	 sub_801084C,function
	.thumb_func
sub_801084C:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L875
	add	r0, r5, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L836	@cond_branch
	ldr	r0, .L875+0x4
	add	r1, r5, r0
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r6, #0
	bl	DestroyTask
.L836:
	ldr	r2, .L875+0x8
	lsl	r1, r6, #0x2
	add	r0, r1, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	add	r7, r1, #0
	cmp	r0, #0x3
	beq	.L849	@cond_branch
	cmp	r0, #0x3
	bgt	.L871	@cond_branch
	cmp	r0, #0x1
	beq	.L840	@cond_branch
	cmp	r0, #0x1
	bgt	.L847	@cond_branch
	cmp	r0, #0
	beq	.L838	@cond_branch
	b	.L837
.L876:
	.align	2, 0
.L875:
	.word	Rfu
	.word	0xce8
	.word	gTasks
.L871:
	cmp	r0, #0x5
	beq	.L855	@cond_branch
	cmp	r0, #0x5
	blt	.L853	@cond_branch
	cmp	r0, #0x6
	beq	.L861	@cond_branch
	cmp	r0, #0x65
	beq	.L845	@cond_branch
	b	.L837
.L838:
	bl	AreNoPlayersReceiving
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB6437
	b	.L837	@long jump
.LCB6437:
	bl	ResetBlockReceivedFlags
	bl	sub_800B348
	b	.L872
.L840:
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x1
	bne	.L873	@cond_branch
	ldr	r0, .L877
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L842	@cond_branch
	mov	r0, #0xf0
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	b	.L843
.L878:
	.align	2, 0
.L877:
	.word	gReceivedRemoteLinkPlayers
.L842:
	mov	r0, #0xee
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
.L843:
	ldr	r0, .L879
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x65
	strh	r0, [r1, #0x8]
	b	.L837
.L880:
	.align	2, 0
.L879:
	.word	gTasks
.L845:
	ldr	r0, .L881
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L837	@cond_branch
.L873:
	mov	r0, #0x2
	strh	r0, [r4, #0x8]
	b	.L837
.L882:
	.align	2, 0
.L881:
	.word	gSendCmd
.L847:
	ldrb	r0, [r5, #0xd]
	b	.L874
.L849:
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x1
	bne	.L872	@cond_branch
	bl	AreNoPlayersReceiving
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L837	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x5a
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0xa1
	lsl	r0, r0, #0x8
	bl	RfuPrepareSendBuffer
	b	.L872
.L853:
	bl	sub_800FC88
	lsl	r0, r0, #0x18
.L874:
	cmp	r0, #0
	beq	.L837	@cond_branch
.L872:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L837
.L855:
	mov	r4, #0x0
	ldrb	r0, [r5, #0xd]
	cmp	r4, r0
	bge	.L857	@cond_branch
.L859:
	add	r0, r4, #0
	bl	LinkPlayerFromBlock
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	Rfu_ResetBlockReceivedFlag
	add	r4, r4, #0x1
	ldrb	r2, [r5, #0xd]
	cmp	r4, r2
	blt	.L859	@cond_branch
.L857:
	ldr	r0, .L883
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L837
.L884:
	.align	2, 0
.L883:
	.word	gTasks
.L861:
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r1, .L885
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L885+0x4
	add	r1, r5, r0
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r1, #0x96
	lsl	r1, r1, #0x2
	mov	r0, #0x1
	bl	rfu_LMAN_setLinkRecovery
	ldr	r2, .L885+0x8
	add	r1, r5, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L837	@cond_branch
	mov	r4, #0x0
	add	r2, r1, #0
	mov	r3, #0x1
	ldr	r0, .L885+0xc
	add	r5, r5, r0
.L866:
	ldrb	r0, [r2]
	asr	r0, r0, r4
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L865	@cond_branch
	add	r0, r3, #0
	lsl	r0, r0, r4
	strb	r0, [r5]
	ldrb	r1, [r2]
	eor	r0, r0, r1
	strb	r0, [r2]
.L865:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L866	@cond_branch
.L837:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L886:
	.align	2, 0
.L885:
	.word	gReceivedRemoteLinkPlayers
	.word	0xce8
	.word	0xce6
	.word	0xce5
.Lfe85:
	.size	 sub_801084C,.Lfe85-sub_801084C
	.align	2, 0
	.type	 ClearSelectedLinkPlayerIds,function
	.thumb_func
ClearSelectedLinkPlayerIds:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r1, #0x0
	mov	r5, #0x1
	ldr	r4, .L894
	mov	r3, #0x0
.L891:
	add	r0, r2, #0
	asr	r0, r0, r1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L890	@cond_branch
	add	r0, r1, r4
	strb	r3, [r0]
.L890:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L891	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L895:
	.align	2, 0
.L894:
	.word	Rfu+0xcde
.Lfe86:
	.size	 ClearSelectedLinkPlayerIds,.Lfe86-ClearSelectedLinkPlayerIds
	.align	2, 0
	.type	 ReceiveRfuLinkPlayers,function
	.thumb_func
ReceiveRfuLinkPlayers:
	push	{r4, r5, r6, r7, lr}
	add	r2, r0, #0
	ldr	r1, .L907
	ldrb	r0, [r2, #0xf]
	strb	r0, [r1, #0xd]
	mov	r4, #0x0
	ldr	r0, .L907+0x4
	add	r5, r1, r0
	add	r3, r2, #0
	add	r3, r3, #0x10
.L900:
	add	r0, r4, r5
	add	r1, r3, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L900	@cond_branch
	add	r6, r2, #0
	ldr	r5, .L907+0x8
	mov	r4, #0x4
.L905:
	add	r0, r5, #0
	add	r1, r6, #0
	add	r1, r1, #0x14
	ldmia	r1!, {r2, r3, r7}
	stmia	r0!, {r2, r3, r7}
	ldmia	r1!, {r2, r3, r7}
	stmia	r0!, {r2, r3, r7}
	ldr	r1, [r1]
	str	r1, [r0]
	add	r0, r5, #0
	bl	sub_800B524
	add	r6, r6, #0x1c
	add	r5, r5, #0x1c
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L905	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L908:
	.align	2, 0
.L907:
	.word	Rfu
	.word	0xcde
	.word	gLinkPlayers
.Lfe87:
	.size	 ReceiveRfuLinkPlayers,.Lfe87-ReceiveRfuLinkPlayers
	.align	2, 0
	.type	 ValidateAndReceivePokemonSioInfo,function
	.thumb_func
ValidateAndReceivePokemonSioInfo:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldr	r0, .L911
	add	r1, r4, #0
	bl	strcmp
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L910	@cond_branch
	add	r0, r4, #0
	bl	ReceiveRfuLinkPlayers
	mov	r0, sp
	strh	r5, [r0]
	ldr	r2, .L911+0x4
	add	r1, r4, #0
	bl	CpuSet
	mov	r0, #0x0
	bl	ResetBlockReceivedFlag
.L910:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L912:
	.align	2, 0
.L911:
	.word	sASCII_PokemonSioInfo
	.word	0x100007e
.Lfe88:
	.size	 ValidateAndReceivePokemonSioInfo,.Lfe88-ValidateAndReceivePokemonSioInfo
	.align	2, 0
	.type	 Task_ExchangeLinkPlayers,function
	.thumb_func
Task_ExchangeLinkPlayers:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L949
	ldr	r2, .L949+0x4
	ldr	r1, .L949+0x8
	add	r0, r3, r1
	ldrb	r1, [r0]
	add	r1, r1, r2
	ldr	r2, .L949+0xc
	add	r0, r3, r2
	ldrb	r1, [r1]
	add	r0, r0, r1
	ldrb	r4, [r0]
	add	r0, r3, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L914	@cond_branch
	ldr	r5, .L949+0x10
	add	r1, r3, r5
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r6, #0
	bl	DestroyTask
.L914:
	ldr	r0, .L949+0x14
	lsl	r2, r6, #0x2
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r3, #0x8
	ldrsh	r1, [r1, r3]
	add	r3, r0, #0
	add	r7, r2, #0
	cmp	r1, #0x5
	bls	.LCB6871
	b	.L915	@long jump
.LCB6871:
	lsl	r0, r1, #0x2
	ldr	r1, .L949+0x18
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L950:
	.align	2, 0
.L949:
	.word	Rfu
	.word	sUnknown_082ED68C
	.word	0xce9
	.word	0xcde
	.word	0xce8
	.word	gTasks
	.word	.L944
	.align	2, 0
	.align	2, 0
.L944:
	.word	.L916
	.word	.L918
	.word	.L920
	.word	.L922
	.word	.L928
	.word	.L935
.L916:
	ldr	r0, .L951
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.LCB6901
	b	.L915	@long jump
.LCB6901:
	add	r0, r4, #0
	bl	ResetBlockReceivedFlag
	mov	r0, #0xf0
	lsl	r0, r0, #0x7
	bl	RfuPrepareSendBuffer
	b	.L947
.L952:
	.align	2, 0
.L951:
	.word	gSendCmd
.L918:
	ldr	r0, .L953
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.LCB6924
	b	.L915	@long jump
.LCB6924:
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	b	.L948
.L954:
	.align	2, 0
.L953:
	.word	gSendCmd
.L920:
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	asr	r0, r0, r4
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB6947
	b	.L915	@long jump
.LCB6947:
	add	r0, r4, #0
	bl	ResetBlockReceivedFlag
	lsl	r2, r4, #0x8
	ldr	r0, .L955
	add	r2, r2, r0
	ldr	r1, .L955+0x4
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r1, r0, #0
	add	r2, r2, #0x10
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldr	r2, [r2]
	str	r2, [r1]
	bl	sub_800B524
	b	.L947
.L956:
	.align	2, 0
.L955:
	.word	gBlockRecvBuffer
	.word	gLinkPlayers
.L922:
	ldr	r5, .L957
	add	r1, r5, #0
	ldr	r0, .L957+0x4
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	ldrh	r2, [r0]
	strh	r2, [r1]
	ldrb	r0, [r0, #0x2]
	strb	r0, [r1, #0x2]
	ldr	r1, .L957+0x8
	ldrb	r0, [r1, #0xd]
	strb	r0, [r5, #0xf]
	mov	r2, #0x0
	add	r4, r5, #0
	add	r4, r4, #0x10
	ldr	r0, .L957+0xc
	add	r3, r1, r0
.L926:
	add	r0, r4, r2
	add	r1, r2, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L926	@cond_branch
	ldr	r1, .L957+0x10
	add	r0, r5, #0
	add	r0, r0, #0x14
	mov	r2, #0x8c
	bl	memcpy
	ldr	r0, .L957+0x14
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
.L928:
	ldr	r5, .L957
	ldr	r1, .L957+0x8
	ldrb	r0, [r1, #0xd]
	strb	r0, [r5, #0xf]
	mov	r2, #0x0
	ldr	r3, .L957+0x10
	mov	ip, r3
	add	r4, r5, #0
	add	r4, r4, #0x10
	ldr	r0, .L957+0xc
	add	r3, r1, r0
.L932:
	add	r0, r4, r2
	add	r1, r2, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L932	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x14
	mov	r1, ip
	mov	r2, #0x8c
	bl	memcpy
	ldr	r1, .L957
	mov	r0, #0x0
	mov	r2, #0xa0
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L915	@cond_branch
.L947:
	ldr	r0, .L957+0x14
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
.L948:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L915
.L958:
	.align	2, 0
.L957:
	.word	gBlockSendBuffer
	.word	sASCII_PokemonSioInfo
	.word	Rfu
	.word	0xcde
	.word	gLinkPlayers
	.word	gTasks
.L946:
	add	r0, r3, #0
	lsl	r0, r0, r2
	ldr	r2, .L959
	add	r1, r5, r2
	strb	r0, [r1]
	ldrb	r1, [r4]
	eor	r0, r0, r1
	strb	r0, [r4]
	ldr	r4, .L959+0x4
	add	r0, r5, r4
	strb	r3, [r0]
	b	.L937
.L960:
	.align	2, 0
.L959:
	.word	0xce5
	.word	0xce8
.L935:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L915	@cond_branch
	bl	GetBlockReceivedStatus
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L915	@cond_branch
	mov	r0, sp
	mov	r4, #0x0
	strh	r4, [r0]
	ldr	r1, .L961
	ldr	r2, .L961+0x4
	bl	CpuSet
	mov	r0, #0x0
	bl	ResetBlockReceivedFlag
	ldr	r1, .L961+0x8
	ldr	r5, .L961+0xc
	add	r0, r1, r5
	strb	r4, [r0]
	ldr	r0, .L961+0x10
	add	r3, r1, r0
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L937	@cond_branch
	mov	r2, #0x0
	add	r5, r1, #0
	add	r4, r3, #0
	ldrb	r1, [r4]
	mov	r3, #0x1
.L941:
	add	r0, r1, #0
	asr	r0, r0, r2
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L946	@cond_branch
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L941	@cond_branch
.L937:
	add	r0, r6, #0
	bl	DestroyTask
.L915:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L962:
	.align	2, 0
.L961:
	.word	gBlockRecvBuffer
	.word	0x100007e
	.word	Rfu
	.word	0xce8
	.word	0xce6
.Lfe89:
	.size	 Task_ExchangeLinkPlayers,.Lfe89-Task_ExchangeLinkPlayers
	.align	2, 0
	.type	 sub_8010D0C,function
	.thumb_func
sub_8010D0C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L976
	add	r0, r6, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L964	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
.L964:
	ldr	r1, .L976+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L968	@cond_branch
	cmp	r0, #0x1
	bgt	.L974	@cond_branch
	cmp	r0, #0
	beq	.L966	@cond_branch
	b	.L965
.L977:
	.align	2, 0
.L976:
	.word	Rfu
	.word	gTasks
.L974:
	cmp	r0, #0x2
	beq	.L970	@cond_branch
	b	.L965
.L966:
	ldrb	r0, [r6, #0xd]
	cmp	r0, #0
	beq	.L965	@cond_branch
	bl	sub_800B348
	ldr	r1, .L978
	mov	r0, #0x0
	mov	r2, #0x3c
	bl	SendBlock
	b	.L975
.L979:
	.align	2, 0
.L978:
	.word	gBlockSendBuffer
.L968:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L965	@cond_branch
.L975:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L965
.L970:
	bl	GetBlockReceivedStatus
	mov	r4, #0x1
	add	r1, r4, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L965	@cond_branch
	ldr	r0, .L980
	bl	ReceiveRfuLinkPlayers
	mov	r0, #0x0
	bl	ResetBlockReceivedFlag
	ldr	r0, .L980+0x4
	strb	r4, [r0]
	add	r0, r5, #0
	bl	DestroyTask
.L965:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L981:
	.align	2, 0
.L980:
	.word	gBlockRecvBuffer
	.word	gReceivedRemoteLinkPlayers
.Lfe90:
	.size	 sub_8010D0C,.Lfe90-sub_8010D0C
	.align	2, 0
	.type	 RfuCheckErrorStatus,function
	.thumb_func
RfuCheckErrorStatus:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L991
	add	r1, r0, #0
	add	r1, r1, #0xee
	ldrb	r1, [r1]
	add	r3, r0, #0
	cmp	r1, #0x1
	bne	.L983	@cond_branch
	ldr	r2, .L991+0x4
	ldrb	r0, [r2, #0x2]
	cmp	r0, #0
	bne	.L983	@cond_branch
	ldr	r0, .L991+0x8
	ldr	r1, [r0, #0x4]
	ldr	r0, .L991+0xc
	cmp	r1, r0
	beq	.L985	@cond_branch
	ldr	r0, [r2, #0x3c]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L984	@cond_branch
.L985:
	ldr	r1, .L991+0x10
	mov	r0, #0x2
	strb	r0, [r1]
.L984:
	ldr	r4, .L991+0x14
	add	r0, r4, #0
	bl	SetMainCallback2
	ldr	r0, .L991+0x8
	str	r4, [r0, #0x8]
	ldr	r5, .L991
	ldrh	r0, [r5, #0xa]
	lsl	r4, r0, #0x10
	ldrh	r0, [r5, #0x10]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrh	r0, [r5, #0x12]
	orr	r4, r4, r0
	ldr	r1, .L991+0x18
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r7, r0, #0
	ldr	r1, .L991+0x1c
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r6, r0, #0
	bl	RfuGetStatus
	mov	r3, #0x0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L986	@cond_branch
	mov	r3, #0x1
.L986:
	add	r0, r4, #0
	add	r1, r7, #0
	add	r2, r6, #0
	bl	BufferLinkErrorInfo
	add	r0, r5, #0
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	mov	r1, #0x2
	strb	r1, [r0]
	bl	CloseLink
	b	.L987
.L992:
	.align	2, 0
.L991:
	.word	Rfu
	.word	lman
	.word	gMain
	.word	c2_mystery_gift_e_reader_run
	.word	gWirelessCommType
	.word	CB2_LinkError
	.word	0x9e6
	.word	0xc1a
.L983:
	ldr	r1, .L993
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L989	@cond_branch
	ldr	r1, .L993+0x4
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L987	@cond_branch
.L989:
	ldr	r0, .L993+0x8
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L990	@cond_branch
	bl	rfu_LMAN_requestChangeAgbClockMaster
.L990:
	mov	r4, #0xe0
	lsl	r4, r4, #0x7
	mov	r0, #0x1
	add	r1, r4, #0
	bl	RfuSetStatus
	add	r0, r4, #0
	bl	GetLinkmanErrorParams
.L987:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L994:
	.align	2, 0
.L993:
	.word	0xc1b
	.word	0x9e7
	.word	lman
.Lfe91:
	.size	 RfuCheckErrorStatus,.Lfe91-RfuCheckErrorStatus
	.align	2, 0
	.type	 rfu_REQ_recvData_then_sendData,function
	.thumb_func
rfu_REQ_recvData_then_sendData:
	push	{lr}
	ldr	r0, .L997
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	bne	.L996	@cond_branch
	bl	rfu_REQ_recvData
	bl	rfu_waitREQComplete
	mov	r0, #0x0
	bl	rfu_LMAN_REQ_sendData
.L996:
	pop	{r0}
	bx	r0
.L998:
	.align	2, 0
.L997:
	.word	lman
.Lfe92:
	.size	 rfu_REQ_recvData_then_sendData,.Lfe92-rfu_REQ_recvData_then_sendData
	.align	2, 0
	.globl	sub_8010EC0
	.type	 sub_8010EC0,function
	.thumb_func
sub_8010EC0:
	push	{r4, r5, lr}
	mov	r5, #0x0
	ldr	r4, .L1008
	ldr	r1, .L1008+0x4
	add	r0, r4, r1
	strb	r5, [r0]
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	rfu_LMAN_manager_entity
	add	r0, r4, #0
	add	r0, r0, #0xef
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1000	@cond_branch
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	beq	.L1002	@cond_branch
	cmp	r0, #0x1
	bgt	.L1007	@cond_branch
	cmp	r0, #0
	beq	.L1003	@cond_branch
	b	.L1000
.L1009:
	.align	2, 0
.L1008:
	.word	Rfu
	.word	0xccd
.L1007:
	cmp	r0, #0x2
	beq	.L1004	@cond_branch
	b	.L1000
.L1002:
	bl	sub_800F0F8
	b	.L1000
.L1003:
	bl	RfuProcessEnqueuedRecvBlock
	add	r5, r0, #0
	b	.L1000
.L1004:
	bl	rfu_REQ_recvData_then_sendData
.L1000:
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe93:
	.size	 sub_8010EC0,.Lfe93-sub_8010EC0
	.align	2, 0
	.globl	sub_8010F1C
	.type	 sub_8010F1C,function
	.thumb_func
sub_8010F1C:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r1, .L1013
	add	r0, r1, #0
	add	r0, r0, #0xef
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1011	@cond_branch
	ldrb	r0, [r1, #0xc]
	cmp	r0, #0x1
	bne	.L1012	@cond_branch
	bl	sub_800F1E0
	add	r4, r0, #0
.L1012:
	bl	RfuCheckErrorStatus
.L1011:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L1014:
	.align	2, 0
.L1013:
	.word	Rfu
.Lfe94:
	.size	 sub_8010F1C,.Lfe94-sub_8010F1C
	.align	2, 0
	.type	 CopyPlayerNameToUnameBuffer,function
	.thumb_func
CopyPlayerNameToUnameBuffer:
	push	{lr}
	ldr	r0, .L1016
	ldr	r1, .L1016+0x4
	ldr	r1, [r1]
	bl	StringCopy
	pop	{r0}
	bx	r0
.L1017:
	.align	2, 0
.L1016:
	.word	gHostRFUtgtUnameBuffer
	.word	gSaveBlock2Ptr
.Lfe95:
	.size	 CopyPlayerNameToUnameBuffer,.Lfe95-CopyPlayerNameToUnameBuffer
	.align	2, 0
	.globl	ClearAndInitHostRFUtgtGname
	.type	 ClearAndInitHostRFUtgtGname,function
	.thumb_func
ClearAndInitHostRFUtgtGname:
	push	{r4, lr}
	ldr	r4, .L1019
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0xd
	bl	memset
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	InitHostRFUtgtGname
	pop	{r4}
	pop	{r0}
	bx	r0
.L1020:
	.align	2, 0
.L1019:
	.word	gHostRFUtgtGnameBuffer
.Lfe96:
	.size	 ClearAndInitHostRFUtgtGname,.Lfe96-ClearAndInitHostRFUtgtGname
	.align	2, 0
	.globl	SetHostRFUtgtGname
	.type	 SetHostRFUtgtGname,function
	.thumb_func
SetHostRFUtgtGname:
	push	{r4, lr}
	add	r4, r0, #0
	add	r3, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L1022
	add	r1, r4, #0
	bl	InitHostRFUtgtGname
	pop	{r4}
	pop	{r0}
	bx	r0
.L1023:
	.align	2, 0
.L1022:
	.word	gHostRFUtgtGnameBuffer
.Lfe97:
	.size	 SetHostRFUtgtGname,.Lfe97-SetHostRFUtgtGname
	.align	2, 0
	.globl	SetGnameBufferWonderFlags
	.type	 SetGnameBufferWonderFlags,function
	.thumb_func
SetGnameBufferWonderFlags:
	push	{r4, r5, lr}
	ldr	r5, .L1025
	mov	r4, #0x1
	and	r0, r0, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r5]
	mov	r2, #0x11
	neg	r2, r2
	and	r2, r2, r3
	orr	r2, r2, r0
	and	r1, r1, r4
	lsl	r1, r1, #0x5
	mov	r0, #0x21
	neg	r0, r0
	and	r2, r2, r0
	orr	r2, r2, r1
	strb	r2, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1026:
	.align	2, 0
.L1025:
	.word	gHostRFUtgtGnameBuffer
.Lfe98:
	.size	 SetGnameBufferWonderFlags,.Lfe98-SetGnameBufferWonderFlags
	.align	2, 0
	.globl	SetTradeBoardRegisteredMonInfo
	.type	 SetTradeBoardRegisteredMonInfo,function
	.thumb_func
SetTradeBoardRegisteredMonInfo:
	push	{r4, r5, lr}
	ldr	r5, .L1028
	mov	r3, #0x3f
	and	r0, r0, r3
	ldrb	r4, [r5, #0xc]
	mov	r3, #0x40
	neg	r3, r3
	and	r3, r3, r4
	orr	r3, r3, r0
	strb	r3, [r5, #0xc]
	strh	r1, [r5, #0x8]
	lsl	r2, r2, #0x1
	ldrb	r1, [r5, #0xb]
	mov	r0, #0x1
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0xb]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1029:
	.align	2, 0
.L1028:
	.word	gHostRFUtgtGnameBuffer
.Lfe99:
	.size	 SetTradeBoardRegisteredMonInfo,.Lfe99-SetTradeBoardRegisteredMonInfo
	.align	2, 0
	.globl	sub_801100C
	.type	 sub_801100C,function
	.thumb_func
sub_801100C:
	push	{r4, lr}
	mov	r4, #0x80
	ldr	r3, .L1031
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r0, r1, r3
	ldrb	r2, [r0, #0x13]
	lsl	r2, r2, #0x3
	orr	r2, r2, r4
	add	r3, r3, #0x4
	add	r1, r1, r3
	ldr	r0, [r1]
	mov	r1, #0x7
	and	r0, r0, r1
	orr	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.L1032:
	.align	2, 0
.L1031:
	.word	gLinkPlayers
.Lfe100:
	.size	 sub_801100C,.Lfe100-sub_801100C
	.align	2, 0
	.globl	sub_801103C
	.type	 sub_801103C,function
	.thumb_func
sub_801103C:
	push	{r4, r5, lr}
	ldr	r5, .L1039
	mov	r4, #0x1
	b	.L1034
.L1040:
	.align	2, 0
.L1039:
	.word	gHostRFUtgtGnameBuffer
.L1037:
	add	r0, r4, #0
	bl	sub_801100C
	add	r1, r5, r4
	strb	r0, [r1, #0x3]
	add	r4, r4, #0x1
.L1034:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	blt	.L1037	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 sub_801103C,.Lfe101-sub_801103C
	.align	2, 0
	.globl	UpdateGameData_GroupLockedIn
	.type	 UpdateGameData_GroupLockedIn,function
	.thumb_func
UpdateGameData_GroupLockedIn:
	push	{lr}
	lsl	r0, r0, #0x18
	ldr	r2, .L1042
	lsr	r0, r0, #0x11
	ldrb	r3, [r2, #0xa]
	mov	r1, #0x7f
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0xa]
	ldr	r3, .L1042+0x4
	mov	r0, #0x0
	mov	r1, #0x2
	bl	rfu_REQ_configGameData
	pop	{r0}
	bx	r0
.L1043:
	.align	2, 0
.L1042:
	.word	gHostRFUtgtGnameBuffer
	.word	gHostRFUtgtUnameBuffer
.Lfe102:
	.size	 UpdateGameData_GroupLockedIn,.Lfe102-UpdateGameData_GroupLockedIn
	.align	2, 0
	.globl	UpdateGameData_SetActivity
	.type	 UpdateGameData_SetActivity,function
	.thumb_func
UpdateGameData_SetActivity:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1045	@cond_branch
	bl	SetHostRFUtgtGname
.L1045:
	ldr	r2, .L1046
	ldr	r3, .L1046+0x4
	mov	r0, #0x0
	mov	r1, #0x2
	bl	rfu_REQ_configGameData
	pop	{r0}
	bx	r0
.L1047:
	.align	2, 0
.L1046:
	.word	gHostRFUtgtGnameBuffer
	.word	gHostRFUtgtUnameBuffer
.Lfe103:
	.size	 UpdateGameData_SetActivity,.Lfe103-UpdateGameData_SetActivity
	.align	2, 0
	.globl	sub_80110B8
	.type	 sub_80110B8,function
	.thumb_func
sub_80110B8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r0
	bl	GetHostRFUtgtGname
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x45
	bne	.L1049	@cond_branch
	mov	r5, #0x0
	mov	r7, #0x0
	ldr	r3, .L1057
	ldr	r1, .L1057+0x4
	add	r0, r3, r1
	ldr	r2, .L1057+0x8
	add	r1, r3, r2
	ldrb	r2, [r0]
	ldrb	r0, [r1]
	add	r1, r0, #0
	eor	r1, r1, r2
	mov	r8, r1
	mov	r4, #0x0
	mov	r6, #0x1
	ldr	r2, .L1057+0xc
	mov	ip, r2
	ldr	r0, .L1057+0x10
	add	r0, r0, r3
	mov	sl, r0
	mov	r3, ip
	add	r3, r3, #0x4
.L1053:
	mov	r0, r8
	asr	r0, r0, r4
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L1052	@cond_branch
	mov	r1, sl
	add	r0, r4, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r2, ip
	add	r1, r0, r2
	ldrb	r1, [r1, #0x13]
	add	r2, r6, #0
	and	r2, r2, r1
	lsl	r2, r2, #0x3
	add	r0, r0, r3
	ldr	r1, [r0]
	mov	r0, #0x7
	and	r1, r1, r0
	mov	r0, #0x80
	orr	r1, r1, r0
	orr	r2, r2, r1
	lsl	r0, r5, #0x3
	lsl	r2, r2, r0
	orr	r7, r7, r2
	add	r5, r5, #0x1
	mov	r0, r9
	sub	r0, r0, #0x1
	cmp	r5, r0
	beq	.L1051	@cond_branch
.L1052:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1053	@cond_branch
.L1051:
	mov	r0, #0x45
	add	r1, r7, #0
	mov	r2, #0x0
	bl	UpdateGameData_SetActivity
.L1049:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1058:
	.align	2, 0
.L1057:
	.word	Rfu
	.word	0xce2
	.word	0xce3
	.word	gLinkPlayers
	.word	0xcde
.Lfe104:
	.size	 sub_80110B8,.Lfe104-sub_80110B8
	.align	2, 0
	.globl	GetLinkmanErrorParams
	.type	 GetLinkmanErrorParams,function
	.thumb_func
GetLinkmanErrorParams:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r2, .L1061
	add	r3, r2, #0
	add	r3, r3, #0xee
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L1060	@cond_branch
	ldr	r1, .L1061+0x4
	ldrh	r0, [r1, #0x14]
	strh	r0, [r2, #0x10]
	ldrh	r0, [r1, #0x16]
	strh	r0, [r2, #0x12]
	strh	r4, [r2, #0xa]
	ldrb	r0, [r3]
	mov	r0, #0x1
	strb	r0, [r3]
.L1060:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1062:
	.align	2, 0
.L1061:
	.word	Rfu
	.word	lman
.Lfe105:
	.size	 GetLinkmanErrorParams,.Lfe105-GetLinkmanErrorParams
	.align	2, 0
	.type	 ResetErrorState,function
	.thumb_func
ResetErrorState:
	ldr	r0, .L1064
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	mov	r1, #0x0
	strb	r1, [r0]
	bx	lr
.L1065:
	.align	2, 0
.L1064:
	.word	Rfu
.Lfe106:
	.size	 ResetErrorState,.Lfe106-ResetErrorState
	.align	2, 0
	.globl	sub_80111B0
	.type	 sub_80111B0,function
	.thumb_func
sub_80111B0:
	push	{lr}
	add	r2, r0, #0
	cmp	r2, #0
	bne	.L1067	@cond_branch
	ldr	r0, .L1069
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	strb	r2, [r0]
	b	.L1068
.L1070:
	.align	2, 0
.L1069:
	.word	Rfu
.L1067:
	ldr	r0, .L1071
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	mov	r1, #0x4
	strb	r1, [r0]
.L1068:
	pop	{r0}
	bx	r0
.L1072:
	.align	2, 0
.L1071:
	.word	Rfu
.Lfe107:
	.size	 sub_80111B0,.Lfe107-sub_80111B0
	.align	2, 0
	.type	 sub_80111DC,function
	.thumb_func
sub_80111DC:
	push	{lr}
	ldr	r0, .L1074
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	sub_8011E94
	ldr	r1, .L1074+0x4
	mov	r0, #0x0
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1075:
	.align	2, 0
.L1074:
	.word	lman
	.word	Rfu
.Lfe108:
	.size	 sub_80111DC,.Lfe108-sub_80111DC
	.align	2, 0
	.type	 sub_80111FC,function
	.thumb_func
sub_80111FC:
	ldr	r1, .L1077
	ldr	r0, .L1077+0x4
	str	r0, [r1]
	bx	lr
.L1078:
	.align	2, 0
.L1077:
	.word	Rfu
	.word	sub_80111DC
.Lfe109:
	.size	 sub_80111FC,.Lfe109-sub_80111FC
	.align	2, 0
	.type	 sub_801120C,function
	.thumb_func
sub_801120C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r6, #0x0
	cmp	r4, #0x32
	bne	.LCB8151
	b	.L1098	@long jump
.LCB8151:
	cmp	r4, #0x32
	bgt	.L1115	@cond_branch
	cmp	r4, #0x13
	bgt	.L1116	@cond_branch
	cmp	r4, #0x12
	blt	.LCB8157
	b	.L1080	@long jump
.LCB8157:
	cmp	r4, #0x10
	bne	.LCB8159
	b	.L1080	@long jump
.LCB8159:
	cmp	r4, #0x10
	bgt	.L1083	@cond_branch
	cmp	r4, #0
	beq	.L1081	@cond_branch
	b	.L1080
.L1116:
	cmp	r4, #0x30
	bne	.LCB8168
	b	.L1100	@long jump
.LCB8168:
	cmp	r4, #0x30
	ble	.LCB8170
	b	.L1097	@long jump
.LCB8170:
	cmp	r4, #0x14
	beq	.L1095	@cond_branch
	b	.L1080
.L1115:
	cmp	r4, #0x44
	bgt	.L1117	@cond_branch
	cmp	r4, #0x42
	blt	.LCB8179
	b	.L1080	@long jump
.LCB8179:
	cmp	r4, #0x33
	bne	.LCB8181
	b	.L1100	@long jump
.LCB8181:
	b	.L1080
.L1117:
	cmp	r4, #0xf3
	bne	.LCB8186
	b	.L1108	@long jump
.LCB8186:
	cmp	r4, #0xf3
	bgt	.L1118	@cond_branch
	cmp	r4, #0xf0
	bge	.LCB8190
	b	.L1080	@long jump
.LCB8190:
	b	.L1112
.L1118:
	cmp	r4, #0xff
	bne	.LCB8195
	b	.L1112	@long jump
.LCB8195:
	b	.L1080
.L1081:
	ldr	r1, .L1121
	mov	r0, #0x2
	strh	r0, [r1, #0x4]
	b	.L1080
.L1122:
	.align	2, 0
.L1121:
	.word	Rfu
.L1083:
	ldr	r0, .L1123
	ldrh	r0, [r0, #0x14]
	bl	sub_80115EC
	mov	r5, #0x0
	mov	r0, #0x1
	mov	r8, r0
	ldr	r1, .L1123+0x4
	mov	r9, r1
	ldr	r3, .L1123+0x8
	add	r3, r3, r9
	mov	sl, r3
	mov	r7, #0x7f
.L1087:
	ldr	r0, .L1123
	ldrh	r0, [r0, #0x14]
	asr	r0, r0, r5
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1086	@cond_branch
	ldr	r0, .L1123+0xc
	lsl	r1, r5, #0x5
	add	r1, r1, #0x14
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0, #0x10]
	add	r4, r7, #0
	and	r4, r4, r0
	bl	GetHostRFUtgtGname
	ldrb	r1, [r0, #0xa]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r4, r0
	bne	.L1089	@cond_branch
	ldr	r0, .L1123+0x10
	add	r0, r0, r9
	add	r0, r5, r0
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r3, sl
	add	r2, r5, r3
	strb	r1, [r2]
	mov	r0, #0x20
	add	r1, r5, #0
	mov	r3, #0x1
	bl	rfu_setRecvBuffer
	b	.L1086
.L1124:
	.align	2, 0
.L1123:
	.word	lman
	.word	Rfu
	.word	0xcd5
	.word	gRfuLinkStatus
	.word	0xcd1
.L1089:
	mov	r0, r8
	lsl	r0, r0, r5
	orr	r6, r6, r0
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L1086:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L1087	@cond_branch
	cmp	r6, #0
	beq	.L1080	@cond_branch
	add	r0, r6, #0
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	b	.L1080
.L1095:
	ldr	r4, .L1125
	ldr	r1, .L1125+0x4
	add	r0, r4, r1
	ldr	r1, .L1125+0x8
	ldrb	r2, [r0]
	ldrb	r0, [r1]
	cmp	r2, r0
	beq	.L1096	@cond_branch
	eor	r0, r0, r2
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
.L1096:
	mov	r0, #0x11
	strh	r0, [r4, #0x4]
	b	.L1080
.L1126:
	.align	2, 0
.L1125:
	.word	Rfu
	.word	0xce7
	.word	lman
.L1097:
	ldr	r0, .L1127
	add	r0, r0, #0xf0
	b	.L1119
.L1128:
	.align	2, 0
.L1127:
	.word	Rfu
.L1098:
	ldr	r0, .L1129
	add	r0, r0, #0xf0
	mov	r1, #0x3
	b	.L1120
.L1130:
	.align	2, 0
.L1129:
	.word	Rfu
.L1100:
	ldr	r1, .L1131
	add	r2, r1, #0
	add	r2, r2, #0xf0
	mov	r0, #0x4
	strb	r0, [r2]
	ldr	r3, .L1131+0x4
	add	r1, r1, r3
	ldr	r0, .L1131+0x8
	ldrb	r2, [r0, #0x14]
	ldrb	r0, [r1]
	add	r3, r0, #0
	bic	r3, r3, r2
	add	r2, r3, #0
	strb	r2, [r1]
	ldr	r0, .L1131+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1101	@cond_branch
	cmp	r2, #0
	bne	.L1102	@cond_branch
	add	r0, r4, #0
	bl	GetLinkmanErrorParams
	b	.L1101
.L1132:
	.align	2, 0
.L1131:
	.word	Rfu
	.word	0xce2
	.word	lman
	.word	gReceivedRemoteLinkPlayers
.L1102:
	bl	sub_80111FC
.L1101:
	mov	r0, #0x2
	add	r1, r4, #0
	bl	RfuSetStatus
	b	.L1080
.L1108:
	mov	r0, #0x1
	mov	r1, #0xf3
	bl	RfuSetStatus
	mov	r0, #0xf3
	bl	GetLinkmanErrorParams
	ldr	r0, .L1133
	add	r0, r0, #0xef
	b	.L1119
.L1134:
	.align	2, 0
.L1133:
	.word	Rfu
.L1112:
	add	r0, r4, #0
	bl	GetLinkmanErrorParams
	mov	r0, #0x1
	add	r1, r4, #0
	bl	RfuSetStatus
	ldr	r0, .L1135
	ldr	r1, .L1135+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
.L1119:
	mov	r1, #0x1
.L1120:
	strb	r1, [r0]
.L1080:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1136:
	.align	2, 0
.L1135:
	.word	Rfu
	.word	0xcdb
.Lfe110:
	.size	 sub_801120C,.Lfe110-sub_801120C
	.align	2, 0
	.globl	sub_8011404
	.type	 sub_8011404,function
	.thumb_func
sub_8011404:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x31
	bne	.LCB8475
	b	.L1152	@long jump
.LCB8475:
	cmp	r4, #0x31
	bgt	.L1165	@cond_branch
	cmp	r4, #0x22
	beq	.L1142	@cond_branch
	cmp	r4, #0x22
	bgt	.L1166	@cond_branch
	cmp	r4, #0x20
	beq	.L1140	@cond_branch
	cmp	r4, #0x20
	ble	.LCB8485
	b	.L1138	@long jump
.LCB8485:
	cmp	r4, #0
	beq	.L1139	@cond_branch
	b	.L1138
.L1166:
	cmp	r4, #0x24
	beq	.L1144	@cond_branch
	cmp	r4, #0x24
	blt	.L1143	@cond_branch
	cmp	r4, #0x25
	beq	.L1145	@cond_branch
	cmp	r4, #0x30
	beq	.L1146	@cond_branch
	b	.L1138
.L1165:
	cmp	r4, #0x44
	bgt	.L1167	@cond_branch
	cmp	r4, #0x42
	blt	.LCB8505
	b	.L1138	@long jump
.LCB8505:
	cmp	r4, #0x33
	beq	.L1148	@cond_branch
	cmp	r4, #0x33
	bge	.LCB8509
	b	.L1153	@long jump
.LCB8509:
	b	.L1138
.L1167:
	cmp	r4, #0xf3
	bne	.LCB8514
	b	.L1158	@long jump
.LCB8514:
	cmp	r4, #0xf3
	bgt	.L1168	@cond_branch
	cmp	r4, #0xf0
	bge	.LCB8518
	b	.L1138	@long jump
.LCB8518:
	b	.L1162
.L1168:
	cmp	r4, #0xff
	bne	.LCB8523
	b	.L1162	@long jump
.LCB8523:
	b	.L1138
.L1139:
	ldr	r1, .L1171
	mov	r0, #0x6
	strh	r0, [r1, #0x4]
	b	.L1138
.L1172:
	.align	2, 0
.L1171:
	.word	Rfu
.L1140:
	ldr	r0, .L1173
	ldr	r1, .L1173+0x4
	ldrh	r1, [r1, #0x14]
	ldr	r2, .L1173+0x8
	add	r0, r0, r2
	b	.L1169
.L1174:
	.align	2, 0
.L1173:
	.word	Rfu
	.word	lman
	.word	0xccd
.L1142:
	ldr	r0, .L1175
	ldr	r1, .L1175+0x4
	ldrh	r1, [r1, #0x14]
	ldr	r2, .L1175+0x8
	add	r0, r0, r2
	ldrb	r2, [r0]
	b	.L1169
.L1176:
	.align	2, 0
.L1175:
	.word	Rfu
	.word	lman
	.word	0xc3e
.L1143:
	mov	r0, #0x2
	add	r1, r4, #0
	bl	RfuSetStatus
	b	.L1138
.L1144:
	ldr	r4, .L1177
	mov	r1, #0x0
	mov	r0, #0xb
	strh	r0, [r4, #0x4]
	ldr	r2, .L1177+0x4
	add	r0, r4, r2
	strb	r1, [r0]
	ldr	r0, .L1177+0x8
	add	r2, r4, r0
	strb	r1, [r2]
	ldr	r1, .L1177+0xc
	add	r5, r4, r1
	ldrb	r1, [r5]
	mov	r0, #0x20
	mov	r3, #0x1
	bl	rfu_setRecvBuffer
	ldrb	r1, [r5]
	ldr	r2, .L1177+0x10
	add	r4, r4, r2
	mov	r0, #0x10
	add	r2, r4, #0
	mov	r3, #0x46
	bl	rfu_setRecvBuffer
	b	.L1138
.L1178:
	.align	2, 0
.L1177:
	.word	Rfu
	.word	0xc85
	.word	0xc86
	.word	0xc3e
	.word	0xc3f
.L1145:
	mov	r0, #0x2
	mov	r1, #0x25
	bl	RfuSetStatus
	b	.L1138
.L1146:
	ldr	r0, .L1179
	add	r2, r0, #0
	add	r2, r2, #0xf0
	mov	r1, #0x2
	strb	r1, [r2]
	ldr	r1, .L1179+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x6
	beq	.L1138	@cond_branch
.L1148:
	ldr	r2, .L1179
	add	r1, r2, #0
	add	r1, r1, #0xf0
	ldrb	r0, [r1]
	cmp	r0, #0x2
	beq	.L1149	@cond_branch
	mov	r0, #0x4
	strb	r0, [r1]
.L1149:
	ldr	r1, .L1179+0x4
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0x9
	beq	.L1150	@cond_branch
	mov	r0, #0x2
	add	r1, r4, #0
	bl	RfuSetStatus
.L1150:
	ldr	r0, .L1179+0x8
	mov	r1, #0x5
	mov	r2, #0x5
	bl	Debug_PrintString
	ldr	r0, .L1179+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1138	@cond_branch
	add	r0, r4, #0
	bl	GetLinkmanErrorParams
	b	.L1138
.L1180:
	.align	2, 0
.L1179:
	.word	Rfu
	.word	0xc86
	.word	sASCII_LinkLossDisconnect
	.word	gReceivedRemoteLinkPlayers
.L1152:
	ldr	r0, .L1181
	add	r0, r0, #0xf0
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L1181+0x4
	mov	r1, #0x5
	mov	r2, #0x5
	bl	Debug_PrintString
	b	.L1138
.L1182:
	.align	2, 0
.L1181:
	.word	Rfu
	.word	sASCII_LinkLossRecoveryNow
.L1153:
	ldr	r1, .L1183
	add	r2, r1, #0
	add	r2, r2, #0xf0
	mov	r0, #0x3
	strb	r0, [r2]
	ldr	r2, .L1183+0x4
	add	r1, r1, r2
	ldrb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L1138
.L1184:
	.align	2, 0
.L1183:
	.word	Rfu
	.word	0xc3c
.L1158:
	mov	r0, #0x1
	mov	r1, #0xf3
	bl	RfuSetStatus
	mov	r0, #0xf3
	bl	GetLinkmanErrorParams
	ldr	r0, .L1185
	add	r0, r0, #0xef
	b	.L1170
.L1186:
	.align	2, 0
.L1185:
	.word	Rfu
.L1162:
	mov	r0, #0x1
	add	r1, r4, #0
	bl	RfuSetStatus
	add	r0, r4, #0
	bl	GetLinkmanErrorParams
	ldr	r0, .L1187
	ldr	r1, .L1187+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
.L1170:
	mov	r1, #0x1
.L1169:
	strb	r1, [r0]
.L1138:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1188:
	.align	2, 0
.L1187:
	.word	Rfu
	.word	0xcdb
.Lfe111:
	.size	 sub_8011404,.Lfe111-sub_8011404
	.align	2, 0
	.type	 sub_80115EC,function
	.thumb_func
sub_80115EC:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	mov	r6, #0x1
	ldr	r0, .L1196
	ldr	r4, .L1196+0x4
	add	r1, r0, r4
	mov	r5, #0x0
	mov	r4, #0xff
.L1193:
	add	r0, r3, #0
	asr	r0, r0, r2
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L1192	@cond_branch
	strb	r5, [r1]
	ldrb	r0, [r1, #0x4]
	orr	r0, r0, r4
	strb	r0, [r1, #0x4]
.L1192:
	add	r1, r1, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1193	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1197:
	.align	2, 0
.L1196:
	.word	Rfu
	.word	0xcea
.Lfe112:
	.size	 sub_80115EC,.Lfe112-sub_80115EC
	.align	2, 0
	.type	 GetNewChildrenInUnionRoomChat,function
	.thumb_func
GetNewChildrenInUnionRoomChat:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	mov	r3, #0x0
	mov	r2, #0x0
	mov	r4, #0x1
	ldr	r6, .L1206
	mov	r7, #0x7f
.L1202:
	add	r0, r5, #0
	asr	r0, r0, r2
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1201	@cond_branch
	lsl	r1, r2, #0x5
	add	r1, r1, #0x14
	ldr	r0, [r6]
	add	r0, r0, r1
	ldrb	r1, [r0, #0x10]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0x45
	bne	.L1201	@cond_branch
	add	r0, r4, #0
	lsl	r0, r0, r2
	orr	r3, r3, r0
	lsl	r0, r3, #0x18
	lsr	r3, r0, #0x18
.L1201:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L1202	@cond_branch
	add	r0, r3, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1207:
	.align	2, 0
.L1206:
	.word	gRfuLinkStatus
.Lfe113:
	.size	 GetNewChildrenInUnionRoomChat,.Lfe113-GetNewChildrenInUnionRoomChat
	.align	2, 0
	.type	 sub_8011674,function
	.thumb_func
sub_8011674:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x25
	bne	.LCB8900
	b	.L1232	@long jump
.LCB8900:
	cmp	r4, #0x25
	bgt	.L1258	@cond_branch
	cmp	r4, #0x14
	bne	.LCB8904
	b	.L1222	@long jump
.LCB8904:
	cmp	r4, #0x14
	bgt	.L1259	@cond_branch
	cmp	r4, #0x11
	beq	.L1212	@cond_branch
	cmp	r4, #0x11
	ble	.LCB8910
	b	.L1209	@long jump
.LCB8910:
	cmp	r4, #0
	beq	.L1210	@cond_branch
	cmp	r4, #0x10
	beq	.L1211	@cond_branch
	b	.L1209
.L1259:
	cmp	r4, #0x22
	bne	.LCB8919
	b	.L1227	@long jump
.LCB8919:
	cmp	r4, #0x22
	bgt	.L1260	@cond_branch
	cmp	r4, #0x20
	bne	.LCB8923
	b	.L1225	@long jump
.LCB8923:
	b	.L1209
.L1260:
	cmp	r4, #0x23
	bne	.LCB8928
	b	.L1228	@long jump
.LCB8928:
	cmp	r4, #0x24
	bne	.LCB8930
	b	.L1231	@long jump
.LCB8930:
	b	.L1209
.L1258:
	cmp	r4, #0x44
	bgt	.L1261	@cond_branch
	cmp	r4, #0x42
	blt	.LCB8937
	b	.L1209	@long jump
.LCB8937:
	cmp	r4, #0x32
	bne	.LCB8939
	b	.L1235	@long jump
.LCB8939:
	cmp	r4, #0x32
	bgt	.L1262	@cond_branch
	cmp	r4, #0x30
	bne	.LCB8943
	b	.L1237	@long jump
.LCB8943:
	cmp	r4, #0x31
	bne	.LCB8945
	b	.L1233	@long jump
.LCB8945:
	b	.L1209
.L1262:
	cmp	r4, #0x33
	bne	.LCB8950
	b	.L1238	@long jump
.LCB8950:
	cmp	r4, #0x40
	bne	.LCB8952
	b	.L1247	@long jump
.LCB8952:
	b	.L1209
.L1261:
	cmp	r4, #0xf3
	bne	.LCB8957
	b	.L1251	@long jump
.LCB8957:
	cmp	r4, #0xf3
	bgt	.L1263	@cond_branch
	cmp	r4, #0xf0
	bge	.LCB8961
	b	.L1209	@long jump
.LCB8961:
	b	.L1255
.L1263:
	cmp	r4, #0xff
	bne	.LCB8966
	b	.L1255	@long jump
.LCB8966:
	b	.L1209
.L1210:
	ldr	r1, .L1266
	mov	r0, #0x11
	strh	r0, [r1, #0x4]
	b	.L1209
.L1267:
	.align	2, 0
.L1266:
	.word	Rfu
.L1211:
	mov	r0, #0x4
	mov	r1, #0x0
	bl	RfuSetStatus
	b	.L1209
.L1212:
	bl	GetHostRFUtgtGname
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x45
	bne	.L1213	@cond_branch
	ldr	r5, .L1268
	ldr	r1, .L1268+0x4
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1213	@cond_branch
	ldr	r0, .L1268+0x8
	ldrh	r0, [r0, #0x14]
	bl	GetNewChildrenInUnionRoomChat
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L1214	@cond_branch
	add	r0, r4, #0
	bl	sub_800E87C
	mov	r2, #0x1
	mov	ip, r2
	mov	r1, ip
	lsl	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r7, .L1268+0xc
	add	r6, r5, r7
	ldrb	r2, [r6]
	cmp	r2, #0
	bne	.L1215	@cond_branch
	ldr	r0, .L1268+0x10
	add	r3, r5, r0
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L1215	@cond_branch
	sub	r7, r7, #0x1
	add	r0, r5, r7
	strb	r1, [r0]
	eor	r1, r1, r4
	orr	r1, r1, r2
	strb	r1, [r6]
	mov	r0, ip
	strb	r0, [r3]
	b	.L1214
.L1269:
	.align	2, 0
.L1268:
	.word	Rfu
	.word	0xcd9
	.word	lman
	.word	0xce6
	.word	0xce8
.L1215:
	ldr	r0, .L1270
	ldr	r1, .L1270+0x4
	add	r0, r0, r1
	ldrb	r2, [r0]
	add	r1, r4, #0
	orr	r1, r1, r2
	strb	r1, [r0]
.L1214:
	ldr	r0, .L1270+0x8
	ldrh	r1, [r0, #0x14]
	cmp	r4, r1
	beq	.L1218	@cond_branch
	ldr	r2, .L1270
	ldr	r7, .L1270+0xc
	add	r3, r2, r7
	add	r0, r4, #0
	eor	r0, r0, r1
	ldrb	r1, [r3]
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L1270+0x10
	add	r2, r2, r0
	mov	r0, #0x2
	strb	r0, [r2]
	b	.L1218
.L1271:
	.align	2, 0
.L1270:
	.word	Rfu
	.word	0xce6
	.word	lman
	.word	0xce3
	.word	0xce4
.L1213:
	bl	GetHostRFUtgtGname
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x54
	bne	.L1218	@cond_branch
	ldr	r0, .L1272
	ldrb	r0, [r0]
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
.L1218:
	ldr	r0, .L1272
	ldrh	r0, [r0, #0x14]
	bl	sub_80115EC
	b	.L1209
.L1273:
	.align	2, 0
.L1272:
	.word	lman
.L1222:
	bl	GetHostRFUtgtGname
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x45
	beq	.L1223	@cond_branch
	ldr	r4, .L1274
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1
	bls	.L1223	@cond_branch
	ldrb	r0, [r4, #0x14]
	bl	sub_800E87C
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	lsl	r1, r1, r0
	lsr	r1, r1, #0x18
	ldrb	r0, [r4]
	eor	r1, r1, r0
	add	r0, r1, #0
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
.L1223:
	ldr	r1, .L1274+0x4
	ldrh	r0, [r1, #0x4]
	cmp	r0, #0xf
	beq	.LCB9188
	b	.L1209	@long jump
.LCB9188:
	mov	r0, #0x10
	strh	r0, [r1, #0x4]
	b	.L1209
.L1275:
	.align	2, 0
.L1274:
	.word	lman
	.word	Rfu
.L1225:
	ldr	r0, .L1276
	ldr	r1, .L1276+0x4
	ldrh	r1, [r1, #0x14]
	ldr	r2, .L1276+0x8
	add	r0, r0, r2
	b	.L1264
.L1277:
	.align	2, 0
.L1276:
	.word	Rfu
	.word	lman
	.word	0xccd
.L1227:
	ldr	r0, .L1278
	ldr	r1, .L1278+0x4
	ldrh	r1, [r1, #0x14]
	ldr	r7, .L1278+0x8
	add	r0, r0, r7
	ldrb	r2, [r0]
	b	.L1264
.L1279:
	.align	2, 0
.L1278:
	.word	Rfu
	.word	lman
	.word	0xc3e
.L1228:
	ldr	r1, .L1280
	mov	r0, #0x12
	strh	r0, [r1, #0x4]
	ldr	r0, .L1280+0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bhi	.L1229	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L1280+0x8
	mov	r1, #0x2
	bl	CreateTask
	b	.L1209
.L1281:
	.align	2, 0
.L1280:
	.word	Rfu
	.word	0xccf
	.word	sub_801209C
.L1229:
	mov	r0, #0x2
	mov	r1, #0x23
	bl	RfuSetStatus
	b	.L1209
.L1231:
	ldr	r4, .L1282
	mov	r0, #0xd
	strh	r0, [r4, #0x4]
	mov	r0, #0x3
	mov	r1, #0x0
	bl	RfuSetStatus
	ldr	r1, .L1282+0x4
	add	r0, r4, r1
	ldrb	r1, [r0]
	ldr	r2, .L1282+0x8
	add	r4, r4, r2
	mov	r0, #0x10
	add	r2, r4, #0
	mov	r3, #0x46
	bl	rfu_setRecvBuffer
	b	.L1209
.L1283:
	.align	2, 0
.L1282:
	.word	Rfu
	.word	0xc3e
	.word	0xc3f
.L1232:
	mov	r0, #0x2
	mov	r1, #0x25
	bl	RfuSetStatus
	b	.L1209
.L1233:
	ldr	r0, .L1284
	ldrb	r1, [r0]
	ldrh	r0, [r0, #0x14]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB9313
	b	.L1209	@long jump
.LCB9313:
	ldr	r0, .L1284+0x4
	add	r0, r0, #0xf0
	mov	r1, #0x1
	b	.L1264
.L1285:
	.align	2, 0
.L1284:
	.word	lman
	.word	Rfu
.L1235:
	ldr	r2, .L1286
	add	r1, r2, #0
	add	r1, r1, #0xf0
	mov	r0, #0x3
	strb	r0, [r1]
	ldr	r0, .L1286+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB9338
	b	.L1209	@long jump
.LCB9338:
	ldr	r7, .L1286+0x8
	add	r0, r2, r7
	ldrb	r1, [r0]
	mov	r1, #0x1
	b	.L1264
.L1287:
	.align	2, 0
.L1286:
	.word	Rfu
	.word	gRfuLinkStatus
	.word	0xc3c
.L1237:
	ldr	r0, .L1288
	add	r0, r0, #0xf0
	mov	r1, #0x2
	strb	r1, [r0]
.L1238:
	ldr	r2, .L1288
	add	r1, r2, #0
	add	r1, r1, #0xf0
	ldrb	r0, [r1]
	cmp	r0, #0x2
	beq	.L1239	@cond_branch
	mov	r0, #0x4
	strb	r0, [r1]
.L1239:
	ldrb	r0, [r2, #0xc]
	cmp	r0, #0x1
	bne	.L1240	@cond_branch
	ldr	r0, .L1288+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1244	@cond_branch
	ldr	r0, .L1288+0x8
	add	r2, r2, r0
	ldr	r0, .L1288+0xc
	ldrb	r1, [r0, #0x14]
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	cmp	r0, #0
	bne	.L1242	@cond_branch
	add	r0, r4, #0
	bl	GetLinkmanErrorParams
	b	.L1244
.L1289:
	.align	2, 0
.L1288:
	.word	Rfu
	.word	gReceivedRemoteLinkPlayers
	.word	0xce2
	.word	lman
.L1242:
	bl	sub_80111FC
	b	.L1244
.L1240:
	ldr	r1, .L1290
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1244	@cond_branch
	ldr	r0, .L1290+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1244	@cond_branch
	add	r0, r4, #0
	bl	GetLinkmanErrorParams
	mov	r0, #0x0
	bl	rfu_LMAN_stopManager
.L1244:
	ldr	r0, .L1290+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L1246	@cond_branch
	ldr	r0, .L1290+0xc
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	bne	.L1246	@cond_branch
	ldr	r0, .L1290+0x10
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1246	@cond_branch
	ldr	r1, .L1290+0x14
	mov	r0, #0x11
	strh	r0, [r1, #0x4]
.L1246:
	mov	r0, #0x2
	add	r1, r4, #0
	bl	RfuSetStatus
	b	.L1209
.L1291:
	.align	2, 0
.L1290:
	.word	0xce4
	.word	gReceivedRemoteLinkPlayers
	.word	gRfuLinkStatus
	.word	lman
	.word	Task_LinkRfu_UnionRoomListen
	.word	Rfu
.L1247:
	ldr	r0, .L1292
	ldr	r2, .L1292+0x4
	add	r0, r0, r2
	b	.L1265
.L1293:
	.align	2, 0
.L1292:
	.word	Rfu
	.word	0xce3
.L1251:
	mov	r0, #0x1
	mov	r1, #0xf3
	bl	RfuSetStatus
	mov	r0, #0xf3
	bl	GetLinkmanErrorParams
	ldr	r0, .L1294
	add	r0, r0, #0xef
	mov	r1, #0x1
	b	.L1264
.L1295:
	.align	2, 0
.L1294:
	.word	Rfu
.L1255:
	add	r0, r4, #0
	bl	GetLinkmanErrorParams
	mov	r0, #0x1
	add	r1, r4, #0
	bl	RfuSetStatus
	ldr	r0, .L1296
	ldr	r7, .L1296+0x4
	add	r0, r0, r7
	ldrb	r1, [r0]
.L1265:
	mov	r1, #0x0
.L1264:
	strb	r1, [r0]
.L1209:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1297:
	.align	2, 0
.L1296:
	.word	Rfu
	.word	0xcdb
.Lfe114:
	.size	 sub_8011674,.Lfe114-sub_8011674
	.align	2, 0
	.globl	sub_8011A50
	.type	 sub_8011A50,function
	.thumb_func
sub_8011A50:
	ldr	r0, .L1299
	ldr	r1, .L1299+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	strb	r1, [r0]
	bx	lr
.L1300:
	.align	2, 0
.L1299:
	.word	Rfu
	.word	0xce4
.Lfe115:
	.size	 sub_8011A50,.Lfe115-sub_8011A50
	.align	2, 0
	.globl	RfuSetStatus
	.type	 RfuSetStatus,function
	.thumb_func
RfuSetStatus:
	ldr	r2, .L1302
	add	r3, r2, #0
	add	r3, r3, #0xf1
	strb	r0, [r3]
	strh	r1, [r2, #0xa]
	bx	lr
.L1303:
	.align	2, 0
.L1302:
	.word	Rfu
.Lfe116:
	.size	 RfuSetStatus,.Lfe116-RfuSetStatus
	.align	2, 0
	.globl	RfuGetStatus
	.type	 RfuGetStatus,function
	.thumb_func
RfuGetStatus:
	ldr	r0, .L1305
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	bx	lr
.L1306:
	.align	2, 0
.L1305:
	.word	Rfu
.Lfe117:
	.size	 RfuGetStatus,.Lfe117-RfuGetStatus
	.align	2, 0
	.globl	RfuHasErrored
	.type	 RfuHasErrored,function
	.thumb_func
RfuHasErrored:
	push	{lr}
	bl	RfuGetStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	cmp	r0, #0x1
	bls	.L1308	@cond_branch
	mov	r0, #0x0
	b	.L1310
.L1308:
	mov	r0, #0x1
.L1310:
	pop	{r1}
	bx	r1
.Lfe118:
	.size	 RfuHasErrored,.Lfe118-RfuHasErrored
	.align	2, 0
	.globl	sub_8011A9C
	.type	 sub_8011A9C,function
	.thumb_func
sub_8011A9C:
	ldr	r0, .L1312
	ldr	r1, .L1312+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L1313:
	.align	2, 0
.L1312:
	.word	Rfu
	.word	0xce8
.Lfe119:
	.size	 sub_8011A9C,.Lfe119-sub_8011A9C
	.align	2, 0
	.globl	Rfu_IsMaster
	.type	 Rfu_IsMaster,function
	.thumb_func
Rfu_IsMaster:
	ldr	r0, .L1315
	ldrb	r0, [r0, #0xc]
	bx	lr
.L1316:
	.align	2, 0
.L1315:
	.word	Rfu
.Lfe120:
	.size	 Rfu_IsMaster,.Lfe120-Rfu_IsMaster
	.align	2, 0
	.globl	RfuVSync
	.type	 RfuVSync,function
	.thumb_func
RfuVSync:
	push	{lr}
	bl	rfu_LMAN_syncVBlank
	pop	{r0}
	bx	r0
.Lfe121:
	.size	 RfuVSync,.Lfe121-RfuVSync
	.align	2, 0
	.globl	sub_8011AC8
	.type	 sub_8011AC8,function
	.thumb_func
sub_8011AC8:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, .L1319
	ldr	r2, .L1319+0x4
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L1320:
	.align	2, 0
.L1319:
	.word	gRecvCmds
	.word	0x5000014
.Lfe122:
	.size	 sub_8011AC8,.Lfe122-sub_8011AC8
	.align	2, 0
	.type	 sub_8011AE8,function
	.thumb_func
sub_8011AE8:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe123:
	.size	 sub_8011AE8,.Lfe123-sub_8011AE8
	.align	2, 0
	.type	 sub_8011AFC,function
	.thumb_func
sub_8011AFC:
	push	{r4, lr}
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	bl	ResetPaletteFade
	ldr	r0, .L1329
	bl	SetVBlankCallback
	bl	IsWirelessAdapterConnected
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1323	@cond_branch
	ldr	r1, .L1329+0x4
	ldr	r2, .L1329+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	bl	SetWirelessCommType1
	bl	OpenLink
	ldr	r0, .L1329+0xc
	ldrh	r0, [r0, #0x24]
	bl	SeedRng
	mov	r4, #0x0
.L1327:
	bl	Random
	ldr	r1, .L1329+0x10
	ldr	r1, [r1]
	add	r1, r1, #0xa
	add	r1, r1, r4
	strb	r0, [r1]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1327	@cond_branch
	mov	r1, #0xaa
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	bl	CreateTask_RfuIdle
	ldr	r0, .L1329+0x14
	bl	SetMainCallback2
.L1323:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1330:
	.align	2, 0
.L1329:
	.word	sub_8011AE8
	.word	gLinkType
	.word	0x1111
	.word	gMain
	.word	gSaveBlock2Ptr
	.word	sub_8011BF8
.Lfe124:
	.size	 sub_8011AFC,.Lfe124-sub_8011AFC
	.align	2, 0
	.globl	IsUnionRoomListenTaskActive
	.type	 IsUnionRoomListenTaskActive,function
	.thumb_func
IsUnionRoomListenTaskActive:
	push	{lr}
	ldr	r0, .L1332
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L1333:
	.align	2, 0
.L1332:
	.word	Task_LinkRfu_UnionRoomListen
.Lfe125:
	.size	 IsUnionRoomListenTaskActive,.Lfe125-IsUnionRoomListenTaskActive
	.align	2, 0
	.globl	CreateTask_RfuIdle
	.type	 CreateTask_RfuIdle,function
	.thumb_func
CreateTask_RfuIdle:
	push	{r4, lr}
	ldr	r4, .L1336
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1335	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	ldr	r1, .L1336+0x4
	add	r1, r1, #0x66
	strb	r0, [r1]
.L1335:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1337:
	.align	2, 0
.L1336:
	.word	Task_Idle
	.word	Rfu
.Lfe126:
	.size	 CreateTask_RfuIdle,.Lfe126-CreateTask_RfuIdle
	.align	2, 0
	.globl	DestroyTask_RfuIdle
	.type	 DestroyTask_RfuIdle,function
	.thumb_func
DestroyTask_RfuIdle:
	push	{lr}
	ldr	r0, .L1340
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1339	@cond_branch
	ldr	r0, .L1340+0x4
	add	r0, r0, #0x66
	ldrb	r0, [r0]
	bl	DestroyTask
.L1339:
	pop	{r0}
	bx	r0
.L1341:
	.align	2, 0
.L1340:
	.word	Task_Idle
	.word	Rfu
.Lfe127:
	.size	 DestroyTask_RfuIdle,.Lfe127-DestroyTask_RfuIdle
	.align	2, 0
	.type	 sub_8011BF8,function
	.thumb_func
sub_8011BF8:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe128:
	.size	 sub_8011BF8,.Lfe128-sub_8011BF8
	.align	2, 0
	.globl	InitializeRfuLinkManager_LinkLeader
	.type	 InitializeRfuLinkManager_LinkLeader,function
	.thumb_func
InitializeRfuLinkManager_LinkLeader:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r1, .L1344
	mov	r0, #0x1
	strb	r0, [r1, #0xc]
	bl	CopyPlayerNameToUnameBuffer
	ldr	r0, .L1344+0x4
	mov	r1, #0x0
	bl	rfu_LMAN_initializeManager
	ldr	r2, .L1344+0x8
	add	r1, r2, #0
	ldr	r0, .L1344+0xc
	ldmia	r0!, {r3, r5, r6}
	stmia	r1!, {r3, r5, r6}
	ldmia	r0!, {r3, r5, r6}
	stmia	r1!, {r3, r5, r6}
	ldr	r0, .L1344+0x10
	sub	r4, r4, #0x1
	add	r4, r4, r0
	ldrb	r0, [r4]
	strh	r0, [r2, #0x2]
	bl	CreateTask_LinkLeaderSearchForChildren
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1345:
	.align	2, 0
.L1344:
	.word	Rfu
	.word	sub_801120C
	.word	sRfuReqConfig
	.word	sRfuReqConfigTemplate
	.word	sAvailSlots
.Lfe129:
	.size	 InitializeRfuLinkManager_LinkLeader,.Lfe129-InitializeRfuLinkManager_LinkLeader
	.align	2, 0
	.globl	InitializeRfuLinkManager_JoinGroup
	.type	 InitializeRfuLinkManager_JoinGroup,function
	.thumb_func
InitializeRfuLinkManager_JoinGroup:
	push	{lr}
	ldr	r1, .L1347
	mov	r0, #0x0
	strb	r0, [r1, #0xc]
	bl	CopyPlayerNameToUnameBuffer
	ldr	r0, .L1347+0x4
	ldr	r1, .L1347+0x8
	bl	rfu_LMAN_initializeManager
	bl	CreateTask_JoinGroupSearchForParent
	pop	{r0}
	bx	r0
.L1348:
	.align	2, 0
.L1347:
	.word	Rfu
	.word	sub_8011404
	.word	sub_800ED34
.Lfe130:
	.size	 InitializeRfuLinkManager_JoinGroup,.Lfe130-InitializeRfuLinkManager_JoinGroup
	.align	2, 0
	.globl	InitializeRfuLinkManager_EnterUnionRoom
	.type	 InitializeRfuLinkManager_EnterUnionRoom,function
	.thumb_func
InitializeRfuLinkManager_EnterUnionRoom:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L1350
	mov	r5, #0x0
	mov	r0, #0x2
	strb	r0, [r4, #0xc]
	bl	CopyPlayerNameToUnameBuffer
	ldr	r0, .L1350+0x4
	mov	r1, #0x0
	bl	rfu_LMAN_initializeManager
	ldr	r2, .L1350+0x8
	add	r1, r2, #0
	ldr	r0, .L1350+0xc
	ldmia	r0!, {r3, r6, r7}
	stmia	r1!, {r3, r6, r7}
	ldmia	r0!, {r3, r6, r7}
	stmia	r1!, {r3, r6, r7}
	strb	r5, [r2, #0x11]
	mov	r0, #0x96
	lsl	r0, r0, #0x2
	strh	r0, [r2, #0x12]
	ldr	r0, .L1350+0x10
	mov	r1, #0x1
	bl	CreateTask
	add	r4, r4, #0x67
	strb	r0, [r4]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1351:
	.align	2, 0
.L1350:
	.word	Rfu
	.word	sub_8011674
	.word	sRfuReqConfig
	.word	sRfuReqConfigTemplate
	.word	Task_LinkRfu_UnionRoomListen
.Lfe131:
	.size	 InitializeRfuLinkManager_EnterUnionRoom,.Lfe131-InitializeRfuLinkManager_EnterUnionRoom
	.align	2, 0
	.type	 ReadU16,function
	.thumb_func
ReadU16:
	ldrb	r1, [r0, #0x1]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0]
	orr	r0, r0, r1
	bx	lr
.Lfe132:
	.size	 ReadU16,.Lfe132-ReadU16
	.align	2, 0
	.type	 GetPartnerIndexByNameAndTrainerID,function
	.thumb_func
GetPartnerIndexByNameAndTrainerID:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	str	r0, [sp]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	sl, r1
	mov	r0, #0xff
	mov	r9, r0
	mov	r7, #0x0
	ldr	r1, .L1361
	mov	r8, r1
.L1357:
	lsl	r4, r7, #0x5
	add	r5, r4, #0
	add	r5, r5, #0x14
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r5
	add	r0, r0, #0x8
	bl	ReadU16
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r4
	ldrh	r0, [r0, #0x18]
	bl	IsRfuSerialNumberValid
	cmp	r0, #0
	beq	.L1356	@cond_branch
	mov	r0, r8
	ldr	r1, [r0]
	add	r1, r1, r5
	add	r1, r1, #0x15
	ldr	r0, [sp]
	bl	StringCompare
	cmp	r0, #0
	bne	.L1356	@cond_branch
	cmp	sl, r6
	bne	.L1356	@cond_branch
	mov	r9, r7
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r4
	ldrb	r0, [r0, #0x16]
	cmp	r0, #0xff
	bne	.L1355	@cond_branch
.L1356:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x3
	bls	.L1357	@cond_branch
.L1355:
	mov	r0, r9
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1362:
	.align	2, 0
.L1361:
	.word	gRfuLinkStatus
.Lfe133:
	.size	 GetPartnerIndexByNameAndTrainerID,.Lfe133-GetPartnerIndexByNameAndTrainerID
	.align	2, 0
	.type	 RfuReqDisconnectSlot,function
	.thumb_func
RfuReqDisconnectSlot:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	ldr	r4, .L1364
	ldr	r0, .L1364+0x4
	add	r5, r4, r0
	ldrb	r0, [r5]
	bic	r0, r0, r6
	strb	r0, [r5]
	ldr	r1, .L1364+0x8
	add	r6, r4, r1
	ldrb	r1, [r6]
	mov	r0, #0x1
	bl	rfu_clearSlot
	ldrb	r0, [r5]
	ldr	r1, .L1364+0xc
	add	r4, r4, r1
	add	r1, r4, #0
	mov	r2, #0x46
	bl	rfu_UNI_setSendData
	ldrb	r0, [r5]
	bl	sub_800E87C
	strb	r0, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1365:
	.align	2, 0
.L1364:
	.word	Rfu
	.word	0xce2
	.word	0xcda
	.word	0xc87
.Lfe134:
	.size	 RfuReqDisconnectSlot,.Lfe134-RfuReqDisconnectSlot
	.align	2, 0
	.globl	RequestDisconnectSlotByTrainerNameAndId
	.type	 RequestDisconnectSlotByTrainerNameAndId,function
	.thumb_func
RequestDisconnectSlotByTrainerNameAndId:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	GetPartnerIndexByNameAndTrainerID
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L1367	@cond_branch
	mov	r0, #0x1
	lsl	r0, r0, r1
	bl	RfuReqDisconnectSlot
.L1367:
	pop	{r0}
	bx	r0
.Lfe135:
	.size	 RequestDisconnectSlotByTrainerNameAndId,.Lfe135-RequestDisconnectSlotByTrainerNameAndId
	.align	2, 0
	.globl	sub_8011DE0
	.type	 sub_8011DE0,function
	.thumb_func
sub_8011DE0:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L1369	@cond_branch
	mov	r3, #0x0
	mov	r2, #0x0
	ldr	r5, .L1377
	add	r6, r5, #0x4
.L1373:
	add	r0, r2, r5
	ldrb	r0, [r0]
	cmp	r0, r4
	bne	.L1372	@cond_branch
	ldrb	r0, [r6]
	asr	r0, r0, r2
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1372	@cond_branch
	add	r0, r1, #0
	lsl	r0, r0, r2
	orr	r3, r3, r0
	lsl	r0, r3, #0x18
	lsr	r3, r0, #0x18
.L1372:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1373	@cond_branch
	cmp	r3, #0
	beq	.L1369	@cond_branch
	add	r0, r3, #0
	mov	r1, #0x2
	bl	sub_8011E94
.L1369:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1378:
	.align	2, 0
.L1377:
	.word	Rfu+0xcde
.Lfe136:
	.size	 sub_8011DE0,.Lfe136-sub_8011DE0
	.align	2, 0
	.type	 sub_8011E2C,function
	.thumb_func
sub_8011E2C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r6, .L1381
	ldrh	r0, [r6]
	cmp	r0, #0
	bne	.L1380	@cond_branch
	ldr	r5, .L1381+0x4
	ldr	r1, .L1381+0x8
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1380	@cond_branch
	mov	r0, #0xed
	lsl	r0, r0, #0x8
	bl	RfuPrepareSendBuffer
	ldr	r1, .L1381+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	strh	r1, [r6, #0x2]
	ldrh	r1, [r0, #0xa]
	strh	r1, [r6, #0x4]
	ldr	r1, .L1381+0x10
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r0, r0, r1
	ldrb	r1, [r5, #0xd]
	ldrb	r0, [r0]
	sub	r1, r1, r0
	strb	r1, [r5, #0xd]
	ldrb	r0, [r5, #0xd]
	strh	r0, [r6, #0x6]
	add	r0, r4, #0
	bl	DestroyTask
.L1380:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1382:
	.align	2, 0
.L1381:
	.word	gSendCmd
	.word	Rfu
	.word	0xce8
	.word	gTasks
	.word	sUnknown_082ED695
.Lfe137:
	.size	 sub_8011E2C,.Lfe137-sub_8011E2C
	.align	2, 0
	.type	 sub_8011E94,function
	.thumb_func
sub_8011E94:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	ldr	r5, .L1386
	add	r0, r5, #0
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	bne	.L1384	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L1386+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x8]
	b	.L1385
.L1387:
	.align	2, 0
.L1386:
	.word	sub_8011E2C
	.word	gTasks
.L1384:
	ldr	r0, .L1388
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	orr	r4, r4, r0
	strh	r4, [r1, #0x8]
.L1385:
	ldr	r1, .L1388
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r6, [r0, #0xa]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1389:
	.align	2, 0
.L1388:
	.word	gTasks
.Lfe138:
	.size	 sub_8011E94,.Lfe138-sub_8011E94
	.align	2, 0
	.type	 Task_RfuReconnectWithParent,function
	.thumb_func
Task_RfuReconnectWithParent:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L1403
	add	r4, r0, r1
	bl	sub_800EE94
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1391	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x10
	bl	ReadU16
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	GetPartnerIndexByNameAndTrainerID
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L1392	@cond_branch
	ldr	r0, .L1403+0x4
	ldr	r0, [r0]
	lsl	r1, r2, #0x5
	add	r0, r0, r1
	ldrb	r0, [r0, #0x16]
	cmp	r0, #0xff
	beq	.L1393	@cond_branch
	ldr	r0, .L1403+0x8
	ldr	r1, .L1403+0xc
	add	r0, r0, r1
	strb	r2, [r0]
	bl	IsParentSuccessfullyReconnected
	cmp	r0, #0
	beq	.L1400	@cond_branch
	b	.L1402
.L1404:
	.align	2, 0
.L1403:
	.word	gTasks+0x8
	.word	gRfuLinkStatus
	.word	Rfu
	.word	0xc3d
.L1393:
	bl	GetHostRFUtgtGname
	ldrb	r1, [r0, #0xa]
	mov	r5, #0x7f
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0x15
	beq	.L1391	@cond_branch
	bl	GetHostRFUtgtGname
	ldrb	r1, [r0, #0xa]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0x16
	beq	.L1391	@cond_branch
	mov	r1, #0xe0
	lsl	r1, r1, #0x7
	mov	r0, #0x2
	bl	RfuSetStatus
.L1402:
	add	r0, r6, #0
	bl	DestroyTask
	b	.L1400
.L1392:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	ldr	r0, .L1405
	ldr	r1, .L1405+0x4
	add	r0, r0, r1
	strb	r2, [r0]
	b	.L1400
.L1406:
	.align	2, 0
.L1405:
	.word	Rfu
	.word	0xc3d
.L1391:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
.L1400:
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xf0
	ble	.L1401	@cond_branch
	mov	r1, #0xe0
	lsl	r1, r1, #0x7
	mov	r0, #0x2
	bl	RfuSetStatus
	add	r0, r6, #0
	bl	DestroyTask
.L1401:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe139:
	.size	 Task_RfuReconnectWithParent,.Lfe139-Task_RfuReconnectWithParent
	.align	2, 0
	.globl	CreateTask_RfuReconnectWithParent
	.type	 CreateTask_RfuReconnectWithParent,function
	.thumb_func
CreateTask_RfuReconnectWithParent:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r5, r1, #0x10
	lsr	r5, r5, #0x10
	ldr	r0, .L1408
	add	r0, r0, #0xf1
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L1408+0x4
	mov	r1, #0x3
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L1408+0x8
	add	r4, r4, r0
	add	r0, r4, #0
	add	r1, r6, #0
	bl	StringCopy
	strh	r5, [r4, #0x10]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1409:
	.align	2, 0
.L1408:
	.word	Rfu
	.word	Task_RfuReconnectWithParent
	.word	gTasks+0x8
.Lfe140:
	.size	 CreateTask_RfuReconnectWithParent,.Lfe140-CreateTask_RfuReconnectWithParent
	.align	2, 0
	.type	 ShouldRejectPartnerConnectionBasedOnActivity,function
	.thumb_func
ShouldRejectPartnerConnectionBasedOnActivity:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	bl	GetHostRFUtgtGname
	ldrb	r1, [r0, #0xa]
	mov	r2, #0x7f
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0x45
	bne	.L1411	@cond_branch
	ldrb	r1, [r4, #0xa]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0x45
	beq	.L1413	@cond_branch
.L1424:
	mov	r0, #0x1
	b	.L1423
.L1411:
	ldrb	r1, [r4, #0xa]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0x40
	bne	.L1424	@cond_branch
	cmp	r5, #0x44
	bne	.L1413	@cond_branch
	ldr	r5, .L1425
	ldrh	r1, [r5, #0x8]
	ldr	r0, .L1425+0x4
	cmp	r1, r0
	bne	.L1417	@cond_branch
	ldrh	r0, [r4, #0x8]
	cmp	r0, r1
	beq	.L1413	@cond_branch
	b	.L1424
.L1426:
	.align	2, 0
.L1425:
	.word	Rfu+0x10a
	.word	0x4b7
.L1417:
	ldrh	r0, [r4, #0x8]
	cmp	r0, r1
	bne	.L1424	@cond_branch
	ldrb	r2, [r4, #0xb]
	mov	r0, #0xfe
	ldrb	r3, [r5, #0xb]
	add	r1, r0, #0
	and	r1, r1, r2
	and	r0, r0, r3
	cmp	r1, r0
	bne	.L1424	@cond_branch
	ldrb	r2, [r4, #0xc]
	mov	r0, #0x3f
	ldrb	r3, [r5, #0xc]
	add	r1, r0, #0
	and	r1, r1, r2
	and	r0, r0, r3
	cmp	r1, r0
	bne	.L1424	@cond_branch
.L1413:
	mov	r0, #0x0
.L1423:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe141:
	.size	 ShouldRejectPartnerConnectionBasedOnActivity,.Lfe141-ShouldRejectPartnerConnectionBasedOnActivity
	.align	2, 0
	.type	 sub_801209C,function
	.thumb_func
sub_801209C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r8, r5
	ldr	r6, .L1435
	add	r0, r6, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bne	.L1428	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
.L1428:
	ldr	r1, .L1435+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	mov	r1, #0x96
	lsl	r1, r1, #0x11
	cmp	r0, r1
	ble	.L1429	@cond_branch
	mov	r1, #0xe0
	lsl	r1, r1, #0x7
	mov	r0, #0x2
	bl	RfuSetStatus
	add	r0, r5, #0
	bl	DestroyTask
.L1429:
	ldr	r1, .L1435+0x8
	add	r0, r6, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1430	@cond_branch
	ldr	r0, .L1435+0xc
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	bne	.L1430	@cond_branch
	mov	r2, #0x86
	lsl	r2, r2, #0x1
	add	r0, r6, r2
	bl	ReadU16
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L1435+0x10
	add	r0, r6, r2
	bl	GetPartnerIndexByNameAndTrainerID
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L1430	@cond_branch
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	ldr	r7, .L1435+0x14
	lsl	r4, r2, #0x5
	add	r2, r4, #0
	add	r2, r2, #0x14
	ldr	r1, [r7]
	add	r1, r1, r2
	add	r1, r1, #0x6
	bl	ShouldRejectPartnerConnectionBasedOnActivity
	cmp	r0, #0
	bne	.L1432	@cond_branch
	ldr	r0, [r7]
	add	r1, r0, r4
	ldrb	r0, [r1, #0x16]
	cmp	r0, #0xff
	beq	.L1430	@cond_branch
	ldrh	r0, [r1, #0x14]
	mov	r1, #0x5a
	bl	rfu_LMAN_CHILD_connectParent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1430	@cond_branch
	mov	r0, #0xa
	strh	r0, [r6, #0x4]
	add	r0, r5, #0
	bl	DestroyTask
	b	.L1430
.L1436:
	.align	2, 0
.L1435:
	.word	Rfu
	.word	gTasks
	.word	0xccd
	.word	lman
	.word	0x119
	.word	gRfuLinkStatus
.L1432:
	mov	r1, #0xe0
	lsl	r1, r1, #0x7
	mov	r0, #0x2
	bl	RfuSetStatus
	mov	r0, r8
	bl	DestroyTask
.L1430:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe142:
	.size	 sub_801209C,.Lfe142-sub_801209C
	.align	2, 0
	.globl	sub_8012188
	.type	 sub_8012188,function
	.thumb_func
sub_8012188:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	lsl	r4, r2, #0x18
	lsr	r4, r4, #0x18
	ldr	r6, .L1442
	ldr	r1, .L1442+0x4
	add	r0, r6, r1
	mov	r7, #0x0
	strb	r7, [r0]
	add	r0, r6, #0
	add	r0, r0, #0xf1
	strb	r7, [r0]
	ldr	r1, .L1442+0x8
	add	r0, r6, r1
	add	r1, r3, #0
	bl	StringCopy
	mov	r1, #0x85
	lsl	r1, r1, #0x1
	add	r0, r6, r1
	add	r1, r5, #0
	mov	r2, #0xd
	bl	memcpy
	bl	rfu_LMAN_forceChangeSP
	ldr	r0, .L1442+0xc
	mov	r1, #0x2
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L1442+0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	strh	r4, [r1, #0xa]
	ldr	r0, .L1442+0x14
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r2, r1, #0
	cmp	r4, #0x45
	bne	.L1438	@cond_branch
	cmp	r1, #0xff
	beq	.L1440	@cond_branch
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r1, #0x1
	strh	r1, [r0, #0x16]
	b	.L1440
.L1443:
	.align	2, 0
.L1442:
	.word	Rfu
	.word	0xccf
	.word	0x119
	.word	sub_801209C
	.word	gTasks
	.word	Task_LinkRfu_UnionRoomListen
.L1438:
	cmp	r2, #0xff
	beq	.L1440	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r7, [r0, #0x16]
.L1440:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe143:
	.size	 sub_8012188,.Lfe143-sub_8012188
	.align	2, 0
	.globl	IsRfuRecoveringFromLinkLoss
	.type	 IsRfuRecoveringFromLinkLoss,function
	.thumb_func
IsRfuRecoveringFromLinkLoss:
	push	{lr}
	ldr	r0, .L1448
	add	r0, r0, #0xf0
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L1445	@cond_branch
	mov	r0, #0x0
	b	.L1447
.L1449:
	.align	2, 0
.L1448:
	.word	Rfu
.L1445:
	mov	r0, #0x1
.L1447:
	pop	{r1}
	bx	r1
.Lfe144:
	.size	 IsRfuRecoveringFromLinkLoss,.Lfe144-IsRfuRecoveringFromLinkLoss
	.align	2, 0
	.globl	sub_8012240
	.type	 sub_8012240,function
	.thumb_func
sub_8012240:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r0, .L1458
	ldrb	r2, [r0]
	ldr	r4, .L1458+0x4
	mov	r3, #0x1
.L1454:
	add	r0, r2, #0
	asr	r0, r0, r1
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1453	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1453	@cond_branch
	mov	r0, #0x0
	b	.L1457
.L1459:
	.align	2, 0
.L1458:
	.word	lman
	.word	Rfu+0xcd1
.L1453:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L1454	@cond_branch
	mov	r0, #0x1
.L1457:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe145:
	.size	 sub_8012240,.Lfe145-sub_8012240
	.align	2, 0
	.type	 Debug_PrintEmpty,function
	.thumb_func
Debug_PrintEmpty:
	push	{r4, lr}
	mov	r4, #0x0
.L1464:
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L1466
	mov	r1, #0x0
	bl	Debug_PrintString
	add	r4, r4, #0x1
	cmp	r4, #0x13
	ble	.L1464	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L1467:
	.align	2, 0
.L1466:
	.word	sASCII_30Commas
.Lfe146:
	.size	 Debug_PrintEmpty,.Lfe146-Debug_PrintEmpty
	.align	2, 0
	.type	 Debug_PrintStatus,function
	.thumb_func
Debug_PrintStatus:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1c
	mov	r2, #0x13
	mov	r3, #0x2
	bl	Debug_PrintNum
	ldr	r4, .L1505
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	mov	r1, #0x14
	mov	r2, #0x1
	mov	r3, #0x1
	bl	Debug_PrintNum
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x3]
	mov	r1, #0x17
	mov	r2, #0x1
	mov	r3, #0x1
	bl	Debug_PrintNum
	ldr	r0, .L1505+0x4
	ldrb	r0, [r0, #0xc]
	cmp	r0, #0x1
	bne	.L1469	@cond_branch
	mov	r6, #0x0
	add	r7, r4, #0
	mov	r5, #0x14
.L1473:
	ldr	r2, [r7]
	ldrb	r0, [r2, #0x7]
	asr	r0, r0, r6
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1472	@cond_branch
	lsl	r0, r6, #0x5
	add	r0, r2, r0
	ldrh	r0, [r0, #0x18]
	add	r4, r6, #0x3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r2, r4, #0
	mov	r3, #0x4
	bl	Debug_PrintNum
	ldr	r0, [r7]
	add	r0, r0, r5
	add	r0, r0, #0x6
	mov	r1, #0x6
	add	r2, r4, #0
	bl	Debug_PrintString
	ldr	r0, [r7]
	add	r0, r0, r5
	add	r0, r0, #0x15
	mov	r1, #0x16
	add	r2, r4, #0
	bl	Debug_PrintString
.L1472:
	add	r5, r5, #0x20
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L1473	@cond_branch
	mov	r6, #0x0
	ldr	r0, .L1505+0x4
	mov	r8, r0
.L1479:
	mov	r5, #0x0
	add	r7, r6, #0x1
	lsl	r0, r6, #0x3
	add	r2, r6, #0
	add	r2, r2, #0xb
	sub	r0, r0, r6
	lsl	r0, r0, #0x1
	mov	r1, r8
	add	r1, r1, #0x14
	add	r4, r0, r1
	lsl	r6, r2, #0x18
.L1483:
	ldrb	r0, [r4]
	lsl	r1, r5, #0x19
	lsr	r1, r1, #0x18
	lsr	r2, r6, #0x18
	mov	r3, #0x2
	bl	Debug_PrintNum
	add	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0xd
	ble	.L1483	@cond_branch
	add	r6, r7, #0
	cmp	r6, #0x3
	ble	.L1479	@cond_branch
	ldr	r0, .L1505+0x8
	mov	r1, #0x1
	mov	r2, #0xf
	bl	Debug_PrintString
	b	.L1486
.L1506:
	.align	2, 0
.L1505:
	.word	gRfuLinkStatus
	.word	Rfu
	.word	sASCII_NowSlot
.L1469:
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L1487	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0
	beq	.L1487	@cond_branch
	mov	r6, #0x0
	mov	r5, #0xc0
	lsl	r5, r5, #0x12
.L1491:
	lsr	r4, r5, #0x18
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x4
	bl	Debug_PrintNum
	ldr	r0, .L1507
	mov	r1, #0x6
	add	r2, r4, #0
	bl	Debug_PrintString
	ldr	r0, .L1507+0x4
	mov	r1, #0x16
	add	r2, r4, #0
	bl	Debug_PrintString
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r5, r5, r1
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L1491	@cond_branch
	ldr	r5, .L1507+0x8
	ldr	r1, [r5]
	ldr	r4, .L1507+0xc
	ldr	r0, .L1507+0x10
	add	r4, r4, r0
	ldrb	r0, [r4]
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldrh	r0, [r1, #0x18]
	mov	r1, #0x1
	mov	r2, #0x3
	mov	r3, #0x4
	bl	Debug_PrintNum
	ldrb	r1, [r4]
	lsl	r1, r1, #0x5
	add	r1, r1, #0x14
	ldr	r0, [r5]
	add	r0, r0, r1
	add	r0, r0, #0x6
	mov	r1, #0x6
	mov	r2, #0x3
	bl	Debug_PrintString
	ldrb	r1, [r4]
	lsl	r1, r1, #0x5
	add	r1, r1, #0x14
	ldr	r0, [r5]
	add	r0, r0, r1
	add	r0, r0, #0x15
	mov	r1, #0x16
	mov	r2, #0x3
	bl	Debug_PrintString
	b	.L1486
.L1508:
	.align	2, 0
.L1507:
	.word	sASCII_15Commas
	.word	sASCII_8Commas
	.word	gRfuLinkStatus
	.word	Rfu
	.word	0xc3e
.L1487:
	mov	r6, #0x0
	ldr	r1, .L1509
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x8]
	cmp	r6, r0
	bge	.L1495	@cond_branch
	add	r7, r1, #0
	mov	r1, #0x14
	mov	r8, r1
.L1497:
	ldr	r0, [r7]
	lsl	r5, r6, #0x5
	add	r1, r0, r5
	ldrb	r0, [r1, #0x16]
	cmp	r0, #0xff
	beq	.L1496	@cond_branch
	ldrh	r0, [r1, #0x18]
	add	r4, r6, #0x3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x4
	bl	Debug_PrintNum
	ldr	r0, [r7]
	add	r0, r0, r5
	ldrh	r0, [r0, #0x14]
	mov	r1, #0x6
	add	r2, r4, #0
	mov	r3, #0x4
	bl	Debug_PrintNum
	ldr	r0, [r7]
	add	r0, r0, r8
	add	r0, r0, #0x15
	mov	r1, #0x16
	add	r2, r4, #0
	bl	Debug_PrintString
.L1496:
	mov	r0, #0x20
	add	r8, r8, r0
	add	r6, r6, #0x1
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x8]
	cmp	r6, r0
	blt	.L1497	@cond_branch
.L1495:
	cmp	r6, #0x3
	bgt	.L1486	@cond_branch
	lsl	r0, r6, #0x18
	mov	r1, #0xc0
	lsl	r1, r1, #0x12
	add	r5, r0, r1
.L1503:
	lsr	r4, r5, #0x18
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x4
	bl	Debug_PrintNum
	ldr	r0, .L1509+0x4
	mov	r1, #0x6
	add	r2, r4, #0
	bl	Debug_PrintString
	ldr	r0, .L1509+0x8
	mov	r1, #0x16
	add	r2, r4, #0
	bl	Debug_PrintString
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r5, r5, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L1503	@cond_branch
.L1486:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1510:
	.align	2, 0
.L1509:
	.word	gRfuLinkStatus
	.word	sASCII_15Commas
	.word	sASCII_8Commas
.Lfe147:
	.size	 Debug_PrintStatus,.Lfe147-Debug_PrintStatus
	.align	2, 0
	.type	 GetRfuSendQueueLength,function
	.thumb_func
GetRfuSendQueueLength:
	ldr	r0, .L1512
	ldr	r1, .L1512+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L1513:
	.align	2, 0
.L1512:
	.word	Rfu
	.word	0xc1a
.Lfe148:
	.size	 GetRfuSendQueueLength,.Lfe148-GetRfuSendQueueLength
	.align	2, 0
	.globl	GetRfuRecvQueueLength
	.type	 GetRfuRecvQueueLength,function
	.thumb_func
GetRfuRecvQueueLength:
	ldr	r0, .L1515
	ldr	r1, .L1515+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L1516:
	.align	2, 0
.L1515:
	.word	Rfu
	.word	0x9e6
.Lfe149:
	.size	 GetRfuRecvQueueLength,.Lfe149-GetRfuRecvQueueLength
	.align	2, 0
	.type	 Task_Idle,function
	.thumb_func
Task_Idle:
	bx	lr
.Lfe150:
	.size	 Task_Idle,.Lfe150-Task_Idle
	.comm	Rfu, 3316	@ 3316
	.comm	gf_rfu_REQ_api, 3684	@ 3684

	.lcomm	sHeldKeyCount,1

	.lcomm	sResendBlock8,16

	.lcomm	sResendBlock16,16
.text
	.align	2, 0

