@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gUnknown_0203A138,object
	.size	 gUnknown_0203A138,8
gUnknown_0203A138:
	.word	0x0
	.space	4
	.type	 gUnknown_0203A140,object
	.size	 gUnknown_0203A140,1
gUnknown_0203A140:
	.byte	0x0
	.section .rodata
	.align	2, 0
	.type	 sOamData_859F4E8,object
	.size	 sOamData_859F4E8,8
sOamData_859F4E8:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sSpriteAnim_859F4F0,object
sSpriteAnim_859F4F0:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_859F4F0,8
	.align	2, 0
	.type	 sSpriteAnim_859F4F8,object
sSpriteAnim_859F4F8:
	.short	0x4
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_859F4F8,8
	.align	2, 0
	.type	 sSpriteAnim_859F500,object
sSpriteAnim_859F500:
	.short	0x0
	.byte	0x40
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_859F500,8
	.align	2, 0
	.type	 sSpriteAnimTable_859F508,object
sSpriteAnimTable_859F508:
	.word	sSpriteAnim_859F4F0
	.word	sSpriteAnim_859F4F8
	.word	sSpriteAnim_859F500
	.size	 sSpriteAnimTable_859F508,12
	.align	2, 0
	.type	 gUnknown_0859F514,object
	.size	 gUnknown_0859F514,8
gUnknown_0859F514:
	.word	gBagSwapLineGfx
	.short	0x100
	.short	0x6d
	.align	2, 0
	.type	 gUnknown_0859F51C,object
	.size	 gUnknown_0859F51C,8
gUnknown_0859F51C:
	.word	gBagSwapLinePal
	.short	0x6d
	.space	2
	.align	2, 0
	.type	 gUnknown_0859F524,object
	.size	 gUnknown_0859F524,24
gUnknown_0859F524:
	.short	0x6d
	.short	0x6d
	.word	sOamData_859F4E8
	.word	sSpriteAnimTable_859F508
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
.text
	.align	2, 0
	.globl	ResetVramOamAndBgCntRegs
	.type	 ResetVramOamAndBgCntRegs,function
	.thumb_func
ResetVramOamAndBgCntRegs:
	push	{r4, lr}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xe
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xc
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xa
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x8
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L3
	mov	r0, sp
	bl	CpuSet
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	add	r0, sp, #0x4
	mov	r1, #0xe0
	lsl	r1, r1, #0x13
	ldr	r2, .L3+0x4
	bl	CpuSet
	add	r0, sp, #0x8
	strh	r4, [r0]
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	ldr	r2, .L3+0x8
	bl	CpuSet
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	0x100c000
	.word	0x5000100
	.word	0x1000200
.Lfe1:
	.size	 ResetVramOamAndBgCntRegs,.Lfe1-ResetVramOamAndBgCntRegs
	.align	2, 0
	.globl	ResetAllBgsCoordinates
	.type	 ResetAllBgsCoordinates,function
	.thumb_func
ResetAllBgsCoordinates:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 ResetAllBgsCoordinates,.Lfe2-ResetAllBgsCoordinates
	.align	2, 0
	.globl	SetVBlankHBlankCallbacksToNull
	.type	 SetVBlankHBlankCallbacksToNull,function
	.thumb_func
SetVBlankHBlankCallbacksToNull:
	push	{lr}
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 SetVBlankHBlankCallbacksToNull,.Lfe3-SetVBlankHBlankCallbacksToNull
	.align	2, 0
	.globl	DisplayMessageAndContinueTask
	.type	 DisplayMessageAndContinueTask,function
	.thumb_func
DisplayMessageAndContinueTask:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r6, r1, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r7, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L9
	strb	r6, [r0]
	add	r0, r6, #0
	mov	r1, #0x1
	bl	DrawDialogFrameWithCustomTileAndPalette
	ldr	r4, .L9+0x4
	ldr	r0, [sp, #0x30]
	cmp	r0, r4
	beq	.L8	@cond_branch
	add	r0, r4, #0
	ldr	r1, [sp, #0x30]
	bl	StringExpandPlaceholders
.L8:
	ldr	r2, .L9+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	add	r0, r6, #0
	add	r1, r7, #0
	add	r2, r4, #0
	add	r3, r5, #0
	bl	AddTextPrinterParameterized2
	ldr	r1, .L9+0xc
	ldr	r0, [sp, #0x34]
	str	r0, [r1]
	ldr	r1, .L9+0x10
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L9+0x14
	str	r1, [r0]
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L10:
	.align	2, 0
.L9:
	.word	gUnknown_0203A140
	.word	gStringVar4
	.word	gTextFlags
	.word	gUnknown_0300117C
	.word	gTasks
	.word	Task_ContinueTaskAfterMessagePrints
.Lfe4:
	.size	 DisplayMessageAndContinueTask,.Lfe4-DisplayMessageAndContinueTask
	.align	2, 0
	.globl	RunTextPrintersRetIsActive
	.type	 RunTextPrintersRetIsActive,function
	.thumb_func
RunTextPrintersRetIsActive:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	RunTextPrinters
	add	r0, r4, #0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 RunTextPrintersRetIsActive,.Lfe5-RunTextPrintersRetIsActive
	.align	2, 0
	.type	 Task_ContinueTaskAfterMessagePrints,function
	.thumb_func
Task_ContinueTaskAfterMessagePrints:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L14
	ldrb	r0, [r0]
	bl	RunTextPrintersRetIsActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L13	@cond_branch
	ldr	r0, .L14+0x4
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
.L13:
	pop	{r4}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gUnknown_0203A140
	.word	gUnknown_0300117C
.Lfe6:
	.size	 Task_ContinueTaskAfterMessagePrints,.Lfe6-Task_ContinueTaskAfterMessagePrints
	.align	2, 0
	.globl	DoYesNoFuncWithChoice
	.type	 DoYesNoFuncWithChoice,function
	.thumb_func
DoYesNoFuncWithChoice:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L17
	ldr	r2, [r1, #0x4]		@ created by thumb_load_double_from_address
	ldr	r1, [r1]		@ created by thumb_load_double_from_address
	str	r1, [r3]
	str	r2, [r3, #0x4]
	ldr	r2, .L17+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L17+0x8
	str	r0, [r1]
	bx	lr
.L18:
	.align	2, 0
.L17:
	.word	gUnknown_0203A138
	.word	gTasks
	.word	Task_CallYesOrNoCallback
.Lfe7:
	.size	 DoYesNoFuncWithChoice,.Lfe7-DoYesNoFuncWithChoice
	.align	2, 0
	.globl	CreateYesNoMenuWithCallbacks
	.type	 CreateYesNoMenuWithCallbacks,function
	.thumb_func
CreateYesNoMenuWithCallbacks:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	ldr	r1, [sp, #0x10]
	ldr	r2, [sp, #0x14]
	ldr	r5, [sp, #0x18]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r3, #0x0
	bl	CreateYesNoMenu
	ldr	r2, .L20
	ldr	r0, [r5]		@ created by thumb_load_double_from_address
	ldr	r1, [r5, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	ldr	r1, .L20+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L20+0x8
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	gUnknown_0203A138
	.word	gTasks
	.word	Task_CallYesOrNoCallback
.Lfe8:
	.size	 CreateYesNoMenuWithCallbacks,.Lfe8-CreateYesNoMenuWithCallbacks
	.align	2, 0
	.type	 Task_CallYesOrNoCallback,function
	.thumb_func
Task_CallYesOrNoCallback:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L24	@cond_branch
	cmp	r1, #0
	bgt	.L29	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L26	@cond_branch
	b	.L23
.L29:
	cmp	r1, #0x1
	beq	.L26	@cond_branch
	b	.L23
.L24:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L30
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	b	.L23
.L31:
	.align	2, 0
.L30:
	.word	gUnknown_0203A138
.L26:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L32
	ldr	r1, [r0, #0x4]
	add	r0, r4, #0
	bl	_call_via_r1
.L23:
	pop	{r4}
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	gUnknown_0203A138
.Lfe9:
	.size	 Task_CallYesOrNoCallback,.Lfe9-Task_CallYesOrNoCallback
	.align	2, 0
	.globl	AdjustQuantityAccordingToDPadInput
	.type	 AdjustQuantityAccordingToDPadInput,function
	.thumb_func
AdjustQuantityAccordingToDPadInput:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r5, r1, #0
	ldrh	r4, [r2]
	add	r6, r4, #0
	ldr	r0, .L57
	ldrh	r0, [r0, #0x30]
	mov	r3, #0xf0
	and	r3, r3, r0
	cmp	r3, #0x40
	bne	.L35	@cond_branch
	add	r0, r4, #0x1
	strh	r0, [r2]
	mov	r3, #0x0
	ldrsh	r0, [r2, r3]
	cmp	r0, r1
	ble	.L36	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2]
.L36:
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
.L55:
	lsl	r0, r4, #0x10
	b	.L56
.L58:
	.align	2, 0
.L57:
	.word	gMain
.L35:
	cmp	r3, #0x80
	bne	.L40	@cond_branch
	sub	r0, r4, #0x1
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L41	@cond_branch
	strh	r1, [r2]
.L41:
	mov	r3, #0x0
	ldrsh	r1, [r2, r3]
	b	.L55
.L40:
	cmp	r3, #0x10
	bne	.L45	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0xa
	strh	r0, [r2]
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	cmp	r0, r5
	ble	.L46	@cond_branch
	strh	r5, [r2]
.L46:
	mov	r3, #0x0
	ldrsh	r1, [r2, r3]
	b	.L55
.L45:
	cmp	r3, #0x20
	bne	.L39	@cond_branch
	add	r0, r4, #0
	sub	r0, r0, #0xa
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L51	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2]
.L51:
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	lsl	r0, r6, #0x10
.L56:
	asr	r0, r0, #0x10
	cmp	r1, r0
	beq	.L39	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	b	.L54
.L39:
	mov	r0, #0x0
.L54:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 AdjustQuantityAccordingToDPadInput,.Lfe10-AdjustQuantityAccordingToDPadInput
	.align	2, 0
	.globl	GetLRKeysPressed
	.type	 GetLRKeysPressed,function
	.thumb_func
GetLRKeysPressed:
	push	{lr}
	ldr	r0, .L64
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x1
	bne	.L60	@cond_branch
	ldr	r0, .L64+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L61	@cond_branch
	mov	r0, #0x1
	b	.L63
.L65:
	.align	2, 0
.L64:
	.word	gSaveBlock2Ptr
	.word	gMain
.L61:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L60	@cond_branch
	mov	r0, #0x2
	b	.L63
.L60:
	mov	r0, #0x0
.L63:
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 GetLRKeysPressed,.Lfe11-GetLRKeysPressed
	.align	2, 0
	.globl	GetLRKeysPressedAndHeld
	.type	 GetLRKeysPressedAndHeld,function
	.thumb_func
GetLRKeysPressedAndHeld:
	push	{lr}
	ldr	r0, .L71
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x1
	bne	.L67	@cond_branch
	ldr	r0, .L71+0x4
	ldrh	r1, [r0, #0x30]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L68	@cond_branch
	mov	r0, #0x1
	b	.L70
.L72:
	.align	2, 0
.L71:
	.word	gSaveBlock2Ptr
	.word	gMain
.L68:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L67	@cond_branch
	mov	r0, #0x2
	b	.L70
.L67:
	mov	r0, #0x0
.L70:
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 GetLRKeysPressedAndHeld,.Lfe12-GetLRKeysPressedAndHeld
	.align	2, 0
	.globl	sub_8122148
	.type	 sub_8122148,function
	.thumb_func
sub_8122148:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xcd
	bne	.L78	@cond_branch
	ldr	r0, .L82
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	ldr	r0, .L82+0x4
	cmp	r1, r0
	beq	.L81	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	bne	.L78	@cond_branch
.L81:
	mov	r0, #0x0
	b	.L80
.L83:
	.align	2, 0
.L82:
	.word	gSaveBlock1Ptr
	.word	0x1919
.L78:
	mov	r0, #0x1
.L80:
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 sub_8122148,.Lfe13-sub_8122148
	.align	2, 0
	.globl	itemid_80BF6D8_mail_related
	.type	 itemid_80BF6D8_mail_related,function
	.thumb_func
itemid_80BF6D8_mail_related:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	IsUpdateLinkStateCBActive
	cmp	r0, #0x1
	beq	.L85	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	bne	.L87	@cond_branch
.L85:
	add	r0, r4, #0
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L87	@cond_branch
	mov	r0, #0x0
	b	.L89
.L87:
	mov	r0, #0x1
.L89:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 itemid_80BF6D8_mail_related,.Lfe14-itemid_80BF6D8_mail_related
	.align	2, 0
	.globl	MenuHelpers_LinkSomething
	.type	 MenuHelpers_LinkSomething,function
	.thumb_func
MenuHelpers_LinkSomething:
	push	{lr}
	bl	IsUpdateLinkStateCBActive
	cmp	r0, #0x1
	beq	.L92	@cond_branch
	ldr	r0, .L95
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L91	@cond_branch
.L92:
	mov	r0, #0x1
	b	.L94
.L96:
	.align	2, 0
.L95:
	.word	gReceivedRemoteLinkPlayers
.L91:
	mov	r0, #0x0
.L94:
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 MenuHelpers_LinkSomething,.Lfe15-MenuHelpers_LinkSomething
	.align	2, 0
	.type	 sub_81221D0,function
	.thumb_func
sub_81221D0:
	push	{lr}
	bl	MenuHelpers_LinkSomething
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L98	@cond_branch
	bl	sub_8087598
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L100
.L98:
	mov	r0, #0x0
.L100:
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 sub_81221D0,.Lfe16-sub_81221D0
	.align	2, 0
	.globl	MenuHelpers_CallLinkSomething
	.type	 MenuHelpers_CallLinkSomething,function
	.thumb_func
MenuHelpers_CallLinkSomething:
	push	{lr}
	bl	sub_81221D0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L107	@cond_branch
	bl	sub_800B504
	cmp	r0, #0x1
	bne	.L104	@cond_branch
.L107:
	mov	r0, #0x1
	b	.L106
.L104:
	mov	r0, #0x0
.L106:
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 MenuHelpers_CallLinkSomething,.Lfe17-MenuHelpers_CallLinkSomething
	.align	2, 0
	.globl	sub_812220C
	.type	 sub_812220C,function
	.thumb_func
sub_812220C:
	push	{r4, r5, r6, lr}
	add	r6, r2, #0
	ldr	r2, [sp, #0x10]
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	add	r4, r0, #0
	mov	r0, #0x0
	strb	r0, [r3]
	mov	r2, #0x0
	lsr	r1, r1, #0x18
	cmp	r2, r1
	bcs	.L110	@cond_branch
.L112:
	lsl	r0, r2, #0x2
	add	r0, r0, r4
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L111	@cond_branch
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
.L111:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r1
	bcc	.L112	@cond_branch
.L110:
	ldrb	r0, [r3]
	add	r1, r0, #0x1
	strb	r1, [r3]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r5
	bls	.L115	@cond_branch
	strb	r5, [r6]
	b	.L116
.L115:
	strb	r1, [r6]
.L116:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 sub_812220C,.Lfe18-sub_812220C
	.align	2, 0
	.globl	sub_812225C
	.type	 sub_812225C,function
	.thumb_func
sub_812225C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L118	@cond_branch
	add	r0, r0, r2
	cmp	r0, r3
	ble	.L118	@cond_branch
	sub	r0, r3, r2
	strh	r0, [r4]
.L118:
	ldrh	r0, [r4]
	ldrh	r1, [r5]
	add	r0, r0, r1
	cmp	r0, r3
	blt	.L119	@cond_branch
	cmp	r3, #0
	bne	.L120	@cond_branch
	strh	r3, [r5]
	b	.L119
.L120:
	sub	r0, r3, #0x1
	strh	r0, [r5]
.L119:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 sub_812225C,.Lfe19-sub_812225C
	.align	2, 0
	.globl	sub_8122298
	.type	 sub_8122298,function
	.thumb_func
sub_8122298:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	ldr	r0, [sp, #0x14]
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	lsl	r2, r0, #0x18
	lsr	r0, r2, #0x18
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L123	@cond_branch
	lsr	r2, r2, #0x19
	ldrh	r0, [r4]
	cmp	r0, r2
	bcc	.L131	@cond_branch
	mov	r1, #0x0
	sub	r0, r0, r2
	cmp	r1, r0
	bge	.L131	@cond_branch
	ldrh	r0, [r5]
	add	r0, r0, r7
	cmp	r0, r6
	beq	.L131	@cond_branch
.L129:
	ldrh	r0, [r4]
	sub	r0, r0, #0x1
	strh	r0, [r4]
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldrh	r0, [r4]
	sub	r0, r0, r2
	cmp	r1, r0
	bge	.L131	@cond_branch
	ldrh	r0, [r5]
	add	r0, r0, r7
	cmp	r0, r6
	bne	.L129	@cond_branch
	b	.L131
.L123:
	ldrh	r3, [r4]
	lsr	r2, r2, #0x19
	add	r0, r2, #0x1
	cmp	r3, r0
	blt	.L131	@cond_branch
	mov	r1, #0x0
	sub	r0, r3, r2
	b	.L140
.L137:
	ldrh	r0, [r4]
	sub	r0, r0, #0x1
	strh	r0, [r4]
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldrh	r0, [r4]
	sub	r0, r0, r2
.L140:
	cmp	r1, r0
	bgt	.L131	@cond_branch
	ldrh	r0, [r5]
	add	r0, r0, r7
	cmp	r0, r6
	bne	.L137	@cond_branch
.L131:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 sub_8122298,.Lfe20-sub_8122298
	.align	2, 0
	.globl	LoadListMenuArrowsGfx
	.type	 LoadListMenuArrowsGfx,function
	.thumb_func
LoadListMenuArrowsGfx:
	push	{lr}
	ldr	r0, .L142
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L142+0x4
	bl	LoadCompressedSpritePalette
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	gUnknown_0859F514
	.word	gUnknown_0859F51C
.Lfe21:
	.size	 LoadListMenuArrowsGfx,.Lfe21-LoadListMenuArrowsGfx
	.align	2, 0
	.globl	sub_8122344
	.type	 sub_8122344,function
	.thumb_func
sub_8122344:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r5, #0x0
	cmp	r5, r6
	bcs	.L146	@cond_branch
	ldr	r7, .L151
.L148:
	lsl	r1, r5, #0x4
	ldr	r0, .L151+0x4
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CreateSprite
	mov	r1, r8
	add	r4, r1, r5
	strb	r0, [r4]
	cmp	r5, #0
	beq	.L149	@cond_branch
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, #0x1
	bl	StartSpriteAnim
.L149:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r6
	bcc	.L148	@cond_branch
.L146:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L152:
	.align	2, 0
.L151:
	.word	gSprites
	.word	gUnknown_0859F524
.Lfe22:
	.size	 sub_8122344,.Lfe22-sub_8122344
	.align	2, 0
	.globl	sub_81223B0
	.type	 sub_81223B0,function
	.thumb_func
sub_81223B0:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L155	@cond_branch
	ldr	r7, .L161
.L157:
	sub	r0, r5, #0x1
	cmp	r4, r0
	bne	.L158	@cond_branch
	add	r0, r6, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	bl	DestroySpriteAndFreeResources
	b	.L156
.L162:
	.align	2, 0
.L161:
	.word	gSprites
.L158:
	add	r0, r6, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	bl	DestroySprite
.L156:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L157	@cond_branch
.L155:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 sub_81223B0,.Lfe23-sub_81223B0
	.align	2, 0
	.globl	sub_81223FC
	.type	 sub_81223FC,function
	.thumb_func
sub_81223FC:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r0, r2, #0x18
	mov	r3, #0x0
	cmp	r3, r4
	bcs	.L165	@cond_branch
	ldr	r1, .L169
	mov	ip, r1
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r5, r0, #0x2
	mov	r7, #0x5
	neg	r7, r7
.L167:
	add	r0, r6, r3
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	add	r0, r7, #0
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r4
	bcc	.L167	@cond_branch
.L165:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L170:
	.align	2, 0
.L169:
	.word	gSprites
.Lfe24:
	.size	 sub_81223FC,.Lfe24-sub_81223FC
	.align	2, 0
	.globl	sub_8122448
	.type	 sub_8122448,function
	.thumb_func
sub_8122448:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r7, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r9, r3
	mov	r0, #0x80
	and	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, #0x7f
	and	r4, r4, r0
	mov	r3, #0x0
	cmp	r3, r4
	bcs	.L173	@cond_branch
	ldr	r5, .L179
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, #0x8
	mov	ip, r0
.L175:
	sub	r0, r4, #0x1
	cmp	r3, r0
	bne	.L176	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	beq	.L176	@cond_branch
	add	r2, r6, r3
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, ip
	strh	r1, [r0, #0x24]
	b	.L177
.L180:
	.align	2, 0
.L179:
	.word	gSprites
.L176:
	add	r2, r6, r3
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r7, [r0, #0x24]
.L177:
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r9
	add	r1, r1, #0x1
	strh	r1, [r0, #0x22]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r4
	bcc	.L175	@cond_branch
.L173:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 sub_8122448,.Lfe25-sub_8122448

	.lcomm	gUnknown_0300117C,4
.text
	.align	2, 0

