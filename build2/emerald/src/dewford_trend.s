@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	InitDewfordTrend
	.type	 InitDewfordTrend,function
	.thumb_func
InitDewfordTrend:
	push	{r4, r5, r6, r7, lr}
	mov	r6, #0x0
	ldr	r5, .L11
.L6:
	mov	r0, #0xa
	bl	GetRandomEasyChatWordFromGroup
	ldr	r1, [r5]
	lsl	r4, r6, #0x3
	add	r1, r1, r4
	ldr	r2, .L11+0x4
	add	r1, r1, r2
	strh	r0, [r1]
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L7	@cond_branch
	mov	r0, #0xc
	bl	GetRandomEasyChatWordFromGroup
	ldr	r1, [r5]
	add	r1, r1, r4
	ldr	r7, .L11+0x8
	add	r1, r1, r7
	b	.L10
.L12:
	.align	2, 0
.L11:
	.word	gSaveBlock1Ptr
	.word	0x2aec
	.word	0x2aee
.L7:
	mov	r0, #0xd
	bl	GetRandomEasyChatWordFromGroup
	ldr	r1, [r5]
	add	r1, r1, r4
	ldr	r2, .L13
	add	r1, r1, r2
.L10:
	strh	r0, [r1]
	bl	Random
	ldr	r3, [r5]
	add	r3, r3, r4
	mov	r2, #0x1
	and	r2, r2, r0
	ldr	r7, .L13+0x4
	add	r3, r3, r7
	lsl	r2, r2, #0x6
	ldrb	r0, [r3]
	mov	r7, #0x41
	neg	r7, r7
	add	r1, r7, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3]
	ldr	r0, .L13+0x8
	add	r1, r4, r0
	ldr	r0, [r5]
	add	r0, r0, r1
	bl	sub_8122B28
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x4
	bls	.L6	@cond_branch
	ldr	r0, .L13+0xc
	ldr	r0, [r0]
	ldr	r1, .L13+0x8
	add	r0, r0, r1
	mov	r1, #0x5
	mov	r2, #0x0
	bl	sub_8122804
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	0x2aee
	.word	0x2ae9
	.word	0x2ae8
	.word	gSaveBlock1Ptr
.Lfe1:
	.size	 InitDewfordTrend,.Lfe1-InitDewfordTrend
	.align	2, 0
	.globl	UpdateDewfordTrendPerDay
	.type	 UpdateDewfordTrendPerDay,function
	.thumb_func
UpdateDewfordTrendPerDay:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.LCB128
	b	.L16	@long jump
.LCB128:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	sl, r0
	mov	r1, #0x7f
	mov	r9, r1
	mov	r2, #0x80
	neg	r2, r2
	mov	r8, r2
.L20:
	ldr	r2, [sp]
	mov	r3, sl
	lsl	r0, r3, #0x3
	ldr	r4, .L31
	add	r0, r0, r4
	ldr	r3, .L31+0x4
	ldr	r1, [r3]
	add	r5, r1, r0
	ldrb	r6, [r5, #0x1]
	mov	r0, #0x40
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L21	@cond_branch
	ldrb	r4, [r5]
	lsl	r3, r4, #0x19
	lsr	r1, r3, #0x19
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bcc	.L22	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, r2
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, r8
	and	r1, r1, r4
	orr	r1, r1, r0
	strb	r1, [r5]
	mov	r0, #0x7f
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L19	@cond_branch
	mov	r0, #0x40
	orr	r0, r0, r6
	b	.L30
.L32:
	.align	2, 0
.L31:
	.word	0x2ae8
	.word	gSaveBlock1Ptr
.L22:
	lsr	r0, r3, #0x19
	sub	r2, r2, r0
	mov	r0, r8
	and	r0, r0, r4
	strb	r0, [r5]
	mov	r0, #0x40
	orr	r0, r0, r6
	strb	r0, [r5, #0x1]
.L21:
	ldrb	r7, [r5]
	lsl	r0, r7, #0x19
	lsr	r0, r0, #0x19
	add	r4, r0, r2
	ldrh	r0, [r5]
	lsl	r6, r0, #0x12
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	lsr	r1, r6, #0x19
	cmp	r0, r1
	bls	.L24	@cond_branch
	add	r0, r4, #0
	bl	__umodsi3
	add	r3, r0, #0
	lsr	r1, r6, #0x19
	add	r0, r4, #0
	str	r3, [sp, #0x4]
	bl	__udivsi3
	add	r4, r0, #0
	mov	r0, #0x1
	eor	r4, r4, r0
	and	r4, r4, r0
	lsl	r2, r4, #0x6
	ldrb	r0, [r5, #0x1]
	mov	r4, #0x41
	neg	r4, r4
	add	r1, r4, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x1]
	mov	r1, #0x40
	and	r0, r0, r1
	ldr	r3, [sp, #0x4]
	cmp	r0, #0
	beq	.L25	@cond_branch
	add	r1, r3, #0
	mov	r0, r9
	and	r1, r1, r0
	mov	r0, r8
	and	r0, r0, r7
	orr	r0, r0, r1
	strb	r0, [r5]
	b	.L19
.L25:
	ldrh	r0, [r5]
	lsl	r0, r0, #0x12
	lsr	r0, r0, #0x19
	sub	r0, r0, r3
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, r8
	and	r1, r1, r7
	orr	r1, r1, r0
	strb	r1, [r5]
	b	.L19
.L24:
	mov	r2, r9
	and	r4, r4, r2
	mov	r0, r8
	and	r0, r0, r7
	orr	r0, r0, r4
	strb	r0, [r5]
	lsl	r0, r0, #0x19
	ldrh	r1, [r5]
	lsl	r1, r1, #0x12
	lsr	r0, r0, #0x19
	lsr	r1, r1, #0x19
	cmp	r0, r1
	bne	.L19	@cond_branch
	ldrb	r0, [r5, #0x1]
	mov	r3, #0x41
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
.L30:
	strb	r0, [r5, #0x1]
.L19:
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	cmp	r0, #0x4
	bhi	.LCB332
	b	.L20	@long jump
.LCB332:
	ldr	r4, .L33
	ldr	r0, [r4]
	ldr	r1, .L33+0x4
	add	r0, r0, r1
	mov	r1, #0x5
	mov	r2, #0x0
	bl	sub_8122804
.L16:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	gSaveBlock1Ptr
	.word	0x2ae8
.Lfe2:
	.size	 UpdateDewfordTrendPerDay,.Lfe2-UpdateDewfordTrendPerDay
	.align	2, 0
	.globl	sub_81226D8
	.type	 sub_81226D8,function
	.thumb_func
sub_81226D8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r8, r0
	mov	r0, #0x0
	mov	r1, #0
	str	r0, [sp]
	str	r1, [sp, #0x4]
	mov	r0, r8
	bl	SB1ContainsWords
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB376
	b	.L36	@long jump
.LCB376:
	ldr	r4, .L52
	add	r0, r4, #0
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L37	@cond_branch
	add	r0, r4, #0
	bl	FlagSet
	ldr	r0, .L52+0x4
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L37	@cond_branch
	ldr	r0, .L52+0x8
	ldr	r1, [r0]
	mov	r0, r8
	ldrh	r2, [r0]
	ldr	r3, .L52+0xc
	add	r0, r1, r3
	strh	r2, [r0]
	mov	r2, r8
	ldrh	r0, [r2, #0x2]
	add	r3, r3, #0x2
	add	r1, r1, r3
	strh	r0, [r1]
	mov	r0, #0x1
	b	.L51
.L53:
	.align	2, 0
.L52:
	.word	0x893
	.word	0x894
	.word	gSaveBlock1Ptr
	.word	0x2aec
.L37:
	mov	r0, r8
	ldrh	r1, [r0, #0x2]
	lsl	r1, r1, #0x10
	ldrh	r0, [r0]
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	ldr	r0, [sp]
	orr	r0, r0, r1
	str	r0, [sp]
	mov	r0, sp
	bl	sub_8122B28
	mov	r5, #0x0
.L42:
	ldr	r6, .L54
	lsl	r4, r5, #0x3
	ldr	r1, .L54+0x4
	add	r0, r4, r1
	ldr	r1, [r6]
	add	r1, r1, r0
	mov	r0, sp
	mov	r2, #0x0
	bl	sub_8122A58
	lsl	r0, r0, #0x18
	add	r7, r4, #0
	cmp	r0, #0
	beq	.L41	@cond_branch
	mov	r2, #0x4
	mov	ip, r6
	cmp	r2, r5
	bls	.L45	@cond_branch
	ldr	r4, .L54+0x4
.L46:
	ldr	r0, [r6]
	lsl	r3, r2, #0x3
	add	r0, r0, r4
	add	r3, r0, r3
	sub	r2, r2, #0x1
	lsl	r1, r2, #0x3
	add	r0, r0, r1
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [r3]
	str	r1, [r3, #0x4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	cmp	r2, r5
	bhi	.L46	@cond_branch
.L45:
	mov	r3, ip
	ldr	r2, [r3]
	ldr	r0, .L54+0x4
	add	r2, r2, r0
	add	r2, r2, r7
	ldr	r0, [sp]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	cmp	r5, #0x4
	bne	.L48	@cond_branch
	mov	r0, r8
	bl	sub_80EDC60
.L48:
	mov	r0, #0x0
	cmp	r5, #0
	bne	.L51	@cond_branch
	mov	r0, #0x1
	b	.L51
.L55:
	.align	2, 0
.L54:
	.word	gSaveBlock1Ptr
	.word	0x2ae8
.L41:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x4
	bls	.L42	@cond_branch
	ldr	r2, [r6]
	ldr	r1, .L56
	add	r2, r2, r1
	ldr	r0, [sp]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	mov	r0, r8
	bl	sub_80EDC60
.L36:
	mov	r0, #0x0
.L51:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L57:
	.align	2, 0
.L56:
	.word	0x2b08
.Lfe3:
	.size	 sub_81226D8,.Lfe3-sub_81226D8
	.align	2, 0
	.type	 sub_8122804,function
	.thumb_func
sub_8122804:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	mov	r2, #0x0
	cmp	r2, r7
	bcs	.L60	@cond_branch
.L62:
	add	r1, r2, #0x1
	lsl	r0, r1, #0x10
	lsr	r5, r0, #0x10
	mov	r8, r1
	cmp	r5, r7
	bcs	.L61	@cond_branch
	lsl	r0, r2, #0x3
	mov	r1, r9
	add	r6, r1, r0
.L66:
	lsl	r0, r5, #0x3
	mov	r1, r9
	add	r4, r1, r0
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, sl
	bl	sub_8122A58
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L65	@cond_branch
	ldr	r2, [r4]		@ created by thumb_load_double_from_address
	ldr	r3, [r4, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r6]		@ created by thumb_load_double_from_address
	ldr	r1, [r6, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r4]
	str	r1, [r4, #0x4]
	str	r2, [r6]
	str	r3, [r6, #0x4]
.L65:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r7
	bcc	.L66	@cond_branch
.L61:
	mov	r1, r8
	lsl	r0, r1, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r7
	bcc	.L62	@cond_branch
.L60:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 sub_8122804,.Lfe4-sub_8122804
	.align	2, 0
	.globl	ReceiveEasyChatPairsData
	.type	 ReceiveEasyChatPairsData,function
	.thumb_func
ReceiveEasyChatPairsData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r0
	add	r6, r1, #0
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r0, r4, #0
	bl	Alloc
	mov	sl, r0
	cmp	r0, #0
	beq	.L71	@cond_branch
	add	r0, r4, #0
	bl	Alloc
	add	r7, r0, #0
	cmp	r7, #0
	bne	.L72	@cond_branch
	mov	r0, sl
	bl	Free
	b	.L71
.L72:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r5, #0x0
	cmp	r5, r9
	bcs	.L75	@cond_branch
.L77:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	mov	r1, r5
	mul	r1, r1, r6
	add	r1, r1, r8
	mov	r2, #0x28
	bl	memcpy
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r9
	bcc	.L77	@cond_branch
.L75:
	mov	r4, sl
	mov	r8, r7
	mov	r3, #0x0
	mov	r5, #0x0
	cmp	r5, r9
	bcs	.L80	@cond_branch
.L82:
	mov	r6, #0x0
.L86:
	add	r0, r7, #0
	add	r1, r4, #0
	add	r2, r3, #0
	str	r3, [sp]
	bl	GetEqualEasyChatPairIndex
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r3, [sp]
	cmp	r0, #0
	bge	.L87	@cond_branch
	ldr	r0, [r4]		@ created by thumb_load_double_from_address
	ldr	r1, [r4, #0x4]		@ created by thumb_load_double_from_address
	mov	r2, r8
	add	r2, r2, #0x8
	mov	r8, r2
	sub	r2, r2, #0x8
	stmia	r2!, {r0, r1}
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	b	.L88
.L87:
	lsl	r0, r0, #0x3
	add	r2, r7, r0
	ldrb	r1, [r2]
	lsl	r1, r1, #0x19
	ldrb	r0, [r4]
	lsl	r0, r0, #0x19
	cmp	r1, r0
	bcs	.L88	@cond_branch
	ldr	r0, [r4]		@ created by thumb_load_double_from_address
	ldr	r1, [r4, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
.L88:
	add	r4, r4, #0x8
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x4
	bls	.L86	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r9
	bcc	.L82	@cond_branch
.L80:
	add	r0, r7, #0
	add	r1, r3, #0
	mov	r2, #0x2
	bl	sub_8122804
	add	r4, r7, #0
	ldr	r0, .L97
	ldr	r0, [r0]
	ldr	r1, .L97+0x4
	add	r1, r1, r0
	mov	r8, r1
	mov	r5, #0x0
.L95:
	ldmia	r4!, {r0, r1}
	mov	r2, r8
	add	r2, r2, #0x8
	mov	r8, r2
	sub	r2, r2, #0x8
	stmia	r2!, {r0, r1}
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x4
	bls	.L95	@cond_branch
	mov	r0, sl
	bl	Free
	add	r0, r7, #0
	bl	Free
.L71:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L98:
	.align	2, 0
.L97:
	.word	gSaveBlock1Ptr
	.word	0x2ae8
.Lfe5:
	.size	 ReceiveEasyChatPairsData,.Lfe5-ReceiveEasyChatPairsData
	.align	2, 0
	.globl	BufferTrendyPhraseString
	.type	 BufferTrendyPhraseString,function
	.thumb_func
BufferTrendyPhraseString:
	push	{lr}
	ldr	r2, .L100
	ldr	r0, .L100+0x4
	ldrh	r1, [r0]
	lsl	r1, r1, #0x3
	ldr	r0, [r2]
	add	r1, r1, r0
	ldr	r0, .L100+0x8
	ldr	r2, .L100+0xc
	add	r1, r1, r2
	mov	r2, #0x2
	mov	r3, #0x1
	bl	ConvertEasyChatWordsToString
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	gSaveBlock1Ptr
	.word	gSpecialVar_0x8004
	.word	gStringVar1
	.word	0x2aec
.Lfe6:
	.size	 BufferTrendyPhraseString,.Lfe6-BufferTrendyPhraseString
	.align	2, 0
	.globl	TrendyPhraseIsOld
	.type	 TrendyPhraseIsOld,function
	.thumb_func
TrendyPhraseIsOld:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r0, .L111
	ldr	r3, [r0]
	ldr	r1, .L111+0x4
	add	r0, r3, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0x19
	lsr	r1, r1, #0x19
	ldr	r2, .L111+0x8
	add	r0, r3, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x19
	sub	r1, r1, r0
	cmp	r1, #0x1
	bgt	.L104	@cond_branch
	ldr	r1, .L111+0xc
	add	r0, r3, r1
	ldrb	r1, [r0]
	mov	r2, #0x40
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L104	@cond_branch
	ldr	r1, .L111+0x10
	add	r0, r3, r1
	ldrb	r1, [r0]
	add	r0, r2, #0
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	neg	r0, r0
	lsr	r4, r0, #0x1f
.L104:
	ldr	r0, .L111+0x14
	strh	r4, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L112:
	.align	2, 0
.L111:
	.word	gSaveBlock1Ptr
	.word	0x2ae8
	.word	0x2af0
	.word	0x2ae9
	.word	0x2af1
	.word	gSpecialVar_Result
.Lfe7:
	.size	 TrendyPhraseIsOld,.Lfe7-TrendyPhraseIsOld
	.align	2, 0
	.globl	GetDewfordHallPaintingNameIndex
	.type	 GetDewfordHallPaintingNameIndex,function
	.thumb_func
GetDewfordHallPaintingNameIndex:
	ldr	r2, .L114
	ldr	r0, .L114+0x4
	ldr	r0, [r0]
	ldr	r3, .L114+0x8
	add	r1, r0, r3
	add	r3, r3, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x7
	and	r0, r0, r1
	strh	r0, [r2]
	bx	lr
.L115:
	.align	2, 0
.L114:
	.word	gSpecialVar_Result
	.word	gSaveBlock1Ptr
	.word	0x2aec
.Lfe8:
	.size	 GetDewfordHallPaintingNameIndex,.Lfe8-GetDewfordHallPaintingNameIndex
	.align	2, 0
	.type	 sub_8122A58,function
	.thumb_func
sub_8122A58:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r2, #0
	cmp	r2, #0x1
	beq	.L123	@cond_branch
	cmp	r2, #0x1
	bgt	.L141	@cond_branch
	cmp	r2, #0
	beq	.L118	@cond_branch
	b	.L117
.L141:
	cmp	r0, #0x2
	beq	.L128	@cond_branch
	b	.L117
.L118:
	ldrb	r0, [r3]
	lsl	r1, r0, #0x19
	ldrb	r0, [r5]
	lsl	r0, r0, #0x19
	cmp	r1, r0
	bhi	.L138	@cond_branch
	cmp	r1, r0
	bcc	.L145	@cond_branch
	ldrh	r0, [r3]
	lsl	r3, r0, #0x12
	ldrh	r0, [r5]
	lsl	r2, r0, #0x12
	lsr	r1, r3, #0x19
	lsr	r0, r2, #0x19
	cmp	r1, r0
	bhi	.L138	@cond_branch
	lsr	r1, r3, #0x19
	lsr	r0, r2, #0x19
	b	.L126
.L123:
	ldrh	r0, [r3]
	lsl	r4, r0, #0x12
	ldrh	r0, [r5]
	lsl	r2, r0, #0x12
	lsr	r1, r4, #0x19
	lsr	r0, r2, #0x19
	cmp	r1, r0
	bhi	.L138	@cond_branch
	lsr	r1, r4, #0x19
	lsr	r0, r2, #0x19
	cmp	r1, r0
	bcc	.L145	@cond_branch
	ldrb	r0, [r3]
	lsl	r1, r0, #0x19
	ldrb	r0, [r5]
	lsl	r0, r0, #0x19
	cmp	r1, r0
	bhi	.L138	@cond_branch
.L126:
	cmp	r1, r0
	bcs	.L117	@cond_branch
.L145:
	mov	r0, #0x0
	b	.L142
.L128:
	ldrb	r0, [r3]
	lsl	r1, r0, #0x19
	ldrb	r0, [r5]
	lsl	r0, r0, #0x19
	cmp	r1, r0
	bhi	.L138	@cond_branch
	cmp	r1, r0
	bcc	.L145	@cond_branch
	ldrh	r0, [r3]
	lsl	r4, r0, #0x12
	ldrh	r0, [r5]
	lsl	r2, r0, #0x12
	lsr	r1, r4, #0x19
	lsr	r0, r2, #0x19
	cmp	r1, r0
	bhi	.L138	@cond_branch
	lsr	r1, r4, #0x19
	lsr	r0, r2, #0x19
	cmp	r1, r0
	bcc	.L145	@cond_branch
	ldrh	r1, [r3, #0x2]
	ldrh	r0, [r5, #0x2]
	cmp	r1, r0
	bhi	.L138	@cond_branch
	cmp	r1, r0
	bcc	.L145	@cond_branch
	ldrh	r1, [r3, #0x4]
	ldrh	r0, [r5, #0x4]
	cmp	r1, r0
	bhi	.L138	@cond_branch
	cmp	r1, r0
	bcc	.L145	@cond_branch
	ldrh	r1, [r3, #0x6]
	ldrh	r0, [r5, #0x6]
	cmp	r1, r0
	bhi	.L138	@cond_branch
	cmp	r1, r0
	bcc	.L145	@cond_branch
.L138:
	mov	r0, #0x1
	b	.L142
.L117:
	bl	Random
	mov	r1, #0x1
	and	r0, r0, r1
.L142:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 sub_8122A58,.Lfe9-sub_8122A58
	.align	2, 0
	.type	 sub_8122B28,function
	.thumb_func
sub_8122B28:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x62
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x32
	bls	.L147	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x62
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x50
	bls	.L147	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x62
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L147:
	add	r1, r4, #0
	add	r1, r1, #0x1e
	mov	r0, #0x7f
	and	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrh	r2, [r5]
	ldr	r0, .L149
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0x1
	bl	__modsi3
	add	r0, r0, #0x1e
	mov	r1, #0x7f
	and	r0, r0, r1
	ldrb	r2, [r5]
	mov	r1, #0x80
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5]
	bl	Random
	strh	r0, [r5, #0x2]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	-0x3f81
.Lfe10:
	.size	 sub_8122B28,.Lfe10-sub_8122B28
	.align	2, 0
	.type	 SB1ContainsWords,function
	.thumb_func
SB1ContainsWords:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r4, #0x0
	ldr	r6, .L159
.L155:
	lsl	r1, r4, #0x3
	ldr	r0, [r6]
	add	r1, r1, r0
	ldr	r0, .L159+0x4
	add	r1, r1, r0
	add	r0, r5, #0
	bl	IsEasyChatPairEqual
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L154	@cond_branch
	mov	r0, #0x1
	b	.L158
.L160:
	.align	2, 0
.L159:
	.word	gSaveBlock1Ptr
	.word	0x2aec
.L154:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x4
	bls	.L155	@cond_branch
	mov	r0, #0x0
.L158:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 SB1ContainsWords,.Lfe11-SB1ContainsWords
	.align	2, 0
	.type	 IsEasyChatPairEqual,function
	.thumb_func
IsEasyChatPairEqual:
	push	{r4, lr}
	add	r3, r0, #0
	add	r2, r1, #0
	mov	r4, #0x0
.L165:
	ldrh	r1, [r3]
	ldrh	r0, [r2]
	add	r2, r2, #0x2
	add	r3, r3, #0x2
	cmp	r1, r0
	beq	.L164	@cond_branch
	mov	r0, #0x0
	b	.L168
.L164:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x1
	bls	.L165	@cond_branch
	mov	r0, #0x1
.L168:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 IsEasyChatPairEqual,.Lfe12-IsEasyChatPairEqual
	.align	2, 0
	.type	 GetEqualEasyChatPairIndex,function
	.thumb_func
GetEqualEasyChatPairIndex:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r7, r1, #0
	lsl	r2, r2, #0x10
	lsr	r6, r2, #0x10
	mov	r4, #0x0
	cmp	r4, r6
	bge	.L171	@cond_branch
.L173:
	add	r1, r5, #0x4
	add	r0, r7, #0x4
	bl	IsEasyChatPairEqual
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L174	@cond_branch
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	b	.L176
.L174:
	add	r5, r5, #0x8
	lsl	r0, r4, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r6
	blt	.L173	@cond_branch
.L171:
	mov	r0, #0x1
	neg	r0, r0
.L176:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 GetEqualEasyChatPairIndex,.Lfe13-GetEqualEasyChatPairIndex
.text
	.align	2, 0

