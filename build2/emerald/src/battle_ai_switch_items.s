@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	GetAIPartyIndexes
	.type	 GetAIPartyIndexes,function
	.thumb_func
GetAIPartyIndexes:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r3, r1, #0
	add	r4, r2, #0
	ldr	r0, .L11
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0xf
	and	r1, r1, r2
	add	r2, r0, #0
	cmp	r1, #0
	beq	.L3	@cond_branch
	ldr	r0, .L11+0x4
	ldrh	r1, [r0]
	ldr	r0, .L11+0x8
	cmp	r1, r0
	bne	.L3	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L3	@cond_branch
	mov	r0, #0x0
	str	r0, [r3]
	b	.L9
.L12:
	.align	2, 0
.L11:
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent_B
	.word	0xffff
.L3:
	ldr	r1, [r2]
	ldr	r0, .L13
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L5	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L6	@cond_branch
	str	r0, [r3]
	mov	r0, #0x3
	b	.L10
.L14:
	.align	2, 0
.L13:
	.word	0xc08000
.L6:
	mov	r0, #0x3
	str	r0, [r3]
	b	.L9
.L5:
	str	r1, [r3]
.L9:
	mov	r0, #0x6
.L10:
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 GetAIPartyIndexes,.Lfe1-GetAIPartyIndexes
	.align	2, 0
	.type	 ShouldSwitchIfAllBadMoves,function
	.thumb_func
ShouldSwitchIfAllBadMoves:
	push	{lr}
	ldr	r0, .L19
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	mov	r2, #0xaa
	lsl	r2, r2, #0x1
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L16	@cond_branch
	mov	r0, #0x0
	b	.L18
.L20:
	.align	2, 0
.L19:
	.word	gBattleResources
.L16:
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L21
	ldrb	r0, [r0]
	ldr	r1, .L21+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x6
	strb	r1, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
.L18:
	pop	{r1}
	bx	r1
.L22:
	.align	2, 0
.L21:
	.word	gActiveBattler
	.word	gBattleStruct
.Lfe2:
	.size	 ShouldSwitchIfAllBadMoves,.Lfe2-ShouldSwitchIfAllBadMoves
	.align	2, 0
	.type	 ShouldSwitchIfPerishSong,function
	.thumb_func
ShouldSwitchIfPerishSong:
	push	{lr}
	ldr	r1, .L27
	ldr	r0, .L27+0x4
	ldrb	r2, [r0]
	lsl	r3, r2, #0x2
	add	r1, r3, r1
	ldr	r0, [r1]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L24	@cond_branch
	ldr	r0, .L27+0x8
	add	r1, r3, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x12]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bne	.L24	@cond_branch
	ldr	r0, .L27+0xc
	ldr	r0, [r0]
	add	r0, r2, r0
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x6
	strb	r1, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L26
.L28:
	.align	2, 0
.L27:
	.word	gStatuses3
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gBattleStruct
.L24:
	mov	r0, #0x0
.L26:
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 ShouldSwitchIfPerishSong,.Lfe3-ShouldSwitchIfPerishSong
	.align	2, 0
	.type	 ShouldSwitchIfWonderGuard,function
	.thumb_func
ShouldSwitchIfWonderGuard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	ldr	r0, .L61
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB216
	b	.L42	@long jump
.LCB216:
	ldr	r0, .L61+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	ldr	r4, .L61+0x8
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x19
	beq	.L31	@cond_branch
	b	.L42
.L62:
	.align	2, 0
.L61:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gBattleMons
.L59:
	ldrb	r0, [r7]
	ldr	r1, .L63
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	strb	r5, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L57
.L64:
	.align	2, 0
.L63:
	.word	gBattleStruct
.L31:
	ldr	r0, [sp, #0x8]
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	add	r4, r4, #0xc
	mov	r8, r4
	ldr	r7, .L65
.L35:
	lsl	r0, r5, #0x1
	ldr	r4, .L65+0x4
	ldrb	r2, [r4]
	mov	r1, #0x5c
	mul	r1, r1, r2
	add	r0, r0, r1
	add	r0, r0, r8
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L34	@cond_branch
	add	r1, r2, #0
	add	r2, r6, #0
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r7
	bhi	.L42	@cond_branch
.L34:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L35	@cond_branch
	ldrb	r0, [r4]
	add	r2, sp, #0x4
	mov	r1, sp
	bl	GetAIPartyIndexes
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L65+0x8
	mov	sl, r1
	cmp	r0, #0
	bne	.L39	@cond_branch
	ldr	r0, .L65+0xc
	mov	sl, r0
.L39:
	ldr	r5, [sp]
	b	.L60
.L66:
	.align	2, 0
.L65:
	.word	0x1fff
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
.L44:
	mov	r0, #0x64
	mov	r7, r5
	mul	r7, r7, r0
	mov	r1, sl
	add	r4, r1, r7
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L43	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L43	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L67
	cmp	r0, r1
	beq	.L43	@cond_branch
	ldr	r1, .L67+0x4
	ldr	r0, .L67+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L43	@cond_branch
	ldr	r0, [sp, #0x8]
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
	mov	r8, r7
	ldr	r0, .L67+0xc
	mov	r9, r0
.L52:
	add	r1, r4, #0
	add	r1, r1, #0xd
	mov	r0, sl
	add	r0, r0, r8
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L51	@cond_branch
	ldr	r7, .L67+0x8
	ldrb	r1, [r7]
	add	r2, r6, #0
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r9
	bls	.L51	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.LCB435
	b	.L59	@long jump
.LCB435:
.L51:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L52	@cond_branch
.L43:
	add	r5, r5, #0x1
.L60:
	ldr	r0, [sp, #0x4]
	cmp	r5, r0
	blt	.L44	@cond_branch
.L42:
	mov	r0, #0x0
.L57:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L68:
	.align	2, 0
.L67:
	.word	0x4b7
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	0x1fff
.Lfe4:
	.size	 ShouldSwitchIfWonderGuard,.Lfe4-ShouldSwitchIfWonderGuard
	.align	2, 0
	.type	 FindMonThatAbsorbsOpponentsMove,function
	.thumb_func
FindMonThatAbsorbsOpponentsMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r0, #0x1
	bl	HasSuperEffectiveMoveAgainstOpponents
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L70	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB497
	b	.L88	@long jump
.LCB497:
.L70:
	ldr	r1, .L104
	ldr	r5, .L104+0x4
	ldrb	r3, [r5]
	lsl	r0, r3, #0x1
	add	r4, r0, r1
	ldrh	r1, [r4]
	cmp	r1, #0
	bne	.LCB508
	b	.L88	@long jump
.LCB508:
	ldr	r0, .L104+0x8
	cmp	r1, r0
	bne	.LCB513
	b	.L88	@long jump
.LCB513:
	ldr	r2, .L104+0xc
	ldrh	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.LCB524
	b	.L88	@long jump
.LCB524:
	ldr	r0, .L104+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L74	@cond_branch
	mov	r8, r3
	mov	r0, r8
	bl	GetBattlerPosition
	mov	r4, #0x2
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L104+0x14
	ldrb	r1, [r1]
	ldr	r2, .L104+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L75	@cond_branch
	ldrb	r7, [r5]
	b	.L77
.L105:
	.align	2, 0
.L104:
	.word	gLastLandedMoves
	.word	gActiveBattler
	.word	0xffff
	.word	gBattleMoves
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L75:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	b	.L77
.L74:
	add	r7, r3, #0
	mov	r8, r7
.L77:
	ldr	r3, .L106
	ldr	r1, .L106+0x4
	ldr	r2, .L106+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x3]
	add	r4, r2, #0
	cmp	r0, #0xa
	bne	.L78	@cond_branch
	mov	r0, #0x12
	mov	sl, r0
	b	.L79
.L107:
	.align	2, 0
.L106:
	.word	gBattleMoves
	.word	gLastLandedMoves
	.word	gActiveBattler
.L78:
	cmp	r0, #0xb
	bne	.L80	@cond_branch
	mov	r1, #0xb
	mov	sl, r1
	b	.L79
.L80:
	cmp	r0, #0xd
	beq	.LCB627
	b	.L88	@long jump
.LCB627:
	mov	r2, #0xa
	mov	sl, r2
.L79:
	ldr	r1, .L108
	ldrb	r3, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x20]
	cmp	r0, sl
	bne	.L84	@cond_branch
	b	.L88
.L109:
	.align	2, 0
.L108:
	.word	gBattleMons
.L103:
	ldr	r0, .L110
	ldrb	r0, [r0]
	ldr	r1, .L110+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	strb	r5, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L102
.L111:
	.align	2, 0
.L110:
	.word	gActiveBattler
	.word	gBattleStruct
.L84:
	add	r2, sp, #0x4
	add	r0, r3, #0
	mov	r1, sp
	bl	GetAIPartyIndexes
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r2, .L112
	str	r2, [sp, #0x8]
	cmp	r0, #0
	bne	.L85	@cond_branch
	ldr	r0, .L112+0x4
	str	r0, [sp, #0x8]
.L85:
	ldr	r5, [sp]
	ldr	r0, [sp, #0x4]
	cmp	r5, r0
	bge	.L88	@cond_branch
	ldr	r1, .L112+0x8
	mov	r9, r1
.L90:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r2, [sp, #0x8]
	add	r6, r2, r0
	add	r0, r6, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L89	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L89	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L112+0xc
	cmp	r0, r1
	beq	.L89	@cond_branch
	ldr	r1, .L112+0x10
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L89	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L89	@cond_branch
	ldr	r0, .L112+0x14
	ldr	r1, [r0]
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L89	@cond_branch
	add	r0, r7, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L89	@cond_branch
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r6, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L98	@cond_branch
	lsl	r0, r4, #0x3
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrh	r0, [r0, #0x1a]
	b	.L99
.L113:
	.align	2, 0
.L112:
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBaseStats
	.word	0x4b7
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
.L98:
	lsl	r0, r4, #0x3
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrh	r0, [r0, #0x18]
.L99:
	cmp	sl, r0
	bne	.L89	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB803
	b	.L103	@long jump
.LCB803:
.L89:
	add	r5, r5, #0x1
	ldr	r0, [sp, #0x4]
	cmp	r5, r0
	blt	.L90	@cond_branch
.L88:
	mov	r0, #0x0
.L102:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 FindMonThatAbsorbsOpponentsMove,.Lfe5-FindMonThatAbsorbsOpponentsMove
	.align	2, 0
	.type	 ShouldSwitchIfNaturalCure,function
	.thumb_func
ShouldSwitchIfNaturalCure:
	push	{r4, r5, lr}
	ldr	r3, .L129
	ldr	r5, .L129+0x4
	ldrb	r4, [r5]
	mov	r0, #0x5c
	mov	r2, r4
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L126	@cond_branch
	add	r1, r2, r3
	ldrh	r0, [r1, #0x20]
	cmp	r0, #0x1e
	bne	.L126	@cond_branch
	ldrh	r0, [r1, #0x2e]
	ldrh	r1, [r1, #0x2a]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bcc	.L126	@cond_branch
	ldr	r1, .L129+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L119	@cond_branch
	ldr	r0, .L129+0xc
	cmp	r1, r0
	bne	.L118	@cond_branch
.L119:
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L118	@cond_branch
	ldrb	r0, [r5]
	b	.L127
.L130:
	.align	2, 0
.L129:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gLastLandedMoves
	.word	0xffff
.L118:
	ldr	r2, .L131
	ldr	r1, .L131+0x4
	ldr	r4, .L131+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L120	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L120	@cond_branch
	ldrb	r0, [r4]
	b	.L127
.L132:
	.align	2, 0
.L131:
	.word	gBattleMoves
	.word	gLastLandedMoves
	.word	gActiveBattler
.L120:
	mov	r0, #0x8
	mov	r1, #0x1
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L128	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x1
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L128	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L124	@cond_branch
.L126:
	mov	r0, #0x0
	b	.L125
.L124:
	ldr	r0, .L133
	ldrb	r0, [r0]
.L127:
	ldr	r1, .L133+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x6
	strb	r1, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
.L128:
	mov	r0, #0x1
.L125:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L134:
	.align	2, 0
.L133:
	.word	gActiveBattler
	.word	gBattleStruct
.Lfe6:
	.size	 ShouldSwitchIfNaturalCure,.Lfe6-ShouldSwitchIfNaturalCure
	.align	2, 0
	.type	 HasSuperEffectiveMoveAgainstOpponents,function
	.thumb_func
HasSuperEffectiveMoveAgainstOpponents:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L162
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r7, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L162+0x4
	ldrb	r1, [r0]
	ldr	r2, .L162+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L136	@cond_branch
	mov	r4, #0x0
	ldr	r0, .L162+0xc
	mov	r9, r0
	ldr	r0, .L162+0x10
	mov	r8, r0
.L140:
	lsl	r1, r4, #0x1
	ldr	r0, .L162
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r9
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L139	@cond_branch
	add	r1, r2, #0
	add	r2, r5, #0
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r8
	bls	.L139	@cond_branch
	cmp	r6, #0
	bne	.L161	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L161	@cond_branch
.L139:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L140	@cond_branch
.L136:
	ldr	r0, .L162+0x14
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L146	@cond_branch
	b	.L147
.L163:
	.align	2, 0
.L162:
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons+0xc
	.word	0x1fff
	.word	gBattleTypeFlags
.L160:
.L161:
	mov	r0, #0x1
	b	.L157
.L146:
	mov	r1, #0x2
	add	r0, r7, #0
	eor	r0, r0, r1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L164
	ldrb	r1, [r0]
	ldr	r2, .L164+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L147	@cond_branch
	mov	r4, #0x0
	ldr	r0, .L164+0x8
	mov	r8, r0
	ldr	r7, .L164+0xc
.L151:
	lsl	r1, r4, #0x1
	ldr	r0, .L164+0x10
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r8
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L150	@cond_branch
	add	r1, r2, #0
	add	r2, r5, #0
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r7
	bls	.L150	@cond_branch
	cmp	r6, #0
	bne	.L160	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L161	@cond_branch
.L150:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L151	@cond_branch
.L147:
	mov	r0, #0x0
.L157:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L165:
	.align	2, 0
.L164:
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons+0xc
	.word	0x1fff
	.word	gActiveBattler
.Lfe7:
	.size	 HasSuperEffectiveMoveAgainstOpponents,.Lfe7-HasSuperEffectiveMoveAgainstOpponents
	.align	2, 0
	.type	 AreStatsRaised,function
	.thumb_func
AreStatsRaised:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r1, .L174
	ldr	r0, .L174+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x18
	add	r2, r0, r1
	mov	r3, #0x7
.L170:
	ldrb	r1, [r2]
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r0, #0x6
	ble	.L169	@cond_branch
	sub	r1, r1, #0x6
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L169:
	add	r2, r2, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L170	@cond_branch
	mov	r0, #0x0
	cmp	r4, #0x3
	bls	.L173	@cond_branch
	mov	r0, #0x1
.L173:
	pop	{r4}
	pop	{r1}
	bx	r1
.L175:
	.align	2, 0
.L174:
	.word	gBattleMons
	.word	gActiveBattler
.Lfe8:
	.size	 AreStatsRaised,.Lfe8-AreStatsRaised
	.align	2, 0
	.type	 FindMonWithFlagsAndSuperEffective,function
	.thumb_func
FindMonWithFlagsAndSuperEffective:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x8]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0xc]
	ldr	r1, .L212
	ldr	r5, .L212+0x4
	ldrb	r3, [r5]
	lsl	r0, r3, #0x1
	add	r4, r0, r1
	ldrh	r1, [r4]
	cmp	r1, #0
	bne	.LCB1276
	b	.L188	@long jump
.LCB1276:
	ldr	r0, .L212+0x8
	cmp	r1, r0
	bne	.LCB1281
	b	.L188	@long jump
.LCB1281:
	ldr	r0, .L212+0xc
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.LCB1288
	b	.L188	@long jump
.LCB1288:
	ldr	r2, .L212+0x10
	ldrh	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.LCB1299
	b	.L188	@long jump
.LCB1299:
	ldr	r0, .L212+0x14
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L181	@cond_branch
	mov	r8, r3
	mov	r0, r8
	bl	GetBattlerPosition
	mov	r4, #0x2
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L212+0x18
	ldrb	r1, [r1]
	ldr	r2, .L212+0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L182	@cond_branch
	ldrb	r5, [r5]
	mov	sl, r5
	b	.L184
.L213:
	.align	2, 0
.L212:
	.word	gLastLandedMoves
	.word	gActiveBattler
	.word	0xffff
	.word	gLastHitBy
	.word	gBattleMoves
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L182:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	b	.L184
.L210:
	ldrb	r0, [r5]
	ldr	r1, .L214
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	strb	r6, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L209
.L215:
	.align	2, 0
.L214:
	.word	gBattleStruct
.L181:
	mov	r8, r3
	mov	sl, r8
.L184:
	ldr	r4, .L216
	ldrb	r0, [r4]
	add	r2, sp, #0x4
	mov	r1, sp
	bl	GetAIPartyIndexes
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r2, .L216+0x4
	str	r2, [sp, #0x10]
	cmp	r0, #0
	bne	.L185	@cond_branch
	ldr	r0, .L216+0x8
	str	r0, [sp, #0x10]
.L185:
	ldr	r6, [sp]
	b	.L211
.L217:
	.align	2, 0
.L216:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
.L190:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, [sp, #0x10]
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.LCB1436
	b	.L189	@long jump
.LCB1436:
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L189	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L218
	cmp	r0, r1
	beq	.L189	@cond_branch
	ldr	r1, .L218+0x4
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	beq	.L189	@cond_branch
	mov	r2, sl
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	beq	.L189	@cond_branch
	ldr	r0, .L218+0x8
	ldr	r1, [r0]
	mov	r2, r8
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r6, r0
	beq	.L189	@cond_branch
	mov	r2, sl
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r6, r0
	beq	.L189	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r5, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L198	@cond_branch
	lsl	r0, r4, #0x3
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L218+0xc
	add	r0, r0, r1
	ldrh	r2, [r0, #0x1a]
	b	.L199
.L219:
	.align	2, 0
.L218:
	.word	0x4b7
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBaseStats
.L198:
	lsl	r0, r4, #0x3
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r2, .L220
	add	r0, r0, r2
	ldrh	r2, [r0, #0x18]
.L199:
	ldr	r1, .L220+0x4
	ldr	r5, .L220+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	add	r1, r4, #0
	bl	CalcPartyMonTypeEffectivenessMultiplier
	ldr	r0, .L220+0xc
	ldrh	r0, [r0]
	ldr	r1, [sp, #0x8]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L189	@cond_branch
	ldr	r0, .L220+0x10
	ldrb	r1, [r5]
	add	r1, r1, r0
	ldrb	r1, [r1]
	mov	r8, r1
	mov	r4, #0x0
	mov	r0, #0x64
	mov	r7, r6
	mul	r7, r7, r0
	ldr	r2, .L220+0x14
	mov	r9, r2
.L204:
	add	r1, r4, #0
	add	r1, r1, #0xd
	ldr	r2, [sp, #0x10]
	add	r0, r2, r7
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L203	@cond_branch
	ldr	r5, .L220+0x8
	ldrb	r1, [r5]
	mov	r2, r8
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r9
	bls	.L203	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp, #0xc]
	bl	__modsi3
	cmp	r0, #0
	bne	.LCB1585
	b	.L210	@long jump
.LCB1585:
.L203:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L204	@cond_branch
.L189:
	add	r6, r6, #0x1
.L211:
	ldr	r0, [sp, #0x4]
	cmp	r6, r0
	bge	.LCB1601
	b	.L190	@long jump
.LCB1601:
.L188:
	mov	r0, #0x0
.L209:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L221:
	.align	2, 0
.L220:
	.word	gBaseStats
	.word	gLastLandedMoves
	.word	gActiveBattler
	.word	gMoveResultFlags
	.word	gLastHitBy
	.word	0x1fff
.Lfe9:
	.size	 FindMonWithFlagsAndSuperEffective,.Lfe9-FindMonWithFlagsAndSuperEffective
	.align	2, 0
	.type	 ShouldSwitch,function
	.thumb_func
ShouldSwitch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	ldr	r1, .L257
	ldr	r4, .L257+0x4
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L257+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1643
	b	.L253	@long jump
.LCB1643:
	ldr	r1, .L257+0xc
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1652
	b	.L253	@long jump
.LCB1652:
	add	r0, r2, #0
	bl	IsAbilityPreventingEscape
	cmp	r0, #0
	beq	.LCB1657
	b	.L253	@long jump
.LCB1657:
	ldr	r0, .L257+0x10
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1664
	b	.L253	@long jump
.LCB1664:
	mov	r0, #0x0
	mov	r9, r0
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L227	@cond_branch
	ldrb	r7, [r4]
	add	r0, r7, #0
	bl	GetBattlerPosition
	mov	r5, #0x2
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L257+0x14
	ldrb	r1, [r1]
	ldr	r2, .L257+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L228	@cond_branch
	ldrb	r6, [r4]
	b	.L230
.L258:
	.align	2, 0
.L257:
	.word	gBattleMons
	.word	gActiveBattler
	.word	0x4002000
	.word	gStatuses3
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L228:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L230
.L227:
	ldrb	r6, [r4]
	add	r7, r6, #0
.L230:
	ldr	r4, .L259
	ldrb	r0, [r4]
	add	r2, sp, #0x4
	mov	r1, sp
	bl	GetAIPartyIndexes
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L259+0x4
	mov	r8, r1
	cmp	r0, #0
	bne	.L231	@cond_branch
	ldr	r0, .L259+0x8
	mov	r8, r0
.L231:
	ldr	r5, [sp]
	b	.L256
.L260:
	.align	2, 0
.L259:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
.L236:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L235	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L235	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L261
	cmp	r0, r1
	beq	.L235	@cond_branch
	ldr	r1, .L261+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L235	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L235	@cond_branch
	ldr	r0, .L261+0x8
	ldr	r1, [r0]
	add	r0, r7, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L235	@cond_branch
	add	r0, r6, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L235	@cond_branch
	mov	r0, #0x1
	add	r9, r9, r0
.L235:
	add	r5, r5, #0x1
.L256:
	ldr	r0, [sp, #0x4]
	cmp	r5, r0
	blt	.L236	@cond_branch
	mov	r1, r9
	cmp	r1, #0
	beq	.L253	@cond_branch
	bl	ShouldSwitchIfAllBadMoves
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L254	@cond_branch
	bl	ShouldSwitchIfPerishSong
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L254	@cond_branch
	bl	ShouldSwitchIfWonderGuard
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L254	@cond_branch
	bl	FindMonThatAbsorbsOpponentsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L254	@cond_branch
	bl	ShouldSwitchIfNaturalCure
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L254	@cond_branch
	mov	r0, #0x0
	bl	HasSuperEffectiveMoveAgainstOpponents
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L253	@cond_branch
	bl	AreStatsRaised
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L253	@cond_branch
	mov	r0, #0x8
	mov	r1, #0x2
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L254	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x3
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L253	@cond_branch
.L254:
	mov	r0, #0x1
	b	.L255
.L262:
	.align	2, 0
.L261:
	.word	0x4b7
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
.L253:
	mov	r0, #0x0
.L255:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 ShouldSwitch,.Lfe10-ShouldSwitch
	.align	2, 0
	.globl	AI_TrySwitchOrUseItem
	.type	 AI_TrySwitchOrUseItem,function
	.thumb_func
AI_TrySwitchOrUseItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	ldr	r4, .L285
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r5, r6, #0
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L285+0x4
	mov	r8, r1
	cmp	r0, #0
	bne	.L264	@cond_branch
	ldr	r2, .L285+0x8
	mov	r8, r2
.L264:
	ldr	r7, .L285+0xc
	ldr	r0, [r7]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB1943
	b	.L266	@long jump
.LCB1943:
	bl	ShouldSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1950
	b	.L267	@long jump
.LCB1950:
	ldrb	r0, [r4]
	ldr	r2, .L285+0x10
	ldr	r1, [r2]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x6
	bne	.L268	@cond_branch
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bne	.L269	@cond_branch
	ldr	r0, [r7]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L270	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	b	.L271
.L286:
	.align	2, 0
.L285:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gBattleStruct
.L270:
	add	r0, r5, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x2
	eor	r5, r5, r0
	add	r0, r5, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L271:
	ldr	r0, .L287
	ldrb	r0, [r0]
	add	r2, sp, #0x4
	mov	r1, sp
	bl	GetAIPartyIndexes
	ldr	r4, [sp]
	b	.L284
.L288:
	.align	2, 0
.L287:
	.word	gActiveBattler
.L275:
	mov	r0, #0x64
	mul	r0, r0, r4
	add	r0, r0, r8
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L274	@cond_branch
	ldr	r1, .L289
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L274	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L274	@cond_branch
	ldr	r0, .L289+0x4
	ldr	r1, [r0]
	add	r0, r6, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L274	@cond_branch
	add	r0, r5, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L269	@cond_branch
.L274:
	add	r4, r4, #0x1
.L284:
	ldr	r0, [sp, #0x4]
	cmp	r4, r0
	blt	.L275	@cond_branch
.L269:
	ldr	r0, .L289+0x8
	ldrb	r0, [r0]
	ldr	r2, .L289+0x4
	ldr	r1, [r2]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	strb	r4, [r0]
.L268:
	ldr	r0, .L289+0x8
	ldrb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r1, r0
	add	r1, r0, #0
	add	r1, r1, #0x5c
	mov	r2, #0x9a
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	b	.L263
.L290:
	.align	2, 0
.L289:
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gActiveBattler
.L267:
	bl	ShouldUseItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L263	@cond_branch
.L266:
	ldr	r0, .L291
	ldrb	r0, [r0]
	mov	r2, #0x1
	eor	r2, r2, r0
	lsl	r2, r2, #0x8
	mov	r0, #0x1
	mov	r1, #0x0
	bl	BtlController_EmitTwoReturnValues
.L263:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L292:
	.align	2, 0
.L291:
	.word	gActiveBattler
.Lfe11:
	.size	 AI_TrySwitchOrUseItem,.Lfe11-AI_TrySwitchOrUseItem
	.align	2, 0
	.type	 GetBestMonBatonPass,function
	.thumb_func
GetBestMonBatonPass:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r9, r0
	str	r1, [sp]
	mov	sl, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x4]
	mov	r0, #0x0
	mov	r8, r0
	add	r4, r1, #0
	cmp	r4, sl
	bge	.L295	@cond_branch
	ldr	r3, .L314
.L297:
	lsl	r0, r4, #0x2
	add	r1, r0, r3
	ldr	r1, [r1]
	ldr	r2, [sp, #0x4]
	and	r1, r1, r2
	add	r6, r0, #0
	add	r7, r4, #0x1
	cmp	r1, #0
	bne	.L296	@cond_branch
	mov	r5, #0x0
	b	.L299
.L315:
	.align	2, 0
.L314:
	.word	gBitTable
.L301:
	add	r5, r5, #0x1
.L299:
	cmp	r5, #0x3
	bgt	.L296	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r4
	add	r0, r0, r9
	add	r1, r5, #0
	add	r1, r1, #0xd
	mov	r2, #0x0
	str	r3, [sp, #0x8]
	bl	GetMonData
	ldr	r3, [sp, #0x8]
	cmp	r0, #0xe2
	bne	.L301	@cond_branch
	add	r0, r6, r3
	ldr	r0, [r0]
	mov	r1, r8
	orr	r1, r1, r0
	mov	r8, r1
.L296:
	add	r4, r7, #0
	cmp	r4, sl
	blt	.L297	@cond_branch
.L295:
	ldr	r2, [sp, #0x2c]
	cmp	r2, #0x2
	beq	.L307	@cond_branch
	cmp	r2, #0x2
	ble	.L306	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L306	@cond_branch
.L307:
	mov	r0, r8
	cmp	r0, #0
	beq	.L306	@cond_branch
	mov	r1, sl
	ldr	r2, [sp]
	sub	r5, r1, r2
	ldr	r6, .L316
.L308:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	bl	__modsi3
	ldr	r1, [sp]
	add	r4, r0, r1
	lsl	r0, r4, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r2, r8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L308	@cond_branch
	add	r0, r4, #0
	b	.L313
.L317:
	.align	2, 0
.L316:
	.word	gBitTable
.L306:
	mov	r0, #0x6
.L313:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 GetBestMonBatonPass,.Lfe12-GetBestMonBatonPass
	.align	2, 0
	.type	 GestBestMonOffensive,function
	.thumb_func
GestBestMonOffensive:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	str	r0, [sp]
	str	r1, [sp, #0x4]
	str	r2, [sp, #0x8]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0xc]
	mov	r0, #0x0
	str	r0, [sp, #0x10]
.L321:
	mov	r1, #0x0
	str	r1, [sp, #0x14]
	mov	r2, #0x6
	str	r2, [sp, #0x18]
	ldr	r7, [sp, #0x4]
	b	.L343
.L325:
	ldr	r0, .L344
	lsl	r1, r7, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r1, #0
	ldr	r2, [sp, #0xc]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L324	@cond_branch
	ldr	r0, [sp, #0x10]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L324	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r7
	ldr	r1, [sp]
	add	r0, r1, r0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L344+0x4
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x6]
	add	r2, r0, #0
	ldrb	r6, [r1, #0x7]
	mov	r9, r6
	mov	r0, #0x5c
	ldr	r1, [sp, #0x40]
	mul	r0, r0, r1
	ldr	r1, .L344+0x8
	add	r0, r0, r1
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r5, [r1]
	mov	sl, r5
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	mov	r8, r0
	add	r0, r2, #0
	add	r1, r5, #0
	str	r2, [sp, #0x1c]
	bl	GetTypeModifier
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x4
	ldr	r2, [sp, #0x1c]
	cmp	r6, r2
	beq	.L327	@cond_branch
	add	r0, r6, #0
	add	r1, r5, #0
	bl	GetTypeModifier
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mul	r4, r4, r0
	ldr	r2, [sp, #0x1c]
.L327:
	cmp	r8, sl
	beq	.L328	@cond_branch
	add	r0, r2, #0
	mov	r1, r8
	str	r2, [sp, #0x1c]
	bl	GetTypeModifier
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mul	r4, r4, r0
	ldr	r2, [sp, #0x1c]
	cmp	r9, r2
	beq	.L328	@cond_branch
	mov	r0, r9
	mov	r1, r8
	bl	GetTypeModifier
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mul	r4, r4, r0
.L328:
	ldr	r2, [sp, #0x14]
	cmp	r2, r4
	bcs	.L324	@cond_branch
	str	r4, [sp, #0x14]
	str	r7, [sp, #0x18]
.L324:
	add	r7, r7, #0x1
.L343:
	ldr	r0, [sp, #0x8]
	cmp	r7, r0
	blt	.L325	@cond_branch
	ldr	r1, [sp, #0x18]
	cmp	r1, #0x6
	beq	.L332	@cond_branch
	mov	r7, #0x0
	mov	r0, #0x64
	mov	r5, r1
	mul	r5, r5, r0
	ldr	r6, .L344+0xc
	ldr	r2, [sp, #0x40]
	lsl	r4, r2, #0x18
.L336:
	add	r1, r7, #0
	add	r1, r1, #0xd
	ldr	r2, [sp]
	add	r0, r2, r5
	bl	GetMonData
	cmp	r0, #0
	beq	.L335	@cond_branch
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L344+0x10
	ldrb	r1, [r1]
	lsr	r2, r4, #0x18
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bhi	.L334	@cond_branch
.L335:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L336	@cond_branch
.L334:
	cmp	r7, #0x4
	beq	.L339	@cond_branch
	ldr	r0, [sp, #0x18]
	b	.L342
.L345:
	.align	2, 0
.L344:
	.word	gBitTable
	.word	gBaseStats
	.word	gBattleMons
	.word	0x1fff
	.word	gActiveBattler
.L339:
	ldr	r0, .L346
	ldr	r2, [sp, #0x18]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	ldr	r1, [sp, #0x10]
	orr	r1, r1, r0
	str	r1, [sp, #0x10]
	b	.L319
.L347:
	.align	2, 0
.L346:
	.word	gBitTable
.L332:
	mov	r2, #0x3f
	str	r2, [sp, #0x10]
.L319:
	ldr	r0, [sp, #0x10]
	cmp	r0, #0x3f
	beq	.LCB2531
	b	.L321	@long jump
.LCB2531:
	mov	r0, #0x6
.L342:
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 GestBestMonOffensive,.Lfe13-GestBestMonOffensive
	.align	2, 0
	.type	 GetBestMonDmg,function
	.thumb_func
GetBestMonDmg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	str	r0, [sp]
	mov	sl, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x4]
	mov	r0, #0x0
	mov	r8, r0
	mov	r2, #0x6
	str	r2, [sp, #0x8]
	ldr	r0, .L362
	mov	r2, r8
	strh	r2, [r0]
	add	r4, r1, #0
	cmp	r4, sl
	bge	.L350	@cond_branch
.L352:
	ldr	r0, .L362+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	ldr	r1, [sp, #0x4]
	and	r0, r0, r1
	add	r2, r4, #0x1
	mov	r9, r2
	cmp	r0, #0
	bne	.L351	@cond_branch
	mov	r6, #0x0
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, [sp]
	add	r5, r1, r0
	ldr	r2, [sp, #0x2c]
	lsl	r7, r2, #0x18
.L357:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r5, #0
	bl	GetMonData
	add	r1, r0, #0
	cmp	r1, #0
	beq	.L356	@cond_branch
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r2, .L362+0x8
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L356	@cond_branch
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L362+0xc
	ldrb	r1, [r1]
	lsr	r2, r7, #0x18
	add	r3, r5, #0
	bl	AI_CalcPartyMonDamage
	cmp	r8, r0
	bge	.L356	@cond_branch
	mov	r8, r0
	str	r4, [sp, #0x8]
.L356:
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L357	@cond_branch
.L351:
	mov	r4, r9
	cmp	r4, sl
	blt	.L352	@cond_branch
.L350:
	ldr	r0, [sp, #0x8]
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L363:
	.align	2, 0
.L362:
	.word	gMoveResultFlags
	.word	gBitTable
	.word	gBattleMoves
	.word	gActiveBattler
.Lfe14:
	.size	 GetBestMonDmg,.Lfe14-GetBestMonDmg
	.align	2, 0
	.globl	GetMostSuitableMonToSwitchInto
	.type	 GetMostSuitableMonToSwitchInto,function
	.thumb_func
GetMostSuitableMonToSwitchInto:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	mov	r9, r0
	ldr	r4, .L390
	ldrb	r2, [r4]
	ldr	r0, .L390+0x4
	ldr	r0, [r0]
	add	r0, r2, r0
	add	r1, r0, #0
	add	r1, r1, #0x5c
	ldrb	r0, [r1]
	cmp	r0, #0x6
	beq	.LCB2692
	b	.L385	@long jump
.LCB2692:
	ldr	r0, .L390+0x8
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L366	@cond_branch
	ldr	r1, .L390+0xc
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	b	.L384
.L391:
	.align	2, 0
.L390:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
.L366:
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L367	@cond_branch
	mov	r8, r2
	mov	r0, r8
	bl	GetBattlerPosition
	mov	r5, #0x2
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L392
	ldrb	r1, [r1]
	ldr	r2, .L392+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L368	@cond_branch
	ldrb	r7, [r4]
	b	.L369
.L393:
	.align	2, 0
.L392:
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L368:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L369:
	mov	r0, #0x1
	mov	r6, r8
	eor	r6, r6, r0
	ldr	r0, .L394
	ldrb	r1, [r0]
	ldr	r2, .L394+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L371	@cond_branch
	mov	r0, #0x2
	eor	r6, r6, r0
	b	.L371
.L395:
	.align	2, 0
.L394:
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L367:
	add	r0, r2, #0
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r7, [r4]
	mov	r8, r7
.L371:
	ldr	r4, .L396
	ldrb	r0, [r4]
	add	r2, sp, #0x8
	add	r1, sp, #0x4
	bl	GetAIPartyIndexes
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L396+0x4
	mov	sl, r1
	cmp	r0, #0
	bne	.L372	@cond_branch
	ldr	r2, .L396+0x8
	mov	sl, r2
.L372:
	ldr	r4, [sp, #0x4]
	b	.L387
.L397:
	.align	2, 0
.L396:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
.L377:
	mov	r0, #0x64
	mul	r0, r0, r4
	mov	r1, sl
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L379	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L379	@cond_branch
	ldr	r1, .L398
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r4
	beq	.L379	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r4
	beq	.L379	@cond_branch
	ldr	r0, .L398+0x4
	ldr	r1, [r0]
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L379	@cond_branch
	add	r0, r7, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L379	@cond_branch
	add	r0, r5, #0
	bl	GetMonAbility
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x36
	bne	.L378	@cond_branch
	ldr	r0, .L398+0x8
	ldrb	r0, [r0]
	add	r1, r6, #0
	bl	IsTruantMonVulnerable
	cmp	r0, #0
	beq	.L378	@cond_branch
.L379:
	ldr	r1, .L398+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, r9
	orr	r1, r1, r0
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	b	.L376
.L399:
	.align	2, 0
.L398:
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBitTable
.L378:
	ldr	r2, [sp, #0xc]
	add	r2, r2, #0x1
	str	r2, [sp, #0xc]
.L376:
	add	r4, r4, #0x1
.L387:
	ldr	r2, [sp, #0x8]
	cmp	r4, r2
	blt	.L377	@cond_branch
	ldr	r1, [sp, #0x4]
	ldr	r0, [sp, #0xc]
	str	r0, [sp]
	mov	r0, sl
	mov	r3, r9
	bl	GetBestMonBatonPass
	cmp	r0, #0x6
	bne	.L384	@cond_branch
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	str	r6, [sp]
	mov	r0, sl
	mov	r3, r9
	bl	GestBestMonOffensive
	cmp	r0, #0x6
	bne	.L384	@cond_branch
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	str	r6, [sp]
	mov	r0, sl
	mov	r3, r9
	bl	GetBestMonDmg
	cmp	r0, #0x6
	bne	.L384	@cond_branch
	mov	r0, #0x6
	b	.L385
.L384:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L385:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 GetMostSuitableMonToSwitchInto,.Lfe15-GetMostSuitableMonToSwitchInto
	.align	2, 0
	.type	 GetAI_ItemType,function
	.thumb_func
GetAI_ItemType:
	push	{r4, lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x22
	bne	.L401	@cond_branch
	mov	r0, #0x1
	b	.L412
.L401:
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L403	@cond_branch
	mov	r0, #0x2
	b	.L412
.L403:
	ldrb	r4, [r2, #0x3]
	mov	r3, #0x3f
	add	r0, r3, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L405	@cond_branch
	mov	r0, #0x3
	b	.L412
.L405:
	ldrb	r1, [r2]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L408	@cond_branch
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0
	bne	.L408	@cond_branch
	ldrb	r0, [r2, #0x2]
	cmp	r0, #0
	beq	.L407	@cond_branch
.L408:
	mov	r0, #0x4
	b	.L412
.L407:
	mov	r0, #0x80
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L410	@cond_branch
	mov	r0, #0x6
	b	.L412
.L410:
	mov	r0, #0x5
.L412:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 GetAI_ItemType,.Lfe16-GetAI_ItemType
	.align	2, 0
	.type	 ShouldUseItem,function
	.thumb_func
ShouldUseItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	mov	sl, r0
	mov	r7, #0x0
	ldr	r0, .L470
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L414	@cond_branch
	ldr	r0, .L470+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.LCB3094
	b	.L466	@long jump
.LCB3094:
.L414:
	ldr	r0, .L470+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r5, .L470+0x8
	cmp	r0, #0
	bne	.L415	@cond_branch
	ldr	r5, .L470+0xc
.L415:
	mov	r1, #0x0
	mov	r8, r1
.L420:
	mov	r0, #0x64
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r4, r5, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L419	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L419	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L470+0x10
	cmp	r0, r1
	beq	.L419	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
.L419:
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x5
	ble	.L420	@cond_branch
	mov	r2, #0x0
	mov	r8, r2
.L426:
	ldr	r1, .L470+0x14
	mov	r0, r8
	cmp	r0, #0
	beq	.L427	@cond_branch
	ldr	r0, [r1]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x54
	ldrb	r0, [r0]
	mov	r2, r8
	sub	r0, r0, r2
	add	r0, r0, #0x1
	cmp	sl, r0
	ble	.LCB3174
	b	.L425	@long jump
.LCB3174:
.L427:
	ldr	r0, [r1]
	ldr	r0, [r0, #0x18]
	mov	r2, r8
	lsl	r1, r2, #0x1
	add	r0, r0, #0x4c
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r9, r0
	str	r1, [sp]
	cmp	r0, #0
	bne	.LCB3187
	b	.L425	@long jump
.LCB3187:
	ldr	r1, .L470+0x18
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.LCB3193
	b	.L425	@long jump
.LCB3193:
	add	r5, r1, #0
	mov	r0, r9
	cmp	r0, #0xcd
	bne	.L430	@cond_branch
	mov	r5, #0x0
.L430:
	mov	r0, r9
	add	r1, r5, #0
	bl	GetAI_ItemType
	ldr	r4, .L470+0x4
	ldrb	r1, [r4]
	lsr	r1, r1, #0x1
	ldr	r3, .L470+0x1c
	ldr	r2, [r3]
	add	r1, r1, r2
	add	r1, r1, #0xc0
	strb	r0, [r1]
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc0
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r0, #0x5
	bls	.LCB3225
	b	.L432	@long jump
.LCB3225:
	lsl	r0, r0, #0x2
	ldr	r1, .L470+0x20
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L471:
	.align	2, 0
.L470:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x4b7
	.word	gBattleResources
	.word	gItemEffectTable
	.word	gBattleStruct
	.word	.L460
	.align	2, 0
	.align	2, 0
.L460:
	.word	.L433
	.word	.L436
	.word	.L441
	.word	.L449
	.word	.L457
	.word	.L466
.L433:
	ldr	r2, .L472
	ldr	r0, .L472+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2e]
	ldrh	r0, [r0, #0x2a]
	lsr	r1, r1, #0x2
	cmp	r0, r1
	bcc	.LCB3266
	b	.L432	@long jump
.LCB3266:
	cmp	r0, #0
	bne	.LCB3268
	b	.L432	@long jump
.LCB3268:
.L469:
	mov	r7, #0x1
	b	.L465
.L473:
	.align	2, 0
.L472:
	.word	gBattleMons
	.word	gActiveBattler
.L436:
	mov	r0, r9
	mov	r1, #0x4
	mov	r2, #0x4
	bl	GetItemEffectParamOffset
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.LCB3289
	b	.L432	@long jump
.LCB3289:
	ldr	r2, .L474
	ldr	r0, .L474+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r0, r2
	ldrh	r2, [r1, #0x2a]
	cmp	r2, #0
	bne	.LCB3300
	b	.L432	@long jump
.LCB3300:
	ldrh	r3, [r1, #0x2e]
	lsr	r0, r3, #0x2
	cmp	r2, r0
	bcc	.L469	@cond_branch
	add	r0, r2, #0
	sub	r0, r3, r0
	add	r1, r5, r4
	ldrb	r1, [r1]
	cmp	r0, r1
	bgt	.LCB3313
	b	.L432	@long jump
.LCB3313:
	b	.L469
.L475:
	.align	2, 0
.L474:
	.word	gBattleMons
	.word	gActiveBattler
.L441:
	ldr	r3, .L476
	ldrb	r0, [r3]
	lsr	r0, r0, #0x1
	ldr	r2, .L476+0x4
	ldr	r1, [r2]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	mov	r1, #0x0
	strb	r1, [r0]
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x20
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L442	@cond_branch
	ldr	r1, .L476+0x8
	ldrb	r4, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L442	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L442:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x10
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L443	@cond_branch
	ldr	r1, .L476+0x8
	ldrb	r4, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L444	@cond_branch
	mov	r0, #0x80
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L443	@cond_branch
.L444:
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L443:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x8
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L445	@cond_branch
	ldr	r1, .L476+0x8
	ldrb	r4, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L445	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L445:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x4
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L446	@cond_branch
	ldr	r1, .L476+0x8
	ldrb	r4, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L446	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L446:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x2
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L447	@cond_branch
	ldr	r1, .L476+0x8
	ldrb	r4, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L447	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L447:
	ldrb	r1, [r5, #0x3]
	mov	r4, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3512
	b	.L432	@long jump
.LCB3512:
	ldr	r1, .L476+0x8
	ldrb	r3, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3524
	b	.L432	@long jump
.LCB3524:
	lsr	r1, r3, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	orr	r0, r0, r4
	strb	r0, [r1]
	b	.L469
.L477:
	.align	2, 0
.L476:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleMons
.L449:
	ldr	r4, .L478
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r3, .L478+0x4
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L478+0x8
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0
	beq	.L432	@cond_branch
	ldrb	r1, [r5]
	mov	r6, #0xf
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L451	@cond_branch
	lsr	r2, r2, #0x1
	ldr	r0, [r3]
	add	r2, r2, r0
	add	r2, r2, #0xc2
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L451:
	ldrb	r1, [r5, #0x1]
	mov	r7, #0xf0
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L452	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	ldrb	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
.L452:
	ldrb	r1, [r5, #0x1]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L453	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L453:
	ldrb	r1, [r5, #0x2]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L454	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	ldrb	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
.L454:
	ldrb	r1, [r5, #0x2]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L455	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
.L455:
	ldrb	r1, [r5]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3671
	b	.L469	@long jump
.LCB3671:
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L469
.L479:
	.align	2, 0
.L478:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gDisableStructs
.L457:
	ldr	r4, .L480
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L480+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0
	beq	.L432	@cond_branch
	ldr	r0, .L480+0x8
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.LCB3721
	b	.L469	@long jump
.LCB3721:
.L432:
	cmp	r7, #0
	beq	.L425	@cond_branch
.L465:
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	ldr	r0, .L480
	ldrb	r0, [r0]
	lsr	r0, r0, #0x1
	ldr	r1, .L480+0xc
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0xb8
	mov	r1, r9
	strh	r1, [r0]
	ldr	r0, .L480+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x4c
	ldr	r2, [sp]
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r7, #0
	b	.L464
.L481:
	.align	2, 0
.L480:
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gSideTimers
	.word	gBattleStruct
	.word	gBattleResources
.L425:
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x3
	bgt	.LCB3773
	b	.L426	@long jump
.LCB3773:
.L466:
	mov	r0, #0x0
.L464:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 ShouldUseItem,.Lfe17-ShouldUseItem
.text
	.align	2, 0

