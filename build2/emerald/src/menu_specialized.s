@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sUnknown_0203CF48,object
	.size	 sUnknown_0203CF48,3
sUnknown_0203CF48:
	.byte	0x0
	.space	2
	.align	2, 0
	.type	 sUnknown_0203CF4C,object
	.size	 sUnknown_0203CF4C,4
sUnknown_0203CF4C:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sUnknown_086253E8,object
sUnknown_086253E8:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x8
	.byte	0x0
	.byte	0x15
	.byte	0x1
	.byte	0x8
	.byte	0x12
	.byte	0xf
	.short	0x18
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0xb
	.byte	0x8
	.byte	0xf
	.short	0x18
	.size	 sUnknown_086253E8,24
	.type	 sPlayerNameTextColors,object
sPlayerNameTextColors:
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.size	 sPlayerNameTextColors,3
	.type	 sEmptyItemName,object
sEmptyItemName:
	.byte	0xff
	.size	 sEmptyItemName,1
	.align	2, 0
	.type	 sConditionGraphScanline,object
	.size	 sConditionGraphScanline,12
sConditionGraphScanline:
	.word	0x4000040
	.word	-0x599fffff
	.byte	0x1
	.space	3
	.type	 sUnknown_08625410,object
sUnknown_08625410:
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x9
	.byte	0x9
	.byte	0xa
	.byte	0xa
	.byte	0xb
	.byte	0xb
	.byte	0xc
	.byte	0xc
	.byte	0xd
	.byte	0xd
	.byte	0xd
	.byte	0xd
	.byte	0xe
	.byte	0xe
	.byte	0xe
	.byte	0xe
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x12
	.byte	0x12
	.byte	0x12
	.byte	0x12
	.byte	0x12
	.byte	0x12
	.byte	0x13
	.byte	0x13
	.byte	0x13
	.byte	0x13
	.byte	0x13
	.byte	0x13
	.byte	0x13
	.byte	0x13
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x15
	.byte	0x15
	.byte	0x15
	.byte	0x15
	.byte	0x15
	.byte	0x15
	.byte	0x15
	.byte	0x15
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x16
	.byte	0x17
	.byte	0x17
	.byte	0x17
	.byte	0x17
	.byte	0x17
	.byte	0x17
	.byte	0x17
	.byte	0x17
	.byte	0x17
	.byte	0x17
	.byte	0x18
	.byte	0x18
	.byte	0x18
	.byte	0x18
	.byte	0x18
	.byte	0x18
	.byte	0x18
	.byte	0x18
	.byte	0x18
	.byte	0x18
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x1a
	.byte	0x1a
	.byte	0x1a
	.byte	0x1a
	.byte	0x1a
	.byte	0x1a
	.byte	0x1a
	.byte	0x1a
	.byte	0x1a
	.byte	0x1a
	.byte	0x1a
	.byte	0x1a
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1b
	.byte	0x1c
	.byte	0x1c
	.byte	0x1c
	.byte	0x1c
	.byte	0x1c
	.byte	0x1c
	.byte	0x1c
	.byte	0x1c
	.byte	0x1c
	.byte	0x1c
	.byte	0x1c
	.byte	0x1c
	.byte	0x1c
	.byte	0x1c
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1d
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x1f
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x23
	.size	 sUnknown_08625410,256
	.align	2, 0
	.type	 sMoveRelearnerWindowTemplates,object
sMoveRelearnerWindowTemplates:
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x10
	.byte	0xc
	.byte	0xf
	.short	0xa
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x10
	.byte	0xc
	.byte	0xf
	.short	0xca
	.byte	0x1
	.byte	0x13
	.byte	0x1
	.byte	0xa
	.byte	0xc
	.byte	0xf
	.short	0x18a
	.byte	0x1
	.byte	0x4
	.byte	0xf
	.byte	0x16
	.byte	0x4
	.byte	0xf
	.short	0x202
	.byte	0x0
	.byte	0x16
	.byte	0x8
	.byte	0x5
	.byte	0x4
	.byte	0xf
	.short	0x25a
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sMoveRelearnerWindowTemplates,48
	.align	2, 0
	.type	 sMoveRelearnerYesNoMenuTemplate,object
	.size	 sMoveRelearnerYesNoMenuTemplate,8
sMoveRelearnerYesNoMenuTemplate:
	.byte	0x0
	.byte	0x16
	.byte	0x8
	.byte	0x5
	.byte	0x4
	.byte	0xf
	.short	0x25a
	.align	2, 0
	.type	 sMoveRelearnerMovesListTemplate,object
	.size	 sMoveRelearnerMovesListTemplate,24
sMoveRelearnerMovesListTemplate:
	.word	0x0
	.word	MoveRelearnerCursorCallback
	.word	0x0
	.short	0x0
	.short	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x21
	.byte	0x31
	.byte	0x0
	.byte	0x1
.text
	.align	2, 0
	.globl	sub_81D1C44
	.type	 sub_81D1C44,function
	.thumb_func
sub_81D1C44:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	ldr	r4, .L10
	lsr	r0, r0, #0x15
	add	r0, r0, #0x8
	bl	Alloc
	str	r0, [r4]
	cmp	r0, #0
	bne	.L3	@cond_branch
	mov	r0, #0x0
	b	.L9
.L11:
	.align	2, 0
.L10:
	.word	sUnknown_0203CF4C
.L3:
	mov	r2, #0x0
	ldr	r4, .L12
	mov	r3, #0xff
.L7:
	add	r0, r2, r4
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x2
	bls	.L7	@cond_branch
	mov	r0, #0x1
.L9:
	pop	{r4}
	pop	{r1}
	bx	r1
.L13:
	.align	2, 0
.L12:
	.word	sUnknown_0203CF48
.Lfe1:
	.size	 sub_81D1C44,.Lfe1-sub_81D1C44
	.align	2, 0
	.globl	sub_81D1C84
	.type	 sub_81D1C84,function
	.thumb_func
sub_81D1C84:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r6, .L18
	add	r5, r4, r6
	ldrb	r0, [r5]
	cmp	r0, #0xff
	bne	.L15	@cond_branch
	cmp	r4, #0x2
	bne	.L16	@cond_branch
	ldr	r0, .L18+0x4
	ldr	r1, [r0, #0x14]		@ created by thumb_load_double_from_address
	ldr	r0, [r0, #0x10]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldr	r0, .L18+0x8
	mov	r1, #0x4
	bl	GetMaxWidthInMenuTable
	lsl	r0, r0, #0x18
	ldr	r2, .L18+0xc
	ldr	r1, [sp]
	and	r1, r1, r2
	orr	r1, r1, r0
	str	r1, [sp]
	mov	r0, sp
	bl	AddWindow
	strb	r0, [r6, #0x2]
	b	.L17
.L19:
	.align	2, 0
.L18:
	.word	sUnknown_0203CF48
	.word	sUnknown_086253E8
	.word	gMailboxMailOptions
	.word	0xffffff
.L16:
	lsl	r0, r4, #0x3
	ldr	r1, .L20
	add	r0, r0, r1
	bl	AddWindow
	strb	r0, [r5]
.L17:
	ldr	r0, .L20+0x4
	add	r0, r4, r0
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	SetStandardWindowBorderStyle
.L15:
	ldr	r0, .L20+0x4
	add	r0, r4, r0
	ldrb	r0, [r0]
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L21:
	.align	2, 0
.L20:
	.word	sUnknown_086253E8
	.word	sUnknown_0203CF48
.Lfe2:
	.size	 sub_81D1C84,.Lfe2-sub_81D1C84
	.align	2, 0
	.globl	sub_81D1D04
	.type	 sub_81D1D04,function
	.thumb_func
sub_81D1D04:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L23
	add	r4, r4, r0
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	bl	RemoveWindow
	mov	r0, #0xff
	strb	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	sUnknown_0203CF48
.Lfe3:
	.size	 sub_81D1D04,.Lfe3-sub_81D1D04
	.align	2, 0
	.type	 sub_81D1D34,function
	.thumb_func
sub_81D1D34:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L26
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L27:
	.align	2, 0
.L26:
	.word	sUnknown_0203CF48
.Lfe4:
	.size	 sub_81D1D34,.Lfe4-sub_81D1D34
	.align	2, 0
	.type	 sub_81D1D44,function
	.thumb_func
sub_81D1D44:
	push	{r4, r5, lr}
	add	sp, sp, #-0x34
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r3, r0
	beq	.L28	@cond_branch
	ldr	r0, .L31
	lsl	r1, r3, #0x3
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	ldr	r0, [r0]
	add	r1, r1, r0
	ldr	r0, .L31+0x4
	add	r1, r1, r0
	add	r0, sp, #0x14
	bl	StringCopy
	add	r0, sp, #0x14
	bl	sub_81DB52C
	add	r0, sp, #0x14
	bl	StringLength
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5
	bhi	.L30	@cond_branch
	add	r0, sp, #0x14
	mov	r1, #0x1
	bl	ConvertInternationalString
.L30:
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	ldr	r0, .L31+0x8
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0xc]
	add	r0, sp, #0x14
	str	r0, [sp, #0x10]
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0x8
	add	r3, r5, #0
	bl	AddTextPrinterParameterized4
.L28:
	add	sp, sp, #0x34
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gSaveBlock1Ptr
	.word	0x294a
	.word	sPlayerNameTextColors
.Lfe5:
	.size	 sub_81D1D44,.Lfe5-sub_81D1D44
	.align	2, 0
	.globl	sub_81D1DC0
	.type	 sub_81D1DC0,function
	.thumb_func
sub_81D1DC0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r5, r0, #0
	mov	r3, #0x0
	ldr	r7, .L39
	ldr	r0, .L39+0x4
	mov	ip, r0
	ldr	r4, .L39+0x8
	ldr	r1, .L39+0xc
	mov	r8, r1
	ldr	r2, .L39+0x10
	mov	r9, r2
	ldr	r0, .L39+0x14
	mov	sl, r0
	ldrb	r1, [r5, #0x5]
	cmp	r3, r1
	bcs	.L35	@cond_branch
	add	r6, r7, #0
	ldr	r2, .L39+0x18
.L37:
	ldr	r1, [r6]
	lsl	r0, r3, #0x3
	add	r0, r0, r1
	str	r2, [r0]
	str	r3, [r0, #0x4]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldrb	r0, [r5, #0x5]
	cmp	r3, r0
	bcc	.L37	@cond_branch
.L35:
	ldr	r2, [r7]
	lsl	r0, r3, #0x3
	add	r0, r0, r2
	mov	r1, ip
	str	r1, [r0]
	mov	r1, #0x2
	neg	r1, r1
	str	r1, [r0, #0x4]
	str	r2, [r4]
	ldrb	r0, [r5, #0x5]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0xc]
	mov	r2, r8
	ldrb	r0, [r2, #0x1]
	strb	r0, [r4, #0x10]
	strb	r1, [r4, #0x11]
	mov	r0, #0x8
	strb	r0, [r4, #0x12]
	strb	r1, [r4, #0x13]
	strh	r0, [r4, #0xe]
	mov	r0, #0x29
	strb	r0, [r4, #0x14]
	mov	r0, #0x31
	strb	r0, [r4, #0x15]
	mov	r0, r9
	str	r0, [r4, #0x4]
	mov	r1, sl
	str	r1, [r4, #0x8]
	mov	r0, #0x1
	strb	r0, [r4, #0x17]
	mov	r0, #0x0
	strb	r0, [r4, #0x16]
	ldrh	r1, [r5, #0x2]
	ldrh	r2, [r5]
	add	r0, r4, #0
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L40:
	.align	2, 0
.L39:
	.word	sUnknown_0203CF4C
	.word	gText_Cancel2
	.word	gMultiuseListMenuTemplate
	.word	sUnknown_0203CF48
	.word	sub_81D1E7C
	.word	sub_81D1D44
	.word	sEmptyItemName
.Lfe6:
	.size	 sub_81D1DC0,.Lfe6-sub_81D1DC0
	.align	2, 0
	.type	 sub_81D1E7C,function
	.thumb_func
sub_81D1E7C:
	push	{lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	beq	.L42	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L42:
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 sub_81D1E7C,.Lfe7-sub_81D1E7C
	.align	2, 0
	.globl	sub_81D1E90
	.type	 sub_81D1E90,function
	.thumb_func
sub_81D1E90:
	push	{r4, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	ldrb	r0, [r4, #0x5]
	ldrb	r1, [r4, #0x4]
	sub	r0, r0, r1
	add	r0, r0, #0x1
	str	r0, [sp]
	mov	r0, #0x6e
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	add	r0, r4, #0x2
	str	r0, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0xc8
	mov	r2, #0xc
	mov	r3, #0x94
	bl	AddScrollIndicatorArrowPairParameterized
	strb	r0, [r4, #0x9]
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 sub_81D1E90,.Lfe8-sub_81D1E90
	.align	2, 0
	.globl	sub_81D1EC0
	.type	 sub_81D1EC0,function
	.thumb_func
sub_81D1EC0:
	push	{lr}
	ldr	r0, .L45
	ldr	r0, [r0]
	bl	Free
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	sUnknown_0203CF4C
.Lfe9:
	.size	 sub_81D1EC0,.Lfe9-sub_81D1EC0
	.align	2, 0
	.globl	InitConditionGraphData
	.type	 InitConditionGraphData,function
	.thumb_func
InitConditionGraphData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r3, r0, #0
	mov	r6, #0x0
	mov	r7, #0x0
.L51:
	mov	r2, #0x0
	lsl	r5, r6, #0x2
	add	r0, r6, #0x1
	mov	sl, r0
	add	r4, r5, #0
.L55:
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r4, r0
	add	r0, r3, r0
	add	r1, r0, #0
	add	r1, r1, #0x64
	strh	r7, [r1]
	add	r0, r0, #0x66
	strh	r7, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x9
	bls	.L55	@cond_branch
	mov	r2, #0x0
	mov	r9, r2
	str	r5, [sp]
	mov	r1, #0x9b
	mov	r8, r1
	mov	r4, #0x5b
	mov	ip, r4
.L60:
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	add	r1, r6, r0
	add	r1, r3, r1
	mov	r4, r9
	strb	r4, [r1]
	lsl	r0, r0, #0x2
	ldr	r1, [sp]
	add	r0, r1, r0
	add	r0, r3, r0
	mov	r4, r8
	strh	r4, [r0, #0x14]
	mov	r1, ip
	strh	r1, [r0, #0x16]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L60	@cond_branch
	add	r1, r3, r5
	mov	r2, #0x96
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	strh	r7, [r0]
	mov	r4, #0x97
	lsl	r4, r4, #0x1
	add	r0, r1, r4
	strh	r7, [r0]
	mov	r1, sl
	lsl	r0, r1, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x4
	bls	.L51	@cond_branch
	mov	r2, #0xd5
	lsl	r2, r2, #0x2
	add	r0, r3, r2
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r4, .L63
	add	r0, r3, r4
	strh	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L64:
	.align	2, 0
.L63:
	.word	0x352
.Lfe10:
	.size	 InitConditionGraphData,.Lfe10-InitConditionGraphData
	.align	2, 0
	.globl	sub_81D1F84
	.type	 sub_81D1F84,function
	.thumb_func
sub_81D1F84:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r8, r0
	str	r1, [sp]
	mov	r9, r2
	mov	r7, #0x0
.L69:
	lsl	r4, r7, #0x2
	ldr	r1, [sp]
	add	r0, r4, r1
	ldrh	r1, [r0]
	lsl	r5, r1, #0x8
	mov	r2, r9
	add	r0, r4, r2
	ldrh	r0, [r0]
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	mov	r1, #0xa
	bl	__divsi3
	add	r6, r0, #0
	mov	r3, #0x0
	add	r7, r7, #0x1
	mov	sl, r7
	mov	ip, r4
.L73:
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	add	r0, r0, r8
	asr	r2, r5, #0x8
	asr	r1, r5, #0x7
	mov	r7, #0x1
	and	r1, r1, r7
	add	r2, r2, r1
	add	r0, r0, #0x64
	strh	r2, [r0]
	add	r5, r5, r6
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x8
	bls	.L73	@cond_branch
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r4, r0
	add	r0, r0, r8
	mov	r1, r9
	add	r2, r4, r1
	ldrh	r1, [r2]
	add	r0, r0, #0x64
	strh	r1, [r0]
	ldr	r7, [sp]
	add	r0, r4, r7
	ldrh	r1, [r0, #0x2]
	lsl	r5, r1, #0x8
	ldrh	r0, [r2, #0x2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	mov	r1, #0xa
	bl	__divsi3
	add	r6, r0, #0
	mov	r3, #0x0
	str	r4, [sp, #0x4]
	mov	r0, #0x1
	mov	ip, r0
.L78:
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r1, [sp, #0x4]
	add	r0, r1, r0
	add	r0, r0, r8
	asr	r2, r5, #0x8
	asr	r1, r5, #0x7
	mov	r7, ip
	and	r1, r1, r7
	add	r2, r2, r1
	add	r0, r0, #0x66
	strh	r2, [r0]
	add	r5, r5, r6
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x8
	bls	.L78	@cond_branch
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r4, r0
	add	r0, r0, r8
	mov	r2, r9
	add	r1, r4, r2
	ldrh	r1, [r1, #0x2]
	add	r0, r0, #0x66
	strh	r1, [r0]
	mov	r7, sl
	lsl	r0, r7, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, #0x4
	bls	.L69	@cond_branch
	ldr	r1, .L81
	add	r1, r1, r8
	mov	r0, #0x0
	strh	r0, [r1]
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	0x352
.Lfe11:
	.size	 sub_81D1F84,.Lfe11-sub_81D1F84
	.align	2, 0
	.globl	TransitionConditionGraph
	.type	 TransitionConditionGraph,function
	.thumb_func
TransitionConditionGraph:
	push	{r4, lr}
	add	r1, r0, #0
	ldr	r0, .L88
	add	r4, r1, r0
	ldrh	r0, [r4]
	cmp	r0, #0x9
	bls	.L84	@cond_branch
	mov	r0, #0x0
	b	.L87
.L89:
	.align	2, 0
.L88:
	.word	0x352
.L84:
	add	r0, r1, #0
	bl	sub_81D2230
	ldrh	r1, [r4]
	add	r1, r1, #0x1
	strh	r1, [r4]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0xa
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
.L87:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 TransitionConditionGraph,.Lfe12-TransitionConditionGraph
	.align	2, 0
	.globl	InitConditionGraphState
	.type	 InitConditionGraphState,function
	.thumb_func
InitConditionGraphState:
	ldr	r1, .L91
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
	bx	lr
.L92:
	.align	2, 0
.L91:
	.word	0x355
.Lfe13:
	.size	 InitConditionGraphState,.Lfe13-InitConditionGraphState
	.align	2, 0
	.globl	SetupConditionGraphScanlineParams
	.type	 SetupConditionGraphScanlineParams,function
	.thumb_func
SetupConditionGraphScanlineParams:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	ldr	r1, .L101
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L95	@cond_branch
	cmp	r0, #0x1
	beq	.L96	@cond_branch
	b	.L100
.L102:
	.align	2, 0
.L101:
	.word	0x355
.L95:
	bl	ScanlineEffect_Clear
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
	b	.L99
.L96:
	mov	r0, sp
	ldr	r1, .L103
	ldmia	r1!, {r2, r3, r5}
	stmia	r0!, {r2, r3, r5}
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L100:
	mov	r0, #0x0
.L99:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L104:
	.align	2, 0
.L103:
	.word	sConditionGraphScanline
.Lfe14:
	.size	 SetupConditionGraphScanlineParams,.Lfe14-SetupConditionGraphScanlineParams
	.align	2, 0
	.globl	sub_81D2108
	.type	 sub_81D2108,function
	.thumb_func
sub_81D2108:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r6, r0, #0
	mov	r1, #0xd5
	lsl	r1, r1, #0x2
	add	r0, r6, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L105	@cond_branch
	add	r0, r6, #0
	bl	sub_81D24A4
	add	r0, r6, #0
	bl	sub_81D2634
	mov	r7, #0x0
	ldr	r5, .L112
	mov	ip, r5
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	mov	r9, r0
	mov	r1, #0xa0
	lsl	r1, r1, #0x1
	add	r1, r6, r1
	str	r1, [sp]
	ldr	r5, .L112+0x4
	mov	r8, r5
	mov	r0, #0xa1
	lsl	r0, r0, #0x1
	add	r0, r6, r0
	str	r0, [sp, #0x4]
	mov	r1, #0x92
	lsl	r1, r1, #0x2
	add	r1, r6, r1
	str	r1, [sp, #0x8]
	ldr	r5, .L112+0x8
	add	r5, r5, r6
	mov	sl, r5
.L110:
	add	r2, r7, #0
	add	r2, r2, #0x37
	lsl	r3, r2, #0x2
	mov	r0, r9
	add	r0, r3, r0
	str	r0, [sp, #0xc]
	add	r3, r3, ip
	lsl	r4, r7, #0x2
	ldr	r1, [sp]
	add	r0, r1, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x8
	ldr	r5, [sp, #0x4]
	add	r1, r5, r4
	ldrh	r1, [r1]
	orr	r0, r0, r1
	strh	r0, [r3]
	mov	r1, r8
	and	r0, r0, r1
	ldr	r5, [sp, #0xc]
	strh	r0, [r5]
	lsl	r2, r2, #0x1
	add	r2, r2, #0x1
	lsl	r2, r2, #0x1
	mov	r0, r9
	add	r3, r2, r0
	add	r2, r2, ip
	ldr	r1, [sp, #0x8]
	add	r0, r1, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x8
	add	r4, r4, sl
	ldrh	r1, [r4]
	orr	r0, r0, r1
	strh	r0, [r2]
	mov	r5, r8
	and	r0, r0, r5
	strh	r0, [r3]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, #0x41
	bls	.L110	@cond_branch
	mov	r0, #0xd5
	lsl	r0, r0, #0x2
	add	r1, r6, r0
	mov	r0, #0x0
	strb	r0, [r1]
.L105:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	gScanlineEffectRegBuffers
	.word	0xffff
	.word	0x24a
.Lfe15:
	.size	 sub_81D2108,.Lfe15-sub_81D2108
	.align	2, 0
	.globl	SetConditionGraphIOWindows
	.type	 SetConditionGraphIOWindows,function
	.thumb_func
SetConditionGraphIOWindows:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bls	.L115	@cond_branch
	mov	r1, #0x0
.L115:
	mov	r0, #0x1
	lsl	r0, r0, r1
	mov	r5, #0x1f
	bic	r5, r5, r0
	mov	r0, #0x40
	mov	r1, #0xf0
	bl	SetGpuReg
	mov	r0, #0x42
	mov	r1, #0x9b
	bl	SetGpuReg
	ldr	r4, .L116
	mov	r0, #0x44
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x46
	add	r1, r4, #0
	bl	SetGpuReg
	ldr	r1, .L116+0x4
	mov	r0, #0x48
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r5, #0
	bl	SetGpuReg
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L117:
	.align	2, 0
.L116:
	.word	0x3879
	.word	0x3f3f
.Lfe16:
	.size	 SetConditionGraphIOWindows,.Lfe16-SetConditionGraphIOWindows
	.align	2, 0
	.globl	sub_81D2230
	.type	 sub_81D2230,function
	.thumb_func
sub_81D2230:
	push	{r4, r5, r6, r7, lr}
	mov	ip, r0
	mov	r4, #0x0
	mov	r7, #0x96
	lsl	r7, r7, #0x1
	add	r7, r7, ip
	ldr	r6, .L124
	add	r6, r6, ip
	mov	r5, ip
	add	r5, r5, #0x64
.L122:
	lsl	r2, r4, #0x2
	add	r3, r7, r2
	ldrh	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r5, r2
	ldr	r0, [r2]
	str	r0, [r3]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x4
	bls	.L122	@cond_branch
	mov	r1, #0xd5
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	mov	r0, #0x1
	strb	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	0x352
.Lfe17:
	.size	 sub_81D2230,.Lfe17-sub_81D2230
	.align	2, 0
	.type	 sub_81D2278,function
	.thumb_func
sub_81D2278:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	str	r0, [sp]
	add	r6, r1, #0
	add	r5, r2, #0
	str	r3, [sp, #0x4]
	ldr	r0, [sp, #0x38]
	ldr	r7, [sp, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r3, #0x2]
	cmp	r0, r1
	bcs	.L127	@cond_branch
	add	r2, r0, #0
	mov	sl, r2
	ldrh	r0, [r3, #0x2]
	ldrh	r1, [r5]
	lsl	r4, r1, #0xa
	ldrh	r3, [r3]
	str	r3, [sp, #0x8]
	b	.L164
.L127:
	ldrh	r0, [r5, #0x2]
	ldr	r1, [sp, #0x4]
	ldrh	r1, [r1, #0x2]
	mov	sl, r1
	ldr	r2, [sp, #0x4]
	ldrh	r1, [r2]
	lsl	r4, r1, #0xa
	ldrh	r3, [r5]
	str	r3, [sp, #0x8]
	mov	r2, sl
.L164:
	sub	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	cmp	r0, #0
	beq	.L129	@cond_branch
	sub	r0, r3, r1
	lsl	r0, r0, #0xa
	mov	r1, r8
	bl	__divsi3
	str	r0, [sp, #0xc]
.L129:
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	cmp	r7, #0
	bne	.L131	@cond_branch
	mov	r0, sl
	sub	r0, r0, #0x38
	lsl	r0, r0, #0x2
	add	r6, r6, r0
	mov	r5, #0x0
	mov	r3, r9
	lsl	r3, r3, #0x1
	mov	ip, r3
	ldr	r0, [sp, #0x8]
	add	r0, r0, r9
	str	r0, [sp, #0x10]
	cmp	r7, r8
	bcs	.L146	@cond_branch
	mov	r7, #0x1
.L135:
	add	r2, r3, r6
	asr	r1, r4, #0xa
	asr	r0, r4, #0x9
	and	r0, r0, r7
	add	r1, r1, r0
	add	r1, r1, r9
	strh	r1, [r2]
	ldr	r1, [sp, #0xc]
	add	r4, r4, r1
	add	r6, r6, #0x4
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r8
	bcc	.L135	@cond_branch
	b	.L146
.L131:
	ldr	r2, [sp, #0xc]
	cmp	r2, #0
	ble	.L138	@cond_branch
	mov	r0, sl
	sub	r0, r0, #0x38
	lsl	r0, r0, #0x2
	add	r7, r7, r0
	mov	r5, #0x0
	mov	r3, r9
	lsl	r3, r3, #0x1
	mov	ip, r3
	ldr	r0, [sp, #0x8]
	add	r0, r0, r9
	str	r0, [sp, #0x10]
	cmp	r5, r8
	bcs	.L140	@cond_branch
	ldr	r0, .L166
	cmp	r4, r0
	bgt	.L140	@cond_branch
	mov	r1, ip
	str	r1, [sp, #0x14]
.L141:
	ldr	r3, [sp, #0x14]
	add	r2, r3, r7
	asr	r1, r4, #0xa
	asr	r0, r4, #0x9
	mov	r3, #0x1
	and	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, r9
	strh	r1, [r2]
	ldr	r0, [sp, #0xc]
	add	r4, r4, r0
	add	r7, r7, #0x4
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r8
	bcs	.L140	@cond_branch
	ldr	r1, .L166
	cmp	r4, r1
	ble	.L141	@cond_branch
.L140:
	mov	r2, sl
	add	r1, r2, r5
	ldr	r3, [sp]
	mov	r2, #0xd4
	lsl	r2, r2, #0x2
	add	r0, r3, r2
	strh	r1, [r0]
	ldrh	r0, [r0]
	sub	r0, r0, #0x38
	lsl	r0, r0, #0x2
	add	r6, r6, r0
	cmp	r5, r8
	bcs	.L146	@cond_branch
	mov	r3, ip
	mov	r7, #0x1
.L148:
	add	r2, r3, r6
	asr	r1, r4, #0xa
	asr	r0, r4, #0x9
	and	r0, r0, r7
	add	r1, r1, r0
	add	r1, r1, r9
	strh	r1, [r2]
	ldr	r0, [sp, #0xc]
	add	r4, r4, r0
	add	r6, r6, #0x4
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r8
	bcc	.L148	@cond_branch
.L146:
	sub	r0, r6, #0x4
	b	.L137
.L167:
	.align	2, 0
.L166:
	.word	0x26bff
.L138:
	ldr	r1, [sp, #0xc]
	cmp	r1, #0
	bge	.L151	@cond_branch
	mov	r0, sl
	sub	r0, r0, #0x38
	lsl	r0, r0, #0x2
	add	r6, r6, r0
	mov	r5, #0x0
	mov	r2, r9
	lsl	r2, r2, #0x1
	mov	ip, r2
	ldr	r3, [sp, #0x8]
	add	r3, r3, r9
	str	r3, [sp, #0x10]
	cmp	r5, r8
	bcs	.L153	@cond_branch
	add	r3, r2, r6
	asr	r1, r4, #0xa
	asr	r0, r4, #0x9
	mov	r2, #0x1
	and	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r9
	strh	r1, [r3]
	b	.L165
.L156:
	ldr	r0, [sp, #0xc]
	add	r4, r4, r0
	add	r6, r6, #0x4
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r8
	bcs	.L153	@cond_branch
	mov	r1, ip
	add	r3, r1, r6
	asr	r2, r4, #0xa
	asr	r0, r4, #0x9
	mov	r1, #0x1
	and	r0, r0, r1
	add	r2, r2, r0
	add	r2, r2, r9
	strh	r2, [r3]
.L165:
	ldr	r0, .L168
	cmp	r4, r0
	bgt	.L156	@cond_branch
	mov	r0, #0x9b
	strh	r0, [r3]
.L153:
	mov	r2, sl
	add	r1, r2, r5
	ldr	r3, [sp]
	mov	r2, #0xd4
	lsl	r2, r2, #0x2
	add	r0, r3, r2
	strh	r1, [r0]
	ldrh	r0, [r0]
	sub	r0, r0, #0x38
	lsl	r0, r0, #0x2
	add	r7, r7, r0
	cmp	r5, r8
	bcs	.L159	@cond_branch
	mov	r3, ip
	mov	r6, #0x1
.L161:
	add	r2, r3, r7
	asr	r1, r4, #0xa
	asr	r0, r4, #0x9
	and	r0, r0, r6
	add	r1, r1, r0
	add	r1, r1, r9
	strh	r1, [r2]
	ldr	r0, [sp, #0xc]
	add	r4, r4, r0
	add	r7, r7, #0x4
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r8
	bcc	.L161	@cond_branch
.L159:
	sub	r0, r7, #0x4
	b	.L137
.L169:
	.align	2, 0
.L168:
	.word	0x26bff
.L151:
	ldr	r1, [sp]
	mov	r2, #0xd4
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	mov	r3, sl
	strh	r3, [r0]
	mov	r0, sl
	sub	r0, r0, #0x38
	lsl	r0, r0, #0x2
	add	r6, r6, r0
	add	r7, r7, r0
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x2]
	ldr	r1, [sp, #0x4]
	ldrh	r0, [r1]
	strh	r0, [r7]
	mov	r0, #0x9b
	strh	r0, [r7, #0x2]
	b	.L126
.L137:
	add	r0, r0, ip
	mov	r2, sp
	ldrh	r2, [r2, #0x10]
	strh	r2, [r0]
.L126:
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 sub_81D2278,.Lfe18-sub_81D2278
	.align	2, 0
	.type	 sub_81D24A4,function
	.thumb_func
sub_81D24A4:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	mov	r0, #0x97
	lsl	r0, r0, #0x1
	add	r2, r4, r0
	mov	r3, #0x99
	lsl	r3, r3, #0x1
	add	r1, r4, r3
	ldrh	r0, [r2]
	ldrh	r3, [r1]
	cmp	r0, r3
	bcs	.L171	@cond_branch
	add	r7, r0, #0
	mov	r0, #0xa0
	lsl	r0, r0, #0x1
	add	r1, r4, r0
	mov	r3, #0x96
	lsl	r3, r3, #0x1
	add	r2, r4, r3
	sub	r0, r0, #0x10
	add	r3, r4, r0
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	bl	sub_81D2278
	b	.L172
.L171:
	ldrh	r7, [r1]
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r3, #0x98
	lsl	r3, r3, #0x1
	add	r2, r4, r3
	mov	r0, #0x96
	lsl	r0, r0, #0x1
	add	r3, r4, r0
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	bl	sub_81D2278
.L172:
	mov	r1, #0xa0
	lsl	r1, r1, #0x1
	add	r5, r4, r1
	mov	r3, #0x98
	lsl	r3, r3, #0x1
	add	r2, r4, r3
	mov	r0, #0x9a
	lsl	r0, r0, #0x1
	add	r6, r4, r0
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	add	r1, r5, #0
	add	r3, r6, #0
	bl	sub_81D2278
	mov	r2, #0x0
	mov	r1, #0x9b
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	mov	r3, #0x9d
	lsl	r3, r3, #0x1
	add	r1, r4, r3
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	bhi	.L173	@cond_branch
	mov	r2, #0x1
.L173:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r3, r4, r0
	str	r2, [sp]
	mov	r1, #0x92
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	sub_81D2278
	mov	r2, #0x38
	cmp	r2, r7
	bcs	.L175	@cond_branch
	add	r6, r5, #0
	mov	r3, #0x0
	mov	r0, #0xa1
	lsl	r0, r0, #0x1
	add	r5, r4, r0
.L177:
	add	r0, r2, #0
	sub	r0, r0, #0x38
	lsl	r0, r0, #0x2
	add	r1, r6, r0
	strh	r3, [r1]
	add	r0, r5, r0
	strh	r3, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r7
	bcc	.L177	@cond_branch
.L175:
	mov	r1, #0x97
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	ldrh	r2, [r0]
	mov	r3, #0xd4
	lsl	r3, r3, #0x2
	add	r0, r4, r3
	ldrh	r1, [r0]
	cmp	r2, r1
	bhi	.L180	@cond_branch
	mov	r1, #0xa0
	lsl	r1, r1, #0x1
	add	r3, r4, r1
	mov	r5, #0x9b
	add	r1, r0, #0
.L182:
	add	r0, r2, #0
	sub	r0, r0, #0x38
	lsl	r0, r0, #0x2
	add	r0, r3, r0
	strh	r5, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrh	r0, [r1]
	cmp	r2, r0
	bls	.L182	@cond_branch
.L180:
	mov	r2, #0x9b
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r3, #0xd4
	lsl	r3, r3, #0x2
	add	r0, r4, r3
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L184	@cond_branch
	add	r0, r1, #0
.L184:
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x79
	bhi	.L186	@cond_branch
	mov	r0, #0xa0
	lsl	r0, r0, #0x1
	add	r6, r4, r0
	mov	r3, #0x0
	mov	r1, #0xa1
	lsl	r1, r1, #0x1
	add	r5, r4, r1
.L188:
	add	r0, r2, #0
	sub	r0, r0, #0x38
	lsl	r0, r0, #0x2
	add	r1, r6, r0
	strh	r3, [r1]
	add	r0, r5, r0
	strh	r3, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x79
	bls	.L188	@cond_branch
.L186:
	mov	r2, #0x38
	mov	r3, #0xa0
	lsl	r3, r3, #0x1
	add	r5, r4, r3
	mov	r0, #0xa1
	lsl	r0, r0, #0x1
	add	r4, r4, r0
	mov	r6, #0x9b
.L193:
	add	r0, r2, #0
	sub	r0, r0, #0x38
	lsl	r1, r0, #0x2
	add	r3, r5, r1
	ldrh	r0, [r3]
	cmp	r0, #0
	bne	.L192	@cond_branch
	add	r0, r4, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L192	@cond_branch
	strh	r6, [r3]
.L192:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x79
	bls	.L193	@cond_branch
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 sub_81D24A4,.Lfe19-sub_81D24A4
	.align	2, 0
	.type	 sub_81D2634,function
	.thumb_func
sub_81D2634:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	mov	r0, #0x97
	lsl	r0, r0, #0x1
	add	r2, r4, r0
	mov	r3, #0x9f
	lsl	r3, r3, #0x1
	add	r1, r4, r3
	ldrh	r0, [r2]
	ldrh	r5, [r1]
	cmp	r0, r5
	bcs	.L197	@cond_branch
	add	r6, r0, #0
	mov	r0, #0x92
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	sub	r3, r3, #0x12
	add	r2, r4, r3
	mov	r5, #0x9e
	lsl	r5, r5, #0x1
	add	r3, r4, r5
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	bl	sub_81D2278
	b	.L198
.L197:
	ldrh	r6, [r1]
	mov	r0, #0x92
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	mov	r3, #0x9e
	lsl	r3, r3, #0x1
	add	r2, r4, r3
	mov	r5, #0x96
	lsl	r5, r5, #0x1
	add	r3, r4, r5
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	bl	sub_81D2278
.L198:
	mov	r0, #0x92
	lsl	r0, r0, #0x2
	add	r5, r4, r0
	mov	r1, #0x9e
	lsl	r1, r1, #0x1
	add	r2, r4, r1
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r3, r4, r0
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_81D2278
	cmp	r6, #0x38
	ble	.L200	@cond_branch
	mov	r0, #0x0
	add	r1, r5, #0
	add	r2, r6, #0
	sub	r2, r2, #0x38
.L202:
	strh	r0, [r1]
	strh	r0, [r1, #0x2]
	add	r1, r1, #0x4
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L202	@cond_branch
.L200:
	mov	r1, #0x97
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	ldrh	r2, [r0]
	mov	r3, #0xd4
	lsl	r3, r3, #0x2
	add	r0, r4, r3
	ldrh	r5, [r0]
	cmp	r2, r5
	bgt	.L205	@cond_branch
	mov	r3, #0x9b
	add	r1, r0, #0
	lsl	r0, r2, #0x2
	mov	r5, #0xb5
	lsl	r5, r5, #0x1
	add	r0, r0, r5
	add	r0, r0, r4
.L207:
	strh	r3, [r0]
	add	r0, r0, #0x4
	add	r2, r2, #0x1
	ldrh	r5, [r1]
	cmp	r2, r5
	ble	.L207	@cond_branch
.L205:
	mov	r1, #0x9d
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	ldrh	r0, [r0]
	add	r1, r0, #0x1
	mov	r2, #0xd4
	lsl	r2, r2, #0x2
	add	r0, r4, r2
	ldrh	r0, [r0]
	cmp	r0, r1
	bge	.L209	@cond_branch
	add	r0, r1, #0
.L209:
	add	r2, r0, #0
	cmp	r2, #0x79
	bgt	.L211	@cond_branch
	mov	r1, #0x0
	lsl	r0, r2, #0x2
	mov	r3, #0xb4
	lsl	r3, r3, #0x1
	add	r0, r0, r3
	add	r0, r0, r4
.L213:
	strh	r1, [r0]
	strh	r1, [r0, #0x2]
	add	r0, r0, #0x4
	add	r2, r2, #0x1
	cmp	r2, #0x79
	ble	.L213	@cond_branch
.L211:
	mov	r3, #0x0
	mov	r5, #0x92
	lsl	r5, r5, #0x2
	add	r1, r4, r5
	mov	r2, #0x41
.L218:
	ldrh	r0, [r1]
	ldrh	r4, [r1, #0x2]
	cmp	r0, r4
	bcc	.L217	@cond_branch
	strh	r3, [r1, #0x2]
	strh	r3, [r1]
.L217:
	add	r1, r1, #0x4
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L218	@cond_branch
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 sub_81D2634,.Lfe20-sub_81D2634
	.align	2, 0
	.globl	sub_81D2754
	.type	 sub_81D2754,function
	.thumb_func
sub_81D2754:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r6, r0, #0
	mov	r8, r1
	ldr	r1, .L231
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r2, [r0]
	add	r6, r6, #0x1
	mov	r0, #0x9b
	mov	r3, r8
	strh	r0, [r3]
	mov	r0, #0x5b
	sub	r0, r0, r2
	strh	r0, [r3, #0x2]
	mov	r7, #0x40
	mov	r0, #0x0
	mov	ip, r0
	mov	r2, #0x1
	mov	r9, r2
	ldr	r3, .L231+0x4
	mov	sl, r3
.L225:
	add	r0, r7, #0
	add	r0, r0, #0x33
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r1, ip
	lsl	r0, r1, #0x18
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r0, r0, r2
	lsr	r3, r0, #0x18
	mov	ip, r3
	cmp	r0, #0
	bge	.L226	@cond_branch
	mov	r0, #0x4
	mov	ip, r0
.L226:
	mov	r1, ip
	lsl	r0, r1, #0x18
	asr	r4, r0, #0x18
	cmp	r4, #0x2
	bne	.L227	@cond_branch
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L227:
	ldrb	r0, [r6]
	ldr	r2, .L231
	add	r0, r0, r2
	ldrb	r2, [r0]
	add	r6, r6, #0x1
	lsl	r0, r4, #0x2
	mov	r1, r8
	add	r3, r0, r1
	add	r0, r7, #0
	add	r0, r0, #0x40
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mul	r0, r0, r2
	asr	r5, r0, #0x8
	add	r0, r5, #0
	add	r0, r0, #0x9b
	strh	r0, [r3]
	lsl	r0, r7, #0x1
	add	r0, r0, sl
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, r2
	mul	r1, r1, r0
	asr	r1, r1, #0x8
	mov	r0, #0x5b
	sub	r0, r0, r1
	strh	r0, [r3, #0x2]
	cmp	r4, #0x2
	bgt	.L224	@cond_branch
	cmp	r2, #0x20
	bne	.L229	@cond_branch
	cmp	r4, #0x2
	beq	.L224	@cond_branch
.L229:
	add	r0, r5, #0
	add	r0, r0, #0x9c
	strh	r0, [r3]
.L224:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	cmp	r0, #0x4
	bls	.L225	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L232:
	.align	2, 0
.L231:
	.word	sUnknown_08625410
	.word	gSineTable
.Lfe21:
	.size	 sub_81D2754,.Lfe21-sub_81D2754
	.align	2, 0
	.globl	InitMoveRelearnerWindows
	.type	 InitMoveRelearnerWindows,function
	.thumb_func
InitMoveRelearnerWindows:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L241
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0xe0
	bl	LoadUserWindowBorderGfx
	ldr	r0, .L241+0x4
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r4, #0x0
.L237:
	add	r0, r4, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x4
	bls	.L237	@cond_branch
	cmp	r5, #0
	bne	.L239	@cond_branch
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1
	mov	r3, #0xe
	bl	DrawStdFrameWithCustomTileAndPalette
	b	.L240
.L242:
	.align	2, 0
.L241:
	.word	sMoveRelearnerWindowTemplates
	.word	gUnknown_0860F074
.L239:
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x1
	mov	r3, #0xe
	bl	DrawStdFrameWithCustomTileAndPalette
.L240:
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x3
	bl	PutWindowTilemap
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x1
	mov	r3, #0xe
	bl	DrawStdFrameWithCustomTileAndPalette
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x1
	mov	r3, #0xe
	bl	DrawStdFrameWithCustomTileAndPalette
	bl	nullsub_79
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 InitMoveRelearnerWindows,.Lfe22-InitMoveRelearnerWindows
	.align	2, 0
	.type	 nullsub_79,function
	.thumb_func
nullsub_79:
	bx	lr
.Lfe23:
	.size	 nullsub_79,.Lfe23-nullsub_79
	.align	2, 0
	.globl	LoadMoveRelearnerMovesList
	.type	 LoadMoveRelearnerMovesList,function
	.thumb_func
LoadMoveRelearnerMovesList:
	push	{r4, r5, r6, r7, lr}
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r3, .L247
	add	r2, r3, #0
	ldr	r1, .L247+0x4
	ldmia	r1!, {r5, r6, r7}
	stmia	r2!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r2!, {r5, r6, r7}
	strh	r4, [r3, #0xc]
	str	r0, [r3]
	cmp	r4, #0x5
	bhi	.L245	@cond_branch
	strh	r4, [r3, #0xe]
	b	.L246
.L248:
	.align	2, 0
.L247:
	.word	gMultiuseListMenuTemplate
	.word	sMoveRelearnerMovesListTemplate
.L245:
	mov	r0, #0x6
	strh	r0, [r3, #0xe]
.L246:
	ldrb	r0, [r3, #0xe]
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 LoadMoveRelearnerMovesList,.Lfe24-LoadMoveRelearnerMovesList
	.align	2, 0
	.type	 MoveRelearnerLoadBattleMoveDescription,function
	.thumb_func
MoveRelearnerLoadBattleMoveDescription:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	mov	r9, r0
	mov	r0, #0x0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r5, .L255
	mov	r0, #0x1
	add	r1, r5, #0
	mov	r2, #0x80
	bl	GetStringCenterAlignXOffset
	add	r4, r0, #0
	lsl	r3, r4, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0xff
	mov	r8, r0
	str	r0, [sp, #0x4]
	mov	r7, #0x0
	str	r7, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r5, #0
	bl	AddTextPrinterParameterized
	ldr	r5, .L255+0x4
	mov	r1, #0x29
	mov	sl, r1
	str	r1, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r5, #0
	mov	r3, #0x4
	bl	AddTextPrinterParameterized
	ldr	r5, .L255+0x8
	mov	r0, #0x1
	add	r1, r5, #0
	mov	r2, #0x6a
	bl	GetStringRightAlignXOffset
	add	r4, r0, #0
	lsl	r3, r4, #0x18
	lsr	r3, r3, #0x18
	mov	r1, #0x19
	str	r1, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r5, #0
	bl	AddTextPrinterParameterized
	ldr	r5, .L255+0xc
	mov	r0, #0x1
	add	r1, r5, #0
	mov	r2, #0x6a
	bl	GetStringRightAlignXOffset
	add	r4, r0, #0
	lsl	r3, r4, #0x18
	lsr	r3, r3, #0x18
	mov	r1, sl
	str	r1, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r5, #0
	bl	AddTextPrinterParameterized
	mov	r0, #0x2
	neg	r0, r0
	cmp	r9, r0
	bne	.L250	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L249
.L256:
	.align	2, 0
.L255:
	.word	gText_MoveRelearnerBattleMoves
	.word	gText_MoveRelearnerPP
	.word	gText_MoveRelearnerPower
	.word	gText_MoveRelearnerAccuracy
.L250:
	mov	r1, r9
	lsl	r0, r1, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	ldr	r1, .L257
	add	r6, r0, r1
	ldrb	r1, [r6, #0x3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	ldr	r1, .L257+0x4
	add	r5, r0, r1
	mov	r0, #0x19
	str	r0, [sp]
	mov	r1, r8
	str	r1, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r5, #0
	mov	r3, #0x4
	bl	AddTextPrinterParameterized
	ldr	r1, .L257+0x8
	mov	r0, #0x1
	mov	r2, #0x0
	bl	GetStringWidth
	add	r4, r0, #0x4
	ldrb	r1, [r6, #0x5]
	add	r0, sp, #0xc
	mov	r2, #0x0
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	lsl	r3, r4, #0x18
	lsr	r3, r3, #0x18
	mov	r0, sl
	str	r0, [sp]
	mov	r1, r8
	str	r1, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, sp, #0xc
	bl	AddTextPrinterParameterized
	ldrb	r0, [r6, #0x2]
	cmp	r0, #0x1
	bhi	.L251	@cond_branch
	ldr	r5, .L257+0xc
	b	.L252
.L258:
	.align	2, 0
.L257:
	.word	gBattleMoves
	.word	gTypeNames
	.word	gText_MoveRelearnerPP
	.word	gText_ThreeDashes
.L251:
	ldrb	r1, [r6, #0x2]
	add	r0, sp, #0xc
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r5, sp, #0xc
.L252:
	mov	r0, #0x19
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r5, #0
	mov	r3, #0x6a
	bl	AddTextPrinterParameterized
	ldrb	r0, [r6, #0x4]
	cmp	r0, #0
	bne	.L253	@cond_branch
	ldr	r5, .L259
	b	.L254
.L260:
	.align	2, 0
.L259:
	.word	gText_ThreeDashes
.L253:
	ldrb	r1, [r6, #0x4]
	add	r0, sp, #0xc
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r5, sp, #0xc
.L254:
	mov	r0, #0x29
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r4, #0x0
	str	r4, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r5, #0
	mov	r3, #0x6a
	bl	AddTextPrinterParameterized
	ldr	r1, .L261
	mov	r0, r9
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r5, [r0]
	mov	r0, #0x41
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x7
	add	r2, r5, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
.L249:
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L262:
	.align	2, 0
.L261:
	.word	gMoveDescriptionPointers
.Lfe25:
	.size	 MoveRelearnerLoadBattleMoveDescription,.Lfe25-MoveRelearnerLoadBattleMoveDescription
	.align	2, 0
	.type	 MoveRelearnerMenuLoadContestMoveDescription,function
	.thumb_func
MoveRelearnerMenuLoadContestMoveDescription:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	bl	MoveRelearnerShowHideHearts
	mov	r0, #0x1
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r5, .L265
	mov	r0, #0x1
	add	r1, r5, #0
	mov	r2, #0x80
	bl	GetStringCenterAlignXOffset
	lsl	r3, r0, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	mov	r7, #0xff
	str	r7, [sp, #0x4]
	mov	r6, #0x0
	str	r6, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r5, #0
	bl	AddTextPrinterParameterized
	ldr	r5, .L265+0x4
	mov	r0, #0x1
	add	r1, r5, #0
	mov	r2, #0x5c
	bl	GetStringRightAlignXOffset
	lsl	r3, r0, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x19
	mov	r8, r0
	str	r0, [sp]
	str	r7, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r5, #0
	bl	AddTextPrinterParameterized
	ldr	r5, .L265+0x8
	mov	r0, #0x1
	add	r1, r5, #0
	mov	r2, #0x5c
	bl	GetStringRightAlignXOffset
	lsl	r3, r0, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x29
	str	r0, [sp]
	str	r7, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r5, #0
	bl	AddTextPrinterParameterized
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	bne	.L264	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L263
.L266:
	.align	2, 0
.L265:
	.word	gText_MoveRelearnerContestMovesTitle
	.word	gText_MoveRelearnerAppeal
	.word	gText_MoveRelearnerJam
.L264:
	lsl	r4, r4, #0x3
	ldr	r0, .L267
	add	r4, r4, r0
	ldr	r1, .L267+0x4
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1b
	add	r0, r0, r1
	ldr	r5, [r0]
	mov	r0, r8
	str	r0, [sp]
	str	r7, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r5, #0
	mov	r3, #0x4
	bl	AddTextPrinterParameterized
	ldr	r1, .L267+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r5, [r0]
	mov	r0, #0x41
	str	r0, [sp]
	str	r7, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x7
	add	r2, r5, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
.L263:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L268:
	.align	2, 0
.L267:
	.word	gContestMoves
	.word	gContestMoveTypeTextPointers
	.word	gContestEffectDescriptionPointers
.Lfe26:
	.size	 MoveRelearnerMenuLoadContestMoveDescription,.Lfe26-MoveRelearnerMenuLoadContestMoveDescription
	.align	2, 0
	.type	 MoveRelearnerCursorCallback,function
	.thumb_func
MoveRelearnerCursorCallback:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	beq	.L270	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L270:
	add	r0, r4, #0
	bl	MoveRelearnerLoadBattleMoveDescription
	add	r0, r4, #0
	bl	MoveRelearnerMenuLoadContestMoveDescription
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 MoveRelearnerCursorCallback,.Lfe27-MoveRelearnerCursorCallback
	.align	2, 0
	.globl	MoveRelearnerPrintText
	.type	 MoveRelearnerPrintText,function
	.thumb_func
MoveRelearnerPrintText:
	push	{r4, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	mov	r0, #0x3
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r2, .L272
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	bl	GetPlayerTextSpeedDelay
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r1, #0x1
	add	r2, r4, #0
	bl	AddTextPrinterParameterized2
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L273:
	.align	2, 0
.L272:
	.word	gTextFlags
.Lfe28:
	.size	 MoveRelearnerPrintText,.Lfe28-MoveRelearnerPrintText
	.align	2, 0
	.globl	MoveRelearnerRunTextPrinters
	.type	 MoveRelearnerRunTextPrinters,function
	.thumb_func
MoveRelearnerRunTextPrinters:
	push	{lr}
	bl	RunTextPrinters
	mov	r0, #0x3
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 MoveRelearnerRunTextPrinters,.Lfe29-MoveRelearnerRunTextPrinters
	.align	2, 0
	.globl	MoveRelearnerCreateYesNoMenu
	.type	 MoveRelearnerCreateYesNoMenu,function
	.thumb_func
MoveRelearnerCreateYesNoMenu:
	push	{lr}
	ldr	r0, .L276
	mov	r1, #0x1
	mov	r2, #0xe
	mov	r3, #0x0
	bl	CreateYesNoMenu
	pop	{r0}
	bx	r0
.L277:
	.align	2, 0
.L276:
	.word	sMoveRelearnerYesNoMenuTemplate
.Lfe30:
	.size	 MoveRelearnerCreateYesNoMenu,.Lfe30-MoveRelearnerCreateYesNoMenu
	.align	2, 0
	.globl	GetBoxOrPartyMonData
	.type	 GetBoxOrPartyMonData,function
	.thumb_func
GetBoxOrPartyMonData:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r0, #0xe
	bne	.L279	@cond_branch
	cmp	r2, #0x2
	beq	.L281	@cond_branch
	cmp	r2, #0x7
	bne	.L280	@cond_branch
.L281:
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L287
	add	r0, r0, r1
	add	r1, r2, #0
	add	r2, r3, #0
	bl	GetMonData
	b	.L283
.L288:
	.align	2, 0
.L287:
	.word	gPlayerParty
.L280:
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L289
	add	r0, r0, r1
	add	r1, r2, #0
	bl	GetMonData
	b	.L283
.L290:
	.align	2, 0
.L289:
	.word	gPlayerParty
.L279:
	cmp	r2, #0x2
	beq	.L285	@cond_branch
	cmp	r2, #0x7
	bne	.L284	@cond_branch
.L285:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	GetAndCopyBoxMonDataAt
	b	.L283
.L284:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	GetBoxMonDataAt
.L283:
	pop	{r1}
	bx	r1
.Lfe31:
	.size	 GetBoxOrPartyMonData,.Lfe31-GetBoxOrPartyMonData
	.align	2, 0
	.type	 GetConditionMenuMonString,function
	.thumb_func
GetConditionMenuMonString:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r6, r2, #0x10
	mov	r0, #0xfc
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0x4
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0x8
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0x0
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0x9
	strb	r0, [r5]
	add	r5, r5, #0x1
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x2d
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	cmp	r0, #0
	beq	.L292	@cond_branch
	ldr	r1, .L311
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0xc
	bl	StringCopyPadded
	b	.L308
.L312:
	.align	2, 0
.L311:
	.word	gText_EggNickname
.L292:
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x2
	add	r3, r5, #0
	bl	GetBoxOrPartyMonData
	add	r0, r5, #0
	bl	StringGetEnd10
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0xb
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r4, #0xe
	bne	.L294	@cond_branch
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L313
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	add	r0, r4, #0
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L295
.L314:
	.align	2, 0
.L313:
	.word	gPlayerParty
.L294:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r6, #0x18
	lsr	r1, r1, #0x18
	bl	GetBoxedMonPtr
	add	r4, r0, #0
	bl	GetBoxMonGender
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	bl	GetLevelFromBoxMonExp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L295:
	cmp	r7, #0x1d
	beq	.L297	@cond_branch
	cmp	r7, #0x20
	bne	.L296	@cond_branch
.L297:
	mov	r0, #0xb
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L315
	add	r1, r1, r0
	add	r0, r5, #0
	bl	StringCompare
	cmp	r0, #0
	bne	.L296	@cond_branch
	mov	r6, #0xff
.L296:
	add	r3, r5, #0
	b	.L309
.L316:
	.align	2, 0
.L315:
	.word	gSpeciesNames
.L300:
	add	r3, r3, #0x1
.L309:
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L300	@cond_branch
	mov	r1, #0xfc
	strb	r1, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x12
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x3c
	strb	r0, [r3]
	add	r3, r3, #0x1
	cmp	r6, #0
	beq	.L305	@cond_branch
	cmp	r6, #0xfe
	beq	.L306	@cond_branch
	mov	r0, #0x0
	b	.L310
.L305:
	strb	r1, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x1
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x4
	strb	r0, [r3]
	add	r3, r3, #0x1
	strb	r1, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x3
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x5
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0xb5
	b	.L310
.L306:
	strb	r1, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x1
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x6
	strb	r0, [r3]
	add	r3, r3, #0x1
	strb	r1, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x3
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x7
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0xb6
.L310:
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0xfc
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x4
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x8
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r4, #0x0
	strb	r4, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x9
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0xba
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0xf9
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x5
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r0, r3, #0
	mov	r1, r8
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r3, r0, #0
	strb	r4, [r3]
	add	r3, r3, #0x1
	mov	r0, #0xff
	strb	r0, [r3]
	add	r0, r3, #0
.L308:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 GetConditionMenuMonString,.Lfe32-GetConditionMenuMonString
	.align	2, 0
	.type	 BufferConditionMenuSpacedStringN,function
	.thumb_func
BufferConditionMenuSpacedStringN:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	b	.L327
.L320:
	strb	r3, [r4]
	add	r1, r1, #0x1
	add	r4, r4, #0x1
	lsl	r0, r2, #0x10
	ldr	r2, .L328
	add	r0, r0, r2
	lsr	r2, r0, #0x10
.L327:
	ldrb	r3, [r1]
	add	r0, r3, #0
	cmp	r0, #0xff
	bne	.L320	@cond_branch
	add	r1, r2, #0
	lsl	r0, r1, #0x10
	ldr	r2, .L328
	add	r0, r0, r2
	lsr	r2, r0, #0x10
	lsl	r1, r1, #0x10
	cmp	r1, #0
	ble	.L326	@cond_branch
	mov	r3, #0x0
.L324:
	strb	r3, [r4]
	add	r4, r4, #0x1
	add	r1, r2, #0
	lsl	r0, r1, #0x10
	ldr	r2, .L328
	add	r0, r0, r2
	lsr	r2, r0, #0x10
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bgt	.L324	@cond_branch
.L326:
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L329:
	.align	2, 0
.L328:
	.word	-0x10000
.Lfe33:
	.size	 BufferConditionMenuSpacedStringN,.Lfe33-BufferConditionMenuSpacedStringN
	.align	2, 0
	.globl	GetConditionMenuMonNameAndLocString
	.type	 GetConditionMenuMonNameAndLocString,function
	.thumb_func
GetConditionMenuMonNameAndLocString:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	ldr	r0, [sp, #0x14]
	ldr	r1, [sp, #0x18]
	ldr	r4, [sp, #0x1c]
	lsl	r2, r2, #0x10
	lsr	r7, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x10
	lsl	r4, r4, #0x18
	cmp	r4, #0
	bne	.L331	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L331:
	cmp	r2, r0
	beq	.L332	@cond_branch
	add	r0, r6, #0
	add	r1, r7, #0
	add	r2, r3, #0
	bl	GetConditionMenuMonString
	mov	r0, #0xfc
	strb	r0, [r5]
	mov	r0, #0x4
	strb	r0, [r5, #0x1]
	mov	r0, #0x8
	strb	r0, [r5, #0x2]
	mov	r0, #0x0
	strb	r0, [r5, #0x3]
	mov	r0, #0x9
	strb	r0, [r5, #0x4]
	cmp	r7, #0xe
	bne	.L333	@cond_branch
	add	r0, r5, #0x5
	ldr	r1, .L347
	b	.L346
.L348:
	.align	2, 0
.L347:
	.word	gText_InParty
.L333:
	add	r4, r5, #0x5
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	bl	GetBoxNamePtr
	add	r1, r0, #0
	add	r0, r4, #0
.L346:
	mov	r2, #0x8
	bl	BufferConditionMenuSpacedStringN
	b	.L335
.L332:
	mov	r1, #0x0
	mov	r2, #0x0
.L339:
	add	r0, r6, r1
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xb
	bls	.L339	@cond_branch
	add	r1, r6, r1
	mov	r0, #0xff
	strb	r0, [r1]
	mov	r1, #0x0
	mov	r2, #0x0
.L344:
	add	r0, r5, r1
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x7
	bls	.L344	@cond_branch
	add	r1, r5, r1
	mov	r0, #0xff
	strb	r0, [r1]
.L335:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 GetConditionMenuMonNameAndLocString,.Lfe34-GetConditionMenuMonNameAndLocString
	.align	2, 0
	.globl	GetConditionMenuMonConditions
	.type	 GetConditionMenuMonConditions,function
	.thumb_func
GetConditionMenuMonConditions:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r8, r0
	mov	sl, r1
	ldr	r0, [sp, #0x20]
	ldr	r1, [sp, #0x24]
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	lsl	r2, r2, #0x10
	lsr	r7, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r6, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	lsl	r4, r4, #0x10
	lsr	r0, r4, #0x10
	lsl	r5, r5, #0x18
	cmp	r5, #0
	bne	.L350	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L350:
	cmp	r2, r0
	beq	.L351	@cond_branch
	add	r0, r7, #0
	add	r1, r6, #0
	mov	r2, #0x16
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	mov	r1, r9
	lsl	r5, r1, #0x2
	add	r4, r5, r1
	mov	r2, r8
	add	r1, r2, r4
	strb	r0, [r1]
	add	r0, r7, #0
	add	r1, r6, #0
	mov	r2, #0x2f
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	mov	r1, r8
	add	r1, r1, #0x1
	add	r1, r1, r4
	strb	r0, [r1]
	add	r0, r7, #0
	add	r1, r6, #0
	mov	r2, #0x21
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	mov	r1, r8
	add	r1, r1, #0x2
	add	r1, r1, r4
	strb	r0, [r1]
	add	r0, r7, #0
	add	r1, r6, #0
	mov	r2, #0x18
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	mov	r1, r8
	add	r1, r1, #0x3
	add	r1, r1, r4
	strb	r0, [r1]
	add	r0, r7, #0
	add	r1, r6, #0
	mov	r2, #0x17
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	mov	r1, r8
	add	r1, r1, #0x4
	add	r1, r1, r4
	strb	r0, [r1]
	mov	r4, sl
	add	r4, r4, r9
	add	r0, r7, #0
	add	r1, r6, #0
	mov	r2, #0x30
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	cmp	r0, #0xff
	beq	.L352	@cond_branch
	add	r0, r7, #0
	add	r1, r6, #0
	mov	r2, #0x30
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	mov	r1, #0x1d
	bl	__udivsi3
	b	.L353
.L352:
	mov	r0, #0x9
.L353:
	strb	r0, [r4]
	mov	r0, r9
	add	r1, r5, r0
	mov	r2, r8
	add	r0, r2, r1
	lsl	r1, r1, #0x2
	add	r1, r1, #0x14
	add	r1, r1, r8
	bl	sub_81D2754
	b	.L354
.L351:
	mov	r2, #0x0
	mov	r0, r9
	lsl	r5, r0, #0x2
	add	r1, r5, r0
	mov	r6, #0x0
	lsl	r3, r1, #0x2
	mov	r5, #0x9b
	mov	r4, #0x5b
.L358:
	add	r0, r2, r1
	add	r0, r0, r8
	strb	r6, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r3
	add	r0, r0, r8
	strh	r5, [r0, #0x14]
	strh	r4, [r0, #0x16]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x4
	bls	.L358	@cond_branch
.L354:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 GetConditionMenuMonConditions,.Lfe35-GetConditionMenuMonConditions
	.align	2, 0
	.globl	GetConditionMenuMonGfx
	.type	 GetConditionMenuMonGfx,function
	.thumb_func
GetConditionMenuMonGfx:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r0
	mov	r9, r1
	ldr	r0, [sp, #0x20]
	ldr	r1, [sp, #0x24]
	ldr	r4, [sp, #0x28]
	lsl	r2, r2, #0x10
	lsr	r7, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r5, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x10
	lsl	r4, r4, #0x18
	cmp	r4, #0
	bne	.L361	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L361:
	cmp	r2, r0
	beq	.L362	@cond_branch
	add	r0, r7, #0
	add	r1, r5, #0
	mov	r2, #0x41
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r7, #0
	add	r1, r5, #0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	add	r6, r0, #0
	add	r0, r7, #0
	add	r1, r5, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	add	r5, r0, #0
	lsl	r0, r4, #0x3
	ldr	r1, .L363
	add	r0, r0, r1
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, r8
	add	r2, r4, #0
	add	r3, r5, #0
	bl	LoadSpecialPokePic
	add	r0, r4, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	GetMonSpritePalFromSpeciesAndPersonality
	mov	r1, r9
	bl	LZ77UnCompWram
.L362:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L364:
	.align	2, 0
.L363:
	.word	gMonFrontPicTable
.Lfe36:
	.size	 GetConditionMenuMonGfx,.Lfe36-GetConditionMenuMonGfx
	.align	2, 0
	.globl	MoveConditionMonOnscreen
	.type	 MoveConditionMonOnscreen,function
	.thumb_func
MoveConditionMonOnscreen:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1]
	add	r0, r0, #0x18
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L366	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
.L366:
	mov	r0, #0x0
	ldrsh	r1, [r1, r0]
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 MoveConditionMonOnscreen,.Lfe37-MoveConditionMonOnscreen
	.align	2, 0
	.globl	MoveConditionMonOffscreen
	.type	 MoveConditionMonOffscreen,function
	.thumb_func
MoveConditionMonOffscreen:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1]
	sub	r0, r0, #0x18
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x50
	neg	r2, r2
	cmp	r0, r2
	bge	.L369	@cond_branch
	strh	r2, [r1]
.L369:
	mov	r0, #0x0
	ldrsh	r1, [r1, r0]
	eor	r1, r1, r2
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 MoveConditionMonOffscreen,.Lfe38-MoveConditionMonOffscreen
	.align	2, 0
	.globl	TryUpdateConditionMonTransitionOn
	.type	 TryUpdateConditionMonTransitionOn,function
	.thumb_func
TryUpdateConditionMonTransitionOn:
	push	{r4, r5, lr}
	add	r5, r1, #0
	bl	TransitionConditionGraph
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	bl	MoveConditionMonOnscreen
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	cmp	r4, #0
	bne	.L373	@cond_branch
	cmp	r0, #0
	beq	.L372	@cond_branch
.L373:
	mov	r1, #0x1
.L372:
	add	r0, r1, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 TryUpdateConditionMonTransitionOn,.Lfe39-TryUpdateConditionMonTransitionOn
	.align	2, 0
	.globl	TryUpdateConditionMonTransitionOff
	.type	 TryUpdateConditionMonTransitionOff,function
	.thumb_func
TryUpdateConditionMonTransitionOff:
	push	{r4, r5, lr}
	add	r5, r1, #0
	bl	TransitionConditionGraph
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	bl	MoveConditionMonOffscreen
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	cmp	r4, #0
	bne	.L376	@cond_branch
	cmp	r0, #0
	beq	.L375	@cond_branch
.L376:
	mov	r1, #0x1
.L375:
	add	r0, r1, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 TryUpdateConditionMonTransitionOff,.Lfe40-TryUpdateConditionMonTransitionOff
	.section .rodata
	.align	2, 0
	.type	 sConditionPokeball_Gfx,object
sConditionPokeball_Gfx:
	.word	0x0
	.word	0x0
	.word	0x33300000
	.word	0x33333000
	.word	0x66633300
	.word	0x55553300
	.word	0x66666330
	.word	0x33555330
	.word	0x0
	.word	0x0
	.word	0x33
	.word	0x3333
	.word	0x33366
	.word	0x33555
	.word	0x336666
	.word	0x335553
	.word	0x3333330
	.word	0x33ccc330
	.word	-0x22222cd0
	.word	-0x3333cd00
	.word	-0x222ccd00
	.word	0x33333000
	.word	0x33300000
	.word	0x0
	.word	0x333333
	.word	0x33ccc3
	.word	0x33dddd
	.word	0x33ccc
	.word	0x333dd
	.word	0x3333
	.word	0x33
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x77700000
	.word	0x77777000
	.word	-0x66688900
	.word	-0x77778900
	.word	-0x66666890
	.word	0x77888770
	.word	0x0
	.word	0x0
	.word	0x77
	.word	0x7777
	.word	0x77799
	.word	0x77888
	.word	0x779999
	.word	0x778887
	.word	0x7777770
	.word	0x77aaa770
	.word	-0x44444890
	.word	-0x55558900
	.word	-0x44488900
	.word	0x77777000
	.word	0x77700000
	.word	0x0
	.word	0x777777
	.word	0x77aaa7
	.word	0x77bbbb
	.word	0x77aaa
	.word	0x777bb
	.word	0x7777
	.word	0x77
	.word	0x0
	.size	 sConditionPokeball_Gfx,256
	.align	2, 0
	.type	 sConditionPokeballPlaceholder_Gfx,object
sConditionPokeballPlaceholder_Gfx:
	.word	0x0
	.word	0x0
	.word	0x77700
	.word	0x770770
	.word	0x700070
	.word	0x770770
	.word	0x77700
	.word	0x0
	.size	 sConditionPokeballPlaceholder_Gfx,32
	.align	1, 0
	.type	 sConditionSparkle_Gfx,object
sConditionSparkle_Gfx:
	.short	0x1cc6
	.short	0x5252
	.short	0x3f4
	.short	0x3f7
	.short	0x3fc
	.short	0x3ff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x7f38
	.size	 sConditionSparkle_Gfx,32
	.align	2, 0
	.type	 sConditionSparkle_Pal,object
sConditionSparkle_Pal:
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x30000000
	.word	0x30000000
	.word	0x33000000
	.word	0x33330000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x3
	.word	0x333
	.word	0x33100000
	.word	0x30000000
	.word	0x30000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x1113
	.word	0x11
	.word	0x1
	.word	0x1
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x4000
	.word	0x40000
	.word	0x4400000
	.word	0x44400000
	.word	0x44000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x4000
	.word	0x10400
	.word	0x1044
	.word	0x144
	.word	0x114
	.word	0x44400000
	.word	0x14400000
	.word	0x11040000
	.word	0x104000
	.word	0x10000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x44
	.word	0x144
	.word	0x410
	.word	0x4000
	.word	0x10000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x50000000
	.word	0x50000000
	.word	0x50000000
	.word	0x54000000
	.word	0x55400000
	.word	0x55555500
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x1
	.word	0x1
	.word	0x4
	.word	0x45
	.word	0x55555
	.word	0x55411000
	.word	0x54000000
	.word	0x50000000
	.word	0x50000000
	.word	0x50000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x111145
	.word	0x114
	.word	0x11
	.word	0x1
	.word	0x1
	.word	0x1
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x4000
	.word	0x40000
	.word	0x4400000
	.word	0x44400000
	.word	0x44000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x4000
	.word	0x10400
	.word	0x1044
	.word	0x144
	.word	0x114
	.word	0x44400000
	.word	0x14400000
	.word	0x11040000
	.word	0x104000
	.word	0x10000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x44
	.word	0x144
	.word	0x410
	.word	0x4000
	.word	0x10000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x30000000
	.word	0x30000000
	.word	0x33000000
	.word	0x33330000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x3
	.word	0x333
	.word	0x33100000
	.word	0x30000000
	.word	0x30000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x1113
	.word	0x11
	.word	0x1
	.word	0x1
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x2000000
	.word	0x20000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x2
	.word	0x10
	.word	0x2000000
	.word	0x10000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x2
	.word	0x10
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.size	 sConditionSparkle_Pal,896
	.align	2, 0
	.type	 sOam_ConditionMonPic,object
	.size	 sOam_ConditionMonPic,8
sOam_ConditionMonPic:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sOam_ConditionSelectionIcon,object
	.size	 sOam_ConditionSelectionIcon,8
sOam_ConditionSelectionIcon:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x8
	.short	0x0
	.align	2, 0
	.type	 sAnim_ConditionSelectionIcon_Selected,object
sAnim_ConditionSelectionIcon_Selected:
	.short	0x0
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ConditionSelectionIcon_Selected,8
	.align	2, 0
	.type	 sAnim_ConditionSelectionIcon_Unselected,object
sAnim_ConditionSelectionIcon_Unselected:
	.short	0x4
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ConditionSelectionIcon_Unselected,8
	.align	2, 0
	.type	 sAnims_ConditionSelectionIcon,object
sAnims_ConditionSelectionIcon:
	.word	sAnim_ConditionSelectionIcon_Selected
	.word	sAnim_ConditionSelectionIcon_Unselected
	.size	 sAnims_ConditionSelectionIcon,8
	.align	2, 0
.LC71:
	.word	0x0
	.short	0x800
	.short	0x64
	.align	2, 0
.LC73:
	.short	0x64
	.short	0x64
	.word	sOam_ConditionMonPic
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
.LC75:
	.word	0x0
	.short	0x64
	.space	2
.text
	.align	2, 0
	.globl	LoadConditionMonPicTemplate
	.type	 LoadConditionMonPicTemplate,function
	.thumb_func
LoadConditionMonPicTemplate:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x20
	ldr	r3, .L378
	ldr	r4, [r3]		@ created by thumb_load_double_from_address
	ldr	r5, [r3, #0x4]		@ created by thumb_load_double_from_address
	str	r4, [sp, #0x18]
	str	r5, [sp, #0x1c]
	mov	r4, sp
	ldr	r3, .L378+0x4
	ldmia	r3!, {r5, r6, r7}
	stmia	r4!, {r5, r6, r7}
	ldmia	r3!, {r5, r6, r7}
	stmia	r4!, {r5, r6, r7}
	ldr	r3, .L378+0x8
	ldr	r4, [r3, #0x4]		@ created by thumb_load_double_from_address
	ldr	r3, [r3]		@ created by thumb_load_double_from_address
	ldr	r5, [sp, #0x18]		@ created by thumb_load_double_from_address
	ldr	r6, [sp, #0x1c]		@ created by thumb_load_double_from_address
	str	r5, [r0]
	str	r6, [r0, #0x4]
	mov	r0, sp
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	str	r3, [r2]
	str	r4, [r2, #0x4]
	add	sp, sp, #0x20
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L379:
	.align	2, 0
.L378:
	.word	.LC71
	.word	.LC73
	.word	.LC75
.Lfe41:
	.size	 LoadConditionMonPicTemplate,.Lfe41-LoadConditionMonPicTemplate
	.section .rodata
	.align	2, 0
.LC79:
	.word	sConditionPokeball_Gfx
	.short	0x100
	.short	0x65
	.word	sConditionPokeballPlaceholder_Gfx
	.short	0x20
	.short	0x67
	.word	gPokenavConditionCancel_Gfx
	.short	0x100
	.short	0x66
	.space	8
	.align	2, 0
.LC81:
	.word	gPokenavConditionCancel_Pal
	.short	0x65
	.space	2
	.word	gPokenavConditionCancel_Pal+0x20
	.short	0x66
	.space	2
	.space	8
	.align	2, 0
.LC83:
	.short	0x65
	.short	0x65
	.word	sOam_ConditionSelectionIcon
	.word	sAnims_ConditionSelectionIcon
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
.text
	.align	2, 0
	.globl	LoadConditionSelectionIcons
	.type	 LoadConditionSelectionIcons,function
	.thumb_func
LoadConditionSelectionIcons:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x50
	add	r5, r0, #0
	mov	ip, r1
	mov	r8, r2
	mov	r1, sp
	ldr	r0, .L391
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	ldmia	r0!, {r2, r6, r7}
	stmia	r1!, {r2, r6, r7}
	ldmia	r0!, {r3, r4}
	stmia	r1!, {r3, r4}
	add	r3, sp, #0x20
	add	r1, r3, #0
	ldr	r0, .L391+0x4
	ldmia	r0!, {r2, r6, r7}
	stmia	r1!, {r2, r6, r7}
	ldmia	r0!, {r4, r6, r7}
	stmia	r1!, {r4, r6, r7}
	add	r2, sp, #0x38
	add	r1, r2, #0
	ldr	r0, .L391+0x8
	ldmia	r0!, {r4, r6, r7}
	stmia	r1!, {r4, r6, r7}
	ldmia	r0!, {r4, r6, r7}
	stmia	r1!, {r4, r6, r7}
	mov	r4, #0x0
.L384:
	lsl	r0, r4, #0x3
	add	r0, r0, sp
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	stmia	r5!, {r0, r1}
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L384	@cond_branch
	mov	r1, ip
	add	r0, r2, #0
	ldmia	r0!, {r2, r4, r5}
	stmia	r1!, {r2, r4, r5}
	ldmia	r0!, {r2, r6, r7}
	stmia	r1!, {r2, r6, r7}
	mov	r4, #0x0
.L389:
	lsl	r0, r4, #0x3
	add	r0, r3, r0
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	mov	r5, r8
	add	r5, r5, #0x8
	mov	r8, r5
	sub	r5, r5, #0x8
	stmia	r5!, {r0, r1}
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L389	@cond_branch
	add	sp, sp, #0x50
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L392:
	.align	2, 0
.L391:
	.word	.LC79
	.word	.LC81
	.word	.LC83
.Lfe42:
	.size	 LoadConditionSelectionIcons,.Lfe42-LoadConditionSelectionIcons
	.section .rodata
	.align	2, 0
.LC91:
	.word	sConditionSparkle_Pal
	.short	0x380
	.short	0x68
	.align	2, 0
.LC93:
	.word	sConditionSparkle_Gfx
	.short	0x68
	.space	2
.text
	.align	2, 0
	.globl	LoadConditionSparkle
	.type	 LoadConditionSparkle,function
	.thumb_func
LoadConditionSparkle:
	push	{r4, r5, lr}
	ldr	r2, .L394
	ldr	r4, [r2]		@ created by thumb_load_double_from_address
	ldr	r5, [r2, #0x4]		@ created by thumb_load_double_from_address
	ldr	r2, .L394+0x4
	ldr	r3, [r2, #0x4]		@ created by thumb_load_double_from_address
	ldr	r2, [r2]		@ created by thumb_load_double_from_address
	str	r4, [r0]
	str	r5, [r0, #0x4]
	str	r2, [r1]
	str	r3, [r1, #0x4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L395:
	.align	2, 0
.L394:
	.word	.LC91
	.word	.LC93
.Lfe43:
	.size	 LoadConditionSparkle,.Lfe43-LoadConditionSparkle
	.align	2, 0
	.type	 SpriteCB_ConditionSparkle_DoNextAfterDelay,function
	.thumb_func
SpriteCB_ConditionSparkle_DoNextAfterDelay:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3c
	ble	.L397	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
	add	r0, r1, #0
	bl	SetNextConditionSparkle
.L397:
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 SpriteCB_ConditionSparkle_DoNextAfterDelay,.Lfe44-SpriteCB_ConditionSparkle_DoNextAfterDelay
	.align	2, 0
	.type	 SpriteCB_ConditionSparkle_WaitForAllAnim,function
	.thumb_func
SpriteCB_ConditionSparkle_WaitForAllAnim:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L399	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
	ldr	r0, .L400
	str	r0, [r2, #0x1c]
.L399:
	pop	{r0}
	bx	r0
.L401:
	.align	2, 0
.L400:
	.word	SpriteCB_ConditionSparkle_DoNextAfterDelay
.Lfe45:
	.size	 SpriteCB_ConditionSparkle_WaitForAllAnim,.Lfe45-SpriteCB_ConditionSparkle_WaitForAllAnim
	.section .rodata
	.align	2, 0
	.type	 sOam_ConditionSparkle,object
	.size	 sOam_ConditionSparkle,8
sOam_ConditionSparkle:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.space	1
	.byte	0x0
	.space	2
	.align	2, 0
	.type	 sAnim_ConditionSparkle,object
sAnim_ConditionSparkle:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x14
	.byte	0x5
	.space	1
	.short	0x18
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ConditionSparkle,32
	.align	2, 0
	.type	 sAnims_ConditionSparkle,object
sAnims_ConditionSparkle:
	.word	sAnim_ConditionSparkle
	.word	sAnim_ConditionSparkle+0x8
	.word	sAnim_ConditionSparkle+0x10
	.word	sAnim_ConditionSparkle+0x18
	.word	sAnim_ConditionSparkle+0x20
	.word	sAnim_ConditionSparkle+0x28
	.word	sAnim_ConditionSparkle+0x30
	.size	 sAnims_ConditionSparkle,28
	.align	2, 0
	.type	 sSpriteTemplate_ConditionSparkle,object
	.size	 sSpriteTemplate_ConditionSparkle,24
sSpriteTemplate_ConditionSparkle:
	.short	0x68
	.short	0x68
	.word	sOam_ConditionSparkle
	.word	sAnims_ConditionSparkle
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_ConditionSparkle
	.align	1, 0
	.type	 sConditionSparkleCoords,object
	.size	 sConditionSparkleCoords,40
sConditionSparkleCoords:
	.short	0x0
	.short	-0x23
	.short	0x14
	.short	-0x1c
	.short	0x21
	.short	-0xa
	.short	0x21
	.short	0xa
	.short	0x14
	.short	0x1c
	.short	0x0
	.short	0x23
	.short	-0x14
	.short	0x1c
	.short	-0x21
	.short	0xa
	.short	-0x21
	.short	-0xa
	.short	-0x14
	.short	-0x1c
.text
	.align	2, 0
	.type	 SetConditionSparklePosition,function
	.thumb_func
SetConditionSparklePosition:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L406
	add	r3, r1, r0
	cmp	r3, #0
	beq	.L403	@cond_branch
	ldrh	r1, [r3, #0x24]
	ldrh	r2, [r3, #0x20]
	add	r1, r1, r2
	ldr	r2, .L406+0x4
	mov	r5, #0x2e
	ldrsh	r0, [r4, r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r1, [r3, #0x26]
	ldrh	r3, [r3, #0x22]
	add	r1, r1, r3
	mov	r3, #0x2e
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x2
	add	r2, r2, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	add	r0, r0, r1
	b	.L405
.L407:
	.align	2, 0
.L406:
	.word	gSprites
	.word	sConditionSparkleCoords
.L403:
	ldr	r1, .L408
	mov	r5, #0x2e
	ldrsh	r0, [r4, r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	add	r0, r0, #0x28
	strh	r0, [r4, #0x20]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x2
	add	r1, r1, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	add	r0, r0, #0x68
.L405:
	strh	r0, [r4, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L409:
	.align	2, 0
.L408:
	.word	sConditionSparkleCoords
.Lfe46:
	.size	 SetConditionSparklePosition,.Lfe46-SetConditionSparklePosition
	.align	2, 0
	.type	 InitConditionSparkles,function
	.thumb_func
InitConditionSparkles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	mov	r5, #0x0
.L414:
	lsl	r0, r5, #0x2
	mov	r1, r8
	add	r4, r0, r1
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L413	@cond_branch
	strh	r5, [r0, #0x2e]
	ldr	r1, [r4]
	lsl	r0, r5, #0x4
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	ldr	r0, [r4]
	strh	r6, [r0, #0x32]
	ldr	r0, [r4]
	strh	r5, [r0, #0x34]
	cmp	r7, #0
	beq	.L417	@cond_branch
	cmp	r6, #0x9
	beq	.L416	@cond_branch
.L417:
	ldr	r1, [r4]
	ldr	r0, .L420
	str	r0, [r1, #0x1c]
	b	.L413
.L421:
	.align	2, 0
.L420:
	.word	SpriteCB_ConditionSparkle
.L416:
	ldr	r0, [r4]
	bl	SetConditionSparklePosition
	ldr	r0, [r4]
	bl	ShowAllConditionSparkles
	ldr	r2, [r4]
	ldr	r0, .L422
	str	r0, [r2, #0x1c]
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r3, #0x5
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	strb	r0, [r2]
.L413:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x9
	bls	.L414	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L423:
	.align	2, 0
.L422:
	.word	SpriteCB_ConditionSparkle_WaitForAllAnim
.Lfe47:
	.size	 InitConditionSparkles,.Lfe47-InitConditionSparkles
	.align	2, 0
	.type	 SetNextConditionSparkle,function
	.thumb_func
SetNextConditionSparkle:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r3, #0x0
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	add	r0, r0, #0x1
	cmp	r3, r0
	bge	.L426	@cond_branch
	ldr	r5, .L430
	mov	r7, #0x1c
	add	r7, r7, r5
	mov	ip, r7
	ldr	r6, .L430+0x4
.L428:
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r2, r1, r5
	mov	r7, #0x2e
	ldrsh	r0, [r2, r7]
	lsl	r0, r0, #0x4
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	add	r1, r1, ip
	str	r6, [r1]
	ldrh	r0, [r2, #0x38]
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	add	r0, r0, #0x1
	cmp	r3, r0
	blt	.L428	@cond_branch
.L426:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L431:
	.align	2, 0
.L430:
	.word	gSprites
	.word	SpriteCB_ConditionSparkle
.Lfe48:
	.size	 SetNextConditionSparkle,.Lfe48-SetNextConditionSparkle
	.align	2, 0
	.globl	ResetConditionSparkleSprites
	.type	 ResetConditionSparkleSprites,function
	.thumb_func
ResetConditionSparkleSprites:
	push	{lr}
	add	r2, r0, #0
	mov	r1, #0x0
	mov	r3, #0x0
.L436:
	lsl	r0, r1, #0x2
	add	r0, r0, r2
	str	r3, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x9
	bls	.L436	@cond_branch
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 ResetConditionSparkleSprites,.Lfe49-ResetConditionSparkleSprites
	.align	2, 0
	.globl	CreateConditionSparkleSprites
	.type	 CreateConditionSparkleSprites,function
	.thumb_func
CreateConditionSparkleSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	mov	r0, #0x0
	mov	r9, r0
	lsr	r7, r2, #0x18
	mov	r5, #0x0
	add	r0, r7, #0x1
	cmp	r9, r0
	bge	.L440	@cond_branch
.L442:
	ldr	r0, .L448
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r6, r3, #0
	cmp	r3, #0x40
	beq	.L440	@cond_branch
	lsl	r0, r5, #0x2
	mov	r1, r8
	add	r4, r0, r1
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r1, .L448+0x4
	add	r0, r0, r1
	str	r0, [r4]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, [r4]
	mov	r1, sl
	strh	r1, [r0, #0x36]
	cmp	r5, #0
	beq	.L444	@cond_branch
	sub	r0, r4, #0x4
	ldr	r0, [r0]
	strh	r3, [r0, #0x38]
	b	.L441
.L449:
	.align	2, 0
.L448:
	.word	sSpriteTemplate_ConditionSparkle
	.word	gSprites
.L444:
	mov	r9, r6
.L441:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r7, #0x1
	cmp	r5, r0
	blt	.L442	@cond_branch
.L440:
	lsl	r0, r7, #0x2
	add	r0, r0, r8
	ldr	r0, [r0]
	mov	r1, r9
	strh	r1, [r0, #0x38]
	add	r0, r7, #0
	mov	r1, #0x1
	mov	r2, r8
	bl	InitConditionSparkles
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 CreateConditionSparkleSprites,.Lfe50-CreateConditionSparkleSprites
	.align	2, 0
	.globl	DestroyConditionSparkleSprites
	.type	 DestroyConditionSparkleSprites,function
	.thumb_func
DestroyConditionSparkleSprites:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r5, #0x0
.L451:
	cmp	r5, #0x9
	bhi	.L452	@cond_branch
	lsl	r0, r5, #0x2
	add	r4, r0, r6
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L452	@cond_branch
	bl	DestroySprite
	mov	r0, #0x0
	str	r0, [r4]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	b	.L451
.L452:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 DestroyConditionSparkleSprites,.Lfe51-DestroyConditionSparkleSprites
	.align	2, 0
	.globl	FreeConditionSparkles
	.type	 FreeConditionSparkles,function
	.thumb_func
FreeConditionSparkles:
	push	{lr}
	bl	DestroyConditionSparkleSprites
	mov	r0, #0x68
	bl	FreeSpriteTilesByTag
	mov	r0, #0x68
	bl	FreeSpritePaletteByTag
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 FreeConditionSparkles,.Lfe52-FreeConditionSparkles
	.align	2, 0
	.type	 SpriteCB_ConditionSparkle,function
	.thumb_func
SpriteCB_ConditionSparkle:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L460	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L459	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	SeekSpriteAnim
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L460:
	add	r0, r4, #0
	bl	SetConditionSparklePosition
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L459	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x34
	ldrsh	r1, [r4, r0]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L463	@cond_branch
	cmp	r1, #0x9
	bne	.L464	@cond_branch
	add	r0, r4, #0
	bl	ShowAllConditionSparkles
	ldr	r0, .L468
	b	.L467
.L469:
	.align	2, 0
.L468:
	.word	SpriteCB_ConditionSparkle_WaitForAllAnim
.L464:
	ldr	r0, .L470
	b	.L467
.L471:
	.align	2, 0
.L470:
	.word	SpriteCB_ConditionSparkle_DoNextAfterDelay
.L463:
	ldr	r0, .L472
.L467:
	str	r0, [r4, #0x1c]
.L459:
	pop	{r4}
	pop	{r0}
	bx	r0
.L473:
	.align	2, 0
.L472:
	.word	SpriteCallbackDummy
.Lfe53:
	.size	 SpriteCB_ConditionSparkle,.Lfe53-SpriteCB_ConditionSparkle
	.align	2, 0
	.type	 ShowAllConditionSparkles,function
	.thumb_func
ShowAllConditionSparkles:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldrh	r0, [r6, #0x38]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r5, #0x0
	mov	r2, #0x32
	ldrsh	r0, [r6, r2]
	add	r0, r0, #0x1
	cmp	r5, r0
	bge	.L476	@cond_branch
	mov	r0, #0x5
	neg	r0, r0
	add	r7, r0, #0
.L478:
	lsl	r4, r1, #0x4
	add	r4, r4, r1
	lsl	r4, r4, #0x2
	ldr	r0, .L480
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x0
	bl	SeekSpriteAnim
	add	r1, r4, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	and	r0, r0, r7
	strb	r0, [r1]
	ldrh	r0, [r4, #0x38]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r2, #0x32
	ldrsh	r0, [r6, r2]
	add	r0, r0, #0x1
	cmp	r5, r0
	blt	.L478	@cond_branch
.L476:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L481:
	.align	2, 0
.L480:
	.word	gSprites
.Lfe54:
	.size	 ShowAllConditionSparkles,.Lfe54-ShowAllConditionSparkles
	.section .rodata
	.align	2, 0
	.type	 sLvlUpStatStrings,object
	.size	 sLvlUpStatStrings,24
sLvlUpStatStrings:
	.word	gText_MaxHP
	.word	gText_Attack
	.word	gText_Defense
	.word	gText_SpAtk
	.word	gText_SpDef
	.word	gText_Speed
.text
	.align	2, 0
	.globl	DrawLevelUpWindowPg1
	.type	 DrawLevelUpWindowPg1,function
	.thumb_func
DrawLevelUpWindowPg1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	mov	r8, r0
	add	r6, r1, #0
	add	r5, r2, #0
	add	r4, r3, #0
	ldr	r3, [sp, #0x4c]
	ldr	r0, [sp, #0x50]
	mov	r9, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r4, #0x4
	orr	r1, r1, r4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r3, [sp, #0x28]
	bl	FillWindowPixelBuffer
	add	r2, sp, #0xc
	ldrh	r0, [r5]
	ldrh	r1, [r6]
	sub	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r6, #0x2]
	sub	r0, r0, r1
	strh	r0, [r2, #0x2]
	ldrh	r0, [r5, #0x4]
	ldrh	r1, [r6, #0x4]
	sub	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrh	r0, [r5, #0x8]
	ldrh	r1, [r6, #0x8]
	sub	r0, r0, r1
	strh	r0, [r2, #0x6]
	ldrh	r0, [r5, #0xa]
	ldrh	r1, [r6, #0xa]
	sub	r0, r0, r1
	strh	r0, [r2, #0x8]
	ldrh	r0, [r5, #0x6]
	ldrh	r1, [r6, #0x6]
	sub	r0, r0, r1
	strh	r0, [r2, #0xa]
	add	r0, sp, #0x24
	strb	r4, [r0]
	ldr	r3, [sp, #0x28]
	strb	r3, [r0, #0x1]
	mov	r1, r9
	strb	r1, [r0, #0x2]
	mov	r7, #0x0
	mov	sl, r0
	mov	r0, #0x1
	neg	r0, r0
	mov	r9, r0
	add	r6, sp, #0x18
.L486:
	lsl	r0, r7, #0x4
	sub	r0, r0, r7
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, sl
	str	r1, [sp]
	mov	r0, r9
	str	r0, [sp, #0x4]
	ldr	r1, .L494
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [sp, #0x8]
	mov	r0, r8
	mov	r1, #0x1
	mov	r2, #0x0
	add	r3, r5, #0
	bl	AddTextPrinterParameterized3
	lsl	r0, r7, #0x1
	mov	r4, sp
	add	r4, r4, r0
	add	r4, r4, #0xc
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	ldr	r1, .L494+0x4
	cmp	r0, #0
	blt	.L487	@cond_branch
	ldr	r1, .L494+0x8
.L487:
	add	r0, r6, #0
	bl	StringCopy
	mov	r0, sl
	str	r0, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, r8
	mov	r1, #0x1
	mov	r2, #0x38
	add	r3, r5, #0
	bl	AddTextPrinterParameterized3
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L490	@cond_branch
	neg	r0, r1
.L490:
	mov	r4, #0xc
	cmp	r0, #0x9
	bgt	.L489	@cond_branch
	mov	r4, #0x12
.L489:
	cmp	r1, #0
	bge	.L492	@cond_branch
	neg	r1, r1
.L492:
	add	r0, r6, #0
	mov	r2, #0x0
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	add	r2, r4, #0
	add	r2, r2, #0x38
	mov	r1, sl
	str	r1, [sp]
	mov	r0, r9
	str	r0, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, r8
	mov	r1, #0x1
	add	r3, r5, #0
	bl	AddTextPrinterParameterized3
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, #0x5
	bls	.L486	@cond_branch
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L495:
	.align	2, 0
.L494:
	.word	sLvlUpStatStrings
	.word	gText_Dash
	.word	gText_Plus
.Lfe55:
	.size	 DrawLevelUpWindowPg1,.Lfe55-DrawLevelUpWindowPg1
	.align	2, 0
	.globl	DrawLevelUpWindowPg2
	.type	 DrawLevelUpWindowPg2,function
	.thumb_func
DrawLevelUpWindowPg2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	mov	r8, r0
	add	r5, r1, #0
	add	r4, r2, #0
	add	r6, r3, #0
	ldr	r2, [sp, #0x4c]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r4, #0x4
	orr	r1, r1, r4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r2, [sp, #0x28]
	bl	FillWindowPixelBuffer
	add	r1, sp, #0xc
	ldrh	r0, [r5]
	strh	r0, [r1]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r1, #0x2]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r1, #0x4]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r1, #0x6]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r1, #0x8]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r1, #0xa]
	add	r0, sp, #0x24
	strb	r4, [r0]
	strb	r6, [r0, #0x1]
	ldr	r2, [sp, #0x28]
	strb	r2, [r0, #0x2]
	mov	r6, #0x0
	add	r1, sp, #0x18
	mov	r9, r1
	mov	r7, r8
	mov	sl, r0
	mov	r2, #0x1
	neg	r2, r2
	mov	r8, r2
.L500:
	lsl	r1, r6, #0x1
	mov	r0, sp
	add	r0, r0, r1
	add	r0, r0, #0xc
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r4, #0x3
	cmp	r0, #0x63
	bgt	.L502	@cond_branch
	mov	r4, #0x1
	cmp	r0, #0x9
	ble	.L502	@cond_branch
	mov	r4, #0x2
.L502:
	mov	r0, sp
	add	r0, r0, r1
	add	r0, r0, #0xc
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r0, r9
	mov	r2, #0x0
	add	r3, r4, #0
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x4
	sub	r0, r0, r4
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	lsl	r4, r4, #0x11
	lsr	r4, r4, #0x10
	lsl	r5, r6, #0x4
	sub	r5, r5, r6
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, sl
	str	r0, [sp]
	mov	r1, r8
	str	r1, [sp, #0x4]
	ldr	r1, .L506
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [sp, #0x8]
	add	r0, r7, #0
	mov	r1, #0x1
	mov	r2, #0x0
	add	r3, r5, #0
	bl	AddTextPrinterParameterized3
	add	r4, r4, #0x38
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r2, sl
	str	r2, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	mov	r1, r9
	str	r1, [sp, #0x8]
	add	r0, r7, #0
	mov	r1, #0x1
	add	r2, r4, #0
	add	r3, r5, #0
	bl	AddTextPrinterParameterized3
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x5
	bls	.L500	@cond_branch
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L507:
	.align	2, 0
.L506:
	.word	sLvlUpStatStrings
.Lfe56:
	.size	 DrawLevelUpWindowPg2,.Lfe56-DrawLevelUpWindowPg2
	.align	2, 0
	.globl	GetMonLevelUpWindowStats
	.type	 GetMonLevelUpWindowStats,function
	.thumb_func
GetMonLevelUpWindowStats:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r1, #0x3a
	bl	GetMonData
	strh	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	strh	r0, [r5, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	strh	r0, [r5, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	strh	r0, [r5, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	strh	r0, [r5, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	strh	r0, [r5, #0xa]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 GetMonLevelUpWindowStats,.Lfe57-GetMonLevelUpWindowStats
.text
	.align	2, 0

