@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	1, 0
	.type	 sMatchCallUI_Pal,object
sMatchCallUI_Pal:
	.short	0x300
	.short	0x3f1e
	.short	0x7fff
	.short	0x3dcd
	.short	0x0
	.short	0x39b7
	.short	0x2506
	.short	0x53bf
	.short	0x3eb8
	.short	0x4ed7
	.short	0x6318
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sMatchCallUI_Pal,32
	.align	2, 0
	.type	 sMatchCallUI_Gfx,object
sMatchCallUI_Gfx:
	.word	0x1a010
	.word	-0x77777800
	.word	-0x66666678
	.word	0x38880099
	.word	0x69996666
	.word	-0x77ff8889
	.word	0x63777768
	.word	0xc777766
	.word	0x11117776
	.word	0x1f500310
	.word	0x66676666
	.word	0x1701500
	.word	0x1301111
	.word	0x7f03f60
	.word	-0x67f8af41
	.word	0x1500710
	.word	0x3f504750
	.word	0x1f201b90
	.word	0x57030083
	.word	0x51999996
	.word	-0x78affcc0
	.word	0x3003f0cf
	.word	-0xffffffd
	.word	0x50019001
	.word	-0xffe0f99
	.word	0x67500130
	.word	0x7fb003f0
	.word	0x55556666
	.word	0x55633300
	.word	0x55688855
	.word	0x69990055
	.word	0x38886666
	.word	0x10cc3333
	.word	0x554750af
	.word	0x10017055
	.word	-0x13cccc1d
	.word	0x13d01f70
	.word	0x550190
	.word	0x66031063
	.word	-0x6666cf6d
	.word	0x1001ce0
	.size	 sMatchCallUI_Gfx,164
	.align	2, 0
	.type	 sMatchCallUI_Tilemap,object
sMatchCallUI_Tilemap:
	.word	0x50010
	.word	-0xfdf7dcf
	.word	-0x7ffeefff
	.word	0x1f08120
	.word	-0x7ffe3f7a
	.word	-0xfff8000
	.word	-0x7afecfc7
	.word	-0xf79dfc1
	.word	-0xffe3fff
	.word	-0xfc00fc1
	.word	-0xdc00fff
	.word	0x3ff001f0
	.word	0x3f3001f0
	.word	0x1f02083
	.word	-0x7bdfc67d
	.word	0x1f03ff0
	.word	0x20873f20
	.word	-0x78e0fe10
	.word	0x3ff08820
	.word	0x3ff001f0
	.word	0x1f03ff0
	.word	-0x74c03f6f
	.word	-0x74fe0fe0
	.word	0x3ff08c20
	.word	-0xffe0f01
	.word	-0xf000f01
	.word	-0xf400fff
	.word	-0xf400fff
	.word	0x3ff0ff01
	.word	0x1f03ff0
	.word	0x3df03ff0
	.word	0x1f03ff0
	.word	-0xf00c010
	.word	-0xffe0fc1
	.word	-0xfc00fc1
	.word	-0xffe0fc1
	.word	-0xc00fc1
	.word	0x3ff02ff0
	.word	0x3ff03ff0
	.word	0x3ff001f0
	.word	0x3ff03ff0
	.word	-0xdfe0f1d
	.word	-0x76807d81
	.word	0x1f08a20
	.word	-0xc00fe40
	.word	-0xffe0f41
	.word	-0xf5c7bff
	.word	-0xffe0fc1
	.word	0x3fa001
	.size	 sMatchCallUI_Tilemap,196
	.align	1, 0
	.type	 gUnknown_08622698,object
gUnknown_08622698:
	.short	0x0
	.short	0x5312
	.short	0x2506
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gUnknown_08622698,32
	.align	2, 0
	.type	 gUnknown_086226B8,object
gUnknown_086226B8:
	.word	0x4010
	.word	0x7000002e
	.word	0x3501101
	.word	0x3300400
	.word	0x3108411
	.word	0x22111102
	.word	0x20300
	.word	0x600a6
	.word	0x20000600
	.word	0x1500300
	.size	 gUnknown_086226B8,40
	.align	1, 0
	.type	 gUnknown_086226E0,object
gUnknown_086226E0:
	.short	0x0
	.short	0x7ffe
	.short	0x442
	.short	0x737b
	.short	0x1f
	.short	0x1c
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gUnknown_086226E0,32
	.align	1, 0
	.type	 gUnknown_08622700,object
gUnknown_08622700:
	.short	0x300
	.short	0x3f1e
	.short	0x7fff
	.short	0x3dcd
	.short	0x93f
	.short	0x428
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gUnknown_08622700,32
	.align	1, 0
	.type	 gUnknown_08622720,object
gUnknown_08622720:
	.short	0x300
	.short	0x3f1e
	.short	0x7fff
	.short	0x3dcd
	.short	0x0
	.short	0x21b7
	.short	0x2506
	.short	0x4f7f
	.short	0x2a16
	.short	0x3637
	.short	0x6318
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x93f
	.short	0x300
	.short	0x3f1e
	.short	0x7fff
	.short	0x3dcd
	.short	0x0
	.short	0x21b7
	.short	0x2506
	.short	0x4f7f
	.short	0x2a16
	.short	0x3637
	.short	0x6318
	.short	0x6318
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x21b7
	.size	 gUnknown_08622720,64
	.align	2, 0
	.type	 gUnknown_08622760,object
gUnknown_08622760:
	.word	0x4010
	.word	-0x4feeeee0
	.word	0x66666601
	.word	-0xef099a
	.word	0x3206fff
	.word	0x366ff33f
	.word	0x63333300
	.word	0x6bb33bb6
	.word	-0x4444c74a
	.word	0x1f100320
	.word	0x2f90
	.size	 gUnknown_08622760,44
	.globl	sMatchCallBgTemplates
	.align	2, 0
	.type	 sMatchCallBgTemplates,object
	.size	 sMatchCallBgTemplates,12
sMatchCallBgTemplates:
	.byte	0xfd
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0x6a
	.byte	0x20
	.byte	0x20
	.space	1
	.byte	0x77
	.byte	0x30
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sMatchCallLoopTaskFuncs,object
sMatchCallLoopTaskFuncs:
	.word	0x0
	.word	MatchCallListCursorDown
	.word	MatchCallListCursorUp
	.word	MatchCallListPageDown
	.word	MatchCallListPageUp
	.word	SelectMatchCallEntry
	.word	MoveMatchCallOptionsCursor
	.word	CancelMatchCallSelection
	.word	DoMatchCallMessage
	.word	DoTrainerCloseByMessage
	.word	sub_81CB888
	.word	ShowCheckPage
	.word	ShowCheckPageUp
	.word	ShowCheckPageDown
	.word	ExitCheckPage
	.word	ExitMatchCall
	.size	 sMatchCallLoopTaskFuncs,64
	.align	2, 0
	.type	 sMatchCallLocationWindowTemplate,object
	.size	 sMatchCallLocationWindowTemplate,8
sMatchCallLocationWindowTemplate:
	.byte	0x2
	.byte	0x0
	.byte	0x5
	.byte	0xb
	.byte	0x2
	.byte	0x2
	.short	0x10
	.align	2, 0
	.type	 sMatchCallInfoBoxWindowTemplate,object
	.size	 sMatchCallInfoBoxWindowTemplate,8
sMatchCallInfoBoxWindowTemplate:
	.byte	0x2
	.byte	0x0
	.byte	0x9
	.byte	0xb
	.byte	0x8
	.byte	0x2
	.short	0x26
	.align	2, 0
	.type	 sMatchCallOptionTexts,object
	.size	 sMatchCallOptionTexts,12
sMatchCallOptionTexts:
	.word	gText_Call
	.word	gText_Check
	.word	gText_Cancel6
	.type	 sText_CallingDots,object
sText_CallingDots:
	.byte	0xaf
	.byte	0xfc
	.byte	0x8
	.byte	0x4
	.byte	0xaf
	.byte	0xfc
	.byte	0x8
	.byte	0x4
	.byte	0xaf
	.byte	0xfc
	.byte	0x8
	.byte	0x4
	.byte	0xaf
	.byte	0xfc
	.byte	0x8
	.byte	0x4
	.byte	0xaf
	.byte	0xfb
	.byte	0xff
	.size	 sText_CallingDots,19
	.align	2, 0
	.type	 sCallMsgBoxWindowTemplate,object
	.size	 sCallMsgBoxWindowTemplate,8
sCallMsgBoxWindowTemplate:
	.byte	0x1
	.byte	0x1
	.byte	0xc
	.byte	0x1c
	.byte	0x4
	.byte	0x1
	.short	0xa
	.globl	gUnknown_08622810
	.align	2, 0
	.type	 gUnknown_08622810,object
	.size	 gUnknown_08622810,8
gUnknown_08622810:
	.word	gUnknown_086226B8
	.short	0x40
	.short	0x7
	.globl	gUnknown_08622818
	.align	2, 0
	.type	 gUnknown_08622818,object
	.size	 gUnknown_08622818,16
gUnknown_08622818:
	.word	gUnknown_08622698
	.short	0xc
	.space	2
	.space	8
	.align	2, 0
	.type	 sOptionsCursorOamData,object
	.size	 sOptionsCursorOamData,8
sOptionsCursorOamData:
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 sOptionsCursorSpriteTemplate,object
	.size	 sOptionsCursorSpriteTemplate,24
sOptionsCursorSpriteTemplate:
	.short	0x7
	.short	0xc
	.word	sOptionsCursorOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_OptionsCursor
	.align	2, 0
	.type	 sTrainerPicOamData,object
	.size	 sTrainerPicOamData,8
sTrainerPicOamData:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 sTrainerPicSpriteTemplate,object
	.size	 sTrainerPicSpriteTemplate,24
sTrainerPicSpriteTemplate:
	.short	0x8
	.short	0xd
	.word	sTrainerPicOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
.text
	.align	2, 0
	.globl	OpenMatchCall
	.type	 OpenMatchCall,function
	.thumb_func
OpenMatchCall:
	push	{r4, lr}
	ldr	r1, .L5
	mov	r0, #0x6
	bl	AllocSubstruct
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L3	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4, #0x19]
	ldr	r0, .L5+0x4
	mov	r1, #0x1
	bl	CreateLoopedTask
	str	r0, [r4, #0x4]
	ldr	r0, .L5+0x8
	str	r0, [r4]
	mov	r0, #0x1
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	0x2048
	.word	LoopedTask_OpenMatchCall
	.word	GetCurrentLoopedTaskActive
.L3:
	mov	r0, #0x0
.L4:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 OpenMatchCall,.Lfe1-OpenMatchCall
	.align	2, 0
	.globl	CreateMatchCallLoopedTask
	.type	 CreateMatchCallLoopedTask,function
	.thumb_func
CreateMatchCallLoopedTask:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	ldr	r0, .L8
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldr	r0, [r4]
	mov	r1, #0x1
	bl	CreateLoopedTask
	str	r0, [r5, #0x4]
	ldr	r0, .L8+0x4
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	sMatchCallLoopTaskFuncs
	.word	GetCurrentLoopedTaskActive
.Lfe2:
	.size	 CreateMatchCallLoopedTask,.Lfe2-CreateMatchCallLoopedTask
	.align	2, 0
	.globl	IsMatchCallLoopedTaskActive
	.type	 IsMatchCallLoopedTaskActive,function
	.thumb_func
IsMatchCallLoopedTaskActive:
	push	{lr}
	mov	r0, #0x6
	bl	GetSubstructPtr
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 IsMatchCallLoopedTaskActive,.Lfe3-IsMatchCallLoopedTaskActive
	.align	2, 0
	.globl	FreeMatchCallSubstruct2
	.type	 FreeMatchCallSubstruct2,function
	.thumb_func
FreeMatchCallSubstruct2:
	push	{r4, lr}
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r4, r0, #0
	bl	RemoveMatchCallSprites
	bl	sub_81CBC1C
	ldrb	r0, [r4, #0x12]
	bl	RemoveWindow
	ldrb	r0, [r4, #0x10]
	bl	RemoveWindow
	ldrb	r0, [r4, #0x14]
	bl	RemoveWindow
	mov	r0, #0x6
	bl	FreePokenavSubstruct
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 FreeMatchCallSubstruct2,.Lfe4-FreeMatchCallSubstruct2
	.align	2, 0
	.type	 GetCurrentLoopedTaskActive,function
	.thumb_func
GetCurrentLoopedTaskActive:
	push	{lr}
	mov	r0, #0x6
	bl	GetSubstructPtr
	ldr	r0, [r0, #0x4]
	bl	IsLoopedTaskActive
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 GetCurrentLoopedTaskActive,.Lfe5-GetCurrentLoopedTaskActive
	.align	2, 0
	.type	 LoopedTask_OpenMatchCall,function
	.thumb_func
LoopedTask_OpenMatchCall:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x7
	bls	.LCB162
	b	.L30	@long jump
.LCB162:
	lsl	r0, r4, #0x2
	ldr	r1, .L34
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L35:
	.align	2, 0
.L34:
	.word	.L31
	.align	2, 0
	.align	2, 0
.L31:
	.word	.L15
	.word	.L16
	.word	.L18
	.word	.L20
	.word	.L23
	.word	.L25
	.word	.L26
	.word	.L27
.L15:
	ldr	r0, .L36
	mov	r1, #0x3
	bl	InitBgTemplates
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	ldr	r1, .L36+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	ldr	r0, .L36+0x8
	add	r1, r5, r0
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	ldr	r1, .L36+0xc
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	ldr	r0, .L36+0x10
	mov	r1, #0x20
	mov	r2, #0x20
	bl	CopyPaletteIntoBufferUnfaded
	mov	r0, #0x2
	b	.L33
.L37:
	.align	2, 0
.L36:
	.word	sMatchCallBgTemplates
	.word	sMatchCallUI_Gfx
	.word	0x1024
	.word	sMatchCallUI_Tilemap
	.word	sMatchCallUI_Pal
.L16:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB239
	b	.L29	@long jump
.LCB239:
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	sub_8199DF0
	add	r1, r5, #0
	add	r1, r1, #0x24
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x14
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	ldr	r0, .L38
	mov	r1, #0x10
	mov	r2, #0x20
	bl	CopyPaletteIntoBufferUnfaded
	mov	r0, #0x1
.L33:
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x0
	b	.L32
.L39:
	.align	2, 0
.L38:
	.word	gUnknown_086226E0
.L18:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L29	@cond_branch
	add	r0, r5, #0
	bl	sub_81CC034
	ldr	r1, .L40
	str	r4, [sp]
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	ldr	r0, .L40+0x4
	mov	r1, #0x30
	mov	r2, #0x20
	bl	CopyPaletteIntoBufferUnfaded
	ldr	r0, .L40+0x8
	mov	r1, #0x50
	mov	r2, #0x20
	bl	CopyPaletteIntoBufferUnfaded
	mov	r0, #0x0
	b	.L32
.L41:
	.align	2, 0
.L40:
	.word	gUnknown_08622760
	.word	gUnknown_08622700
	.word	gUnknown_08622720
.L20:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L29	@cond_branch
	bl	sub_81CAE28
	cmp	r0, #0
	beq	.L29	@cond_branch
	bl	InitMatchCallPokenavListMenuTemplate
	mov	r0, #0x0
	b	.L32
.L23:
	bl	sub_81C8224
	cmp	r0, #0
	bne	.L29	@cond_branch
	add	r0, r5, #0
	bl	DrawMatchCallLeftColumnWindows
	mov	r0, #0x0
	b	.L32
.L25:
	add	r0, r5, #0
	bl	UpdateMatchCallInfoBox
	add	r0, r5, #0
	mov	r1, #0x0
	bl	PrintMatchCallLocation
	mov	r0, #0x0
	b	.L32
.L26:
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	bl	sub_81CC214
	mov	r0, #0x3
	bl	LoadLeftHeaderGfxForIndex
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	ShowLeftHeaderGfx
	mov	r0, #0x1
	bl	PokenavFadeScreen
	mov	r0, #0x0
	b	.L32
.L27:
	bl	IsPaletteFadeActive
	cmp	r0, #0
	bne	.L29	@cond_branch
	bl	AreLeftHeaderSpritesMoving
	cmp	r0, #0
	beq	.L28	@cond_branch
.L29:
	mov	r0, #0x2
	b	.L32
.L28:
	mov	r0, #0x1
	bl	sub_81CBC38
.L30:
	mov	r0, #0x4
.L32:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 LoopedTask_OpenMatchCall,.Lfe6-LoopedTask_OpenMatchCall
	.align	2, 0
	.globl	MatchCallListCursorDown
	.type	 MatchCallListCursorDown,function
	.thumb_func
MatchCallListCursorDown:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L52	@cond_branch
	cmp	r4, #0x1
	bgt	.L59	@cond_branch
	cmp	r4, #0
	beq	.L44	@cond_branch
	b	.L43
.L59:
	cmp	r4, #0x2
	beq	.L54	@cond_branch
	cmp	r4, #0x3
	beq	.L55	@cond_branch
	b	.L43
.L44:
	bl	MatchCall_MoveCursorDown
	cmp	r0, #0x1
	beq	.L47	@cond_branch
	cmp	r0, #0x1
	bgt	.L51	@cond_branch
	cmp	r0, #0
	beq	.L43	@cond_branch
	b	.L61
.L51:
	cmp	r0, #0x2
	beq	.L48	@cond_branch
	b	.L61
.L47:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	b	.L60
.L48:
	mov	r0, #0x5
	bl	PlaySE
	b	.L61
.L52:
	bl	IsMonListLoopedTaskActive
	cmp	r0, #0
	bne	.L62	@cond_branch
.L54:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	PrintMatchCallLocation
.L61:
	mov	r0, #0x0
	b	.L60
.L55:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L43	@cond_branch
.L62:
	mov	r0, #0x2
	b	.L60
.L43:
	mov	r0, #0x4
.L60:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 MatchCallListCursorDown,.Lfe7-MatchCallListCursorDown
	.align	2, 0
	.globl	MatchCallListCursorUp
	.type	 MatchCallListCursorUp,function
	.thumb_func
MatchCallListCursorUp:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L73	@cond_branch
	cmp	r4, #0x1
	bgt	.L80	@cond_branch
	cmp	r4, #0
	beq	.L65	@cond_branch
	b	.L64
.L80:
	cmp	r4, #0x2
	beq	.L75	@cond_branch
	cmp	r4, #0x3
	beq	.L76	@cond_branch
	b	.L64
.L65:
	bl	MatchCall_MoveCursorUp
	cmp	r0, #0x1
	beq	.L68	@cond_branch
	cmp	r0, #0x1
	bgt	.L72	@cond_branch
	cmp	r0, #0
	beq	.L64	@cond_branch
	b	.L82
.L72:
	cmp	r0, #0x2
	beq	.L69	@cond_branch
	b	.L82
.L68:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	b	.L81
.L69:
	mov	r0, #0x5
	bl	PlaySE
	b	.L82
.L73:
	bl	IsMonListLoopedTaskActive
	cmp	r0, #0
	bne	.L83	@cond_branch
.L75:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	PrintMatchCallLocation
.L82:
	mov	r0, #0x0
	b	.L81
.L76:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L64	@cond_branch
.L83:
	mov	r0, #0x2
	b	.L81
.L64:
	mov	r0, #0x4
.L81:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 MatchCallListCursorUp,.Lfe8-MatchCallListCursorUp
	.align	2, 0
	.globl	MatchCallListPageDown
	.type	 MatchCallListPageDown,function
	.thumb_func
MatchCallListPageDown:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L94	@cond_branch
	cmp	r4, #0x1
	bgt	.L101	@cond_branch
	cmp	r4, #0
	beq	.L86	@cond_branch
	b	.L85
.L101:
	cmp	r4, #0x2
	beq	.L96	@cond_branch
	cmp	r4, #0x3
	beq	.L97	@cond_branch
	b	.L85
.L86:
	bl	MatchCall_PageDown
	cmp	r0, #0x1
	beq	.L89	@cond_branch
	cmp	r0, #0x1
	bgt	.L93	@cond_branch
	cmp	r0, #0
	beq	.L85	@cond_branch
	b	.L103
.L93:
	cmp	r0, #0x2
	beq	.L90	@cond_branch
	b	.L103
.L89:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	b	.L102
.L90:
	mov	r0, #0x5
	bl	PlaySE
	b	.L103
.L94:
	bl	IsMonListLoopedTaskActive
	cmp	r0, #0
	bne	.L104	@cond_branch
.L96:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	PrintMatchCallLocation
.L103:
	mov	r0, #0x0
	b	.L102
.L97:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L85	@cond_branch
.L104:
	mov	r0, #0x2
	b	.L102
.L85:
	mov	r0, #0x4
.L102:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 MatchCallListPageDown,.Lfe9-MatchCallListPageDown
	.align	2, 0
	.globl	MatchCallListPageUp
	.type	 MatchCallListPageUp,function
	.thumb_func
MatchCallListPageUp:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L115	@cond_branch
	cmp	r4, #0x1
	bgt	.L122	@cond_branch
	cmp	r4, #0
	beq	.L107	@cond_branch
	b	.L106
.L122:
	cmp	r4, #0x2
	beq	.L117	@cond_branch
	cmp	r4, #0x3
	beq	.L118	@cond_branch
	b	.L106
.L107:
	bl	MatchCall_PageUp
	cmp	r0, #0x1
	beq	.L110	@cond_branch
	cmp	r0, #0x1
	bgt	.L114	@cond_branch
	cmp	r0, #0
	beq	.L106	@cond_branch
	b	.L124
.L114:
	cmp	r0, #0x2
	beq	.L111	@cond_branch
	b	.L124
.L110:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	b	.L123
.L111:
	mov	r0, #0x5
	bl	PlaySE
	b	.L124
.L115:
	bl	IsMonListLoopedTaskActive
	cmp	r0, #0
	bne	.L125	@cond_branch
.L117:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	PrintMatchCallLocation
.L124:
	mov	r0, #0x0
	b	.L123
.L118:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L106	@cond_branch
.L125:
	mov	r0, #0x2
	b	.L123
.L106:
	mov	r0, #0x4
.L123:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 MatchCallListPageUp,.Lfe10-MatchCallListPageUp
	.align	2, 0
	.globl	SelectMatchCallEntry
	.type	 SelectMatchCallEntry,function
	.thumb_func
SelectMatchCallEntry:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0
	beq	.L128	@cond_branch
	cmp	r4, #0x1
	beq	.L129	@cond_branch
	b	.L127
.L128:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	PrintMatchCallSelectionOptions
	mov	r0, #0x7
	bl	PrintHelpBarText
	mov	r0, #0x0
	b	.L133
.L129:
	add	r0, r5, #0
	bl	sub_81CBFC4
	cmp	r0, #0
	beq	.L127	@cond_branch
	mov	r0, #0x2
	b	.L133
.L127:
	mov	r0, #0x4
.L133:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 SelectMatchCallEntry,.Lfe11-SelectMatchCallEntry
	.align	2, 0
	.globl	MoveMatchCallOptionsCursor
	.type	 MoveMatchCallOptionsCursor,function
	.thumb_func
MoveMatchCallOptionsCursor:
	push	{r4, lr}
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r4, r0, #0
	bl	GetMatchCallOptionCursorPos
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	UpdateCursorGfxPos
	mov	r0, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 MoveMatchCallOptionsCursor,.Lfe12-MoveMatchCallOptionsCursor
	.align	2, 0
	.type	 CancelMatchCallSelection,function
	.thumb_func
CancelMatchCallSelection:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0
	beq	.L137	@cond_branch
	cmp	r4, #0x1
	beq	.L138	@cond_branch
	b	.L136
.L137:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	UpdateWindowsReturnToTrainerList
	mov	r0, #0x6
	bl	PrintHelpBarText
	mov	r0, #0x0
	b	.L142
.L138:
	add	r0, r5, #0
	bl	IsDma3ManagerBusyWithBgCopy1
	cmp	r0, #0
	beq	.L136	@cond_branch
	mov	r0, #0x2
	b	.L142
.L136:
	mov	r0, #0x4
.L142:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 CancelMatchCallSelection,.Lfe13-CancelMatchCallSelection
	.align	2, 0
	.globl	DoMatchCallMessage
	.type	 DoMatchCallMessage,function
	.thumb_func
DoMatchCallMessage:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L146	@cond_branch
	cmp	r4, #0x1
	bgt	.L154	@cond_branch
	cmp	r4, #0
	beq	.L145	@cond_branch
	b	.L144
.L154:
	cmp	r4, #0x2
	beq	.L148	@cond_branch
	cmp	r4, #0x3
	beq	.L150	@cond_branch
	b	.L144
.L145:
	mov	r0, #0x1
	bl	ToggleMatchCallVerticalArrows
	add	r0, r5, #0
	bl	DrawMsgBoxForMatchCallMsg
	mov	r0, #0x0
	b	.L155
.L146:
	add	r0, r5, #0
	bl	IsDma3ManagerBusyWithBgCopy2
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L156	@cond_branch
	add	r0, r5, #0
	bl	PrintCallingDots
	ldr	r0, .L157
	bl	PlaySE
	strb	r4, [r5, #0xe]
	mov	r0, #0x0
	b	.L155
.L158:
	.align	2, 0
.L157:
	.word	0x107
.L148:
	add	r0, r5, #0
	bl	WaitForCallingDotsText
	cmp	r0, #0
	bne	.L156	@cond_branch
	add	r0, r5, #0
	bl	PrintMatchCallMessage
	mov	r0, #0x0
	b	.L155
.L150:
	add	r0, r5, #0
	bl	WaitForMatchCallMessageText
	cmp	r0, #0
	beq	.L144	@cond_branch
.L156:
	mov	r0, #0x2
	b	.L155
.L144:
	mov	r0, #0x4
.L155:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 DoMatchCallMessage,.Lfe14-DoMatchCallMessage
	.align	2, 0
	.globl	DoTrainerCloseByMessage
	.type	 DoTrainerCloseByMessage,function
	.thumb_func
DoTrainerCloseByMessage:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L162	@cond_branch
	cmp	r4, #0x1
	bgt	.L168	@cond_branch
	cmp	r4, #0
	beq	.L161	@cond_branch
	b	.L160
.L168:
	cmp	r4, #0x2
	beq	.L164	@cond_branch
	b	.L160
.L161:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	DrawMsgBoxForCloseByMsg
	mov	r0, #0x1
	bl	ToggleMatchCallVerticalArrows
	mov	r0, #0x1
	strb	r0, [r5, #0xe]
	mov	r0, #0x0
	b	.L169
.L162:
	add	r0, r5, #0
	bl	IsDma3ManagerBusyWithBgCopy2
	cmp	r0, #0
	bne	.L170	@cond_branch
	add	r0, r5, #0
	bl	PrintTrainerIsCloseBy
	mov	r0, #0x0
	b	.L169
.L164:
	add	r0, r5, #0
	bl	WaitForTrainerIsCloseByText
	cmp	r0, #0
	beq	.L160	@cond_branch
.L170:
	mov	r0, #0x2
	b	.L169
.L160:
	mov	r0, #0x4
.L169:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 DoTrainerCloseByMessage,.Lfe15-DoTrainerCloseByMessage
	.align	2, 0
	.globl	sub_81CB888
	.type	 sub_81CB888,function
	.thumb_func
sub_81CB888:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r4, r0, #0
	mov	r6, #0x0
	cmp	r5, #0x6
	bhi	.L172	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L193
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L194:
	.align	2, 0
.L193:
	.word	.L189
	.align	2, 0
	.align	2, 0
.L189:
	.word	.L173
	.word	.L175
	.word	.L176
	.word	.L178
	.word	.L179
	.word	.L181
	.word	.L186
.L173:
	ldrb	r0, [r4, #0xe]
	cmp	r0, #0
	bne	.L174	@cond_branch
	mov	r0, #0x84
	lsl	r0, r0, #0x1
	bl	PlaySE
.L174:
	mov	r0, #0x5
	bl	PlaySE
	b	.L172
.L175:
	add	r0, r4, #0
	bl	DrawSpinningPokenavForCall
	b	.L172
.L176:
	add	r0, r4, #0
	bl	WaitForSpinningPokenav
	cmp	r0, #0
	beq	.L172	@cond_branch
.L192:
	mov	r6, #0x2
	b	.L172
.L178:
	add	r0, r4, #0
	bl	UpdateWindowsReturnToTrainerList
	b	.L172
.L179:
	add	r0, r4, #0
	bl	IsDma3ManagerBusyWithBgCopy1
	cmp	r0, #0
	beq	.L180	@cond_branch
	mov	r6, #0x2
.L180:
	mov	r0, #0x6
	bl	PrintHelpBarText
	b	.L172
.L181:
	bl	WaitForHelpBar
	cmp	r0, #0
	bne	.L192	@cond_branch
	ldrb	r0, [r4, #0xf]
	cmp	r0, #0
	beq	.L187	@cond_branch
	bl	sub_81C8838
	mov	r6, #0x1
	b	.L172
.L186:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L192	@cond_branch
.L187:
	mov	r0, #0x0
	bl	ToggleMatchCallVerticalArrows
	mov	r6, #0x4
.L172:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 sub_81CB888,.Lfe16-sub_81CB888
	.align	2, 0
	.globl	ShowCheckPage
	.type	 ShowCheckPage,function
	.thumb_func
ShowCheckPage:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L198	@cond_branch
	cmp	r4, #0x1
	bgt	.L207	@cond_branch
	cmp	r4, #0
	beq	.L197	@cond_branch
	b	.L196
.L207:
	cmp	r4, #0x2
	beq	.L201	@cond_branch
	cmp	r4, #0x3
	beq	.L202	@cond_branch
	b	.L196
.L197:
	mov	r0, #0x5
	bl	PlaySE
	bl	sub_81C877C
	add	r0, r5, #0
	bl	UpdateWindowsToShowCheckPage
	mov	r0, #0x0
	b	.L208
.L198:
	bl	IsMatchCallListTaskActive
	cmp	r0, #0
	bne	.L204	@cond_branch
	add	r0, r5, #0
	bl	IsDma3ManagerBusyWithBgCopy1
	cmp	r0, #0
	bne	.L204	@cond_branch
	mov	r0, #0x8
	bl	PrintHelpBarText
	mov	r0, #0x0
	b	.L208
.L201:
	mov	r0, #0x0
	bl	PrintCheckPageInfo
	add	r0, r5, #0
	bl	LoadCheckPageTrainerPic
	mov	r0, #0x0
	b	.L208
.L202:
	bl	IsMatchCallListTaskActive
	cmp	r0, #0
	bne	.L204	@cond_branch
	add	r0, r5, #0
	bl	WaitForTrainerPic
	cmp	r0, #0
	bne	.L204	@cond_branch
	bl	WaitForHelpBar
	cmp	r0, #0
	beq	.L196	@cond_branch
.L204:
	mov	r0, #0x2
	b	.L208
.L196:
	mov	r0, #0x4
.L208:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 ShowCheckPage,.Lfe17-ShowCheckPage
	.align	2, 0
	.globl	ShowCheckPageDown
	.type	 ShowCheckPageDown,function
	.thumb_func
ShowCheckPageDown:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r4, r0, #0
	cmp	r5, #0x4
	bhi	.L210	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L223
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L224:
	.align	2, 0
.L223:
	.word	.L220
	.align	2, 0
	.align	2, 0
.L220:
	.word	.L211
	.word	.L213
	.word	.L215
	.word	.L216
	.word	.L217
.L211:
	bl	GetMatchCallListTopIndex
	bl	GetIndexDeltaOfNextCheckPageDown
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L210	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	strh	r5, [r4, #0x16]
	add	r0, r4, #0
	bl	TrainerPicSlideOffscreen
	mov	r0, #0x0
	b	.L222
.L213:
	add	r0, r4, #0
	bl	WaitForTrainerPic
	cmp	r0, #0
	bne	.L219	@cond_branch
	mov	r0, #0x16
	ldrsh	r1, [r4, r0]
	add	r0, r4, #0
	bl	PrintMatchCallLocation
	mov	r0, #0x0
	b	.L222
.L215:
	mov	r1, #0x16
	ldrsh	r0, [r4, r1]
	bl	PrintCheckPageInfo
	mov	r0, #0x0
	b	.L222
.L216:
	add	r0, r4, #0
	bl	LoadCheckPageTrainerPic
	mov	r0, #0x0
	b	.L222
.L217:
	bl	IsMatchCallListTaskActive
	cmp	r0, #0
	bne	.L219	@cond_branch
	add	r0, r4, #0
	bl	WaitForTrainerPic
	cmp	r0, #0
	beq	.L210	@cond_branch
.L219:
	mov	r0, #0x2
	b	.L222
.L210:
	mov	r0, #0x4
.L222:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 ShowCheckPageDown,.Lfe18-ShowCheckPageDown
	.align	2, 0
	.globl	ExitCheckPage
	.type	 ExitCheckPage,function
	.thumb_func
ExitCheckPage:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L228	@cond_branch
	cmp	r4, #0x1
	bgt	.L235	@cond_branch
	cmp	r4, #0
	beq	.L227	@cond_branch
	b	.L226
.L235:
	cmp	r4, #0x2
	beq	.L231	@cond_branch
	b	.L226
.L227:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	TrainerPicSlideOffscreen
	bl	sub_81C87F0
	mov	r0, #0x0
	b	.L236
.L228:
	bl	IsMatchCallListTaskActive
	cmp	r0, #0
	bne	.L237	@cond_branch
	add	r0, r5, #0
	bl	WaitForTrainerPic
	cmp	r0, #0
	bne	.L237	@cond_branch
	mov	r0, #0x6
	bl	PrintHelpBarText
	add	r0, r5, #0
	bl	UpdateMatchCallInfoBox
	mov	r0, #0x0
	b	.L236
.L231:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L226	@cond_branch
.L237:
	mov	r0, #0x2
	b	.L236
.L226:
	mov	r0, #0x4
.L236:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 ExitCheckPage,.Lfe19-ExitCheckPage
	.align	2, 0
	.globl	ShowCheckPageUp
	.type	 ShowCheckPageUp,function
	.thumb_func
ShowCheckPageUp:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r4, r0, #0
	cmp	r5, #0x4
	bhi	.L239	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L252
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L253:
	.align	2, 0
.L252:
	.word	.L249
	.align	2, 0
	.align	2, 0
.L249:
	.word	.L240
	.word	.L242
	.word	.L244
	.word	.L245
	.word	.L246
.L240:
	bl	GetMatchCallListTopIndex
	bl	GetIndexDeltaOfNextCheckPageUp
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L239	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	strh	r5, [r4, #0x16]
	add	r0, r4, #0
	bl	TrainerPicSlideOffscreen
	mov	r0, #0x0
	b	.L251
.L242:
	add	r0, r4, #0
	bl	WaitForTrainerPic
	cmp	r0, #0
	bne	.L248	@cond_branch
	mov	r0, #0x16
	ldrsh	r1, [r4, r0]
	add	r0, r4, #0
	bl	PrintMatchCallLocation
	mov	r0, #0x0
	b	.L251
.L244:
	mov	r1, #0x16
	ldrsh	r0, [r4, r1]
	bl	PrintCheckPageInfo
	mov	r0, #0x0
	b	.L251
.L245:
	add	r0, r4, #0
	bl	LoadCheckPageTrainerPic
	mov	r0, #0x0
	b	.L251
.L246:
	bl	IsMatchCallListTaskActive
	cmp	r0, #0
	bne	.L248	@cond_branch
	add	r0, r4, #0
	bl	WaitForTrainerPic
	cmp	r0, #0
	beq	.L239	@cond_branch
.L248:
	mov	r0, #0x2
	b	.L251
.L239:
	mov	r0, #0x4
.L251:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 ShowCheckPageUp,.Lfe20-ShowCheckPageUp
	.align	2, 0
	.globl	ExitMatchCall
	.type	 ExitMatchCall,function
	.thumb_func
ExitMatchCall:
	push	{lr}
	cmp	r0, #0
	beq	.L256	@cond_branch
	cmp	r0, #0x1
	beq	.L257	@cond_branch
	b	.L255
.L256:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	bl	sub_81CBC38
	mov	r0, #0x0
	bl	PokenavFadeScreen
	bl	SlideMenuHeaderDown
	mov	r0, #0x0
	b	.L262
.L257:
	bl	IsPaletteFadeActive
	cmp	r0, #0
	bne	.L259	@cond_branch
	bl	MainMenuLoopedTaskIsBusy
	cmp	r0, #0
	beq	.L258	@cond_branch
.L259:
	mov	r0, #0x2
	b	.L262
.L258:
	bl	SetLeftHeaderSpritesInvisibility
.L255:
	mov	r0, #0x4
.L262:
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 ExitMatchCall,.Lfe21-ExitMatchCall
	.align	2, 0
	.type	 InitMatchCallPokenavListMenuTemplate,function
	.thumb_func
InitMatchCallPokenavListMenuTemplate:
	push	{lr}
	add	sp, sp, #-0x18
	bl	sub_81CAE94
	str	r0, [sp]
	bl	GetNumberRegistered
	mov	r1, sp
	mov	r2, #0x0
	strh	r0, [r1, #0x4]
	mov	r0, #0x4
	strb	r0, [r1, #0x8]
	mov	r0, sp
	strh	r2, [r0, #0x6]
	mov	r0, #0xd
	strb	r0, [r1, #0x9]
	mov	r0, #0x10
	strb	r0, [r1, #0xa]
	mov	r0, #0x1
	strb	r0, [r1, #0xb]
	mov	r0, #0x8
	strb	r0, [r1, #0xc]
	mov	r0, #0x3
	strb	r0, [r1, #0xd]
	mov	r0, #0x7
	strb	r0, [r1, #0xe]
	ldr	r0, .L264
	str	r0, [sp, #0x10]
	ldr	r0, .L264+0x4
	str	r0, [sp, #0x14]
	ldr	r0, .L264+0x8
	mov	r2, #0x2
	bl	sub_81C81D4
	ldr	r0, .L264+0xc
	mov	r1, #0x7
	bl	CreateTask
	add	sp, sp, #0x18
	pop	{r0}
	bx	r0
.L265:
	.align	2, 0
.L264:
	.word	BufferMatchCallNameAndDesc
	.word	TryDrawRematchPokeballIcon
	.word	sMatchCallBgTemplates+0x8
	.word	sub_81CBC64
.Lfe22:
	.size	 InitMatchCallPokenavListMenuTemplate,.Lfe22-InitMatchCallPokenavListMenuTemplate
	.align	2, 0
	.type	 sub_81CBC1C,function
	.thumb_func
sub_81CBC1C:
	push	{lr}
	bl	sub_81C8234
	ldr	r0, .L267
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	pop	{r0}
	bx	r0
.L268:
	.align	2, 0
.L267:
	.word	sub_81CBC64
.Lfe23:
	.size	 sub_81CBC1C,.Lfe23-sub_81CBC1C
	.align	2, 0
	.type	 sub_81CBC38,function
	.thumb_func
sub_81CBC38:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L271
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L270	@cond_branch
	ldr	r1, .L271+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x26]
.L270:
	pop	{r4}
	pop	{r0}
	bx	r0
.L272:
	.align	2, 0
.L271:
	.word	sub_81CBC64
	.word	gTasks
.Lfe24:
	.size	 sub_81CBC38,.Lfe24-sub_81CBC38
	.align	2, 0
	.type	 sub_81CBC64,function
	.thumb_func
sub_81CBC64:
	push	{r4, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L276
	add	r2, r1, r0
	mov	r1, #0x1e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L274	@cond_branch
	ldrh	r0, [r2]
	add	r0, r0, #0x4
	mov	r1, #0x7f
	and	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L276+0x4
	mov	r3, #0x0
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x2]
	ldr	r0, .L276+0x8
	add	r1, r0, #0
	add	r1, r1, #0x20
	mov	r3, #0x2
	ldrsh	r2, [r2, r3]
	str	r2, [sp]
	ldr	r4, .L276+0xc
	str	r4, [sp, #0x4]
	mov	r2, #0x10
	mov	r3, #0x10
	bl	PokenavCopyPalette
	ldr	r0, .L276+0x10
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L274	@cond_branch
	ldr	r1, .L276+0x14
	ldr	r2, .L276+0x18
	add	r0, r4, #0
	bl	CpuSet
.L274:
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L277:
	.align	2, 0
.L276:
	.word	gTasks+0x8
	.word	gSineTable
	.word	gUnknown_08622720
	.word	gPlttBufferUnfaded+0xa0
	.word	gPaletteFade
	.word	gPlttBufferFaded+0xa0
	.word	0x4000008
.Lfe25:
	.size	 sub_81CBC64,.Lfe25-sub_81CBC64
	.align	2, 0
	.type	 TryDrawRematchPokeballIcon,function
	.thumb_func
TryDrawRematchPokeballIcon:
	push	{r4, r5, r6, lr}
	add	r5, r1, #0
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	GetWindowAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBgTilemapBuffer
	add	r6, r0, #0
	lsl	r4, r4, #0x7
	add	r4, r4, #0x3a
	add	r6, r6, r4
	add	r0, r5, #0
	bl	ShouldDrawRematchPokeballIcon
	cmp	r0, #0
	beq	.L279	@cond_branch
	mov	r1, #0xa0
	lsl	r1, r1, #0x7
	add	r0, r1, #0
	strh	r0, [r6]
	add	r1, r6, #0
	add	r1, r1, #0x40
	ldr	r2, .L281
	add	r0, r2, #0
	strh	r0, [r1]
	b	.L280
.L282:
	.align	2, 0
.L281:
	.word	0x5001
.L279:
	ldr	r0, .L283
	add	r1, r0, #0
	strh	r1, [r6]
	add	r0, r6, #0
	add	r0, r0, #0x40
	strh	r1, [r0]
.L280:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L284:
	.align	2, 0
.L283:
	.word	0x5002
.Lfe26:
	.size	 TryDrawRematchPokeballIcon,.Lfe26-TryDrawRematchPokeballIcon
	.align	2, 0
	.globl	ClearRematchPokeballIcon
	.type	 ClearRematchPokeballIcon,function
	.thumb_func
ClearRematchPokeballIcon:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	GetWindowAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBgTilemapBuffer
	lsl	r4, r4, #0x7
	add	r4, r4, #0x3a
	add	r0, r0, r4
	ldr	r2, .L286
	add	r1, r2, #0
	strh	r1, [r0]
	add	r0, r0, #0x40
	strh	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L287:
	.align	2, 0
.L286:
	.word	0x5002
.Lfe27:
	.size	 ClearRematchPokeballIcon,.Lfe27-ClearRematchPokeballIcon
	.align	2, 0
	.type	 DrawMatchCallLeftColumnWindows,function
	.thumb_func
DrawMatchCallLeftColumnWindows:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L289
	bl	AddWindow
	strh	r0, [r4, #0x10]
	ldr	r0, .L289+0x4
	bl	AddWindow
	strh	r0, [r4, #0x12]
	ldrb	r0, [r4, #0x10]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4, #0x10]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x12]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4, #0x12]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x10]
	mov	r1, #0x1
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L290:
	.align	2, 0
.L289:
	.word	sMatchCallLocationWindowTemplate
	.word	sMatchCallInfoBoxWindowTemplate
.Lfe28:
	.size	 DrawMatchCallLeftColumnWindows,.Lfe28-DrawMatchCallLeftColumnWindows
	.align	2, 0
	.type	 UpdateMatchCallInfoBox,function
	.thumb_func
UpdateMatchCallInfoBox:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0x12]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrh	r0, [r4, #0x12]
	bl	PrintNumberRegisteredLabel
	ldrh	r0, [r4, #0x12]
	bl	PrintNumberRegistered
	ldrh	r0, [r4, #0x12]
	bl	PrintNumberOfBattlesLabel
	ldrh	r0, [r4, #0x12]
	bl	PrintNumberOfBattles
	ldrb	r0, [r4, #0x12]
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 UpdateMatchCallInfoBox,.Lfe29-UpdateMatchCallInfoBox
	.align	2, 0
	.type	 PrintNumberRegisteredLabel,function
	.thumb_func
PrintNumberRegisteredLabel:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L293
	mov	r2, #0x0
	bl	PrintMatchCallInfoLabel
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	gText_NumberRegistered
.Lfe30:
	.size	 PrintNumberRegisteredLabel,.Lfe30-PrintNumberRegisteredLabel
	.align	2, 0
	.type	 PrintNumberRegistered,function
	.thumb_func
PrintNumberRegistered:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	GetNumberRegistered
	add	r1, r0, #0
	mov	r0, sp
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r0, r4, #0
	mov	r1, sp
	mov	r2, #0x1
	bl	PrintMatchCallInfoNumber
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 PrintNumberRegistered,.Lfe31-PrintNumberRegistered
	.align	2, 0
	.type	 PrintNumberOfBattlesLabel,function
	.thumb_func
PrintNumberOfBattlesLabel:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L297
	mov	r2, #0x2
	bl	PrintMatchCallInfoLabel
	pop	{r0}
	bx	r0
.L298:
	.align	2, 0
.L297:
	.word	gText_NumberOfBattles
.Lfe32:
	.size	 PrintNumberOfBattlesLabel,.Lfe32-PrintNumberOfBattlesLabel
	.align	2, 0
	.type	 PrintNumberOfBattles,function
	.thumb_func
PrintNumberOfBattles:
	push	{r4, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x9
	bl	GetGameStat
	add	r1, r0, #0
	ldr	r0, .L301
	cmp	r1, r0
	ble	.L300	@cond_branch
	add	r1, r0, #0
.L300:
	mov	r0, sp
	mov	r2, #0x0
	mov	r3, #0x5
	bl	ConvertIntToDecimalStringN
	add	r0, r4, #0
	mov	r1, sp
	mov	r2, #0x3
	bl	PrintMatchCallInfoNumber
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L302:
	.align	2, 0
.L301:
	.word	0x1869f
.Lfe33:
	.size	 PrintNumberOfBattles,.Lfe33-PrintNumberOfBattles
	.align	2, 0
	.type	 PrintMatchCallInfoLabel,function
	.thumb_func
PrintMatchCallInfoLabel:
	push	{lr}
	add	sp, sp, #-0xc
	add	r3, r1, #0
	lsl	r2, r2, #0x4
	add	r2, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp]
	mov	r1, #0xff
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x7
	add	r2, r3, #0
	mov	r3, #0x2
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 PrintMatchCallInfoLabel,.Lfe34-PrintMatchCallInfoLabel
	.align	2, 0
	.type	 PrintMatchCallInfoNumber,function
	.thumb_func
PrintMatchCallInfoNumber:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	add	r6, r1, #0
	add	r4, r2, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r0, #0x7
	mov	r2, #0x56
	bl	GetStringRightAlignXOffset
	add	r3, r0, #0
	lsl	r4, r4, #0x4
	add	r4, r4, #0x1
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, r5, #0
	mov	r1, #0x7
	add	r2, r6, #0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 PrintMatchCallInfoNumber,.Lfe35-PrintMatchCallInfoNumber
	.align	2, 0
	.type	 PrintMatchCallLocation,function
	.thumb_func
PrintMatchCallLocation:
	push	{r4, r5, lr}
	add	sp, sp, #-0x2c
	add	r5, r0, #0
	add	r4, r1, #0
	bl	GetSelectedPokenavListIndex
	add	r0, r0, r4
	bl	GetMatchCallMapSec
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xd5
	beq	.L306	@cond_branch
	add	r0, sp, #0xc
	mov	r2, #0x0
	bl	GetMapName
	b	.L307
.L306:
	ldr	r1, .L308
	add	r0, sp, #0xc
	bl	StringCopy
.L307:
	mov	r0, #0x7
	add	r1, sp, #0xc
	mov	r2, #0x58
	bl	GetStringCenterAlignXOffset
	add	r4, r0, #0
	ldrb	r0, [r5, #0x10]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrb	r0, [r5, #0x10]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x7
	add	r2, sp, #0xc
	add	r3, r4, #0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0x2c
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	gText_Unknown
.Lfe36:
	.size	 PrintMatchCallLocation,.Lfe36-PrintMatchCallLocation
	.align	2, 0
	.type	 PrintMatchCallSelectionOptions,function
	.thumb_func
PrintMatchCallSelectionOptions:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	ldrb	r0, [r5, #0x12]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r4, #0x0
	mov	r6, #0x80
	lsl	r6, r6, #0x11
	b	.L311
.L315:
	ldrb	r0, [r5, #0x12]
	ldr	r2, .L317
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r2, [r1]
	lsr	r1, r6, #0x18
	str	r1, [sp]
	mov	r1, #0xff
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x7
	mov	r3, #0x10
	bl	AddTextPrinterParameterized
	mov	r0, #0x80
	lsl	r0, r0, #0x15
	add	r6, r6, r0
	add	r4, r4, #0x1
.L311:
	cmp	r4, #0x2
	bhi	.L312	@cond_branch
	add	r0, r4, #0
	bl	GetMatchCallOptionId
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x3
	bne	.L315	@cond_branch
.L312:
	ldrb	r0, [r5, #0x12]
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L318:
	.align	2, 0
.L317:
	.word	sMatchCallOptionTexts
.Lfe37:
	.size	 PrintMatchCallSelectionOptions,.Lfe37-PrintMatchCallSelectionOptions
	.align	2, 0
	.type	 sub_81CBFC4,function
	.thumb_func
sub_81CBFC4:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L320	@cond_branch
	mov	r0, #0x1
	b	.L321
.L320:
	bl	GetMatchCallOptionCursorPos
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_81CC2F0
	mov	r0, #0x0
.L321:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 sub_81CBFC4,.Lfe38-sub_81CBFC4
	.align	2, 0
	.type	 UpdateWindowsReturnToTrainerList,function
	.thumb_func
UpdateWindowsReturnToTrainerList:
	push	{r4, lr}
	add	r4, r0, #0
	bl	CloseMatchCallSelectOptionsWindow
	add	r0, r4, #0
	bl	UpdateMatchCallInfoBox
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 UpdateWindowsReturnToTrainerList,.Lfe39-UpdateWindowsReturnToTrainerList
	.align	2, 0
	.type	 IsDma3ManagerBusyWithBgCopy1,function
	.thumb_func
IsDma3ManagerBusyWithBgCopy1:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 IsDma3ManagerBusyWithBgCopy1,.Lfe40-IsDma3ManagerBusyWithBgCopy1
	.align	2, 0
	.type	 UpdateWindowsToShowCheckPage,function
	.thumb_func
UpdateWindowsToShowCheckPage:
	push	{r4, lr}
	add	r4, r0, #0
	bl	CloseMatchCallSelectOptionsWindow
	ldrb	r0, [r4, #0x12]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4, #0x12]
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 UpdateWindowsToShowCheckPage,.Lfe41-UpdateWindowsToShowCheckPage
	.align	2, 0
	.type	 sub_81CC034,function
	.thumb_func
sub_81CC034:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L326
	bl	AddWindow
	strh	r0, [r4, #0x14]
	ldrh	r0, [r4, #0x14]
	mov	r1, #0x1
	mov	r2, #0x4
	bl	sub_8197184
	bl	sub_81C7B40
	pop	{r4}
	pop	{r0}
	bx	r0
.L327:
	.align	2, 0
.L326:
	.word	sCallMsgBoxWindowTemplate
.Lfe42:
	.size	 sub_81CC034,.Lfe42-sub_81CC034
	.align	2, 0
	.type	 DrawMsgBoxForMatchCallMsg,function
	.thumb_func
DrawMsgBoxForMatchCallMsg:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x14]
	mov	r1, #0x1
	mov	r2, #0x4
	bl	sub_8197184
	ldrh	r0, [r4, #0x14]
	mov	r1, #0x1
	mov	r2, #0x4
	bl	sub_81971C4
	ldrb	r0, [r4, #0x14]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4, #0x14]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x14]
	mov	r1, #0x3
	bl	CopyWindowToVram
	bl	PauseSpinningPokenavSprite
	mov	r2, #0x0
	mov	r1, #0x18
	strh	r1, [r0, #0x20]
	mov	r1, #0x70
	strh	r1, [r0, #0x22]
	strh	r2, [r0, #0x26]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 DrawMsgBoxForMatchCallMsg,.Lfe43-DrawMsgBoxForMatchCallMsg
	.align	2, 0
	.type	 DrawMsgBoxForCloseByMsg,function
	.thumb_func
DrawMsgBoxForCloseByMsg:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0x14]
	mov	r1, #0x1
	mov	r2, #0x40
	bl	LoadUserWindowBorderGfx
	ldrb	r0, [r4, #0x14]
	mov	r1, #0x1
	mov	r2, #0x4
	bl	DrawTextBorderOuter
	ldrb	r0, [r4, #0x14]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4, #0x14]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x14]
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 DrawMsgBoxForCloseByMsg,.Lfe44-DrawMsgBoxForCloseByMsg
	.align	2, 0
	.type	 IsDma3ManagerBusyWithBgCopy2,function
	.thumb_func
IsDma3ManagerBusyWithBgCopy2:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 IsDma3ManagerBusyWithBgCopy2,.Lfe45-IsDma3ManagerBusyWithBgCopy2
	.align	2, 0
	.type	 PrintCallingDots,function
	.thumb_func
PrintCallingDots:
	push	{lr}
	add	sp, sp, #-0xc
	ldrb	r0, [r0, #0x14]
	ldr	r2, .L332
	mov	r1, #0x1
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x20
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L333:
	.align	2, 0
.L332:
	.word	sText_CallingDots
.Lfe46:
	.size	 PrintCallingDots,.Lfe46-PrintCallingDots
	.align	2, 0
	.type	 WaitForCallingDotsText,function
	.thumb_func
WaitForCallingDotsText:
	push	{r4, lr}
	add	r4, r0, #0
	bl	RunTextPrinters
	ldrb	r0, [r4, #0x14]
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 WaitForCallingDotsText,.Lfe47-WaitForCallingDotsText
	.align	2, 0
	.type	 PrintTrainerIsCloseBy,function
	.thumb_func
PrintTrainerIsCloseBy:
	push	{lr}
	add	sp, sp, #-0xc
	ldrb	r0, [r0, #0x14]
	ldr	r2, .L336
	mov	r1, #0x1
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L337:
	.align	2, 0
.L336:
	.word	gText_TrainerCloseBy
.Lfe48:
	.size	 PrintTrainerIsCloseBy,.Lfe48-PrintTrainerIsCloseBy
	.align	2, 0
	.type	 WaitForTrainerIsCloseByText,function
	.thumb_func
WaitForTrainerIsCloseByText:
	push	{r4, lr}
	add	r4, r0, #0
	bl	RunTextPrinters
	ldrb	r0, [r4, #0x14]
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe49:
	.size	 WaitForTrainerIsCloseByText,.Lfe49-WaitForTrainerIsCloseByText
	.align	2, 0
	.type	 PrintMatchCallMessage,function
	.thumb_func
PrintMatchCallMessage:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	bl	GetSelectedPokenavListIndex
	add	r1, r4, #0
	add	r1, r1, #0xf
	bl	GetMatchCallMessageText
	add	r5, r0, #0
	bl	GetPlayerTextSpeedDelay
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r4, #0x14]
	mov	r1, #0x1
	str	r1, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, r2, #0
	add	r2, r5, #0
	mov	r3, #0x20
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 PrintMatchCallMessage,.Lfe50-PrintMatchCallMessage
	.align	2, 0
	.type	 WaitForMatchCallMessageText,function
	.thumb_func
WaitForMatchCallMessageText:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L343
	ldrh	r1, [r0, #0x2c]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L341	@cond_branch
	ldr	r0, .L343+0x4
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L342
.L344:
	.align	2, 0
.L343:
	.word	gMain
	.word	gTextFlags
.L341:
	ldr	r2, .L345
	ldrb	r1, [r2]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L342:
	bl	RunTextPrinters
	ldrb	r0, [r4, #0x14]
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.L346:
	.align	2, 0
.L345:
	.word	gTextFlags
.Lfe51:
	.size	 WaitForMatchCallMessageText,.Lfe51-WaitForMatchCallMessageText
	.align	2, 0
	.type	 DrawSpinningPokenavForCall,function
	.thumb_func
DrawSpinningPokenavForCall:
	push	{lr}
	add	sp, sp, #-0x8
	bl	ResumeSpinningPokenavSprite
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x14
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 DrawSpinningPokenavForCall,.Lfe52-DrawSpinningPokenavForCall
	.align	2, 0
	.type	 WaitForSpinningPokenav,function
	.thumb_func
WaitForSpinningPokenav:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 WaitForSpinningPokenav,.Lfe53-WaitForSpinningPokenav
	.align	2, 0
	.type	 sub_81CC214,function
	.thumb_func
sub_81CC214:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r6, r0, #0
	mov	r5, #0x0
	ldr	r4, .L355
.L353:
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheet
	add	r4, r4, #0x8
	add	r5, r5, #0x1
	cmp	r5, #0
	beq	.L353	@cond_branch
	ldr	r0, .L355+0x4
	bl	Pokenav_AllocAndLoadPalettes
	mov	r0, #0x0
	str	r0, [r6, #0x1c]
	ldr	r1, .L355+0x8
	add	r0, r6, r1
	str	r0, [sp]
	ldr	r1, .L355+0xc
	ldr	r0, [sp, #0x4]
	and	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	orr	r0, r0, r1
	ldr	r1, .L355+0x10
	and	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpriteSheet
	ldr	r2, .L355+0x14
	add	r1, r6, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xb
	ldr	r2, .L355+0x18
	add	r0, r0, r2
	str	r0, [r1]
	mov	r0, #0xd
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r6, #0x1a]
	bl	CreateTrainerPicSprite
	str	r0, [r6, #0x20]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L356:
	.align	2, 0
.L355:
	.word	gUnknown_08622810
	.word	gUnknown_08622818
	.word	0x1828
	.word	-0x10000
	.word	0xffff
	.word	0x1824
	.word	0x6010000
.Lfe54:
	.size	 sub_81CC214,.Lfe54-sub_81CC214
	.align	2, 0
	.type	 RemoveMatchCallSprites,function
	.thumb_func
RemoveMatchCallSprites:
	push	{r4, lr}
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r4, r0, #0
	ldr	r0, [r4, #0x1c]
	cmp	r0, #0
	beq	.L358	@cond_branch
	bl	DestroySprite
.L358:
	ldr	r0, [r4, #0x20]
	cmp	r0, #0
	beq	.L359	@cond_branch
	bl	DestroySprite
.L359:
	mov	r0, #0x8
	bl	FreeSpriteTilesByTag
	mov	r0, #0x7
	bl	FreeSpriteTilesByTag
	mov	r0, #0xc
	bl	FreeSpritePaletteByTag
	mov	r0, #0xd
	bl	FreeSpritePaletteByTag
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 RemoveMatchCallSprites,.Lfe55-RemoveMatchCallSprites
	.align	2, 0
	.type	 sub_81CC2F0,function
	.thumb_func
sub_81CC2F0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r0, [r4, #0x1c]
	cmp	r0, #0
	bne	.L361	@cond_branch
	ldr	r0, .L362
	mov	r1, #0x4
	mov	r2, #0x50
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L362+0x4
	add	r1, r1, r0
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	UpdateCursorGfxPos
.L361:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L363:
	.align	2, 0
.L362:
	.word	sOptionsCursorSpriteTemplate
	.word	gSprites
.Lfe56:
	.size	 sub_81CC2F0,.Lfe56-sub_81CC2F0
	.align	2, 0
	.type	 CloseMatchCallSelectOptionsWindow,function
	.thumb_func
CloseMatchCallSelectOptionsWindow:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x1c]
	bl	DestroySprite
	mov	r0, #0x0
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 CloseMatchCallSelectOptionsWindow,.Lfe57-CloseMatchCallSelectOptionsWindow
	.align	2, 0
	.type	 UpdateCursorGfxPos,function
	.thumb_func
UpdateCursorGfxPos:
	ldr	r0, [r0, #0x1c]
	lsl	r1, r1, #0x4
	strh	r1, [r0, #0x26]
	bx	lr
.Lfe58:
	.size	 UpdateCursorGfxPos,.Lfe58-UpdateCursorGfxPos
	.align	2, 0
	.globl	SpriteCB_OptionsCursor
	.type	 SpriteCB_OptionsCursor,function
	.thumb_func
SpriteCB_OptionsCursor:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L367	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r2, #0x24]
	add	r0, r0, #0x1
	mov	r1, #0x7
	and	r0, r0, r1
	strh	r0, [r2, #0x24]
.L367:
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 SpriteCB_OptionsCursor,.Lfe59-SpriteCB_OptionsCursor
	.align	2, 0
	.type	 CreateTrainerPicSprite,function
	.thumb_func
CreateTrainerPicSprite:
	push	{lr}
	ldr	r0, .L369
	mov	r1, #0x2c
	mov	r2, #0x68
	mov	r3, #0x6
	bl	CreateSprite
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L369+0x4
	add	r0, r0, r1
	pop	{r1}
	bx	r1
.L370:
	.align	2, 0
.L369:
	.word	sTrainerPicSpriteTemplate
	.word	gSprites
.Lfe60:
	.size	 CreateTrainerPicSprite,.Lfe60-CreateTrainerPicSprite
	.align	2, 0
	.type	 LoadCheckPageTrainerPic,function
	.thumb_func
LoadCheckPageTrainerPic:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	bl	GetSelectedPokenavListIndex
	bl	GetMatchCallTrainerPic
	cmp	r0, #0
	blt	.L372	@cond_branch
	lsl	r4, r0, #0x3
	ldr	r0, .L373
	add	r0, r4, r0
	ldr	r1, .L373+0x4
	add	r5, r7, r1
	add	r1, r5, #0
	mov	r2, #0x0
	bl	DecompressPicFromTable
	ldr	r0, .L373+0x8
	add	r4, r4, r0
	ldr	r0, [r4]
	ldr	r1, .L373+0xc
	add	r6, r7, r1
	add	r1, r6, #0
	bl	LZ77UnCompWram
	ldr	r1, .L373+0x10
	add	r0, r7, r1
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	add	r0, r5, #0
	mov	r3, #0x1
	bl	RequestDma3Copy
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrh	r1, [r7, #0x1a]
	add	r0, r6, #0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, [r7, #0x20]
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	ldr	r0, [r7, #0x20]
	strh	r4, [r0, #0x3c]
	ldr	r1, [r7, #0x20]
	ldr	r0, .L373+0x14
	str	r0, [r1, #0x1c]
.L372:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L374:
	.align	2, 0
.L373:
	.word	gTrainerFrontPicTable
	.word	0x1828
	.word	gTrainerFrontPicPaletteTable
	.word	0x2028
	.word	0x1824
	.word	SpriteCB_TrainerPicSlideOnscreen
.Lfe61:
	.size	 LoadCheckPageTrainerPic,.Lfe61-LoadCheckPageTrainerPic
	.align	2, 0
	.type	 TrainerPicSlideOffscreen,function
	.thumb_func
TrainerPicSlideOffscreen:
	ldr	r1, [r0, #0x20]
	ldr	r0, .L376
	str	r0, [r1, #0x1c]
	bx	lr
.L377:
	.align	2, 0
.L376:
	.word	SpriteCB_TrainerPicSlideOffscreen
.Lfe62:
	.size	 TrainerPicSlideOffscreen,.Lfe62-TrainerPicSlideOffscreen
	.align	2, 0
	.type	 WaitForTrainerPic,function
	.thumb_func
WaitForTrainerPic:
	ldr	r0, [r0, #0x20]
	ldr	r1, [r0, #0x1c]
	ldr	r0, .L380
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	bx	lr
.L381:
	.align	2, 0
.L380:
	.word	SpriteCallbackDummy
.Lfe63:
	.size	 WaitForTrainerPic,.Lfe63-WaitForTrainerPic
	.align	2, 0
	.type	 SpriteCB_TrainerPicSlideOnscreen,function
	.thumb_func
SpriteCB_TrainerPicSlideOnscreen:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L384	@cond_branch
	cmp	r0, #0x1
	beq	.L386	@cond_branch
	b	.L383
.L384:
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	bl	CheckForSpaceForDma3Request
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	beq	.L383	@cond_branch
	ldr	r0, .L390
	strh	r0, [r4, #0x24]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L383
.L391:
	.align	2, 0
.L390:
	.word	0xffb0
.L386:
	ldrh	r0, [r4, #0x24]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L383	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	ldr	r0, .L392
	str	r0, [r4, #0x1c]
.L383:
	pop	{r4}
	pop	{r0}
	bx	r0
.L393:
	.align	2, 0
.L392:
	.word	SpriteCallbackDummy
.Lfe64:
	.size	 SpriteCB_TrainerPicSlideOnscreen,.Lfe64-SpriteCB_TrainerPicSlideOnscreen
	.align	2, 0
	.type	 SpriteCB_TrainerPicSlideOffscreen,function
	.thumb_func
SpriteCB_TrainerPicSlideOffscreen:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x24]
	sub	r0, r0, #0x8
	strh	r0, [r3, #0x24]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x50
	neg	r1, r1
	cmp	r0, r1
	bgt	.L395	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L396
	str	r0, [r3, #0x1c]
.L395:
	pop	{r0}
	bx	r0
.L397:
	.align	2, 0
.L396:
	.word	SpriteCallbackDummy
.Lfe65:
	.size	 SpriteCB_TrainerPicSlideOffscreen,.Lfe65-SpriteCB_TrainerPicSlideOffscreen
.text
	.align	2, 0

