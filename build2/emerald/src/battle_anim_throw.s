@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sCaptureStars,object
sCaptureStars:
	.byte	0xa
	.byte	0x2
	.byte	-0x3
	.space	1
	.byte	0xf
	.byte	0x0
	.byte	-0x4
	.space	1
	.byte	-0xa
	.byte	0x2
	.byte	-0x4
	.space	1
	.size	 sCaptureStars,12
	.align	2, 0
	.type	 sNewParticlesGfx,object
sNewParticlesGfx:
	.word	0x10010
	.word	0x20
	.word	0xc01
	.word	0xbbc110
	.word	0x8a01107
	.word	0x1201a20
	.word	-0xff1eff0
	.word	0x2070c003
	.word	-0x333ffed0
	.word	0x11100ccc
	.word	-0x5ffeeedc
	.word	0x300dd014
	.word	-0x332ff2fd
	.word	0xb400330
	.word	0x8100dd0
	.word	0x6600100
	.word	-0x78a00000
	.word	-0x578ff988
	.word	-0x79f8f876
	.word	0x1068aaaa
	.word	0x100b1003
	.word	0x1b10c013
	.word	0xb0b4760
	.word	-0x4444fff5
	.word	-0x4ffcdf46
	.word	0x3100500
	.word	0x21830
	.word	0x403
	.word	0x32000
	.word	0x1233342
	.word	0x33320000
	.word	0x300024
	.word	0x405513
	.word	-0x787fdfea
	.word	0x34230020
	.word	0x43701f10
	.word	0x33101b00
	.word	0x130
	.size	 sNewParticlesGfx,152
	.align	2, 0
	.type	 sNewParticlesPal,object
sNewParticlesPal:
	.word	0x2010
	.word	-0x835400
	.word	-0xfd4081
	.word	0x3ff002b
	.word	0x5cef53ff
	.word	0x27004cac
	.word	0x72fa34
	.word	0x28df00
	.word	0x7c467ec0
	.word	0x43aa47f5
	.size	 sNewParticlesPal,40
	.align	2, 0
	.type	 sBallParticleSpriteSheets,object
	.size	 sBallParticleSpriteSheets,216
sBallParticleSpriteSheets:
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe06
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe07
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe08
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe09
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe0a
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe0b
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe0c
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe0d
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe0e
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe0f
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe10
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe11
	.word	sNewParticlesGfx
	.short	0x100
	.short	0xfe12
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe13
	.word	sNewParticlesGfx
	.short	0x100
	.short	0xfe14
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe15
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe16
	.word	sNewParticlesGfx
	.short	0x100
	.short	0xfe17
	.word	sNewParticlesGfx
	.short	0x100
	.short	0xfe18
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe19
	.word	sNewParticlesGfx
	.short	0x100
	.short	0xfe1a
	.word	sNewParticlesGfx
	.short	0x100
	.short	0xfe1b
	.word	sNewParticlesGfx
	.short	0x100
	.short	0xfe1c
	.word	sNewParticlesGfx
	.short	0x100
	.short	0xfe1d
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe1e
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe29
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xfe20
	.align	2, 0
	.type	 sBallParticlePalettes,object
	.size	 sBallParticlePalettes,216
sBallParticlePalettes:
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe06
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe07
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe08
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe09
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe0a
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe0b
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe0c
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe0d
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe0e
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe0f
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe10
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe11
	.space	2
	.word	sNewParticlesPal
	.short	0xfe12
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe13
	.space	2
	.word	sNewParticlesPal
	.short	0xfe14
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe15
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe16
	.space	2
	.word	sNewParticlesPal
	.short	0xfe17
	.space	2
	.word	sNewParticlesPal
	.short	0xfe18
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe19
	.space	2
	.word	sNewParticlesPal
	.short	0xfe1a
	.space	2
	.word	sNewParticlesPal
	.short	0xfe1b
	.space	2
	.word	sNewParticlesPal
	.short	0xfe1c
	.space	2
	.word	sNewParticlesPal
	.short	0xfe1d
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe1e
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe29
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xfe20
	.space	2
	.align	2, 0
	.type	 sAnim_RegularBall,object
sAnim_RegularBall:
	.short	0x0
	.byte	0x1
	.space	1
	.short	0x1
	.byte	0x1
	.space	1
	.short	0x2
	.byte	0x1
	.space	1
	.short	0x0
	.byte	0x41
	.space	1
	.short	0x2
	.byte	0x1
	.space	1
	.short	0x1
	.byte	0x1
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_RegularBall,28
	.align	2, 0
	.type	 sAnim_MasterBall,object
sAnim_MasterBall:
	.short	0x3
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_MasterBall,8
	.align	2, 0
	.type	 sAnim_NetDiveBall,object
sAnim_NetDiveBall:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_NetDiveBall,8
	.align	2, 0
	.type	 sAnim_NestBall,object
sAnim_NestBall:
	.short	0x5
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_NestBall,8
	.align	2, 0
	.type	 sAnim_LuxuryPremierBall,object
sAnim_LuxuryPremierBall:
	.short	0x6
	.byte	0x4
	.space	1
	.short	0x7
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_LuxuryPremierBall,12
	.align	2, 0
	.type	 sAnim_UltraRepeatTimerBall,object
sAnim_UltraRepeatTimerBall:
	.short	0x7
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_UltraRepeatTimerBall,8
	.align	2, 0
	.type	 sAnims_BallParticles,object
sAnims_BallParticles:
	.word	sAnim_RegularBall
	.word	sAnim_MasterBall
	.word	sAnim_NetDiveBall
	.word	sAnim_NestBall
	.word	sAnim_LuxuryPremierBall
	.word	sAnim_UltraRepeatTimerBall
	.size	 sAnims_BallParticles,24
	.type	 sBallParticleAnimNums,object
	.size	 sBallParticleAnimNums,27
sBallParticleAnimNums:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x5
	.byte	0x5
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x2
	.byte	0x4
	.byte	0x3
	.byte	0x3
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x2
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.align	2, 0
	.type	 sBallParticleAnimationFuncs,object
	.size	 sBallParticleAnimationFuncs,108
sBallParticleAnimationFuncs:
	.word	PokeBallOpenParticleAnimation
	.word	GreatBallOpenParticleAnimation
	.word	SafariBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.word	MasterBallOpenParticleAnimation
	.word	SafariBallOpenParticleAnimation
	.word	DiveBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.word	RepeatBallOpenParticleAnimation
	.word	TimerBallOpenParticleAnimation
	.word	GreatBallOpenParticleAnimation
	.word	PremierBallOpenParticleAnimation
	.word	SafariBallOpenParticleAnimation
	.word	GreatBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.word	GreatBallOpenParticleAnimation
	.word	GreatBallOpenParticleAnimation
	.word	GreatBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.word	PokeBallOpenParticleAnimation
	.word	MasterBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.align	2, 0
	.type	 sBallParticleSpriteTemplates,object
	.size	 sBallParticleSpriteTemplates,648
sBallParticleSpriteTemplates:
	.short	0xfe06
	.short	0xfe06
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe07
	.short	0xfe07
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe08
	.short	0xfe08
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe09
	.short	0xfe09
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe0a
	.short	0xfe0a
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe0b
	.short	0xfe0b
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe0c
	.short	0xfe0c
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe0d
	.short	0xfe0d
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe0e
	.short	0xfe0e
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe0f
	.short	0xfe0f
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe10
	.short	0xfe10
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe11
	.short	0xfe11
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe12
	.short	0xfe12
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe13
	.short	0xfe13
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe14
	.short	0xfe14
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe15
	.short	0xfe15
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe16
	.short	0xfe16
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe17
	.short	0xfe17
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe18
	.short	0xfe18
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe19
	.short	0xfe19
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe1a
	.short	0xfe1a
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe1b
	.short	0xfe1b
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe1c
	.short	0xfe1c
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe1d
	.short	0xfe1d
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe1e
	.short	0xfe1e
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe29
	.short	0xfe29
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xfe20
	.short	0xfe20
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gBallOpenFadeColors
	.align	1, 0
	.type	 gBallOpenFadeColors,object
gBallOpenFadeColors:
	.short	0x7adf
	.short	0x7af0
	.short	0x53d7
	.short	0x3fff
	.short	0x7297
	.short	0x67f5
	.short	0x7b2c
	.short	0x2b7e
	.short	0x431f
	.short	0x7bdd
	.short	0x2a3f
	.short	0x293f
	.short	0x1098
	.short	0x6ec9
	.short	0x233e
	.short	0x1f11
	.short	0x6a7f
	.short	0x5167
	.short	0x223d
	.short	0x3fff
	.short	0x3427
	.short	0x7b30
	.short	0x6eff
	.short	0xc99
	.short	0x3fff
	.short	0x3fff
	.short	0x3fff
	.size	 gBallOpenFadeColors,54
	.globl	gPokeblockSpriteTemplate
	.align	2, 0
	.type	 gPokeblockSpriteTemplate,object
	.size	 gPokeblockSpriteTemplate,24
gPokeblockSpriteTemplate:
	.short	0x281d
	.short	0x281d
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_PokeBlock_Throw
	.align	2, 0
	.type	 sAnim_SafariRock,object
sAnim_SafariRock:
	.short	0x40
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_SafariRock,8
	.align	2, 0
	.type	 sAnims_SafariRock,object
sAnims_SafariRock:
	.word	sAnim_SafariRock
	.size	 sAnims_SafariRock,4
	.align	2, 0
	.type	 sSafariRockSpriteTemplate,object
	.size	 sSafariRockSpriteTemplate,24
sSafariRockSpriteTemplate:
	.short	0x274a
	.short	0x274a
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_SafariRock
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_PokeBlock_Throw
.text
	.align	2, 0
	.globl	unref_sub_8170478
	.type	 unref_sub_8170478,function
	.thumb_func
unref_sub_8170478:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x10]
	ldr	r0, .L3
	ldrb	r4, [r0]
	ldr	r0, .L3+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L3+0x8
	strh	r1, [r0]
	ldr	r1, .L3+0xc
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L3+0x10
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L3+0x14
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	ldr	r0, .L3+0x18
	add	r4, r4, r0
	ldrb	r0, [r4]
	ldr	r1, .L3+0x1c
	mov	r9, r1
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r4, r4, r9
	ldrb	r7, [r4, #0x6]
	ldrh	r6, [r4, #0x38]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L3+0x20
	bl	CreateInvisibleSpriteWithCallback
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
	ldr	r0, .L3+0x20
	bl	CreateInvisibleSpriteWithCallback
	mov	sl, r0
	mov	r2, sl
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	ldrb	r1, [r4, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r1
	mov	r1, #0x4
	mov	r8, r1
	mov	r2, r8
	orr	r0, r0, r2
	strb	r0, [r4, #0x5]
	lsl	r5, r7, #0x4
	add	r5, r5, r7
	lsl	r5, r5, #0x2
	add	r5, r5, r9
	ldrb	r1, [r5, #0x5]
	add	r0, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrb	r2, [r1, #0x5]
	add	r0, r3, #0
	and	r0, r0, r2
	mov	r2, r8
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldr	r0, [sp, #0x14]
	lsl	r6, r0, #0x4
	add	r6, r6, r0
	lsl	r6, r6, #0x2
	mov	r1, r9
	add	r7, r6, r1
	add	r0, r7, #0
	add	r1, r4, #0
	mov	r2, #0x44
	str	r3, [sp, #0x18]
	bl	memcpy
	mov	r2, sl
	lsl	r4, r2, #0x4
	add	r4, r4, sl
	lsl	r4, r4, #0x2
	add	r0, r4, #0
	add	r0, r0, r9
	mov	r8, r0
	add	r1, r5, #0
	mov	r2, #0x44
	bl	memcpy
	ldrb	r1, [r7, #0x1]
	ldr	r3, [sp, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r7, #0x1]
	mov	r2, r8
	ldrb	r0, [r2, #0x1]
	and	r3, r3, r0
	orr	r3, r3, r1
	strb	r3, [r2, #0x1]
	mov	r0, #0x1c
	add	r9, r9, r0
	add	r6, r6, r9
	ldr	r1, .L3+0x20
	str	r1, [r6]
	add	r4, r4, r9
	str	r1, [r4]
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L3+0x24
	bl	AnimLoadCompressedBgTilemap
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L3+0x28
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L3+0x2c
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r1, .L3+0x30
	ldrh	r0, [r7, #0x20]
	neg	r0, r0
	add	r0, r0, #0x20
	strh	r0, [r1]
	ldr	r1, .L3+0x34
	ldrh	r0, [r7, #0x22]
	neg	r0, r0
	sub	r0, r0, #0x20
	strh	r0, [r1]
	ldr	r1, .L3+0x38
	ldr	r2, [sp, #0x10]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xa0
	lsl	r1, r1, #0x2
	strh	r1, [r0, #0xa]
	mov	r1, sp
	ldrh	r1, [r1, #0x14]
	strh	r1, [r0, #0x8]
	mov	r2, sl
	strh	r2, [r0, #0xc]
	ldr	r1, .L3+0x3c
	str	r1, [r0]
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBattleAnimAttacker
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	gHealthboxSpriteIds
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	gUnknown_08C2EA9C
	.word	gUnknown_08C2EA50
	.word	gCureBubblesPal
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	sub_8170660
.Lfe1:
	.size	 unref_sub_8170478,.Lfe1-unref_sub_8170478
	.align	2, 0
	.type	 sub_8170660,function
	.thumb_func
sub_8170660:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L20
	ldrb	r0, [r0]
	mov	r8, r0
	ldr	r1, .L20+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r1, [r5, #0xa]
	ldrh	r0, [r5, #0x22]
	add	r1, r1, r0
	mov	r3, #0x0
	strh	r1, [r5, #0x22]
	ldr	r2, .L20+0x8
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x18
	ldrh	r4, [r2]
	add	r0, r0, r4
	strh	r0, [r2]
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r5, #0x22]
	mov	r1, #0x26
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L10	@cond_branch
	cmp	r0, #0x1
	bgt	.L18	@cond_branch
	cmp	r0, #0
	beq	.L7	@cond_branch
	b	.L6
.L21:
	.align	2, 0
.L20:
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	gBattle_BG1_Y
.L18:
	cmp	r0, #0x2
	beq	.L12	@cond_branch
	b	.L6
.L7:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bgt	.LCB305
	b	.L6	@long jump
.LCB305:
	strh	r3, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x20
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x8
	beq	.LCB324
	b	.L6	@long jump
.LCB324:
	b	.L19
.L10:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	beq	.LCB334
	b	.L6	@long jump
.LCB334:
.L19:
	ldrh	r0, [r5, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x26]
	b	.L6
.L12:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L6	@cond_branch
	strh	r3, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x20
	ldrsh	r4, [r5, r0]
	cmp	r4, #0
	bne	.L6	@cond_branch
	mov	r0, #0x0
	bl	sub_80A477C
	ldr	r0, .L22
	strh	r4, [r0]
	ldr	r0, .L22+0x4
	strh	r4, [r0]
	ldr	r4, .L22+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L15	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L15:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r4, #0x8
	ldrsh	r1, [r5, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r6, .L22+0xc
	add	r0, r0, r6
	bl	DestroySprite
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	ldr	r0, .L22+0x10
	add	r0, r0, r8
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r2, [r1, #0x6]
	mov	r8, r2
	ldrh	r4, [r1, #0x38]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r3, [r1, #0x5]
	mov	r2, #0xd
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r3
	mov	r5, #0x4
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	mov	r0, r8
	lsl	r1, r0, #0x4
	add	r1, r1, r8
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r3, [r1, #0x5]
	add	r0, r2, #0
	and	r0, r0, r3
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0, #0x5]
	and	r2, r2, r1
	orr	r2, r2, r5
	strb	r2, [r0, #0x5]
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L6:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe2:
	.size	 sub_8170660,.Lfe2-sub_8170660
	.align	2, 0
	.type	 LoadHealthboxPalsForLevelUp,function
	.thumb_func
LoadHealthboxPalsForLevelUp:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r9, r0
	add	r7, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L25
	add	r2, r2, r0
	ldrb	r0, [r2]
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	ldr	r0, .L25+0x4
	add	r5, r5, r0
	ldrb	r1, [r5, #0x6]
	mov	sl, r1
	ldrh	r4, [r5, #0x38]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L25+0x8
	bl	AllocSpritePalette
	mov	r2, r9
	strb	r0, [r2]
	ldr	r0, .L25+0xc
	bl	AllocSpritePalette
	strb	r0, [r7]
	ldrb	r0, [r5, #0x5]
	lsr	r0, r0, #0x4
	lsl	r0, r0, #0x4
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r3, r1, #0
	orr	r0, r0, r3
	lsl	r6, r4, #0x4
	add	r6, r6, r4
	lsl	r6, r6, #0x2
	ldr	r2, .L25+0x4
	add	r6, r6, r2
	ldrb	r4, [r6, #0x5]
	lsr	r4, r4, #0x4
	lsl	r4, r4, #0x4
	orr	r4, r4, r3
	lsl	r0, r0, #0x1
	ldr	r1, .L25+0x10
	mov	r8, r1
	add	r0, r0, r8
	mov	r2, r9
	ldrb	r1, [r2]
	lsl	r1, r1, #0x4
	add	r1, r3, r1
	mov	r2, #0x20
	str	r3, [sp]
	bl	LoadPalette
	lsl	r4, r4, #0x1
	add	r4, r4, r8
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	ldr	r3, [sp]
	add	r3, r3, r0
	add	r0, r4, #0
	add	r1, r3, #0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, r9
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	ldrb	r2, [r5, #0x5]
	mov	r3, #0xf
	add	r0, r3, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	mov	r2, sl
	lsl	r1, r2, #0x4
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	ldr	r0, .L25+0x4
	add	r1, r1, r0
	mov	r0, r9
	ldrb	r2, [r0]
	lsl	r2, r2, #0x4
	ldrb	r4, [r1, #0x5]
	add	r0, r3, #0
	and	r0, r0, r4
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	ldrb	r1, [r6, #0x5]
	and	r3, r3, r1
	orr	r3, r3, r0
	strb	r3, [r6, #0x5]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	gHealthboxSpriteIds
	.word	gSprites
	.word	0xd709
	.word	0xd70a
	.word	gPlttBufferUnfaded
.Lfe3:
	.size	 LoadHealthboxPalsForLevelUp,.Lfe3-LoadHealthboxPalsForLevelUp
	.align	2, 0
	.globl	AnimTask_LoadHealthboxPalsForLevelUp
	.type	 AnimTask_LoadHealthboxPalsForLevelUp,function
	.thumb_func
AnimTask_LoadHealthboxPalsForLevelUp:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, sp
	add	r1, r1, #0x1
	ldr	r0, .L28
	ldrb	r2, [r0]
	mov	r0, sp
	bl	LoadHealthboxPalsForLevelUp
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	gBattleAnimAttacker
.Lfe4:
	.size	 AnimTask_LoadHealthboxPalsForLevelUp,.Lfe4-AnimTask_LoadHealthboxPalsForLevelUp
	.align	2, 0
	.type	 FreeHealthboxPalsForLevelUp,function
	.thumb_func
FreeHealthboxPalsForLevelUp:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L31
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldr	r1, .L31+0x4
	mov	r8, r1
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	add	r5, r5, r8
	ldrb	r0, [r5, #0x6]
	mov	r9, r0
	ldrh	r6, [r5, #0x38]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L31+0x8
	bl	FreeSpritePaletteByTag
	ldr	r0, .L31+0xc
	bl	FreeSpritePaletteByTag
	ldr	r0, .L31+0x10
	bl	IndexOfSpritePaletteTag
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L31+0x14
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsl	r4, r4, #0x4
	ldrb	r2, [r5, #0x5]
	mov	r3, #0xf
	add	r1, r3, #0
	and	r1, r1, r2
	orr	r1, r1, r4
	strb	r1, [r5, #0x5]
	mov	r1, r9
	lsl	r2, r1, #0x4
	add	r2, r2, r9
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	ldrb	r5, [r2, #0x5]
	add	r1, r3, #0
	and	r1, r1, r5
	orr	r1, r1, r4
	strb	r1, [r2, #0x5]
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	lsr	r0, r0, #0x14
	ldrb	r2, [r1, #0x5]
	and	r3, r3, r2
	orr	r3, r3, r0
	strb	r3, [r1, #0x5]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gHealthboxSpriteIds
	.word	gSprites
	.word	0xd709
	.word	0xd70a
	.word	0xd6ff
	.word	0xd704
.Lfe5:
	.size	 FreeHealthboxPalsForLevelUp,.Lfe5-FreeHealthboxPalsForLevelUp
	.align	2, 0
	.globl	AnimTask_FreeHealthboxPalsForLevelUp
	.type	 AnimTask_FreeHealthboxPalsForLevelUp,function
	.thumb_func
AnimTask_FreeHealthboxPalsForLevelUp:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L34
	ldrb	r0, [r0]
	bl	FreeHealthboxPalsForLevelUp
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L35:
	.align	2, 0
.L34:
	.word	gBattleAnimAttacker
.Lfe6:
	.size	 AnimTask_FreeHealthboxPalsForLevelUp,.Lfe6-AnimTask_FreeHealthboxPalsForLevelUp
	.align	2, 0
	.globl	AnimTask_FlashHealthboxOnLevelUp
	.type	 AnimTask_FlashHealthboxOnLevelUp,function
	.thumb_func
AnimTask_FlashHealthboxOnLevelUp:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L37
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r2, .L37+0x4
	ldrh	r0, [r2]
	strh	r0, [r1, #0x1c]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1, #0x1e]
	ldr	r0, .L37+0x8
	str	r0, [r1]
	bx	lr
.L38:
	.align	2, 0
.L37:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_FlashHealthboxOnLevelUp_Step
.Lfe7:
	.size	 AnimTask_FlashHealthboxOnLevelUp,.Lfe7-AnimTask_FlashHealthboxOnLevelUp
	.align	2, 0
	.type	 AnimTask_FlashHealthboxOnLevelUp_Step,function
	.thumb_func
AnimTask_FlashHealthboxOnLevelUp_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L52
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	mov	r6, #0x0
	add	r1, r0, #0x1
	strh	r1, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x1e
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L40	@cond_branch
	strh	r6, [r4, #0x8]
	ldr	r0, .L52+0x4
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r3, #0x1c
	ldrsh	r0, [r4, r3]
	mov	r1, #0x2
	cmp	r0, #0
	bne	.L41	@cond_branch
	mov	r1, #0x6
.L41:
	mov	r3, #0xa
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L44	@cond_branch
	cmp	r0, #0x1
	beq	.L47	@cond_branch
	b	.L40
.L53:
	.align	2, 0
.L52:
	.word	gTasks
	.word	0xd709
.L44:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x2
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L45	@cond_branch
	mov	r0, #0x10
	strh	r0, [r4, #0xc]
.L45:
	lsl	r0, r2, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	orr	r0, r0, r1
	ldrb	r2, [r4, #0xc]
	ldr	r3, .L54
	mov	r1, #0x1
	bl	BlendPalette
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x10
	bne	.L40	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L40
.L55:
	.align	2, 0
.L54:
	.word	0x7f74
.L47:
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L48	@cond_branch
	strh	r6, [r4, #0xc]
.L48:
	lsl	r0, r2, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	orr	r0, r0, r1
	ldrb	r2, [r4, #0xc]
	ldr	r3, .L56
	mov	r1, #0x1
	bl	BlendPalette
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bne	.L40	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L40:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	0x7f74
.Lfe8:
	.size	 AnimTask_FlashHealthboxOnLevelUp_Step,.Lfe8-AnimTask_FlashHealthboxOnLevelUp_Step
	.align	2, 0
	.globl	AnimTask_SwitchOutShrinkMon
	.type	 AnimTask_SwitchOutShrinkMon,function
	.thumb_func
AnimTask_SwitchOutShrinkMon:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L68
	ldr	r0, .L68+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r5, [r0]
	ldr	r1, .L68+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L61	@cond_branch
	cmp	r0, #0x1
	bgt	.L66	@cond_branch
	cmp	r0, #0
	beq	.L60	@cond_branch
	b	.L59
.L69:
	.align	2, 0
.L68:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gTasks
.L66:
	cmp	r0, #0x2
	beq	.L63	@cond_branch
	b	.L59
.L60:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	b	.L67
.L61:
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x30
	strh	r0, [r4, #0x1c]
	mov	r0, #0x1c
	ldrsh	r2, [r4, r0]
	add	r0, r5, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	add	r0, r5, #0
	bl	SetBattlerSpriteYOffsetFromYScale
	mov	r0, #0x1c
	ldrsh	r1, [r4, r0]
	ldr	r0, .L70
	cmp	r1, r0
	ble	.L59	@cond_branch
.L67:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L59
.L71:
	.align	2, 0
.L70:
	.word	0x2cf
.L63:
	add	r0, r5, #0
	bl	ResetSpriteRotScale
	ldr	r1, .L72
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L59:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	gSprites
.Lfe9:
	.size	 AnimTask_SwitchOutShrinkMon,.Lfe9-AnimTask_SwitchOutShrinkMon
	.align	2, 0
	.globl	AnimTask_SwitchOutBallEffect
	.type	 AnimTask_SwitchOutBallEffect,function
	.thumb_func
AnimTask_SwitchOutBallEffect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L84
	ldr	r4, .L84+0x4
	ldrb	r0, [r4]
	add	r1, r0, r1
	ldrb	r1, [r1]
	mov	r9, r1
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L75	@cond_branch
	ldr	r1, .L84+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L84+0xc
	b	.L83
.L85:
	.align	2, 0
.L84:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L75:
	ldr	r1, .L86
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L86+0x4
.L83:
	add	r0, r0, r1
	mov	r1, #0x26
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r2, .L86+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r6, r0, r2
	mov	r0, #0x8
	ldrsh	r7, [r6, r0]
	cmp	r7, #0
	beq	.L78	@cond_branch
	cmp	r7, #0x1
	beq	.L79	@cond_branch
	b	.L77
.L87:
	.align	2, 0
.L86:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gTasks
.L78:
	ldr	r5, .L88
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	ldr	r2, .L88+0x4
	mov	r3, r9
	lsl	r0, r3, #0x4
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x5]
	lsl	r2, r2, #0x1c
	lsr	r2, r2, #0x1e
	add	r0, r0, #0x43
	ldrb	r3, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x16
	add	r1, r1, r0
	lsr	r1, r1, #0x18
	mov	r0, r8
	str	r0, [sp]
	add	r0, r4, #0
	bl	AnimateBallOpenParticles
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x1c]
	str	r7, [sp]
	str	r7, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80A75AC
	add	r2, r0, #0
	ldrb	r1, [r5]
	mov	r0, #0x0
	mov	r3, r8
	bl	LaunchBallFadeMonTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x1e]
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	b	.L77
.L89:
	.align	2, 0
.L88:
	.word	gBattleAnimAttacker
	.word	gSprites
.L79:
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.L77	@cond_branch
	mov	r3, #0x1e
	ldrsh	r0, [r6, r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.L77	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L77:
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 AnimTask_SwitchOutBallEffect,.Lfe10-AnimTask_SwitchOutBallEffect
	.align	2, 0
	.globl	AnimTask_LoadBallGfx
	.type	 AnimTask_LoadBallGfx,function
	.thumb_func
AnimTask_LoadBallGfx:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L91
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	LoadBallGfx
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L92:
	.align	2, 0
.L91:
	.word	gLastUsedItem
.Lfe11:
	.size	 AnimTask_LoadBallGfx,.Lfe11-AnimTask_LoadBallGfx
	.align	2, 0
	.globl	AnimTask_FreeBallGfx
	.type	 AnimTask_FreeBallGfx,function
	.thumb_func
AnimTask_FreeBallGfx:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L94
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	FreeBallGfx
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	gLastUsedItem
.Lfe12:
	.size	 AnimTask_FreeBallGfx,.Lfe12-AnimTask_FreeBallGfx
	.align	2, 0
	.globl	AnimTask_IsBallBlockedByTrainer
	.type	 AnimTask_IsBallBlockedByTrainer,function
	.thumb_func
AnimTask_IsBallBlockedByTrainer:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L100
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x3f
	and	r0, r0, r1
	cmp	r0, #0x5
	bne	.L97	@cond_branch
	ldr	r1, .L100+0x4
	ldr	r0, .L100+0x8
	b	.L99
.L101:
	.align	2, 0
.L100:
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimArgs
	.word	0xffff
.L97:
	ldr	r1, .L102
	mov	r0, #0x0
.L99:
	strh	r0, [r1, #0xe]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L103:
	.align	2, 0
.L102:
	.word	gBattleAnimArgs
.Lfe13:
	.size	 AnimTask_IsBallBlockedByTrainer,.Lfe13-AnimTask_IsBallBlockedByTrainer
	.align	2, 0
	.globl	ItemIdToBallId
	.type	 ItemIdToBallId,function
	.thumb_func
ItemIdToBallId:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	sub	r0, r0, #0x1
	cmp	r0, #0x1a
	bhi	.L133	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L136
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L137:
	.align	2, 0
.L136:
	.word	.L134
	.align	2, 0
	.align	2, 0
.L134:
	.word	.L106
	.word	.L107
	.word	.L108
	.word	.L133
	.word	.L109
	.word	.L110
	.word	.L111
	.word	.L112
	.word	.L113
	.word	.L114
	.word	.L115
	.word	.L116
	.word	.L126
	.word	.L128
	.word	.L127
	.word	.L129
	.word	.L124
	.word	.L118
	.word	.L119
	.word	.L123
	.word	.L122
	.word	.L121
	.word	.L120
	.word	.L125
	.word	.L130
	.word	.L131
	.word	.L132
.L106:
	mov	r0, #0x4
	b	.L135
.L107:
	mov	r0, #0x3
	b	.L135
.L108:
	mov	r0, #0x1
	b	.L135
.L109:
	mov	r0, #0x2
	b	.L135
.L110:
	mov	r0, #0x5
	b	.L135
.L111:
	mov	r0, #0x6
	b	.L135
.L112:
	mov	r0, #0x7
	b	.L135
.L113:
	mov	r0, #0x8
	b	.L135
.L114:
	mov	r0, #0x9
	b	.L135
.L115:
	mov	r0, #0xa
	b	.L135
.L116:
	mov	r0, #0xb
	b	.L135
.L118:
	mov	r0, #0xc
	b	.L135
.L119:
	mov	r0, #0xd
	b	.L135
.L120:
	mov	r0, #0xe
	b	.L135
.L121:
	mov	r0, #0xf
	b	.L135
.L122:
	mov	r0, #0x10
	b	.L135
.L123:
	mov	r0, #0x11
	b	.L135
.L124:
	mov	r0, #0x12
	b	.L135
.L125:
	mov	r0, #0x13
	b	.L135
.L126:
	mov	r0, #0x14
	b	.L135
.L127:
	mov	r0, #0x15
	b	.L135
.L128:
	mov	r0, #0x16
	b	.L135
.L129:
	mov	r0, #0x17
	b	.L135
.L130:
	mov	r0, #0x18
	b	.L135
.L131:
	mov	r0, #0x19
	b	.L135
.L132:
	mov	r0, #0x1a
	b	.L135
.L133:
	mov	r0, #0x0
.L135:
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 ItemIdToBallId,.Lfe14-ItemIdToBallId
	.align	2, 0
	.globl	AnimTask_ThrowBall
	.type	 AnimTask_ThrowBall,function
	.thumb_func
AnimTask_ThrowBall:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	mov	sl, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L139
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L139+0x4
	add	r0, r0, r1
	mov	r1, #0x20
	mov	r2, #0x50
	mov	r3, #0x1d
	bl	CreateSprite
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r1, .L139+0x8
	mov	r9, r1
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r6, r4, r1
	mov	r0, #0x22
	strh	r0, [r6, #0x2e]
	ldr	r2, .L139+0xc
	mov	r8, r2
	ldrb	r0, [r2]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x30]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x10
	strh	r0, [r6, #0x32]
	mov	r0, r9
	add	r0, r0, #0x1c
	add	r4, r4, r0
	ldr	r0, .L139+0x10
	str	r0, [r4]
	ldr	r0, .L139+0x14
	ldr	r0, [r0]
	ldr	r3, [r0, #0x8]
	ldr	r1, .L139+0x18
	mov	r2, r8
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x1
	ldrb	r2, [r3, #0x9]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x9]
	ldr	r1, .L139+0x1c
	mov	r2, sl
	lsl	r0, r2, #0x2
	add	r0, r0, sl
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	ldr	r1, .L139+0x20
	str	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L140:
	.align	2, 0
.L139:
	.word	gLastUsedItem
	.word	gBallSpriteTemplates
	.word	gSprites
	.word	gBattleAnimTarget
	.word	SpriteCB_Ball_Throw
	.word	gBattleSpritesDataPtr
	.word	gBattlerSpriteIds
	.word	gTasks
	.word	AnimTask_ThrowBall_Step
.Lfe15:
	.size	 AnimTask_ThrowBall,.Lfe15-AnimTask_ThrowBall
	.align	2, 0
	.type	 AnimTask_ThrowBall_Step,function
	.thumb_func
AnimTask_ThrowBall_Step:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L143
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	ldr	r2, .L143+0x4
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2e]
	ldr	r0, .L143+0x8
	cmp	r1, r0
	bne	.L142	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
.L142:
	pop	{r0}
	bx	r0
.L144:
	.align	2, 0
.L143:
	.word	gTasks
	.word	gSprites
	.word	0xffff
.Lfe16:
	.size	 AnimTask_ThrowBall_Step,.Lfe16-AnimTask_ThrowBall_Step
	.align	2, 0
	.globl	AnimTask_ThrowBall_StandingTrainer
	.type	 AnimTask_ThrowBall_StandingTrainer,function
	.thumb_func
AnimTask_ThrowBall_StandingTrainer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L148
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L146	@cond_branch
	mov	r6, #0x20
	mov	r5, #0xb
	b	.L147
.L149:
	.align	2, 0
.L148:
	.word	gBattleTypeFlags
.L146:
	mov	r6, #0x17
	mov	r5, #0x5
.L147:
	ldr	r0, .L150
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L150+0x4
	add	r0, r0, r1
	add	r1, r6, #0
	add	r1, r1, #0x20
	mov	r2, #0x50
	orr	r5, r5, r2
	add	r2, r5, #0
	bl	CreateSprite
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L150+0x8
	mov	r9, r0
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r6, r4, r0
	mov	r0, #0x22
	strh	r0, [r6, #0x2e]
	ldr	r1, .L150+0xc
	mov	r8, r1
	ldrb	r0, [r1]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x30]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x10
	strh	r0, [r6, #0x32]
	mov	r0, #0x1c
	add	r9, r9, r0
	add	r4, r4, r9
	ldr	r0, .L150+0x10
	str	r0, [r4]
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L150+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldr	r1, .L150+0x18
	str	r1, [r0]
	ldr	r1, .L150+0x1c
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	ldr	r1, .L150+0x20
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L151:
	.align	2, 0
.L150:
	.word	gLastUsedItem
	.word	gBallSpriteTemplates
	.word	gSprites
	.word	gBattleAnimTarget
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
	.word	SpriteCB_TrainerThrowObject
	.word	gTasks
	.word	AnimTask_ThrowBall_StandingTrainer_Step
.Lfe17:
	.size	 AnimTask_ThrowBall_StandingTrainer,.Lfe17-AnimTask_ThrowBall_StandingTrainer
	.align	2, 0
	.type	 AnimTask_ThrowBall_StandingTrainer_Step,function
	.thumb_func
AnimTask_ThrowBall_StandingTrainer_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L154
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L154+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L153	@cond_branch
	mov	r0, #0x3d
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	ldr	r0, .L154+0x8
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L154+0xc
	str	r1, [r0]
	ldr	r0, .L154+0x10
	mov	r1, #0xa
	bl	CreateTask
	ldr	r0, .L154+0x14
	str	r0, [r4]
.L153:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L155:
	.align	2, 0
.L154:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gTasks
	.word	SpriteCB_Ball_Throw
	.word	Task_PlayerThrow_Wait
	.word	AnimTask_ThrowBall_Step
.Lfe18:
	.size	 AnimTask_ThrowBall_StandingTrainer_Step,.Lfe18-AnimTask_ThrowBall_StandingTrainer_Step
	.align	2, 0
	.type	 Task_PlayerThrow_Wait,function
	.thumb_func
Task_PlayerThrow_Wait:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L158
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r4, .L158+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L157	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x0
	bl	StartSpriteAnim
	add	r0, r5, #0
	bl	DestroyTask
.L157:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L159:
	.align	2, 0
.L158:
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe19:
	.size	 Task_PlayerThrow_Wait,.Lfe19-Task_PlayerThrow_Wait
	.align	2, 0
	.type	 SpriteCB_Ball_Throw,function
	.thumb_func
SpriteCB_Ball_Throw:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	ldrh	r2, [r4, #0x32]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	strh	r1, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	strh	r2, [r4, #0x36]
	ldr	r0, .L161
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L161+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	0xffd8
	.word	SpriteCB_Ball_Arc
.Lfe20:
	.size	 SpriteCB_Ball_Throw,.Lfe20-SpriteCB_Ball_Throw
	.align	2, 0
	.type	 SpriteCB_Ball_Arc,function
	.thumb_func
SpriteCB_Ball_Arc:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L164	@cond_branch
	ldr	r0, .L176
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x3f
	and	r0, r0, r1
	cmp	r0, #0x5
	bne	.L165	@cond_branch
	ldr	r0, .L176+0x4
	str	r0, [r4, #0x1c]
	b	.L164
.L177:
	.align	2, 0
.L176:
	.word	gBattleSpritesDataPtr
	.word	SpriteCB_Ball_Block
.L165:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x24]
	strh	r1, [r4, #0x26]
	add	r1, r4, #0
	add	r1, r1, #0x2e
	mov	r2, #0x0
	add	r0, r4, #0
	add	r0, r0, #0x3c
.L170:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r1
	bge	.L170	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldr	r0, .L178
	str	r0, [r4, #0x1c]
	ldr	r0, .L178+0x4
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x1a
	bgt	.L164	@cond_branch
	cmp	r5, #0
	blt	.L164	@cond_branch
	ldrh	r0, [r4, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r5, [sp]
	mov	r2, #0x1
	mov	r3, #0x1c
	bl	AnimateBallOpenParticles
	ldr	r0, .L178+0x8
	ldrb	r1, [r0]
	mov	r0, #0x0
	mov	r2, #0xe
	add	r3, r5, #0
	bl	LaunchBallFadeMonTask
.L164:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L179:
	.align	2, 0
.L178:
	.word	SpriteCB_Ball_MonShrink
	.word	gLastUsedItem
	.word	gBattleAnimTarget
.Lfe21:
	.size	 SpriteCB_Ball_Arc,.Lfe21-SpriteCB_Ball_Arc
	.align	2, 0
	.type	 SpriteCB_Ball_MonShrink,function
	.thumb_func
SpriteCB_Ball_MonShrink:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L181	@cond_branch
	ldr	r0, .L182
	mov	r1, #0x32
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x38]
	ldr	r0, .L182+0x4
	str	r0, [r4, #0x1c]
	ldr	r2, .L182+0x8
	ldr	r1, .L182+0xc
	ldr	r0, .L182+0x10
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
.L181:
	pop	{r4}
	pop	{r0}
	bx	r0
.L183:
	.align	2, 0
.L182:
	.word	TaskDummy
	.word	SpriteCB_Ball_MonShrink_Step
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
.Lfe22:
	.size	 SpriteCB_Ball_MonShrink,.Lfe22-SpriteCB_Ball_MonShrink
	.align	2, 0
	.type	 SpriteCB_Ball_MonShrink_Step,function
	.thumb_func
SpriteCB_Ball_MonShrink_Step:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	ldr	r1, .L197
	ldr	r0, .L197+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r4, [r0]
	ldrh	r0, [r7, #0x38]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L197+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	bne	.L185	@cond_branch
	mov	r0, #0x3c
	bl	PlaySE
.L185:
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L188	@cond_branch
	cmp	r0, #0x1
	bgt	.L195	@cond_branch
	cmp	r0, #0
	beq	.L187	@cond_branch
	b	.L192
.L198:
	.align	2, 0
.L197:
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
	.word	gTasks
.L195:
	cmp	r0, #0x2
	beq	.L190	@cond_branch
	b	.L192
.L187:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	ldr	r1, .L199
	mov	r0, #0x1c
	str	r0, [r1]
	ldr	r2, .L199+0x4
	ldr	r1, .L199+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r1, r1, r0
	ldrh	r0, [r7, #0x26]
	ldrh	r7, [r7, #0x22]
	add	r0, r0, r7
	sub	r1, r1, r0
	strh	r1, [r2]
	ldr	r4, .L199+0xc
	ldrh	r0, [r2]
	lsl	r0, r0, #0x8
	mov	r1, #0x1c
	bl	__udivsi3
	strh	r0, [r4]
	strh	r0, [r5, #0xc]
	b	.L196
.L200:
	.align	2, 0
.L199:
	.word	gMonShrinkDuration
	.word	gMonShrinkDistance
	.word	gSprites
	.word	gMonShrinkDelta
.L188:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x20
	strh	r0, [r5, #0x1c]
	mov	r0, #0x1c
	ldrsh	r2, [r5, r0]
	add	r0, r4, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r5, #0xc]
	ldrh	r1, [r5, #0xe]
	add	r0, r0, r1
	strh	r0, [r5, #0xe]
	ldr	r0, .L201
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r2, #0xe
	ldrsh	r0, [r5, r2]
	neg	r0, r0
	asr	r0, r0, #0x8
	strh	r0, [r1, #0x26]
	mov	r0, #0x1c
	ldrsh	r1, [r5, r0]
	ldr	r0, .L201+0x4
	cmp	r1, r0
	ble	.L186	@cond_branch
	b	.L196
.L202:
	.align	2, 0
.L201:
	.word	gSprites
	.word	0x47f
.L190:
	add	r0, r4, #0
	bl	ResetSpriteRotScale
	ldr	r1, .L203
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L196:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L186
.L204:
	.align	2, 0
.L203:
	.word	gSprites
.L192:
	ldr	r0, .L205
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0xa
	ble	.L186	@cond_branch
	add	r0, r6, #0
	bl	DestroyTask
	add	r0, r7, #0
	mov	r1, #0x2
	bl	StartSpriteAnim
	mov	r0, #0x0
	strh	r0, [r7, #0x38]
	ldr	r0, .L205+0x4
	str	r0, [r7, #0x1c]
.L186:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L206:
	.align	2, 0
.L205:
	.word	gTasks
	.word	SpriteCB_Ball_Bounce
.Lfe23:
	.size	 SpriteCB_Ball_MonShrink_Step,.Lfe23-SpriteCB_Ball_MonShrink_Step
	.align	2, 0
	.type	 SpriteCB_Ball_Bounce,function
	.thumb_func
SpriteCB_Ball_Bounce:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L208	@cond_branch
	mov	r1, #0x0
	strh	r1, [r4, #0x34]
	mov	r0, #0x28
	strh	r0, [r4, #0x36]
	strh	r1, [r4, #0x38]
	mov	r0, #0x0
	mov	r1, #0x28
	bl	Cos
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0x36
	ldrsh	r1, [r4, r0]
	mov	r0, #0x0
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	bl	IsCriticalCapture
	cmp	r0, #0
	beq	.L209	@cond_branch
	ldr	r0, .L212
	b	.L211
.L213:
	.align	2, 0
.L212:
	.word	CB_CriticalCaptureThrownBallMovement
.L209:
	ldr	r0, .L214
.L211:
	str	r0, [r4, #0x1c]
.L208:
	pop	{r4}
	pop	{r0}
	bx	r0
.L215:
	.align	2, 0
.L214:
	.word	SpriteCB_Ball_Bounce_Step
.Lfe24:
	.size	 SpriteCB_Ball_Bounce,.Lfe24-SpriteCB_Ball_Bounce
	.align	2, 0
	.type	 SpriteCB_Ball_Bounce_Step,function
	.thumb_func
SpriteCB_Ball_Bounce_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	ldrh	r0, [r4, #0x34]
	mov	r1, #0xff
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L218	@cond_branch
	cmp	r1, #0x1
	beq	.L228	@cond_branch
	b	.L217
.L218:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x38]
	add	r1, r1, #0x4
	ldrh	r2, [r4, #0x34]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	add	r1, r1, r0
	strh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x3f
	ble	.L217	@cond_branch
	ldrh	r0, [r4, #0x36]
	sub	r0, r0, #0xa
	strh	r0, [r4, #0x36]
	ldr	r1, .L235
	add	r0, r2, r1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L220	@cond_branch
	mov	r5, #0x1
.L220:
	cmp	r0, #0x2
	beq	.L223	@cond_branch
	cmp	r0, #0x2
	bgt	.L227	@cond_branch
	cmp	r0, #0x1
	beq	.L222	@cond_branch
	b	.L225
.L236:
	.align	2, 0
.L235:
	.word	0x101
.L227:
	cmp	r0, #0x3
	beq	.L224	@cond_branch
	b	.L225
.L222:
	mov	r0, #0x38
	bl	PlaySE
	b	.L217
.L223:
	mov	r0, #0x39
	bl	PlaySE
	b	.L217
.L224:
	mov	r0, #0x3a
	bl	PlaySE
	b	.L217
.L225:
	mov	r0, #0x3b
	bl	PlaySE
	b	.L217
.L228:
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x38]
	sub	r1, r1, #0x4
	ldrh	r2, [r4, #0x34]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	sub	r1, r1, r0
	strh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bgt	.L217	@cond_branch
	strh	r5, [r4, #0x38]
	ldr	r0, .L237
	and	r0, r0, r2
	strh	r0, [r4, #0x34]
.L217:
	cmp	r5, #0
	beq	.L232	@cond_branch
	mov	r5, #0x0
	strh	r5, [r4, #0x34]
	mov	r0, #0x40
	mov	r1, #0x28
	bl	Cos
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x26]
	ldr	r0, .L237+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x3f
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L233	@cond_branch
	strh	r5, [r4, #0x38]
	ldr	r0, .L237+0x8
	str	r0, [r4, #0x1c]
	b	.L232
.L238:
	.align	2, 0
.L237:
	.word	-0x100
	.word	gBattleSpritesDataPtr
	.word	SpriteCB_Ball_Release
.L233:
	ldr	r0, .L239
	str	r0, [r4, #0x1c]
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	strh	r5, [r4, #0x38]
.L232:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L240:
	.align	2, 0
.L239:
	.word	SpriteCB_Ball_Wobble
.Lfe25:
	.size	 SpriteCB_Ball_Bounce_Step,.Lfe25-SpriteCB_Ball_Bounce_Step
	.align	2, 0
	.type	 SpriteCB_Ball_Wobble,function
	.thumb_func
SpriteCB_Ball_Wobble:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L242	@cond_branch
	strh	r5, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r0, .L243
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	strh	r5, [r0, #0xc]
	ldr	r0, .L243+0x4
	str	r0, [r4, #0x1c]
	mov	r0, #0x17
	bl	PlaySE
.L242:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L244:
	.align	2, 0
.L243:
	.word	gBattleSpritesDataPtr
	.word	SpriteCB_Ball_Wobble_Step
.Lfe26:
	.size	 SpriteCB_Ball_Wobble,.Lfe26-SpriteCB_Ball_Wobble
	.align	2, 0
	.type	 SpriteCB_Ball_Wobble_Step,function
	.thumb_func
SpriteCB_Ball_Wobble_Step:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	mov	r1, #0xff
	and	r1, r1, r0
	cmp	r1, #0x6
	bls	.LCB2697
	b	.L278	@long jump
.LCB2697:
	lsl	r0, r1, #0x2
	ldr	r1, .L287
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L288:
	.align	2, 0
.L287:
	.word	.L282
	.align	2, 0
	.align	2, 0
.L282:
	.word	.L247
	.word	.L251
	.word	.L256
	.word	.L260
	.word	.L264
	.word	.L268
	.word	.L278
.L247:
	ldr	r1, .L289
	ldr	r5, [r1]
	ldr	r2, [r5, #0x8]
	ldrh	r3, [r2, #0xc]
	mov	r6, #0xc
	ldrsh	r0, [r2, r6]
	add	r6, r1, #0
	cmp	r0, #0xff
	ble	.L248	@cond_branch
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldr	r1, [r5, #0x8]
	ldrb	r0, [r1, #0xc]
	strh	r0, [r1, #0xc]
	b	.L249
.L290:
	.align	2, 0
.L289:
	.word	gBattleSpritesDataPtr
.L248:
	add	r0, r3, #0
	add	r0, r0, #0xb0
	strh	r0, [r2, #0xc]
.L249:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r4, #0x38]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x7
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xe
	bhi	.LCB2764
	b	.L246	@long jump
.LCB2764:
	b	.L283
.L251:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L284	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x36]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r6, #0x36
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bge	.L253	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	ChangeSpriteAffineAnim
	b	.L246
.L253:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
	b	.L246
.L256:
	ldr	r1, .L291
	ldr	r5, [r1]
	ldr	r2, [r5, #0x8]
	ldrh	r3, [r2, #0xc]
	mov	r6, #0xc
	ldrsh	r0, [r2, r6]
	add	r6, r1, #0
	cmp	r0, #0xff
	ble	.L257	@cond_branch
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldr	r1, [r5, #0x8]
	ldrb	r0, [r1, #0xc]
	strh	r0, [r1, #0xc]
	b	.L258
.L292:
	.align	2, 0
.L291:
	.word	gBattleSpritesDataPtr
.L257:
	add	r0, r3, #0
	add	r0, r0, #0xb0
	strh	r0, [r2, #0xc]
.L258:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r4, #0x38]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0xc
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x18
	bhi	.LCB2858
	b	.L246	@long jump
.LCB2858:
.L283:
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	strh	r3, [r0, #0xc]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	strh	r3, [r4, #0x38]
	b	.L246
.L260:
	ldrh	r0, [r4, #0x38]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x38]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L261	@cond_branch
.L284:
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L246
.L261:
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x36]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r6, #0x36
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bge	.L262	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	ChangeSpriteAffineAnim
	b	.L264
.L262:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
.L264:
	ldr	r1, .L293
	ldr	r5, [r1]
	ldr	r2, [r5, #0x8]
	ldrh	r3, [r2, #0xc]
	mov	r6, #0xc
	ldrsh	r0, [r2, r6]
	add	r6, r1, #0
	cmp	r0, #0xff
	ble	.L265	@cond_branch
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldr	r1, [r5, #0x8]
	ldrb	r0, [r1, #0xc]
	strh	r0, [r1, #0xc]
	b	.L266
.L294:
	.align	2, 0
.L293:
	.word	gBattleSpritesDataPtr
.L265:
	add	r0, r3, #0
	add	r0, r0, #0xb0
	strh	r0, [r2, #0xc]
.L266:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r4, #0x38]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x8
	bhi	.LCB2968
	b	.L246	@long jump
.LCB2968:
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	strh	r3, [r0, #0xc]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	strh	r3, [r4, #0x38]
	ldrh	r0, [r4, #0x36]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	b	.L246
.L268:
	mov	r6, #0x80
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x18
	bl	IsCriticalCapture
	cmp	r0, #0
	beq	.L269	@cond_branch
	ldr	r0, .L295
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x8]
	mov	r2, #0x80
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L270	@cond_branch
	ldr	r0, .L295+0x4
	str	r0, [r4, #0x1c]
	add	r1, r4, #0
	add	r1, r1, #0x2c
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	b	.L246
.L296:
	.align	2, 0
.L295:
	.word	gBattleSpritesDataPtr
	.word	SpriteCB_Ball_Capture
.L270:
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L285
.L269:
	lsl	r0, r5, #0x18
	asr	r2, r0, #0x18
	ldr	r0, .L297
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x8]
	lsl	r0, r1, #0x1a
	lsr	r0, r0, #0x1a
	cmp	r2, r0
	bne	.L273	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
.L285:
	ldr	r0, .L297+0x4
	str	r0, [r4, #0x1c]
	b	.L246
.L298:
	.align	2, 0
.L297:
	.word	gBattleSpritesDataPtr
	.word	SpriteCB_Ball_Release
.L273:
	mov	r0, #0x3f
	and	r0, r0, r1
	cmp	r0, #0x4
	bne	.L275	@cond_branch
	cmp	r2, #0x3
	bne	.L275	@cond_branch
	ldr	r0, .L299
	str	r0, [r4, #0x1c]
	b	.L286
.L300:
	.align	2, 0
.L299:
	.word	SpriteCB_Ball_Capture
.L275:
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
.L286:
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L246
.L278:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L246	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r1, [r4, #0x34]
	ldr	r0, .L301
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	mov	r1, #0x3
	bl	StartSpriteAffineAnim
	mov	r6, #0x36
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bge	.L280	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	b	.L281
.L302:
	.align	2, 0
.L301:
	.word	-0x100
.L280:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L281:
	mov	r0, #0x17
	bl	PlaySE
.L246:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 SpriteCB_Ball_Wobble_Step,.Lfe27-SpriteCB_Ball_Wobble_Step
	.align	2, 0
	.type	 SpriteCB_Ball_Release,function
	.thumb_func
SpriteCB_Ball_Release:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L304	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x38]
	ldr	r0, .L305
	str	r0, [r1, #0x1c]
.L304:
	pop	{r0}
	bx	r0
.L306:
	.align	2, 0
.L305:
	.word	SpriteCB_Ball_Release_Step
.Lfe28:
	.size	 SpriteCB_Ball_Release,.Lfe28-SpriteCB_Ball_Release
	.align	2, 0
	.type	 SpriteCB_Ball_Capture,function
	.thumb_func
SpriteCB_Ball_Capture:
	add	r3, r0, #0
	add	r3, r3, #0x2c
	ldrb	r1, [r3]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r3]
	ldr	r1, .L308
	str	r1, [r0, #0x1c]
	mov	r1, #0x0
	strh	r1, [r0, #0x34]
	strh	r1, [r0, #0x36]
	strh	r1, [r0, #0x38]
	bx	lr
.L309:
	.align	2, 0
.L308:
	.word	SpriteCB_Ball_Capture_Step
.Lfe29:
	.size	 SpriteCB_Ball_Capture,.Lfe29-SpriteCB_Ball_Capture
	.align	2, 0
	.type	 SpriteCB_Ball_Capture_Step,function
	.thumb_func
SpriteCB_Ball_Capture_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r7, .L318
	ldrh	r0, [r6, #0x36]
	add	r0, r0, #0x1
	mov	r1, #0x0
	mov	r8, r1
	strh	r0, [r6, #0x36]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0x28
	bne	.L311	@cond_branch
	mov	r0, #0xfe
	bl	PlaySE
	ldrb	r1, [r6, #0x5]
	lsr	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r0, r0, r1
	mov	r1, #0x6
	mov	r2, #0x0
	bl	BlendPalettes
	add	r0, r6, #0
	bl	MakeCaptureStars
	b	.L312
.L319:
	.align	2, 0
.L318:
	.word	gBattleAnimTarget
.L311:
	cmp	r1, #0x3c
	bne	.L313	@cond_branch
	ldrb	r1, [r6, #0x5]
	lsr	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r0, r0, r1
	mov	r1, r8
	str	r1, [sp]
	mov	r1, #0x2
	mov	r2, #0x6
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	b	.L312
.L313:
	cmp	r1, #0x5f
	bne	.L315	@cond_branch
	ldr	r0, .L320
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r0, #0x1
	bl	UpdateOamPriorityInAllHealthboxes
	bl	m4aMPlayAllStop
	ldr	r0, .L320+0x4
	bl	PlaySE
	b	.L312
.L321:
	.align	2, 0
.L320:
	.word	gDoingBattleAnim
	.word	0x213
.L315:
	ldr	r0, .L322
	cmp	r1, r0
	bne	.L312	@cond_branch
	ldr	r5, .L322+0x4
	ldr	r4, .L322+0x8
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	mov	r0, r8
	strh	r0, [r6, #0x2e]
	ldr	r0, .L322+0xc
	str	r0, [r6, #0x1c]
.L312:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L323:
	.align	2, 0
.L322:
	.word	0x13b
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCB_Ball_FadeOut
.Lfe30:
	.size	 SpriteCB_Ball_Capture_Step,.Lfe30-SpriteCB_Ball_Capture_Step
	.align	2, 0
	.type	 SpriteCB_Ball_FadeOut,function
	.thumb_func
SpriteCB_Ball_FadeOut:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L327	@cond_branch
	cmp	r0, #0x1
	bgt	.L334	@cond_branch
	cmp	r0, #0
	beq	.L326	@cond_branch
	b	.L331
.L334:
	cmp	r0, #0x2
	beq	.L330	@cond_branch
	b	.L331
.L326:
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x32]
	ldrb	r1, [r4, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r0, [r4, #0x14]
	ldrh	r0, [r0, #0x2]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r1, #0x1
	lsl	r1, r1, r0
	ldr	r0, .L336
	str	r0, [sp]
	add	r0, r1, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L335
.L337:
	.align	2, 0
.L336:
	.word	0x7fff
.L327:
	ldrh	r0, [r4, #0x30]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L325	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x32]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x32]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L325	@cond_branch
	b	.L335
.L330:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L335:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L325
.L331:
	ldr	r0, .L338
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L325	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	strh	r5, [r4, #0x2e]
	ldr	r0, .L338+0x4
	str	r0, [r4, #0x1c]
.L325:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L339:
	.align	2, 0
.L338:
	.word	gPaletteFade
	.word	DestroySpriteAfterOneFrame
.Lfe31:
	.size	 SpriteCB_Ball_FadeOut,.Lfe31-SpriteCB_Ball_FadeOut
	.align	2, 0
	.type	 DestroySpriteAfterOneFrame,function
	.thumb_func
DestroySpriteAfterOneFrame:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L341	@cond_branch
	ldr	r0, .L343
	strh	r0, [r4, #0x2e]
	b	.L342
.L344:
	.align	2, 0
.L343:
	.word	0xffff
.L341:
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
.L342:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 DestroySpriteAfterOneFrame,.Lfe32-DestroySpriteAfterOneFrame
	.align	2, 0
	.type	 MakeCaptureStars,function
	.thumb_func
MakeCaptureStars:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r6, r0, #0
	add	r1, r6, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L346	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	b	.L347
.L346:
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0x1
	strb	r0, [r1]
.L347:
	mov	r0, #0x4
	bl	LoadBallParticleGfx
	mov	r7, #0x0
	ldr	r2, .L354
	mov	r9, r2
	mov	r0, #0x1c
	add	r0, r0, r9
	mov	sl, r0
.L351:
	mov	r2, #0x20
	ldrsh	r1, [r6, r2]
	mov	r0, #0x22
	ldrsh	r2, [r6, r0]
	ldr	r0, .L354+0x4
	mov	r3, r8
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L350	@cond_branch
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	mov	r2, r9
	add	r5, r4, r2
	mov	r0, #0x18
	strh	r0, [r5, #0x2e]
	ldr	r0, .L354+0x8
	lsl	r1, r7, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	ldrh	r2, [r6, #0x20]
	add	r0, r0, r2
	strh	r0, [r5, #0x32]
	mov	r0, #0x1
	ldrsb	r0, [r1, r0]
	ldrh	r2, [r6, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x36]
	mov	r0, #0x2
	ldrsb	r0, [r1, r0]
	strh	r0, [r5, #0x38]
	add	r0, r5, #0
	bl	InitAnimArcTranslation
	add	r4, r4, sl
	ldr	r0, .L354+0xc
	str	r0, [r4]
	ldr	r0, .L354+0x10
	ldrb	r1, [r0, #0x4]
	add	r0, r5, #0
	bl	StartSpriteAnim
.L350:
	add	r7, r7, #0x1
	cmp	r7, #0x2
	bls	.L351	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L355:
	.align	2, 0
.L354:
	.word	gSprites
	.word	sBallParticleSpriteTemplates+0x60
	.word	sCaptureStars
	.word	SpriteCB_CaptureStar_Flicker
	.word	sBallParticleAnimNums
.Lfe33:
	.size	 MakeCaptureStars,.Lfe33-MakeCaptureStars
	.align	2, 0
	.type	 SpriteCB_CaptureStar_Flicker,function
	.thumb_func
SpriteCB_CaptureStar_Flicker:
	push	{r4, lr}
	add	r4, r0, #0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L357	@cond_branch
	add	r0, r4, #0
	bl	DestroySprite
.L357:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 SpriteCB_CaptureStar_Flicker,.Lfe34-SpriteCB_CaptureStar_Flicker
	.align	2, 0
	.type	 SpriteCB_Ball_Release_Step,function
	.thumb_func
SpriteCB_Ball_Release_Step:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	ldr	r0, .L363
	str	r0, [r4, #0x1c]
	ldr	r0, .L363+0x4
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x1a
	bgt	.L359	@cond_branch
	cmp	r5, #0
	blt	.L359	@cond_branch
	ldrh	r0, [r4, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r5, [sp]
	mov	r2, #0x1
	mov	r3, #0x1c
	bl	AnimateBallOpenParticles
	ldr	r0, .L363+0x8
	ldrb	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0xe
	add	r3, r5, #0
	bl	LaunchBallFadeMonTask
.L359:
	ldr	r6, .L363+0xc
	ldr	r5, .L363+0x10
	ldr	r4, .L363+0x8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	AnimateSprite
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	strh	r1, [r0, #0x30]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L364:
	.align	2, 0
.L363:
	.word	SpriteCB_Ball_Release_Wait
	.word	gLastUsedItem
	.word	gBattleAnimTarget
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe35:
	.size	 SpriteCB_Ball_Release_Step,.Lfe35-SpriteCB_Ball_Release_Step
	.align	2, 0
	.type	 SpriteCB_Ball_Release_Wait,function
	.thumb_func
SpriteCB_Ball_Release_Wait:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	mov	r5, #0x0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L366	@cond_branch
	add	r2, r7, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L366:
	ldr	r4, .L370
	ldr	r3, .L370+0x4
	ldr	r2, .L370+0x8
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r4
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L367	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	mov	r5, #0x1
	b	.L368
.L371:
	.align	2, 0
.L370:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
.L367:
	ldr	r6, .L372
	add	r0, r6, #0
	ldrh	r6, [r1, #0x30]
	add	r0, r0, r6
	strh	r0, [r1, #0x30]
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x26]
.L368:
	add	r0, r7, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L369	@cond_branch
	cmp	r5, #0
	beq	.L369	@cond_branch
	ldr	r4, .L372+0x4
	ldr	r3, .L372+0x8
	ldr	r2, .L372+0xc
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r6, #0x0
	mov	r5, #0x0
	strh	r5, [r0, #0x26]
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldr	r0, .L372+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x9]
	lsl	r1, r1, #0x1e
	add	r2, r2, #0x3e
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	strh	r5, [r7, #0x2e]
	ldr	r0, .L372+0x14
	str	r0, [r7, #0x1c]
	ldr	r0, .L372+0x18
	strb	r6, [r0]
	mov	r0, #0x1
	bl	UpdateOamPriorityInAllHealthboxes
.L369:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L373:
	.align	2, 0
.L372:
	.word	-0x120
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
	.word	gBattleSpritesDataPtr
	.word	DestroySpriteAfterOneFrame
	.word	gDoingBattleAnim
.Lfe36:
	.size	 SpriteCB_Ball_Release_Wait,.Lfe36-SpriteCB_Ball_Release_Wait
	.align	2, 0
	.type	 SpriteCB_Ball_Block,function
	.thumb_func
SpriteCB_Ball_Block:
	push	{r4, lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x24]
	ldrh	r1, [r2, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r2, #0x20]
	ldrh	r0, [r2, #0x26]
	ldrh	r3, [r2, #0x22]
	add	r0, r0, r3
	strh	r0, [r2, #0x22]
	strh	r1, [r2, #0x26]
	strh	r1, [r2, #0x24]
	ldr	r4, .L380
	mov	r3, #0x0
	mov	r1, #0x5
	add	r0, r2, #0
	add	r0, r0, #0x38
.L378:
	strh	r3, [r0]
	sub	r0, r0, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L378	@cond_branch
	str	r4, [r2, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L381:
	.align	2, 0
.L380:
	.word	SpriteCB_Ball_Block_Step
.Lfe37:
	.size	 SpriteCB_Ball_Block,.Lfe37-SpriteCB_Ball_Block
	.align	2, 0
	.type	 SpriteCB_Ball_Block_Step,function
	.thumb_func
SpriteCB_Ball_Block_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	add	r2, r0, #0
	ldrh	r1, [r4, #0x2e]
	add	r2, r2, r1
	mov	r0, #0xd0
	lsl	r0, r0, #0x3
	add	r3, r0, #0
	ldrh	r1, [r4, #0x30]
	add	r3, r3, r1
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	mov	r0, #0xff
	and	r2, r2, r0
	strh	r2, [r4, #0x2e]
	and	r3, r3, r0
	strh	r3, [r4, #0x30]
	mov	r2, #0x22
	ldrsh	r0, [r4, r2]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	cmp	r0, #0xa0
	bgt	.L384	@cond_branch
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x8
	neg	r1, r1
	cmp	r0, r1
	bge	.L383	@cond_branch
.L384:
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L385
	str	r0, [r4, #0x1c]
	ldr	r1, .L385+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0x1
	bl	UpdateOamPriorityInAllHealthboxes
.L383:
	pop	{r4}
	pop	{r0}
	bx	r0
.L386:
	.align	2, 0
.L385:
	.word	DestroySpriteAfterOneFrame
	.word	gDoingBattleAnim
.Lfe38:
	.size	 SpriteCB_Ball_Block_Step,.Lfe38-SpriteCB_Ball_Block_Step
	.align	2, 0
	.type	 LoadBallParticleGfx,function
	.thumb_func
LoadBallParticleGfx:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	ldr	r1, .L389
	lsr	r5, r0, #0x15
	add	r4, r5, r1
	ldrh	r0, [r4, #0x6]
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	ldr	r1, .L389+0x4
	cmp	r0, r1
	bne	.L388	@cond_branch
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L389+0x8
	add	r0, r5, r0
	bl	LoadCompressedSpritePaletteUsingHeap
.L388:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L390:
	.align	2, 0
.L389:
	.word	sBallParticleSpriteSheets
	.word	-0x10000
	.word	sBallParticlePalettes
.Lfe39:
	.size	 LoadBallParticleGfx,.Lfe39-LoadBallParticleGfx
	.align	2, 0
	.globl	AnimateBallOpenParticles
	.type	 AnimateBallOpenParticles,function
	.thumb_func
AnimateBallOpenParticles:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	mov	r8, r1
	mov	r9, r2
	mov	sl, r3
	ldr	r5, [sp, #0x1c]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r0, sl
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r5, #0
	bl	LoadBallParticleGfx
	ldr	r1, .L392
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x5
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L392+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r6, [r0, #0xa]
	mov	r1, r8
	strh	r1, [r0, #0xc]
	mov	r1, r9
	strh	r1, [r0, #0xe]
	mov	r1, sl
	strh	r1, [r0, #0x10]
	strh	r5, [r0, #0x26]
	mov	r0, #0xf
	bl	PlaySE
	add	r0, r4, #0
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L393:
	.align	2, 0
.L392:
	.word	sBallParticleAnimationFuncs
	.word	gTasks
.Lfe40:
	.size	 AnimateBallOpenParticles,.Lfe40-AnimateBallOpenParticles
	.align	2, 0
	.type	 IncrBallParticleCount,function
	.thumb_func
IncrBallParticleCount:
	push	{lr}
	ldr	r0, .L396
	ldr	r1, .L396+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L395	@cond_branch
	ldr	r0, .L396+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x8]
	ldrb	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strb	r0, [r1, #0xa]
.L395:
	pop	{r0}
	bx	r0
.L397:
	.align	2, 0
.L396:
	.word	gMain
	.word	0x439
	.word	gBattleSpritesDataPtr
.Lfe41:
	.size	 IncrBallParticleCount,.Lfe41-IncrBallParticleCount
	.align	2, 0
	.type	 PokeBallOpenParticleAnimation,function
	.thumb_func
PokeBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L404
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrh	r0, [r6, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r2, #0x8
	ldrsh	r0, [r6, r2]
	add	r2, r1, #0
	cmp	r0, #0xf
	bgt	.L399	@cond_branch
	ldrb	r1, [r6, #0xa]
	ldrb	r2, [r6, #0xc]
	ldrb	r4, [r6, #0xe]
	mov	r9, r4
	ldrb	r3, [r6, #0x10]
	ldr	r4, [sp]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r4, .L404+0x4
	add	r0, r0, r4
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	cmp	r0, #0x40
	beq	.L400	@cond_branch
	bl	IncrBallParticleCount
	mov	r0, sl
	lsl	r4, r0, #0x4
	add	r4, r4, sl
	lsl	r4, r4, #0x2
	ldr	r5, .L404+0x8
	add	r7, r4, r5
	ldr	r0, .L404+0xc
	ldr	r1, [sp]
	add	r0, r1, r0
	ldrb	r1, [r0]
	add	r0, r7, #0
	bl	StartSpriteAnim
	add	r5, r5, #0x1c
	add	r4, r4, r5
	ldr	r0, .L404+0x10
	str	r0, [r4]
	mov	r0, #0x3
	mov	r2, r9
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r1, [r7, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r7, #0x5]
	ldrb	r0, [r6, #0x8]
	cmp	r0, #0x7
	bls	.L401	@cond_branch
	sub	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L401:
	lsl	r0, r0, #0x5
	strh	r0, [r7, #0x2e]
.L400:
	ldr	r0, .L404
	mov	r4, r8
	lsl	r1, r4, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r1, [r1, r2]
	add	r2, r0, #0
	cmp	r1, #0xf
	bne	.L399	@cond_branch
	ldr	r0, .L404+0x14
	ldr	r4, .L404+0x18
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L403	@cond_branch
	ldr	r0, .L404+0x8
	mov	r2, sl
	lsl	r1, r2, #0x4
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L403:
	mov	r0, r8
	bl	DestroyTask
	b	.L398
.L405:
	.align	2, 0
.L404:
	.word	gTasks
	.word	sBallParticleSpriteTemplates
	.word	gSprites
	.word	sBallParticleAnimNums
	.word	PokeBallOpenParticleAnimation_Step1
	.word	gMain
	.word	0x439
.L399:
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
.L398:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 PokeBallOpenParticleAnimation,.Lfe42-PokeBallOpenParticleAnimation
	.align	2, 0
	.type	 PokeBallOpenParticleAnimation_Step1,function
	.thumb_func
PokeBallOpenParticleAnimation_Step1:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x30]
	mov	r3, #0x30
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L407	@cond_branch
	ldr	r0, .L409
	str	r0, [r1, #0x1c]
	b	.L408
.L410:
	.align	2, 0
.L409:
	.word	PokeBallOpenParticleAnimation_Step2
.L407:
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x30]
.L408:
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 PokeBallOpenParticleAnimation_Step1,.Lfe43-PokeBallOpenParticleAnimation_Step1
	.align	2, 0
	.type	 PokeBallOpenParticleAnimation_Step2,function
	.thumb_func
PokeBallOpenParticleAnimation_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x32
	bne	.L412	@cond_branch
	add	r0, r4, #0
	bl	DestroyBallOpenAnimationParticle
.L412:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 PokeBallOpenParticleAnimation_Step2,.Lfe44-PokeBallOpenParticleAnimation_Step2
	.align	2, 0
	.type	 TimerBallOpenParticleAnimation,function
	.thumb_func
TimerBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L421
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r3, [r1, #0xa]
	str	r3, [sp]
	ldrb	r0, [r1, #0xc]
	str	r0, [sp, #0x4]
	ldrb	r2, [r1, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r1, [r1, #0x10]
	str	r1, [sp, #0xc]
	mov	r7, #0x0
	ldr	r3, .L421+0x4
	mov	sl, r3
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
.L417:
	ldr	r0, .L421+0x8
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L416	@cond_branch
	bl	IncrBallParticleCount
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r3, sl
	add	r5, r4, r3
	ldr	r0, .L421+0xc
	add	r0, r0, r8
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L421+0x10
	add	r4, r4, r0
	ldr	r0, .L421+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0xa
	strh	r0, [r5, #0x36]
	mov	r0, #0x2
	strh	r0, [r5, #0x38]
	mov	r0, #0x1
	strh	r0, [r5, #0x3a]
.L416:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L417	@cond_branch
	ldr	r0, .L421+0x18
	ldr	r1, .L421+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L420	@cond_branch
	ldr	r0, .L421+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L420:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L422:
	.align	2, 0
.L421:
	.word	gTasks
	.word	gSprites
	.word	sBallParticleSpriteTemplates
	.word	sBallParticleAnimNums
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gMain
	.word	0x439
.Lfe45:
	.size	 TimerBallOpenParticleAnimation,.Lfe45-TimerBallOpenParticleAnimation
	.align	2, 0
	.type	 DiveBallOpenParticleAnimation,function
	.thumb_func
DiveBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L431
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r3, [r1, #0xa]
	str	r3, [sp]
	ldrb	r0, [r1, #0xc]
	str	r0, [sp, #0x4]
	ldrb	r2, [r1, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r1, [r1, #0x10]
	str	r1, [sp, #0xc]
	mov	r7, #0x0
	ldr	r3, .L431+0x4
	mov	sl, r3
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
.L427:
	ldr	r0, .L431+0x8
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L426	@cond_branch
	bl	IncrBallParticleCount
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r3, sl
	add	r5, r4, r3
	ldr	r0, .L431+0xc
	add	r0, r0, r8
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L431+0x10
	add	r4, r4, r0
	ldr	r0, .L431+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0xa
	strh	r0, [r5, #0x36]
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	mov	r0, #0x2
	strh	r0, [r5, #0x3a]
.L426:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L427	@cond_branch
	ldr	r0, .L431+0x18
	ldr	r1, .L431+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L430	@cond_branch
	ldr	r0, .L431+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L430:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L432:
	.align	2, 0
.L431:
	.word	gTasks
	.word	gSprites
	.word	sBallParticleSpriteTemplates
	.word	sBallParticleAnimNums
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gMain
	.word	0x439
.Lfe46:
	.size	 DiveBallOpenParticleAnimation,.Lfe46-DiveBallOpenParticleAnimation
	.align	2, 0
	.type	 SafariBallOpenParticleAnimation,function
	.thumb_func
SafariBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L441
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r0, #0xa]
	str	r2, [sp]
	ldrb	r3, [r0, #0xc]
	str	r3, [sp, #0x4]
	ldrb	r2, [r0, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r0, [r0, #0x10]
	str	r0, [sp, #0xc]
	mov	r7, #0x0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
	ldr	r3, .L441+0x4
	mov	r8, r3
	ldr	r0, .L441+0x8
	add	r1, r1, r0
	mov	sl, r1
.L437:
	ldr	r0, .L441+0xc
	ldr	r1, [sp, #0x10]
	add	r0, r1, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L436	@cond_branch
	bl	IncrBallParticleCount
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r2, r8
	add	r5, r4, r2
	mov	r3, sl
	ldrb	r1, [r3]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L441+0x10
	add	r4, r4, r0
	ldr	r0, .L441+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0x4
	strh	r0, [r5, #0x36]
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	strh	r0, [r5, #0x3a]
.L436:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L437	@cond_branch
	ldr	r0, .L441+0x18
	ldr	r1, .L441+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L440	@cond_branch
	ldr	r0, .L441+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L440:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L442:
	.align	2, 0
.L441:
	.word	gTasks
	.word	gSprites
	.word	sBallParticleAnimNums
	.word	sBallParticleSpriteTemplates
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gMain
	.word	0x439
.Lfe47:
	.size	 SafariBallOpenParticleAnimation,.Lfe47-SafariBallOpenParticleAnimation
	.align	2, 0
	.type	 UltraBallOpenParticleAnimation,function
	.thumb_func
UltraBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L451
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r3, [r1, #0xa]
	str	r3, [sp]
	ldrb	r0, [r1, #0xc]
	str	r0, [sp, #0x4]
	ldrb	r2, [r1, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r1, [r1, #0x10]
	str	r1, [sp, #0xc]
	mov	r7, #0x0
	ldr	r3, .L451+0x4
	mov	sl, r3
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
.L447:
	ldr	r0, .L451+0x8
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L446	@cond_branch
	bl	IncrBallParticleCount
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r3, sl
	add	r5, r4, r3
	ldr	r0, .L451+0xc
	add	r0, r0, r8
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L451+0x10
	add	r4, r4, r0
	ldr	r0, .L451+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	strh	r0, [r5, #0x2e]
	mov	r0, #0x5
	strh	r0, [r5, #0x36]
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	strh	r0, [r5, #0x3a]
.L446:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x9
	bls	.L447	@cond_branch
	ldr	r0, .L451+0x18
	ldr	r1, .L451+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L450	@cond_branch
	ldr	r0, .L451+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L450:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L452:
	.align	2, 0
.L451:
	.word	gTasks
	.word	gSprites
	.word	sBallParticleSpriteTemplates
	.word	sBallParticleAnimNums
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gMain
	.word	0x439
.Lfe48:
	.size	 UltraBallOpenParticleAnimation,.Lfe48-UltraBallOpenParticleAnimation
	.align	2, 0
	.type	 GreatBallOpenParticleAnimation,function
	.thumb_func
GreatBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L464
	lsl	r2, r0, #0x2
	add	r0, r2, r0
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrh	r1, [r3, #0x16]
	mov	r4, #0x16
	ldrsh	r0, [r3, r4]
	cmp	r0, #0
	beq	.L454	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x16]
	b	.L455
.L465:
	.align	2, 0
.L464:
	.word	gTasks
.L454:
	ldrh	r0, [r3, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r3, #0xa]
	str	r1, [sp]
	ldrb	r4, [r3, #0xc]
	str	r4, [sp, #0x4]
	ldrb	r1, [r3, #0xe]
	str	r1, [sp, #0x8]
	ldrb	r3, [r3, #0x10]
	str	r3, [sp, #0xc]
	mov	r7, #0x0
	str	r2, [sp, #0x14]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	str	r1, [sp, #0x10]
	ldr	r3, .L466
	mov	r9, r3
	ldr	r1, .L466+0x4
	add	r0, r0, r1
	mov	sl, r0
.L459:
	ldr	r0, .L466+0x8
	ldr	r4, [sp, #0x10]
	add	r0, r4, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L458	@cond_branch
	bl	IncrBallParticleCount
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r0, r9
	add	r5, r4, r0
	mov	r3, sl
	ldrb	r1, [r3]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L466+0xc
	add	r4, r4, r0
	ldr	r0, .L466+0x10
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0x8
	strh	r0, [r5, #0x36]
	mov	r0, #0x2
	strh	r0, [r5, #0x38]
	strh	r0, [r5, #0x3a]
.L458:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L459	@cond_branch
	ldr	r0, .L466+0x14
	ldr	r1, [sp, #0x14]
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x8
	strh	r0, [r1, #0x16]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0x2
	bne	.L455	@cond_branch
	ldr	r0, .L466+0x18
	ldr	r4, .L466+0x1c
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L463	@cond_branch
	ldr	r0, .L466
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L463:
	mov	r0, r8
	bl	DestroyTask
.L455:
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L467:
	.align	2, 0
.L466:
	.word	gSprites
	.word	sBallParticleAnimNums
	.word	sBallParticleSpriteTemplates
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gTasks
	.word	gMain
	.word	0x439
.Lfe49:
	.size	 GreatBallOpenParticleAnimation,.Lfe49-GreatBallOpenParticleAnimation
	.align	2, 0
	.type	 FanOutBallOpenParticles_Step1,function
	.thumb_func
FanOutBallOpenParticles_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x2e]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x38]
	ldrh	r2, [r4, #0x30]
	add	r0, r0, r2
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L469	@cond_branch
	add	r0, r4, #0
	bl	DestroyBallOpenAnimationParticle
.L469:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 FanOutBallOpenParticles_Step1,.Lfe50-FanOutBallOpenParticles_Step1
	.align	2, 0
	.type	 RepeatBallOpenParticleAnimation,function
	.thumb_func
RepeatBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L478
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r0, #0xa]
	str	r2, [sp]
	ldrb	r3, [r0, #0xc]
	str	r3, [sp, #0x4]
	ldrb	r2, [r0, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r0, [r0, #0x10]
	str	r0, [sp, #0xc]
	mov	r7, #0x0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
	ldr	r3, .L478+0x4
	mov	r8, r3
	ldr	r0, .L478+0x8
	add	r1, r1, r0
	mov	sl, r1
.L474:
	ldr	r0, .L478+0xc
	ldr	r1, [sp, #0x10]
	add	r0, r1, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L473	@cond_branch
	bl	IncrBallParticleCount
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r2, r8
	add	r5, r4, r2
	mov	r3, sl
	ldrb	r1, [r3]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L478+0x10
	add	r4, r4, r0
	ldr	r0, .L478+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r0, [r5, #0x2e]
.L473:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x1a
	bls	.L474	@cond_branch
	ldr	r0, .L478+0x18
	ldr	r1, .L478+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L477	@cond_branch
	ldr	r0, .L478+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L477:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L479:
	.align	2, 0
.L478:
	.word	gTasks
	.word	gSprites
	.word	sBallParticleAnimNums
	.word	sBallParticleSpriteTemplates
	.word	gSprites+0x1c
	.word	RepeatBallOpenParticleAnimation_Step1
	.word	gMain
	.word	0x439
.Lfe51:
	.size	 RepeatBallOpenParticleAnimation,.Lfe51-RepeatBallOpenParticleAnimation
	.align	2, 0
	.type	 RepeatBallOpenParticleAnimation_Step1,function
	.thumb_func
RepeatBallOpenParticleAnimation_Step1:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
	mov	r0, #0x2e
	ldrsh	r4, [r5, r0]
	mov	r2, #0x32
	ldrsh	r1, [r5, r2]
	add	r0, r4, #0
	bl	Sin
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	Cos
	strh	r0, [r5, #0x26]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x6
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L481	@cond_branch
	add	r0, r5, #0
	bl	DestroyBallOpenAnimationParticle
.L481:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 RepeatBallOpenParticleAnimation_Step1,.Lfe52-RepeatBallOpenParticleAnimation_Step1
	.align	2, 0
	.type	 MasterBallOpenParticleAnimation,function
	.thumb_func
MasterBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	ldr	r0, .L498
	ldr	r2, [sp]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldrb	r3, [r1, #0xa]
	str	r3, [sp, #0x4]
	ldrb	r0, [r1, #0xc]
	str	r0, [sp, #0x8]
	ldrb	r2, [r1, #0xe]
	str	r2, [sp, #0xc]
	ldrb	r1, [r1, #0x10]
	str	r1, [sp, #0x10]
	mov	r3, #0x0
	mov	r8, r3
	mov	r1, r9
	lsl	r0, r1, #0x1
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x14]
.L486:
	mov	r7, #0x0
	mov	r2, #0x1
	add	r2, r2, r8
	mov	sl, r2
.L490:
	ldr	r0, .L498+0x4
	ldr	r3, [sp, #0x14]
	add	r0, r3, r0
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	ldr	r3, [sp, #0x10]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L489	@cond_branch
	bl	IncrBallParticleCount
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	ldr	r0, .L498+0x8
	add	r5, r4, r0
	ldr	r0, .L498+0xc
	add	r0, r0, r9
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r1, .L498+0x10
	add	r4, r4, r1
	ldr	r0, .L498+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r1, [sp, #0xc]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r2, r3, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0x8
	strh	r0, [r5, #0x36]
	mov	r0, r8
	cmp	r0, #0
	bne	.L492	@cond_branch
	mov	r0, #0x2
	strh	r0, [r5, #0x38]
	mov	r0, #0x1
	b	.L497
.L499:
	.align	2, 0
.L498:
	.word	gTasks
	.word	sBallParticleSpriteTemplates
	.word	gSprites
	.word	sBallParticleAnimNums
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
.L492:
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	mov	r0, #0x2
.L497:
	strh	r0, [r5, #0x3a]
.L489:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L490	@cond_branch
	mov	r1, sl
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x1
	bls	.L486	@cond_branch
	ldr	r0, .L500
	ldr	r2, .L500+0x4
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L496	@cond_branch
	ldr	r0, .L500+0x8
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L496:
	ldr	r0, [sp]
	bl	DestroyTask
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L501:
	.align	2, 0
.L500:
	.word	gMain
	.word	0x439
	.word	gSprites
.Lfe53:
	.size	 MasterBallOpenParticleAnimation,.Lfe53-MasterBallOpenParticleAnimation
	.align	2, 0
	.type	 PremierBallOpenParticleAnimation,function
	.thumb_func
PremierBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L510
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r0, #0xa]
	str	r2, [sp]
	ldrb	r3, [r0, #0xc]
	str	r3, [sp, #0x4]
	ldrb	r2, [r0, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r0, [r0, #0x10]
	str	r0, [sp, #0xc]
	mov	r7, #0x0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
	ldr	r3, .L510+0x4
	mov	r8, r3
	ldr	r0, .L510+0x8
	add	r1, r1, r0
	mov	sl, r1
.L506:
	ldr	r0, .L510+0xc
	ldr	r1, [sp, #0x10]
	add	r0, r1, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L505	@cond_branch
	bl	IncrBallParticleCount
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r2, r8
	add	r5, r4, r2
	mov	r3, sl
	ldrb	r1, [r3]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L510+0x10
	add	r4, r4, r0
	ldr	r0, .L510+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
.L505:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L506	@cond_branch
	ldr	r0, .L510+0x18
	ldr	r1, .L510+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L509	@cond_branch
	ldr	r0, .L510+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L509:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L511:
	.align	2, 0
.L510:
	.word	gTasks
	.word	gSprites
	.word	sBallParticleAnimNums
	.word	sBallParticleSpriteTemplates
	.word	gSprites+0x1c
	.word	PremierBallOpenParticleAnimation_Step1
	.word	gMain
	.word	0x439
.Lfe54:
	.size	 PremierBallOpenParticleAnimation,.Lfe54-PremierBallOpenParticleAnimation
	.align	2, 0
	.type	 PremierBallOpenParticleAnimation_Step1,function
	.thumb_func
PremierBallOpenParticleAnimation_Step1:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
	mov	r0, #0x2e
	ldrsh	r4, [r5, r0]
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r2, #0x32
	ldrsh	r1, [r5, r2]
	bl	Sin
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	Cos
	strh	r0, [r5, #0x26]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0xa
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L513	@cond_branch
	add	r0, r5, #0
	bl	DestroyBallOpenAnimationParticle
.L513:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 PremierBallOpenParticleAnimation_Step1,.Lfe55-PremierBallOpenParticleAnimation_Step1
	.align	2, 0
	.type	 DestroyBallOpenAnimationParticle,function
	.thumb_func
DestroyBallOpenAnimationParticle:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	ldr	r0, .L533
	ldr	r1, .L533+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L515	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r7, r1]
	cmp	r0, #0x1
	bne	.L526	@cond_branch
	add	r0, r7, #0
	bl	DestroySpriteAndFreeResources
	b	.L518
.L534:
	.align	2, 0
.L533:
	.word	gMain
	.word	0x439
.L515:
	ldr	r2, .L535
	ldr	r0, [r2]
	ldr	r1, [r0, #0x8]
	ldrb	r0, [r1, #0xa]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0xa]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	bne	.L519	@cond_branch
	mov	r4, #0x0
	ldr	r5, .L535+0x4
	b	.L520
.L536:
	.align	2, 0
.L535:
	.word	gBattleSpritesDataPtr
	.word	sBallParticleAnimationFuncs
.L522:
	add	r5, r5, #0x4
	add	r4, r4, #0x1
.L520:
	cmp	r4, #0x1a
	bgt	.L521	@cond_branch
	ldr	r0, [r5]
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L522	@cond_branch
.L521:
	cmp	r4, #0x1b
	bne	.L526	@cond_branch
	mov	r6, #0x0
	ldr	r5, .L537
	ldr	r4, .L537+0x4
.L530:
	ldrh	r0, [r5, #0x6]
	bl	FreeSpriteTilesByTag
	ldrh	r0, [r4, #0x4]
	bl	FreeSpritePaletteByTag
	add	r5, r5, #0x8
	add	r4, r4, #0x8
	add	r6, r6, #0x1
	cmp	r6, #0x1a
	ble	.L530	@cond_branch
.L526:
	add	r0, r7, #0
	bl	DestroySprite
	b	.L518
.L538:
	.align	2, 0
.L537:
	.word	sBallParticleSpriteSheets
	.word	sBallParticlePalettes
.L519:
	add	r0, r7, #0
	bl	DestroySprite
.L518:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 DestroyBallOpenAnimationParticle,.Lfe56-DestroyBallOpenAnimationParticle
	.align	2, 0
	.globl	LaunchBallFadeMonTask
	.type	 LaunchBallFadeMonTask,function
	.thumb_func
LaunchBallFadeMonTask:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r9, r2
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	ldr	r0, .L542
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L542+0x4
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	strh	r7, [r5, #0x26]
	strh	r6, [r5, #0xe]
	mov	r0, r9
	strh	r0, [r5, #0x1c]
	mov	r1, r9
	lsr	r0, r1, #0x10
	strh	r0, [r5, #0x1e]
	cmp	r4, #0
	bne	.L540	@cond_branch
	lsl	r0, r6, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	ldr	r2, .L542+0x8
	lsl	r1, r7, #0x1
	add	r1, r1, r2
	ldrh	r3, [r1]
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalette
	mov	r0, #0x1
	strh	r0, [r5, #0xa]
	b	.L541
.L543:
	.align	2, 0
.L542:
	.word	Task_FadeMon_ToBallColor
	.word	gTasks
	.word	gBallOpenFadeColors
.L540:
	lsl	r0, r6, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	ldr	r2, .L544
	lsl	r1, r7, #0x1
	add	r1, r1, r2
	ldrh	r3, [r1]
	mov	r1, #0x10
	mov	r2, #0x10
	bl	BlendPalette
	mov	r0, #0x10
	strh	r0, [r5, #0x8]
	ldr	r0, .L544+0x4
	strh	r0, [r5, #0xa]
	ldr	r0, .L544+0x8
	str	r0, [r5]
.L541:
	ldr	r0, .L544+0xc
	str	r0, [sp]
	mov	r0, r9
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r0, r8
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L545:
	.align	2, 0
.L544:
	.word	gBallOpenFadeColors
	.word	0xffff
	.word	Task_FadeMon_ToNormal
	.word	0x7fff
.Lfe57:
	.size	 LaunchBallFadeMonTask,.Lfe57-LaunchBallFadeMonTask
	.align	2, 0
	.type	 Task_FadeMon_ToBallColor,function
	.thumb_func
Task_FadeMon_ToBallColor:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L550
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x10
	bgt	.L547	@cond_branch
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0x8]
	ldr	r3, .L550+0x4
	lsl	r1, r1, #0x1
	add	r1, r1, r3
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x8]
	add	r0, r0, r1
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L548
.L551:
	.align	2, 0
.L550:
	.word	gTasks
	.word	gBallOpenFadeColors
.L547:
	ldr	r0, .L552
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L548	@cond_branch
	ldrh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldr	r1, .L552+0x4
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	add	r0, r5, #0
	bl	DestroyTask
.L548:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L553:
	.align	2, 0
.L552:
	.word	gPaletteFade
	.word	0x7fff
.Lfe58:
	.size	 Task_FadeMon_ToBallColor,.Lfe58-Task_FadeMon_ToBallColor
	.align	2, 0
	.type	 Task_FadeMon_ToNormal,function
	.thumb_func
Task_FadeMon_ToNormal:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L556
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L555	@cond_branch
	ldr	r0, .L556+0x4
	lsl	r4, r2, #0x2
	add	r4, r4, r2
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldr	r1, .L556+0x8
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L556+0xc
	str	r0, [r4]
.L555:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L557:
	.align	2, 0
.L556:
	.word	gPaletteFade
	.word	gTasks
	.word	0x7fff
	.word	Task_FadeMon_ToNormal_Step
.Lfe59:
	.size	 Task_FadeMon_ToNormal,.Lfe59-Task_FadeMon_ToNormal
	.align	2, 0
	.type	 Task_FadeMon_ToNormal_Step,function
	.thumb_func
Task_FadeMon_ToNormal_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L561
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x10
	bgt	.L559	@cond_branch
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x14
	mov	r3, #0x80
	lsl	r3, r3, #0x11
	add	r0, r0, r3
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0x8]
	ldr	r3, .L561+0x4
	lsl	r1, r1, #0x1
	add	r1, r1, r3
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x8]
	add	r0, r0, r1
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L560
.L562:
	.align	2, 0
.L561:
	.word	gTasks
	.word	gBallOpenFadeColors
.L559:
	add	r0, r2, #0
	bl	DestroyTask
.L560:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 Task_FadeMon_ToNormal_Step,.Lfe60-Task_FadeMon_ToNormal_Step
	.align	2, 0
	.globl	AnimTask_SwapMonSpriteToFromSubstitute
	.type	 AnimTask_SwapMonSpriteToFromSubstitute,function
	.thumb_func
AnimTask_SwapMonSpriteToFromSubstitute:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L582
	ldr	r3, .L582+0x4
	ldrb	r2, [r3]
	add	r0, r2, r0
	ldrb	r6, [r0]
	ldr	r1, .L582+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r1, #0x1c
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L569	@cond_branch
	cmp	r0, #0x1
	bgt	.L580	@cond_branch
	cmp	r0, #0
	beq	.L565	@cond_branch
	b	.L564
.L583:
	.align	2, 0
.L582:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gTasks
.L580:
	cmp	r0, #0x2
	beq	.L570	@cond_branch
	b	.L564
.L565:
	ldr	r0, .L584
	ldrh	r0, [r0]
	strh	r0, [r5, #0x1e]
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r4, [r5, #0x8]
	add	r0, r0, r4
	strh	r0, [r5, #0x8]
	ldrb	r0, [r3]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L566	@cond_branch
	ldr	r2, .L584+0x4
	lsl	r3, r6, #0x4
	add	r1, r3, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r4, [r1, #0x24]
	add	r0, r0, r4
	strh	r0, [r1, #0x24]
	add	r4, r3, #0
	b	.L567
.L585:
	.align	2, 0
.L584:
	.word	gBattleAnimArgs
	.word	gSprites
.L566:
	ldr	r3, .L586
	lsl	r4, r6, #0x4
	add	r2, r4, r6
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r1, [r5, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	add	r2, r3, #0
.L567:
	ldr	r1, .L586+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrb	r0, [r3, #0x8]
	strh	r0, [r3, #0x8]
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r2, #0x20
	ldrsh	r1, [r0, r2]
	mov	r4, #0x24
	ldrsh	r0, [r0, r4]
	add	r1, r1, r0
	add	r1, r1, #0x20
	mov	r0, #0x98
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bls	.L564	@cond_branch
	ldrh	r0, [r3, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x1c]
	b	.L564
.L587:
	.align	2, 0
.L586:
	.word	gSprites
	.word	gTasks
.L569:
	ldrb	r1, [r5, #0x1e]
	add	r0, r2, #0
	add	r2, r6, #0
	bl	LoadBattleMonGfxAndAnimate
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	b	.L564
.L570:
	mov	r1, #0xa0
	lsl	r1, r1, #0x3
	add	r0, r1, #0
	ldrh	r2, [r5, #0x8]
	add	r0, r0, r2
	strh	r0, [r5, #0x8]
	ldrb	r0, [r3]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L571	@cond_branch
	ldr	r0, .L588
	lsl	r3, r6, #0x4
	add	r2, r3, r6
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r1, [r5, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	add	r4, r3, #0
	b	.L572
.L589:
	.align	2, 0
.L588:
	.word	gSprites
.L571:
	ldr	r0, .L590
	lsl	r2, r6, #0x4
	add	r1, r2, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r3, [r1, #0x24]
	add	r0, r0, r3
	strh	r0, [r1, #0x24]
	add	r4, r2, #0
.L572:
	ldr	r1, .L590+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	strh	r1, [r0, #0x8]
	ldr	r0, .L590+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L573	@cond_branch
	ldr	r0, .L590
	add	r1, r4, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r4, #0x24
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bgt	.L575	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x24]
	b	.L581
.L591:
	.align	2, 0
.L590:
	.word	gSprites
	.word	gTasks
	.word	gBattleAnimAttacker
.L573:
	ldr	r0, .L592
	add	r1, r4, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r3, #0x24
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	blt	.L575	@cond_branch
	strh	r2, [r1, #0x24]
	mov	r4, #0x1
	mov	r8, r4
.L575:
	mov	r0, r8
	cmp	r0, #0
	beq	.L564	@cond_branch
.L581:
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L564:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L593:
	.align	2, 0
.L592:
	.word	gSprites
.Lfe61:
	.size	 AnimTask_SwapMonSpriteToFromSubstitute,.Lfe61-AnimTask_SwapMonSpriteToFromSubstitute
	.align	2, 0
	.globl	AnimTask_SubstituteFadeToInvisible
	.type	 AnimTask_SubstituteFadeToInvisible,function
	.thumb_func
AnimTask_SubstituteFadeToInvisible:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L606
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L599	@cond_branch
	cmp	r0, #0x1
	bgt	.L605	@cond_branch
	cmp	r0, #0
	beq	.L596	@cond_branch
	b	.L595
.L607:
	.align	2, 0
.L606:
	.word	gTasks
.L605:
	cmp	r0, #0x2
	beq	.L602	@cond_branch
	b	.L595
.L596:
	ldr	r0, .L608
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L597	@cond_branch
	ldr	r1, .L608+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	b	.L598
.L609:
	.align	2, 0
.L608:
	.word	gBattleAnimAttacker
	.word	0x3f42
.L597:
	ldr	r1, .L610
	mov	r0, #0x50
	bl	SetGpuReg
.L598:
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r0, .L610+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x26]
	b	.L595
.L611:
	.align	2, 0
.L610:
	.word	0x3f44
	.word	gTasks
.L599:
	ldrh	r0, [r4, #0xa]
	add	r1, r0, #0x1
	strh	r1, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L595	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r2, [r4, #0x8]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x8]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L595	@cond_branch
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	b	.L595
.L602:
	ldr	r1, .L612
	ldr	r4, .L612+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L612+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r0, .L612+0xc
	add	r1, r1, r0
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	r0, #0x0
	mov	r3, #0x1
	bl	RequestDma3Fill
	ldrb	r0, [r4]
	bl	ClearBehindSubstituteBit
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L595:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L613:
	.align	2, 0
.L612:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	0x6010000
.Lfe62:
	.size	 AnimTask_SubstituteFadeToInvisible,.Lfe62-AnimTask_SubstituteFadeToInvisible
	.align	2, 0
	.globl	AnimTask_IsAttackerBehindSubstitute
	.type	 AnimTask_IsAttackerBehindSubstitute,function
	.thumb_func
AnimTask_IsAttackerBehindSubstitute:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L615
	ldr	r1, .L615+0x4
	ldr	r2, [r1]
	ldr	r1, .L615+0x8
	ldrb	r1, [r1]
	ldr	r2, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	strh	r1, [r3, #0xe]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L616:
	.align	2, 0
.L615:
	.word	gBattleAnimArgs
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimAttacker
.Lfe63:
	.size	 AnimTask_IsAttackerBehindSubstitute,.Lfe63-AnimTask_IsAttackerBehindSubstitute
	.align	2, 0
	.globl	AnimTask_SetTargetToEffectBattler
	.type	 AnimTask_SetTargetToEffectBattler,function
	.thumb_func
AnimTask_SetTargetToEffectBattler:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L618
	ldr	r1, .L618+0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L619:
	.align	2, 0
.L618:
	.word	gBattleAnimTarget
	.word	gEffectBattler
.Lfe64:
	.size	 AnimTask_SetTargetToEffectBattler,.Lfe64-AnimTask_SetTargetToEffectBattler
	.align	2, 0
	.globl	TryShinyAnimation
	.type	 TryShinyAnimation,function
	.thumb_func
TryShinyAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L625
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	add	r5, r0, #0
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	add	r4, r0, #0
	add	r0, r6, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L621	@cond_branch
	lsr	r0, r5, #0x10
	ldr	r7, .L625+0x4
	and	r5, r5, r7
	eor	r0, r0, r5
	lsr	r1, r4, #0x10
	eor	r0, r0, r1
	and	r4, r4, r7
	eor	r0, r0, r4
	cmp	r0, #0x7
	bhi	.L622	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
.L622:
	mov	r0, r8
	cmp	r0, #0
	beq	.L621	@cond_branch
	ldr	r0, .L625+0x8
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r7
	bne	.L624	@cond_branch
	ldr	r0, .L625+0xc
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L625+0x10
	bl	LoadCompressedSpritePaletteUsingHeap
.L624:
	ldr	r5, .L625+0x14
	add	r0, r5, #0
	mov	r1, #0xa
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L625+0x18
	lsl	r2, r4, #0x2
	add	r2, r2, r4
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	mov	r4, #0x0
	strh	r6, [r2, #0x8]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	strh	r6, [r1, #0x8]
	strh	r4, [r2, #0xa]
	mov	r0, #0x1
	strh	r0, [r1, #0xa]
	b	.L620
.L626:
	.align	2, 0
.L625:
	.word	gBattleSpritesDataPtr
	.word	0xffff
	.word	0x27f9
	.word	gBattleAnimPicTable+0x748
	.word	gBattleAnimPaletteTable+0x748
	.word	Task_ShinyStars
	.word	gTasks
.L621:
	ldr	r0, .L627
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
.L620:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L628:
	.align	2, 0
.L627:
	.word	gBattleSpritesDataPtr
.Lfe65:
	.size	 TryShinyAnimation,.Lfe65-TryShinyAnimation
	.align	2, 0
	.type	 Task_ShinyStars,function
	.thumb_func
Task_ShinyStars:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L645
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0x22]
	mov	r2, #0x22
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x3b
	bgt	.L630	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x22]
	b	.L629
.L646:
	.align	2, 0
.L645:
	.word	gTasks
.L630:
	ldr	r0, .L647
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	beq	.LCB7098
	b	.L629	@long jump
.LCB7098:
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB7110
	b	.L629	@long jump
.LCB7110:
	ldrb	r0, [r4, #0x8]
	mov	r8, r0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, r8
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L633	@cond_branch
	ldr	r0, .L647+0x4
	add	r1, r5, #0
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L634
.L648:
	.align	2, 0
.L647:
	.word	gBattleSpritesDataPtr
	.word	gWishStarSpriteTemplate
.L633:
	cmp	r0, #0
	blt	.L635	@cond_branch
	cmp	r0, #0x3
	bgt	.L635	@cond_branch
	ldr	r0, .L649
	add	r1, r5, #0
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L649+0x4
	lsl	r2, r5, #0x4
	add	r2, r2, r5
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x4
	b	.L644
.L650:
	.align	2, 0
.L649:
	.word	gMiniTwinklingStarSpriteTemplate
	.word	gSprites
.L635:
	ldr	r0, .L651
	add	r1, r5, #0
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L651+0x4
	lsl	r2, r5, #0x4
	add	r2, r2, r5
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x5
.L644:
	ldr	r4, .L651+0x8
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L651+0xc
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
.L634:
	ldr	r2, .L651+0x10
	lsl	r1, r7, #0x2
	add	r0, r1, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r2
	mov	r2, #0xa
	ldrsh	r0, [r6, r2]
	mov	r9, r1
	cmp	r0, #0
	bne	.L637	@cond_branch
	ldr	r1, .L651+0x4
	lsl	r2, r5, #0x4
	add	r0, r2, r5
	lsl	r0, r0, #0x2
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L651+0x14
	str	r1, [r0]
	add	r4, r2, #0
	b	.L638
.L652:
	.align	2, 0
.L651:
	.word	gMiniTwinklingStarSpriteTemplate
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	gTasks
	.word	SpriteCB_ShinyStars_Encircle
.L637:
	ldr	r3, .L653
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r0, r3, #0
	add	r0, r0, #0x1c
	add	r0, r1, r0
	ldr	r2, .L653+0x4
	str	r2, [r0]
	add	r1, r1, r3
	ldr	r0, .L653+0x8
	strh	r0, [r1, #0x24]
	mov	r0, #0x20
	strh	r0, [r1, #0x26]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	mov	r1, #0x1e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L638	@cond_branch
	mov	r0, r8
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0x3f
	cmp	r0, #0
	bne	.L640	@cond_branch
	mov	r1, #0xc0
.L640:
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x66
	bl	PlaySE12WithPanning
.L638:
	ldr	r1, .L653
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r7, [r0, #0x2e]
	ldr	r1, .L653+0xc
	mov	r2, r9
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
	cmp	r5, #0x40
	beq	.L642	@cond_branch
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
.L642:
	mov	r4, #0x1e
	ldrsh	r0, [r1, r4]
	cmp	r0, #0x5
	bne	.L629	@cond_branch
	ldr	r0, .L653+0x10
	str	r0, [r1]
.L629:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L654:
	.align	2, 0
.L653:
	.word	gSprites
	.word	SpriteCB_ShinyStars_Diagonal
	.word	0xffe0
	.word	gTasks
	.word	Task_ShinyStars_Wait
.Lfe66:
	.size	 Task_ShinyStars,.Lfe66-Task_ShinyStars
	.align	2, 0
	.type	 Task_ShinyStars_Wait,function
	.thumb_func
Task_ShinyStars_Wait:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r0, #0
	ldr	r1, .L658
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r2, #0x20
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L656	@cond_branch
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	bne	.L657	@cond_branch
	ldrb	r1, [r1, #0x8]
	ldr	r0, .L658+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
.L657:
	add	r0, r3, #0
	bl	DestroyTask
.L656:
	pop	{r0}
	bx	r0
.L659:
	.align	2, 0
.L658:
	.word	gTasks
	.word	gBattleSpritesDataPtr
.Lfe67:
	.size	 Task_ShinyStars_Wait,.Lfe67-Task_ShinyStars_Wait
	.align	2, 0
	.type	 SpriteCB_ShinyStars_Encircle,function
	.thumb_func
SpriteCB_ShinyStars_Encircle:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x18
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x18
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0xc
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L661	@cond_branch
	ldr	r2, .L662
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
.L661:
	pop	{r4}
	pop	{r0}
	bx	r0
.L663:
	.align	2, 0
.L662:
	.word	gTasks
.Lfe68:
	.size	 SpriteCB_ShinyStars_Encircle,.Lfe68-SpriteCB_ShinyStars_Encircle
	.align	2, 0
	.type	 SpriteCB_ShinyStars_Diagonal,function
	.thumb_func
SpriteCB_ShinyStars_Diagonal:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x3
	bgt	.L665	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L666
.L665:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r1, [r4, #0x24]
	add	r1, r1, #0x5
	strh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, #0x5
	strh	r0, [r4, #0x26]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x20
	ble	.L666	@cond_branch
	ldr	r2, .L668
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
.L666:
	pop	{r4}
	pop	{r0}
	bx	r0
.L669:
	.align	2, 0
.L668:
	.word	gTasks
.Lfe69:
	.size	 SpriteCB_ShinyStars_Diagonal,.Lfe69-SpriteCB_ShinyStars_Diagonal
	.align	2, 0
	.globl	AnimTask_LoadPokeblockGfx
	.type	 AnimTask_LoadPokeblockGfx,function
	.thumb_func
AnimTask_LoadPokeblockGfx:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L671
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L671+0x4
	bl	LoadCompressedSpritePaletteUsingHeap
	ldr	r0, .L671+0x8
	bl	IndexOfSpritePaletteTag
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L672:
	.align	2, 0
.L671:
	.word	gBattleAnimPicTable+0x868
	.word	gBattleAnimPaletteTable+0x868
	.word	0x281d
.Lfe70:
	.size	 AnimTask_LoadPokeblockGfx,.Lfe70-AnimTask_LoadPokeblockGfx
	.align	2, 0
	.globl	AnimTask_FreePokeblockGfx
	.type	 AnimTask_FreePokeblockGfx,function
	.thumb_func
AnimTask_FreePokeblockGfx:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L674
	add	r0, r5, #0
	bl	FreeSpriteTilesByTag
	add	r0, r5, #0
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L675:
	.align	2, 0
.L674:
	.word	0x281d
.Lfe71:
	.size	 AnimTask_FreePokeblockGfx,.Lfe71-AnimTask_FreePokeblockGfx
	.align	2, 0
	.type	 SpriteCB_PokeBlock_Throw,function
	.thumb_func
SpriteCB_PokeBlock_Throw:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	mov	r0, #0x1e
	strh	r0, [r4, #0x2e]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r5, .L677
	lsr	r0, r0, #0x18
	ldrh	r1, [r5, #0x4]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x6]
	add	r0, r0, r5
	strh	r0, [r4, #0x36]
	ldr	r0, .L677+0x4
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r2, .L677+0x8
	ldr	r1, .L677+0xc
	ldr	r0, .L677+0x10
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L677+0x14
	str	r1, [r0]
	ldr	r0, .L677+0x18
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L678:
	.align	2, 0
.L677:
	.word	gBattleAnimArgs
	.word	0xffe0
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	SpriteCB_TrainerThrowObject
	.word	SpriteCB_PokeBlock_LiftArm
.Lfe72:
	.size	 SpriteCB_PokeBlock_Throw,.Lfe72-SpriteCB_PokeBlock_Throw
	.align	2, 0
	.type	 SpriteCB_PokeBlock_LiftArm,function
	.thumb_func
SpriteCB_PokeBlock_LiftArm:
	push	{lr}
	add	r3, r0, #0
	ldr	r2, .L681
	ldr	r1, .L681+0x4
	ldr	r0, .L681+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L680	@cond_branch
	ldr	r0, .L681+0xc
	str	r0, [r3, #0x1c]
.L680:
	pop	{r0}
	bx	r0
.L682:
	.align	2, 0
.L681:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	SpriteCB_PokeBlock_Arc
.Lfe73:
	.size	 SpriteCB_PokeBlock_LiftArm,.Lfe73-SpriteCB_PokeBlock_LiftArm
	.align	2, 0
	.type	 SpriteCB_PokeBlock_Arc,function
	.thumb_func
SpriteCB_PokeBlock_Arc:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L684	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L685
	str	r0, [r4, #0x1c]
.L684:
	pop	{r4}
	pop	{r0}
	bx	r0
.L686:
	.align	2, 0
.L685:
	.word	SpriteCB_ThrowPokeBlock_Free
.Lfe74:
	.size	 SpriteCB_PokeBlock_Arc,.Lfe74-SpriteCB_PokeBlock_Arc
	.align	2, 0
	.type	 SpriteCB_ThrowPokeBlock_Free,function
	.thumb_func
SpriteCB_ThrowPokeBlock_Free:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L690
	ldr	r3, .L690+0x4
	ldr	r2, .L690+0x8
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L688	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L688	@cond_branch
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L688:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L691:
	.align	2, 0
.L690:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.Lfe75:
	.size	 SpriteCB_ThrowPokeBlock_Free,.Lfe75-SpriteCB_ThrowPokeBlock_Free
	.align	2, 0
	.globl	AnimTask_SetAttackerTargetLeftPos
	.type	 AnimTask_SetAttackerTargetLeftPos,function
	.thumb_func
AnimTask_SetAttackerTargetLeftPos:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L699
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L694	@cond_branch
	cmp	r0, #0x1
	beq	.L695	@cond_branch
	b	.L693
.L700:
	.align	2, 0
.L699:
	.word	gBattleAnimArgs
.L694:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L701
	strb	r0, [r1]
	mov	r0, #0x1
	b	.L698
.L702:
	.align	2, 0
.L701:
	.word	gBattleAnimAttacker
.L695:
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	ldr	r1, .L703
	strb	r0, [r1]
	mov	r0, #0x0
.L698:
	bl	GetBattlerAtPosition
	ldr	r1, .L703+0x4
	strb	r0, [r1]
.L693:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L704:
	.align	2, 0
.L703:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.Lfe76:
	.size	 AnimTask_SetAttackerTargetLeftPos,.Lfe76-AnimTask_SetAttackerTargetLeftPos
	.align	2, 0
	.globl	AnimTask_GetTrappedMoveAnimId
	.type	 AnimTask_GetTrappedMoveAnimId,function
	.thumb_func
AnimTask_GetTrappedMoveAnimId:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L715
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrh	r1, [r0]
	cmp	r1, #0x53
	bne	.L706	@cond_branch
	ldr	r1, .L715+0x4
	mov	r0, #0x1
	b	.L714
.L716:
	.align	2, 0
.L715:
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimArgs
.L706:
	cmp	r1, #0xfa
	bne	.L708	@cond_branch
	ldr	r1, .L717
	mov	r0, #0x2
	b	.L714
.L718:
	.align	2, 0
.L717:
	.word	gBattleAnimArgs
.L708:
	cmp	r1, #0x80
	bne	.L710	@cond_branch
	ldr	r1, .L719
	mov	r0, #0x3
	b	.L714
.L720:
	.align	2, 0
.L719:
	.word	gBattleAnimArgs
.L710:
	mov	r0, #0xa4
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L712	@cond_branch
	ldr	r1, .L721
	mov	r0, #0x4
	b	.L714
.L722:
	.align	2, 0
.L721:
	.word	gBattleAnimArgs
.L712:
	ldr	r1, .L723
	mov	r0, #0x0
.L714:
	strh	r0, [r1]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L724:
	.align	2, 0
.L723:
	.word	gBattleAnimArgs
.Lfe77:
	.size	 AnimTask_GetTrappedMoveAnimId,.Lfe77-AnimTask_GetTrappedMoveAnimId
	.align	2, 0
	.globl	AnimTask_GetBattlersFromArg
	.type	 AnimTask_GetBattlersFromArg,function
	.thumb_func
AnimTask_GetBattlersFromArg:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L726
	ldr	r1, .L726+0x4
	ldr	r2, [r1]
	ldr	r1, [r2, #0x8]
	ldrh	r1, [r1]
	strb	r1, [r3]
	ldr	r3, .L726+0x8
	ldr	r1, [r2, #0x8]
	ldrh	r1, [r1]
	lsr	r1, r1, #0x8
	strb	r1, [r3]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L727:
	.align	2, 0
.L726:
	.word	gBattleAnimAttacker
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimTarget
.Lfe78:
	.size	 AnimTask_GetBattlersFromArg,.Lfe78-AnimTask_GetBattlersFromArg
	.align	2, 0
	.globl	IsCriticalCapture
	.type	 IsCriticalCapture,function
	.thumb_func
IsCriticalCapture:
	ldr	r0, .L729
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1f
	bx	lr
.L730:
	.align	2, 0
.L729:
	.word	gBattleSpritesDataPtr
.Lfe79:
	.size	 IsCriticalCapture,.Lfe79-IsCriticalCapture
	.align	2, 0
	.type	 CB_CriticalCaptureThrownBallMovement,function
	.thumb_func
CB_CriticalCaptureThrownBallMovement:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r6, #0x0
	ldrh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L732	@cond_branch
	mov	r0, #0x17
	bl	PlaySE
.L732:
	ldrh	r0, [r4, #0x34]
	mov	r1, #0xff
	and	r1, r1, r0
	add	r2, r0, #0
	cmp	r1, #0
	beq	.L734	@cond_branch
	cmp	r1, #0x1
	beq	.L737	@cond_branch
	b	.L733
.L734:
	cmp	r5, #0x2
	bgt	.L735	@cond_branch
	ldrh	r0, [r4, #0x24]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x24]
.L735:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L733	@cond_branch
	ldr	r1, .L745
	add	r0, r2, r1
	strh	r0, [r4, #0x34]
	b	.L733
.L746:
	.align	2, 0
.L745:
	.word	0x101
.L737:
	ldrh	r0, [r4, #0x24]
	cmp	r5, #0x2
	ble	.L739	@cond_branch
	cmp	r0, #0
	beq	.L738	@cond_branch
.L739:
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x24]
.L738:
	ldrh	r0, [r4, #0x38]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L740	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldr	r0, .L747
	and	r0, r0, r2
	strh	r0, [r4, #0x34]
.L740:
	cmp	r5, #0x6
	blt	.L733	@cond_branch
	mov	r6, #0x1
.L733:
	cmp	r6, #0
	beq	.L744	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x34]
	mov	r1, #0x28
	strh	r1, [r4, #0x36]
	strh	r0, [r4, #0x38]
	ldr	r0, .L747+0x4
	str	r0, [r4, #0x1c]
.L744:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L748:
	.align	2, 0
.L747:
	.word	-0x100
	.word	SpriteCB_Ball_Bounce_Step
.Lfe80:
	.size	 CB_CriticalCaptureThrownBallMovement,.Lfe80-CB_CriticalCaptureThrownBallMovement
	.comm	gMonShrinkDuration, 4	@ 4
	.comm	gMonShrinkDelta, 4	@ 2
	.comm	gMonShrinkDistance, 4	@ 2
.text
	.align	2, 0

