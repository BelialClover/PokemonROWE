@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_08595E14
	.section .rodata
	.align	2, 0
	.type	 gUnknown_08595E14,object
	.size	 gUnknown_08595E14,24
gUnknown_08595E14:
	.short	0x2742
	.short	0x2742
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	unc_080B08A0
	.align	2, 0
	.type	 sAnim_HandOrFoot,object
sAnim_HandOrFoot:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_HandOrFoot,8
	.align	2, 0
	.type	 sAnim_SlidingKick_0,object
sAnim_SlidingKick_0:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_SlidingKick_0,8
	.align	2, 0
	.type	 sAnim_SlidingKick_1,object
sAnim_SlidingKick_1:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_SlidingKick_1,8
	.align	2, 0
	.type	 sAnim_CrossChopHand_0,object
sAnim_CrossChopHand_0:
	.short	0x30
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_CrossChopHand_0,8
	.align	2, 0
	.type	 sAnim_CrossChopHand_1,object
sAnim_CrossChopHand_1:
	.short	0x30
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_CrossChopHand_1,8
	.globl	gAnims_HandOrFoot
	.align	2, 0
	.type	 gAnims_HandOrFoot,object
gAnims_HandOrFoot:
	.word	sAnim_HandOrFoot
	.size	 gAnims_HandOrFoot,4
	.align	2, 0
	.type	 sAnims_SlidingKick,object
sAnims_SlidingKick:
	.word	sAnim_SlidingKick_0
	.word	sAnim_SlidingKick_1
	.size	 sAnims_SlidingKick,8
	.align	2, 0
	.type	 sAnims_CrossChopHand,object
sAnims_CrossChopHand:
	.word	sAnim_CrossChopHand_0
	.word	sAnim_CrossChopHand_1
	.size	 sAnims_CrossChopHand,8
	.globl	gKarateChopSpriteTemplate
	.align	2, 0
	.type	 gKarateChopSpriteTemplate,object
	.size	 gKarateChopSpriteTemplate,24
gKarateChopSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_HandOrFoot
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSlideHandOrFootToTarget
	.globl	gJumpKickSpriteTemplate
	.align	2, 0
	.type	 gJumpKickSpriteTemplate,object
	.size	 gJumpKickSpriteTemplate,24
gJumpKickSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_HandOrFoot
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimJumpKick
	.globl	gFistFootSpriteTemplate
	.align	2, 0
	.type	 gFistFootSpriteTemplate,object
	.size	 gFistFootSpriteTemplate,24
gFistFootSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_HandOrFoot
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBasicFistOrFoot
	.globl	gFistFootRandomPosSpriteTemplate
	.align	2, 0
	.type	 gFistFootRandomPosSpriteTemplate,object
	.size	 gFistFootRandomPosSpriteTemplate,24
gFistFootRandomPosSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_HandOrFoot
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFistOrFootRandomPos
	.globl	gCrossChopHandSpriteTemplate
	.align	2, 0
	.type	 gCrossChopHandSpriteTemplate,object
	.size	 gCrossChopHandSpriteTemplate,24
gCrossChopHandSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_CrossChopHand
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimCrossChopHand
	.globl	gSlidingKickSpriteTemplate
	.align	2, 0
	.type	 gSlidingKickSpriteTemplate,object
	.size	 gSlidingKickSpriteTemplate,24
gSlidingKickSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_SlidingKick
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSlidingKick
	.align	2, 0
	.type	 sAffineAnim_SpinningHandOrFoot,object
sAffineAnim_SpinningHandOrFoot:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x14
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sAffineAnim_SpinningHandOrFoot,24
	.globl	gAffineAnims_SpinningHandOrFoot
	.align	2, 0
	.type	 gAffineAnims_SpinningHandOrFoot,object
gAffineAnims_SpinningHandOrFoot:
	.word	sAffineAnim_SpinningHandOrFoot
	.size	 gAffineAnims_SpinningHandOrFoot,4
	.globl	gSpinningHandOrFootSpriteTemplate
	.align	2, 0
	.type	 gSpinningHandOrFootSpriteTemplate,object
	.size	 gSpinningHandOrFootSpriteTemplate,24
gSpinningHandOrFootSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineDouble_ObjNormal_32x32
	.word	gAnims_HandOrFoot
	.word	0x0
	.word	gAffineAnims_SpinningHandOrFoot
	.word	AnimSpinningKickOrPunch
	.align	2, 0
	.type	 sAffineAnim_MegaPunchKick,object
sAffineAnim_MegaPunchKick:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x4
	.short	-0x4
	.byte	0x14
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sAffineAnim_MegaPunchKick,24
	.globl	gAffineAnims_MegaPunchKick
	.align	2, 0
	.type	 gAffineAnims_MegaPunchKick,object
gAffineAnims_MegaPunchKick:
	.word	sAffineAnim_MegaPunchKick
	.size	 gAffineAnims_MegaPunchKick,4
	.globl	gMegaPunchKickSpriteTemplate
	.align	2, 0
	.type	 gMegaPunchKickSpriteTemplate,object
	.size	 gMegaPunchKickSpriteTemplate,24
gMegaPunchKickSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineDouble_ObjNormal_32x32
	.word	gAnims_HandOrFoot
	.word	0x0
	.word	gAffineAnims_MegaPunchKick
	.word	AnimSpinningKickOrPunch
	.globl	gStompFootSpriteTemplate
	.align	2, 0
	.type	 gStompFootSpriteTemplate,object
	.size	 gStompFootSpriteTemplate,24
gStompFootSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_SlidingKick
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimStompFoot
	.globl	gDizzyPunchDuckSpriteTemplate
	.align	2, 0
	.type	 gDizzyPunchDuckSpriteTemplate,object
	.size	 gDizzyPunchDuckSpriteTemplate,24
gDizzyPunchDuckSpriteTemplate:
	.short	0x2759
	.short	0x2759
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimDizzyPunchDuck
	.globl	gBrickBreakWallSpriteTemplate
	.align	2, 0
	.type	 gBrickBreakWallSpriteTemplate,object
	.size	 gBrickBreakWallSpriteTemplate,24
gBrickBreakWallSpriteTemplate:
	.short	0x27b7
	.short	0x27b7
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBrickBreakWall
	.globl	gBrickBreakWallShardSpriteTemplate
	.align	2, 0
	.type	 gBrickBreakWallShardSpriteTemplate,object
	.size	 gBrickBreakWallShardSpriteTemplate,24
gBrickBreakWallShardSpriteTemplate:
	.short	0x27e0
	.short	0x27e0
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBrickBreakWallShard
	.align	2, 0
	.type	 sAffineAnim_SuperpowerOrb,object
sAffineAnim_SuperpowerOrb:
	.short	0x20
	.short	0x20
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x40
	.space	2
	.short	-0x6
	.short	-0x6
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x6
	.short	0x6
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffe
	.short	0x2
	.space	4
	.size	 sAffineAnim_SuperpowerOrb,40
	.align	2, 0
	.type	 sAffineAnims_SuperpowerOrb,object
sAffineAnims_SuperpowerOrb:
	.word	sAffineAnim_SuperpowerOrb
	.size	 sAffineAnims_SuperpowerOrb,4
	.globl	gSuperpowerOrbSpriteTemplate
	.align	2, 0
	.type	 gSuperpowerOrbSpriteTemplate,object
	.size	 gSuperpowerOrbSpriteTemplate,24
gSuperpowerOrbSpriteTemplate:
	.short	0x27e4
	.short	0x27e4
	.word	gOamData_AffineDouble_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_SuperpowerOrb
	.word	AnimSuperpowerOrb
	.globl	gSuperpowerRockSpriteTemplate
	.align	2, 0
	.type	 gSuperpowerRockSpriteTemplate,object
	.size	 gSuperpowerRockSpriteTemplate,24
gSuperpowerRockSpriteTemplate:
	.short	0x2811
	.short	0x2811
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSuperpowerRock
	.globl	gSuperpowerFireballSpriteTemplate
	.align	2, 0
	.type	 gSuperpowerFireballSpriteTemplate,object
	.size	 gSuperpowerFireballSpriteTemplate,24
gSuperpowerFireballSpriteTemplate:
	.short	0x2810
	.short	0x2810
	.word	gOamData_AffineOff_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSuperpowerFireball
	.globl	gArmThrustHandSpriteTemplate
	.align	2, 0
	.type	 gArmThrustHandSpriteTemplate,object
	.size	 gArmThrustHandSpriteTemplate,24
gArmThrustHandSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_HandOrFoot
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimArmThrustHit
	.align	2, 0
	.type	 sAnim_RevengeSmallScratch_0,object
sAnim_RevengeSmallScratch_0:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_RevengeSmallScratch_0,16
	.align	2, 0
	.type	 sAnim_RevengeSmallScratch_1,object
sAnim_RevengeSmallScratch_1:
	.short	0x0
	.byte	0x84
	.space	1
	.short	0x10
	.byte	0x84
	.space	1
	.short	0x20
	.byte	0x84
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_RevengeSmallScratch_1,16
	.align	2, 0
	.type	 sAnim_RevengeSmallScratch_2,object
sAnim_RevengeSmallScratch_2:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_RevengeSmallScratch_2,16
	.align	2, 0
	.type	 sAnims_RevengeSmallScratch,object
sAnims_RevengeSmallScratch:
	.word	sAnim_RevengeSmallScratch_0
	.word	sAnim_RevengeSmallScratch_1
	.word	sAnim_RevengeSmallScratch_2
	.size	 sAnims_RevengeSmallScratch,12
	.globl	gRevengeSmallScratchSpriteTemplate
	.align	2, 0
	.type	 gRevengeSmallScratchSpriteTemplate,object
	.size	 gRevengeSmallScratchSpriteTemplate,24
gRevengeSmallScratchSpriteTemplate:
	.short	0x2805
	.short	0x2805
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_RevengeSmallScratch
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRevengeScratch
	.align	2, 0
	.type	 sAnim_RevengeBigScratch_0,object
sAnim_RevengeBigScratch_0:
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x40
	.byte	0x6
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_RevengeBigScratch_0,12
	.align	2, 0
	.type	 sAnim_RevengeBigScratch_1,object
sAnim_RevengeBigScratch_1:
	.short	0x0
	.byte	0xc6
	.space	1
	.short	0x40
	.byte	0xc6
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_RevengeBigScratch_1,12
	.align	2, 0
	.type	 sAnim_RevengeBigScratch_2,object
sAnim_RevengeBigScratch_2:
	.short	0x0
	.byte	0x46
	.space	1
	.short	0x40
	.byte	0x46
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_RevengeBigScratch_2,12
	.globl	gAnims_RevengeBigScratch
	.align	2, 0
	.type	 gAnims_RevengeBigScratch,object
gAnims_RevengeBigScratch:
	.word	sAnim_RevengeBigScratch_0
	.word	sAnim_RevengeBigScratch_1
	.word	sAnim_RevengeBigScratch_2
	.size	 gAnims_RevengeBigScratch,12
	.globl	gRevengeBigScratchSpriteTemplate
	.align	2, 0
	.type	 gRevengeBigScratchSpriteTemplate,object
	.size	 gRevengeBigScratchSpriteTemplate,24
gRevengeBigScratchSpriteTemplate:
	.short	0x2806
	.short	0x2806
	.word	gOamData_AffineOff_ObjNormal_64x64
	.word	gAnims_RevengeBigScratch
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRevengeScratch
	.align	2, 0
	.type	 sAffineAnim_FocusPunchFist,object
sAffineAnim_FocusPunchFist:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x20
	.short	-0x20
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FocusPunchFist,24
	.align	2, 0
	.type	 sAffineAnims_FocusPunchFist,object
sAffineAnims_FocusPunchFist:
	.word	sAffineAnim_FocusPunchFist
	.size	 sAffineAnims_FocusPunchFist,4
	.globl	gFocusPunchFistSpriteTemplate
	.align	2, 0
	.type	 gFocusPunchFistSpriteTemplate,object
	.size	 gFocusPunchFistSpriteTemplate,24
gFocusPunchFistSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineDouble_ObjNormal_32x32
	.word	gAnims_HandOrFoot
	.word	0x0
	.word	sAffineAnims_FocusPunchFist
	.word	AnimFocusPunchFist
	.globl	gPalmSpriteTemplate
	.align	2, 0
	.type	 gPalmSpriteTemplate,object
	.size	 gPalmSpriteTemplate,24
gPalmSpriteTemplate:
	.short	0x27d1
	.short	0x27d1
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_HandOrFoot
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBasicFistOrFoot
	.globl	gAuraSphereBlast
	.align	2, 0
	.type	 gAuraSphereBlast,object
	.size	 gAuraSphereBlast,24
gAuraSphereBlast:
	.short	0x27e4
	.short	0x27e4
	.word	gOamData_AffineOff_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSuperpowerFireball
	.globl	gForcePalmAffineAnimCmd_1
	.align	2, 0
	.type	 gForcePalmAffineAnimCmd_1,object
gForcePalmAffineAnimCmd_1:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gForcePalmAffineAnimCmd_1,16
	.globl	gForcePalmAffineAnimCmd_2
	.align	2, 0
	.type	 gForcePalmAffineAnimCmd_2,object
gForcePalmAffineAnimCmd_2:
	.short	0xd8
	.short	0xd8
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gForcePalmAffineAnimCmd_2,24
	.globl	gForcePalmAffineAnimCmd_3
	.align	2, 0
	.type	 gForcePalmAffineAnimCmd_3,object
gForcePalmAffineAnimCmd_3:
	.short	0xb0
	.short	0xb0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gForcePalmAffineAnimCmd_3,24
	.globl	gForcePalmAffineAnimCmd_4
	.align	2, 0
	.type	 gForcePalmAffineAnimCmd_4,object
gForcePalmAffineAnimCmd_4:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gForcePalmAffineAnimCmd_4,24
	.globl	gForcePalmAffineAnims
	.align	2, 0
	.type	 gForcePalmAffineAnims,object
gForcePalmAffineAnims:
	.word	gForcePalmAffineAnimCmd_1
	.word	gForcePalmAffineAnimCmd_2
	.word	gForcePalmAffineAnimCmd_3
	.word	gForcePalmAffineAnimCmd_4
	.size	 gForcePalmAffineAnims,16
	.globl	gForcePalmSpriteTemplate
	.align	2, 0
	.type	 gForcePalmSpriteTemplate,object
	.size	 gForcePalmSpriteTemplate,24
gForcePalmSpriteTemplate:
	.short	0x2797
	.short	0x27c0
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gForcePalmAffineAnims
	.word	AnimForcePalm
.text
	.align	2, 0
	.type	 AnimForcePalm,function
	.thumb_func
AnimForcePalm:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L5
	ldrb	r1, [r4, #0x6]
	bl	StartSpriteAffineAnim
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L3	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	gBattleAnimArgs
.L3:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
.L4:
	ldr	r0, .L7
	str	r0, [r5, #0x1c]
	ldr	r1, .L7+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	RunStoredCallbackWhenAffineAnimEnds
	.word	DestroyAnimSprite
.Lfe1:
	.size	 AnimForcePalm,.Lfe1-AnimForcePalm
	.align	2, 0
	.type	 unc_080B08A0,function
	.thumb_func
unc_080B08A0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L10
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0xf
	strh	r0, [r4, #0x2e]
	ldr	r0, .L10+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L10+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L11:
	.align	2, 0
.L10:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe2:
	.size	 unc_080B08A0,.Lfe2-unc_080B08A0
	.align	2, 0
	.type	 AnimSlideHandOrFootToTarget,function
	.thumb_func
AnimSlideHandOrFootToTarget:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L14
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L13	@cond_branch
	ldr	r0, .L14+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L13	@cond_branch
	ldrh	r0, [r4, #0x2]
	neg	r0, r0
	strh	r0, [r4, #0x2]
	ldrh	r0, [r4, #0x6]
	neg	r0, r0
	strh	r0, [r4, #0x6]
.L13:
	ldr	r4, .L14
	ldrb	r1, [r4, #0xc]
	add	r0, r5, #0
	bl	StartSpriteAnim
	mov	r0, #0x0
	strh	r0, [r4, #0xc]
	add	r0, r5, #0
	bl	AnimTravelDiagonally
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.Lfe3:
	.size	 AnimSlideHandOrFootToTarget,.Lfe3-AnimSlideHandOrFootToTarget
	.align	2, 0
	.globl	AnimJumpKick
	.type	 AnimJumpKick,function
	.thumb_func
AnimJumpKick:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L17	@cond_branch
	ldr	r0, .L18
	ldrh	r1, [r0, #0x2]
	neg	r1, r1
	strh	r1, [r0, #0x2]
	ldrh	r1, [r0, #0x6]
	neg	r1, r1
	strh	r1, [r0, #0x6]
.L17:
	add	r0, r4, #0
	bl	AnimSlideHandOrFootToTarget
	pop	{r4}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gBattleAnimArgs
.Lfe4:
	.size	 AnimJumpKick,.Lfe4-AnimJumpKick
	.align	2, 0
	.globl	AnimBasicFistOrFoot
	.type	 AnimBasicFistOrFoot,function
	.thumb_func
AnimBasicFistOrFoot:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L23
	ldrb	r1, [r4, #0x8]
	bl	StartSpriteAnim
	mov	r1, #0x6
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L21	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	b	.L22
.L24:
	.align	2, 0
.L23:
	.word	gBattleAnimArgs
.L21:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
.L22:
	ldr	r0, .L25
	ldrh	r0, [r0, #0x4]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L25+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L25+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe5:
	.size	 AnimBasicFistOrFoot,.Lfe5-AnimBasicFistOrFoot
	.align	2, 0
	.type	 AnimFistOrFootRandomPos,function
	.thumb_func
AnimFistOrFootRandomPos:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r5, r0, #0
	ldr	r0, .L37
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r9, r0
	cmp	r1, #0
	bne	.L28	@cond_branch
	ldr	r0, .L37+0x4
	b	.L36
.L38:
	.align	2, 0
.L37:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L28:
	ldr	r0, .L39
.L36:
	ldrb	r0, [r0]
	mov	r8, r0
	mov	r4, r9
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bge	.L30	@cond_branch
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	strh	r0, [r4, #0x4]
.L30:
	ldrb	r1, [r4, #0x4]
	add	r0, r5, #0
	bl	StartSpriteAnim
	mov	r0, r8
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	mov	r0, r8
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	mov	r0, r8
	mov	r1, #0x1
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	lsr	r0, r0, #0x1f
	add	r1, r1, r0
	lsl	r1, r1, #0xf
	lsr	r6, r1, #0x10
	mov	r0, r8
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L31	@cond_branch
	add	r0, r0, #0x3
.L31:
	lsl	r4, r0, #0xe
	lsr	r4, r4, #0x10
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r6, #0x10
	asr	r1, r1, #0x10
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	add	r1, r4, #0
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	Random2
	mov	r7, #0x1
	add	r1, r7, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L32	@cond_branch
	lsl	r0, r6, #0x10
	neg	r0, r0
	lsr	r6, r0, #0x10
.L32:
	bl	Random2
	add	r1, r7, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L33	@cond_branch
	lsl	r0, r4, #0x10
	neg	r0, r0
	lsr	r4, r0, #0x10
.L33:
	ldr	r0, .L39+0x4
	add	r0, r0, r8
	ldrb	r1, [r0]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L34	@cond_branch
	lsl	r0, r4, #0x10
	ldr	r1, .L39+0x8
	add	r0, r0, r1
	lsr	r4, r0, #0x10
.L34:
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r5, #0x20]
	add	r0, r0, r2
	strh	r0, [r5, #0x20]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	ldrh	r3, [r5, #0x22]
	add	r0, r0, r3
	strh	r0, [r5, #0x22]
	mov	r1, r9
	ldrh	r0, [r1, #0x2]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L39+0xc
	mov	r2, #0x20
	ldrsh	r1, [r5, r2]
	mov	r3, #0x22
	ldrsh	r2, [r5, r3]
	add	r3, r5, #0
	add	r3, r3, #0x43
	ldrb	r3, [r3]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x3c]
	cmp	r0, #0x40
	beq	.L35	@cond_branch
	mov	r0, #0x3c
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L39+0x10
	add	r0, r0, r4
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	mov	r2, #0x3c
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L39+0x14
	str	r1, [r0]
.L35:
	ldr	r0, .L39+0x18
	str	r0, [r5, #0x1c]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	gBattleAnimTarget
	.word	gBattlerPositions
	.word	-0x100000
	.word	gBasicHitSplatSpriteTemplate
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	AnimFistOrFootRandomPos_Step
.Lfe6:
	.size	 AnimFistOrFootRandomPos,.Lfe6-AnimFistOrFootRandomPos
	.align	2, 0
	.type	 AnimFistOrFootRandomPos_Step,function
	.thumb_func
AnimFistOrFootRandomPos_Step:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	bne	.L42	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x40
	beq	.L43	@cond_branch
	ldr	r4, .L45
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	mov	r0, #0x3c
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
.L43:
	add	r0, r5, #0
	bl	DestroyAnimSprite
	b	.L44
.L46:
	.align	2, 0
.L45:
	.word	gSprites
.L42:
	sub	r0, r1, #0x1
	strh	r0, [r5, #0x2e]
.L44:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 AnimFistOrFootRandomPos_Step,.Lfe7-AnimFistOrFootRandomPos_Step
	.align	2, 0
	.type	 AnimCrossChopHand,function
	.thumb_func
AnimCrossChopHand:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	mov	r0, #0x1e
	strh	r0, [r4, #0x2e]
	ldr	r0, .L50
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L48	@cond_branch
	ldrh	r0, [r4, #0x20]
	sub	r0, r0, #0x14
	strh	r0, [r4, #0x32]
	b	.L49
.L51:
	.align	2, 0
.L50:
	.word	gBattleAnimArgs
.L48:
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x14
	strh	r0, [r4, #0x32]
	add	r2, r4, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L49:
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x14
	strh	r0, [r4, #0x36]
	ldr	r0, .L52
	str	r0, [r4, #0x1c]
	ldr	r1, .L52+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L53:
	.align	2, 0
.L52:
	.word	StartAnimLinearTranslation
	.word	AnimCrossChopHand_Step
.Lfe8:
	.size	 AnimCrossChopHand,.Lfe8-AnimCrossChopHand
	.align	2, 0
	.type	 AnimCrossChopHand_Step,function
	.thumb_func
AnimCrossChopHand_Step:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x38]
	add	r0, r0, #0x1
	mov	r6, #0x0
	strh	r0, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	bne	.L55	@cond_branch
	ldrh	r2, [r5, #0x20]
	ldrh	r4, [r5, #0x24]
	sub	r0, r2, r4
	strh	r0, [r5, #0x32]
	ldrh	r1, [r5, #0x22]
	ldrh	r3, [r5, #0x26]
	sub	r0, r1, r3
	strh	r0, [r5, #0x36]
	mov	r0, #0x8
	strh	r0, [r5, #0x2e]
	add	r2, r2, r4
	strh	r2, [r5, #0x20]
	add	r1, r1, r3
	strh	r1, [r5, #0x22]
	strh	r6, [r5, #0x26]
	strh	r6, [r5, #0x24]
	ldr	r0, .L56
	str	r0, [r5, #0x1c]
	ldr	r1, .L56+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
.L55:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe9:
	.size	 AnimCrossChopHand_Step,.Lfe9-AnimCrossChopHand_Step
	.align	2, 0
	.type	 AnimSlidingKick,function
	.thumb_func
AnimSlidingKick:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r0, .L61
	ldrb	r1, [r0]
	mov	r0, #0x2
	ldr	r2, .L61+0x4
	eor	r0, r0, r1
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L59	@cond_branch
	ldrb	r0, [r2]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L59	@cond_branch
	ldr	r1, .L61+0x8
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1]
.L59:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r0, .L61
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L60	@cond_branch
	ldr	r1, .L61+0x8
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L60:
	ldr	r4, .L61+0x8
	ldrh	r0, [r4, #0x6]
	mov	r5, #0x0
	strh	r0, [r6, #0x2e]
	ldrh	r0, [r6, #0x20]
	strh	r0, [r6, #0x30]
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrh	r0, [r6, #0x22]
	strh	r0, [r6, #0x34]
	strh	r0, [r6, #0x36]
	add	r0, r6, #0
	bl	InitAnimLinearTranslation
	ldrh	r0, [r4, #0xa]
	strh	r0, [r6, #0x38]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x3a]
	strh	r5, [r6, #0x3c]
	ldr	r0, .L61+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimSlidingKick_Step
.Lfe10:
	.size	 AnimSlidingKick,.Lfe10-AnimSlidingKick
	.align	2, 0
	.type	 AnimSlidingKick_Step,function
	.thumb_func
AnimSlidingKick_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L64	@cond_branch
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3a]
	ldrh	r2, [r4, #0x3c]
	add	r0, r0, r2
	strh	r0, [r4, #0x3c]
	b	.L65
.L64:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L65:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 AnimSlidingKick_Step,.Lfe11-AnimSlidingKick_Step
	.align	2, 0
	.globl	AnimSpinningKickOrPunch
	.type	 AnimSpinningKickOrPunch,function
	.thumb_func
AnimSpinningKickOrPunch:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r5, .L67
	ldrb	r1, [r5, #0x4]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldr	r0, .L67+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L67+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	AnimSpinningKickOrPunchFinish
.Lfe12:
	.size	 AnimSpinningKickOrPunch,.Lfe12-AnimSpinningKickOrPunch
	.align	2, 0
	.globl	AnimSpinningKickOrPunchFinish
	.type	 AnimSpinningKickOrPunchFinish,function
	.thumb_func
AnimSpinningKickOrPunchFinish:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x14
	strh	r0, [r4, #0x2e]
	ldr	r0, .L70
	str	r0, [r4, #0x1c]
	ldr	r1, .L70+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe13:
	.size	 AnimSpinningKickOrPunchFinish,.Lfe13-AnimSpinningKickOrPunchFinish
	.align	2, 0
	.globl	AnimStompFoot
	.type	 AnimStompFoot,function
	.thumb_func
AnimStompFoot:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r0, .L73
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r0, .L73+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	gBattleAnimArgs
	.word	AnimStompFoot_Step
.Lfe14:
	.size	 AnimStompFoot,.Lfe14-AnimStompFoot
	.align	2, 0
	.type	 AnimStompFoot_Step,function
	.thumb_func
AnimStompFoot_Step:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L76	@cond_branch
	mov	r0, #0x6
	strh	r0, [r5, #0x2e]
	ldr	r4, .L77
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	ldr	r0, .L77+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L77+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
.L76:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L78:
	.align	2, 0
.L77:
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	AnimStompFoot_End
.Lfe15:
	.size	 AnimStompFoot_Step,.Lfe15-AnimStompFoot_Step
	.align	2, 0
	.type	 AnimStompFoot_End,function
	.thumb_func
AnimStompFoot_End:
	push	{lr}
	mov	r1, #0xf
	strh	r1, [r0, #0x2e]
	ldr	r1, .L80
	str	r1, [r0, #0x1c]
	ldr	r1, .L80+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe16:
	.size	 AnimStompFoot_End,.Lfe16-AnimStompFoot_End
	.align	2, 0
	.globl	AnimDizzyPunchDuck
	.type	 AnimDizzyPunchDuck,function
	.thumb_func
AnimDizzyPunchDuck:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L83	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r1, .L87
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L84
.L88:
	.align	2, 0
.L87:
	.word	gBattleAnimArgs
.L83:
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	cmp	r0, #0x64
	ble	.L85	@cond_branch
	mov	r0, #0x34
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L85:
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x78
	ble	.L84	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L84:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 AnimDizzyPunchDuck,.Lfe17-AnimDizzyPunchDuck
	.align	2, 0
	.type	 AnimBrickBreakWall,function
	.thumb_func
AnimBrickBreakWall:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L93
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L90	@cond_branch
	ldr	r4, .L93+0x4
	b	.L92
.L94:
	.align	2, 0
.L93:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L90:
	ldr	r4, .L95
.L92:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r1, .L95+0x4
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r5, #0x20]
	add	r0, r0, r2
	mov	r2, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r1, #0x4]
	ldrh	r3, [r5, #0x22]
	add	r0, r0, r3
	strh	r0, [r5, #0x22]
	strh	r2, [r5, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r5, #0x32]
	strh	r2, [r5, #0x34]
	ldr	r0, .L95+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L96:
	.align	2, 0
.L95:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimBrickBreakWall_Step
.Lfe18:
	.size	 AnimBrickBreakWall,.Lfe18-AnimBrickBreakWall
	.align	2, 0
	.globl	AnimBrickBreakWall_Step
	.type	 AnimBrickBreakWall_Step,function
	.thumb_func
AnimBrickBreakWall_Step:
	push	{lr}
	add	r1, r0, #0
	mov	r0, #0x2e
	ldrsh	r2, [r1, r0]
	cmp	r2, #0
	beq	.L99	@cond_branch
	cmp	r2, #0x1
	beq	.L103	@cond_branch
	b	.L98
.L99:
	ldrh	r0, [r1, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L98	@cond_branch
	mov	r2, #0x32
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L101	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
	b	.L98
.L101:
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	b	.L98
.L103:
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L104	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
	ldrh	r0, [r1, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x34]
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L105	@cond_branch
	mov	r0, #0x2
	b	.L110
.L105:
	ldr	r0, .L111
.L110:
	strh	r0, [r1, #0x24]
.L104:
	ldrh	r0, [r1, #0x32]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L98	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L98:
	pop	{r0}
	bx	r0
.L112:
	.align	2, 0
.L111:
	.word	0xfffe
.Lfe19:
	.size	 AnimBrickBreakWall_Step,.Lfe19-AnimBrickBreakWall_Step
	.align	2, 0
	.type	 AnimBrickBreakWallShard,function
	.thumb_func
AnimBrickBreakWallShard:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L125
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L114	@cond_branch
	ldr	r4, .L125+0x4
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r6, #0x4]
	add	r0, r0, r2
	b	.L124
.L126:
	.align	2, 0
.L125:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L114:
	ldr	r4, .L127
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
.L124:
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x6]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	ldrh	r2, [r5, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	ldr	r3, .L127+0x4
	mov	r4, #0x2
	ldrsh	r0, [r3, r4]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r4, .L127+0x8
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L127+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	mov	r2, #0x2
	ldrsh	r0, [r3, r2]
	cmp	r0, #0x1
	beq	.L118	@cond_branch
	cmp	r0, #0x1
	bgt	.L123	@cond_branch
	cmp	r0, #0
	beq	.L117	@cond_branch
	b	.L121
.L128:
	.align	2, 0
.L127:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0x3ff
	.word	-0x400
.L123:
	cmp	r0, #0x2
	beq	.L119	@cond_branch
	cmp	r0, #0x3
	beq	.L120	@cond_branch
	b	.L121
.L117:
	ldr	r0, .L129
	b	.L120
.L130:
	.align	2, 0
.L129:
	.word	0xfffd
.L118:
	mov	r0, #0x3
	strh	r0, [r5, #0x3a]
	ldr	r0, .L131
	strh	r0, [r5, #0x3c]
	b	.L116
.L132:
	.align	2, 0
.L131:
	.word	0xfffd
.L119:
	ldr	r0, .L133
	strh	r0, [r5, #0x3a]
	mov	r0, #0x3
	strh	r0, [r5, #0x3c]
	b	.L116
.L134:
	.align	2, 0
.L133:
	.word	0xfffd
.L120:
	strh	r0, [r5, #0x3a]
	strh	r0, [r5, #0x3c]
	b	.L116
.L121:
	add	r0, r5, #0
	bl	DestroyAnimSprite
	b	.L113
.L116:
	ldr	r0, .L135
	str	r0, [r5, #0x1c]
.L113:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	AnimBrickBreakWallShard_Step
.Lfe20:
	.size	 AnimBrickBreakWallShard,.Lfe20-AnimBrickBreakWallShard
	.align	2, 0
	.type	 AnimBrickBreakWallShard_Step,function
	.thumb_func
AnimBrickBreakWallShard_Step:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x3a]
	ldrh	r2, [r1, #0x20]
	add	r0, r0, r2
	strh	r0, [r1, #0x20]
	ldrh	r0, [r1, #0x3c]
	ldrh	r2, [r1, #0x22]
	add	r0, r0, r2
	strh	r0, [r1, #0x22]
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	ble	.L138	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L138:
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 AnimBrickBreakWallShard_Step,.Lfe21-AnimBrickBreakWallShard_Step
	.align	2, 0
	.type	 AnimSuperpowerOrb,function
	.thumb_func
AnimSuperpowerOrb:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L143
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L140	@cond_branch
	ldr	r4, .L143+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r0, .L143+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	ldr	r0, .L143+0xc
	b	.L142
.L144:
	.align	2, 0
.L143:
	.word	gBattleAnimArgs
	.word	gBattlerAttacker
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L140:
	ldr	r0, .L145
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	ldr	r0, .L145+0x4
.L142:
	ldrb	r0, [r0]
	strh	r0, [r5, #0x3c]
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	mov	r0, #0xc
	strh	r0, [r5, #0x30]
	mov	r0, #0x8
	strh	r0, [r5, #0x32]
	ldr	r0, .L145+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L146:
	.align	2, 0
.L145:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	AnimSuperpowerOrb_Step
.Lfe22:
	.size	 AnimSuperpowerOrb,.Lfe22-AnimSuperpowerOrb
	.align	2, 0
	.type	 AnimSuperpowerOrb_Step,function
	.thumb_func
AnimSuperpowerOrb_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb4
	bne	.L148	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x10
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L149
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L149+0x4
	str	r0, [r4, #0x1c]
.L148:
	pop	{r4}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	DestroySpriteAndMatrix
	.word	sub_80A6F98
.Lfe23:
	.size	 AnimSuperpowerOrb_Step,.Lfe23-AnimSuperpowerOrb_Step
	.align	2, 0
	.type	 AnimSuperpowerRock,function
	.thumb_func
AnimSuperpowerRock:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L152
	ldrh	r0, [r4]
	strh	r0, [r5, #0x20]
	mov	r2, #0x78
	strh	r2, [r5, #0x22]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x2e]
	add	r0, r5, #0
	add	r0, r0, #0x36
	add	r1, r5, #0
	add	r1, r1, #0x38
	lsl	r2, r2, #0x8
	bl	StorePointerInVars
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0x3a]
	ldrh	r2, [r5, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r3, .L152+0x4
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L152+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	ldr	r0, .L152+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L153:
	.align	2, 0
.L152:
	.word	gBattleAnimArgs
	.word	0x3ff
	.word	-0x400
	.word	AnimSuperpowerRock_Step1
.Lfe24:
	.size	 AnimSuperpowerRock,.Lfe24-AnimSuperpowerRock
	.align	2, 0
	.type	 AnimSuperpowerRock_Step1,function
	.thumb_func
AnimSuperpowerRock_Step1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r7, r1]
	cmp	r0, #0
	beq	.L155	@cond_branch
	mov	r2, #0x36
	ldrsh	r0, [r7, r2]
	mov	r2, #0x38
	ldrsh	r1, [r7, r2]
	bl	LoadPointerFromVars
	add	r4, r0, #0
	mov	r1, #0x3a
	ldrsh	r0, [r7, r1]
	sub	r4, r4, r0
	add	r0, r7, #0
	add	r0, r0, #0x36
	add	r1, r7, #0
	add	r1, r1, #0x38
	add	r2, r4, #0
	bl	StorePointerInVars
	asr	r4, r4, #0x8
	strh	r4, [r7, #0x22]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x8
	neg	r0, r0
	cmp	r4, r0
	bge	.L156	@cond_branch
	add	r0, r7, #0
	bl	DestroyAnimSprite
	b	.L158
.L156:
	ldrh	r0, [r7, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r7, #0x2e]
	b	.L158
.L155:
	ldr	r4, .L159
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r2, .L159+0x4
	mov	r8, r2
	ldrb	r0, [r2]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	sub	r4, r4, r6
	strh	r4, [r7, #0x2e]
	lsr	r0, r0, #0x18
	sub	r0, r0, r5
	strh	r0, [r7, #0x30]
	ldrh	r0, [r7, #0x20]
	lsl	r0, r0, #0x4
	strh	r0, [r7, #0x32]
	ldrh	r0, [r7, #0x22]
	lsl	r0, r0, #0x4
	strh	r0, [r7, #0x34]
	ldr	r0, .L159+0x8
	str	r0, [r7, #0x1c]
.L158:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L160:
	.align	2, 0
.L159:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	AnimSuperpowerRock_Step2
.Lfe25:
	.size	 AnimSuperpowerRock_Step1,.Lfe25-AnimSuperpowerRock_Step1
	.align	2, 0
	.type	 AnimSuperpowerRock_Step2,function
	.thumb_func
AnimSuperpowerRock_Step2:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x30]
	ldrh	r3, [r2, #0x34]
	add	r1, r1, r3
	strh	r1, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r3, r1, #0x14
	strh	r3, [r2, #0x22]
	add	r0, r0, #0x8
	lsl	r0, r0, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.L163	@cond_branch
	add	r1, r3, #0
	mov	r0, #0x8
	neg	r0, r0
	cmp	r1, r0
	blt	.L163	@cond_branch
	cmp	r1, #0x78
	ble	.L162	@cond_branch
.L163:
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L162:
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 AnimSuperpowerRock_Step2,.Lfe26-AnimSuperpowerRock_Step2
	.align	2, 0
	.type	 AnimSuperpowerFireball,function
	.thumb_func
AnimSuperpowerFireball:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L172
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L165	@cond_branch
	ldr	r4, .L172+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r0, .L172+0x8
	ldrb	r4, [r0]
	ldr	r0, .L172+0xc
	b	.L170
.L173:
	.align	2, 0
.L172:
	.word	gBattleAnimArgs
	.word	gBattlerAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
.L165:
	ldr	r0, .L174
	ldrb	r4, [r0]
	ldr	r0, .L174+0x4
.L170:
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L167	@cond_branch
	ldrb	r2, [r5, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x47
	b	.L171
.L175:
	.align	2, 0
.L174:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L167:
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L168	@cond_branch
	ldrb	r2, [r5, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x18
	orr	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x57
.L171:
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
.L168:
	mov	r0, #0x10
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x30]
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	add	r0, r4, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L176
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L176+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L177:
	.align	2, 0
.L176:
	.word	DestroyAnimSprite
	.word	sub_80A6F98
.Lfe27:
	.size	 AnimSuperpowerFireball,.Lfe27-AnimSuperpowerFireball
	.align	2, 0
	.type	 AnimArmThrustHit_Step,function
	.thumb_func
AnimArmThrustHit_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L179	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L179:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 AnimArmThrustHit_Step,.Lfe28-AnimArmThrustHit_Step
	.align	2, 0
	.type	 AnimArmThrustHit,function
	.thumb_func
AnimArmThrustHit:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r4, .L183
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r1, .L183+0x4
	ldrh	r0, [r1, #0x6]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r1]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r5, #0x34]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r5, #0x36]
	ldr	r0, .L183+0x8
	ldrb	r6, [r0]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L181	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L181:
	mov	r0, #0x1
	and	r6, r6, r0
	cmp	r6, #0
	beq	.L182	@cond_branch
	ldrh	r0, [r5, #0x32]
	neg	r0, r0
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
.L182:
	ldrh	r1, [r5, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldrh	r0, [r5, #0x32]
	strh	r0, [r5, #0x24]
	ldrh	r0, [r5, #0x34]
	strh	r0, [r5, #0x26]
	ldr	r0, .L183+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L184:
	.align	2, 0
.L183:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gAnimMoveTurn
	.word	AnimArmThrustHit_Step
.Lfe29:
	.size	 AnimArmThrustHit,.Lfe29-AnimArmThrustHit
	.align	2, 0
	.globl	AnimRevengeScratch
	.type	 AnimRevengeScratch,function
	.thumb_func
AnimRevengeScratch:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L191
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L186	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	b	.L187
.L192:
	.align	2, 0
.L191:
	.word	gBattleAnimArgs
.L186:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
.L187:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L188	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAnim
	b	.L189
.L188:
	ldr	r0, .L193
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L189	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L189:
	ldr	r0, .L193+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L193+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L194:
	.align	2, 0
.L193:
	.word	gBattleAnimAttacker
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe30:
	.size	 AnimRevengeScratch,.Lfe30-AnimRevengeScratch
	.align	2, 0
	.type	 AnimFocusPunchFist,function
	.thumb_func
AnimFocusPunchFist:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L196	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x28
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x2
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	ble	.L196	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L196:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 AnimFocusPunchFist,.Lfe31-AnimFocusPunchFist
	.align	2, 0
	.globl	AnimTask_MoveSkyUppercutBg
	.type	 AnimTask_MoveSkyUppercutBg,function
	.thumb_func
AnimTask_MoveSkyUppercutBg:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L211
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L201	@cond_branch
	cmp	r0, #0x1
	bgt	.L204	@cond_branch
	cmp	r0, #0
	bne	.L204	@cond_branch
	mov	r0, #0x0
	bl	sub_80A6DAC
	ldr	r0, .L211+0x4
	ldrh	r0, [r0]
	strh	r0, [r4, #0x18]
	b	.L210
.L212:
	.align	2, 0
.L211:
	.word	gTasks
	.word	gBattleAnimArgs
.L201:
	ldrh	r0, [r4, #0x18]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x18]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L199	@cond_branch
.L210:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L199
.L204:
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r1, [r4, #0x1a]
	add	r0, r0, r1
	strh	r0, [r4, #0x1a]
.L199:
	mov	r2, #0xb0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	strh	r0, [r4, #0x1c]
	ldr	r0, .L213
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L207	@cond_branch
	ldr	r1, .L213+0x4
	ldrh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r1]
	add	r0, r0, r2
	strh	r0, [r1]
	add	r7, r1, #0
	b	.L208
.L214:
	.align	2, 0
.L213:
	.word	gBattleAnimTarget
	.word	gBattle_BG3_X
.L207:
	ldr	r2, .L215
	ldrh	r1, [r4, #0x1a]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2]
	sub	r0, r0, r1
	strh	r0, [r2]
	add	r7, r2, #0
.L208:
	ldr	r3, .L215+0x4
	ldrh	r2, [r4, #0x1c]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r3]
	add	r0, r0, r1
	strh	r0, [r3]
	mov	r0, #0xff
	ldrb	r1, [r4, #0x1a]
	mov	r5, #0x0
	strh	r1, [r4, #0x1a]
	and	r0, r0, r2
	strh	r0, [r4, #0x1c]
	ldr	r0, .L215+0x8
	mov	r2, #0xe
	ldrsh	r1, [r0, r2]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L209	@cond_branch
	strh	r5, [r7]
	strh	r5, [r3]
	mov	r0, #0x1
	bl	sub_80A6DAC
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L209:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L216:
	.align	2, 0
.L215:
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattleAnimArgs
.Lfe32:
	.size	 AnimTask_MoveSkyUppercutBg,.Lfe32-AnimTask_MoveSkyUppercutBg
.text
	.align	2, 0

