@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sAnim_Lightning,object
sAnim_Lightning:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x8
	.space	1
	.short	0x30
	.byte	0x5
	.space	1
	.short	0x40
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Lightning,24
	.align	2, 0
	.type	 sAnims_Lightning,object
sAnims_Lightning:
	.word	sAnim_Lightning
	.size	 sAnims_Lightning,4
	.globl	gLightningSpriteTemplate
	.align	2, 0
	.type	 gLightningSpriteTemplate,object
	.size	 gLightningSpriteTemplate,24
gLightningSpriteTemplate:
	.short	0x2735
	.short	0x2735
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_Lightning
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimLightning
	.align	2, 0
	.type	 gUnknown_085956D8,object
gUnknown_085956D8:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf0
	.byte	0x3c
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085956D8,32
	.align	2, 0
	.type	 gUnknown_085956F8,object
gUnknown_085956F8:
	.word	gUnknown_085956D8
	.size	 gUnknown_085956F8,4
	.globl	gUnknown_085956FC
	.align	2, 0
	.type	 gUnknown_085956FC,object
	.size	 gUnknown_085956FC,24
gUnknown_085956FC:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_085956F8
	.word	sub_810A214
	.align	2, 0
	.type	 gUnknown_08595714,object
gUnknown_08595714:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	0x30
	.byte	0x5
	.space	1
	.short	0x40
	.byte	0x5
	.space	1
	.short	0x50
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08595714,28
	.align	2, 0
	.type	 gUnknown_08595730,object
gUnknown_08595730:
	.word	gUnknown_08595714
	.size	 gUnknown_08595730,4
	.globl	gUnknown_08595734
	.align	2, 0
	.type	 gUnknown_08595734,object
	.size	 gUnknown_08595734,24
gUnknown_08595734:
	.short	0x275f
	.short	0x275f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gUnknown_08595730
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810A274
	.globl	gSparkElectricitySpriteTemplate
	.align	2, 0
	.type	 gSparkElectricitySpriteTemplate,object
	.size	 gSparkElectricitySpriteTemplate,24
gSparkElectricitySpriteTemplate:
	.short	0x271b
	.short	0x271b
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSparkElectricity
	.globl	gZapCannonBallSpriteTemplate
	.align	2, 0
	.type	 gZapCannonBallSpriteTemplate,object
	.size	 gZapCannonBallSpriteTemplate,24
gZapCannonBallSpriteTemplate:
	.short	0x27bb
	.short	0x27bb
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	TranslateAnimSpriteToTargetMonLocation
	.align	2, 0
	.type	 sAffineAnim_FlashingSpark,object
sAffineAnim_FlashingSpark:
	.short	0x0
	.short	0x0
	.byte	0x14
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sAffineAnim_FlashingSpark,16
	.globl	gAffineAnims_FlashingSpark
	.align	2, 0
	.type	 gAffineAnims_FlashingSpark,object
gAffineAnims_FlashingSpark:
	.word	sAffineAnim_FlashingSpark
	.size	 gAffineAnims_FlashingSpark,4
	.globl	gZapCannonSparkSpriteTemplate
	.align	2, 0
	.type	 gZapCannonSparkSpriteTemplate,object
	.size	 gZapCannonSparkSpriteTemplate,24
gZapCannonSparkSpriteTemplate:
	.short	0x271b
	.short	0x271b
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_FlashingSpark
	.word	AnimZapCannonSpark
	.align	2, 0
	.type	 sAnim_ThunderboltOrb,object
sAnim_ThunderboltOrb:
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0x6
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_ThunderboltOrb,16
	.globl	gAnims_ThunderboltOrb
	.align	2, 0
	.type	 gAnims_ThunderboltOrb,object
gAnims_ThunderboltOrb:
	.word	sAnim_ThunderboltOrb
	.size	 gAnims_ThunderboltOrb,4
	.align	2, 0
	.type	 sAffineAnim_ThunderboltOrb,object
sAffineAnim_ThunderboltOrb:
	.short	0xe8
	.short	0xe8
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sAffineAnim_ThunderboltOrb,32
	.align	2, 0
	.type	 sAffineAnims_ThunderboltOrb,object
sAffineAnims_ThunderboltOrb:
	.word	sAffineAnim_ThunderboltOrb
	.size	 sAffineAnims_ThunderboltOrb,4
	.globl	gThunderboltOrbSpriteTemplate
	.align	2, 0
	.type	 gThunderboltOrbSpriteTemplate,object
	.size	 gThunderboltOrbSpriteTemplate,24
gThunderboltOrbSpriteTemplate:
	.short	0x282a
	.short	0x282a
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gAnims_ThunderboltOrb
	.word	0x0
	.word	sAffineAnims_ThunderboltOrb
	.word	AnimThunderboltOrb
	.globl	gSparkElectricityFlashingSpriteTemplate
	.align	2, 0
	.type	 gSparkElectricityFlashingSpriteTemplate,object
	.size	 gSparkElectricityFlashingSpriteTemplate,24
gSparkElectricityFlashingSpriteTemplate:
	.short	0x271b
	.short	0x271b
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_FlashingSpark
	.word	AnimSparkElectricityFlashing
	.globl	gElectricitySpriteTemplate
	.align	2, 0
	.type	 gElectricitySpriteTemplate,object
	.size	 gElectricitySpriteTemplate,24
gElectricitySpriteTemplate:
	.short	0x271b
	.short	0x271b
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimElectricity
	.globl	gElectricBoltSegmentSpriteTemplate
	.align	2, 0
	.type	 gElectricBoltSegmentSpriteTemplate,object
	.size	 gElectricBoltSegmentSpriteTemplate,24
gElectricBoltSegmentSpriteTemplate:
	.short	0x2711
	.short	0x2711
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimElectricBoltSegment
	.globl	gThunderWaveSpriteTemplate
	.align	2, 0
	.type	 gThunderWaveSpriteTemplate,object
	.size	 gThunderWaveSpriteTemplate,24
gThunderWaveSpriteTemplate:
	.short	0x27bd
	.short	0x27bd
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimThunderWave
	.globl	gAnchorShotChainTemplate
	.align	2, 0
	.type	 gAnchorShotChainTemplate,object
	.size	 gAnchorShotChainTemplate,24
gAnchorShotChainTemplate:
	.short	0x2865
	.short	0x2865
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimThunderWave
	.type	 sElectricChargingParticleCoordOffsets,object
sElectricChargingParticleCoordOffsets:
	.byte	0x3a
	.byte	-0x3c
	.byte	-0x38
	.byte	-0x24
	.byte	0x8
	.byte	-0x38
	.byte	-0x10
	.byte	0x38
	.byte	0x3a
	.byte	-0xa
	.byte	-0x3a
	.byte	0xa
	.byte	0x30
	.byte	-0x12
	.byte	-0x8
	.byte	0x38
	.byte	0x10
	.byte	-0x38
	.byte	-0x3a
	.byte	-0x2a
	.byte	0x3a
	.byte	0x1e
	.byte	-0x30
	.byte	0x28
	.byte	0xc
	.byte	-0x30
	.byte	0x30
	.byte	-0xc
	.byte	-0x38
	.byte	0x12
	.byte	0x30
	.byte	0x30
	.size	 sElectricChargingParticleCoordOffsets,32
	.align	2, 0
	.type	 sAnim_ElectricChargingParticles_0,object
sAnim_ElectricChargingParticles_0:
	.short	0x3
	.byte	0x1
	.space	1
	.short	0x2
	.byte	0x1
	.space	1
	.short	0x1
	.byte	0x1
	.space	1
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ElectricChargingParticles_0,20
	.align	2, 0
	.type	 sAnim_ElectricChargingParticles_1,object
sAnim_ElectricChargingParticles_1:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x1
	.byte	0x5
	.space	1
	.short	0x2
	.byte	0x5
	.space	1
	.short	0x3
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ElectricChargingParticles_1,20
	.globl	gAnims_ElectricChargingParticles
	.align	2, 0
	.type	 gAnims_ElectricChargingParticles,object
gAnims_ElectricChargingParticles:
	.word	sAnim_ElectricChargingParticles_0
	.word	sAnim_ElectricChargingParticles_1
	.size	 gAnims_ElectricChargingParticles,8
	.globl	gElectricChargingParticlesSpriteTemplate
	.align	2, 0
	.type	 gElectricChargingParticlesSpriteTemplate,object
	.size	 gElectricChargingParticlesSpriteTemplate,24
gElectricChargingParticlesSpriteTemplate:
	.short	0x27e3
	.short	0x27e3
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_ElectricChargingParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gLightOfRuinGrayChargeTemplate
	.align	2, 0
	.type	 gLightOfRuinGrayChargeTemplate,object
	.size	 gLightOfRuinGrayChargeTemplate,24
gLightOfRuinGrayChargeTemplate:
	.short	0x27e3
	.short	0x2719
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_ElectricChargingParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sAffineAnim_GrowingElectricOrb_0,object
sAffineAnim_GrowingElectricOrb_0:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x3c
	.space	2
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	-0x4
	.short	-0x4
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7ffd
	.short	0xa
	.space	4
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_GrowingElectricOrb_0,64
	.align	2, 0
	.type	 sAffineAnim_GrowingElectricOrb_1,object
sAffineAnim_GrowingElectricOrb_1:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x1e
	.space	2
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x4
	.short	-0x4
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7ffe
	.short	0x3
	.space	4
	.size	 sAffineAnim_GrowingElectricOrb_1,48
	.align	2, 0
	.type	 sAffineAnim_GrowingElectricOrb_2,object
sAffineAnim_GrowingElectricOrb_2:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x1e
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x1e
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_GrowingElectricOrb_2,32
	.align	2, 0
	.type	 sAffineAnim_GrowingElectricOrb_4,object
sAffineAnim_GrowingElectricOrb_4:
	.short	0x5
	.short	0x5
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x2
	.short	0x2
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x3
	.short	0x3
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x1
	.short	0x1
	.byte	0x0
	.byte	0x19
	.space	2
	.short	-0x4
	.short	-0x4
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x3
	.short	0x3
	.byte	0x0
	.byte	0x5
	.space	2
	.short	-0x5
	.short	-0x5
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_GrowingElectricOrb_4,72
	.globl	gAffineAnims_GrowingElectricOrb
	.align	2, 0
	.type	 gAffineAnims_GrowingElectricOrb,object
gAffineAnims_GrowingElectricOrb:
	.word	sAffineAnim_GrowingElectricOrb_0
	.word	sAffineAnim_GrowingElectricOrb_1
	.word	sAffineAnim_GrowingElectricOrb_2
	.size	 gAffineAnims_GrowingElectricOrb,12
	.globl	gAffineAnims_GrowingElectricOrb2
	.align	2, 0
	.type	 gAffineAnims_GrowingElectricOrb2,object
gAffineAnims_GrowingElectricOrb2:
	.word	sAffineAnim_GrowingElectricOrb_4
	.size	 gAffineAnims_GrowingElectricOrb2,4
	.globl	gGrowingChargeOrbSpriteTemplate
	.align	2, 0
	.type	 gGrowingChargeOrbSpriteTemplate,object
	.size	 gGrowingChargeOrbSpriteTemplate,24
gGrowingChargeOrbSpriteTemplate:
	.short	0x27e4
	.short	0x27e4
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_GrowingElectricOrb
	.word	AnimGrowingChargeOrb
	.globl	gGrowingChargeOrb2SpriteTemplate
	.align	2, 0
	.type	 gGrowingChargeOrb2SpriteTemplate,object
	.size	 gGrowingChargeOrb2SpriteTemplate,24
gGrowingChargeOrb2SpriteTemplate:
	.short	0x27e4
	.short	0x27e4
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_GrowingElectricOrb2
	.word	AnimGrowingChargeOrb
	.align	2, 0
	.type	 sAnim_ElectricPuff,object
sAnim_ElectricPuff:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ElectricPuff,20
	.globl	gAnims_ElectricPuff
	.align	2, 0
	.type	 gAnims_ElectricPuff,object
gAnims_ElectricPuff:
	.word	sAnim_ElectricPuff
	.size	 gAnims_ElectricPuff,4
	.globl	gElectricPuffSpriteTemplate
	.align	2, 0
	.type	 gElectricPuffSpriteTemplate,object
	.size	 gElectricPuffSpriteTemplate,24
gElectricPuffSpriteTemplate:
	.short	0x27e5
	.short	0x27e5
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_ElectricPuff
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimElectricPuff
	.globl	gVoltTackleOrbSlideSpriteTemplate
	.align	2, 0
	.type	 gVoltTackleOrbSlideSpriteTemplate,object
	.size	 gVoltTackleOrbSlideSpriteTemplate,24
gVoltTackleOrbSlideSpriteTemplate:
	.short	0x27e4
	.short	0x27e4
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_GrowingElectricOrb
	.word	AnimVoltTackleOrbSlide
	.align	2, 0
	.type	 sAnim_VoltTackleBolt_0,object
sAnim_VoltTackleBolt_0:
	.short	0x0
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_VoltTackleBolt_0,8
	.align	2, 0
	.type	 sAnim_VoltTackleBolt_1,object
sAnim_VoltTackleBolt_1:
	.short	0x2
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_VoltTackleBolt_1,8
	.align	2, 0
	.type	 sAnim_VoltTackleBolt_2,object
sAnim_VoltTackleBolt_2:
	.short	0x4
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_VoltTackleBolt_2,8
	.align	2, 0
	.type	 sAnim_VoltTackleBolt_3,object
sAnim_VoltTackleBolt_3:
	.short	0x6
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_VoltTackleBolt_3,8
	.align	2, 0
	.type	 sAnims_VoltTackleBolt,object
sAnims_VoltTackleBolt:
	.word	sAnim_VoltTackleBolt_0
	.word	sAnim_VoltTackleBolt_1
	.word	sAnim_VoltTackleBolt_2
	.word	sAnim_VoltTackleBolt_3
	.size	 sAnims_VoltTackleBolt,16
	.align	2, 0
	.type	 sAffineAnim_VoltTackleBolt,object
sAffineAnim_VoltTackleBolt:
	.short	0x100
	.short	0x100
	.byte	0x40
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_VoltTackleBolt,16
	.align	2, 0
	.type	 sAffineAnims_VoltTackleBolt,object
sAffineAnims_VoltTackleBolt:
	.word	sAffineAnim_VoltTackleBolt
	.size	 sAffineAnims_VoltTackleBolt,4
	.globl	gVoltTackleBoltSpriteTemplate
	.align	2, 0
	.type	 gVoltTackleBoltSpriteTemplate,object
	.size	 gVoltTackleBoltSpriteTemplate,24
gVoltTackleBoltSpriteTemplate:
	.short	0x2711
	.short	0x2711
	.word	gOamData_AffineDouble_ObjNormal_8x16
	.word	sAnims_VoltTackleBolt
	.word	0x0
	.word	sAffineAnims_VoltTackleBolt
	.word	AnimVoltTackleBolt
	.globl	gGrowingShockWaveOrbSpriteTemplate
	.align	2, 0
	.type	 gGrowingShockWaveOrbSpriteTemplate,object
	.size	 gGrowingShockWaveOrbSpriteTemplate,24
gGrowingShockWaveOrbSpriteTemplate:
	.short	0x27e4
	.short	0x27e4
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_GrowingElectricOrb
	.word	AnimGrowingShockWaveOrb
	.globl	gShockWaveProgressingBoltSpriteTemplate
	.align	2, 0
	.type	 gShockWaveProgressingBoltSpriteTemplate,object
	.size	 gShockWaveProgressingBoltSpriteTemplate,24
gShockWaveProgressingBoltSpriteTemplate:
	.short	0x2711
	.short	0x2711
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimShockWaveProgressingBolt
	.globl	gFlashCannonGrayChargeTemplate
	.align	2, 0
	.type	 gFlashCannonGrayChargeTemplate,object
	.size	 gFlashCannonGrayChargeTemplate,24
gFlashCannonGrayChargeTemplate:
	.short	0x27e4
	.short	0x279f
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_GrowingElectricOrb
	.word	AnimGrowingChargeOrb
	.align	2, 0
	.type	 sSpriteAffineAnim_JudgmentBall,object
sSpriteAffineAnim_JudgmentBall:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x78
	.space	2
	.short	0x18
	.short	0x18
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0xa
	.space	2
	.short	-0x10
	.short	-0x10
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x7fff
	.space	6
	.size	 sSpriteAffineAnim_JudgmentBall,56
	.align	2, 0
	.type	 sSpriteAffineAnimTable_JudgmentBall,object
sSpriteAffineAnimTable_JudgmentBall:
	.word	sSpriteAffineAnim_JudgmentBall
	.size	 sSpriteAffineAnimTable_JudgmentBall,4
	.globl	gJudgmentBlackChargeTemplate
	.align	2, 0
	.type	 gJudgmentBlackChargeTemplate,object
	.size	 gJudgmentBlackChargeTemplate,24
gJudgmentBlackChargeTemplate:
	.short	0x27e4
	.short	0x279f
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sSpriteAffineAnimTable_JudgmentBall
	.word	AnimGrowingChargeOrb
	.globl	gSeedFlareGreenChargeTemplate
	.align	2, 0
	.type	 gSeedFlareGreenChargeTemplate,object
	.size	 gSeedFlareGreenChargeTemplate,24
gSeedFlareGreenChargeTemplate:
	.short	0x27e4
	.short	0x274f
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_GrowingElectricOrb
	.word	AnimGrowingChargeOrb
.text
	.align	2, 0
	.type	 AnimLightning,function
	.thumb_func
AnimLightning:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L5
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r0, .L5+0x4
	ldrh	r1, [r4, #0x20]
	ldrh	r2, [r0]
	sub	r1, r1, r2
	strh	r1, [r4, #0x20]
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L3:
	ldr	r1, .L7
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	add	r0, r1, #0
.L4:
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L7+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gBattleAnimArgs
	.word	AnimLightning_Step
.Lfe1:
	.size	 AnimLightning,.Lfe1-AnimLightning
	.align	2, 0
	.type	 AnimLightning_Step,function
	.thumb_func
AnimLightning_Step:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L10	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L10:
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 AnimLightning_Step,.Lfe2-AnimLightning_Step
	.align	2, 0
	.type	 sub_810A214,function
	.thumb_func
sub_810A214:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L14
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L12	@cond_branch
	ldr	r0, .L14+0x4
	ldrh	r1, [r4, #0x20]
	ldrh	r0, [r0]
	sub	r1, r1, r0
	strh	r1, [r4, #0x20]
	b	.L13
.L15:
	.align	2, 0
.L14:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L12:
	ldr	r0, .L16
	ldrh	r0, [r0]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
.L13:
	ldr	r0, .L16+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gBattleAnimArgs
	.word	sub_810A258
.Lfe3:
	.size	 sub_810A214,.Lfe3-sub_810A214
	.align	2, 0
	.type	 sub_810A258,function
	.thumb_func
sub_810A258:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L19	@cond_branch
	add	r0, r2, #0
	bl	DestroySpriteAndMatrix
.L19:
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 sub_810A258,.Lfe4-sub_810A258
	.align	2, 0
	.type	 sub_810A274,function
	.thumb_func
sub_810A274:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L23
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r0, .L23+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L21	@cond_branch
	ldr	r2, .L23+0x8
	ldrh	r0, [r5, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x22]
	ldrh	r1, [r2, #0x2]
	sub	r0, r0, r1
	strh	r0, [r5, #0x22]
	b	.L22
.L24:
	.align	2, 0
.L23:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L21:
	ldr	r0, .L25
	ldrh	r1, [r0]
	ldrh	r2, [r5, #0x20]
	add	r1, r1, r2
	strh	r1, [r5, #0x20]
	ldrh	r1, [r0, #0x2]
	ldrh	r2, [r5, #0x22]
	add	r1, r1, r2
	strh	r1, [r5, #0x22]
	add	r2, r0, #0
.L22:
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r5, #0x34]
	ldr	r1, .L25+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L25+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteInCircleOverDuration
.Lfe5:
	.size	 sub_810A274,.Lfe5-sub_810A274
	.align	2, 0
	.globl	AnimSparkElectricity
	.type	 AnimSparkElectricity,function
	.thumb_func
AnimSparkElectricity:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r0, .L45
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	beq	.L36	@cond_branch
	cmp	r0, #0x1
	bgt	.L39	@cond_branch
	cmp	r0, #0
	beq	.L29	@cond_branch
	b	.L36
.L46:
	.align	2, 0
.L45:
	.word	gBattleAnimArgs
.L39:
	cmp	r0, #0x2
	beq	.L32	@cond_branch
	cmp	r0, #0x3
	beq	.L35	@cond_branch
	b	.L36
.L29:
	ldr	r0, .L47
	b	.L43
.L48:
	.align	2, 0
.L47:
	.word	gBattleAnimAttacker
.L32:
	ldr	r4, .L49
	ldrb	r0, [r4]
	mov	r6, #0x2
	eor	r0, r0, r6
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L33	@cond_branch
	ldrb	r4, [r4]
	b	.L28
.L50:
	.align	2, 0
.L49:
	.word	gBattleAnimAttacker
.L33:
	ldrb	r0, [r4]
	add	r4, r6, #0
	eor	r4, r4, r0
	b	.L28
.L35:
	ldr	r0, .L51
	ldrb	r0, [r0]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L36	@cond_branch
	ldr	r0, .L51+0x4
	ldrb	r0, [r0]
	eor	r4, r4, r0
	b	.L28
.L52:
	.align	2, 0
.L51:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L36:
	ldr	r0, .L53
.L43:
	ldrb	r4, [r0]
.L28:
	ldr	r0, .L53+0x4
	mov	r2, #0xa
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L40	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r4, #0
	mov	r1, #0x1
	b	.L44
.L54:
	.align	2, 0
.L53:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L40:
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r4, #0
	mov	r1, #0x3
.L44:
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r7, .L55
	ldr	r6, .L55+0x4
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r2, #0x2
	ldrsh	r0, [r6, r2]
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	strh	r0, [r5, #0x24]
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	add	r0, r0, #0x40
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r2, #0x2
	ldrsh	r0, [r6, r2]
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	strh	r0, [r5, #0x26]
	ldrh	r1, [r6, #0xc]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L42	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x5]
.L42:
	ldrb	r2, [r5, #0x3]
	lsl	r2, r2, #0x1a
	lsr	r2, r2, #0x1b
	mov	r0, #0x4
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	ldr	r3, .L55+0x8
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	add	r1, r1, #0x40
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	ldrh	r1, [r1]
	strh	r1, [r2, #0x6]
	strh	r1, [r2]
	strh	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	neg	r0, r0
	strh	r0, [r2, #0x4]
	ldrh	r0, [r6, #0x6]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L55+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	gSineTable
	.word	gBattleAnimArgs
	.word	gOamMatrices
	.word	DestroyAnimSpriteAfterTimer
.Lfe6:
	.size	 AnimSparkElectricity,.Lfe6-AnimSparkElectricity
	.align	2, 0
	.globl	AnimZapCannonSpark
	.type	 AnimZapCannonSpark,function
	.thumb_func
AnimZapCannonSpark:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r5, .L58
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldr	r6, .L58+0x4
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x38]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r4, #0x3a]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x3c]
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	mov	r3, #0xc
	ldrsh	r0, [r5, r3]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r3, .L58+0x8
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L58+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	ldr	r1, .L58+0x10
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	0x3ff
	.word	-0x400
	.word	AnimZapCannonSpark_Step
.Lfe7:
	.size	 AnimZapCannonSpark,.Lfe7-AnimZapCannonSpark
	.align	2, 0
	.type	 AnimZapCannonSpark_Step,function
	.thumb_func
AnimZapCannonSpark_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L61	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3a]
	ldrh	r2, [r4, #0x3c]
	add	r0, r0, r2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x3c]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L63	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L63
.L61:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L63:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 AnimZapCannonSpark_Step,.Lfe8-AnimZapCannonSpark_Step
	.align	2, 0
	.type	 AnimThunderboltOrb_Step,function
	.thumb_func
AnimThunderboltOrb_Step:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x38]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L65	@cond_branch
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x36]
	strh	r0, [r3, #0x38]
.L65:
	ldrh	r0, [r3, #0x34]
	sub	r1, r0, #0x1
	strh	r1, [r3, #0x34]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L66	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L66:
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 AnimThunderboltOrb_Step,.Lfe9-AnimThunderboltOrb_Step
	.align	2, 0
	.type	 AnimThunderboltOrb,function
	.thumb_func
AnimThunderboltOrb:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L69	@cond_branch
	ldr	r0, .L70
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L68	@cond_branch
.L69:
	ldr	r1, .L70+0x4
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L68:
	ldr	r5, .L70
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L70+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r6, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x22]
	ldrh	r0, [r4]
	strh	r0, [r6, #0x34]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r6, #0x36]
	strh	r0, [r6, #0x38]
	ldr	r0, .L70+0x8
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimThunderboltOrb_Step
.Lfe10:
	.size	 AnimThunderboltOrb,.Lfe10-AnimThunderboltOrb
	.align	2, 0
	.globl	AnimSparkElectricityFlashing
	.type	 AnimSparkElectricityFlashing,function
	.thumb_func
AnimSparkElectricityFlashing:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r1, .L78
	ldrh	r0, [r1, #0x6]
	strh	r0, [r5, #0x2e]
	mov	r2, #0xe
	ldrsh	r0, [r1, r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L73	@cond_branch
	ldr	r0, .L78+0x4
	b	.L77
.L79:
	.align	2, 0
.L78:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L73:
	ldr	r0, .L80
.L77:
	ldrb	r6, [r0]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L76	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L75	@cond_branch
.L76:
	ldr	r1, .L80+0x4
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r1]
.L75:
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L80+0x4
	lsr	r0, r0, #0x18
	ldrh	r3, [r4]
	add	r0, r0, r3
	strh	r0, [r5, #0x20]
	add	r0, r6, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	ldrh	r1, [r4, #0xe]
	ldr	r0, .L80+0x8
	and	r0, r0, r1
	strh	r0, [r5, #0x36]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x38]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r5, #0x3a]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x3c]
	ldrh	r2, [r5, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r3, .L80+0xc
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L80+0x10
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	ldr	r1, .L80+0x14
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	0x7fff
	.word	0x3ff
	.word	-0x400
	.word	AnimSparkElectricityFlashing_Step
.Lfe11:
	.size	 AnimSparkElectricityFlashing,.Lfe11-AnimSparkElectricityFlashing
	.align	2, 0
	.type	 AnimSparkElectricityFlashing_Step,function
	.thumb_func
AnimSparkElectricityFlashing_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x3c]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x3c]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__modsi3
	cmp	r0, #0
	bne	.L83	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L83:
	ldrh	r0, [r4, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L84	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L84:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 AnimSparkElectricityFlashing_Step,.Lfe12-AnimSparkElectricityFlashing_Step
	.align	2, 0
	.type	 AnimElectricity,function
	.thumb_func
AnimElectricity:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L91
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	add	r1, r4, #0
	mov	r2, #0x0
	bl	InitSpritePosToAnimBattler
	cmp	r0, #0
	beq	.L85	@cond_branch
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	mov	r3, #0x6
	ldrsh	r0, [r5, r3]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r3, .L91+0x4
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L91+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	mov	r1, #0x6
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L87	@cond_branch
	ldrb	r0, [r4, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	b	.L90
.L92:
	.align	2, 0
.L91:
	.word	gBattleAnimArgs
	.word	0x3ff
	.word	-0x400
.L87:
	cmp	r0, #0x2
	bne	.L88	@cond_branch
	ldrb	r0, [r4, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x20
.L90:
	orr	r1, r1, r0
	strb	r1, [r4, #0x3]
.L88:
	ldr	r0, .L93
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r0, .L93+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L93+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
.L85:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe13:
	.size	 AnimElectricity,.Lfe13-AnimElectricity
	.align	2, 0
	.globl	AnimTask_ElectricBolt
	.type	 AnimTask_ElectricBolt,function
	.thumb_func
AnimTask_ElectricBolt:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r6, .L96
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	ldr	r1, .L96+0x4
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	lsl	r0, r0, #0x18
	ldr	r5, .L96+0x8
	lsr	r0, r0, #0x18
	ldrh	r1, [r5]
	add	r0, r0, r1
	strh	r0, [r4, #0x8]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r5, #0x2]
	add	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0xc]
	ldr	r0, .L96+0xc
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L97:
	.align	2, 0
.L96:
	.word	gBattleAnimTarget
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_ElectricBolt_Step
.Lfe14:
	.size	 AnimTask_ElectricBolt,.Lfe14-AnimTask_ElectricBolt
	.align	2, 0
	.type	 AnimTask_ElectricBolt_Step,function
	.thumb_func
AnimTask_ElectricBolt_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r5, #0x0
	mov	r7, #0x0
	ldr	r1, .L113
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r2, [r0, #0xc]
	str	r2, [sp]
	ldrh	r4, [r0, #0x8]
	ldrh	r6, [r0, #0xa]
	mov	r3, #0xc
	ldrsh	r0, [r0, r3]
	mov	sl, r1
	cmp	r0, #0
	bne	.L99	@cond_branch
	mov	r0, #0x0
	mov	r8, r0
	mov	r2, #0x1
	mov	r1, #0x10
	mov	ip, r1
	b	.L100
.L114:
	.align	2, 0
.L113:
	.word	gTasks
.L99:
	mov	r2, #0x10
	mov	ip, r2
	mov	r3, #0x8
	mov	r8, r3
	mov	r2, #0x4
.L100:
	mov	r0, r9
	lsl	r1, r0, #0x2
	add	r0, r1, r0
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	mov	r3, #0x1c
	ldrsh	r0, [r0, r3]
	mov	sl, r1
	cmp	r0, #0xa
	bhi	.L101	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L115
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L116:
	.align	2, 0
.L115:
	.word	.L108
	.align	2, 0
	.align	2, 0
.L108:
	.word	.L102
	.word	.L101
	.word	.L103
	.word	.L101
	.word	.L104
	.word	.L101
	.word	.L105
	.word	.L101
	.word	.L106
	.word	.L101
	.word	.L107
.L102:
	ldr	r0, .L117
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r6, #0x10
	asr	r2, r2, #0x10
	mov	r4, ip
	lsl	r3, r4, #0x10
	b	.L111
.L118:
	.align	2, 0
.L117:
	.word	gElectricBoltSegmentSpriteTemplate
.L103:
	mov	r0, ip
	lsl	r3, r0, #0x11
	mov	r1, r8
	add	r0, r1, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L119
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r6, #0x10
	asr	r2, r2, #0x10
	b	.L111
.L120:
	.align	2, 0
.L119:
	.word	gElectricBoltSegmentSpriteTemplate
.L104:
	mov	r3, ip
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	b	.L112
.L105:
	mov	r0, ip
	lsl	r3, r0, #0x12
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	add	r0, r0, r8
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L121
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r6, #0x10
	asr	r2, r2, #0x10
	b	.L111
.L122:
	.align	2, 0
.L121:
	.word	gElectricBoltSegmentSpriteTemplate
.L106:
	mov	r1, ip
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	lsl	r3, r0, #0x2
	add	r3, r3, r0
.L112:
	ldr	r0, .L123
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r6, #0x10
	asr	r2, r2, #0x10
	lsl	r3, r3, #0x10
.L111:
	asr	r3, r3, #0x10
	add	r2, r2, r3
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	b	.L101
.L124:
	.align	2, 0
.L123:
	.word	gElectricBoltSegmentSpriteTemplate
.L107:
	mov	r0, r9
	bl	DestroyAnimVisualTask
	b	.L98
.L101:
	cmp	r7, #0
	beq	.L110	@cond_branch
	ldr	r4, .L125
	lsl	r3, r5, #0x4
	add	r3, r3, r5
	lsl	r3, r3, #0x2
	add	r0, r3, r4
	ldrh	r5, [r0, #0x4]
	lsl	r2, r5, #0x16
	lsr	r2, r2, #0x16
	add	r2, r2, r8
	ldr	r6, .L125+0x4
	add	r1, r6, #0
	and	r2, r2, r1
	ldr	r1, .L125+0x8
	and	r1, r1, r5
	orr	r1, r1, r2
	strh	r1, [r0, #0x4]
	mov	r1, sp
	ldrh	r1, [r1]
	strh	r1, [r0, #0x2e]
	add	r4, r4, #0x1c
	add	r3, r3, r4
	ldr	r1, [r3]
	bl	_call_via_r1
.L110:
	ldr	r0, .L125+0xc
	mov	r1, sl
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
.L98:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	gTasks
.Lfe15:
	.size	 AnimTask_ElectricBolt_Step,.Lfe15-AnimTask_ElectricBolt_Step
	.align	2, 0
	.type	 AnimElectricBoltSegment,function
	.thumb_func
AnimElectricBoltSegment:
	push	{lr}
	add	r3, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L128	@cond_branch
	ldrb	r1, [r3, #0x1]
	mov	r2, #0x3f
	add	r0, r2, #0
	and	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r3, #0x1]
	ldrb	r0, [r3, #0x3]
	and	r2, r2, r0
	strb	r2, [r3, #0x3]
	b	.L129
.L128:
	ldrb	r2, [r3, #0x1]
	mov	r1, #0x3f
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0x1]
	ldrb	r0, [r3, #0x3]
	and	r1, r1, r0
	mov	r0, #0x40
	orr	r1, r1, r0
	strb	r1, [r3, #0x3]
.L129:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	bne	.L130	@cond_branch
	add	r0, r3, #0
	bl	DestroySprite
.L130:
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 AnimElectricBoltSegment,.Lfe16-AnimElectricBoltSegment
	.align	2, 0
	.globl	AnimThunderWave
	.type	 AnimThunderWave,function
	.thumb_func
AnimThunderWave:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldr	r1, .L135
	ldrh	r0, [r1]
	ldrh	r3, [r6, #0x20]
	add	r2, r0, r3
	strh	r2, [r6, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r7, [r6, #0x22]
	add	r0, r0, r7
	strh	r0, [r6, #0x22]
	ldr	r0, .L135+0x4
	ldrh	r0, [r0]
	cmp	r0, #0x56
	bne	.L132	@cond_branch
	ldr	r0, .L135+0x8
	add	r1, r2, #0
	add	r1, r1, #0x20
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r3, #0x22
	ldrsh	r2, [r6, r3]
	b	.L134
.L136:
	.align	2, 0
.L135:
	.word	gBattleAnimArgs
	.word	gAnimMoveIndex
	.word	gThunderWaveSpriteTemplate
.L132:
	ldr	r0, .L137
	add	r1, r2, #0
	add	r1, r1, #0x20
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r7, #0x22
	ldrsh	r2, [r6, r7]
.L134:
	add	r3, r6, #0
	add	r3, r3, #0x43
	ldrb	r3, [r3]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L137+0x4
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r5, r2, r3
	ldrh	r4, [r5, #0x4]
	lsl	r1, r4, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x8
	ldr	r7, .L137+0x8
	add	r0, r7, #0
	and	r1, r1, r0
	ldr	r0, .L137+0xc
	and	r0, r0, r4
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	ldr	r1, .L137+0x10
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	add	r3, r3, #0x1c
	add	r2, r2, r3
	ldr	r0, .L137+0x14
	str	r0, [r2]
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L138:
	.align	2, 0
.L137:
	.word	gAnchorShotChainTemplate
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	gAnimVisualTaskCount
	.word	AnimThunderWave_Step
.Lfe17:
	.size	 AnimThunderWave,.Lfe17-AnimThunderWave
	.align	2, 0
	.type	 AnimThunderWave_Step,function
	.thumb_func
AnimThunderWave_Step:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L140	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x2e]
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
.L140:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L141	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L141:
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 AnimThunderWave_Step,.Lfe18-AnimThunderWave_Step
	.align	2, 0
	.globl	AnimTask_ElectricChargingParticles
	.type	 AnimTask_ElectricChargingParticles,function
	.thumb_func
AnimTask_ElectricChargingParticles:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L146
	add	r5, r1, r0
	ldr	r0, .L146+0x4
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L143	@cond_branch
	ldr	r4, .L146+0x8
	b	.L145
.L147:
	.align	2, 0
.L146:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L143:
	ldr	r4, .L148
.L145:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x24]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x26]
	ldr	r2, .L148+0x4
	ldrh	r0, [r2, #0x2]
	mov	r1, #0x0
	strh	r0, [r5, #0x14]
	strh	r1, [r5, #0x16]
	strh	r1, [r5, #0x18]
	strh	r1, [r5, #0x1a]
	strh	r1, [r5, #0x1c]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r5, #0x1e]
	strh	r1, [r5, #0x20]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r5, #0x22]
	ldr	r0, .L148+0x8
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L149:
	.align	2, 0
.L148:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimTask_ElectricChargingParticles_Step
.Lfe19:
	.size	 AnimTask_ElectricChargingParticles,.Lfe19-AnimTask_ElectricChargingParticles
	.align	2, 0
	.type	 AnimTask_ElectricChargingParticles_Step,function
	.thumb_func
AnimTask_ElectricChargingParticles_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L163
	add	r5, r0, r1
	mov	r1, #0x14
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.LCB1665
	b	.L151	@long jump
.LCB1665:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x22
	ldrsh	r1, [r5, r2]
	cmp	r0, r1
	bgt	.LCB1677
	b	.L160	@long jump
.LCB1677:
	mov	r0, #0x0
	strh	r0, [r5, #0x20]
	ldr	r0, .L163+0x4
	ldrh	r1, [r0]
	mov	r0, #0xd7
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L154	@cond_branch
	mov	r0, #0xb5
	lsl	r0, r0, #0x2
	cmp	r1, r0
	bne	.L153	@cond_branch
.L154:
	ldr	r0, .L163+0x8
	mov	r3, #0x24
	ldrsh	r1, [r5, r3]
	b	.L162
.L164:
	.align	2, 0
.L163:
	.word	gTasks
	.word	gAnimMoveIndex
	.word	gLightOfRuinGrayChargeTemplate
.L153:
	ldr	r0, .L165
	mov	r2, #0x24
	ldrsh	r1, [r5, r2]
.L162:
	mov	r3, #0x26
	ldrsh	r2, [r5, r3]
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L160	@cond_branch
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L165+0x4
	add	r4, r4, r0
	ldr	r1, .L165+0x8
	mov	r2, #0x1a
	ldrsh	r0, [r5, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r3, #0x0
	ldrsb	r3, [r0, r3]
	ldrh	r0, [r4, #0x20]
	add	r3, r3, r0
	mov	r7, #0x0
	strh	r3, [r4, #0x20]
	mov	r2, #0x1a
	ldrsh	r0, [r5, r2]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsb	r2, [r0, r2]
	ldrh	r0, [r4, #0x22]
	add	r2, r2, r0
	strh	r2, [r4, #0x22]
	mov	r1, #0x18
	ldrsh	r0, [r5, r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	mov	r0, #0x28
	sub	r0, r0, r1
	strh	r0, [r4, #0x2e]
	strh	r3, [r4, #0x30]
	ldrh	r0, [r5, #0x24]
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	ldrh	r0, [r5, #0x26]
	strh	r0, [r4, #0x36]
	strh	r6, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L165+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L165+0x10
	str	r0, [r4, #0x1c]
	ldrh	r0, [r5, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	ble	.L157	@cond_branch
	strh	r7, [r5, #0x1a]
.L157:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x1e
	ldrsh	r1, [r5, r2]
	cmp	r0, r1
	blt	.L158	@cond_branch
	strh	r7, [r5, #0x1c]
	ldrh	r1, [r5, #0x18]
	mov	r3, #0x18
	ldrsh	r0, [r5, r3]
	cmp	r0, #0x5
	bgt	.L158	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r5, #0x18]
.L158:
	ldrh	r0, [r5, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x16]
	ldrh	r0, [r5, #0x14]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x14]
	b	.L160
.L166:
	.align	2, 0
.L165:
	.word	gElectricChargingParticlesSpriteTemplate
	.word	gSprites
	.word	sElectricChargingParticleCoordOffsets
	.word	AnimElectricChargingParticles
	.word	RunStoredCallbackWhenAnimEnds
.L151:
	mov	r1, #0x16
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L160	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L160:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 AnimTask_ElectricChargingParticles_Step,.Lfe20-AnimTask_ElectricChargingParticles_Step
	.align	2, 0
	.type	 AnimElectricChargingParticles_Step,function
	.thumb_func
AnimElectricChargingParticles_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L168	@cond_branch
	ldr	r2, .L169
	mov	r0, #0x38
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x16]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x16]
	add	r0, r4, #0
	bl	DestroySprite
.L168:
	pop	{r4}
	pop	{r0}
	bx	r0
.L170:
	.align	2, 0
.L169:
	.word	gTasks
.Lfe21:
	.size	 AnimElectricChargingParticles_Step,.Lfe21-AnimElectricChargingParticles_Step
	.align	2, 0
	.type	 AnimElectricChargingParticles,function
	.thumb_func
AnimElectricChargingParticles:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r0, .L172
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	AnimElectricChargingParticles_Step
.Lfe22:
	.size	 AnimElectricChargingParticles,.Lfe22-AnimElectricChargingParticles
	.align	2, 0
	.globl	AnimGrowingChargeOrb
	.type	 AnimGrowingChargeOrb,function
	.thumb_func
AnimGrowingChargeOrb:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L178
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L175	@cond_branch
	ldr	r4, .L178+0x4
	b	.L177
.L179:
	.align	2, 0
.L178:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L175:
	ldr	r4, .L180
.L177:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r1, .L180+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L180+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L181:
	.align	2, 0
.L180:
	.word	gBattleAnimTarget
	.word	DestroySpriteAndMatrix
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe23:
	.size	 AnimGrowingChargeOrb,.Lfe23-AnimGrowingChargeOrb
	.align	2, 0
	.globl	AnimElectricPuff
	.type	 AnimElectricPuff,function
	.thumb_func
AnimElectricPuff:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L186
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L183	@cond_branch
	ldr	r4, .L186+0x4
	b	.L185
.L187:
	.align	2, 0
.L186:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L183:
	ldr	r4, .L188
.L185:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r1, .L188+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r5, #0x24]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r5, #0x26]
	ldr	r1, .L188+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L188+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L189:
	.align	2, 0
.L188:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	RunStoredCallbackWhenAnimEnds
.Lfe24:
	.size	 AnimElectricPuff,.Lfe24-AnimElectricPuff
	.align	2, 0
	.type	 AnimVoltTackleOrbSlide,function
	.thumb_func
AnimVoltTackleOrbSlide:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r4, .L192
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x3a]
	mov	r0, #0x10
	strh	r0, [r5, #0x3c]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L191	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r5, r1]
	neg	r0, r0
	strh	r0, [r5, #0x3c]
.L191:
	ldr	r0, .L192+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L193:
	.align	2, 0
.L192:
	.word	gBattleAnimAttacker
	.word	AnimVoltTackleOrbSlide_Step
.Lfe25:
	.size	 AnimVoltTackleOrbSlide,.Lfe25-AnimVoltTackleOrbSlide
	.align	2, 0
	.type	 AnimVoltTackleOrbSlide_Step,function
	.thumb_func
AnimVoltTackleOrbSlide_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L196	@cond_branch
	cmp	r0, #0x1
	beq	.L198	@cond_branch
	b	.L195
.L196:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	ble	.L195	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L195
.L198:
	ldrh	r2, [r4, #0x3c]
	ldrh	r1, [r4, #0x20]
	add	r0, r2, r1
	strh	r0, [r4, #0x20]
	ldr	r3, .L202
	mov	r0, #0x3a
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x24]
	add	r2, r2, r1
	strh	r2, [r0, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x50
	lsl	r0, r0, #0x10
	mov	r1, #0xc8
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bls	.L195	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L195:
	pop	{r4}
	pop	{r0}
	bx	r0
.L203:
	.align	2, 0
.L202:
	.word	gSprites
.Lfe26:
	.size	 AnimVoltTackleOrbSlide_Step,.Lfe26-AnimVoltTackleOrbSlide_Step
	.align	2, 0
	.globl	AnimTask_VoltTackleAttackerReappear
	.type	 AnimTask_VoltTackleAttackerReappear,function
	.thumb_func
AnimTask_VoltTackleAttackerReappear:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	ldr	r1, .L222
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L209	@cond_branch
	cmp	r0, #0x1
	bgt	.L219	@cond_branch
	cmp	r0, #0
	beq	.L206	@cond_branch
	b	.L205
.L223:
	.align	2, 0
.L222:
	.word	gTasks
.L219:
	cmp	r0, #0x2
	beq	.L213	@cond_branch
	cmp	r0, #0x3
	bne	.LCB2190
	b	.L216	@long jump
.LCB2190:
	b	.L205
.L206:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	strh	r0, [r5, #0x26]
	ldr	r4, .L224
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x24]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L207	@cond_branch
	ldr	r0, .L224+0x4
	strh	r0, [r5, #0x24]
	mov	r0, #0x2
	b	.L220
.L225:
	.align	2, 0
.L224:
	.word	gBattleAnimAttacker
	.word	0xffe0
.L207:
	mov	r0, #0x20
	strh	r0, [r5, #0x24]
	ldr	r0, .L226
.L220:
	strh	r0, [r5, #0x22]
	ldr	r2, .L226+0x4
	mov	r0, #0x26
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r5, #0x24]
	strh	r1, [r0, #0x24]
	b	.L221
.L227:
	.align	2, 0
.L226:
	.word	0xfffe
	.word	gSprites
.L209:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L205	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0xa]
	ldr	r4, .L228
	mov	r1, #0x26
	ldrsh	r0, [r5, r1]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	add	r2, r2, #0x3e
	ldrb	r3, [r2]
	lsl	r0, r3, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r1, [r5, #0x24]
	mov	r2, #0x24
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L221	@cond_branch
	ldrh	r2, [r5, #0x22]
	add	r2, r1, r2
	strh	r2, [r5, #0x24]
	mov	r0, #0x26
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r2, [r0, #0x24]
	b	.L205
.L229:
	.align	2, 0
.L228:
	.word	gSprites
.L213:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L205	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0xa]
	ldr	r1, .L230
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	add	r2, r2, #0x3e
	ldrb	r3, [r2]
	lsl	r0, r3, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	bne	.L205	@cond_branch
.L221:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L205
.L231:
	.align	2, 0
.L230:
	.word	gSprites
.L216:
	ldr	r2, .L232
	mov	r0, #0x26
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
.L205:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L233:
	.align	2, 0
.L232:
	.word	gSprites
.Lfe27:
	.size	 AnimTask_VoltTackleAttackerReappear,.Lfe27-AnimTask_VoltTackleAttackerReappear
	.align	2, 0
	.globl	AnimTask_VoltTackleBolt
	.type	 AnimTask_VoltTackleBolt,function
	.thumb_func
AnimTask_VoltTackleBolt:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L261
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.LCB2414
	b	.L250	@long jump
.LCB2414:
	cmp	r0, #0x1
	bgt	.L258	@cond_branch
	cmp	r0, #0
	beq	.L236	@cond_branch
	b	.L235
.L262:
	.align	2, 0
.L261:
	.word	gTasks
.L258:
	cmp	r0, #0x2
	bne	.LCB2429
	b	.L254	@long jump
.LCB2429:
	b	.L235
.L236:
	ldr	r4, .L263
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L237	@cond_branch
	mov	r1, #0x1
.L237:
	mov	r6, #0x0
	strh	r1, [r5, #0xa]
	ldr	r0, .L263+0x4
	mov	r1, #0x0
	ldrsh	r2, [r0, r1]
	add	r3, r0, #0
	cmp	r2, #0
	beq	.L240	@cond_branch
	cmp	r2, #0x4
	beq	.L241	@cond_branch
	ldrh	r1, [r3]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L243	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0xe]
	ldr	r0, .L263+0x8
	b	.L260
.L264:
	.align	2, 0
.L263:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	0xfff0
.L240:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xe]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x12]
	mov	r2, #0xa
	ldrsh	r0, [r5, r2]
	lsl	r0, r0, #0x7
	add	r0, r0, #0x78
	strh	r0, [r5, #0x10]
	b	.L239
.L241:
	mov	r0, #0xa
	ldrsh	r1, [r5, r0]
	lsl	r1, r1, #0x7
	mov	r0, #0x78
	sub	r0, r0, r1
	strh	r0, [r5, #0xe]
	ldr	r4, .L265
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x12]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0xa
	ldrsh	r1, [r5, r2]
	lsl	r1, r1, #0x5
	sub	r0, r0, r1
	strh	r0, [r5, #0x10]
	b	.L239
.L266:
	.align	2, 0
.L265:
	.word	gBattleAnimTarget
.L243:
	ldr	r0, .L267
	strh	r0, [r5, #0xe]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
.L260:
	strh	r0, [r5, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L245	@cond_branch
	mov	r2, #0x0
	ldrsh	r0, [r3, r2]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	mov	r0, #0x50
	sub	r0, r0, r1
	strh	r0, [r5, #0x12]
	b	.L239
.L268:
	.align	2, 0
.L267:
	.word	0xfff0
.L245:
	mov	r0, #0x0
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, #0x28
	strh	r0, [r5, #0x12]
	ldrh	r1, [r5, #0xe]
	ldrh	r0, [r5, #0x10]
	strh	r0, [r5, #0xe]
	strh	r1, [r5, #0x10]
.L239:
	mov	r2, #0xe
	ldrsh	r1, [r5, r2]
	mov	r2, #0x10
	ldrsh	r0, [r5, r2]
	cmp	r1, r0
	bge	.L248	@cond_branch
	mov	r1, #0x0
	mov	r0, #0x1
	strh	r0, [r5, #0xa]
	strh	r1, [r5, #0x14]
	b	.L253
.L248:
	ldr	r0, .L269
	strh	r0, [r5, #0xa]
	mov	r0, #0x3
	strh	r0, [r5, #0x14]
	b	.L253
.L270:
	.align	2, 0
.L269:
	.word	0xffff
.L250:
	ldrh	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L235	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0xc]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_810B154
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L253	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_810B154
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L235	@cond_branch
.L253:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L235
.L254:
	mov	r1, #0x16
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L235	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L235:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 AnimTask_VoltTackleBolt,.Lfe28-AnimTask_VoltTackleBolt
	.align	2, 0
	.type	 sub_810B154,function
	.thumb_func
sub_810B154:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r0, .L280
	mov	r2, #0xe
	ldrsh	r1, [r4, r2]
	mov	r3, #0x12
	ldrsh	r2, [r4, r3]
	mov	r3, #0x23
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L272	@cond_branch
	ldr	r1, .L280+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r5, [r0, #0x3a]
	mov	r1, #0x7
	strh	r1, [r0, #0x3c]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
.L272:
	ldrh	r1, [r4, #0xa]
	ldrh	r5, [r4, #0x14]
	add	r0, r1, r5
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L273	@cond_branch
	mov	r0, #0x3
	strh	r0, [r4, #0x14]
.L273:
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x3
	ble	.L274	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x14]
.L274:
	mov	r3, #0xa
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x4
	ldrh	r5, [r4, #0xe]
	add	r2, r0, r5
	strh	r2, [r4, #0xe]
	lsl	r0, r1, #0x10
	asr	r3, r0, #0x10
	cmp	r3, #0x1
	bne	.L277	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x10
	ldrsh	r1, [r4, r5]
	cmp	r0, r1
	bge	.L276	@cond_branch
.L277:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r3, r0
	bne	.L275	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bgt	.L275	@cond_branch
.L276:
	mov	r0, #0x1
	b	.L279
.L281:
	.align	2, 0
.L280:
	.word	gVoltTackleBoltSpriteTemplate
	.word	gSprites
.L275:
	mov	r0, #0x0
.L279:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 sub_810B154,.Lfe29-sub_810B154
	.align	2, 0
	.type	 AnimVoltTackleBolt,function
	.thumb_func
AnimVoltTackleBolt:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L283	@cond_branch
	ldr	r3, .L284
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
.L283:
	pop	{r4}
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	gTasks
.Lfe30:
	.size	 AnimVoltTackleBolt,.Lfe30-AnimVoltTackleBolt
	.align	2, 0
	.globl	AnimGrowingShockWaveOrb
	.type	 AnimGrowingShockWaveOrb,function
	.thumb_func
AnimGrowingShockWaveOrb:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L288	@cond_branch
	cmp	r0, #0x1
	beq	.L289	@cond_branch
	b	.L287
.L288:
	ldr	r4, .L293
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L287
.L294:
	.align	2, 0
.L293:
	.word	gBattleAnimAttacker
.L289:
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L287	@cond_branch
	add	r0, r5, #0
	bl	DestroySpriteAndMatrix
.L287:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 AnimGrowingShockWaveOrb,.Lfe31-AnimGrowingShockWaveOrb
	.align	2, 0
	.globl	AnimTask_ShockWaveProgressingBolt
	.type	 AnimTask_ShockWaveProgressingBolt,function
	.thumb_func
AnimTask_ShockWaveProgressingBolt:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L321
	add	r5, r0, r1
	ldr	r0, .L321+0x4
	ldrb	r0, [r0]
	bl	GetAnimBattlerId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x4
	bls	.LCB2924
	b	.L296	@long jump
.LCB2924:
	lsl	r0, r0, #0x2
	ldr	r1, .L321+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L322:
	.align	2, 0
.L321:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	.L316
	.align	2, 0
	.align	2, 0
.L316:
	.word	.L297
	.word	.L298
	.word	.L304
	.word	.L311
	.word	.L313
.L297:
	ldr	r4, .L323
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x16]
	mov	r0, #0x4
	strh	r0, [r5, #0x18]
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x1c]
	mov	r2, #0x1c
	ldrsh	r0, [r5, r2]
	mov	r2, #0x14
	ldrsh	r1, [r5, r2]
	sub	r0, r0, r1
	mov	r1, #0x5
	bl	__divsi3
	strh	r0, [r5, #0x1a]
	mov	r0, #0x7
	strh	r0, [r5, #0x10]
	ldr	r0, .L323+0x4
	strh	r0, [r5, #0x12]
	mov	r0, #0xc
	strh	r0, [r5, #0x1e]
	sub	r0, r0, #0x4c
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x24]
	mov	r1, #0x22
	ldrsh	r0, [r5, r1]
	mov	r2, #0x20
	ldrsh	r1, [r5, r2]
	sub	r0, r0, r1
	mov	r1, #0x3
	bl	__divsi3
	strh	r0, [r5, #0x26]
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	b	.L318
.L324:
	.align	2, 0
.L323:
	.word	gBattleAnimAttacker
	.word	0xffff
.L298:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L299	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0xa]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_810B430
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L299	@cond_branch
	mov	r1, #0xc
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x5
	bne	.L301	@cond_branch
	mov	r0, #0x3
	b	.L319
.L301:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
.L319:
	strh	r0, [r5, #0x8]
.L299:
	ldrh	r1, [r5, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L296	@cond_branch
	b	.L320
.L304:
	ldrh	r1, [r5, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L305	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r5, #0x1e]
.L305:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L296	@cond_branch
	strh	r3, [r5, #0xa]
	ldrh	r1, [r5, #0xc]
	mov	r2, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L307	@cond_branch
	mov	r0, #0x4
	strh	r0, [r5, #0x16]
	mov	r0, #0x44
	strh	r0, [r5, #0x18]
	strh	r3, [r5, #0x10]
	strh	r2, [r5, #0x12]
	b	.L308
.L307:
	mov	r0, #0x44
	strh	r0, [r5, #0x16]
	mov	r0, #0x4
	strh	r0, [r5, #0x18]
	mov	r0, #0x7
	strh	r0, [r5, #0x10]
	ldr	r0, .L325
	strh	r0, [r5, #0x12]
.L308:
	mov	r1, #0x1e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L314	@cond_branch
	mov	r0, #0x4
	b	.L318
.L326:
	.align	2, 0
.L325:
	.word	0xffff
.L311:
	mov	r2, #0xe
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	bne	.L296	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L296
.L313:
	ldrh	r1, [r5, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L314	@cond_branch
.L320:
	sub	r0, r1, #0x1
	strh	r0, [r5, #0x1e]
	b	.L296
.L314:
	mov	r0, #0x1
.L318:
	strh	r0, [r5, #0x8]
.L296:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 AnimTask_ShockWaveProgressingBolt,.Lfe32-AnimTask_ShockWaveProgressingBolt
	.align	2, 0
	.type	 sub_810B430,function
	.thumb_func
sub_810B430:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r0, .L337
	mov	r2, #0x14
	ldrsh	r1, [r4, r2]
	mov	r3, #0x16
	ldrsh	r2, [r4, r3]
	mov	r3, #0x23
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L328	@cond_branch
	ldr	r1, .L337+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrh	r2, [r3, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	ldrh	r6, [r4, #0x10]
	add	r1, r1, r6
	ldr	r6, .L337+0x8
	add	r0, r6, #0
	and	r1, r1, r0
	ldr	r0, .L337+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0x10]
	add	r0, r0, r1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L329	@cond_branch
	mov	r0, #0x7
	strh	r0, [r4, #0x10]
.L329:
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x7
	ble	.L330	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
.L330:
	strh	r5, [r3, #0x3a]
	mov	r0, #0x3
	strh	r0, [r3, #0x3c]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
.L328:
	mov	r3, #0x10
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bne	.L331	@cond_branch
	mov	r5, #0x12
	ldrsh	r0, [r4, r5]
	cmp	r0, #0
	ble	.L331	@cond_branch
	ldrh	r1, [r4, #0x26]
	ldrh	r6, [r4, #0x24]
	add	r1, r1, r6
	strh	r1, [r4, #0x24]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x76
	bl	PlaySE12WithPanning
.L331:
	mov	r0, #0x12
	ldrsh	r3, [r4, r0]
	ldrh	r2, [r4, #0x16]
	cmp	r3, #0
	bge	.L334	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x18
	ldrsh	r1, [r4, r5]
	cmp	r0, r1
	ble	.L333	@cond_branch
.L334:
	cmp	r3, #0
	ble	.L332	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r6, #0x18
	ldrsh	r1, [r4, r6]
	cmp	r0, r1
	blt	.L332	@cond_branch
.L333:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x1a]
	ldrh	r1, [r4, #0x14]
	add	r0, r0, r1
	strh	r0, [r4, #0x14]
	mov	r0, #0x1
	b	.L336
.L338:
	.align	2, 0
.L337:
	.word	gShockWaveProgressingBoltSpriteTemplate
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L332:
	mov	r3, #0x12
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x3
	add	r0, r2, r0
	strh	r0, [r4, #0x16]
	mov	r0, #0x0
.L336:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 sub_810B430,.Lfe33-sub_810B430
	.align	2, 0
	.type	 AnimShockWaveProgressingBolt,function
	.thumb_func
AnimShockWaveProgressingBolt:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L340	@cond_branch
	ldr	r3, .L341
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L340:
	pop	{r4}
	pop	{r0}
	bx	r0
.L342:
	.align	2, 0
.L341:
	.word	gTasks
.Lfe34:
	.size	 AnimShockWaveProgressingBolt,.Lfe34-AnimShockWaveProgressingBolt
	.align	2, 0
	.globl	AnimTask_ShockWaveLightning
	.type	 AnimTask_ShockWaveLightning,function
	.thumb_func
AnimTask_ShockWaveLightning:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L360
	add	r4, r0, r1
	ldr	r0, .L360+0x4
	ldrb	r0, [r0]
	bl	GetAnimBattlerId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L350	@cond_branch
	cmp	r0, #0x1
	bgt	.L357	@cond_branch
	cmp	r0, #0
	beq	.L345	@cond_branch
	b	.L344
.L361:
	.align	2, 0
.L360:
	.word	gTasks
	.word	gBattleAnimArgs
.L357:
	cmp	r0, #0x2
	beq	.L353	@cond_branch
	b	.L344
.L345:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x20
	strh	r0, [r4, #0x26]
	strh	r0, [r4, #0x24]
	cmp	r0, #0x10
	ble	.L347	@cond_branch
	add	r2, r0, #0
.L348:
	add	r1, r2, #0
	sub	r1, r1, #0x20
	add	r2, r1, #0
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	bgt	.L348	@cond_branch
	strh	r1, [r4, #0x24]
.L347:
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	add	r0, r6, #0
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x20]
	b	.L359
.L350:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L344	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_810B614
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L344	@cond_branch
.L359:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L344
.L353:
	mov	r1, #0x1c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L344	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L344:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 AnimTask_ShockWaveLightning,.Lfe35-AnimTask_ShockWaveLightning
	.align	2, 0
	.type	 sub_810B614,function
	.thumb_func
sub_810B614:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r0, .L366
	mov	r2, #0x22
	ldrsh	r1, [r4, r2]
	mov	r3, #0x24
	ldrsh	r2, [r4, r3]
	ldrh	r3, [r4, #0x20]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x40
	beq	.L363	@cond_branch
	ldr	r3, .L366+0x4
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r3, #0
	add	r1, r1, #0x1c
	add	r1, r0, r1
	ldr	r2, .L366+0x8
	str	r2, [r1]
	add	r0, r0, r3
	strh	r5, [r0, #0x3a]
	mov	r1, #0xa
	strh	r1, [r0, #0x3c]
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
.L363:
	ldrh	r2, [r4, #0x24]
	mov	r0, #0x24
	ldrsh	r1, [r4, r0]
	mov	r3, #0x26
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	bge	.L364	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x20
	strh	r0, [r4, #0x24]
	mov	r0, #0x0
	b	.L365
.L367:
	.align	2, 0
.L366:
	.word	gLightningSpriteTemplate
	.word	gSprites
	.word	sub_810B684
.L364:
	mov	r0, #0x1
.L365:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 sub_810B614,.Lfe36-sub_810B614
	.align	2, 0
	.type	 sub_810B684,function
	.thumb_func
sub_810B684:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L369	@cond_branch
	ldr	r3, .L370
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L369:
	pop	{r4}
	pop	{r0}
	bx	r0
.L371:
	.align	2, 0
.L370:
	.word	gTasks
.Lfe37:
	.size	 sub_810B684,.Lfe37-sub_810B684
.text
	.align	2, 0

