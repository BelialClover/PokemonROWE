@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gEllipticalGustSpriteTemplate
	.section .rodata
	.align	2, 0
	.type	 gEllipticalGustSpriteTemplate,object
	.size	 gEllipticalGustSpriteTemplate,24
gEllipticalGustSpriteTemplate:
	.short	0x2719
	.short	0x2719
	.word	gOamData_AffineOff_ObjNormal_32x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimEllipticalGust
	.align	2, 0
	.type	 sAffineAnim_GustToTarget,object
sAffineAnim_GustToTarget:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0xa
	.short	0x0
	.byte	0x0
	.byte	0x18
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_GustToTarget,24
	.align	2, 0
	.type	 sAffineAnims_GustToTarget,object
sAffineAnims_GustToTarget:
	.word	sAffineAnim_GustToTarget
	.size	 sAffineAnims_GustToTarget,4
	.globl	gGustToTargetSpriteTemplate
	.align	2, 0
	.type	 gGustToTargetSpriteTemplate,object
	.size	 gGustToTargetSpriteTemplate,24
gGustToTargetSpriteTemplate:
	.short	0x2719
	.short	0x2719
	.word	gOamData_AffineNormal_ObjNormal_32x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_GustToTarget
	.word	AnimGustToTarget
	.align	2, 0
	.type	 sAffineAnim_AirWaveCrescent,object
sAffineAnim_AirWaveCrescent:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x0
	.byte	0x43
	.space	1
	.short	0x0
	.byte	0x83
	.space	1
	.short	0x0
	.byte	0xc3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAffineAnim_AirWaveCrescent,20
	.globl	gAffineAnims_AirWaveCrescent
	.align	2, 0
	.type	 gAffineAnims_AirWaveCrescent,object
gAffineAnims_AirWaveCrescent:
	.word	sAffineAnim_AirWaveCrescent
	.size	 gAffineAnims_AirWaveCrescent,4
	.globl	gAirWaveCrescentSpriteTemplate
	.align	2, 0
	.type	 gAirWaveCrescentSpriteTemplate,object
	.size	 gAirWaveCrescentSpriteTemplate,24
gAirWaveCrescentSpriteTemplate:
	.short	0x27aa
	.short	0x27aa
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	gAffineAnims_AirWaveCrescent
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimAirWaveCrescent
	.align	2, 0
	.type	 sAffineAnim_FlyBallUp,object
sAffineAnim_FlyBallUp:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x28
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	-0x20
	.byte	0x0
	.byte	0x5
	.space	2
	.short	-0x10
	.short	0x20
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlyBallUp,40
	.globl	gAffineAnims_FlyBallUp
	.align	2, 0
	.type	 gAffineAnims_FlyBallUp,object
gAffineAnims_FlyBallUp:
	.word	sAffineAnim_FlyBallUp
	.size	 gAffineAnims_FlyBallUp,4
	.align	2, 0
	.type	 sAffineAnim_FlyBallAttack_0,object
sAffineAnim_FlyBallAttack_0:
	.short	0x0
	.short	0x0
	.byte	0x32
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlyBallAttack_0,16
	.align	2, 0
	.type	 sAffineAnim_FlyBallAttack_1,object
sAffineAnim_FlyBallAttack_1:
	.short	0x0
	.short	0x0
	.byte	0xd8
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlyBallAttack_1,16
	.globl	gAffineAnims_FlyBallAttack
	.align	2, 0
	.type	 gAffineAnims_FlyBallAttack,object
gAffineAnims_FlyBallAttack:
	.word	sAffineAnim_FlyBallAttack_0
	.word	sAffineAnim_FlyBallAttack_1
	.size	 gAffineAnims_FlyBallAttack,8
	.globl	gFlyBallUpSpriteTemplate
	.align	2, 0
	.type	 gFlyBallUpSpriteTemplate,object
	.size	 gFlyBallUpSpriteTemplate,24
gFlyBallUpSpriteTemplate:
	.short	0x27ac
	.short	0x27ac
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_FlyBallUp
	.word	AnimFlyBallUp
	.globl	gFlyBallAttackSpriteTemplate
	.align	2, 0
	.type	 gFlyBallAttackSpriteTemplate,object
	.size	 gFlyBallAttackSpriteTemplate,24
gFlyBallAttackSpriteTemplate:
	.short	0x27ac
	.short	0x27ac
	.word	gOamData_AffineNormal_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_FlyBallAttack
	.word	AnimFlyBallAttack
	.align	2, 0
	.type	 sAnim_FallingFeather_0,object
sAnim_FallingFeather_0:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_FallingFeather_0,8
	.align	2, 0
	.type	 sAnim_FallingFeather_1,object
sAnim_FallingFeather_1:
	.short	0x10
	.byte	0x40
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_FallingFeather_1,8
	.align	2, 0
	.type	 sAnims_FallingFeather,object
sAnims_FallingFeather:
	.word	sAnim_FallingFeather_0
	.word	sAnim_FallingFeather_1
	.size	 sAnims_FallingFeather,8
	.globl	gFallingFeatherSpriteTemplate
	.align	2, 0
	.type	 gFallingFeatherSpriteTemplate,object
	.size	 gFallingFeatherSpriteTemplate,24
gFallingFeatherSpriteTemplate:
	.short	0x281e
	.short	0x281e
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sAnims_FallingFeather
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFallingFeather
	.globl	gUnknown_085963A0
	.align	2, 0
	.type	 gUnknown_085963A0,object
	.size	 gUnknown_085963A0,24
gUnknown_085963A0:
	.short	0x27ab
	.short	0x27ab
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810EA4C
	.align	2, 0
	.type	 sAnim_WhirlwindLines,object
sAnim_WhirlwindLines:
	.short	0x0
	.byte	0x1
	.space	1
	.short	0x8
	.byte	0x1
	.space	1
	.short	0x10
	.byte	0x1
	.space	1
	.short	0x8
	.byte	0x41
	.space	1
	.short	0x0
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_WhirlwindLines,24
	.align	2, 0
	.type	 sAnims_WhirlwindLines,object
sAnims_WhirlwindLines:
	.word	sAnim_WhirlwindLines
	.size	 sAnims_WhirlwindLines,4
	.globl	gWhirlwindLineSpriteTemplate
	.align	2, 0
	.type	 gWhirlwindLineSpriteTemplate,object
	.size	 gWhirlwindLineSpriteTemplate,24
gWhirlwindLineSpriteTemplate:
	.short	0x27b2
	.short	0x27b2
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	sAnims_WhirlwindLines
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWhirlwindLine
	.align	2, 0
	.type	 sAffineAnim_BounceBallShrink,object
sAffineAnim_BounceBallShrink:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x28
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	-0x20
	.byte	0x0
	.byte	0x5
	.space	2
	.short	-0x14
	.short	0x0
	.byte	0x0
	.byte	0x7
	.space	2
	.short	-0x14
	.short	-0x14
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_BounceBallShrink,48
	.align	2, 0
	.type	 sAffineAnims_BounceBallShrink,object
sAffineAnims_BounceBallShrink:
	.word	sAffineAnim_BounceBallShrink
	.size	 sAffineAnims_BounceBallShrink,4
	.globl	gBounceBallShrinkSpriteTemplate
	.align	2, 0
	.type	 gBounceBallShrinkSpriteTemplate,object
	.size	 gBounceBallShrinkSpriteTemplate,24
gBounceBallShrinkSpriteTemplate:
	.short	0x27ac
	.short	0x27ac
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_BounceBallShrink
	.word	AnimBounceBallShrink
	.align	2, 0
	.type	 sAffineAnim_BounceBallLand,object
sAffineAnim_BounceBallLand:
	.short	0xa0
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_BounceBallLand,16
	.align	2, 0
	.type	 sAffineAnims_BounceBallLand,object
sAffineAnims_BounceBallLand:
	.word	sAffineAnim_BounceBallLand
	.size	 sAffineAnims_BounceBallLand,4
	.globl	gBounceBallLandSpriteTemplate
	.align	2, 0
	.type	 gBounceBallLandSpriteTemplate,object
	.size	 gBounceBallLandSpriteTemplate,24
gBounceBallLandSpriteTemplate:
	.short	0x27ac
	.short	0x27ac
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_BounceBallLand
	.word	AnimBounceBallLand
	.align	2, 0
	.type	 sAffineAnim_DiveBall,object
sAffineAnim_DiveBall:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x28
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	-0x20
	.byte	0x0
	.byte	0x5
	.space	2
	.short	-0x10
	.short	0x20
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_DiveBall,40
	.align	2, 0
	.type	 sAffineAnims_DiveBall,object
sAffineAnims_DiveBall:
	.word	sAffineAnim_DiveBall
	.size	 sAffineAnims_DiveBall,4
	.globl	gDiveBallSpriteTemplate
	.align	2, 0
	.type	 gDiveBallSpriteTemplate,object
	.size	 gDiveBallSpriteTemplate,24
gDiveBallSpriteTemplate:
	.short	0x27ac
	.short	0x27ac
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_DiveBall
	.word	AnimDiveBall
	.align	2, 0
	.type	 gUnknown_085964A8,object
gUnknown_085964A8:
	.short	0x100
	.short	0x0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x20
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x0
	.short	-0x20
	.byte	0x0
	.byte	0xb
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085964A8,32
	.align	2, 0
	.type	 gUnknown_085964C8,object
gUnknown_085964C8:
	.word	gUnknown_085964A8
	.size	 gUnknown_085964C8,4
	.globl	gDiveWaterSplashSpriteTemplate
	.align	2, 0
	.type	 gDiveWaterSplashSpriteTemplate,object
	.size	 gDiveWaterSplashSpriteTemplate,24
gDiveWaterSplashSpriteTemplate:
	.short	0x2820
	.short	0x2820
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimDiveWaterSplash
	.globl	gSprayWaterDropletSpriteTemplate
	.align	2, 0
	.type	 gSprayWaterDropletSpriteTemplate,object
	.size	 gSprayWaterDropletSpriteTemplate,24
gSprayWaterDropletSpriteTemplate:
	.short	0x2821
	.short	0x2821
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSprayWaterDroplet
	.globl	gUnknown_085964FC
	.align	2, 0
	.type	 gUnknown_085964FC,object
	.size	 gUnknown_085964FC,24
gUnknown_085964FC:
	.short	0x27e4
	.short	0x27e4
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810F004
	.globl	gSkyAttackBirdSpriteTemplate
	.align	2, 0
	.type	 gSkyAttackBirdSpriteTemplate,object
	.size	 gSkyAttackBirdSpriteTemplate,24
gSkyAttackBirdSpriteTemplate:
	.short	0x282c
	.short	0x282c
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSkyAttackBird
.text
	.align	2, 0
	.type	 AnimEllipticalGust,function
	.thumb_func
AnimEllipticalGust:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x14
	strh	r0, [r4, #0x22]
	mov	r0, #0xbf
	strh	r0, [r4, #0x30]
	ldr	r1, .L3
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	AnimEllipticalGust_Step
.Lfe1:
	.size	 AnimEllipticalGust,.Lfe1-AnimEllipticalGust
	.align	2, 0
	.type	 AnimEllipticalGust_Step,function
	.thumb_func
AnimEllipticalGust_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x47
	bne	.L6	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L6:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 AnimEllipticalGust_Step,.Lfe2-AnimEllipticalGust_Step
	.align	2, 0
	.globl	AnimTask_AnimateGustTornadoPalette
	.type	 AnimTask_AnimateGustTornadoPalette,function
	.thumb_func
AnimTask_AnimateGustTornadoPalette:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L8
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldr	r1, .L8+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x8]
	ldrh	r0, [r1]
	strh	r0, [r4, #0xa]
	ldr	r0, .L8+0x8
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0xc]
	ldr	r0, .L8+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	0x2719
	.word	AnimTask_AnimateGustTornadoPalette_Step
.Lfe3:
	.size	 AnimTask_AnimateGustTornadoPalette,.Lfe3-AnimTask_AnimateGustTornadoPalette
	.align	2, 0
	.type	 AnimTask_AnimateGustTornadoPalette_Step,function
	.thumb_func
AnimTask_AnimateGustTornadoPalette_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r3, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r4, #0xa
	ldrsh	r1, [r3, r4]
	add	r7, r2, #0
	cmp	r0, r1
	bne	.L11	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x1c]
	ldrb	r0, [r3, #0xc]
	ldr	r2, .L18+0x4
	lsl	r0, r0, #0x4
	mov	r3, #0x84
	lsl	r3, r3, #0x1
	add	r1, r0, r3
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r6, [r1]
	mov	r4, #0x7
	mov	ip, r0
	ldr	r0, .L18+0x8
	add	r0, r0, ip
	lsl	r0, r0, #0x1
	add	r3, r0, r2
.L12:
	ldrh	r0, [r3]
	strh	r0, [r1]
	sub	r3, r3, #0x2
	sub	r1, r1, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bgt	.L12	@cond_branch
	ldr	r0, .L18+0xc
	add	r0, r0, ip
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	strh	r6, [r0]
.L11:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	ldrh	r1, [r0, #0x8]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bne	.L17	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L17:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gTasks
	.word	gPlttBufferFaded
	.word	0x107
	.word	0x101
.Lfe4:
	.size	 AnimTask_AnimateGustTornadoPalette_Step,.Lfe4-AnimTask_AnimateGustTornadoPalette_Step
	.align	2, 0
	.type	 AnimGustToTarget,function
	.thumb_func
AnimGustToTarget:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L22
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L21	@cond_branch
	ldr	r1, .L22+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L21:
	ldr	r4, .L22+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x2e]
	ldrh	r0, [r6, #0x20]
	strh	r0, [r6, #0x30]
	ldr	r5, .L22+0x8
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrh	r0, [r6, #0x22]
	strh	r0, [r6, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x6]
	add	r0, r0, r4
	strh	r0, [r6, #0x36]
	add	r0, r6, #0
	bl	InitAnimLinearTranslation
	ldr	r0, .L22+0xc
	str	r0, [r6, #0x1c]
	ldr	r1, .L22+0x10
	add	r0, r6, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	RunStoredCallbackWhenAffineAnimEnds
	.word	AnimGustToTarget_Step
.Lfe5:
	.size	 AnimGustToTarget,.Lfe5-AnimGustToTarget
	.align	2, 0
	.type	 AnimGustToTarget_Step,function
	.thumb_func
AnimGustToTarget_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L25	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L25:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 AnimGustToTarget_Step,.Lfe6-AnimGustToTarget_Step
	.align	2, 0
	.globl	AnimAirWaveCrescent
	.type	 AnimAirWaveCrescent,function
	.thumb_func
AnimAirWaveCrescent:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L31
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L27	@cond_branch
	ldr	r1, .L31+0x4
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r1]
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
	ldrh	r0, [r1, #0x6]
	neg	r0, r0
	strh	r0, [r1, #0x6]
.L27:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L28	@cond_branch
	ldr	r0, .L31+0x4
	ldrh	r1, [r0, #0x2]
	neg	r1, r1
	strh	r1, [r0, #0x2]
	ldrh	r1, [r0, #0x6]
	neg	r1, r1
	strh	r1, [r0, #0x6]
.L28:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r2, .L31+0x4
	ldrh	r1, [r2]
	ldrh	r3, [r5, #0x20]
	add	r1, r1, r3
	strh	r1, [r5, #0x20]
	lsr	r0, r0, #0x18
	ldrh	r1, [r2, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r5, #0x2e]
	mov	r3, #0xc
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L29	@cond_branch
	ldr	r4, .L31+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	b	.L30
.L32:
	.align	2, 0
.L31:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L29:
	ldr	r0, .L33
	ldrb	r0, [r0]
	add	r2, r5, #0
	add	r2, r2, #0x32
	add	r3, r5, #0
	add	r3, r3, #0x36
	mov	r1, #0x1
	bl	SetAverageBattlerPositions
.L30:
	ldr	r4, .L33+0x4
	ldrh	r0, [r4, #0x4]
	ldrh	r1, [r5, #0x32]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r4, #0x6]
	ldrh	r3, [r5, #0x36]
	add	r0, r0, r3
	strh	r0, [r5, #0x36]
	ldr	r0, .L33+0x8
	str	r0, [r5, #0x1c]
	ldr	r1, .L33+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldrb	r1, [r4, #0xa]
	add	r0, r5, #0
	bl	SeekSpriteAnim
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe7:
	.size	 AnimAirWaveCrescent,.Lfe7-AnimAirWaveCrescent
	.align	2, 0
	.globl	AnimFlyBallUp
	.type	 AnimFlyBallUp,function
	.thumb_func
AnimFlyBallUp:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r1, .L36
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldr	r0, .L36+0x4
	str	r0, [r4, #0x1c]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L36+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	gBattleAnimArgs
	.word	AnimFlyBallUp_Step
	.word	gSprites
.Lfe8:
	.size	 AnimFlyBallUp,.Lfe8-AnimFlyBallUp
	.align	2, 0
	.globl	AnimFlyBallUp_Step
	.type	 AnimFlyBallUp_Step,function
	.thumb_func
AnimFlyBallUp_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r1, [r2, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L39	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x2e]
	b	.L40
.L39:
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r2, #0x26]
	sub	r1, r1, r0
	strh	r1, [r2, #0x26]
.L40:
	mov	r3, #0x22
	ldrsh	r0, [r2, r3]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L41	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L41:
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 AnimFlyBallUp_Step,.Lfe9-AnimFlyBallUp_Step
	.align	2, 0
	.globl	AnimFlyBallAttack
	.type	 AnimFlyBallAttack,function
	.thumb_func
AnimFlyBallAttack:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r0, .L45
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L43	@cond_branch
	mov	r0, #0x88
	lsl	r0, r0, #0x1
	strh	r0, [r6, #0x20]
	ldr	r0, .L45+0x4
	strh	r0, [r6, #0x22]
	add	r0, r6, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L44
.L46:
	.align	2, 0
.L45:
	.word	gBattleAnimAttacker
	.word	0xffe0
.L43:
	ldr	r0, .L47
	strh	r0, [r6, #0x20]
	strh	r0, [r6, #0x22]
.L44:
	ldr	r5, .L47+0x4
	ldrh	r0, [r5]
	strh	r0, [r6, #0x2e]
	ldrh	r0, [r6, #0x20]
	strh	r0, [r6, #0x30]
	ldr	r4, .L47+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x32]
	ldrh	r0, [r6, #0x22]
	strh	r0, [r6, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x36]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r6, #0x38]
	add	r0, r6, #0
	bl	InitAnimLinearTranslation
	ldr	r0, .L47+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L48:
	.align	2, 0
.L47:
	.word	0xffe0
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimFlyBallAttack_Step
.Lfe10:
	.size	 AnimFlyBallAttack,.Lfe10-AnimFlyBallAttack
	.align	2, 0
	.globl	AnimFlyBallAttack_Step
	.type	 AnimFlyBallAttack_Step,function
	.thumb_func
AnimFlyBallAttack_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	AnimTranslateLinear
	ldrh	r1, [r4, #0x34]
	lsr	r0, r1, #0x8
	cmp	r0, #0xc8
	bls	.L50	@cond_branch
	ldrh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	mov	r0, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
.L50:
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	add	r0, r0, #0x20
	mov	r1, #0x98
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bhi	.L52	@cond_branch
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	cmp	r0, #0xa0
	ble	.L51	@cond_branch
.L52:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L53
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	mov	r0, #0x1
	ldrh	r2, [r4, #0x38]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L51:
	pop	{r4}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gSprites
.Lfe11:
	.size	 AnimFlyBallAttack_Step,.Lfe11-AnimFlyBallAttack_Step
	.align	2, 0
	.globl	DestroyAnimSpriteAfterTimer
	.type	 DestroyAnimSpriteAfterTimer,function
	.thumb_func
DestroyAnimSpriteAfterTimer:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L56	@cond_branch
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L57	@cond_branch
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
.L57:
	add	r0, r4, #0
	bl	DestroySprite
	ldr	r1, .L58
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L56:
	pop	{r4}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gAnimVisualTaskCount
.Lfe12:
	.size	 DestroyAnimSpriteAfterTimer,.Lfe12-DestroyAnimSpriteAfterTimer
	.align	2, 0
	.type	 AnimFallingFeather,function
	.thumb_func
AnimFallingFeather:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	add	r5, r7, #0
	add	r5, r5, #0x2e
	ldr	r0, .L72
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L61	@cond_branch
	ldr	r0, .L72+0x4
	b	.L70
.L73:
	.align	2, 0
.L72:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L61:
	ldr	r0, .L74
.L70:
	ldrb	r6, [r0]
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L63	@cond_branch
	ldr	r1, .L74+0x4
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r1]
.L63:
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L74+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r7, #0x20]
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	lsr	r0, r0, #0x18
	add	r1, r0, r1
	strh	r1, [r7, #0x22]
	lsl	r1, r1, #0x8
	strh	r1, [r5, #0x8]
	ldrh	r1, [r4, #0xc]
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	ldrh	r2, [r5, #0xe]
	mov	r1, #0x1
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r5, #0xe]
	ldrb	r0, [r5]
	mov	r2, #0x4
	mov	r8, r2
	mov	r1, r8
	orr	r0, r0, r1
	strb	r0, [r5]
	ldrh	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x4]
	strh	r1, [r5, #0x2]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xa]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x4]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x6]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r5, #0xc]
	sub	r1, r1, #0x40
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0x7f
	bhi	.L64	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L65	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r7, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r7, #0x5]
	b	.L66
.L75:
	.align	2, 0
.L74:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L65:
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r7, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r7, #0x5]
.L66:
	ldrb	r1, [r5, #0xe]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r1
	strb	r0, [r5, #0xe]
	mov	r2, #0x4
	ldrsh	r0, [r5, r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L68	@cond_branch
	add	r3, r7, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1f
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r7, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	b	.L71
.L64:
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r7, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r7, #0x5]
	ldrb	r0, [r5, #0xe]
	mov	r4, #0x1
	orr	r0, r0, r4
	strb	r0, [r5, #0xe]
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L68	@cond_branch
	add	r3, r7, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1f
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r4
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r7, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r2, r8
	orr	r0, r0, r2
.L71:
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r3]
.L68:
	ldrh	r1, [r5, #0x2]
	lsr	r1, r1, #0x6
	lsl	r1, r1, #0x4
	ldrb	r2, [r5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5]
	ldr	r3, .L76
	ldrh	r0, [r5, #0x2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	ldrb	r0, [r5, #0xc]
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	strh	r0, [r7, #0x24]
	ldrb	r2, [r7, #0x3]
	lsl	r2, r2, #0x1a
	lsr	r2, r2, #0x1b
	mov	r1, #0x24
	ldrsh	r0, [r7, r1]
	neg	r0, r0
	asr	r0, r0, #0x1
	ldrb	r5, [r5, #0xa]
	add	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r3
	ldrh	r4, [r1]
	ldr	r1, .L76+0x4
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	add	r0, r0, #0x40
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r2, #0x6]
	strh	r0, [r2]
	strh	r4, [r2, #0x2]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	neg	r0, r0
	strh	r0, [r2, #0x4]
	ldr	r0, .L76+0x8
	str	r0, [r7, #0x1c]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	gSineTable
	.word	gOamMatrices
	.word	sub_810E520
.Lfe13:
	.size	 AnimFallingFeather,.Lfe13-AnimFallingFeather
	.align	2, 0
	.type	 sub_810E520,function
	.thumb_func
sub_810E520:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r5, r0, #0
	mov	r6, #0x0
	add	r4, r5, #0
	add	r4, r4, #0x2e
	ldrb	r2, [r4]
	mov	r7, #0x1
	mov	r0, #0x1
	mov	r9, r0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L79	@cond_branch
	ldrb	r0, [r4, #0x1]
	add	r1, r0, #0
	add	r1, r1, #0xff
	strb	r1, [r4, #0x1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1123
	b	.L81	@long jump
.LCB1123:
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r4]
	strb	r6, [r4, #0x1]
	b	.L81
.L79:
	ldrh	r0, [r4, #0x2]
	lsr	r1, r0, #0x6
	mov	ip, r0
	cmp	r1, #0x1
	bne	.LCB1141
	b	.L96	@long jump
.LCB1141:
	cmp	r1, #0x1
	bgt	.L137	@cond_branch
	cmp	r1, #0
	beq	.L83	@cond_branch
	b	.L82
.L137:
	cmp	r1, #0x2
	bne	.LCB1150
	b	.L109	@long jump
.LCB1150:
	cmp	r1, #0x3
	bne	.LCB1152
	b	.L122	@long jump
.LCB1152:
	b	.L82
.L83:
	lsl	r1, r2, #0x18
	lsr	r0, r1, #0x1c
	cmp	r0, #0x1
	bne	.L84	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	orr	r0, r0, r7
	strb	r0, [r4]
	strb	r6, [r4, #0x1]
	b	.L85
.L84:
	lsr	r0, r1, #0x1c
	cmp	r0, #0x3
	bne	.L86	@cond_branch
	lsl	r0, r2, #0x1e
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r0, r0, r1
	and	r0, r0, r7
	lsl	r0, r0, #0x1
	mov	r1, #0x3
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	orr	r1, r1, r7
	strb	r1, [r4]
	strb	r6, [r4, #0x1]
	b	.L85
.L86:
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L85	@cond_branch
	add	r3, r5, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1f
	lsr	r1, r1, #0x1f
	mov	r6, #0x1
	eor	r1, r1, r6
	and	r1, r1, r7
	mov	r0, #0x2
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r5, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r3]
	ldrb	r1, [r4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L89	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L90	@cond_branch
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L91	@cond_branch
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L141
.L91:
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L141
.L90:
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L94	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	sub	r0, r0, #0xc
	b	.L142
.L94:
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	add	r0, r0, #0xc
.L142:
	strb	r0, [r1]
.L141:
	ldrb	r2, [r4, #0xe]
	lsl	r0, r2, #0x1f
	lsr	r0, r0, #0x1f
	eor	r0, r0, r6
	and	r0, r0, r7
	mov	r1, r8
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0xe]
.L89:
	ldrb	r1, [r4]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4, #0x2]
	mov	ip, r1
.L85:
	ldrb	r1, [r4]
	mov	r0, #0xf
	and	r0, r0, r1
	strb	r0, [r4]
	b	.L82
.L96:
	lsl	r1, r2, #0x18
	lsr	r0, r1, #0x1c
	cmp	r0, #0
	bne	.L97	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	b	.L143
.L97:
	lsr	r0, r1, #0x1c
	cmp	r0, #0x2
	bne	.L99	@cond_branch
	add	r0, r2, #0
.L143:
	orr	r0, r0, r7
	strb	r0, [r4]
	strb	r6, [r4, #0x1]
	b	.L98
.L99:
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L98	@cond_branch
	add	r3, r5, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1f
	lsr	r1, r1, #0x1f
	mov	r6, #0x1
	eor	r1, r1, r6
	and	r1, r1, r7
	mov	r0, #0x2
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r5, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r3]
	ldrb	r1, [r4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L102	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L103	@cond_branch
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L104	@cond_branch
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L144
.L104:
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L144
.L103:
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L107	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	sub	r0, r0, #0xc
	b	.L145
.L107:
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	add	r0, r0, #0xc
.L145:
	strb	r0, [r1]
.L144:
	ldrb	r2, [r4, #0xe]
	lsl	r0, r2, #0x1f
	lsr	r0, r0, #0x1f
	eor	r0, r0, r6
	and	r0, r0, r7
	mov	r1, r8
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0xe]
.L102:
	ldrb	r1, [r4]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4, #0x2]
	mov	ip, r1
.L98:
	ldrb	r0, [r4]
	mov	r1, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	b	.L146
.L109:
	lsl	r1, r2, #0x18
	lsr	r0, r1, #0x1c
	cmp	r0, #0x3
	bne	.L110	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	b	.L147
.L110:
	lsr	r0, r1, #0x1c
	cmp	r0, #0x1
	bne	.L112	@cond_branch
	add	r0, r2, #0
.L147:
	orr	r0, r0, r7
	strb	r0, [r4]
	strb	r6, [r4, #0x1]
	b	.L111
.L112:
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L111	@cond_branch
	add	r3, r5, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1f
	lsr	r1, r1, #0x1f
	mov	r6, #0x1
	eor	r1, r1, r6
	and	r1, r1, r7
	mov	r0, #0x2
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r5, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r3]
	ldrb	r1, [r4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L115	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L116	@cond_branch
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L117	@cond_branch
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L148
.L117:
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L148
.L116:
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L120	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	sub	r0, r0, #0xc
	b	.L149
.L120:
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	add	r0, r0, #0xc
.L149:
	strb	r0, [r1]
.L148:
	ldrb	r2, [r4, #0xe]
	lsl	r0, r2, #0x1f
	lsr	r0, r0, #0x1f
	eor	r0, r0, r6
	and	r0, r0, r7
	mov	r1, r8
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0xe]
.L115:
	ldrb	r1, [r4]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4, #0x2]
	mov	ip, r1
.L111:
	ldrb	r0, [r4]
	mov	r1, #0xf
	and	r1, r1, r0
	mov	r0, #0x20
	b	.L146
.L122:
	lsl	r1, r2, #0x18
	lsr	r0, r1, #0x1c
	cmp	r0, #0x2
	bne	.L123	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	strb	r0, [r4]
	b	.L124
.L123:
	lsr	r0, r1, #0x1c
	cmp	r0, #0
	bne	.L125	@cond_branch
	lsl	r0, r2, #0x1e
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r0, r0, r1
	and	r0, r0, r7
	lsl	r0, r0, #0x1
	mov	r1, #0x3
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	orr	r1, r1, r7
	strb	r1, [r4]
	strb	r6, [r4, #0x1]
	b	.L124
.L125:
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L124	@cond_branch
	add	r3, r5, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1f
	lsr	r1, r1, #0x1f
	mov	r6, #0x1
	eor	r1, r1, r6
	and	r1, r1, r7
	mov	r0, #0x2
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r5, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r3]
	ldrb	r1, [r4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L128	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L129	@cond_branch
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L130	@cond_branch
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L150
.L130:
	ldrb	r2, [r5, #0x5]
	lsl	r1, r2, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L150
.L129:
	ldrb	r1, [r4, #0xe]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L133	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	sub	r0, r0, #0xc
	b	.L151
.L133:
	add	r1, r5, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	add	r0, r0, #0xc
.L151:
	strb	r0, [r1]
.L150:
	ldrb	r2, [r4, #0xe]
	lsl	r0, r2, #0x1f
	lsr	r0, r0, #0x1f
	eor	r0, r0, r6
	and	r0, r0, r7
	mov	r1, r8
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0xe]
.L128:
	ldrb	r1, [r4]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4, #0x2]
	mov	ip, r1
.L124:
	ldrb	r0, [r4]
	mov	r1, #0xf
	and	r1, r1, r0
	mov	r0, #0x30
.L146:
	orr	r1, r1, r0
	strb	r1, [r4]
.L82:
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1e
	lsr	r1, r1, #0x1f
	add	r0, r4, #0
	add	r0, r0, #0xc
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r3, .L152
	mov	r2, ip
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	strh	r0, [r5, #0x24]
	ldrb	r2, [r5, #0x3]
	lsl	r2, r2, #0x1a
	lsr	r2, r2, #0x1b
	mov	r1, #0x24
	ldrsh	r0, [r5, r1]
	neg	r0, r0
	asr	r0, r0, #0x1
	ldrb	r1, [r4, #0xa]
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r3
	ldrh	r6, [r1]
	ldr	r1, .L152+0x4
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	add	r0, r0, #0x40
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r2, #0x6]
	strh	r0, [r2]
	strh	r6, [r2, #0x2]
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	neg	r0, r0
	strh	r0, [r2, #0x4]
	ldrh	r0, [r4, #0x6]
	ldrh	r2, [r4, #0x8]
	add	r0, r0, r2
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L138	@cond_branch
	ldrh	r0, [r4, #0x4]
	sub	r1, r1, #0x1
	and	r1, r1, r0
	ldrh	r0, [r4, #0x2]
	sub	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2]
	b	.L139
.L153:
	.align	2, 0
.L152:
	.word	gSineTable
	.word	gOamMatrices
.L138:
	ldrh	r0, [r4, #0x4]
	ldr	r1, .L154
	and	r1, r1, r0
	ldrh	r2, [r4, #0x2]
	add	r1, r1, r2
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r4, #0x2]
.L139:
	mov	r0, #0x22
	ldrsh	r1, [r5, r0]
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	add	r1, r1, r0
	ldrh	r0, [r4, #0xe]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	blt	.L81	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldr	r0, .L154+0x4
	str	r0, [r5, #0x1c]
.L81:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L155:
	.align	2, 0
.L154:
	.word	0x7fff
	.word	DestroyAnimSpriteAfterTimer
.Lfe14:
	.size	 sub_810E520,.Lfe14-sub_810E520
	.align	2, 0
	.type	 sub_810EA4C,function
	.thumb_func
sub_810EA4C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, .L157
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	ldr	r5, .L157+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r0, .L157+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L158:
	.align	2, 0
.L157:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	TranslateAnimSpriteToTargetMonLocation
.Lfe15:
	.size	 sub_810EA4C,.Lfe15-sub_810EA4C
	.align	2, 0
	.type	 AnimWhirlwindLine,function
	.thumb_func
AnimWhirlwindLine:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L165
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L160	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	b	.L161
.L166:
	.align	2, 0
.L165:
	.word	gBattleAnimArgs
.L160:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
.L161:
	ldr	r4, .L167
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L164	@cond_branch
	ldr	r0, .L167+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L163	@cond_branch
.L164:
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L162	@cond_branch
	ldr	r0, .L167+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L162	@cond_branch
.L163:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x8
	strh	r0, [r5, #0x20]
.L162:
	ldr	r4, .L167
	ldrb	r1, [r4, #0x8]
	add	r0, r5, #0
	bl	SeekSpriteAnim
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x20
	strh	r0, [r5, #0x20]
	ldr	r0, .L167+0xc
	strh	r0, [r5, #0x30]
	ldrh	r1, [r4, #0x8]
	mov	r0, #0xc
	mov	r2, r0
	mul	r2, r2, r1
	add	r0, r2, #0
	ldrh	r2, [r5, #0x24]
	add	r0, r0, r2
	strh	r0, [r5, #0x24]
	strh	r1, [r5, #0x2e]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x3c]
	ldr	r0, .L167+0x10
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L168:
	.align	2, 0
.L167:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	0xccc
	.word	sub_810EB40
.Lfe16:
	.size	 AnimWhirlwindLine,.Lfe16-AnimWhirlwindLine
	.align	2, 0
	.type	 sub_810EB40,function
	.thumb_func
sub_810EB40:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L170	@cond_branch
	strh	r1, [r4, #0x2e]
	strh	r1, [r4, #0x24]
	add	r0, r4, #0
	bl	StartSpriteAnim
.L170:
	ldrh	r0, [r4, #0x3c]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L171	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L171:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 sub_810EB40,.Lfe17-sub_810EB40
	.align	2, 0
	.globl	AnimTask_DrillPeckHitSplats
	.type	 AnimTask_DrillPeckHitSplats,function
	.thumb_func
AnimTask_DrillPeckHitSplats:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L175
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r7, r0, r1
	ldrh	r0, [r7, #0x8]
	mov	r1, #0x1f
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L173	@cond_branch
	ldr	r1, .L175+0x4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r1, #0x8
	ldrsh	r0, [r7, r1]
	mov	r5, #0xd
	neg	r5, r5
	add	r1, r5, #0
	bl	Sin
	ldr	r4, .L175+0x8
	strh	r0, [r4]
	mov	r1, #0x8
	ldrsh	r0, [r7, r1]
	add	r1, r5, #0
	bl	Cos
	strh	r0, [r4, #0x2]
	mov	r0, #0x1
	strh	r0, [r4, #0x4]
	mov	r0, #0x3
	strh	r0, [r4, #0x6]
	ldr	r0, .L175+0xc
	mov	r8, r0
	ldr	r5, .L175+0x10
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, r8
	add	r1, r4, #0
	mov	r3, #0x3
	bl	CreateSpriteAndAnimate
.L173:
	ldrh	r0, [r7, #0x8]
	add	r0, r0, #0x8
	strh	r0, [r7, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L174	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L174:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L176:
	.align	2, 0
.L175:
	.word	gTasks
	.word	gAnimVisualTaskCount
	.word	gBattleAnimArgs
	.word	gFlashingHitSplatSpriteTemplate
	.word	gBattleAnimTarget
.Lfe18:
	.size	 AnimTask_DrillPeckHitSplats,.Lfe18-AnimTask_DrillPeckHitSplats
	.align	2, 0
	.type	 AnimBounceBallShrink,function
	.thumb_func
AnimBounceBallShrink:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L179	@cond_branch
	cmp	r0, #0x1
	beq	.L180	@cond_branch
	b	.L178
.L179:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L184
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L178
.L185:
	.align	2, 0
.L184:
	.word	gSprites
.L180:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L178	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L178:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimBounceBallShrink,.Lfe19-AnimBounceBallShrink
	.align	2, 0
	.type	 AnimBounceBallLand,function
	.thumb_func
AnimBounceBallLand:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L189	@cond_branch
	cmp	r0, #0x1
	bgt	.L195	@cond_branch
	cmp	r0, #0
	beq	.L188	@cond_branch
	b	.L187
.L195:
	cmp	r0, #0x2
	beq	.L191	@cond_branch
	b	.L187
.L188:
	ldr	r0, .L197
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	neg	r0, r0
	sub	r0, r0, #0x20
	strh	r0, [r4, #0x26]
	b	.L196
.L198:
	.align	2, 0
.L197:
	.word	gBattleAnimTarget
.L189:
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0xa
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L187	@cond_branch
.L196:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L187
.L191:
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, #0xa
	strh	r0, [r4, #0x26]
	mov	r2, #0x22
	ldrsh	r0, [r4, r2]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L187	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L199
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L187:
	pop	{r4}
	pop	{r0}
	bx	r0
.L200:
	.align	2, 0
.L199:
	.word	gSprites
.Lfe20:
	.size	 AnimBounceBallLand,.Lfe20-AnimBounceBallLand
	.align	2, 0
	.type	 AnimDiveBall,function
	.thumb_func
AnimDiveBall:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r1, .L202
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldr	r0, .L202+0x4
	str	r0, [r4, #0x1c]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L202+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L203:
	.align	2, 0
.L202:
	.word	gBattleAnimArgs
	.word	AnimDiveBall_Step1
	.word	gSprites
.Lfe21:
	.size	 AnimDiveBall,.Lfe21-AnimDiveBall
	.align	2, 0
	.type	 AnimDiveBall_Step1,function
	.thumb_func
AnimDiveBall_Step1:
	push	{lr}
	add	r2, r0, #0
	ldrh	r1, [r2, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L205	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x2e]
	b	.L206
.L205:
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	ble	.L207	@cond_branch
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r2, #0x26]
	sub	r1, r1, r0
	strh	r1, [r2, #0x26]
	b	.L206
.L207:
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r2, #0x34]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L206	@cond_branch
	ldr	r0, .L210
	str	r0, [r2, #0x1c]
.L206:
	pop	{r0}
	bx	r0
.L211:
	.align	2, 0
.L210:
	.word	AnimDiveBall_Step2
.Lfe22:
	.size	 AnimDiveBall_Step1,.Lfe22-AnimDiveBall_Step1
	.align	2, 0
	.type	 AnimDiveBall_Step2,function
	.thumb_func
AnimDiveBall_Step2:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r2, #0x26]
	add	r0, r0, r1
	strh	r0, [r2, #0x26]
	mov	r3, #0x22
	ldrsh	r0, [r2, r3]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	ble	.L213	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
.L213:
	mov	r1, #0x26
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	ble	.L214	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L214:
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 AnimDiveBall_Step2,.Lfe23-AnimDiveBall_Step2
	.align	2, 0
	.type	 AnimDiveWaterSplash,function
	.thumb_func
AnimDiveWaterSplash:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L217	@cond_branch
	cmp	r0, #0x1
	beq	.L220	@cond_branch
	b	.L216
.L217:
	ldr	r0, .L229
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L218	@cond_branch
	ldr	r4, .L229+0x4
	b	.L227
.L230:
	.align	2, 0
.L229:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L218:
	ldr	r4, .L231
.L227:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	mov	r0, #0x0
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	strh	r3, [r5, #0x30]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	str	r0, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	TrySetSpriteRotScale
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L216
.L232:
	.align	2, 0
.L231:
	.word	gBattleAnimTarget
.L220:
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xb
	bgt	.L221	@cond_branch
	ldrh	r0, [r5, #0x30]
	sub	r0, r0, #0x28
	b	.L228
.L221:
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x28
.L228:
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r5, #0x32]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, #0x30
	ldrsh	r3, [r5, r0]
	str	r1, [sp]
	add	r0, r5, #0
	bl	TrySetSpriteRotScale
	ldrb	r1, [r5, #0x3]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0xf4
	lsl	r0, r0, #0x6
	ldr	r2, .L233
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x6
	ldrsh	r1, [r1, r2]
	bl	__divsi3
	add	r1, r0, #0x1
	cmp	r1, #0x80
	ble	.L223	@cond_branch
	mov	r1, #0x80
.L223:
	mov	r0, #0x40
	sub	r0, r0, r1
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r1, r0, #0x1
	strh	r1, [r5, #0x26]
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x18
	bne	.L216	@cond_branch
	add	r0, r5, #0
	bl	sub_80A749C
	add	r0, r5, #0
	bl	DestroyAnimSprite
.L216:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L234:
	.align	2, 0
.L233:
	.word	gOamMatrices
.Lfe24:
	.size	 AnimDiveWaterSplash,.Lfe24-AnimDiveWaterSplash
	.align	2, 0
	.type	 AnimSprayWaterDroplet,function
	.thumb_func
AnimSprayWaterDroplet:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	Random2
	ldr	r4, .L246
	and	r4, r4, r0
	bl	Random2
	mov	r1, #0x7f
	and	r1, r1, r0
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L236	@cond_branch
	mov	r2, #0xb8
	lsl	r2, r2, #0x2
	add	r0, r4, r2
	b	.L243
.L247:
	.align	2, 0
.L246:
	.word	0x1ff
.L236:
	mov	r2, #0xb8
	lsl	r2, r2, #0x2
	add	r0, r2, #0
	sub	r0, r0, r4
.L243:
	strh	r0, [r5, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L238	@cond_branch
	mov	r2, #0xe0
	lsl	r2, r2, #0x2
	add	r0, r2, #0
	add	r0, r1, r0
	b	.L244
.L238:
	mov	r2, #0xe0
	lsl	r2, r2, #0x2
	add	r0, r2, #0
	sub	r0, r0, r1
.L244:
	strh	r0, [r5, #0x30]
	ldr	r2, .L248
	ldrh	r0, [r2]
	strh	r0, [r5, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L240	@cond_branch
	ldrb	r0, [r5, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r5, #0x3]
.L240:
	mov	r1, #0x2
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L241	@cond_branch
	ldr	r4, .L248+0x4
	b	.L245
.L249:
	.align	2, 0
.L248:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L241:
	ldr	r4, .L250
.L245:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x20
	strh	r0, [r5, #0x22]
	ldr	r0, .L250+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L251:
	.align	2, 0
.L250:
	.word	gBattleAnimTarget
	.word	AnimSprayWaterDroplet_Step
.Lfe25:
	.size	 AnimSprayWaterDroplet,.Lfe25-AnimSprayWaterDroplet
	.align	2, 0
	.type	 AnimSprayWaterDroplet_Step,function
	.thumb_func
AnimSprayWaterDroplet_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L253	@cond_branch
	ldrh	r3, [r4, #0x2e]
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	b	.L257
.L253:
	ldrh	r3, [r4, #0x2e]
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
.L257:
	strh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x30]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, r1
	strh	r0, [r4, #0x26]
	strh	r3, [r4, #0x2e]
	add	r0, r2, #0
	sub	r0, r0, #0x20
	strh	r0, [r4, #0x30]
	lsl	r0, r3, #0x10
	cmp	r0, #0
	bge	.L255	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
.L255:
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L256	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L256:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 AnimSprayWaterDroplet_Step,.Lfe26-AnimSprayWaterDroplet_Step
	.align	2, 0
	.type	 sub_810F004,function
	.thumb_func
sub_810F004:
	mov	r1, #0x0
	strh	r1, [r0, #0x3a]
	mov	r1, #0x40
	strh	r1, [r0, #0x3c]
	ldr	r1, .L259
	str	r1, [r0, #0x1c]
	bx	lr
.L260:
	.align	2, 0
.L259:
	.word	sub_810F018
.Lfe27:
	.size	 sub_810F004,.Lfe27-sub_810F004
	.align	2, 0
	.type	 sub_810F018,function
	.thumb_func
sub_810F018:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	cmp	r1, #0
	beq	.L263	@cond_branch
	cmp	r1, #0x1
	beq	.L266	@cond_branch
	b	.L262
.L263:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L262	@cond_branch
	strh	r1, [r3, #0x30]
	mov	r1, #0x3e
	add	r1, r1, r3
	mov	ip, r1
	ldrb	r2, [r1]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L262	@cond_branch
	ldrb	r1, [r1]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L262	@cond_branch
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	b	.L262
.L266:
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L262:
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 sub_810F018,.Lfe28-sub_810F018
	.align	2, 0
	.type	 AnimSkyAttackBird,function
	.thumb_func
AnimSkyAttackBird:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x4
	mov	r8, r0
	ldrh	r4, [r0, #0x20]
	ldrh	r5, [r0, #0x22]
	ldr	r6, .L270
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	strh	r0, [r1, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r2, r8
	strh	r6, [r2, #0x22]
	ldrh	r0, [r2, #0x20]
	mov	r9, r0
	mov	r1, r9
	lsl	r0, r1, #0x4
	strh	r0, [r2, #0x36]
	lsl	r0, r6, #0x4
	strh	r0, [r2, #0x38]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	sub	r0, r4, r0
	lsl	r0, r0, #0x4
	mov	r1, #0xc
	bl	__divsi3
	mov	r2, r8
	strh	r0, [r2, #0x3a]
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	sub	r0, r5, r0
	lsl	r0, r0, #0x4
	mov	r1, #0xc
	bl	__divsi3
	mov	r2, r8
	strh	r0, [r2, #0x3c]
	mov	r0, r9
	sub	r4, r4, r0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	sub	r5, r5, r6
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r0, r4, #0
	add	r1, r5, #0
	bl	ArcTan2Neg
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r0, [sp]
	mov	r0, r8
	mov	r1, #0x1
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	ldr	r0, .L270+0x4
	mov	r2, r8
	str	r0, [r2, #0x1c]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L271:
	.align	2, 0
.L270:
	.word	gBattleAnimAttacker
	.word	AnimSkyAttackBird_Step
.Lfe29:
	.size	 AnimSkyAttackBird,.Lfe29-AnimSkyAttackBird
	.align	2, 0
	.type	 AnimSkyAttackBird_Step,function
	.thumb_func
AnimSkyAttackBird_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x3a]
	ldrh	r1, [r2, #0x36]
	add	r0, r0, r1
	strh	r0, [r2, #0x36]
	ldrh	r1, [r2, #0x3c]
	ldrh	r3, [r2, #0x38]
	add	r1, r1, r3
	strh	r1, [r2, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r3, r1, #0x14
	strh	r3, [r2, #0x22]
	add	r0, r0, #0x2d
	lsl	r0, r0, #0x10
	mov	r1, #0xa5
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.L274	@cond_branch
	add	r1, r3, #0
	cmp	r1, #0x9d
	bgt	.L274	@cond_branch
	mov	r0, #0x2d
	neg	r0, r0
	cmp	r1, r0
	bge	.L273	@cond_branch
.L274:
	add	r0, r2, #0
	bl	DestroySpriteAndMatrix
.L273:
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 AnimSkyAttackBird_Step,.Lfe30-AnimSkyAttackBird_Step
	.align	2, 0
	.globl	unref_sub_810F184
	.type	 unref_sub_810F184,function
	.thumb_func
unref_sub_810F184:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L279
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L276	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L279+0x4
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	b	.L278
.L280:
	.align	2, 0
.L279:
	.word	gBattleAnimArgs
	.word	gSprites
.L276:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L281
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
.L278:
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L282:
	.align	2, 0
.L281:
	.word	gSprites
.Lfe31:
	.size	 unref_sub_810F184,.Lfe31-unref_sub_810F184
.text
	.align	2, 0

