@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sAnim_ConfusionDuck_0,object
sAnim_ConfusionDuck_0:
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x4
	.byte	0x8
	.space	1
	.short	0x0
	.byte	0x48
	.space	1
	.short	0x8
	.byte	0x8
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_ConfusionDuck_0,20
	.align	2, 0
	.type	 sAnim_ConfusionDuck_1,object
sAnim_ConfusionDuck_1:
	.short	0x0
	.byte	0x48
	.space	1
	.short	0x4
	.byte	0x8
	.space	1
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x8
	.byte	0x8
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_ConfusionDuck_1,20
	.align	2, 0
	.type	 sAnims_ConfusionDuck,object
sAnims_ConfusionDuck:
	.word	sAnim_ConfusionDuck_0
	.word	sAnim_ConfusionDuck_1
	.size	 sAnims_ConfusionDuck,8
	.globl	gConfusionDuckSpriteTemplate
	.align	2, 0
	.type	 gConfusionDuckSpriteTemplate,object
	.size	 gConfusionDuckSpriteTemplate,24
gConfusionDuckSpriteTemplate:
	.short	0x2759
	.short	0x2759
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sAnims_ConfusionDuck
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimConfusionDuck
	.globl	gSimplePaletteBlendSpriteTemplate
	.align	2, 0
	.type	 gSimplePaletteBlendSpriteTemplate,object
	.size	 gSimplePaletteBlendSpriteTemplate,24
gSimplePaletteBlendSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSimplePaletteBlend
	.globl	gComplexPaletteBlendSpriteTemplate
	.align	2, 0
	.type	 gComplexPaletteBlendSpriteTemplate,object
	.size	 gComplexPaletteBlendSpriteTemplate,24
gComplexPaletteBlendSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimComplexPaletteBlend
	.align	2, 0
	.type	 sPowerSwapGuardSwapFrame0,object
sPowerSwapGuardSwapFrame0:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sPowerSwapGuardSwapFrame0,8
	.align	2, 0
	.type	 sPowerSwapGuardSwapFrame1,object
sPowerSwapGuardSwapFrame1:
	.short	0x4
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sPowerSwapGuardSwapFrame1,8
	.align	2, 0
	.type	 sPowerSwapGuardSwapFrame2,object
sPowerSwapGuardSwapFrame2:
	.short	0x8
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sPowerSwapGuardSwapFrame2,8
	.align	2, 0
	.type	 sPowerSwapGuardSwapFrame3,object
sPowerSwapGuardSwapFrame3:
	.short	0xc
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sPowerSwapGuardSwapFrame3,8
	.align	2, 0
	.type	 sPowerSwapGuardSwapFrame4,object
sPowerSwapGuardSwapFrame4:
	.short	0x10
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sPowerSwapGuardSwapFrame4,8
	.align	2, 0
	.type	 sPowerSwapGuardSwapFrame5,object
sPowerSwapGuardSwapFrame5:
	.short	0x14
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sPowerSwapGuardSwapFrame5,8
	.align	2, 0
	.type	 sPowerSwapGuardSwapAnimTable,object
sPowerSwapGuardSwapAnimTable:
	.word	sPowerSwapGuardSwapFrame0
	.word	sPowerSwapGuardSwapFrame1
	.word	sPowerSwapGuardSwapFrame2
	.word	sPowerSwapGuardSwapFrame3
	.word	sPowerSwapGuardSwapFrame4
	.word	sPowerSwapGuardSwapFrame5
	.size	 sPowerSwapGuardSwapAnimTable,24
	.globl	gPowerSwapGuardSwapSpriteTemplate
	.align	2, 0
	.type	 gPowerSwapGuardSwapSpriteTemplate,object
	.size	 gPowerSwapGuardSwapSpriteTemplate,24
gPowerSwapGuardSwapSpriteTemplate:
	.short	0x283e
	.short	0x283e
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sPowerSwapGuardSwapAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMovePowerSwapGuardSwap
	.align	2, 0
	.type	 gUnknown_085972A4,object
gUnknown_085972A4:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_085972A4,24
	.align	2, 0
	.type	 gUnknown_085972BC,object
gUnknown_085972BC:
	.word	gUnknown_085972A4
	.size	 gUnknown_085972BC,4
	.globl	gUnknown_085972C0
	.align	2, 0
	.type	 gUnknown_085972C0,object
	.size	 gUnknown_085972C0,24
gUnknown_085972C0:
	.short	0x2757
	.short	0x2757
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gUnknown_085972BC
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81159B4
	.globl	gShakeMonOrTerrainSpriteTemplate
	.align	2, 0
	.type	 gShakeMonOrTerrainSpriteTemplate,object
	.size	 gShakeMonOrTerrainSpriteTemplate,24
gShakeMonOrTerrainSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimShakeMonOrBattleTerrain
	.align	2, 0
	.type	 sAffineAnim_HitSplat_0,object
sAffineAnim_HitSplat_0:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_HitSplat_0,16
	.align	2, 0
	.type	 sAffineAnim_HitSplat_1,object
sAffineAnim_HitSplat_1:
	.short	0xd8
	.short	0xd8
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_HitSplat_1,24
	.align	2, 0
	.type	 sAffineAnim_HitSplat_2,object
sAffineAnim_HitSplat_2:
	.short	0xb0
	.short	0xb0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_HitSplat_2,24
	.align	2, 0
	.type	 sAffineAnim_HitSplat_3,object
sAffineAnim_HitSplat_3:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_HitSplat_3,24
	.globl	gAffineAnims_HitSplat
	.align	2, 0
	.type	 gAffineAnims_HitSplat,object
gAffineAnims_HitSplat:
	.word	sAffineAnim_HitSplat_0
	.word	sAffineAnim_HitSplat_1
	.word	sAffineAnim_HitSplat_2
	.word	sAffineAnim_HitSplat_3
	.size	 gAffineAnims_HitSplat,16
	.globl	gBasicHitSplatSpriteTemplate
	.align	2, 0
	.type	 gBasicHitSplatSpriteTemplate,object
	.size	 gBasicHitSplatSpriteTemplate,24
gBasicHitSplatSpriteTemplate:
	.short	0x2797
	.short	0x2797
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_HitSplat
	.word	AnimHitSplatBasic
	.globl	gHandleInvertHitSplatSpriteTemplate
	.align	2, 0
	.type	 gHandleInvertHitSplatSpriteTemplate,object
	.size	 gHandleInvertHitSplatSpriteTemplate,24
gHandleInvertHitSplatSpriteTemplate:
	.short	0x2797
	.short	0x2797
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_HitSplat
	.word	AnimHitSplatHandleInvert
	.globl	gWaterHitSplatSpriteTemplate
	.align	2, 0
	.type	 gWaterHitSplatSpriteTemplate,object
	.size	 gWaterHitSplatSpriteTemplate,24
gWaterHitSplatSpriteTemplate:
	.short	0x27a4
	.short	0x27a4
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_HitSplat
	.word	AnimHitSplatBasic
	.globl	gRandomPosHitSplatSpriteTemplate
	.align	2, 0
	.type	 gRandomPosHitSplatSpriteTemplate,object
	.size	 gRandomPosHitSplatSpriteTemplate,24
gRandomPosHitSplatSpriteTemplate:
	.short	0x2797
	.short	0x2797
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_HitSplat
	.word	AnimHitSplatRandom
	.globl	gMonEdgeHitSplatSpriteTemplate
	.align	2, 0
	.type	 gMonEdgeHitSplatSpriteTemplate,object
	.size	 gMonEdgeHitSplatSpriteTemplate,24
gMonEdgeHitSplatSpriteTemplate:
	.short	0x2797
	.short	0x2797
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_HitSplat
	.word	AnimHitSplatOnMonEdge
	.globl	gCrossImpactSpriteTemplate
	.align	2, 0
	.type	 gCrossImpactSpriteTemplate,object
	.size	 gCrossImpactSpriteTemplate,24
gCrossImpactSpriteTemplate:
	.short	0x282d
	.short	0x282d
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimCrossImpact
	.globl	gFlashingHitSplatSpriteTemplate
	.align	2, 0
	.type	 gFlashingHitSplatSpriteTemplate,object
	.size	 gFlashingHitSplatSpriteTemplate,24
gFlashingHitSplatSpriteTemplate:
	.short	0x2797
	.short	0x2797
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_HitSplat
	.word	AnimFlashingHitSplat
	.globl	gPersistHitSplatSpriteTemplate
	.align	2, 0
	.type	 gPersistHitSplatSpriteTemplate,object
	.size	 gPersistHitSplatSpriteTemplate,24
gPersistHitSplatSpriteTemplate:
	.short	0x2797
	.short	0x2797
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_HitSplat
	.word	AnimHitSplatPersistent
.text
	.align	2, 0
	.type	 AnimMovePowerSwapGuardSwapWait,function
	.thumb_func
AnimMovePowerSwapGuardSwapWait:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L3:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 AnimMovePowerSwapGuardSwapWait,.Lfe1-AnimMovePowerSwapGuardSwapWait
	.align	2, 0
	.type	 AnimMovePowerSwapGuardSwap,function
	.thumb_func
AnimMovePowerSwapGuardSwap:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L8
	ldrb	r1, [r4, #0x4]
	bl	StartSpriteAnim
	mov	r1, #0x6
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L5	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r4, .L8+0x4
	b	.L7
.L9:
	.align	2, 0
.L8:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L5:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r4, .L10
.L7:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	ldr	r1, .L10+0x4
	ldrh	r0, [r1, #0x8]
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r5, #0x38]
	add	r0, r5, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L10+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L11:
	.align	2, 0
.L10:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimMovePowerSwapGuardSwapWait
.Lfe2:
	.size	 AnimMovePowerSwapGuardSwap,.Lfe2-AnimMovePowerSwapGuardSwap
	.align	2, 0
	.type	 AnimConfusionDuck,function
	.thumb_func
AnimConfusionDuck:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L15
	ldrh	r0, [r5]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r0, .L15+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L13	@cond_branch
	ldrh	r0, [r5, #0x6]
	neg	r0, r0
	strh	r0, [r4, #0x30]
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	b	.L14
.L16:
	.align	2, 0
.L15:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L13:
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x30]
	strh	r1, [r4, #0x36]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L14:
	ldr	r0, .L17
	ldrh	r0, [r0, #0x8]
	strh	r0, [r4, #0x34]
	ldr	r1, .L17+0x4
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	gBattleAnimArgs
	.word	AnimConfusionDuck_Step
.Lfe3:
	.size	 AnimConfusionDuck,.Lfe3-AnimConfusionDuck
	.align	2, 0
	.type	 AnimConfusionDuck_Step,function
	.thumb_func
AnimConfusionDuck_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x1e
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r1, #0xa
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x2e]
	cmp	r0, #0x7f
	bhi	.L20	@cond_branch
	ldrb	r0, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
	b	.L21
.L20:
	ldrb	r0, [r4, #0x5]
	mov	r1, #0xc
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
.L21:
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x2e]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L22	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L22:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 AnimConfusionDuck_Step,.Lfe4-AnimConfusionDuck_Step
	.align	2, 0
	.type	 AnimSimplePaletteBlend,function
	.thumb_func
AnimSimplePaletteBlend:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	ldr	r4, .L24
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	bl	UnpackSelectedBattleAnimPalettes
	mov	r1, #0x2
	ldrsb	r1, [r4, r1]
	ldrb	r2, [r4, #0x4]
	ldrb	r3, [r4, #0x6]
	ldrh	r4, [r4, #0x8]
	str	r4, [sp]
	bl	BeginNormalPaletteFade
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L24+0x4
	str	r0, [r5, #0x1c]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	gBattleAnimArgs
	.word	AnimSimplePaletteBlend_Step
.Lfe5:
	.size	 AnimSimplePaletteBlend,.Lfe5-AnimSimplePaletteBlend
	.align	2, 0
	.globl	UnpackSelectedBattleAnimPalettes
	.type	 UnpackSelectedBattleAnimPalettes,function
	.thumb_func
UnpackSelectedBattleAnimPalettes:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r4, #0x1
	mov	r8, r0
	mov	r1, r8
	and	r1, r1, r4
	mov	r8, r1
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x11
	and	r1, r1, r4
	asr	r2, r0, #0x12
	and	r2, r2, r4
	asr	r3, r0, #0x13
	and	r3, r3, r4
	asr	r6, r0, #0x14
	and	r6, r6, r4
	asr	r5, r0, #0x15
	and	r5, r5, r4
	asr	r0, r0, #0x16
	and	r0, r0, r4
	str	r6, [sp]
	str	r5, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, r8
	bl	sub_80A75AC
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 UnpackSelectedBattleAnimPalettes,.Lfe6-UnpackSelectedBattleAnimPalettes
	.align	2, 0
	.type	 AnimSimplePaletteBlend_Step,function
	.thumb_func
AnimSimplePaletteBlend_Step:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L29
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L28	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L28:
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	gPaletteFade
.Lfe7:
	.size	 AnimSimplePaletteBlend_Step,.Lfe7-AnimSimplePaletteBlend_Step
	.align	2, 0
	.type	 AnimComplexPaletteBlend,function
	.thumb_func
AnimComplexPaletteBlend:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L32
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0x2e]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x34]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x36]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r5, #0x38]
	ldrh	r0, [r4, #0xc]
	strh	r0, [r5, #0x3a]
	ldrh	r0, [r4]
	strh	r0, [r5, #0x3c]
	mov	r1, #0x3c
	ldrsh	r0, [r5, r1]
	bl	UnpackSelectedBattleAnimPalettes
	ldrb	r1, [r4, #0x8]
	ldrh	r2, [r4, #0x6]
	bl	BlendPalettes
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L32+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	gBattleAnimArgs
	.word	AnimComplexPaletteBlend_Step1
.Lfe8:
	.size	 AnimComplexPaletteBlend,.Lfe8-AnimComplexPaletteBlend
	.align	2, 0
	.type	 AnimComplexPaletteBlend_Step1,function
	.thumb_func
AnimComplexPaletteBlend_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L35	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	b	.L34
.L35:
	ldr	r0, .L40
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L34	@cond_branch
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L37	@cond_branch
	ldr	r0, .L40+0x4
	str	r0, [r4, #0x1c]
	b	.L34
.L41:
	.align	2, 0
.L40:
	.word	gPaletteFade
	.word	AnimComplexPaletteBlend_Step2
.L37:
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	bl	UnpackSelectedBattleAnimPalettes
	add	r3, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L38	@cond_branch
	ldrh	r1, [r4, #0x36]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrh	r2, [r4, #0x34]
	add	r0, r3, #0
	bl	BlendPalettes
	b	.L39
.L38:
	ldrh	r1, [r4, #0x3a]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrh	r2, [r4, #0x38]
	add	r0, r3, #0
	bl	BlendPalettes
.L39:
	ldrh	r0, [r4, #0x30]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r2, #0
	eor	r0, r0, r1
	strh	r0, [r4, #0x30]
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x32]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x32]
.L34:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 AnimComplexPaletteBlend_Step1,.Lfe9-AnimComplexPaletteBlend_Step1
	.align	2, 0
	.type	 AnimComplexPaletteBlend_Step2,function
	.thumb_func
AnimComplexPaletteBlend_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L44
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L43	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	bl	UnpackSelectedBattleAnimPalettes
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BlendPalettes
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L43:
	pop	{r4}
	pop	{r0}
	bx	r0
.L45:
	.align	2, 0
.L44:
	.word	gPaletteFade
.Lfe10:
	.size	 AnimComplexPaletteBlend_Step2,.Lfe10-AnimComplexPaletteBlend_Step2
	.align	2, 0
	.type	 sub_81159B4,function
	.thumb_func
sub_81159B4:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L47
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	mov	r2, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	strh	r2, [r4, #0x2e]
	mov	r0, #0xa
	strh	r0, [r4, #0x30]
	mov	r0, #0x8
	strh	r0, [r4, #0x32]
	mov	r0, #0x28
	strh	r0, [r4, #0x34]
	mov	r0, #0x70
	strh	r0, [r4, #0x36]
	strh	r2, [r4, #0x38]
	ldr	r1, .L47+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L47+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L48:
	.align	2, 0
.L47:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteInGrowingCircleOverDuration
.Lfe11:
	.size	 sub_81159B4,.Lfe11-sub_81159B4
	.align	2, 0
	.globl	AnimTask_BlendColorCycle
	.type	 AnimTask_BlendColorCycle,function
	.thumb_func
AnimTask_BlendColorCycle:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L50
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldr	r3, .L50+0x4
	ldrh	r1, [r3]
	mov	r5, #0x0
	strh	r1, [r4, #0x8]
	ldrh	r1, [r3, #0x2]
	strh	r1, [r4, #0xa]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r4, #0xc]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r4, #0xe]
	ldrh	r2, [r3, #0x8]
	strh	r2, [r4, #0x10]
	ldrh	r1, [r3, #0xa]
	strh	r1, [r4, #0x12]
	strh	r5, [r4, #0x18]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r1, #0x0
	bl	BlendColorCycle
	ldr	r0, .L50+0x8
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_BlendColorCycleLoop
.Lfe12:
	.size	 AnimTask_BlendColorCycle,.Lfe12-AnimTask_BlendColorCycle
	.align	2, 0
	.type	 BlendColorCycle,function
	.thumb_func
BlendColorCycle:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r1, .L53
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	bl	UnpackSelectedBattleAnimPalettes
	mov	r1, #0xa
	ldrsb	r1, [r4, r1]
	ldrh	r2, [r4, #0x12]
	str	r2, [sp]
	add	r2, r5, #0
	add	r3, r6, #0
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x18]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x18]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gTasks
.Lfe13:
	.size	 BlendColorCycle,.Lfe13-BlendColorCycle
	.align	2, 0
	.type	 AnimTask_BlendColorCycleLoop,function
	.thumb_func
AnimTask_BlendColorCycleLoop:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r4, r3, #0
	ldr	r0, .L62
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L56	@cond_branch
	ldr	r1, .L62+0x4
	lsl	r2, r3, #0x2
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r5, #0xc
	ldrsh	r0, [r3, r5]
	add	r6, r1, #0
	add	r5, r2, #0
	cmp	r0, #0
	ble	.L57	@cond_branch
	mov	r1, #0x18
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L58	@cond_branch
	ldrb	r1, [r3, #0xe]
	ldrb	r2, [r3, #0x10]
	b	.L59
.L63:
	.align	2, 0
.L62:
	.word	gPaletteFade
	.word	gTasks
.L58:
	ldrb	r1, [r3, #0x10]
	ldrb	r2, [r3, #0xe]
.L59:
	add	r0, r5, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mov	r3, #0xc
	ldrsh	r0, [r0, r3]
	cmp	r0, #0x1
	bne	.L60	@cond_branch
	mov	r2, #0x0
.L60:
	add	r0, r4, #0
	bl	BlendColorCycle
	b	.L56
.L57:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L56:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 AnimTask_BlendColorCycleLoop,.Lfe14-AnimTask_BlendColorCycleLoop
	.align	2, 0
	.globl	AnimTask_BlendColorCycleExclude
	.type	 AnimTask_BlendColorCycleExclude,function
	.thumb_func
AnimTask_BlendColorCycleExclude:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	ldr	r3, .L72
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldr	r2, .L72+0x4
	ldrh	r1, [r2]
	strh	r1, [r0, #0x8]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r2, #0x6]
	strh	r1, [r0, #0xe]
	ldrh	r1, [r2, #0x8]
	strh	r1, [r0, #0x10]
	ldrh	r1, [r2, #0xa]
	strh	r1, [r0, #0x12]
	strh	r5, [r0, #0x18]
	mov	r4, #0x0
	ldr	r0, .L72+0x8
	ldrb	r1, [r0]
	mov	r9, r3
	mov	r8, r2
	cmp	r5, r1
	bge	.L66	@cond_branch
	ldr	r0, .L72+0xc
	ldrb	r3, [r0]
	ldr	r7, .L72+0x10
	mov	r0, #0x1
	mov	ip, r0
	add	r2, r1, #0
.L68:
	cmp	r4, r3
	beq	.L67	@cond_branch
	ldrb	r1, [r7]
	cmp	r4, r1
	beq	.L67	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x10
	mov	r0, ip
	lsl	r0, r0, r1
	orr	r5, r5, r0
.L67:
	add	r4, r4, #0x1
	cmp	r4, r2
	blt	.L68	@cond_branch
.L66:
	mov	r2, r8
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x1
	bne	.L71	@cond_branch
	mov	r0, #0xe
	orr	r5, r5, r0
.L71:
	lsl	r4, r6, #0x2
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	add	r4, r4, r9
	lsr	r0, r5, #0x10
	strh	r0, [r4, #0x1a]
	mov	r0, #0xff
	and	r5, r5, r0
	strh	r5, [r4, #0x1c]
	ldrb	r2, [r4, #0x10]
	add	r0, r6, #0
	mov	r1, #0x0
	bl	BlendColorCycleExclude
	ldr	r0, .L72+0x14
	str	r0, [r4]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattlersCount
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	AnimTask_BlendColorCycleExcludeLoop
.Lfe15:
	.size	 AnimTask_BlendColorCycleExclude,.Lfe15-AnimTask_BlendColorCycleExclude
	.align	2, 0
	.type	 BlendColorCycleExclude,function
	.thumb_func
BlendColorCycleExclude:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r1, #0
	add	r3, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r1, .L75
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldrh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	ldrh	r1, [r4, #0x1c]
	orr	r0, r0, r1
	mov	r1, #0xa
	ldrsb	r1, [r4, r1]
	ldrh	r2, [r4, #0x12]
	str	r2, [sp]
	add	r2, r5, #0
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x18]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x18]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gTasks
.Lfe16:
	.size	 BlendColorCycleExclude,.Lfe16-BlendColorCycleExclude
	.align	2, 0
	.type	 AnimTask_BlendColorCycleExcludeLoop,function
	.thumb_func
AnimTask_BlendColorCycleExcludeLoop:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r4, r3, #0
	ldr	r0, .L84
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L78	@cond_branch
	ldr	r1, .L84+0x4
	lsl	r2, r3, #0x2
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r5, #0xc
	ldrsh	r0, [r3, r5]
	add	r6, r1, #0
	add	r5, r2, #0
	cmp	r0, #0
	ble	.L79	@cond_branch
	mov	r1, #0x18
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L80	@cond_branch
	ldrb	r1, [r3, #0xe]
	ldrb	r2, [r3, #0x10]
	b	.L81
.L85:
	.align	2, 0
.L84:
	.word	gPaletteFade
	.word	gTasks
.L80:
	ldrb	r1, [r3, #0x10]
	ldrb	r2, [r3, #0xe]
.L81:
	add	r0, r5, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mov	r3, #0xc
	ldrsh	r0, [r0, r3]
	cmp	r0, #0x1
	bne	.L82	@cond_branch
	mov	r2, #0x0
.L82:
	add	r0, r4, #0
	bl	BlendColorCycleExclude
	b	.L78
.L79:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L78:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 AnimTask_BlendColorCycleExcludeLoop,.Lfe17-AnimTask_BlendColorCycleExcludeLoop
	.align	2, 0
	.globl	AnimTask_BlendColorCycleByTag
	.type	 AnimTask_BlendColorCycleByTag,function
	.thumb_func
AnimTask_BlendColorCycleByTag:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L87
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldr	r3, .L87+0x4
	ldrh	r1, [r3]
	mov	r5, #0x0
	strh	r1, [r4, #0x8]
	ldrh	r1, [r3, #0x2]
	strh	r1, [r4, #0xa]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r4, #0xc]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r4, #0xe]
	ldrh	r2, [r3, #0x8]
	strh	r2, [r4, #0x10]
	ldrh	r1, [r3, #0xa]
	strh	r1, [r4, #0x12]
	strh	r5, [r4, #0x18]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r1, #0x0
	bl	BlendColorCycleByTag
	ldr	r0, .L87+0x8
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_BlendColorCycleByTagLoop
.Lfe18:
	.size	 AnimTask_BlendColorCycleByTag,.Lfe18-AnimTask_BlendColorCycleByTag
	.align	2, 0
	.type	 BlendColorCycleByTag,function
	.thumb_func
BlendColorCycleByTag:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r1, .L90
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldrh	r0, [r4, #0x8]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r2, #0x1
	lsl	r2, r2, r0
	mov	r1, #0xa
	ldrsb	r1, [r4, r1]
	ldrh	r0, [r4, #0x12]
	str	r0, [sp]
	add	r0, r2, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x18]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x18]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gTasks
.Lfe19:
	.size	 BlendColorCycleByTag,.Lfe19-BlendColorCycleByTag
	.align	2, 0
	.type	 AnimTask_BlendColorCycleByTagLoop,function
	.thumb_func
AnimTask_BlendColorCycleByTagLoop:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r4, r3, #0
	ldr	r0, .L99
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L93	@cond_branch
	ldr	r1, .L99+0x4
	lsl	r2, r3, #0x2
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r5, #0xc
	ldrsh	r0, [r3, r5]
	add	r6, r1, #0
	add	r5, r2, #0
	cmp	r0, #0
	ble	.L94	@cond_branch
	mov	r1, #0x18
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L95	@cond_branch
	ldrb	r1, [r3, #0xe]
	ldrb	r2, [r3, #0x10]
	b	.L96
.L100:
	.align	2, 0
.L99:
	.word	gPaletteFade
	.word	gTasks
.L95:
	ldrb	r1, [r3, #0x10]
	ldrb	r2, [r3, #0xe]
.L96:
	add	r0, r5, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mov	r3, #0xc
	ldrsh	r0, [r0, r3]
	cmp	r0, #0x1
	bne	.L97	@cond_branch
	mov	r2, #0x0
.L97:
	add	r0, r4, #0
	bl	BlendColorCycleByTag
	b	.L93
.L94:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L93:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 AnimTask_BlendColorCycleByTagLoop,.Lfe20-AnimTask_BlendColorCycleByTagLoop
	.align	2, 0
	.globl	AnimTask_FlashAnimTagWithColor
	.type	 AnimTask_FlashAnimTagWithColor,function
	.thumb_func
AnimTask_FlashAnimTagWithColor:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L102
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldr	r5, .L102+0x4
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x8]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0xa]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0xc]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x10]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r4, #0x12]
	ldrh	r0, [r5, #0xc]
	strh	r0, [r4, #0x14]
	ldrh	r0, [r5]
	strh	r0, [r4, #0x16]
	ldrh	r0, [r5]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r1, #0x1
	lsl	r1, r1, r0
	ldrb	r3, [r5, #0x8]
	ldrh	r0, [r5, #0x6]
	str	r0, [sp]
	add	r0, r1, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	BeginNormalPaletteFade
	ldr	r0, .L102+0x8
	str	r0, [r4]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L103:
	.align	2, 0
.L102:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_FlashAnimTagWithColor_Step1
.Lfe21:
	.size	 AnimTask_FlashAnimTagWithColor,.Lfe21-AnimTask_FlashAnimTagWithColor
	.align	2, 0
	.type	 AnimTask_FlashAnimTagWithColor_Step1,function
	.thumb_func
AnimTask_FlashAnimTagWithColor_Step1:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L110
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0x8]
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L105	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x8]
	b	.L104
.L111:
	.align	2, 0
.L110:
	.word	gTasks
.L105:
	ldr	r0, .L112
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L104	@cond_branch
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bne	.L107	@cond_branch
	ldr	r0, .L112+0x4
	str	r0, [r4]
	b	.L104
.L113:
	.align	2, 0
.L112:
	.word	gPaletteFade
	.word	AnimTask_FlashAnimTagWithColor_Step2
.L107:
	ldrh	r0, [r4, #0x16]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r2, #0x1
	lsl	r2, r2, r0
	ldrh	r1, [r4, #0xa]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L108	@cond_branch
	ldrb	r3, [r4, #0x10]
	ldrh	r0, [r4, #0xe]
	str	r0, [sp]
	add	r0, r2, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	BeginNormalPaletteFade
	b	.L109
.L108:
	ldrb	r3, [r4, #0x14]
	ldrh	r0, [r4, #0x12]
	str	r0, [sp]
	add	r0, r2, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	BeginNormalPaletteFade
.L109:
	ldr	r0, .L114
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xa]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r2, r3, #0
	eor	r0, r0, r2
	strh	r0, [r1, #0xa]
	mov	r2, #0xff
	and	r0, r0, r2
	strh	r0, [r1, #0x8]
	ldrh	r0, [r1, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xc]
.L104:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L115:
	.align	2, 0
.L114:
	.word	gTasks
.Lfe22:
	.size	 AnimTask_FlashAnimTagWithColor_Step1,.Lfe22-AnimTask_FlashAnimTagWithColor_Step1
	.align	2, 0
	.type	 AnimTask_FlashAnimTagWithColor_Step2,function
	.thumb_func
AnimTask_FlashAnimTagWithColor_Step2:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L118
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L117	@cond_branch
	ldr	r1, .L118+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x16]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r1, #0x1
	lsl	r1, r1, r0
	str	r5, [sp]
	add	r0, r1, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L117:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L119:
	.align	2, 0
.L118:
	.word	gPaletteFade
	.word	gTasks
.Lfe23:
	.size	 AnimTask_FlashAnimTagWithColor_Step2,.Lfe23-AnimTask_FlashAnimTagWithColor_Step2
	.align	2, 0
	.globl	AnimTask_InvertScreenColor
	.type	 AnimTask_InvertScreenColor,function
	.thumb_func
AnimTask_InvertScreenColor:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0x0
	ldr	r5, .L126
	ldrh	r1, [r5]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L121	@cond_branch
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80A75AC
	add	r4, r0, #0
.L121:
	ldrh	r2, [r5]
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L122	@cond_branch
	ldr	r1, .L126+0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	ldrb	r1, [r1]
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L122:
	mov	r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L123	@cond_branch
	ldr	r1, .L126+0x8
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	ldrb	r1, [r1]
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L123:
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L124	@cond_branch
	ldr	r6, .L126+0x8
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L124	@cond_branch
	ldrb	r0, [r6]
	add	r1, r5, #0
	eor	r1, r1, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L124:
	ldr	r0, .L126
	ldrh	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L125	@cond_branch
	ldr	r6, .L126+0x4
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L125	@cond_branch
	ldrb	r0, [r6]
	add	r1, r5, #0
	eor	r1, r1, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L125:
	add	r0, r4, #0
	bl	InvertPlttBuffer
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L127:
	.align	2, 0
.L126:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.Lfe24:
	.size	 AnimTask_InvertScreenColor,.Lfe24-AnimTask_InvertScreenColor
	.align	2, 0
	.globl	sub_8115F94
	.type	 sub_8115F94,function
	.thumb_func
sub_8115F94:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r1, .L135
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L129	@cond_branch
	ldr	r1, .L135+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0xc]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x10]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0xa]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x12]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x14]
	ldrh	r0, [r1, #0xc]
	strh	r0, [r4, #0x16]
.L129:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	ldr	r0, .L135+0x8
	ldrb	r0, [r0]
	mov	r9, r0
	ldr	r0, .L135+0xc
	ldrb	r0, [r0]
	mov	sl, r0
	ldrh	r1, [r4, #0xc]
	mov	r7, #0x80
	lsl	r7, r7, #0x1
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L130	@cond_branch
	ldr	r5, .L135+0x10
.L130:
	mov	r6, #0x1
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L131	@cond_branch
	ldr	r2, .L135+0x14
	ldr	r0, .L135+0x18
	add	r0, r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x14
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x2]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r6, #0
	lsl	r1, r1, r0
	lsl	r1, r1, #0x10
	orr	r5, r5, r1
.L131:
	ldrh	r1, [r4, #0xe]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L132	@cond_branch
	add	r0, r6, #0
	mov	r2, r9
	lsl	r0, r0, r2
	lsl	r0, r0, #0x10
	orr	r5, r5, r0
.L132:
	ldrh	r1, [r4, #0x10]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L133	@cond_branch
	add	r0, r6, #0
	mov	r1, sl
	lsl	r0, r0, r1
	lsl	r0, r0, #0x10
	orr	r5, r5, r0
.L133:
	mov	r1, #0x12
	ldrsb	r1, [r4, r1]
	mov	r2, #0x14
	ldrsb	r2, [r4, r2]
	mov	r3, #0x16
	ldrsb	r3, [r4, r3]
	add	r0, r5, #0
	bl	TintPlttBuffer
	mov	r2, #0x8
	ldrsh	r1, [r4, r2]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L134	@cond_branch
	add	r0, r5, #0
	bl	UnfadePlttBuffer
	mov	r0, r8
	bl	DestroyAnimVisualTask
.L134:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	0xffff
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe25:
	.size	 sub_8115F94,.Lfe25-sub_8115F94
	.align	2, 0
	.type	 AnimShakeMonOrBattleTerrain,function
	.thumb_func
AnimShakeMonOrBattleTerrain:
	push	{r4, lr}
	add	r4, r0, #0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L147
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x34]
	mov	r2, #0x6
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	beq	.L140	@cond_branch
	cmp	r0, #0x1
	bgt	.L144	@cond_branch
	cmp	r0, #0
	beq	.L139	@cond_branch
	b	.L142
.L148:
	.align	2, 0
.L147:
	.word	gBattleAnimArgs
.L144:
	cmp	r0, #0x2
	beq	.L141	@cond_branch
	b	.L142
.L139:
	ldr	r1, .L149
	b	.L146
.L150:
	.align	2, 0
.L149:
	.word	gBattle_BG3_X
.L140:
	ldr	r1, .L151
	b	.L146
.L152:
	.align	2, 0
.L151:
	.word	gBattle_BG3_Y
.L141:
	ldr	r1, .L153
.L146:
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	b	.L138
.L154:
	.align	2, 0
.L153:
	.word	gSpriteCoordOffsetX
.L142:
	ldr	r1, .L155
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
.L138:
	mov	r0, #0x3a
	ldrsh	r1, [r4, r0]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrh	r0, [r1]
	strh	r0, [r4, #0x36]
	ldr	r0, .L155+0x4
	ldrh	r0, [r0, #0x6]
	strh	r0, [r4, #0x38]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L145	@cond_branch
	bl	AnimShakeMonOrBattleTerrain_UpdateCoordOffsetEnabled
.L145:
	ldr	r0, .L155+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L156:
	.align	2, 0
.L155:
	.word	gSpriteCoordOffsetY
	.word	gBattleAnimArgs
	.word	AnimShakeMonOrBattleTerrain_Step
.Lfe26:
	.size	 AnimShakeMonOrBattleTerrain,.Lfe26-AnimShakeMonOrBattleTerrain
	.align	2, 0
	.type	 AnimShakeMonOrBattleTerrain_Step,function
	.thumb_func
AnimShakeMonOrBattleTerrain_Step:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x34]
	mov	r2, #0x34
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L158	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x34]
	ldrh	r1, [r3, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L159	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x30]
	b	.L161
.L159:
	ldrh	r0, [r3, #0x32]
	strh	r0, [r3, #0x30]
	mov	r0, #0x3a
	ldrsh	r1, [r3, r0]
	mov	r2, #0x3c
	ldrsh	r0, [r3, r2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrh	r0, [r3, #0x2e]
	ldrh	r2, [r1]
	add	r0, r0, r2
	strh	r0, [r1]
	ldrh	r0, [r3, #0x2e]
	neg	r0, r0
	strh	r0, [r3, #0x2e]
	b	.L161
.L158:
	mov	r0, #0x3a
	ldrsh	r1, [r3, r0]
	mov	r2, #0x3c
	ldrsh	r0, [r3, r2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrh	r0, [r3, #0x36]
	strh	r0, [r1]
	ldrh	r0, [r3, #0x38]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L162	@cond_branch
	mov	r4, #0x0
	ldr	r5, .L168
	ldrb	r0, [r5]
	cmp	r4, r0
	bcs	.L162	@cond_branch
	ldr	r2, .L168+0x4
	mov	ip, r2
	ldr	r6, .L168+0x8
	mov	r7, #0x3
	neg	r7, r7
.L166:
	add	r0, r4, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r5]
	cmp	r4, r0
	bcc	.L166	@cond_branch
.L162:
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L161:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	gBattlersCount
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe27:
	.size	 AnimShakeMonOrBattleTerrain_Step,.Lfe27-AnimShakeMonOrBattleTerrain_Step
	.align	2, 0
	.type	 AnimShakeMonOrBattleTerrain_UpdateCoordOffsetEnabled,function
	.thumb_func
AnimShakeMonOrBattleTerrain_UpdateCoordOffsetEnabled:
	push	{r4, r5, r6, lr}
	ldr	r6, .L177
	ldr	r4, .L177+0x4
	ldr	r5, .L177+0x8
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	add	r1, r1, #0x3e
	ldrb	r3, [r1]
	mov	r2, #0x3
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r3
	strb	r0, [r1]
	ldr	r3, .L177+0xc
	ldrb	r0, [r3]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	and	r2, r2, r1
	strb	r2, [r0]
	ldr	r0, .L177+0x10
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x2
	bne	.L171	@cond_branch
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r3]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	b	.L175
.L178:
	.align	2, 0
.L177:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L171:
	cmp	r0, #0
	bne	.L173	@cond_branch
	ldrb	r0, [r5]
	b	.L176
.L173:
	ldrb	r0, [r3]
.L176:
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x2
.L175:
	orr	r1, r1, r2
	strb	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 AnimShakeMonOrBattleTerrain_UpdateCoordOffsetEnabled,.Lfe28-AnimShakeMonOrBattleTerrain_UpdateCoordOffsetEnabled
	.align	2, 0
	.globl	AnimTask_ShakeBattleTerrain
	.type	 AnimTask_ShakeBattleTerrain,function
	.thumb_func
AnimTask_ShakeBattleTerrain:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L180
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	ldr	r3, .L180+0x4
	ldrh	r1, [r3]
	strh	r1, [r2, #0x8]
	ldrh	r1, [r3, #0x2]
	strh	r1, [r2, #0xa]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r2, #0xc]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r2, #0xe]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r2, #0x18]
	ldr	r4, .L180+0x8
	ldrh	r1, [r3]
	strh	r1, [r4]
	ldr	r4, .L180+0xc
	ldrh	r1, [r3, #0x2]
	strh	r1, [r4]
	ldr	r1, .L180+0x10
	str	r1, [r2]
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L181:
	.align	2, 0
.L180:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	AnimTask_ShakeBattleTerrain_Step
.Lfe29:
	.size	 AnimTask_ShakeBattleTerrain,.Lfe29-AnimTask_ShakeBattleTerrain
	.align	2, 0
	.type	 AnimTask_ShakeBattleTerrain_Step,function
	.thumb_func
AnimTask_ShakeBattleTerrain_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L192
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrh	r2, [r3, #0xe]
	mov	r4, #0xe
	ldrsh	r0, [r3, r4]
	mov	ip, r1
	cmp	r0, #0
	bne	.L183	@cond_branch
	ldr	r0, .L192+0x4
	ldrh	r2, [r0]
	mov	r7, #0x8
	ldrsh	r1, [r3, r7]
	add	r6, r0, #0
	cmp	r2, r1
	bne	.L184	@cond_branch
	ldrh	r0, [r3, #0x8]
	neg	r0, r0
	b	.L190
.L193:
	.align	2, 0
.L192:
	.word	gTasks
	.word	gBattle_BG3_X
.L184:
	ldrh	r0, [r3, #0x8]
.L190:
	strh	r0, [r6]
	ldr	r2, .L194
	ldrh	r3, [r2]
	lsl	r1, r5, #0x2
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	mov	r7, ip
	add	r4, r0, r7
	mov	r7, #0xa
	ldrsh	r0, [r4, r7]
	cmn	r3, r0
	bne	.L186	@cond_branch
	mov	r0, #0x0
	b	.L191
.L195:
	.align	2, 0
.L194:
	.word	gBattle_BG3_Y
.L186:
	ldrh	r0, [r4, #0xa]
	neg	r0, r0
.L191:
	strh	r0, [r2]
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	ldrh	r1, [r0, #0x18]
	strh	r1, [r0, #0xe]
	ldrh	r1, [r0, #0xc]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0xc]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0
	bne	.L189	@cond_branch
	strh	r1, [r6]
	strh	r1, [r2]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L189
.L183:
	sub	r0, r2, #0x1
	strh	r0, [r3, #0xe]
.L189:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 AnimTask_ShakeBattleTerrain_Step,.Lfe30-AnimTask_ShakeBattleTerrain_Step
	.align	2, 0
	.globl	AnimHitSplatBasic
	.type	 AnimHitSplatBasic,function
	.thumb_func
AnimHitSplatBasic:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L199
	ldrb	r1, [r4, #0x6]
	bl	StartSpriteAffineAnim
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L197	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	b	.L198
.L200:
	.align	2, 0
.L199:
	.word	gBattleAnimArgs
.L197:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
.L198:
	ldr	r0, .L201
	str	r0, [r5, #0x1c]
	ldr	r1, .L201+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L202:
	.align	2, 0
.L201:
	.word	RunStoredCallbackWhenAffineAnimEnds
	.word	DestroyAnimSprite
.Lfe31:
	.size	 AnimHitSplatBasic,.Lfe31-AnimHitSplatBasic
	.align	2, 0
	.type	 AnimHitSplatPersistent,function
	.thumb_func
AnimHitSplatPersistent:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L206
	ldrb	r1, [r4, #0x6]
	bl	StartSpriteAffineAnim
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L204	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	b	.L205
.L207:
	.align	2, 0
.L206:
	.word	gBattleAnimArgs
.L204:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
.L205:
	ldr	r0, .L208
	ldrh	r0, [r0, #0x8]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L208+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L208+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L209:
	.align	2, 0
.L208:
	.word	gBattleAnimArgs
	.word	RunStoredCallbackWhenAffineAnimEnds
	.word	DestroyAnimSpriteAfterTimer
.Lfe32:
	.size	 AnimHitSplatPersistent,.Lfe32-AnimHitSplatPersistent
	.align	2, 0
	.type	 AnimHitSplatHandleInvert,function
	.thumb_func
AnimHitSplatHandleInvert:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L212
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L211	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L211	@cond_branch
	ldr	r1, .L212+0x4
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L211:
	add	r0, r4, #0
	bl	AnimHitSplatBasic
	pop	{r4}
	pop	{r0}
	bx	r0
.L213:
	.align	2, 0
.L212:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe33:
	.size	 AnimHitSplatHandleInvert,.Lfe33-AnimHitSplatHandleInvert
	.align	2, 0
	.globl	AnimHitSplatRandom
	.type	 AnimHitSplatRandom,function
	.thumb_func
AnimHitSplatRandom:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L217
	mov	r0, #0x2
	ldrsh	r1, [r5, r0]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L215	@cond_branch
	bl	Random2
	mov	r1, #0x3
	and	r1, r1, r0
	strh	r1, [r5, #0x2]
.L215:
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	add	r1, r4, #0
	mov	r2, #0x0
	bl	InitSpritePosToAnimBattler
	cmp	r0, #0
	beq	.L214	@cond_branch
	ldrb	r1, [r5, #0x2]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x30
	bl	__umodsi3
	ldr	r1, .L217+0x4
	add	r0, r0, r1
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x18
	bl	__umodsi3
	ldr	r1, .L217+0x8
	add	r0, r0, r1
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldr	r1, .L217+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L217+0x10
	str	r0, [r4, #0x1c]
.L214:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L218:
	.align	2, 0
.L217:
	.word	gBattleAnimArgs
	.word	0xffe8
	.word	0xfff4
	.word	DestroySpriteAndMatrix
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe34:
	.size	 AnimHitSplatRandom,.Lfe34-AnimHitSplatRandom
	.align	2, 0
	.globl	AnimHitSplatOnMonEdge
	.type	 AnimHitSplatOnMonEdge,function
	.thumb_func
AnimHitSplatOnMonEdge:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L220
	ldrb	r0, [r5]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x2e]
	ldr	r2, .L220+0x4
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	ldrh	r0, [r0, #0x20]
	add	r1, r1, r0
	strh	r1, [r4, #0x20]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r1, r1, r0
	strh	r1, [r4, #0x22]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x24]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x26]
	ldrb	r1, [r5, #0x6]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	ldr	r1, .L220+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L220+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L221:
	.align	2, 0
.L220:
	.word	gBattleAnimArgs
	.word	gSprites
	.word	DestroySpriteAndMatrix
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe35:
	.size	 AnimHitSplatOnMonEdge,.Lfe35-AnimHitSplatOnMonEdge
	.align	2, 0
	.globl	AnimCrossImpact
	.type	 AnimCrossImpact,function
	.thumb_func
AnimCrossImpact:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L225
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L223	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	b	.L224
.L226:
	.align	2, 0
.L225:
	.word	gBattleAnimArgs
.L223:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
.L224:
	ldr	r0, .L227
	ldrh	r0, [r0, #0x6]
	strh	r0, [r4, #0x2e]
	ldr	r1, .L227+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L227+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L228:
	.align	2, 0
.L227:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	WaitAnimForDuration
.Lfe36:
	.size	 AnimCrossImpact,.Lfe36-AnimCrossImpact
	.align	2, 0
	.globl	AnimFlashingHitSplat
	.type	 AnimFlashingHitSplat,function
	.thumb_func
AnimFlashingHitSplat:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L232
	ldrb	r1, [r4, #0x6]
	bl	StartSpriteAffineAnim
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L230	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	b	.L231
.L233:
	.align	2, 0
.L232:
	.word	gBattleAnimArgs
.L230:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
.L231:
	ldr	r0, .L234
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L235:
	.align	2, 0
.L234:
	.word	AnimFlashingHitSplat_Step
.Lfe37:
	.size	 AnimFlashingHitSplat,.Lfe37-AnimFlashingHitSplat
	.align	2, 0
	.globl	AnimFlashingHitSplat_Step
	.type	 AnimFlashingHitSplat_Step,function
	.thumb_func
AnimFlashingHitSplat_Step:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x2e]
	add	r1, r0, #0x1
	strh	r1, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L237	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L237:
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 AnimFlashingHitSplat_Step,.Lfe38-AnimFlashingHitSplat_Step
.text
	.align	2, 0

