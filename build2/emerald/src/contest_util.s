@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sContestResults,object
	.size	 sContestResults,4
sContestResults:
	.word	0x0
	.section .rodata
	.align	1, 0
	.type	 sUnknown_0858D6B0,object
sUnknown_0858D6B0:
	.short	0x0
	.short	0x2529
	.short	0x1f
	.short	0x3e0
	.short	0x7c00
	.short	0x3ff
	.short	0x7fe0
	.short	0x7c1f
	.short	0x675a
	.short	0x0
	.short	0x0
	.short	0x779c
	.short	0x7fff
	.short	0x7f33
	.short	0x72ef
	.short	0x7fff
	.size	 sUnknown_0858D6B0,32
	.type	 sUnknown_0858D6D0,object
sUnknown_0858D6D0:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x50
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x99
	.byte	0x0
	.byte	0x50
	.byte	0x99
	.byte	0x88
	.byte	0x0
	.byte	0x95
	.byte	0x88
	.byte	0x22
	.byte	0x0
	.byte	0x95
	.byte	0x28
	.byte	0x11
	.byte	0x0
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x99
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x99
	.byte	0x5
	.byte	0x0
	.byte	0x22
	.byte	0x88
	.byte	0x59
	.byte	0x0
	.byte	0x11
	.byte	0x82
	.byte	0x59
	.byte	0x0
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x0
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x0
	.byte	0x95
	.byte	0x28
	.byte	0x11
	.byte	0x0
	.byte	0x95
	.byte	0x88
	.byte	0x22
	.byte	0x0
	.byte	0x50
	.byte	0x99
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x99
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x82
	.byte	0x59
	.byte	0x0
	.byte	0x22
	.byte	0x88
	.byte	0x59
	.byte	0x0
	.byte	0x88
	.byte	0x99
	.byte	0x5
	.byte	0x0
	.byte	0x99
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sUnknown_0858D6D0,256
	.align	1, 0
	.type	 sMiscBlank_Pal,object
sMiscBlank_Pal:
	.short	0x0
	.short	0x7fff
	.short	0x62f7
	.short	0x4610
	.short	0x3d8c
	.short	0x3528
	.short	0x2cc5
	.short	0x53f2
	.short	0x3bd1
	.short	0x1f28
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x675a
	.short	0x2529
	.size	 sMiscBlank_Pal,32
	.align	2, 0
	.type	 sOamData_858D7F0,object
	.size	 sOamData_858D7F0,8
sOamData_858D7F0:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x2c
	.short	0x0
	.align	2, 0
	.type	 sSpriteTemplate_858D7F8,object
	.size	 sSpriteTemplate_858D7F8,24
sSpriteTemplate_858D7F8:
	.short	0xbc1
	.short	0xbc1
	.word	sOamData_858D7F0
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0858D810,object
sUnknown_0858D810:
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc1
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc2
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc3
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc4
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc5
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc6
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc7
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc8
	.size	 sUnknown_0858D810,64
	.align	2, 0
	.type	 sUnknown_0858D850,object
	.size	 sUnknown_0858D850,8
sUnknown_0858D850:
	.word	sMiscBlank_Pal
	.short	0xbc1
	.space	2
	.align	2, 0
	.type	 sOamData_Confetti,object
	.size	 sOamData_Confetti,8
sOamData_Confetti:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sSpriteTemplate_Confetti,object
	.size	 sSpriteTemplate_Confetti,24
sSpriteTemplate_Confetti:
	.short	0xbc9
	.short	0xbc9
	.word	sOamData_Confetti
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_Confetti
	.align	2, 0
	.type	 sSpriteSheet_Confetti,object
	.size	 sSpriteSheet_Confetti,8
sSpriteSheet_Confetti:
	.word	gConfetti_Gfx
	.short	0x220
	.short	0xbc9
	.align	2, 0
	.type	 sSpritePalette_Confetti,object
	.size	 sSpritePalette_Confetti,8
sSpritePalette_Confetti:
	.word	gConfetti_Pal
	.short	0xbc9
	.space	2
	.align	2, 0
	.type	 sBgTemplates,object
	.size	 sBgTemplates,16
sBgTemplates:
	.byte	0xe0
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0x81
	.byte	0x31
	.byte	0x0
	.space	1
	.byte	0xc2
	.byte	0x31
	.byte	0x0
	.space	1
	.byte	0xa3
	.byte	0x31
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sWindowTemplates,object
sWindowTemplates:
	.byte	0x1
	.byte	0x7
	.byte	0x4
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x302
	.byte	0x1
	.byte	0x7
	.byte	0x7
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x31a
	.byte	0x1
	.byte	0x7
	.byte	0xa
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x332
	.byte	0x1
	.byte	0x7
	.byte	0xd
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x34a
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sWindowTemplates,40
	.align	2, 0
	.type	 sUnknown_0858D8C0,object
	.size	 sUnknown_0858D8C0,8
sUnknown_0858D8C0:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sSpriteTemplate_858D8C8,object
	.size	 sSpriteTemplate_858D8C8,24
sSpriteTemplate_858D8C8:
	.short	0x56ce
	.short	0x0
	.word	sUnknown_0858D8C0
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0858D8E0,object
	.size	 sUnknown_0858D8E0,8
sUnknown_0858D8E0:
	.word	gMiscBlank_Gfx
	.short	0x200
	.short	0x56ce
	.type	 sContestLinkTextColors,object
	.size	 sContestLinkTextColors,4
sContestLinkTextColors:
	.byte	0x1
	.byte	0xf
	.byte	0xe
	.space	1
.text
	.align	2, 0
	.type	 InitContestResultsDisplay,function
	.thumb_func
InitContestResultsDisplay:
	push	{r4, lr}
	mov	r0, #0x0
	mov	r1, #0x40
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L8
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	mov	r4, #0x0
.L6:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L8+0x4
	ldr	r1, [r1]
	lsl	r2, r4, #0x2
	add	r1, r1, #0xc
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	SetBgTilemapBuffer
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L6	@cond_branch
	ldr	r0, .L8+0x8
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L8+0xc
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L8+0x10
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x42
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x46
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x10
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x16
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x18
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1c
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1e
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r0, .L8+0x14
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L8+0x18
	strh	r1, [r0]
	ldr	r0, .L8+0x1c
	strh	r1, [r0]
	ldr	r0, .L8+0x20
	strh	r1, [r0]
	ldr	r0, .L8+0x24
	strh	r1, [r0]
	ldr	r0, .L8+0x28
	strh	r1, [r0]
	ldr	r0, .L8+0x2c
	strh	r1, [r0]
	ldr	r0, .L8+0x30
	strh	r1, [r0]
	ldr	r0, .L8+0x34
	strh	r1, [r0]
	ldr	r0, .L8+0x38
	strh	r1, [r0]
	ldr	r0, .L8+0x3c
	strh	r1, [r0]
	ldr	r0, .L8+0x40
	strh	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	sBgTemplates
	.word	sContestResults
	.word	sWindowTemplates
	.word	0x3f3f
	.word	0x3f2e
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
.Lfe1:
	.size	 InitContestResultsDisplay,.Lfe1-InitContestResultsDisplay
	.align	2, 0
	.type	 LoadContestResultsBgGfx,function
	.thumb_func
LoadContestResultsBgGfx:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	ldr	r0, .L26
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	bl	LZDecompressVram
	ldr	r1, .L26+0x4
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	ldr	r1, .L26+0x8
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	ldr	r1, .L26+0xc
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	bl	LoadContestResultsTilemaps
	ldr	r0, .L26+0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	mov	r1, #0x0
	bl	LoadCompressedPalette
	ldr	r0, .L26+0x14
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r7, #0x0
	mov	r0, #0x1
	mov	r8, r0
.L14:
	lsl	r5, r7, #0x18
	lsr	r5, r5, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetNumPreliminaryPoints
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetNumRound2Points
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	mov	r6, #0x0
	lsl	r1, r7, #0x1
	add	r2, r7, #0x1
	str	r2, [sp, #0xc]
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	mov	sl, r4
	add	r1, r1, r7
	add	r0, r1, #0x6
	lsl	r0, r0, #0x18
	mov	r9, r0
	add	r1, r1, #0x5
	lsl	r7, r1, #0x18
.L18:
	ldr	r1, .L26+0x18
	cmp	r6, sl
	bge	.L19	@cond_branch
	add	r1, r1, #0x2
.L19:
	ldr	r4, [sp, #0x8]
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	add	r2, r0, #0
	cmp	r0, #0
	bge	.L21	@cond_branch
	neg	r2, r0
.L21:
	cmp	r6, r2
	bge	.L20	@cond_branch
	ldr	r5, .L26+0x1c
	cmp	r0, #0
	bge	.L23	@cond_branch
	add	r5, r5, #0x2
	b	.L23
.L27:
	.align	2, 0
.L26:
	.word	gContestResults_Gfx
	.word	gUnknown_08C1A12C
	.word	gUnknown_08C1A000
	.word	gUnknown_08C19EEC
	.word	gContestResults_Pal
	.word	sUnknown_0858D6B0
	.word	0x60b2
	.word	0x60a4
.L20:
	ldr	r5, .L28
.L23:
	add	r4, r6, #0
	add	r4, r4, #0x13
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	add	r2, r4, #0
	lsr	r3, r7, #0x18
	bl	FillBgTilemapBufferRect_Palette0
	mov	r2, r8
	str	r2, [sp]
	str	r2, [sp, #0x4]
	mov	r0, #0x1
	add	r1, r5, #0
	add	r2, r4, #0
	mov	r4, r9
	lsr	r3, r4, #0x18
	bl	FillBgTilemapBufferRect_Palette0
	add	r6, r6, #0x1
	cmp	r6, #0x9
	ble	.L18	@cond_branch
	ldr	r7, [sp, #0xc]
	cmp	r7, #0x3
	ble	.L14	@cond_branch
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	0x60a2
.Lfe2:
	.size	 LoadContestResultsBgGfx,.Lfe2-LoadContestResultsBgGfx
	.align	2, 0
	.type	 LoadContestMonName,function
	.thumb_func
LoadContestMonName:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r1, r5, #0x6
	ldr	r0, .L32
	add	r7, r1, r0
	ldr	r6, .L32+0x4
	ldr	r0, .L32+0x8
	ldrb	r0, [r0]
	cmp	r5, r0
	bne	.L31	@cond_branch
	ldr	r1, .L32+0xc
	add	r0, r6, #0
	bl	StringCopy
	add	r6, r0, #0
.L31:
	add	r1, r7, #0x2
	add	r0, r6, #0
	bl	StringCopy
	ldr	r4, .L32+0x4
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x0
	bl	AddContestTextPrinter
	ldr	r1, .L32+0x10
	add	r0, r6, #0
	bl	StringCopy
	add	r1, r7, #0
	add	r1, r1, #0xd
	add	r0, r6, #0
	bl	StringAppend
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x32
	bl	AddContestTextPrinter
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	gContestMons
	.word	gDisplayedStringBattle
	.word	gContestPlayerMonIndex
	.word	gText_ColorDarkGrey
	.word	gText_Slash
.Lfe3:
	.size	 LoadContestMonName,.Lfe3-LoadContestMonName
	.align	2, 0
	.type	 LoadAllContestMonNames,function
	.thumb_func
LoadAllContestMonNames:
	push	{r4, lr}
	mov	r4, #0x0
.L38:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	LoadContestMonName
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L38	@cond_branch
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 LoadAllContestMonNames,.Lfe4-LoadAllContestMonNames
	.align	2, 0
	.type	 CB2_StartShowContestResults,function
	.thumb_func
CB2_StartShowContestResults:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L43
	ldrb	r0, [r5, #0x8]
	mov	r6, #0x80
	orr	r0, r0, r6
	strb	r0, [r5, #0x8]
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	AllocContestResults
	bl	InitContestResultsDisplay
	bl	ScanlineEffect_Clear
	bl	ResetPaletteFade
	bl	ResetSpriteData
	bl	ResetTasks
	bl	FreeAllSpritePalettes
	bl	LoadContestResultsBgGfx
	bl	LoadAllContestMonIconPalettes
	mov	r0, #0x0
	mov	r1, #0x1
	bl	LoadAllContestMonIcons
	bl	LoadAllContestMonNames
	ldr	r4, .L43+0x4
	ldr	r0, [r4]
	ldr	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x18
	bl	memset
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	mov	r1, #0x0
	mov	r2, #0x50
	bl	memset
	bl	LoadContestResultSprites
	bl	TryCreateWirelessSprites
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldrb	r1, [r5, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r5, #0x8]
	ldr	r0, .L43+0x8
	mov	r1, #0x5
	bl	CreateTask
	ldr	r1, [r4]
	ldr	r1, [r1]
	strb	r0, [r1, #0x2]
	ldr	r0, .L43+0xc
	bl	SetMainCallback2
	ldr	r1, .L43+0x10
	mov	r0, #0xf0
	strh	r0, [r1]
	ldr	r1, .L43+0x14
	ldr	r2, .L43+0x18
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L43+0x1c
	mov	r1, #0x14
	bl	CreateTask
	bl	CalculateContestantsResultData
	ldr	r0, .L43+0x20
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L41	@cond_branch
	ldrb	r0, [r5, #0x8]
	orr	r0, r0, r6
	strb	r0, [r5, #0x8]
	b	.L42
.L44:
	.align	2, 0
.L43:
	.word	gPaletteFade
	.word	sContestResults
	.word	Task_ShowContestResults
	.word	CB2_ShowContestResults
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
	.word	0x80a0
	.word	Task_SlideContestResultsBg
	.word	gLinkContestFlags
.L41:
	mov	r0, #0xdf
	lsl	r0, r0, #0x1
	bl	PlayBGM
.L42:
	ldr	r0, .L45
	bl	SetVBlankCallback
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	VBlankCB_ShowContestResults
.Lfe5:
	.size	 CB2_StartShowContestResults,.Lfe5-CB2_StartShowContestResults
	.align	2, 0
	.type	 CB2_ShowContestResults,function
	.thumb_func
CB2_ShowContestResults:
	push	{lr}
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	RunTasks
	bl	UpdatePaletteFade
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 CB2_ShowContestResults,.Lfe6-CB2_ShowContestResults
	.align	2, 0
	.type	 VBlankCB_ShowContestResults,function
	.thumb_func
VBlankCB_ShowContestResults:
	push	{lr}
	ldr	r0, .L49
	ldrh	r1, [r0]
	mov	r0, #0x10
	bl	SetGpuReg
	ldr	r0, .L49+0x4
	ldrh	r1, [r0]
	mov	r0, #0x12
	bl	SetGpuReg
	ldr	r0, .L49+0x8
	ldrh	r1, [r0]
	mov	r0, #0x14
	bl	SetGpuReg
	ldr	r0, .L49+0xc
	ldrh	r1, [r0]
	mov	r0, #0x16
	bl	SetGpuReg
	ldr	r0, .L49+0x10
	ldrh	r1, [r0]
	mov	r0, #0x18
	bl	SetGpuReg
	ldr	r0, .L49+0x14
	ldrh	r1, [r0]
	mov	r0, #0x1a
	bl	SetGpuReg
	ldr	r0, .L49+0x18
	ldrh	r1, [r0]
	mov	r0, #0x1c
	bl	SetGpuReg
	ldr	r0, .L49+0x1c
	ldrh	r1, [r0]
	mov	r0, #0x1e
	bl	SetGpuReg
	ldr	r0, .L49+0x20
	ldrh	r1, [r0]
	mov	r0, #0x40
	bl	SetGpuReg
	ldr	r0, .L49+0x24
	ldrh	r1, [r0]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, .L49+0x28
	ldrh	r1, [r0]
	mov	r0, #0x42
	bl	SetGpuReg
	ldr	r0, .L49+0x2c
	ldrh	r1, [r0]
	mov	r0, #0x46
	bl	SetGpuReg
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	ScanlineEffect_InitHBlankDmaTransfer
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
.Lfe7:
	.size	 VBlankCB_ShowContestResults,.Lfe7-VBlankCB_ShowContestResults
	.align	2, 0
	.type	 Task_ShowContestResults,function
	.thumb_func
Task_ShowContestResults:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L72
	ldrb	r1, [r3]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB683
	b	.L52	@long jump
.LCB683:
	ldr	r2, .L72+0x4
	lsl	r1, r6, #0x2
	add	r0, r1, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	add	r7, r1, #0
	cmp	r0, #0x1
	beq	.L57	@cond_branch
	cmp	r0, #0x1
	bgt	.L65	@cond_branch
	cmp	r0, #0
	beq	.L54	@cond_branch
	b	.L52
.L73:
	.align	2, 0
.L72:
	.word	gLinkContestFlags
	.word	gTasks
.L65:
	cmp	r0, #0x2
	beq	.L59	@cond_branch
	cmp	r0, #0x3
	beq	.L61	@cond_branch
	b	.L52
.L54:
	bl	SaveLinkContestResults
	ldr	r1, .L74
	ldr	r0, .L74+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L55	@cond_branch
	mov	r0, #0x23
	bl	IncrementGameStat
	ldr	r1, .L74+0x8
	mov	r0, #0x8
	strh	r0, [r1]
	bl	InterviewBefore
	ldr	r0, .L74+0xc
	ldrh	r0, [r0]
	cmp	r0, #0x1
	beq	.L55	@cond_branch
	bl	InterviewAfter
.L55:
	mov	r0, #0x2
	bl	TryGainNewFanFromCounter
	ldr	r0, .L74+0x10
	ldrb	r0, [r0]
	bl	sub_80DEDA8
	mov	r0, #0xfe
	bl	sub_80DEDA8
	ldr	r1, .L74+0x14
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r0, #0xfe
	mov	r1, #0x0
	bl	sub_80DEFA8
	ldr	r1, .L74+0x18
	strb	r0, [r1]
	ldr	r5, .L74+0x1c
	add	r0, r5, #0
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x0
	bl	VarSet
	bl	SetContinueGameWarpStatusToDynamicWarp
	mov	r0, #0x1
	bl	TrySavingData
	bl	ClearContinueGameWarpStatus2
	add	r0, r5, #0
	add	r1, r4, #0
	bl	VarSet
	ldr	r0, .L74+0x20
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L52
.L75:
	.align	2, 0
.L74:
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_Result
	.word	gSpecialVar_ContestRank
	.word	gUnknown_02039F5C
	.word	gUnknown_02039F5D
	.word	0x4086
	.word	gTasks
.L57:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	ldrb	r1, [r3]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L52	@cond_branch
	mov	r0, #0x64
	b	.L70
.L59:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L51	@cond_branch
	bl	SetLinkStandbyCallback
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L51
.L61:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L51	@cond_branch
	mov	r0, #0xdf
	lsl	r0, r0, #0x1
	bl	PlayBGM
	ldr	r2, .L76
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
.L70:
	strh	r0, [r4, #0x8]
.L52:
	ldr	r0, .L76
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L51	@cond_branch
	ldr	r1, .L76+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	strh	r2, [r4, #0x8]
	ldr	r0, .L76+0x8
	ldrb	r1, [r0]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L67	@cond_branch
	ldr	r0, .L76+0xc
	bl	ShowLinkResultsTextBox
	ldr	r0, .L76+0x10
	b	.L71
.L77:
	.align	2, 0
.L76:
	.word	gPaletteFade
	.word	gTasks
	.word	gLinkContestFlags
	.word	gText_CommunicationStandby
	.word	Task_WaitForLinkPartnersBeforeResults
.L67:
	mov	r0, #0x24
	bl	IncrementGameStat
	ldr	r1, .L78
	ldr	r0, .L78+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L69	@cond_branch
	mov	r0, #0x25
	bl	IncrementGameStat
.L69:
	ldr	r0, .L78+0x8
	ldrb	r0, [r0]
	bl	sub_80DEDA8
	mov	r0, #0xfe
	bl	sub_80DEDA8
	ldr	r0, .L78+0xc
	strb	r5, [r0]
	mov	r0, #0xfe
	mov	r1, #0x0
	bl	sub_80DEFA8
	ldr	r1, .L78+0x10
	strb	r0, [r1]
	mov	r0, #0x2
	bl	TryGainNewFanFromCounter
	ldr	r0, .L78+0x14
.L71:
	str	r0, [r4]
.L51:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gSpecialVar_ContestRank
	.word	gUnknown_02039F5C
	.word	gUnknown_02039F5D
	.word	Task_AnnouncePreliminaryResults
.Lfe8:
	.size	 Task_ShowContestResults,.Lfe8-Task_ShowContestResults
	.align	2, 0
	.type	 Task_WaitForLinkPartnersBeforeResults,function
	.thumb_func
Task_WaitForLinkPartnersBeforeResults:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L82
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L81	@cond_branch
	ldr	r0, .L82+0x4
	mov	r1, #0x0
	bl	CreateTask
	ldr	r1, .L82+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L82+0xc
	str	r1, [r0]
.L81:
	pop	{r4}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gReceivedRemoteLinkPlayers
	.word	Task_CommunicateMonIdxsForResults
	.word	gTasks
	.word	TaskDummy
.Lfe9:
	.size	 Task_WaitForLinkPartnersBeforeResults,.Lfe9-Task_WaitForLinkPartnersBeforeResults
	.align	2, 0
	.type	 Task_CommunicateMonIdxsForResults,function
	.thumb_func
Task_CommunicateMonIdxsForResults:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L85
	ldr	r2, .L85+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L86:
	.align	2, 0
.L85:
	.word	Task_LinkContest_CommunicateMonIdxs
	.word	Task_WaitForLinkPartnerMonIdxs
.Lfe10:
	.size	 Task_CommunicateMonIdxsForResults,.Lfe10-Task_CommunicateMonIdxsForResults
	.align	2, 0
	.type	 Task_WaitForLinkPartnerMonIdxs,function
	.thumb_func
Task_WaitForLinkPartnerMonIdxs:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L88	@cond_branch
	add	r0, r4, #0
	bl	DestroyTask
	ldr	r2, .L89
	ldr	r0, .L89+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L89+0x8
	str	r1, [r0]
	bl	HideLinkResultsTextBox
.L88:
	pop	{r4}
	pop	{r0}
	bx	r0
.L90:
	.align	2, 0
.L89:
	.word	gTasks
	.word	sContestResults
	.word	Task_AnnouncePreliminaryResults
.Lfe11:
	.size	 Task_WaitForLinkPartnerMonIdxs,.Lfe11-Task_WaitForLinkPartnerMonIdxs
	.align	2, 0
	.type	 Task_AnnouncePreliminaryResults,function
	.thumb_func
Task_AnnouncePreliminaryResults:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L106
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r1, [r4, #0x8]
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L92	@cond_branch
	ldr	r0, .L106+0x4
	mov	r1, #0x14
	bl	CreateTask
	ldr	r0, .L106+0x8
	ldr	r1, .L106+0xc
	ldr	r1, [r1]
	ldr	r1, [r1]
	ldrb	r1, [r1]
	bl	DrawResultsTextWindow
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x88
	lsl	r3, r3, #0x3
	mov	r1, #0x90
	mov	r2, #0x78
	b	.L104
.L107:
	.align	2, 0
.L106:
	.word	gTasks
	.word	Task_FlashStarsAndHearts
	.word	gText_AnnouncingResults
	.word	sContestResults
.L92:
	cmp	r0, #0x1
	bne	.L94	@cond_branch
	ldr	r0, .L108
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L93	@cond_branch
	b	.L105
.L109:
	.align	2, 0
.L108:
	.word	sContestResults
.L94:
	cmp	r0, #0x2
	bne	.L97	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x15
	bne	.L93	@cond_branch
	mov	r0, #0x0
.L105:
	strh	r0, [r4, #0xa]
	add	r0, r1, #0x1
	strh	r0, [r4, #0x8]
	b	.L93
.L97:
	cmp	r0, #0x3
	bne	.L100	@cond_branch
	ldr	r0, .L110
	ldr	r1, .L110+0x4
	ldr	r1, [r1]
	ldr	r1, [r1]
	ldrb	r1, [r1]
	bl	DrawResultsTextWindow
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r2, .L110+0x8
	mov	r3, #0x88
	lsl	r3, r3, #0x3
	mov	r1, #0x90
.L104:
	bl	StartTextBoxSlideIn
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L93
.L111:
	.align	2, 0
.L110:
	.word	gText_PreliminaryResults
	.word	sContestResults
	.word	0xffff
.L100:
	cmp	r0, #0x4
	bne	.L93	@cond_branch
	ldr	r0, .L112
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0x2
	bne	.L93	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L112+0x4
	str	r0, [r4]
.L93:
	pop	{r4}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	sContestResults
	.word	Task_ShowPreliminaryResults
.Lfe12:
	.size	 Task_AnnouncePreliminaryResults,.Lfe12-Task_AnnouncePreliminaryResults
	.align	2, 0
	.type	 Task_ShowPreliminaryResults,function
	.thumb_func
Task_ShowPreliminaryResults:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L126
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L120	@cond_branch
	cmp	r0, #0x1
	bgt	.L125	@cond_branch
	cmp	r0, #0
	beq	.L116	@cond_branch
	b	.L115
.L127:
	.align	2, 0
.L126:
	.word	gTasks
.L125:
	cmp	r0, #0x2
	beq	.L122	@cond_branch
	b	.L115
.L116:
	ldr	r5, .L128
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	bne	.L115	@cond_branch
	ldrh	r1, [r4, #0xc]
	add	r0, r1, #0x1
	strh	r0, [r4, #0xc]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	bl	UpdateContestResultBars
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	cmp	r0, #0
	bne	.L118	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x8]
	b	.L115
.L129:
	.align	2, 0
.L128:
	.word	sContestResults
.L118:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L115
.L120:
	ldr	r0, .L130
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	cmp	r0, #0
	bne	.L115	@cond_branch
	strh	r0, [r4, #0x8]
	b	.L115
.L131:
	.align	2, 0
.L130:
	.word	sContestResults
.L122:
	mov	r0, #0x88
	lsl	r0, r0, #0x3
	bl	StartTextBoxSlideOut
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xc]
	ldr	r0, .L132
	str	r0, [r4]
.L115:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L133:
	.align	2, 0
.L132:
	.word	Task_AnnounceRound2Results
.Lfe13:
	.size	 Task_ShowPreliminaryResults,.Lfe13-Task_ShowPreliminaryResults
	.align	2, 0
	.type	 Task_AnnounceRound2Results,function
	.thumb_func
Task_AnnounceRound2Results:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r4, r2, #0
	ldr	r0, .L139
	ldr	r5, [r0]
	ldr	r0, [r5]
	ldrb	r3, [r0, #0x4]
	cmp	r3, #0
	bne	.L135	@cond_branch
	ldr	r1, .L139+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x15
	bne	.L137	@cond_branch
	strh	r3, [r1, #0xa]
	ldr	r0, .L139+0x8
	ldr	r1, [r5]
	ldrb	r1, [r1]
	bl	DrawResultsTextWindow
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r2, .L139+0xc
	mov	r3, #0x88
	lsl	r3, r3, #0x3
	mov	r1, #0x90
	bl	StartTextBoxSlideIn
	b	.L137
.L140:
	.align	2, 0
.L139:
	.word	sContestResults
	.word	gTasks
	.word	gText_Round2Results
	.word	0xffff
.L135:
	cmp	r3, #0x2
	bne	.L137	@cond_branch
	ldr	r0, .L141
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L141+0x4
	str	r0, [r1]
.L137:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L142:
	.align	2, 0
.L141:
	.word	gTasks
	.word	Task_ShowRound2Results
.Lfe14:
	.size	 Task_AnnounceRound2Results,.Lfe14-Task_AnnounceRound2Results
	.align	2, 0
	.type	 Task_ShowRound2Results,function
	.thumb_func
Task_ShowRound2Results:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L155
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L149	@cond_branch
	cmp	r0, #0x1
	bgt	.L154	@cond_branch
	cmp	r0, #0
	beq	.L145	@cond_branch
	b	.L144
.L156:
	.align	2, 0
.L155:
	.word	gTasks
.L154:
	cmp	r0, #0x2
	beq	.L151	@cond_branch
	b	.L144
.L145:
	ldr	r5, .L157
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	bne	.L144	@cond_branch
	ldrh	r1, [r4, #0xc]
	add	r0, r1, #0x1
	strh	r0, [r4, #0xc]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	UpdateContestResultBars
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	cmp	r0, #0
	bne	.L147	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x8]
	b	.L144
.L158:
	.align	2, 0
.L157:
	.word	sContestResults
.L147:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L144
.L149:
	ldr	r0, .L159
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	cmp	r0, #0
	bne	.L144	@cond_branch
	strh	r0, [r4, #0x8]
	b	.L144
.L160:
	.align	2, 0
.L159:
	.word	sContestResults
.L151:
	mov	r0, #0x88
	lsl	r0, r0, #0x3
	bl	StartTextBoxSlideOut
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L161
	str	r0, [r4]
.L144:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	Task_AnnounceWinner
.Lfe15:
	.size	 Task_ShowRound2Results,.Lfe15-Task_ShowRound2Results
	.align	2, 0
	.type	 Task_AnnounceWinner,function
	.thumb_func
Task_AnnounceWinner:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x64
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L197
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x5
	bls	.LCB1555
	b	.L164	@long jump
.LCB1555:
	lsl	r0, r0, #0x2
	ldr	r1, .L197+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L198:
	.align	2, 0
.L197:
	.word	gTasks
	.word	.L193
	.align	2, 0
	.align	2, 0
.L193:
	.word	.L165
	.word	.L167
	.word	.L169
	.word	.L175
	.word	.L184
	.word	.L192
.L165:
	ldr	r0, .L199
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.LCB1582
	b	.L164	@long jump
.LCB1582:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L164
.L200:
	.align	2, 0
.L199:
	.word	sContestResults
.L167:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	beq	.LCB1612
	b	.L164	@long jump
.LCB1612:
	mov	r0, #0x0
	strh	r0, [r1, #0xa]
	b	.L195
.L169:
	mov	r4, #0x0
	lsl	r6, r5, #0x2
	ldr	r7, .L201
.L173:
	ldr	r0, .L201+0x4
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r7
	ldr	r0, .L201+0x8
	add	r0, r4, r0
	ldrb	r0, [r0]
	strh	r0, [r1, #0x8]
	strh	r4, [r1, #0xa]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L173	@cond_branch
	b	.L196
.L202:
	.align	2, 0
.L201:
	.word	gTasks
	.word	Task_DrawFinalStandingNumber
	.word	gContestFinalStandings
.L175:
	ldr	r0, .L203
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x4
	beq	.LCB1669
	b	.L164	@long jump
.LCB1669:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	beq	.LCB1683
	b	.L164	@long jump
.LCB1683:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldr	r0, .L203+0x4
	mov	r1, #0xa
	bl	CreateTask
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r4, #0x0
	ldr	r1, .L203+0x8
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L179	@cond_branch
.L180:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L179	@cond_branch
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L180	@cond_branch
.L179:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0xe
	bl	BounceMonIconInBox
	b	.L164
.L204:
	.align	2, 0
.L203:
	.word	sContestResults
	.word	Task_StartHighlightWinnersBox
	.word	gContestFinalStandings
.L184:
	lsl	r1, r5, #0x2
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	add	r2, r0, r2
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r6, r1, #0
	cmp	r0, #0x15
	bne	.L164	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0xa]
	mov	r4, #0x0
	ldr	r1, .L205
	ldrb	r0, [r1]
	ldr	r7, .L205+0x4
	ldr	r2, .L205+0x8
	mov	r8, r2
	cmp	r0, #0
	beq	.L187	@cond_branch
.L188:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L187	@cond_branch
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L188	@cond_branch
.L187:
	lsl	r4, r4, #0x6
	mov	r0, r8
	add	r1, r4, r0
	add	r0, r7, #0
	bl	StringCopy
	add	r0, r7, #0
	bl	sub_81DB5AC
	ldr	r0, .L205+0xc
	mov	r1, r8
	sub	r1, r1, #0xb
	add	r4, r4, r1
	add	r1, r4, #0
	bl	StringCopy
	ldr	r1, .L205+0x10
	mov	r0, sp
	bl	StringExpandPlaceholders
	ldr	r0, .L205+0x14
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0]
	mov	r0, sp
	bl	DrawResultsTextWindow
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r2, .L205+0x18
	mov	r3, #0x88
	lsl	r3, r3, #0x3
	mov	r1, #0x90
	bl	StartTextBoxSlideIn
.L196:
	ldr	r0, .L205+0x1c
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
.L195:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L164
.L206:
	.align	2, 0
.L205:
	.word	gContestFinalStandings
	.word	gStringVar1
	.word	gContestMons+0xd
	.word	gStringVar2
	.word	gText_ContestantsMonWon
	.word	sContestResults
	.word	0xffff
	.word	gTasks
.L192:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	ldr	r1, .L207
	str	r1, [r0]
.L164:
	add	sp, sp, #0x64
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L208:
	.align	2, 0
.L207:
	.word	Task_ShowWinnerMonBanner
.Lfe16:
	.size	 Task_AnnounceWinner,.Lfe16-Task_AnnounceWinner
	.align	2, 0
	.type	 Task_ShowWinnerMonBanner,function
	.thumb_func
Task_ShowWinnerMonBanner:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L235
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r4, r1, #0
	cmp	r0, #0x5
	bls	.LCB1889
	b	.L210	@long jump
.LCB1889:
	lsl	r0, r0, #0x2
	ldr	r1, .L235+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L236:
	.align	2, 0
.L235:
	.word	gTasks
	.word	.L232
	.align	2, 0
	.align	2, 0
.L232:
	.word	.L211
	.word	.L218
	.word	.L222
	.word	.L224
	.word	.L226
	.word	.L230
.L211:
	ldr	r1, .L237
	mov	r0, #0xf0
	strh	r0, [r1]
	ldr	r1, .L237+0x4
	ldr	r3, .L237+0x8
	add	r0, r3, #0
	strh	r0, [r1]
	mov	r1, #0x0
	ldr	r2, .L237+0xc
	ldrb	r0, [r2]
	lsl	r3, r7, #0x2
	mov	r9, r3
	ldr	r3, .L237+0x10
	cmp	r0, #0
	beq	.L213	@cond_branch
.L214:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	bgt	.L213	@cond_branch
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L214	@cond_branch
.L213:
	lsl	r1, r1, #0x6
	add	r2, r1, r3
	ldrh	r4, [r2]
	lsl	r4, r4, #0x15
	lsr	r4, r4, #0x15
	add	r0, r3, #0
	add	r0, r0, #0x38
	add	r0, r1, r0
	ldr	r5, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x3c
	add	r1, r1, r0
	ldr	r1, [r1]
	mov	r8, r1
	ldrb	r6, [r2, #0x1]
	lsr	r6, r6, #0x3
	add	r0, r4, #0
	add	r1, r6, #0
	bl	GetFormSpeciesId
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r0, r2, #0x3
	ldr	r1, .L237+0x14
	add	r0, r0, r1
	ldr	r1, .L237+0x18
	ldr	r1, [r1]
	ldr	r1, [r1, #0x8]
	add	r3, r5, #0
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
	add	r0, r4, #0
	mov	r1, r8
	add	r2, r5, #0
	bl	GetMonSpritePalStructFromOtIdPersonality
	add	r5, r0, #0
	bl	LoadCompressedSpritePalette
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r6, #0
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L237+0x1c
	ldrh	r1, [r5, #0x4]
	strh	r1, [r0, #0x2]
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	mov	r2, #0x50
	mov	r3, #0xa
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L237+0x20
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r3, r2, r5
	strh	r4, [r3, #0x30]
	ldrb	r4, [r3, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r4
	strb	r1, [r3, #0x5]
	add	r5, r5, #0x1c
	add	r2, r2, r5
	ldr	r1, .L237+0x24
	str	r1, [r2]
	ldr	r1, .L237+0x28
	ldr	r1, [r1]
	ldr	r1, [r1]
	strb	r0, [r1, #0x8]
	ldr	r0, .L237+0x2c
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L237+0x30
	bl	LoadCompressedSpritePalette
	ldr	r0, .L237+0x34
	mov	r1, #0xa
	bl	CreateTask
	ldr	r0, .L237+0x38
	mov	r2, r9
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L210
.L238:
	.align	2, 0
.L237:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x5050
	.word	gContestFinalStandings
	.word	gContestMons
	.word	gMonFrontPicTable
	.word	gMonSpritesGfxPtr
	.word	gMultiuseSpriteTemplate
	.word	gSprites
	.word	SpriteCB_WinnerMonSlideIn
	.word	sContestResults
	.word	sSpriteSheet_Confetti
	.word	sSpritePalette_Confetti
	.word	Task_CreateConfetti
	.word	gTasks
.L218:
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	beq	.LCB2082
	b	.L210	@long jump
.LCB2082:
	mov	r0, #0x0
	strh	r0, [r4, #0xe]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x2
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x20
	ble	.L220	@cond_branch
	mov	r0, #0x20
	strh	r0, [r4, #0xc]
.L220:
	ldrb	r2, [r4, #0xc]
	ldr	r3, .L239
	mov	r0, #0x50
	sub	r0, r0, r2
	lsl	r0, r0, #0x8
	add	r1, r2, #0
	add	r1, r1, #0x50
	orr	r0, r0, r1
	strh	r0, [r3]
	cmp	r2, #0x20
	bne	.L210	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L210
.L240:
	.align	2, 0
.L239:
	.word	gBattle_WIN0V
.L222:
	ldr	r0, .L241
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	bne	.L210	@cond_branch
	b	.L234
.L242:
	.align	2, 0
.L241:
	.word	sContestResults
.L224:
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r3, r0, r4
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x79
	bne	.L210	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0xa]
	ldr	r2, .L243
	ldr	r0, .L243+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x8]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L243+0x8
	str	r1, [r0]
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	b	.L210
.L244:
	.align	2, 0
.L243:
	.word	gSprites
	.word	sContestResults
	.word	SpriteCB_WinnerMonSlideOut
.L226:
	ldr	r0, .L245
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x2
	bne	.L210	@cond_branch
	ldr	r3, .L245+0x4
	ldrh	r0, [r3]
	lsr	r2, r0, #0x8
	add	r0, r2, #0x2
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x50
	bls	.L228	@cond_branch
	mov	r2, #0x50
.L228:
	lsl	r1, r2, #0x8
	mov	r0, #0xa0
	sub	r0, r0, r2
	orr	r1, r1, r0
	strh	r1, [r3]
	cmp	r2, #0x50
	bne	.L210	@cond_branch
.L234:
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L210
.L246:
	.align	2, 0
.L245:
	.word	sContestResults
	.word	gBattle_WIN0V
.L230:
	ldr	r0, .L247
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x6]
	cmp	r0, #0x2
	bne	.L210	@cond_branch
	mov	r1, #0x0
	mov	r0, #0x1
	strb	r0, [r2, #0x9]
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strh	r1, [r0, #0x8]
	ldr	r1, .L247+0x4
	str	r1, [r0]
.L210:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L248:
	.align	2, 0
.L247:
	.word	sContestResults
	.word	Task_SetSeenWinnerMon
.Lfe17:
	.size	 Task_ShowWinnerMonBanner,.Lfe17-Task_ShowWinnerMonBanner
	.align	2, 0
	.type	 Task_SetSeenWinnerMon,function
	.thumb_func
Task_SetSeenWinnerMon:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L257
	ldrh	r1, [r0, #0x2e]
	mov	r2, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L250	@cond_branch
	ldr	r0, .L257+0x4
	ldrb	r1, [r0]
	add	r0, r2, #0
	and	r0, r0, r1
	lsl	r6, r7, #0x2
	cmp	r0, #0
	bne	.L251	@cond_branch
	ldr	r5, .L257+0x8
	mov	r4, #0x3
.L255:
	ldrh	r0, [r5]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x2
	bl	GetSetPokedexFlag
	add	r5, r5, #0x40
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L255	@cond_branch
.L251:
	ldr	r1, .L257+0xc
	add	r0, r6, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x1c]
	ldr	r1, .L257+0x10
	str	r1, [r0]
.L250:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L258:
	.align	2, 0
.L257:
	.word	gMain
	.word	gLinkContestFlags
	.word	gContestMons
	.word	gTasks
	.word	Task_TryDisconnectLinkPartners
.Lfe18:
	.size	 Task_SetSeenWinnerMon,.Lfe18-Task_SetSeenWinnerMon
	.align	2, 0
	.type	 Task_TryDisconnectLinkPartners,function
	.thumb_func
Task_TryDisconnectLinkPartners:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L263
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L260	@cond_branch
	ldr	r0, .L263+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r4, r1, r0
	mov	r1, #0x1c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L262	@cond_branch
	ldr	r0, .L263+0x8
	bl	ShowLinkResultsTextBox
	bl	SetCloseLinkCallback
	ldr	r0, .L263+0xc
	str	r0, [r4]
	b	.L262
.L264:
	.align	2, 0
.L263:
	.word	gLinkContestFlags
	.word	gTasks
	.word	gText_CommunicationStandby
	.word	Task_WaitForLinkPartnersDisconnect
.L260:
	ldr	r0, .L265
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L265+0x4
	str	r0, [r1]
.L262:
	pop	{r4}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	gTasks
	.word	Task_TrySetContestInterviewData
.Lfe19:
	.size	 Task_TryDisconnectLinkPartners,.Lfe19-Task_TryDisconnectLinkPartners
	.align	2, 0
	.type	 Task_WaitForLinkPartnersDisconnect,function
	.thumb_func
Task_WaitForLinkPartnersDisconnect:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L270
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L268	@cond_branch
	ldr	r0, .L270+0x4
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L269	@cond_branch
	bl	DestroyWirelessStatusIndicatorSprite
.L269:
	bl	HideLinkResultsTextBox
	ldr	r0, .L270+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L270+0xc
	str	r0, [r1]
.L268:
	pop	{r4}
	pop	{r0}
	bx	r0
.L271:
	.align	2, 0
.L270:
	.word	gReceivedRemoteLinkPlayers
	.word	gLinkContestFlags
	.word	gTasks
	.word	Task_TrySetContestInterviewData
.Lfe20:
	.size	 Task_WaitForLinkPartnersDisconnect,.Lfe20-Task_WaitForLinkPartnersDisconnect
	.align	2, 0
	.type	 Task_TrySetContestInterviewData,function
	.thumb_func
Task_TrySetContestInterviewData:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L274
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L273	@cond_branch
	ldr	r1, .L274+0x4
	ldr	r0, .L274+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	BravoTrainerPokemonProfile_BeforeInterview2
.L273:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xff
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginHardwarePaletteFade
	ldr	r1, .L274+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L274+0x10
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L275:
	.align	2, 0
.L274:
	.word	gLinkContestFlags
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gTasks
	.word	Task_EndShowContestResults
.Lfe21:
	.size	 Task_TrySetContestInterviewData,.Lfe21-Task_TrySetContestInterviewData
	.align	2, 0
	.type	 Task_EndShowContestResults,function
	.thumb_func
Task_EndShowContestResults:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r5, r2, #0
	ldr	r0, .L283
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L277	@cond_branch
	ldr	r1, .L283+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L278	@cond_branch
	ldr	r0, .L283+0x8
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x3]
	bl	DestroyTask
	ldr	r0, .L283+0xc
	b	.L282
.L284:
	.align	2, 0
.L283:
	.word	gPaletteFade
	.word	gTasks
	.word	sContestResults
	.word	0xffff
.L278:
	cmp	r0, #0x1
	bne	.L280	@cond_branch
	ldr	r0, .L285
.L282:
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L277
.L286:
	.align	2, 0
.L285:
	.word	-0x10000
.L280:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyTask
	bl	FreeAllWindowBuffers
	ldr	r0, .L287
	bl	SetMainCallback2
	bl	FreeContestResults
.L277:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L288:
	.align	2, 0
.L287:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe22:
	.size	 Task_EndShowContestResults,.Lfe22-Task_EndShowContestResults
	.align	2, 0
	.type	 Task_SlideContestResultsBg,function
	.thumb_func
Task_SlideContestResultsBg:
	push	{r4, r5, lr}
	ldr	r2, .L292
	ldrh	r3, [r2]
	add	r0, r3, #0x2
	strh	r0, [r2]
	ldr	r4, .L292+0x4
	ldrh	r5, [r4]
	add	r1, r5, #0x1
	strh	r1, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xff
	bls	.L290	@cond_branch
	add	r0, r3, #0
	sub	r0, r0, #0xfd
	strh	r0, [r2]
.L290:
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xff
	bls	.L291	@cond_branch
	add	r0, r5, #0
	sub	r0, r0, #0xfe
	strh	r0, [r4]
.L291:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L293:
	.align	2, 0
.L292:
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
.Lfe23:
	.size	 Task_SlideContestResultsBg,.Lfe23-Task_SlideContestResultsBg
	.align	2, 0
	.type	 Task_FlashStarsAndHearts,function
	.thumb_func
Task_FlashStarsAndHearts:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L305
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L295	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x8]
	mov	r3, #0xc
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L296	@cond_branch
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	b	.L303
.L306:
	.align	2, 0
.L305:
	.word	gTasks
.L296:
	ldrh	r0, [r2, #0xa]
	sub	r0, r0, #0x1
.L303:
	strh	r0, [r2, #0xa]
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x10
	bne	.L298	@cond_branch
	mov	r0, #0x1
	b	.L304
.L298:
	cmp	r0, #0
	bne	.L299	@cond_branch
.L304:
	strh	r0, [r1, #0xc]
.L299:
	ldr	r0, .L307
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrb	r2, [r4, #0xa]
	ldr	r3, .L307+0x4
	mov	r0, #0x6b
	mov	r1, #0x1
	bl	BlendPalette
	ldrb	r2, [r4, #0xa]
	ldr	r3, .L307+0x8
	mov	r0, #0x68
	mov	r1, #0x1
	bl	BlendPalette
	ldrb	r2, [r4, #0xa]
	ldr	r3, .L307+0xc
	mov	r0, #0x6e
	mov	r1, #0x1
	bl	BlendPalette
.L295:
	ldr	r1, .L307
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r3, #0xa
	ldrsh	r4, [r0, r3]
	cmp	r4, #0
	bne	.L301	@cond_branch
	ldr	r0, .L307+0x10
	ldr	r0, [r0]
	ldr	r0, [r0]
	strb	r4, [r0, #0xa]
	b	.L302
.L308:
	.align	2, 0
.L307:
	.word	gTasks
	.word	0x2ede
	.word	0x7fff
	.word	0x77be
	.word	sContestResults
.L301:
	ldr	r0, .L309
	ldr	r0, [r0]
	ldr	r1, [r0]
	mov	r0, #0x1
	strb	r0, [r1, #0xa]
.L302:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L310:
	.align	2, 0
.L309:
	.word	sContestResults
.Lfe24:
	.size	 Task_FlashStarsAndHearts,.Lfe24-Task_FlashStarsAndHearts
	.align	2, 0
	.type	 LoadContestMonIcon,function
	.thumb_func
LoadContestMonIcon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x30]
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	mov	r9, r5
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	lsl	r4, r4, #0x18
	lsr	r3, r4, #0x18
	ldr	r0, .L316
	mov	r2, #0x0
	ldrb	r0, [r0]
	cmp	r5, r0
	bne	.L312	@cond_branch
	mov	r2, #0x1
.L312:
	add	r0, r6, #0
	ldr	r1, [sp, #0x2c]
	bl	GetMonIconPtr
	add	r3, r0, #0
	lsl	r0, r7, #0x9
	add	r0, r0, #0x80
	add	r3, r3, r0
	mov	r0, r8
	cmp	r0, #0
	beq	.L314	@cond_branch
	lsl	r1, r5, #0x9
	ldr	r2, .L316+0x4
	add	r1, r1, r2
	mov	r2, #0xc0
	lsl	r2, r2, #0x1
	add	r0, r3, #0
	mov	r3, #0x1
	bl	RequestDma3Copy
	add	r0, r5, #0
	add	r0, r0, #0xa
	lsl	r0, r0, #0x1c
	lsl	r1, r5, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	add	r1, r1, r2
	orr	r1, r1, r0
	lsr	r1, r1, #0x10
	lsl	r3, r5, #0x1
	add	r3, r3, r5
	add	r3, r3, #0x4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x4
	str	r0, [sp]
	mov	r0, #0x3
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	str	r0, [sp, #0xc]
	mov	r2, #0x3
	bl	WriteSequenceToBgTilemapBuffer
	b	.L315
.L317:
	.align	2, 0
.L316:
	.word	gContestPlayerMonIndex
	.word	0x6004000
.L314:
	mov	r0, r9
	lsl	r1, r0, #0x9
	ldr	r2, .L318
	add	r1, r1, r2
	mov	r2, #0xc0
	lsl	r2, r2, #0x1
	add	r0, r3, #0
	mov	r3, #0x1
	bl	RequestDma3Copy
.L315:
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L319:
	.align	2, 0
.L318:
	.word	0x6004000
.Lfe25:
	.size	 LoadContestMonIcon,.Lfe25-LoadContestMonIcon
	.align	2, 0
	.type	 LoadAllContestMonIcons,function
	.thumb_func
LoadAllContestMonIcons:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r5, #0x0
	ldr	r4, .L326
.L324:
	ldrh	r0, [r4]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, [r4, #0x38]
	str	r2, [sp]
	ldrb	r2, [r4, #0x1]
	lsr	r2, r2, #0x3
	str	r2, [sp, #0x4]
	add	r2, r7, #0
	add	r3, r6, #0
	bl	LoadContestMonIcon
	add	r4, r4, #0x40
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L324	@cond_branch
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L327:
	.align	2, 0
.L326:
	.word	gContestMons
.Lfe26:
	.size	 LoadAllContestMonIcons,.Lfe26-LoadAllContestMonIcons
	.align	2, 0
	.type	 LoadAllContestMonIconPalettes,function
	.thumb_func
LoadAllContestMonIconPalettes:
	push	{r4, r5, lr}
	mov	r4, #0x0
	mov	r5, #0xa0
	lsl	r5, r5, #0x10
.L332:
	ldr	r0, .L334
	lsl	r1, r4, #0x6
	add	r1, r1, r0
	ldrh	r0, [r1]
	lsl	r0, r0, #0x15
	ldrb	r2, [r1, #0x1]
	lsr	r2, r2, #0x3
	lsr	r0, r0, #0x15
	mov	r1, #0x0
	bl	GetIconSpecies
	ldr	r1, .L334+0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x5
	ldr	r1, .L334+0x8
	add	r0, r0, r1
	lsr	r1, r5, #0x10
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	add	r5, r5, r0
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L332	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L335:
	.align	2, 0
.L334:
	.word	gContestMons
	.word	gMonIconPaletteIndices
	.word	gMonIconPalettes
.Lfe27:
	.size	 LoadAllContestMonIconPalettes,.Lfe27-LoadAllContestMonIconPalettes
	.align	2, 0
	.type	 TryCreateWirelessSprites,function
	.thumb_func
TryCreateWirelessSprites:
	push	{r4, lr}
	ldr	r0, .L338
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L337	@cond_branch
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0x8
	mov	r1, #0x8
	bl	CreateWirelessStatusIndicatorSprite
	ldr	r4, .L338+0x4
	ldr	r0, .L338+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x43
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L338+0xc
	bl	LoadSpriteSheet
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	mov	r0, #0x1
	neg	r0, r0
	lsr	r1, r1, #0xb
	ldr	r2, .L338+0x10
	add	r1, r1, r2
	mov	r2, #0x80
	mov	r3, #0x1
	bl	RequestDma3Fill
	ldr	r0, .L338+0x14
	mov	r1, #0x8
	mov	r2, #0x8
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	mov	r2, #0x8
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
.L337:
	pop	{r4}
	pop	{r0}
	bx	r0
.L339:
	.align	2, 0
.L338:
	.word	gLinkContestFlags
	.word	gSprites
	.word	gWirelessStatusIndicatorSpriteId
	.word	sUnknown_0858D8E0
	.word	0x6010000
	.word	sSpriteTemplate_858D8C8
.Lfe28:
	.size	 TryCreateWirelessSprites,.Lfe28-TryCreateWirelessSprites
	.align	2, 0
	.type	 DrawResultsTextWindow,function
	.thumb_func
DrawResultsTextWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x44
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	add	r4, sp, #0x20
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	mov	r0, #0x1e
	strb	r0, [r4, #0x3]
	mov	r0, #0x2
	strb	r0, [r4, #0x4]
	add	r0, r4, #0
	bl	AddWindow
	lsl	r6, r0, #0x18
	lsr	r4, r6, #0x18
	add	r0, r4, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	add	r1, r5, #0
	mov	r2, #0x0
	bl	GetStringWidth
	add	r2, r0, #0
	add	r2, r2, #0x9
	cmp	r2, #0
	bge	.L341	@cond_branch
	add	r2, r2, #0x7
.L341:
	asr	r2, r2, #0x3
	mov	sl, r2
	cmp	r2, #0x1e
	ble	.L342	@cond_branch
	mov	r1, #0x1e
	mov	sl, r1
.L342:
	mov	r1, sl
	lsl	r2, r1, #0x3
	sub	r2, r2, r0
	lsr	r0, r2, #0x1f
	add	r2, r2, r0
	asr	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L362
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	add	r0, r4, #0
	mov	r1, #0x7
	bl	GetWindowAttribute
	mov	r9, r0
	ldr	r2, .L362+0x4
	mov	r8, r2
	lsl	r1, r7, #0x4
	add	r1, r1, r7
	lsl	r1, r1, #0x2
	ldr	r3, .L362+0x8
	add	r1, r1, r3
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x11
	ldr	r2, .L362+0xc
	add	r0, r0, r2
	str	r0, [sp, #0xc]
	str	r6, [sp, #0x38]
	mov	r7, sp
	add	r7, r7, #0x1c
	str	r7, [sp, #0x2c]
	mov	r0, sl
	add	r0, r0, #0x2
	str	r0, [sp, #0x30]
	mov	r5, #0x0
	add	r7, sp, #0x10
	mov	ip, r7
	add	r6, r1, #0
	add	r6, r6, #0x2e
	mov	r4, #0x2
.L346:
	add	r0, r6, r5
	mov	r7, #0x0
	ldrsh	r1, [r0, r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x11
	add	r0, r0, r2
	mov	r1, ip
	add	r1, r1, #0x4
	mov	ip, r1
	sub	r1, r1, #0x4
	stmia	r1!, {r0}
	add	r5, r5, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L346	@cond_branch
	mov	r7, r8
	add	r7, r7, #0x80
	mov	r2, r8
	add	r2, r2, #0x40
	str	r2, [sp, #0x28]
	mov	r0, r8
	add	r0, r0, #0x20
	str	r0, [sp, #0x3c]
	mov	r1, r8
	add	r1, r1, #0xa0
	str	r1, [sp, #0x40]
	add	r2, r2, #0x20
	str	r2, [sp, #0x34]
	add	r5, sp, #0xc
	mov	r6, #0x0
	mov	r4, #0x3
.L351:
	str	r6, [sp, #0x1c]
	ldmia	r5!, {r1}
	ldr	r0, [sp, #0x2c]
	ldr	r2, .L362+0x10
	bl	CpuSet
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L351	@cond_branch
	ldr	r5, [sp, #0xc]
	ldr	r6, .L362+0x14
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CpuSet
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	add	r0, r7, #0
	add	r2, r6, #0
	bl	CpuSet
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r1, r5, r2
	add	r0, r7, #0
	add	r2, r6, #0
	bl	CpuSet
	mov	r7, #0xc0
	lsl	r7, r7, #0x2
	add	r1, r5, r7
	ldr	r0, [sp, #0x28]
	add	r2, r6, #0
	bl	CpuSet
	mov	r4, #0x0
	cmp	r4, sl
	bge	.L354	@cond_branch
	add	r7, r6, #0
.L356:
	add	r6, r4, #0x1
	add	r0, r6, #0
	cmp	r6, #0
	bge	.L357	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x8
.L357:
	asr	r0, r0, #0x3
	lsl	r1, r0, #0x2
	add	r1, r1, sp
	add	r1, r1, #0xc
	lsl	r0, r0, #0x3
	sub	r0, r6, r0
	lsl	r0, r0, #0x5
	ldr	r1, [r1]
	add	r5, r1, r0
	mov	r0, r8
	add	r0, r0, #0xc0
	add	r1, r5, #0
	add	r2, r7, #0
	bl	CpuSet
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	mov	r0, r9
	add	r2, r7, #0
	bl	CpuSet
	mov	r0, #0xf0
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r1, r5, r2
	add	r2, r7, #0
	bl	CpuSet
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	add	r1, r5, r0
	mov	r0, r8
	add	r0, r0, #0xe0
	add	r2, r7, #0
	bl	CpuSet
	mov	r1, #0x20
	add	r9, r9, r1
	add	r4, r6, #0
	cmp	r4, sl
	blt	.L356	@cond_branch
.L354:
	add	r2, r4, #0x1
	add	r0, r2, #0
	cmp	r2, #0
	bge	.L360	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x8
.L360:
	asr	r0, r0, #0x3
	lsl	r1, r0, #0x2
	add	r1, r1, sp
	add	r1, r1, #0xc
	lsl	r0, r0, #0x3
	sub	r0, r2, r0
	lsl	r0, r0, #0x5
	ldr	r1, [r1]
	add	r5, r1, r0
	ldr	r4, .L362+0x14
	ldr	r0, [sp, #0x3c]
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CpuSet
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r5, r2
	ldr	r0, [sp, #0x40]
	add	r2, r4, #0
	bl	CpuSet
	mov	r7, #0x80
	lsl	r7, r7, #0x2
	add	r1, r5, r7
	ldr	r0, [sp, #0x40]
	add	r2, r4, #0
	bl	CpuSet
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	add	r1, r5, r0
	ldr	r0, [sp, #0x34]
	add	r2, r4, #0
	bl	CpuSet
	ldr	r1, [sp, #0x38]
	lsr	r0, r1, #0x18
	bl	RemoveWindow
	ldr	r2, [sp, #0x30]
	lsl	r1, r2, #0x3
	mov	r0, #0xf0
	sub	r0, r0, r1
	asr	r0, r0, #0x1
	add	sp, sp, #0x44
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L363:
	.align	2, 0
.L362:
	.word	sContestLinkTextColors
	.word	sUnknown_0858D6D0
	.word	gSprites
	.word	0x6010000
	.word	0x5000100
	.word	0x4000008
.Lfe29:
	.size	 DrawResultsTextWindow,.Lfe29-DrawResultsTextWindow
	.align	2, 0
	.type	 LoadContestResultSprites,function
	.thumb_func
LoadContestResultSprites:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x20
	mov	r1, sp
	ldr	r0, .L375
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	add	r5, sp, #0x18
	ldr	r6, .L375+0x4
	mov	r4, #0x7
.L368:
	add	r0, r6, #0
	bl	LoadSpriteSheet
	add	r6, r6, #0x8
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L368	@cond_branch
	ldr	r0, .L375+0x8
	bl	LoadSpritePalette
	mov	r4, #0x0
	mov	r6, sp
.L373:
	mov	r0, sp
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	mov	r2, #0x90
	mov	r3, #0xa
	bl	CreateSprite
	add	r1, r5, r4
	strb	r0, [r1]
	ldrh	r0, [r6]
	add	r0, r0, #0x1
	strh	r0, [r6]
	add	r4, r4, #0x1
	cmp	r4, #0x7
	ble	.L373	@cond_branch
	ldr	r2, .L375+0xc
	ldrb	r1, [r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r5, #0x1]
	mov	r3, #0x0
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r5, #0x2]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r5, #0x3]
	strh	r1, [r0, #0x32]
	ldrb	r1, [r5, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r5, #0x5]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r5, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r5, #0x6]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r5, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r5, #0x7]
	strh	r1, [r0, #0x32]
	ldr	r1, .L375+0x10
	ldr	r0, [r1]
	ldr	r2, [r0]
	ldrb	r0, [r5]
	strb	r0, [r2]
	ldr	r0, [r1]
	ldr	r0, [r0]
	strb	r3, [r0, #0x4]
	ldr	r0, [r1]
	ldr	r1, [r0]
	ldrb	r0, [r5, #0x4]
	strb	r0, [r1, #0x1]
	bl	HideLinkResultsTextBox
	add	sp, sp, #0x20
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L376:
	.align	2, 0
.L375:
	.word	sSpriteTemplate_858D7F8
	.word	sUnknown_0858D810
	.word	sUnknown_0858D850
	.word	gSprites
	.word	sContestResults
.Lfe30:
	.size	 LoadContestResultSprites,.Lfe30-LoadContestResultSprites
	.align	2, 0
	.type	 StartTextBoxSlideIn,function
	.thumb_func
StartTextBoxSlideIn:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r4, .L378
	ldr	r4, [r4]
	mov	r8, r4
	ldr	r4, [r4]
	ldrb	r5, [r4]
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	ldr	r5, .L378+0x4
	add	r4, r4, r5
	mov	r6, #0x0
	mov	r5, #0x88
	lsl	r5, r5, #0x1
	strh	r5, [r4, #0x20]
	strh	r1, [r4, #0x22]
	strh	r6, [r4, #0x24]
	strh	r6, [r4, #0x26]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, #0x20
	strh	r0, [r4, #0x36]
	strh	r2, [r4, #0x38]
	strh	r3, [r4, #0x3a]
	strh	r6, [r4, #0x3c]
	ldr	r0, .L378+0x8
	str	r0, [r4, #0x1c]
	mov	r0, r8
	ldr	r1, [r0]
	mov	r0, #0x1
	strb	r0, [r1, #0x4]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L379:
	.align	2, 0
.L378:
	.word	sContestResults
	.word	gSprites
	.word	SpriteCB_TextBoxSlideIn
.Lfe31:
	.size	 StartTextBoxSlideIn,.Lfe31-StartTextBoxSlideIn
	.align	2, 0
	.type	 StartTextBoxSlideOut,function
	.thumb_func
StartTextBoxSlideOut:
	push	{r4, r5, lr}
	ldr	r1, .L381
	ldr	r4, [r1]
	ldr	r1, [r4]
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r2, .L381+0x4
	add	r1, r1, r2
	ldrh	r2, [r1, #0x24]
	ldrh	r3, [r1, #0x20]
	add	r2, r2, r3
	mov	r3, #0x0
	strh	r2, [r1, #0x20]
	ldrh	r2, [r1, #0x26]
	ldrh	r5, [r1, #0x22]
	add	r2, r2, r5
	strh	r2, [r1, #0x22]
	strh	r3, [r1, #0x26]
	strh	r3, [r1, #0x24]
	strh	r0, [r1, #0x3a]
	strh	r3, [r1, #0x3c]
	ldr	r0, .L381+0x8
	str	r0, [r1, #0x1c]
	ldr	r1, [r4]
	mov	r0, #0x3
	strb	r0, [r1, #0x4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L382:
	.align	2, 0
.L381:
	.word	sContestResults
	.word	gSprites
	.word	SpriteCB_TextBoxSlideOut
.Lfe32:
	.size	 StartTextBoxSlideOut,.Lfe32-StartTextBoxSlideOut
	.align	2, 0
	.type	 EndTextBoxSlideOut,function
	.thumb_func
EndTextBoxSlideOut:
	mov	r3, #0x0
	mov	r2, #0x0
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	mov	r1, #0x90
	strh	r1, [r0, #0x22]
	strh	r2, [r0, #0x26]
	strh	r2, [r0, #0x24]
	ldr	r1, .L384
	str	r1, [r0, #0x1c]
	ldr	r0, .L384+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	strb	r3, [r0, #0x4]
	bx	lr
.L385:
	.align	2, 0
.L384:
	.word	SpriteCallbackDummy
	.word	sContestResults
.Lfe33:
	.size	 EndTextBoxSlideOut,.Lfe33-EndTextBoxSlideOut
	.align	2, 0
	.type	 SpriteCB_TextBoxSlideIn,function
	.thumb_func
SpriteCB_TextBoxSlideIn:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	ldrh	r2, [r3, #0x3a]
	ldrh	r0, [r3, #0x3c]
	add	r2, r2, r0
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, r1
	strh	r0, [r3, #0x20]
	mov	r1, #0xff
	and	r2, r2, r1
	strh	r2, [r3, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r3, #0x36]
	mov	r4, #0x36
	ldrsh	r1, [r3, r4]
	cmp	r0, r1
	bge	.L387	@cond_branch
	strh	r2, [r3, #0x20]
.L387:
	mov	r4, #0x0
	ldr	r6, .L394
	mov	r5, #0x40
	add	r2, r3, #0
	add	r2, r2, #0x2e
.L391:
	mov	r7, #0x0
	ldrsh	r0, [r2, r7]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r3, #0x24]
	ldrh	r7, [r3, #0x20]
	add	r0, r0, r7
	add	r0, r0, r5
	strh	r0, [r1, #0x20]
	add	r5, r5, #0x40
	add	r2, r2, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L391	@cond_branch
	mov	r0, #0x20
	ldrsh	r1, [r3, r0]
	mov	r2, #0x36
	ldrsh	r0, [r3, r2]
	cmp	r1, r0
	bne	.L393	@cond_branch
	ldr	r0, .L394+0x4
	str	r0, [r3, #0x1c]
.L393:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L395:
	.align	2, 0
.L394:
	.word	gSprites
	.word	SpriteCB_EndTextBoxSlideIn
.Lfe34:
	.size	 SpriteCB_TextBoxSlideIn,.Lfe34-SpriteCB_TextBoxSlideIn
	.align	2, 0
	.type	 SpriteCB_EndTextBoxSlideIn,function
	.thumb_func
SpriteCB_EndTextBoxSlideIn:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L399
	ldr	r0, [r0]
	ldr	r1, [r0]
	mov	r0, #0x2
	strb	r0, [r1, #0x4]
	ldrh	r3, [r2, #0x38]
	ldr	r1, .L399+0x4
	lsr	r0, r1, #0x10
	cmp	r3, r0
	beq	.L397	@cond_branch
	sub	r0, r3, #0x1
	strh	r0, [r2, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	bne	.L397	@cond_branch
	ldrh	r0, [r2, #0x3a]
	bl	StartTextBoxSlideOut
.L397:
	pop	{r0}
	bx	r0
.L400:
	.align	2, 0
.L399:
	.word	sContestResults
	.word	-0x10000
.Lfe35:
	.size	 SpriteCB_EndTextBoxSlideIn,.Lfe35-SpriteCB_EndTextBoxSlideIn
	.align	2, 0
	.type	 SpriteCB_TextBoxSlideOut,function
	.thumb_func
SpriteCB_TextBoxSlideOut:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	ldrh	r2, [r3, #0x3a]
	ldrh	r0, [r3, #0x3c]
	add	r2, r2, r0
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, r1
	strh	r0, [r3, #0x20]
	mov	r0, #0xff
	and	r2, r2, r0
	strh	r2, [r3, #0x3c]
	mov	r4, #0x0
	ldr	r6, .L408
	mov	r5, #0x40
	add	r2, r3, #0
	add	r2, r2, #0x2e
.L405:
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r3, #0x24]
	ldrh	r7, [r3, #0x20]
	add	r0, r0, r7
	add	r0, r0, r5
	strh	r0, [r1, #0x20]
	add	r5, r5, #0x40
	add	r2, r2, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L405	@cond_branch
	mov	r1, #0x20
	ldrsh	r0, [r3, r1]
	mov	r2, #0x24
	ldrsh	r1, [r3, r2]
	add	r0, r0, r1
	mov	r1, #0xe0
	neg	r1, r1
	cmp	r0, r1
	bge	.L407	@cond_branch
	add	r0, r3, #0
	bl	EndTextBoxSlideOut
.L407:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L409:
	.align	2, 0
.L408:
	.word	gSprites
.Lfe36:
	.size	 SpriteCB_TextBoxSlideOut,.Lfe36-SpriteCB_TextBoxSlideOut
	.align	2, 0
	.type	 ShowLinkResultsTextBox,function
	.thumb_func
ShowLinkResultsTextBox:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L416
	ldr	r1, [r4]
	ldr	r1, [r1]
	ldrb	r1, [r1, #0x1]
	bl	DrawResultsTextWindow
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [r4]
	ldr	r1, [r1]
	ldrb	r2, [r1, #0x1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r3, .L416+0x4
	add	r4, r1, r3
	add	r0, r0, #0x20
	strh	r0, [r4, #0x20]
	mov	r0, #0x50
	strh	r0, [r4, #0x22]
	add	r5, r4, #0
	add	r5, r5, #0x3e
	ldrb	r1, [r5]
	mov	r2, #0x5
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r1
	strb	r0, [r5]
	mov	r5, #0x0
	add	r6, r3, #0
	mov	ip, r2
	mov	r3, #0x40
.L414:
	lsl	r0, r5, #0x1
	add	r2, r4, #0
	add	r2, r2, #0x2e
	add	r2, r2, r0
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r4, #0x24]
	ldrh	r7, [r4, #0x20]
	add	r0, r0, r7
	add	r0, r0, r3
	strh	r0, [r1, #0x20]
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r1, [r4, #0x22]
	strh	r1, [r0, #0x22]
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, ip
	and	r0, r0, r2
	strb	r0, [r1]
	add	r3, r3, #0x40
	add	r5, r5, #0x1
	cmp	r5, #0x2
	ble	.L414	@cond_branch
	ldr	r1, .L416+0x8
	mov	r0, #0xf0
	strh	r0, [r1]
	ldr	r2, .L416+0xc
	ldrh	r1, [r4, #0x22]
	add	r0, r1, #0
	sub	r0, r0, #0x10
	lsl	r0, r0, #0x8
	add	r1, r1, #0x10
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L416+0x10
	mov	r0, #0x48
	bl	SetGpuReg
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L417:
	.align	2, 0
.L416:
	.word	sContestResults
	.word	gSprites
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3e
.Lfe37:
	.size	 ShowLinkResultsTextBox,.Lfe37-ShowLinkResultsTextBox
	.align	2, 0
	.type	 HideLinkResultsTextBox,function
	.thumb_func
HideLinkResultsTextBox:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L424
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	ldr	r3, .L424+0x4
	add	r2, r2, r3
	mov	r0, #0x3e
	add	r0, r0, r2
	mov	ip, r0
	ldrb	r0, [r0]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldr	r7, .L424+0x8
	ldr	r6, .L424+0xc
	add	r5, r3, #0
	mov	r4, #0x4
	add	r2, r2, #0x2e
	mov	r3, #0x2
.L422:
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r4
	strb	r0, [r1]
	add	r2, r2, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L422	@cond_branch
	mov	r0, #0x0
	strh	r0, [r7]
	strh	r0, [r6]
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r6]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r1, .L424+0x10
	mov	r0, #0x48
	bl	SetGpuReg
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L425:
	.align	2, 0
.L424:
	.word	sContestResults
	.word	gSprites
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
.Lfe38:
	.size	 HideLinkResultsTextBox,.Lfe38-HideLinkResultsTextBox
	.align	2, 0
	.type	 LoadContestResultsTilemaps,function
	.thumb_func
LoadContestResultsTilemaps:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	mov	r5, #0x5
	mov	r4, #0x1
	ldr	r0, .L446
	ldrb	r1, [r0]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L427	@cond_branch
	ldr	r1, .L446+0x4
	str	r5, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r2, #0x5
	mov	r3, #0x1
	bl	CopyToBgTilemapBufferRect
	mov	r5, #0xa
	b	.L428
.L447:
	.align	2, 0
.L446:
	.word	gLinkContestFlags
	.word	gLinkContestResults_Tilemap
.L427:
	ldr	r0, .L448
	ldrh	r2, [r0]
	cmp	r2, #0
	bne	.L429	@cond_branch
	ldr	r1, .L448+0x4
	b	.L443
.L449:
	.align	2, 0
.L448:
	.word	gSpecialVar_ContestRank
	.word	gNormalContestResults_Tilemap
.L429:
	cmp	r2, #0x1
	bne	.L431	@cond_branch
	ldr	r1, .L450
	b	.L443
.L451:
	.align	2, 0
.L450:
	.word	gSuperContestResults_Tilemap
.L431:
	cmp	r2, #0x2
	bne	.L433	@cond_branch
	ldr	r1, .L452
	mov	r0, #0xa
	str	r0, [sp]
	str	r2, [sp, #0x4]
	mov	r0, #0x2
	b	.L444
.L453:
	.align	2, 0
.L452:
	.word	gHyperContestResults_Tilemap
.L433:
	ldr	r1, .L454
.L443:
	mov	r0, #0xa
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
.L444:
	mov	r2, #0x5
	mov	r3, #0x1
	bl	CopyToBgTilemapBufferRect
	mov	r5, #0xf
.L428:
	ldr	r0, .L454+0x4
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L435	@cond_branch
	mov	r6, #0x0
	ldr	r1, .L454+0x8
	b	.L445
.L455:
	.align	2, 0
.L454:
	.word	gMasterContestResults_Tilemap
	.word	gSpecialVar_ContestCategory
	.word	gCoolContestResults_Tilemap
.L435:
	cmp	r0, #0x1
	bne	.L437	@cond_branch
	mov	r6, #0x1
	ldr	r1, .L456
	b	.L445
.L457:
	.align	2, 0
.L456:
	.word	gBeautyContestResults_Tilemap
.L437:
	cmp	r0, #0x2
	bne	.L439	@cond_branch
	mov	r6, #0x2
	ldr	r1, .L458
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	lsl	r4, r4, #0x18
	lsr	r3, r4, #0x18
	mov	r0, #0x5
	str	r0, [sp]
	str	r6, [sp, #0x4]
	mov	r0, #0x2
	bl	CopyToBgTilemapBufferRect
	b	.L436
.L459:
	.align	2, 0
.L458:
	.word	gCuteContestResults_Tilemap
.L439:
	cmp	r0, #0x3
	bne	.L441	@cond_branch
	mov	r6, #0x3
	ldr	r1, .L460
.L445:
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	lsl	r4, r4, #0x18
	lsr	r3, r4, #0x18
	mov	r0, #0x5
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	bl	CopyToBgTilemapBufferRect
	b	.L436
.L461:
	.align	2, 0
.L460:
	.word	gSmartContestResults_Tilemap
.L441:
	mov	r6, #0x4
	ldr	r1, .L462
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	lsl	r4, r4, #0x18
	lsr	r3, r4, #0x18
	mov	r0, #0x5
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	bl	CopyToBgTilemapBufferRect
.L436:
	add	r5, r5, #0x5
	ldr	r1, .L462+0x4
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	lsr	r3, r4, #0x18
	mov	r0, #0x6
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	bl	CopyToBgTilemapBufferRect
	ldr	r0, .L462+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x4
	str	r0, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBufferRect_ChangePalette
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L463:
	.align	2, 0
.L462:
	.word	gToughContestResults_Tilemap
	.word	gContestResults_Tilemap
	.word	sContestResults
.Lfe39:
	.size	 LoadContestResultsTilemaps,.Lfe39-LoadContestResultsTilemaps
	.align	2, 0
	.type	 GetNumPreliminaryPoints,function
	.thumb_func
GetNumPreliminaryPoints:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r1, .L468
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	lsl	r4, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	__udivsi3
	add	r1, r0, #0
	ldr	r0, .L468+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L465	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	add	r1, r1, r0
.L465:
	lsr	r1, r1, #0x10
	cmp	r1, #0
	bne	.L466	@cond_branch
	cmp	r4, #0
	beq	.L466	@cond_branch
	mov	r1, #0x1
.L466:
	cmp	r5, #0
	beq	.L467	@cond_branch
	cmp	r1, #0xa
	bls	.L467	@cond_branch
	mov	r1, #0xa
.L467:
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L469:
	.align	2, 0
.L468:
	.word	gContestMonRound1Points
	.word	0xffff
.Lfe40:
	.size	 GetNumPreliminaryPoints,.Lfe40-GetNumPreliminaryPoints
	.align	2, 0
	.type	 GetNumRound2Points,function
	.thumb_func
GetNumRound2Points:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	ldr	r1, .L479
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	add	r7, r1, #0
	cmp	r0, #0
	bge	.L471	@cond_branch
	neg	r0, r0
.L471:
	lsl	r4, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x50
	bl	__udivsi3
	add	r2, r0, #0
	ldr	r0, .L479+0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L473	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	add	r2, r2, r0
.L473:
	lsr	r2, r2, #0x10
	cmp	r2, #0
	bne	.L474	@cond_branch
	cmp	r4, #0
	beq	.L474	@cond_branch
	mov	r2, #0x1
.L474:
	cmp	r6, #0
	beq	.L475	@cond_branch
	cmp	r2, #0xa
	bls	.L475	@cond_branch
	mov	r2, #0xa
.L475:
	lsl	r0, r5, #0x1
	add	r0, r0, r7
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bge	.L476	@cond_branch
	neg	r0, r2
	lsl	r0, r0, #0x18
	b	.L478
.L480:
	.align	2, 0
.L479:
	.word	gContestMonRound2Points
	.word	0xffff
.L476:
	lsl	r0, r2, #0x18
.L478:
	lsr	r0, r0, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 GetNumRound2Points,.Lfe41-GetNumRound2Points
	.align	2, 0
	.type	 Task_DrawFinalStandingNumber,function
	.thumb_func
Task_DrawFinalStandingNumber:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L486
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r7, r0, r1
	ldrh	r2, [r7, #0x1c]
	mov	r0, #0x1c
	ldrsh	r6, [r7, r0]
	cmp	r6, #0
	bne	.L482	@cond_branch
	mov	r1, #0x8
	ldrsh	r0, [r7, r1]
	mov	r1, #0x3
	sub	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	strh	r0, [r7, #0x1e]
	add	r0, r2, #0x1
	strh	r0, [r7, #0x1c]
	b	.L483
.L487:
	.align	2, 0
.L486:
	.word	gTasks
.L482:
	cmp	r6, #0x1
	bne	.L483	@cond_branch
	ldrh	r0, [r7, #0x1e]
	sub	r0, r0, #0x1
	strh	r0, [r7, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L483	@cond_branch
	mov	r2, #0x8
	ldrsh	r4, [r7, r2]
	lsl	r4, r4, #0x11
	ldr	r0, .L488
	add	r4, r4, r0
	lsr	r4, r4, #0x10
	mov	r1, #0xa
	ldrsh	r0, [r7, r1]
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	add	r3, r3, #0x5
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r2, #0x2
	mov	r9, r2
	str	r2, [sp]
	str	r6, [sp, #0x4]
	mov	r5, #0x11
	str	r5, [sp, #0x8]
	str	r6, [sp, #0xc]
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x1
	bl	WriteSequenceToBgTilemapBuffer
	add	r4, r4, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, #0xa
	ldrsh	r0, [r7, r1]
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	add	r3, r3, #0x6
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r2, r9
	str	r2, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r6, [sp, #0xc]
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x1
	bl	WriteSequenceToBgTilemapBuffer
	ldr	r0, .L488+0x4
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x5]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x5]
	mov	r0, r8
	bl	DestroyTask
	mov	r0, #0x18
	bl	PlaySE
.L483:
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L489:
	.align	2, 0
.L488:
	.word	0x50430000
	.word	sContestResults
.Lfe42:
	.size	 Task_DrawFinalStandingNumber,.Lfe42-Task_DrawFinalStandingNumber
	.align	2, 0
	.type	 Task_StartHighlightWinnersBox,function
	.thumb_func
Task_StartHighlightWinnersBox:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r1, .L497
	ldrb	r0, [r1]
	ldr	r6, .L497+0x4
	cmp	r0, #0
	beq	.L492	@cond_branch
.L493:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L492	@cond_branch
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L493	@cond_branch
.L492:
	ldr	r1, [r6]
	lsl	r3, r4, #0x1
	add	r3, r3, r4
	lsl	r0, r3, #0x6
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	ldr	r1, [r1, #0x14]
	add	r1, r1, r0
	add	r3, r3, #0x4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x3
	str	r0, [sp, #0x4]
	mov	r0, #0x9
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	mov	r2, #0x0
	bl	CopyToBgTilemapBufferRect_ChangePalette
	ldr	r1, .L497+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x1c]
	mov	r1, #0x1
	strh	r1, [r0, #0x20]
	ldr	r1, .L497+0xc
	str	r1, [r0]
	ldr	r0, [r6]
	ldr	r0, [r0]
	strb	r5, [r0, #0x3]
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L498:
	.align	2, 0
.L497:
	.word	gContestFinalStandings
	.word	sContestResults
	.word	gTasks
	.word	Task_HighlightWinnersBox
.Lfe43:
	.size	 Task_StartHighlightWinnersBox,.Lfe43-Task_StartHighlightWinnersBox
	.align	2, 0
	.type	 Task_HighlightWinnersBox,function
	.thumb_func
Task_HighlightWinnersBox:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L505
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r5, r0, #0x10
	cmp	r5, #0x1
	bne	.L500	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1e]
	ldrh	r2, [r4, #0x20]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L505+0x4
	mov	r0, #0x91
	mov	r1, #0x1
	bl	BlendPalette
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L501	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	bne	.L500	@cond_branch
	strh	r5, [r4, #0x22]
	b	.L500
.L506:
	.align	2, 0
.L505:
	.word	gTasks
	.word	0x6f8d
.L501:
	ldrh	r0, [r4, #0x20]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L500	@cond_branch
	strh	r0, [r4, #0x22]
.L500:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 Task_HighlightWinnersBox,.Lfe44-Task_HighlightWinnersBox
	.align	2, 0
	.type	 SpriteCB_WinnerMonSlideIn,function
	.thumb_func
SpriteCB_WinnerMonSlideIn:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x9
	bgt	.L508	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L510	@cond_branch
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x0
	bl	PlayCry1
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	b	.L510
.L508:
	mov	r0, #0xc0
	lsl	r0, r0, #0x3
	add	r2, r0, #0
	ldrh	r1, [r4, #0x30]
	add	r2, r2, r1
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x20]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	mov	r1, #0xff
	and	r2, r2, r1
	strh	r2, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x77
	bgt	.L511	@cond_branch
	mov	r0, #0x78
	strh	r0, [r4, #0x20]
.L511:
	mov	r2, #0x20
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x78
	bne	.L510	@cond_branch
	ldr	r0, .L513
	str	r0, [r4, #0x1c]
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldr	r0, .L513+0x4
	ldr	r0, [r0]
	ldr	r1, [r0]
	mov	r0, #0x1
	strb	r0, [r1, #0x6]
.L510:
	pop	{r4}
	pop	{r0}
	bx	r0
.L514:
	.align	2, 0
.L513:
	.word	SpriteCallbackDummy
	.word	sContestResults
.Lfe45:
	.size	 SpriteCB_WinnerMonSlideIn,.Lfe45-SpriteCB_WinnerMonSlideIn
	.align	2, 0
	.type	 SpriteCB_WinnerMonSlideOut,function
	.thumb_func
SpriteCB_WinnerMonSlideOut:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0xc0
	lsl	r0, r0, #0x3
	add	r2, r0, #0
	ldrh	r0, [r3, #0x30]
	add	r2, r2, r0
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, r1
	strh	r0, [r3, #0x20]
	mov	r1, #0xff
	and	r2, r2, r1
	strh	r2, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L516	@cond_branch
	ldr	r0, .L517
	str	r0, [r3, #0x1c]
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L517+0x4
	ldr	r0, [r0]
	ldr	r1, [r0]
	mov	r0, #0x2
	strb	r0, [r1, #0x6]
.L516:
	pop	{r0}
	bx	r0
.L518:
	.align	2, 0
.L517:
	.word	SpriteCallbackDummy
	.word	sContestResults
.Lfe46:
	.size	 SpriteCB_WinnerMonSlideOut,.Lfe46-SpriteCB_WinnerMonSlideOut
	.align	2, 0
	.type	 Task_CreateConfetti,function
	.thumb_func
Task_CreateConfetti:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L523
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L520	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	ldr	r0, .L523+0x4
	mov	r8, r0
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0x27
	bhi	.L520	@cond_branch
	ldr	r4, .L523+0x8
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf0
	bl	__umodsi3
	add	r1, r0, #0
	sub	r1, r1, #0x14
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x2c
	mov	r3, #0x5
	bl	CreateSprite
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Random
	ldr	r1, .L523+0xc
	lsl	r5, r4, #0x4
	add	r5, r5, r4
	lsl	r5, r5, #0x2
	add	r5, r5, r1
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x17
	strh	r0, [r5, #0x2e]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x18
	bl	__umodsi3
	add	r0, r0, #0x10
	strh	r0, [r5, #0x30]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xff
	and	r0, r0, r1
	add	r0, r0, #0x30
	strh	r0, [r5, #0x32]
	bl	Random
	ldrh	r6, [r5, #0x4]
	lsl	r4, r6, #0x16
	lsr	r4, r4, #0x16
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x11
	bl	__umodsi3
	add	r4, r4, r0
	ldr	r1, .L523+0x10
	add	r0, r1, #0
	and	r4, r4, r0
	ldr	r0, .L523+0x14
	and	r0, r0, r6
	orr	r0, r0, r4
	strh	r0, [r5, #0x4]
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x7]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x7]
.L520:
	ldr	r0, .L523+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x9]
	cmp	r0, #0
	beq	.L522	@cond_branch
	add	r0, r7, #0
	bl	DestroyTask
.L522:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L524:
	.align	2, 0
.L523:
	.word	gTasks
	.word	sContestResults
	.word	sSpriteTemplate_Confetti
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.Lfe47:
	.size	 Task_CreateConfetti,.Lfe47-Task_CreateConfetti
	.align	2, 0
	.type	 SpriteCB_Confetti,function
	.thumb_func
SpriteCB_Confetti:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x32]
	ldrh	r0, [r4, #0x36]
	add	r1, r1, r0
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r4, #0x36]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	ldr	r5, .L529
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x9]
	cmp	r0, #0
	beq	.L526	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L526:
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xf8
	bgt	.L528	@cond_branch
	mov	r2, #0x22
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x74
	ble	.L527	@cond_branch
.L528:
	add	r0, r4, #0
	bl	DestroySprite
	ldr	r0, [r5]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x7]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x7]
.L527:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L530:
	.align	2, 0
.L529:
	.word	sContestResults
.Lfe48:
	.size	 SpriteCB_Confetti,.Lfe48-SpriteCB_Confetti
	.align	2, 0
	.type	 BounceMonIconInBox,function
	.thumb_func
BounceMonIconInBox:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L532
	mov	r1, #0x8
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L532+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	strh	r5, [r1, #0xa]
	ldr	r0, .L532+0x8
	lsl	r4, r4, #0x6
	add	r4, r4, r0
	ldrh	r0, [r4]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	strh	r0, [r1, #0xc]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L533:
	.align	2, 0
.L532:
	.word	Task_BounceMonIconInBox
	.word	gTasks
	.word	gContestMons
.Lfe49:
	.size	 BounceMonIconInBox,.Lfe49-BounceMonIconInBox
	.align	2, 0
	.type	 Task_BounceMonIconInBox,function
	.thumb_func
Task_BounceMonIconInBox:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L536
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r5, r1, r2
	ldrb	r6, [r5, #0x8]
	ldrh	r0, [r5, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xa
	ldrsh	r1, [r5, r2]
	cmp	r0, r1
	bne	.L535	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x1c]
	ldrh	r0, [r5, #0xc]
	ldrb	r2, [r5, #0x1e]
	ldr	r4, .L536+0x4
	lsl	r3, r6, #0x6
	add	r1, r4, #0
	add	r1, r1, #0x38
	add	r1, r3, r1
	ldr	r1, [r1]
	str	r1, [sp]
	add	r3, r3, r4
	ldrb	r1, [r3, #0x1]
	lsr	r1, r1, #0x3
	str	r1, [sp, #0x4]
	add	r1, r6, #0
	mov	r3, #0x0
	bl	LoadContestMonIcon
	ldrh	r0, [r5, #0x1e]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r5, #0x1e]
.L535:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L537:
	.align	2, 0
.L536:
	.word	gTasks
	.word	gContestMons
.Lfe50:
	.size	 Task_BounceMonIconInBox,.Lfe50-Task_BounceMonIconInBox
	.align	2, 0
	.type	 CalculateContestantsResultData,function
	.thumb_func
CalculateContestantsResultData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L572
	ldrh	r2, [r0]
	add	r4, r0, #0
	add	r3, r4, #0x2
	mov	r0, #0x2
	mov	r8, r0
.L542:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x0
	ldrsh	r1, [r3, r5]
	cmp	r0, r1
	bge	.L541	@cond_branch
	ldrh	r2, [r3]
.L541:
	add	r3, r3, #0x2
	mov	r0, #0x1
	neg	r0, r0
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0
	bge	.L542	@cond_branch
	lsl	r0, r2, #0x10
	str	r0, [sp]
	cmp	r0, #0
	bge	.L545	@cond_branch
	ldrh	r2, [r4]
	add	r3, r4, #0x2
	mov	r4, #0x2
	mov	r8, r4
.L549:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x0
	ldrsh	r1, [r3, r5]
	cmp	r0, r1
	ble	.L548	@cond_branch
	ldrh	r2, [r3]
.L548:
	add	r3, r3, #0x2
	mov	r0, #0x1
	neg	r0, r0
	add	r8, r8, r0
	lsl	r1, r2, #0x10
	str	r1, [sp]
	mov	r4, r8
	cmp	r4, #0
	bge	.L549	@cond_branch
.L545:
	mov	r5, #0x0
	mov	r8, r5
	mov	sl, r5
.L555:
	ldr	r0, .L572+0x4
	mov	r1, r8
	lsl	r7, r1, #0x1
	add	r0, r7, r0
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	lsl	r0, r1, #0x5
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r4, [sp]
	asr	r5, r4, #0x10
	add	r1, r5, #0
	cmp	r5, #0
	bge	.L556	@cond_branch
	neg	r1, r5
.L556:
	bl	__divsi3
	add	r4, r0, #0
	mov	r1, #0xa
	bl	__modsi3
	cmp	r0, #0x4
	ble	.L557	@cond_branch
	add	r4, r4, #0xa
.L557:
	ldr	r0, .L572+0x8
	mov	r9, r0
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	mov	r1, sl
	add	r6, r1, r0
	add	r0, r4, #0
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r6]
	ldr	r0, .L572+0xc
	add	r7, r7, r0
	mov	r2, #0x0
	ldrsh	r1, [r7, r2]
	cmp	r1, #0
	bge	.L558	@cond_branch
	neg	r1, r1
.L558:
	lsl	r0, r1, #0x5
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r5, #0
	cmp	r1, #0
	bge	.L559	@cond_branch
	neg	r1, r1
.L559:
	bl	__divsi3
	add	r4, r0, #0
	mov	r1, #0xa
	bl	__modsi3
	cmp	r0, #0x4
	ble	.L560	@cond_branch
	add	r4, r4, #0xa
.L560:
	add	r0, r4, #0
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r6, #0x4]
	mov	r4, #0x0
	ldrsh	r0, [r7, r4]
	cmp	r0, #0
	bge	.L561	@cond_branch
	mov	r0, #0x1
	strb	r0, [r6, #0x10]
.L561:
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	mov	r1, sl
	add	r4, r1, r0
	ldr	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	sub	r0, r0, r1
	lsl	r0, r0, #0xb
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	mov	r5, #0xff
	and	r0, r0, r5
	cmp	r0, #0x7f
	bls	.L562	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r1, r2
.L562:
	lsr	r0, r1, #0x8
	str	r0, [r4, #0x8]
	ldr	r1, [r4, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	sub	r0, r0, r1
	lsl	r0, r0, #0xb
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	and	r0, r0, r5
	cmp	r0, #0x7f
	bls	.L563	@cond_branch
	mov	r5, #0x80
	lsl	r5, r5, #0x1
	add	r1, r1, r5
.L563:
	lsr	r0, r1, #0x8
	str	r0, [r4, #0xc]
	mov	r0, r8
	lsl	r4, r0, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetNumPreliminaryPoints
	mov	r2, r9
	ldr	r1, [r2]
	ldr	r1, [r1, #0x4]
	add	r1, r1, sl
	strb	r0, [r1, #0x11]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetNumRound2Points
	mov	r4, r9
	ldr	r1, [r4]
	ldr	r1, [r1, #0x4]
	add	r1, r1, sl
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0
	bge	.L564	@cond_branch
	neg	r0, r0
.L564:
	strb	r0, [r1, #0x12]
	ldr	r0, .L572+0x10
	add	r0, r0, r8
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L554	@cond_branch
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	mov	r2, sl
	add	r1, r2, r0
	ldr	r5, [r1, #0x8]
	ldrh	r3, [r1, #0x8]
	ldr	r4, [r1, #0xc]
	ldrh	r2, [r1, #0xc]
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0
	beq	.L566	@cond_branch
	lsl	r0, r2, #0x10
	neg	r0, r0
	lsr	r2, r0, #0x10
.L566:
	lsl	r0, r3, #0x10
	asr	r3, r0, #0x10
	lsl	r0, r2, #0x10
	asr	r2, r0, #0x10
	add	r0, r3, r2
	cmp	r0, #0x58
	bne	.L554	@cond_branch
	cmp	r2, #0
	ble	.L568	@cond_branch
	sub	r0, r4, #0x1
	str	r0, [r1, #0xc]
	b	.L554
.L573:
	.align	2, 0
.L572:
	.word	gContestMonTotalPoints
	.word	gContestMonRound1Points
	.word	sContestResults
	.word	gContestMonRound2Points
	.word	gContestFinalStandings
.L568:
	cmp	r3, #0
	ble	.L554	@cond_branch
	sub	r0, r5, #0x1
	str	r0, [r1, #0x8]
.L554:
	mov	r4, #0x14
	add	sl, sl, r4
	mov	r5, #0x1
	add	r8, r8, r5
	mov	r0, r8
	cmp	r0, #0x3
	bgt	.LCB5706
	b	.L555	@long jump
.LCB5706:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 CalculateContestantsResultData,.Lfe51-CalculateContestantsResultData
	.align	2, 0
	.type	 UpdateContestResultBars,function
	.thumb_func
UpdateContestResultBars:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r3, #0x0
	str	r3, [sp, #0xc]
	cmp	r0, #0
	bne	.L575	@cond_branch
	mov	r9, r3
	ldr	r4, .L600
	mov	sl, r4
	mov	r7, #0xa0
	lsl	r7, r7, #0x13
	mov	r6, #0x0
.L579:
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r0, r6, r0
	ldrb	r2, [r0, #0x11]
	cmp	r8, r2
	bcs	.L578	@cond_branch
	add	r2, r2, #0x13
	mov	r3, r8
	sub	r2, r2, r3
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsr	r3, r7, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	ldr	r1, .L600+0x4
	bl	FillBgTilemapBufferRect_Palette0
	ldr	r0, .L600+0x8
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, sl
	ldr	r4, [r0]
	ldr	r1, [r4, #0x4]
	add	r1, r6, r1
	ldr	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	ldrb	r1, [r1, #0x11]
	bl	__udivsi3
	mov	r1, r8
	add	r1, r1, #0x1
	mov	r3, r0
	mul	r3, r3, r1
	ldr	r0, .L600+0xc
	and	r0, r0, r3
	ldr	r1, .L600+0x10
	cmp	r0, r1
	bls	.L581	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r3, r3, r1
.L581:
	ldr	r1, .L600+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, r9
	strh	r1, [r0, #0x8]
	lsr	r1, r3, #0x10
	strh	r1, [r0, #0xa]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	ldr	r0, [sp, #0x8]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
.L578:
	mov	r3, #0xc0
	lsl	r3, r3, #0x12
	add	r7, r7, r3
	add	r6, r6, #0x14
	mov	r4, #0x1
	add	r9, r9, r4
	mov	r0, r9
	cmp	r0, #0x3
	ble	.L579	@cond_branch
	b	.L583
.L601:
	.align	2, 0
.L600:
	.word	sContestResults
	.word	0x60b3
	.word	Task_UpdateContestResultBar
	.word	0xffff
	.word	0x7fff
	.word	gTasks
.L575:
	mov	r1, #0x0
	mov	r9, r1
	mov	sl, r1
	mov	r3, #0xc0
	lsl	r3, r3, #0x13
	str	r3, [sp, #0x10]
.L587:
	ldr	r4, .L602
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r0, r0, sl
	ldrb	r2, [r0, #0x12]
	ldrb	r0, [r0, #0x10]
	ldr	r1, .L602+0x4
	cmp	r0, #0
	beq	.L588	@cond_branch
	add	r1, r1, #0x2
.L588:
	lsl	r0, r2, #0x18
	asr	r0, r0, #0x18
	cmp	r8, r0
	bge	.L586	@cond_branch
	mov	r3, r8
	lsl	r2, r3, #0x18
	asr	r2, r2, #0x18
	sub	r2, r2, #0x13
	sub	r2, r0, r2
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r4, [sp, #0x10]
	lsr	r3, r4, #0x18
	mov	r7, #0x1
	str	r7, [sp]
	str	r7, [sp, #0x4]
	mov	r0, #0x1
	bl	FillBgTilemapBufferRect_Palette0
	ldr	r0, .L602+0x8
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L602
	ldr	r6, [r0]
	ldr	r1, [r6, #0x4]
	add	r1, r1, sl
	ldr	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	ldrb	r1, [r1, #0x12]
	bl	__udivsi3
	mov	r1, r8
	add	r1, r1, #0x1
	mov	r3, r0
	mul	r3, r3, r1
	ldr	r0, .L602+0xc
	and	r0, r0, r3
	ldr	r1, .L602+0x10
	cmp	r0, r1
	bls	.L591	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r3, r3, r1
.L591:
	ldr	r1, .L602+0x14
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r0, r9
	strh	r0, [r4, #0x8]
	ldr	r0, [r6, #0x4]
	add	r0, r0, sl
	ldrb	r0, [r0, #0x10]
	add	r6, r1, #0
	cmp	r0, #0
	beq	.L592	@cond_branch
	strh	r7, [r4, #0xc]
	ldr	r0, [sp, #0xc]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0xc]
	b	.L593
.L603:
	.align	2, 0
.L602:
	.word	sContestResults
	.word	0x60a3
	.word	Task_UpdateContestResultBar
	.word	0xffff
	.word	0x7fff
	.word	gTasks
.L592:
	ldr	r0, [sp, #0x8]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
.L593:
	ldr	r1, .L604
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	mov	r4, sl
	add	r1, r4, r0
	ldrb	r0, [r1, #0x10]
	ldr	r4, .L604
	cmp	r0, #0
	beq	.L594	@cond_branch
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	lsr	r2, r3, #0x10
	ldr	r1, [r1, #0x8]
	sub	r1, r1, r2
	b	.L599
.L605:
	.align	2, 0
.L604:
	.word	sContestResults
.L594:
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	lsr	r2, r3, #0x10
	ldr	r1, [r1, #0x8]
	add	r1, r1, r2
.L599:
	strh	r1, [r0, #0xa]
	ldr	r0, [r4]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x14]
.L586:
	mov	r0, #0x14
	add	sl, sl, r0
	ldr	r1, [sp, #0x10]
	mov	r3, #0xc0
	lsl	r3, r3, #0x12
	add	r1, r1, r3
	str	r1, [sp, #0x10]
	mov	r4, #0x1
	add	r9, r9, r4
	mov	r0, r9
	cmp	r0, #0x3
	bgt	.LCB6049
	b	.L587	@long jump
.LCB6049:
.L583:
	ldr	r1, [sp, #0xc]
	cmp	r1, #0
	beq	.L597	@cond_branch
	mov	r0, #0x16
	bl	PlaySE
.L597:
	ldr	r3, [sp, #0x8]
	cmp	r3, #0
	beq	.L598	@cond_branch
	mov	r0, #0x15
	bl	PlaySE
.L598:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 UpdateContestResultBars,.Lfe52-UpdateContestResultBars
	.align	2, 0
	.type	 Task_UpdateContestResultBar,function
	.thumb_func
Task_UpdateContestResultBar:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r4, #0x0
	mov	r9, r4
	ldr	r1, .L635
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r6, [r0, #0x8]
	ldrh	r7, [r0, #0xa]
	ldrh	r1, [r0, #0xc]
	mov	ip, r1
	mov	r2, #0xc
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	beq	.L607	@cond_branch
	ldr	r2, .L635+0x4
	ldr	r0, [r2]
	ldr	r0, [r0]
	lsl	r1, r6, #0x1
	add	r0, r0, #0xc
	add	r0, r0, r1
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	add	r5, r1, #0
	cmp	r0, #0
	bgt	.L609	@cond_branch
	b	.L632
.L636:
	.align	2, 0
.L635:
	.word	gTasks
	.word	sContestResults
.L607:
	ldr	r2, .L637
	ldr	r0, [r2]
	ldr	r0, [r0]
	lsl	r1, r6, #0x1
	add	r0, r0, #0xc
	add	r0, r0, r1
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	add	r5, r1, #0
	cmp	r0, #0x57
	ble	.L609	@cond_branch
.L632:
	mov	r4, #0x1
.L609:
	ldr	r0, [r2]
	ldr	r0, [r0]
	add	r0, r0, #0xc
	add	r2, r0, r5
	ldrh	r3, [r2]
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	cmp	r1, r0
	bne	.L611	@cond_branch
	mov	r1, #0x1
	mov	r9, r1
.L611:
	mov	r0, r9
	cmp	r0, #0
	bne	.L612	@cond_branch
	cmp	r4, #0
	beq	.L613	@cond_branch
	strh	r7, [r2]
	b	.L612
.L638:
	.align	2, 0
.L637:
	.word	sContestResults
.L613:
	mov	r1, ip
	cmp	r1, #0
	beq	.L615	@cond_branch
	sub	r0, r3, #0x1
	b	.L633
.L615:
	add	r0, r3, #0x1
.L633:
	strh	r0, [r2]
.L612:
	cmp	r4, #0
	bne	.L617	@cond_branch
	mov	r2, r9
	cmp	r2, #0
	bne	.L631	@cond_branch
	mov	r2, #0x0
.L621:
	ldr	r0, .L639
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, #0xc
	add	r0, r0, r5
	mov	r1, #0x0
	ldrsh	r3, [r0, r1]
	add	r0, r2, #0x1
	lsl	r1, r0, #0x3
	add	r4, r0, #0
	cmp	r3, r1
	blt	.L622	@cond_branch
	mov	r0, #0x8
	b	.L623
.L640:
	.align	2, 0
.L639:
	.word	sContestResults
.L622:
	lsl	r0, r2, #0x3
	cmp	r3, r0
	blt	.L624	@cond_branch
	add	r0, r3, #0
	cmp	r3, #0
	bge	.L625	@cond_branch
	add	r0, r3, #0x7
.L625:
	asr	r0, r0, #0x3
	lsl	r0, r0, #0x3
	sub	r0, r3, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L623
.L624:
	mov	r0, #0x0
.L623:
	cmp	r0, #0x3
	bhi	.L627	@cond_branch
	ldr	r3, .L641
	b	.L634
.L642:
	.align	2, 0
.L641:
	.word	0x504c
.L627:
	ldr	r3, .L643
.L634:
	add	r1, r0, r3
	add	r2, r2, #0x7
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r3, r5, r6
	add	r3, r3, #0x6
	lsl	r3, r3, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	lsr	r3, r3, #0x18
	bl	FillBgTilemapBufferRect_Palette0
	add	r2, r4, #0
	cmp	r2, #0xa
	ble	.L621	@cond_branch
.L617:
	mov	r0, r9
	cmp	r0, #0
	beq	.L630	@cond_branch
.L631:
	ldr	r0, .L643+0x4
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x14]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	mov	r0, r8
	bl	DestroyTask
.L630:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L644:
	.align	2, 0
.L643:
	.word	0x5057
	.word	sContestResults
.Lfe53:
	.size	 Task_UpdateContestResultBar,.Lfe53-Task_UpdateContestResultBar
	.align	2, 0
	.type	 AllocContestResults,function
	.thumb_func
AllocContestResults:
	push	{r4, r5, lr}
	ldr	r4, .L646
	mov	r0, #0x20
	bl	AllocZeroed
	str	r0, [r4]
	mov	r0, #0x18
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1]
	mov	r0, #0x50
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x4]
	mov	r5, #0x80
	lsl	r5, r5, #0x4
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x8]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0xc]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x10]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x14]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x18]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x1c]
	bl	AllocateMonSpritesGfx
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L647:
	.align	2, 0
.L646:
	.word	sContestResults
.Lfe54:
	.size	 AllocContestResults,.Lfe54-AllocContestResults
	.align	2, 0
	.type	 FreeContestResults,function
	.thumb_func
FreeContestResults:
	push	{r4, r5, lr}
	ldr	r5, .L649
	ldr	r0, [r5]
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r5]
	mov	r4, #0x0
	str	r4, [r0]
	ldr	r0, [r0, #0x4]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x4]
	ldr	r0, [r0, #0x8]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x8]
	ldr	r0, [r0, #0xc]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0xc]
	ldr	r0, [r0, #0x10]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x10]
	ldr	r0, [r0, #0x14]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x14]
	ldr	r0, [r0, #0x18]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x18]
	ldr	r0, [r0, #0x1c]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x1c]
	bl	Free
	str	r4, [r5]
	bl	FreeMonSpritesGfx
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L650:
	.align	2, 0
.L649:
	.word	sContestResults
.Lfe55:
	.size	 FreeContestResults,.Lfe55-FreeContestResults
	.align	2, 0
	.type	 AddContestTextPrinter,function
	.thumb_func
AddContestTextPrinter:
	push	{r4, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	str	r1, [sp]
	mov	r0, sp
	mov	r3, #0x0
	strb	r4, [r0, #0x4]
	mov	r1, sp
	mov	r0, #0x7
	strb	r0, [r1, #0x5]
	mov	r0, sp
	strb	r2, [r0, #0x6]
	mov	r1, #0x2
	strb	r1, [r0, #0x7]
	strb	r2, [r0, #0x8]
	strb	r1, [r0, #0x9]
	strb	r3, [r0, #0xa]
	strb	r3, [r0, #0xb]
	mov	r3, sp
	ldrb	r2, [r3, #0xc]
	sub	r1, r1, #0x12
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	mov	r2, sp
	mov	r0, #0x10
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	mov	r1, sp
	mov	r0, #0x80
	strb	r0, [r1, #0xd]
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 AddContestTextPrinter,.Lfe56-AddContestTextPrinter
	.align	2, 0
	.globl	TryEnterContestMon
	.type	 TryEnterContestMon,function
	.thumb_func
TryEnterContestMon:
	push	{r4, r5, lr}
	ldr	r0, .L654
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L654+0x4
	add	r0, r0, r1
	bl	GetContestEntryEligibility
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L653	@cond_branch
	ldr	r4, .L654+0x8
	ldrb	r0, [r4]
	ldr	r1, .L654+0xc
	ldrb	r1, [r1]
	bl	SetContestants
	ldrb	r0, [r4]
	bl	CalculateRound1Points
.L653:
	ldr	r0, .L654+0x10
	strh	r5, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L655:
	.align	2, 0
.L654:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestCategory
	.word	gSpecialVar_ContestRank
	.word	gSpecialVar_Result
.Lfe57:
	.size	 TryEnterContestMon,.Lfe57-TryEnterContestMon
	.align	2, 0
	.globl	HasMonWonThisContestBefore
	.type	 HasMonWonThisContestBefore,function
	.thumb_func
HasMonWonThisContestBefore:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r0, .L671
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L671+0x4
	add	r2, r1, r0
	ldr	r0, .L671+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L657	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L671+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L672:
	.align	2, 0
.L671:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestCategory
	.word	.L668
	.align	2, 0
	.align	2, 0
.L668:
	.word	.L658
	.word	.L660
	.word	.L662
	.word	.L664
	.word	.L666
.L658:
	add	r0, r2, #0
	mov	r1, #0x32
	b	.L670
.L660:
	add	r0, r2, #0
	mov	r1, #0x33
	b	.L670
.L662:
	add	r0, r2, #0
	mov	r1, #0x34
	b	.L670
.L664:
	add	r0, r2, #0
	mov	r1, #0x35
	b	.L670
.L666:
	add	r0, r2, #0
	mov	r1, #0x36
.L670:
	bl	GetMonData
	ldr	r1, .L673
	ldrh	r1, [r1]
	cmp	r0, r1
	bls	.L657	@cond_branch
	mov	r4, #0x1
.L657:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L674:
	.align	2, 0
.L673:
	.word	gSpecialVar_ContestRank
.Lfe58:
	.size	 HasMonWonThisContestBefore,.Lfe58-HasMonWonThisContestBefore
	.align	2, 0
	.globl	GiveMonContestRibbon
	.type	 GiveMonContestRibbon,function
	.thumb_func
GiveMonContestRibbon:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L695
	ldr	r0, .L695+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB6671
	b	.L675	@long jump
.LCB6671:
	ldr	r0, .L695+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bls	.LCB6676
	b	.L675	@long jump
.LCB6676:
	lsl	r0, r0, #0x2
	ldr	r1, .L695+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L696:
	.align	2, 0
.L695:
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gSpecialVar_ContestCategory
	.word	.L693
	.align	2, 0
	.align	2, 0
.L693:
	.word	.L678
	.word	.L681
	.word	.L684
	.word	.L687
	.word	.L690
.L678:
	ldr	r6, .L697
	ldrb	r0, [r6]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L697+0x4
	add	r0, r0, r4
	mov	r1, #0x32
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, sp
	strb	r1, [r0]
	ldr	r0, .L697+0x8
	ldrh	r0, [r0]
	cmp	r1, r0
	bls	.LCB6722
	b	.L675	@long jump
.LCB6722:
	add	r0, r1, #0
	cmp	r0, #0x3
	bls	.LCB6726
	b	.L675	@long jump
.LCB6726:
	add	r1, r0, #0x1
	mov	r0, sp
	strb	r1, [r0]
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x32
	mov	r2, sp
	bl	SetMonData
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	bl	GetRibbonCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.LCB6749
	b	.L675	@long jump
.LCB6749:
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x32
	bl	TryPutSpotTheCutiesOnAir
	b	.L675
.L698:
	.align	2, 0
.L697:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestRank
.L681:
	mov	r4, sp
	ldr	r7, .L699
	ldrb	r0, [r7]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L699+0x4
	add	r0, r0, r5
	mov	r1, #0x33
	bl	GetMonData
	strb	r0, [r4]
	mov	r0, sp
	ldrb	r2, [r0]
	ldr	r0, .L699+0x8
	ldrh	r0, [r0]
	cmp	r2, r0
	bls	.LCB6790
	b	.L675	@long jump
.LCB6790:
	cmp	r2, #0x3
	bls	.LCB6795
	b	.L675	@long jump
.LCB6795:
	mov	r1, sp
	add	r0, r2, #0x1
	strb	r0, [r1]
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x33
	mov	r2, sp
	bl	SetMonData
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	bl	GetRibbonCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.LCB6816
	b	.L675	@long jump
.LCB6816:
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x33
	bl	TryPutSpotTheCutiesOnAir
	b	.L675
.L700:
	.align	2, 0
.L699:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestRank
.L684:
	mov	r4, sp
	ldr	r7, .L701
	ldrb	r0, [r7]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L701+0x4
	add	r0, r0, r5
	mov	r1, #0x34
	bl	GetMonData
	strb	r0, [r4]
	mov	r0, sp
	ldrb	r2, [r0]
	ldr	r0, .L701+0x8
	ldrh	r0, [r0]
	cmp	r2, r0
	bls	.LCB6857
	b	.L675	@long jump
.LCB6857:
	cmp	r2, #0x3
	bls	.LCB6862
	b	.L675	@long jump
.LCB6862:
	mov	r1, sp
	add	r0, r2, #0x1
	strb	r0, [r1]
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x34
	mov	r2, sp
	bl	SetMonData
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	bl	GetRibbonCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L675	@cond_branch
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x34
	bl	TryPutSpotTheCutiesOnAir
	b	.L675
.L702:
	.align	2, 0
.L701:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestRank
.L687:
	mov	r4, sp
	ldr	r7, .L703
	ldrb	r0, [r7]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L703+0x4
	add	r0, r0, r5
	mov	r1, #0x35
	bl	GetMonData
	strb	r0, [r4]
	mov	r0, sp
	ldrb	r2, [r0]
	ldr	r0, .L703+0x8
	ldrh	r0, [r0]
	cmp	r2, r0
	bhi	.L675	@cond_branch
	cmp	r2, #0x3
	bhi	.L675	@cond_branch
	mov	r1, sp
	add	r0, r2, #0x1
	strb	r0, [r1]
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x35
	mov	r2, sp
	bl	SetMonData
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	bl	GetRibbonCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L675	@cond_branch
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x35
	bl	TryPutSpotTheCutiesOnAir
	b	.L675
.L704:
	.align	2, 0
.L703:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestRank
.L690:
	mov	r4, sp
	ldr	r7, .L705
	ldrb	r0, [r7]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L705+0x4
	add	r0, r0, r5
	mov	r1, #0x36
	bl	GetMonData
	strb	r0, [r4]
	mov	r0, sp
	ldrb	r2, [r0]
	ldr	r0, .L705+0x8
	ldrh	r0, [r0]
	cmp	r2, r0
	bhi	.L675	@cond_branch
	cmp	r2, #0x3
	bhi	.L675	@cond_branch
	mov	r1, sp
	add	r0, r2, #0x1
	strb	r0, [r1]
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x36
	mov	r2, sp
	bl	SetMonData
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	bl	GetRibbonCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L675	@cond_branch
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x36
	bl	TryPutSpotTheCutiesOnAir
.L675:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L706:
	.align	2, 0
.L705:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestRank
.Lfe59:
	.size	 GiveMonContestRibbon,.Lfe59-GiveMonContestRibbon
	.align	2, 0
	.globl	BufferContestantTrainerName
	.type	 BufferContestantTrainerName,function
	.thumb_func
BufferContestantTrainerName:
	push	{r4, lr}
	ldr	r4, .L708
	ldr	r0, .L708+0x4
	ldrh	r1, [r0]
	lsl	r1, r1, #0x6
	ldr	r0, .L708+0x8
	add	r1, r1, r0
	add	r0, r4, #0
	bl	StringCopy
	add	r0, r4, #0
	bl	sub_81DB5AC
	pop	{r4}
	pop	{r0}
	bx	r0
.L709:
	.align	2, 0
.L708:
	.word	gStringVar1
	.word	gSpecialVar_0x8006
	.word	gContestMons+0xd
.Lfe60:
	.size	 BufferContestantTrainerName,.Lfe60-BufferContestantTrainerName
	.align	2, 0
	.globl	BufferContestantMonNickname
	.type	 BufferContestantMonNickname,function
	.thumb_func
BufferContestantMonNickname:
	push	{lr}
	ldr	r0, .L711
	ldr	r1, .L711+0x4
	ldrh	r1, [r1]
	lsl	r1, r1, #0x6
	ldr	r2, .L711+0x8
	add	r1, r1, r2
	bl	StringCopy
	pop	{r0}
	bx	r0
.L712:
	.align	2, 0
.L711:
	.word	gStringVar3
	.word	gSpecialVar_0x8006
	.word	gContestMons+0x2
.Lfe61:
	.size	 BufferContestantMonNickname,.Lfe61-BufferContestantMonNickname
	.align	2, 0
	.globl	GetContestMonConditionRanking
	.type	 GetContestMonConditionRanking,function
	.thumb_func
GetContestMonConditionRanking:
	push	{r4, r5, r6, lr}
	mov	r1, #0x0
	mov	r2, #0x0
	ldr	r5, .L720
	ldr	r4, .L720+0x4
	ldr	r0, .L720+0x8
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r6, #0x0
	ldrsh	r3, [r0, r6]
.L717:
	lsl	r0, r1, #0x1
	add	r0, r0, r4
	mov	r6, #0x0
	ldrsh	r0, [r0, r6]
	cmp	r3, r0
	bge	.L716	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L716:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bls	.L717	@cond_branch
	strh	r2, [r5]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L721:
	.align	2, 0
.L720:
	.word	gSpecialVar_0x8004
	.word	gContestMonRound1Points
	.word	gSpecialVar_0x8006
.Lfe62:
	.size	 GetContestMonConditionRanking,.Lfe62-GetContestMonConditionRanking
	.align	2, 0
	.globl	GetContestMonCondition
	.type	 GetContestMonCondition,function
	.thumb_func
GetContestMonCondition:
	ldr	r2, .L723
	ldr	r1, .L723+0x4
	ldr	r0, .L723+0x8
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2]
	bx	lr
.L724:
	.align	2, 0
.L723:
	.word	gSpecialVar_0x8004
	.word	gContestMonRound1Points
	.word	gSpecialVar_0x8006
.Lfe63:
	.size	 GetContestMonCondition,.Lfe63-GetContestMonCondition
	.align	2, 0
	.globl	GetContestWinnerId
	.type	 GetContestWinnerId,function
	.thumb_func
GetContestWinnerId:
	push	{lr}
	mov	r1, #0x0
	ldr	r2, .L732
	ldrb	r0, [r2]
	ldr	r3, .L732+0x4
	cmp	r0, #0
	beq	.L727	@cond_branch
.L728:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bhi	.L727	@cond_branch
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L728	@cond_branch
.L727:
	strh	r1, [r3]
	pop	{r0}
	bx	r0
.L733:
	.align	2, 0
.L732:
	.word	gContestFinalStandings
	.word	gSpecialVar_0x8005
.Lfe64:
	.size	 GetContestWinnerId,.Lfe64-GetContestWinnerId
	.align	2, 0
	.globl	BufferContestWinnerTrainerName
	.type	 BufferContestWinnerTrainerName,function
	.thumb_func
BufferContestWinnerTrainerName:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r2, .L741
	ldrb	r0, [r2]
	ldr	r4, .L741+0x4
	ldr	r3, .L741+0x8
	cmp	r0, #0
	beq	.L736	@cond_branch
.L737:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bhi	.L736	@cond_branch
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L737	@cond_branch
.L736:
	lsl	r1, r1, #0x6
	add	r1, r1, r3
	add	r0, r4, #0
	bl	StringCopy
	add	r0, r4, #0
	bl	sub_81DB5AC
	pop	{r4}
	pop	{r0}
	bx	r0
.L742:
	.align	2, 0
.L741:
	.word	gContestFinalStandings
	.word	gStringVar3
	.word	gContestMons+0xd
.Lfe65:
	.size	 BufferContestWinnerTrainerName,.Lfe65-BufferContestWinnerTrainerName
	.align	2, 0
	.globl	BufferContestWinnerMonName
	.type	 BufferContestWinnerMonName,function
	.thumb_func
BufferContestWinnerMonName:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r2, .L750
	ldrb	r0, [r2]
	ldr	r4, .L750+0x4
	ldr	r3, .L750+0x8
	cmp	r0, #0
	beq	.L745	@cond_branch
.L746:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bhi	.L745	@cond_branch
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L746	@cond_branch
.L745:
	lsl	r1, r1, #0x6
	add	r1, r1, r3
	add	r0, r4, #0
	bl	StringCopy
	pop	{r4}
	pop	{r0}
	bx	r0
.L751:
	.align	2, 0
.L750:
	.word	gContestFinalStandings
	.word	gStringVar1
	.word	gContestMons+0x2
.Lfe66:
	.size	 BufferContestWinnerMonName,.Lfe66-BufferContestWinnerMonName
	.align	2, 0
	.globl	CB2_SetStartContestCallback
	.type	 CB2_SetStartContestCallback,function
	.thumb_func
CB2_SetStartContestCallback:
	push	{lr}
	ldr	r0, .L753
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L754:
	.align	2, 0
.L753:
	.word	CB2_StartContest
.Lfe67:
	.size	 CB2_SetStartContestCallback,.Lfe67-CB2_SetStartContestCallback
	.align	2, 0
	.type	 Task_StartContest,function
	.thumb_func
Task_StartContest:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L757
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L756	@cond_branch
	add	r0, r2, #0
	bl	DestroyTask
	ldr	r0, .L757+0x4
	bl	SetMainCallback2
.L756:
	pop	{r0}
	bx	r0
.L758:
	.align	2, 0
.L757:
	.word	gPaletteFade
	.word	CB2_SetStartContestCallback
.Lfe68:
	.size	 Task_StartContest,.Lfe68-Task_StartContest
	.align	2, 0
	.globl	StartContest
	.type	 StartContest,function
	.thumb_func
StartContest:
	push	{lr}
	add	sp, sp, #-0x4
	bl	ScriptContext2_Enable
	ldr	r0, .L760
	mov	r1, #0xa
	bl	CreateTask
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L761:
	.align	2, 0
.L760:
	.word	Task_StartContest
.Lfe69:
	.size	 StartContest,.Lfe69-StartContest
	.align	2, 0
	.globl	BufferContestantMonSpecies
	.type	 BufferContestantMonSpecies,function
	.thumb_func
BufferContestantMonSpecies:
	ldr	r2, .L763
	ldr	r1, .L763+0x4
	ldr	r0, .L763+0x8
	ldrh	r0, [r0]
	lsl	r0, r0, #0x6
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	strh	r0, [r2]
	bx	lr
.L764:
	.align	2, 0
.L763:
	.word	gSpecialVar_0x8004
	.word	gContestMons
	.word	gSpecialVar_0x8006
.Lfe70:
	.size	 BufferContestantMonSpecies,.Lfe70-BufferContestantMonSpecies
	.align	2, 0
	.type	 Task_StartShowContestResults,function
	.thumb_func
Task_StartShowContestResults:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L767
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L766	@cond_branch
	add	r0, r2, #0
	bl	DestroyTask
	ldr	r0, .L767+0x4
	bl	SetMainCallback2
.L766:
	pop	{r0}
	bx	r0
.L768:
	.align	2, 0
.L767:
	.word	gPaletteFade
	.word	CB2_StartShowContestResults
.Lfe71:
	.size	 Task_StartShowContestResults,.Lfe71-Task_StartShowContestResults
	.align	2, 0
	.globl	ShowContestResults
	.type	 ShowContestResults,function
	.thumb_func
ShowContestResults:
	push	{lr}
	add	sp, sp, #-0x4
	bl	ScriptContext2_Enable
	ldr	r0, .L770
	mov	r1, #0xa
	bl	CreateTask
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L771:
	.align	2, 0
.L770:
	.word	Task_StartShowContestResults
.Lfe72:
	.size	 ShowContestResults,.Lfe72-ShowContestResults
	.align	2, 0
	.globl	GetContestPlayerId
	.type	 GetContestPlayerId,function
	.thumb_func
GetContestPlayerId:
	ldr	r0, .L773
	ldr	r1, .L773+0x4
	ldrb	r1, [r1]
	strh	r1, [r0]
	bx	lr
.L774:
	.align	2, 0
.L773:
	.word	gSpecialVar_0x8004
	.word	gContestPlayerMonIndex
.Lfe73:
	.size	 GetContestPlayerId,.Lfe73-GetContestPlayerId
	.align	2, 0
	.globl	ContestLinkTransfer
	.type	 ContestLinkTransfer,function
	.thumb_func
ContestLinkTransfer:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	bl	ScriptContext2_Enable
	ldr	r6, .L776
	add	r0, r6, #0
	mov	r1, #0x0
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r2, .L776+0x4
	add	r0, r4, #0
	add	r1, r6, #0
	bl	SetTaskFuncWithFollowupFunc
	ldr	r1, .L776+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x1a]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L777:
	.align	2, 0
.L776:
	.word	Task_LinkContest_Init
	.word	Task_StartCommunication
	.word	gTasks
.Lfe74:
	.size	 ContestLinkTransfer,.Lfe74-ContestLinkTransfer
	.align	2, 0
	.type	 Task_StartCommunication,function
	.thumb_func
Task_StartCommunication:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L781
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L779	@cond_branch
	ldr	r0, .L781+0x4
	ldrb	r0, [r0]
	bl	CreateContestMonFromParty
	ldr	r1, .L781+0x8
	ldr	r2, .L781+0xc
	add	r0, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	b	.L780
.L782:
	.align	2, 0
.L781:
	.word	gLinkContestFlags
	.word	gContestMonPartyIndex
	.word	Task_LinkContest_CommunicateMonsRS
	.word	Task_StartCommunicateRngRS
.L779:
	ldr	r0, .L783
	ldrb	r0, [r0]
	bl	CreateContestMonFromParty
	ldr	r1, .L783+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L783+0x8
	str	r1, [r0]
.L780:
	pop	{r4}
	pop	{r0}
	bx	r0
.L784:
	.align	2, 0
.L783:
	.word	gContestMonPartyIndex
	.word	gTasks
	.word	Task_LinkContest_StartCommunicationEm
.Lfe75:
	.size	 Task_StartCommunication,.Lfe75-Task_StartCommunication
	.align	2, 0
	.type	 Task_StartCommunicateRngRS,function
	.thumb_func
Task_StartCommunicateRngRS:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L786
	ldr	r2, .L786+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L787:
	.align	2, 0
.L786:
	.word	Task_LinkContest_CommunicateRngRS
	.word	Task_StartCommunicateLeaderIdsRS
.Lfe76:
	.size	 Task_StartCommunicateRngRS,.Lfe76-Task_StartCommunicateRngRS
	.align	2, 0
	.type	 Task_StartCommunicateLeaderIdsRS,function
	.thumb_func
Task_StartCommunicateLeaderIdsRS:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L789
	ldr	r2, .L789+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L790:
	.align	2, 0
.L789:
	.word	Task_LinkContest_CommunicateLeaderIdsRS
	.word	Task_StartCommunicateCategoryRS
.Lfe77:
	.size	 Task_StartCommunicateLeaderIdsRS,.Lfe77-Task_StartCommunicateLeaderIdsRS
	.align	2, 0
	.type	 Task_StartCommunicateCategoryRS,function
	.thumb_func
Task_StartCommunicateCategoryRS:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L792
	ldr	r2, .L792+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L793:
	.align	2, 0
.L792:
	.word	Task_LinkContest_CommunicateCategoryRS
	.word	Task_LinkContest_SetUpContestRS
.Lfe78:
	.size	 Task_StartCommunicateCategoryRS,.Lfe78-Task_StartCommunicateCategoryRS
	.align	2, 0
	.type	 Task_LinkContest_SetUpContestRS,function
	.thumb_func
Task_LinkContest_SetUpContestRS:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r3, #0x0
	ldr	r5, .L814
	mov	ip, r5
	ldr	r0, .L814+0x4
	mov	r9, r0
	add	r1, sp, #0x4
	mov	r8, r1
	ldrb	r0, [r5]
	cmp	r3, r0
	bcs	.L796	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r4, r0, #0x3
	ldr	r7, .L814+0x8
.L798:
	mov	r1, sp
	add	r2, r1, r3
	add	r1, r3, #0x1
	lsl	r0, r1, #0x1
	add	r0, r0, r4
	add	r0, r0, r7
	ldrh	r0, [r0]
	strb	r0, [r2]
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	ldrb	r0, [r5]
	cmp	r3, r0
	bcc	.L798	@cond_branch
.L796:
	mov	r3, #0x0
	mov	r1, ip
	ldrb	r0, [r1]
	cmp	r3, r0
	bcs	.L801	@cond_branch
	add	r4, r0, #0
	mov	r2, sp
.L802:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r4
	bcs	.L801	@cond_branch
	mov	r0, sp
	add	r1, r0, r3
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L802	@cond_branch
.L801:
	mov	r1, ip
	ldrb	r1, [r1]
	cmp	r3, r1
	bne	.L806	@cond_branch
	mov	r0, #0x0
	b	.L813
.L815:
	.align	2, 0
.L814:
	.word	gNumLinkContestPlayers
	.word	gSpecialVar_0x8004
	.word	gTasks+0x8
.L806:
	mov	r0, #0x1
.L813:
	mov	r1, r9
	strh	r0, [r1]
	mov	r3, #0x0
	mov	r4, ip
	ldrb	r0, [r4]
	cmp	r3, r0
	bcs	.L809	@cond_branch
	mov	r5, r8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r2, r0, #0x3
	ldr	r7, .L816
.L811:
	add	r1, r5, r3
	add	r0, r3, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	add	r0, r0, r7
	ldrh	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r1, [r4]
	cmp	r3, r1
	bcc	.L811	@cond_branch
.L809:
	mov	r0, r8
	bl	LinkContest_GetLeaderIndex
	ldr	r1, .L816+0x4
	strb	r0, [r1]
	ldr	r0, .L816+0x8
	ldrb	r0, [r0]
	bl	CalculateRound1Points
	ldr	r1, .L816+0xc
	ldr	r2, .L816+0x10
	add	r0, r6, #0
	bl	SetTaskFuncWithFollowupFunc
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L817:
	.align	2, 0
.L816:
	.word	gTasks+0x8
	.word	gContestLinkLeaderIndex
	.word	gSpecialVar_ContestCategory
	.word	Task_LinkContest_CommunicateRound1Points
	.word	Task_LinkContest_CalculateTurnOrderRS
.Lfe79:
	.size	 Task_LinkContest_SetUpContestRS,.Lfe79-Task_LinkContest_SetUpContestRS
	.align	2, 0
	.type	 Task_LinkContest_CalculateTurnOrderRS,function
	.thumb_func
Task_LinkContest_CalculateTurnOrderRS:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	bl	SortContestants
	ldr	r1, .L819
	ldr	r2, .L819+0x4
	add	r0, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	pop	{r4}
	pop	{r0}
	bx	r0
.L820:
	.align	2, 0
.L819:
	.word	Task_LinkContest_CommunicateTurnOrder
	.word	Task_LinkContest_FinalizeConnection
.Lfe80:
	.size	 Task_LinkContest_CalculateTurnOrderRS,.Lfe80-Task_LinkContest_CalculateTurnOrderRS
	.align	2, 0
	.globl	LinkContest_GetLeaderIndex
	.type	 LinkContest_GetLeaderIndex,function
	.thumb_func
LinkContest_GetLeaderIndex:
	push	{r4, r5, lr}
	add	r3, r0, #0
	mov	r4, #0x0
	mov	r2, #0x1
	ldr	r0, .L828
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L823	@cond_branch
	add	r5, r0, #0
.L825:
	add	r0, r3, r4
	add	r1, r3, r2
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L824	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r4, r0, #0x18
.L824:
	add	r2, r2, #0x1
	cmp	r2, r5
	blt	.L825	@cond_branch
.L823:
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L829:
	.align	2, 0
.L828:
	.word	gNumLinkContestPlayers
.Lfe81:
	.size	 LinkContest_GetLeaderIndex,.Lfe81-LinkContest_GetLeaderIndex
	.align	2, 0
	.globl	Task_LinkContest_FinalizeConnection
	.type	 Task_LinkContest_FinalizeConnection,function
	.thumb_func
Task_LinkContest_FinalizeConnection:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L839
	ldrh	r0, [r0]
	cmp	r0, #0x1
	bne	.L831	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L833	@cond_branch
	ldr	r0, .L839+0x4
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L839+0x8
	str	r0, [r1]
	b	.L833
.L840:
	.align	2, 0
.L839:
	.word	gSpecialVar_0x8004
	.word	gTasks
	.word	Task_LinkContest_Disconnect
.L831:
	ldr	r5, .L841
	mov	r4, #0x3
.L837:
	add	r0, r5, #0
	bl	StringGetEnd10
	add	r5, r5, #0x40
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L837	@cond_branch
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r0, .L841+0x4
	ldr	r0, [r0]
	mov	r1, #0x4
	ldrsb	r1, [r0, r1]
	mov	r2, #0x5
	ldrsb	r2, [r0, r2]
	mov	r3, #0x1
	neg	r3, r3
	mov	r0, #0x0
	bl	SetDynamicWarp
	bl	ScriptContext2_Disable
	bl	EnableBothScriptContexts
.L833:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L842:
	.align	2, 0
.L841:
	.word	gContestMons+0x2
	.word	gSaveBlock1Ptr
.Lfe82:
	.size	 Task_LinkContest_FinalizeConnection,.Lfe82-Task_LinkContest_FinalizeConnection
	.align	2, 0
	.type	 Task_LinkContest_Disconnect,function
	.thumb_func
Task_LinkContest_Disconnect:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	SetCloseLinkCallback
	ldr	r1, .L844
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L844+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L845:
	.align	2, 0
.L844:
	.word	gTasks
	.word	Task_LinkContest_WaitDisconnect
.Lfe83:
	.size	 Task_LinkContest_Disconnect,.Lfe83-Task_LinkContest_Disconnect
	.align	2, 0
	.type	 Task_LinkContest_WaitDisconnect,function
	.thumb_func
Task_LinkContest_WaitDisconnect:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L848
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L847	@cond_branch
	add	r0, r1, #0
	bl	DestroyTask
	bl	ScriptContext2_Disable
	bl	EnableBothScriptContexts
.L847:
	pop	{r0}
	bx	r0
.L849:
	.align	2, 0
.L848:
	.word	gReceivedRemoteLinkPlayers
.Lfe84:
	.size	 Task_LinkContest_WaitDisconnect,.Lfe84-Task_LinkContest_WaitDisconnect
	.align	2, 0
	.globl	SetContestTrainerGfxIds
	.type	 SetContestTrainerGfxIds,function
	.thumb_func
SetContestTrainerGfxIds:
	push	{r4, lr}
	ldr	r0, .L851
	ldr	r2, [r0]
	ldr	r1, .L851+0x4
	ldrb	r3, [r1, #0x15]
	ldr	r4, .L851+0x8
	add	r0, r2, r4
	strh	r3, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x55
	ldrb	r3, [r0]
	add	r4, r4, #0x2
	add	r0, r2, r4
	strh	r3, [r0]
	add	r1, r1, #0x95
	ldrb	r0, [r1]
	mov	r1, #0xcd
	lsl	r1, r1, #0x5
	add	r2, r2, r1
	strh	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.L852:
	.align	2, 0
.L851:
	.word	gSaveBlock1Ptr
	.word	gContestMons
	.word	0x199c
.Lfe85:
	.size	 SetContestTrainerGfxIds,.Lfe85-SetContestTrainerGfxIds
	.align	2, 0
	.globl	sub_80F8814
	.type	 sub_80F8814,function
	.thumb_func
sub_80F8814:
	push	{lr}
	ldr	r0, .L861
	ldrb	r0, [r0]
	add	r1, r0, #0
	cmp	r0, #0x1
	beq	.L856	@cond_branch
	cmp	r0, #0x1
	bgt	.L860	@cond_branch
	cmp	r0, #0
	beq	.L855	@cond_branch
	b	.L858
.L862:
	.align	2, 0
.L861:
	.word	gSpecialVar_0x8005
.L860:
	cmp	r1, #0x2
	beq	.L857	@cond_branch
	b	.L858
.L855:
	mov	r1, #0x3
	b	.L854
.L856:
	mov	r1, #0x4
	b	.L854
.L857:
	mov	r1, #0x5
	b	.L854
.L858:
	mov	r1, #0x64
.L854:
	ldr	r0, .L863
	strh	r1, [r0]
	pop	{r0}
	bx	r0
.L864:
	.align	2, 0
.L863:
	.word	gSpecialVar_0x8004
.Lfe86:
	.size	 sub_80F8814,.Lfe86-sub_80F8814
	.align	2, 0
	.globl	BufferContestTrainerAndMonNames
	.type	 BufferContestTrainerAndMonNames,function
	.thumb_func
BufferContestTrainerAndMonNames:
	push	{lr}
	bl	BufferContestantTrainerName
	bl	BufferContestantMonNickname
	bl	BufferContestantMonSpecies
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 BufferContestTrainerAndMonNames,.Lfe87-BufferContestTrainerAndMonNames
	.align	2, 0
	.globl	DoesContestCategoryHaveWinner
	.type	 DoesContestCategoryHaveWinner,function
	.thumb_func
DoesContestCategoryHaveWinner:
	push	{lr}
	ldr	r0, .L877
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L873	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L877+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L878:
	.align	2, 0
.L877:
	.word	gSpecialVar_ContestCategory
	.word	.L874
	.align	2, 0
	.align	2, 0
.L874:
	.word	.L868
	.word	.L869
	.word	.L870
	.word	.L871
	.word	.L873
.L868:
	mov	r1, #0x8
	b	.L867
.L869:
	mov	r1, #0x9
	b	.L867
.L870:
	mov	r1, #0xa
	b	.L867
.L871:
	mov	r1, #0xb
	b	.L867
.L873:
	mov	r1, #0xc
.L867:
	ldr	r0, .L879
	ldr	r0, [r0]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldr	r1, .L879+0x4
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, #0
	bne	.L875	@cond_branch
	ldr	r0, .L879+0x8
	strh	r1, [r0]
	b	.L876
.L880:
	.align	2, 0
.L879:
	.word	gSaveBlock1Ptr
	.word	0x2b18
	.word	gSpecialVar_0x8004
.L875:
	ldr	r1, .L881
	mov	r0, #0x1
	strh	r0, [r1]
.L876:
	pop	{r0}
	bx	r0
.L882:
	.align	2, 0
.L881:
	.word	gSpecialVar_0x8004
.Lfe88:
	.size	 DoesContestCategoryHaveWinner,.Lfe88-DoesContestCategoryHaveWinner
	.align	2, 0
	.globl	SaveMuseumContestPainting
	.type	 SaveMuseumContestPainting,function
	.thumb_func
SaveMuseumContestPainting:
	push	{lr}
	mov	r0, #0xff
	bl	sub_80DEDA8
	pop	{r0}
	bx	r0
.Lfe89:
	.size	 SaveMuseumContestPainting,.Lfe89-SaveMuseumContestPainting
	.align	2, 0
	.globl	ShouldReadyContestArtist
	.type	 ShouldReadyContestArtist,function
	.thumb_func
ShouldReadyContestArtist:
	push	{lr}
	ldr	r0, .L888
	ldr	r1, .L888+0x4
	ldrb	r2, [r1]
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L885	@cond_branch
	ldr	r0, .L888+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x3
	bne	.L885	@cond_branch
	ldr	r1, .L888+0xc
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	ldr	r0, .L888+0x10
	cmp	r1, r0
	ble	.L885	@cond_branch
	ldr	r1, .L888+0x14
	mov	r0, #0x1
	b	.L887
.L889:
	.align	2, 0
.L888:
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gSpecialVar_ContestRank
	.word	gContestMonTotalPoints
	.word	0x31f
	.word	gSpecialVar_0x8004
.L885:
	ldr	r1, .L890
	mov	r0, #0x0
.L887:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L891:
	.align	2, 0
.L890:
	.word	gSpecialVar_0x8004
.Lfe90:
	.size	 ShouldReadyContestArtist,.Lfe90-ShouldReadyContestArtist
	.align	2, 0
	.globl	CountPlayerContestPaintings
	.type	 CountPlayerContestPaintings,function
	.thumb_func
CountPlayerContestPaintings:
	push	{lr}
	mov	r3, #0x0
	ldr	r0, .L899
	ldr	r0, [r0]
	ldr	r2, .L899+0x4
	add	r1, r0, r2
	mov	r2, #0x4
.L896:
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L895	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L895:
	add	r1, r1, #0x20
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L896	@cond_branch
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.L900:
	.align	2, 0
.L899:
	.word	gSaveBlock1Ptr
	.word	0x2c18
.Lfe91:
	.size	 CountPlayerContestPaintings,.Lfe91-CountPlayerContestPaintings
	.align	2, 0
	.globl	sub_80F8970
	.type	 sub_80F8970,function
	.thumb_func
sub_80F8970:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r0, .L944
	mov	ip, r0
	ldr	r1, .L944+0x4
	mov	r9, r1
	ldr	r2, .L944+0x8
	mov	sl, r2
	mov	r2, ip
	mov	r1, sp
	mov	r6, #0x3
.L905:
	ldrh	r0, [r2]
	strh	r0, [r1]
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L905	@cond_branch
	mov	r6, #0x0
.L910:
	mov	r1, #0x3
	cmp	r1, r6
	ble	.L909	@cond_branch
.L914:
	sub	r5, r1, #0x1
	lsl	r0, r5, #0x1
	mov	r4, sp
	add	r3, r4, r0
	lsl	r0, r1, #0x1
	add	r2, r4, r0
	ldrh	r4, [r3]
	mov	r7, #0x0
	ldrsh	r1, [r3, r7]
	mov	r7, #0x0
	ldrsh	r0, [r2, r7]
	cmp	r1, r0
	bge	.L913	@cond_branch
	strh	r4, [r2]
	strh	r0, [r3]
.L913:
	add	r1, r5, #0
	cmp	r1, r6
	bgt	.L914	@cond_branch
.L909:
	add	r6, r6, #0x1
	cmp	r6, #0x2
	ble	.L910	@cond_branch
	mov	r2, r9
	ldrh	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	mov	r2, #0x0
	mov	r8, r2
	mov	r6, #0x0
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	add	r3, r0, #0
	mov	r1, sp
	mov	r5, r9
.L921:
	mov	r7, #0x0
	ldrsh	r0, [r1, r7]
	cmp	r0, r4
	bne	.L920	@cond_branch
	lsl	r0, r2, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r2, r0, #0x18
	ldrh	r7, [r5]
	cmp	r6, r7
	bne	.L920	@cond_branch
	mov	r8, r2
.L920:
	add	r1, r1, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L921	@cond_branch
	mov	r6, #0x0
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	asr	r1, r3, #0x10
	lsl	r2, r2, #0x18
	mov	r9, r2
	cmp	r0, r1
	beq	.L926	@cond_branch
	add	r2, r1, #0
	mov	r1, sp
.L927:
	add	r1, r1, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	bgt	.L926	@cond_branch
	mov	r4, #0x0
	ldrsh	r0, [r1, r4]
	cmp	r0, r2
	bne	.L927	@cond_branch
.L926:
	lsl	r0, r6, #0x18
	lsr	r7, r0, #0x18
	mov	r2, r8
	mov	r6, #0x0
	asr	r1, r3, #0x10
	mov	r5, ip
	mov	r4, #0x0
	ldrsh	r0, [r5, r4]
	b	.L942
.L945:
	.align	2, 0
.L944:
	.word	gContestMonRound1Points
	.word	gSpecialVar_0x8006
	.word	gContestMons+0x2
.L936:
	sub	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L933:
	add	r6, r6, #0x1
	cmp	r6, #0x3
	bgt	.L932	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, ip
	asr	r1, r3, #0x10
	mov	r5, #0x0
	ldrsh	r0, [r0, r5]
.L942:
	cmp	r1, r0
	bne	.L933	@cond_branch
	cmp	r2, #0x1
	bne	.L936	@cond_branch
.L932:
	lsl	r4, r6, #0x6
	mov	r0, sl
	add	r1, r4, r0
	ldr	r0, .L946
	bl	StringCopy
	ldr	r5, .L946+0x4
	mov	r0, sl
	add	r0, r0, #0xb
	add	r4, r4, r0
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringCopy
	add	r0, r5, #0
	bl	sub_81DB5AC
	mov	r1, r9
	asr	r0, r1, #0x18
	cmp	r0, #0x1
	beq	.L943	@cond_branch
	cmp	r8, r0
	bne	.L940	@cond_branch
.L943:
	ldr	r0, .L946+0x8
	strh	r7, [r0]
	b	.L939
.L947:
	.align	2, 0
.L946:
	.word	gStringVar1
	.word	gStringVar2
	.word	gSpecialVar_0x8006
.L940:
	ldr	r1, .L948
	add	r0, r7, #0x4
	strh	r0, [r1]
.L939:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L949:
	.align	2, 0
.L948:
	.word	gSpecialVar_0x8006
.Lfe92:
	.size	 sub_80F8970,.Lfe92-sub_80F8970
	.align	2, 0
	.type	 ExitContestWinnerPainting,function
	.thumb_func
ExitContestWinnerPainting:
	push	{lr}
	ldr	r0, .L951
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L952:
	.align	2, 0
.L951:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe93:
	.size	 ExitContestWinnerPainting,.Lfe93-ExitContestWinnerPainting
	.align	2, 0
	.globl	ShowContestWinnerPainting
	.type	 ShowContestWinnerPainting,function
	.thumb_func
ShowContestWinnerPainting:
	push	{lr}
	ldr	r0, .L954
	bl	SetMainCallback2
	ldr	r1, .L954+0x4
	ldr	r0, .L954+0x8
	str	r0, [r1, #0x8]
	pop	{r0}
	bx	r0
.L955:
	.align	2, 0
.L954:
	.word	CB2_ContestPainting
	.word	gMain
	.word	ExitContestWinnerPainting
.Lfe94:
	.size	 ShowContestWinnerPainting,.Lfe94-ShowContestWinnerPainting
	.align	2, 0
	.globl	SetLinkContestPlayerGfx
	.type	 SetLinkContestPlayerGfx,function
	.thumb_func
SetLinkContestPlayerGfx:
	push	{r4, r5, lr}
	ldr	r0, .L967
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L957	@cond_branch
	mov	r3, #0x0
	ldr	r0, .L967+0x4
	add	r4, r0, #0
	ldr	r5, .L967+0x8
	ldrb	r0, [r4]
	cmp	r3, r0
	bge	.L959	@cond_branch
	add	r2, r5, #0
	ldr	r1, .L967+0xc
.L961:
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	cmp	r0, #0x1
	bhi	.L960	@cond_branch
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L963	@cond_branch
	mov	r0, #0xeb
	b	.L966
.L968:
	.align	2, 0
.L967:
	.word	gLinkContestFlags
	.word	gNumLinkContestPlayers
	.word	gContestMons
	.word	gLinkPlayers
.L963:
	mov	r0, #0xec
.L966:
	strb	r0, [r2, #0x15]
.L960:
	add	r2, r2, #0x40
	add	r1, r1, #0x1c
	add	r3, r3, #0x1
	ldrb	r0, [r4]
	cmp	r3, r0
	blt	.L961	@cond_branch
.L959:
	ldr	r0, .L969
	ldrb	r1, [r5, #0x15]
	bl	VarSet
	ldr	r0, .L969+0x4
	add	r1, r5, #0
	add	r1, r1, #0x55
	ldrb	r1, [r1]
	bl	VarSet
	ldr	r0, .L969+0x8
	add	r1, r5, #0
	add	r1, r1, #0x95
	ldrb	r1, [r1]
	bl	VarSet
	ldr	r0, .L969+0xc
	add	r1, r5, #0
	add	r1, r1, #0xd5
	ldrb	r1, [r1]
	bl	VarSet
.L957:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L970:
	.align	2, 0
.L969:
	.word	0x4010
	.word	0x4011
	.word	0x4012
	.word	0x4013
.Lfe95:
	.size	 SetLinkContestPlayerGfx,.Lfe95-SetLinkContestPlayerGfx
	.section .rodata
	.type	 sContestantLocalIds.288,object
	.size	 sContestantLocalIds.288,4
sContestantLocalIds.288:
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0xe
.text
	.align	2, 0
	.globl	LoadLinkContestPlayerPalettes
	.type	 LoadLinkContestPlayerPalettes,function
	.thumb_func
LoadLinkContestPlayerPalettes:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L985
	mov	r0, #0xc
	strb	r0, [r1]
	ldr	r0, .L985+0x4
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L972	@cond_branch
	mov	r5, #0x0
	ldr	r0, .L985+0x8
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L972	@cond_branch
	mov	r7, #0x0
	mov	r6, #0x60
	mov	r4, #0xb0
	lsl	r4, r4, #0x11
.L976:
	ldr	r0, .L985+0xc
	add	r0, r5, r0
	ldrb	r0, [r0]
	ldr	r1, .L985+0x10
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	GetObjectEventIdByLocalIdAndMap
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L985+0x14
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L985+0x18
	add	r1, r1, r0
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r6
	strb	r0, [r1, #0x5]
	ldr	r0, .L985+0x1c
	add	r1, r7, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	cmp	r0, #0x1
	bhi	.L977	@cond_branch
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L978	@cond_branch
	lsr	r1, r4, #0x10
	ldr	r0, .L985+0x20
	b	.L984
.L986:
	.align	2, 0
.L985:
	.word	gReservedSpritePaletteCount
	.word	gLinkContestFlags
	.word	gNumLinkContestPlayers
	.word	sContestantLocalIds.288
	.word	gSaveBlock1Ptr
	.word	gObjectEvents
	.word	gSprites
	.word	gLinkPlayers
	.word	gObjectEventPalette33
.L978:
	lsr	r1, r4, #0x10
	ldr	r0, .L987
	b	.L984
.L988:
	.align	2, 0
.L987:
	.word	gObjectEventPalette34
.L977:
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L981	@cond_branch
	lsr	r1, r4, #0x10
	ldr	r0, .L989
.L984:
	mov	r2, #0x20
	bl	LoadPalette
	b	.L975
.L990:
	.align	2, 0
.L989:
	.word	gObjectEventPalette8
.L981:
	lsr	r1, r4, #0x10
	ldr	r0, .L991
	mov	r2, #0x20
	bl	LoadPalette
.L975:
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	add	r4, r4, r0
	add	r7, r7, #0x1c
	add	r6, r6, #0x10
	add	r5, r5, #0x1
	ldr	r0, .L991+0x4
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L976	@cond_branch
.L972:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L992:
	.align	2, 0
.L991:
	.word	gObjectEventPalette17
	.word	gNumLinkContestPlayers
.Lfe96:
	.size	 LoadLinkContestPlayerPalettes,.Lfe96-LoadLinkContestPlayerPalettes
	.align	2, 0
	.globl	GiveMonArtistRibbon
	.type	 GiveMonArtistRibbon,function
	.thumb_func
GiveMonArtistRibbon:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r6, .L998
	ldrb	r0, [r6]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L998+0x4
	add	r0, r0, r4
	mov	r1, #0x46
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	strb	r0, [r1]
	cmp	r0, #0
	bne	.L994	@cond_branch
	ldr	r0, .L998+0x8
	ldr	r1, .L998+0xc
	ldrb	r2, [r1]
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L994	@cond_branch
	ldr	r0, .L998+0x10
	ldrh	r0, [r0]
	cmp	r0, #0x3
	bne	.L994	@cond_branch
	ldr	r1, .L998+0x14
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	ldr	r0, .L998+0x18
	cmp	r1, r0
	ble	.L994	@cond_branch
	mov	r1, #0x1
	mov	r0, sp
	strb	r1, [r0]
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x46
	mov	r2, sp
	bl	SetMonData
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	bl	GetRibbonCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L995	@cond_branch
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x46
	bl	TryPutSpotTheCutiesOnAir
.L995:
	mov	r0, #0x1
	b	.L997
.L999:
	.align	2, 0
.L998:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gSpecialVar_ContestRank
	.word	gContestMonTotalPoints
	.word	0x31f
.L994:
	mov	r0, #0x0
.L997:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe97:
	.size	 GiveMonArtistRibbon,.Lfe97-GiveMonArtistRibbon
	.align	2, 0
	.globl	IsContestDebugActive
	.type	 IsContestDebugActive,function
	.thumb_func
IsContestDebugActive:
	mov	r0, #0x0
	bx	lr
.Lfe98:
	.size	 IsContestDebugActive,.Lfe98-IsContestDebugActive
	.align	2, 0
	.globl	ShowContestEntryMonPic
	.type	 ShowContestEntryMonPic,function
	.thumb_func
ShowContestEntryMonPic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L1006
	mov	r9, r0
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.LCB9181
	b	.L1002	@long jump
.LCB9181:
	bl	AllocateMonSpritesGfx
	ldr	r4, .L1006+0x4
	ldr	r6, .L1006+0x8
	ldrh	r0, [r6]
	lsl	r0, r0, #0x6
	add	r0, r0, r4
	ldrh	r5, [r0]
	lsl	r5, r5, #0x15
	lsr	r5, r5, #0x15
	ldrb	r0, [r0, #0x1]
	mov	r8, r0
	mov	r2, r8
	lsr	r2, r2, #0x3
	mov	r8, r2
	add	r0, r5, #0
	mov	r1, r8
	bl	GetFormSpeciesId
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldrh	r1, [r6]
	lsl	r1, r1, #0x6
	add	r0, r4, #0
	add	r0, r0, #0x38
	add	r0, r1, r0
	ldr	r6, [r0]
	add	r4, r4, #0x3c
	add	r1, r1, r4
	ldr	r4, [r1]
	mov	r0, r9
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L1006+0xc
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	strh	r5, [r0, #0xa]
	lsl	r0, r7, #0x3
	ldr	r1, .L1006+0x10
	add	r0, r0, r1
	ldr	r1, .L1006+0x14
	ldr	r1, [r1]
	ldr	r1, [r1, #0x8]
	add	r2, r7, #0
	add	r3, r6, #0
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
	add	r0, r7, #0
	add	r1, r4, #0
	add	r2, r6, #0
	bl	GetMonSpritePalStructFromOtIdPersonality
	add	r4, r0, #0
	bl	LoadCompressedSpritePalette
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r2, r8
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L1006+0x18
	ldrh	r1, [r4, #0x4]
	strh	r1, [r0, #0x2]
	mov	r1, #0x78
	mov	r2, #0x40
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L1006+0x1c
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1003	@cond_branch
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r4, r5, #0x4
	cmp	r0, #0
	bne	.L1005	@cond_branch
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	ldr	r1, .L1006+0x20
	add	r0, r0, r1
	add	r1, r7, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DoMonFrontSpriteAnimation
	b	.L1005
.L1007:
	.align	2, 0
.L1006:
	.word	Task_ShowContestEntryMonPic
	.word	gContestMons
	.word	gSpecialVar_0x8006
	.word	gTasks
	.word	gMonFrontPicTable
	.word	gMonSpritesGfxPtr
	.word	gMultiuseSpriteTemplate
	.word	gLinkContestFlags
	.word	gSprites
.L1003:
	lsl	r4, r5, #0x4
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	ldr	r1, .L1008
	add	r0, r0, r1
	add	r1, r7, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DoMonFrontSpriteAnimation
.L1005:
	ldr	r1, .L1008+0x4
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0xc]
	mov	r1, #0xa
	strh	r1, [r0, #0xe]
	mov	r1, #0x3
	strh	r1, [r0, #0x10]
	ldr	r3, .L1008
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r0, r3, #0
	add	r0, r0, #0x1c
	add	r0, r1, r0
	ldr	r2, .L1008+0x8
	str	r2, [r0]
	add	r1, r1, r3
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
.L1002:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1009:
	.align	2, 0
.L1008:
	.word	gSprites
	.word	gTasks
	.word	SpriteCallbackDummy
.Lfe99:
	.size	 ShowContestEntryMonPic,.Lfe99-ShowContestEntryMonPic
	.align	2, 0
	.globl	HideContestEntryMonPic
	.type	 HideContestEntryMonPic,function
	.thumb_func
HideContestEntryMonPic:
	push	{lr}
	ldr	r0, .L1012
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L1011	@cond_branch
	ldr	r0, .L1012+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	bl	FreeMonSpritesGfx
.L1011:
	pop	{r0}
	bx	r0
.L1013:
	.align	2, 0
.L1012:
	.word	Task_ShowContestEntryMonPic
	.word	gTasks
.Lfe100:
	.size	 HideContestEntryMonPic,.Lfe100-HideContestEntryMonPic
	.align	2, 0
	.type	 Task_ShowContestEntryMonPic,function
	.thumb_func
Task_ShowContestEntryMonPic:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L1025
	add	r5, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r5, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bhi	.L1015	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1025+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1026:
	.align	2, 0
.L1025:
	.word	gTasks
	.word	.L1022
	.align	2, 0
	.align	2, 0
.L1022:
	.word	.L1024
	.word	.L1017
	.word	.L1015
	.word	.L1019
	.word	.L1021
.L1017:
	mov	r0, #0xa
	mov	r1, #0x3
	mov	r2, #0x8
	mov	r3, #0x8
	bl	CreateWindowFromRect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x12]
	mov	r1, #0x1
	bl	SetStandardWindowBorderStyle
	b	.L1024
.L1019:
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1027
	add	r4, r0, r1
	ldrb	r0, [r4, #0x5]
	lsr	r0, r0, #0x4
	bl	GetSpritePaletteTagByPaletteNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FreeSpritePaletteByTag
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	beq	.L1020	@cond_branch
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
.L1020:
	add	r0, r4, #0
	bl	DestroySprite
.L1024:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L1015
.L1028:
	.align	2, 0
.L1027:
	.word	gSprites
.L1021:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x12]
	bl	ClearToTransparentAndRemoveWindow
	add	r0, r4, #0
	bl	DestroyTask
.L1015:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 Task_ShowContestEntryMonPic,.Lfe101-Task_ShowContestEntryMonPic
	.align	2, 0
	.globl	GetContestMultiplayerId
	.type	 GetContestMultiplayerId,function
	.thumb_func
GetContestMultiplayerId:
	push	{r4, lr}
	ldr	r0, .L1032
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1030	@cond_branch
	ldr	r0, .L1032+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bne	.L1030	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1030	@cond_branch
	ldr	r4, .L1032+0x8
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	b	.L1031
.L1033:
	.align	2, 0
.L1032:
	.word	gLinkContestFlags
	.word	gNumLinkContestPlayers
	.word	gSpecialVar_Result
.L1030:
	ldr	r1, .L1034
	mov	r0, #0x4
	strh	r0, [r1]
.L1031:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1035:
	.align	2, 0
.L1034:
	.word	gSpecialVar_Result
.Lfe102:
	.size	 GetContestMultiplayerId,.Lfe102-GetContestMultiplayerId
	.align	2, 0
	.globl	GenerateContestRand
	.type	 GenerateContestRand,function
	.thumb_func
GenerateContestRand:
	push	{r4, lr}
	ldr	r0, .L1039
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1037	@cond_branch
	ldr	r2, .L1039+0x4
	ldr	r1, [r2]
	ldr	r0, .L1039+0x8
	mul	r0, r0, r1
	ldr	r1, .L1039+0xc
	add	r0, r0, r1
	str	r0, [r2]
	lsr	r0, r0, #0x10
	ldr	r4, .L1039+0x10
	b	.L1038
.L1040:
	.align	2, 0
.L1039:
	.word	gLinkContestFlags
	.word	gContestRngValue
	.word	0x41c64e6d
	.word	0x6073
	.word	gSpecialVar_Result
.L1037:
	ldr	r4, .L1041
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L1038:
	ldrh	r1, [r4]
	bl	__umodsi3
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1042:
	.align	2, 0
.L1041:
	.word	gSpecialVar_Result
.Lfe103:
	.size	 GenerateContestRand,.Lfe103-GenerateContestRand
	.align	2, 0
	.globl	GetContestRand
	.type	 GetContestRand,function
	.thumb_func
GetContestRand:
	ldr	r2, .L1044
	ldr	r1, [r2]
	ldr	r0, .L1044+0x4
	mul	r0, r0, r1
	ldr	r1, .L1044+0x8
	add	r0, r0, r1
	str	r0, [r2]
	lsr	r0, r0, #0x10
	bx	lr
.L1045:
	.align	2, 0
.L1044:
	.word	gContestRngValue
	.word	0x41c64e6d
	.word	0x6073
.Lfe104:
	.size	 GetContestRand,.Lfe104-GetContestRand
	.align	2, 0
	.globl	LinkContestWaitForConnection
	.type	 LinkContestWaitForConnection,function
	.thumb_func
LinkContestWaitForConnection:
	push	{lr}
	ldr	r0, .L1050
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1047	@cond_branch
	mov	r0, #0x0
	b	.L1049
.L1051:
	.align	2, 0
.L1050:
	.word	gLinkContestFlags
.L1047:
	ldr	r0, .L1052
	mov	r1, #0x5
	bl	CreateTask
	mov	r0, #0x1
.L1049:
	pop	{r1}
	bx	r1
.L1053:
	.align	2, 0
.L1052:
	.word	Task_LinkContestWaitForConnection
.Lfe105:
	.size	 LinkContestWaitForConnection,.Lfe105-LinkContestWaitForConnection
	.align	2, 0
	.type	 Task_LinkContestWaitForConnection,function
	.thumb_func
Task_LinkContestWaitForConnection:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1064
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1056	@cond_branch
	cmp	r0, #0x1
	beq	.L1058	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1055	@cond_branch
	bl	EnableBothScriptContexts
	add	r0, r5, #0
	bl	DestroyTask
	b	.L1055
.L1065:
	.align	2, 0
.L1064:
	.word	gTasks
.L1056:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1055	@cond_branch
	bl	SetLinkStandbyCallback
.L1058:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L1055:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe106:
	.size	 Task_LinkContestWaitForConnection,.Lfe106-Task_LinkContestWaitForConnection
	.align	2, 0
	.globl	LinkContestTryShowWirelessIndicator
	.type	 LinkContestTryShowWirelessIndicator,function
	.thumb_func
LinkContestTryShowWirelessIndicator:
	push	{lr}
	ldr	r0, .L1069
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1067	@cond_branch
	ldr	r0, .L1069+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1067	@cond_branch
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0x8
	mov	r1, #0x8
	bl	CreateWirelessStatusIndicatorSprite
.L1067:
	pop	{r0}
	bx	r0
.L1070:
	.align	2, 0
.L1069:
	.word	gLinkContestFlags
	.word	gReceivedRemoteLinkPlayers
.Lfe107:
	.size	 LinkContestTryShowWirelessIndicator,.Lfe107-LinkContestTryShowWirelessIndicator
	.align	2, 0
	.globl	LinkContestTryHideWirelessIndicator
	.type	 LinkContestTryHideWirelessIndicator,function
	.thumb_func
LinkContestTryHideWirelessIndicator:
	push	{lr}
	ldr	r0, .L1074
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1072	@cond_branch
	ldr	r0, .L1074+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1072	@cond_branch
	bl	DestroyWirelessStatusIndicatorSprite
.L1072:
	pop	{r0}
	bx	r0
.L1075:
	.align	2, 0
.L1074:
	.word	gLinkContestFlags
	.word	gReceivedRemoteLinkPlayers
.Lfe108:
	.size	 LinkContestTryHideWirelessIndicator,.Lfe108-LinkContestTryHideWirelessIndicator
	.align	2, 0
	.globl	IsContestWithRSPlayer
	.type	 IsContestWithRSPlayer,function
	.thumb_func
IsContestWithRSPlayer:
	push	{lr}
	ldr	r0, .L1080
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1077	@cond_branch
	mov	r0, #0x0
	b	.L1079
.L1081:
	.align	2, 0
.L1080:
	.word	gLinkContestFlags
.L1077:
	mov	r0, #0x1
.L1079:
	pop	{r1}
	bx	r1
.Lfe109:
	.size	 IsContestWithRSPlayer,.Lfe109-IsContestWithRSPlayer
	.align	2, 0
	.globl	ClearLinkContestFlags
	.type	 ClearLinkContestFlags,function
	.thumb_func
ClearLinkContestFlags:
	ldr	r1, .L1083
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L1084:
	.align	2, 0
.L1083:
	.word	gLinkContestFlags
.Lfe110:
	.size	 ClearLinkContestFlags,.Lfe110-ClearLinkContestFlags
	.align	2, 0
	.globl	IsWirelessContest
	.type	 IsWirelessContest,function
	.thumb_func
IsWirelessContest:
	push	{lr}
	ldr	r0, .L1089
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1086	@cond_branch
	mov	r0, #0x0
	b	.L1088
.L1090:
	.align	2, 0
.L1089:
	.word	gLinkContestFlags
.L1086:
	mov	r0, #0x1
.L1088:
	pop	{r1}
	bx	r1
.Lfe111:
	.size	 IsWirelessContest,.Lfe111-IsWirelessContest
.text
	.align	2, 0

