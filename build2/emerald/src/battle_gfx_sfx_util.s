@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sSpriteSheet_SinglesPlayerHealthbox,object
	.size	 sSpriteSheet_SinglesPlayerHealthbox,8
sSpriteSheet_SinglesPlayerHealthbox:
	.word	gHealthboxSinglesPlayerGfx
	.short	0x1000
	.short	0xd6ff
	.align	2, 0
	.type	 sSpriteSheet_SinglesOpponentHealthbox,object
	.size	 sSpriteSheet_SinglesOpponentHealthbox,8
sSpriteSheet_SinglesOpponentHealthbox:
	.word	gHealthboxSinglesOpponentGfx
	.short	0x1000
	.short	0xd701
	.align	2, 0
	.type	 sSpriteSheets_DoublesPlayerHealthbox,object
	.size	 sSpriteSheets_DoublesPlayerHealthbox,16
sSpriteSheets_DoublesPlayerHealthbox:
	.word	gHealthboxDoublesPlayerGfx
	.short	0x800
	.short	0xd6ff
	.word	gHealthboxDoublesPlayerGfx
	.short	0x800
	.short	0xd700
	.align	2, 0
	.type	 sSpriteSheets_DoublesOpponentHealthbox,object
	.size	 sSpriteSheets_DoublesOpponentHealthbox,16
sSpriteSheets_DoublesOpponentHealthbox:
	.word	gHealthboxDoublesOpponentGfx
	.short	0x800
	.short	0xd701
	.word	gHealthboxDoublesOpponentGfx
	.short	0x800
	.short	0xd702
	.align	2, 0
	.type	 sSpriteSheet_SafariHealthbox,object
	.size	 sSpriteSheet_SafariHealthbox,8
sSpriteSheet_SafariHealthbox:
	.word	gHealthboxSafariGfx
	.short	0x1000
	.short	0xd70b
	.align	2, 0
	.type	 sSpriteSheets_HealthBar,object
	.size	 sSpriteSheets_HealthBar,32
sSpriteSheets_HealthBar:
	.word	gBlankGfxCompressed
	.short	0x100
	.short	0xd704
	.word	gBlankGfxCompressed
	.short	0x120
	.short	0xd705
	.word	gBlankGfxCompressed
	.short	0x100
	.short	0xd706
	.word	gBlankGfxCompressed
	.short	0x120
	.short	0xd707
	.align	2, 0
	.type	 sSpritePalettes_HealthBoxHealthBar,object
	.size	 sSpritePalettes_HealthBoxHealthBar,16
sSpritePalettes_HealthBoxHealthBar:
	.word	gBattleInterface_BallStatusBarPal
	.short	0xd6ff
	.space	2
	.word	gBattleInterface_BallDisplayPal
	.short	0xd704
	.space	2
.text
	.align	2, 0
	.globl	AllocateBattleSpritesData
	.type	 AllocateBattleSpritesData,function
	.thumb_func
AllocateBattleSpritesData:
	push	{r4, lr}
	ldr	r4, .L3
	mov	r0, #0x10
	bl	AllocZeroed
	str	r0, [r4]
	mov	r0, #0x10
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1]
	mov	r0, #0x30
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x4]
	mov	r0, #0x10
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x8]
	mov	r0, #0x50
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0xc]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBattleSpritesDataPtr
.Lfe1:
	.size	 AllocateBattleSpritesData,.Lfe1-AllocateBattleSpritesData
	.align	2, 0
	.globl	FreeBattleSpritesData
	.type	 FreeBattleSpritesData,function
	.thumb_func
FreeBattleSpritesData:
	push	{r4, r5, lr}
	ldr	r5, .L7
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L5	@cond_branch
	ldr	r0, [r0, #0xc]
	bl	Free
	ldr	r0, [r5]
	mov	r4, #0x0
	str	r4, [r0, #0xc]
	ldr	r0, [r0, #0x8]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x8]
	ldr	r0, [r0, #0x4]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x4]
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0]
	bl	Free
	str	r4, [r5]
.L5:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gBattleSpritesDataPtr
.Lfe2:
	.size	 FreeBattleSpritesData,.Lfe2-FreeBattleSpritesData
	.align	2, 0
	.globl	ChooseMoveAndTargetInBattlePalace
	.type	 ChooseMoveAndTargetInBattlePalace,function
	.thumb_func
ChooseMoveAndTargetInBattlePalace:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x1
	neg	r0, r0
	mov	sl, r0
	ldr	r1, .L70
	ldr	r4, .L70+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r2, r2, #0x20
	ldr	r1, [r1]
	add	r1, r1, r2
	add	r1, r1, #0x4
	mov	r9, r1
	mov	r1, #0x0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, .L70+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x8b
	ldrb	r1, [r0]
	ldr	r2, .L70+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	asr	r4, r0, #0x1f
	mov	r0, #0x2
	and	r4, r4, r0
	add	r6, r4, #0
	add	r5, r4, #0x2
	b	.L12
.L71:
	.align	2, 0
.L70:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBitTable
.L14:
	add	r4, r4, #0x1
.L12:
	cmp	r4, r5
	bge	.L13	@cond_branch
	ldr	r0, .L72
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r1, .L72+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	GetNatureFromPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r4, r0
	ldr	r2, .L72+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, r7
	ble	.L14	@cond_branch
.L13:
	sub	r7, r4, r6
	cmp	r4, r5
	bne	.L18	@cond_branch
	mov	r7, #0x2
.L18:
	mov	r6, #0x0
	mov	r4, #0x0
	mov	r1, r9
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L20	@cond_branch
	mov	r5, r9
.L23:
	ldrh	r0, [r5]
	bl	GetBattlePalaceMoveGroup
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r7, r0
	bne	.L21	@cond_branch
	mov	r0, r9
	add	r0, r0, #0x8
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L21	@cond_branch
	ldr	r0, .L72+0xc
	lsl	r1, r4, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	orr	r6, r6, r0
.L21:
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L20	@cond_branch
	ldrh	r0, [r5]
	cmp	r0, #0
	bne	.L23	@cond_branch
.L20:
	cmp	r6, #0
	beq	.L26	@cond_branch
	ldr	r3, .L72+0x10
	ldr	r1, [r3]
	add	r1, r1, #0x8b
	ldrb	r2, [r1]
	mov	r0, #0xf
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r3]
	add	r1, r1, #0x8b
	lsl	r0, r6, #0x4
	ldrb	r2, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	BattleAI_SetupAIData
	bl	BattleAI_ChooseMoveOrAction
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
.L26:
	mov	r0, #0x1
	neg	r0, r0
	cmp	sl, r0
	beq	.LCB268
	b	.L27	@long jump
.LCB268:
	mov	r2, r8
	cmp	r2, #0xf
	bne	.LCB272
	b	.L28	@long jump
.LCB272:
	mov	r5, #0x0
	mov	r6, #0x0
	ldr	r7, .L72+0xc
	mov	r4, r9
.L32:
	ldrh	r0, [r4]
	bl	GetBattlePalaceMoveGroup
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L33	@cond_branch
	ldr	r0, [r7]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L33	@cond_branch
	add	r5, r5, #0x1
.L33:
	ldrh	r0, [r4]
	bl	GetBattlePalaceMoveGroup
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L34	@cond_branch
	ldr	r0, [r7]
	mov	r2, r8
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L34	@cond_branch
	add	r5, r5, #0x10
.L34:
	ldrh	r0, [r4]
	bl	GetBattlePalaceMoveGroup
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L31	@cond_branch
	ldr	r0, [r7]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L31	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r5, r5, r2
.L31:
	add	r7, r7, #0x4
	add	r4, r4, #0x2
	ldr	r0, .L72+0xc
	add	r0, r0, #0xc
	cmp	r7, r0
	ble	.L32	@cond_branch
	mov	r1, #0xf
	and	r1, r1, r5
	cmp	r1, #0x1
	ble	.L37	@cond_branch
	add	r6, r6, #0x1
.L37:
	mov	r0, #0xf0
	and	r0, r0, r5
	cmp	r0, #0x1f
	ble	.L38	@cond_branch
	add	r6, r6, #0x1
.L38:
	ldr	r2, .L72+0x14
	cmp	r0, r2
	ble	.L39	@cond_branch
	add	r6, r6, #0x1
.L39:
	cmp	r6, #0x1
	bgt	.L41	@cond_branch
	cmp	r6, #0
	bne	.L40	@cond_branch
.L41:
	ldr	r5, .L72+0xc
.L42:
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	lsr	r4, r1, #0x10
	lsl	r0, r4, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L44	@cond_branch
	mov	sl, r4
.L44:
	mov	r0, #0x1
	neg	r0, r0
	cmp	sl, r0
	beq	.L42	@cond_branch
	b	.L48
.L73:
	.align	2, 0
.L72:
	.word	gActiveBattler
	.word	gBattleMons+0x4c
	.word	gBattlePalaceNatureToMoveGroupLikelihood
	.word	gBitTable
	.word	gBattleStruct
	.word	0x1ff
.L40:
	cmp	r1, #0x1
	ble	.L49	@cond_branch
	mov	r6, #0x0
.L49:
	cmp	r0, #0x1f
	ble	.L50	@cond_branch
	mov	r6, #0x1
.L50:
	cmp	r0, r2
	ble	.L52	@cond_branch
	mov	r6, #0x2
.L52:
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	lsr	r4, r1, #0x10
	ldr	r1, .L74
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r2, r8
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L54	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	bl	GetBattlePalaceMoveGroup
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	bne	.L54	@cond_branch
	mov	sl, r4
.L54:
	mov	r0, #0x1
	neg	r0, r0
	cmp	sl, r0
	beq	.L52	@cond_branch
.L48:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x31
	bls	.L27	@cond_branch
.L28:
	ldr	r2, .L74+0x4
	ldr	r0, .L74+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r2
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	mov	r0, #0x0
	b	.L68
.L75:
	.align	2, 0
.L74:
	.word	gBitTable
	.word	gProtectStructs
	.word	gActiveBattler
.L27:
	mov	r1, sl
	lsl	r0, r1, #0x1
	mov	r2, r9
	add	r1, r2, r0
	ldrh	r0, [r1]
	cmp	r0, #0xae
	bne	.L60	@cond_branch
	ldrb	r0, [r2, #0x12]
	mov	r5, #0x0
	cmp	r0, #0x7
	beq	.L63	@cond_branch
	ldrb	r0, [r2, #0x13]
	cmp	r0, #0x7
	beq	.L63	@cond_branch
	ldrb	r1, [r2, #0x14]
	mov	r0, #0x7
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	asr	r5, r0, #0x1f
	mov	r0, #0x10
	and	r5, r5, r0
	b	.L63
.L60:
	ldr	r2, .L76
	ldrh	r1, [r1]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r5, [r0, #0x7]
.L63:
	mov	r0, #0x10
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L64	@cond_branch
	ldr	r0, .L76+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	b	.L69
.L77:
	.align	2, 0
.L76:
	.word	gBattleMoves
	.word	gActiveBattler
.L64:
	cmp	r5, #0
	bne	.L66	@cond_branch
	bl	GetBattlePalaceTarget
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r2, sl
	orr	r2, r2, r0
	mov	sl, r2
	b	.L65
.L66:
	ldr	r0, .L78
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	add	r1, r0, #0
	mov	r2, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	eor	r0, r0, r2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x10
.L69:
	mov	r1, sl
	orr	r1, r1, r0
	mov	sl, r1
.L65:
	mov	r2, sl
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x10
.L68:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L79:
	.align	2, 0
.L78:
	.word	gActiveBattler
.Lfe3:
	.size	 ChooseMoveAndTargetInBattlePalace,.Lfe3-ChooseMoveAndTargetInBattlePalace
	.align	2, 0
	.type	 GetBattlePalaceMoveGroup,function
	.thumb_func
GetBattlePalaceMoveGroup:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r1, .L96
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x7]
	add	r3, r1, #0
	cmp	r0, #0x40
	bls	.LCB626
	b	.L92	@long jump
.LCB626:
	lsl	r0, r0, #0x2
	ldr	r1, .L96+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L97:
	.align	2, 0
.L96:
	.word	gBattleMoves
	.word	.L93
	.align	2, 0
	.align	2, 0
.L93:
	.word	.L86
	.word	.L95
	.word	.L86
	.word	.L92
	.word	.L86
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L86
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L91
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L86
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L92
	.word	.L95
.L86:
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L92	@cond_branch
.L95:
	mov	r0, #0x2
	b	.L94
.L91:
	mov	r0, #0x1
	b	.L94
.L92:
	mov	r0, #0x0
.L94:
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 GetBattlePalaceMoveGroup,.Lfe4-GetBattlePalaceMoveGroup
	.align	2, 0
	.type	 GetBattlePalaceTarget,function
	.thumb_func
GetBattlePalaceTarget:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L119
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L99	@cond_branch
	ldr	r0, .L119+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L100	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, #0x3
	b	.L115
.L120:
	.align	2, 0
.L119:
	.word	gBattleTypeFlags
	.word	gActiveBattler
.L100:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, #0x2
.L115:
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L121
	mov	r2, #0x5c
	mov	r0, r8
	mul	r0, r0, r2
	add	r5, r0, r1
	mov	r0, r7
	mul	r0, r0, r2
	add	r6, r0, r1
	ldrh	r0, [r5, #0x2a]
	ldrh	r3, [r6, #0x2a]
	cmp	r0, r3
	bne	.L102	@cond_branch
	bl	Random
	add	r3, r0, #0
	ldr	r0, .L121+0x4
	ldrb	r1, [r0]
	mov	r2, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	eor	r0, r0, r2
	mov	r1, #0x2
	and	r1, r1, r3
	add	r0, r0, r1
	b	.L117
.L122:
	.align	2, 0
.L121:
	.word	gBattleMons
	.word	gActiveBattler
.L102:
	ldr	r4, .L123
	ldr	r0, .L123+0x4
	mov	r9, r0
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	GetNatureFromPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r4, [r0]
	cmp	r4, #0x1
	beq	.L107	@cond_branch
	cmp	r4, #0x1
	bgt	.L113	@cond_branch
	cmp	r4, #0
	beq	.L104	@cond_branch
	b	.L99
.L124:
	.align	2, 0
.L123:
	.word	gBattlePalaceNatureToMoveTarget
	.word	gActiveBattler
.L113:
	cmp	r4, #0x2
	beq	.L110	@cond_branch
	b	.L99
.L104:
	ldrh	r0, [r5, #0x2a]
	ldrh	r6, [r6, #0x2a]
	cmp	r0, r6
	bls	.L105	@cond_branch
	mov	r1, r8
	lsl	r0, r1, #0x8
	b	.L118
.L105:
	lsl	r0, r7, #0x8
	b	.L118
.L107:
	ldrh	r0, [r5, #0x2a]
	ldrh	r6, [r6, #0x2a]
	cmp	r0, r6
	bcs	.L108	@cond_branch
	mov	r3, r8
	lsl	r0, r3, #0x8
	b	.L118
.L108:
	lsl	r0, r7, #0x8
	b	.L118
.L110:
	bl	Random
	add	r3, r0, #0
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r2, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	eor	r0, r0, r2
	and	r4, r4, r3
	add	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x10
	b	.L118
.L99:
	ldr	r0, .L125
	ldrb	r1, [r0]
	mov	r0, #0x1
	eor	r0, r0, r1
.L117:
	lsl	r0, r0, #0x8
.L118:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L126:
	.align	2, 0
.L125:
	.word	gActiveBattler
.Lfe5:
	.size	 GetBattlePalaceTarget,.Lfe5-GetBattlePalaceTarget
	.align	2, 0
	.globl	sub_805D714
	.type	 sub_805D714,function
	.thumb_func
sub_805D714:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L133
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r3, [r0]
	lsl	r0, r3, #0x1a
	cmp	r0, #0
	bge	.L127	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L127	@cond_branch
	add	r2, r1, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	lsl	r0, r1, #0x19
	cmp	r0, #0
	bge	.L130	@cond_branch
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	b	.L127
.L134:
	.align	2, 0
.L133:
	.word	gSprites
.L130:
	lsl	r0, r3, #0x1b
	cmp	r0, #0
	bge	.L127	@cond_branch
	ldr	r0, .L135
	str	r0, [r4, #0x1c]
.L127:
	pop	{r4}
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	SpriteCallbackDummy
.Lfe6:
	.size	 sub_805D714,.Lfe6-sub_805D714
	.align	2, 0
	.globl	sub_805D770
	.type	 sub_805D770,function
	.thumb_func
sub_805D770:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	add	r3, r4, #0
	add	r3, r3, #0x2c
	ldrb	r0, [r3]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r3]
	ldr	r0, .L140
	str	r0, [r4, #0x1c]
	cmp	r1, #0
	bne	.L138	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L139
.L141:
	.align	2, 0
.L140:
	.word	SpriteCallbackDummy
.L138:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L139:
	add	r0, r4, #0
	bl	AnimateSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 sub_805D770,.Lfe7-sub_805D770
	.align	2, 0
	.globl	sub_805D7AC
	.type	 sub_805D7AC,function
	.thumb_func
sub_805D7AC:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L148
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L143	@cond_branch
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L143	@cond_branch
	mov	r1, #0x26
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L145	@cond_branch
	ldr	r0, .L148+0x4
	b	.L147
.L149:
	.align	2, 0
.L148:
	.word	gIntroSlideFlags
	.word	sub_805D7EC
.L145:
	ldr	r0, .L150
.L147:
	str	r0, [r2, #0x1c]
.L143:
	pop	{r0}
	bx	r0
.L151:
	.align	2, 0
.L150:
	.word	SpriteCallbackDummy
.Lfe8:
	.size	 sub_805D7AC,.Lfe8-sub_805D7AC
	.align	2, 0
	.type	 sub_805D7EC,function
	.thumb_func
sub_805D7EC:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x26]
	sub	r0, r0, #0x2
	strh	r0, [r1, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L153	@cond_branch
	ldr	r0, .L154
	str	r0, [r1, #0x1c]
.L153:
	pop	{r0}
	bx	r0
.L155:
	.align	2, 0
.L154:
	.word	SpriteCallbackDummy
.Lfe9:
	.size	 sub_805D7EC,.Lfe9-sub_805D7EC
	.align	2, 0
	.globl	InitAndLaunchChosenStatusAnimation
	.type	 InitAndLaunchChosenStatusAnimation,function
	.thumb_func
InitAndLaunchChosenStatusAnimation:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	ldr	r6, .L180
	ldr	r1, [r6]
	ldr	r5, .L180+0x4
	ldrb	r2, [r5]
	ldr	r3, [r1, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r2, [r1]
	mov	r3, #0x10
	orr	r2, r2, r3
	strb	r2, [r1]
	cmp	r0, #0
	bne	.L157	@cond_branch
	cmp	r4, #0x20
	bne	.L158	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x6
	bl	LaunchStatusAnimation
	b	.L169
.L181:
	.align	2, 0
.L180:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L158:
	cmp	r4, #0x8
	beq	.L161	@cond_branch
	mov	r0, #0x80
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L160	@cond_branch
.L161:
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	LaunchStatusAnimation
	b	.L169
.L160:
	cmp	r4, #0x10
	bne	.L163	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	LaunchStatusAnimation
	b	.L169
.L163:
	mov	r0, #0x7
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L165	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x4
	bl	LaunchStatusAnimation
	b	.L169
.L165:
	cmp	r4, #0x40
	bne	.L178	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x5
	bl	LaunchStatusAnimation
	b	.L169
.L157:
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L170	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	LaunchStatusAnimation
	b	.L169
.L170:
	mov	r0, #0x7
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L172	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	LaunchStatusAnimation
	b	.L169
.L172:
	mov	r0, #0x80
	lsl	r0, r0, #0x15
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L174	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x7
	bl	LaunchStatusAnimation
	b	.L169
.L174:
	mov	r0, #0x80
	lsl	r0, r0, #0x14
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L176	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x8
	bl	LaunchStatusAnimation
	b	.L169
.L176:
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L178	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x9
	bl	LaunchStatusAnimation
	b	.L169
.L178:
	ldr	r0, [r6]
	ldrb	r2, [r5]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L169:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 InitAndLaunchChosenStatusAnimation,.Lfe10-InitAndLaunchChosenStatusAnimation
	.align	2, 0
	.globl	TryHandleLaunchBattleTableAnimation
	.type	 TryHandleLaunchBattleTableAnimation,function
	.thumb_func
TryHandleLaunchBattleTableAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0x24]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp]
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	lsl	r4, r4, #0x10
	lsr	r7, r4, #0x10
	cmp	r6, #0
	bne	.L183	@cond_branch
	mov	r0, #0x80
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L183	@cond_branch
	ldr	r0, .L188
	add	r0, r5, r0
	mov	r2, #0x7f
	add	r1, r7, #0
	and	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x1
	b	.L187
.L189:
	.align	2, 0
.L188:
	.word	gBattleMonForms
.L183:
	ldr	r0, .L190
	mov	r9, r0
	ldr	r0, [r0]
	ldr	r0, [r0]
	lsl	r4, r5, #0x2
	add	r0, r4, r0
	ldrb	r1, [r0]
	mov	r2, #0x4
	mov	r8, r2
	mov	r0, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L185	@cond_branch
	add	r0, r6, #0
	bl	ShouldAnimBeDoneRegardlessOfSubsitute
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L184	@cond_branch
	mov	r0, #0x1
	b	.L187
.L191:
	.align	2, 0
.L190:
	.word	gBattleSpritesDataPtr
.L184:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0]
	add	r0, r4, r0
	ldrb	r1, [r0]
	mov	r0, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L185	@cond_branch
	cmp	r6, #0x2
	bne	.L185	@cond_branch
	ldr	r1, .L192
	ldr	r0, .L192+0x4
	add	r0, r5, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L185	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	LoadBattleMonGfxAndAnimate
	add	r0, r5, #0
	bl	ClearBehindSubstituteBit
	mov	r0, #0x1
	b	.L187
.L193:
	.align	2, 0
.L192:
	.word	gSprites
	.word	gBattlerSpriteIds
.L185:
	cmp	r6, #0x1c
	bne	.L186	@cond_branch
	ldr	r3, .L194
	ldr	r0, [r3]
	lsl	r2, r5, #0x3
	add	r0, r0, r2
	ldr	r1, .L194+0x4
	add	r0, r0, r1
	mov	r4, #0x0
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, [r3]
	add	r0, r0, r2
	mov	r2, #0xb7
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	strb	r4, [r0]
.L186:
	ldr	r0, .L194+0x8
	mov	r1, sl
	strb	r1, [r0]
	ldr	r0, .L194+0xc
	mov	r2, sp
	ldrb	r2, [r2]
	strb	r2, [r0]
	ldr	r4, .L194+0x10
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	strh	r7, [r0]
	ldr	r0, .L194+0x14
	add	r1, r6, #0
	mov	r2, #0x0
	bl	LaunchBattleAnimation
	ldr	r0, .L194+0x18
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L194+0x1c
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r5, [r1, #0x8]
	ldr	r0, [r4]
	mov	r2, #0x8
	ldrsh	r1, [r1, r2]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x0
.L187:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L195:
	.align	2, 0
.L194:
	.word	gBattleStruct
	.word	0x2de
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleSpritesDataPtr
	.word	gBattleAnims_General
	.word	Task_ClearBitWhenBattleTableAnimDone
	.word	gTasks
.Lfe11:
	.size	 TryHandleLaunchBattleTableAnimation,.Lfe11-TryHandleLaunchBattleTableAnimation
	.align	2, 0
	.type	 Task_ClearBitWhenBattleTableAnimDone,function
	.thumb_func
Task_ClearBitWhenBattleTableAnimDone:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L198
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L198+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L197	@cond_branch
	ldr	r0, .L198+0x8
	ldr	r2, [r0]
	ldr	r1, .L198+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	ldr	r2, [r2, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyTask
.L197:
	pop	{r4}
	pop	{r0}
	bx	r0
.L199:
	.align	2, 0
.L198:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
	.word	gTasks
.Lfe12:
	.size	 Task_ClearBitWhenBattleTableAnimDone,.Lfe12-Task_ClearBitWhenBattleTableAnimDone
	.align	2, 0
	.type	 ShouldAnimBeDoneRegardlessOfSubsitute,function
	.thumb_func
ShouldAnimBeDoneRegardlessOfSubsitute:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xd
	bgt	.L210	@cond_branch
	cmp	r0, #0xa
	bge	.L207	@cond_branch
	cmp	r0, #0x2
	beq	.L207	@cond_branch
	b	.L208
.L210:
	cmp	r0, #0x11
	bne	.L208	@cond_branch
.L207:
	mov	r0, #0x1
	b	.L211
.L208:
	mov	r0, #0x0
.L211:
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 ShouldAnimBeDoneRegardlessOfSubsitute,.Lfe13-ShouldAnimBeDoneRegardlessOfSubsitute
	.align	2, 0
	.globl	InitAndLaunchSpecialAnimation
	.type	 InitAndLaunchSpecialAnimation,function
	.thumb_func
InitAndLaunchSpecialAnimation:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L213
	strb	r1, [r0]
	ldr	r0, .L213+0x4
	strb	r2, [r0]
	ldr	r0, .L213+0x8
	add	r1, r3, #0
	mov	r2, #0x0
	bl	LaunchBattleAnimation
	ldr	r0, .L213+0xc
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L213+0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	ldr	r0, .L213+0x14
	ldr	r0, [r0]
	mov	r2, #0x8
	ldrsh	r1, [r1, r2]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L214:
	.align	2, 0
.L213:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnims_Special
	.word	Task_ClearBitWhenSpecialAnimDone
	.word	gTasks
	.word	gBattleSpritesDataPtr
.Lfe14:
	.size	 InitAndLaunchSpecialAnimation,.Lfe14-InitAndLaunchSpecialAnimation
	.align	2, 0
	.type	 Task_ClearBitWhenSpecialAnimDone,function
	.thumb_func
Task_ClearBitWhenSpecialAnimDone:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L217
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L217+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L216	@cond_branch
	ldr	r0, .L217+0x8
	ldr	r2, [r0]
	ldr	r1, .L217+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	ldr	r2, [r2, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyTask
.L216:
	pop	{r4}
	pop	{r0}
	bx	r0
.L218:
	.align	2, 0
.L217:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
	.word	gTasks
.Lfe15:
	.size	 Task_ClearBitWhenSpecialAnimDone,.Lfe15-Task_ClearBitWhenSpecialAnimDone
	.align	2, 0
	.globl	IsMoveWithoutAnimation
	.type	 IsMoveWithoutAnimation,function
	.thumb_func
IsMoveWithoutAnimation:
	push	{lr}
	lsl	r0, r0, #0x10
	ldr	r1, .L223
	cmp	r0, r1
	bhi	.L220	@cond_branch
	mov	r0, #0x0
	b	.L222
.L224:
	.align	2, 0
.L223:
	.word	0x2f10000
.L220:
	mov	r0, #0x1
.L222:
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 IsMoveWithoutAnimation,.Lfe16-IsMoveWithoutAnimation
	.align	2, 0
	.globl	mplay_80342A4
	.type	 mplay_80342A4,function
	.thumb_func
mplay_80342A4:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r5, #0x0
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L226	@cond_branch
	ldr	r2, .L231
	ldr	r0, [r2]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x8]
	ldr	r2, [r2]
	ldr	r0, .L231+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0x1d
	bls	.L230	@cond_branch
	ldr	r0, .L231+0x8
	bl	m4aMPlayStop
	ldr	r0, .L231+0xc
	bl	m4aMPlayStop
.L226:
	cmp	r5, #0
	beq	.L228	@cond_branch
.L230:
	mov	r0, #0x1
	b	.L229
.L232:
	.align	2, 0
.L231:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gMPlayInfo_SE1
	.word	gMPlayInfo_SE2
.L228:
	ldr	r0, .L233
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r5, [r0, #0x8]
	mov	r0, #0x0
.L229:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L234:
	.align	2, 0
.L233:
	.word	gBattleSpritesDataPtr
.Lfe17:
	.size	 mplay_80342A4,.Lfe17-mplay_80342A4
	.align	2, 0
	.type	 BattleLoadMonSpriteGfx,function
	.thumb_func
BattleLoadMonSpriteGfx:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	mov	r8, r0
	mov	sl, r1
	str	r2, [sp]
	mov	r0, sl
	bl	GetIllusionMonPtr
	cmp	r0, #0
	beq	.L236	@cond_branch
	mov	r8, r0
.L236:
	mov	r0, r8
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x4]
	ldr	r0, .L252
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r2, sl
	lsl	r1, r2, #0x2
	add	r2, r1, r0
	ldrh	r0, [r2, #0x2]
	str	r1, [sp, #0xc]
	cmp	r0, #0
	bne	.L237	@cond_branch
	mov	r0, r8
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldr	r7, [sp, #0x4]
	mov	r0, r8
	mov	r1, #0x59
	bl	GetMonData
	b	.L249
.L253:
	.align	2, 0
.L252:
	.word	gBattleSpritesDataPtr
.L237:
	ldrh	r2, [r2, #0x2]
	mov	r9, r2
	ldr	r0, .L254
	ldr	r1, [sp, #0xc]
	add	r0, r1, r0
	ldr	r7, [r0]
	mov	r0, r9
	bl	GetFormIdFromFormSpeciesId
.L249:
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, r9
	bl	GetFormSpeciesId
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, r8
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x8]
	mov	r2, sl
	lsl	r0, r2, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, [sp]
	cmp	r0, #0
	beq	.L239	@cond_branch
	lsl	r0, r5, #0x3
	ldr	r1, .L254+0x4
	b	.L250
.L255:
	.align	2, 0
.L254:
	.word	gTransformedPersonalities
	.word	gMonFrontPicTable
.L239:
	mov	r0, #0x1
	add	r1, r4, #0
	bl	sub_80688F8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L242	@cond_branch
	ldr	r0, .L256
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldr	r1, [sp, #0xc]
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L241	@cond_branch
.L242:
	lsl	r0, r5, #0x3
	ldr	r1, .L256+0x4
.L250:
	add	r0, r0, r1
	ldr	r1, .L256+0x8
	ldr	r1, [r1]
	lsl	r2, r6, #0x2
	add	r1, r1, #0x4
	add	r1, r1, r2
	ldr	r1, [r1]
	add	r2, r5, #0
	add	r3, r7, #0
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
	b	.L240
.L257:
	.align	2, 0
.L256:
	.word	gBattleSpritesDataPtr
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
.L241:
	lsl	r0, r5, #0x3
	ldr	r1, .L258
	add	r0, r0, r1
	ldr	r1, .L258+0x4
	ldr	r1, [r1]
	lsl	r2, r6, #0x2
	add	r1, r1, #0x4
	add	r1, r1, r2
	ldr	r1, [r1]
	add	r2, r5, #0
	add	r3, r7, #0
	bl	HandleLoadSpecialPokePic
.L240:
	mov	r2, sl
	lsl	r1, r2, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L258+0x8
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldr	r2, [sp, #0xc]
	add	r0, r2, r0
	ldrh	r0, [r0, #0x2]
	add	r7, r1, #0
	cmp	r0, #0
	bne	.L244	@cond_branch
	mov	r0, r8
	bl	GetMonFrontSpritePal
	b	.L251
.L259:
	.align	2, 0
.L258:
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
	.word	gBattleSpritesDataPtr
.L244:
	add	r0, r5, #0
	ldr	r1, [sp, #0x8]
	ldr	r2, [sp, #0x4]
	bl	GetMonSpritePalFromSpeciesAndPersonality
.L251:
	add	r5, r0, #0
	ldr	r4, .L260
	add	r0, r5, #0
	add	r1, r4, #0
	bl	LZDecompressWram
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x20
	bl	LoadPalette
	add	r1, r7, #0
	add	r1, r1, #0x80
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L260+0x4
	cmp	r9, r0
	beq	.L247	@cond_branch
	add	r0, r0, #0x46
	cmp	r9, r0
	bne	.L246	@cond_branch
.L247:
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r7, r1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r4, .L260+0x8
	ldr	r1, [r4]
	add	r1, r1, #0xfa
	add	r0, r5, #0
	bl	LZDecompressWram
	ldr	r0, .L260+0xc
	add	r0, r0, sl
	ldrb	r1, [r0]
	lsl	r1, r1, #0x5
	add	r1, r1, #0xfa
	ldr	r0, [r4]
	add	r0, r0, r1
	add	r1, r6, #0
	mov	r2, #0x20
	bl	LoadPalette
.L246:
	ldr	r0, .L260+0x10
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldr	r2, [sp, #0xc]
	add	r0, r2, r0
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L248	@cond_branch
	ldr	r3, .L260+0x14
	add	r0, r6, #0
	mov	r1, #0x10
	mov	r2, #0x6
	bl	BlendPalette
	lsl	r1, r6, #0x1
	ldr	r0, .L260+0x18
	add	r0, r1, r0
	ldr	r2, .L260+0x1c
	add	r1, r1, r2
	ldr	r2, .L260+0x20
	bl	CpuSet
.L248:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L261:
	.align	2, 0
.L260:
	.word	gDecompressionBuffer
	.word	0x15f
	.word	gBattleStruct
	.word	gBattleMonForms
	.word	gBattleSpritesDataPtr
	.word	0x7fff
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	0x4000008
.Lfe18:
	.size	 BattleLoadMonSpriteGfx,.Lfe18-BattleLoadMonSpriteGfx
	.align	2, 0
	.globl	BattleLoadOpponentMonSpriteGfx
	.type	 BattleLoadOpponentMonSpriteGfx,function
	.thumb_func
BattleLoadOpponentMonSpriteGfx:
	push	{lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x1
	bl	BattleLoadMonSpriteGfx
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 BattleLoadOpponentMonSpriteGfx,.Lfe19-BattleLoadOpponentMonSpriteGfx
	.align	2, 0
	.globl	BattleLoadPlayerMonSpriteGfx
	.type	 BattleLoadPlayerMonSpriteGfx,function
	.thumb_func
BattleLoadPlayerMonSpriteGfx:
	push	{lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	bl	BattleLoadMonSpriteGfx
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 BattleLoadPlayerMonSpriteGfx,.Lfe20-BattleLoadPlayerMonSpriteGfx
	.align	2, 0
	.globl	nullsub_24
	.type	 nullsub_24,function
	.thumb_func
nullsub_24:
	bx	lr
.Lfe21:
	.size	 nullsub_24,.Lfe21-nullsub_24
	.align	2, 0
	.globl	DecompressTrainerFrontPic
	.type	 DecompressTrainerFrontPic,function
	.thumb_func
DecompressTrainerFrontPic:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsl	r4, r4, #0x3
	ldr	r2, .L266
	add	r2, r4, r2
	ldr	r1, .L266+0x4
	ldr	r1, [r1]
	lsr	r0, r0, #0x16
	add	r1, r1, #0x4
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r2, #0
	mov	r2, #0x0
	bl	DecompressPicFromTable_DontHandleDeoxys
	ldr	r0, .L266+0x8
	add	r4, r4, r0
	add	r0, r4, #0
	bl	LoadCompressedSpritePalette
	pop	{r4}
	pop	{r0}
	bx	r0
.L267:
	.align	2, 0
.L266:
	.word	gTrainerFrontPicTable
	.word	gMonSpritesGfxPtr
	.word	gTrainerFrontPicPaletteTable
.Lfe22:
	.size	 DecompressTrainerFrontPic,.Lfe22-DecompressTrainerFrontPic
	.align	2, 0
	.globl	DecompressTrainerBackPic
	.type	 DecompressTrainerBackPic,function
	.thumb_func
DecompressTrainerBackPic:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsl	r5, r5, #0x3
	ldr	r2, .L269
	add	r2, r5, r2
	ldr	r1, .L269+0x4
	ldr	r1, [r1]
	lsr	r0, r0, #0x16
	add	r1, r1, #0x4
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r2, #0
	mov	r2, #0x0
	bl	DecompressPicFromTable_DontHandleDeoxys
	ldr	r0, .L269+0x8
	add	r5, r5, r0
	ldr	r0, [r5]
	lsl	r4, r4, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r4, r4, r1
	lsr	r4, r4, #0x10
	add	r1, r4, #0
	mov	r2, #0x20
	bl	LoadCompressedPalette
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L270:
	.align	2, 0
.L269:
	.word	gTrainerBackPicTable
	.word	gMonSpritesGfxPtr
	.word	gTrainerBackPicPaletteTable
.Lfe23:
	.size	 DecompressTrainerBackPic,.Lfe23-DecompressTrainerBackPic
	.align	2, 0
	.globl	nullsub_25
	.type	 nullsub_25,function
	.thumb_func
nullsub_25:
	bx	lr
.Lfe24:
	.size	 nullsub_25,.Lfe24-nullsub_25
	.align	2, 0
	.globl	FreeTrainerFrontPicPalette
	.type	 FreeTrainerFrontPicPalette,function
	.thumb_func
FreeTrainerFrontPicPalette:
	push	{lr}
	lsl	r0, r0, #0x10
	ldr	r1, .L273
	lsr	r0, r0, #0xd
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
	bl	FreeSpritePaletteByTag
	pop	{r0}
	bx	r0
.L274:
	.align	2, 0
.L273:
	.word	gTrainerFrontPicPaletteTable
.Lfe25:
	.size	 FreeTrainerFrontPicPalette,.Lfe25-FreeTrainerFrontPicPalette
	.align	2, 0
	.globl	BattleLoadAllHealthBoxesGfxAtOnce
	.type	 BattleLoadAllHealthBoxesGfxAtOnce,function
	.thumb_func
BattleLoadAllHealthBoxesGfxAtOnce:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L283
	add	r0, r4, #0
	bl	LoadSpritePalette
	add	r4, r4, #0x8
	add	r0, r4, #0
	bl	LoadSpritePalette
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L276	@cond_branch
	ldr	r0, .L283+0x4
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L283+0x8
	bl	LoadCompressedSpriteSheet
	mov	r5, #0x2
	b	.L277
.L284:
	.align	2, 0
.L283:
	.word	sSpritePalettes_HealthBoxHealthBar
	.word	sSpriteSheet_SinglesPlayerHealthbox
	.word	sSpriteSheet_SinglesOpponentHealthbox
.L276:
	ldr	r4, .L285
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheet
	add	r4, r4, #0x8
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheet
	ldr	r4, .L285+0x4
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheet
	add	r4, r4, #0x8
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheet
	mov	r5, #0x4
.L277:
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L279	@cond_branch
	ldr	r7, .L285+0x8
	ldr	r6, .L285+0xc
.L281:
	add	r0, r4, r7
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	bl	LoadCompressedSpriteSheet
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L281	@cond_branch
.L279:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L286:
	.align	2, 0
.L285:
	.word	sSpriteSheets_DoublesPlayerHealthbox
	.word	sSpriteSheets_DoublesOpponentHealthbox
	.word	gBattlerPositions
	.word	sSpriteSheets_HealthBar
.Lfe26:
	.size	 BattleLoadAllHealthBoxesGfxAtOnce,.Lfe26-BattleLoadAllHealthBoxesGfxAtOnce
	.align	2, 0
	.globl	BattleLoadAllHealthBoxesGfx
	.type	 BattleLoadAllHealthBoxesGfx,function
	.thumb_func
BattleLoadAllHealthBoxesGfx:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	mov	r6, #0x0
	cmp	r4, #0
	bne	.LCB2389
	b	.L288	@long jump
.LCB2389:
	cmp	r4, #0x1
	bne	.L289	@cond_branch
	ldr	r4, .L320
	add	r0, r4, #0
	bl	LoadSpritePalette
	add	r4, r4, #0x8
	add	r0, r4, #0
	bl	LoadSpritePalette
	b	.L288
.L321:
	.align	2, 0
.L320:
	.word	sSpritePalettes_HealthBoxHealthBar
.L289:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L291	@cond_branch
	cmp	r4, #0x2
	bne	.L292	@cond_branch
	ldr	r0, .L322
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L293	@cond_branch
	ldr	r0, .L322+0x4
	bl	LoadCompressedSpriteSheet
	b	.L288
.L323:
	.align	2, 0
.L322:
	.word	gBattleTypeFlags
	.word	sSpriteSheet_SafariHealthbox
.L293:
	ldr	r0, .L324
	bl	LoadCompressedSpriteSheet
	b	.L288
.L325:
	.align	2, 0
.L324:
	.word	sSpriteSheet_SinglesPlayerHealthbox
.L292:
	cmp	r4, #0x3
	bne	.L296	@cond_branch
	ldr	r0, .L326
	bl	LoadCompressedSpriteSheet
	b	.L288
.L327:
	.align	2, 0
.L326:
	.word	sSpriteSheet_SinglesOpponentHealthbox
.L296:
	cmp	r4, #0x4
	bne	.L298	@cond_branch
	ldr	r0, .L328
	ldrb	r0, [r0]
	b	.L319
.L329:
	.align	2, 0
.L328:
	.word	gBattlerPositions
.L298:
	cmp	r4, #0x5
	bne	.L317	@cond_branch
	ldr	r0, .L330
	ldrb	r0, [r0, #0x1]
	b	.L319
.L331:
	.align	2, 0
.L330:
	.word	gBattlerPositions
.L291:
	cmp	r4, #0x2
	bne	.L303	@cond_branch
	ldr	r0, .L332
	bl	LoadCompressedSpriteSheet
	b	.L288
.L333:
	.align	2, 0
.L332:
	.word	sSpriteSheets_DoublesPlayerHealthbox
.L303:
	cmp	r4, #0x3
	bne	.L305	@cond_branch
	ldr	r0, .L334
	bl	LoadCompressedSpriteSheet
	b	.L288
.L335:
	.align	2, 0
.L334:
	.word	sSpriteSheets_DoublesPlayerHealthbox+0x8
.L305:
	cmp	r4, #0x4
	bne	.L307	@cond_branch
	ldr	r0, .L336
	bl	LoadCompressedSpriteSheet
	b	.L288
.L337:
	.align	2, 0
.L336:
	.word	sSpriteSheets_DoublesOpponentHealthbox
.L307:
	cmp	r4, #0x5
	bne	.L309	@cond_branch
	ldr	r0, .L338
	bl	LoadCompressedSpriteSheet
	b	.L288
.L339:
	.align	2, 0
.L338:
	.word	sSpriteSheets_DoublesOpponentHealthbox+0x8
.L309:
	cmp	r4, #0x6
	bne	.L311	@cond_branch
	ldr	r0, .L340
	ldrb	r0, [r0]
	b	.L319
.L341:
	.align	2, 0
.L340:
	.word	gBattlerPositions
.L311:
	cmp	r4, #0x7
	bne	.L313	@cond_branch
	ldr	r0, .L342
	ldrb	r0, [r0, #0x1]
	b	.L319
.L343:
	.align	2, 0
.L342:
	.word	gBattlerPositions
.L313:
	cmp	r4, #0x8
	bne	.L315	@cond_branch
	ldr	r0, .L344
	ldrb	r0, [r0, #0x2]
	b	.L319
.L345:
	.align	2, 0
.L344:
	.word	gBattlerPositions
.L315:
	cmp	r5, #0x9
	bne	.L317	@cond_branch
	ldr	r0, .L346
	ldrb	r0, [r0, #0x3]
.L319:
	lsl	r0, r0, #0x3
	ldr	r1, .L346+0x4
	add	r0, r0, r1
	bl	LoadCompressedSpriteSheet
	b	.L288
.L347:
	.align	2, 0
.L346:
	.word	gBattlerPositions
	.word	sSpriteSheets_HealthBar
.L317:
	mov	r6, #0x1
.L288:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 BattleLoadAllHealthBoxesGfx,.Lfe27-BattleLoadAllHealthBoxesGfx
	.align	2, 0
	.globl	LoadBattleBarGfx
	.type	 LoadBattleBarGfx,function
	.thumb_func
LoadBattleBarGfx:
	push	{lr}
	ldr	r0, .L349
	ldr	r1, .L349+0x4
	ldr	r1, [r1]
	mov	r2, #0xba
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	LZDecompressWram
	pop	{r0}
	bx	r0
.L350:
	.align	2, 0
.L349:
	.word	gUnknown_08C093F0
	.word	gMonSpritesGfxPtr
.Lfe28:
	.size	 LoadBattleBarGfx,.Lfe28-LoadBattleBarGfx
	.align	2, 0
	.globl	BattleInitAllSprites
	.type	 BattleInitAllSprites,function
	.thumb_func
BattleInitAllSprites:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r6, #0x0
	ldrb	r0, [r5]
	cmp	r0, #0x6
	bls	.LCB2659
	b	.L352	@long jump
.LCB2659:
	lsl	r0, r0, #0x2
	ldr	r1, .L378
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L379:
	.align	2, 0
.L378:
	.word	.L372
	.align	2, 0
	.align	2, 0
.L372:
	.word	.L353
	.word	.L354
	.word	.L374
	.word	.L358
	.word	.L362
	.word	.L366
	.word	.L371
.L353:
	bl	ClearSpritesBattlerHealthboxAnimData
	b	.L374
.L354:
	ldrb	r0, [r4]
	bl	BattleLoadAllHealthBoxesGfx
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2689
	b	.L375	@long jump
.LCB2689:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L352
.L358:
	ldr	r0, .L380
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L359	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L359	@cond_branch
	bl	CreateSafariPlayerHealthboxSprites
	b	.L376
.L381:
	.align	2, 0
.L380:
	.word	gBattleTypeFlags
.L359:
	ldrb	r0, [r4]
	bl	CreateBattlerHealthboxSprites
.L376:
	ldr	r2, .L382
	ldrb	r1, [r4]
	add	r1, r1, r2
	strb	r0, [r1]
	b	.L377
.L383:
	.align	2, 0
.L382:
	.word	gHealthboxSpriteIds
.L362:
	ldrb	r0, [r4]
	bl	InitBattlerHealthboxCoords
	ldr	r0, .L384
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L363	@cond_branch
	ldr	r0, .L384+0x4
	add	r0, r1, r0
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	DummyBattleInterfaceFunc
	b	.L377
.L385:
	.align	2, 0
.L384:
	.word	gBattlerPositions
	.word	gHealthboxSpriteIds
.L363:
	ldr	r0, .L386
	add	r0, r1, r0
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	DummyBattleInterfaceFunc
	b	.L377
.L387:
	.align	2, 0
.L386:
	.word	gHealthboxSpriteIds
.L366:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L367	@cond_branch
	ldr	r0, .L388
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L369	@cond_branch
	ldr	r0, .L388+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L388+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L388+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	b	.L369
.L389:
	.align	2, 0
.L388:
	.word	gBattleTypeFlags
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L367:
	ldr	r0, .L390
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L390+0x4
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L390+0x8
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
.L369:
	ldr	r1, .L390
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
.L377:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L390+0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L352	@cond_branch
.L375:
	mov	r0, #0x0
	strb	r0, [r4]
.L374:
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	b	.L352
.L391:
	.align	2, 0
.L390:
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlersCount
.L371:
	bl	LoadAndCreateEnemyShadowSprites
	bl	BufferBattlePartyCurrentOrder
	mov	r6, #0x1
.L352:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 BattleInitAllSprites,.Lfe29-BattleInitAllSprites
	.align	2, 0
	.globl	ClearSpritesHealthboxAnimData
	.type	 ClearSpritesHealthboxAnimData,function
	.thumb_func
ClearSpritesHealthboxAnimData:
	push	{r4, lr}
	ldr	r4, .L393
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	mov	r1, #0x0
	mov	r2, #0x30
	bl	memset
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	mov	r1, #0x0
	mov	r2, #0x10
	bl	memset
	pop	{r4}
	pop	{r0}
	bx	r0
.L394:
	.align	2, 0
.L393:
	.word	gBattleSpritesDataPtr
.Lfe30:
	.size	 ClearSpritesHealthboxAnimData,.Lfe30-ClearSpritesHealthboxAnimData
	.align	2, 0
	.type	 ClearSpritesBattlerHealthboxAnimData,function
	.thumb_func
ClearSpritesBattlerHealthboxAnimData:
	push	{lr}
	bl	ClearSpritesHealthboxAnimData
	ldr	r0, .L396
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x10
	bl	memset
	pop	{r0}
	bx	r0
.L397:
	.align	2, 0
.L396:
	.word	gBattleSpritesDataPtr
.Lfe31:
	.size	 ClearSpritesBattlerHealthboxAnimData,.Lfe31-ClearSpritesBattlerHealthboxAnimData
	.align	2, 0
	.globl	CopyAllBattleSpritesInvisibilities
	.type	 CopyAllBattleSpritesInvisibilities,function
	.thumb_func
CopyAllBattleSpritesInvisibilities:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r4, #0x0
	ldr	r5, .L404
	ldrb	r0, [r5]
	cmp	r4, r0
	bge	.L400	@cond_branch
	ldr	r0, .L404+0x4
	mov	r9, r0
	mov	r0, #0x1
	mov	ip, r0
	mov	r0, #0x2
	neg	r0, r0
	mov	r8, r0
	ldr	r7, .L404+0x8
	ldr	r6, .L404+0xc
.L402:
	ldr	r0, [r7]
	ldr	r0, [r0]
	lsl	r3, r4, #0x2
	add	r3, r3, r0
	add	r0, r4, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	mov	r0, ip
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, r8
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r4, r4, #0x1
	ldrb	r0, [r5]
	cmp	r4, r0
	blt	.L402	@cond_branch
.L400:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L405:
	.align	2, 0
.L404:
	.word	gBattlersCount
	.word	gSprites
	.word	gBattleSpritesDataPtr
	.word	gBattlerSpriteIds
.Lfe32:
	.size	 CopyAllBattleSpritesInvisibilities,.Lfe32-CopyAllBattleSpritesInvisibilities
	.align	2, 0
	.globl	CopyBattleSpriteInvisibility
	.type	 CopyBattleSpriteInvisibility,function
	.thumb_func
CopyBattleSpriteInvisibility:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L407
	ldr	r1, [r1]
	ldr	r1, [r1]
	lsl	r3, r0, #0x2
	add	r3, r3, r1
	ldr	r2, .L407+0x4
	ldr	r1, .L407+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	ldrb	r2, [r3]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bx	lr
.L408:
	.align	2, 0
.L407:
	.word	gBattleSpritesDataPtr
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe33:
	.size	 CopyBattleSpriteInvisibility,.Lfe33-CopyBattleSpriteInvisibility
	.align	2, 0
	.globl	HandleSpeciesGfxDataChange
	.type	 HandleSpeciesGfxDataChange,function
	.thumb_func
HandleSpeciesGfxDataChange:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	str	r3, [sp, #0x8]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x4]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L410	@cond_branch
	mov	r0, #0x0
	mov	sl, r0
	ldr	r0, .L425
	ldr	r0, [r0]
	ldr	r2, [r0, #0x18]
	ldrh	r1, [r2, #0x2]
	mov	r8, r1
	ldr	r3, [r2, #0x8]
	mov	r9, r3
	ldr	r4, [r2, #0xc]
	lsl	r0, r1, #0x3
	ldr	r1, .L425+0x4
	add	r0, r0, r1
	ldr	r1, .L425+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
	ldr	r3, [r2, #0x10]
	b	.L423
.L426:
	.align	2, 0
.L425:
	.word	gContestResources
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
.L410:
	add	r0, r7, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, [sp]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L412	@cond_branch
	ldr	r0, .L427
	ldr	r1, [sp]
	lsl	r5, r1, #0x1
	add	r5, r5, r0
	ldrh	r0, [r5]
	mov	r2, #0x64
	mov	r8, r2
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r3, #0
	ldr	r6, .L427+0x4
	add	r0, r0, r6
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrh	r0, [r5]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	b	.L424
.L428:
	.align	2, 0
.L427:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L412:
	ldr	r0, .L429
	ldr	r2, [sp]
	lsl	r5, r2, #0x1
	add	r5, r5, r0
	ldrh	r0, [r5]
	mov	r3, #0x64
	mov	r8, r3
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r6, .L429+0x4
	add	r0, r0, r6
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrh	r0, [r5]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
.L424:
	add	r0, r0, r6
	mov	r1, #0x59
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	GetFormSpeciesId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L414	@cond_branch
	ldr	r0, .L429
	lsl	r4, r7, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L429+0x4
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	mov	r9, r0
	ldrh	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x1
	bl	GetMonData
	add	r4, r0, #0
	mov	r3, r8
	lsl	r0, r3, #0x3
	ldr	r1, .L429+0x8
	add	r0, r0, r1
	ldr	r1, .L429+0xc
	ldr	r1, [r1]
	mov	r3, sl
	lsl	r2, r3, #0x2
	add	r1, r1, #0x4
	add	r1, r1, r2
	ldr	r1, [r1]
	ldr	r3, .L429+0x10
	lsl	r2, r7, #0x2
	add	r2, r2, r3
	ldr	r3, [r2]
.L423:
	mov	r2, r8
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
	b	.L411
.L430:
	.align	2, 0
.L429:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
	.word	gTransformedPersonalities
.L414:
	ldr	r0, .L431
	lsl	r4, r7, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L431+0x4
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	mov	r9, r0
	ldrh	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x1
	bl	GetMonData
	add	r4, r0, #0
	mov	r1, r8
	lsl	r0, r1, #0x3
	ldr	r1, .L431+0x8
	add	r0, r0, r1
	ldr	r1, .L431+0xc
	ldr	r1, [r1]
	mov	r3, sl
	lsl	r2, r3, #0x2
	add	r1, r1, #0x4
	add	r1, r1, r2
	ldr	r1, [r1]
	ldr	r3, .L431+0x10
	lsl	r2, r7, #0x2
	add	r2, r2, r3
	ldr	r3, [r2]
	mov	r2, r8
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
.L411:
	ldr	r0, [sp, #0x4]
	cmp	r0, #0
	beq	.L416	@cond_branch
	ldr	r0, .L431+0x14
	add	r0, r0, r7
	mov	r8, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L431+0x18
	mov	r9, r1
	add	r0, r0, r9
	ldr	r4, .L431+0x1c
	ldr	r1, [r4]
	ldr	r1, [r1, #0x8]
	ldrb	r1, [r1]
	bl	StartSpriteAnim
	lsl	r0, r7, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r6, r0, r2
	ldr	r2, .L431+0x20
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrh	r1, [r0]
	lsl	r1, r1, #0x5
	add	r1, r1, #0xfa
	ldr	r0, [r2]
	add	r0, r0, r1
	add	r5, r6, #0
	add	r1, r5, #0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L431+0x24
	add	r1, r7, r1
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldr	r0, [r4]
	ldr	r1, [r0]
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L417	@cond_branch
	ldr	r3, .L431+0x28
	add	r0, r5, #0
	mov	r1, #0x10
	mov	r2, #0x6
	bl	BlendPalette
	lsl	r1, r6, #0x1
	ldr	r0, .L431+0x2c
	add	r0, r1, r0
	ldr	r2, .L431+0x30
	add	r1, r1, r2
	ldr	r2, .L431+0x34
	bl	CpuSet
.L417:
	add	r0, r7, #0
	bl	GetBattlerSpriteDefault_Y
	mov	r3, r8
	ldrb	r2, [r3]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x22]
	b	.L418
.L432:
	.align	2, 0
.L431:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gMonFrontPicTable
	.word	gMonSpritesGfxPtr
	.word	gTransformedPersonalities
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleSpritesDataPtr
	.word	gBattleStruct
	.word	gBattleMonForms
	.word	0x7fff
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	0x4000008
.L416:
	ldr	r0, .L433
	ldr	r0, [r0]
	mov	r2, sl
	lsl	r1, r2, #0x2
	add	r0, r0, #0x4
	add	r0, r0, r1
	ldr	r2, [r0]
	ldr	r0, .L433+0x4
	add	r0, r0, r7
	mov	sl, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r3, .L433+0x8
	add	r0, r0, r3
	ldrh	r0, [r0, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x11
	ldr	r1, .L433+0xc
	add	r0, r0, r1
	ldr	r1, .L433+0x10
	str	r2, [r1]
	str	r0, [r1, #0x4]
	ldr	r0, .L433+0x14
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	lsl	r0, r7, #0x4
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r6, r0, r1
	mov	r0, r8
	add	r1, r4, #0
	mov	r2, r9
	bl	GetMonSpritePalFromSpeciesAndPersonality
	add	r5, r0, #0
	ldr	r4, .L433+0x18
	add	r1, r4, #0
	bl	LZDecompressWram
	mov	r9, r6
	add	r0, r4, #0
	mov	r1, r9
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L433+0x1c
	cmp	r8, r0
	beq	.L420	@cond_branch
	add	r0, r0, #0x46
	cmp	r8, r0
	bne	.L419	@cond_branch
.L420:
	mov	r2, sl
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L433+0x8
	add	r0, r0, #0x8
	add	r1, r1, r0
	ldr	r2, .L433+0x20
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r4, .L433+0x24
	ldr	r1, [r4]
	add	r1, r1, #0xfa
	add	r0, r5, #0
	bl	LZDecompressWram
	ldr	r0, .L433+0x28
	ldr	r1, [sp]
	add	r0, r1, r0
	ldrb	r1, [r0]
	lsl	r1, r1, #0x5
	add	r1, r1, #0xfa
	ldr	r0, [r4]
	add	r0, r0, r1
	mov	r1, r9
	mov	r2, #0x20
	bl	LoadPalette
.L419:
	ldr	r2, [sp, #0x8]
	cmp	r2, #0
	bne	.L421	@cond_branch
	add	r4, r6, #0
	ldr	r3, .L433+0x2c
	add	r0, r4, #0
	mov	r1, #0x10
	mov	r2, #0x6
	bl	BlendPalette
	lsl	r4, r4, #0x1
	ldr	r0, .L433+0x30
	add	r0, r4, r0
	ldr	r1, .L433+0x34
	add	r4, r4, r1
	ldr	r2, .L433+0x38
	add	r1, r4, #0
	bl	CpuSet
.L421:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L422	@cond_branch
	ldr	r3, [sp, #0x8]
	cmp	r3, #0
	bne	.L422	@cond_branch
	ldr	r0, .L433+0x3c
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	mov	r1, r8
	strh	r1, [r0, #0x2]
	ldr	r0, .L433+0x28
	add	r1, r7, r0
	ldr	r2, [sp]
	add	r0, r2, r0
	ldrb	r0, [r0]
	strb	r0, [r1]
.L422:
	add	r0, r7, #0
	bl	GetBattlerSpriteDefault_Y
	ldr	r4, .L433+0x8
	ldr	r3, .L433+0x4
	add	r3, r7, r3
	ldrb	r2, [r3]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x22]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L433+0x28
	add	r1, r7, r1
	ldrb	r1, [r1]
	bl	StartSpriteAnim
.L418:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L434:
	.align	2, 0
.L433:
	.word	gMonSpritesGfxPtr
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0x6010000
	.word	0x40000d4
	.word	-0x7bfffe00
	.word	gDecompressionBuffer
	.word	0x15f
	.word	gMonFrontAnimsPtrTable
	.word	gBattleStruct
	.word	gBattleMonForms
	.word	0x7fff
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	0x4000008
	.word	gBattleSpritesDataPtr
.Lfe34:
	.size	 HandleSpeciesGfxDataChange,.Lfe34-HandleSpeciesGfxDataChange
	.align	2, 0
	.globl	BattleLoadSubstituteOrMonSpriteGfx
	.type	 BattleLoadSubstituteOrMonSpriteGfx,function
	.thumb_func
BattleLoadSubstituteOrMonSpriteGfx:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L436	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L437	@cond_branch
	mov	r4, #0x0
	b	.L438
.L437:
	add	r0, r4, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L438:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L439	@cond_branch
	ldr	r0, .L453
	b	.L452
.L454:
	.align	2, 0
.L453:
	.word	gSubstituteDollTilemap
.L439:
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L441	@cond_branch
	ldr	r0, .L455
.L452:
	ldr	r1, .L455+0x4
	ldr	r1, [r1]
	lsl	r4, r4, #0x2
	add	r1, r1, #0x4
	add	r1, r1, r4
	ldr	r1, [r1]
	bl	LZDecompressVram
	b	.L440
.L456:
	.align	2, 0
.L455:
	.word	gSubstituteDollGfx
	.word	gMonSpritesGfxPtr
.L441:
	ldr	r0, .L457
	ldr	r1, .L457+0x4
	ldr	r1, [r1]
	lsl	r4, r4, #0x2
	add	r1, r1, #0x4
	add	r1, r1, r4
	ldr	r1, [r1]
	bl	LZDecompressVram
.L440:
	mov	r3, #0x1
	lsl	r6, r5, #0x4
	ldr	r7, .L457+0x8
	ldr	r0, .L457+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x4
	add	r4, r0, r4
	ldr	r2, .L457+0xc
	ldr	r5, .L457+0x10
.L446:
	ldr	r0, [r4]
	lsl	r1, r3, #0xb
	add	r1, r0, r1
	str	r0, [r2]
	str	r1, [r2, #0x4]
	str	r5, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L446	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r1, r6, r0
	add	r0, r7, #0
	mov	r2, #0x20
	bl	LoadCompressedPalette
	b	.L448
.L458:
	.align	2, 0
.L457:
	.word	gSubstituteDollTilemap
	.word	gMonSpritesGfxPtr
	.word	gSubstituteDollPal
	.word	0x40000d4
	.word	-0x7bfffe00
.L436:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L448	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L450	@cond_branch
	ldr	r1, .L459
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L459+0x4
	add	r0, r0, r1
	add	r1, r4, #0
	bl	BattleLoadOpponentMonSpriteGfx
	b	.L448
.L460:
	.align	2, 0
.L459:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L450:
	ldr	r1, .L461
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L461+0x4
	add	r0, r0, r1
	add	r1, r5, #0
	bl	BattleLoadPlayerMonSpriteGfx
.L448:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L462:
	.align	2, 0
.L461:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe35:
	.size	 BattleLoadSubstituteOrMonSpriteGfx,.Lfe35-BattleLoadSubstituteOrMonSpriteGfx
	.align	2, 0
	.globl	LoadBattleMonGfxAndAnimate
	.type	 LoadBattleMonGfxAndAnimate,function
	.thumb_func
LoadBattleMonGfxAndAnimate:
	push	{r4, r5, r6, lr}
	add	r5, r1, #0
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	bl	BattleLoadSubstituteOrMonSpriteGfx
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L467
	add	r4, r0, r1
	ldr	r0, .L467+0x4
	add	r0, r6, r0
	ldrb	r1, [r0]
	add	r0, r4, #0
	bl	StartSpriteAnim
	cmp	r5, #0
	bne	.L464	@cond_branch
	add	r0, r6, #0
	bl	GetSubstituteSpriteDefault_Y
	b	.L466
.L468:
	.align	2, 0
.L467:
	.word	gSprites
	.word	gBattleMonForms
.L464:
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
.L466:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 LoadBattleMonGfxAndAnimate,.Lfe36-LoadBattleMonGfxAndAnimate
	.align	2, 0
	.globl	TrySetBehindSubstituteSpriteBit
	.type	 TrySetBehindSubstituteSpriteBit,function
	.thumb_func
TrySetBehindSubstituteSpriteBit:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0xa4
	bne	.L470	@cond_branch
	ldr	r0, .L471
	ldr	r0, [r0]
	ldr	r0, [r0]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
.L470:
	pop	{r0}
	bx	r0
.L472:
	.align	2, 0
.L471:
	.word	gBattleSpritesDataPtr
.Lfe37:
	.size	 TrySetBehindSubstituteSpriteBit,.Lfe37-TrySetBehindSubstituteSpriteBit
	.align	2, 0
	.globl	ClearBehindSubstituteBit
	.type	 ClearBehindSubstituteBit,function
	.thumb_func
ClearBehindSubstituteBit:
	lsl	r0, r0, #0x18
	ldr	r1, .L474
	ldr	r1, [r1]
	ldr	r1, [r1]
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.L475:
	.align	2, 0
.L474:
	.word	gBattleSpritesDataPtr
.Lfe38:
	.size	 ClearBehindSubstituteBit,.Lfe38-ClearBehindSubstituteBit
	.align	2, 0
	.globl	HandleLowHpMusicChange
	.type	 HandleLowHpMusicChange,function
	.thumb_func
HandleLowHpMusicChange:
	bx	lr
.Lfe39:
	.size	 HandleLowHpMusicChange,.Lfe39-HandleLowHpMusicChange
	.align	2, 0
	.globl	BattleStopLowHpSound
	.type	 BattleStopLowHpSound,function
	.thumb_func
BattleStopLowHpSound:
	push	{r4, r5, r6, lr}
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L479
	ldr	r0, [r5]
	ldr	r0, [r0]
	lsl	r1, r4, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r6, #0x3
	neg	r6, r6
	add	r0, r6, #0
	and	r0, r0, r2
	strb	r0, [r1]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L478	@cond_branch
	ldr	r2, [r5]
	mov	r0, #0x2
	add	r1, r4, #0
	eor	r1, r1, r0
	ldr	r0, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	add	r0, r6, #0
	and	r0, r0, r2
	strb	r0, [r1]
.L478:
	mov	r0, #0x5a
	bl	m4aSongNumStop
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L480:
	.align	2, 0
.L479:
	.word	gBattleSpritesDataPtr
.Lfe40:
	.size	 BattleStopLowHpSound,.Lfe40-BattleStopLowHpSound
	.align	2, 0
	.globl	GetMonHPBarLevel
	.type	 GetMonHPBarLevel,function
	.thumb_func
GetMonHPBarLevel:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	GetHPBarLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 GetMonHPBarLevel,.Lfe41-GetMonHPBarLevel
	.align	2, 0
	.globl	HandleBattleLowHpMusicChange
	.type	 HandleBattleLowHpMusicChange,function
	.thumb_func
HandleBattleLowHpMusicChange:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L486
	ldr	r1, .L486+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L483	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r5, .L486+0x8
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	GetPartyIdFromBattlePartyId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, r9
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	GetPartyIdFromBattlePartyId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r7, #0x64
	mov	r0, r4
	mul	r0, r0, r7
	ldr	r6, .L486+0xc
	add	r4, r0, r6
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L484	@cond_branch
	add	r0, r4, #0
	mov	r1, r8
	bl	HandleLowHpMusicChange
.L484:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L483	@cond_branch
	mov	r0, r5
	mul	r0, r0, r7
	add	r4, r0, r6
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L483	@cond_branch
	add	r0, r4, #0
	mov	r1, r9
	bl	HandleLowHpMusicChange
.L483:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L487:
	.align	2, 0
.L486:
	.word	gMain
	.word	0x439
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe42:
	.size	 HandleBattleLowHpMusicChange,.Lfe42-HandleBattleLowHpMusicChange
	.align	2, 0
	.globl	sub_805EB9C
	.type	 sub_805EB9C,function
	.thumb_func
sub_805EB9C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r0, .L497
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L490	@cond_branch
	mov	r0, #0x3
	mov	sl, r8
	mov	r1, sl
	and	r1, r1, r0
	mov	sl, r1
	mov	r6, #0x0
	mov	r2, #0x3f
	neg	r2, r2
	mov	r9, r2
.L492:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L491	@cond_branch
	ldr	r4, .L497+0x4
	ldr	r0, .L497+0x8
	add	r3, r5, r0
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	mov	r7, #0x4
	neg	r7, r7
	add	r2, r7, #0
	and	r1, r1, r2
	mov	r2, sl
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r7, r8
	cmp	r7, #0
	bne	.L494	@cond_branch
	ldr	r0, .L497+0xc
	ldr	r0, [r0]
	ldr	r2, [r0, #0x4]
	add	r2, r6, r2
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	strb	r0, [r2, #0x6]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x3]
	mov	r2, r9
	and	r1, r1, r2
	strb	r1, [r0, #0x3]
	b	.L491
.L498:
	.align	2, 0
.L497:
	.word	gBattlersCount
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleSpritesDataPtr
.L494:
	ldrb	r0, [r3]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldr	r0, .L499
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	add	r0, r6, r0
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r0, [r2, #0x3]
	mov	r3, r9
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x3]
.L491:
	add	r6, r6, #0xc
	add	r5, r5, #0x1
	ldr	r0, .L499+0x4
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L492	@cond_branch
.L490:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L500:
	.align	2, 0
.L499:
	.word	gBattleSpritesDataPtr
	.word	gBattlersCount
.Lfe43:
	.size	 sub_805EB9C,.Lfe43-sub_805EB9C
	.align	2, 0
	.globl	LoadAndCreateEnemyShadowSprites
	.type	 LoadAndCreateEnemyShadowSprites,function
	.thumb_func
LoadAndCreateEnemyShadowSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L503
	bl	LoadCompressedSpriteSheet
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L503+0x4
	mov	r8, r0
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x8
	mov	r0, #0xe8
	lsl	r0, r0, #0xd
	add	r2, r2, r0
	asr	r2, r2, #0x10
	mov	r0, r8
	add	r1, r4, #0
	mov	r3, #0xc8
	bl	CreateSprite
	ldr	r6, .L503+0x8
	ldr	r1, [r6]
	ldr	r2, [r1, #0x4]
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	strb	r0, [r2, #0x7]
	ldr	r7, .L503+0xc
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r1, r1, r0
	ldrb	r1, [r1, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r5, [r0, #0x2e]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L502	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x8
	mov	r0, #0xe8
	lsl	r0, r0, #0xd
	add	r2, r2, r0
	asr	r2, r2, #0x10
	mov	r0, r8
	add	r1, r4, #0
	mov	r3, #0xc8
	bl	CreateSprite
	ldr	r1, [r6]
	ldr	r2, [r1, #0x4]
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	strb	r0, [r2, #0x7]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r1, r1, r0
	ldrb	r1, [r1, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r5, [r0, #0x2e]
.L502:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L504:
	.align	2, 0
.L503:
	.word	gSpriteSheet_EnemyShadow
	.word	gSpriteTemplate_EnemyShadow
	.word	gBattleSpritesDataPtr
	.word	gSprites
.Lfe44:
	.size	 LoadAndCreateEnemyShadowSprites,.Lfe44-LoadAndCreateEnemyShadowSprites
	.align	2, 0
	.globl	SpriteCB_EnemyShadow
	.type	 SpriteCB_EnemyShadow,function
	.thumb_func
SpriteCB_EnemyShadow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	mov	r0, #0x0
	mov	r8, r0
	ldrh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L513
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L513+0x4
	add	r7, r0, r1
	add	r6, r7, #0
	add	r6, r6, #0x3e
	ldrb	r1, [r6]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L507	@cond_branch
	add	r0, r4, #0
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L506	@cond_branch
.L507:
	ldr	r0, .L513+0x8
	str	r0, [r5, #0x1c]
	b	.L505
.L514:
	.align	2, 0
.L513:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	SpriteCB_SetInvisible
.L506:
	ldr	r0, .L515
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L509	@cond_branch
	ldrb	r1, [r6]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L508	@cond_branch
.L509:
	mov	r0, #0x1
	mov	r8, r0
	ldr	r2, .L515+0x4
	lsl	r4, r4, #0x2
	b	.L510
.L516:
	.align	2, 0
.L515:
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
.L508:
	ldr	r2, .L517
	ldr	r0, [r2]
	ldr	r0, [r0]
	lsl	r1, r4, #0x2
	add	r3, r1, r0
	ldrh	r0, [r3, #0x2]
	add	r4, r1, #0
	cmp	r0, #0
	beq	.L510	@cond_branch
	ldr	r0, .L517+0x4
	ldrh	r1, [r3, #0x2]
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L510	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
.L510:
	ldr	r0, [r2]
	ldr	r0, [r0]
	add	r0, r4, r0
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L512	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
.L512:
	ldrh	r0, [r7, #0x20]
	strh	r0, [r5, #0x20]
	ldrh	r0, [r7, #0x24]
	strh	r0, [r5, #0x24]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	mov	r0, r8
	lsl	r3, r0, #0x2
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
.L505:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L518:
	.align	2, 0
.L517:
	.word	gBattleSpritesDataPtr
	.word	gEnemyMonElevation
.Lfe45:
	.size	 SpriteCB_EnemyShadow,.Lfe45-SpriteCB_EnemyShadow
	.align	2, 0
	.globl	SpriteCB_SetInvisible
	.type	 SpriteCB_SetInvisible,function
	.thumb_func
SpriteCB_SetInvisible:
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.Lfe46:
	.size	 SpriteCB_SetInvisible,.Lfe46-SpriteCB_SetInvisible
	.align	2, 0
	.globl	SetBattlerShadowSpriteCallback
	.type	 SetBattlerShadowSpriteCallback,function
	.thumb_func
SetBattlerShadowSpriteCallback:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L520	@cond_branch
	ldr	r0, .L526
	ldr	r3, [r0]
	ldr	r1, [r3]
	lsl	r0, r4, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L522	@cond_branch
	add	r5, r0, #0
.L522:
	ldr	r0, .L526+0x4
	add	r0, r5, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L523	@cond_branch
	ldr	r2, .L526+0x8
	ldr	r1, [r3, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L526+0xc
	b	.L525
.L527:
	.align	2, 0
.L526:
	.word	gBattleSpritesDataPtr
	.word	gEnemyMonElevation
	.word	gSprites
	.word	SpriteCB_EnemyShadow
.L523:
	ldr	r2, .L528
	ldr	r1, [r3, #0x4]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L528+0x4
.L525:
	str	r1, [r0]
.L520:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L529:
	.align	2, 0
.L528:
	.word	gSprites
	.word	SpriteCB_SetInvisible
.Lfe47:
	.size	 SetBattlerShadowSpriteCallback,.Lfe47-SetBattlerShadowSpriteCallback
	.align	2, 0
	.globl	HideBattlerShadowSprite
	.type	 HideBattlerShadowSprite,function
	.thumb_func
HideBattlerShadowSprite:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L531
	ldr	r1, .L531+0x4
	ldr	r1, [r1]
	ldr	r3, [r1, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r1, [r1, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L531+0x8
	str	r1, [r0]
	bx	lr
.L532:
	.align	2, 0
.L531:
	.word	gSprites
	.word	gBattleSpritesDataPtr
	.word	SpriteCB_SetInvisible
.Lfe48:
	.size	 HideBattlerShadowSprite,.Lfe48-HideBattlerShadowSprite
	.align	2, 0
	.globl	sub_805EF14
	.type	 sub_805EF14,function
	.thumb_func
sub_805EF14:
	push	{r4, r5, r6, lr}
	ldr	r3, .L548
	mov	r0, #0x0
	mov	r6, #0xf0
	lsl	r6, r6, #0x8
.L537:
	add	r5, r0, #0x1
	mov	r4, #0xf
.L541:
	ldrh	r1, [r3]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L542	@cond_branch
	add	r0, r6, #0
	orr	r0, r0, r1
	strh	r0, [r3]
.L542:
	ldrh	r1, [r3]
	mov	r2, #0xf0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L543	@cond_branch
	add	r0, r2, #0
	orr	r0, r0, r1
	strh	r0, [r3]
.L543:
	ldrh	r1, [r3]
	mov	r2, #0xf0
	mov	r0, #0xf0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L544	@cond_branch
	add	r0, r1, #0
	orr	r0, r0, r2
	strh	r0, [r3]
.L544:
	ldrh	r1, [r3]
	mov	r2, #0xf
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L545	@cond_branch
	add	r0, r1, #0
	orr	r0, r0, r2
	strh	r0, [r3]
.L545:
	add	r3, r3, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L541	@cond_branch
	add	r0, r5, #0
	cmp	r0, #0x8
	ble	.L537	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L549:
	.align	2, 0
.L548:
	.word	0x6000240
.Lfe49:
	.size	 sub_805EF14,.Lfe49-sub_805EF14
	.align	2, 0
	.globl	ClearTemporarySpeciesSpriteData
	.type	 ClearTemporarySpeciesSpriteData,function
	.thumb_func
ClearTemporarySpeciesSpriteData:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	ldr	r0, .L552
	ldr	r0, [r0]
	ldr	r2, [r0]
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	mov	r3, #0x0
	mov	r2, #0x0
	strh	r2, [r0, #0x2]
	ldr	r0, .L552+0x4
	add	r0, r4, r0
	strb	r3, [r0]
	cmp	r1, #0
	bne	.L551	@cond_branch
	add	r0, r4, #0
	bl	ClearBehindSubstituteBit
.L551:
	pop	{r4}
	pop	{r0}
	bx	r0
.L553:
	.align	2, 0
.L552:
	.word	gBattleSpritesDataPtr
	.word	gBattleMonForms
.Lfe50:
	.size	 ClearTemporarySpeciesSpriteData,.Lfe50-ClearTemporarySpeciesSpriteData
	.align	2, 0
	.globl	AllocateMonSpritesGfx
	.type	 AllocateMonSpritesGfx,function
	.thumb_func
AllocateMonSpritesGfx:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	ldr	r4, .L565
	str	r6, [r4]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	bl	AllocZeroed
	str	r0, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1]
.L558:
	ldr	r0, .L565
	ldr	r1, [r0]
	lsl	r4, r6, #0x2
	add	r2, r1, #0x4
	add	r2, r2, r4
	lsl	r3, r6, #0xd
	ldr	r0, [r1]
	add	r0, r0, r3
	str	r0, [r2]
	lsl	r3, r6, #0x1
	add	r0, r3, r6
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldr	r2, .L565+0x4
	add	r1, r1, #0x14
	add	r0, r0, r2
	ldmia	r0!, {r2, r5, r7}
	stmia	r1!, {r2, r5, r7}
	ldmia	r0!, {r2, r5, r7}
	stmia	r1!, {r2, r5, r7}
	mov	r5, #0x0
	mov	r9, r3
	lsl	r0, r6, #0x5
	mov	r8, r0
	add	r1, r6, #0x1
	mov	sl, r1
	mov	ip, r8
	add	r7, r4, #0
.L562:
	ldr	r2, .L565
	ldr	r1, [r2]
	lsl	r4, r5, #0x3
	add	r4, r4, ip
	add	r3, r1, #0
	add	r3, r3, #0x74
	add	r3, r3, r4
	add	r0, r1, #0x4
	add	r0, r0, r7
	lsl	r2, r5, #0xb
	ldr	r0, [r0]
	add	r0, r0, r2
	str	r0, [r3]
	add	r1, r1, r4
	add	r1, r1, #0x78
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	strh	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L562	@cond_branch
	ldr	r1, .L565
	ldr	r2, [r1]
	mov	r5, r9
	add	r0, r5, r6
	lsl	r0, r0, #0x3
	add	r1, r2, #0
	add	r1, r1, #0x20
	add	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x74
	add	r2, r2, r0
	str	r2, [r1]
	mov	r7, sl
	lsl	r0, r7, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L558	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	AllocZeroed
	ldr	r1, .L565
	ldr	r1, [r1]
	mov	r2, #0xba
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	str	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L566:
	.align	2, 0
.L565:
	.word	gMonSpritesGfxPtr
	.word	gUnknown_08329D98
.Lfe51:
	.size	 AllocateMonSpritesGfx,.Lfe51-AllocateMonSpritesGfx
	.align	2, 0
	.globl	FreeMonSpritesGfx
	.type	 FreeMonSpritesGfx,function
	.thumb_func
FreeMonSpritesGfx:
	push	{r4, r5, r6, lr}
	ldr	r6, .L571
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L567	@cond_branch
	mov	r1, #0xbe
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L569	@cond_branch
	bl	Free
	ldr	r0, [r6]
	mov	r1, #0xbe
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0]
.L569:
	ldr	r0, [r6]
	mov	r1, #0xbc
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L570	@cond_branch
	bl	Free
	ldr	r0, [r6]
	mov	r1, #0xbc
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0]
.L570:
	ldr	r0, [r6]
	mov	r5, #0xba
	lsl	r5, r5, #0x1
	add	r0, r0, r5
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r6]
	add	r5, r0, r5
	mov	r4, #0x0
	str	r4, [r5]
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r6]
	str	r4, [r0]
	str	r4, [r0, #0x4]
	str	r4, [r0, #0x8]
	str	r4, [r0, #0xc]
	str	r4, [r0, #0x10]
	bl	Free
	str	r4, [r6]
.L567:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L572:
	.align	2, 0
.L571:
	.word	gMonSpritesGfxPtr
.Lfe52:
	.size	 FreeMonSpritesGfx,.Lfe52-FreeMonSpritesGfx
	.align	2, 0
	.globl	ShouldPlayNormalMonCry
	.type	 ShouldPlayNormalMonCry,function
	.thumb_func
ShouldPlayNormalMonCry:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x37
	bl	GetMonData
	ldr	r1, .L577
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L575	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	GetHPBarLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	ble	.L575	@cond_branch
	mov	r0, #0x1
	b	.L576
.L578:
	.align	2, 0
.L577:
	.word	0xfff
.L575:
	mov	r0, #0x0
.L576:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 ShouldPlayNormalMonCry,.Lfe53-ShouldPlayNormalMonCry
.text
	.align	2, 0

