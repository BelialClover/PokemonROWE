@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gLinkTestDebugValuesEnabled
	.section ewram_data,"aw"
	.type	 gLinkTestDebugValuesEnabled,object
	.size	 gLinkTestDebugValuesEnabled,1
gLinkTestDebugValuesEnabled:
	.byte	0x0
	.globl	gUnknown_020223BD
	.type	 gUnknown_020223BD,object
	.size	 gUnknown_020223BD,1
gUnknown_020223BD:
	.byte	0x0
	.globl	gBerryBlenderKeySendAttempts
	.align	2, 0
	.type	 gBerryBlenderKeySendAttempts,object
	.size	 gBerryBlenderKeySendAttempts,4
gBerryBlenderKeySendAttempts:
	.word	0x0
	.globl	gBlockRecvBuffer
	.align	1, 0
	.type	 gBlockRecvBuffer,object
	.size	 gBlockRecvBuffer,1280
gBlockRecvBuffer:
	.space	1280
	.globl	gBlockSendBuffer
	.type	 gBlockSendBuffer,object
	.size	 gBlockSendBuffer,256
gBlockSendBuffer:
	.space	256
	.globl	gLinkOpen
	.type	 gLinkOpen,object
	.size	 gLinkOpen,1
gLinkOpen:
	.byte	0x0
	.globl	gLinkType
	.align	1, 0
	.type	 gLinkType,object
	.size	 gLinkType,2
gLinkType:
	.short	0x0
	.globl	gLinkTimeOutCounter
	.align	1, 0
	.type	 gLinkTimeOutCounter,object
	.size	 gLinkTimeOutCounter,2
gLinkTimeOutCounter:
	.short	0x0
	.globl	gLocalLinkPlayer
	.align	2, 0
	.type	 gLocalLinkPlayer,object
	.size	 gLocalLinkPlayer,28
gLocalLinkPlayer:
	.space	28
	.globl	gLinkPlayers
	.align	2, 0
	.type	 gLinkPlayers,object
	.size	 gLinkPlayers,140
gLinkPlayers:
	.space	140
	.globl	gSavedLinkPlayers
	.align	2, 0
	.type	 gSavedLinkPlayers,object
	.size	 gSavedLinkPlayers,140
gSavedLinkPlayers:
	.space	140
	.globl	sLinkErrorBuffer
	.align	2, 0
	.type	 sLinkErrorBuffer,object
	.size	 sLinkErrorBuffer,8
sLinkErrorBuffer:
	.space	8
	.align	1, 0
	.type	 sReadyCloseLinkAttempts,object
	.size	 sReadyCloseLinkAttempts,2
sReadyCloseLinkAttempts:
	.short	0x0
	.align	2, 0
	.type	 sLinkErrorBgTilemapBuffer,object
	.size	 sLinkErrorBgTilemapBuffer,4
sLinkErrorBgTilemapBuffer:
	.word	0x0
	.section .rodata
	.align	1, 0
	.type	 sWirelessLinkDisplayPal,object
sWirelessLinkDisplayPal:
	.short	0x0
	.short	0x7fff
	.short	0x17f
	.short	0x263e
	.short	0x533f
	.short	0x7bdd
	.short	0x7f76
	.short	0x3d67
	.short	0x7eee
	.short	0x7b7b
	.short	0x5bd0
	.short	0x41cd
	.short	0x6b17
	.short	0x5a93
	.short	0x2d29
	.short	0x0
	.size	 sWirelessLinkDisplayPal,32
	.align	2, 0
	.type	 sWirelessLinkDisplayGfx,object
sWirelessLinkDisplayGfx:
	.word	0xe0010
	.word	-0xfffffd0
	.word	0x11019001
	.word	-0x76aeeeef
	.word	-0x5555fc30
	.word	0x5a07401a
	.word	0x133055
	.word	0x1111eeee
	.word	0x1111bbde
	.word	0x11dc9e04
	.word	0x3009b11
	.word	0x1100c9ee
	.word	0x55c9ede1
	.word	-0x7f61331b
	.word	-0x1111e0f0
	.word	-0x44441112
	.word	-0x2244eb45
	.word	-0x23fe8f23
	.word	-0x3333fd00
	.word	0x20bccc21
	.word	0x51111e1f
	.word	0x420300bb
	.word	0x1b0310bd
	.word	0xeb5111
	.word	-0x12fc14f9
	.word	-0x1331aeef
	.word	-0x3fa0bfab
	.word	-0x555eecfd
	.word	0x550710aa
	.word	-0xff8cf5b
	.word	0x750809f
	.word	0x68885555
	.word	-0x5697aeef
	.word	0x180b00
	.word	0x27c01603
	.word	0x5ff05555
	.word	-0xfe00f01
	.word	-0xfe00fe9
	.word	-0x6fe02ffd
	.word	-0xffe6f05
	.word	0x3ff0f937
	.word	0x1ff003f0
	.word	0x1f5003f0
	.word	0xb008886
	.word	0x3008657
	.word	0x61030081
	.word	0xb101ff0
	.word	-0xf01b8ef
	.word	0x215e0103
	.word	-0xf10eea1
	.word	0x31003
	.word	0x11d4e11f
	.word	0x217be0fb
	.word	0x10310300
	.word	0x299995f
	.word	-0x11121667
	.word	0x17105dee
	.word	0x31130031
	.word	0x22222153
	.word	0x23001352
	.word	0x11423132
	.word	0x1a222411
	.word	0x222222
	.word	0x12b7e03d
	.word	-0x1ecfd00
	.word	-0x10ee6070
	.word	0x7e1003f0
	.word	0x3f09f40
	.word	0x79aa0330
	.word	-0xf640fa6
	.word	0x3003f0ff
	.word	-0x5fa111fd
	.word	0x415b1f
	.word	0x6004403
	.word	0x20440300
	.word	0x453e0007
	.word	0x51140044
	.word	0x3001444
	.word	0x57031044
	.word	0x44030014
	.word	0x540310
	.word	-0xefedffd
	.word	0x17085f1
	.word	0x3dddddd3
	.word	0x60545300
	.word	0x417d53
	.word	0x330003
	.word	0x50016006
	.word	0x6710147f
	.word	0x106b90f7
	.word	-0x3f400ff9
	.word	-0x640e1a21
	.word	0x4311ffd0
	.word	0x104f23db
	.word	0x4f11a103
	.word	0x50a10310
	.word	-0x12bceee1
	.word	-0x10befd00
	.word	0x1a5301
	.word	0x1a1b0003
	.word	0x212b3f61
	.word	0x32030053
	.word	0x41222f00
	.word	0x105fa0f7
	.word	0x222231
	.word	0x4351111f
	.word	0x34113c11
	.word	-0xbfe10ef
	.word	0x1f80fa01
	.word	0x513f1112
	.word	0x30023
	.word	-0x2f08dec4
	.word	-0xf19eec1
	.word	-0x5ccf0f5d
	.word	-0x640f60c0
	.word	-0x111e2070
	.word	-0x1effee15
	.word	-0x1eee1663
	.word	0x14119ccb
	.word	0xcddbe1
	.word	0x350dd03
	.word	-0x24ea1aab
	.word	0x6b04cddd
	.word	-0x16fcff32
	.word	-0x63fffd00
	.word	-0x33deeee2
	.word	0x83111d9
	.word	0x5231e9cd
	.word	-0x32cdfd00
	.word	0x105550e9
	.word	-0x26ffbe2d
	.word	0x12231151
	.word	0x31135108
	.word	0x23a70022
	.word	0x13002454
	.word	0x12215224
	.word	-0x3daaddf
	.word	-0x58aeff00
	.word	-0x44ee4cef
	.word	0x1f82c321
	.word	-0x22fe22cd
	.word	0x3dd33333
	.word	0x1f03333
	.word	-0x7efedf02
	.word	0x423312ea
	.word	0x11df7143
	.word	0x515a01f7
	.word	0x51620180
	.word	0x31132211
	.word	0x11023241
	.word	0x31422122
	.word	0x117f5042
	.word	0x5e11124
	.word	0xece16f
	.word	0x129e03
	.word	0x13c9e111
	.word	0x21cc9d11
	.word	-0x2361ecf8
	.word	0x22030023
	.word	-0x23ff61ab
	.word	0x511eeebe
	.word	0x1ed99e
	.word	0x1ebcc951
	.word	0x1ebddc51
	.word	-0x5f22aed1
	.word	0x3f925e03
	.word	0x5f41f311
	.word	0x11ff6f31
	.word	0x111b105c
	.word	0x2157114f
	.word	0x2357235f
	.word	-0x3ea00c05
	.word	0x3701fb73
	.word	0x55553221
	.word	-0x404dedb
	.word	-0x4eefcb0
	.word	0xb120312
	.word	0x42350f10
	.word	-0x30042ce5
	.word	0x13120b12
	.word	-0x209dadcb
	.word	0x13129be0
	.word	-0xf0760ac
	.word	0x1a360a3
	.word	0x40ef71ff
	.word	-0x1eee42fd
	.word	0x1302bb48
	.word	0x1f12ebee
	.word	0x4511e9cd
	.word	-0x2614dede
	.word	0x7f065231
	.word	0x7f7b0631
	.word	0x120f1221
	.word	0x11ff1317
	.word	0x11031067
	.word	-0x904ee0d
	.word	0xb120312
	.word	0x3e001312
	.word	-0xcec5bbb
	.word	-0xe02bb41
	.word	0x120140f1
	.word	-0x5ce4fded
	.word	0x443ff4d3
	.word	0x11fa7f50
	.word	0x12fb11f3
	.word	0x20b2203
	.word	-0x7fffabed
	.word	0x7307c122
	.word	0x1321eb11
	.word	0x13dc9d
	.word	0x302acdc
	.word	-0x23f0bd42
	.word	-0x104e00ed
	.word	-0x24b0aee2
	.word	-0x4441fd00
	.word	0x17020300
	.word	-0x40aa09d
	.word	0x430320fd
	.word	-0xafeffa1
	.word	-0x7afcef05
	.word	-0x42ccec1
	.word	-0x1a80dc71
	.word	-0x10ee1112
	.word	-0xcea14eb
	.word	0x16fffb15
	.word	0x161b1003
	.word	0x101b1613
	.word	-0x2c14eaf5
	.word	-0xc8c705
	.word	-0x40a80d0
	.word	-0x609b60be
	.word	0x310fbf5
	.word	0x5ff4dff5
	.word	-0x1fe80f01
	.word	0x30f3a51f
	.word	0x200b260f
	.word	0x73bff31f
	.word	0x457ebf
	.word	-0xa1ceae1
	.word	-0xbfe8f07
	.word	0x543fa43f
	.word	0x46f3e5ff
	.word	-0xf400ff5
	.word	-0xfe00ffd
	.word	0x58eb311f
	.word	0x1ff0f703
	.word	0x730eb79
	.word	0x9e13fe0
	.word	0x29eb09e3
	.word	-0x4d60c0d
	.word	0xb1a031a
	.word	0x5555bd11
	.word	-0x14e61ce7
	.word	0x1a0190f3
	.word	0x10131a0b
	.word	0x39ecce1f
	.word	-0xce615
	.word	0x31afb19
	.word	0x131a0b1a
	.word	-0x14b6a0e0
	.word	-0x601ff8a0
	.word	-0xf0c4604
	.word	0x1a13b0df
	.word	0x1a0b1a03
	.word	-0x9777ed
	.word	0x3ff01ff0
	.word	0x1ff017f0
	.word	0x1f5003f0
	.word	-0x8860e0f
	.word	-0xfc00f01
	.word	-0xfe80fc1
	.word	-0xffc0fe1
	.word	0x1a03801f
	.word	0xb1a8203
	.word	-0x79aaaa7a
	.word	0x70e20b88
	.word	-0x7ffcff51
	.word	0x870300
	.word	-0x5ff0effd
	.word	-0x1cc004fd
	.word	0x31fc5fb0
	.word	-0x7778fec0
	.word	-0x1ffdff78
	.word	0x3f0ff4f
	.word	0x11001f0
	.word	0x1203a00
	.word	-0x200f4010
	.word	0x4cff03f0
	.word	-0xfe2fde1
	.word	-0xffe0fa7
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f40
	.word	0x1
	.size	 sWirelessLinkDisplayGfx,1192
	.align	2, 0
	.type	 sWirelessLinkDisplayTilemap,object
sWirelessLinkDisplayTilemap:
	.word	0x80010
	.word	-0xfffffc1
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f10
	.word	-0xffe0fff
	.word	0x62000001
	.word	-0x5f9bb200
	.word	-0xffb9dff
	.word	0x7019d019
	.word	0x6001
	.word	0x660061
	.word	0x20001
	.word	0x4000300
	.word	0x6000500
	.word	0x4610008
	.word	0x60272060
	.word	0x700
	.word	0x90008
	.word	0xb000a
	.word	0xd000c00
	.word	0xf000e00
	.word	0x19300060
	.word	0x630190
	.word	0x100065
	.word	0x12001100
	.word	0x14001300
	.word	0x15000a
	.word	0x630f0016
	.word	0x632520
	.word	0x18001700
	.word	0x1a001900
	.word	0x1b0000
	.word	0x1d001c
	.word	0x1f00301e
	.word	0x3fd01940
	.word	0x210020
	.word	0x23002200
	.word	0x25002400
	.word	-0x7fd9c000
	.word	0x2800273f
	.word	0x2900
	.word	0x2b002a
	.word	0x2d002c
	.word	0x2f002e18
	.word	0x3f203ff0
	.word	0x310030
	.word	0x33003200
	.word	0x35003400
	.word	-0x7fc9ffe0
	.word	0x3800373f
	.word	0x3900
	.word	0x3b003a
	.word	0xc3d003c
	.word	0x3f003e00
	.word	0x3f203ff0
	.word	0x41000040
	.word	0x43004200
	.word	0x10004400
	.word	-0x7fb9ffbb
	.word	0x4800473f
	.word	0x490000
	.word	0x4b004a
	.word	0x4d04004c
	.word	0x4f004e00
	.word	0x60003ff0
	.word	0x8610800
	.word	0x510050
	.word	0x53000052
	.word	0x55005400
	.word	0x45600
	.word	0xc600c61
	.word	0x571930
	.word	0x59005800
	.word	0x5b005a00
	.word	0x5c0000
	.word	0x5e005d
	.word	0x30cb005f
	.word	0x8bfc119
	.word	0x6201a064
	.word	0x19f02360
	.word	-0xfc20f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f08
	.word	-0xffe0fff
	.word	0x11001
	.size	 sWirelessLinkDisplayTilemap,492
	.align	1, 0
	.type	 sLinkTestDigitsPal,object
sLinkTestDigitsPal:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x7fe0
	.size	 sLinkTestDigitsPal,32
	.align	1, 0
	.type	 sLinkTestDigitsGfx,object
sLinkTestDigitsGfx:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xe000
	.short	0x0
	.short	0xfe00
	.short	0xe
	.short	0xefe0
	.short	0xef
	.short	0xefe
	.short	0xefe
	.short	0xefe
	.short	0xefe
	.short	0xefe0
	.short	0xef
	.short	0xfe00
	.short	0xe
	.short	0xe000
	.short	0x0
	.short	0x0
	.short	0xe
	.short	0xe000
	.short	0xef
	.short	0xe000
	.short	0xef
	.short	0xe000
	.short	0xef
	.short	0xe000
	.short	0xef
	.short	0xe000
	.short	0xef
	.short	0xe000
	.short	0xef
	.short	0x0
	.short	0xe
	.short	0xeee0
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeee0
	.short	0xefe
	.short	0xe000
	.short	0xef
	.short	0xfe00
	.short	0xe
	.short	0xefe0
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeee0
	.short	0xee
	.short	0xeee0
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeee0
	.short	0xefe
	.short	0xfe00
	.short	0xeff
	.short	0xee00
	.short	0xefe
	.short	0xeee0
	.short	0xefe
	.short	0xfffe
	.short	0xeff
	.short	0xeee0
	.short	0xee
	.short	0xe0
	.short	0xe
	.short	0xeefe
	.short	0xef
	.short	0xeefe
	.short	0xef
	.short	0xeefe
	.short	0xef
	.short	0xfffe
	.short	0xeff
	.short	0xeee0
	.short	0xef
	.short	0xe000
	.short	0xef
	.short	0x0
	.short	0xe
	.short	0xeee0
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeee0
	.short	0xefe
	.short	0xeee0
	.short	0xefe
	.short	0xfffe
	.short	0xeff
	.short	0xeee0
	.short	0xee
	.short	0xe0
	.short	0x0
	.short	0xefe
	.short	0x0
	.short	0xeefe
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xefe
	.short	0xeefe
	.short	0xefe
	.short	0xfffe
	.short	0xeff
	.short	0xeee0
	.short	0xee
	.short	0xeee0
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xefe
	.short	0xefe
	.short	0xefe
	.short	0xe0
	.short	0xefe
	.short	0x0
	.short	0xefe
	.short	0x0
	.short	0xefe
	.short	0x0
	.short	0xe0
	.short	0xeee0
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xefe
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xefe
	.short	0xeefe
	.short	0xefe
	.short	0xfffe
	.short	0xeff
	.short	0xeee0
	.short	0xee
	.short	0xeee0
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xefe
	.short	0xeefe
	.short	0xefe
	.short	0xfffe
	.short	0xeff
	.short	0xeee0
	.short	0xefe
	.short	0x0
	.short	0xefe
	.short	0x0
	.short	0xee
	.short	0xeee0
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xefe
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xefe
	.short	0xefe
	.short	0xefe
	.short	0xefe
	.short	0xefe
	.short	0xee0
	.short	0xee
	.short	0xeee0
	.short	0x0
	.short	0xfffe
	.short	0xe
	.short	0xfefe
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xefe
	.short	0xeefe
	.short	0xefe
	.short	0xfffe
	.short	0xeff
	.short	0xeee0
	.short	0xee
	.short	0xeee0
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xee
	.short	0xefe
	.short	0x0
	.short	0xefe
	.short	0x0
	.short	0xeefe
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeee0
	.short	0xee
	.short	0xeee0
	.short	0x0
	.short	0xfffe
	.short	0xe
	.short	0xeefe
	.short	0xef
	.short	0xefe
	.short	0xefe
	.short	0xefe
	.short	0xefe
	.short	0xeefe
	.short	0xef
	.short	0xfffe
	.short	0xe
	.short	0xeee0
	.short	0x0
	.short	0xeee0
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xee
	.short	0xeefe
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeee0
	.short	0xee
	.short	0xeee0
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xee
	.short	0xfffe
	.short	0xeff
	.short	0xeefe
	.short	0xee
	.short	0xefe
	.short	0x0
	.short	0xefe
	.short	0x0
	.short	0xe0
	.short	0x0
	.size	 sLinkTestDigitsGfx,544
	.type	 sUnusedTransparentWhite,object
sUnusedTransparentWhite:
	.byte	0xfc
	.byte	0x2
	.byte	0x0
	.byte	0xfc
	.byte	0x1
	.byte	0x1
	.byte	0xff
	.size	 sUnusedTransparentWhite,7
	.align	1, 0
	.type	 s2BlankTilesGfx,object
s2BlankTilesGfx:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 s2BlankTilesGfx,64
	.align	2, 0
	.type	 sBlockRequests,object
sBlockRequests:
	.word	gBlockSendBuffer
	.word	0xc8
	.word	gBlockSendBuffer
	.word	0xc8
	.word	gBlockSendBuffer
	.word	0x64
	.word	gBlockSendBuffer
	.word	0xdc
	.word	gBlockSendBuffer
	.word	0x28
	.size	 sBlockRequests,40
	.type	 sBGControlRegs,object
sBGControlRegs:
	.byte	0x8
	.byte	0xa
	.byte	0xc
	.byte	0xe
	.size	 sBGControlRegs,4
	.align	2, 0
	.type	 sASCIIGameFreakInc,object
	.size	 sASCIIGameFreakInc,15
sASCIIGameFreakInc:
	.ascii	"GameFreak inc.\000"
	.align	2, 0
	.type	 sASCIITestPrint,object
	.size	 sASCIITestPrint,23
sASCIITestPrint:
	.ascii	"TEST PRINT\n"
	.ascii	"P0\n"
	.ascii	"P1\n"
	.ascii	"P2\n"
	.ascii	"P3\000"
	.align	2, 0
	.type	 sLinkErrorBgTemplates,object
	.size	 sLinkErrorBgTemplates,8
sLinkErrorBgTemplates:
	.byte	0xf8
	.byte	0x1
	.space	2
	.byte	0x81
	.byte	0x10
	.space	2
	.align	2, 0
	.type	 sLinkErrorWindowTemplates,object
sLinkErrorWindowTemplates:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1e
	.byte	0x5
	.byte	0xf
	.short	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x1e
	.byte	0x7
	.byte	0xf
	.short	0x98
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0x1e
	.byte	0x7
	.byte	0xf
	.short	0x16a
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sLinkErrorWindowTemplates,32
	.type	 sTextColors,object
sTextColors:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.size	 sTextColors,3
	.type	 sUnused_082ED224,object
sUnused_082ED224:
	.byte	0x0
	.byte	0xff
	.byte	0xfe
	.byte	0xff
	.byte	0x0
	.size	 sUnused_082ED224,5
.text
	.align	2, 0
	.globl	IsWirelessAdapterConnected
	.type	 IsWirelessAdapterConnected,function
	.thumb_func
IsWirelessAdapterConnected:
	push	{lr}
	bl	SetWirelessCommType1
	bl	InitRFUAPI
	bl	rfu_LMAN_REQBN_softReset_and_checkID
	ldr	r1, .L5
	cmp	r0, r1
	beq	.L3	@cond_branch
	bl	SetWirelessCommType0_Internal
	bl	CloseLink
	bl	RestoreSerialTimer3IntrHandlers
	mov	r0, #0x0
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	0x8001
.L3:
	bl	rfu_REQ_stopMode
	bl	rfu_waitREQComplete
	mov	r0, #0x1
.L4:
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 IsWirelessAdapterConnected,.Lfe1-IsWirelessAdapterConnected
	.align	2, 0
	.globl	Task_DestroySelf
	.type	 Task_DestroySelf,function
	.thumb_func
Task_DestroySelf:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 Task_DestroySelf,.Lfe2-Task_DestroySelf
	.align	2, 0
	.type	 InitLinkTestBG,function
	.thumb_func
InitLinkTestBG:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	ldr	r4, [sp, #0x18]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r0, .L16
	lsl	r1, r5, #0x4
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r3, .L16+0x4
	ldr	r0, .L16+0x8
	str	r0, [r3]
	lsl	r2, r7, #0xe
	lsl	r0, r4, #0x5
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	add	r2, r2, r0
	str	r2, [r3, #0x4]
	ldr	r0, .L16+0xc
	str	r0, [r3, #0x8]
	ldr	r0, [r3, #0x8]
	ldr	r0, .L16+0x10
	str	r6, [r0]
	str	r5, [r0, #0x4]
	str	r4, [r0, #0x8]
	mov	r0, r8
	cmp	r0, #0x2
	beq	.L11	@cond_branch
	cmp	r0, #0x2
	bgt	.L15	@cond_branch
	cmp	r0, #0x1
	beq	.L10	@cond_branch
	b	.L9
.L17:
	.align	2, 0
.L16:
	.word	sLinkTestDigitsPal
	.word	0x40000d4
	.word	sLinkTestDigitsGfx
	.word	-0x7ffffef0
	.word	gLinkTestBGInfo
.L15:
	mov	r0, r8
	cmp	r0, #0x3
	beq	.L12	@cond_branch
	b	.L9
.L10:
	lsl	r1, r6, #0x8
	mov	r0, #0x1
	orr	r1, r1, r0
	lsl	r0, r7, #0x2
	orr	r1, r1, r0
	mov	r0, #0xa
	bl	SetGpuReg
	b	.L9
.L11:
	lsl	r1, r6, #0x8
	mov	r0, #0x1
	orr	r1, r1, r0
	lsl	r0, r7, #0x2
	orr	r1, r1, r0
	mov	r0, #0xc
	bl	SetGpuReg
	b	.L9
.L12:
	lsl	r1, r6, #0x8
	mov	r0, #0x1
	orr	r1, r1, r0
	lsl	r0, r7, #0x2
	orr	r1, r1, r0
	mov	r0, #0xe
	bl	SetGpuReg
.L9:
	mov	r0, r8
	lsl	r4, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	SetGpuReg
	add	r4, r4, #0x12
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	bl	SetGpuReg
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 InitLinkTestBG,.Lfe3-InitLinkTestBG
	.align	2, 0
	.globl	sub_80094EC
	.type	 sub_80094EC,function
	.thumb_func
sub_80094EC:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	mov	r8, r0
	add	r6, r1, #0
	add	r4, r2, #0
	add	r5, r3, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L19
	mov	r2, r8
	lsl	r1, r2, #0x4
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r2, .L19+0x4
	ldr	r0, .L19+0x8
	str	r0, [r2]
	lsl	r0, r5, #0xe
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	str	r0, [r2, #0x4]
	ldr	r0, .L19+0xc
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	ldr	r0, .L19+0x10
	str	r4, [r0]
	mov	r1, r8
	str	r1, [r0, #0x4]
	mov	r1, #0x0
	str	r1, [r0, #0x8]
	ldr	r0, .L19+0x14
	add	r6, r6, r0
	ldrb	r0, [r6]
	lsl	r4, r4, #0x8
	lsl	r5, r5, #0x2
	orr	r4, r4, r5
	add	r1, r4, #0
	bl	SetGpuReg
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	sLinkTestDigitsPal
	.word	0x40000d4
	.word	sLinkTestDigitsGfx
	.word	-0x7ffffef0
	.word	gLinkTestBGInfo
	.word	sBGControlRegs
.Lfe4:
	.size	 sub_80094EC,.Lfe4-sub_80094EC
	.align	2, 0
	.globl	LinkTestScreen
	.type	 LinkTestScreen,function
	.thumb_func
LinkTestScreen:
	push	{r4, lr}
	add	sp, sp, #-0x4
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	ldr	r0, .L27
	bl	SetVBlankCallback
	bl	ResetBlockSend
	ldr	r1, .L27+0x4
	ldr	r2, .L27+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	bl	OpenLink
	ldr	r0, .L27+0xc
	ldrh	r0, [r0, #0x24]
	bl	SeedRng
	mov	r4, #0x0
.L25:
	bl	Random
	ldr	r1, .L27+0x10
	ldr	r1, [r1]
	add	r1, r1, #0xa
	add	r1, r1, r4
	strb	r0, [r1]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L25	@cond_branch
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x4
	mov	r3, #0x0
	bl	InitLinkTestBG
	mov	r1, #0xaa
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	ldr	r0, .L27+0x14
	mov	r1, #0x0
	bl	CreateTask
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	ldr	r0, .L27+0x18
	str	r4, [r0]
	bl	InitLocalLinkPlayer
	ldr	r0, .L27+0x1c
	mov	r1, #0x0
	bl	CreateTask
	ldr	r0, .L27+0x20
	bl	SetMainCallback2
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	VBlankCB_LinkError
	.word	gLinkType
	.word	0x1111
	.word	gMain
	.word	gSaveBlock2Ptr
	.word	Task_DestroySelf
	.word	sDummy3
	.word	Task_PrintTestData
	.word	CB2_LinkTest
.Lfe5:
	.size	 LinkTestScreen,.Lfe5-LinkTestScreen
	.align	2, 0
	.globl	SetLocalLinkPlayerId
	.type	 SetLocalLinkPlayerId,function
	.thumb_func
SetLocalLinkPlayerId:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L30
	strh	r0, [r1, #0x18]
	bx	lr
.L31:
	.align	2, 0
.L30:
	.word	gLocalLinkPlayer
.Lfe6:
	.size	 SetLocalLinkPlayerId,.Lfe6-SetLocalLinkPlayerId
	.align	2, 0
	.type	 InitLocalLinkPlayer,function
	.thumb_func
InitLocalLinkPlayer:
	push	{r4, r5, lr}
	ldr	r4, .L33
	ldr	r5, .L33+0x4
	ldr	r1, [r5]
	ldrb	r2, [r1, #0xa]
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r1, #0xd]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	str	r2, [r4, #0x4]
	add	r0, r4, #0
	add	r0, r0, #0x8
	bl	StringCopy
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x8]
	strb	r0, [r4, #0x13]
	ldr	r0, .L33+0x8
	ldrh	r0, [r0]
	str	r0, [r4, #0x14]
	ldr	r0, .L33+0xc
	ldrb	r0, [r0]
	strh	r0, [r4, #0x1a]
	ldr	r0, .L33+0x10
	ldrb	r0, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x7
	add	r1, r2, #0
	add	r0, r0, r1
	strh	r0, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	strh	r0, [r4, #0x2]
	bl	IsNationalPokedexEnabled
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r4, #0x10]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	gLocalLinkPlayer
	.word	gSaveBlock2Ptr
	.word	gLinkType
	.word	gGameLanguage
	.word	gGameVersion
.Lfe7:
	.size	 InitLocalLinkPlayer,.Lfe7-InitLocalLinkPlayer
	.align	2, 0
	.type	 VBlankCB_LinkError,function
	.thumb_func
VBlankCB_LinkError:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 VBlankCB_LinkError,.Lfe8-VBlankCB_LinkError
	.align	2, 0
	.type	 InitLink,function
	.thumb_func
InitLink:
	push	{lr}
	ldr	r3, .L42
	ldr	r1, .L42+0x4
	ldr	r2, .L42+0x8
	add	r0, r1, #0
	add	r0, r0, #0xe
.L40:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r1
	bge	.L40	@cond_branch
	mov	r0, #0x1
	strb	r0, [r3]
	bl	EnableSerial
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	gLinkOpen
	.word	gSendCmd
	.word	0xefff
.Lfe9:
	.size	 InitLink,.Lfe9-InitLink
	.align	2, 0
	.type	 Task_TriggerHandshake,function
	.thumb_func
Task_TriggerHandshake:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L46
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L45	@cond_branch
	ldr	r1, .L46+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	add	r0, r2, #0
	bl	DestroyTask
.L45:
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	gTasks
	.word	gShouldAdvanceLinkState
.Lfe10:
	.size	 Task_TriggerHandshake,.Lfe10-Task_TriggerHandshake
	.align	2, 0
	.globl	OpenLink
	.type	 OpenLink,function
	.thumb_func
OpenLink:
	push	{r4, r5, r6, lr}
	ldr	r0, .L56
	ldrb	r4, [r0]
	cmp	r4, #0
	bne	.L49	@cond_branch
	bl	ResetSerial
	bl	InitLink
	ldr	r1, .L56+0x4
	ldr	r0, .L56+0x8
	str	r0, [r1]
	ldr	r0, .L56+0xc
	strb	r4, [r0]
	ldr	r0, .L56+0x10
	strb	r4, [r0]
	ldr	r0, .L56+0x14
	strb	r4, [r0]
	bl	ResetBlockReceivedFlags
	bl	ResetBlockSend
	ldr	r0, .L56+0x18
	str	r4, [r0]
	ldr	r0, .L56+0x1c
	strb	r4, [r0]
	ldr	r0, .L56+0x20
	strb	r4, [r0]
	ldr	r0, .L56+0x24
	strh	r4, [r0]
	ldr	r0, .L56+0x28
	mov	r1, #0x2
	bl	CreateTask
	b	.L50
.L57:
	.align	2, 0
.L56:
	.word	gWirelessCommType
	.word	gLinkCallback
	.word	LinkCB_RequestPlayerDataExchange
	.word	gLinkVSyncDisabled
	.word	gLinkErrorOccurred
	.word	gSuppressLinkErrorMessage
	.word	sDummy1
	.word	gLinkDummy2
	.word	gLinkDummy1
	.word	gReadyCloseLinkType
	.word	Task_TriggerHandshake
.L49:
	bl	InitRFUAPI
.L50:
	ldr	r1, .L58
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r1, #0x0
	ldr	r6, .L58+0x4
	mov	r2, #0x0
	mov	r5, #0x1
	ldr	r4, .L58+0x8
	ldr	r3, .L58+0xc
.L54:
	add	r0, r1, r6
	strb	r5, [r0]
	add	r0, r1, r4
	strb	r2, [r0]
	add	r0, r1, r3
	strb	r2, [r0]
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L54	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gReceivedRemoteLinkPlayers
	.word	gRemoteLinkPlayersNotReceived
	.word	gReadyToCloseLink
	.word	gReadyToExitStandby
.Lfe11:
	.size	 OpenLink,.Lfe11-OpenLink
	.align	2, 0
	.globl	CloseLink
	.type	 CloseLink,function
	.thumb_func
CloseLink:
	push	{r4, lr}
	ldr	r0, .L62
	mov	r4, #0x0
	strb	r4, [r0]
	ldr	r0, .L62+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L61	@cond_branch
	bl	LinkRfu_Shutdown
.L61:
	ldr	r0, .L62+0x8
	strb	r4, [r0]
	bl	DisableSerial
	pop	{r4}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	gReceivedRemoteLinkPlayers
	.word	gWirelessCommType
	.word	gLinkOpen
.Lfe12:
	.size	 CloseLink,.Lfe12-CloseLink
	.align	2, 0
	.type	 TestBlockTransfer,function
	.thumb_func
TestBlockTransfer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r5, .L80
	ldr	r4, .L80+0x4
	ldrb	r0, [r5]
	ldrh	r1, [r4]
	cmp	r0, r1
	beq	.L65	@cond_branch
	ldrh	r0, [r4]
	mov	r1, #0x2
	mov	r2, #0x3
	mov	r3, #0x2
	bl	LinkTest_prnthex
	ldrh	r0, [r4]
	strb	r0, [r5]
.L65:
	mov	r5, #0x0
	ldr	r7, .L80+0x8
.L69:
	ldr	r0, .L80+0xc
	add	r6, r5, r0
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r4, r0, r7
	ldrb	r0, [r6]
	ldrh	r1, [r4]
	cmp	r0, r1
	beq	.L68	@cond_branch
	ldrh	r0, [r4]
	add	r2, r5, #0x4
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r1, #0x2
	mov	r3, #0x2
	bl	LinkTest_prnthex
	ldrh	r0, [r4]
	strb	r0, [r6]
.L68:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L69	@cond_branch
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0xf
	bne	.L72	@cond_branch
	mov	r5, #0x0
	ldr	r0, .L80+0x8
	mov	r9, r0
	ldr	r1, .L80+0x10
	mov	r8, r1
.L76:
	add	r0, r7, #0
	asr	r0, r0, r5
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L75	@cond_branch
	lsl	r0, r5, #0x8
	ldr	r1, .L80+0x14
	add	r0, r0, r1
	lsl	r4, r5, #0x1
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrh	r1, [r1, #0x2]
	bl	LinkTestCalcBlockChecksum
	ldr	r1, .L80+0x18
	add	r4, r4, r1
	mov	r6, #0x0
	strh	r0, [r4]
	add	r0, r5, #0
	bl	ResetBlockReceivedFlag
	ldrh	r0, [r4]
	cmp	r0, r8
	beq	.L75	@cond_branch
	ldr	r0, .L80+0x1c
	strb	r6, [r0]
	ldr	r0, .L80+0x20
	strb	r6, [r0]
.L75:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L76	@cond_branch
.L72:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	sLinkTestLastBlockSendPos
	.word	sBlockSend
	.word	sBlockRecv
	.word	sLinkTestLastBlockRecvPos
	.word	0x342
	.word	gBlockRecvBuffer
	.word	gLinkTestBlockChecksums
	.word	gLinkTestDebugValuesEnabled
	.word	gUnknown_020223BD
.Lfe13:
	.size	 TestBlockTransfer,.Lfe13-TestBlockTransfer
	.align	2, 0
	.type	 LinkTestProcessKeyInput,function
	.thumb_func
LinkTestProcessKeyInput:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L91
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L83	@cond_branch
	ldr	r1, .L91+0x4
	mov	r0, #0x1
	strb	r0, [r1]
.L83:
	ldrh	r1, [r4, #0x2c]
	mov	r5, #0x2
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L84	@cond_branch
	ldr	r0, .L91+0x8
	ldr	r1, .L91+0xc
	bl	InitBlockSend
.L84:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L85	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r5, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L85:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L86	@cond_branch
	mov	r0, #0x1
	bl	SetSuppressLinkErrorMessage
.L86:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L87	@cond_branch
	mov	r0, #0x1
	bl	TrySavingData
.L87:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L88	@cond_branch
	bl	SetCloseLinkCallback
.L88:
	ldr	r0, .L91+0x10
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L89	@cond_branch
	ldr	r2, [r4, #0x24]
	ldr	r0, .L91+0x14
	ldrb	r1, [r0]
	ldr	r0, .L91+0x18
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L90	@cond_branch
	mov	r0, #0x10
	orr	r1, r1, r0
.L90:
	add	r0, r2, #0
	bl	SetLinkDebugValues
.L89:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L92:
	.align	2, 0
.L91:
	.word	gMain
	.word	gShouldAdvanceLinkState
	.word	gHeap+0x4000
	.word	0x2004
	.word	gLinkTestDebugValuesEnabled
	.word	gLinkVSyncDisabled
	.word	gLinkCallback
.Lfe14:
	.size	 LinkTestProcessKeyInput,.Lfe14-LinkTestProcessKeyInput
	.align	2, 0
	.type	 CB2_LinkTest,function
	.thumb_func
CB2_LinkTest:
	push	{lr}
	bl	LinkTestProcessKeyInput
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	TestBlockTransfer
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 CB2_LinkTest,.Lfe15-CB2_LinkTest
	.align	2, 0
	.globl	LinkMain2
	.type	 LinkMain2,function
	.thumb_func
LinkMain2:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, .L104
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L95	@cond_branch
	mov	r0, #0x0
	b	.L103
.L105:
	.align	2, 0
.L104:
	.word	gLinkOpen
.L95:
	mov	r1, #0x0
	ldr	r5, .L106
	ldr	r3, .L106+0x4
	mov	r2, #0x0
.L99:
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x7
	bls	.L99	@cond_branch
	ldrh	r0, [r4]
	strh	r0, [r5]
	ldr	r0, .L106+0x8
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L101	@cond_branch
	ldr	r0, .L106+0xc
	ldr	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1e
	bl	ProcessRecvCmds
	ldr	r0, .L106+0x10
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L102	@cond_branch
	bl	_call_via_r0
.L102:
	bl	CheckErrorStatus
.L101:
	ldr	r0, .L106+0x8
	ldrh	r0, [r0]
.L103:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L107:
	.align	2, 0
.L106:
	.word	gLinkHeldKeys
	.word	gSendCmd
	.word	gLinkStatus
	.word	0x4000128
	.word	gLinkCallback
.Lfe16:
	.size	 LinkMain2,.Lfe16-LinkMain2
	.align	2, 0
	.type	 HandleReceiveRemoteLinkPlayer,function
	.thumb_func
HandleReceiveRemoteLinkPlayer:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	ldr	r1, .L115
	add	r0, r0, r1
	strb	r5, [r0]
	mov	r4, #0x0
	add	r6, r1, #0
	b	.L109
.L116:
	.align	2, 0
.L115:
	.word	gRemoteLinkPlayersNotReceived
.L112:
	add	r0, r4, r6
	ldrb	r0, [r0]
	add	r5, r5, r0
	add	r4, r4, #0x1
.L109:
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	blt	.L112	@cond_branch
	cmp	r5, #0
	bne	.L114	@cond_branch
	ldr	r1, .L117
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L114	@cond_branch
	mov	r0, #0x1
	strb	r0, [r1]
.L114:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L118:
	.align	2, 0
.L117:
	.word	gReceivedRemoteLinkPlayers
.Lfe17:
	.size	 HandleReceiveRemoteLinkPlayer,.Lfe17-HandleReceiveRemoteLinkPlayer
	.align	2, 0
	.type	 ProcessRecvCmds,function
	.thumb_func
ProcessRecvCmds:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r6, #0x0
.L123:
	ldr	r0, .L163
	lsl	r1, r6, #0x1
	add	r3, r1, r0
	mov	r0, #0x0
	strh	r0, [r3]
	lsl	r4, r6, #0x4
	ldr	r5, .L163+0x4
	add	r2, r4, r5
	ldrh	r0, [r2]
	mov	ip, r1
	add	r7, r6, #0x1
	str	r7, [sp]
	cmp	r0, #0
	bne	.LCB1187
	b	.L122	@long jump
.LCB1187:
	ldrh	r1, [r2]
	ldr	r0, .L163+0x8
	cmp	r1, r0
	bne	.LCB1193
	b	.L151	@long jump
.LCB1193:
	cmp	r1, r0
	bgt	.L158	@cond_branch
	ldr	r0, .L163+0xc
	cmp	r1, r0
	bne	.LCB1198
	b	.L155	@long jump
.LCB1198:
	cmp	r1, r0
	bgt	.L159	@cond_branch
	ldr	r0, .L163+0x10
	cmp	r1, r0
	beq	.L126	@cond_branch
	ldr	r0, .L163+0x14
	cmp	r1, r0
	bne	.LCB1206
	b	.L152	@long jump
.LCB1206:
	b	.L122
.L164:
	.align	2, 0
.L163:
	.word	gLinkPartnersHeldKeys
	.word	gRecvCmds
	.word	0x5fff
	.word	0x4444
	.word	0x2222
	.word	0x2ffe
.L159:
	ldr	r0, .L165
	cmp	r1, r0
	beq	.L128	@cond_branch
	add	r0, r0, #0x11
	cmp	r1, r0
	beq	.L129	@cond_branch
	b	.L122
.L166:
	.align	2, 0
.L165:
	.word	0x5555
.L158:
	ldr	r0, .L167
	cmp	r1, r0
	beq	.L130	@cond_branch
	cmp	r1, r0
	bgt	.L160	@cond_branch
	ldr	r0, .L167+0x4
	cmp	r1, r0
	beq	.L131	@cond_branch
	ldr	r0, .L167+0x8
	cmp	r1, r0
	bne	.LCB1248
	b	.L153	@long jump
.LCB1248:
	b	.L122
.L168:
	.align	2, 0
.L167:
	.word	0xbbbb
	.word	0x8888
	.word	0xaaaa
.L160:
	ldr	r0, .L169
	cmp	r1, r0
	bne	.LCB1263
	b	.L155	@long jump
.LCB1263:
	ldr	r0, .L169+0x4
	cmp	r1, r0
	bne	.LCB1266
	b	.L154	@long jump
.LCB1266:
	b	.L122
.L170:
	.align	2, 0
.L169:
	.word	0xcafe
	.word	0xcccc
.L126:
	bl	InitLocalLinkPlayer
	ldr	r0, .L171
	add	r2, r0, #0
	add	r2, r2, #0x10
	ldr	r1, .L171+0x4
	ldmia	r1!, {r3, r4, r5}
	stmia	r2!, {r3, r4, r5}
	ldmia	r1!, {r3, r6, r7}
	stmia	r2!, {r3, r6, r7}
	ldr	r1, [r1]
	str	r1, [r2]
	ldr	r4, .L171+0x8
	add	r2, r0, #0
	add	r1, r4, #0
	ldmia	r1!, {r5, r6, r7}
	stmia	r2!, {r5, r6, r7}
	ldrh	r3, [r1]
	strh	r3, [r2]
	ldrb	r1, [r1, #0x2]
	strb	r1, [r2, #0x2]
	add	r1, r0, #0
	add	r1, r1, #0x2c
	ldmia	r4!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	ldrh	r2, [r4]
	strh	r2, [r1]
	ldrb	r2, [r4, #0x2]
	strb	r2, [r1, #0x2]
	mov	r1, #0x3c
	bl	InitBlockSend
	b	.L122
.L172:
	.align	2, 0
.L171:
	.word	gLocalLinkPlayerBlock
	.word	gLocalLinkPlayer
	.word	sASCIIGameFreakInc
.L128:
.L129:
	ldr	r1, .L173
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L122
.L174:
	.align	2, 0
.L173:
	.word	gLinkDummy2
.L130:
	mov	r7, ip
	add	r1, r7, r6
	lsl	r1, r1, #0x2
	ldr	r0, .L175
	add	r1, r1, r0
	mov	r2, #0x0
	strh	r2, [r1]
	ldr	r0, .L175+0x4
	add	r0, r0, #0x2
	add	r0, r4, r0
	ldrh	r0, [r0]
	strh	r0, [r1, #0x2]
	ldr	r0, .L175+0x4
	add	r0, r0, #0x4
	add	r0, r4, r0
	ldrh	r0, [r0]
	strb	r0, [r1, #0x9]
	b	.L122
.L176:
	.align	2, 0
.L175:
	.word	sBlockRecv
	.word	gRecvCmds
.L131:
	mov	r3, ip
	add	r0, r3, r6
	lsl	r0, r0, #0x2
	ldr	r5, .L177
	add	r3, r0, r5
	ldrh	r1, [r3, #0x2]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r7, r5, #0
	mov	sl, r7
	cmp	r1, r0
	bls	.L132	@cond_branch
	ldr	r0, .L177+0x4
	mov	r8, r0
	mov	r2, #0x0
	add	r5, r3, #0
	ldr	r7, .L177+0x8
	add	r3, r4, #0
.L136:
	ldrh	r1, [r5]
	lsr	r1, r1, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	add	r2, r2, #0x1
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	add	r0, r0, r7
	ldrh	r0, [r0]
	strh	r0, [r1]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	cmp	r2, #0x6
	bls	.L136	@cond_branch
	b	.L138
.L178:
	.align	2, 0
.L177:
	.word	sBlockRecv
	.word	gDecompressionBuffer
	.word	gRecvCmds
.L132:
	mov	r2, #0x0
	ldr	r1, .L179
	mov	r9, r1
	add	r7, r3, #0
	ldr	r3, .L179+0x4
	mov	r8, r3
	lsl	r5, r6, #0x8
	add	r3, r4, #0
.L142:
	ldrh	r1, [r7]
	lsr	r1, r1, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	add	r1, r1, r9
	add	r2, r2, #0x1
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	add	r0, r0, r8
	ldrh	r0, [r0]
	strh	r0, [r1]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	cmp	r2, #0x6
	bls	.L142	@cond_branch
.L138:
	mov	r4, ip
	add	r1, r4, r6
	lsl	r1, r1, #0x2
	add	r1, r1, sl
	ldrh	r0, [r1]
	add	r0, r0, #0xe
	mov	r3, #0x0
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1, #0x2]
	cmp	r0, r1
	bcc	.L122	@cond_branch
	ldr	r0, .L179+0x8
	add	r0, r6, r0
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L145	@cond_branch
	lsl	r1, r6, #0x8
	ldr	r0, .L179
	add	r1, r1, r0
	mov	r8, r1
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	ldr	r1, .L179+0xc
	add	r2, r0, r1
	add	r1, r2, #0
	mov	r0, r8
	add	r0, r0, #0x10
	ldmia	r0!, {r4, r5, r7}
	stmia	r1!, {r4, r5, r7}
	ldmia	r0!, {r4, r5, r7}
	stmia	r1!, {r4, r5, r7}
	ldr	r0, [r0]
	str	r0, [r1]
	ldrb	r0, [r2]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L146	@cond_branch
	strb	r3, [r2, #0x12]
	strb	r3, [r2, #0x11]
	strb	r3, [r2, #0x10]
.L146:
	add	r0, r2, #0
	bl	sub_800B524
	ldr	r5, .L179+0x10
	mov	r0, r8
	add	r1, r5, #0
	bl	strcmp
	cmp	r0, #0
	bne	.L148	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x2c
	add	r1, r5, #0
	bl	strcmp
	cmp	r0, #0
	beq	.L147	@cond_branch
.L148:
	ldr	r0, .L179+0x14
	bl	SetMainCallback2
	b	.L122
.L180:
	.align	2, 0
.L179:
	.word	gBlockRecvBuffer
	.word	gRecvCmds
	.word	gRemoteLinkPlayersNotReceived
	.word	gLinkPlayers
	.word	sASCIIGameFreakInc
	.word	CB2_LinkError
.L147:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	HandleReceiveRemoteLinkPlayer
	b	.L122
.L145:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	SetBlockReceivedFlag
	b	.L122
.L151:
	ldr	r0, .L181
	b	.L162
.L182:
	.align	2, 0
.L181:
	.word	gReadyToCloseLink
.L152:
	ldr	r0, .L183
.L162:
	add	r0, r6, r0
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L122
.L184:
	.align	2, 0
.L183:
	.word	gReadyToExitStandby
.L153:
	bl	SetBerryBlenderLinkCallback
	b	.L122
.L154:
	ldr	r3, .L185
	ldr	r0, .L185+0x4
	add	r0, r0, #0x2
	add	r0, r4, r0
	ldrh	r2, [r0]
	lsl	r2, r2, #0x3
	add	r0, r2, r3
	ldr	r1, [r0]
	add	r3, r3, #0x4
	add	r2, r2, r3
	ldrh	r2, [r2]
	mov	r0, #0x0
	bl	SendBlock
	b	.L122
.L186:
	.align	2, 0
.L185:
	.word	sBlockRequests
	.word	gRecvCmds
.L155:
	ldr	r0, .L187
	add	r0, r0, #0x2
	add	r0, r4, r0
	ldrh	r0, [r0]
	strh	r0, [r3]
.L122:
	ldr	r5, [sp]
	lsl	r0, r5, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x3
	bhi	.LCB1660
	b	.L123	@long jump
.LCB1660:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L188:
	.align	2, 0
.L187:
	.word	gRecvCmds
.Lfe18:
	.size	 ProcessRecvCmds,.Lfe18-ProcessRecvCmds
	.align	2, 0
	.type	 BuildSendCmd,function
	.thumb_func
BuildSendCmd:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L221
	cmp	r2, r0
	beq	.L195	@cond_branch
	cmp	r2, r0
	bgt	.L213	@cond_branch
	ldr	r0, .L221+0x4
	cmp	r2, r0
	beq	.L193	@cond_branch
	cmp	r2, r0
	bgt	.L214	@cond_branch
	ldr	r0, .L221+0x8
	cmp	r2, r0
	beq	.L191	@cond_branch
	ldr	r0, .L221+0xc
.L220:
	cmp	r2, r0
	bne	.LCB1700
	b	.L207	@long jump
.LCB1700:
	b	.L190
.L222:
	.align	2, 0
.L221:
	.word	0x6666
	.word	0x4444
	.word	0x2222
	.word	0x2ffe
.L214:
	ldr	r0, .L223
	cmp	r2, r0
	bne	.LCB1715
	b	.L207	@long jump
.LCB1715:
	cmp	r2, r0
	bgt	.L215	@cond_branch
	sub	r0, r0, #0x11
	b	.L220
.L224:
	.align	2, 0
.L223:
	.word	0x5566
.L215:
	ldr	r0, .L225
	cmp	r2, r0
	bne	.LCB1730
	b	.L206	@long jump
.LCB1730:
	b	.L190
.L226:
	.align	2, 0
.L225:
	.word	0x5fff
.L213:
	ldr	r0, .L227
	cmp	r2, r0
	beq	.L204	@cond_branch
	cmp	r2, r0
	bgt	.L216	@cond_branch
	ldr	r0, .L227+0x4
	cmp	r2, r0
	beq	.L196	@cond_branch
	ldr	r0, .L227+0x8
	b	.L220
.L228:
	.align	2, 0
.L227:
	.word	0xaaab
	.word	0x7777
	.word	0xaaaa
.L216:
	ldr	r0, .L229
	cmp	r2, r0
	beq	.L208	@cond_branch
	cmp	r2, r0
	bgt	.L217	@cond_branch
	ldr	r0, .L229+0x4
	cmp	r2, r0
	beq	.L202	@cond_branch
	b	.L190
.L230:
	.align	2, 0
.L229:
	.word	0xcafe
	.word	0xbbbb
.L217:
	ldr	r0, .L231
	cmp	r2, r0
	beq	.L205	@cond_branch
	b	.L190
.L232:
	.align	2, 0
.L231:
	.word	0xcccc
.L191:
	ldr	r0, .L233
	strh	r2, [r0]
	ldr	r1, .L233+0x4
	ldrh	r1, [r1]
	b	.L218
.L234:
	.align	2, 0
.L233:
	.word	gSendCmd
	.word	gLinkType
.L193:
	ldr	r0, .L235
	strh	r2, [r0]
	ldr	r1, .L235+0x4
	ldrh	r1, [r1, #0x2c]
	b	.L218
.L236:
	.align	2, 0
.L235:
	.word	gSendCmd
	.word	gMain
.L195:
	ldr	r0, .L237
	mov	r1, #0x0
	b	.L219
.L238:
	.align	2, 0
.L237:
	.word	gSendCmd
.L196:
	ldr	r0, .L239
	strh	r2, [r0]
	mov	r1, #0x0
	add	r3, r0, #0
	mov	r2, #0xee
.L200:
	add	r1, r1, #0x1
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x4
	bls	.L200	@cond_branch
	b	.L190
.L240:
	.align	2, 0
.L239:
	.word	gSendCmd
.L202:
	ldr	r1, .L241
	strh	r2, [r1]
	ldr	r2, .L241+0x4
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1, #0x2]
	ldrb	r0, [r2, #0x9]
	add	r0, r0, #0x80
	strh	r0, [r1, #0x4]
	b	.L190
.L242:
	.align	2, 0
.L241:
	.word	gSendCmd
	.word	sBlockSend
.L204:
	ldr	r0, .L243
	strh	r2, [r0]
	ldr	r1, .L243+0x4
	ldrh	r1, [r1]
	b	.L218
.L244:
	.align	2, 0
.L243:
	.word	gSendCmd
	.word	gSpecialVar_ItemId
.L205:
	ldr	r0, .L245
	strh	r2, [r0]
	ldr	r1, .L245+0x4
	ldrb	r1, [r1]
	b	.L218
.L246:
	.align	2, 0
.L245:
	.word	gSendCmd
	.word	gBlockRequestType
.L206:
	ldr	r0, .L247
	strh	r2, [r0]
	ldr	r1, .L247+0x4
	ldrh	r1, [r1]
	b	.L218
.L248:
	.align	2, 0
.L247:
	.word	gSendCmd
	.word	gReadyCloseLinkType
.L207:
	ldr	r0, .L249
	strh	r2, [r0]
	b	.L190
.L250:
	.align	2, 0
.L249:
	.word	gSendCmd
.L208:
	ldr	r0, .L251
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L190	@cond_branch
	ldr	r0, .L251+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L190	@cond_branch
	ldr	r0, .L251+0x8
.L219:
	strh	r2, [r0]
.L218:
	strh	r1, [r0, #0x2]
.L190:
	pop	{r0}
	bx	r0
.L252:
	.align	2, 0
.L251:
	.word	gHeldKeyCodeToSend
	.word	gLinkTransferringData
	.word	gSendCmd
.Lfe19:
	.size	 BuildSendCmd,.Lfe19-BuildSendCmd
	.align	2, 0
	.globl	StartSendingKeysToLink
	.type	 StartSendingKeysToLink,function
	.thumb_func
StartSendingKeysToLink:
	push	{lr}
	ldr	r0, .L255
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L254	@cond_branch
	bl	StartSendingKeysToRfu
.L254:
	ldr	r1, .L255+0x4
	ldr	r0, .L255+0x8
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L256:
	.align	2, 0
.L255:
	.word	gWirelessCommType
	.word	gLinkCallback
	.word	LinkCB_SendHeldKeys
.Lfe20:
	.size	 StartSendingKeysToLink,.Lfe20-StartSendingKeysToLink
	.align	2, 0
	.globl	IsSendingKeysToLink
	.type	 IsSendingKeysToLink,function
	.thumb_func
IsSendingKeysToLink:
	push	{lr}
	ldr	r0, .L261
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L258	@cond_branch
	bl	IsSendingKeysToRfu
	b	.L260
.L262:
	.align	2, 0
.L261:
	.word	gWirelessCommType
.L258:
	ldr	r0, .L263
	ldr	r1, [r0]
	ldr	r0, .L263+0x4
	cmp	r1, r0
	beq	.L259	@cond_branch
	mov	r0, #0x0
	b	.L260
.L264:
	.align	2, 0
.L263:
	.word	gLinkCallback
	.word	LinkCB_SendHeldKeys
.L259:
	mov	r0, #0x1
.L260:
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 IsSendingKeysToLink,.Lfe21-IsSendingKeysToLink
	.align	2, 0
	.type	 LinkCB_SendHeldKeys,function
	.thumb_func
LinkCB_SendHeldKeys:
	push	{lr}
	ldr	r0, .L267
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L266	@cond_branch
	ldr	r0, .L267+0x4
	bl	BuildSendCmd
.L266:
	pop	{r0}
	bx	r0
.L268:
	.align	2, 0
.L267:
	.word	gReceivedRemoteLinkPlayers
	.word	0xcafe
.Lfe22:
	.size	 LinkCB_SendHeldKeys,.Lfe22-LinkCB_SendHeldKeys
	.align	2, 0
	.globl	ClearLinkCallback
	.type	 ClearLinkCallback,function
	.thumb_func
ClearLinkCallback:
	push	{lr}
	ldr	r0, .L272
	ldrb	r1, [r0]
	cmp	r1, #0
	beq	.L270	@cond_branch
	bl	ClearLinkRfuCallback
	b	.L271
.L273:
	.align	2, 0
.L272:
	.word	gWirelessCommType
.L270:
	ldr	r0, .L274
	str	r1, [r0]
.L271:
	pop	{r0}
	bx	r0
.L275:
	.align	2, 0
.L274:
	.word	gLinkCallback
.Lfe23:
	.size	 ClearLinkCallback,.Lfe23-ClearLinkCallback
	.align	2, 0
	.globl	ClearLinkCallback_2
	.type	 ClearLinkCallback_2,function
	.thumb_func
ClearLinkCallback_2:
	push	{lr}
	ldr	r0, .L279
	ldrb	r1, [r0]
	cmp	r1, #0
	beq	.L277	@cond_branch
	bl	ClearLinkRfuCallback
	b	.L278
.L280:
	.align	2, 0
.L279:
	.word	gWirelessCommType
.L277:
	ldr	r0, .L281
	str	r1, [r0]
.L278:
	pop	{r0}
	bx	r0
.L282:
	.align	2, 0
.L281:
	.word	gLinkCallback
.Lfe24:
	.size	 ClearLinkCallback_2,.Lfe24-ClearLinkCallback_2
	.align	2, 0
	.globl	GetLinkPlayerCount
	.type	 GetLinkPlayerCount,function
	.thumb_func
GetLinkPlayerCount:
	push	{lr}
	ldr	r0, .L287
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L284	@cond_branch
	ldr	r0, .L287+0x4
	ldr	r0, [r0]
	mov	r1, #0x1c
	and	r0, r0, r1
	lsr	r0, r0, #0x2
	b	.L286
.L288:
	.align	2, 0
.L287:
	.word	gWirelessCommType
	.word	gLinkStatus
.L284:
	bl	Rfu_GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L286:
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 GetLinkPlayerCount,.Lfe25-GetLinkPlayerCount
	.align	2, 0
	.type	 AreAnyLinkPlayersUsingVersions,function
	.thumb_func
AreAnyLinkPlayersUsingVersions:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r2, #0x0
	cmp	r2, r4
	bge	.L291	@cond_branch
	mov	r7, #0xff
	ldr	r3, .L298
.L293:
	ldrh	r0, [r3]
	add	r1, r7, #0
	and	r1, r1, r0
	cmp	r1, r6
	beq	.L295	@cond_branch
	cmp	r1, r5
	bne	.L292	@cond_branch
.L295:
	mov	r0, #0x1
	b	.L297
.L299:
	.align	2, 0
.L298:
	.word	gLinkPlayers
.L292:
	add	r3, r3, #0x1c
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L293	@cond_branch
.L291:
	mov	r0, #0x1
	neg	r0, r0
.L297:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 AreAnyLinkPlayersUsingVersions,.Lfe26-AreAnyLinkPlayersUsingVersions
	.align	2, 0
	.globl	LinkDummy_Return2
	.type	 LinkDummy_Return2,function
	.thumb_func
LinkDummy_Return2:
	mov	r0, #0x2
	bx	lr
.Lfe27:
	.size	 LinkDummy_Return2,.Lfe27-LinkDummy_Return2
	.align	2, 0
	.type	 IsFullLinkGroupWithNoRS,function
	.thumb_func
IsFullLinkGroupWithNoRS:
	push	{lr}
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L303	@cond_branch
	mov	r0, #0x2
	mov	r1, #0x1
	bl	AreAnyLinkPlayersUsingVersions
	cmp	r0, #0
	bge	.L302	@cond_branch
.L303:
	mov	r0, #0x0
	b	.L304
.L302:
	mov	r0, #0x1
.L304:
	pop	{r1}
	bx	r1
.Lfe28:
	.size	 IsFullLinkGroupWithNoRS,.Lfe28-IsFullLinkGroupWithNoRS
	.align	2, 0
	.globl	Link_AnyPartnersPlayingRubyOrSapphire
	.type	 Link_AnyPartnersPlayingRubyOrSapphire,function
	.thumb_func
Link_AnyPartnersPlayingRubyOrSapphire:
	push	{lr}
	mov	r0, #0x2
	mov	r1, #0x1
	bl	AreAnyLinkPlayersUsingVersions
	cmp	r0, #0
	bge	.L306	@cond_branch
	mov	r0, #0x0
	b	.L307
.L306:
	mov	r0, #0x1
.L307:
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 Link_AnyPartnersPlayingRubyOrSapphire,.Lfe29-Link_AnyPartnersPlayingRubyOrSapphire
	.align	2, 0
	.globl	Link_AnyPartnersPlayingFRLG_JP
	.type	 Link_AnyPartnersPlayingFRLG_JP,function
	.thumb_func
Link_AnyPartnersPlayingFRLG_JP:
	push	{lr}
	mov	r0, #0x4
	mov	r1, #0x5
	bl	AreAnyLinkPlayersUsingVersions
	add	r2, r0, #0
	cmp	r2, #0
	blt	.L309	@cond_branch
	ldr	r0, .L311
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0x1
	bne	.L309	@cond_branch
	mov	r0, #0x1
	b	.L310
.L312:
	.align	2, 0
.L311:
	.word	gLinkPlayers
.L309:
	mov	r0, #0x0
.L310:
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 Link_AnyPartnersPlayingFRLG_JP,.Lfe30-Link_AnyPartnersPlayingFRLG_JP
	.align	2, 0
	.globl	OpenLinkTimed
	.type	 OpenLinkTimed,function
	.thumb_func
OpenLinkTimed:
	push	{lr}
	ldr	r0, .L314
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L314+0x4
	strh	r1, [r0]
	bl	OpenLink
	pop	{r0}
	bx	r0
.L315:
	.align	2, 0
.L314:
	.word	sPlayerDataExchangeStatus
	.word	gLinkTimeOutCounter
.Lfe31:
	.size	 OpenLinkTimed,.Lfe31-OpenLinkTimed
	.align	2, 0
	.globl	GetLinkPlayerDataExchangeStatusTimed
	.type	 GetLinkPlayerDataExchangeStatusTimed,function
	.thumb_func
GetLinkPlayerDataExchangeStatusTimed:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r7, #0x0
	ldr	r0, .L347
	ldrb	r4, [r0]
	cmp	r4, #0x1
	beq	.LCB2382
	b	.L317	@long jump
.LCB2382:
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	bgt	.L319	@cond_branch
	cmp	r0, r6
	ble	.L318	@cond_branch
.L319:
	ldr	r1, .L347+0x4
	mov	r0, #0x6
	str	r0, [r1]
	b	.L345
.L348:
	.align	2, 0
.L347:
	.word	gReceivedRemoteLinkPlayers
	.word	sPlayerDataExchangeStatus
.L318:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L321	@cond_branch
	ldr	r0, .L349
	strb	r4, [r0]
	bl	CloseLink
.L321:
	mov	r6, #0x0
	ldr	r4, .L349+0x4
	mov	r5, #0x0
	b	.L322
.L350:
	.align	2, 0
.L349:
	.word	gLinkErrorOccurred
	.word	gLinkPlayers
.L325:
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r0, r5, r0
	ldr	r1, [r0]
	ldr	r0, [r4, #0x14]
	cmp	r1, r0
	bne	.L324	@cond_branch
	add	r7, r7, #0x1
.L324:
	add	r5, r5, #0x1c
	add	r6, r6, #0x1
.L322:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	blt	.L325	@cond_branch
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r7, r0
	bne	.L328	@cond_branch
	ldr	r0, .L351
	ldr	r1, [r0, #0x14]
	ldr	r0, .L351+0x4
	cmp	r1, r0
	bne	.L329	@cond_branch
	bl	GetGameProgressForLinkTrade
	cmp	r0, #0x1
	beq	.L331	@cond_branch
	cmp	r0, #0x1
	bgt	.L336	@cond_branch
	cmp	r0, #0
	beq	.L333	@cond_branch
	ldr	r3, .L351+0x8
	b	.L342
.L352:
	.align	2, 0
.L351:
	.word	gLinkPlayers
	.word	0x1133
	.word	sPlayerDataExchangeStatus
.L336:
	cmp	r0, #0x2
	beq	.L332	@cond_branch
	ldr	r3, .L353
	b	.L342
.L354:
	.align	2, 0
.L353:
	.word	sPlayerDataExchangeStatus
.L331:
	ldr	r1, .L355
	mov	r0, #0x4
	b	.L346
.L356:
	.align	2, 0
.L355:
	.word	sPlayerDataExchangeStatus
.L332:
	ldr	r1, .L357
	mov	r0, #0x5
	b	.L346
.L358:
	.align	2, 0
.L357:
	.word	sPlayerDataExchangeStatus
.L333:
.L329:
	ldr	r1, .L359
	mov	r0, #0x1
.L346:
	str	r0, [r1]
	add	r3, r1, #0
	b	.L342
.L360:
	.align	2, 0
.L359:
	.word	sPlayerDataExchangeStatus
.L328:
	ldr	r6, .L361
	mov	r0, #0x3
	str	r0, [r6]
	ldr	r4, .L361+0x4
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r4, r4, #0x14
	add	r1, r1, r4
	ldr	r5, [r1]
	bl	GetMultiplayerId
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r1, [r1]
	ldr	r2, .L361+0x8
	cmp	r5, r2
	bne	.L341	@cond_branch
	ldr	r0, .L361+0xc
	cmp	r1, r0
	beq	.L340	@cond_branch
.L341:
	ldr	r0, .L361+0xc
	add	r3, r6, #0
	cmp	r5, r0
	bne	.L342	@cond_branch
	cmp	r1, r2
	bne	.L342	@cond_branch
.L340:
	ldr	r1, .L361+0x10
	mov	r0, #0x3
	strh	r0, [r1]
	ldr	r3, .L361
	b	.L342
.L362:
	.align	2, 0
.L361:
	.word	sPlayerDataExchangeStatus
	.word	gLinkPlayers
	.word	0x2266
	.word	0x2277
	.word	gSpecialVar_0x8005
.L317:
	ldr	r0, .L363
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	lsl	r1, r1, #0x10
	mov	r0, #0x96
	lsl	r0, r0, #0x12
	ldr	r3, .L363+0x4
	cmp	r1, r0
	bls	.L342	@cond_branch
	mov	r0, #0x2
	str	r0, [r3]
.L342:
	ldrb	r0, [r3]
.L345:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L364:
	.align	2, 0
.L363:
	.word	gLinkTimeOutCounter
	.word	sPlayerDataExchangeStatus
.Lfe32:
	.size	 GetLinkPlayerDataExchangeStatusTimed,.Lfe32-GetLinkPlayerDataExchangeStatusTimed
	.align	2, 0
	.globl	IsLinkPlayerDataExchangeComplete
	.type	 IsLinkPlayerDataExchangeComplete,function
	.thumb_func
IsLinkPlayerDataExchangeComplete:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	mov	r4, #0x0
	ldr	r5, .L374
	b	.L366
.L375:
	.align	2, 0
.L374:
	.word	gLinkPlayers
.L369:
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x14
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r5, #0x14]
	cmp	r1, r0
	bne	.L368	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L368:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L366:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcc	.L369	@cond_branch
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	bne	.L372	@cond_branch
	mov	r2, #0x1
	ldr	r0, .L376
	str	r2, [r0]
	b	.L373
.L377:
	.align	2, 0
.L376:
	.word	sPlayerDataExchangeStatus
.L372:
	mov	r2, #0x0
	ldr	r1, .L378
	mov	r0, #0x3
	str	r0, [r1]
.L373:
	add	r0, r2, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L379:
	.align	2, 0
.L378:
	.word	sPlayerDataExchangeStatus
.Lfe33:
	.size	 IsLinkPlayerDataExchangeComplete,.Lfe33-IsLinkPlayerDataExchangeComplete
	.align	2, 0
	.globl	GetLinkPlayerTrainerId
	.type	 GetLinkPlayerTrainerId,function
	.thumb_func
GetLinkPlayerTrainerId:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L381
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r2, #0x4
	add	r1, r1, r2
	ldr	r0, [r1]
	bx	lr
.L382:
	.align	2, 0
.L381:
	.word	gLinkPlayers
.Lfe34:
	.size	 GetLinkPlayerTrainerId,.Lfe34-GetLinkPlayerTrainerId
	.align	2, 0
	.globl	ResetLinkPlayers
	.type	 ResetLinkPlayers,function
	.thumb_func
ResetLinkPlayers:
	push	{r4, r5, lr}
	ldr	r5, .L389
	mov	r4, #0x4
.L387:
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x1c
	bl	memset
	add	r5, r5, #0x1c
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L387	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L390:
	.align	2, 0
.L389:
	.word	gLinkPlayers
.Lfe35:
	.size	 ResetLinkPlayers,.Lfe35-ResetLinkPlayers
	.align	2, 0
	.type	 ResetBlockSend,function
	.thumb_func
ResetBlockSend:
	ldr	r1, .L392
	mov	r0, #0x0
	strb	r0, [r1, #0x8]
	strh	r0, [r1]
	strh	r0, [r1, #0x2]
	str	r0, [r1, #0x4]
	bx	lr
.L393:
	.align	2, 0
.L392:
	.word	sBlockSend
.Lfe36:
	.size	 ResetBlockSend,.Lfe36-ResetBlockSend
	.align	2, 0
	.type	 InitBlockSend,function
	.thumb_func
InitBlockSend:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	add	r6, r1, #0
	ldr	r4, .L400
	ldrb	r5, [r4, #0x8]
	cmp	r5, #0
	beq	.L395	@cond_branch
	mov	r0, #0x0
	b	.L399
.L401:
	.align	2, 0
.L400:
	.word	sBlockSend
.L395:
	bl	GetMultiplayerId
	strb	r0, [r4, #0x9]
	mov	r0, #0x1
	strb	r0, [r4, #0x8]
	strh	r6, [r4, #0x2]
	strh	r5, [r4]
	add	r0, r0, #0xff
	cmp	r6, r0
	bls	.L396	@cond_branch
	str	r7, [r4, #0x4]
	b	.L397
.L396:
	ldr	r5, .L402
	cmp	r7, r5
	beq	.L398	@cond_branch
	add	r0, r5, #0
	add	r1, r7, #0
	add	r2, r6, #0
	bl	memcpy
.L398:
	str	r5, [r4, #0x4]
.L397:
	ldr	r0, .L402+0x4
	bl	BuildSendCmd
	ldr	r1, .L402+0x8
	ldr	r0, .L402+0xc
	str	r0, [r1]
	ldr	r1, .L402+0x10
	mov	r0, #0x0
	str	r0, [r1]
	mov	r0, #0x1
.L399:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L403:
	.align	2, 0
.L402:
	.word	gBlockSendBuffer
	.word	0xbbbb
	.word	gLinkCallback
	.word	LinkCB_BlockSendBegin
	.word	sBlockSendDelayCounter
.Lfe37:
	.size	 InitBlockSend,.Lfe37-InitBlockSend
	.align	2, 0
	.type	 LinkCB_BlockSendBegin,function
	.thumb_func
LinkCB_BlockSendBegin:
	push	{lr}
	ldr	r1, .L406
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0x2
	bls	.L405	@cond_branch
	ldr	r1, .L406+0x4
	ldr	r0, .L406+0x8
	str	r0, [r1]
.L405:
	pop	{r0}
	bx	r0
.L407:
	.align	2, 0
.L406:
	.word	sBlockSendDelayCounter
	.word	gLinkCallback
	.word	LinkCB_BlockSend
.Lfe38:
	.size	 LinkCB_BlockSendBegin,.Lfe38-LinkCB_BlockSendBegin
	.align	2, 0
	.type	 LinkCB_BlockSend,function
	.thumb_func
LinkCB_BlockSend:
	push	{r4, r5, r6, lr}
	ldr	r0, .L415
	ldr	r5, [r0, #0x4]
	ldr	r2, .L415+0x4
	ldr	r1, .L415+0x8
	strh	r1, [r2]
	mov	r3, #0x0
	add	r4, r0, #0
	add	r6, r4, #0
	add	r2, r2, #0x2
.L412:
	lsl	r0, r3, #0x1
	ldrh	r1, [r6]
	add	r0, r0, r1
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0]
	orr	r0, r0, r1
	strh	r0, [r2]
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x6
	ble	.L412	@cond_branch
	ldrh	r0, [r4]
	add	r0, r0, #0xe
	strh	r0, [r4]
	ldrh	r1, [r4, #0x2]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bhi	.L414	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4, #0x8]
	ldr	r1, .L415+0xc
	ldr	r0, .L415+0x10
	str	r0, [r1]
.L414:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L416:
	.align	2, 0
.L415:
	.word	sBlockSend
	.word	gSendCmd
	.word	0x8888
	.word	gLinkCallback
	.word	LinkCB_BlockSendEnd
.Lfe39:
	.size	 LinkCB_BlockSend,.Lfe39-LinkCB_BlockSend
	.align	2, 0
	.type	 LinkCB_BlockSendEnd,function
	.thumb_func
LinkCB_BlockSendEnd:
	ldr	r1, .L418
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L419:
	.align	2, 0
.L418:
	.word	gLinkCallback
.Lfe40:
	.size	 LinkCB_BlockSendEnd,.Lfe40-LinkCB_BlockSendEnd
	.align	2, 0
	.type	 LinkCB_BerryBlenderSendHeldKeys,function
	.thumb_func
LinkCB_BerryBlenderSendHeldKeys:
	push	{lr}
	bl	GetMultiplayerId
	ldr	r0, .L421
	bl	BuildSendCmd
	ldr	r1, .L421+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L422:
	.align	2, 0
.L421:
	.word	0x4444
	.word	gBerryBlenderKeySendAttempts
.Lfe41:
	.size	 LinkCB_BerryBlenderSendHeldKeys,.Lfe41-LinkCB_BerryBlenderSendHeldKeys
	.align	2, 0
	.globl	SetBerryBlenderLinkCallback
	.type	 SetBerryBlenderLinkCallback,function
	.thumb_func
SetBerryBlenderLinkCallback:
	push	{lr}
	ldr	r1, .L426
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r0, .L426+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L424	@cond_branch
	bl	Rfu_SetBerryBlenderLinkCallback
	b	.L425
.L427:
	.align	2, 0
.L426:
	.word	gBerryBlenderKeySendAttempts
	.word	gWirelessCommType
.L424:
	ldr	r1, .L428
	ldr	r0, .L428+0x4
	str	r0, [r1]
.L425:
	pop	{r0}
	bx	r0
.L429:
	.align	2, 0
.L428:
	.word	gLinkCallback
	.word	LinkCB_BerryBlenderSendHeldKeys
.Lfe42:
	.size	 SetBerryBlenderLinkCallback,.Lfe42-SetBerryBlenderLinkCallback
	.align	2, 0
	.type	 GetBerryBlenderKeySendAttempts,function
	.thumb_func
GetBerryBlenderKeySendAttempts:
	ldr	r0, .L431
	ldr	r0, [r0]
	bx	lr
.L432:
	.align	2, 0
.L431:
	.word	gBerryBlenderKeySendAttempts
.Lfe43:
	.size	 GetBerryBlenderKeySendAttempts,.Lfe43-GetBerryBlenderKeySendAttempts
	.align	2, 0
	.type	 SendBerryBlenderNoSpaceForPokeblocks,function
	.thumb_func
SendBerryBlenderNoSpaceForPokeblocks:
	push	{lr}
	ldr	r0, .L434
	bl	BuildSendCmd
	pop	{r0}
	bx	r0
.L435:
	.align	2, 0
.L434:
	.word	0xaaaa
.Lfe44:
	.size	 SendBerryBlenderNoSpaceForPokeblocks,.Lfe44-SendBerryBlenderNoSpaceForPokeblocks
	.align	2, 0
	.globl	GetMultiplayerId
	.type	 GetMultiplayerId,function
	.thumb_func
GetMultiplayerId:
	push	{lr}
	ldr	r0, .L440
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L437	@cond_branch
	ldr	r0, .L440+0x4
	ldr	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1e
	b	.L439
.L441:
	.align	2, 0
.L440:
	.word	gWirelessCommType
	.word	0x4000128
.L437:
	bl	Rfu_GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L439:
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 GetMultiplayerId,.Lfe45-GetMultiplayerId
	.align	2, 0
	.globl	bitmask_all_link_players_but_self
	.type	 bitmask_all_link_players_but_self,function
	.thumb_func
bitmask_all_link_players_but_self:
	push	{lr}
	bl	GetMultiplayerId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	lsl	r0, r0, r1
	mov	r1, #0xf
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 bitmask_all_link_players_but_self,.Lfe46-bitmask_all_link_players_but_self
	.align	2, 0
	.globl	SendBlock
	.type	 SendBlock,function
	.thumb_func
SendBlock:
	push	{lr}
	add	r3, r1, #0
	lsl	r2, r2, #0x10
	lsr	r1, r2, #0x10
	ldr	r0, .L448
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L444	@cond_branch
	add	r0, r3, #0
	bl	InitBlockSend
	b	.L447
.L449:
	.align	2, 0
.L448:
	.word	gWirelessCommType
.L444:
	add	r0, r3, #0
	bl	Rfu_InitBlockSend
.L447:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 SendBlock,.Lfe47-SendBlock
	.align	2, 0
	.globl	SendBlockRequest
	.type	 SendBlockRequest,function
	.thumb_func
SendBlockRequest:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r2, r1, #0
	ldr	r0, .L454
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L451	@cond_branch
	add	r0, r1, #0
	bl	Rfu_SendBlockRequest
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L453
.L455:
	.align	2, 0
.L454:
	.word	gWirelessCommType
.L451:
	ldr	r0, .L456
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L452	@cond_branch
	mov	r0, #0x0
	b	.L453
.L457:
	.align	2, 0
.L456:
	.word	gLinkCallback
.L452:
	ldr	r0, .L458
	strb	r2, [r0]
	ldr	r0, .L458+0x4
	bl	BuildSendCmd
	mov	r0, #0x1
.L453:
	pop	{r1}
	bx	r1
.L459:
	.align	2, 0
.L458:
	.word	gBlockRequestType
	.word	0xcccc
.Lfe48:
	.size	 SendBlockRequest,.Lfe48-SendBlockRequest
	.align	2, 0
	.globl	IsLinkTaskFinished
	.type	 IsLinkTaskFinished,function
	.thumb_func
IsLinkTaskFinished:
	push	{lr}
	ldr	r0, .L464
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L461	@cond_branch
	bl	IsLinkRfuTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L463
.L465:
	.align	2, 0
.L464:
	.word	gWirelessCommType
.L461:
	mov	r1, #0x0
	ldr	r0, .L466
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L462	@cond_branch
	mov	r1, #0x1
.L462:
	add	r0, r1, #0
.L463:
	pop	{r1}
	bx	r1
.L467:
	.align	2, 0
.L466:
	.word	gLinkCallback
.Lfe49:
	.size	 IsLinkTaskFinished,.Lfe49-IsLinkTaskFinished
	.align	2, 0
	.globl	GetBlockReceivedStatus
	.type	 GetBlockReceivedStatus,function
	.thumb_func
GetBlockReceivedStatus:
	push	{lr}
	ldr	r0, .L473
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L469	@cond_branch
	ldr	r2, .L473+0x4
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x3
	ldrb	r1, [r2, #0x2]
	lsl	r1, r1, #0x2
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x1
	orr	r0, r0, r1
	ldrb	r1, [r2]
	orr	r0, r0, r1
	b	.L472
.L474:
	.align	2, 0
.L473:
	.word	gWirelessCommType
	.word	gBlockReceivedStatus
.L469:
	bl	Rfu_GetBlockReceivedStatus
.L472:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe50:
	.size	 GetBlockReceivedStatus,.Lfe50-GetBlockReceivedStatus
	.align	2, 0
	.type	 SetBlockReceivedFlag,function
	.thumb_func
SetBlockReceivedFlag:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L478
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L476	@cond_branch
	add	r0, r1, #0
	bl	Rfu_SetBlockReceivedFlag
	b	.L477
.L479:
	.align	2, 0
.L478:
	.word	gWirelessCommType
.L476:
	ldr	r0, .L480
	add	r0, r1, r0
	mov	r1, #0x1
	strb	r1, [r0]
.L477:
	pop	{r0}
	bx	r0
.L481:
	.align	2, 0
.L480:
	.word	gBlockReceivedStatus
.Lfe51:
	.size	 SetBlockReceivedFlag,.Lfe51-SetBlockReceivedFlag
	.align	2, 0
	.globl	ResetBlockReceivedFlags
	.type	 ResetBlockReceivedFlags,function
	.thumb_func
ResetBlockReceivedFlags:
	push	{r4, lr}
	ldr	r0, .L495
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L483	@cond_branch
	mov	r4, #0x0
.L487:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	Rfu_ResetBlockReceivedFlag
	add	r4, r4, #0x1
	cmp	r4, #0x4
	ble	.L487	@cond_branch
	b	.L489
.L496:
	.align	2, 0
.L495:
	.word	gWirelessCommType
.L483:
	ldr	r1, .L497
	mov	r2, #0x0
	add	r0, r1, #0x3
.L493:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L493	@cond_branch
.L489:
	pop	{r4}
	pop	{r0}
	bx	r0
.L498:
	.align	2, 0
.L497:
	.word	gBlockReceivedStatus
.Lfe52:
	.size	 ResetBlockReceivedFlags,.Lfe52-ResetBlockReceivedFlags
	.align	2, 0
	.globl	ResetBlockReceivedFlag
	.type	 ResetBlockReceivedFlag,function
	.thumb_func
ResetBlockReceivedFlag:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L503
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L500	@cond_branch
	add	r0, r1, #0
	bl	Rfu_ResetBlockReceivedFlag
	b	.L501
.L504:
	.align	2, 0
.L503:
	.word	gWirelessCommType
.L500:
	ldr	r0, .L505
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L501	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
.L501:
	pop	{r0}
	bx	r0
.L506:
	.align	2, 0
.L505:
	.word	gBlockReceivedStatus
.Lfe53:
	.size	 ResetBlockReceivedFlag,.Lfe53-ResetBlockReceivedFlag
	.align	2, 0
	.globl	CheckShouldAdvanceLinkState
	.type	 CheckShouldAdvanceLinkState,function
	.thumb_func
CheckShouldAdvanceLinkState:
	push	{lr}
	ldr	r0, .L509
	ldr	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L508	@cond_branch
	mov	r0, #0x1c
	and	r1, r1, r0
	cmp	r1, #0x4
	bls	.L508	@cond_branch
	ldr	r1, .L509+0x4
	mov	r0, #0x1
	strb	r0, [r1]
.L508:
	pop	{r0}
	bx	r0
.L510:
	.align	2, 0
.L509:
	.word	gLinkStatus
	.word	gShouldAdvanceLinkState
.Lfe54:
	.size	 CheckShouldAdvanceLinkState,.Lfe54-CheckShouldAdvanceLinkState
	.align	2, 0
	.type	 LinkTestCalcBlockChecksum,function
	.thumb_func
LinkTestCalcBlockChecksum:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	mov	r3, #0x0
	mov	r2, #0x0
	lsr	r1, r1, #0x11
	cmp	r3, r1
	bcs	.L513	@cond_branch
.L515:
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	add	r0, r3, r0
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r1
	bcc	.L515	@cond_branch
.L513:
	add	r0, r3, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe55:
	.size	 LinkTestCalcBlockChecksum,.Lfe55-LinkTestCalcBlockChecksum
	.align	2, 0
	.type	 LinkTest_prnthexchar,function
	.thumb_func
LinkTest_prnthexchar:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	ldr	r4, .L518
	ldr	r3, [r4]
	lsl	r3, r3, #0xb
	mov	r5, #0xc0
	lsl	r5, r5, #0x13
	add	r3, r3, r5
	lsr	r2, r2, #0x13
	add	r2, r2, r1
	lsl	r2, r2, #0x1
	add	r2, r2, r3
	ldr	r3, [r4, #0x4]
	lsl	r3, r3, #0xc
	ldr	r1, [r4, #0x8]
	add	r1, r1, #0x1
	add	r0, r0, r1
	orr	r3, r3, r0
	strh	r3, [r2]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L519:
	.align	2, 0
.L518:
	.word	gLinkTestBGInfo
.Lfe56:
	.size	 LinkTest_prnthexchar,.Lfe56-LinkTest_prnthexchar
	.align	2, 0
	.type	 LinkTest_prntchar,function
	.thumb_func
LinkTest_prntchar:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	ldr	r4, .L521
	ldr	r3, [r4]
	lsl	r3, r3, #0xb
	mov	r5, #0xc0
	lsl	r5, r5, #0x13
	add	r3, r3, r5
	lsr	r2, r2, #0x13
	add	r2, r2, r1
	lsl	r2, r2, #0x1
	add	r2, r2, r3
	ldr	r3, [r4, #0x4]
	lsl	r3, r3, #0xc
	ldr	r1, [r4, #0x8]
	add	r1, r1, r0
	orr	r3, r3, r1
	strh	r3, [r2]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L522:
	.align	2, 0
.L521:
	.word	gLinkTestBGInfo
.Lfe57:
	.size	 LinkTest_prntchar,.Lfe57-LinkTest_prntchar
	.align	2, 0
	.type	 LinkTest_prnthex,function
	.thumb_func
LinkTest_prnthex:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r4, #0x0
	cmp	r4, r3
	bge	.L525	@cond_branch
	mov	r2, #0xf
.L527:
	mov	r0, sp
	add	r1, r0, r4
	add	r0, r5, #0
	and	r0, r0, r2
	strb	r0, [r1]
	lsr	r5, r5, #0x4
	add	r4, r4, #0x1
	cmp	r4, r3
	blt	.L527	@cond_branch
.L525:
	sub	r4, r3, #0x1
	cmp	r4, #0
	blt	.L530	@cond_branch
.L532:
	mov	r1, sp
	add	r0, r1, r4
	ldrb	r0, [r0]
	add	r1, r6, #0
	add	r2, r7, #0
	bl	LinkTest_prnthexchar
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L532	@cond_branch
.L530:
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 LinkTest_prnthex,.Lfe58-LinkTest_prnthex
	.align	2, 0
	.type	 LinkTest_prntint,function
	.thumb_func
LinkTest_prntint:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x10]
	cmp	r6, #0
	bge	.L535	@cond_branch
	str	r7, [sp, #0x10]
	neg	r6, r6
.L535:
	mov	r5, #0x0
	mov	r1, #0x1
	neg	r1, r1
	add	r1, r1, r8
	mov	sl, r1
	cmp	r5, r8
	bge	.L537	@cond_branch
.L539:
	mov	r0, sp
	add	r4, r0, r5
	add	r0, r6, #0
	mov	r1, #0xa
	bl	__modsi3
	strb	r0, [r4]
	add	r0, r6, #0
	mov	r1, #0xa
	bl	__divsi3
	add	r6, r0, #0
	add	r5, r5, #0x1
	cmp	r5, r8
	blt	.L539	@cond_branch
.L537:
	mov	r5, sl
	cmp	r5, #0
	blt	.L542	@cond_branch
.L544:
	mov	r1, sp
	add	r0, r1, r5
	ldrb	r0, [r0]
	add	r1, r7, #0
	mov	r2, r9
	bl	LinkTest_prnthexchar
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L544	@cond_branch
.L542:
	mov	r0, #0x1
	neg	r0, r0
	ldr	r1, [sp, #0x10]
	cmp	r1, r0
	beq	.L546	@cond_branch
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0xa
	mov	r2, r9
	bl	LinkTest_prnthexchar
.L546:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 LinkTest_prntint,.Lfe59-LinkTest_prntint
	.align	2, 0
	.type	 LinkTest_prntstr,function
	.thumb_func
LinkTest_prntstr:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r6, #0x0
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L549	@cond_branch
	add	r4, r3, #0
	lsl	r5, r2, #0x18
.L551:
	ldrb	r0, [r4]
	cmp	r0, #0xa
	bne	.L552	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r5, r5, r0
	mov	r6, #0x0
	b	.L550
.L552:
	ldrb	r0, [r4]
	add	r1, r7, r6
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsr	r2, r5, #0x18
	bl	LinkTest_prntchar
	add	r6, r6, #0x1
.L550:
	add	r4, r4, #0x1
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L551	@cond_branch
.L549:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 LinkTest_prntstr,.Lfe60-LinkTest_prntstr
	.align	2, 0
	.type	 LinkCB_RequestPlayerDataExchange,function
	.thumb_func
LinkCB_RequestPlayerDataExchange:
	push	{lr}
	ldr	r0, .L557
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L556	@cond_branch
	ldr	r0, .L557+0x4
	bl	BuildSendCmd
.L556:
	ldr	r1, .L557+0x8
	mov	r0, #0x0
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L558:
	.align	2, 0
.L557:
	.word	gLinkStatus
	.word	0x2222
	.word	gLinkCallback
.Lfe61:
	.size	 LinkCB_RequestPlayerDataExchange,.Lfe61-LinkCB_RequestPlayerDataExchange
	.align	2, 0
	.type	 Task_PrintTestData,function
	.thumb_func
Task_PrintTestData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x20
	ldr	r1, .L565
	mov	r0, sp
	bl	strcpy
	mov	r0, sp
	mov	r1, #0x5
	mov	r2, #0x2
	bl	LinkTest_prntstr
	ldr	r0, .L565+0x4
	ldrb	r0, [r0]
	mov	r1, #0x2
	mov	r2, #0x1
	mov	r3, #0x2
	bl	LinkTest_prnthex
	ldr	r4, .L565+0x8
	ldr	r0, [r4]
	mov	r1, #0xf
	mov	r2, #0x1
	mov	r3, #0x8
	bl	LinkTest_prnthex
	ldr	r0, .L565+0xc
	ldrb	r0, [r0, #0x1]
	mov	r1, #0x2
	mov	r2, #0xa
	mov	r3, #0x2
	bl	LinkTest_prnthex
	ldr	r0, [r4]
	mov	r1, #0x1c
	and	r0, r0, r1
	lsr	r0, r0, #0x2
	mov	r1, #0xf
	mov	r2, #0xa
	mov	r3, #0x2
	bl	LinkTest_prnthex
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0xf
	mov	r2, #0xc
	mov	r3, #0x2
	bl	LinkTest_prnthex
	ldr	r0, .L565+0x10
	ldrb	r0, [r0]
	mov	r1, #0x19
	mov	r2, #0x1
	mov	r3, #0x2
	bl	LinkTest_prnthex
	ldr	r0, .L565+0x14
	ldrb	r0, [r0]
	mov	r1, #0x19
	mov	r2, #0x2
	mov	r3, #0x2
	bl	LinkTest_prnthex
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0xf
	mov	r2, #0x5
	mov	r3, #0x2
	bl	LinkTest_prnthex
	ldr	r0, .L565+0x18
	ldr	r0, [r0]
	mov	r1, #0x2
	mov	r2, #0xc
	mov	r3, #0x8
	bl	LinkTest_prnthex
	ldr	r0, .L565+0x1c
	ldr	r0, [r0]
	mov	r1, #0x2
	mov	r2, #0xd
	mov	r3, #0x8
	bl	LinkTest_prnthex
	bl	GetSioMultiSI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x19
	mov	r2, #0x5
	mov	r3, #0x1
	bl	LinkTest_prnthex
	bl	IsSioMultiMaster
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x19
	mov	r2, #0x6
	mov	r3, #0x1
	bl	LinkTest_prnthex
	bl	IsLinkConnectionEstablished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x19
	mov	r2, #0x7
	mov	r3, #0x1
	bl	LinkTest_prnthex
	bl	HasLinkErrorOccurred
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x19
	mov	r2, #0x8
	mov	r3, #0x1
	bl	LinkTest_prnthex
	mov	r6, #0x0
	mov	r5, #0x80
	lsl	r5, r5, #0x13
	ldr	r4, .L565+0x20
.L563:
	ldrh	r0, [r4]
	lsr	r2, r5, #0x18
	mov	r1, #0xa
	mov	r3, #0x4
	bl	LinkTest_prnthex
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r5, r5, r0
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L563	@cond_branch
	add	sp, sp, #0x20
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L566:
	.align	2, 0
.L565:
	.word	sASCIITestPrint
	.word	gShouldAdvanceLinkState
	.word	gLinkStatus
	.word	gLink
	.word	gLastSendQueueCount
	.word	gLastRecvQueueCount
	.word	gLinkDebugSeed
	.word	gLinkDebugFlags
	.word	gLinkTestBlockChecksums
.Lfe62:
	.size	 Task_PrintTestData,.Lfe62-Task_PrintTestData
	.align	2, 0
	.globl	SetLinkDebugValues
	.type	 SetLinkDebugValues,function
	.thumb_func
SetLinkDebugValues:
	ldr	r2, .L568
	str	r0, [r2]
	ldr	r0, .L568+0x4
	str	r1, [r0]
	bx	lr
.L569:
	.align	2, 0
.L568:
	.word	gLinkDebugSeed
	.word	gLinkDebugFlags
.Lfe63:
	.size	 SetLinkDebugValues,.Lfe63-SetLinkDebugValues
	.align	2, 0
	.globl	GetSavedLinkPlayerCountAsBitFlags
	.type	 GetSavedLinkPlayerCountAsBitFlags,function
	.thumb_func
GetSavedLinkPlayerCountAsBitFlags:
	push	{r4, lr}
	mov	r1, #0x0
	mov	r2, #0x0
	ldr	r0, .L576
	ldrb	r0, [r0]
	cmp	r1, r0
	bge	.L572	@cond_branch
	mov	r4, #0x1
	add	r3, r0, #0
.L574:
	add	r0, r4, #0
	lsl	r0, r0, r2
	orr	r1, r1, r0
	lsl	r0, r1, #0x18
	lsr	r1, r0, #0x18
	add	r2, r2, #0x1
	cmp	r2, r3
	blt	.L574	@cond_branch
.L572:
	add	r0, r1, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L577:
	.align	2, 0
.L576:
	.word	gSavedLinkPlayerCount
.Lfe64:
	.size	 GetSavedLinkPlayerCountAsBitFlags,.Lfe64-GetSavedLinkPlayerCountAsBitFlags
	.align	2, 0
	.globl	GetLinkPlayerCountAsBitFlags
	.type	 GetLinkPlayerCountAsBitFlags,function
	.thumb_func
GetLinkPlayerCountAsBitFlags:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	mov	r5, #0x0
	mov	r6, #0x1
	b	.L579
.L582:
	add	r0, r6, #0
	lsl	r0, r0, r5
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
	add	r5, r5, #0x1
.L579:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	blt	.L582	@cond_branch
	add	r0, r4, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 GetLinkPlayerCountAsBitFlags,.Lfe65-GetLinkPlayerCountAsBitFlags
	.align	2, 0
	.globl	SaveLinkPlayers
	.type	 SaveLinkPlayers,function
	.thumb_func
SaveLinkPlayers:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L590
	strb	r0, [r1]
	bl	GetMultiplayerId
	ldr	r1, .L590+0x4
	strb	r0, [r1]
	ldr	r4, .L590+0x8
	ldr	r3, .L590+0xc
	mov	r2, #0x4
.L588:
	add	r0, r3, #0
	add	r1, r4, #0
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldr	r1, [r1]
	str	r1, [r0]
	add	r4, r4, #0x1c
	add	r3, r3, #0x1c
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L588	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L591:
	.align	2, 0
.L590:
	.word	gSavedLinkPlayerCount
	.word	gSavedMultiplayerId
	.word	gLinkPlayers
	.word	gSavedLinkPlayers
.Lfe66:
	.size	 SaveLinkPlayers,.Lfe66-SaveLinkPlayers
	.align	2, 0
	.globl	GetSavedPlayerCount
	.type	 GetSavedPlayerCount,function
	.thumb_func
GetSavedPlayerCount:
	ldr	r0, .L593
	ldrb	r0, [r0]
	bx	lr
.L594:
	.align	2, 0
.L593:
	.word	gSavedLinkPlayerCount
.Lfe67:
	.size	 GetSavedPlayerCount,.Lfe67-GetSavedPlayerCount
	.align	2, 0
	.type	 GetSavedMultiplayerId,function
	.thumb_func
GetSavedMultiplayerId:
	ldr	r0, .L596
	ldrb	r0, [r0]
	bx	lr
.L597:
	.align	2, 0
.L596:
	.word	gSavedMultiplayerId
.Lfe68:
	.size	 GetSavedMultiplayerId,.Lfe68-GetSavedMultiplayerId
	.align	2, 0
	.globl	DoesLinkPlayerCountMatchSaved
	.type	 DoesLinkPlayerCountMatchSaved,function
	.thumb_func
DoesLinkPlayerCountMatchSaved:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r3, #0x0
	ldr	r0, .L611
	ldrb	r1, [r0]
	mov	r9, r0
	cmp	r3, r1
	bge	.L600	@cond_branch
	ldr	r0, .L611+0x4
	mov	ip, r0
	ldr	r0, .L611+0x8
	ldr	r2, .L611+0xc
	mov	r8, r2
	ldr	r7, .L611+0x10
	mov	r6, ip
	add	r6, r6, #0x14
	add	r5, r0, #0x4
	mov	r4, #0x0
	add	r2, r1, #0
.L602:
	mov	r0, ip
	add	r0, r0, #0x4
	add	r0, r4, r0
	ldr	r1, [r0]
	ldr	r0, [r5]
	cmp	r1, r0
	bne	.L601	@cond_branch
	ldrh	r0, [r7]
	cmp	r0, r8
	bne	.L604	@cond_branch
	add	r1, r0, #0
	ldr	r0, [r6]
	cmp	r1, r0
	bne	.L601	@cond_branch
.L604:
	add	r3, r3, #0x1
.L601:
	add	r6, r6, #0x1c
	add	r5, r5, #0x1c
	add	r4, r4, #0x1c
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L602	@cond_branch
.L600:
	mov	r0, r9
	ldrb	r0, [r0]
	cmp	r3, r0
	bne	.L608	@cond_branch
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r9
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L608	@cond_branch
	mov	r0, #0x1
	b	.L610
.L612:
	.align	2, 0
.L611:
	.word	gSavedLinkPlayerCount
	.word	gLinkPlayers
	.word	gSavedLinkPlayers
	.word	0x2288
	.word	gLinkType
.L608:
	mov	r0, #0x0
.L610:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe69:
	.size	 DoesLinkPlayerCountMatchSaved,.Lfe69-DoesLinkPlayerCountMatchSaved
	.align	2, 0
	.globl	ClearSavedLinkPlayers
	.type	 ClearSavedLinkPlayers,function
	.thumb_func
ClearSavedLinkPlayers:
	push	{r4, r5, lr}
	ldr	r5, .L619
	mov	r4, #0x3
.L617:
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x1c
	bl	CpuSet
	add	r5, r5, #0x1c
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L617	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L620:
	.align	2, 0
.L619:
	.word	gSavedLinkPlayers
.Lfe70:
	.size	 ClearSavedLinkPlayers,.Lfe70-ClearSavedLinkPlayers
	.align	2, 0
	.globl	CheckLinkPlayersMatchSaved
	.type	 CheckLinkPlayersMatchSaved,function
	.thumb_func
CheckLinkPlayersMatchSaved:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r4, #0x0
	ldr	r0, .L629
	ldrb	r0, [r0]
	cmp	r4, r0
	bcs	.L623	@cond_branch
	ldr	r6, .L629+0x4
	ldr	r5, .L629+0x8
	mov	r0, #0x8
	add	r0, r0, r6
	mov	r8, r0
	add	r7, r5, #0
	add	r7, r7, #0x8
.L625:
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r2, r0, #0x2
	add	r1, r6, #0x4
	add	r1, r2, r1
	add	r0, r5, #0x4
	add	r0, r2, r0
	ldr	r1, [r1]
	ldr	r0, [r0]
	cmp	r1, r0
	bne	.L627	@cond_branch
	mov	r1, r8
	add	r0, r2, r1
	add	r1, r2, r7
	bl	StringCompare
	cmp	r0, #0
	beq	.L624	@cond_branch
.L627:
	ldr	r1, .L629+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	bl	CloseLink
	ldr	r0, .L629+0x10
	bl	SetMainCallback2
.L624:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L629
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L625	@cond_branch
.L623:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L630:
	.align	2, 0
.L629:
	.word	gSavedLinkPlayerCount
	.word	gSavedLinkPlayers
	.word	gLinkPlayers
	.word	gLinkErrorOccurred
	.word	CB2_LinkError
.Lfe71:
	.size	 CheckLinkPlayersMatchSaved,.Lfe71-CheckLinkPlayersMatchSaved
	.align	2, 0
	.globl	ResetLinkPlayerCount
	.type	 ResetLinkPlayerCount,function
	.thumb_func
ResetLinkPlayerCount:
	ldr	r0, .L632
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L632+0x4
	strb	r1, [r0]
	bx	lr
.L633:
	.align	2, 0
.L632:
	.word	gSavedLinkPlayerCount
	.word	gSavedMultiplayerId
.Lfe72:
	.size	 ResetLinkPlayerCount,.Lfe72-ResetLinkPlayerCount
	.align	2, 0
	.globl	GetLinkPlayerCount_2
	.type	 GetLinkPlayerCount_2,function
	.thumb_func
GetLinkPlayerCount_2:
	ldr	r0, .L635
	ldr	r0, [r0]
	mov	r1, #0x1c
	and	r0, r0, r1
	lsr	r0, r0, #0x2
	bx	lr
.L636:
	.align	2, 0
.L635:
	.word	gLinkStatus
.Lfe73:
	.size	 GetLinkPlayerCount_2,.Lfe73-GetLinkPlayerCount_2
	.align	2, 0
	.globl	IsLinkMaster
	.type	 IsLinkMaster,function
	.thumb_func
IsLinkMaster:
	push	{lr}
	ldr	r0, .L641
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L638	@cond_branch
	ldr	r0, .L641+0x4
	ldr	r0, [r0]
	lsr	r0, r0, #0x5
	mov	r1, #0x1
	and	r0, r0, r1
	b	.L640
.L642:
	.align	2, 0
.L641:
	.word	gWirelessCommType
	.word	gLinkStatus
.L638:
	bl	Rfu_IsMaster
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L640:
	pop	{r1}
	bx	r1
.Lfe74:
	.size	 IsLinkMaster,.Lfe74-IsLinkMaster
	.align	2, 0
	.type	 GetDummy2,function
	.thumb_func
GetDummy2:
	ldr	r0, .L644
	ldrb	r0, [r0]
	bx	lr
.L645:
	.align	2, 0
.L644:
	.word	sDummy2
.Lfe75:
	.size	 GetDummy2,.Lfe75-GetDummy2
	.align	2, 0
	.globl	SetCloseLinkCallbackAndType
	.type	 SetCloseLinkCallbackAndType,function
	.thumb_func
SetCloseLinkCallbackAndType:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r0, .L650
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L647	@cond_branch
	bl	Rfu_SetCloseLinkCallback
	b	.L648
.L651:
	.align	2, 0
.L650:
	.word	gWirelessCommType
.L647:
	ldr	r2, .L652
	ldr	r1, [r2]
	cmp	r1, #0
	bne	.L648	@cond_branch
	ldr	r0, .L652+0x4
	str	r0, [r2]
	ldr	r0, .L652+0x8
	strb	r1, [r0]
	ldr	r0, .L652+0xc
	strh	r3, [r0]
.L648:
	pop	{r0}
	bx	r0
.L653:
	.align	2, 0
.L652:
	.word	gLinkCallback
	.word	LinkCB_ReadyCloseLink
	.word	gLinkDummy1
	.word	gReadyCloseLinkType
.Lfe76:
	.size	 SetCloseLinkCallbackAndType,.Lfe76-SetCloseLinkCallbackAndType
	.align	2, 0
	.globl	SetCloseLinkCallback
	.type	 SetCloseLinkCallback,function
	.thumb_func
SetCloseLinkCallback:
	push	{lr}
	ldr	r0, .L659
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L655	@cond_branch
	bl	Rfu_SetCloseLinkCallback
	b	.L656
.L660:
	.align	2, 0
.L659:
	.word	gWirelessCommType
.L655:
	ldr	r2, .L661
	ldr	r1, [r2]
	cmp	r1, #0
	beq	.L657	@cond_branch
	ldr	r1, .L661+0x4
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L656
.L662:
	.align	2, 0
.L661:
	.word	gLinkCallback
	.word	sReadyCloseLinkAttempts
.L657:
	ldr	r0, .L663
	str	r0, [r2]
	ldr	r0, .L663+0x4
	strb	r1, [r0]
	ldr	r0, .L663+0x8
	strh	r1, [r0]
.L656:
	pop	{r0}
	bx	r0
.L664:
	.align	2, 0
.L663:
	.word	LinkCB_ReadyCloseLink
	.word	gLinkDummy1
	.word	gReadyCloseLinkType
.Lfe77:
	.size	 SetCloseLinkCallback,.Lfe77-SetCloseLinkCallback
	.align	2, 0
	.type	 LinkCB_ReadyCloseLink,function
	.thumb_func
LinkCB_ReadyCloseLink:
	push	{lr}
	ldr	r0, .L667
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L666	@cond_branch
	ldr	r0, .L667+0x4
	bl	BuildSendCmd
	ldr	r1, .L667+0x8
	ldr	r0, .L667+0xc
	str	r0, [r1]
.L666:
	pop	{r0}
	bx	r0
.L668:
	.align	2, 0
.L667:
	.word	gLastRecvQueueCount
	.word	0x5fff
	.word	gLinkCallback
	.word	LinkCB_WaitCloseLink
.Lfe78:
	.size	 LinkCB_ReadyCloseLink,.Lfe78-LinkCB_ReadyCloseLink
	.align	2, 0
	.type	 LinkCB_WaitCloseLink,function
	.thumb_func
LinkCB_WaitCloseLink:
	push	{r4, lr}
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r3, #0x0
	mov	r1, #0x0
	cmp	r3, r2
	bge	.L671	@cond_branch
	ldr	r4, .L677
.L673:
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L672	@cond_branch
	add	r3, r3, #0x1
.L672:
	add	r1, r1, #0x1
	cmp	r1, r2
	blt	.L673	@cond_branch
.L671:
	cmp	r3, r2
	bne	.L676	@cond_branch
	ldr	r2, .L677+0x4
	ldr	r0, [r2]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L677+0x8
	mov	r4, #0x1
	strb	r4, [r0]
	bl	CloseLink
	ldr	r1, .L677+0xc
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r0, .L677+0x10
	strb	r4, [r0]
.L676:
	pop	{r4}
	pop	{r0}
	bx	r0
.L678:
	.align	2, 0
.L677:
	.word	gReadyToCloseLink
	.word	gBattleTypeFlags
	.word	gLinkVSyncDisabled
	.word	gLinkCallback
	.word	gLinkDummy1
.Lfe79:
	.size	 LinkCB_WaitCloseLink,.Lfe79-LinkCB_WaitCloseLink
	.align	2, 0
	.globl	SetCloseLinkCallbackHandleJP
	.type	 SetCloseLinkCallbackHandleJP,function
	.thumb_func
SetCloseLinkCallbackHandleJP:
	push	{lr}
	ldr	r0, .L684
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L680	@cond_branch
	bl	Rfu_SetCloseLinkCallback
	b	.L681
.L685:
	.align	2, 0
.L684:
	.word	gWirelessCommType
.L680:
	ldr	r2, .L686
	ldr	r1, [r2]
	cmp	r1, #0
	beq	.L682	@cond_branch
	ldr	r1, .L686+0x4
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L681
.L687:
	.align	2, 0
.L686:
	.word	gLinkCallback
	.word	sReadyCloseLinkAttempts
.L682:
	ldr	r0, .L688
	str	r0, [r2]
	ldr	r0, .L688+0x4
	strb	r1, [r0]
	ldr	r0, .L688+0x8
	strh	r1, [r0]
.L681:
	pop	{r0}
	bx	r0
.L689:
	.align	2, 0
.L688:
	.word	LinkCB_ReadyCloseLinkWithJP
	.word	gLinkDummy1
	.word	gReadyCloseLinkType
.Lfe80:
	.size	 SetCloseLinkCallbackHandleJP,.Lfe80-SetCloseLinkCallbackHandleJP
	.align	2, 0
	.type	 LinkCB_ReadyCloseLinkWithJP,function
	.thumb_func
LinkCB_ReadyCloseLinkWithJP:
	push	{lr}
	ldr	r0, .L692
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L691	@cond_branch
	ldr	r0, .L692+0x4
	bl	BuildSendCmd
	ldr	r1, .L692+0x8
	ldr	r0, .L692+0xc
	str	r0, [r1]
.L691:
	pop	{r0}
	bx	r0
.L693:
	.align	2, 0
.L692:
	.word	gLastRecvQueueCount
	.word	0x5fff
	.word	gLinkCallback
	.word	LinkCB_WaitCloseLinkWithJP
.Lfe81:
	.size	 LinkCB_ReadyCloseLinkWithJP,.Lfe81-LinkCB_ReadyCloseLinkWithJP
	.align	2, 0
	.type	 LinkCB_WaitCloseLinkWithJP,function
	.thumb_func
LinkCB_WaitCloseLinkWithJP:
	push	{r4, r5, lr}
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r1, #0x0
	mov	r2, #0x0
	cmp	r1, r3
	bge	.L696	@cond_branch
	ldr	r5, .L705
	ldr	r4, .L705+0x4
.L698:
	ldrh	r0, [r4, #0x1a]
	cmp	r0, #0x1
	beq	.L704	@cond_branch
	add	r0, r2, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L697	@cond_branch
.L704:
	add	r1, r1, #0x1
.L697:
	add	r4, r4, #0x1c
	add	r2, r2, #0x1
	cmp	r2, r3
	blt	.L698	@cond_branch
.L696:
	cmp	r1, r3
	bne	.L703	@cond_branch
	ldr	r2, .L705+0x8
	ldr	r0, [r2]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L705+0xc
	mov	r4, #0x1
	strb	r4, [r0]
	bl	CloseLink
	ldr	r1, .L705+0x10
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r0, .L705+0x14
	strb	r4, [r0]
.L703:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L706:
	.align	2, 0
.L705:
	.word	gReadyToCloseLink
	.word	gLinkPlayers
	.word	gBattleTypeFlags
	.word	gLinkVSyncDisabled
	.word	gLinkCallback
	.word	gLinkDummy1
.Lfe82:
	.size	 LinkCB_WaitCloseLinkWithJP,.Lfe82-LinkCB_WaitCloseLinkWithJP
	.align	2, 0
	.globl	SetLinkStandbyCallback
	.type	 SetLinkStandbyCallback,function
	.thumb_func
SetLinkStandbyCallback:
	push	{lr}
	ldr	r0, .L711
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L708	@cond_branch
	bl	Rfu_SetLinkStandbyCallback
	b	.L709
.L712:
	.align	2, 0
.L711:
	.word	gWirelessCommType
.L708:
	ldr	r1, .L713
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L710	@cond_branch
	ldr	r0, .L713+0x4
	str	r0, [r1]
.L710:
	ldr	r1, .L713+0x8
	mov	r0, #0x0
	strb	r0, [r1]
.L709:
	pop	{r0}
	bx	r0
.L714:
	.align	2, 0
.L713:
	.word	gLinkCallback
	.word	LinkCB_Standby
	.word	gLinkDummy1
.Lfe83:
	.size	 SetLinkStandbyCallback,.Lfe83-SetLinkStandbyCallback
	.align	2, 0
	.type	 LinkCB_Standby,function
	.thumb_func
LinkCB_Standby:
	push	{lr}
	ldr	r0, .L717
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L716	@cond_branch
	ldr	r0, .L717+0x4
	bl	BuildSendCmd
	ldr	r1, .L717+0x8
	ldr	r0, .L717+0xc
	str	r0, [r1]
.L716:
	pop	{r0}
	bx	r0
.L718:
	.align	2, 0
.L717:
	.word	gLastRecvQueueCount
	.word	0x2ffe
	.word	gLinkCallback
	.word	LinkCB_StandbyForAll
.Lfe84:
	.size	 LinkCB_Standby,.Lfe84-LinkCB_Standby
	.align	2, 0
	.type	 LinkCB_StandbyForAll,function
	.thumb_func
LinkCB_StandbyForAll:
	push	{r4, lr}
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	cmp	r1, r2
	bcs	.L721	@cond_branch
	ldr	r3, .L732
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L721	@cond_branch
.L722:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	bcs	.L721	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L722	@cond_branch
.L721:
	cmp	r1, r2
	bne	.L726	@cond_branch
	mov	r1, #0x0
	ldr	r4, .L732+0x4
	ldr	r3, .L732
	mov	r2, #0x0
.L730:
	add	r0, r1, r3
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bls	.L730	@cond_branch
	mov	r0, #0x0
	str	r0, [r4]
.L726:
	pop	{r4}
	pop	{r0}
	bx	r0
.L733:
	.align	2, 0
.L732:
	.word	gReadyToExitStandby
	.word	gLinkCallback
.Lfe85:
	.size	 LinkCB_StandbyForAll,.Lfe85-LinkCB_StandbyForAll
	.align	2, 0
	.type	 CheckErrorStatus,function
	.thumb_func
CheckErrorStatus:
	push	{lr}
	ldr	r0, .L737
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L735	@cond_branch
	ldr	r0, .L737+0x4
	ldr	r2, [r0]
	mov	r0, #0xfe
	lsl	r0, r0, #0xb
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L735	@cond_branch
	ldr	r0, .L737+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L736	@cond_branch
	ldr	r1, .L737+0xc
	str	r2, [r1]
	ldr	r0, .L737+0x10
	ldrb	r0, [r0]
	strb	r0, [r1, #0x4]
	ldr	r0, .L737+0x14
	ldrb	r0, [r0]
	strb	r0, [r1, #0x5]
	ldr	r0, .L737+0x18
	bl	SetMainCallback2
.L736:
	ldr	r1, .L737+0x1c
	mov	r0, #0x1
	strb	r0, [r1]
	bl	CloseLink
.L735:
	pop	{r0}
	bx	r0
.L738:
	.align	2, 0
.L737:
	.word	gLinkOpen
	.word	gLinkStatus
	.word	gSuppressLinkErrorMessage
	.word	sLinkErrorBuffer
	.word	gLastRecvQueueCount
	.word	gLastSendQueueCount
	.word	CB2_LinkError
	.word	gLinkErrorOccurred
.Lfe86:
	.size	 CheckErrorStatus,.Lfe86-CheckErrorStatus
	.align	2, 0
	.globl	BufferLinkErrorInfo
	.type	 BufferLinkErrorInfo,function
	.thumb_func
BufferLinkErrorInfo:
	push	{r4, lr}
	ldr	r4, .L740
	str	r0, [r4]
	strb	r1, [r4, #0x5]
	strb	r2, [r4, #0x4]
	strb	r3, [r4, #0x6]
	pop	{r4}
	pop	{r0}
	bx	r0
.L741:
	.align	2, 0
.L740:
	.word	sLinkErrorBuffer
.Lfe87:
	.size	 BufferLinkErrorInfo,.Lfe87-BufferLinkErrorInfo
	.align	2, 0
	.globl	CB2_LinkError
	.type	 CB2_LinkError,function
	.thumb_func
CB2_LinkError:
	push	{r4, lr}
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L746
	bl	m4aMPlayStop
	ldr	r0, .L746+0x4
	bl	m4aMPlayStop
	ldr	r0, .L746+0x8
	bl	m4aMPlayStop
	ldr	r0, .L746+0xc
	mov	r1, #0xe0
	lsl	r1, r1, #0x9
	bl	InitHeap
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetPaletteFadeControl
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x2
	bl	FillPalette
	bl	ResetTasks
	bl	ScanlineEffect_Stop
	ldr	r1, .L746+0x10
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L743	@cond_branch
	ldr	r0, .L746+0x14
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	bne	.L744	@cond_branch
	mov	r0, #0x3
	strb	r0, [r1]
.L744:
	bl	ResetLinkRfuGFLayer
.L743:
	ldr	r0, .L746+0x18
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L746+0x1c
	mov	r0, #0x0
	mov	r2, #0x2
	bl	InitBgsFromTemplates
	ldr	r4, .L746+0x20
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	bl	Alloc
	add	r1, r0, #0
	str	r1, [r4]
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	ldr	r0, .L746+0x24
	bl	InitWindows
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L745	@cond_branch
	bl	DeactivateAllTextPrinters
	bl	ResetTempTileDataBuffers
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x10
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x16
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r1, #0xe0
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	ClearGpuRegBits
	ldr	r0, .L746+0x28
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L746+0x2c
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L746+0x30
	mov	r1, #0x0
	bl	CreateTask
	bl	StopMapMusic
	ldr	r1, .L746+0x34
	mov	r0, #0x0
	str	r0, [r1]
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	ldr	r0, .L746+0x38
	bl	SetMainCallback2
.L745:
	pop	{r4}
	pop	{r0}
	bx	r0
.L747:
	.align	2, 0
.L746:
	.word	gMPlayInfo_SE1
	.word	gMPlayInfo_SE2
	.word	gMPlayInfo_SE3
	.word	gHeap
	.word	gWirelessCommType
	.word	sLinkErrorBuffer
	.word	VBlankCB_LinkError
	.word	sLinkErrorBgTemplates
	.word	sLinkErrorBgTilemapBuffer
	.word	sLinkErrorWindowTemplates
	.word	gUnknown_0860F074
	.word	gSoftResetDisabled
	.word	Task_DestroySelf
	.word	gMain
	.word	CB2_PrintErrorMessage
.Lfe88:
	.size	 CB2_LinkError,.Lfe88-CB2_LinkError
	.align	2, 0
	.type	 sub_800B080,function
	.thumb_func
sub_800B080:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	ldr	r1, .L749
	mov	r0, #0x0
	mov	r2, #0x20
	mov	r3, #0x0
	bl	LoadBgTiles
	ldr	r1, .L749+0x4
	mov	r5, #0x0
	str	r5, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r1, .L749+0x8
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	ldr	r0, .L749+0xc
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x2
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldr	r4, .L749+0x10
	str	r4, [sp]
	str	r5, [sp, #0x4]
	ldr	r0, .L749+0x14
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x3
	mov	r2, #0x2
	mov	r3, #0x6
	bl	AddTextPrinterParameterized3
	str	r4, [sp]
	str	r5, [sp, #0x4]
	ldr	r0, .L749+0x18
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x3
	mov	r2, #0x2
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x0
	bl	CopyWindowToVram
	mov	r0, #0x2
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L750:
	.align	2, 0
.L749:
	.word	s2BlankTilesGfx
	.word	sWirelessLinkDisplayGfx
	.word	sWirelessLinkDisplayTilemap
	.word	sWirelessLinkDisplayPal
	.word	sTextColors
	.word	gText_CommErrorEllipsis
	.word	gText_MoveCloserToLinkPartner
.Lfe89:
	.size	 sub_800B080,.Lfe89-sub_800B080
	.align	2, 0
	.type	 sub_800B138,function
	.thumb_func
sub_800B138:
	push	{lr}
	add	sp, sp, #-0xc
	ldr	r1, .L752
	mov	r0, #0x0
	mov	r2, #0x20
	mov	r3, #0x0
	bl	LoadBgTiles
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x2
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldr	r0, .L752+0x4
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	ldr	r0, .L752+0x8
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x2
	mov	r3, #0x0
	bl	AddTextPrinterParameterized3
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x1
	mov	r1, #0x0
	bl	CopyWindowToVram
	mov	r0, #0x2
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L753:
	.align	2, 0
.L752:
	.word	s2BlankTilesGfx
	.word	sTextColors
	.word	gText_CommErrorCheckConnections
.Lfe90:
	.size	 sub_800B138,.Lfe90-sub_800B138
	.align	2, 0
	.type	 CB2_PrintErrorMessage,function
	.thumb_func
CB2_PrintErrorMessage:
	push	{r4, lr}
	add	sp, sp, #-0xc
	ldr	r0, .L780
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1e
	beq	.L763	@cond_branch
	cmp	r0, #0x1e
	bgt	.L770	@cond_branch
	cmp	r0, #0
	beq	.L756	@cond_branch
	cmp	r0, #0x2
	beq	.L759	@cond_branch
	b	.L755
.L781:
	.align	2, 0
.L780:
	.word	gMain
.L770:
	cmp	r0, #0x5a
	beq	.L763	@cond_branch
	cmp	r0, #0x5a
	bgt	.L771	@cond_branch
	cmp	r0, #0x3c
	beq	.L762	@cond_branch
	b	.L755
.L771:
	cmp	r0, #0x82
	beq	.L764	@cond_branch
	b	.L755
.L756:
	ldr	r0, .L782
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	beq	.L757	@cond_branch
	bl	sub_800B080
	b	.L755
.L783:
	.align	2, 0
.L782:
	.word	sLinkErrorBuffer
.L757:
	bl	sub_800B138
	b	.L755
.L759:
	mov	r0, #0x0
	bl	ShowBg
	ldr	r0, .L784
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	beq	.L755	@cond_branch
	mov	r0, #0x1
	bl	ShowBg
	b	.L755
.L785:
	.align	2, 0
.L784:
	.word	sLinkErrorBuffer
.L762:
.L763:
	mov	r0, #0x16
	bl	PlaySE
	b	.L755
.L764:
	ldr	r0, .L786
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L765	@cond_branch
	ldr	r0, .L786+0x4
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	ldr	r0, .L786+0x8
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x3
	mov	r2, #0x2
	mov	r3, #0x14
	bl	AddTextPrinterParameterized3
	b	.L755
.L787:
	.align	2, 0
.L786:
	.word	gWirelessCommType
	.word	sTextColors
	.word	gText_ABtnTitleScreen
.L765:
	cmp	r0, #0x1
	bne	.L755	@cond_branch
	ldr	r0, .L788
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	ldr	r0, .L788+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x3
	mov	r2, #0x2
	mov	r3, #0x14
	bl	AddTextPrinterParameterized3
.L755:
	ldr	r0, .L788+0x8
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r0, r2
	ldrb	r1, [r1]
	cmp	r1, #0xa0
	bne	.L779	@cond_branch
	ldr	r4, .L788+0xc
	ldrb	r2, [r4]
	cmp	r2, #0x1
	bne	.L773	@cond_branch
	ldrh	r0, [r0, #0x2e]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L772	@cond_branch
	mov	r0, #0x15
	bl	PlaySE
	mov	r0, #0x0
	strb	r0, [r4]
	ldr	r1, .L788+0x10
	mov	r0, #0x0
	strb	r0, [r1, #0x6]
	bl	sub_81700F8
	b	.L772
.L789:
	.align	2, 0
.L788:
	.word	sTextColors
	.word	gText_ABtnRegistrationCounter
	.word	gMain
	.word	gWirelessCommType
	.word	sLinkErrorBuffer
.L773:
	cmp	r2, #0x2
	bne	.L772	@cond_branch
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L772	@cond_branch
	bl	rfu_REQ_stopMode
	bl	rfu_waitREQComplete
	bl	DoSoftReset
.L772:
	ldr	r0, .L790
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r0, r2
	ldrb	r1, [r1]
	cmp	r1, #0xa0
	beq	.L778	@cond_branch
.L779:
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r0, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L778:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L791:
	.align	2, 0
.L790:
	.word	gMain
.Lfe91:
	.size	 CB2_PrintErrorMessage,.Lfe91-CB2_PrintErrorMessage
	.align	2, 0
	.globl	GetSioMultiSI
	.type	 GetSioMultiSI,function
	.thumb_func
GetSioMultiSI:
	ldr	r0, .L793
	ldrh	r0, [r0]
	lsr	r0, r0, #0x2
	mov	r1, #0x1
	and	r0, r0, r1
	bx	lr
.L794:
	.align	2, 0
.L793:
	.word	0x4000128
.Lfe92:
	.size	 GetSioMultiSI,.Lfe92-GetSioMultiSI
	.align	2, 0
	.type	 IsSioMultiMaster,function
	.thumb_func
IsSioMultiMaster:
	push	{lr}
	mov	r3, #0x0
	ldr	r2, .L797
	ldrh	r1, [r2]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L796	@cond_branch
	ldrh	r1, [r2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L796	@cond_branch
	mov	r3, #0x1
.L796:
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.L798:
	.align	2, 0
.L797:
	.word	0x4000128
.Lfe93:
	.size	 IsSioMultiMaster,.Lfe93-IsSioMultiMaster
	.align	2, 0
	.globl	IsLinkConnectionEstablished
	.type	 IsLinkConnectionEstablished,function
	.thumb_func
IsLinkConnectionEstablished:
	ldr	r0, .L800
	ldr	r0, [r0]
	lsr	r0, r0, #0x6
	mov	r1, #0x1
	and	r0, r0, r1
	bx	lr
.L801:
	.align	2, 0
.L800:
	.word	gLinkStatus
.Lfe94:
	.size	 IsLinkConnectionEstablished,.Lfe94-IsLinkConnectionEstablished
	.align	2, 0
	.globl	SetSuppressLinkErrorMessage
	.type	 SetSuppressLinkErrorMessage,function
	.thumb_func
SetSuppressLinkErrorMessage:
	ldr	r1, .L803
	strb	r0, [r1]
	bx	lr
.L804:
	.align	2, 0
.L803:
	.word	gSuppressLinkErrorMessage
.Lfe95:
	.size	 SetSuppressLinkErrorMessage,.Lfe95-SetSuppressLinkErrorMessage
	.align	2, 0
	.globl	HasLinkErrorOccurred
	.type	 HasLinkErrorOccurred,function
	.thumb_func
HasLinkErrorOccurred:
	ldr	r0, .L806
	ldrb	r0, [r0]
	bx	lr
.L807:
	.align	2, 0
.L806:
	.word	gLinkErrorOccurred
.Lfe96:
	.size	 HasLinkErrorOccurred,.Lfe96-HasLinkErrorOccurred
	.align	2, 0
	.globl	sub_800B348
	.type	 sub_800B348,function
	.thumb_func
sub_800B348:
	push	{r4, r5, r6, lr}
	bl	InitLocalLinkPlayer
	ldr	r1, .L809
	add	r2, r1, #0
	add	r2, r2, #0x10
	ldr	r0, .L809+0x4
	ldmia	r0!, {r3, r4, r5}
	stmia	r2!, {r3, r4, r5}
	ldmia	r0!, {r3, r4, r6}
	stmia	r2!, {r3, r4, r6}
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r3, .L809+0x8
	add	r2, r1, #0
	add	r0, r3, #0
	ldmia	r0!, {r4, r5, r6}
	stmia	r2!, {r4, r5, r6}
	ldrh	r4, [r0]
	strh	r4, [r2]
	ldrb	r0, [r0, #0x2]
	strb	r0, [r2, #0x2]
	add	r0, r1, #0
	add	r0, r0, #0x2c
	ldmia	r3!, {r2, r5, r6}
	stmia	r0!, {r2, r5, r6}
	ldrh	r2, [r3]
	strh	r2, [r0]
	ldrb	r2, [r3, #0x2]
	strb	r2, [r0, #0x2]
	ldr	r0, .L809+0xc
	mov	r2, #0x3c
	bl	memcpy
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L810:
	.align	2, 0
.L809:
	.word	gLocalLinkPlayerBlock
	.word	gLocalLinkPlayer
	.word	sASCIIGameFreakInc
	.word	gBlockSendBuffer
.Lfe97:
	.size	 sub_800B348,.Lfe97-sub_800B348
	.align	2, 0
	.globl	LinkPlayerFromBlock
	.type	 LinkPlayerFromBlock,function
	.thumb_func
LinkPlayerFromBlock:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r0, #0x8
	ldr	r1, .L814
	add	r4, r2, r1
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	ldr	r0, .L814+0x4
	add	r2, r2, r0
	add	r1, r2, #0
	add	r0, r4, #0
	add	r0, r0, #0x10
	ldmia	r0!, {r3, r5, r6}
	stmia	r1!, {r3, r5, r6}
	ldmia	r0!, {r3, r5, r6}
	stmia	r1!, {r3, r5, r6}
	ldr	r0, [r0]
	str	r0, [r1]
	add	r0, r2, #0
	bl	sub_800B524
	ldr	r5, .L814+0x8
	add	r0, r4, #0
	add	r1, r5, #0
	bl	strcmp
	cmp	r0, #0
	bne	.L813	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x2c
	add	r1, r5, #0
	bl	strcmp
	cmp	r0, #0
	beq	.L812	@cond_branch
.L813:
	ldr	r0, .L814+0xc
	bl	SetMainCallback2
.L812:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L815:
	.align	2, 0
.L814:
	.word	gBlockRecvBuffer
	.word	gLinkPlayers
	.word	sASCIIGameFreakInc
	.word	CB2_LinkError
.Lfe98:
	.size	 LinkPlayerFromBlock,.Lfe98-LinkPlayerFromBlock
	.align	2, 0
	.globl	HandleLinkConnection
	.type	 HandleLinkConnection,function
	.thumb_func
HandleLinkConnection:
	push	{r4, r5, lr}
	ldr	r0, .L825
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L817	@cond_branch
	ldr	r0, .L825+0x4
	ldr	r1, .L825+0x8
	ldr	r2, .L825+0xc
	bl	LinkMain1
	ldr	r4, .L825+0x10
	str	r0, [r4]
	ldr	r0, .L825+0x14
	bl	LinkMain2
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L819	@cond_branch
	bl	sub_808766C
	cmp	r0, #0x1
	bne	.L819	@cond_branch
.L824:
	mov	r0, #0x1
	b	.L823
.L826:
	.align	2, 0
.L825:
	.word	gWirelessCommType
	.word	gShouldAdvanceLinkState
	.word	gSendCmd
	.word	gRecvCmds
	.word	gLinkStatus
	.word	gMain+0x2c
.L817:
	bl	sub_8010EC0
	add	r4, r0, #0
	bl	sub_8010F1C
	add	r5, r0, #0
	bl	sub_808766C
	cmp	r0, #0x1
	bne	.L819	@cond_branch
	cmp	r4, #0x1
	beq	.L824	@cond_branch
	bl	IsRfuRecvQueueEmpty
	cmp	r0, #0
	bne	.L824	@cond_branch
	cmp	r5, #0
	bne	.L824	@cond_branch
.L819:
	mov	r0, #0x0
.L823:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe99:
	.size	 HandleLinkConnection,.Lfe99-HandleLinkConnection
	.align	2, 0
	.globl	SetWirelessCommType1
	.type	 SetWirelessCommType1,function
	.thumb_func
SetWirelessCommType1:
	push	{lr}
	ldr	r0, .L829
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L828	@cond_branch
	ldr	r1, .L829+0x4
	mov	r0, #0x1
	strb	r0, [r1]
.L828:
	pop	{r0}
	bx	r0
.L830:
	.align	2, 0
.L829:
	.word	gReceivedRemoteLinkPlayers
	.word	gWirelessCommType
.Lfe100:
	.size	 SetWirelessCommType1,.Lfe100-SetWirelessCommType1
	.align	2, 0
	.type	 SetWirelessCommType0_Internal,function
	.thumb_func
SetWirelessCommType0_Internal:
	push	{lr}
	ldr	r0, .L833
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L832	@cond_branch
	ldr	r0, .L833+0x4
	strb	r1, [r0]
.L832:
	pop	{r0}
	bx	r0
.L834:
	.align	2, 0
.L833:
	.word	gReceivedRemoteLinkPlayers
	.word	gWirelessCommType
.Lfe101:
	.size	 SetWirelessCommType0_Internal,.Lfe101-SetWirelessCommType0_Internal
	.align	2, 0
	.globl	SetWirelessCommType0
	.type	 SetWirelessCommType0,function
	.thumb_func
SetWirelessCommType0:
	push	{lr}
	ldr	r0, .L837
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L836	@cond_branch
	ldr	r0, .L837+0x4
	strb	r1, [r0]
.L836:
	pop	{r0}
	bx	r0
.L838:
	.align	2, 0
.L837:
	.word	gReceivedRemoteLinkPlayers
	.word	gWirelessCommType
.Lfe102:
	.size	 SetWirelessCommType0,.Lfe102-SetWirelessCommType0
	.align	2, 0
	.globl	GetLinkRecvQueueLength
	.type	 GetLinkRecvQueueLength,function
	.thumb_func
GetLinkRecvQueueLength:
	push	{lr}
	ldr	r0, .L843
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L840	@cond_branch
	ldr	r0, .L843+0x4
	ldr	r1, .L843+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	b	.L842
.L844:
	.align	2, 0
.L843:
	.word	gWirelessCommType
	.word	gLink
	.word	0xfbd
.L840:
	bl	GetRfuRecvQueueLength
.L842:
	pop	{r1}
	bx	r1
.Lfe103:
	.size	 GetLinkRecvQueueLength,.Lfe103-GetLinkRecvQueueLength
	.align	2, 0
	.globl	sub_800B504
	.type	 sub_800B504,function
	.thumb_func
sub_800B504:
	push	{lr}
	bl	GetLinkRecvQueueLength
	cmp	r0, #0x2
	bhi	.L846	@cond_branch
	mov	r0, #0x0
	b	.L847
.L846:
	mov	r0, #0x1
.L847:
	pop	{r1}
	bx	r1
.Lfe104:
	.size	 sub_800B504,.Lfe104-sub_800B504
	.align	2, 0
	.globl	GetWirelessCommType
	.type	 GetWirelessCommType,function
	.thumb_func
GetWirelessCommType:
	ldr	r0, .L849
	ldrb	r0, [r0]
	bx	lr
.L850:
	.align	2, 0
.L849:
	.word	gWirelessCommType
.Lfe105:
	.size	 GetWirelessCommType,.Lfe105-GetWirelessCommType
	.align	2, 0
	.globl	sub_800B524
	.type	 sub_800B524,function
	.thumb_func
sub_800B524:
	push	{lr}
	ldrb	r1, [r0, #0x10]
	strb	r1, [r0, #0x12]
	add	r2, r0, #0
	add	r2, r2, #0x8
	ldrb	r1, [r0, #0x1a]
	add	r0, r2, #0
	bl	ConvertInternationalString
	pop	{r0}
	bx	r0
.Lfe106:
	.size	 sub_800B524,.Lfe106-sub_800B524
	.align	2, 0
	.type	 DisableSerial,function
	.thumb_func
DisableSerial:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0xc0
	bl	DisableInterrupts
	ldr	r1, .L853
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L853+0x4
	mov	r2, #0x0
	strh	r2, [r0]
	add	r1, r1, #0xda
	mov	r0, #0xc0
	strh	r0, [r1]
	ldr	r0, .L853+0x8
	strh	r2, [r0]
	ldr	r2, .L853+0xc
	mov	r0, #0x0
	mov	r1, #0
	str	r0, [r2]
	str	r1, [r2, #0x4]
	str	r0, [sp]
	ldr	r1, .L853+0x10
	ldr	r2, .L853+0x14
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L854:
	.align	2, 0
.L853:
	.word	0x4000128
	.word	0x400010e
	.word	0x400012a
	.word	0x4000120
	.word	gLink
	.word	0x50003f0
.Lfe107:
	.size	 DisableSerial,.Lfe107-DisableSerial
	.align	2, 0
	.type	 EnableSerial,function
	.thumb_func
EnableSerial:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	mov	r0, #0xc0
	bl	DisableInterrupts
	ldr	r0, .L856
	mov	r4, #0x0
	strh	r4, [r0]
	ldr	r2, .L856+0x4
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	add	r0, r1, #0
	strh	r0, [r2]
	ldrh	r0, [r2]
	ldr	r3, .L856+0x8
	add	r1, r3, #0
	orr	r0, r0, r1
	strh	r0, [r2]
	mov	r0, #0x80
	bl	EnableInterrupts
	ldr	r0, .L856+0xc
	strh	r4, [r0]
	mov	r5, #0x0
	str	r5, [sp]
	ldr	r1, .L856+0x10
	ldr	r2, .L856+0x14
	mov	r0, sp
	bl	CpuSet
	ldr	r0, .L856+0x18
	strb	r4, [r0]
	ldr	r0, .L856+0x1c
	strh	r5, [r0]
	ldr	r0, .L856+0x20
	strh	r5, [r0]
	ldr	r0, .L856+0x24
	strb	r4, [r0]
	ldr	r0, .L856+0x28
	strb	r4, [r0]
	ldr	r0, .L856+0x2c
	strb	r4, [r0]
	ldr	r0, .L856+0x30
	strb	r4, [r0]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L857:
	.align	2, 0
.L856:
	.word	0x4000134
	.word	0x4000128
	.word	0x4003
	.word	0x400012a
	.word	gLink
	.word	0x50003f0
	.word	sNumVBlanksWithoutSerialIntr
	.word	sSendNonzeroCheck
	.word	sRecvNonzeroCheck
	.word	sChecksumAvailable
	.word	sHandshakePlayerCount
	.word	gLastSendQueueCount
	.word	gLastRecvQueueCount
.Lfe108:
	.size	 EnableSerial,.Lfe108-EnableSerial
	.align	2, 0
	.globl	ResetSerial
	.type	 ResetSerial,function
	.thumb_func
ResetSerial:
	push	{lr}
	bl	EnableSerial
	bl	DisableSerial
	pop	{r0}
	bx	r0
.Lfe109:
	.size	 ResetSerial,.Lfe109-ResetSerial
	.align	2, 0
	.globl	LinkMain1
	.type	 LinkMain1,function
	.thumb_func
LinkMain1:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	ldr	r0, .L882
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x4
	bhi	.L860	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L882+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L883:
	.align	2, 0
.L882:
	.word	gLink
	.word	.L873
	.align	2, 0
	.align	2, 0
.L873:
	.word	.L861
	.word	.L862
	.word	.L864
	.word	.L871
	.word	.L872
.L861:
	bl	DisableSerial
	ldr	r1, .L884
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	b	.L860
.L885:
	.align	2, 0
.L884:
	.word	gLink
.L862:
	ldrb	r0, [r4]
	cmp	r0, #0x1
	bne	.L860	@cond_branch
	bl	EnableSerial
	ldr	r1, .L886
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	b	.L860
.L887:
	.align	2, 0
.L886:
	.word	gLink
.L864:
	ldrb	r1, [r4]
	cmp	r1, #0x1
	beq	.L867	@cond_branch
	cmp	r1, #0x2
	beq	.L869	@cond_branch
	bl	CheckMasterOrSlave
	b	.L860
.L867:
	ldr	r2, .L888
	ldrb	r0, [r2]
	cmp	r0, #0x8
	bne	.L860	@cond_branch
	ldrb	r0, [r2, #0x3]
	cmp	r0, #0x1
	bls	.L860	@cond_branch
	strb	r1, [r2, #0xe]
	b	.L860
.L889:
	.align	2, 0
.L888:
	.word	gLink
.L869:
	ldr	r0, .L890
	mov	r1, #0x0
	strb	r1, [r0, #0x1]
	ldr	r0, .L890+0x4
	strh	r1, [r0]
	b	.L860
.L891:
	.align	2, 0
.L890:
	.word	gLink
	.word	0x400012a
.L871:
	bl	InitTimer
	ldr	r1, .L892
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
.L872:
	add	r0, r5, #0
	bl	EnqueueSendCmd
	add	r0, r6, #0
	bl	DequeueRecvCmds
.L860:
	mov	r0, #0x0
	strb	r0, [r4]
	ldr	r1, .L892
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x2
	orr	r2, r2, r0
	ldrb	r0, [r1]
	cmp	r0, #0x8
	bne	.L875	@cond_branch
	mov	r0, #0x20
	orr	r2, r2, r0
.L875:
	ldrb	r0, [r1, #0xc]
	lsl	r3, r0, #0x8
	ldrb	r0, [r1, #0xf]
	lsl	r4, r0, #0x9
	ldrb	r0, [r1, #0x10]
	lsl	r5, r0, #0xc
	ldrb	r0, [r1, #0x11]
	lsl	r6, r0, #0xd
	ldrb	r0, [r1, #0x12]
	lsl	r7, r0, #0xe
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x4
	bne	.L876	@cond_branch
	mov	r0, #0x40
	orr	r0, r0, r3
	orr	r0, r0, r2
	b	.L881
.L893:
	.align	2, 0
.L892:
	.word	gLink
.L876:
	add	r0, r2, #0
	orr	r0, r0, r3
.L881:
	orr	r0, r0, r4
	orr	r0, r0, r5
	orr	r0, r0, r6
	orr	r0, r0, r7
	add	r2, r0, #0
	ldrb	r3, [r1, #0x13]
	cmp	r3, #0x1
	bne	.L878	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	orr	r2, r2, r0
.L878:
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0x3
	bls	.L879	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xa
	orr	r2, r2, r0
.L879:
	add	r1, r2, #0
	cmp	r3, #0x2
	bne	.L880	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	orr	r1, r1, r0
.L880:
	add	r0, r1, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe110:
	.size	 LinkMain1,.Lfe110-LinkMain1
	.align	2, 0
	.type	 CheckMasterOrSlave,function
	.thumb_func
CheckMasterOrSlave:
	push	{lr}
	ldr	r0, .L897
	ldr	r1, [r0]
	mov	r0, #0xc
	and	r1, r1, r0
	ldr	r2, .L897+0x4
	cmp	r1, #0x8
	bne	.L895	@cond_branch
	ldrb	r0, [r2, #0x2]
	cmp	r0, #0
	bne	.L895	@cond_branch
	strb	r1, [r2]
	b	.L896
.L898:
	.align	2, 0
.L897:
	.word	0x4000128
	.word	gLink
.L895:
	mov	r0, #0x0
	strb	r0, [r2]
.L896:
	pop	{r0}
	bx	r0
.Lfe111:
	.size	 CheckMasterOrSlave,.Lfe111-CheckMasterOrSlave
	.align	2, 0
	.type	 InitTimer,function
	.thumb_func
InitTimer:
	push	{lr}
	ldr	r0, .L901
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L900	@cond_branch
	ldr	r1, .L901+0x4
	ldr	r2, .L901+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r0, #0x41
	strh	r0, [r1]
	mov	r0, #0x40
	bl	EnableInterrupts
.L900:
	pop	{r0}
	bx	r0
.L902:
	.align	2, 0
.L901:
	.word	gLink
	.word	0x400010c
	.word	0xff3b
.Lfe112:
	.size	 InitTimer,.Lfe112-InitTimer
	.align	2, 0
	.type	 EnqueueSendCmd,function
	.thumb_func
EnqueueSendCmd:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r3, r0, #0
	ldr	r2, .L913
	ldr	r1, .L913+0x4
	ldrh	r0, [r1]
	strh	r0, [r2]
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L913+0x8
	ldr	r4, .L913+0xc
	add	r0, r1, r4
	ldrb	r4, [r0]
	add	r6, r1, #0
	cmp	r4, #0x31
	bhi	.L904	@cond_branch
	mov	r1, #0xce
	lsl	r1, r1, #0x2
	add	r0, r6, r1
	ldrb	r0, [r0]
	add	r0, r4, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x31
	bls	.L905	@cond_branch
	sub	r0, r0, #0x32
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L905:
	mov	r2, #0x0
	ldr	r4, .L913+0x10
	mov	r9, r4
	ldr	r1, .L913+0x14
	mov	sl, r1
	lsl	r5, r0, #0x1
	mov	r0, #0x18
	add	r0, r0, r6
	mov	r8, r0
	mov	ip, r2
	mov	r7, #0x64
.L909:
	ldrh	r0, [r4]
	ldrh	r1, [r3]
	orr	r0, r0, r1
	strh	r0, [r4]
	mov	r0, r2
	mul	r0, r0, r7
	add	r0, r5, r0
	add	r0, r0, r8
	strh	r1, [r0]
	mov	r1, ip
	strh	r1, [r3]
	add	r3, r3, #0x2
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L909	@cond_branch
	b	.L911
.L914:
	.align	2, 0
.L913:
	.word	gLinkSavedIme
	.word	0x4000208
	.word	gLink
	.word	0x339
	.word	sSendNonzeroCheck
	.word	gLastSendQueueCount
.L904:
	mov	r0, #0x1
	strb	r0, [r6, #0x12]
	ldr	r2, .L915
	mov	r9, r2
	ldr	r4, .L915+0x4
	mov	sl, r4
.L911:
	mov	r1, r9
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L912	@cond_branch
	ldr	r2, .L915+0x8
	add	r0, r6, r2
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	mov	r2, #0x0
	strb	r1, [r0]
	mov	r4, r9
	strh	r2, [r4]
.L912:
	ldr	r1, .L915+0xc
	ldr	r2, .L915+0x10
	ldrh	r0, [r2]
	strh	r0, [r1]
	ldr	r4, .L915+0x8
	add	r0, r6, r4
	ldrb	r0, [r0]
	mov	r1, sl
	strb	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L916:
	.align	2, 0
.L915:
	.word	sSendNonzeroCheck
	.word	gLastSendQueueCount
	.word	0x339
	.word	0x4000208
	.word	gLinkSavedIme
.Lfe113:
	.size	 EnqueueSendCmd,.Lfe113-EnqueueSendCmd
	.align	2, 0
	.type	 DequeueRecvCmds,function
	.thumb_func
DequeueRecvCmds:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r0
	ldr	r2, .L941
	ldr	r1, .L941+0x4
	ldrh	r0, [r1]
	strh	r0, [r2]
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L941+0x8
	ldr	r3, .L941+0xc
	add	r0, r1, r3
	ldrb	r0, [r0]
	mov	ip, r1
	cmp	r0, #0
	bne	.L918	@cond_branch
	mov	r3, #0x0
	ldrb	r0, [r1, #0x3]
	cmp	r3, r0
	bcs	.L920	@cond_branch
	mov	r5, #0x0
	add	r6, r0, #0
.L922:
	mov	r2, #0x0
	lsl	r1, r3, #0x4
	add	r4, r3, #0x1
	add	r1, r1, r9
.L926:
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	strh	r5, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L926	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r6
	bcc	.L922	@cond_branch
.L920:
	mov	r0, #0x1
	mov	r7, ip
	strb	r0, [r7, #0xc]
	b	.L929
.L942:
	.align	2, 0
.L941:
	.word	gLinkSavedIme
	.word	0x4000208
	.word	gLink
	.word	0xfbd
.L918:
	mov	r3, #0x0
	mov	r0, ip
	ldrb	r1, [r0, #0x3]
	cmp	r3, r1
	bcs	.L931	@cond_branch
	ldr	r0, .L943
	add	r0, r0, ip
	ldrb	r0, [r0]
	lsl	r6, r0, #0x1
	mov	r2, #0xcf
	lsl	r2, r2, #0x2
	add	r2, r2, ip
	mov	r8, r2
	mov	sl, r1
.L933:
	mov	r2, #0x0
	lsl	r1, r3, #0x4
	add	r4, r3, #0x1
	lsl	r0, r3, #0x1
	mov	r7, r9
	add	r5, r1, r7
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	lsl	r3, r0, #0x5
.L937:
	lsl	r1, r2, #0x1
	add	r1, r1, r5
	mov	r7, #0x64
	mov	r0, r2
	mul	r0, r0, r7
	add	r0, r6, r0
	add	r0, r0, r3
	add	r0, r0, r8
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L937	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, sl
	bcc	.L933	@cond_branch
.L931:
	mov	r2, ip
	ldr	r0, .L943+0x4
	add	r1, r2, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	mov	r3, #0x0
	strb	r0, [r1]
	ldr	r1, .L943
	add	r2, r2, r1
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x31
	bls	.L940	@cond_branch
	strb	r3, [r2]
.L940:
	mov	r2, ip
	strb	r3, [r2, #0xc]
.L929:
	ldr	r1, .L943+0x8
	ldr	r3, .L943+0xc
	ldrh	r0, [r3]
	strh	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L944:
	.align	2, 0
.L943:
	.word	0xfbc
	.word	0xfbd
	.word	0x4000208
	.word	gLinkSavedIme
.Lfe114:
	.size	 DequeueRecvCmds,.Lfe114-DequeueRecvCmds
	.align	2, 0
	.globl	LinkVSync
	.type	 LinkVSync,function
	.thumb_func
LinkVSync:
	push	{r4, lr}
	ldr	r3, .L964
	ldrb	r4, [r3]
	cmp	r4, #0
	beq	.L946	@cond_branch
	ldrb	r0, [r3, #0x1]
	cmp	r0, #0x2
	beq	.L963	@cond_branch
	cmp	r0, #0x4
	bne	.L957	@cond_branch
	mov	r0, #0xd
	ldrsb	r0, [r3, r0]
	cmp	r0, #0x8
	bgt	.L949	@cond_branch
	ldrb	r0, [r3, #0x10]
	cmp	r0, #0x1
	beq	.L963	@cond_branch
	mov	r0, #0x1
	strb	r0, [r3, #0x13]
	b	.L957
.L965:
	.align	2, 0
.L964:
	.word	gLink
.L949:
	ldrb	r0, [r3, #0x13]
	cmp	r0, #0x1
	beq	.L957	@cond_branch
	mov	r0, #0x0
	strb	r0, [r3, #0xd]
.L963:
	bl	StartTransfer
	b	.L957
.L946:
	ldrb	r2, [r3, #0x1]
	cmp	r2, #0x4
	beq	.L959	@cond_branch
	cmp	r2, #0x2
	bne	.L957	@cond_branch
.L959:
	ldr	r1, .L966
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xa
	bls	.L957	@cond_branch
	cmp	r2, #0x4
	bne	.L961	@cond_branch
	mov	r0, #0x2
	strb	r0, [r3, #0x13]
.L961:
	cmp	r2, #0x2
	bne	.L957	@cond_branch
	strb	r4, [r3, #0x3]
	strb	r4, [r3, #0xf]
.L957:
	pop	{r4}
	pop	{r0}
	bx	r0
.L967:
	.align	2, 0
.L966:
	.word	sNumVBlanksWithoutSerialIntr
.Lfe115:
	.size	 LinkVSync,.Lfe115-LinkVSync
	.align	2, 0
	.globl	Timer3Intr
	.type	 Timer3Intr,function
	.thumb_func
Timer3Intr:
	push	{lr}
	bl	StopTimer
	bl	StartTransfer
	pop	{r0}
	bx	r0
.Lfe116:
	.size	 Timer3Intr,.Lfe116-Timer3Intr
	.align	2, 0
	.globl	SerialCB
	.type	 SerialCB,function
	.thumb_func
SerialCB:
	push	{r4, lr}
	ldr	r4, .L979
	ldr	r0, .L979+0x4
	ldr	r1, [r0]
	lsl	r0, r1, #0x1a
	lsr	r0, r0, #0x1e
	strb	r0, [r4, #0x2]
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x2
	beq	.L972	@cond_branch
	cmp	r0, #0x4
	bne	.L970	@cond_branch
	lsl	r0, r1, #0x19
	lsr	r0, r0, #0x1f
	strb	r0, [r4, #0x10]
	bl	DoRecv
	bl	DoSend
	bl	SendRecvDone
	b	.L970
.L980:
	.align	2, 0
.L979:
	.word	gLink
	.word	0x4000128
.L972:
	bl	DoHandshake
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L970	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L974	@cond_branch
	mov	r0, #0x3
	strb	r0, [r4, #0x1]
	mov	r0, #0x8
	strb	r0, [r4, #0xd]
	b	.L970
.L974:
	mov	r0, #0x4
	strb	r0, [r4, #0x1]
.L970:
	ldr	r3, .L981
	ldrb	r0, [r3, #0xd]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strb	r0, [r3, #0xd]
	ldr	r1, .L981+0x4
	strb	r2, [r1]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x8
	bne	.L978	@cond_branch
	ldr	r0, .L981+0x8
	ldr	r2, .L981+0xc
	add	r1, r3, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
.L978:
	pop	{r4}
	pop	{r0}
	bx	r0
.L982:
	.align	2, 0
.L981:
	.word	gLink
	.word	sNumVBlanksWithoutSerialIntr
	.word	gLastRecvQueueCount
	.word	0xfbd
.Lfe117:
	.size	 SerialCB,.Lfe117-SerialCB
	.align	2, 0
	.type	 StartTransfer,function
	.thumb_func
StartTransfer:
	ldr	r0, .L984
	ldrh	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strh	r1, [r0]
	bx	lr
.L985:
	.align	2, 0
.L984:
	.word	0x4000128
.Lfe118:
	.size	 StartTransfer,.Lfe118-StartTransfer
	.align	2, 0
	.type	 DoHandshake,function
	.thumb_func
DoHandshake:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r5, #0x0
	ldr	r6, .L1005
	ldr	r0, .L1005+0x4
	ldrb	r1, [r0, #0xe]
	add	r7, r0, #0
	cmp	r1, #0x1
	bne	.L987	@cond_branch
	ldr	r1, .L1005+0x8
	ldr	r2, .L1005+0xc
	b	.L1003
.L1006:
	.align	2, 0
.L1005:
	.word	0xffff
	.word	gLink
	.word	0x400012a
	.word	0x8fff
.L987:
	ldr	r1, .L1007
	ldr	r2, .L1007+0x4
.L1003:
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r2, .L1007+0x8
	ldr	r3, .L1007+0xc
	ldr	r0, [r3]		@ created by thumb_load_double_from_address
	ldr	r1, [r3, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	mov	r0, #0x0
	mov	r1, #0
	str	r0, [r3]
	str	r1, [r3, #0x4]
	strb	r0, [r2, #0xa]
	mov	r4, #0x0
	ldr	r0, .L1007+0x10
	mov	r9, r0
	mov	r8, r2
	ldr	r2, .L1007+0x14
	ldr	r1, .L1007+0x18
	mov	ip, r1
.L992:
	lsl	r0, r4, #0x1
	add	r0, r0, r8
	ldrh	r3, [r0]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r3
	ldr	r1, .L1007+0x4
	cmp	r0, r1
	beq	.L994	@cond_branch
	add	r0, r3, #0
	cmp	r0, r2
	bne	.L993	@cond_branch
.L994:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r3, #0
	cmp	r6, r0
	bls	.L991	@cond_branch
	cmp	r0, #0
	beq	.L991	@cond_branch
	add	r6, r3, #0
	b	.L991
.L1008:
	.align	2, 0
.L1007:
	.word	0x400012a
	.word	0xb9a0
	.word	gLink+0x4
	.word	0x4000120
	.word	sHandshakePlayerCount
	.word	0x8fff
	.word	0xffff
.L993:
	cmp	r0, ip
	beq	.L990	@cond_branch
	mov	r5, #0x0
	b	.L990
.L991:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L992	@cond_branch
.L990:
	strb	r5, [r7, #0x3]
	add	r0, r5, #0
	cmp	r0, #0x1
	bls	.L1000	@cond_branch
	mov	r2, r9
	ldrb	r2, [r2]
	cmp	r0, r2
	bne	.L999	@cond_branch
	ldrh	r1, [r7, #0x4]
	ldr	r0, .L1009
	cmp	r1, r0
	bne	.L999	@cond_branch
	mov	r0, #0x1
	b	.L1002
.L1010:
	.align	2, 0
.L1009:
	.word	0x8fff
.L999:
	ldrb	r0, [r7, #0x3]
	cmp	r0, #0x1
	bls	.L1000	@cond_branch
	mov	r0, #0x3
	and	r6, r6, r0
	add	r0, r6, #0x1
	b	.L1004
.L1000:
	mov	r0, #0x0
.L1004:
	strb	r0, [r7, #0xf]
	ldrb	r0, [r7, #0x3]
	mov	r1, r9
	strb	r0, [r1]
	mov	r0, #0x0
.L1002:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe119:
	.size	 DoHandshake,.Lfe119-DoHandshake
	.align	2, 0
	.type	 DoRecv,function
	.thumb_func
DoRecv:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	ldr	r0, .L1029
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldr	r0, .L1029+0x4
	ldrb	r1, [r0, #0x16]
	add	r6, r0, #0
	cmp	r1, #0
	bne	.L1012	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L1029+0x8
	ldrb	r0, [r6, #0x3]
	cmp	r4, r0
	bcs	.L1014	@cond_branch
	add	r5, r6, #0
	ldrh	r1, [r6, #0x14]
	add	r3, r7, #0
	add	r2, r6, #0
.L1016:
	lsl	r0, r4, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	cmp	r1, r0
	beq	.L1015	@cond_branch
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L1015	@cond_branch
	mov	r0, #0x1
	strb	r0, [r5, #0x11]
.L1015:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r2, #0x3]
	cmp	r4, r0
	bcc	.L1016	@cond_branch
.L1014:
	mov	r0, #0x0
	strh	r0, [r6, #0x14]
	mov	r0, #0x1
	strb	r0, [r7]
	b	.L1019
.L1030:
	.align	2, 0
.L1029:
	.word	0x4000120
	.word	gLink
	.word	sChecksumAvailable
.L1012:
	ldr	r2, .L1031
	add	r1, r6, r2
	add	r2, r2, #0x1
	add	r0, r6, r2
	ldrb	r2, [r0]
	ldrb	r1, [r1]
	add	r0, r2, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x31
	bls	.L1020	@cond_branch
	sub	r0, r0, #0x32
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1020:
	cmp	r2, #0x31
	bhi	.L1021	@cond_branch
	mov	r4, #0x0
	ldrb	r1, [r6, #0x3]
	cmp	r4, r1
	bcs	.L1027	@cond_branch
	add	r5, r6, #0
	ldr	r7, .L1031+0x4
	lsl	r0, r0, #0x1
	mov	ip, r0
	mov	r2, #0xcf
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	mov	r8, r2
.L1025:
	lsl	r1, r4, #0x1
	mov	r2, sp
	add	r0, r2, r1
	ldrh	r3, [r0]
	ldrh	r2, [r5, #0x14]
	add	r0, r3, r2
	strh	r0, [r5, #0x14]
	ldrh	r0, [r7]
	orr	r0, r0, r3
	strh	r0, [r7]
	ldrb	r2, [r5, #0x17]
	mov	r0, #0x64
	mul	r0, r0, r2
	add	r0, r0, ip
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	add	r0, r0, r8
	strh	r3, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r5, #0x3]
	cmp	r4, r0
	bcc	.L1025	@cond_branch
	b	.L1027
.L1032:
	.align	2, 0
.L1031:
	.word	0xfbc
	.word	sRecvNonzeroCheck
.L1021:
	mov	r0, #0x2
	strb	r0, [r6, #0x12]
.L1027:
	ldrb	r0, [r6, #0x17]
	add	r0, r0, #0x1
	strb	r0, [r6, #0x17]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x8
	bne	.L1019	@cond_branch
	ldr	r2, .L1033
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1019	@cond_branch
	ldr	r1, .L1033+0x4
	add	r0, r6, r1
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r2]
.L1019:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1034:
	.align	2, 0
.L1033:
	.word	sRecvNonzeroCheck
	.word	0xfbd
.Lfe120:
	.size	 DoRecv,.Lfe120-DoRecv
	.align	2, 0
	.type	 DoSend,function
	.thumb_func
DoSend:
	push	{r4, lr}
	ldr	r0, .L1045
	ldrb	r1, [r0, #0x16]
	add	r4, r0, #0
	cmp	r1, #0x8
	bne	.L1036	@cond_branch
	ldr	r1, .L1045+0x4
	ldrh	r0, [r4, #0x14]
	strh	r0, [r1]
	ldr	r1, .L1045+0x8
	ldrb	r2, [r1]
	cmp	r2, #0
	bne	.L1037	@cond_branch
	ldr	r0, .L1045+0xc
	add	r1, r4, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, #0xce
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x31
	bls	.L1040	@cond_branch
	strb	r2, [r1]
	b	.L1040
.L1046:
	.align	2, 0
.L1045:
	.word	gLink
	.word	0x400012a
	.word	sSendBufferEmpty
	.word	0x339
.L1037:
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L1040
.L1036:
	ldr	r1, .L1047
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L1044	@cond_branch
	ldr	r2, .L1047+0x4
	add	r0, r4, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1041	@cond_branch
	mov	r0, #0x1
	strb	r0, [r1]
.L1041:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1042	@cond_branch
.L1044:
	ldr	r1, .L1047+0x8
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L1043
.L1048:
	.align	2, 0
.L1047:
	.word	sSendBufferEmpty
	.word	0x339
	.word	0x400012a
.L1042:
	ldr	r3, .L1049
	mov	r1, #0xce
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	ldrb	r2, [r4, #0x16]
	mov	r1, #0x64
	mul	r1, r1, r2
	add	r0, r0, r1
	add	r1, r4, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r3]
.L1043:
	ldrb	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x16]
.L1040:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1050:
	.align	2, 0
.L1049:
	.word	0x400012a
.Lfe121:
	.size	 DoSend,.Lfe121-DoSend
	.align	2, 0
	.type	 StopTimer,function
	.thumb_func
StopTimer:
	push	{lr}
	ldr	r0, .L1053
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1052	@cond_branch
	ldr	r2, .L1053+0x4
	ldrh	r1, [r2]
	ldr	r0, .L1053+0x8
	and	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L1053+0xc
	ldr	r2, .L1053+0x10
	add	r0, r2, #0
	strh	r0, [r1]
.L1052:
	pop	{r0}
	bx	r0
.L1054:
	.align	2, 0
.L1053:
	.word	gLink
	.word	0x400010e
	.word	0xff7f
	.word	0x400010c
	.word	0xff3b
.Lfe122:
	.size	 StopTimer,.Lfe122-StopTimer
	.align	2, 0
	.type	 SendRecvDone,function
	.thumb_func
SendRecvDone:
	push	{lr}
	ldr	r1, .L1059
	ldrb	r0, [r1, #0x17]
	cmp	r0, #0x8
	bne	.L1056	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1, #0x16]
	strb	r0, [r1, #0x17]
	b	.L1057
.L1060:
	.align	2, 0
.L1059:
	.word	gLink
.L1056:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1057	@cond_branch
	ldr	r0, .L1061
	ldrh	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strh	r1, [r0]
.L1057:
	pop	{r0}
	bx	r0
.L1062:
	.align	2, 0
.L1061:
	.word	0x400010e
.Lfe123:
	.size	 SendRecvDone,.Lfe123-SendRecvDone
	.align	2, 0
	.globl	ResetSendBuffer
	.type	 ResetSendBuffer,function
	.thumb_func
ResetSendBuffer:
	push	{r4, r5, r6, lr}
	ldr	r1, .L1074
	ldr	r2, .L1074+0x4
	add	r0, r1, r2
	mov	r2, #0x0
	strb	r2, [r0]
	mov	r3, #0xce
	lsl	r3, r3, #0x2
	add	r0, r1, r3
	strb	r2, [r0]
	mov	r0, #0x0
	mov	r6, #0x64
	add	r5, r1, #0
	add	r5, r5, #0x18
	ldr	r4, .L1074+0x8
.L1067:
	mov	r2, #0x0
	add	r1, r0, #0x1
	mov	r3, r0
	mul	r3, r3, r6
.L1071:
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	add	r0, r0, r5
	strh	r4, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x31
	bls	.L1071	@cond_branch
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x7
	bls	.L1067	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1075:
	.align	2, 0
.L1074:
	.word	gLink
	.word	0x339
	.word	0xefff
.Lfe124:
	.size	 ResetSendBuffer,.Lfe124-ResetSendBuffer
	.align	2, 0
	.globl	ResetRecvBuffer
	.type	 ResetRecvBuffer,function
	.thumb_func
ResetRecvBuffer:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L1092
	ldr	r2, .L1092+0x4
	add	r0, r1, r2
	mov	r2, #0x0
	strb	r2, [r0]
	ldr	r3, .L1092+0x8
	add	r0, r1, r3
	strb	r2, [r0]
	mov	r0, #0x64
	mov	ip, r0
	mov	r3, #0xcf
	lsl	r3, r3, #0x2
	add	r7, r1, r3
	ldr	r6, .L1092+0xc
.L1080:
	mov	r3, #0x0
	lsl	r0, r2, #0x1
	add	r5, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	lsl	r4, r0, #0x5
.L1084:
	mov	r2, #0x0
	add	r1, r3, #0x1
	mov	r0, ip
	mul	r0, r0, r3
	add	r3, r0, #0
.L1088:
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	add	r0, r0, r4
	add	r0, r0, r7
	strh	r6, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x31
	bls	.L1088	@cond_branch
	lsl	r0, r1, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x7
	bls	.L1084	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L1080	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1093:
	.align	2, 0
.L1092:
	.word	gLink
	.word	0xfbd
	.word	0xfbc
	.word	0xefff
.Lfe125:
	.size	 ResetRecvBuffer,.Lfe125-ResetRecvBuffer
	.comm	gLink, 4032	@ 4032
	.comm	gRecvCmds, 80	@ 80
	.comm	gLinkStatus, 4	@ 4
	.comm	gSendCmd, 16	@ 16
	.comm	gReceivedRemoteLinkPlayers, 4	@ 1
	.comm	gLinkPartnersHeldKeys, 12	@ 12
	.comm	gLinkDebugSeed, 4	@ 4
	.comm	gLocalLinkPlayerBlock, 60	@ 60
	.comm	gLinkErrorOccurred, 4	@ 1
	.comm	gLinkDebugFlags, 4	@ 4
	.comm	gRemoteLinkPlayersNotReceived, 4	@ 4
	.comm	gBlockReceivedStatus, 4	@ 4
	.comm	gLinkHeldKeys, 4	@ 2
	.comm	gReadyToExitStandby, 4	@ 4
	.comm	gReadyToCloseLink, 4	@ 4
	.comm	gReadyCloseLinkType, 4	@ 2
	.comm	gSuppressLinkErrorMessage, 4	@ 1
	.comm	gWirelessCommType, 4	@ 1
	.comm	gSavedLinkPlayerCount, 4	@ 1
	.comm	gSavedMultiplayerId, 4	@ 1
	.comm	gLinkTestBGInfo, 16	@ 16
	.comm	gLinkCallback, 4	@ 4
	.comm	gShouldAdvanceLinkState, 4	@ 1
	.comm	gLinkTestBlockChecksums, 8	@ 8
	.comm	gBlockRequestType, 4	@ 1
	.comm	gLastSendQueueCount, 4	@ 1
	.comm	gLastRecvQueueCount, 4	@ 1
	.comm	gLinkSavedIme, 4	@ 2

	.lcomm	sBlockSend,12

	.lcomm	sBlockRecv,48

	.lcomm	sBlockSendDelayCounter,4

	.lcomm	sDummy1,4

	.lcomm	sDummy2,1

	.lcomm	sPlayerDataExchangeStatus,4

	.lcomm	sDummy3,4

	.lcomm	sLinkTestLastBlockSendPos,1

	.lcomm	sLinkTestLastBlockRecvPos,4

	.lcomm	sNumVBlanksWithoutSerialIntr,1

	.lcomm	sSendBufferEmpty,1

	.lcomm	sSendNonzeroCheck,2

	.lcomm	sRecvNonzeroCheck,2

	.lcomm	sChecksumAvailable,1

	.lcomm	sHandshakePlayerCount,1
	.comm	gLinkFiller1, 4	@ 4
	.comm	gLinkFiller2, 4	@ 4
	.comm	gLinkDummy1, 4	@ 1
	.comm	gLinkDummy2, 4	@ 1
	.comm	gLinkFiller3, 4	@ 4
	.comm	gLinkFiller4, 4	@ 4
	.comm	gLinkFiller5, 4	@ 4
.text
	.align	2, 0

