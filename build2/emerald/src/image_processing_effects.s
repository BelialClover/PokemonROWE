@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	ApplyImageProcessingEffects
	.type	 ApplyImageProcessingEffects,function
	.thumb_func
ApplyImageProcessingEffects:
	push	{lr}
	ldr	r2, .L18
	ldr	r1, [r0, #0x4]
	str	r1, [r2]
	ldr	r2, .L18+0x4
	ldrb	r1, [r0, #0x1f]
	strb	r1, [r2]
	ldr	r2, .L18+0x8
	ldrb	r1, [r0, #0x19]
	strb	r1, [r2]
	ldr	r2, .L18+0xc
	ldrb	r1, [r0, #0x1a]
	strb	r1, [r2]
	ldr	r2, .L18+0x10
	ldrb	r1, [r0, #0x1b]
	strb	r1, [r2]
	ldr	r2, .L18+0x14
	ldrb	r1, [r0, #0x1c]
	strb	r1, [r2]
	ldr	r2, .L18+0x18
	ldrb	r1, [r0, #0x1d]
	strb	r1, [r2]
	ldr	r2, .L18+0x1c
	ldrb	r1, [r0, #0x1e]
	strb	r1, [r2]
	ldrb	r0, [r0]
	sub	r0, r0, #0x2
	cmp	r0, #0x22
	bls	.LCB35
	b	.L3	@long jump
.LCB35:
	lsl	r0, r0, #0x2
	ldr	r1, .L18+0x20
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L19:
	.align	2, 0
.L18:
	.word	gCanvasPixels
	.word	gCanvasMonPersonality
	.word	gCanvasColumnStart
	.word	gCanvasRowStart
	.word	gCanvasColumnEnd
	.word	gCanvasRowEnd
	.word	gCanvasWidth
	.word	gCanvasHeight
	.word	.L16
	.align	2, 0
	.align	2, 0
.L16:
	.word	.L4
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L14
	.word	.L3
	.word	.L5
	.word	.L6
	.word	.L7
	.word	.L9
	.word	.L3
	.word	.L10
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L3
	.word	.L11
	.word	.L8
	.word	.L12
	.word	.L13
	.word	.L3
	.word	.L3
	.word	.L15
.L4:
	bl	ApplyImageEffect_Pointillism
	b	.L3
.L5:
	bl	ApplyImageEffect_Blur
	b	.L3
.L6:
	bl	ApplyImageEffect_BlackOutline
	ldr	r0, .L20
	ldrb	r0, [r0]
	bl	ApplyImageEffect_PersonalityColor
	b	.L3
.L21:
	.align	2, 0
.L20:
	.word	gCanvasMonPersonality
.L7:
	bl	ApplyImageEffect_BlackOutline
	bl	ApplyImageEffect_Invert
	bl	ApplyImageEffect_BlackAndWhite
.L8:
	bl	ApplyImageEffect_Invert
	b	.L3
.L9:
	bl	ApplyImageEffect_BlackOutline
	bl	ApplyImageEffect_BlurRight
	bl	ApplyImageEffect_BlurRight
	bl	ApplyImageEffect_BlurDown
	bl	ApplyImageEffect_BlackAndWhite
	b	.L3
.L10:
	bl	ApplyImageEffect_Shimmer
	b	.L3
.L11:
	bl	ApplyImageEffect_BlackOutline
	b	.L3
.L12:
	bl	ApplyImageEffect_BlurRight
	b	.L3
.L13:
	bl	ApplyImageEffect_BlurDown
	b	.L3
.L14:
	bl	ApplyImageEffect_Grayscale
	mov	r0, #0x3
	bl	ApplyImageEffect_RedChannelGrayscale
	b	.L3
.L15:
	bl	ApplyImageEffect_BlackOutline
	bl	ApplyImageEffect_BlurRight
	bl	ApplyImageEffect_BlurDown
	bl	ApplyImageEffect_BlackAndWhite
	bl	ApplyImageEffect_Blur
	bl	ApplyImageEffect_Blur
	mov	r0, #0x2
	bl	ApplyImageEffect_RedChannelGrayscale
	mov	r0, #0x4
	bl	ApplyImageEffect_RedChannelGrayscaleHighlight
.L3:
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 ApplyImageProcessingEffects,.Lfe1-ApplyImageProcessingEffects
	.align	2, 0
	.type	 ApplyImageEffect_RedChannelGrayscale,function
	.thumb_func
ApplyImageEffect_RedChannelGrayscale:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r2, #0x0
	ldr	r0, .L35
	mov	r8, r0
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L24	@cond_branch
	ldr	r1, .L35+0x4
	mov	ip, r1
	ldr	r3, .L35+0x8
	mov	sl, r3
	ldr	r0, .L35+0xc
	mov	r9, r0
.L26:
	ldr	r1, .L35+0x10
	ldrb	r0, [r1]
	add	r0, r0, r2
	mov	r3, sl
	ldrb	r1, [r3]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	ldr	r3, .L35+0x14
	ldr	r1, [r3]
	add	r1, r1, r0
	mov	r3, r9
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r3, r1, r0
	mov	r4, #0x0
	add	r5, r2, #0x1
	mov	r0, ip
	ldrb	r0, [r0]
	cmp	r4, r0
	bcs	.L25	@cond_branch
	mov	r6, #0x80
	lsl	r6, r6, #0x8
.L30:
	ldrh	r1, [r3]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L29	@cond_branch
	mov	r0, #0x1f
	and	r0, r0, r1
	add	r0, r0, r7
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x1f
	bls	.L32	@cond_branch
	mov	r2, #0x1f
.L32:
	lsl	r0, r2, #0xa
	lsl	r1, r2, #0x5
	orr	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r3]
.L29:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r3, r3, #0x2
	mov	r1, ip
	ldrb	r1, [r1]
	cmp	r4, r1
	bcc	.L30	@cond_branch
.L25:
	lsl	r0, r5, #0x18
	lsr	r2, r0, #0x18
	mov	r3, r8
	ldrb	r3, [r3]
	cmp	r2, r3
	bcc	.L26	@cond_branch
.L24:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	gCanvasRowEnd
	.word	gCanvasColumnEnd
	.word	gCanvasWidth
	.word	gCanvasColumnStart
	.word	gCanvasRowStart
	.word	gCanvasPixels
.Lfe2:
	.size	 ApplyImageEffect_RedChannelGrayscale,.Lfe2-ApplyImageEffect_RedChannelGrayscale
	.align	2, 0
	.type	 ApplyImageEffect_RedChannelGrayscaleHighlight,function
	.thumb_func
ApplyImageEffect_RedChannelGrayscaleHighlight:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r2, #0x0
	ldr	r0, .L50
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L39	@cond_branch
	ldr	r1, .L50+0x4
	mov	sl, r1
.L41:
	ldr	r3, .L50+0x8
	ldrb	r0, [r3]
	add	r0, r0, r2
	ldr	r3, .L50+0xc
	ldrb	r1, [r3]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	ldr	r3, .L50+0x10
	ldr	r1, [r3]
	add	r1, r1, r0
	ldr	r3, .L50+0x14
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r3, r1, r0
	mov	r5, #0x0
	add	r7, r2, #0x1
	mov	r0, sl
	ldrb	r0, [r0]
	cmp	r5, r0
	bcs	.L40	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r9, r1
	mov	r0, #0x1f
	mov	ip, r0
	mov	r1, r8
	sub	r6, r0, r1
.L45:
	ldrh	r1, [r3]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L44	@cond_branch
	mov	r4, #0x1f
	mov	r2, ip
	and	r2, r2, r1
	cmp	r2, r6
	ble	.L47	@cond_branch
	mov	r1, r8
	lsr	r0, r1, #0x1
	sub	r0, r4, r0
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L47:
	lsl	r0, r2, #0xa
	lsl	r1, r2, #0x5
	orr	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r3]
.L44:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r3, r3, #0x2
	mov	r0, sl
	ldrb	r0, [r0]
	cmp	r5, r0
	bcc	.L45	@cond_branch
.L40:
	lsl	r0, r7, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L50
	ldrb	r1, [r1]
	cmp	r2, r1
	bcc	.L41	@cond_branch
.L39:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	gCanvasRowEnd
	.word	gCanvasColumnEnd
	.word	gCanvasRowStart
	.word	gCanvasWidth
	.word	gCanvasPixels
	.word	gCanvasColumnStart
.Lfe3:
	.size	 ApplyImageEffect_RedChannelGrayscaleHighlight,.Lfe3-ApplyImageEffect_RedChannelGrayscaleHighlight
	.align	2, 0
	.type	 ApplyImageEffect_Pointillism,function
	.thumb_func
ApplyImageEffect_Pointillism:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r5, .L58
.L56:
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	bl	AddPointillismPoints
	add	r4, r4, #0x1
	cmp	r4, r5
	bls	.L56	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	0xc7f
.Lfe4:
	.size	 ApplyImageEffect_Pointillism,.Lfe4-ApplyImageEffect_Pointillism
	.align	2, 0
	.type	 ApplyImageEffect_Grayscale,function
	.thumb_func
ApplyImageEffect_Grayscale:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r2, #0x0
	ldr	r0, .L72
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L62	@cond_branch
	ldr	r0, .L72+0x4
	mov	r8, r0
	ldr	r3, .L72+0x8
.L64:
	ldr	r0, .L72+0xc
	ldrb	r1, [r0]
	add	r1, r1, r2
	ldr	r0, .L72+0x10
	ldrb	r0, [r0]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r4, r8
	ldr	r1, [r4]
	add	r1, r1, r0
	ldr	r0, .L72+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r4, r1, r0
	mov	r5, #0x0
	add	r6, r2, #0x1
	ldrb	r0, [r3]
	cmp	r5, r0
	bcs	.L63	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	add	r7, r0, #0
.L68:
	ldrh	r0, [r4]
	and	r0, r0, r7
	cmp	r0, #0
	bne	.L67	@cond_branch
	add	r0, r4, #0
	str	r3, [sp]
	bl	ConvertColorToGrayscale
	strh	r0, [r4]
	ldr	r3, [sp]
.L67:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r4, #0x2
	ldrb	r0, [r3]
	cmp	r5, r0
	bcc	.L68	@cond_branch
.L63:
	lsl	r0, r6, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L72
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L64	@cond_branch
.L62:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	gCanvasRowEnd
	.word	gCanvasPixels
	.word	gCanvasColumnEnd
	.word	gCanvasRowStart
	.word	gCanvasWidth
	.word	gCanvasColumnStart
.Lfe5:
	.size	 ApplyImageEffect_Grayscale,.Lfe5-ApplyImageEffect_Grayscale
	.align	2, 0
	.type	 ApplyImageEffect_Blur,function
	.thumb_func
ApplyImageEffect_Blur:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r2, #0x0
	ldr	r0, .L85
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L76	@cond_branch
	ldr	r0, .L85+0x4
	mov	r8, r0
	ldr	r3, .L85+0x8
.L78:
	ldr	r0, .L85+0xc
	ldrb	r1, [r0]
	ldrb	r0, [r3]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r4, r8
	ldr	r1, [r4]
	add	r1, r1, r0
	ldr	r0, .L85+0x10
	ldrb	r0, [r0]
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r4, r1, r0
	ldrh	r1, [r4]
	mov	r0, sp
	strh	r1, [r0]
	mov	r5, #0x1
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r4, r4, r0
	ldr	r0, .L85+0x14
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	add	r7, r2, #0x1
	cmp	r5, r0
	bge	.L77	@cond_branch
	ldr	r6, .L85+0x8
.L81:
	ldrh	r0, [r4]
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r1, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L82	@cond_branch
	ldrb	r2, [r6]
	lsl	r2, r2, #0x1
	add	r2, r4, r2
	mov	r0, sp
	add	r1, r4, #0
	str	r3, [sp, #0x4]
	bl	QuantizePixel_Blur
	strh	r0, [r4]
	mov	r1, sp
	strh	r0, [r1]
	ldr	r3, [sp, #0x4]
.L82:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r4, r4, r0
	ldr	r0, .L85+0x14
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r5, r0
	blt	.L81	@cond_branch
.L77:
	lsl	r0, r7, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L85
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L78	@cond_branch
.L76:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L86:
	.align	2, 0
.L85:
	.word	gCanvasColumnEnd
	.word	gCanvasPixels
	.word	gCanvasWidth
	.word	gCanvasRowStart
	.word	gCanvasColumnStart
	.word	gCanvasRowEnd
.Lfe6:
	.size	 ApplyImageEffect_Blur,.Lfe6-ApplyImageEffect_Blur
	.align	2, 0
	.type	 ApplyImageEffect_PersonalityColor,function
	.thumb_func
ApplyImageEffect_PersonalityColor:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r2, #0x0
	ldr	r0, .L99
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L89	@cond_branch
	ldr	r0, .L99+0x4
	mov	r9, r0
	ldr	r3, .L99+0x8
.L91:
	ldr	r0, .L99+0xc
	ldrb	r1, [r0]
	add	r1, r1, r2
	ldr	r0, .L99+0x10
	ldrb	r0, [r0]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r4, r9
	ldr	r1, [r4]
	add	r1, r1, r0
	ldr	r0, .L99+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r4, r1, r0
	mov	r5, #0x0
	add	r6, r2, #0x1
	ldrb	r0, [r3]
	cmp	r5, r0
	bcs	.L90	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	add	r7, r0, #0
.L95:
	ldrh	r0, [r4]
	and	r0, r0, r7
	cmp	r0, #0
	bne	.L94	@cond_branch
	add	r0, r4, #0
	mov	r1, r8
	str	r3, [sp]
	bl	QuantizePixel_PersonalityColor
	strh	r0, [r4]
	ldr	r3, [sp]
.L94:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r4, #0x2
	ldrb	r0, [r3]
	cmp	r5, r0
	bcc	.L95	@cond_branch
.L90:
	lsl	r0, r6, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L99
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L91	@cond_branch
.L89:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	gCanvasRowEnd
	.word	gCanvasPixels
	.word	gCanvasColumnEnd
	.word	gCanvasRowStart
	.word	gCanvasWidth
	.word	gCanvasColumnStart
.Lfe7:
	.size	 ApplyImageEffect_PersonalityColor,.Lfe7-ApplyImageEffect_PersonalityColor
	.align	2, 0
	.type	 ApplyImageEffect_BlackAndWhite,function
	.thumb_func
ApplyImageEffect_BlackAndWhite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r2, #0x0
	ldr	r0, .L113
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L103	@cond_branch
	ldr	r0, .L113+0x4
	mov	r8, r0
	ldr	r3, .L113+0x8
.L105:
	ldr	r0, .L113+0xc
	ldrb	r1, [r0]
	add	r1, r1, r2
	ldr	r0, .L113+0x10
	ldrb	r0, [r0]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r4, r8
	ldr	r1, [r4]
	add	r1, r1, r0
	ldr	r0, .L113+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r4, r1, r0
	mov	r5, #0x0
	add	r6, r2, #0x1
	ldrb	r0, [r3]
	cmp	r5, r0
	bcs	.L104	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	add	r7, r0, #0
.L109:
	ldrh	r0, [r4]
	and	r0, r0, r7
	cmp	r0, #0
	bne	.L108	@cond_branch
	add	r0, r4, #0
	str	r3, [sp]
	bl	QuantizePixel_BlackAndWhite
	strh	r0, [r4]
	ldr	r3, [sp]
.L108:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r4, #0x2
	ldrb	r0, [r3]
	cmp	r5, r0
	bcc	.L109	@cond_branch
.L104:
	lsl	r0, r6, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L113
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L105	@cond_branch
.L103:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	gCanvasRowEnd
	.word	gCanvasPixels
	.word	gCanvasColumnEnd
	.word	gCanvasRowStart
	.word	gCanvasWidth
	.word	gCanvasColumnStart
.Lfe8:
	.size	 ApplyImageEffect_BlackAndWhite,.Lfe8-ApplyImageEffect_BlackAndWhite
	.align	2, 0
	.type	 ApplyImageEffect_BlackOutline,function
	.thumb_func
ApplyImageEffect_BlackOutline:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r7, #0x0
	ldr	r0, .L136
	ldrb	r0, [r0]
	cmp	r7, r0
	bcs	.L117	@cond_branch
	ldr	r0, .L136+0x4
	mov	r8, r0
.L119:
	ldr	r0, .L136+0x8
	ldrb	r1, [r0]
	add	r1, r1, r7
	ldr	r0, .L136+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r2, r8
	ldr	r1, [r2]
	add	r1, r1, r0
	ldr	r0, .L136+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r5, r1, r0
	add	r4, r5, #0x2
	add	r0, r5, #0
	add	r1, r4, #0
	bl	QuantizePixel_BlackOutline
	strh	r0, [r5]
	mov	r6, #0x1
	add	r5, r4, #0
	ldr	r0, .L136+0x14
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	add	r7, r7, #0x1
	cmp	r6, r0
	bge	.L121	@cond_branch
.L123:
	add	r4, r5, #0x2
	add	r0, r5, #0
	add	r1, r4, #0
	bl	QuantizePixel_BlackOutline
	strh	r0, [r5]
	sub	r1, r5, #0x2
	add	r0, r5, #0
	bl	QuantizePixel_BlackOutline
	strh	r0, [r5]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r5, r4, #0
	ldr	r0, .L136+0x14
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r6, r0
	blt	.L123	@cond_branch
.L121:
	sub	r1, r5, #0x2
	add	r0, r5, #0
	bl	QuantizePixel_BlackOutline
	strh	r0, [r5]
	lsl	r0, r7, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L136
	ldrb	r0, [r0]
	cmp	r7, r0
	bcc	.L119	@cond_branch
.L117:
	mov	r6, #0x0
	ldr	r0, .L136+0x14
	ldrb	r0, [r0]
	cmp	r6, r0
	bcs	.L127	@cond_branch
	ldr	r3, .L136+0x4
	mov	r9, r3
	ldr	r0, .L136+0xc
	mov	r8, r0
.L129:
	ldr	r0, .L136+0x8
	ldrb	r0, [r0]
	mov	r2, r8
	ldrb	r1, [r2]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r3, r9
	ldr	r2, [r3]
	add	r2, r2, r0
	ldr	r0, .L136+0x10
	ldrb	r0, [r0]
	add	r0, r0, r6
	lsl	r0, r0, #0x1
	add	r5, r2, r0
	lsl	r1, r1, #0x1
	add	r1, r5, r1
	add	r0, r5, #0
	bl	QuantizePixel_BlackOutline
	strh	r0, [r5]
	mov	r7, #0x1
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	ldr	r0, .L136
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	add	r6, r6, #0x1
	cmp	r7, r0
	bge	.L131	@cond_branch
	ldr	r4, .L136+0xc
.L133:
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1
	add	r1, r5, r1
	add	r0, r5, #0
	bl	QuantizePixel_BlackOutline
	strh	r0, [r5]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1
	sub	r1, r5, r1
	add	r0, r5, #0
	bl	QuantizePixel_BlackOutline
	strh	r0, [r5]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	ldr	r0, .L136
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r7, r0
	blt	.L133	@cond_branch
.L131:
	mov	r2, r8
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	sub	r1, r5, r1
	add	r0, r5, #0
	bl	QuantizePixel_BlackOutline
	strh	r0, [r5]
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L136+0x14
	ldrb	r0, [r0]
	cmp	r6, r0
	bcc	.L129	@cond_branch
.L127:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L137:
	.align	2, 0
.L136:
	.word	gCanvasRowEnd
	.word	gCanvasPixels
	.word	gCanvasRowStart
	.word	gCanvasWidth
	.word	gCanvasColumnStart
	.word	gCanvasColumnEnd
.Lfe9:
	.size	 ApplyImageEffect_BlackOutline,.Lfe9-ApplyImageEffect_BlackOutline
	.align	2, 0
	.type	 ApplyImageEffect_Invert,function
	.thumb_func
ApplyImageEffect_Invert:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r2, #0x0
	ldr	r0, .L150
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L140	@cond_branch
	ldr	r0, .L150+0x4
	mov	r8, r0
	ldr	r3, .L150+0x8
.L142:
	ldr	r0, .L150+0xc
	ldrb	r1, [r0]
	add	r1, r1, r2
	ldr	r0, .L150+0x10
	ldrb	r0, [r0]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r4, r8
	ldr	r1, [r4]
	add	r1, r1, r0
	ldr	r0, .L150+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r4, r1, r0
	mov	r5, #0x0
	add	r6, r2, #0x1
	ldrb	r0, [r3]
	cmp	r5, r0
	bcs	.L141	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	add	r7, r0, #0
.L146:
	ldrh	r0, [r4]
	and	r0, r0, r7
	cmp	r0, #0
	bne	.L145	@cond_branch
	add	r0, r4, #0
	str	r3, [sp]
	bl	QuantizePixel_Invert
	strh	r0, [r4]
	ldr	r3, [sp]
.L145:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r4, #0x2
	ldrb	r0, [r3]
	cmp	r5, r0
	bcc	.L146	@cond_branch
.L141:
	lsl	r0, r6, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L150
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L142	@cond_branch
.L140:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L151:
	.align	2, 0
.L150:
	.word	gCanvasRowEnd
	.word	gCanvasPixels
	.word	gCanvasColumnEnd
	.word	gCanvasRowStart
	.word	gCanvasWidth
	.word	gCanvasColumnStart
.Lfe10:
	.size	 ApplyImageEffect_Invert,.Lfe10-ApplyImageEffect_Invert
	.align	2, 0
	.type	 ApplyImageEffect_Shimmer,function
	.thumb_func
ApplyImageEffect_Shimmer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r0, .L192
	ldr	r4, [r0]
	mov	r6, #0x0
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	add	r5, r0, #0
.L156:
	mov	r7, #0x0
.L160:
	ldrh	r0, [r4]
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L159	@cond_branch
	add	r0, r4, #0
	bl	QuantizePixel_Invert
	strh	r0, [r4]
.L159:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r4, r4, #0x2
	cmp	r7, #0x3f
	bls	.L160	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3f
	bls	.L156	@cond_branch
	mov	r7, #0x0
	ldr	r1, .L192
	mov	sl, r1
	mov	r3, sp
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	mov	r9, r2
.L167:
	lsl	r0, r7, #0x1
	mov	r2, sl
	ldr	r1, [r2]
	add	r4, r1, r0
	ldrh	r1, [r4]
	strh	r1, [r3]
	mov	r1, r9
	strh	r1, [r4]
	mov	r6, #0x1
	add	r4, r4, #0x80
	add	r5, r0, #0
.L171:
	ldrh	r0, [r4]
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L170	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x80
	mov	r0, sp
	add	r1, r4, #0
	str	r3, [sp, #0x4]
	bl	QuantizePixel_BlurHard
	strh	r0, [r4]
	ldr	r3, [sp, #0x4]
	strh	r0, [r3]
.L170:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r4, r4, #0x80
	cmp	r6, #0x3e
	bls	.L171	@cond_branch
	mov	r0, r9
	strh	r0, [r4]
	mov	r1, sl
	ldr	r0, [r1]
	add	r4, r0, r5
	ldrh	r0, [r4]
	strh	r0, [r3]
	mov	r2, r9
	strh	r2, [r4]
	mov	r6, #0x1
	add	r4, r4, #0x80
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	mov	r8, r0
.L177:
	ldrh	r0, [r4]
	mov	r1, r8
	and	r0, r0, r1
	add	r5, r4, #0
	add	r5, r5, #0x80
	cmp	r0, #0
	bne	.L176	@cond_branch
	mov	r0, sp
	add	r1, r4, #0
	add	r2, r5, #0
	str	r3, [sp, #0x4]
	bl	QuantizePixel_BlurHard
	strh	r0, [r4]
	ldr	r3, [sp, #0x4]
	strh	r0, [r3]
.L176:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r4, r5, #0
	cmp	r6, #0x3e
	bls	.L177	@cond_branch
	mov	r2, r9
	strh	r2, [r4]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x3f
	bls	.L167	@cond_branch
	ldr	r0, .L192
	ldr	r4, [r0]
	mov	r6, #0x0
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	mov	r8, r0
.L184:
	mov	r7, #0x0
	add	r5, r6, #0x1
.L188:
	ldrh	r0, [r4]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L187	@cond_branch
	add	r0, r4, #0
	bl	QuantizePixel_Invert
	strh	r0, [r4]
.L187:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r4, r4, #0x2
	cmp	r7, #0x3f
	bls	.L188	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3f
	bls	.L184	@cond_branch
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L193:
	.align	2, 0
.L192:
	.word	gCanvasPixels
.Lfe11:
	.size	 ApplyImageEffect_Shimmer,.Lfe11-ApplyImageEffect_Shimmer
	.align	2, 0
	.type	 ApplyImageEffect_BlurRight,function
	.thumb_func
ApplyImageEffect_BlurRight:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r2, #0x0
	ldr	r0, .L206
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L196	@cond_branch
	ldr	r0, .L206+0x4
	mov	r8, r0
.L198:
	ldr	r0, .L206+0x8
	ldrb	r1, [r0]
	add	r1, r1, r2
	ldr	r0, .L206+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r3, r8
	ldr	r1, [r3]
	add	r1, r1, r0
	ldr	r0, .L206+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r4, r1, r0
	ldrh	r1, [r4]
	mov	r0, sp
	strh	r1, [r0]
	mov	r5, #0x1
	add	r4, r4, #0x2
	ldr	r0, .L206+0x14
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	add	r6, r2, #0x1
	cmp	r5, r0
	bge	.L197	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	add	r7, r0, #0
.L202:
	ldrh	r0, [r4]
	and	r0, r0, r7
	cmp	r0, #0
	bne	.L201	@cond_branch
	mov	r0, sp
	add	r1, r4, #0
	bl	QuantizePixel_MotionBlur
	strh	r0, [r4]
	mov	r1, sp
	strh	r0, [r1]
.L201:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r4, #0x2
	ldr	r0, .L206+0x14
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r5, r0
	blt	.L202	@cond_branch
.L197:
	lsl	r0, r6, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L206
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L198	@cond_branch
.L196:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L207:
	.align	2, 0
.L206:
	.word	gCanvasRowEnd
	.word	gCanvasPixels
	.word	gCanvasRowStart
	.word	gCanvasWidth
	.word	gCanvasColumnStart
	.word	gCanvasColumnEnd
.Lfe12:
	.size	 ApplyImageEffect_BlurRight,.Lfe12-ApplyImageEffect_BlurRight
	.align	2, 0
	.type	 ApplyImageEffect_BlurDown,function
	.thumb_func
ApplyImageEffect_BlurDown:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r2, #0x0
	ldr	r0, .L220
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L210	@cond_branch
	ldr	r0, .L220+0x4
	mov	r8, r0
	ldr	r7, .L220+0x8
.L212:
	ldr	r0, .L220+0xc
	ldrb	r1, [r0]
	ldrb	r0, [r7]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r3, r8
	ldr	r1, [r3]
	add	r1, r1, r0
	ldr	r0, .L220+0x10
	ldrb	r0, [r0]
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r4, r1, r0
	ldrh	r1, [r4]
	mov	r0, sp
	strh	r1, [r0]
	mov	r5, #0x1
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r4, r4, r0
	ldr	r0, .L220+0x14
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	add	r6, r2, #0x1
	cmp	r5, r0
	bge	.L211	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	add	r2, r0, #0
.L216:
	ldrh	r0, [r4]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L215	@cond_branch
	mov	r0, sp
	add	r1, r4, #0
	str	r2, [sp, #0x4]
	bl	QuantizePixel_MotionBlur
	strh	r0, [r4]
	mov	r1, sp
	strh	r0, [r1]
	ldr	r2, [sp, #0x4]
.L215:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r4, r4, r0
	ldr	r0, .L220+0x14
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r5, r0
	blt	.L216	@cond_branch
.L211:
	lsl	r0, r6, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L220
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L212	@cond_branch
.L210:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L221:
	.align	2, 0
.L220:
	.word	gCanvasColumnEnd
	.word	gCanvasPixels
	.word	gCanvasWidth
	.word	gCanvasRowStart
	.word	gCanvasColumnStart
	.word	gCanvasRowEnd
.Lfe13:
	.size	 ApplyImageEffect_BlurDown,.Lfe13-ApplyImageEffect_BlurDown
	.align	2, 0
	.type	 AddPointillismPoints,function
	.thumb_func
AddPointillismPoints:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	mov	r2, sp
	ldr	r3, .L263
	lsl	r1, r0, #0x1
	add	r1, r1, sl
	add	r0, r1, r3
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r0, r3, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	strb	r0, [r2, #0x1]
	mov	r5, sp
	add	r0, r3, #0x2
	add	r1, r1, r0
	ldrb	r4, [r1]
	lsl	r2, r4, #0x18
	lsr	r1, r2, #0x1b
	mov	r0, #0x7
	and	r1, r1, r0
	strh	r1, [r5, #0x2]
	lsr	r2, r2, #0x19
	mov	r9, r2
	mov	r0, #0x3
	and	r2, r2, r0
	mov	r9, r2
	mov	r5, #0x1
	and	r5, r5, r4
	mov	r4, #0x1
	mov	r8, r4
	cmp	r8, r1
	bcs	.L224	@cond_branch
	mov	r3, sp
.L226:
	cmp	r5, #0
	bne	.L227	@cond_branch
	mov	r0, r8
	lsl	r2, r0, #0x2
	mov	r4, sp
	add	r1, r4, r2
	ldrb	r0, [r3]
	mov	r4, r8
	sub	r0, r0, r4
	strb	r0, [r1]
	ldrb	r0, [r3, #0x1]
	add	r0, r0, r8
	b	.L262
.L264:
	.align	2, 0
.L263:
	.word	gPointillismPoints
.L227:
	mov	r0, r8
	lsl	r2, r0, #0x2
	mov	r4, sp
	add	r1, r4, r2
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r3, #0x1]
	sub	r0, r0, #0x1
.L262:
	strb	r0, [r1, #0x1]
	add	r2, r2, sp
	ldrb	r0, [r2]
	cmp	r0, #0x3f
	bhi	.L230	@cond_branch
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x3f
	bls	.L229	@cond_branch
.L230:
	mov	r0, r8
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x2]
	b	.L224
.L229:
	ldrh	r0, [r3, #0x2]
	mov	r1, r8
	sub	r0, r0, r1
	strh	r0, [r2, #0x2]
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrh	r0, [r3, #0x2]
	cmp	r8, r0
	bcc	.L226	@cond_branch
.L224:
	mov	r2, #0x0
	mov	r8, r2
	mov	r0, sp
	ldrh	r0, [r0, #0x2]
	cmp	r8, r0
	bcc	.LCB1831
	b	.L233	@long jump
.LCB1831:
	mov	r3, #0x1f
.L235:
	ldr	r1, .L265
	mov	r4, r8
	lsl	r0, r4, #0x2
	mov	r2, sp
	add	r6, r2, r0
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x7
	ldr	r1, [r1]
	add	r1, r1, r0
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r2, r1, r0
	ldrh	r1, [r2]
	mov	r4, #0x80
	lsl	r4, r4, #0x8
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L234	@cond_branch
	mov	r7, #0x1f
	and	r7, r7, r1
	lsl	r0, r1, #0x10
	lsr	r5, r0, #0x15
	and	r5, r5, r3
	lsr	r4, r0, #0x1a
	and	r4, r4, r3
	mov	r0, r9
	cmp	r0, #0
	blt	.L237	@cond_branch
	cmp	r0, #0x1
	ble	.L239	@cond_branch
	cmp	r0, #0x3
	bgt	.L237	@cond_branch
	ldrh	r0, [r6, #0x2]
	add	r1, r7, r0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	add	r1, r5, r0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	add	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r7, #0x1f
	bls	.L255	@cond_branch
	mov	r7, #0x1f
	b	.L255
.L266:
	.align	2, 0
.L265:
	.word	gCanvasPixels
.L239:
	mov	r1, sl
	lsl	r0, r1, #0x1
	add	r0, r0, sl
	ldr	r1, .L267
	add	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsr	r0, r0, #0x3
	mov	r1, #0x7
	and	r0, r0, r1
	mov	r1, #0x3
	str	r2, [sp, #0x18]
	str	r3, [sp, #0x1c]
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [sp, #0x18]
	ldr	r3, [sp, #0x1c]
	cmp	r0, #0x1
	beq	.L244	@cond_branch
	cmp	r0, #0x1
	bgt	.L252	@cond_branch
	cmp	r0, #0
	beq	.L241	@cond_branch
	b	.L237
.L268:
	.align	2, 0
.L267:
	.word	gPointillismPoints
.L252:
	cmp	r0, #0x2
	beq	.L247	@cond_branch
	b	.L237
.L241:
	ldrh	r0, [r6, #0x2]
	cmp	r7, r0
	bcc	.L242	@cond_branch
	sub	r0, r7, r0
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	b	.L237
.L242:
	mov	r7, #0x0
	b	.L237
.L244:
	ldrh	r0, [r6, #0x2]
	cmp	r5, r0
	bcc	.L245	@cond_branch
	sub	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	b	.L237
.L245:
	mov	r5, #0x0
	b	.L237
.L247:
	ldrh	r0, [r6, #0x2]
	cmp	r4, r0
	bcc	.L248	@cond_branch
	sub	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	b	.L237
.L248:
	mov	r4, #0x0
	b	.L237
.L255:
	cmp	r5, #0x1f
	bls	.L256	@cond_branch
	mov	r5, #0x1f
.L256:
	cmp	r4, #0x1f
	bls	.L237	@cond_branch
	mov	r4, #0x1f
.L237:
	lsl	r0, r4, #0xa
	lsl	r1, r5, #0x5
	orr	r0, r0, r1
	orr	r7, r7, r0
	strh	r7, [r2]
.L234:
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, sp
	ldrh	r0, [r0, #0x2]
	cmp	r8, r0
	bcs	.LCB2026
	b	.L235	@long jump
.LCB2026:
.L233:
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 AddPointillismPoints,.Lfe14-AddPointillismPoints
	.align	2, 0
	.type	 ConvertColorToGrayscale,function
	.thumb_func
ConvertColorToGrayscale:
	ldrh	r2, [r0]
	mov	r0, #0x1f
	add	r1, r2, #0
	and	r1, r1, r0
	asr	r3, r2, #0x5
	and	r3, r3, r0
	asr	r2, r2, #0xa
	and	r2, r2, r0
	mov	r0, #0x4c
	mul	r1, r1, r0
	mov	r0, #0x97
	mul	r0, r0, r3
	add	r1, r1, r0
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r1, r1, r0
	asr	r1, r1, #0x8
	lsl	r0, r1, #0xa
	lsl	r2, r1, #0x5
	orr	r0, r0, r2
	orr	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bx	lr
.Lfe15:
	.size	 ConvertColorToGrayscale,.Lfe15-ConvertColorToGrayscale
	.align	2, 0
	.type	 QuantizePixel_PersonalityColor,function
	.thumb_func
QuantizePixel_PersonalityColor:
	push	{r4, lr}
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	ldrh	r0, [r0]
	mov	r2, #0x1f
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x15
	and	r3, r3, r2
	lsr	r0, r0, #0x1a
	and	r0, r0, r2
	cmp	r1, #0x10
	bhi	.L271	@cond_branch
	cmp	r3, #0x10
	bhi	.L271	@cond_branch
	cmp	r0, #0x10
	bhi	.L271	@cond_branch
	add	r0, r4, #0
	bl	GetColorFromPersonality
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L273
.L271:
	ldr	r0, .L274
.L273:
	pop	{r4}
	pop	{r1}
	bx	r1
.L275:
	.align	2, 0
.L274:
	.word	0x7fff
.Lfe16:
	.size	 QuantizePixel_PersonalityColor,.Lfe16-QuantizePixel_PersonalityColor
	.align	2, 0
	.type	 GetColorFromPersonality,function
	.thumb_func
GetColorFromPersonality:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	mov	r8, r0
	mov	r6, #0x0
	mov	r7, #0x0
	add	r0, r4, #0
	mov	r1, #0x6
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0x6
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bhi	.L277	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L287
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L288:
	.align	2, 0
.L287:
	.word	.L284
	.align	2, 0
	.align	2, 0
.L284:
	.word	.L278
	.word	.L279
	.word	.L280
	.word	.L281
	.word	.L282
	.word	.L283
.L278:
	mov	r0, #0x15
	sub	r0, r0, r5
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r7, r6, #0
	mov	r1, #0x0
	mov	r8, r1
	b	.L277
.L279:
	mov	r7, #0x0
	mov	r0, #0x15
	sub	r0, r0, r5
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	mov	r6, r8
	b	.L277
.L280:
	mov	r0, #0x15
	sub	r0, r0, r5
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r6, #0x0
	mov	r8, r7
	b	.L277
.L281:
	mov	r7, #0x0
	mov	r6, #0x0
	mov	r0, #0x17
	sub	r0, r0, r5
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L286
.L282:
	mov	r0, #0x17
	sub	r0, r0, r5
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r6, #0x0
	mov	r8, r6
	b	.L277
.L283:
	mov	r7, #0x0
	mov	r0, #0x17
	sub	r0, r0, r5
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r0, #0x0
.L286:
	mov	r8, r0
.L277:
	lsl	r0, r7, #0xa
	lsl	r1, r6, #0x5
	orr	r0, r0, r1
	mov	r1, r8
	orr	r1, r1, r0
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 GetColorFromPersonality,.Lfe17-GetColorFromPersonality
	.align	2, 0
	.type	 QuantizePixel_BlackAndWhite,function
	.thumb_func
QuantizePixel_BlackAndWhite:
	push	{lr}
	ldrh	r0, [r0]
	mov	r2, #0x1f
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x15
	and	r3, r3, r2
	lsr	r0, r0, #0x1a
	and	r0, r0, r2
	cmp	r1, #0x10
	bhi	.L290	@cond_branch
	cmp	r3, #0x10
	bhi	.L290	@cond_branch
	cmp	r0, #0x10
	bhi	.L290	@cond_branch
	mov	r0, #0x0
	b	.L292
.L290:
	ldr	r0, .L293
.L292:
	pop	{r1}
	bx	r1
.L294:
	.align	2, 0
.L293:
	.word	0x7fff
.Lfe18:
	.size	 QuantizePixel_BlackAndWhite,.Lfe18-QuantizePixel_BlackAndWhite
	.align	2, 0
	.type	 QuantizePixel_BlackOutline,function
	.thumb_func
QuantizePixel_BlackOutline:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r3, [r4]
	cmp	r3, #0
	beq	.L296	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L297	@cond_branch
	add	r0, r2, #0
	b	.L299
.L297:
	ldrh	r1, [r1]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L296	@cond_branch
	ldrh	r0, [r4]
	b	.L299
.L296:
	mov	r0, #0x0
.L299:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 QuantizePixel_BlackOutline,.Lfe19-QuantizePixel_BlackOutline
	.align	2, 0
	.type	 QuantizePixel_Invert,function
	.thumb_func
QuantizePixel_Invert:
	push	{r4, lr}
	ldrh	r1, [r0]
	mov	r0, #0x1f
	mov	r3, #0x1f
	and	r3, r3, r1
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x15
	lsr	r1, r1, #0x1a
	sub	r3, r0, r3
	add	r4, r0, #0
	bic	r4, r4, r2
	add	r2, r4, #0
	bic	r0, r0, r1
	lsl	r0, r0, #0xa
	lsl	r2, r2, #0x5
	orr	r0, r0, r2
	orr	r0, r0, r3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 QuantizePixel_Invert,.Lfe20-QuantizePixel_Invert
	.align	2, 0
	.type	 QuantizePixel_MotionBlur,function
	.thumb_func
QuantizePixel_MotionBlur:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	add	r7, r1, #0
	ldrh	r4, [r0]
	ldrh	r5, [r7]
	lsl	r6, r4, #0x10
	lsl	r0, r5, #0x10
	mov	ip, r0
	cmp	r4, r5
	beq	.L323	@cond_branch
	mov	r2, sp
	mov	r3, #0x1f
	mov	r1, #0x1f
	add	r0, r1, #0
	and	r0, r0, r4
	strh	r0, [r2]
	lsr	r0, r6, #0x15
	and	r0, r0, r3
	strh	r0, [r2, #0x2]
	lsr	r0, r6, #0x1a
	and	r0, r0, r3
	strh	r0, [r2, #0x4]
	mov	r0, sp
	and	r1, r1, r5
	strh	r1, [r0, #0x6]
	mov	r1, sp
	mov	r2, ip
	lsr	r0, r2, #0x15
	and	r0, r0, r3
	strh	r0, [r1, #0x8]
	lsr	r0, r2, #0x1a
	and	r0, r0, r3
	strh	r0, [r1, #0xa]
	mov	r0, sp
	ldrh	r0, [r0]
	cmp	r0, #0x19
	bls	.L303	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0x19
	bls	.L303	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0, #0x4]
	cmp	r0, #0x19
	bhi	.L323	@cond_branch
.L303:
	mov	r0, sp
	ldrh	r0, [r0, #0x6]
	cmp	r0, #0x19
	bls	.L304	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0, #0x8]
	cmp	r0, #0x19
	bls	.L304	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0, #0xa]
	cmp	r0, #0x19
	bls	.L304	@cond_branch
.L323:
	ldrh	r0, [r7]
	b	.L322
.L304:
	mov	r4, #0x0
	add	r6, sp, #0xc
	mov	r7, sp
	add	r7, r7, #0x6
	add	r5, r6, #0
.L308:
	lsl	r2, r4, #0x1
	mov	r1, sp
	add	r0, r1, r2
	add	r1, r7, r2
	ldrh	r3, [r0]
	ldrh	r0, [r1]
	cmp	r3, r0
	bls	.L309	@cond_branch
	add	r1, r5, r2
	sub	r0, r3, r0
	b	.L324
.L309:
	add	r1, r5, r2
	sub	r0, r0, r3
.L324:
	strh	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L308	@cond_branch
	add	r1, r6, #0
	ldrh	r0, [r1, #0x2]
	ldrh	r3, [r1]
	cmp	r3, r0
	bcc	.L312	@cond_branch
	ldrh	r2, [r1, #0x4]
	cmp	r3, r2
	bcc	.L313	@cond_branch
	add	r2, r3, #0
	b	.L317
.L313:
	cmp	r0, r2
	bcs	.L325	@cond_branch
	b	.L326
.L312:
	ldrh	r2, [r1, #0x4]
	cmp	r0, r2
	bcc	.L318	@cond_branch
.L325:
	ldrh	r2, [r1, #0x2]
	b	.L317
.L318:
	cmp	r2, r3
	bcc	.L320	@cond_branch
.L326:
	ldrh	r2, [r1, #0x4]
	b	.L317
.L320:
	ldrh	r2, [r6]
.L317:
	mov	r0, sp
	ldrh	r1, [r0, #0x6]
	lsr	r0, r2, #0x1
	mov	r6, #0x1f
	sub	r6, r6, r0
	mov	r0, r1
	mul	r0, r0, r6
	mov	r1, #0x1f
	bl	__divsi3
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r0, sp
	ldrh	r0, [r0, #0x8]
	mul	r0, r0, r6
	mov	r1, #0x1f
	bl	__divsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, sp
	ldrh	r0, [r0, #0xa]
	mul	r0, r0, r6
	mov	r1, #0x1f
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x6
	lsl	r4, r4, #0x5
	orr	r0, r0, r4
	orr	r5, r5, r0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r5, #0
.L322:
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 QuantizePixel_MotionBlur,.Lfe21-QuantizePixel_MotionBlur
	.align	2, 0
	.type	 QuantizePixel_Blur,function
	.thumb_func
QuantizePixel_Blur:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r3, r0, #0
	mov	sl, r1
	str	r2, [sp]
	ldrh	r1, [r3]
	mov	r0, sl
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L328	@cond_branch
	ldrh	r0, [r2]
	cmp	r0, r1
	bne	.L328	@cond_branch
	mov	r1, sl
	ldrh	r0, [r1]
	b	.L337
.L328:
	mov	r2, sl
	ldrh	r0, [r2]
	mov	r1, #0x1f
	mov	r9, r1
	mov	r4, #0x1f
	add	r5, r4, #0
	and	r5, r5, r0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x15
	mov	r1, r9
	and	r1, r1, r2
	mov	r8, r1
	lsr	r0, r0, #0x1a
	mov	r2, r9
	and	r2, r2, r0
	str	r2, [sp, #0x4]
	ldrh	r2, [r3]
	add	r0, r4, #0
	and	r0, r0, r2
	lsl	r2, r2, #0x10
	lsr	r1, r2, #0x15
	mov	r3, r9
	and	r1, r1, r3
	add	r0, r0, r1
	lsr	r2, r2, #0x1a
	and	r2, r2, r3
	add	r0, r0, r2
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r1, r8
	add	r0, r5, r1
	ldr	r2, [sp, #0x4]
	add	r0, r0, r2
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r3, [sp]
	ldrh	r1, [r3]
	and	r4, r4, r1
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x15
	mov	r2, r9
	and	r0, r0, r2
	add	r4, r4, r0
	lsr	r1, r1, #0x1a
	and	r1, r1, r2
	add	r4, r4, r1
	add	r0, r4, #0
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r7, r6
	bne	.L329	@cond_branch
	cmp	r1, r6
	bne	.L329	@cond_branch
	mov	r3, sl
	ldrh	r0, [r3]
	b	.L337
.L329:
	cmp	r7, r6
	bls	.L330	@cond_branch
	sub	r0, r7, r6
	b	.L338
.L330:
	sub	r0, r6, r7
.L338:
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r1, r6
	bls	.L332	@cond_branch
	sub	r0, r1, r6
	b	.L339
.L332:
	sub	r0, r6, r1
.L339:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r2, r0
	bcc	.L334	@cond_branch
	add	r0, r2, #0
.L334:
	lsr	r0, r0, #0x1
	mov	r4, #0x1f
	sub	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, r5
	mul	r0, r0, r4
	mov	r1, #0x1f
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, r8
	mul	r0, r0, r4
	mov	r1, #0x1f
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r1, [sp, #0x4]
	mov	r0, r1
	mul	r0, r0, r4
	mov	r1, #0x1f
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x6
	mov	r2, r8
	lsl	r1, r2, #0x5
	orr	r0, r0, r1
	orr	r5, r5, r0
	lsl	r0, r5, #0x10
	lsr	r0, r0, #0x10
.L337:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 QuantizePixel_Blur,.Lfe22-QuantizePixel_Blur
	.align	2, 0
	.type	 QuantizePixel_BlurHard,function
	.thumb_func
QuantizePixel_BlurHard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r3, r0, #0
	mov	sl, r1
	str	r2, [sp]
	ldrh	r1, [r3]
	mov	r0, sl
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L341	@cond_branch
	ldrh	r0, [r2]
	cmp	r0, r1
	bne	.L341	@cond_branch
	mov	r1, sl
	ldrh	r0, [r1]
	b	.L350
.L341:
	mov	r2, sl
	ldrh	r0, [r2]
	mov	r1, #0x1f
	mov	r9, r1
	mov	r4, #0x1f
	add	r5, r4, #0
	and	r5, r5, r0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x15
	mov	r1, r9
	and	r1, r1, r2
	mov	r8, r1
	lsr	r0, r0, #0x1a
	mov	r2, r9
	and	r2, r2, r0
	str	r2, [sp, #0x4]
	ldrh	r2, [r3]
	add	r0, r4, #0
	and	r0, r0, r2
	lsl	r2, r2, #0x10
	lsr	r1, r2, #0x15
	mov	r3, r9
	and	r1, r1, r3
	add	r0, r0, r1
	lsr	r2, r2, #0x1a
	and	r2, r2, r3
	add	r0, r0, r2
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r1, r8
	add	r0, r5, r1
	ldr	r2, [sp, #0x4]
	add	r0, r0, r2
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r3, [sp]
	ldrh	r1, [r3]
	and	r4, r4, r1
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x15
	mov	r2, r9
	and	r0, r0, r2
	add	r4, r4, r0
	lsr	r1, r1, #0x1a
	and	r1, r1, r2
	add	r4, r4, r1
	add	r0, r4, #0
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r7, r6
	bne	.L342	@cond_branch
	cmp	r1, r6
	bne	.L342	@cond_branch
	mov	r3, sl
	ldrh	r0, [r3]
	b	.L350
.L342:
	cmp	r7, r6
	bls	.L343	@cond_branch
	sub	r0, r7, r6
	b	.L351
.L343:
	sub	r0, r6, r7
.L351:
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r1, r6
	bls	.L345	@cond_branch
	sub	r0, r1, r6
	b	.L352
.L345:
	sub	r0, r6, r1
.L352:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r2, r0
	bcc	.L347	@cond_branch
	add	r0, r2, #0
.L347:
	mov	r4, #0x1f
	sub	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, r5
	mul	r0, r0, r4
	mov	r1, #0x1f
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, r8
	mul	r0, r0, r4
	mov	r1, #0x1f
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r1, [sp, #0x4]
	mov	r0, r1
	mul	r0, r0, r4
	mov	r1, #0x1f
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x6
	mov	r2, r8
	lsl	r1, r2, #0x5
	orr	r0, r0, r1
	orr	r5, r5, r0
	lsl	r0, r5, #0x10
	lsr	r0, r0, #0x10
.L350:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 QuantizePixel_BlurHard,.Lfe23-QuantizePixel_BlurHard
	.align	2, 0
	.globl	ConvertImageProcessingToGBA
	.type	 ConvertImageProcessingToGBA,function
	.thumb_func
ConvertImageProcessingToGBA:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	ldrb	r1, [r0, #0x1d]
	lsr	r5, r1, #0x3
	ldrb	r1, [r0, #0x1e]
	lsr	r1, r1, #0x3
	str	r1, [sp, #0x8]
	ldr	r1, [r0, #0x4]
	str	r1, [sp]
	ldr	r2, [r0, #0x10]
	str	r2, [sp, #0x4]
	ldrh	r0, [r0, #0x16]
	cmp	r0, #0x2
	bne	.L354	@cond_branch
	mov	r1, #0x0
	ldr	r0, [sp, #0x8]
	cmp	r1, r0
	bcc	.LCB3017
	b	.L370	@long jump
.LCB3017:
.L358:
	mov	r0, #0x0
	add	r2, r1, #0x1
	mov	sl, r2
	cmp	r0, r5
	bcs	.L357	@cond_branch
	mov	r2, r1
	mul	r2, r2, r5
	mov	r9, r2
	lsl	r1, r1, #0x3
	mov	r8, r1
.L362:
	mov	r4, #0x0
	lsl	r6, r0, #0x4
	add	r7, r0, #0x1
	add	r0, r0, r9
	lsl	r0, r0, #0x6
	ldr	r1, [sp, #0x4]
	add	r1, r1, r0
	mov	ip, r1
.L366:
	lsl	r0, r4, #0x3
	mov	r2, ip
	add	r3, r2, r0
	mov	r1, r8
	add	r0, r1, r4
	lsl	r0, r0, #0x3
	mul	r0, r0, r5
	lsl	r0, r0, #0x1
	ldr	r2, [sp]
	add	r0, r2, r0
	add	r2, r0, r6
	ldrh	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	ldrh	r1, [r2]
	orr	r0, r0, r1
	strh	r0, [r3]
	ldrh	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	ldrh	r1, [r2, #0x4]
	orr	r0, r0, r1
	strh	r0, [r3, #0x2]
	ldrh	r0, [r2, #0xa]
	lsl	r0, r0, #0x8
	ldrh	r1, [r2, #0x8]
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	ldrh	r0, [r2, #0xe]
	lsl	r0, r0, #0x8
	ldrh	r1, [r2, #0xc]
	orr	r0, r0, r1
	strh	r0, [r3, #0x6]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x7
	bls	.L366	@cond_branch
	lsl	r0, r7, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r5
	bcc	.L362	@cond_branch
.L357:
	mov	r1, sl
	lsl	r0, r1, #0x10
	lsr	r1, r0, #0x10
	ldr	r2, [sp, #0x8]
	cmp	r1, r2
	bcc	.L358	@cond_branch
	b	.L370
.L354:
	mov	r1, #0x0
	ldr	r0, [sp, #0x8]
	cmp	r1, r0
	bcs	.L370	@cond_branch
.L374:
	mov	r0, #0x0
	add	r2, r1, #0x1
	mov	sl, r2
	cmp	r0, r5
	bcs	.L373	@cond_branch
	mov	r2, r1
	mul	r2, r2, r5
	mov	r9, r2
	lsl	r1, r1, #0x3
	mov	r8, r1
.L378:
	mov	r4, #0x0
	lsl	r6, r0, #0x4
	add	r7, r0, #0x1
	add	r0, r0, r9
	lsl	r0, r0, #0x5
	ldr	r1, [sp, #0x4]
	add	r1, r1, r0
	mov	ip, r1
.L382:
	lsl	r0, r4, #0x2
	mov	r2, ip
	add	r3, r2, r0
	mov	r1, r8
	add	r0, r1, r4
	lsl	r0, r0, #0x3
	mul	r0, r0, r5
	lsl	r0, r0, #0x1
	ldr	r2, [sp]
	add	r0, r2, r0
	add	r2, r0, r6
	ldrh	r1, [r2, #0x2]
	lsl	r1, r1, #0x4
	ldrh	r0, [r2]
	orr	r1, r1, r0
	ldrh	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrh	r0, [r2, #0x6]
	lsl	r0, r0, #0xc
	orr	r1, r1, r0
	strh	r1, [r3]
	ldrh	r1, [r2, #0xa]
	lsl	r1, r1, #0x4
	ldrh	r0, [r2, #0x8]
	orr	r1, r1, r0
	ldrh	r0, [r2, #0xc]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrh	r0, [r2, #0xe]
	lsl	r0, r0, #0xc
	orr	r1, r1, r0
	strh	r1, [r3, #0x2]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x7
	bls	.L382	@cond_branch
	lsl	r0, r7, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r5
	bcc	.L378	@cond_branch
.L373:
	mov	r1, sl
	lsl	r0, r1, #0x10
	lsr	r1, r0, #0x10
	ldr	r2, [sp, #0x8]
	cmp	r1, r2
	bcc	.L374	@cond_branch
.L370:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 ConvertImageProcessingToGBA,.Lfe24-ConvertImageProcessingToGBA
	.align	2, 0
	.globl	ApplyImageProcessingQuantization
	.type	 ApplyImageProcessingQuantization,function
	.thumb_func
ApplyImageProcessingQuantization:
	push	{lr}
	ldr	r2, .L396
	ldrb	r1, [r0, #0x18]
	lsl	r1, r1, #0x4
	strh	r1, [r2]
	ldr	r3, .L396+0x4
	ldrh	r2, [r2]
	lsl	r2, r2, #0x1
	ldr	r1, [r0, #0x8]
	add	r1, r1, r2
	str	r1, [r3]
	ldr	r2, .L396+0x8
	ldr	r1, [r0, #0x4]
	str	r1, [r2]
	ldr	r2, .L396+0xc
	ldrb	r1, [r0, #0x19]
	strb	r1, [r2]
	ldr	r2, .L396+0x10
	ldrb	r1, [r0, #0x1a]
	strb	r1, [r2]
	ldr	r2, .L396+0x14
	ldrb	r1, [r0, #0x1b]
	strb	r1, [r2]
	ldr	r2, .L396+0x18
	ldrb	r1, [r0, #0x1c]
	strb	r1, [r2]
	ldr	r2, .L396+0x1c
	ldrb	r1, [r0, #0x1d]
	strb	r1, [r2]
	ldr	r2, .L396+0x20
	ldrb	r1, [r0, #0x1e]
	strb	r1, [r2]
	ldrh	r0, [r0, #0x14]
	cmp	r0, #0x5
	bhi	.L387	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L396+0x24
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L397:
	.align	2, 0
.L396:
	.word	gCanvasPaletteStart
	.word	gCanvasPalette
	.word	gCanvasPixels
	.word	gCanvasColumnStart
	.word	gCanvasRowStart
	.word	gCanvasColumnEnd
	.word	gCanvasRowEnd
	.word	gCanvasWidth
	.word	gCanvasHeight
	.word	.L394
	.align	2, 0
	.align	2, 0
.L394:
	.word	.L388
	.word	.L389
	.word	.L390
	.word	.L391
	.word	.L392
	.word	.L393
.L388:
	mov	r0, #0x0
	bl	QuantizePalette_Standard
	b	.L387
.L389:
	mov	r0, #0x1
	bl	QuantizePalette_Standard
	b	.L387
.L390:
	bl	SetPresetPalette_PrimaryColors
	bl	QuantizePalette_PrimaryColors
	b	.L387
.L391:
	bl	SetPresetPalette_Grayscale
	bl	QuantizePalette_Grayscale
	b	.L387
.L392:
	bl	SetPresetPalette_GrayscaleSmall
	bl	QuantizePalette_GrayscaleSmall
	b	.L387
.L393:
	bl	SetPresetPalette_BlackAndWhite
	bl	QuantizePalette_BlackAndWhite
.L387:
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 ApplyImageProcessingQuantization,.Lfe25-ApplyImageProcessingQuantization
	.align	2, 0
	.type	 SetPresetPalette_PrimaryColors,function
	.thumb_func
SetPresetPalette_PrimaryColors:
	ldr	r2, .L399
	ldr	r1, [r2]
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, [r2]
	ldr	r2, .L399+0x4
	add	r1, r2, #0
	strh	r1, [r0, #0x2]
	ldr	r2, .L399+0x8
	add	r1, r2, #0
	strh	r1, [r0, #0x4]
	ldr	r2, .L399+0xc
	add	r1, r2, #0
	strh	r1, [r0, #0x6]
	ldr	r2, .L399+0x10
	add	r1, r2, #0
	strh	r1, [r0, #0x8]
	ldr	r2, .L399+0x14
	add	r1, r2, #0
	strh	r1, [r0, #0xa]
	ldr	r2, .L399+0x18
	add	r1, r2, #0
	strh	r1, [r0, #0xc]
	ldr	r2, .L399+0x1c
	add	r1, r2, #0
	strh	r1, [r0, #0xe]
	ldr	r2, .L399+0x20
	add	r1, r2, #0
	strh	r1, [r0, #0x10]
	ldr	r2, .L399+0x24
	add	r1, r2, #0
	strh	r1, [r0, #0x12]
	ldr	r2, .L399+0x28
	add	r1, r2, #0
	strh	r1, [r0, #0x14]
	ldr	r2, .L399+0x2c
	add	r1, r2, #0
	strh	r1, [r0, #0x16]
	ldr	r2, .L399+0x30
	add	r1, r2, #0
	strh	r1, [r0, #0x18]
	ldr	r2, .L399+0x34
	add	r1, r2, #0
	strh	r1, [r0, #0x1a]
	ldr	r2, .L399+0x38
	add	r1, r2, #0
	strh	r1, [r0, #0x1c]
	ldr	r2, .L399+0x3c
	add	r1, r2, #0
	strh	r1, [r0, #0x1e]
	bx	lr
.L400:
	.align	2, 0
.L399:
	.word	gCanvasPalette
	.word	0x18c6
	.word	0x77bd
	.word	0x2d6b
	.word	0x18dd
	.word	0x1ba6
	.word	0x74c6
	.word	0x1bbd
	.word	0x74dd
	.word	0x77a6
	.word	0x197d
	.word	0x1bab
	.word	0x7566
	.word	0x2cdd
	.word	0x2fa6
	.word	0x74cb
.Lfe26:
	.size	 SetPresetPalette_PrimaryColors,.Lfe26-SetPresetPalette_PrimaryColors
	.align	2, 0
	.type	 SetPresetPalette_BlackAndWhite,function
	.thumb_func
SetPresetPalette_BlackAndWhite:
	ldr	r2, .L402
	ldr	r0, [r2]
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r2, [r2]
	strh	r1, [r2, #0x2]
	ldr	r1, .L402+0x4
	add	r0, r1, #0
	strh	r0, [r2, #0x4]
	bx	lr
.L403:
	.align	2, 0
.L402:
	.word	gCanvasPalette
	.word	0x7fff
.Lfe27:
	.size	 SetPresetPalette_BlackAndWhite,.Lfe27-SetPresetPalette_BlackAndWhite
	.align	2, 0
	.type	 SetPresetPalette_GrayscaleSmall,function
	.thumb_func
SetPresetPalette_GrayscaleSmall:
	push	{r4, r5, lr}
	ldr	r1, .L410
	ldr	r0, [r1]
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r0, [r1]
	strh	r2, [r0, #0x2]
	mov	r4, #0x0
	add	r5, r1, #0
.L408:
	ldr	r0, [r5]
	lsl	r2, r4, #0x1
	add	r2, r2, r0
	add	r0, r4, #0x2
	lsl	r3, r0, #0x1
	lsl	r1, r0, #0xb
	lsl	r0, r0, #0x6
	orr	r1, r1, r0
	orr	r1, r1, r3
	strh	r1, [r2, #0x4]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xd
	bls	.L408	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L411:
	.align	2, 0
.L410:
	.word	gCanvasPalette
.Lfe28:
	.size	 SetPresetPalette_GrayscaleSmall,.Lfe28-SetPresetPalette_GrayscaleSmall
	.align	2, 0
	.type	 SetPresetPalette_Grayscale,function
	.thumb_func
SetPresetPalette_Grayscale:
	push	{r4, lr}
	ldr	r2, .L418
	ldr	r1, [r2]
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r3, #0x0
	add	r4, r2, #0
.L416:
	ldr	r0, [r4]
	lsl	r2, r3, #0x1
	add	r2, r2, r0
	lsl	r0, r3, #0xa
	lsl	r1, r3, #0x5
	orr	r0, r0, r1
	orr	r0, r0, r3
	strh	r0, [r2, #0x2]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x1f
	bls	.L416	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L419:
	.align	2, 0
.L418:
	.word	gCanvasPalette
.Lfe29:
	.size	 SetPresetPalette_Grayscale,.Lfe29-SetPresetPalette_Grayscale
	.align	2, 0
	.type	 QuantizePalette_Standard,function
	.thumb_func
QuantizePalette_Standard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	mov	r1, #0xdf
	mov	r9, r1
	cmp	r0, #0
	bne	.L421	@cond_branch
	mov	r2, #0xff
	mov	r9, r2
.L421:
	mov	r6, #0x0
	ldr	r3, .L452
	mov	ip, r3
	mov	r0, r9
	lsl	r4, r0, #0x1
	ldr	r5, .L452+0x4
	cmp	r6, r9
	bcs	.L423	@cond_branch
	mov	r2, #0x0
.L425:
	ldr	r0, [r3]
	lsl	r1, r6, #0x1
	add	r1, r1, r0
	strh	r2, [r1]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, r9
	bcc	.L425	@cond_branch
.L423:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r4, r0
	ldr	r2, .L452+0x8
	add	r1, r2, #0
	strh	r1, [r0]
	mov	r3, #0x0
	ldrb	r5, [r5]
	cmp	r3, r5
	bcs	.L428	@cond_branch
.L430:
	ldr	r2, .L452+0xc
	ldr	r0, .L452+0x10
	ldrb	r1, [r0]
	add	r1, r1, r3
	ldr	r0, .L452+0x14
	ldrb	r0, [r0]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	ldr	r1, [r2]
	add	r1, r1, r0
	ldr	r0, .L452+0x18
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r4, r1, r0
	mov	r6, #0x0
	ldr	r0, .L452+0x1c
	add	r2, r0, #0
	add	r3, r3, #0x1
	mov	sl, r3
	ldrb	r3, [r2]
	cmp	r6, r3
	bcs	.L429	@cond_branch
	ldr	r0, .L452+0x20
	mov	r8, r0
.L434:
	ldrh	r0, [r4]
	mov	r3, #0x80
	lsl	r3, r3, #0x8
	add	r1, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L435	@cond_branch
	mov	r1, r8
	ldrh	r0, [r1]
	strh	r0, [r4]
	add	r6, r6, #0x1
	add	r7, r4, #0x2
	b	.L433
.L453:
	.align	2, 0
.L452:
	.word	gCanvasPalette
	.word	gCanvasRowEnd
	.word	0x3def
	.word	gCanvasPixels
	.word	gCanvasRowStart
	.word	gCanvasWidth
	.word	gCanvasColumnStart
	.word	gCanvasColumnEnd
	.word	gCanvasPaletteStart
.L435:
	add	r0, r4, #0
	bl	QuantizePixel_Standard
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r3, #0x1
	add	r6, r6, #0x1
	add	r7, r4, #0x2
	cmp	r3, r9
	bcs	.L437	@cond_branch
	ldr	r0, .L454
	ldr	r2, [r0]
	ldrh	r1, [r2, #0x2]
	mov	ip, r0
	cmp	r1, #0
	bne	.L443	@cond_branch
	strh	r5, [r2, #0x2]
	mov	r2, r8
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	b	.L450
.L455:
	.align	2, 0
.L454:
	.word	gCanvasPalette
.L443:
	mov	r2, ip
	ldr	r1, [r2]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r5
	beq	.L451	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r9
	bcs	.L437	@cond_branch
	lsl	r0, r3, #0x1
	add	r1, r0, r1
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L443	@cond_branch
	strh	r5, [r1]
.L451:
	mov	r1, r8
	ldrh	r0, [r1]
	add	r0, r0, r3
.L450:
	strh	r0, [r4]
.L437:
	ldr	r2, .L456
	cmp	r3, r9
	bne	.L433	@cond_branch
	mov	r3, r9
	strh	r3, [r4]
.L433:
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
	add	r4, r7, #0
	ldrb	r0, [r2]
	cmp	r6, r0
	bcc	.L434	@cond_branch
.L429:
	mov	r1, sl
	lsl	r0, r1, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L456+0x4
	ldrb	r0, [r0]
	cmp	r3, r0
	bcc	.L430	@cond_branch
.L428:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L457:
	.align	2, 0
.L456:
	.word	gCanvasColumnEnd
	.word	gCanvasRowEnd
.Lfe30:
	.size	 QuantizePalette_Standard,.Lfe30-QuantizePalette_Standard
	.align	2, 0
	.type	 QuantizePalette_BlackAndWhite,function
	.thumb_func
QuantizePalette_BlackAndWhite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r2, #0x0
	ldr	r0, .L474
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L460	@cond_branch
	ldr	r0, .L474+0x4
	mov	r8, r0
.L462:
	ldr	r0, .L474+0x8
	ldrb	r1, [r0]
	add	r1, r1, r2
	ldr	r0, .L474+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r3, r8
	ldr	r1, [r3]
	add	r1, r1, r0
	ldr	r0, .L474+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r4, r1, r0
	mov	r6, #0x0
	ldr	r0, .L474+0x14
	add	r3, r0, #0
	add	r7, r2, #0x1
	ldrb	r0, [r3]
	cmp	r6, r0
	bcs	.L461	@cond_branch
	ldr	r5, .L474+0x18
.L466:
	ldrh	r0, [r4]
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r1, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L467	@cond_branch
	ldrh	r0, [r5]
	strh	r0, [r4]
	b	.L465
.L475:
	.align	2, 0
.L474:
	.word	gCanvasRowEnd
	.word	gCanvasPixels
	.word	gCanvasRowStart
	.word	gCanvasWidth
	.word	gCanvasColumnStart
	.word	gCanvasColumnEnd
	.word	gCanvasPaletteStart
.L467:
	add	r0, r4, #0
	bl	QuantizePixel_BlackAndWhite
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L469	@cond_branch
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	b	.L473
.L469:
	ldrh	r0, [r5]
	add	r0, r0, #0x2
.L473:
	strh	r0, [r4]
	ldr	r3, .L476
.L465:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r4, r4, #0x2
	ldrb	r0, [r3]
	cmp	r6, r0
	bcc	.L466	@cond_branch
.L461:
	lsl	r0, r7, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L476+0x4
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L462	@cond_branch
.L460:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L477:
	.align	2, 0
.L476:
	.word	gCanvasColumnEnd
	.word	gCanvasRowEnd
.Lfe31:
	.size	 QuantizePalette_BlackAndWhite,.Lfe31-QuantizePalette_BlackAndWhite
	.align	2, 0
	.type	 QuantizePalette_GrayscaleSmall,function
	.thumb_func
QuantizePalette_GrayscaleSmall:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r2, #0x0
	ldr	r0, .L491
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L480	@cond_branch
	ldr	r0, .L491+0x4
	mov	r8, r0
.L482:
	ldr	r0, .L491+0x8
	ldrb	r1, [r0]
	add	r1, r1, r2
	ldr	r0, .L491+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r3, r8
	ldr	r1, [r3]
	add	r1, r1, r0
	ldr	r0, .L491+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r4, r1, r0
	mov	r5, #0x0
	ldr	r0, .L491+0x14
	add	r7, r2, #0x1
	ldrb	r0, [r0]
	cmp	r5, r0
	bcs	.L481	@cond_branch
	ldr	r6, .L491+0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	add	r2, r0, #0
.L486:
	ldrh	r0, [r4]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L487	@cond_branch
	ldrh	r0, [r6]
	strh	r0, [r4]
	b	.L485
.L492:
	.align	2, 0
.L491:
	.word	gCanvasRowEnd
	.word	gCanvasPixels
	.word	gCanvasRowStart
	.word	gCanvasWidth
	.word	gCanvasColumnStart
	.word	gCanvasColumnEnd
	.word	gCanvasPaletteStart
.L487:
	add	r0, r4, #0
	str	r2, [sp]
	bl	QuantizePixel_GrayscaleSmall
	ldrh	r1, [r6]
	add	r0, r0, r1
	strh	r0, [r4]
	ldr	r2, [sp]
.L485:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r4, #0x2
	ldr	r0, .L493
	ldrb	r0, [r0]
	cmp	r5, r0
	bcc	.L486	@cond_branch
.L481:
	lsl	r0, r7, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L493+0x4
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L482	@cond_branch
.L480:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L494:
	.align	2, 0
.L493:
	.word	gCanvasColumnEnd
	.word	gCanvasRowEnd
.Lfe32:
	.size	 QuantizePalette_GrayscaleSmall,.Lfe32-QuantizePalette_GrayscaleSmall
	.align	2, 0
	.type	 QuantizePalette_Grayscale,function
	.thumb_func
QuantizePalette_Grayscale:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r2, #0x0
	ldr	r0, .L508
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L497	@cond_branch
	ldr	r0, .L508+0x4
	mov	r8, r0
.L499:
	ldr	r0, .L508+0x8
	ldrb	r1, [r0]
	add	r1, r1, r2
	ldr	r0, .L508+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r3, r8
	ldr	r1, [r3]
	add	r1, r1, r0
	ldr	r0, .L508+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r4, r1, r0
	mov	r5, #0x0
	ldr	r0, .L508+0x14
	add	r7, r2, #0x1
	ldrb	r0, [r0]
	cmp	r5, r0
	bcs	.L498	@cond_branch
	ldr	r6, .L508+0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	add	r2, r0, #0
.L503:
	ldrh	r0, [r4]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L504	@cond_branch
	ldrh	r0, [r6]
	strh	r0, [r4]
	b	.L502
.L509:
	.align	2, 0
.L508:
	.word	gCanvasRowEnd
	.word	gCanvasPixels
	.word	gCanvasRowStart
	.word	gCanvasWidth
	.word	gCanvasColumnStart
	.word	gCanvasColumnEnd
	.word	gCanvasPaletteStart
.L504:
	add	r0, r4, #0
	str	r2, [sp]
	bl	QuantizePixel_Grayscale
	ldrh	r1, [r6]
	add	r0, r0, r1
	strh	r0, [r4]
	ldr	r2, [sp]
.L502:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r4, #0x2
	ldr	r0, .L510
	ldrb	r0, [r0]
	cmp	r5, r0
	bcc	.L503	@cond_branch
.L498:
	lsl	r0, r7, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L510+0x4
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L499	@cond_branch
.L497:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L511:
	.align	2, 0
.L510:
	.word	gCanvasColumnEnd
	.word	gCanvasRowEnd
.Lfe33:
	.size	 QuantizePalette_Grayscale,.Lfe33-QuantizePalette_Grayscale
	.align	2, 0
	.type	 QuantizePalette_PrimaryColors,function
	.thumb_func
QuantizePalette_PrimaryColors:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r2, #0x0
	ldr	r0, .L525
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L514	@cond_branch
	ldr	r0, .L525+0x4
	mov	r8, r0
.L516:
	ldr	r0, .L525+0x8
	ldrb	r1, [r0]
	add	r1, r1, r2
	ldr	r0, .L525+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r3, r8
	ldr	r1, [r3]
	add	r1, r1, r0
	ldr	r0, .L525+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r4, r1, r0
	mov	r5, #0x0
	ldr	r0, .L525+0x14
	add	r7, r2, #0x1
	ldrb	r0, [r0]
	cmp	r5, r0
	bcs	.L515	@cond_branch
	ldr	r6, .L525+0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	add	r2, r0, #0
.L520:
	ldrh	r0, [r4]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L521	@cond_branch
	ldrh	r0, [r6]
	strh	r0, [r4]
	b	.L519
.L526:
	.align	2, 0
.L525:
	.word	gCanvasRowEnd
	.word	gCanvasPixels
	.word	gCanvasRowStart
	.word	gCanvasWidth
	.word	gCanvasColumnStart
	.word	gCanvasColumnEnd
	.word	gCanvasPaletteStart
.L521:
	add	r0, r4, #0
	str	r2, [sp]
	bl	QuantizePixel_PrimaryColors
	ldrh	r1, [r6]
	add	r0, r0, r1
	strh	r0, [r4]
	ldr	r2, [sp]
.L519:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r4, #0x2
	ldr	r0, .L527
	ldrb	r0, [r0]
	cmp	r5, r0
	bcc	.L520	@cond_branch
.L515:
	lsl	r0, r7, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L527+0x4
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L516	@cond_branch
.L514:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L528:
	.align	2, 0
.L527:
	.word	gCanvasColumnEnd
	.word	gCanvasRowEnd
.Lfe34:
	.size	 QuantizePalette_PrimaryColors,.Lfe34-QuantizePalette_PrimaryColors
	.align	2, 0
	.type	 QuantizePixel_Standard,function
	.thumb_func
QuantizePixel_Standard:
	push	{r4, lr}
	ldrh	r0, [r0]
	mov	r1, #0x1f
	mov	r4, #0x1f
	and	r4, r4, r0
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x15
	and	r3, r3, r1
	lsr	r2, r0, #0x1a
	and	r2, r2, r1
	mov	r1, #0x3
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L530	@cond_branch
	mov	r0, #0x1c
	and	r0, r0, r4
	add	r4, r0, #0x4
.L530:
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L531	@cond_branch
	mov	r0, #0x1c
	and	r0, r0, r3
	add	r3, r0, #0x4
.L531:
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L532	@cond_branch
	mov	r0, #0x1c
	and	r0, r0, r2
	add	r2, r0, #0x4
.L532:
	cmp	r4, #0x5
	bhi	.L533	@cond_branch
	mov	r4, #0x6
.L533:
	cmp	r4, #0x1e
	bls	.L534	@cond_branch
	mov	r4, #0x1e
.L534:
	cmp	r3, #0x5
	bhi	.L535	@cond_branch
	mov	r3, #0x6
.L535:
	cmp	r3, #0x1e
	bls	.L536	@cond_branch
	mov	r3, #0x1e
.L536:
	cmp	r2, #0x5
	bhi	.L537	@cond_branch
	mov	r2, #0x6
.L537:
	cmp	r2, #0x1e
	bls	.L538	@cond_branch
	mov	r2, #0x1e
.L538:
	lsl	r0, r2, #0xa
	lsl	r1, r3, #0x5
	orr	r0, r0, r1
	orr	r4, r4, r0
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 QuantizePixel_Standard,.Lfe35-QuantizePixel_Standard
	.align	2, 0
	.type	 QuantizePixel_PrimaryColors,function
	.thumb_func
QuantizePixel_PrimaryColors:
	push	{lr}
	ldrh	r0, [r0]
	mov	r1, #0x1f
	mov	r3, #0x1f
	and	r3, r3, r0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x15
	and	r2, r2, r1
	lsr	r0, r0, #0x1a
	and	r0, r0, r1
	cmp	r3, #0xb
	bhi	.L540	@cond_branch
	cmp	r2, #0xa
	bhi	.L540	@cond_branch
	cmp	r0, #0xa
	bhi	.L540	@cond_branch
	mov	r0, #0x1
	b	.L580
.L540:
	cmp	r3, #0x13
	bls	.L542	@cond_branch
	cmp	r2, #0x13
	bls	.L541	@cond_branch
	cmp	r0, #0x13
	bhi	.L581	@cond_branch
.L541:
	cmp	r3, #0x13
	bls	.L542	@cond_branch
	cmp	r2, #0x13
	bls	.L543	@cond_branch
	cmp	r0, #0xe
	bhi	.L581	@cond_branch
	b	.L565
.L543:
	cmp	r0, #0x13
	bls	.L542	@cond_branch
	cmp	r2, #0xe
	bhi	.L581	@cond_branch
	b	.L583
.L542:
	cmp	r2, #0x13
	bls	.L550	@cond_branch
	cmp	r0, #0x13
	bls	.L550	@cond_branch
	cmp	r3, #0xe
	bls	.L582	@cond_branch
.L581:
	mov	r0, #0x2
	b	.L580
.L550:
	cmp	r3, #0x13
	bls	.L553	@cond_branch
	cmp	r2, #0xb
	bls	.L554	@cond_branch
	cmp	r0, #0xb
	bls	.L555	@cond_branch
	cmp	r2, r0
	bcs	.L565	@cond_branch
.L583:
	mov	r0, #0x8
	b	.L580
.L555:
	mov	r0, #0xa
	b	.L580
.L554:
	cmp	r0, #0xb
	bls	.L560	@cond_branch
	mov	r0, #0xd
	b	.L580
.L560:
	mov	r0, #0x4
	b	.L580
.L553:
	cmp	r2, #0x13
	bls	.L562	@cond_branch
	cmp	r3, #0xb
	bls	.L563	@cond_branch
	cmp	r0, #0xb
	bls	.L564	@cond_branch
	cmp	r3, r0
	bcc	.L582	@cond_branch
.L565:
	mov	r0, #0x7
	b	.L580
.L564:
	mov	r0, #0xb
	b	.L580
.L563:
	cmp	r0, #0xb
	bls	.L569	@cond_branch
	mov	r0, #0xe
	b	.L580
.L569:
	mov	r0, #0x5
	b	.L580
.L562:
	cmp	r0, #0x13
	bls	.L571	@cond_branch
	cmp	r3, #0xb
	bls	.L572	@cond_branch
	cmp	r2, #0xb
	bls	.L576	@cond_branch
	cmp	r3, r2
	bcs	.L583	@cond_branch
.L582:
	mov	r0, #0x9
	b	.L580
.L572:
	cmp	r2, #0xb
	bls	.L576	@cond_branch
	mov	r0, #0xc
	b	.L580
.L576:
	cmp	r0, #0xb
	bls	.L578	@cond_branch
	mov	r0, #0xf
	b	.L580
.L578:
	mov	r0, #0x6
	b	.L580
.L571:
	mov	r0, #0x3
.L580:
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 QuantizePixel_PrimaryColors,.Lfe36-QuantizePixel_PrimaryColors
	.align	2, 0
	.type	 QuantizePixel_GrayscaleSmall,function
	.thumb_func
QuantizePixel_GrayscaleSmall:
	push	{lr}
	ldrh	r1, [r0]
	mov	r3, #0x1f
	mov	r0, #0x1f
	and	r0, r0, r1
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x15
	and	r2, r2, r3
	lsr	r1, r1, #0x1a
	and	r1, r1, r3
	add	r0, r0, r2
	add	r0, r0, r1
	mov	r1, #0x3
	bl	__divsi3
	mov	r1, #0x1e
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L585	@cond_branch
	lsr	r0, r0, #0x11
	b	.L587
.L585:
	mov	r0, #0x1
.L587:
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 QuantizePixel_GrayscaleSmall,.Lfe37-QuantizePixel_GrayscaleSmall
	.align	2, 0
	.type	 QuantizePixel_Grayscale,function
	.thumb_func
QuantizePixel_Grayscale:
	push	{lr}
	ldrh	r1, [r0]
	mov	r3, #0x1f
	mov	r0, #0x1f
	and	r0, r0, r1
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x15
	and	r2, r2, r3
	lsr	r1, r1, #0x1a
	and	r1, r1, r3
	add	r0, r0, r2
	add	r0, r0, r1
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 QuantizePixel_Grayscale,.Lfe38-QuantizePixel_Grayscale
	.comm	gCanvasColumnStart, 4	@ 1
	.comm	gCanvasPixels, 4	@ 4
	.comm	gCanvasRowEnd, 4	@ 1
	.comm	gCanvasHeight, 4	@ 1
	.comm	gCanvasColumnEnd, 4	@ 1
	.comm	gCanvasRowStart, 4	@ 1
	.comm	gCanvasMonPersonality, 4	@ 1
	.comm	gCanvasWidth, 4	@ 1
	.comm	gCanvasPalette, 4	@ 4
	.comm	gCanvasPaletteStart, 4	@ 2
.text
	.align	2, 0

