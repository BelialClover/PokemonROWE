@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gHorizontalLungeSpriteTemplate
	.section .rodata
	.align	2, 0
	.type	 gHorizontalLungeSpriteTemplate,object
	.size	 gHorizontalLungeSpriteTemplate,24
gHorizontalLungeSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	DoHorizontalLunge
	.globl	gVerticalDipSpriteTemplate
	.align	2, 0
	.type	 gVerticalDipSpriteTemplate,object
	.size	 gVerticalDipSpriteTemplate,24
gVerticalDipSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	DoVerticalDip
	.globl	gSlideMonToOriginalPosSpriteTemplate
	.align	2, 0
	.type	 gSlideMonToOriginalPosSpriteTemplate,object
	.size	 gSlideMonToOriginalPosSpriteTemplate,24
gSlideMonToOriginalPosSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SlideMonToOriginalPos
	.globl	gSlideMonToOffsetSpriteTemplate
	.align	2, 0
	.type	 gSlideMonToOffsetSpriteTemplate,object
	.size	 gSlideMonToOffsetSpriteTemplate,24
gSlideMonToOffsetSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SlideMonToOffset
	.globl	gSlideMonToOffsetAndBackSpriteTemplate
	.align	2, 0
	.type	 gSlideMonToOffsetAndBackSpriteTemplate,object
	.size	 gSlideMonToOffsetAndBackSpriteTemplate,24
gSlideMonToOffsetAndBackSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SlideMonToOffsetAndBack
.text
	.align	2, 0
	.globl	AnimTask_ShakeMon
	.type	 AnimTask_ShakeMon,function
	.thumb_func
AnimTask_ShakeMon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L4
	ldrb	r0, [r4]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	bne	.L3	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L2
.L5:
	.align	2, 0
.L4:
	.word	gBattleAnimArgs
.L3:
	ldr	r1, .L6
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r4, #0x2]
	strh	r1, [r0, #0x24]
	ldrh	r1, [r4, #0x4]
	strh	r1, [r0, #0x26]
	ldr	r1, .L6+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r2, [r0, #0x8]
	ldrh	r1, [r4, #0x6]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r4, #0x8]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r4, #0x8]
	strh	r1, [r0, #0xe]
	ldrh	r1, [r4, #0x2]
	strh	r1, [r0, #0x10]
	ldrh	r1, [r4, #0x4]
	strh	r1, [r0, #0x12]
	ldr	r1, .L6+0x8
	str	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
.L2:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	gSprites
	.word	gTasks
	.word	AnimTask_ShakeMon_Step
.Lfe1:
	.size	 AnimTask_ShakeMon,.Lfe1-AnimTask_ShakeMon
	.align	2, 0
	.type	 AnimTask_ShakeMon_Step,function
	.thumb_func
AnimTask_ShakeMon_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L17
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrh	r0, [r3, #0xe]
	mov	r2, #0xe
	ldrsh	r5, [r3, r2]
	add	r7, r1, #0
	cmp	r5, #0
	bne	.L9	@cond_branch
	ldr	r2, .L17+0x4
	mov	r6, #0x8
	ldrsh	r1, [r3, r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	mov	r6, #0x24
	ldrsh	r0, [r1, r6]
	add	r6, r2, #0
	cmp	r0, #0
	bne	.L10	@cond_branch
	ldrh	r0, [r3, #0x10]
	strh	r0, [r1, #0x24]
	b	.L11
.L18:
	.align	2, 0
.L17:
	.word	gTasks
	.word	gSprites
.L10:
	strh	r5, [r1, #0x24]
.L11:
	lsl	r2, r4, #0x2
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r3, r0, r7
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r6
	mov	r5, #0x26
	ldrsh	r0, [r1, r5]
	cmp	r0, #0
	bne	.L12	@cond_branch
	ldrh	r0, [r3, #0x12]
	b	.L16
.L12:
	mov	r0, #0x0
.L16:
	strh	r0, [r1, #0x26]
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r7
	ldrh	r0, [r2, #0xc]
	strh	r0, [r2, #0xe]
	ldrh	r0, [r2, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r3, r0, #0x10
	cmp	r3, #0
	bne	.L8	@cond_branch
	mov	r0, #0x8
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r3, [r0, #0x24]
	mov	r5, #0x8
	ldrsh	r1, [r2, r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r3, [r0, #0x26]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L8
.L9:
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xe]
.L8:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 AnimTask_ShakeMon_Step,.Lfe2-AnimTask_ShakeMon_Step
	.align	2, 0
	.globl	AnimTask_ShakeMon2
	.type	 AnimTask_ShakeMon2,function
	.thumb_func
AnimTask_ShakeMon2:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L38
	ldrh	r0, [r2]
	mov	r3, #0x0
	ldrsh	r1, [r2, r3]
	cmp	r1, #0x3
	bgt	.L20	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	bne	.L22	@cond_branch
	b	.L35
.L39:
	.align	2, 0
.L38:
	.word	gBattleAnimArgs
.L20:
	cmp	r1, #0x8
	beq	.L23	@cond_branch
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x5
	beq	.L26	@cond_branch
	cmp	r0, #0x5
	bgt	.L31	@cond_branch
	cmp	r0, #0x4
	beq	.L25	@cond_branch
	b	.L29
.L31:
	cmp	r0, #0x6
	beq	.L27	@cond_branch
	b	.L29
.L25:
	mov	r0, #0x0
	b	.L36
.L26:
	mov	r0, #0x2
	b	.L36
.L27:
	mov	r0, #0x1
	b	.L36
.L29:
	mov	r0, #0x3
.L36:
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L32	@cond_branch
	mov	r6, #0x1
.L32:
	ldr	r0, .L40
	add	r0, r4, r0
	b	.L37
.L41:
	.align	2, 0
.L40:
	.word	gBattlerSpriteIds
.L23:
	ldr	r1, .L42
	ldr	r0, .L42+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
.L37:
	ldrb	r3, [r0]
.L22:
	cmp	r6, #0
	beq	.L34	@cond_branch
.L35:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L19
.L43:
	.align	2, 0
.L42:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.L34:
	ldr	r1, .L44
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r2, .L44+0x4
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0x24]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0x26]
	ldr	r1, .L44+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r3, [r0, #0x8]
	ldrh	r1, [r2, #0x6]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r2, #0x8]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r2, #0x8]
	strh	r1, [r0, #0xe]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0x10]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0x12]
	ldr	r1, .L44+0xc
	str	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
.L19:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L45:
	.align	2, 0
.L44:
	.word	gSprites
	.word	gBattleAnimArgs
	.word	gTasks
	.word	AnimTask_ShakeMon2_Step
.Lfe3:
	.size	 AnimTask_ShakeMon2,.Lfe3-AnimTask_ShakeMon2
	.align	2, 0
	.type	 AnimTask_ShakeMon2_Step,function
	.thumb_func
AnimTask_ShakeMon2_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L54
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrh	r2, [r3, #0xe]
	mov	r4, #0xe
	ldrsh	r0, [r3, r4]
	mov	ip, r1
	cmp	r0, #0
	bne	.L47	@cond_branch
	ldr	r2, .L54+0x4
	mov	r7, #0x8
	ldrsh	r1, [r3, r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r0, #0x24
	ldrsh	r1, [r4, r0]
	ldrh	r5, [r3, #0x10]
	mov	r7, #0x10
	ldrsh	r0, [r3, r7]
	add	r7, r2, #0
	cmp	r1, r0
	bne	.L48	@cond_branch
	neg	r0, r5
	strh	r0, [r4, #0x24]
	b	.L49
.L55:
	.align	2, 0
.L54:
	.word	gTasks
	.word	gSprites
.L48:
	strh	r5, [r4, #0x24]
.L49:
	lsl	r3, r6, #0x2
	add	r1, r3, r6
	lsl	r1, r1, #0x3
	add	r1, r1, ip
	mov	r0, #0x8
	ldrsh	r2, [r1, r0]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r7
	mov	r0, #0x26
	ldrsh	r2, [r4, r0]
	mov	r8, r2
	ldrh	r5, [r1, #0x12]
	mov	r2, #0x12
	ldrsh	r0, [r1, r2]
	cmp	r8, r0
	bne	.L50	@cond_branch
	neg	r0, r5
	strh	r0, [r4, #0x26]
	b	.L51
.L50:
	strh	r5, [r4, #0x26]
.L51:
	add	r0, r3, r6
	lsl	r0, r0, #0x3
	mov	r4, ip
	add	r3, r0, r4
	ldrh	r0, [r3, #0xc]
	strh	r0, [r3, #0xe]
	ldrh	r0, [r3, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	bne	.L46	@cond_branch
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x24]
	mov	r4, #0x8
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L46
.L47:
	sub	r0, r2, #0x1
	strh	r0, [r3, #0xe]
.L46:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 AnimTask_ShakeMon2_Step,.Lfe4-AnimTask_ShakeMon2_Step
	.align	2, 0
	.globl	AnimTask_ShakeMonInPlace
	.type	 AnimTask_ShakeMonInPlace,function
	.thumb_func
AnimTask_ShakeMonInPlace:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L58
	ldrb	r0, [r4]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	bne	.L57	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L56
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimArgs
.L57:
	ldr	r0, .L60
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r4, #0x2]
	ldrh	r2, [r1, #0x24]
	add	r0, r0, r2
	mov	r2, #0x0
	strh	r0, [r1, #0x24]
	ldrh	r0, [r4, #0x4]
	ldrh	r6, [r1, #0x26]
	add	r0, r0, r6
	strh	r0, [r1, #0x26]
	ldr	r0, .L60+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r3, [r1, #0x8]
	strh	r2, [r1, #0xa]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r1, #0xc]
	strh	r2, [r1, #0xe]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r1, #0x10]
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	mov	r6, #0x4
	ldrsh	r0, [r4, r6]
	lsl	r0, r0, #0x1
	strh	r0, [r1, #0x14]
	ldr	r2, .L60+0x8
	str	r2, [r1]
	add	r0, r5, #0
	bl	_call_via_r2
.L56:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	gSprites
	.word	gTasks
	.word	AnimTask_ShakeMonInPlace_Step
.Lfe5:
	.size	 AnimTask_ShakeMonInPlace,.Lfe5-AnimTask_ShakeMonInPlace
	.align	2, 0
	.type	 AnimTask_ShakeMonInPlace_Step,function
	.thumb_func
AnimTask_ShakeMonInPlace_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L70
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r2, [r4, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	add	r6, r1, #0
	cmp	r0, #0
	beq	.LCB585
	b	.L63	@long jump
.LCB585:
	ldrh	r1, [r4, #0xa]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L64	@cond_branch
	ldr	r2, .L70+0x4
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x12]
	ldrh	r3, [r0, #0x24]
	add	r1, r1, r3
	strh	r1, [r0, #0x24]
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x14]
	ldrh	r3, [r0, #0x26]
	add	r1, r1, r3
	strh	r1, [r0, #0x26]
	add	r3, r2, #0
	b	.L65
.L71:
	.align	2, 0
.L70:
	.word	gTasks
	.word	gSprites
.L64:
	ldr	r3, .L72
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r4, #0x12]
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
	mov	r2, #0x8
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x26]
	ldrh	r2, [r4, #0x14]
	sub	r1, r1, r2
	strh	r1, [r0, #0x26]
.L65:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r6
	ldrh	r0, [r4, #0x10]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r4, #0xa]
	add	r2, r0, #0x1
	strh	r2, [r4, #0xa]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r6, #0xc
	ldrsh	r1, [r4, r6]
	cmp	r0, r1
	blt	.L62	@cond_branch
	mov	r0, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L67	@cond_branch
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	lsr	r2, r0, #0x1f
	add	r0, r0, r2
	asr	r0, r0, #0x1
	ldrh	r6, [r1, #0x24]
	add	r0, r0, r6
	strh	r0, [r1, #0x24]
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	lsr	r2, r0, #0x1f
	add	r0, r0, r2
	asr	r0, r0, #0x1
	ldrh	r3, [r1, #0x26]
	add	r0, r0, r3
	strh	r0, [r1, #0x26]
	b	.L68
.L73:
	.align	2, 0
.L72:
	.word	gSprites
.L67:
	mov	r6, #0x8
	ldrsh	r0, [r4, r6]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	mov	r0, #0x12
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	mov	r3, #0x14
	ldrsh	r1, [r4, r3]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	ldrh	r0, [r2, #0x26]
	sub	r0, r0, r1
	strh	r0, [r2, #0x26]
.L68:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L62
.L63:
	sub	r0, r2, #0x1
	strh	r0, [r4, #0xe]
.L62:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 AnimTask_ShakeMonInPlace_Step,.Lfe6-AnimTask_ShakeMonInPlace_Step
	.align	2, 0
	.globl	AnimTask_ShakeAndSinkMon
	.type	 AnimTask_ShakeAndSinkMon,function
	.thumb_func
AnimTask_ShakeAndSinkMon:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L75
	ldrb	r0, [r5]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L75+0x4
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r5, #0x2]
	strh	r2, [r1, #0x24]
	ldr	r2, .L75+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r0, [r1, #0x8]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r1, #0xa]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r1, #0xc]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r1, #0xe]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r1, #0x10]
	ldr	r2, .L75+0xc
	str	r2, [r1]
	add	r0, r4, #0
	bl	_call_via_r2
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gBattleAnimArgs
	.word	gSprites
	.word	gTasks
	.word	AnimTask_ShakeAndSinkMon_Step
.Lfe7:
	.size	 AnimTask_ShakeAndSinkMon,.Lfe7-AnimTask_ShakeAndSinkMon
	.align	2, 0
	.type	 AnimTask_ShakeAndSinkMon_Step,function
	.thumb_func
AnimTask_ShakeAndSinkMon_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, .L81
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrb	r5, [r3, #0x8]
	ldrh	r4, [r3, #0xa]
	ldrh	r1, [r3, #0x18]
	add	r0, r1, #0x1
	strh	r0, [r3, #0x18]
	mov	r7, #0xc
	ldrsh	r0, [r3, r7]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	ip, r2
	ldr	r7, .L81+0x4
	cmp	r0, r1
	bne	.L78	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x18]
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	ldrh	r3, [r1, #0x24]
	mov	r0, #0x24
	ldrsh	r2, [r1, r0]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	cmp	r2, r0
	bne	.L79	@cond_branch
	neg	r0, r2
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L79:
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r3
	strh	r0, [r1, #0x24]
.L78:
	lsl	r2, r6, #0x2
	add	r2, r2, r6
	lsl	r2, r2, #0x3
	add	r2, r2, ip
	strh	r4, [r2, #0xa]
	ldrh	r1, [r2, #0xe]
	ldrh	r0, [r2, #0x1a]
	add	r1, r1, r0
	strh	r1, [r2, #0x1a]
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r0, #0x26]
	ldrh	r0, [r2, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L80	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L80:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gTasks
	.word	gSprites
.Lfe8:
	.size	 AnimTask_ShakeAndSinkMon_Step,.Lfe8-AnimTask_ShakeAndSinkMon_Step
	.align	2, 0
	.globl	AnimTask_TranslateMonElliptical
	.type	 AnimTask_TranslateMonElliptical,function
	.thumb_func
AnimTask_TranslateMonElliptical:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x1
	ldr	r4, .L90
	ldrb	r0, [r4]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	ble	.L84	@cond_branch
	mov	r0, #0x5
	strh	r0, [r4, #0x8]
.L84:
	mov	r1, #0x0
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	add	r3, r4, #0
	ldr	r2, .L90+0x4
	mov	ip, r2
	lsl	r4, r5, #0x2
	ldr	r2, .L90+0x8
	mov	r8, r2
	cmp	r1, r0
	bge	.L86	@cond_branch
	add	r2, r0, #0
.L88:
	lsl	r0, r6, #0x19
	lsr	r6, r0, #0x18
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	blt	.L88	@cond_branch
.L86:
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	strh	r7, [r0, #0x8]
	ldrh	r1, [r3, #0x2]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r0, #0xe]
	strh	r6, [r0, #0x10]
	mov	r1, r8
	str	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	AnimTask_TranslateMonElliptical_Step
.Lfe9:
	.size	 AnimTask_TranslateMonElliptical,.Lfe9-AnimTask_TranslateMonElliptical
	.align	2, 0
	.type	 AnimTask_TranslateMonElliptical_Step,function
	.thumb_func
AnimTask_TranslateMonElliptical_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L95
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrb	r4, [r5, #0x8]
	mov	r1, #0x12
	ldrsh	r0, [r5, r1]
	mov	r2, #0xa
	ldrsh	r1, [r5, r2]
	bl	Sin
	ldr	r2, .L95+0x4
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r4, r1, r2
	strh	r0, [r4, #0x24]
	mov	r1, #0x12
	ldrsh	r0, [r5, r1]
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldrh	r1, [r5, #0xc]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r5, #0x10]
	ldrh	r1, [r5, #0x12]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x12]
	cmp	r0, #0
	bne	.L93	@cond_branch
	ldrh	r0, [r5, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0xe]
.L93:
	mov	r2, #0xe
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	bne	.L94	@cond_branch
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L94:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L96:
	.align	2, 0
.L95:
	.word	gTasks
	.word	gSprites
.Lfe10:
	.size	 AnimTask_TranslateMonElliptical_Step,.Lfe10-AnimTask_TranslateMonElliptical_Step
	.align	2, 0
	.globl	AnimTask_TranslateMonEllipticalRespectSide
	.type	 AnimTask_TranslateMonEllipticalRespectSide,function
	.thumb_func
AnimTask_TranslateMonEllipticalRespectSide:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L99
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L98	@cond_branch
	ldr	r1, .L99+0x4
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L98:
	add	r0, r4, #0
	bl	AnimTask_TranslateMonElliptical
	pop	{r4}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe11:
	.size	 AnimTask_TranslateMonEllipticalRespectSide,.Lfe11-AnimTask_TranslateMonEllipticalRespectSide
	.align	2, 0
	.type	 DoHorizontalLunge,function
	.thumb_func
DoHorizontalLunge:
	push	{r4, lr}
	add	r4, r0, #0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L105
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L102	@cond_branch
	ldr	r1, .L105+0x4
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	b	.L104
.L106:
	.align	2, 0
.L105:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L102:
	ldr	r1, .L107
	ldrh	r0, [r1, #0x2]
.L104:
	strh	r0, [r4, #0x30]
	ldrh	r2, [r1]
	mov	r0, #0x0
	strh	r2, [r4, #0x2e]
	strh	r0, [r4, #0x32]
	ldr	r1, .L107+0x4
	ldr	r0, .L107+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x34]
	strh	r2, [r4, #0x36]
	ldr	r1, .L107+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L107+0x10
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	gBattleAnimArgs
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	ReverseHorizontalLungeDirection
	.word	TranslateMonSpriteLinear
.Lfe12:
	.size	 DoHorizontalLunge,.Lfe12-DoHorizontalLunge
	.align	2, 0
	.type	 ReverseHorizontalLungeDirection,function
	.thumb_func
ReverseHorizontalLungeDirection:
	push	{lr}
	ldrh	r1, [r0, #0x36]
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r0, #0x30]
	neg	r1, r1
	strh	r1, [r0, #0x30]
	ldr	r1, .L110
	str	r1, [r0, #0x1c]
	ldr	r1, .L110+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L111:
	.align	2, 0
.L110:
	.word	TranslateMonSpriteLinear
	.word	DestroyAnimSprite
.Lfe13:
	.size	 ReverseHorizontalLungeDirection,.Lfe13-ReverseHorizontalLungeDirection
	.align	2, 0
	.type	 DoVerticalDip,function
	.thumb_func
DoVerticalDip:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r5, .L113
	ldrb	r0, [r5, #0x4]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r5]
	mov	r1, #0x0
	strh	r2, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	ldrh	r1, [r5, #0x2]
	strh	r1, [r4, #0x32]
	strh	r0, [r4, #0x34]
	strh	r2, [r4, #0x36]
	ldr	r1, .L113+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L113+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	gBattleAnimArgs
	.word	ReverseVerticalDipDirection
	.word	TranslateMonSpriteLinear
.Lfe14:
	.size	 DoVerticalDip,.Lfe14-DoVerticalDip
	.align	2, 0
	.type	 ReverseVerticalDipDirection,function
	.thumb_func
ReverseVerticalDipDirection:
	push	{lr}
	ldrh	r1, [r0, #0x36]
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r0, #0x32]
	neg	r1, r1
	strh	r1, [r0, #0x32]
	ldr	r1, .L116
	str	r1, [r0, #0x1c]
	ldr	r1, .L116+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L117:
	.align	2, 0
.L116:
	.word	TranslateMonSpriteLinear
	.word	DestroyAnimSprite
.Lfe15:
	.size	 ReverseVerticalDipDirection,.Lfe15-ReverseVerticalDipDirection
	.align	2, 0
	.type	 SlideMonToOriginalPos,function
	.thumb_func
SlideMonToOriginalPos:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r0, .L125
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L119	@cond_branch
	ldr	r1, .L125+0x4
	ldr	r0, .L125+0x8
	b	.L124
.L126:
	.align	2, 0
.L125:
	.word	gBattleAnimArgs
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.L119:
	ldr	r1, .L127
	ldr	r0, .L127+0x4
.L124:
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r7, [r0]
	ldr	r5, .L127+0x8
	ldrh	r0, [r5, #0x4]
	mov	r3, #0x0
	strh	r0, [r6, #0x2e]
	ldr	r0, .L127+0xc
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r6, #0x30]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r6, #0x32]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r6, #0x34]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r6, #0x36]
	add	r0, r6, #0
	str	r3, [sp]
	bl	InitSpriteDataForLinearTranslation
	ldr	r3, [sp]
	strh	r3, [r6, #0x34]
	strh	r3, [r6, #0x36]
	ldrh	r0, [r4, #0x24]
	strh	r0, [r6, #0x38]
	ldrh	r0, [r4, #0x26]
	strh	r0, [r6, #0x3a]
	add	r2, r6, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L121	@cond_branch
	strh	r3, [r6, #0x32]
	b	.L122
.L128:
	.align	2, 0
.L127:
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gSprites
.L121:
	cmp	r0, #0x2
	bne	.L122	@cond_branch
	strh	r3, [r6, #0x30]
.L122:
	ldr	r0, .L129
	ldrh	r1, [r0, #0x2]
	lsl	r0, r7, #0x8
	orr	r0, r0, r1
	strh	r0, [r6, #0x3c]
	ldr	r0, .L129+0x4
	str	r0, [r6, #0x1c]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	gBattleAnimArgs
	.word	SlideMonToOriginalPos_Step
.Lfe16:
	.size	 SlideMonToOriginalPos,.Lfe16-SlideMonToOriginalPos
	.align	2, 0
	.type	 SlideMonToOriginalPos_Step,function
	.thumb_func
SlideMonToOriginalPos_Step:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x3c]
	lsl	r1, r0, #0x18
	lsr	r4, r1, #0x18
	add	r5, r4, #0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L137
	add	r3, r1, r0
	ldrh	r0, [r2, #0x2e]
	mov	r6, #0x2e
	ldrsh	r1, [r2, r6]
	cmp	r1, #0
	bne	.L132	@cond_branch
	cmp	r4, #0x1
	bhi	.L133	@cond_branch
	strh	r1, [r3, #0x24]
.L133:
	cmp	r5, #0x2
	beq	.L135	@cond_branch
	cmp	r5, #0
	bne	.L134	@cond_branch
.L135:
	strh	r1, [r3, #0x26]
.L134:
	add	r0, r2, #0
	bl	DestroyAnimSprite
	b	.L136
.L138:
	.align	2, 0
.L137:
	.word	gSprites
.L132:
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x30]
	ldrh	r0, [r2, #0x34]
	add	r1, r1, r0
	strh	r1, [r2, #0x34]
	ldrh	r0, [r2, #0x32]
	ldrh	r4, [r2, #0x36]
	add	r0, r0, r4
	strh	r0, [r2, #0x36]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r6, [r2, #0x38]
	add	r1, r1, r6
	strh	r1, [r3, #0x24]
	ldrh	r0, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r2, #0x3a]
	add	r0, r0, r2
	strh	r0, [r3, #0x26]
.L136:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 SlideMonToOriginalPos_Step,.Lfe17-SlideMonToOriginalPos_Step
	.align	2, 0
	.type	 SlideMonToOffset,function
	.thumb_func
SlideMonToOffset:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r0, .L145
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L140	@cond_branch
	ldr	r0, .L145+0x4
	b	.L144
.L146:
	.align	2, 0
.L145:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L140:
	ldr	r0, .L147
.L144:
	ldrb	r2, [r0]
	ldr	r0, .L147+0x4
	add	r0, r2, r0
	ldrb	r6, [r0]
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L142	@cond_branch
	ldr	r1, .L147+0x8
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
	mov	r2, #0x6
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	bne	.L142	@cond_branch
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L142:
	ldr	r2, .L147+0x8
	ldrh	r0, [r2, #0x8]
	mov	r4, #0x0
	strh	r0, [r5, #0x2e]
	ldr	r0, .L147+0xc
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r2, #0x2]
	ldrh	r3, [r1, #0x20]
	add	r0, r0, r3
	strh	r0, [r5, #0x32]
	ldrh	r0, [r1, #0x22]
	strh	r0, [r5, #0x34]
	ldrh	r0, [r2, #0x4]
	ldrh	r1, [r1, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	InitSpriteDataForLinearTranslation
	strh	r4, [r5, #0x34]
	strh	r4, [r5, #0x36]
	strh	r6, [r5, #0x38]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L147+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L147+0x14
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	gBattleAnimTarget
	.word	gBattlerSpriteIds
	.word	gBattleAnimArgs
	.word	gSprites
	.word	DestroyAnimSprite
	.word	TranslateMonSpriteLinearFixedPoint
.Lfe18:
	.size	 SlideMonToOffset,.Lfe18-SlideMonToOffset
	.align	2, 0
	.type	 SlideMonToOffsetAndBack,function
	.thumb_func
SlideMonToOffsetAndBack:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r2, r6, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L157
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L150	@cond_branch
	ldr	r0, .L157+0x4
	b	.L156
.L158:
	.align	2, 0
.L157:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L150:
	ldr	r0, .L159
.L156:
	ldrb	r1, [r0]
	ldr	r0, .L159+0x4
	add	r0, r1, r0
	ldrb	r7, [r0]
	add	r0, r1, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L152	@cond_branch
	ldr	r1, .L159+0x8
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
	mov	r2, #0x6
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	bne	.L152	@cond_branch
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L152:
	ldr	r5, .L159+0x8
	ldrh	r0, [r5, #0x8]
	strh	r0, [r6, #0x2e]
	ldr	r0, .L159+0xc
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r6, #0x30]
	ldrh	r1, [r5, #0x2]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r6, #0x34]
	ldrh	r1, [r5, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x36]
	add	r0, r6, #0
	bl	InitSpriteDataForLinearTranslation
	ldrh	r0, [r4, #0x24]
	lsl	r0, r0, #0x8
	strh	r0, [r6, #0x34]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x8
	strh	r0, [r6, #0x36]
	strh	r7, [r6, #0x38]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r6, #0x3a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L154	@cond_branch
	ldr	r1, .L159+0x10
	add	r0, r6, #0
	bl	StoreSpriteCallbackInData6
	b	.L155
.L160:
	.align	2, 0
.L159:
	.word	gBattleAnimTarget
	.word	gBattlerSpriteIds
	.word	gBattleAnimArgs
	.word	gSprites
	.word	DestroyAnimSprite
.L154:
	ldr	r1, .L161
	add	r0, r6, #0
	bl	StoreSpriteCallbackInData6
.L155:
	ldr	r0, .L161+0x4
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	SlideMonToOffsetAndBack_End
	.word	TranslateMonSpriteLinearFixedPoint
.Lfe19:
	.size	 SlideMonToOffsetAndBack,.Lfe19-SlideMonToOffsetAndBack
	.align	2, 0
	.type	 SlideMonToOffsetAndBack_End,function
	.thumb_func
SlideMonToOffsetAndBack_End:
	push	{r4, lr}
	ldr	r4, .L164
	mov	r1, #0x38
	ldrsh	r2, [r0, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r3, #0x0
	strh	r3, [r1, #0x24]
	mov	r1, #0x38
	ldrsh	r2, [r0, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r3, [r1, #0x26]
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.L165:
	.align	2, 0
.L164:
	.word	gSprites
.Lfe20:
	.size	 SlideMonToOffsetAndBack_End,.Lfe20-SlideMonToOffsetAndBack_End
	.align	2, 0
	.globl	AnimTask_WindUpLunge
	.type	 AnimTask_WindUpLunge,function
	.thumb_func
AnimTask_WindUpLunge:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L168
	mov	r0, #0x6
	ldrsh	r1, [r5, r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, .L168+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L167	@cond_branch
	ldrh	r0, [r5, #0x2]
	neg	r0, r0
	strh	r0, [r5, #0x2]
	ldrh	r0, [r5, #0xa]
	neg	r0, r0
	strh	r0, [r5, #0xa]
.L167:
	ldrb	r0, [r5]
	bl	GetAnimBattlerSpriteId
	ldr	r1, .L168+0x8
	lsl	r4, r6, #0x2
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x8]
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x8
	mov	r2, #0x6
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r4, #0xa]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0xc]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x8
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r4, #0x12]
	ldrh	r0, [r5, #0xc]
	strh	r0, [r4, #0x14]
	strh	r7, [r4, #0x16]
	ldr	r0, .L168+0xc
	str	r0, [r4]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	AnimTask_WindUpLunge_Step1
.Lfe21:
	.size	 AnimTask_WindUpLunge,.Lfe21-AnimTask_WindUpLunge
	.align	2, 0
	.type	 AnimTask_WindUpLunge_Step1,function
	.thumb_func
AnimTask_WindUpLunge_Step1:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L172
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r5, r1, r2
	ldrb	r1, [r5, #0x8]
	ldrh	r0, [r5, #0xa]
	ldrh	r2, [r5, #0x1e]
	add	r0, r0, r2
	strh	r0, [r5, #0x1e]
	ldr	r2, .L172+0x4
	lsl	r4, r1, #0x4
	add	r4, r4, r1
	lsl	r4, r4, #0x2
	add	r4, r4, r2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r5, #0x1c]
	lsr	r0, r0, #0x8
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r5, #0x16]
	ldrh	r1, [r5, #0x1c]
	add	r0, r0, r1
	strh	r0, [r5, #0x1c]
	ldrh	r0, [r5, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L171	@cond_branch
	ldr	r0, .L172+0x8
	str	r0, [r5]
.L171:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	gTasks
	.word	gSprites
	.word	AnimTask_WindUpLunge_Step2
.Lfe22:
	.size	 AnimTask_WindUpLunge_Step1,.Lfe22-AnimTask_WindUpLunge_Step1
	.align	2, 0
	.type	 AnimTask_WindUpLunge_Step2,function
	.thumb_func
AnimTask_WindUpLunge_Step2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L178
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L175	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x10]
	b	.L176
.L179:
	.align	2, 0
.L178:
	.word	gTasks
.L175:
	ldrb	r0, [r4, #0x8]
	ldrh	r2, [r4, #0x12]
	ldrh	r1, [r4, #0x20]
	add	r2, r2, r1
	strh	r2, [r4, #0x20]
	ldr	r3, .L180
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x18
	ldrh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	add	r2, r2, r0
	strh	r2, [r1, #0x24]
	ldrh	r0, [r4, #0x14]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L176	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L176:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L181:
	.align	2, 0
.L180:
	.word	gSprites
.Lfe23:
	.size	 AnimTask_WindUpLunge_Step2,.Lfe23-AnimTask_WindUpLunge_Step2
	.align	2, 0
	.globl	AnimTask_SlideOffScreen
	.type	 AnimTask_SlideOffScreen,function
	.thumb_func
AnimTask_SlideOffScreen:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L197
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x2
	beq	.L186	@cond_branch
	cmp	r0, #0x2
	bgt	.L192	@cond_branch
	cmp	r0, #0
	blt	.L190	@cond_branch
	ldrb	r0, [r1]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	b	.L183
.L198:
	.align	2, 0
.L197:
	.word	gBattleAnimArgs
.L192:
	cmp	r0, #0x3
	beq	.L188	@cond_branch
	b	.L190
.L186:
	ldr	r5, .L199
	b	.L196
.L200:
	.align	2, 0
.L199:
	.word	gBattleAnimAttacker
.L188:
	ldr	r5, .L201
.L196:
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L190	@cond_branch
	ldr	r1, .L201+0x4
	ldrb	r0, [r5]
	eor	r0, r0, r4
	add	r0, r0, r1
	ldrb	r2, [r0]
	b	.L183
.L202:
	.align	2, 0
.L201:
	.word	gBattleAnimTarget
	.word	gBattlerSpriteIds
.L190:
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L182
.L183:
	ldr	r1, .L203
	lsl	r4, r6, #0x2
	add	r0, r4, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	strh	r2, [r5, #0x8]
	ldr	r0, .L203+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L193	@cond_branch
	ldr	r0, .L203+0x8
	ldrh	r0, [r0, #0x2]
	b	.L195
.L204:
	.align	2, 0
.L203:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L193:
	ldr	r0, .L205
	ldrh	r0, [r0, #0x2]
	neg	r0, r0
.L195:
	strh	r0, [r5, #0xa]
	ldr	r0, .L205+0x4
	add	r1, r4, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L205+0x8
	str	r0, [r1]
.L182:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L206:
	.align	2, 0
.L205:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	AnimTask_SlideOffScreen_Step
.Lfe24:
	.size	 AnimTask_SlideOffScreen,.Lfe24-AnimTask_SlideOffScreen
	.align	2, 0
	.type	 AnimTask_SlideOffScreen_Step,function
	.thumb_func
AnimTask_SlideOffScreen_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L209
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r2, [r1, #0x8]
	ldr	r3, .L209+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r1, #0xa]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	mov	r2, #0x24
	ldrsh	r1, [r0, r2]
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	add	r1, r1, r0
	add	r1, r1, #0x20
	mov	r0, #0x98
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bls	.L208	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L208:
	pop	{r4}
	pop	{r0}
	bx	r0
.L210:
	.align	2, 0
.L209:
	.word	gTasks
	.word	gSprites
.Lfe25:
	.size	 AnimTask_SlideOffScreen_Step,.Lfe25-AnimTask_SlideOffScreen_Step
	.align	2, 0
	.globl	AnimTask_SwayMon
	.type	 AnimTask_SwayMon,function
	.thumb_func
AnimTask_SwayMon:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r7, .L217
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L212	@cond_branch
	ldr	r1, .L217+0x4
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L212:
	ldr	r4, .L217+0x4
	ldrb	r0, [r4, #0x8]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0xff
	bne	.L213	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L211
.L218:
	.align	2, 0
.L217:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L213:
	ldr	r1, .L219
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrh	r0, [r4]
	strh	r0, [r3, #0x8]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r3, #0xa]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r3, #0xc]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r3, #0xe]
	strh	r6, [r3, #0x10]
	mov	r6, #0x8
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bne	.L214	@cond_branch
	ldrb	r0, [r7]
	b	.L216
.L220:
	.align	2, 0
.L219:
	.word	gTasks
.L214:
	ldr	r0, .L221
	ldrb	r0, [r0]
.L216:
	strh	r0, [r3, #0x12]
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	strh	r1, [r0, #0x20]
	ldr	r1, .L221+0x4
	str	r1, [r0]
.L211:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L222:
	.align	2, 0
.L221:
	.word	gBattleAnimTarget
	.word	AnimTask_SwayMonStep
.Lfe26:
	.size	 AnimTask_SwayMon,.Lfe26-AnimTask_SwayMon
	.align	2, 0
	.type	 AnimTask_SwayMonStep,function
	.thumb_func
AnimTask_SwayMonStep:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L235
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrb	r7, [r4, #0x10]
	ldrh	r0, [r4, #0xc]
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	lsl	r1, r0, #0x10
	strh	r0, [r4, #0x1c]
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r0, r8
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	bl	Sin
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r9, r5
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L224	@cond_branch
	ldr	r0, .L235+0x4
	lsl	r2, r7, #0x4
	add	r1, r2, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	strh	r5, [r1, #0x24]
	mov	r9, r0
	add	r4, r2, #0
	b	.L225
.L236:
	.align	2, 0
.L235:
	.word	gTasks
	.word	gSprites
.L224:
	ldrb	r0, [r4, #0x12]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L226	@cond_branch
	ldr	r1, .L237
	lsl	r2, r7, #0x4
	add	r0, r2, r7
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	mov	r9, r1
	add	r4, r2, #0
	cmp	r0, #0
	bge	.L234	@cond_branch
	b	.L229
.L238:
	.align	2, 0
.L237:
	.word	gSprites
.L226:
	ldr	r1, .L239
	lsl	r2, r7, #0x4
	add	r0, r2, r7
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	mov	r4, r9
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	mov	r9, r1
	add	r4, r2, #0
	cmp	r0, #0
	bge	.L229	@cond_branch
	neg	r0, r0
.L229:
	neg	r0, r0
.L234:
	strh	r0, [r3, #0x26]
.L225:
	mov	r5, r8
	cmp	r5, #0x7f
	bls	.L232	@cond_branch
	ldr	r1, .L239+0x4
	lsl	r2, r6, #0x2
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r5, #0x1e
	ldrsh	r0, [r3, r5]
	add	r5, r1, #0
	cmp	r0, #0
	bne	.L232	@cond_branch
	mov	r1, #0x20
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x1
	beq	.L231	@cond_branch
.L232:
	mov	r2, r8
	cmp	r2, #0x7e
	bhi	.L230	@cond_branch
	ldr	r1, .L239+0x4
	lsl	r2, r6, #0x2
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r5, #0x1e
	ldrsh	r0, [r3, r5]
	add	r5, r1, #0
	cmp	r0, #0x1
	bne	.L230	@cond_branch
	mov	r1, #0x20
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L230	@cond_branch
.L231:
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrh	r0, [r1, #0x1e]
	mov	r2, #0x1
	eor	r0, r0, r2
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x20]
	eor	r0, r0, r2
	strh	r0, [r1, #0x20]
	ldrh	r0, [r1, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	asr	r3, r0, #0x10
	cmp	r3, #0
	bne	.L230	@cond_branch
	add	r0, r4, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	strh	r3, [r0, #0x24]
	strh	r3, [r0, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L230:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L240:
	.align	2, 0
.L239:
	.word	gSprites
	.word	gTasks
.Lfe27:
	.size	 AnimTask_SwayMonStep,.Lfe27-AnimTask_SwayMonStep
	.align	2, 0
	.globl	AnimTask_ScaleMonAndRestore
	.type	 AnimTask_ScaleMonAndRestore,function
	.thumb_func
AnimTask_ScaleMonAndRestore:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r6, .L242
	ldrb	r0, [r6, #0x6]
	bl	GetAnimBattlerSpriteId
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r1, [r6, #0x8]
	add	r0, r5, #0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r1, .L242+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r6]
	strh	r1, [r0, #0x8]
	ldrh	r1, [r6, #0x2]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r6, #0x4]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r6, #0x4]
	strh	r1, [r0, #0xe]
	strh	r5, [r0, #0x10]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x1c]
	strh	r1, [r0, #0x1e]
	ldr	r1, .L242+0x8
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L243:
	.align	2, 0
.L242:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	AnimTask_ScaleMonAndRestore_Step
.Lfe28:
	.size	 AnimTask_ScaleMonAndRestore,.Lfe28-AnimTask_ScaleMonAndRestore
	.align	2, 0
	.type	 AnimTask_ScaleMonAndRestore_Step,function
	.thumb_func
AnimTask_ScaleMonAndRestore_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L248
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0xa]
	ldrh	r3, [r4, #0x1e]
	add	r0, r0, r3
	strh	r0, [r4, #0x1e]
	ldrb	r0, [r4, #0x10]
	add	r6, r0, #0
	mov	r0, #0x1c
	ldrsh	r1, [r4, r0]
	mov	r3, #0x1e
	ldrsh	r2, [r4, r3]
	add	r0, r6, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L245	@cond_branch
	ldrh	r2, [r4, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	ble	.L246	@cond_branch
	ldrh	r0, [r4, #0x8]
	neg	r0, r0
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xa]
	neg	r0, r0
	strh	r0, [r4, #0xa]
	strh	r2, [r4, #0xc]
	strh	r1, [r4, #0xe]
	b	.L245
.L249:
	.align	2, 0
.L248:
	.word	gTasks
.L246:
	add	r0, r6, #0
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L245:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 AnimTask_ScaleMonAndRestore_Step,.Lfe29-AnimTask_ScaleMonAndRestore_Step
	.align	2, 0
	.globl	AnimTask_RotateMonSpriteToSide
	.type	 AnimTask_RotateMonSpriteToSide,function
	.thumb_func
AnimTask_RotateMonSpriteToSide:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L262
	ldrb	r0, [r4, #0x4]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r1, .L262+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r1, #0x0
	strh	r1, [r2, #0xa]
	ldrh	r0, [r4]
	strh	r0, [r2, #0xc]
	mov	r3, #0x6
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x1
	beq	.L251	@cond_branch
	strh	r1, [r2, #0xe]
	b	.L252
.L263:
	.align	2, 0
.L262:
	.word	gBattleAnimArgs
	.word	gTasks
.L251:
	ldrh	r0, [r4]
	ldrh	r1, [r4, #0x2]
	mov	r3, r0
	mul	r3, r3, r1
	add	r0, r3, #0
	strh	r0, [r2, #0xe]
.L252:
	ldr	r1, .L264
	lsl	r4, r7, #0x2
	add	r0, r4, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldr	r6, .L264+0x4
	ldrh	r0, [r6, #0x2]
	strh	r0, [r5, #0x10]
	mov	r0, r8
	strh	r0, [r5, #0x12]
	ldrh	r0, [r6, #0x6]
	strh	r0, [r5, #0x14]
	bl	IsContest
	lsl	r0, r0, #0x18
	mov	r8, r4
	cmp	r0, #0
	beq	.L253	@cond_branch
	mov	r0, #0x1
	strh	r0, [r5, #0x16]
	b	.L254
.L265:
	.align	2, 0
.L264:
	.word	gTasks
	.word	gBattleAnimArgs
.L253:
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L255	@cond_branch
	ldr	r0, .L266
	b	.L261
.L267:
	.align	2, 0
.L266:
	.word	gBattleAnimAttacker
.L255:
	ldr	r0, .L268
.L261:
	ldrb	r0, [r0]
	bl	GetBattlerSide
	mov	r1, #0x0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L258	@cond_branch
	mov	r1, #0x1
.L258:
	strh	r1, [r5, #0x16]
.L254:
	ldr	r0, .L268+0x4
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r4, r1, r0
	mov	r3, #0x16
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L259	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L259	@cond_branch
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0xe]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	neg	r0, r0
	strh	r0, [r4, #0x10]
.L259:
	ldr	r0, .L268+0x4
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L268+0x8
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L269:
	.align	2, 0
.L268:
	.word	gBattleAnimTarget
	.word	gTasks
	.word	AnimTask_RotateMonSpriteToSide_Step
.Lfe30:
	.size	 AnimTask_RotateMonSpriteToSide,.Lfe30-AnimTask_RotateMonSpriteToSide
	.align	2, 0
	.globl	AnimTask_RotateMonToSideAndRestore
	.type	 AnimTask_RotateMonToSideAndRestore,function
	.thumb_func
AnimTask_RotateMonToSideAndRestore:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L278
	ldrb	r0, [r4, #0x4]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r1, .L278+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0xa]
	ldrh	r1, [r4]
	strh	r1, [r0, #0xc]
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L271	@cond_branch
	ldr	r0, .L278+0x8
	b	.L277
.L279:
	.align	2, 0
.L278:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	gBattleAnimAttacker
.L271:
	ldr	r0, .L280
.L277:
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L273	@cond_branch
	ldrh	r0, [r4, #0x2]
	neg	r0, r0
	strh	r0, [r4, #0x2]
.L273:
	ldr	r0, .L280+0x4
	mov	r2, #0x6
	ldrsh	r1, [r0, r2]
	add	r6, r0, #0
	cmp	r1, #0x1
	beq	.L275	@cond_branch
	ldr	r2, .L280+0x8
	lsl	r3, r5, #0x2
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0xe]
	b	.L276
.L281:
	.align	2, 0
.L280:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gTasks
.L275:
	ldr	r3, .L282
	lsl	r4, r5, #0x2
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrh	r2, [r6]
	ldrh	r1, [r6, #0x2]
	mov	r7, r2
	mul	r7, r7, r1
	add	r1, r7, #0
	strh	r1, [r0, #0xe]
	add	r2, r3, #0
	add	r3, r4, #0
.L276:
	add	r1, r3, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r0, [r6, #0x2]
	strh	r0, [r1, #0x10]
	mov	r0, r8
	strh	r0, [r1, #0x12]
	ldrh	r0, [r6, #0x6]
	strh	r0, [r1, #0x14]
	mov	r0, #0x1
	strh	r0, [r1, #0x16]
	mov	r2, #0xe
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1, #0xe]
	mov	r7, #0x10
	ldrsh	r0, [r1, r7]
	neg	r0, r0
	strh	r0, [r1, #0x10]
	ldr	r0, .L282+0x4
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L283:
	.align	2, 0
.L282:
	.word	gTasks
	.word	AnimTask_RotateMonSpriteToSide_Step
.Lfe31:
	.size	 AnimTask_RotateMonToSideAndRestore,.Lfe31-AnimTask_RotateMonToSideAndRestore
	.align	2, 0
	.type	 AnimTask_RotateMonSpriteToSide_Step,function
	.thumb_func
AnimTask_RotateMonSpriteToSide_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L294
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x10]
	ldrh	r1, [r4, #0xe]
	add	r0, r0, r1
	strh	r0, [r4, #0xe]
	ldrb	r0, [r4, #0x12]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0xe]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L285	@cond_branch
	ldrb	r0, [r4, #0x12]
	bl	SetBattlerSpriteYOffsetFromRotation
.L285:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L284	@cond_branch
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L288	@cond_branch
	cmp	r0, #0x1
	ble	.L290	@cond_branch
	cmp	r0, #0x2
	beq	.L291	@cond_branch
	b	.L290
.L295:
	.align	2, 0
.L294:
	.word	gTasks
.L288:
	ldrb	r0, [r4, #0x12]
	bl	ResetSpriteRotScale
.L290:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L284
.L291:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	neg	r0, r0
	strh	r0, [r4, #0x10]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
.L284:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 AnimTask_RotateMonSpriteToSide_Step,.Lfe32-AnimTask_RotateMonSpriteToSide_Step
	.align	2, 0
	.globl	AnimTask_ShakeTargetBasedOnMovePowerOrDmg
	.type	 AnimTask_ShakeTargetBasedOnMovePowerOrDmg,function
	.thumb_func
AnimTask_ShakeTargetBasedOnMovePowerOrDmg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L304
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r8, r0
	cmp	r1, #0
	bne	.L297	@cond_branch
	ldr	r4, .L304+0x4
	lsl	r5, r7, #0x2
	add	r0, r5, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r4
	ldr	r0, .L304+0x8
	ldrh	r0, [r0]
	mov	r1, #0xc
	bl	__udivsi3
	b	.L303
.L305:
	.align	2, 0
.L304:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	gAnimMovePower
.L297:
	ldr	r4, .L306
	lsl	r5, r7, #0x2
	add	r0, r5, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r4
	ldr	r0, .L306+0x4
	ldr	r0, [r0]
	mov	r1, #0xc
	bl	__divsi3
.L303:
	strh	r0, [r6, #0x26]
	lsl	r0, r0, #0x10
	add	r1, r4, #0
	cmp	r0, #0
	bgt	.L301	@cond_branch
	mov	r0, #0x1
	strh	r0, [r6, #0x26]
.L301:
	mov	r2, #0x26
	ldrsh	r0, [r6, r2]
	cmp	r0, #0x10
	ble	.L300	@cond_branch
	mov	r0, #0x10
	strh	r0, [r6, #0x26]
.L300:
	add	r4, r5, r7
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	mov	r5, #0x0
	strh	r1, [r4, #0x24]
	ldrh	r2, [r4, #0x26]
	mov	r0, #0x1
	and	r0, r0, r2
	add	r1, r1, r0
	strh	r1, [r4, #0x22]
	strh	r5, [r4, #0x20]
	mov	r1, r8
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x1e]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x16]
	ldr	r2, .L306+0x8
	mov	r0, #0x16
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x24]
	strh	r0, [r4, #0x18]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x26]
	strh	r0, [r4, #0x1a]
	strh	r5, [r4, #0x8]
	mov	r1, r8
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0xa]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0xc]
	ldr	r0, .L306+0xc
	str	r0, [r4]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L307:
	.align	2, 0
.L306:
	.word	gTasks
	.word	gAnimMoveDmg
	.word	gSprites
	.word	AnimTask_ShakeTargetBasedOnMovePowerOrDmg_Step
.Lfe33:
	.size	 AnimTask_ShakeTargetBasedOnMovePowerOrDmg,.Lfe33-AnimTask_ShakeTargetBasedOnMovePowerOrDmg
	.align	2, 0
	.type	 AnimTask_ShakeTargetBasedOnMovePowerOrDmg_Step,function
	.thumb_func
AnimTask_ShakeTargetBasedOnMovePowerOrDmg_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L318
	add	r3, r0, r1
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xa
	ldrsh	r1, [r3, r2]
	cmp	r0, r1
	ble	.L309	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x8]
	ldrh	r0, [r3, #0x20]
	add	r1, r0, #0x1
	mov	r0, #0x1
	and	r1, r1, r0
	strh	r1, [r3, #0x20]
	mov	r2, #0x1c
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	beq	.L310	@cond_branch
	cmp	r1, #0
	beq	.L311	@cond_branch
	ldr	r2, .L318+0x4
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x22]
	ldrh	r2, [r3, #0x18]
	add	r1, r1, r2
	b	.L317
.L319:
	.align	2, 0
.L318:
	.word	gTasks
	.word	gSprites
.L311:
	ldr	r2, .L320
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x18]
	ldrh	r2, [r3, #0x24]
	sub	r1, r1, r2
.L317:
	strh	r1, [r0, #0x24]
.L310:
	mov	r1, #0x1e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L313	@cond_branch
	mov	r2, #0x20
	ldrsh	r4, [r3, r2]
	cmp	r4, #0
	beq	.L314	@cond_branch
	ldr	r2, .L320
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x26]
	strh	r1, [r0, #0x26]
	b	.L313
.L321:
	.align	2, 0
.L320:
	.word	gSprites
.L314:
	ldr	r2, .L322
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x26]
.L313:
	ldrh	r0, [r3, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xc]
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	cmp	r4, #0
	bne	.L309	@cond_branch
	ldr	r2, .L322
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x24]
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x26]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L309:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L323:
	.align	2, 0
.L322:
	.word	gSprites
.Lfe34:
	.size	 AnimTask_ShakeTargetBasedOnMovePowerOrDmg_Step,.Lfe34-AnimTask_ShakeTargetBasedOnMovePowerOrDmg_Step
	.align	2, 0
	.globl	AnimTask_RotateVertically
	.type	 AnimTask_RotateVertically,function
	.thumb_func
AnimTask_RotateVertically:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r6, .L328
	ldrb	r0, [r6]
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r1, .L328+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r0, #0x0
	strh	r4, [r5, #0x8]
	strh	r0, [r5, #0xc]
	ldrb	r0, [r6]
	bl	GetAnimBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	mov	r1, #0x0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L325	@cond_branch
	mov	r1, #0x1
.L325:
	strh	r1, [r5, #0x12]
	ldr	r2, .L328+0x8
	add	r0, r2, #0
	cmp	r1, #0
	beq	.L326	@cond_branch
	ldr	r1, .L328+0xc
	add	r0, r1, #0
.L326:
	strh	r0, [r5, #0x14]
	ldrh	r0, [r6, #0x2]
	strh	r0, [r5, #0xa]
	ldr	r0, .L328+0x10
	str	r0, [r5]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L329:
	.align	2, 0
.L328:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	0x7ffe
	.word	0x1fff
	.word	AnimTask_RotateVerticallyStep
.Lfe35:
	.size	 AnimTask_RotateVertically,.Lfe35-AnimTask_RotateVertically
	.align	2, 0
	.type	 AnimTask_RotateVerticallyStep,function
	.thumb_func
AnimTask_RotateVerticallyStep:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L350
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	add	r6, r1, #0
	cmp	r0, #0x1
	beq	.L337	@cond_branch
	cmp	r0, #0x1
	bgt	.L347	@cond_branch
	cmp	r0, #0
	beq	.L332	@cond_branch
	b	.L331
.L351:
	.align	2, 0
.L350:
	.word	gTasks
.L347:
	cmp	r0, #0x2
	beq	.L339	@cond_branch
	cmp	r0, #0x3
	beq	.L344	@cond_branch
	b	.L331
.L332:
	mov	r7, #0xc
	ldrsh	r1, [r4, r7]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	add	r1, r1, r0
	cmp	r1, #0
	bge	.L333	@cond_branch
	neg	r1, r1
.L333:
	mov	r7, #0x14
	ldrsh	r0, [r4, r7]
	cmp	r0, r1
	ble	.L334	@cond_branch
	add	r0, r1, #0
.L334:
	strh	r0, [r4, #0xc]
	ldrb	r0, [r4, #0x8]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0xc]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L335	@cond_branch
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromRotation
.L335:
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	mov	r7, #0x14
	ldrsh	r0, [r4, r7]
	cmp	r1, r0
	bne	.L331	@cond_branch
	b	.L348
.L337:
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4a
	ble	.L331	@cond_branch
	b	.L348
.L339:
	ldrh	r3, [r4, #0xc]
	mov	r0, #0xc
	ldrsh	r1, [r4, r0]
	ldrh	r2, [r4, #0xa]
	mov	r7, #0xa
	ldrsh	r0, [r4, r7]
	cmp	r1, r0
	bge	.L340	@cond_branch
	mov	r0, #0x0
	b	.L349
.L340:
	sub	r0, r3, r2
.L349:
	strh	r0, [r4, #0xc]
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r6
	ldrb	r0, [r4, #0x8]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0xc]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L342	@cond_branch
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromRotation
.L342:
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L331	@cond_branch
.L348:
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L331
.L344:
	ldrb	r0, [r4, #0x8]
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L331:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 AnimTask_RotateVerticallyStep,.Lfe36-AnimTask_RotateVerticallyStep
.text
	.align	2, 0

