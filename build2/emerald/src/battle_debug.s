@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.type	 sText_Ability,object
sText_Ability:
	.byte	0xbb
	.byte	0xd6
	.byte	0xdd
	.byte	0xe0
	.byte	0xdd
	.byte	0xe8
	.byte	0xed
	.byte	0xff
	.size	 sText_Ability,8
	.type	 sText_Moves,object
sText_Moves:
	.byte	0xc7
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xe7
	.byte	0xff
	.size	 sText_Moves,6
	.type	 sText_Stats,object
sText_Stats:
	.byte	0xcd
	.byte	0xe8
	.byte	0xd5
	.byte	0xe8
	.byte	0xe7
	.byte	0xff
	.size	 sText_Stats,6
	.type	 sText_StatStages,object
sText_StatStages:
	.byte	0xcd
	.byte	0xe8
	.byte	0xd5
	.byte	0xe8
	.byte	0x0
	.byte	0xcd
	.byte	0xe8
	.byte	0xd5
	.byte	0xdb
	.byte	0xd9
	.byte	0xe7
	.byte	0xff
	.size	 sText_StatStages,12
	.type	 sText_Status1,object
sText_Status1:
	.byte	0xcd
	.byte	0xe8
	.byte	0xd5
	.byte	0xe8
	.byte	0xe9
	.byte	0xe7
	.byte	0xa2
	.byte	0xff
	.size	 sText_Status1,8
	.type	 sText_Status2,object
sText_Status2:
	.byte	0xcd
	.byte	0xe8
	.byte	0xd5
	.byte	0xe8
	.byte	0xe9
	.byte	0xe7
	.byte	0xa3
	.byte	0xff
	.size	 sText_Status2,8
	.type	 sText_Status3,object
sText_Status3:
	.byte	0xcd
	.byte	0xe8
	.byte	0xd5
	.byte	0xe8
	.byte	0xe9
	.byte	0xe7
	.byte	0xa4
	.byte	0xff
	.size	 sText_Status3,8
	.type	 sText_HeldItem,object
sText_HeldItem:
	.byte	0xc2
	.byte	0xd9
	.byte	0xe0
	.byte	0xd8
	.byte	0x0
	.byte	0xc3
	.byte	0xe8
	.byte	0xd9
	.byte	0xe1
	.byte	0xff
	.size	 sText_HeldItem,10
	.type	 sText_SideStatus,object
sText_SideStatus:
	.byte	0xcd
	.byte	0xdd
	.byte	0xd8
	.byte	0xd9
	.byte	0x0
	.byte	0xcd
	.byte	0xe8
	.byte	0xd5
	.byte	0xe8
	.byte	0xe9
	.byte	0xe7
	.byte	0xff
	.size	 sText_SideStatus,12
	.type	 sText_MaxHp,object
sText_MaxHp:
	.byte	0xc2
	.byte	0xca
	.byte	0x0
	.byte	0xc7
	.byte	0xd5
	.byte	0xec
	.byte	0xff
	.size	 sText_MaxHp,7
	.type	 sText_CurrHp,object
sText_CurrHp:
	.byte	0xc2
	.byte	0xca
	.byte	0x0
	.byte	0xbd
	.byte	0xe9
	.byte	0xe6
	.byte	0xe6
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xff
	.size	 sText_CurrHp,11
	.type	 sText_Freeze,object
sText_Freeze:
	.byte	0xc0
	.byte	0xe6
	.byte	0xd9
	.byte	0xd9
	.byte	0xee
	.byte	0xd9
	.byte	0xff
	.size	 sText_Freeze,7
	.type	 sText_ToxicPoison,object
sText_ToxicPoison:
	.byte	0xce
	.byte	0xe3
	.byte	0xec
	.byte	0xdd
	.byte	0xd7
	.byte	0x0
	.byte	0xca
	.byte	0xe3
	.byte	0xdd
	.byte	0xe7
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.size	 sText_ToxicPoison,13
	.type	 sText_ToxicCounter,object
sText_ToxicCounter:
	.byte	0xce
	.byte	0xe3
	.byte	0xec
	.byte	0xdd
	.byte	0xd7
	.byte	0x0
	.byte	0xbd
	.byte	0xe3
	.byte	0xe9
	.byte	0xe2
	.byte	0xe8
	.byte	0xd9
	.byte	0xe6
	.byte	0xff
	.size	 sText_ToxicCounter,14
	.type	 sText_Flinch,object
sText_Flinch:
	.byte	0xc0
	.byte	0xe0
	.byte	0xdd
	.byte	0xe2
	.byte	0xd7
	.byte	0xdc
	.byte	0xff
	.size	 sText_Flinch,7
	.type	 sText_Uproar,object
sText_Uproar:
	.byte	0xcf
	.byte	0xe4
	.byte	0xe6
	.byte	0xe3
	.byte	0xd5
	.byte	0xe6
	.byte	0xff
	.size	 sText_Uproar,7
	.type	 sText_Bide,object
sText_Bide:
	.byte	0xbc
	.byte	0xdd
	.byte	0xd8
	.byte	0xd9
	.byte	0xff
	.size	 sText_Bide,5
	.type	 sText_LockConfuse,object
sText_LockConfuse:
	.byte	0xc6
	.byte	0xe3
	.byte	0xd7
	.byte	0xdf
	.byte	0x0
	.byte	0xbd
	.byte	0xe3
	.byte	0xe2
	.byte	0xda
	.byte	0xe9
	.byte	0xe7
	.byte	0xd9
	.byte	0xff
	.size	 sText_LockConfuse,13
	.type	 sText_MultipleTurns,object
sText_MultipleTurns:
	.byte	0xc7
	.byte	0xe9
	.byte	0xe0
	.byte	0xe8
	.byte	0xdd
	.byte	0xe4
	.byte	0xe0
	.byte	0xd9
	.byte	0xce
	.byte	0xe9
	.byte	0xe6
	.byte	0xe2
	.byte	0xe7
	.byte	0xff
	.size	 sText_MultipleTurns,14
	.type	 sText_FocusEnergy,object
sText_FocusEnergy:
	.byte	0xc0
	.byte	0xe3
	.byte	0xd7
	.byte	0xe9
	.byte	0xe7
	.byte	0x0
	.byte	0xbf
	.byte	0xe2
	.byte	0xd9
	.byte	0xe6
	.byte	0xdb
	.byte	0xed
	.byte	0xff
	.size	 sText_FocusEnergy,13
	.type	 sText_Transformed,object
sText_Transformed:
	.byte	0xce
	.byte	0xe6
	.byte	0xd5
	.byte	0xe2
	.byte	0xe7
	.byte	0xda
	.byte	0xe3
	.byte	0xe6
	.byte	0xe1
	.byte	0xd9
	.byte	0xd8
	.byte	0xff
	.size	 sText_Transformed,12
	.type	 sText_Recharge,object
sText_Recharge:
	.byte	0xcc
	.byte	0xd9
	.byte	0xd7
	.byte	0xdc
	.byte	0xd5
	.byte	0xe6
	.byte	0xdb
	.byte	0xd9
	.byte	0xff
	.size	 sText_Recharge,9
	.type	 sText_Rage,object
sText_Rage:
	.byte	0xcc
	.byte	0xd5
	.byte	0xdb
	.byte	0xd9
	.byte	0xff
	.size	 sText_Rage,5
	.type	 sText_Substitute,object
sText_Substitute:
	.byte	0xcd
	.byte	0xe9
	.byte	0xd6
	.byte	0xe7
	.byte	0xe8
	.byte	0xdd
	.byte	0xe8
	.byte	0xe9
	.byte	0xe8
	.byte	0xd9
	.byte	0xff
	.size	 sText_Substitute,11
	.type	 sText_SubstituteHp,object
sText_SubstituteHp:
	.byte	0xcd
	.byte	0xe9
	.byte	0xd6
	.byte	0xe7
	.byte	0xe8
	.byte	0xdd
	.byte	0xe8
	.byte	0xe9
	.byte	0xe8
	.byte	0xd9
	.byte	0x0
	.byte	0xc2
	.byte	0xca
	.byte	0xff
	.size	 sText_SubstituteHp,14
	.type	 sText_DestinyBond,object
sText_DestinyBond:
	.byte	0xbe
	.byte	0xd9
	.byte	0xe7
	.byte	0xe8
	.byte	0xdd
	.byte	0xe2
	.byte	0xed
	.byte	0x0
	.byte	0xbc
	.byte	0xe3
	.byte	0xe2
	.byte	0xd8
	.byte	0xff
	.size	 sText_DestinyBond,13
	.type	 sText_CantEscape,object
sText_CantEscape:
	.byte	0xbd
	.byte	0xd5
	.byte	0xe2
	.byte	0xe8
	.byte	0x0
	.byte	0xbf
	.byte	0xe7
	.byte	0xd7
	.byte	0xd5
	.byte	0xe4
	.byte	0xd9
	.byte	0xff
	.size	 sText_CantEscape,12
	.type	 sText_Nightmare,object
sText_Nightmare:
	.byte	0xc8
	.byte	0xdd
	.byte	0xdb
	.byte	0xdc
	.byte	0xe8
	.byte	0xe1
	.byte	0xd5
	.byte	0xe6
	.byte	0xd9
	.byte	0xff
	.size	 sText_Nightmare,10
	.type	 sText_Cursed,object
sText_Cursed:
	.byte	0xbd
	.byte	0xe9
	.byte	0xe6
	.byte	0xe7
	.byte	0xd9
	.byte	0xd8
	.byte	0xff
	.size	 sText_Cursed,7
	.type	 sText_Foresight,object
sText_Foresight:
	.byte	0xc0
	.byte	0xe3
	.byte	0xe6
	.byte	0xd9
	.byte	0xe7
	.byte	0xdd
	.byte	0xdb
	.byte	0xdc
	.byte	0xe8
	.byte	0xd9
	.byte	0xd8
	.byte	0xff
	.size	 sText_Foresight,12
	.type	 sText_DefenseCurl,object
sText_DefenseCurl:
	.byte	0xbe
	.byte	0xd9
	.byte	0xda
	.byte	0x0
	.byte	0xbd
	.byte	0xe9
	.byte	0xe6
	.byte	0xe0
	.byte	0xd9
	.byte	0xd8
	.byte	0xff
	.size	 sText_DefenseCurl,11
	.type	 sText_Tormented,object
sText_Tormented:
	.byte	0xce
	.byte	0xe3
	.byte	0xe6
	.byte	0xe1
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xd9
	.byte	0xd8
	.byte	0xff
	.size	 sText_Tormented,10
	.type	 sText_AlwaysHits,object
sText_AlwaysHits:
	.byte	0xcd
	.byte	0xe9
	.byte	0xe6
	.byte	0xd9
	.byte	0x0
	.byte	0xc2
	.byte	0xdd
	.byte	0xe8
	.byte	0xff
	.size	 sText_AlwaysHits,9
	.type	 sText_ChargedUp,object
sText_ChargedUp:
	.byte	0xbd
	.byte	0xdc
	.byte	0xd5
	.byte	0xe6
	.byte	0xdb
	.byte	0xd9
	.byte	0xd8
	.byte	0x0
	.byte	0xcf
	.byte	0xe4
	.byte	0xff
	.size	 sText_ChargedUp,11
	.type	 sText_Rooted,object
sText_Rooted:
	.byte	0xcc
	.byte	0xe3
	.byte	0xe3
	.byte	0xe8
	.byte	0xd9
	.byte	0xd8
	.byte	0xff
	.size	 sText_Rooted,7
	.type	 sText_Yawned,object
sText_Yawned:
	.byte	0xd3
	.byte	0xd5
	.byte	0xeb
	.byte	0xe2
	.byte	0xd9
	.byte	0xd8
	.byte	0xff
	.size	 sText_Yawned,7
	.type	 sText_Minimized,object
sText_Minimized:
	.byte	0xc7
	.byte	0xdd
	.byte	0xe2
	.byte	0xdd
	.byte	0xe1
	.byte	0xdd
	.byte	0xee
	.byte	0xd9
	.byte	0xd8
	.byte	0xff
	.size	 sText_Minimized,10
	.type	 sText_NoCrit,object
sText_NoCrit:
	.byte	0xc8
	.byte	0xe3
	.byte	0x0
	.byte	0xbd
	.byte	0xe6
	.byte	0xdd
	.byte	0xe8
	.byte	0xff
	.size	 sText_NoCrit,8
	.type	 sText_Imprisoned,object
sText_Imprisoned:
	.byte	0xc3
	.byte	0xe1
	.byte	0xe4
	.byte	0xe6
	.byte	0xdd
	.byte	0xe7
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.size	 sText_Imprisoned,9
	.type	 sText_Reflect,object
sText_Reflect:
	.byte	0xcc
	.byte	0xd9
	.byte	0xda
	.byte	0xe0
	.byte	0xd9
	.byte	0xd7
	.byte	0xe8
	.byte	0xff
	.size	 sText_Reflect,8
	.type	 sText_LightScreen,object
sText_LightScreen:
	.byte	0xc6
	.byte	0xdd
	.byte	0xdb
	.byte	0xdc
	.byte	0xe8
	.byte	0x0
	.byte	0xcd
	.byte	0xd7
	.byte	0xe6
	.byte	0xd9
	.byte	0xd9
	.byte	0xe2
	.byte	0xff
	.size	 sText_LightScreen,13
	.type	 sText_Spikes,object
sText_Spikes:
	.byte	0xcd
	.byte	0xe4
	.byte	0xdd
	.byte	0xdf
	.byte	0xd9
	.byte	0xe7
	.byte	0xff
	.size	 sText_Spikes,7
	.type	 sText_Safeguard,object
sText_Safeguard:
	.byte	0xcd
	.byte	0xd5
	.byte	0xda
	.byte	0xd9
	.byte	0xdb
	.byte	0xe9
	.byte	0xd5
	.byte	0xe6
	.byte	0xd8
	.byte	0xff
	.size	 sText_Safeguard,10
	.type	 sText_Mist,object
sText_Mist:
	.byte	0xc7
	.byte	0xdd
	.byte	0xe7
	.byte	0xe8
	.byte	0xff
	.size	 sText_Mist,5
	.type	 sText_ShowOpponentHP,object
sText_ShowOpponentHP:
	.byte	0xc9
	.byte	0xe4
	.byte	0xe4
	.byte	0xe3
	.byte	0xe2
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0x0
	.byte	0xc2
	.byte	0xe4
	.byte	0xff
	.size	 sText_ShowOpponentHP,12
	.type	 sText_Types,object
sText_Types:
	.byte	0xce
	.byte	0xed
	.byte	0xe4
	.byte	0xd9
	.byte	0xe7
	.byte	0xff
	.size	 sText_Types,6
	.type	 sText_GastroAcid,object
sText_GastroAcid:
	.byte	0xc1
	.byte	0xd5
	.byte	0xe7
	.byte	0xe8
	.byte	0xe6
	.byte	0xe3
	.byte	0x0
	.byte	0xbb
	.byte	0xd7
	.byte	0xdd
	.byte	0xd8
	.byte	0xff
	.size	 sText_GastroAcid,12
	.type	 sText_SmackDown,object
sText_SmackDown:
	.byte	0xcd
	.byte	0xe1
	.byte	0xd5
	.byte	0xd7
	.byte	0xdf
	.byte	0xd9
	.byte	0xd8
	.byte	0x0
	.byte	0xbe
	.byte	0xe3
	.byte	0xeb
	.byte	0xe2
	.byte	0xff
	.size	 sText_SmackDown,13
	.type	 sText_MiracleEye,object
sText_MiracleEye:
	.byte	0xc7
	.byte	0xdd
	.byte	0xe6
	.byte	0xd5
	.byte	0xd7
	.byte	0xe0
	.byte	0xd9
	.byte	0x0
	.byte	0xbf
	.byte	0xed
	.byte	0xd9
	.byte	0xff
	.size	 sText_MiracleEye,12
	.type	 sText_AquaRing,object
sText_AquaRing:
	.byte	0xbb
	.byte	0xe5
	.byte	0xe9
	.byte	0xd5
	.byte	0x0
	.byte	0xcc
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0xff
	.size	 sText_AquaRing,10
	.type	 sText_AuroraVeil,object
sText_AuroraVeil:
	.byte	0xbb
	.byte	0xe9
	.byte	0xe6
	.byte	0xe3
	.byte	0xe6
	.byte	0xd5
	.byte	0x0
	.byte	0xd0
	.byte	0xd9
	.byte	0xdd
	.byte	0xe0
	.byte	0xff
	.size	 sText_AuroraVeil,12
	.type	 sText_LuckyChant,object
sText_LuckyChant:
	.byte	0xc6
	.byte	0xe9
	.byte	0xd7
	.byte	0xdf
	.byte	0xed
	.byte	0x0
	.byte	0xbd
	.byte	0xdc
	.byte	0xd5
	.byte	0xe2
	.byte	0xe8
	.byte	0xff
	.size	 sText_LuckyChant,12
	.type	 sText_Tailwind,object
sText_Tailwind:
	.byte	0xce
	.byte	0xd5
	.byte	0xdd
	.byte	0xe0
	.byte	0xeb
	.byte	0xdd
	.byte	0xe2
	.byte	0xd8
	.byte	0xff
	.size	 sText_Tailwind,9
	.type	 sText_PP,object
sText_PP:
	.byte	0xca
	.byte	0xca
	.byte	0xff
	.size	 sText_PP,3
	.type	 sText_StealthRock,object
sText_StealthRock:
	.byte	0xcd
	.byte	0xe8
	.byte	0xd9
	.byte	0xd5
	.byte	0xe0
	.byte	0xe8
	.byte	0xdc
	.byte	0x0
	.byte	0xcc
	.byte	0xe3
	.byte	0xd7
	.byte	0xdf
	.byte	0xff
	.size	 sText_StealthRock,13
	.type	 sText_ToxicSpikes,object
sText_ToxicSpikes:
	.byte	0xce
	.byte	0xe3
	.byte	0xec
	.byte	0xdd
	.byte	0xd7
	.byte	0x0
	.byte	0xcd
	.byte	0xe4
	.byte	0xdd
	.byte	0xdf
	.byte	0xd9
	.byte	0xe7
	.byte	0xff
	.size	 sText_ToxicSpikes,13
	.type	 sText_StickyWeb,object
sText_StickyWeb:
	.byte	0xcd
	.byte	0xe8
	.byte	0xdd
	.byte	0xd7
	.byte	0xdf
	.byte	0xed
	.byte	0x0
	.byte	0xd1
	.byte	0xd9
	.byte	0xd6
	.byte	0xff
	.size	 sText_StickyWeb,11
	.type	 sText_AI,object
sText_AI:
	.byte	0xbb
	.byte	0xc3
	.byte	0xff
	.size	 sText_AI,3
	.type	 sText_NoBadMoves,object
sText_NoBadMoves:
	.byte	0xc8
	.byte	0xe3
	.byte	0x0
	.byte	0xbc
	.byte	0xd5
	.byte	0xd8
	.byte	0x0
	.byte	0xc7
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xe7
	.byte	0xff
	.size	 sText_NoBadMoves,13
	.type	 sText_Viability,object
sText_Viability:
	.byte	0xd0
	.byte	0xdd
	.byte	0xd5
	.byte	0xd6
	.byte	0xdd
	.byte	0xe0
	.byte	0xdd
	.byte	0xe8
	.byte	0xed
	.byte	0xff
	.size	 sText_Viability,10
	.type	 sText_TryFaint,object
sText_TryFaint:
	.byte	0xce
	.byte	0xe6
	.byte	0xed
	.byte	0x0
	.byte	0xc0
	.byte	0xd5
	.byte	0xdd
	.byte	0xe2
	.byte	0xe8
	.byte	0xff
	.size	 sText_TryFaint,10
	.type	 sText_SetUpFirstTurn,object
sText_SetUpFirstTurn:
	.byte	0xcd
	.byte	0xd9
	.byte	0xe8
	.byte	0xe9
	.byte	0xe4
	.byte	0x0
	.byte	0xa2
	.byte	0x0
	.byte	0xe8
	.byte	0xe9
	.byte	0xe6
	.byte	0xe2
	.byte	0xff
	.size	 sText_SetUpFirstTurn,13
	.type	 sText_Risky,object
sText_Risky:
	.byte	0xcc
	.byte	0xdd
	.byte	0xe7
	.byte	0xdf
	.byte	0xed
	.byte	0xff
	.size	 sText_Risky,6
	.type	 sText_StrongestMove,object
sText_StrongestMove:
	.byte	0xc7
	.byte	0xe3
	.byte	0xe7
	.byte	0xe8
	.byte	0x0
	.byte	0xd8
	.byte	0xe1
	.byte	0xdb
	.byte	0x0
	.byte	0xe1
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xff
	.size	 sText_StrongestMove,14
	.type	 sText_Various,object
sText_Various:
	.byte	0xd0
	.byte	0xd5
	.byte	0xe6
	.byte	0xdd
	.byte	0xe3
	.byte	0xe9
	.byte	0xe7
	.byte	0xff
	.size	 sText_Various,8
	.type	 sText_ShowHP,object
sText_ShowHP:
	.byte	0xcd
	.byte	0xdc
	.byte	0xe3
	.byte	0xeb
	.byte	0x0
	.byte	0xc2
	.byte	0xca
	.byte	0xff
	.size	 sText_ShowHP,8
	.type	 sText_PreferBatonPass,object
sText_PreferBatonPass:
	.byte	0xbc
	.byte	0xd5
	.byte	0xe8
	.byte	0xe3
	.byte	0xe2
	.byte	0x0
	.byte	0xca
	.byte	0xd5
	.byte	0xe7
	.byte	0xe7
	.byte	0xff
	.size	 sText_PreferBatonPass,11
	.type	 sText_InDoubles,object
sText_InDoubles:
	.byte	0xc3
	.byte	0xe2
	.byte	0x0
	.byte	0xbe
	.byte	0xe3
	.byte	0xe9
	.byte	0xd6
	.byte	0xe0
	.byte	0xd9
	.byte	0xe7
	.byte	0xff
	.size	 sText_InDoubles,11
	.type	 sText_HpAware,object
sText_HpAware:
	.byte	0xc2
	.byte	0xca
	.byte	0x0
	.byte	0xd5
	.byte	0xeb
	.byte	0xd5
	.byte	0xe6
	.byte	0xd9
	.byte	0xff
	.size	 sText_HpAware,9
	.type	 sText_Unknown,object
sText_Unknown:
	.byte	0xcf
	.byte	0xe2
	.byte	0xdf
	.byte	0xe2
	.byte	0xe3
	.byte	0xeb
	.byte	0xe2
	.byte	0xff
	.size	 sText_Unknown,8
	.type	 sText_InLove,object
sText_InLove:
	.byte	0xc3
	.byte	0xe2
	.byte	0x0
	.byte	0xc6
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xff
	.size	 sText_InLove,8
	.type	 sText_AIMovePts,object
sText_AIMovePts:
	.byte	0xbb
	.byte	0xc3
	.byte	0x0
	.byte	0xc7
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0x0
	.byte	0xca
	.byte	0xe8
	.byte	0xe7
	.byte	0xff
	.size	 sText_AIMovePts,12
	.type	 sText_EffectOverride,object
sText_EffectOverride:
	.byte	0xbf
	.byte	0xda
	.byte	0xda
	.byte	0xd9
	.byte	0xd7
	.byte	0xe8
	.byte	0x0
	.byte	0xc9
	.byte	0xea
	.byte	0xd9
	.byte	0xe6
	.byte	0xe6
	.byte	0xdd
	.byte	0xd8
	.byte	0xd9
	.byte	0xff
	.size	 sText_EffectOverride,16
	.type	 sText_EmptyString,object
sText_EmptyString:
	.byte	0xff
	.size	 sText_EmptyString,1
	.type	 sStatus1Bitfield,object
sStatus1Bitfield:
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x1
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x1
	.byte	0x6
	.byte	0x1
	.byte	0x7
	.byte	0x4
	.byte	0x8
	.size	 sStatus1Bitfield,14
	.type	 sStatus2Bitfield,object
sStatus2Bitfield:
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x3
	.byte	0x4
	.byte	0x2
	.byte	0x8
	.byte	0x2
	.byte	0xa
	.byte	0x1
	.byte	0xc
	.byte	0x1
	.byte	0x15
	.byte	0x1
	.byte	0x16
	.byte	0x1
	.byte	0x17
	.byte	0x1
	.byte	0x18
	.byte	0x1
	.byte	0x19
	.byte	0x1
	.byte	0x1a
	.byte	0x1
	.byte	0x1b
	.byte	0x1
	.byte	0x1c
	.byte	0x1
	.byte	0x1d
	.byte	0x1
	.byte	0x1e
	.byte	0x1
	.byte	0x1f
	.size	 sStatus2Bitfield,34
	.type	 sStatus3Bitfield,object
sStatus3Bitfield:
	.byte	0x2
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x1
	.byte	0x9
	.byte	0x1
	.byte	0xa
	.byte	0x2
	.byte	0xb
	.byte	0x1
	.byte	0xd
	.byte	0x1
	.byte	0xf
	.byte	0x1
	.byte	0x10
	.byte	0x1
	.byte	0x15
	.byte	0x1
	.byte	0x19
	.byte	0x1
	.byte	0x1c
	.size	 sStatus3Bitfield,22
	.type	 sAIBitfield,object
sAIBitfield:
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x1
	.byte	0x3
	.byte	0x1
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x1
	.byte	0x6
	.byte	0x1
	.byte	0x7
	.byte	0x1
	.byte	0x8
	.byte	0x1
	.byte	0x9
	.size	 sAIBitfield,20
	.align	2, 0
	.type	 sMainListItems,object
sMainListItems:
	.word	sText_Moves
	.word	0x0
	.word	sText_Ability
	.word	0x1
	.word	sText_HeldItem
	.word	0x2
	.word	sText_PP
	.word	0x3
	.word	sText_Types
	.word	0x4
	.word	sText_Stats
	.word	0x5
	.word	sText_StatStages
	.word	0x6
	.word	sText_Status1
	.word	0x7
	.word	sText_Status2
	.word	0x8
	.word	sText_Status3
	.word	0x9
	.word	sText_SideStatus
	.word	0xa
	.word	sText_AI
	.word	0xb
	.word	sText_AIMovePts
	.word	0xc
	.word	sText_Various
	.word	0xd
	.size	 sMainListItems,112
	.align	2, 0
	.type	 sVariousListItems,object
sVariousListItems:
	.word	sText_ShowHP
	.word	0x0
	.word	sText_SubstituteHp
	.word	0x1
	.word	sText_InLove
	.word	0x2
	.size	 sVariousListItems,24
	.align	2, 0
	.type	 sAIListItems,object
sAIListItems:
	.word	sText_NoBadMoves
	.word	0x0
	.word	sText_TryFaint
	.word	0x1
	.word	sText_Viability
	.word	0x2
	.word	sText_SetUpFirstTurn
	.word	0x3
	.word	sText_Risky
	.word	0x4
	.word	sText_StrongestMove
	.word	0x5
	.word	sText_PreferBatonPass
	.word	0x6
	.word	sText_InDoubles
	.word	0x7
	.word	sText_HpAware
	.word	0x8
	.size	 sAIListItems,72
	.align	2, 0
	.type	 sStatsListItems,object
sStatsListItems:
	.word	sText_CurrHp
	.word	0x0
	.word	sText_MaxHp
	.word	0x1
	.word	gText_Attack
	.word	0x2
	.word	gText_Defense
	.word	0x3
	.word	gText_Speed
	.word	0x4
	.word	gText_SpAtk
	.word	0x5
	.word	gText_SpDef
	.word	0x6
	.size	 sStatsListItems,56
	.align	2, 0
	.type	 sStatus1ListItems,object
sStatus1ListItems:
	.word	gText_Sleep
	.word	0x0
	.word	gText_Poison
	.word	0x1
	.word	gText_Burn
	.word	0x2
	.word	sText_Freeze
	.word	0x3
	.word	gText_Paralysis
	.word	0x4
	.word	sText_ToxicPoison
	.word	0x5
	.word	sText_ToxicCounter
	.word	0x6
	.size	 sStatus1ListItems,56
	.align	2, 0
	.type	 sStatus2ListItems,object
sStatus2ListItems:
	.word	gText_Confusion
	.word	0x0
	.word	sText_Flinch
	.word	0x1
	.word	sText_Uproar
	.word	0x2
	.word	sText_Bide
	.word	0x3
	.word	sText_LockConfuse
	.word	0x4
	.word	sText_MultipleTurns
	.word	0x5
	.word	sText_FocusEnergy
	.word	0x6
	.word	sText_Recharge
	.word	0x7
	.word	sText_Rage
	.word	0x8
	.word	sText_Substitute
	.word	0x9
	.word	sText_DestinyBond
	.word	0xa
	.word	sText_CantEscape
	.word	0xb
	.word	sText_Nightmare
	.word	0xc
	.word	sText_Cursed
	.word	0xd
	.word	sText_Foresight
	.word	0xe
	.word	sText_DefenseCurl
	.word	0xf
	.word	sText_Tormented
	.word	0x10
	.size	 sStatus2ListItems,136
	.align	2, 0
	.type	 sStatus3ListItems,object
sStatus3ListItems:
	.word	sText_AlwaysHits
	.word	0x0
	.word	sText_Minimized
	.word	0x1
	.word	sText_ChargedUp
	.word	0x2
	.word	sText_Rooted
	.word	0x3
	.word	sText_Yawned
	.word	0x4
	.word	sText_Imprisoned
	.word	0x5
	.word	sText_NoCrit
	.word	0x6
	.word	sText_GastroAcid
	.word	0x7
	.word	sText_SmackDown
	.word	0x8
	.word	sText_MiracleEye
	.word	0x9
	.word	sText_AquaRing
	.word	0xa
	.size	 sStatus3ListItems,88
	.align	2, 0
	.type	 sSideStatusListItems,object
sSideStatusListItems:
	.word	sText_Reflect
	.word	0x0
	.word	sText_LightScreen
	.word	0x1
	.word	sText_Spikes
	.word	0x2
	.word	sText_Safeguard
	.word	0x3
	.word	sText_Mist
	.word	0x4
	.word	sText_AuroraVeil
	.word	0x5
	.word	sText_LuckyChant
	.word	0x6
	.word	sText_Tailwind
	.word	0x7
	.word	sText_StealthRock
	.word	0x8
	.word	sText_ToxicSpikes
	.word	0x9
	.word	sText_StickyWeb
	.word	0xa
	.size	 sSideStatusListItems,88
	.align	2, 0
	.type	 sSecondaryListItems,object
sSecondaryListItems:
	.word	sText_EmptyString
	.word	0x0
	.word	sText_EmptyString
	.word	0x1
	.word	sText_EmptyString
	.word	0x2
	.word	sText_EmptyString
	.word	0x3
	.word	sText_EmptyString
	.word	0x4
	.word	sText_EmptyString
	.word	0x5
	.word	sText_EmptyString
	.word	0x6
	.word	sText_EmptyString
	.word	0x7
	.word	sText_EmptyString
	.word	0x8
	.size	 sSecondaryListItems,72
	.align	2, 0
	.type	 sMainListTemplate,object
	.size	 sMainListTemplate,24
sMainListTemplate:
	.word	sMainListItems
	.word	0x0
	.word	0x0
	.short	0xe
	.short	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x21
	.byte	0x31
	.byte	0x1
	.byte	0x1
	.align	2, 0
	.type	 sSecondaryListTemplate,object
	.size	 sSecondaryListTemplate,24
sSecondaryListTemplate:
	.word	sSecondaryListItems
	.word	0x0
	.word	0x0
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x21
	.byte	0x31
	.byte	0x1
	.byte	0x1
	.align	2, 0
	.type	 sMainListWindowTemplate,object
	.size	 sMainListWindowTemplate,8
sMainListWindowTemplate:
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x9
	.byte	0xc
	.byte	0xf
	.short	0x2
	.align	2, 0
	.type	 sSecondaryListWindowTemplate,object
	.size	 sSecondaryListWindowTemplate,8
sSecondaryListWindowTemplate:
	.byte	0x0
	.byte	0xc
	.byte	0x3
	.byte	0xa
	.byte	0x2
	.byte	0xf
	.short	0xa0
	.align	2, 0
	.type	 sModifyWindowTemplate,object
	.size	 sModifyWindowTemplate,8
sModifyWindowTemplate:
	.byte	0x0
	.byte	0x19
	.byte	0x2
	.byte	0x4
	.byte	0x2
	.byte	0xf
	.short	0x200
	.align	2, 0
	.type	 sBattlerWindowTemplate,object
	.size	 sBattlerWindowTemplate,8
sBattlerWindowTemplate:
	.byte	0x0
	.byte	0xa
	.byte	0x0
	.byte	0xe
	.byte	0x2
	.byte	0xf
	.short	0x300
	.align	2, 0
	.type	 sBgTemplates,object
	.size	 sBgTemplates,8
sBgTemplates:
	.byte	0xf0
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0x49
	.byte	0x1
	.byte	0x0
	.space	1
	.type	 sBitsToMaxDigit,object
sBitsToMaxDigit:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.size	 sBitsToMaxDigit,9
	.type	 sHasChangeableEntries,object
	.size	 sHasChangeableEntries,14
sHasChangeableEntries:
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	1
	.align	1, 0
	.type	 sBgColor,object
sBgColor:
	.short	0x7fff
	.size	 sBgColor,2
.text
	.align	2, 0
	.type	 GetStructPtr,function
	.thumb_func
GetStructPtr:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	ldr	r0, .L3
	add	r2, r2, r0
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x2]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	bx	lr
.L4:
	.align	2, 0
.L3:
	.word	gTasks+0x8
.Lfe1:
	.size	 GetStructPtr,.Lfe1-GetStructPtr
	.align	2, 0
	.type	 SetStructPtr,function
	.thumb_func
SetStructPtr:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	ldr	r0, .L6
	add	r2, r2, r0
	strb	r1, [r2]
	lsr	r0, r1, #0x8
	strb	r0, [r2, #0x1]
	lsr	r0, r1, #0x10
	strb	r0, [r2, #0x2]
	lsr	r1, r1, #0x18
	strb	r1, [r2, #0x3]
	bx	lr
.L7:
	.align	2, 0
.L6:
	.word	gTasks+0x8
.Lfe2:
	.size	 SetStructPtr,.Lfe2-SetStructPtr
	.align	2, 0
	.type	 MainCB2,function
	.thumb_func
MainCB2:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 MainCB2,.Lfe3-MainCB2
	.align	2, 0
	.type	 VBlankCB,function
	.thumb_func
VBlankCB:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 VBlankCB,.Lfe4-VBlankCB
	.align	2, 0
	.globl	CB2_BattleDebugMenu
	.type	 CB2_BattleDebugMenu,function
	.thumb_func
CB2_BattleDebugMenu:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L22
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bhi	.L13	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L22+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L23:
	.align	2, 0
.L22:
	.word	gMain
	.word	.L19
	.align	2, 0
	.align	2, 0
.L19:
	.word	.L13
	.word	.L14
	.word	.L15
	.word	.L16
	.word	.L17
	.word	.L18
.L13:
	mov	r0, #0x0
	bl	SetVBlankCallback
	ldr	r1, .L24
	mov	r3, #0x87
	lsl	r3, r3, #0x3
	add	r1, r1, r3
	b	.L20
.L25:
	.align	2, 0
.L24:
	.word	gMain
.L14:
	bl	ResetVramOamAndBgCntRegs
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L26
	mov	r0, #0x0
	mov	r2, #0x2
	bl	InitBgsFromTemplates
	bl	ResetAllBgsCoordinates
	bl	FreeAllWindowBuffers
	bl	DeactivateAllTextPrinters
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	ldr	r1, .L26+0x4
	mov	r6, #0x87
	lsl	r6, r6, #0x3
	add	r1, r1, r6
	b	.L20
.L27:
	.align	2, 0
.L26:
	.word	sBgTemplates
	.word	gMain
.L15:
	bl	ResetPaletteFade
	bl	ScanlineEffect_Stop
	bl	ResetTasks
	bl	ResetSpriteData
	ldr	r1, .L28
	mov	r7, #0x87
	lsl	r7, r7, #0x3
	add	r1, r1, r7
	b	.L20
.L29:
	.align	2, 0
.L28:
	.word	gMain
.L16:
	ldr	r0, .L30
	mov	r1, #0x0
	mov	r2, #0x2
	bl	LoadPalette
	bl	GetOverworldTextboxPalettePtr
	mov	r1, #0xf0
	mov	r2, #0x10
	bl	LoadPalette
	b	.L21
.L31:
	.align	2, 0
.L30:
	.word	sBgColor
.L17:
	ldr	r0, .L32
	mov	r1, #0x0
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x38
	bl	AllocZeroed
	add	r5, r0, #0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	SetStructPtr
	ldr	r0, .L32+0x4
	ldr	r0, [r0]
	ldr	r1, .L32+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x0
	strb	r0, [r5]
	ldr	r0, .L32+0xc
	bl	AddWindow
	strb	r0, [r5, #0x1]
	ldrb	r0, [r5, #0x1]
	bl	PutWindowTilemap
	ldrb	r0, [r5, #0x1]
	ldrb	r1, [r5]
	bl	PrintOnBattlerWindow
	ldr	r0, .L32+0x10
	bl	AddWindow
	strb	r0, [r5, #0x2]
	ldr	r0, .L32+0x14
	add	r2, r0, #0
	ldr	r1, .L32+0x18
	ldmia	r1!, {r3, r6, r7}
	stmia	r2!, {r3, r6, r7}
	ldmia	r1!, {r3, r6, r7}
	stmia	r2!, {r3, r6, r7}
	ldrb	r1, [r5, #0x2]
	strb	r1, [r0, #0x10]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ListMenuInit
	strb	r0, [r5, #0x3]
	strb	r4, [r5, #0x4]
	strb	r4, [r5, #0xa]
	mov	r0, #0xff
	strb	r0, [r5, #0x6]
	ldrb	r0, [r5, #0x2]
	mov	r1, #0x3
	bl	CopyWindowToVram
.L21:
	ldr	r1, .L32+0x1c
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
.L20:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L11
.L33:
	.align	2, 0
.L32:
	.word	Task_DebugMenuFadeIn
	.word	gBattleStruct
	.word	0x277
	.word	sBattlerWindowTemplate
	.word	sMainListWindowTemplate
	.word	gMultiuseListMenuTemplate
	.word	sMainListTemplate
	.word	gMain
.L18:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L34
	bl	SetVBlankCallback
	ldr	r0, .L34+0x4
	bl	SetMainCallback2
.L11:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L35:
	.align	2, 0
.L34:
	.word	VBlankCB
	.word	MainCB2
.Lfe5:
	.size	 CB2_BattleDebugMenu,.Lfe5-CB2_BattleDebugMenu
	.align	2, 0
	.type	 PutMovesPointsText,function
	.thumb_func
PutMovesPointsText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	str	r0, [sp, #0xc]
	mov	r0, #0x50
	bl	Alloc
	add	r6, r0, #0
	ldr	r4, [sp, #0xc]
	add	r4, r4, #0x37
	ldrb	r0, [r4]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r7, #0x0
	ldr	r0, [sp, #0xc]
	add	r0, r0, #0x30
	str	r0, [sp, #0x10]
	str	r4, [sp, #0x18]
	mov	r1, #0x0
	mov	r9, r1
	ldr	r3, [sp, #0xc]
	add	r3, r3, #0x32
	str	r3, [sp, #0x14]
.L40:
	mov	r0, #0x0
	strb	r0, [r6]
	lsl	r1, r7, #0x1
	ldr	r0, [sp, #0x10]
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	ldr	r3, .L48
	add	r1, r1, r3
	ldrh	r0, [r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	ldr	r0, .L48+0x4
	add	r1, r1, r0
	add	r0, r6, #0x1
	bl	StringCopy
	ldr	r0, [sp, #0xc]
	add	r0, r0, #0x37
	ldrb	r0, [r0]
	lsl	r4, r7, #0x4
	sub	r4, r4, r7
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r6, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	mov	r3, #0x0
	mov	r8, r3
	mov	r5, #0x0
	add	r0, r7, #0x1
	mov	sl, r0
.L44:
	ldr	r3, [sp, #0x14]
	add	r1, r3, r5
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L43	@cond_branch
	ldr	r0, .L48+0x8
	ldr	r2, [r0]
	ldrb	r1, [r1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L48+0xc
	add	r0, r0, r1
	mov	r3, #0x2e
	ldrsh	r1, [r0, r3]
	lsl	r1, r1, #0x2
	add	r1, r7, r1
	ldr	r3, [sp, #0x10]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	mov	r0, #0xbf
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, r1
	mov	r1, #0x0
	ldrsb	r1, [r2, r1]
	add	r0, r6, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r1, [sp, #0x18]
	ldrb	r0, [r1]
	mov	r1, #0x36
	mov	r3, r8
	mul	r3, r3, r1
	add	r3, r3, #0x53
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r4, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r6, #0
	bl	AddTextPrinterParameterized
	mov	r3, #0x1
	add	r8, r8, r3
.L43:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	bls	.L44	@cond_branch
	mov	r7, sl
	cmp	r7, #0x3
	bls	.L40	@cond_branch
	ldr	r1, [sp, #0x18]
	ldrb	r0, [r1]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, r6, #0
	bl	Free
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	gBattleMons+0xc
	.word	gMoveNames
	.word	gBattleStruct
	.word	gSprites
.Lfe6:
	.size	 PutMovesPointsText,.Lfe6-PutMovesPointsText
	.align	2, 0
	.type	 Task_ShowAiPoints,function
	.thumb_func
Task_ShowAiPoints:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	bl	GetStructPtr
	add	r4, r0, #0
	add	r5, r4, #0
	add	r5, r5, #0x31
	ldrb	r0, [r5]
	cmp	r0, #0x1
	bne	.LCB533
	b	.L65	@long jump
.LCB533:
	cmp	r0, #0x1
	bgt	.L70	@cond_branch
	cmp	r0, #0
	beq	.L52	@cond_branch
	b	.L51
.L70:
	cmp	r0, #0x2
	bne	.LCB542
	b	.L66	@long jump
.LCB542:
	b	.L51
.L52:
	mov	r0, #0x0
	bl	HideBg
	mov	r0, #0x1
	bl	ShowBg
	ldrb	r1, [r4]
	add	r0, r4, #0
	add	r0, r0, #0x30
	strb	r1, [r0]
	mov	r8, r5
	add	r5, r0, #0
	add	r7, r4, #0
	add	r7, r7, #0x32
	add	r4, r4, #0x36
	mov	r9, r4
	b	.L53
.L55:
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	ldr	r1, .L71
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L53	@cond_branch
	strb	r2, [r5]
.L53:
	ldrb	r0, [r5]
	bl	IsBattlerAIControlled
	add	r2, r0, #0
	cmp	r2, #0
	beq	.L55	@cond_branch
	bl	LoadMonIconPalettes
	mov	r6, #0x0
	ldr	r0, .L71+0x4
	mov	sl, r0
	add	r4, r7, #0
	mov	r7, #0xbe
	lsl	r7, r7, #0xf
.L61:
	ldrb	r1, [r5]
	cmp	r6, r1
	beq	.L62	@cond_branch
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L62	@cond_branch
	ldr	r1, .L71+0x8
	mov	r0, #0x5c
	mov	r3, r6
	mul	r3, r3, r0
	add	r3, r3, r1
	ldrh	r0, [r3]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	asr	r2, r7, #0x10
	mov	r1, #0x0
	str	r1, [sp]
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	ldrb	r1, [r3, #0x1]
	lsr	r1, r1, #0x3
	str	r1, [sp, #0xc]
	ldr	r1, .L71+0xc
	mov	r3, #0x11
	bl	CreateMonIcon
	strb	r0, [r4]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	strh	r6, [r0, #0x2e]
	mov	r0, #0xf0
	lsl	r0, r0, #0xe
	add	r7, r7, r0
	b	.L60
.L72:
	.align	2, 0
.L71:
	.word	gBattlersCount
	.word	gSprites
	.word	gBattleMons
	.word	SpriteCallbackDummy
.L62:
	mov	r0, #0xff
	strb	r0, [r4]
.L60:
	add	r4, r4, #0x1
	add	r6, r6, #0x1
	cmp	r6, #0x3
	bls	.L61	@cond_branch
	ldr	r3, .L73
	ldrb	r1, [r5]
	mov	r0, #0x5c
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r2, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	add	r1, r3, #0
	add	r1, r1, #0x58
	add	r1, r2, r1
	ldr	r1, [r1]
	add	r3, r3, #0x4c
	add	r2, r2, r3
	ldr	r2, [r2]
	mov	r3, #0x27
	str	r3, [sp]
	mov	r3, #0x82
	str	r3, [sp, #0x4]
	mov	r3, #0xf
	str	r3, [sp, #0x8]
	ldr	r3, .L73+0x4
	str	r3, [sp, #0xc]
	mov	r3, #0x1
	bl	CreateMonPicSprite_HandleDeoxys
	mov	r1, r9
	strb	r0, [r1]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L51
.L74:
	.align	2, 0
.L73:
	.word	gBattleMons
	.word	0xffff
.L65:
	mov	r0, #0x1b
	str	r0, [sp]
	mov	r0, #0xe
	str	r0, [sp, #0x4]
	mov	r0, #0xf
	str	r0, [sp, #0x8]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	str	r0, [sp, #0xc]
	add	r0, sp, #0x10
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x4
	bl	CreateWindowTemplate
	ldr	r0, [sp, #0x10]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x14]		@ created by thumb_load_double_from_address
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	add	r0, sp, #0x18
	bl	AddWindow
	add	r1, r4, #0
	add	r1, r1, #0x37
	strb	r0, [r1]
	ldrb	r0, [r1]
	bl	PutWindowTilemap
	add	r0, r4, #0
	bl	PutMovesPointsText
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	b	.L51
.L66:
	ldr	r0, .L75
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L51	@cond_branch
	add	r0, r6, #0
	bl	SwitchToDebugView
	mov	r0, #0x1
	bl	HideBg
	mov	r0, #0x0
	bl	ShowBg
.L51:
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gMain
.Lfe7:
	.size	 Task_ShowAiPoints,.Lfe7-Task_ShowAiPoints
	.align	2, 0
	.type	 SwitchToAiPointsView,function
	.thumb_func
SwitchToAiPointsView:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L78
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r2, .L78+0x4
	str	r2, [r1]
	bl	GetStructPtr
	add	r0, r0, #0x31
	mov	r1, #0x0
	strb	r1, [r0]
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	gTasks
	.word	Task_ShowAiPoints
.Lfe8:
	.size	 SwitchToAiPointsView,.Lfe8-SwitchToAiPointsView
	.align	2, 0
	.type	 SwitchToDebugView,function
	.thumb_func
SwitchToDebugView:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	bl	GetStructPtr
	add	r5, r0, #0
	bl	FreeMonIconPalettes
	mov	r4, #0x0
.L84:
	add	r0, r5, #0
	add	r0, r0, #0x32
	add	r1, r0, r4
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L83	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L87
	add	r0, r0, r1
	bl	FreeAndDestroyMonIconSprite
.L83:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bls	.L84	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x36
	ldrb	r0, [r0]
	bl	FreeAndDestroyMonPicSprite
	add	r0, r5, #0
	add	r0, r0, #0x37
	ldrb	r0, [r0]
	bl	RemoveWindow
	ldr	r1, .L87+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L87+0x8
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gSprites
	.word	gTasks
	.word	Task_DebugMenuProcessInput
.Lfe9:
	.size	 SwitchToDebugView,.Lfe9-SwitchToDebugView
	.align	2, 0
	.type	 Task_DebugMenuFadeIn,function
	.thumb_func
Task_DebugMenuFadeIn:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L91
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L90	@cond_branch
	ldr	r0, .L91+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L91+0x8
	str	r0, [r1]
.L90:
	pop	{r0}
	bx	r0
.L92:
	.align	2, 0
.L91:
	.word	gPaletteFade
	.word	gTasks
	.word	Task_DebugMenuProcessInput
.Lfe10:
	.size	 Task_DebugMenuFadeIn,.Lfe10-Task_DebugMenuFadeIn
	.align	2, 0
	.type	 Task_DebugMenuProcessInput,function
	.thumb_func
Task_DebugMenuProcessInput:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	add	r0, r6, #0
	bl	GetStructPtr
	add	r4, r0, #0
	ldr	r0, .L124
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L94	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r5, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L124+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L124+0x8
	str	r1, [r0]
	b	.L93
.L125:
	.align	2, 0
.L124:
	.word	gMain
	.word	gTasks
	.word	Task_DebugMenuFadeOut
.L94:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L95	@cond_branch
	ldrb	r1, [r4]
	add	r0, r1, #0x1
	strb	r0, [r4]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L126
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L96	@cond_branch
	strb	r5, [r4]
.L96:
	add	r0, r4, #0
	bl	UpdateWindowsOnChangedBattler
	b	.L97
.L127:
	.align	2, 0
.L126:
	.word	gBattlersCount
.L95:
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L97	@cond_branch
	ldrb	r0, [r4]
	sub	r0, r0, #0x1
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L99	@cond_branch
	ldr	r0, .L128
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	strb	r0, [r4]
.L99:
	add	r0, r4, #0
	bl	UpdateWindowsOnChangedBattler
.L97:
	ldrb	r0, [r4, #0xa]
	cmp	r0, #0
	bne	.L100	@cond_branch
	ldrb	r0, [r4, #0x3]
	bl	ListMenu_ProcessInput
	add	r5, r0, #0
	add	r0, r5, #0x2
	cmp	r0, #0x1
	bhi	.LCB1066
	b	.L93	@long jump
.LCB1066:
	cmp	r5, #0xd
	ble	.LCB1068
	b	.L93	@long jump
.LCB1068:
	cmp	r5, #0xc
	bne	.L102	@cond_branch
	ldr	r0, .L128+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L102	@cond_branch
	add	r0, r6, #0
	bl	SwitchToAiPointsView
	b	.L93
.L129:
	.align	2, 0
.L128:
	.word	gBattlersCount
	.word	gMain
.L102:
	strb	r5, [r4, #0x4]
	add	r0, r4, #0
	bl	CreateSecondaryListMenu
	add	r0, r4, #0
	bl	PrintSecondaryEntries
	b	.L123
.L100:
	cmp	r0, #0x1
	bne	.L104	@cond_branch
	ldrb	r0, [r4, #0x6]
	bl	ListMenu_ProcessInput
	add	r5, r0, #0
	mov	r0, #0x2
	neg	r0, r0
	cmp	r5, r0
	bne	.L105	@cond_branch
	ldrb	r0, [r4, #0x6]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	ldrb	r0, [r4, #0x5]
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4, #0x5]
	bl	RemoveWindow
	mov	r0, #0x0
	strb	r0, [r4, #0xa]
	mov	r0, #0xff
	strb	r0, [r4, #0x6]
	b	.L93
.L105:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	bne	.LCB1138
	b	.L93	@long jump
.LCB1138:
	strb	r5, [r4, #0x7]
	ldr	r0, .L130
	bl	AddWindow
	strb	r0, [r4, #0x9]
	ldrb	r0, [r4, #0x9]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x9]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, r4, #0
	bl	SetUpModifyArrows
	add	r0, r4, #0
	bl	PrintDigitChars
	mov	r0, #0x2
	strb	r0, [r4, #0xa]
	b	.L93
.L131:
	.align	2, 0
.L130:
	.word	sModifyWindowTemplate
.L104:
	cmp	r0, #0x2
	beq	.LCB1169
	b	.L93	@long jump
.LCB1169:
	ldr	r0, .L132
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L110	@cond_branch
	ldrb	r0, [r4, #0x9]
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4, #0x9]
	bl	RemoveWindow
	add	r0, r4, #0
	bl	DestroyModifyArrows
.L123:
	mov	r0, #0x1
	strb	r0, [r4, #0xa]
	b	.L93
.L133:
	.align	2, 0
.L132:
	.word	gMain
.L110:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L112	@cond_branch
	ldrb	r1, [r4, #0x18]
	ldrb	r0, [r4, #0x19]
	sub	r0, r0, #0x1
	cmp	r1, r0
	beq	.L93	@cond_branch
	add	r0, r1, #0x1
	strb	r0, [r4, #0x18]
	ldr	r2, .L134
	ldrb	r1, [r4, #0xc]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	add	r1, r1, #0x6
	strh	r1, [r0, #0x24]
	ldrb	r1, [r4, #0xd]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	add	r1, r1, #0x6
	strh	r1, [r0, #0x24]
	b	.L93
.L135:
	.align	2, 0
.L134:
	.word	gSprites
.L112:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L115	@cond_branch
	ldrb	r0, [r4, #0x18]
	cmp	r0, #0
	beq	.L93	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x18]
	ldr	r2, .L136
	ldrb	r1, [r4, #0xc]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	sub	r1, r1, #0x6
	strh	r1, [r0, #0x24]
	ldrb	r1, [r4, #0xd]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	sub	r1, r1, #0x6
	strh	r1, [r0, #0x24]
	b	.L93
.L137:
	.align	2, 0
.L136:
	.word	gSprites
.L115:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L118	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0xc
	mov	r1, #0x1
	bl	TryMoveDigit
	cmp	r0, #0
	beq	.L93	@cond_branch
	add	r0, r4, #0
	bl	PrintDigitChars
	add	r0, r4, #0
	bl	UpdateBattlerValue
	add	r0, r4, #0
	bl	PrintSecondaryEntries
	b	.L93
.L118:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L93	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0xc
	mov	r1, #0x0
	bl	TryMoveDigit
	cmp	r0, #0
	beq	.L93	@cond_branch
	add	r0, r4, #0
	bl	PrintDigitChars
	add	r0, r4, #0
	bl	UpdateBattlerValue
	add	r0, r4, #0
	bl	PrintSecondaryEntries
.L93:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 Task_DebugMenuProcessInput,.Lfe11-Task_DebugMenuProcessInput
	.align	2, 0
	.type	 Task_DebugMenuFadeOut,function
	.thumb_func
Task_DebugMenuFadeOut:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r5, r2, #0
	ldr	r0, .L141
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L139	@cond_branch
	add	r0, r2, #0
	bl	GetStructPtr
	add	r4, r0, #0
	ldrb	r0, [r4, #0x3]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	ldrb	r0, [r4, #0x6]
	cmp	r0, #0xff
	beq	.L140	@cond_branch
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
.L140:
	bl	FreeAllWindowBuffers
	add	r0, r4, #0
	bl	UpdateMonData
	ldr	r0, .L141+0x4
	ldr	r0, [r0]
	ldrb	r1, [r4]
	ldr	r2, .L141+0x8
	add	r0, r0, r2
	strb	r1, [r0]
	add	r0, r4, #0
	bl	Free
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r0, .L141+0xc
	bl	SetMainCallback2
.L139:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L142:
	.align	2, 0
.L141:
	.word	gPaletteFade
	.word	gBattleStruct
	.word	0x277
	.word	ReshowBattleScreenAfterMenu
.Lfe12:
	.size	 Task_DebugMenuFadeOut,.Lfe12-Task_DebugMenuFadeOut
	.align	2, 0
	.type	 PrintOnBattlerWindow,function
	.thumb_func
PrintOnBattlerWindow:
	push	{r4, r5, lr}
	add	sp, sp, #-0x20
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, sp, #0xc
	add	r0, r1, #0
	add	r0, r0, #0xa1
	mov	r5, #0x0
	strb	r0, [r2]
	add	r0, r2, #0
	strb	r5, [r0, #0x1]
	mov	r0, #0xae
	strb	r0, [r2, #0x2]
	add	r0, r2, #0
	strb	r5, [r0, #0x3]
	add	r0, sp, #0x10
	mov	r2, #0x5c
	mul	r1, r1, r2
	ldr	r2, .L144
	add	r1, r1, r2
	bl	StringCopy
	add	r0, r4, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	str	r5, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, sp, #0xc
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0x20
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L145:
	.align	2, 0
.L144:
	.word	gBattleMons+0x32
.Lfe13:
	.size	 PrintOnBattlerWindow,.Lfe13-PrintOnBattlerWindow
	.align	2, 0
	.type	 UpdateWindowsOnChangedBattler,function
	.thumb_func
UpdateWindowsOnChangedBattler:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0x1]
	ldrb	r1, [r4]
	bl	PrintOnBattlerWindow
	ldrb	r0, [r4, #0x6]
	cmp	r0, #0xff
	beq	.L147	@cond_branch
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	ldrb	r0, [r4, #0x5]
	bl	RemoveWindow
	add	r0, r4, #0
	bl	CreateSecondaryListMenu
	mov	r0, #0x0
	strb	r0, [r4, #0x7]
	add	r0, r4, #0
	bl	PrintSecondaryEntries
.L147:
	ldrb	r0, [r4, #0xa]
	cmp	r0, #0x2
	bne	.L148	@cond_branch
	add	r0, r4, #0
	bl	DestroyModifyArrows
	add	r0, r4, #0
	bl	SetUpModifyArrows
	add	r0, r4, #0
	bl	PrintDigitChars
.L148:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 UpdateWindowsOnChangedBattler,.Lfe14-UpdateWindowsOnChangedBattler
	.align	2, 0
	.type	 CreateSecondaryListMenu,function
	.thumb_func
CreateSecondaryListMenu:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x20
	add	r4, r0, #0
	mov	r5, #0x1
	ldr	r0, .L169
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	mov	r1, sp
	ldr	r0, .L169+0x4
	ldmia	r0!, {r2, r3, r6}
	stmia	r1!, {r2, r3, r6}
	ldmia	r0!, {r2, r3, r6}
	stmia	r1!, {r2, r3, r6}
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0xd
	bls	.LCB1540
	b	.L150	@long jump
.LCB1540:
	lsl	r0, r0, #0x2
	ldr	r1, .L169+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L170:
	.align	2, 0
.L169:
	.word	sSecondaryListWindowTemplate
	.word	sSecondaryListTemplate
	.word	.L165
	.align	2, 0
	.align	2, 0
.L165:
	.word	.L154
	.word	.L151
	.word	.L152
	.word	.L155
	.word	.L168
	.word	.L156
	.word	.L157
	.word	.L158
	.word	.L159
	.word	.L160
	.word	.L163
	.word	.L161
	.word	.L149
	.word	.L162
.L151:
	mov	r5, #0x1
	b	.L150
.L152:
	mov	r5, #0x2
	b	.L150
.L154:
	mov	r5, #0x5
	b	.L150
.L155:
	mov	r5, #0x4
	b	.L150
.L156:
	ldr	r0, .L171
	str	r0, [sp]
	mov	r5, #0x7
	b	.L150
.L172:
	.align	2, 0
.L171:
	.word	sStatsListItems
.L157:
	mov	r5, #0x8
	b	.L150
.L158:
	ldr	r0, .L173
	str	r0, [sp]
	mov	r5, #0x7
	ldr	r0, .L173+0x4
	str	r0, [r4, #0x28]
	b	.L150
.L174:
	.align	2, 0
.L173:
	.word	sStatus1ListItems
	.word	sStatus1Bitfield
.L159:
	ldr	r0, .L175
	str	r0, [sp]
	mov	r5, #0x11
	ldr	r0, .L175+0x4
	str	r0, [r4, #0x28]
	ldr	r1, .L175+0x8
	add	r2, sp, #0x18
	ldr	r0, [r2, #0x4]
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	str	r0, [r2, #0x4]
	b	.L150
.L176:
	.align	2, 0
.L175:
	.word	sStatus2ListItems
	.word	sStatus2Bitfield
	.word	-0x100
.L160:
	ldr	r0, .L177
	str	r0, [sp]
	mov	r5, #0xb
	ldr	r0, .L177+0x4
	str	r0, [r4, #0x28]
	b	.L150
.L178:
	.align	2, 0
.L177:
	.word	sStatus3ListItems
	.word	sStatus3Bitfield
.L161:
	ldr	r0, .L179
	str	r0, [sp]
	mov	r5, #0x9
	ldr	r0, .L179+0x4
	str	r0, [r4, #0x28]
	b	.L150
.L180:
	.align	2, 0
.L179:
	.word	sAIListItems
	.word	sAIBitfield
.L162:
	ldr	r0, .L181
	str	r0, [sp]
.L168:
	mov	r5, #0x3
	b	.L150
.L182:
	.align	2, 0
.L181:
	.word	sVariousListItems
.L163:
	ldr	r0, .L183
	str	r0, [sp]
	mov	r5, #0xb
.L150:
	strb	r5, [r4, #0x8]
	add	r0, sp, #0x18
	ldrb	r1, [r0, #0x4]
	mov	r2, r5
	mul	r2, r2, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L183+0x4
	ldr	r1, [r0, #0x4]
	and	r1, r1, r3
	orr	r1, r1, r2
	str	r1, [r0, #0x4]
	bl	AddWindow
	strb	r0, [r4, #0x5]
	mov	r0, sp
	strh	r5, [r0, #0xc]
	strh	r5, [r0, #0xe]
	cmp	r5, #0x7
	bls	.L167	@cond_branch
	ldr	r0, .L183+0x8
	ldrb	r1, [r4, #0x4]
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L167	@cond_branch
	mov	r1, sp
	mov	r0, #0x7
	strh	r0, [r1, #0xe]
.L167:
	mov	r1, sp
	ldrb	r0, [r4, #0x5]
	strb	r0, [r1, #0x10]
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ListMenuInit
	strb	r0, [r4, #0x6]
	ldrb	r0, [r4, #0x5]
	mov	r1, #0x3
	bl	CopyWindowToVram
.L149:
	add	sp, sp, #0x20
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L184:
	.align	2, 0
.L183:
	.word	sSideStatusListItems
	.word	-0x100
	.word	sHasChangeableEntries
.Lfe15:
	.size	 CreateSecondaryListMenu,.Lfe15-CreateSecondaryListMenu
	.align	2, 0
	.type	 PadString,function
	.thumb_func
PadString:
	push	{r4, lr}
	add	r2, r0, #0
	add	r4, r1, #0
	mov	r3, #0x0
	b	.L198
.L189:
	add	r1, r4, r3
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x10
	bhi	.L197	@cond_branch
.L198:
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L189	@cond_branch
	cmp	r3, #0x10
	bhi	.L197	@cond_branch
	mov	r1, #0x0
.L195:
	add	r0, r4, r3
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x10
	bls	.L195	@cond_branch
.L197:
	add	r1, r4, r3
	mov	r0, #0xff
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 PadString,.Lfe16-PadString
	.section .rodata
	.type	 sTextAll,object
sTextAll:
	.byte	0xbb
	.byte	0xe0
	.byte	0xe0
	.byte	0xff
	.size	 sTextAll,4
.text
	.align	2, 0
	.type	 PrintSecondaryEntries,function
	.thumb_func
PrintSecondaryEntries:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	add	r7, r0, #0
	ldr	r0, .L230
	ldrb	r1, [r7, #0x4]
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.LCB1812
	b	.L199	@long jump
.LCB1812:
	ldr	r4, .L230+0x4
	ldrb	r0, [r4, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	mov	r1, #0x1
	bl	GetFontAttribute
	ldrb	r1, [r4, #0x16]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1d
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	add	r1, sp, #0x14
	ldrb	r0, [r7, #0x5]
	mov	r2, #0x0
	strb	r0, [r1, #0x4]
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	strb	r2, [r1, #0xa]
	strb	r0, [r1, #0xb]
	mov	r0, #0x20
	strb	r0, [r1, #0xc]
	mov	r0, #0x31
	strb	r0, [r1, #0xd]
	ldrb	r0, [r4, #0x12]
	strb	r0, [r1, #0x6]
	strb	r0, [r1, #0x8]
	mov	r0, sp
	str	r0, [sp, #0x14]
	ldrb	r0, [r7, #0x4]
	mov	r9, r1
	cmp	r0, #0x6
	bls	.LCB1867
	b	.L199	@long jump
.LCB1867:
	lsl	r0, r0, #0x2
	ldr	r1, .L230+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L231:
	.align	2, 0
.L230:
	.word	sHasChangeableEntries
	.word	sSecondaryListTemplate
	.word	.L226
	.align	2, 0
	.align	2, 0
.L226:
	.word	.L203
	.word	.L210
	.word	.L211
	.word	.L203
	.word	.L212
	.word	.L199
	.word	.L218
.L203:
	mov	r5, #0x0
	mov	r4, r9
	mov	r8, r5
.L207:
	lsl	r1, r5, #0x1
	ldrb	r2, [r7]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	ldr	r2, .L232
	add	r1, r1, r2
	ldrh	r1, [r1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	ldr	r1, .L232+0x4
	add	r0, r0, r1
	mov	r1, sp
	bl	PadString
	ldr	r0, .L232+0x8
	ldrb	r0, [r0, #0x14]
	lsl	r6, r0, #0x1c
	lsr	r0, r6, #0x1c
	add	r0, r0, r8
	strb	r0, [r4, #0x7]
	mov	r3, #0xff
	add	r1, sp, #0x24
	strb	r3, [r1]
	strb	r0, [r4, #0x9]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r8, r8, sl
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L207	@cond_branch
	ldrb	r0, [r7, #0x4]
	cmp	r0, #0
	beq	.LCB1938
	b	.L199	@long jump
.LCB1938:
	ldr	r0, .L232+0xc
	mov	r1, sp
	bl	PadString
	mov	r1, sl
	mul	r1, r1, r5
	lsr	r0, r6, #0x1c
	add	r0, r0, r1
	mov	r2, r9
	strb	r0, [r2, #0x7]
	add	r3, sp, #0x24
	ldrb	r3, [r3]
	and	r0, r0, r3
	strb	r0, [r2, #0x9]
	b	.L228
.L233:
	.align	2, 0
.L232:
	.word	gBattleMons+0xc
	.word	gMoveNames
	.word	sSecondaryListTemplate
	.word	sTextAll
.L210:
	ldr	r2, .L234
	ldrb	r1, [r7]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	mov	r0, #0xd
	mul	r0, r0, r1
	ldr	r1, .L234+0x4
	add	r0, r0, r1
	mov	r1, sp
	bl	PadString
	ldr	r0, .L234+0x8
	ldrb	r0, [r0, #0x14]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	mov	r1, r9
	strb	r0, [r1, #0x7]
	strb	r0, [r1, #0x9]
	b	.L228
.L235:
	.align	2, 0
.L234:
	.word	gBattleMons
	.word	gAbilityNames
	.word	sSecondaryListTemplate
.L211:
	ldr	r2, .L236
	ldrb	r1, [r7]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x30]
	bl	ItemId_GetName
	mov	r1, sp
	bl	PadString
	ldr	r0, .L236+0x4
	ldrb	r4, [r0, #0x14]
	lsl	r4, r4, #0x1c
	lsr	r0, r4, #0x1c
	mov	r5, #0x0
	add	r4, r0, #0
	mov	r2, r9
	strb	r0, [r2, #0x7]
	strb	r0, [r2, #0x9]
	mov	r0, r9
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	ldr	r0, .L236+0x8
	mov	r1, sp
	bl	PadString
	mov	r3, r9
	strb	r5, [r3, #0x5]
	add	r4, r4, sl
	strb	r4, [r3, #0x7]
	strb	r4, [r3, #0x9]
.L228:
	mov	r0, r9
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	b	.L199
.L237:
	.align	2, 0
.L236:
	.word	gBattleMons
	.word	sSecondaryListTemplate
	.word	sText_EffectOverride
.L212:
	mov	r5, #0x0
	mov	r4, r9
	mov	r6, #0x0
.L216:
	ldrb	r1, [r7]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r1, .L238
	add	r0, r0, r1
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	ldr	r1, .L238+0x4
	add	r0, r0, r1
	mov	r1, sp
	bl	PadString
	ldr	r0, .L238+0x8
	ldrb	r0, [r0, #0x14]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	add	r0, r0, r6
	strb	r0, [r4, #0x7]
	strb	r0, [r4, #0x9]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r6, r6, sl
	add	r5, r5, #0x1
	cmp	r5, #0x2
	ble	.L216	@cond_branch
	b	.L199
.L239:
	.align	2, 0
.L238:
	.word	gBattleMons+0x22
	.word	gTypeNames
	.word	sSecondaryListTemplate
.L218:
	mov	r5, #0x0
	mov	r8, r9
.L222:
	ldr	r1, .L240
	add	r4, r5, #0x1
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, sp
	bl	StringCopy
	add	r2, r0, #0
	mov	r0, #0x0
	strb	r0, [r2]
	ldrb	r0, [r7]
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r0, r0, #0x1
	add	r0, r5, r0
	ldr	r3, .L240+0x4
	add	r0, r0, r3
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	add	r6, r4, #0
	cmp	r0, #0x5
	ble	.L223	@cond_branch
	mov	r0, #0x2e
	strb	r0, [r2, #0x1]
	ldrb	r0, [r7]
	mul	r0, r0, r1
	add	r0, r0, #0x1
	add	r0, r5, r0
	add	r0, r0, r3
	ldrb	r0, [r0]
	sub	r0, r0, #0x65
	b	.L229
.L241:
	.align	2, 0
.L240:
	.word	gStatNamesTable
	.word	gBattleMons+0x18
.L223:
	mov	r0, #0xae
	strb	r0, [r2, #0x1]
	ldrb	r0, [r7]
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r0, r0, #0x1
	add	r0, r5, r0
	ldr	r3, .L242
	add	r0, r0, r3
	ldrb	r1, [r0]
	mov	r3, #0x59
	neg	r3, r3
	add	r0, r3, #0
	sub	r0, r0, r1
.L229:
	strb	r0, [r2, #0x2]
	mov	r0, #0xff
	strb	r0, [r2, #0x3]
	mov	r0, sp
	mov	r1, sp
	bl	PadString
	mov	r1, sl
	mul	r1, r1, r5
	ldr	r0, .L242+0x4
	ldrb	r0, [r0, #0x14]
	lsl	r4, r0, #0x1c
	lsr	r0, r4, #0x1c
	add	r0, r0, r1
	mov	r1, r8
	strb	r0, [r1, #0x7]
	mov	r2, #0xff
	and	r0, r0, r2
	strb	r0, [r1, #0x9]
	mov	r0, r8
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r5, r6, #0
	cmp	r6, #0x6
	ble	.L222	@cond_branch
	ldr	r0, .L242+0x8
	mov	r1, sp
	bl	PadString
	mov	r1, sl
	mul	r1, r1, r6
	lsr	r0, r4, #0x1c
	add	r0, r0, r1
	mov	r3, r9
	strb	r0, [r3, #0x7]
	strb	r0, [r3, #0x9]
	mov	r0, r9
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
.L199:
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L243:
	.align	2, 0
.L242:
	.word	gBattleMons+0x18
	.word	sSecondaryListTemplate
	.word	sTextAll
.Lfe17:
	.size	 PrintSecondaryEntries,.Lfe17-PrintSecondaryEntries
	.align	2, 0
	.type	 DestroyModifyArrows,function
	.thumb_func
DestroyModifyArrows:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L247
	ldrh	r0, [r0, #0x4]
	bl	FreeSpritePaletteByTag
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0xff
	beq	.L245	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L247+0x4
	add	r0, r0, r1
	bl	DestroySprite
.L245:
	ldrb	r0, [r4, #0xd]
	cmp	r0, #0xff
	beq	.L246	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L247+0x4
	add	r0, r0, r1
	bl	DestroySprite
.L246:
	pop	{r4}
	pop	{r0}
	bx	r0
.L248:
	.align	2, 0
.L247:
	.word	gSpritePalette_RtcArrow
	.word	gSprites
.Lfe18:
	.size	 DestroyModifyArrows,.Lfe18-DestroyModifyArrows
	.align	2, 0
	.type	 PrintDigitChars,function
	.thumb_func
PrintDigitChars:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	add	r3, r0, #0
	mov	r2, #0x0
	ldrb	r0, [r3, #0x19]
	cmp	r2, r0
	bge	.L251	@cond_branch
	add	r5, r3, #0
	add	r5, r5, #0x1a
	add	r4, r0, #0
.L253:
	mov	r0, sp
	add	r0, r0, r2
	add	r0, r0, #0xc
	add	r1, r5, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L253	@cond_branch
.L251:
	mov	r1, sp
	add	r1, r1, r2
	add	r1, r1, #0xc
	mov	r0, #0xff
	strb	r0, [r1]
	ldrb	r0, [r3, #0x9]
	mov	r1, #0x0
	str	r1, [sp]
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, sp, #0xc
	mov	r3, #0x3
	bl	AddTextPrinterParameterized
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 PrintDigitChars,.Lfe19-PrintDigitChars
	.align	2, 0
	.type	 GetBitfieldToAndValue,function
	.thumb_func
GetBitfieldToAndValue:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r3, r1, #0
	mov	r4, #0x0
	mov	r2, #0x0
	cmp	r4, r3
	bcs	.L257	@cond_branch
	mov	r6, #0x1
.L259:
	add	r1, r5, r2
	add	r0, r6, #0
	lsl	r0, r0, r1
	orr	r4, r4, r0
	add	r2, r2, #0x1
	cmp	r2, r3
	bcc	.L259	@cond_branch
.L257:
	add	r0, r4, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 GetBitfieldToAndValue,.Lfe20-GetBitfieldToAndValue
	.align	2, 0
	.type	 GetBitfieldValue,function
	.thumb_func
GetBitfieldValue:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r1, r2, #0
	add	r0, r5, #0
	bl	GetBitfieldToAndValue
	and	r4, r4, r0
	lsr	r4, r4, r5
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 GetBitfieldValue,.Lfe21-GetBitfieldValue
	.align	2, 0
	.type	 UpdateBattlerValue,function
	.thumb_func
UpdateBattlerValue:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xd
	bls	.LCB2417
	b	.L263	@long jump
.LCB2417:
	lsl	r0, r0, #0x2
	ldr	r1, .L296
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L297:
	.align	2, 0
.L296:
	.word	.L291
	.align	2, 0
	.align	2, 0
.L291:
	.word	.L264
	.word	.L293
	.word	.L274
	.word	.L263
	.word	.L263
	.word	.L275
	.word	.L276
	.word	.L278
	.word	.L279
	.word	.L282
	.word	.L267
	.word	.L265
	.word	.L287
	.word	.L268
.L264:
.L265:
	ldr	r1, [r4, #0x20]
	ldr	r0, [r4, #0x14]
	strb	r0, [r1]
	b	.L263
.L267:
	ldr	r1, [r4, #0x20]
	ldr	r0, [r4, #0x14]
	strh	r0, [r1]
	strh	r0, [r1, #0x2]
	strh	r0, [r1, #0x4]
	strh	r0, [r1, #0x6]
	b	.L263
.L268:
	mov	r2, #0x0
	mov	r5, #0x5c
	ldr	r3, .L298
.L272:
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r2, r0
	add	r0, r0, r3
	ldr	r1, [r4, #0x14]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x7
	bls	.L272	@cond_branch
	b	.L263
.L299:
	.align	2, 0
.L298:
	.word	gBattleMons+0x18
.L274:
	ldr	r1, [r4, #0x20]
	ldr	r0, [r4, #0x14]
	str	r0, [r1]
	b	.L263
.L275:
	ldrb	r1, [r4, #0x7]
	ldr	r0, [r4, #0x28]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	ldrb	r1, [r1]
	bl	GetBitfieldToAndValue
	ldr	r3, [r4, #0x20]
	ldr	r2, [r3]
	bic	r2, r2, r0
	str	r2, [r3]
	ldrb	r1, [r4, #0x7]
	ldr	r0, [r4, #0x28]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r0, [r4, #0x14]
	ldrb	r1, [r1, #0x1]
	lsl	r0, r0, r1
	orr	r2, r2, r0
	str	r2, [r3]
	b	.L263
.L276:
	ldr	r0, [r4, #0x14]
	neg	r2, r0
	orr	r2, r2, r0
	lsr	r2, r2, #0x1f
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetSideStatusValue
	b	.L294
.L278:
	ldr	r3, [r4, #0x20]
	mov	r0, #0x1
	ldrb	r1, [r4, #0x14]
	and	r1, r1, r0
	lsl	r1, r1, #0x4
	ldrb	r2, [r3]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L263
.L279:
	ldr	r1, [r4, #0x20]
	ldr	r0, [r4, #0x14]
	strb	r0, [r1]
	ldr	r0, [r4, #0x20]
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L280	@cond_branch
	ldr	r1, .L300
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r0, [r2]
	ldr	r1, .L300+0x4
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L300+0x8
	ldr	r0, [r0]
	ldrb	r1, [r4]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	b	.L263
.L301:
	.align	2, 0
.L300:
	.word	gBattleMons
	.word	-0x1000001
	.word	gBattleSpritesDataPtr
.L280:
	ldr	r1, .L302
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L302+0x4
	ldr	r0, [r0]
	ldrb	r1, [r4]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	b	.L263
.L303:
	.align	2, 0
.L302:
	.word	gBattleMons
	.word	gBattleSpritesDataPtr
.L282:
	ldr	r0, [r4, #0x14]
	cmp	r0, #0
	beq	.L283	@cond_branch
	ldrb	r0, [r4]
	mov	r5, #0x1
	eor	r0, r0, r5
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L284	@cond_branch
	ldr	r2, .L304
	ldrb	r0, [r4]
	mov	r1, #0x5c
	mov	r3, r0
	mul	r3, r3, r1
	add	r2, r2, #0x54
	add	r3, r3, r2
	ldr	r1, .L304+0x4
	eor	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	b	.L295
.L305:
	.align	2, 0
.L304:
	.word	gBattleMons
	.word	gBitTable
.L284:
	ldr	r2, .L306
	ldrb	r0, [r4]
	mov	r1, #0x5c
	mov	r3, r0
	mul	r3, r3, r1
	add	r2, r2, #0x54
	add	r3, r3, r2
	ldr	r2, .L306+0x4
	mov	r1, #0x3
	eor	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
.L295:
	ldr	r1, [r0]
	lsl	r1, r1, #0x10
	ldr	r0, [r3]
	orr	r0, r0, r1
	str	r0, [r3]
	b	.L263
.L307:
	.align	2, 0
.L306:
	.word	gBattleMons
	.word	gBitTable
.L283:
	ldr	r1, .L308
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r0, [r2]
	ldr	r1, .L308+0x4
	and	r0, r0, r1
	str	r0, [r2]
	b	.L263
.L309:
	.align	2, 0
.L308:
	.word	gBattleMons
	.word	-0xf0001
.L287:
	ldrb	r0, [r4, #0x7]
	cmp	r0, #0
	bne	.L288	@cond_branch
.L293:
	ldr	r1, [r4, #0x20]
	ldr	r0, [r4, #0x14]
	strh	r0, [r1]
	b	.L263
.L288:
	cmp	r0, #0x1
	bne	.L263	@cond_branch
	ldr	r0, .L310
	ldr	r0, [r0]
	ldr	r1, .L310+0x4
	add	r0, r0, r1
	ldrb	r1, [r4]
	add	r0, r0, r1
.L294:
	ldr	r1, [r4, #0x14]
	strb	r1, [r0]
.L263:
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r4, [r4]
	add	r0, r0, r4
	mov	r1, #0x1
	strb	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L311:
	.align	2, 0
.L310:
	.word	gBattleStruct
	.word	0x2c5
.Lfe22:
	.size	 UpdateBattlerValue,.Lfe22-UpdateBattlerValue
	.align	2, 0
	.type	 CharDigitsToValue,function
	.thumb_func
CharDigitsToValue:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r3, #0x0
	mov	r4, #0x0
	mov	r2, #0x0
.L316:
	mov	r0, sp
	add	r1, r0, r2
	add	r0, r5, r2
	ldrb	r0, [r0]
	add	r0, r0, #0x5f
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L316	@cond_branch
	cmp	r6, #0x3
	bls	.L318	@cond_branch
	add	r1, r3, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r2, sp
	add	r0, r2, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x5
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r4, r4, r0
.L318:
	cmp	r6, #0x2
	bls	.L319	@cond_branch
	add	r1, r3, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r2, sp
	add	r0, r2, r1
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	add	r4, r4, r0
.L319:
	cmp	r6, #0x1
	bls	.L320	@cond_branch
	add	r1, r3, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r2, sp
	add	r0, r2, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r4, r4, r0
.L320:
	cmp	r6, #0
	beq	.L321	@cond_branch
	mov	r1, sp
	add	r0, r1, r3
	ldrb	r0, [r0]
	add	r4, r4, r0
.L321:
	add	r0, r4, #0
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 CharDigitsToValue,.Lfe23-CharDigitsToValue
	.align	2, 0
	.type	 ValueToCharDigits,function
	.thumb_func
ValueToCharDigits:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r0
	add	r6, r1, #0
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	mov	r9, r5
	mov	r7, #0x0
	cmp	r5, #0x3
	bls	.L323	@cond_branch
	mov	r7, #0x1
	mov	r4, sp
	mov	r1, #0xfa
	lsl	r1, r1, #0x2
	add	r0, r6, #0
	bl	__udivsi3
	strb	r0, [r4]
.L323:
	cmp	r5, #0x2
	bls	.L324	@cond_branch
	add	r1, r7, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, sp
	add	r4, r0, r1
	mov	r1, #0xfa
	lsl	r1, r1, #0x2
	add	r0, r6, #0
	bl	__umodsi3
	mov	r1, #0x64
	bl	__udivsi3
	strb	r0, [r4]
.L324:
	cmp	r5, #0x1
	bls	.L325	@cond_branch
	add	r1, r7, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r3, sp
	add	r4, r3, r1
	add	r0, r6, #0
	mov	r1, #0x64
	bl	__umodsi3
	mov	r1, #0xa
	bl	__udivsi3
	strb	r0, [r4]
.L325:
	mov	r0, r9
	cmp	r0, #0
	beq	.L326	@cond_branch
	mov	r3, sp
	add	r4, r3, r7
	add	r0, r6, #0
	mov	r1, #0xa
	bl	__umodsi3
	strb	r0, [r4]
.L326:
	mov	r2, #0x0
.L330:
	mov	r0, r8
	add	r1, r0, r2
	mov	r3, sp
	add	r0, r3, r2
	ldrb	r0, [r0]
	add	r0, r0, #0xa1
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L330	@cond_branch
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 ValueToCharDigits,.Lfe24-ValueToCharDigits
	.align	2, 0
	.type	 GetSideStatusValue,function
	.thumb_func
GetSideStatusValue:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	add	r6, r2, #0
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L392
	add	r3, r0, r1
	ldrb	r0, [r5, #0x7]
	cmp	r0, #0xa
	bls	.LCB2972
	b	.L378	@long jump
.LCB2972:
	lsl	r0, r0, #0x2
	ldr	r1, .L392+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L393:
	.align	2, 0
.L392:
	.word	gSideTimers
	.word	.L379
	.align	2, 0
	.align	2, 0
.L379:
	.word	.L334
	.word	.L338
	.word	.L342
	.word	.L346
	.word	.L350
	.word	.L354
	.word	.L358
	.word	.L362
	.word	.L366
	.word	.L370
	.word	.L374
.L334:
	cmp	r4, #0
	beq	.L335	@cond_branch
	cmp	r6, #0
	beq	.L336	@cond_branch
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	b	.L381
.L336:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x2
	neg	r2, r2
	and	r1, r1, r2
.L381:
	str	r1, [r0]
	ldrb	r0, [r5]
	strb	r0, [r3, #0x1]
.L335:
	add	r0, r3, #0
	b	.L380
.L338:
	cmp	r4, #0
	beq	.L339	@cond_branch
	cmp	r6, #0
	beq	.L340	@cond_branch
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	b	.L382
.L340:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x3
	neg	r2, r2
	and	r1, r1, r2
.L382:
	str	r1, [r0]
	ldrb	r0, [r5]
	strb	r0, [r3, #0x3]
.L339:
	add	r0, r3, #0x2
	b	.L380
.L342:
	cmp	r4, #0
	beq	.L343	@cond_branch
	cmp	r6, #0
	beq	.L344	@cond_branch
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x10
	orr	r1, r1, r2
	b	.L383
.L344:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x11
	neg	r2, r2
	and	r1, r1, r2
.L383:
	str	r1, [r0]
.L343:
	add	r0, r3, #0
	add	r0, r0, #0xa
	b	.L380
.L346:
	cmp	r4, #0
	beq	.L347	@cond_branch
	cmp	r6, #0
	beq	.L348	@cond_branch
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	b	.L384
.L348:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x21
	neg	r2, r2
	and	r1, r1, r2
.L384:
	str	r1, [r0]
	ldrb	r0, [r5]
	strb	r0, [r3, #0x7]
.L347:
	add	r0, r3, #0x6
	b	.L380
.L350:
	cmp	r4, #0
	beq	.L351	@cond_branch
	cmp	r6, #0
	beq	.L352	@cond_branch
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	orr	r1, r1, r2
	b	.L385
.L352:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	ldr	r2, .L394
	and	r1, r1, r2
.L385:
	str	r1, [r0]
	ldrb	r0, [r5]
	strb	r0, [r3, #0x5]
.L351:
	add	r0, r3, #0x4
	b	.L380
.L395:
	.align	2, 0
.L394:
	.word	-0x101
.L354:
	cmp	r4, #0
	beq	.L355	@cond_branch
	cmp	r6, #0
	beq	.L356	@cond_branch
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	orr	r1, r1, r2
	b	.L386
.L356:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	ldr	r2, .L396
	and	r1, r1, r2
.L386:
	str	r1, [r0]
	ldrb	r0, [r5]
	strb	r0, [r3, #0xf]
.L355:
	add	r0, r3, #0
	add	r0, r0, #0xe
	b	.L380
.L397:
	.align	2, 0
.L396:
	.word	-0x801
.L358:
	cmp	r4, #0
	beq	.L359	@cond_branch
	cmp	r6, #0
	beq	.L360	@cond_branch
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	orr	r1, r1, r2
	b	.L387
.L360:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	ldr	r2, .L398
	and	r1, r1, r2
.L387:
	str	r1, [r0]
	ldrb	r0, [r5]
	strb	r0, [r3, #0x13]
.L359:
	add	r0, r3, #0
	add	r0, r0, #0x12
	b	.L380
.L399:
	.align	2, 0
.L398:
	.word	-0x1001
.L362:
	cmp	r4, #0
	beq	.L363	@cond_branch
	cmp	r6, #0
	beq	.L364	@cond_branch
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	orr	r1, r1, r2
	b	.L388
.L364:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	ldr	r2, .L400
	and	r1, r1, r2
.L388:
	str	r1, [r0]
	ldrb	r0, [r5]
	strb	r0, [r3, #0x11]
.L363:
	add	r0, r3, #0
	add	r0, r0, #0x10
	b	.L380
.L401:
	.align	2, 0
.L400:
	.word	-0x401
.L366:
	cmp	r4, #0
	beq	.L367	@cond_branch
	cmp	r6, #0
	beq	.L368	@cond_branch
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x7
	orr	r1, r1, r2
	b	.L389
.L368:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	ldr	r2, .L402
	and	r1, r1, r2
.L389:
	str	r1, [r0]
.L367:
	add	r0, r3, #0
	add	r0, r0, #0xc
	b	.L380
.L403:
	.align	2, 0
.L402:
	.word	-0x4001
.L370:
	cmp	r4, #0
	beq	.L371	@cond_branch
	cmp	r6, #0
	beq	.L372	@cond_branch
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	orr	r1, r1, r2
	b	.L390
.L372:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	ldr	r2, .L404
	and	r1, r1, r2
.L390:
	str	r1, [r0]
.L371:
	add	r0, r3, #0
	add	r0, r0, #0xb
	b	.L380
.L405:
	.align	2, 0
.L404:
	.word	-0x2001
.L374:
	cmp	r4, #0
	beq	.L375	@cond_branch
	cmp	r6, #0
	beq	.L376	@cond_branch
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	b	.L391
.L376:
	ldr	r0, [r5, #0x20]
	ldr	r1, [r0]
	mov	r2, #0x5
	neg	r2, r2
	and	r1, r1, r2
.L391:
	str	r1, [r0]
.L375:
	add	r0, r3, #0
	add	r0, r0, #0xd
	b	.L380
.L378:
	mov	r0, #0x0
.L380:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 GetSideStatusValue,.Lfe25-GetSideStatusValue
	.align	2, 0
	.type	 SetUpModifyArrows,function
	.thumb_func
SetUpModifyArrows:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	ldr	r0, .L450
	bl	LoadSpritePalette
	ldr	r4, .L450+0x4
	add	r0, r4, #0
	mov	r1, #0xcf
	mov	r2, #0xc
	mov	r3, #0x0
	bl	CreateSprite
	strb	r0, [r7, #0xc]
	add	r0, r4, #0
	mov	r1, #0xcf
	mov	r2, #0x24
	mov	r3, #0x0
	bl	CreateSprite
	strb	r0, [r7, #0xd]
	ldr	r2, .L450+0x8
	ldrb	r1, [r7, #0xd]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x2a
	mov	r1, #0x1
	strb	r1, [r0]
	ldrb	r0, [r7, #0x4]
	cmp	r0, #0xd
	bls	.LCB3368
	b	.L407	@long jump
.LCB3368:
	lsl	r0, r0, #0x2
	ldr	r1, .L450+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L451:
	.align	2, 0
.L450:
	.word	gSpritePalette_RtcArrow
	.word	gSpriteTemplate_RtcArrow
	.word	gSprites
	.word	.L443
	.align	2, 0
	.align	2, 0
.L443:
	.word	.L409
	.word	.L408
	.word	.L413
	.word	.L412
	.word	.L416
	.word	.L417
	.word	.L422
	.word	.L432
	.word	.L434
	.word	.L435
	.word	.L437
	.word	.L436
	.word	.L407
	.word	.L425
.L408:
	mov	r0, #0x0
	strh	r0, [r7, #0xe]
	ldr	r0, .L452
	strh	r0, [r7, #0x10]
	mov	r0, #0x3
	strb	r0, [r7, #0x19]
	ldrb	r0, [r7]
	mov	r3, #0x5c
	mul	r0, r0, r3
	ldr	r1, .L452+0x4
	add	r0, r0, r1
	str	r0, [r7, #0x20]
	add	r2, r7, #0
	add	r2, r2, #0x24
	mov	r0, #0x1
	strb	r0, [r2]
	sub	r1, r1, #0x20
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x20]
	b	.L445
.L453:
	.align	2, 0
.L452:
	.word	0x10b
	.word	gBattleMons+0x20
.L409:
	mov	r0, #0x0
	strh	r0, [r7, #0xe]
	ldr	r0, .L454
	strh	r0, [r7, #0x10]
	mov	r0, #0x3
	strb	r0, [r7, #0x19]
	ldrb	r0, [r7, #0x7]
	cmp	r0, #0x4
	bne	.L410	@cond_branch
	ldrb	r0, [r7]
	mov	r2, #0x5c
	mul	r0, r0, r2
	ldr	r1, .L454+0x4
	add	r0, r0, r1
	str	r0, [r7, #0x20]
	sub	r1, r1, #0xc
	ldrb	r0, [r7]
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0xc]
	str	r0, [r7, #0x14]
	add	r1, r7, #0
	add	r1, r1, #0x24
	mov	r0, #0xa
	strb	r0, [r1]
	b	.L407
.L455:
	.align	2, 0
.L454:
	.word	0x2f2
	.word	gBattleMons+0xc
.L410:
	ldrb	r0, [r7]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	ldr	r3, .L456
	add	r1, r1, r3
	ldrb	r0, [r7, #0x7]
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	str	r1, [r7, #0x20]
	ldrb	r0, [r7, #0x7]
	lsl	r0, r0, #0x1
	ldrb	r1, [r7]
	mul	r1, r1, r2
	add	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0]
	b	.L446
.L457:
	.align	2, 0
.L456:
	.word	gBattleMons+0xc
.L412:
	mov	r6, #0x0
	mov	r0, #0x0
	strh	r0, [r7, #0xe]
	ldr	r4, .L458
	ldrb	r2, [r7, #0x7]
	lsl	r3, r2, #0x1
	ldrb	r0, [r7]
	mov	r5, #0x5c
	mov	r1, r0
	mul	r1, r1, r5
	add	r3, r3, r1
	add	r0, r4, #0
	add	r0, r0, #0xc
	add	r3, r3, r0
	ldrh	r0, [r3]
	add	r1, r1, r4
	add	r1, r1, #0x3d
	ldrb	r1, [r1]
	bl	CalculatePPWithBonus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x10]
	mov	r0, #0x2
	strb	r0, [r7, #0x19]
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r4, r4, #0x25
	add	r0, r0, r4
	ldrb	r1, [r7, #0x7]
	add	r0, r0, r1
	str	r0, [r7, #0x20]
	add	r0, r7, #0
	add	r0, r0, #0x24
	strb	r6, [r0]
	ldrb	r0, [r7]
	mul	r0, r0, r5
	ldrb	r1, [r7, #0x7]
	add	r0, r0, r1
	add	r0, r0, r4
	b	.L447
.L459:
	.align	2, 0
.L458:
	.word	gBattleMons
.L413:
	mov	r0, #0x0
	strh	r0, [r7, #0xe]
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	strh	r0, [r7, #0x10]
	mov	r0, #0x3
	strb	r0, [r7, #0x19]
	ldrb	r0, [r7]
	mov	r3, #0x5c
	mul	r0, r0, r3
	ldr	r2, .L460
	add	r0, r0, r2
	str	r0, [r7, #0x20]
	add	r1, r7, #0
	add	r1, r1, #0x24
	mov	r0, #0xc
	strb	r0, [r1]
	ldrb	r0, [r7, #0x7]
	cmp	r0, #0
	bne	.L414	@cond_branch
	add	r1, r2, #0
	sub	r1, r1, #0x30
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x30]
	b	.L445
.L461:
	.align	2, 0
.L460:
	.word	gBattleMons+0x30
.L414:
	ldr	r0, .L462
	ldr	r0, [r0]
	ldr	r4, .L462+0x4
	add	r0, r0, r4
	ldrb	r1, [r7]
	add	r0, r0, r1
	b	.L447
.L463:
	.align	2, 0
.L462:
	.word	gBattleStruct
	.word	0x2c5
.L416:
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r7, #0xe]
	mov	r0, #0x12
	strh	r0, [r7, #0x10]
	mov	r0, #0x2
	strb	r0, [r7, #0x19]
	ldrb	r0, [r7]
	mov	r1, #0x5c
	mul	r0, r0, r1
	ldr	r2, .L464
	add	r0, r0, r2
	ldrb	r4, [r7, #0x7]
	add	r0, r0, r4
	str	r0, [r7, #0x20]
	add	r0, r7, #0
	add	r0, r0, #0x24
	strb	r3, [r0]
	ldrb	r0, [r7]
	mul	r0, r0, r1
	ldrb	r1, [r7, #0x7]
	add	r0, r0, r1
	add	r0, r0, r2
	b	.L447
.L465:
	.align	2, 0
.L464:
	.word	gBattleMons+0x22
.L417:
	mov	r0, #0x0
	strh	r0, [r7, #0xe]
	ldr	r0, .L466
	strh	r0, [r7, #0x10]
	mov	r0, #0x4
	strb	r0, [r7, #0x19]
	ldrb	r0, [r7, #0x7]
	cmp	r0, #0
	bne	.L418	@cond_branch
	ldrb	r0, [r7]
	mov	r2, #0x5c
	mul	r0, r0, r2
	ldr	r1, .L466+0x4
	add	r0, r0, r1
	str	r0, [r7, #0x20]
	sub	r1, r1, #0x2a
	ldrb	r0, [r7]
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	str	r0, [r7, #0x14]
	mov	r0, #0x1
	strh	r0, [r7, #0xe]
	ldrb	r0, [r7]
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r7, #0x10]
	b	.L419
.L467:
	.align	2, 0
.L466:
	.word	0x270f
	.word	gBattleMons+0x2a
.L418:
	cmp	r0, #0x1
	bne	.L420	@cond_branch
	ldrb	r0, [r7]
	mov	r2, #0x5c
	mul	r0, r0, r2
	ldr	r1, .L468
	add	r0, r0, r1
	str	r0, [r7, #0x20]
	sub	r1, r1, #0x2e
	ldrb	r0, [r7]
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	strh	r0, [r7, #0xe]
	ldrb	r0, [r7]
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	b	.L446
.L469:
	.align	2, 0
.L468:
	.word	gBattleMons+0x2e
.L420:
	ldrb	r0, [r7]
	mov	r3, #0x5c
	mov	r1, r0
	mul	r1, r1, r3
	ldr	r2, .L470
	add	r1, r1, r2
	ldrb	r0, [r7, #0x7]
	lsl	r0, r0, #0x1
	sub	r0, r0, #0x4
	add	r1, r1, r0
	str	r1, [r7, #0x20]
	ldrb	r1, [r7]
	ldrb	r0, [r7, #0x7]
	mul	r1, r1, r3
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	sub	r2, r2, #0x4
	add	r1, r1, r2
	ldrh	r0, [r1]
.L446:
	str	r0, [r7, #0x14]
.L419:
	add	r1, r7, #0
	add	r1, r1, #0x24
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L407
.L471:
	.align	2, 0
.L470:
	.word	gBattleMons+0x2
.L422:
	mov	r0, #0x0
	strh	r0, [r7, #0xe]
	mov	r0, #0xc
	strh	r0, [r7, #0x10]
	mov	r0, #0x2
	strb	r0, [r7, #0x19]
	ldrb	r0, [r7, #0x7]
	cmp	r0, #0x7
	bne	.L423	@cond_branch
	ldrb	r0, [r7]
	mov	r2, #0x5c
	mul	r0, r0, r2
	ldr	r1, .L472
	add	r0, r0, r1
	add	r0, r0, #0x1
	str	r0, [r7, #0x20]
	ldrb	r0, [r7]
	mul	r0, r0, r2
	add	r1, r1, r0
	mov	r0, #0x1
	ldrsb	r0, [r1, r0]
	str	r0, [r7, #0x14]
	add	r1, r7, #0
	add	r1, r1, #0x24
	mov	r0, #0xd
	strb	r0, [r1]
	b	.L407
.L473:
	.align	2, 0
.L472:
	.word	gBattleMons+0x18
.L423:
	ldrb	r0, [r7]
	mov	r2, #0x5c
	mov	r1, r0
	mul	r1, r1, r2
	ldr	r3, .L474
	add	r1, r1, r3
	ldrb	r0, [r7, #0x7]
	add	r0, r0, #0x1
	add	r1, r1, r0
	str	r1, [r7, #0x20]
	add	r1, r7, #0
	add	r1, r1, #0x24
	mov	r0, #0x0
	strb	r0, [r1]
	ldrb	r1, [r7, #0x7]
	ldrb	r0, [r7]
	mul	r0, r0, r2
	add	r0, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r3
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	b	.L445
.L475:
	.align	2, 0
.L474:
	.word	gBattleMons+0x18
.L425:
	ldrb	r0, [r7, #0x7]
	cmp	r0, #0
	bne	.L426	@cond_branch
	strh	r0, [r7, #0xe]
	mov	r1, #0x1
	mov	r0, #0x1
	strh	r0, [r7, #0x10]
	strb	r1, [r7, #0x19]
	ldr	r0, .L476
	ldr	r2, [r0]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x2
	ldr	r0, [r2]
	add	r0, r0, r1
	str	r0, [r7, #0x20]
	add	r1, r7, #0
	add	r1, r1, #0x24
	mov	r0, #0x7
	strb	r0, [r1]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1f
	b	.L445
.L477:
	.align	2, 0
.L476:
	.word	gBattleSpritesDataPtr
.L426:
	cmp	r0, #0x1
	bne	.L428	@cond_branch
	mov	r0, #0x0
	strh	r0, [r7, #0xe]
	mov	r0, #0xff
	strh	r0, [r7, #0x10]
	mov	r0, #0x3
	strb	r0, [r7, #0x19]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r2, .L478
	add	r0, r0, r2
	str	r0, [r7, #0x20]
	add	r1, r7, #0
	add	r1, r1, #0x24
	mov	r0, #0x8
	strb	r0, [r1]
	sub	r2, r2, #0xe
	ldrb	r1, [r7]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0xe]
	b	.L445
.L479:
	.align	2, 0
.L478:
	.word	gDisableStructs+0xe
.L428:
	cmp	r0, #0x2
	beq	.LCB3883
	b	.L407	@long jump
.LCB3883:
	mov	r2, #0x0
	strh	r2, [r7, #0xe]
	mov	r1, #0x1
	mov	r0, #0x1
	strh	r0, [r7, #0x10]
	strb	r1, [r7, #0x19]
	str	r2, [r7, #0x20]
	add	r1, r7, #0
	add	r1, r1, #0x24
	mov	r0, #0x9
	strb	r0, [r1]
	ldr	r1, .L480
	ldrb	r2, [r7]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	b	.L445
.L481:
	.align	2, 0
.L480:
	.word	gBattleMons
.L432:
	ldrb	r0, [r7]
	mov	r2, #0x5c
	mul	r0, r0, r2
	ldr	r1, .L482
	add	r0, r0, r1
	str	r0, [r7, #0x20]
	ldrb	r0, [r7]
	mul	r0, r0, r2
	add	r0, r0, r1
	ldr	r0, [r0]
	b	.L448
.L483:
	.align	2, 0
.L482:
	.word	gBattleMons+0x50
.L434:
	ldrb	r0, [r7]
	mov	r2, #0x5c
	mul	r0, r0, r2
	ldr	r1, .L484
	add	r0, r0, r1
	str	r0, [r7, #0x20]
	ldrb	r0, [r7]
	mul	r0, r0, r2
	add	r0, r0, r1
	ldr	r0, [r0]
	b	.L448
.L485:
	.align	2, 0
.L484:
	.word	gBattleMons+0x54
.L435:
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	ldr	r1, .L486
	add	r0, r0, r1
	str	r0, [r7, #0x20]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	b	.L448
.L487:
	.align	2, 0
.L486:
	.word	gStatuses3
.L436:
	ldr	r0, .L488
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	add	r0, r1, #0
	add	r0, r0, #0xc
	str	r0, [r7, #0x20]
	ldr	r0, [r1, #0xc]
.L448:
	ldrb	r2, [r7, #0x7]
	ldr	r1, [r7, #0x28]
	lsl	r2, r2, #0x1
	add	r2, r2, r1
	ldrb	r1, [r2, #0x1]
	ldrb	r2, [r2]
	bl	GetBitfieldValue
	str	r0, [r7, #0x14]
	add	r1, r7, #0
	add	r1, r1, #0x24
	mov	r0, #0x5
	strb	r0, [r1]
	mov	r0, #0x0
	strh	r0, [r7, #0xe]
	ldrb	r1, [r7, #0x7]
	ldr	r2, [r7, #0x28]
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	mov	r0, #0x1
	ldrb	r1, [r1]
	lsl	r0, r0, r1
	sub	r0, r0, #0x1
	strh	r0, [r7, #0x10]
	ldr	r1, .L488+0x4
	ldrb	r0, [r7, #0x7]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r7, #0x19]
	b	.L407
.L489:
	.align	2, 0
.L488:
	.word	gBattleResources
	.word	sBitsToMaxDigit
.L437:
	mov	r0, #0x0
	strh	r0, [r7, #0xe]
	ldrb	r0, [r7, #0x7]
	cmp	r0, #0x2
	bne	.L438	@cond_branch
	mov	r0, #0x3
	b	.L449
.L438:
	cmp	r0, #0x8
	beq	.L441	@cond_branch
	cmp	r0, #0xa
	bne	.L440	@cond_branch
.L441:
	mov	r0, #0x1
	b	.L449
.L440:
	mov	r0, #0x9
.L449:
	strh	r0, [r7, #0x10]
	mov	r0, #0x2
	strb	r0, [r7, #0x19]
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L490
	add	r1, r1, r0
	str	r1, [r7, #0x20]
	add	r1, r7, #0
	add	r1, r1, #0x24
	mov	r0, #0x6
	strb	r0, [r1]
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetSideStatusValue
.L447:
	ldrb	r0, [r0]
.L445:
	str	r0, [r7, #0x14]
.L407:
	mov	r0, #0x0
	strb	r0, [r7, #0x18]
	add	r0, r7, #0
	add	r0, r0, #0x1a
	ldr	r1, [r7, #0x14]
	ldrb	r2, [r7, #0x19]
	bl	ValueToCharDigits
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L491:
	.align	2, 0
.L490:
	.word	gSideStatuses
.Lfe26:
	.size	 SetUpModifyArrows,.Lfe26-SetUpModifyArrows
	.align	2, 0
	.type	 TryMoveDigit,function
	.thumb_func
TryMoveDigit:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r2, #0x0
	add	r6, r4, #0
	add	r6, r6, #0xe
	add	r3, r6, #0
.L496:
	mov	r1, sp
	add	r0, r1, r2
	add	r1, r3, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L496	@cond_branch
	cmp	r5, #0
	beq	.L498	@cond_branch
	ldrb	r0, [r4, #0xc]
	mov	r2, sp
	add	r1, r2, r0
	ldrb	r0, [r1]
	cmp	r0, #0xaa
	bne	.L499	@cond_branch
	mov	r0, #0xa1
	b	.L513
.L499:
	add	r0, r0, #0x1
	b	.L513
.L498:
	ldrb	r0, [r4, #0xc]
	mov	r2, sp
	add	r1, r2, r0
	ldrb	r0, [r1]
	cmp	r0, #0xa1
	bne	.L502	@cond_branch
	mov	r0, #0xaa
	b	.L513
.L502:
	sub	r0, r0, #0x1
.L513:
	strb	r0, [r1]
	ldrb	r1, [r4, #0xd]
	mov	r0, sp
	bl	CharDigitsToValue
	ldrh	r1, [r4, #0x4]
	cmp	r0, r1
	bhi	.L505	@cond_branch
	ldrh	r2, [r4, #0x2]
	cmp	r0, r2
	bcs	.L504	@cond_branch
.L505:
	mov	r0, #0x0
	b	.L512
.L504:
	str	r0, [r4, #0x8]
	mov	r2, #0x0
	add	r3, r6, #0
.L510:
	add	r0, r3, r2
	mov	r4, sp
	add	r1, r4, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L510	@cond_branch
	mov	r0, #0x1
.L512:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 TryMoveDigit,.Lfe27-TryMoveDigit
	.align	2, 0
	.type	 UpdateMonData,function
	.thumb_func
UpdateMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r0
	mov	r0, #0x0
	mov	r8, r0
	ldr	r1, .L529
	mov	r9, r1
.L518:
	mov	r0, sl
	add	r0, r0, #0x2c
	add	r0, r0, r8
	ldrb	r0, [r0]
	mov	r7, r8
	add	r7, r7, #0x1
	cmp	r0, #0
	beq	.L517	@cond_branch
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	ldr	r0, .L529+0x4
	add	r4, r1, r0
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L520	@cond_branch
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r9
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L529+0x8
	b	.L528
.L530:
	.align	2, 0
.L529:
	.word	gBattlerPartyIndexes
	.word	gBattleMons
	.word	gPlayerParty
.L520:
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r9
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L531
.L528:
	add	r6, r1, r0
	add	r2, r4, #0
	add	r2, r2, #0x30
	add	r0, r6, #0
	mov	r1, #0xc
	bl	SetMonData
	add	r2, r4, #0
	add	r2, r2, #0x50
	add	r0, r6, #0
	mov	r1, #0x37
	bl	SetMonData
	add	r2, r4, #0
	add	r2, r2, #0x2a
	add	r0, r6, #0
	mov	r1, #0x39
	bl	SetMonData
	add	r2, r4, #0
	add	r2, r2, #0x2e
	add	r0, r6, #0
	mov	r1, #0x3a
	bl	SetMonData
	mov	r5, #0x0
	mov	r7, r8
	add	r7, r7, #0x1
	add	r4, r4, #0xc
.L525:
	add	r1, r5, #0
	add	r1, r1, #0xd
	add	r0, r6, #0
	add	r2, r4, #0
	bl	SetMonData
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L525	@cond_branch
.L517:
	mov	r8, r7
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L518	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L532:
	.align	2, 0
.L531:
	.word	gEnemyParty
.Lfe28:
	.size	 UpdateMonData,.Lfe28-UpdateMonData
.text
	.align	2, 0

