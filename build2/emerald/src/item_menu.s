@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sBgTemplates_ItemMenu,object
	.size	 sBgTemplates_ItemMenu,12
sBgTemplates_ItemMenu:
	.byte	0xf0
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xe1
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xde
	.byte	0x21
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sItemListMenu,object
	.size	 sItemListMenu,24
sItemListMenu:
	.word	0x0
	.word	BagMenu_MoveCursorCallback
	.word	BagMenu_ItemPrintCallback
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x11
	.byte	0x30
	.byte	0x0
	.byte	0x7
	.type	 sMenuText_ByName,object
sMenuText_ByName:
	.byte	0xc8
	.byte	0xd5
	.byte	0xe1
	.byte	0xd9
	.byte	0xff
	.size	 sMenuText_ByName,5
	.type	 sMenuText_ByType,object
sMenuText_ByType:
	.byte	0xce
	.byte	0xed
	.byte	0xe4
	.byte	0xd9
	.byte	0xff
	.size	 sMenuText_ByType,5
	.type	 sMenuText_ByAmount,object
sMenuText_ByAmount:
	.byte	0xbb
	.byte	0xe1
	.byte	0xe3
	.byte	0xe9
	.byte	0xe2
	.byte	0xe8
	.byte	0xff
	.size	 sMenuText_ByAmount,7
	.type	 sMenuText_ByNumber,object
sMenuText_ByNumber:
	.byte	0xc8
	.byte	0xe9
	.byte	0xe1
	.byte	0xd6
	.byte	0xd9
	.byte	0xe6
	.byte	0xff
	.size	 sMenuText_ByNumber,7
	.type	 sMenuText_Select,object
sMenuText_Select:
	.byte	0xcd
	.byte	0xd9
	.byte	0xe0
	.byte	0xd9
	.byte	0xd7
	.byte	0xe8
	.byte	0xff
	.size	 sMenuText_Select,7
	.type	 sMenuText_L,object
sMenuText_L:
	.byte	0xc6
	.byte	0x0
	.byte	0xbc
	.byte	0xe9
	.byte	0xe8
	.byte	0xe8
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.size	 sMenuText_L,9
	.type	 sMenuText_R,object
sMenuText_R:
	.byte	0xcc
	.byte	0x0
	.byte	0xbc
	.byte	0xe9
	.byte	0xe8
	.byte	0xe8
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.size	 sMenuText_R,9
	.align	2, 0
	.type	 sItemMenuActions,object
sItemMenuActions:
	.word	gMenuText_Use
	.word	ItemMenu_UseOutOfBattle
	.word	gMenuText_Toss
	.word	ItemMenu_Toss
	.word	gMenuText_Register
	.word	ItemMenu_Register
	.word	gMenuText_Give
	.word	ItemMenu_Give
	.word	gText_Cancel2
	.word	ItemMenu_Cancel
	.word	gMenuText_Use
	.word	ItemMenu_UseInBattle
	.word	gMenuText_Check
	.word	ItemMenu_UseOutOfBattle
	.word	gMenuText_Walk
	.word	ItemMenu_UseOutOfBattle
	.word	gMenuText_Deselect
	.word	ItemMenu_Deselect
	.word	gMenuText_CheckTag
	.word	ItemMenu_CheckTag
	.word	gMenuText_Confirm
	.word	Task_FadeAndCloseBagMenu
	.word	gMenuText_Show
	.word	unknown_ItemMenu_Show
	.word	gMenuText_Give2
	.word	unknown_ItemMenu_Give2
	.word	gMenuText_Confirm
	.word	unknown_ItemMenu_Confirm2
	.word	sMenuText_ByName
	.word	ItemMenu_SortByName
	.word	sMenuText_ByType
	.word	ItemMenu_SortByType
	.word	sMenuText_ByAmount
	.word	ItemMenu_SortByAmount
	.word	sMenuText_ByNumber
	.word	ItemMenu_SortByNumber
	.word	sMenuText_ByType
	.word	ItemMenu_SortByMoveType
	.word	sMenuText_Select
	.word	ItemMenu_RegisterSelect
	.word	sMenuText_L
	.word	ItemMenu_RegisterL
	.word	sMenuText_R
	.word	ItemMenu_RegisterR
	.word	gText_EmptyString2
	.word	0x0
	.size	 sItemMenuActions,184
	.type	 sContextMenuItems_ItemsPocket,object
sContextMenuItems_ItemsPocket:
	.byte	0x0
	.byte	0x3
	.byte	0x1
	.byte	0x4
	.size	 sContextMenuItems_ItemsPocket,4
	.type	 sContextMenuItems_KeyItemsPocket,object
sContextMenuItems_KeyItemsPocket:
	.byte	0x0
	.byte	0x2
	.byte	0x16
	.byte	0x4
	.size	 sContextMenuItems_KeyItemsPocket,4
	.type	 sContextMenuItems_BallsPocket,object
sContextMenuItems_BallsPocket:
	.byte	0x3
	.byte	0x16
	.byte	0x1
	.byte	0x4
	.size	 sContextMenuItems_BallsPocket,4
	.type	 sContextMenuItems_TmHmPocket,object
sContextMenuItems_TmHmPocket:
	.byte	0x0
	.byte	0x3
	.byte	0x16
	.byte	0x4
	.size	 sContextMenuItems_TmHmPocket,4
	.type	 sContextMenuItems_BerriesPocket,object
sContextMenuItems_BerriesPocket:
	.byte	0x9
	.byte	0x16
	.byte	0x0
	.byte	0x3
	.byte	0x1
	.byte	0x4
	.size	 sContextMenuItems_BerriesPocket,6
	.type	 sContextMenuItems_BattleUse,object
sContextMenuItems_BattleUse:
	.byte	0x5
	.byte	0x4
	.size	 sContextMenuItems_BattleUse,2
	.type	 sContextMenuItems_Give,object
sContextMenuItems_Give:
	.byte	0x3
	.byte	0x4
	.size	 sContextMenuItems_Give,2
	.type	 sContextMenuItems_Cancel,object
sContextMenuItems_Cancel:
	.byte	0x4
	.size	 sContextMenuItems_Cancel,1
	.type	 sContextMenuItems_BerryBlenderCrush,object
sContextMenuItems_BerryBlenderCrush:
	.byte	0xa
	.byte	0x9
	.byte	0x16
	.byte	0x4
	.size	 sContextMenuItems_BerryBlenderCrush,4
	.type	 sContextMenuItems_Apprentice,object
sContextMenuItems_Apprentice:
	.byte	0xb
	.byte	0x4
	.size	 sContextMenuItems_Apprentice,2
	.type	 sContextMenuItems_FavorLady,object
sContextMenuItems_FavorLady:
	.byte	0xc
	.byte	0x4
	.size	 sContextMenuItems_FavorLady,2
	.type	 sContextMenuItems_QuizLady,object
sContextMenuItems_QuizLady:
	.byte	0xd
	.byte	0x4
	.size	 sContextMenuItems_QuizLady,2
	.type	 sContextMenu_RegisterKeyItem,object
sContextMenu_RegisterKeyItem:
	.byte	0x13
	.byte	0x14
	.byte	0x16
	.byte	0x15
	.size	 sContextMenu_RegisterKeyItem,4
	.align	2, 0
	.type	 gUnknown_08614054,object
gUnknown_08614054:
	.word	Task_ItemContext_FieldOrBattle
	.word	Task_ItemContext_FieldOrBattle
	.word	Task_ItemContext_FieldGive
	.word	Task_ItemContext_Sell
	.word	Task_FadeAndCloseBagMenu
	.word	Task_ItemContext_FieldOrBattle
	.word	Task_ItemContext_Deposit
	.word	Task_ItemContext_FieldOrBattle
	.word	Task_ItemContext_FieldOrBattle
	.word	Task_ItemContext_FieldOrBattle
	.word	0x0
	.word	Task_ItemContext_ItemPC_2
	.size	 gUnknown_08614054,48
	.align	2, 0
	.type	 sYesNoTossFunctions,object
	.size	 sYesNoTossFunctions,8
sYesNoTossFunctions:
	.word	BagMenu_ConfirmToss
	.word	BagMenu_CancelToss
	.align	2, 0
	.type	 sYesNoSellItemFunctions,object
	.size	 sYesNoSellItemFunctions,8
sYesNoSellItemFunctions:
	.word	BagMenu_ConfirmSell
	.word	BagMenu_CancelSell
	.align	2, 0
	.type	 sBagScrollArrowsTemplate,object
	.size	 sBagScrollArrowsTemplate,16
sBagScrollArrowsTemplate:
	.byte	0x0
	.byte	0x1c
	.byte	0x10
	.byte	0x1
	.byte	0x64
	.byte	0x10
	.short	0xffff
	.short	0xffff
	.short	0x6f
	.short	0x6f
	.byte	0x0
	.space	1
	.type	 sSelectButtonGfx,object
sSelectButtonGfx:
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x1a
	.byte	0x11
	.byte	0x11
	.byte	0xaa
	.byte	0x11
	.byte	0x55
	.byte	0x55
	.byte	0x1a
	.byte	0x51
	.byte	0x15
	.byte	0x51
	.byte	0x1a
	.byte	0x55
	.byte	0x15
	.byte	0x55
	.byte	0x1a
	.byte	0x55
	.byte	0x15
	.byte	0x55
	.byte	0x1a
	.byte	0x55
	.byte	0x15
	.byte	0x51
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0x15
	.byte	0x55
	.byte	0x55
	.byte	0x51
	.byte	0x15
	.byte	0x55
	.byte	0x15
	.byte	0x51
	.byte	0x15
	.byte	0x55
	.byte	0x11
	.byte	0x11
	.byte	0x15
	.byte	0x55
	.byte	0x11
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0xa1
	.byte	0xaa
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0xaa
	.byte	0x11
	.byte	0x51
	.byte	0x15
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0x55
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0x51
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0x51
	.byte	0xa1
	.byte	0x1a
	.byte	0x55
	.byte	0x55
	.byte	0x51
	.byte	0x1a
	.byte	0x55
	.byte	0x55
	.byte	0x51
	.byte	0x1a
	.byte	0x51
	.byte	0x15
	.byte	0x51
	.byte	0xaa
	.byte	0x11
	.byte	0x55
	.byte	0x55
	.byte	0xaa
	.byte	0x1a
	.byte	0x11
	.byte	0x11
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x51
	.byte	0x15
	.byte	0x55
	.byte	0x11
	.byte	0x51
	.byte	0x15
	.byte	0x55
	.byte	0x15
	.byte	0x11
	.byte	0x15
	.byte	0x51
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0x51
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0x55
	.byte	0xa1
	.byte	0x11
	.byte	0x51
	.byte	0x15
	.byte	0xa1
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0xa1
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.size	 sSelectButtonGfx,192
	.type	 sLButtonGfx,object
sLButtonGfx:
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x1a
	.byte	0x11
	.byte	0x11
	.byte	0xaa
	.byte	0x11
	.byte	0xee
	.byte	0xee
	.byte	0x1a
	.byte	0xe1
	.byte	0xee
	.byte	0x1e
	.byte	0x1a
	.byte	0xee
	.byte	0xee
	.byte	0x1e
	.byte	0x1a
	.byte	0xee
	.byte	0xee
	.byte	0x1e
	.byte	0x1a
	.byte	0xee
	.byte	0xee
	.byte	0x1e
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x1e
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x11
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x11
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0xa1
	.byte	0xaa
	.byte	0xee
	.byte	0xee
	.byte	0x11
	.byte	0xaa
	.byte	0x11
	.byte	0xe1
	.byte	0x1e
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0xee
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0xe1
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0xe1
	.byte	0xa1
	.byte	0x1a
	.byte	0xee
	.byte	0xee
	.byte	0x1e
	.byte	0x1a
	.byte	0xee
	.byte	0xee
	.byte	0x1e
	.byte	0x1a
	.byte	0xe1
	.byte	0xee
	.byte	0x1e
	.byte	0xaa
	.byte	0x11
	.byte	0xee
	.byte	0xee
	.byte	0xaa
	.byte	0x1a
	.byte	0x11
	.byte	0x11
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x11
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x1e
	.byte	0x11
	.byte	0xe1
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0xe1
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0xee
	.byte	0xa1
	.byte	0x11
	.byte	0xe1
	.byte	0x1e
	.byte	0xa1
	.byte	0xee
	.byte	0xee
	.byte	0x11
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0xa1
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.size	 sLButtonGfx,192
	.type	 sRButtonGfx,object
sRButtonGfx:
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x1a
	.byte	0x11
	.byte	0x11
	.byte	0xaa
	.byte	0x11
	.byte	0xee
	.byte	0xee
	.byte	0x1a
	.byte	0xe1
	.byte	0xee
	.byte	0x1e
	.byte	0x1a
	.byte	0xee
	.byte	0xee
	.byte	0x1e
	.byte	0x1a
	.byte	0xee
	.byte	0xee
	.byte	0x1e
	.byte	0x1a
	.byte	0xee
	.byte	0xee
	.byte	0x1e
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x11
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xe1
	.byte	0xee
	.byte	0x1e
	.byte	0xee
	.byte	0xe1
	.byte	0xee
	.byte	0x11
	.byte	0xee
	.byte	0xe1
	.byte	0xee
	.byte	0x11
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0xa1
	.byte	0xaa
	.byte	0xee
	.byte	0xee
	.byte	0x11
	.byte	0xaa
	.byte	0x11
	.byte	0xe1
	.byte	0x1e
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0xee
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0xe1
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0xe1
	.byte	0xa1
	.byte	0x1a
	.byte	0xee
	.byte	0xee
	.byte	0x1e
	.byte	0x1a
	.byte	0xee
	.byte	0xee
	.byte	0x1e
	.byte	0x1a
	.byte	0xe1
	.byte	0xee
	.byte	0x1e
	.byte	0xaa
	.byte	0x11
	.byte	0xee
	.byte	0xee
	.byte	0xaa
	.byte	0x1a
	.byte	0x11
	.byte	0x11
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x11
	.byte	0xee
	.byte	0xee
	.byte	0x11
	.byte	0xee
	.byte	0xe1
	.byte	0xee
	.byte	0x1e
	.byte	0xee
	.byte	0xe1
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0xe1
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0xee
	.byte	0xa1
	.byte	0x11
	.byte	0xe1
	.byte	0x1e
	.byte	0xa1
	.byte	0xee
	.byte	0xee
	.byte	0x11
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0xa1
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.size	 sRButtonGfx,192
	.type	 sFontColorTable,object
sFontColorTable:
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x4
	.byte	0x0
	.byte	0x3
	.byte	0x6
	.byte	0x2
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0xe
	.byte	0xa
	.size	 sFontColorTable,15
	.globl	sDefaultBagWindows
	.align	2, 0
	.type	 sDefaultBagWindows,object
sDefaultBagWindows:
	.byte	0x0
	.byte	0xe
	.byte	0x2
	.byte	0xf
	.byte	0x10
	.byte	0x1
	.short	0x27
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0xe
	.byte	0x6
	.byte	0x1
	.short	0x117
	.byte	0x0
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x2
	.byte	0x1
	.short	0x1a1
	.byte	0x0
	.byte	0x1
	.byte	0xd
	.byte	0x5
	.byte	0x6
	.byte	0xc
	.short	0x16b
	.byte	0x0
	.byte	0x7
	.byte	0xd
	.byte	0x4
	.byte	0x6
	.byte	0xc
	.short	0x189
	.byte	0x1
	.byte	0x2
	.byte	0xf
	.byte	0x1b
	.byte	0x4
	.byte	0xf
	.short	0x1b1
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sDefaultBagWindows,56
	.globl	sContextMenuWindowTemplates
	.align	2, 0
	.type	 sContextMenuWindowTemplates,object
sContextMenuWindowTemplates:
	.byte	0x1
	.byte	0x16
	.byte	0x11
	.byte	0x7
	.byte	0x2
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0x16
	.byte	0xf
	.byte	0x7
	.byte	0x4
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0xf
	.byte	0xf
	.byte	0xe
	.byte	0x4
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0xf
	.byte	0xd
	.byte	0xe
	.byte	0x6
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0x2
	.byte	0xf
	.byte	0x1b
	.byte	0x4
	.byte	0xf
	.short	0x1b1
	.byte	0x1
	.byte	0x18
	.byte	0xf
	.byte	0x5
	.byte	0x4
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0x15
	.byte	0x9
	.byte	0x5
	.byte	0x4
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0x18
	.byte	0x11
	.byte	0x5
	.byte	0x2
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0x12
	.byte	0xb
	.byte	0xa
	.byte	0x2
	.byte	0xf
	.short	0x245
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0xa
	.byte	0x2
	.byte	0xf
	.short	0x231
	.size	 sContextMenuWindowTemplates,80
	.globl	gBagMenu
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gBagMenu,object
	.size	 gBagMenu,4
gBagMenu:
	.word	0x0
	.globl	gBagPositionStruct
	.align	2, 0
	.type	 gBagPositionStruct,object
	.size	 gBagPositionStruct,48
gBagPositionStruct:
	.word	0x0
	.space	44
	.align	2, 0
	.type	 sListBuffer1,object
	.size	 sListBuffer1,4
sListBuffer1:
	.word	0x0
	.align	2, 0
	.type	 sListBuffer2,object
	.size	 sListBuffer2,4
sListBuffer2:
	.word	0x0
	.globl	gSpecialVar_ItemId
	.align	1, 0
	.type	 gSpecialVar_ItemId,object
	.size	 gSpecialVar_ItemId,2
gSpecialVar_ItemId:
	.short	0x0
	.align	2, 0
	.type	 sTempWallyBag,object
	.size	 sTempWallyBag,4
sTempWallyBag:
	.word	0x0
	.type	 sRegisterSubMenu,object
	.size	 sRegisterSubMenu,1
sRegisterSubMenu:
	.byte	0x0
.text
	.align	2, 0
	.globl	ResetBagScrollPositions
	.type	 ResetBagScrollPositions,function
	.thumb_func
ResetBagScrollPositions:
	push	{r4, lr}
	ldr	r4, .L3
	mov	r0, #0x0
	strb	r0, [r4, #0x5]
	add	r0, r4, #0
	add	r0, r0, #0x8
	mov	r1, #0x0
	mov	r2, #0xa
	bl	memset
	add	r4, r4, #0x1c
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0xa
	bl	memset
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBagPositionStruct
.Lfe1:
	.size	 ResetBagScrollPositions,.Lfe1-ResetBagScrollPositions
	.align	2, 0
	.globl	CB2_BagMenuFromStartMenu
	.type	 CB2_BagMenuFromStartMenu,function
	.thumb_func
CB2_BagMenuFromStartMenu:
	push	{lr}
	ldr	r2, .L6
	mov	r0, #0x0
	mov	r1, #0xa
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	CB2_ReturnToFieldWithOpenMenu
.Lfe2:
	.size	 CB2_BagMenuFromStartMenu,.Lfe2-CB2_BagMenuFromStartMenu
	.align	2, 0
	.globl	CB2_BagMenuFromBattle
	.type	 CB2_BagMenuFromBattle,function
	.thumb_func
CB2_BagMenuFromBattle:
	push	{lr}
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L9	@cond_branch
	ldr	r2, .L11
	mov	r0, #0x1
	mov	r1, #0xa
	bl	GoToBagMenu
	b	.L10
.L12:
	.align	2, 0
.L11:
	.word	CB2_SetUpReshowBattleScreenAfterMenu2
.L9:
	ldr	r1, .L13
	mov	r0, #0x1
	bl	GoToBattlePyramidBagMenu
.L10:
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	CB2_SetUpReshowBattleScreenAfterMenu2
.Lfe3:
	.size	 CB2_BagMenuFromBattle,.Lfe3-CB2_BagMenuFromBattle
	.align	2, 0
	.globl	CB2_ChooseBerry
	.type	 CB2_ChooseBerry,function
	.thumb_func
CB2_ChooseBerry:
	push	{lr}
	ldr	r2, .L16
	mov	r0, #0x4
	mov	r1, #0x6
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	CB2_ReturnToFieldContinueScript
.Lfe4:
	.size	 CB2_ChooseBerry,.Lfe4-CB2_ChooseBerry
	.align	2, 0
	.globl	ChooseBerryForMachine
	.type	 ChooseBerryForMachine,function
	.thumb_func
ChooseBerryForMachine:
	push	{lr}
	add	r2, r0, #0
	mov	r0, #0x5
	mov	r1, #0x6
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 ChooseBerryForMachine,.Lfe5-ChooseBerryForMachine
	.align	2, 0
	.globl	CB2_GoToSellMenu
	.type	 CB2_GoToSellMenu,function
	.thumb_func
CB2_GoToSellMenu:
	push	{lr}
	ldr	r2, .L20
	mov	r0, #0x3
	mov	r1, #0xa
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	CB2_ExitSellMenu
.Lfe6:
	.size	 CB2_GoToSellMenu,.Lfe6-CB2_GoToSellMenu
	.align	2, 0
	.globl	CB2_GoToItemDepositMenu
	.type	 CB2_GoToItemDepositMenu,function
	.thumb_func
CB2_GoToItemDepositMenu:
	push	{lr}
	ldr	r2, .L23
	mov	r0, #0x6
	mov	r1, #0xa
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	sub_816B31C
.Lfe7:
	.size	 CB2_GoToItemDepositMenu,.Lfe7-CB2_GoToItemDepositMenu
	.align	2, 0
	.globl	ApprenticeOpenBagMenu
	.type	 ApprenticeOpenBagMenu,function
	.thumb_func
ApprenticeOpenBagMenu:
	push	{lr}
	ldr	r2, .L26
	mov	r0, #0x9
	mov	r1, #0xa
	bl	GoToBagMenu
	ldr	r0, .L26+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L26+0x8
	strh	r1, [r0]
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	CB2_ApprenticeExitBagMenu
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_Result
.Lfe8:
	.size	 ApprenticeOpenBagMenu,.Lfe8-ApprenticeOpenBagMenu
	.align	2, 0
	.globl	FavorLadyOpenBagMenu
	.type	 FavorLadyOpenBagMenu,function
	.thumb_func
FavorLadyOpenBagMenu:
	push	{lr}
	ldr	r2, .L29
	mov	r0, #0x7
	mov	r1, #0xa
	bl	GoToBagMenu
	ldr	r1, .L29+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	CB2_FavorLadyExitBagMenu
	.word	gSpecialVar_Result
.Lfe9:
	.size	 FavorLadyOpenBagMenu,.Lfe9-FavorLadyOpenBagMenu
	.align	2, 0
	.globl	QuizLadyOpenBagMenu
	.type	 QuizLadyOpenBagMenu,function
	.thumb_func
QuizLadyOpenBagMenu:
	push	{lr}
	ldr	r2, .L32
	mov	r0, #0x8
	mov	r1, #0xa
	bl	GoToBagMenu
	ldr	r1, .L32+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	CB2_QuizLadyExitBagMenu
	.word	gSpecialVar_Result
.Lfe10:
	.size	 QuizLadyOpenBagMenu,.Lfe10-QuizLadyOpenBagMenu
	.align	2, 0
	.globl	GoToBagMenu
	.type	 GoToBagMenu,function
	.thumb_func
GoToBagMenu:
	push	{r4, r5, r6, r7, lr}
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r6, .L41
	ldr	r0, .L41+0x4
	bl	AllocZeroed
	str	r0, [r6]
	cmp	r0, #0
	bne	.L35	@cond_branch
	add	r0, r4, #0
	bl	SetMainCallback2
	b	.L36
.L42:
	.align	2, 0
.L41:
	.word	gBagMenu
	.word	0xc54
.L35:
	ldr	r0, .L43
	cmp	r5, #0xc
	beq	.L37	@cond_branch
	strb	r5, [r0, #0x4]
.L37:
	cmp	r4, #0
	beq	.L38	@cond_branch
	str	r4, [r0]
.L38:
	cmp	r7, #0x9
	bhi	.L39	@cond_branch
	strb	r7, [r0, #0x5]
.L39:
	ldrb	r0, [r0, #0x4]
	sub	r0, r0, #0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L40	@cond_branch
	ldr	r2, [r6]
	ldr	r0, .L43+0x4
	add	r2, r2, r0
	ldrb	r1, [r2]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L40:
	ldr	r0, [r6]
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r1, .L43+0x8
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r0, [r6]
	ldr	r1, .L43+0xc
	add	r0, r0, r1
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0]
	ldr	r0, [r6]
	ldr	r1, .L43+0x10
	add	r0, r0, r1
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0]
	ldr	r0, [r6]
	ldr	r1, .L43+0x14
	add	r0, r0, r1
	mov	r1, #0xff
	mov	r2, #0xc
	bl	memset
	ldr	r0, [r6]
	mov	r1, #0x81
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	mov	r1, #0xff
	mov	r2, #0xa
	bl	memset
	ldr	r0, .L43+0x18
	bl	SetMainCallback2
.L36:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	gBagPositionStruct
	.word	0x81b
	.word	0x81a
	.word	0x81e
	.word	0x81f
	.word	0x804
	.word	CB2_Bag
.Lfe11:
	.size	 GoToBagMenu,.Lfe11-GoToBagMenu
	.align	2, 0
	.globl	CB2_BagMenuRun
	.type	 CB2_BagMenuRun,function
	.thumb_func
CB2_BagMenuRun:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	DoScheduledBgTilemapCopiesToVram
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 CB2_BagMenuRun,.Lfe12-CB2_BagMenuRun
	.align	2, 0
	.globl	VBlankCB_BagMenuRun
	.type	 VBlankCB_BagMenuRun,function
	.thumb_func
VBlankCB_BagMenuRun:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 VBlankCB_BagMenuRun,.Lfe13-VBlankCB_BagMenuRun
	.align	2, 0
	.globl	CB2_Bag
	.type	 CB2_Bag,function
	.thumb_func
CB2_Bag:
	push	{lr}
.L48:
	bl	MenuHelpers_CallLinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L49	@cond_branch
	bl	SetupBagMenu
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L49	@cond_branch
	bl	MenuHelpers_LinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L48	@cond_branch
.L49:
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 CB2_Bag,.Lfe14-CB2_Bag
	.align	2, 0
	.globl	SetupBagMenu
	.type	 SetupBagMenu,function
	.thumb_func
SetupBagMenu:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L83
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r2, r1, #0
	cmp	r0, #0x14
	bls	.LCB450
	b	.L78	@long jump
.LCB450:
	lsl	r0, r0, #0x2
	ldr	r1, .L83+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L84:
	.align	2, 0
.L83:
	.word	gMain
	.word	.L79
	.align	2, 0
	.align	2, 0
.L79:
	.word	.L55
	.word	.L56
	.word	.L57
	.word	.L58
	.word	.L59
	.word	.L60
	.word	.L61
	.word	.L63
	.word	.L64
	.word	.L66
	.word	.L67
	.word	.L68
	.word	.L69
	.word	.L70
	.word	.L71
	.word	.L72
	.word	.L73
	.word	.L74
	.word	.L75
	.word	.L76
	.word	.L77
.L55:
	bl	SetVBlankHBlankCallbacksToNull
	bl	ClearScheduledBgCopiesToVram
	b	.L81
.L56:
	bl	ScanlineEffect_Stop
	ldr	r1, .L85
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L86:
	.align	2, 0
.L85:
	.word	gMain
.L57:
	bl	FreeAllSpritePalettes
	b	.L81
.L58:
	bl	ResetPaletteFade
	ldr	r2, .L87
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldr	r1, .L87+0x4
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L88:
	.align	2, 0
.L87:
	.word	gPaletteFade
	.word	gMain
.L59:
	bl	ResetSpriteData
	b	.L81
.L60:
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r2, r0
	b	.L82
.L61:
	bl	MenuHelpers_LinkSomething
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L62	@cond_branch
	bl	ResetTasks
.L62:
	ldr	r1, .L89
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L90:
	.align	2, 0
.L89:
	.word	gMain
.L63:
	bl	BagMenu_InitBGs
	ldr	r0, .L91
	ldr	r0, [r0]
	ldr	r1, .L91+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r1, .L91+0x8
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L92:
	.align	2, 0
.L91:
	.word	gBagMenu
	.word	0x83e
	.word	gMain
.L64:
	bl	LoadBagMenu_Graphics
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB582
	b	.L54	@long jump
.LCB582:
	b	.L81
.L66:
	bl	SetupBagMenu_Textboxes
	ldr	r1, .L93
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L94:
	.align	2, 0
.L93:
	.word	gMain
.L67:
	bl	All_CalculateNItemsAndMaxShowed
	bl	SetPocketListPositions
	bl	UpdatePocketScrollPositions
	b	.L81
.L68:
	bl	AllocateBagItemListBuffers
	ldr	r1, .L95
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L96:
	.align	2, 0
.L95:
	.word	gMain
.L69:
	ldr	r0, .L97
	ldrb	r0, [r0, #0x5]
	bl	LoadBagItemListBuffers
	b	.L81
.L98:
	.align	2, 0
.L97:
	.word	gBagPositionStruct
.L70:
	ldr	r1, .L99
	ldr	r4, .L99+0x4
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	BagMenu_PrintPocketNames
	mov	r0, #0x0
	bl	BagMenu_CopyPocketNameToWindow
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawPocketIndicatorSquare
	mov	r0, #0x1
	mov	r1, #0x0
	bl	DrawPocketIndicatorSquare
	mov	r0, #0x7
	mov	r1, #0x0
	bl	DrawPocketIndicatorSquare
	mov	r0, #0x8
	mov	r1, #0x0
	bl	DrawPocketIndicatorSquare
	mov	r0, #0x9
	mov	r1, #0x0
	bl	DrawPocketIndicatorSquare
	ldrb	r0, [r4, #0x5]
	mov	r1, #0x1
	bl	DrawPocketIndicatorSquare
	ldr	r1, .L99+0x8
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L100:
	.align	2, 0
.L99:
	.word	gPocketNamesStringsTable
	.word	gBagPositionStruct
	.word	gMain
.L71:
	ldr	r4, .L101
	ldrb	r0, [r4, #0x4]
	bl	CreateBagInputHandlerTask
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L101+0x4
	ldrb	r2, [r4, #0x5]
	lsl	r2, r2, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r1, r2, r1
	ldrh	r1, [r1]
	add	r4, r4, #0x8
	add	r2, r2, r4
	ldrh	r2, [r2]
	bl	ListMenuInit
	ldr	r2, .L101+0x8
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	strh	r0, [r1, #0x8]
	strh	r2, [r1, #0xe]
	strh	r2, [r1, #0x18]
	b	.L81
.L102:
	.align	2, 0
.L101:
	.word	gBagPositionStruct
	.word	gMultiuseListMenuTemplate
	.word	gTasks
.L72:
	ldr	r0, .L103
	ldrb	r0, [r0, #0x5]
	bl	AddBagVisualSprite
	ldr	r1, .L103+0x4
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L104:
	.align	2, 0
.L103:
	.word	gBagPositionStruct
	.word	gMain
.L73:
	bl	sub_80D4FAC
	b	.L81
.L74:
	bl	CreatePocketScrollArrowPair
	bl	CreatePocketSwitchArrowPair
	ldr	r1, .L105
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L106:
	.align	2, 0
.L105:
	.word	gMain
.L75:
	bl	BagMenu_PrepareTMHMMoveWindow
	b	.L81
.L76:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	ldr	r1, .L107
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L108:
	.align	2, 0
.L107:
	.word	gMain
.L77:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r2, .L109
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
.L81:
	ldr	r1, .L109+0x4
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
.L82:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L54
.L110:
	.align	2, 0
.L109:
	.word	gPaletteFade
	.word	gMain
.L78:
	ldr	r0, .L111
	bl	SetVBlankCallback
	ldr	r0, .L111+0x4
	bl	SetMainCallback2
	mov	r0, #0x1
	b	.L80
.L112:
	.align	2, 0
.L111:
	.word	VBlankCB_BagMenuRun
	.word	CB2_BagMenuRun
.L54:
	mov	r0, #0x0
.L80:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 SetupBagMenu,.Lfe15-SetupBagMenu
	.align	2, 0
	.globl	BagMenu_InitBGs
	.type	 BagMenu_InitBGs,function
	.thumb_func
BagMenu_InitBGs:
	push	{r4, lr}
	bl	ResetVramOamAndBgCntRegs
	ldr	r4, .L114
	ldr	r0, [r4]
	add	r0, r0, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	r1, #0x0
	bl	memset
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L114+0x4
	mov	r0, #0x0
	mov	r2, #0x3
	bl	InitBgsFromTemplates
	ldr	r1, [r4]
	add	r1, r1, #0x4
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	bl	ResetAllBgsCoordinates
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L115:
	.align	2, 0
.L114:
	.word	gBagMenu
	.word	sBgTemplates_ItemMenu
.Lfe16:
	.size	 BagMenu_InitBGs,.Lfe16-BagMenu_InitBGs
	.align	2, 0
	.globl	LoadBagMenu_Graphics
	.type	 LoadBagMenu_Graphics,function
	.thumb_func
LoadBagMenu_Graphics:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L134
	ldr	r0, [r4]
	ldr	r1, .L134+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x4
	bls	.LCB924
	b	.L129	@long jump
.LCB924:
	lsl	r0, r0, #0x2
	ldr	r1, .L134+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L135:
	.align	2, 0
.L134:
	.word	gBagMenu
	.word	0x83e
	.word	.L130
	.align	2, 0
	.align	2, 0
.L130:
	.word	.L118
	.word	.L119
	.word	.L121
	.word	.L124
	.word	.L128
.L118:
	bl	ResetTempTileDataBuffers
	ldr	r1, .L136
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	b	.L132
.L137:
	.align	2, 0
.L136:
	.word	gBagScreen_Gfx
.L119:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L117	@cond_branch
	ldr	r0, .L138
	ldr	r4, .L138+0x4
	ldr	r1, [r4]
	add	r1, r1, #0x4
	bl	LZDecompressWram
	ldr	r1, [r4]
	b	.L133
.L139:
	.align	2, 0
.L138:
	.word	gBagScreen_GfxTileMap
	.word	gBagMenu
.L121:
	bl	IsWallysBag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L122	@cond_branch
	ldr	r0, .L140
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	beq	.L122	@cond_branch
	ldr	r0, .L140+0x4
	mov	r1, #0x0
	mov	r2, #0x40
	bl	LoadCompressedPalette
	b	.L132
.L141:
	.align	2, 0
.L140:
	.word	gSaveBlock2Ptr
	.word	gBagScreenFemale_Pal
.L122:
	ldr	r0, .L142
	mov	r1, #0x0
	mov	r2, #0x40
	bl	LoadCompressedPalette
	b	.L132
.L143:
	.align	2, 0
.L142:
	.word	gBagScreenMale_Pal
.L124:
	bl	IsWallysBag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L126	@cond_branch
	ldr	r0, .L144
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L125	@cond_branch
.L126:
	ldr	r0, .L144+0x4
	bl	LoadCompressedSpriteSheet
	b	.L132
.L145:
	.align	2, 0
.L144:
	.word	gSaveBlock2Ptr
	.word	gBagMaleSpriteSheet
.L125:
	ldr	r0, .L146
	bl	LoadCompressedSpriteSheet
	b	.L132
.L147:
	.align	2, 0
.L146:
	.word	gBagFemaleSpriteSheet
.L128:
	ldr	r0, .L148
	bl	LoadCompressedSpritePalette
.L132:
	ldr	r0, .L148+0x4
	ldr	r1, [r0]
.L133:
	ldr	r0, .L148+0x8
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L117
.L149:
	.align	2, 0
.L148:
	.word	gBagPaletteTable
	.word	gBagMenu
	.word	0x83e
.L129:
	bl	LoadListMenuArrowsGfx
	ldr	r0, [r4]
	ldr	r1, .L150
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	mov	r0, #0x1
	b	.L131
.L151:
	.align	2, 0
.L150:
	.word	0x83e
.L117:
	mov	r0, #0x0
.L131:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 LoadBagMenu_Graphics,.Lfe17-LoadBagMenu_Graphics
	.align	2, 0
	.globl	CreateBagInputHandlerTask
	.type	 CreateBagInputHandlerTask,function
	.thumb_func
CreateBagInputHandlerTask:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xa
	bne	.L153	@cond_branch
	ldr	r0, .L156
	b	.L155
.L157:
	.align	2, 0
.L156:
	.word	Task_WallyTutorialBagMenu
.L153:
	ldr	r0, .L158
.L155:
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L159:
	.align	2, 0
.L158:
	.word	Task_BagMenu_HandleInput
.Lfe18:
	.size	 CreateBagInputHandlerTask,.Lfe18-CreateBagInputHandlerTask
	.align	2, 0
	.globl	AllocateBagItemListBuffers
	.type	 AllocateBagItemListBuffers,function
	.thumb_func
AllocateBagItemListBuffers:
	push	{r4, lr}
	ldr	r4, .L161
	mov	r0, #0xd1
	lsl	r0, r0, #0x3
	bl	Alloc
	str	r0, [r4]
	ldr	r4, .L161+0x4
	ldr	r0, .L161+0x8
	bl	Alloc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	sListBuffer1
	.word	sListBuffer2
	.word	0x1398
.Lfe19:
	.size	 AllocateBagItemListBuffers,.Lfe19-AllocateBagItemListBuffers
	.align	2, 0
	.globl	LoadBagItemListBuffers
	.type	 LoadBagItemListBuffers,function
	.thumb_func
LoadBagItemListBuffers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r7, #0x3
	ldr	r0, .L176
	add	r1, r1, r0
	mov	r8, r1
	ldr	r0, .L176+0x4
	ldr	r2, [r0]
	ldr	r1, .L176+0x8
	add	r0, r2, r1
	ldrb	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L164	@cond_branch
	mov	r6, #0x0
	ldr	r3, .L176+0xc
	add	r0, r2, r3
	add	r0, r0, r7
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r6, r0
	bge	.L166	@cond_branch
	ldr	r5, .L176+0x10
.L168:
	lsl	r4, r6, #0x1
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, r8
	ldr	r2, [r1]
	lsl	r1, r6, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	GetItemName
	ldr	r0, .L176+0x14
	ldr	r0, [r0]
	lsl	r1, r6, #0x3
	add	r1, r1, r0
	ldr	r0, [r5]
	add	r0, r0, r4
	str	r0, [r1]
	str	r6, [r1, #0x4]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L176+0x4
	ldr	r0, [r0]
	ldr	r3, .L176+0xc
	add	r0, r0, r3
	add	r0, r0, r7
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r6, r0
	blt	.L168	@cond_branch
.L166:
	ldr	r5, .L176+0x10
	lsl	r4, r6, #0x1
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	ldr	r0, [r5]
	add	r0, r0, r4
	ldr	r1, .L176+0x18
	bl	StringCopy
	ldr	r0, .L176+0x14
	ldr	r0, [r0]
	lsl	r1, r6, #0x3
	add	r1, r1, r0
	ldr	r0, [r5]
	add	r0, r0, r4
	str	r0, [r1]
	mov	r0, #0x2
	neg	r0, r0
	str	r0, [r1, #0x4]
	b	.L170
.L177:
	.align	2, 0
.L176:
	.word	gBagPockets
	.word	gBagMenu
	.word	0x81b
	.word	0x829
	.word	sListBuffer2
	.word	sListBuffer1
	.word	gText_CloseBag
.L164:
	mov	r6, #0x0
	ldr	r4, .L178
	add	r0, r2, r4
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r6, r0
	bcs	.L170	@cond_branch
	ldr	r5, .L178+0x4
.L174:
	lsl	r4, r6, #0x1
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, r8
	ldr	r2, [r1]
	lsl	r1, r6, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	GetItemName
	ldr	r0, .L178+0x8
	ldr	r0, [r0]
	lsl	r1, r6, #0x3
	add	r1, r1, r0
	ldr	r0, [r5]
	add	r0, r0, r4
	str	r0, [r1]
	str	r6, [r1, #0x4]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L178+0xc
	ldr	r0, [r0]
	ldr	r3, .L178
	add	r0, r0, r3
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r6, r0
	bcc	.L174	@cond_branch
.L170:
	ldr	r2, .L178+0x10
	add	r1, r2, #0
	ldr	r0, .L178+0x14
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldr	r0, .L178+0xc
	ldr	r1, [r0]
	ldr	r4, .L178
	add	r0, r1, r4
	add	r0, r0, r7
	ldrb	r0, [r0]
	strh	r0, [r2, #0xc]
	ldr	r0, .L178+0x8
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r5, .L178+0x18
	add	r1, r1, r5
	add	r1, r1, r7
	ldrb	r0, [r1]
	strh	r0, [r2, #0xe]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L179:
	.align	2, 0
.L178:
	.word	0x829
	.word	sListBuffer2
	.word	sListBuffer1
	.word	gBagMenu
	.word	gMultiuseListMenuTemplate
	.word	sItemListMenu
	.word	0x833
.Lfe20:
	.size	 LoadBagItemListBuffers,.Lfe20-LoadBagItemListBuffers
	.align	2, 0
	.globl	GetItemName
	.type	 GetItemName,function
	.thumb_func
GetItemName:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	ldr	r0, .L190
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x6
	beq	.L185	@cond_branch
	cmp	r0, #0x8
	bne	.L186	@cond_branch
	ldr	r4, .L190+0x4
	add	r0, r5, #0
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	ldr	r0, .L190+0x8
	add	r1, r1, r0
	add	r0, r4, #0
	bl	StringCopy
	ldr	r0, .L190+0xc
	cmp	r5, r0
	bls	.L183	@cond_branch
	ldr	r0, .L190+0x10
	ldr	r2, .L190+0x14
	add	r1, r5, r2
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L190+0x18
	b	.L188
.L191:
	.align	2, 0
.L190:
	.word	gBagPositionStruct
	.word	gStringVar2
	.word	gMoveNames
	.word	0x2a9
	.word	gStringVar1
	.word	-0x2a9
	.word	gText_ClearTo11Var1Clear5Var2
.L183:
	ldr	r0, .L192
	ldr	r2, .L192+0x4
	add	r1, r5, r2
	mov	r2, #0x2
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	b	.L189
.L193:
	.align	2, 0
.L192:
	.word	gStringVar1
	.word	-0x1e1
.L185:
	ldr	r0, .L194
	add	r1, r5, #0
	sub	r1, r1, #0x8f
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L194+0x4
	add	r0, r5, #0
	bl	CopyItemName
.L189:
	ldr	r1, .L194+0x8
.L188:
	add	r0, r6, #0
	bl	StringExpandPlaceholders
	b	.L181
.L195:
	.align	2, 0
.L194:
	.word	gStringVar1
	.word	gStringVar2
	.word	gText_NumberVar1Clear7Var2
.L186:
	add	r0, r5, #0
	add	r1, r6, #0
	bl	CopyItemName
.L181:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 GetItemName,.Lfe21-GetItemName
	.align	2, 0
	.globl	BagMenu_MoveCursorCallback
	.type	 BagMenu_MoveCursorCallback,function
	.thumb_func
BagMenu_MoveCursorCallback:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	beq	.L197	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	ShakeBagSprite
.L197:
	ldr	r4, .L202
	ldr	r1, [r4]
	ldr	r2, .L202+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L198	@cond_branch
	add	r2, r2, #0x1
	add	r0, r1, r2
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	mov	r0, #0x1
	eor	r0, r0, r1
	bl	RemoveBagItemIconSprite
	mov	r0, #0x2
	neg	r0, r0
	cmp	r6, r0
	beq	.L199	@cond_branch
	ldr	r0, .L202+0x8
	ldrb	r0, [r0, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [r4]
	ldr	r2, .L202+0xc
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	bl	AddBagItemIconSprite
	b	.L200
.L203:
	.align	2, 0
.L202:
	.word	gBagMenu
	.word	0x81a
	.word	gBagPositionStruct
	.word	0x81b
.L199:
	ldr	r0, .L204
	ldr	r1, [r4]
	ldr	r2, .L204+0x4
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	bl	AddBagItemIconSprite
.L200:
	ldr	r5, .L204+0x8
	ldr	r2, [r5]
	ldr	r4, .L204+0x4
	add	r2, r2, r4
	ldrb	r3, [r2]
	lsl	r0, r3, #0x1a
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x4
	mov	r0, #0x31
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L198	@cond_branch
	add	r0, r6, #0
	bl	BagMenu_PrintDescription
.L198:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L205:
	.align	2, 0
.L204:
	.word	0xffff
	.word	0x81b
	.word	gBagMenu
.Lfe22:
	.size	 BagMenu_MoveCursorCallback,.Lfe22-BagMenu_MoveCursorCallback
	.align	2, 0
	.globl	BagMenu_ItemPrintCallback
	.type	 BagMenu_ItemPrintCallback,function
	.thumb_func
BagMenu_ItemPrintCallback:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	bne	.LCB1682
	b	.L207	@long jump
.LCB1682:
	ldr	r0, .L220
	ldr	r0, [r0]
	ldr	r1, .L220+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	cmp	r1, #0xff
	beq	.L208	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	bne	.L209	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x2
	bl	BagMenu_PrintCursor
	b	.L208
.L221:
	.align	2, 0
.L220:
	.word	gBagMenu
	.word	0x81a
.L209:
	add	r0, r6, #0
	mov	r1, #0xff
	bl	BagMenu_PrintCursor
.L208:
	ldr	r5, .L222
	ldrb	r0, [r5, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r1, r4, #0
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldrb	r0, [r5, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	BagGetQuantityByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r9, r4
	ldr	r1, .L222+0x4
	add	r0, r7, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7
	bhi	.L211	@cond_branch
	ldr	r1, .L222+0x8
	sub	r3, r6, #0x1
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x10
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, r8
	mov	r2, #0x8
	bl	BlitBitmapToWindow
.L211:
	ldrb	r0, [r5, #0x5]
	cmp	r0, #0x6
	bne	.L212	@cond_branch
	ldr	r0, .L222+0xc
	add	r1, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L222+0x10
	ldr	r1, .L222+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x7
	add	r1, r4, #0
	mov	r2, #0x77
	bl	GetStringRightAlignXOffset
	lsl	r3, r0, #0x18
	lsr	r3, r3, #0x18
	str	r6, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	str	r1, [sp, #0x10]
	b	.L219
.L223:
	.align	2, 0
.L222:
	.word	gBagPositionStruct
	.word	-0x2aa
	.word	gBagMenuHMIcon_Gfx
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_xVar1
.L212:
	cmp	r0, #0x9
	beq	.L214	@cond_branch
	add	r0, r7, #0
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L214	@cond_branch
	ldr	r0, .L224
	mov	r1, r9
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L224+0x4
	ldr	r1, .L224+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x7
	add	r1, r4, #0
	mov	r2, #0x77
	bl	GetStringRightAlignXOffset
	lsl	r3, r0, #0x18
	lsr	r3, r3, #0x18
	str	r6, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	str	r5, [sp, #0x10]
.L219:
	mov	r0, r8
	mov	r1, #0x7
	add	r2, r4, #0
	bl	BagMenu_Print
	b	.L207
.L225:
	.align	2, 0
.L224:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_xVar1
.L214:
	ldr	r0, .L226
	ldr	r0, [r0]
	ldr	r1, .L226+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L216	@cond_branch
	cmp	r0, r7
	bne	.L216	@cond_branch
	ldr	r1, .L226+0x8
	sub	r3, r6, #0x1
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x18
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	mov	r0, r8
	mov	r2, #0x60
	bl	BlitBitmapToWindow
.L216:
	ldr	r0, .L226
	ldr	r0, [r0]
	ldr	r1, .L226+0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L217	@cond_branch
	cmp	r0, r7
	bne	.L217	@cond_branch
	ldr	r1, .L226+0x10
	sub	r3, r6, #0x1
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x18
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	mov	r0, r8
	mov	r2, #0x60
	bl	BlitBitmapToWindow
.L217:
	ldr	r0, .L226
	ldr	r0, [r0]
	ldr	r1, .L226+0x14
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L207	@cond_branch
	cmp	r0, r7
	bne	.L207	@cond_branch
	ldr	r1, .L226+0x18
	sub	r3, r6, #0x1
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x18
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	mov	r0, r8
	mov	r2, #0x60
	bl	BlitBitmapToWindow
.L207:
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L227:
	.align	2, 0
.L226:
	.word	gSaveBlock1Ptr
	.word	0x496
	.word	sSelectButtonGfx
	.word	0x361c
	.word	sLButtonGfx
	.word	0x361e
	.word	sRButtonGfx
.Lfe23:
	.size	 BagMenu_ItemPrintCallback,.Lfe23-BagMenu_ItemPrintCallback
	.align	2, 0
	.globl	BagMenu_PrintDescription
	.type	 BagMenu_PrintDescription,function
	.thumb_func
BagMenu_PrintDescription:
	push	{r4, lr}
	add	sp, sp, #-0x14
	add	r1, r0, #0
	mov	r0, #0x2
	neg	r0, r0
	cmp	r1, r0
	beq	.L229	@cond_branch
	ldr	r0, .L231
	ldrb	r0, [r0, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetDescription
	add	r4, r0, #0
	b	.L230
.L232:
	.align	2, 0
.L231:
	.word	gBagPositionStruct
.L229:
	ldr	r0, .L233
	ldr	r2, .L233+0x4
	ldr	r1, .L233+0x8
	ldrb	r1, [r1, #0x4]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r4, .L233+0xc
	ldr	r1, .L233+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
.L230:
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	BagMenu_Print
	add	sp, sp, #0x14
	pop	{r4}
	pop	{r0}
	bx	r0
.L234:
	.align	2, 0
.L233:
	.word	gStringVar1
	.word	gReturnToXStringsTable
	.word	gBagPositionStruct
	.word	gStringVar4
	.word	gText_ReturnToVar1
.Lfe24:
	.size	 BagMenu_PrintDescription,.Lfe24-BagMenu_PrintDescription
	.align	2, 0
	.globl	BagMenu_PrintCursor_
	.type	 BagMenu_PrintCursor_,function
	.thumb_func
BagMenu_PrintCursor_:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	ListMenuGetYCoordForPrintingArrowCursor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	BagMenu_PrintCursor
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 BagMenu_PrintCursor_,.Lfe25-BagMenu_PrintCursor_
	.align	2, 0
	.globl	BagMenu_PrintCursor
	.type	 BagMenu_PrintCursor,function
	.thumb_func
BagMenu_PrintCursor:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0xff
	bne	.L237	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x0
	bl	GetMenuCursorDimensionByFont
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	mov	r1, #0x1
	bl	GetMenuCursorDimensionByFont
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r4, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	add	r3, r5, #0
	bl	FillWindowPixelRect
	b	.L238
.L237:
	ldr	r2, .L239
	str	r5, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r1, [sp, #0x10]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	BagMenu_Print
.L238:
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L240:
	.align	2, 0
.L239:
	.word	gText_SelectorArrow2
.Lfe26:
	.size	 BagMenu_PrintCursor,.Lfe26-BagMenu_PrintCursor
	.align	2, 0
	.globl	CreatePocketScrollArrowPair
	.type	 CreatePocketScrollArrowPair,function
	.thumb_func
CreatePocketScrollArrowPair:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	ldr	r5, .L243
	ldr	r4, [r5]
	ldr	r1, .L243+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L242	@cond_branch
	ldr	r2, .L243+0x8
	ldrb	r3, [r2, #0x5]
	ldr	r6, .L243+0xc
	add	r0, r4, r6
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r6, r6, #0xa
	add	r0, r4, r6
	add	r0, r0, r3
	ldrb	r0, [r0]
	sub	r1, r1, r0
	str	r1, [sp]
	mov	r0, #0x6e
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x1
	add	r2, r2, #0x1c
	add	r0, r0, r2
	str	r0, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0xac
	mov	r2, #0xc
	mov	r3, #0x94
	bl	AddScrollIndicatorArrowPairParameterized
	ldr	r1, [r5]
	ldr	r2, .L243+0x4
	add	r1, r1, r2
	strb	r0, [r1]
.L242:
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L244:
	.align	2, 0
.L243:
	.word	gBagMenu
	.word	0x81e
	.word	gBagPositionStruct
	.word	0x829
.Lfe27:
	.size	 CreatePocketScrollArrowPair,.Lfe27-CreatePocketScrollArrowPair
	.align	2, 0
	.globl	BagDestroyPocketScrollArrowPair
	.type	 BagDestroyPocketScrollArrowPair,function
	.thumb_func
BagDestroyPocketScrollArrowPair:
	push	{r4, lr}
	ldr	r4, .L247
	ldr	r0, [r4]
	ldr	r2, .L247+0x4
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L246	@cond_branch
	bl	RemoveScrollIndicatorArrowPair
	ldr	r0, [r4]
	ldr	r1, .L247+0x4
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
.L246:
	bl	BagDestroyPocketSwitchArrowPair
	pop	{r4}
	pop	{r0}
	bx	r0
.L248:
	.align	2, 0
.L247:
	.word	gBagMenu
	.word	0x81e
.Lfe28:
	.size	 BagDestroyPocketScrollArrowPair,.Lfe28-BagDestroyPocketScrollArrowPair
	.align	2, 0
	.globl	CreatePocketSwitchArrowPair
	.type	 CreatePocketSwitchArrowPair,function
	.thumb_func
CreatePocketSwitchArrowPair:
	push	{r4, lr}
	ldr	r4, .L251
	ldr	r2, [r4]
	ldr	r1, .L251+0x4
	add	r0, r2, r1
	ldrb	r1, [r0]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	beq	.L250	@cond_branch
	ldr	r1, .L251+0x8
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L250	@cond_branch
	ldr	r0, .L251+0xc
	ldr	r1, .L251+0x10
	bl	AddScrollIndicatorArrowPair
	ldr	r1, [r4]
	ldr	r2, .L251+0x8
	add	r1, r1, r2
	strb	r0, [r1]
.L250:
	pop	{r4}
	pop	{r0}
	bx	r0
.L252:
	.align	2, 0
.L251:
	.word	gBagMenu
	.word	0x81b
	.word	0x81f
	.word	sBagScrollArrowsTemplate
	.word	gBagPositionStruct+0x6
.Lfe29:
	.size	 CreatePocketSwitchArrowPair,.Lfe29-CreatePocketSwitchArrowPair
	.align	2, 0
	.globl	BagDestroyPocketSwitchArrowPair
	.type	 BagDestroyPocketSwitchArrowPair,function
	.thumb_func
BagDestroyPocketSwitchArrowPair:
	push	{r4, lr}
	ldr	r4, .L255
	ldr	r0, [r4]
	ldr	r2, .L255+0x4
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L254	@cond_branch
	bl	RemoveScrollIndicatorArrowPair
	ldr	r0, [r4]
	ldr	r1, .L255+0x4
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
.L254:
	pop	{r4}
	pop	{r0}
	bx	r0
.L256:
	.align	2, 0
.L255:
	.word	gBagMenu
	.word	0x81f
.Lfe30:
	.size	 BagDestroyPocketSwitchArrowPair,.Lfe30-BagDestroyPocketSwitchArrowPair
	.align	2, 0
	.globl	FreeBagItemListBuffers
	.type	 FreeBagItemListBuffers,function
	.thumb_func
FreeBagItemListBuffers:
	push	{lr}
	ldr	r0, .L258
	ldr	r0, [r0]
	bl	Free
	ldr	r0, .L258+0x4
	ldr	r0, [r0]
	bl	Free
	bl	FreeAllWindowBuffers
	ldr	r0, .L258+0x8
	ldr	r0, [r0]
	bl	Free
	pop	{r0}
	bx	r0
.L259:
	.align	2, 0
.L258:
	.word	sListBuffer2
	.word	sListBuffer1
	.word	gBagMenu
.Lfe31:
	.size	 FreeBagItemListBuffers,.Lfe31-FreeBagItemListBuffers
	.align	2, 0
	.globl	Task_FadeAndCloseBagMenu
	.type	 Task_FadeAndCloseBagMenu,function
	.thumb_func
Task_FadeAndCloseBagMenu:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L261
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L261+0x4
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L262:
	.align	2, 0
.L261:
	.word	gTasks
	.word	TaskCloseBagMenu_2
.Lfe32:
	.size	 Task_FadeAndCloseBagMenu,.Lfe32-Task_FadeAndCloseBagMenu
	.align	2, 0
	.globl	TaskCloseBagMenu_2
	.type	 TaskCloseBagMenu_2,function
	.thumb_func
TaskCloseBagMenu_2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L267
	add	r2, r0, r1
	ldr	r0, .L267+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L264	@cond_branch
	ldrb	r0, [r2]
	ldr	r4, .L267+0x8
	ldrb	r2, [r4, #0x5]
	lsl	r2, r2, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r1, r2, r1
	add	r3, r4, #0
	add	r3, r3, #0x8
	add	r2, r2, r3
	bl	DestroyListMenuTask
	ldr	r0, .L267+0xc
	ldr	r0, [r0]
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L265	@cond_branch
	bl	SetMainCallback2
	b	.L266
.L268:
	.align	2, 0
.L267:
	.word	gTasks+0x8
	.word	gPaletteFade
	.word	gBagPositionStruct
	.word	gBagMenu
.L265:
	ldr	r0, [r4]
	bl	SetMainCallback2
.L266:
	bl	BagDestroyPocketScrollArrowPair
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	FreeBagItemListBuffers
	add	r0, r5, #0
	bl	DestroyTask
.L264:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 TaskCloseBagMenu_2,.Lfe33-TaskCloseBagMenu_2
	.align	2, 0
	.globl	UpdatePocketItemList
	.type	 UpdatePocketItemList,function
	.thumb_func
UpdatePocketItemList:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r5, #0x3
	ldr	r0, .L282
	add	r4, r1, r0
	add	r0, r4, #0
	bl	CompactItemsInBagPocket
	ldr	r6, .L282+0x4
	ldr	r0, [r6]
	ldr	r3, .L282+0x8
	add	r0, r0, r3
	add	r0, r0, r5
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r2, #0x0
	ldrb	r0, [r4, #0x4]
	cmp	r2, r0
	bcs	.L274	@cond_branch
	ldr	r0, [r4]
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L274	@cond_branch
.L276:
	ldr	r0, [r6]
	add	r0, r0, r3
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrb	r1, [r4, #0x4]
	cmp	r2, r1
	bcs	.L274	@cond_branch
	ldr	r0, [r4]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L276	@cond_branch
.L274:
	ldr	r3, .L282+0x4
	ldr	r2, [r3]
	ldr	r1, .L282+0xc
	add	r0, r2, r1
	ldrb	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L279	@cond_branch
	ldr	r0, .L282+0x8
	add	r1, r2, r0
	add	r1, r1, r5
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L279:
	ldr	r1, [r3]
	ldr	r2, .L282+0x8
	add	r0, r1, r2
	add	r0, r0, r5
	ldrb	r2, [r0]
	cmp	r2, #0x8
	bls	.L280	@cond_branch
	ldr	r3, .L282+0x10
	add	r0, r1, r3
	add	r0, r0, r5
	mov	r1, #0x8
	strb	r1, [r0]
	b	.L281
.L283:
	.align	2, 0
.L282:
	.word	gBagPockets
	.word	gBagMenu
	.word	0x829
	.word	0x81b
	.word	0x833
.L280:
	ldr	r3, .L284
	add	r0, r1, r3
	add	r0, r0, r5
	strb	r2, [r0]
.L281:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	0x833
.Lfe34:
	.size	 UpdatePocketItemList,.Lfe34-UpdatePocketItemList
	.align	2, 0
	.globl	All_CalculateNItemsAndMaxShowed
	.type	 All_CalculateNItemsAndMaxShowed,function
	.thumb_func
All_CalculateNItemsAndMaxShowed:
	push	{r4, lr}
	mov	r4, #0x0
.L290:
	add	r0, r4, #0
	bl	UpdatePocketItemList
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x9
	bls	.L290	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 All_CalculateNItemsAndMaxShowed,.Lfe35-All_CalculateNItemsAndMaxShowed
	.align	2, 0
	.globl	SetInitialScrollAndCursorPositions
	.type	 SetInitialScrollAndCursorPositions,function
	.thumb_func
SetInitialScrollAndCursorPositions:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	ldr	r2, .L293
	add	r4, r1, r2
	sub	r2, r2, #0x14
	add	r1, r1, r2
	ldr	r2, .L293+0x4
	ldr	r3, [r2]
	ldr	r5, .L293+0x8
	add	r2, r3, r5
	add	r2, r2, r0
	ldrb	r2, [r2]
	sub	r5, r5, #0xa
	add	r3, r3, r5
	add	r3, r3, r0
	ldrb	r3, [r3]
	add	r0, r4, #0
	bl	sub_812225C
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	gBagPositionStruct+0x1c
	.word	gBagMenu
	.word	0x833
.Lfe36:
	.size	 SetInitialScrollAndCursorPositions,.Lfe36-SetInitialScrollAndCursorPositions
	.align	2, 0
	.type	 SetPocketListPositions,function
	.thumb_func
SetPocketListPositions:
	push	{r4, lr}
	mov	r4, #0x0
.L299:
	add	r0, r4, #0
	bl	SetInitialScrollAndCursorPositions
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x9
	bls	.L299	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 SetPocketListPositions,.Lfe37-SetPocketListPositions
	.align	2, 0
	.globl	UpdatePocketScrollPositions
	.type	 UpdatePocketScrollPositions,function
	.thumb_func
UpdatePocketScrollPositions:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	mov	r5, #0x0
	ldr	r6, .L307
	add	r7, r6, #0
	sub	r7, r7, #0x14
.L305:
	lsl	r1, r5, #0x1
	add	r0, r1, r6
	add	r1, r1, r7
	ldr	r2, .L307+0x4
	ldr	r3, [r2]
	ldr	r4, .L307+0x8
	add	r2, r3, r4
	add	r2, r2, r5
	ldrb	r2, [r2]
	sub	r4, r4, #0xa
	add	r3, r3, r4
	add	r3, r3, r5
	ldrb	r3, [r3]
	mov	r4, #0x8
	str	r4, [sp]
	bl	sub_8122298
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x9
	bls	.L305	@cond_branch
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L308:
	.align	2, 0
.L307:
	.word	gBagPositionStruct+0x1c
	.word	gBagMenu
	.word	0x833
.Lfe38:
	.size	 UpdatePocketScrollPositions,.Lfe38-UpdatePocketScrollPositions
	.align	2, 0
	.globl	GetItemListPosition
	.type	 GetItemListPosition,function
	.thumb_func
GetItemListPosition:
	lsl	r0, r0, #0x18
	ldr	r1, .L310
	lsr	r0, r0, #0x17
	add	r2, r1, #0
	add	r2, r2, #0x1c
	add	r2, r0, r2
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldrb	r2, [r2]
	add	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.L311:
	.align	2, 0
.L310:
	.word	gBagPositionStruct
.Lfe39:
	.size	 GetItemListPosition,.Lfe39-GetItemListPosition
	.align	2, 0
	.globl	DisplayItemMessage
	.type	 DisplayItemMessage,function
	.thumb_func
DisplayItemMessage:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r8, r2
	mov	r9, r3
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L313
	add	r4, r4, r0
	mov	r0, #0x4
	bl	AddItemMessageWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x14]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	bl	GetPlayerTextSpeedDelay
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4, #0x14]
	str	r6, [sp]
	str	r0, [sp, #0x4]
	mov	r0, r8
	str	r0, [sp, #0x8]
	mov	r0, r9
	str	r0, [sp, #0xc]
	add	r0, r5, #0
	mov	r2, #0xa
	mov	r3, #0xd
	bl	DisplayMessageAndContinueTask
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L314:
	.align	2, 0
.L313:
	.word	gTasks+0x8
.Lfe40:
	.size	 DisplayItemMessage,.Lfe40-DisplayItemMessage
	.align	2, 0
	.globl	BagMenu_InitListsMenu
	.type	 BagMenu_InitListsMenu,function
	.thumb_func
BagMenu_InitListsMenu:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r6, #0x2
	add	r5, r5, r6
	lsl	r5, r5, #0x3
	ldr	r0, .L316
	add	r5, r5, r0
	ldr	r7, .L316+0x4
	ldrb	r4, [r7, #0x5]
	lsl	r4, r4, #0x1
	mov	r0, #0x1c
	add	r0, r0, r7
	mov	r8, r0
	add	r8, r8, r4
	add	r0, r7, #0
	add	r0, r0, #0x8
	add	r4, r4, r0
	mov	r0, #0x4
	bl	BagMenu_RemoveBagItemMessageindow
	ldrb	r0, [r5]
	mov	r1, r8
	add	r2, r4, #0
	bl	DestroyListMenuTask
	ldrb	r0, [r7, #0x5]
	bl	UpdatePocketItemList
	ldrb	r0, [r7, #0x5]
	bl	SetInitialScrollAndCursorPositions
	ldrb	r0, [r7, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L316+0x8
	mov	r2, r8
	ldrh	r1, [r2]
	ldrh	r2, [r4]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r6, #0
	bl	set_callback3_to_bag
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L317:
	.align	2, 0
.L316:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gMultiuseListMenuTemplate
.Lfe41:
	.size	 BagMenu_InitListsMenu,.Lfe41-BagMenu_InitListsMenu
	.align	2, 0
	.globl	sub_81ABC3C
	.type	 sub_81ABC3C,function
	.thumb_func
sub_81ABC3C:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	BagMenu_AddWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	PrintItemDepositAmount
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 sub_81ABC3C,.Lfe42-sub_81ABC3C
	.align	2, 0
	.globl	PrintItemDepositAmount
	.type	 PrintItemDepositAmount,function
	.thumb_func
PrintItemDepositAmount:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L322
	ldrb	r0, [r0, #0x5]
	mov	r3, #0x2
	cmp	r0, #0x6
	bne	.L320	@cond_branch
	mov	r3, #0x3
.L320:
	ldr	r0, .L322+0x4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L322+0x8
	ldr	r1, .L322+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	add	r1, r4, #0
	mov	r2, #0x28
	bl	GetStringCenterAlignXOffset
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L323:
	.align	2, 0
.L322:
	.word	gBagPositionStruct
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_xVar1
.Lfe43:
	.size	 PrintItemDepositAmount,.Lfe43-PrintItemDepositAmount
	.align	2, 0
	.globl	PrintItemSoldAmount
	.type	 PrintItemSoldAmount,function
	.thumb_func
PrintItemSoldAmount:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	add	r7, r2, #0
	ldr	r0, .L327
	ldrb	r0, [r0, #0x5]
	mov	r3, #0x2
	cmp	r0, #0x6
	bne	.L325	@cond_branch
	mov	r3, #0x3
.L325:
	ldr	r0, .L327+0x4
	mov	r2, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r6, .L327+0x8
	ldr	r1, .L327+0xc
	add	r0, r6, #0
	bl	StringExpandPlaceholders
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r5, #0x0
	str	r5, [sp, #0x8]
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r6, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	str	r5, [sp]
	add	r0, r4, #0
	mov	r1, #0x26
	mov	r2, #0x1
	add	r3, r7, #0
	bl	PrintMoneyAmount
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L328:
	.align	2, 0
.L327:
	.word	gBagPositionStruct
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_xVar1
.Lfe44:
	.size	 PrintItemSoldAmount,.Lfe44-PrintItemSoldAmount
	.section .rodata
	.type	 sText_NothingToSort.135,object
sText_NothingToSort.135:
	.byte	0xce
	.byte	0xdc
	.byte	0xd9
	.byte	0xe6
	.byte	0xd9
	.byte	0xb4
	.byte	0xe7
	.byte	0x0
	.byte	0xe2
	.byte	0xe3
	.byte	0xe8
	.byte	0xdc
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0x0
	.byte	0xe7
	.byte	0xe3
	.byte	0xe6
	.byte	0xe8
	.byte	0xab
	.byte	0xff
.text
	.align	2, 0
	.globl	Task_BagMenu_HandleInput
	.type	 Task_BagMenu_HandleInput,function
	.thumb_func
Task_BagMenu_HandleInput:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	str	r0, [sp]
	ldr	r1, .L354
	add	r6, r0, r1
	ldr	r5, .L354+0x4
	ldrb	r0, [r5, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r1, r1, r0
	mov	r9, r1
	ldr	r2, .L354+0x8
	add	r0, r0, r2
	mov	sl, r0
	bl	MenuHelpers_CallLinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB3115
	b	.L329	@long jump
.LCB3115:
	ldr	r0, .L354+0xc
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB3123
	b	.L329	@long jump
.LCB3123:
	bl	GetSwitchBagPocketDirection
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L332	@cond_branch
	cmp	r0, #0x2
	beq	.L333	@cond_branch
	ldr	r0, .L354+0x10
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L335	@cond_branch
	bl	CanSwapItems
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB3147
	b	.L329	@long jump
.LCB3147:
	b	.L352
.L355:
	.align	2, 0
.L354:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gBagPositionStruct+0x8
	.word	gPaletteFade
	.word	gMain
.L332:
	mov	r1, #0x1
	neg	r1, r1
	add	r0, r7, #0
	b	.L353
.L333:
	add	r0, r7, #0
	mov	r1, #0x1
.L353:
	mov	r2, #0x0
	bl	SwitchBagPocket
	b	.L329
.L352:
	ldrb	r0, [r6]
	mov	r1, r9
	mov	r2, sl
	bl	ListMenuGetScrollAndRow
	mov	r3, r9
	ldrh	r2, [r3]
	mov	r1, sl
	ldrh	r0, [r1]
	add	r2, r2, r0
	ldr	r0, .L356
	ldr	r0, [r0]
	ldr	r1, .L356+0x4
	ldr	r3, .L356+0x8
	add	r0, r0, r3
	ldrb	r1, [r1, #0x5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r2, r0
	bne	.LCB3207
	b	.L329	@long jump
.LCB3207:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r7, #0
	bl	BagMenu_SwapItems
	b	.L329
.L357:
	.align	2, 0
.L356:
	.word	gBagMenu
	.word	gBagPositionStruct
	.word	0x829
.L335:
	mov	r0, #0x8
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	cmp	r0, #0
	beq	.L339	@cond_branch
	ldr	r4, .L358
	ldr	r0, [r4]
	ldrb	r1, [r5, #0x5]
	ldr	r2, .L358+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r0, #0x1
	bgt	.L340	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L358+0x8
	ldr	r3, .L358+0xc
	add	r0, r7, #0
	mov	r1, #0x1
	bl	DisplayItemMessage
	b	.L329
.L359:
	.align	2, 0
.L358:
	.word	gBagMenu
	.word	0x829
	.word	sText_NothingToSort.135
	.word	sub_81AD350
.L340:
	add	r0, r1, #0
	bl	GetItemListPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x2]
	ldrb	r0, [r5, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	bl	BagGetQuantityByPocketPosition
	strh	r0, [r6, #0x4]
	ldrb	r2, [r5, #0x5]
	lsl	r0, r2, #0x1
	ldr	r3, .L360
	add	r0, r0, r3
	ldrh	r1, [r0]
	ldr	r0, [r4]
	ldr	r3, .L360+0x4
	add	r0, r0, r3
	add	r0, r0, r2
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	beq	.L329	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	bl	BagGetItemIdByPocketPosition
	ldr	r1, .L360+0x8
	strh	r0, [r1]
	mov	r0, #0x5
	bl	PlaySE
	bl	BagDestroyPocketScrollArrowPair
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	BagMenu_PrintCursor_
	ldrb	r0, [r6]
	mov	r1, r9
	mov	r2, sl
	bl	ListMenuGetScrollAndRow
	ldr	r0, .L360+0xc
	sub	r0, r0, #0x8
	ldr	r1, [sp]
	add	r0, r1, r0
	ldr	r1, .L360+0x10
	str	r1, [r0]
	b	.L329
.L361:
	.align	2, 0
.L360:
	.word	gBagPositionStruct+0x8
	.word	0x829
	.word	gSpecialVar_ItemId
	.word	gTasks+0x8
	.word	Task_LoadBagSortOptions
.L339:
	ldrb	r0, [r6]
	bl	ListMenu_ProcessInput
	add	r4, r0, #0
	ldrb	r0, [r6]
	mov	r1, r9
	mov	r2, sl
	bl	ListMenuGetScrollAndRow
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L346	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L348	@cond_branch
	b	.L329
.L346:
	ldrb	r0, [r5, #0x4]
	cmp	r0, #0x5
	bne	.L347	@cond_branch
	mov	r0, #0x20
	bl	PlaySE
	b	.L329
.L347:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L362
	mov	r2, r8
	strh	r2, [r0]
	ldr	r0, .L362+0x4
	sub	r0, r0, #0x8
	ldr	r3, [sp]
	add	r0, r3, r0
	ldr	r1, .L362+0x8
	str	r1, [r0]
	b	.L329
.L363:
	.align	2, 0
.L362:
	.word	gSpecialVar_ItemId
	.word	gTasks+0x8
	.word	Task_FadeAndCloseBagMenu
.L348:
	mov	r0, #0x5
	bl	PlaySE
	bl	BagDestroyPocketScrollArrowPair
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	BagMenu_PrintCursor_
	strh	r4, [r6, #0x2]
	ldrb	r0, [r5, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r1, r4, #0
	bl	BagGetQuantityByPocketPosition
	strh	r0, [r6, #0x4]
	ldrb	r0, [r5, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	BagGetItemIdByPocketPosition
	ldr	r1, .L364
	strh	r0, [r1]
	ldr	r1, .L364+0x4
	ldrb	r0, [r5, #0x4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r7, #0
	bl	_call_via_r1
.L329:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L365:
	.align	2, 0
.L364:
	.word	gSpecialVar_ItemId
	.word	gUnknown_08614054
.Lfe45:
	.size	 Task_BagMenu_HandleInput,.Lfe45-Task_BagMenu_HandleInput
	.align	2, 0
	.globl	set_callback3_to_bag
	.type	 set_callback3_to_bag,function
	.thumb_func
set_callback3_to_bag:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	CreatePocketScrollArrowPair
	bl	CreatePocketSwitchArrowPair
	mov	r0, #0x3
	bl	ClearWindowTilemap
	mov	r0, #0x4
	bl	ClearWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L367
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L367+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L368:
	.align	2, 0
.L367:
	.word	gTasks
	.word	Task_BagMenu_HandleInput
.Lfe46:
	.size	 set_callback3_to_bag,.Lfe46-set_callback3_to_bag
	.align	2, 0
	.type	 GetSwitchBagPocketDirection,function
	.thumb_func
GetSwitchBagPocketDirection:
	push	{lr}
	ldr	r0, .L376
	ldr	r0, [r0]
	ldr	r1, .L376+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L373	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L376+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L372	@cond_branch
	cmp	r2, #0x1
	bne	.L371	@cond_branch
.L372:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	b	.L375
.L377:
	.align	2, 0
.L376:
	.word	gBagMenu
	.word	0x81b
	.word	gMain
.L371:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L374	@cond_branch
	cmp	r2, #0x2
	bne	.L373	@cond_branch
.L374:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x2
	b	.L375
.L373:
	mov	r0, #0x0
.L375:
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 GetSwitchBagPocketDirection,.Lfe47-GetSwitchBagPocketDirection
	.align	2, 0
	.type	 ChangeBagPocketId,function
	.thumb_func
ChangeBagPocketId:
	push	{r4, lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	asr	r1, r1, #0x18
	cmp	r1, #0x1
	bne	.L379	@cond_branch
	ldrb	r0, [r2]
	cmp	r0, #0x9
	bne	.L379	@cond_branch
	mov	r0, #0x0
	b	.L383
.L379:
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x1
	neg	r1, r1
	ldrb	r3, [r2]
	cmp	r0, r1
	bne	.L381	@cond_branch
	cmp	r3, #0
	bne	.L381	@cond_branch
	mov	r0, #0x9
	b	.L383
.L381:
	add	r0, r3, r4
.L383:
	strb	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 ChangeBagPocketId,.Lfe48-ChangeBagPocketId
	.align	2, 0
	.type	 SwitchBagPocket,function
	.thumb_func
SwitchBagPocket:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	lsl	r2, r2, #0x10
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L388
	add	r4, r0, r1
	mov	r0, #0x0
	strh	r0, [r4, #0x1a]
	strh	r0, [r4, #0x18]
	strh	r5, [r4, #0x16]
	cmp	r2, #0
	bne	.L385	@cond_branch
	mov	r0, #0x0
	bl	ClearWindowTilemap
	mov	r0, #0x1
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	ldr	r3, .L388+0x4
	ldrb	r2, [r3, #0x5]
	lsl	r2, r2, #0x1
	add	r1, r3, #0
	add	r1, r1, #0x1c
	add	r1, r2, r1
	add	r3, r3, #0x8
	add	r2, r2, r3
	bl	DestroyListMenuTask
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r3, .L388+0x8
	ldr	r0, .L388+0xc
	ldr	r2, [r0]
	ldr	r1, .L388+0x10
	add	r0, r2, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	mov	r0, #0x1
	eor	r0, r0, r1
	add	r2, r2, r0
	ldr	r0, .L388+0x14
	add	r2, r2, r0
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	bl	BagDestroyPocketScrollArrowPair
.L385:
	ldr	r4, .L388+0x4
	ldrb	r1, [r4, #0x5]
	add	r0, sp, #0x8
	strb	r1, [r0]
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	bl	ChangeBagPocketId
	lsl	r0, r5, #0x10
	asr	r1, r0, #0x10
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L386	@cond_branch
	ldr	r2, .L388+0x18
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	add	r1, sp, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	BagMenu_PrintPocketNames
	mov	r0, #0x0
	bl	BagMenu_CopyPocketNameToWindow
	b	.L387
.L389:
	.align	2, 0
.L388:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gSprites
	.word	gBagMenu
	.word	0x81b
	.word	0x806
	.word	gPocketNamesStringsTable
.L386:
	ldr	r2, .L390
	add	r0, sp, #0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	BagMenu_PrintPocketNames
	mov	r0, #0x8
	bl	BagMenu_CopyPocketNameToWindow
.L387:
	ldr	r0, .L390+0x4
	ldrb	r0, [r0, #0x5]
	mov	r1, #0x0
	bl	DrawPocketIndicatorSquare
	add	r0, sp, #0x8
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	DrawPocketIndicatorSquare
	mov	r0, #0xf
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	mov	r1, #0xb
	mov	r2, #0xe
	mov	r3, #0x2
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	add	r0, sp, #0x8
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	SetBagVisualPocketId
	mov	r0, #0x1
	bl	RemoveBagSprite
	asr	r0, r5, #0x10
	bl	AddSwitchPocketRotatingBallSprite
	ldr	r1, .L390+0x8
	ldr	r2, .L390+0xc
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r2, [r0]
	add	r0, r6, #0
	bl	SetTaskFuncWithFollowupFunc
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L391:
	.align	2, 0
.L390:
	.word	gPocketNamesStringsTable
	.word	gBagPositionStruct
	.word	sub_81AC10C
	.word	gTasks
.Lfe49:
	.size	 SwitchBagPocket,.Lfe49-SwitchBagPocket
	.align	2, 0
	.type	 sub_81AC10C,function
	.thumb_func
sub_81AC10C:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L409
	add	r6, r0, r1
	bl	MenuHelpers_LinkSomething
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L393	@cond_branch
	bl	IsWallysBag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L393	@cond_branch
	bl	GetSwitchBagPocketDirection
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L395	@cond_branch
	cmp	r0, #0x2
	beq	.L396	@cond_branch
	b	.L393
.L410:
	.align	2, 0
.L409:
	.word	gTasks+0x8
.L395:
	ldr	r0, .L411
	mov	r1, #0x16
	ldrsb	r1, [r6, r1]
	bl	ChangeBagPocketId
	add	r0, r7, #0
	bl	SwitchTaskToFollowupFunc
	mov	r1, #0x1
	neg	r1, r1
	add	r0, r7, #0
	b	.L408
.L412:
	.align	2, 0
.L411:
	.word	gBagPositionStruct+0x5
.L396:
	ldr	r0, .L413
	mov	r1, #0x16
	ldrsb	r1, [r6, r1]
	bl	ChangeBagPocketId
	add	r0, r7, #0
	bl	SwitchTaskToFollowupFunc
	add	r0, r7, #0
	mov	r1, #0x1
.L408:
	mov	r2, #0x1
	bl	SwitchBagPocket
	b	.L392
.L414:
	.align	2, 0
.L413:
	.word	gBagPositionStruct+0x5
.L393:
	mov	r1, #0x1a
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	beq	.L400	@cond_branch
	cmp	r0, #0x1
	beq	.L405	@cond_branch
	b	.L392
.L400:
	ldrb	r0, [r6, #0x18]
	bl	sub_81AC23C
	ldrh	r0, [r6, #0x18]
	add	r1, r0, #0x1
	strh	r1, [r6, #0x18]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L401	@cond_branch
	mov	r2, #0x16
	ldrsh	r0, [r6, r2]
	cmp	r0, #0x1
	bne	.L402	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x11
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	BagMenu_CopyPocketNameToWindow
	b	.L401
.L402:
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x11
	mov	r0, #0x8
	sub	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	BagMenu_CopyPocketNameToWindow
.L401:
	mov	r1, #0x18
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x10
	bne	.L392	@cond_branch
	ldrh	r0, [r6, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x1a]
	b	.L392
.L405:
	ldr	r4, .L415
	mov	r1, #0x16
	ldrsb	r1, [r6, r1]
	add	r0, r4, #0
	bl	ChangeBagPocketId
	sub	r5, r4, #0x5
	ldrb	r0, [r5, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L415+0x4
	ldrb	r2, [r5, #0x5]
	lsl	r2, r2, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x17
	add	r1, r2, r1
	ldrh	r1, [r1]
	add	r4, r4, #0x3
	add	r2, r2, r4
	ldrh	r2, [r2]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6]
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	bl	CreatePocketScrollArrowPair
	bl	CreatePocketSwitchArrowPair
	add	r0, r7, #0
	bl	SwitchTaskToFollowupFunc
.L392:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L416:
	.align	2, 0
.L415:
	.word	gBagPositionStruct+0x5
	.word	gMultiuseListMenuTemplate
.Lfe50:
	.size	 sub_81AC10C,.Lfe50-sub_81AC10C
	.align	2, 0
	.globl	sub_81AC23C
	.type	 sub_81AC23C,function
	.thumb_func
sub_81AC23C:
	push	{lr}
	add	sp, sp, #-0x8
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	add	r3, r3, r0
	lsr	r3, r3, #0x18
	mov	r0, #0xf
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	mov	r1, #0x11
	mov	r2, #0xe
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 sub_81AC23C,.Lfe51-sub_81AC23C
	.align	2, 0
	.type	 DrawPocketIndicatorSquare,function
	.thumb_func
DrawPocketIndicatorSquare:
	push	{lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L419	@cond_branch
	ldr	r1, .L421
	add	r2, r0, #0x3
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	mov	r3, #0x3
	bl	FillBgTilemapBufferRect_Palette0
	b	.L420
.L422:
	.align	2, 0
.L421:
	.word	0x1017
.L419:
	ldr	r1, .L423
	add	r2, r0, #0x3
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	mov	r3, #0x3
	bl	FillBgTilemapBufferRect_Palette0
.L420:
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.L424:
	.align	2, 0
.L423:
	.word	0x102b
.Lfe52:
	.size	 DrawPocketIndicatorSquare,.Lfe52-DrawPocketIndicatorSquare
	.align	2, 0
	.type	 CanSwapItems,function
	.thumb_func
CanSwapItems:
	push	{lr}
	ldr	r1, .L430
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0x1
	bhi	.L426	@cond_branch
	ldrb	r0, [r1, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x9
	beq	.L428	@cond_branch
	cmp	r0, #0x7
	bne	.L426	@cond_branch
.L428:
	mov	r0, #0x0
	b	.L429
.L431:
	.align	2, 0
.L430:
	.word	gBagPositionStruct
.L426:
	mov	r0, #0x1
.L429:
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 CanSwapItems,.Lfe53-CanSwapItems
	.align	2, 0
	.type	 BagMenu_SwapItems,function
	.thumb_func
BagMenu_SwapItems:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L433
	mov	r9, r0
	add	r6, r4, r0
	ldrb	r0, [r6]
	mov	r1, #0x10
	mov	r2, #0x1
	bl	ListMenuSetUnkIndicatorsStructField
	ldr	r3, .L433+0x4
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x1
	add	r2, r3, #0
	add	r2, r2, #0x1c
	add	r2, r0, r2
	add	r1, r3, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldrh	r2, [r2]
	add	r1, r1, r2
	strh	r1, [r6, #0x2]
	ldr	r0, .L433+0x8
	ldr	r0, [r0]
	ldr	r2, .L433+0xc
	add	r0, r0, r2
	mov	r5, #0x0
	strb	r1, [r0]
	ldrb	r0, [r3, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L433+0x10
	bl	CopyItemName
	ldr	r0, .L433+0x14
	mov	r8, r0
	ldr	r1, .L433+0x18
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r5, [sp, #0xc]
	str	r5, [sp, #0x10]
	mov	r1, #0x1
	mov	r2, r8
	mov	r3, #0x3
	bl	BagMenu_Print
	ldrb	r0, [r6, #0x2]
	bl	sub_80D4FEC
	bl	BagDestroyPocketSwitchArrowPair
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	BagMenu_PrintCursor_
	mov	r2, #0x8
	neg	r2, r2
	add	r9, r9, r2
	add	r4, r4, r9
	ldr	r0, .L433+0x1c
	str	r0, [r4]
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L434:
	.align	2, 0
.L433:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gBagMenu
	.word	0x81a
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_MoveVar1Where
	.word	Task_HandleSwappingItemsInput
.Lfe54:
	.size	 BagMenu_SwapItems,.Lfe54-BagMenu_SwapItems
	.align	2, 0
	.type	 Task_HandleSwappingItemsInput,function
	.thumb_func
Task_HandleSwappingItemsInput:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L447
	add	r4, r0, r1
	bl	MenuHelpers_CallLinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L436	@cond_branch
	ldr	r0, .L447+0x4
	mov	r8, r0
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L437	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	ldr	r3, .L447+0x8
	ldrb	r2, [r3, #0x5]
	lsl	r2, r2, #0x1
	add	r1, r3, #0
	add	r1, r1, #0x1c
	add	r1, r2, r1
	add	r3, r3, #0x8
	add	r2, r2, r3
	bl	ListMenuGetScrollAndRow
	b	.L446
.L448:
	.align	2, 0
.L447:
	.word	gTasks+0x8
	.word	gMain
	.word	gBagPositionStruct
.L437:
	ldrb	r0, [r4]
	bl	ListMenu_ProcessInput
	add	r7, r0, #0
	ldrb	r0, [r4]
	ldr	r5, .L449
	ldrb	r2, [r5, #0x5]
	lsl	r2, r2, #0x1
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r1, r2, r1
	add	r4, r5, #0
	add	r4, r4, #0x8
	add	r2, r2, r4
	bl	ListMenuGetScrollAndRow
	mov	r0, #0x0
	bl	sub_80D4FC8
	ldrb	r0, [r5, #0x5]
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	sub_80D4FEC
	mov	r0, #0x2
	neg	r0, r0
	cmp	r7, r0
	beq	.L441	@cond_branch
	add	r0, r0, #0x1
	cmp	r7, r0
	bne	.L444	@cond_branch
	b	.L436
.L450:
	.align	2, 0
.L449:
	.word	gBagPositionStruct
.L441:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, r8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L442	@cond_branch
.L446:
	add	r0, r6, #0
	bl	sub_81AC498
	b	.L436
.L442:
	add	r0, r6, #0
	bl	sub_81AC590
	b	.L436
.L444:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r6, #0
	bl	sub_81AC498
.L436:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 Task_HandleSwappingItemsInput,.Lfe55-Task_HandleSwappingItemsInput
	.align	2, 0
	.globl	sub_81AC498
	.type	 sub_81AC498,function
	.thumb_func
sub_81AC498:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	mov	sl, r0
	ldr	r0, .L456
	add	r0, r0, sl
	mov	r9, r0
	ldr	r5, .L456+0x4
	ldrb	r6, [r5, #0x5]
	lsl	r1, r6, #0x1
	add	r0, r5, #0
	add	r0, r0, #0x1c
	add	r0, r0, r1
	mov	r8, r0
	ldr	r2, .L456+0x8
	add	r7, r1, r2
	ldrh	r0, [r7]
	mov	r1, r8
	ldrh	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, r9
	mov	r1, #0x2
	ldrsh	r2, [r0, r1]
	cmp	r2, r4
	beq	.L453	@cond_branch
	sub	r0, r4, #0x1
	cmp	r2, r0
	bne	.L452	@cond_branch
.L453:
	add	r0, r3, #0
	bl	sub_81AC590
	b	.L454
.L457:
	.align	2, 0
.L456:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gBagPositionStruct+0x8
.L452:
	ldr	r1, .L458
	lsl	r0, r6, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	add	r1, r2, #0
	add	r2, r4, #0
	bl	MoveItemSlotInList
	ldr	r0, .L458+0x4
	ldr	r0, [r0]
	ldr	r2, .L458+0x8
	add	r0, r0, r2
	mov	r1, #0xff
	strb	r1, [r0]
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, r8
	add	r2, r7, #0
	bl	DestroyListMenuTask
	mov	r2, r9
	mov	r1, #0x2
	ldrsh	r0, [r2, r1]
	cmp	r0, r4
	bge	.L455	@cond_branch
	ldrb	r1, [r5, #0x5]
	lsl	r1, r1, #0x1
	ldr	r2, .L458+0xc
	add	r1, r1, r2
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
.L455:
	ldrb	r0, [r5, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L458+0x10
	mov	r2, r8
	ldrh	r1, [r2]
	ldrh	r2, [r7]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r9
	strh	r0, [r1]
	mov	r0, #0x1
	bl	sub_80D4FC8
	bl	CreatePocketSwitchArrowPair
	ldr	r0, .L458+0x14
	sub	r0, r0, #0x8
	add	r0, r0, sl
	ldr	r1, .L458+0x18
	str	r1, [r0]
.L454:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L459:
	.align	2, 0
.L458:
	.word	gBagPockets
	.word	gBagMenu
	.word	0x81a
	.word	gBagPositionStruct+0x8
	.word	gMultiuseListMenuTemplate
	.word	gTasks+0x8
	.word	Task_BagMenu_HandleInput
.Lfe56:
	.size	 sub_81AC498,.Lfe56-sub_81AC498
	.align	2, 0
	.globl	sub_81AC590
	.type	 sub_81AC590,function
	.thumb_func
sub_81AC590:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	mov	r9, r1
	ldr	r0, .L462
	mov	sl, r0
	mov	r7, r9
	add	r7, r7, sl
	ldr	r4, .L462+0x4
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r6, r0, r1
	mov	r1, #0x8
	add	r1, r1, r4
	mov	r8, r1
	add	r5, r0, r1
	ldr	r0, .L462+0x8
	ldr	r0, [r0]
	ldr	r1, .L462+0xc
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldrb	r0, [r7]
	add	r1, r6, #0
	add	r2, r5, #0
	bl	DestroyListMenuTask
	mov	r0, #0x2
	ldrsh	r2, [r7, r0]
	ldrh	r0, [r6]
	ldrh	r1, [r5]
	add	r0, r0, r1
	cmp	r2, r0
	bge	.L461	@cond_branch
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
.L461:
	ldrb	r0, [r4, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L462+0x10
	ldrh	r1, [r6]
	ldrh	r2, [r5]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7]
	mov	r0, #0x1
	bl	sub_80D4FC8
	bl	CreatePocketSwitchArrowPair
	mov	r0, sl
	sub	r0, r0, #0x8
	add	r0, r0, r9
	ldr	r1, .L462+0x14
	str	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L463:
	.align	2, 0
.L462:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gBagMenu
	.word	0x81a
	.word	gMultiuseListMenuTemplate
	.word	Task_BagMenu_HandleInput
.Lfe57:
	.size	 sub_81AC590,.Lfe57-sub_81AC590
	.align	2, 0
	.globl	OpenContextMenu
	.type	 OpenContextMenu,function
	.thumb_func
OpenContextMenu:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	ldr	r0, .L529
	ldrb	r0, [r0, #0x4]
	sub	r0, r0, #0x1
	cmp	r0, #0x9
	bls	.LCB4685
	b	.L484	@long jump
.LCB4685:
	lsl	r0, r0, #0x2
	ldr	r1, .L529+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L530:
	.align	2, 0
.L529:
	.word	gBagPositionStruct
	.word	.L515
	.align	2, 0
	.align	2, 0
.L515:
	.word	.L467
	.word	.L484
	.word	.L484
	.word	.L484
	.word	.L470
	.word	.L484
	.word	.L474
	.word	.L477
	.word	.L471
	.word	.L467
.L467:
	ldr	r0, .L531
	ldrh	r0, [r0]
	bl	ItemId_GetBattleUsage
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L468	@cond_branch
	ldr	r0, .L531+0x4
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L531+0x8
	str	r0, [r2]
	ldr	r3, .L531+0xc
	add	r1, r1, r3
	mov	r0, #0x2
	b	.L524
.L532:
	.align	2, 0
.L531:
	.word	gSpecialVar_ItemId
	.word	gBagMenu
	.word	sContextMenuItems_BattleUse
	.word	0x828
.L468:
	ldr	r0, .L533
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L533+0x4
	str	r0, [r2]
	ldr	r3, .L533+0x8
	add	r1, r1, r3
	mov	r0, #0x1
	b	.L524
.L534:
	.align	2, 0
.L533:
	.word	gBagMenu
	.word	sContextMenuItems_Cancel
	.word	0x828
.L470:
	ldr	r0, .L535
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L535+0x4
	str	r0, [r2]
	ldr	r3, .L535+0x8
	add	r1, r1, r3
	b	.L525
.L536:
	.align	2, 0
.L535:
	.word	gBagMenu
	.word	sContextMenuItems_BerryBlenderCrush
	.word	0x828
.L471:
	ldr	r4, .L537
	ldrh	r0, [r4]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L472	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0xcd
	beq	.L472	@cond_branch
	ldr	r0, .L537+0x4
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L537+0x8
	str	r0, [r2]
	ldr	r3, .L537+0xc
	add	r1, r1, r3
	mov	r0, #0x2
	b	.L524
.L538:
	.align	2, 0
.L537:
	.word	gSpecialVar_ItemId
	.word	gBagMenu
	.word	sContextMenuItems_Apprentice
	.word	0x828
.L472:
	ldr	r0, .L539
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L539+0x4
	str	r0, [r2]
	ldr	r3, .L539+0x8
	add	r1, r1, r3
	mov	r0, #0x1
	b	.L524
.L540:
	.align	2, 0
.L539:
	.word	gBagMenu
	.word	sContextMenuItems_Cancel
	.word	0x828
.L474:
	ldr	r4, .L541
	ldrh	r0, [r4]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L475	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0xcd
	beq	.L475	@cond_branch
	ldr	r0, .L541+0x4
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L541+0x8
	str	r0, [r2]
	ldr	r3, .L541+0xc
	add	r1, r1, r3
	mov	r0, #0x2
	b	.L524
.L542:
	.align	2, 0
.L541:
	.word	gSpecialVar_ItemId
	.word	gBagMenu
	.word	sContextMenuItems_FavorLady
	.word	0x828
.L475:
	ldr	r0, .L543
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L543+0x4
	str	r0, [r2]
	ldr	r3, .L543+0x8
	add	r1, r1, r3
	mov	r0, #0x1
	b	.L524
.L544:
	.align	2, 0
.L543:
	.word	gBagMenu
	.word	sContextMenuItems_Cancel
	.word	0x828
.L477:
	ldr	r4, .L545
	ldrh	r0, [r4]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L478	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0xcd
	beq	.L478	@cond_branch
	ldr	r0, .L545+0x4
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L545+0x8
	str	r0, [r2]
	ldr	r3, .L545+0xc
	add	r1, r1, r3
	mov	r0, #0x2
	b	.L524
.L546:
	.align	2, 0
.L545:
	.word	gSpecialVar_ItemId
	.word	gBagMenu
	.word	sContextMenuItems_QuizLady
	.word	0x828
.L478:
	ldr	r0, .L547
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L547+0x4
	str	r0, [r2]
	ldr	r3, .L547+0x8
	add	r1, r1, r3
	mov	r0, #0x1
	b	.L524
.L548:
	.align	2, 0
.L547:
	.word	gBagMenu
	.word	sContextMenuItems_Cancel
	.word	0x828
.L484:
	bl	MenuHelpers_LinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L486	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	bne	.L485	@cond_branch
.L486:
	ldr	r0, .L549
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x9
	beq	.L488	@cond_branch
	ldr	r0, .L549+0x4
	ldrh	r0, [r0]
	bl	sub_8122148
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L487	@cond_branch
.L488:
	ldr	r0, .L549+0x8
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L549+0xc
	str	r0, [r2]
	ldr	r3, .L549+0x10
	add	r1, r1, r3
	mov	r0, #0x1
	b	.L524
.L550:
	.align	2, 0
.L549:
	.word	gBagPositionStruct
	.word	gSpecialVar_ItemId
	.word	gBagMenu
	.word	sContextMenuItems_Cancel
	.word	0x828
.L487:
	ldr	r0, .L551
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L551+0x4
	str	r0, [r2]
	ldr	r3, .L551+0x8
	add	r1, r1, r3
	mov	r0, #0x2
	b	.L524
.L552:
	.align	2, 0
.L551:
	.word	gBagMenu
	.word	sContextMenuItems_Give
	.word	0x828
.L485:
	ldr	r0, .L553
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x9
	bls	.LCB5056
	b	.L465	@long jump
.LCB5056:
	lsl	r0, r0, #0x2
	ldr	r1, .L553+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L554:
	.align	2, 0
.L553:
	.word	gBagPositionStruct
	.word	.L513
	.align	2, 0
	.align	2, 0
.L513:
	.word	.L492
	.word	.L512
	.word	.L505
	.word	.L512
	.word	.L512
	.word	.L512
	.word	.L507
	.word	.L512
	.word	.L506
	.word	.L494
.L492:
	ldr	r4, .L555
	ldr	r1, [r4]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r3, .L555+0x4
	add	r0, r1, r3
	str	r0, [r2]
	ldr	r0, .L555+0x8
	add	r1, r1, r0
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, r3
	ldr	r1, .L555+0xc
	mov	r2, #0x4
	bl	memcpy
	ldr	r0, .L555+0x10
	ldrh	r0, [r0]
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB5105
	b	.L465	@long jump
.LCB5105:
	ldr	r0, [r4]
	ldr	r1, .L555+0x4
	add	r0, r0, r1
	mov	r1, #0x6
	strb	r1, [r0]
	b	.L465
.L556:
	.align	2, 0
.L555:
	.word	gBagMenu
	.word	0x824
	.word	0x828
	.word	sContextMenuItems_ItemsPocket
	.word	gSpecialVar_ItemId
.L494:
	ldr	r5, .L557
	ldr	r2, [r5]
	mov	r3, #0x82
	lsl	r3, r3, #0x4
	add	r0, r2, r3
	ldr	r4, .L557+0x4
	add	r1, r2, r4
	str	r1, [r0]
	ldr	r6, .L557+0x8
	ldrb	r0, [r6]
	cmp	r0, #0
	bne	.L495	@cond_branch
	ldr	r0, .L557+0xc
	add	r1, r2, r0
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r0, [r5]
	add	r0, r0, r4
	ldr	r1, .L557+0x10
	mov	r2, #0x4
	bl	memcpy
	ldr	r0, .L557+0x14
	ldrh	r1, [r0]
	ldr	r0, .L557+0x18
	cmp	r1, r0
	beq	.L497	@cond_branch
	add	r0, r0, #0xc
	cmp	r1, r0
	bne	.L499	@cond_branch
.L497:
	mov	r0, #0x6
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L499	@cond_branch
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, #0x7
	strb	r1, [r0]
	b	.L499
.L558:
	.align	2, 0
.L557:
	.word	gBagMenu
	.word	0x824
	.word	sRegisterSubMenu
	.word	0x828
	.word	sContextMenuItems_KeyItemsPocket
	.word	gSpecialVar_ItemId
	.word	0x1c7
.L495:
	ldr	r3, .L559
	add	r1, r2, r3
	mov	r4, #0x0
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r0, [r5]
	ldr	r1, .L559+0x4
	add	r0, r0, r1
	ldr	r1, .L559+0x8
	mov	r2, #0x4
	bl	memcpy
	strb	r4, [r6]
.L499:
	ldr	r0, .L559+0xc
	ldr	r2, [r0]
	ldr	r3, .L559+0x10
	add	r0, r2, r3
	ldr	r1, .L559+0x14
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L526	@cond_branch
	ldr	r3, .L559+0x18
	add	r0, r2, r3
	ldrh	r0, [r0]
	cmp	r0, r1
	beq	.L526	@cond_branch
	ldr	r3, .L559+0x1c
	add	r0, r2, r3
	ldrh	r0, [r0]
	cmp	r0, r1
	bne	.L465	@cond_branch
.L526:
	ldr	r0, .L559+0x20
	ldr	r0, [r0]
	ldr	r1, .L559+0x24
	add	r0, r0, r1
	mov	r1, #0x8
	strb	r1, [r0]
	b	.L465
.L560:
	.align	2, 0
.L559:
	.word	0x828
	.word	0x824
	.word	sContextMenu_RegisterKeyItem
	.word	gSaveBlock1Ptr
	.word	0x496
	.word	gSpecialVar_ItemId
	.word	0x361c
	.word	0x361e
	.word	gBagMenu
	.word	0x825
.L505:
	ldr	r0, .L561
	ldr	r1, [r0]
	mov	r3, #0x82
	lsl	r3, r3, #0x4
	add	r2, r1, r3
	ldr	r0, .L561+0x4
	b	.L527
.L562:
	.align	2, 0
.L561:
	.word	gBagMenu
	.word	sContextMenuItems_BallsPocket
.L506:
	ldr	r0, .L563
	ldr	r1, [r0]
	mov	r3, #0x82
	lsl	r3, r3, #0x4
	add	r2, r1, r3
	ldr	r0, .L563+0x4
	b	.L527
.L564:
	.align	2, 0
.L563:
	.word	gBagMenu
	.word	sContextMenuItems_TmHmPocket
.L507:
	ldr	r0, .L565
	ldr	r1, [r0]
	mov	r3, #0x82
	lsl	r3, r3, #0x4
	add	r2, r1, r3
	ldr	r0, .L565+0x4
	str	r0, [r2]
	ldr	r0, .L565+0x8
	add	r1, r1, r0
	mov	r0, #0x6
	b	.L524
.L566:
	.align	2, 0
.L565:
	.word	gBagMenu
	.word	sContextMenuItems_BerriesPocket
	.word	0x828
.L512:
	ldr	r0, .L567
	ldr	r1, [r0]
	mov	r3, #0x82
	lsl	r3, r3, #0x4
	add	r2, r1, r3
	ldr	r0, .L567+0x4
.L527:
	str	r0, [r2]
	ldr	r0, .L567+0x8
	add	r1, r1, r0
.L525:
	mov	r0, #0x4
.L524:
	strb	r0, [r1]
.L465:
	ldr	r0, .L567+0xc
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x8
	bne	.L516	@cond_branch
	mov	r0, #0x1
	bl	ClearWindowTilemap
	ldr	r0, .L567+0x10
	ldrh	r0, [r0]
	bl	PrintTMHMMoveData
	mov	r0, #0x3
	bl	PutWindowTilemap
	mov	r0, #0x4
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	b	.L517
.L568:
	.align	2, 0
.L567:
	.word	gBagMenu
	.word	sContextMenuItems_ItemsPocket
	.word	0x828
	.word	gBagPositionStruct
	.word	gSpecialVar_ItemId
.L516:
	ldr	r0, .L569
	ldrh	r0, [r0]
	ldr	r1, .L569+0x4
	bl	CopyItemName
	ldr	r4, .L569+0x8
	ldr	r1, .L569+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	BagMenu_Print
.L517:
	ldr	r0, .L569+0x10
	ldr	r0, [r0]
	ldr	r1, .L569+0x14
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L518	@cond_branch
	mov	r0, #0x0
	b	.L528
.L570:
	.align	2, 0
.L569:
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_Var1IsSelected
	.word	gBagMenu
	.word	0x828
.L518:
	cmp	r0, #0x2
	bne	.L520	@cond_branch
	mov	r0, #0x1
.L528:
	bl	BagMenu_AddWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_81ACAF8
	b	.L519
.L520:
	cmp	r0, #0x4
	bne	.L522	@cond_branch
	mov	r0, #0x2
	bl	BagMenu_AddWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	mov	r2, #0x2
	bl	sub_81ACB54
	b	.L519
.L522:
	mov	r0, #0x3
	bl	BagMenu_AddWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	mov	r2, #0x3
	bl	sub_81ACB54
.L519:
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 OpenContextMenu,.Lfe58-OpenContextMenu
	.align	2, 0
	.globl	sub_81ACAF8
	.type	 sub_81ACAF8,function
	.thumb_func
sub_81ACAF8:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	ldr	r6, .L572
	ldr	r1, [r6]
	ldr	r5, .L572+0x4
	add	r0, r1, r5
	ldrb	r0, [r0]
	str	r0, [sp, #0x8]
	ldr	r0, .L572+0x8
	str	r0, [sp, #0xc]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [sp, #0x10]
	add	r0, r4, #0
	mov	r1, #0x7
	mov	r2, #0x8
	mov	r3, #0x1
	bl	AddItemMenuActionTextPrinters
	ldr	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r4, #0
	mov	r2, #0x0
	bl	InitMenuInUpperLeftCornerPlaySoundWhenAPressed
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L573:
	.align	2, 0
.L572:
	.word	gBagMenu
	.word	0x828
	.word	sItemMenuActions
.Lfe59:
	.size	 sub_81ACAF8,.Lfe59-sub_81ACAF8
	.align	2, 0
	.globl	sub_81ACB54
	.type	 sub_81ACB54,function
	.thumb_func
sub_81ACB54:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, #0x38
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	ldr	r0, .L575
	str	r0, [sp, #0xc]
	ldr	r0, .L575+0x4
	ldr	r0, [r0]
	mov	r1, #0x82
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [sp, #0x10]
	add	r0, r4, #0
	mov	r1, #0x7
	mov	r2, #0x8
	mov	r3, #0x1
	bl	sub_8198DBC
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x38
	add	r2, r5, #0
	add	r3, r6, #0
	bl	sub_8199944
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L576:
	.align	2, 0
.L575:
	.word	sItemMenuActions
	.word	gBagMenu
.Lfe60:
	.size	 sub_81ACB54,.Lfe60-sub_81ACB54
	.align	2, 0
	.globl	Task_ItemContext_FieldOrBattle
	.type	 Task_ItemContext_FieldOrBattle,function
	.thumb_func
Task_ItemContext_FieldOrBattle:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	OpenContextMenu
	ldr	r0, .L581
	ldr	r0, [r0]
	ldr	r1, .L581+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bhi	.L578	@cond_branch
	ldr	r0, .L581+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L581+0xc
	b	.L580
.L582:
	.align	2, 0
.L581:
	.word	gBagMenu
	.word	0x828
	.word	gTasks
	.word	Task_HandleInBattleItemMenuInput
.L578:
	ldr	r0, .L583
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L583+0x4
.L580:
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L584:
	.align	2, 0
.L583:
	.word	gTasks
	.word	Task_HandleOutOfBattleItemMenuInput
.Lfe61:
	.size	 Task_ItemContext_FieldOrBattle,.Lfe61-Task_ItemContext_FieldOrBattle
	.align	2, 0
	.globl	Task_HandleInBattleItemMenuInput
	.type	 Task_HandleInBattleItemMenuInput,function
	.thumb_func
Task_HandleInBattleItemMenuInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	bl	MenuHelpers_CallLinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L586	@cond_branch
	bl	Menu_ProcessInputNoWrap
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L586	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L590	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L592
	ldr	r1, [r0, #0x24]
	add	r0, r5, #0
	bl	_call_via_r1
	b	.L586
.L593:
	.align	2, 0
.L592:
	.word	sItemMenuActions
.L590:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L594
	ldr	r0, .L594+0x4
	ldr	r0, [r0]
	mov	r2, #0x82
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r6, #0
	bl	_call_via_r1
.L586:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L595:
	.align	2, 0
.L594:
	.word	sItemMenuActions
	.word	gBagMenu
.Lfe62:
	.size	 Task_HandleInBattleItemMenuInput,.Lfe62-Task_HandleInBattleItemMenuInput
	.align	2, 0
	.globl	Task_HandleOutOfBattleItemMenuInput
	.type	 Task_HandleOutOfBattleItemMenuInput,function
	.thumb_func
Task_HandleOutOfBattleItemMenuInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	MenuHelpers_CallLinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB5735
	b	.L597	@long jump
.LCB5735:
	bl	Menu_GetCursorPos
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L616
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L598	@cond_branch
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0
	bgt	.LCB5756
	b	.L597	@long jump
.LCB5756:
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	bl	sub_81ACDFC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB5766
	b	.L597	@long jump
.LCB5766:
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	bl	ChangeListMenuCursorPosition
	b	.L597
.L617:
	.align	2, 0
.L616:
	.word	gMain
.L598:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L601	@cond_branch
	lsl	r0, r4, #0x18
	asr	r1, r0, #0x18
	ldr	r0, .L618
	ldr	r0, [r0]
	ldr	r2, .L618+0x4
	add	r0, r0, r2
	ldrb	r0, [r0]
	sub	r0, r0, #0x2
	cmp	r1, r0
	blt	.LCB5804
	b	.L597	@long jump
.LCB5804:
	add	r0, r1, #0x2
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	bl	sub_81ACDFC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L597	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ChangeListMenuCursorPosition
	b	.L597
.L619:
	.align	2, 0
.L618:
	.word	gBagMenu
	.word	0x828
.L601:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L605	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L604	@cond_branch
.L605:
	lsl	r0, r4, #0x18
	asr	r1, r0, #0x18
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L597	@cond_branch
	sub	r0, r1, #0x1
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	bl	sub_81ACDFC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L597	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L615
.L604:
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L609	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L608	@cond_branch
.L609:
	lsl	r0, r4, #0x18
	asr	r1, r0, #0x18
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L597	@cond_branch
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	bl	sub_81ACDFC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L597	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L615:
	mov	r1, #0x0
	bl	ChangeListMenuCursorPosition
	b	.L597
.L608:
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L612	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L620
	ldr	r0, .L620+0x4
	ldr	r0, [r0]
	lsl	r1, r4, #0x18
	asr	r1, r1, #0x18
	mov	r3, #0x82
	lsl	r3, r3, #0x4
	add	r0, r0, r3
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, [r0]
	add	r0, r6, #0
	bl	_call_via_r1
	b	.L597
.L621:
	.align	2, 0
.L620:
	.word	sItemMenuActions
	.word	gBagMenu
.L612:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L597	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L622
	ldr	r1, [r0, #0x24]
	add	r0, r6, #0
	bl	_call_via_r1
.L597:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L623:
	.align	2, 0
.L622:
	.word	sItemMenuActions
.Lfe63:
	.size	 Task_HandleOutOfBattleItemMenuInput,.Lfe63-Task_HandleOutOfBattleItemMenuInput
	.align	2, 0
	.globl	sub_81ACDFC
	.type	 sub_81ACDFC,function
	.thumb_func
sub_81ACDFC:
	push	{lr}
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	blt	.L627	@cond_branch
	ldr	r0, .L629
	ldr	r2, [r0]
	ldr	r3, .L629+0x4
	add	r0, r2, r3
	ldrb	r0, [r0]
	cmp	r1, r0
	bgt	.L627	@cond_branch
	mov	r3, #0x82
	lsl	r3, r3, #0x4
	add	r0, r2, r3
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x16
	beq	.L627	@cond_branch
	mov	r0, #0x1
	b	.L628
.L630:
	.align	2, 0
.L629:
	.word	gBagMenu
	.word	0x828
.L627:
	mov	r0, #0x0
.L628:
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 sub_81ACDFC,.Lfe64-sub_81ACDFC
	.align	2, 0
	.globl	BagMenu_RemoveSomeWindow
	.type	 BagMenu_RemoveSomeWindow,function
	.thumb_func
BagMenu_RemoveSomeWindow:
	push	{lr}
	ldr	r0, .L638
	ldr	r0, [r0]
	ldr	r1, .L638+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L632	@cond_branch
	mov	r0, #0x0
	bl	BagMenu_RemoveWindow
	b	.L633
.L639:
	.align	2, 0
.L638:
	.word	gBagMenu
	.word	0x828
.L632:
	cmp	r0, #0x2
	bne	.L634	@cond_branch
	mov	r0, #0x1
	bl	BagMenu_RemoveWindow
	b	.L633
.L634:
	cmp	r0, #0x4
	bne	.L636	@cond_branch
	mov	r0, #0x2
	bl	BagMenu_RemoveWindow
	b	.L633
.L636:
	mov	r0, #0x3
	bl	BagMenu_RemoveWindow
.L633:
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 BagMenu_RemoveSomeWindow,.Lfe65-BagMenu_RemoveSomeWindow
	.align	2, 0
	.globl	ItemMenu_UseOutOfBattle
	.type	 ItemMenu_UseOutOfBattle,function
	.thumb_func
ItemMenu_UseOutOfBattle:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L646
	ldrh	r0, [r5]
	bl	ItemId_GetFieldFunc
	cmp	r0, #0
	beq	.L641	@cond_branch
	bl	BagMenu_RemoveSomeWindow
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L642	@cond_branch
	ldrh	r0, [r5]
	bl	ItemId_GetType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L642	@cond_branch
	add	r0, r4, #0
	bl	BagMenu_PrintThereIsNoPokemon
	b	.L641
.L647:
	.align	2, 0
.L646:
	.word	gSpecialVar_ItemId
.L642:
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, .L648
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x6
	beq	.L644	@cond_branch
	ldr	r0, .L648+0x4
	ldrh	r0, [r0]
	bl	ItemId_GetFieldFunc
	add	r1, r0, #0
	add	r0, r4, #0
	bl	_call_via_r1
	b	.L641
.L649:
	.align	2, 0
.L648:
	.word	gBagPositionStruct
	.word	gSpecialVar_ItemId
.L644:
	add	r0, r4, #0
	bl	ItemUseOutOfBattle_Berry
.L641:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe66:
	.size	 ItemMenu_UseOutOfBattle,.Lfe66-ItemMenu_UseOutOfBattle
	.align	2, 0
	.globl	ItemMenu_Toss
	.type	 ItemMenu_Toss,function
	.thumb_func
ItemMenu_Toss:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r6, r0, #0x3
	ldr	r7, .L653
	add	r4, r6, r7
	bl	BagMenu_RemoveSomeWindow
	mov	r0, #0x1
	strh	r0, [r4, #0x10]
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L651	@cond_branch
	add	r0, r5, #0
	bl	BagMenu_TossItems
	b	.L652
.L654:
	.align	2, 0
.L653:
	.word	gTasks+0x8
.L651:
	ldr	r0, .L655
	ldrh	r0, [r0]
	ldr	r1, .L655+0x4
	bl	CopyItemName
	ldr	r4, .L655+0x8
	ldr	r1, .L655+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	BagMenu_Print
	mov	r0, #0x7
	bl	sub_81ABC3C
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L655+0x10
	str	r1, [r0]
.L652:
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L656:
	.align	2, 0
.L655:
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_TossHowManyVar1s
	.word	Task_ChooseHowManyToToss
.Lfe67:
	.size	 ItemMenu_Toss,.Lfe67-ItemMenu_Toss
	.align	2, 0
	.globl	BagMenu_TossItems
	.type	 BagMenu_TossItems,function
	.thumb_func
BagMenu_TossItems:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L658
	add	r4, r4, r0
	ldr	r0, .L658+0x4
	ldrh	r0, [r0]
	ldr	r1, .L658+0x8
	bl	CopyItemName
	ldr	r0, .L658+0xc
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L658+0x10
	ldr	r1, .L658+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	BagMenu_Print
	ldr	r2, .L658+0x18
	add	r0, r5, #0
	mov	r1, #0x5
	bl	BagMenu_YesNo
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L659:
	.align	2, 0
.L658:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_ConfirmTossItems
	.word	sYesNoTossFunctions
.Lfe68:
	.size	 BagMenu_TossItems,.Lfe68-BagMenu_TossItems
	.align	2, 0
	.globl	BagMenu_CancelToss
	.type	 BagMenu_CancelToss,function
	.thumb_func
BagMenu_CancelToss:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L661
	add	r4, r4, r0
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	bl	BagMenu_PrintDescription
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	BagMenu_PrintCursor_
	add	r0, r5, #0
	bl	set_callback3_to_bag
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L662:
	.align	2, 0
.L661:
	.word	gTasks+0x8
.Lfe69:
	.size	 BagMenu_CancelToss,.Lfe69-BagMenu_CancelToss
	.align	2, 0
	.globl	Task_ChooseHowManyToToss
	.type	 Task_ChooseHowManyToToss,function
	.thumb_func
Task_ChooseHowManyToToss:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L669
	add	r4, r0, r1
	add	r0, r4, #0
	add	r0, r0, #0x10
	ldrh	r1, [r4, #0x4]
	bl	AdjustQuantityAccordingToDPadInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L664	@cond_branch
	ldr	r0, .L669+0x4
	ldr	r0, [r0]
	ldr	r1, .L669+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	bl	PrintItemDepositAmount
	b	.L665
.L670:
	.align	2, 0
.L669:
	.word	gTasks+0x8
	.word	gBagMenu
	.word	0x817
.L664:
	ldr	r0, .L671
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L666	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	bl	BagMenu_RemoveWindow
	add	r0, r5, #0
	bl	BagMenu_TossItems
	b	.L665
.L672:
	.align	2, 0
.L671:
	.word	gMain
.L666:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L665	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	bl	BagMenu_RemoveWindow
	add	r0, r6, #0
	bl	BagMenu_CancelToss
.L665:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 Task_ChooseHowManyToToss,.Lfe70-Task_ChooseHowManyToToss
	.align	2, 0
	.globl	BagMenu_ConfirmToss
	.type	 BagMenu_ConfirmToss,function
	.thumb_func
BagMenu_ConfirmToss:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r5, .L674
	add	r6, r4, r5
	ldr	r0, .L674+0x4
	ldrh	r0, [r0]
	ldr	r1, .L674+0x8
	bl	CopyItemName
	ldr	r0, .L674+0xc
	mov	r2, #0x10
	ldrsh	r1, [r6, r2]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r6, .L674+0x10
	ldr	r1, .L674+0x14
	add	r0, r6, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r6, #0
	mov	r3, #0x3
	bl	BagMenu_Print
	sub	r5, r5, #0x8
	add	r4, r4, r5
	ldr	r0, .L674+0x18
	str	r0, [r4]
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L675:
	.align	2, 0
.L674:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_ThrewAwayVar2Var1s
	.word	Task_ActuallyToss
.Lfe71:
	.size	 BagMenu_ConfirmToss,.Lfe71-BagMenu_ConfirmToss
	.align	2, 0
	.globl	Task_ActuallyToss
	.type	 Task_ActuallyToss,function
	.thumb_func
Task_ActuallyToss:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L678
	add	r5, r0, r1
	ldr	r4, .L678+0x4
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r1, r1, r0
	mov	r8, r1
	add	r1, r4, #0
	add	r1, r1, #0x8
	add	r7, r0, r1
	ldr	r0, .L678+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L677	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L678+0xc
	ldrh	r0, [r0]
	ldrh	r1, [r5, #0x10]
	bl	RemoveBagItem
	ldrb	r0, [r5]
	mov	r1, r8
	add	r2, r7, #0
	bl	DestroyListMenuTask
	ldrb	r0, [r4, #0x5]
	bl	UpdatePocketItemList
	ldrb	r0, [r4, #0x5]
	bl	SetInitialScrollAndCursorPositions
	ldrb	r0, [r4, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L678+0x10
	mov	r2, r8
	ldrh	r1, [r2]
	ldrh	r2, [r7]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r6, #0
	bl	set_callback3_to_bag
.L677:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L679:
	.align	2, 0
.L678:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gMain
	.word	gSpecialVar_ItemId
	.word	gMultiuseListMenuTemplate
.Lfe72:
	.size	 Task_ActuallyToss,.Lfe72-Task_ActuallyToss
	.align	2, 0
	.globl	ItemMenu_Give
	.type	 ItemMenu_Give,function
	.thumb_func
ItemMenu_Give:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	bl	BagMenu_RemoveSomeWindow
	ldr	r5, .L687
	ldrh	r0, [r5]
	bl	itemid_80BF6D8_mail_related
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L681	@cond_branch
	ldr	r2, .L687+0x4
	ldr	r3, .L687+0x8
	add	r0, r4, #0
	mov	r1, #0x1
	bl	DisplayItemMessage
	b	.L682
.L688:
	.align	2, 0
.L687:
	.word	gSpecialVar_ItemId
	.word	gText_CantWriteMail
	.word	sub_81AD350
.L681:
	ldrh	r0, [r5]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L683	@cond_branch
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L684	@cond_branch
	add	r0, r4, #0
	bl	BagMenu_PrintThereIsNoPokemon
	b	.L682
.L684:
	ldr	r0, .L689
	ldr	r1, [r0]
	ldr	r0, .L689+0x4
	str	r0, [r1]
	add	r0, r4, #0
	bl	Task_FadeAndCloseBagMenu
	b	.L682
.L690:
	.align	2, 0
.L689:
	.word	gBagMenu
	.word	CB2_ChooseMonToGiveItem
.L683:
	add	r0, r6, #0
	bl	BagMenu_PrintItemCantBeHeld
.L682:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 ItemMenu_Give,.Lfe73-ItemMenu_Give
	.align	2, 0
	.globl	BagMenu_PrintThereIsNoPokemon
	.type	 BagMenu_PrintThereIsNoPokemon,function
	.thumb_func
BagMenu_PrintThereIsNoPokemon:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L692
	ldr	r3, .L692+0x4
	mov	r1, #0x1
	bl	DisplayItemMessage
	pop	{r0}
	bx	r0
.L693:
	.align	2, 0
.L692:
	.word	gText_NoPokemon
	.word	sub_81AD350
.Lfe74:
	.size	 BagMenu_PrintThereIsNoPokemon,.Lfe74-BagMenu_PrintThereIsNoPokemon
	.align	2, 0
	.type	 BagMenu_PrintItemCantBeHeld,function
	.thumb_func
BagMenu_PrintItemCantBeHeld:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L695
	ldrh	r0, [r0]
	ldr	r1, .L695+0x4
	bl	CopyItemName
	ldr	r5, .L695+0x8
	ldr	r1, .L695+0xc
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L695+0x10
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r5, #0
	bl	DisplayItemMessage
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L696:
	.align	2, 0
.L695:
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_Var1CantBeHeld
	.word	sub_81AD350
.Lfe75:
	.size	 BagMenu_PrintItemCantBeHeld,.Lfe75-BagMenu_PrintItemCantBeHeld
	.align	2, 0
	.globl	sub_81AD350
	.type	 sub_81AD350,function
	.thumb_func
sub_81AD350:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L699
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L698	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	BagMenu_InitListsMenu
.L698:
	pop	{r4}
	pop	{r0}
	bx	r0
.L700:
	.align	2, 0
.L699:
	.word	gMain
.Lfe76:
	.size	 sub_81AD350,.Lfe76-sub_81AD350
	.align	2, 0
	.globl	ItemMenu_CheckTag
	.type	 ItemMenu_CheckTag,function
	.thumb_func
ItemMenu_CheckTag:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L702
	ldr	r2, [r1]
	ldr	r1, .L702+0x4
	str	r1, [r2]
	bl	Task_FadeAndCloseBagMenu
	pop	{r0}
	bx	r0
.L703:
	.align	2, 0
.L702:
	.word	gBagMenu
	.word	DoBerryTagScreen
.Lfe77:
	.size	 ItemMenu_CheckTag,.Lfe77-ItemMenu_CheckTag
	.align	2, 0
	.globl	ItemMenu_Cancel
	.type	 ItemMenu_Cancel,function
	.thumb_func
ItemMenu_Cancel:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L705
	add	r4, r4, r0
	ldr	r1, .L705+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	bl	BagMenu_RemoveSomeWindow
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	bl	BagMenu_PrintDescription
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	BagMenu_PrintCursor_
	add	r0, r5, #0
	bl	set_callback3_to_bag
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L706:
	.align	2, 0
.L705:
	.word	gTasks+0x8
	.word	sRegisterSubMenu
.Lfe78:
	.size	 ItemMenu_Cancel,.Lfe78-ItemMenu_Cancel
	.align	2, 0
	.globl	ItemMenu_UseInBattle
	.type	 ItemMenu_UseInBattle,function
	.thumb_func
ItemMenu_UseInBattle:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L709
	ldrh	r0, [r4]
	bl	ItemId_GetBattleFunc
	cmp	r0, #0
	beq	.L708	@cond_branch
	bl	BagMenu_RemoveSomeWindow
	ldrh	r0, [r4]
	bl	ItemId_GetBattleFunc
	add	r1, r0, #0
	add	r0, r5, #0
	bl	_call_via_r1
.L708:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L710:
	.align	2, 0
.L709:
	.word	gSpecialVar_ItemId
.Lfe79:
	.size	 ItemMenu_UseInBattle,.Lfe79-ItemMenu_UseInBattle
	.align	2, 0
	.globl	CB2_ReturnToBagMenuPocket
	.type	 CB2_ReturnToBagMenuPocket,function
	.thumb_func
CB2_ReturnToBagMenuPocket:
	push	{lr}
	mov	r0, #0xc
	mov	r1, #0xa
	mov	r2, #0x0
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 CB2_ReturnToBagMenuPocket,.Lfe80-CB2_ReturnToBagMenuPocket
	.align	2, 0
	.globl	Task_ItemContext_FieldGive
	.type	 Task_ItemContext_FieldGive,function
	.thumb_func
Task_ItemContext_FieldGive:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L719
	ldrh	r0, [r4]
	bl	itemid_80BF6D8_mail_related
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L713	@cond_branch
	ldr	r2, .L719+0x4
	ldr	r3, .L719+0x8
	add	r0, r5, #0
	mov	r1, #0x1
	bl	DisplayItemMessage
	b	.L714
.L720:
	.align	2, 0
.L719:
	.word	gSpecialVar_ItemId
	.word	gText_CantWriteMail
	.word	sub_81AD350
.L713:
	ldrh	r0, [r4]
	bl	sub_8122148
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L715	@cond_branch
	ldrh	r0, [r4]
	ldr	r1, .L721
	bl	CopyItemName
	ldr	r4, .L721+0x4
	ldr	r1, .L721+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L721+0xc
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	DisplayItemMessage
	b	.L714
.L722:
	.align	2, 0
.L721:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_Var1CantBeHeldHere
	.word	sub_81AD350
.L715:
	ldr	r0, .L723
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x9
	beq	.L717	@cond_branch
	ldrh	r0, [r4]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L717	@cond_branch
	add	r0, r5, #0
	bl	Task_FadeAndCloseBagMenu
	b	.L714
.L724:
	.align	2, 0
.L723:
	.word	gBagPositionStruct
.L717:
	add	r0, r5, #0
	bl	BagMenu_PrintItemCantBeHeld
.L714:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 Task_ItemContext_FieldGive,.Lfe81-Task_ItemContext_FieldGive
	.align	2, 0
	.globl	Task_ItemContext_ItemPC_2
	.type	 Task_ItemContext_ItemPC_2,function
	.thumb_func
Task_ItemContext_ItemPC_2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L730
	ldrh	r0, [r5]
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L726	@cond_branch
	ldr	r2, .L730+0x4
	ldr	r3, .L730+0x8
	add	r0, r4, #0
	mov	r1, #0x1
	bl	DisplayItemMessage
	b	.L727
.L731:
	.align	2, 0
.L730:
	.word	gSpecialVar_ItemId
	.word	gText_CantWriteMail
	.word	sub_81AD350
.L726:
	ldr	r0, .L732
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x9
	beq	.L728	@cond_branch
	ldrh	r0, [r5]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L728	@cond_branch
	ldr	r0, .L732+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L732+0x8
	str	r0, [r1]
	b	.L727
.L733:
	.align	2, 0
.L732:
	.word	gBagPositionStruct
	.word	gTasks
	.word	Task_FadeAndCloseBagMenu
.L728:
	add	r0, r4, #0
	bl	BagMenu_PrintItemCantBeHeld
.L727:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 Task_ItemContext_ItemPC_2,.Lfe82-Task_ItemContext_ItemPC_2
	.align	2, 0
	.globl	Task_ItemContext_Sell
	.type	 Task_ItemContext_Sell,function
	.thumb_func
Task_ItemContext_Sell:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L740
	add	r6, r0, r1
	ldr	r4, .L740+0x4
	ldrh	r0, [r4]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L736	@cond_branch
	ldrh	r0, [r4]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L735	@cond_branch
.L736:
	ldrh	r0, [r4]
	ldr	r1, .L740+0x8
	bl	CopyItemName
	ldr	r4, .L740+0xc
	ldr	r1, .L740+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L740+0x14
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	DisplayItemMessage
	b	.L737
.L741:
	.align	2, 0
.L740:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_CantBuyKeyItem
	.word	BagMenu_InitListsMenu
.L735:
	mov	r0, #0x1
	strh	r0, [r6, #0x10]
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bne	.L738	@cond_branch
	bl	DisplayCurrentMoneyWindow
	add	r0, r5, #0
	bl	DisplaySellItemPriceAndConfirm
	b	.L737
.L738:
	ldrh	r0, [r4]
	ldr	r1, .L742
	bl	CopyItemName
	ldr	r4, .L742+0x4
	ldr	r1, .L742+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L742+0xc
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	DisplayItemMessage
.L737:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L743:
	.align	2, 0
.L742:
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_HowManyToSell
	.word	sub_81AD730
.Lfe83:
	.size	 Task_ItemContext_Sell,.Lfe83-Task_ItemContext_Sell
	.align	2, 0
	.type	 DisplaySellItemPriceAndConfirm,function
	.thumb_func
DisplaySellItemPriceAndConfirm:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L745
	add	r4, r4, r0
	ldr	r6, .L745+0x4
	ldr	r0, .L745+0x8
	ldrh	r0, [r0]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	mul	r1, r1, r0
	add	r0, r6, #0
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L745+0xc
	ldr	r1, .L745+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L745+0x14
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	DisplayItemMessage
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L746:
	.align	2, 0
.L745:
	.word	gTasks+0x8
	.word	gStringVar1
	.word	gSpecialVar_ItemId
	.word	gStringVar4
	.word	gText_ICanPayVar1
	.word	sub_81AD6E4
.Lfe84:
	.size	 DisplaySellItemPriceAndConfirm,.Lfe84-DisplaySellItemPriceAndConfirm
	.align	2, 0
	.globl	sub_81AD6E4
	.type	 sub_81AD6E4,function
	.thumb_func
sub_81AD6E4:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L748
	mov	r1, #0x6
	bl	BagMenu_YesNo
	pop	{r0}
	bx	r0
.L749:
	.align	2, 0
.L748:
	.word	sYesNoSellItemFunctions
.Lfe85:
	.size	 sub_81AD6E4,.Lfe85-sub_81AD6E4
	.align	2, 0
	.globl	BagMenu_CancelSell
	.type	 BagMenu_CancelSell,function
	.thumb_func
BagMenu_CancelSell:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L751
	add	r4, r4, r0
	bl	RemoveMoneyWindow
	mov	r0, #0x4
	bl	BagMenu_RemoveBagItemMessageindow
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	BagMenu_PrintCursor_
	add	r0, r5, #0
	bl	set_callback3_to_bag
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L752:
	.align	2, 0
.L751:
	.word	gTasks+0x8
.Lfe86:
	.size	 BagMenu_CancelSell,.Lfe86-BagMenu_CancelSell
	.align	2, 0
	.globl	sub_81AD730
	.type	 sub_81AD730,function
	.thumb_func
sub_81AD730:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r6, .L754
	add	r0, r4, r6
	mov	r8, r0
	mov	r0, #0x8
	bl	BagMenu_AddWindow
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L754+0x4
	ldrh	r0, [r0]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, r8
	mov	r3, #0x10
	ldrsh	r1, [r2, r3]
	mov	r2, r0
	mul	r2, r2, r1
	add	r0, r5, #0
	mov	r1, #0x1
	bl	PrintItemSoldAmount
	bl	DisplayCurrentMoneyWindow
	sub	r6, r6, #0x8
	add	r4, r4, r6
	ldr	r0, .L754+0x8
	str	r0, [r4]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L755:
	.align	2, 0
.L754:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	Task_SellHowManyDialogueHandleInput
.Lfe87:
	.size	 sub_81AD730,.Lfe87-sub_81AD730
	.align	2, 0
	.type	 Task_SellHowManyDialogueHandleInput,function
	.thumb_func
Task_SellHowManyDialogueHandleInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L762
	add	r6, r0, r1
	add	r0, r6, #0
	add	r0, r0, #0x10
	ldrh	r1, [r6, #0x4]
	bl	AdjustQuantityAccordingToDPadInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L757	@cond_branch
	ldr	r0, .L762+0x4
	ldr	r0, [r0]
	ldr	r1, .L762+0x8
	add	r0, r0, r1
	ldrb	r4, [r0]
	mov	r2, #0x10
	ldrsh	r5, [r6, r2]
	ldr	r0, .L762+0xc
	ldrh	r0, [r0]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, #0x10
	ldrsh	r1, [r6, r2]
	mov	r2, r0
	mul	r2, r2, r1
	add	r0, r4, #0
	add	r1, r5, #0
	bl	PrintItemSoldAmount
	b	.L758
.L763:
	.align	2, 0
.L762:
	.word	gTasks+0x8
	.word	gBagMenu
	.word	0x818
	.word	gSpecialVar_ItemId
.L757:
	ldr	r0, .L764
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L759	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x8
	bl	BagMenu_RemoveWindow
	add	r0, r4, #0
	bl	DisplaySellItemPriceAndConfirm
	b	.L758
.L765:
	.align	2, 0
.L764:
	.word	gMain
.L759:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L758	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	BagMenu_PrintCursor_
	bl	RemoveMoneyWindow
	mov	r0, #0x8
	bl	BagMenu_RemoveWindow
	mov	r0, #0x4
	bl	BagMenu_RemoveBagItemMessageindow
	add	r0, r5, #0
	bl	set_callback3_to_bag
.L758:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe88:
	.size	 Task_SellHowManyDialogueHandleInput,.Lfe88-Task_SellHowManyDialogueHandleInput
	.align	2, 0
	.globl	BagMenu_ConfirmSell
	.type	 BagMenu_ConfirmSell,function
	.thumb_func
BagMenu_ConfirmSell:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L767
	add	r4, r4, r0
	ldr	r6, .L767+0x4
	ldrh	r0, [r6]
	ldr	r1, .L767+0x8
	bl	CopyItemName
	ldr	r0, .L767+0xc
	mov	r8, r0
	ldrh	r0, [r6]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	mul	r1, r1, r0
	mov	r0, r8
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L767+0x10
	ldr	r1, .L767+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L767+0x18
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	DisplayItemMessage
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L768:
	.align	2, 0
.L767:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gStringVar2
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_TurnedOverVar1ForVar2
	.word	BagMenu_Sell_UpdateItemListAndMoney
.Lfe89:
	.size	 BagMenu_ConfirmSell,.Lfe89-BagMenu_ConfirmSell
	.align	2, 0
	.type	 BagMenu_Sell_UpdateItemListAndMoney,function
	.thumb_func
BagMenu_Sell_UpdateItemListAndMoney:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r6, r0, #0x2
	add	r6, r6, r0
	lsl	r6, r6, #0x3
	ldr	r0, .L770
	add	r0, r0, r6
	mov	sl, r0
	ldr	r7, .L770+0x4
	ldrb	r5, [r7, #0x5]
	lsl	r5, r5, #0x1
	mov	r1, #0x1c
	add	r1, r1, r7
	mov	r9, r1
	add	r9, r9, r5
	add	r0, r7, #0
	add	r0, r0, #0x8
	add	r5, r5, r0
	mov	r0, #0x5f
	bl	PlaySE
	ldr	r2, .L770+0x8
	mov	r8, r2
	ldrh	r0, [r2]
	mov	r3, sl
	ldrh	r1, [r3, #0x10]
	bl	RemoveBagItem
	ldr	r0, .L770+0xc
	ldr	r4, [r0]
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r4, r4, r1
	mov	r2, r8
	ldrh	r0, [r2]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r3, sl
	mov	r2, #0x10
	ldrsh	r1, [r3, r2]
	mul	r1, r1, r0
	add	r0, r4, #0
	bl	AddMoney
	mov	r3, sl
	ldrb	r0, [r3]
	mov	r1, r9
	add	r2, r5, #0
	bl	DestroyListMenuTask
	ldrb	r0, [r7, #0x5]
	bl	UpdatePocketItemList
	ldrb	r0, [r7, #0x5]
	bl	SetInitialScrollAndCursorPositions
	ldrb	r0, [r7, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L770+0x10
	mov	r2, r9
	ldrh	r1, [r2]
	ldrh	r2, [r5]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, sl
	strh	r0, [r3]
	mov	r1, #0x2
	bl	BagMenu_PrintCursor_
	ldr	r0, .L770+0x14
	ldr	r0, [r0]
	ldr	r1, .L770+0x18
	add	r0, r0, r1
	ldrb	r4, [r0]
	ldr	r2, .L770+0xc
	ldr	r0, [r2]
	mov	r3, #0x92
	lsl	r3, r3, #0x3
	add	r0, r0, r3
	bl	GetMoney
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x0
	bl	PrintMoneyAmountInMoneyBox
	ldr	r0, .L770
	sub	r0, r0, #0x8
	add	r6, r6, r0
	ldr	r0, .L770+0x1c
	str	r0, [r6]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L771:
	.align	2, 0
.L770:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gSpecialVar_ItemId
	.word	gSaveBlock1Ptr
	.word	gMultiuseListMenuTemplate
	.word	gBagMenu
	.word	0x819
	.word	BagMenu_Sell_WaitForABPress
.Lfe90:
	.size	 BagMenu_Sell_UpdateItemListAndMoney,.Lfe90-BagMenu_Sell_UpdateItemListAndMoney
	.align	2, 0
	.type	 BagMenu_Sell_WaitForABPress,function
	.thumb_func
BagMenu_Sell_WaitForABPress:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L774
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L773	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	RemoveMoneyWindow
	add	r0, r4, #0
	bl	BagMenu_InitListsMenu
.L773:
	pop	{r4}
	pop	{r0}
	bx	r0
.L775:
	.align	2, 0
.L774:
	.word	gMain
.Lfe91:
	.size	 BagMenu_Sell_WaitForABPress,.Lfe91-BagMenu_Sell_WaitForABPress
	.align	2, 0
	.globl	Task_ItemContext_Deposit
	.type	 Task_ItemContext_Deposit,function
	.thumb_func
Task_ItemContext_Deposit:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r5, r0, #0x3
	ldr	r6, .L779
	add	r1, r5, r6
	mov	r0, #0x1
	strh	r0, [r1, #0x10]
	mov	r3, #0x4
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x1
	bne	.L777	@cond_branch
	add	r0, r2, #0
	bl	BagMenu_TryDepositItem
	b	.L778
.L780:
	.align	2, 0
.L779:
	.word	gTasks+0x8
.L777:
	ldr	r0, .L781
	ldrh	r0, [r0]
	ldr	r1, .L781+0x4
	bl	CopyItemName
	ldr	r4, .L781+0x8
	ldr	r1, .L781+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	BagMenu_Print
	mov	r0, #0x7
	bl	sub_81ABC3C
	add	r0, r6, #0
	sub	r0, r0, #0x8
	add	r0, r5, r0
	ldr	r1, .L781+0x10
	str	r1, [r0]
.L778:
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L782:
	.align	2, 0
.L781:
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_DepositHowManyVar1
	.word	Task_ChooseHowManyToDeposit
.Lfe92:
	.size	 Task_ItemContext_Deposit,.Lfe92-Task_ItemContext_Deposit
	.align	2, 0
	.type	 Task_ChooseHowManyToDeposit,function
	.thumb_func
Task_ChooseHowManyToDeposit:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L789
	add	r5, r0, r1
	add	r0, r5, #0
	add	r0, r0, #0x10
	ldrh	r1, [r5, #0x4]
	bl	AdjustQuantityAccordingToDPadInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L784	@cond_branch
	ldr	r0, .L789+0x4
	ldr	r0, [r0]
	ldr	r1, .L789+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r2, #0x10
	ldrsh	r1, [r5, r2]
	bl	PrintItemDepositAmount
	b	.L785
.L790:
	.align	2, 0
.L789:
	.word	gTasks+0x8
	.word	gBagMenu
	.word	0x817
.L784:
	ldr	r0, .L791
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L786	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	bl	BagMenu_RemoveWindow
	add	r0, r4, #0
	bl	BagMenu_TryDepositItem
	b	.L785
.L792:
	.align	2, 0
.L791:
	.word	gMain
.L786:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L785	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	bl	BagMenu_PrintDescription
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	BagMenu_PrintCursor_
	mov	r0, #0x7
	bl	BagMenu_RemoveWindow
	add	r0, r6, #0
	bl	set_callback3_to_bag
.L785:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe93:
	.size	 Task_ChooseHowManyToDeposit,.Lfe93-Task_ChooseHowManyToDeposit
	.align	2, 0
	.type	 BagMenu_TryDepositItem,function
	.thumb_func
BagMenu_TryDepositItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r7, r1, #0x3
	ldr	r0, .L800
	mov	r9, r0
	add	r2, r7, #0
	add	r2, r2, r9
	mov	r8, r2
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldr	r4, .L800+0x4
	ldrh	r0, [r4]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	beq	.L794	@cond_branch
	ldr	r2, .L800+0x8
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	b	.L798
.L801:
	.align	2, 0
.L800:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gText_CantStoreImportantItems
.L794:
	ldrh	r0, [r4]
	mov	r3, r8
	ldrh	r1, [r3, #0x10]
	bl	AddPCItem
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x1
	bne	.L796	@cond_branch
	ldrh	r0, [r4]
	ldr	r1, .L802
	bl	CopyItemName
	ldr	r0, .L802+0x4
	mov	r2, r8
	mov	r3, #0x10
	ldrsh	r1, [r2, r3]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L802+0x8
	ldr	r1, .L802+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	str	r6, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r5, [sp, #0xc]
	str	r5, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	BagMenu_Print
	mov	r0, r9
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L802+0x10
	b	.L799
.L803:
	.align	2, 0
.L802:
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_DepositedVar2Var1s
	.word	Task_ActuallyToss
.L796:
	ldr	r2, .L804
	mov	r0, #0x1
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r5, [sp, #0xc]
	str	r5, [sp, #0x10]
.L798:
	mov	r1, #0x1
	mov	r3, #0x3
	bl	BagMenu_Print
	mov	r0, r9
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L804+0x4
.L799:
	str	r1, [r0]
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L805:
	.align	2, 0
.L804:
	.word	gText_NoRoomForItems
	.word	BagMenu_Deposit_WaitForABPress
.Lfe94:
	.size	 BagMenu_TryDepositItem,.Lfe94-BagMenu_TryDepositItem
	.align	2, 0
	.type	 BagMenu_Deposit_WaitForABPress,function
	.thumb_func
BagMenu_Deposit_WaitForABPress:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L808
	add	r5, r0, r1
	ldr	r0, .L808+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L807	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	bl	BagMenu_PrintDescription
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	BagMenu_PrintCursor_
	add	r0, r4, #0
	bl	set_callback3_to_bag
.L807:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L809:
	.align	2, 0
.L808:
	.word	gTasks+0x8
	.word	gMain
.Lfe95:
	.size	 BagMenu_Deposit_WaitForABPress,.Lfe95-BagMenu_Deposit_WaitForABPress
	.align	2, 0
	.globl	IsWallysBag
	.type	 IsWallysBag,function
	.thumb_func
IsWallysBag:
	push	{lr}
	ldr	r0, .L813
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0xa
	beq	.L811	@cond_branch
	mov	r0, #0x0
	b	.L812
.L814:
	.align	2, 0
.L813:
	.word	gBagPositionStruct
.L811:
	mov	r0, #0x1
.L812:
	pop	{r1}
	bx	r1
.Lfe96:
	.size	 IsWallysBag,.Lfe96-IsWallysBag
	.align	2, 0
	.globl	PrepareBagForWallyTutorial
	.type	 PrepareBagForWallyTutorial,function
	.thumb_func
PrepareBagForWallyTutorial:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L821
	mov	r0, #0xa4
	lsl	r0, r0, #0x1
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r5, .L821+0x4
	ldr	r1, [r5]
	ldr	r2, .L821+0x8
	add	r1, r1, r2
	mov	r2, #0xa0
	bl	memcpy
	ldr	r0, [r4]
	add	r0, r0, #0xa0
	ldr	r1, [r5]
	mov	r3, #0xed
	lsl	r3, r3, #0x3
	add	r1, r1, r3
	mov	r2, #0x7c
	bl	memcpy
	ldr	r2, [r4]
	ldr	r1, .L821+0xc
	ldrb	r0, [r1, #0x5]
	mov	r3, #0xa3
	lsl	r3, r3, #0x1
	add	r2, r2, r3
	strh	r0, [r2]
	mov	r5, #0x0
	mov	r8, r4
	mov	r0, #0x8e
	lsl	r0, r0, #0x1
	mov	ip, r0
	add	r6, r1, #0
	add	r6, r6, #0x1c
	mov	r7, #0x98
	lsl	r7, r7, #0x1
	add	r4, r1, #0
	add	r4, r4, #0x8
.L819:
	mov	r1, r8
	ldr	r2, [r1]
	lsl	r3, r5, #0x1
	mov	r1, ip
	add	r0, r2, r1
	add	r0, r0, r3
	ldrh	r1, [r4]
	strh	r1, [r0]
	add	r2, r2, r7
	add	r2, r2, r3
	ldrh	r0, [r6]
	strh	r0, [r2]
	add	r6, r6, #0x2
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x4
	bls	.L819	@cond_branch
	ldr	r4, .L821+0x4
	ldr	r0, [r4]
	ldr	r2, .L821+0x8
	add	r0, r0, r2
	mov	r1, #0x28
	bl	ClearItemSlots
	ldr	r0, [r4]
	mov	r3, #0xed
	lsl	r3, r3, #0x3
	add	r0, r0, r3
	mov	r1, #0x1f
	bl	ClearItemSlots
	bl	ResetBagScrollPositions
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L822:
	.align	2, 0
.L821:
	.word	sTempWallyBag
	.word	gSaveBlock1Ptr
	.word	0x918
	.word	gBagPositionStruct
.Lfe97:
	.size	 PrepareBagForWallyTutorial,.Lfe97-PrepareBagForWallyTutorial
	.align	2, 0
	.globl	RestoreBagAfterWallyTutorial
	.type	 RestoreBagAfterWallyTutorial,function
	.thumb_func
RestoreBagAfterWallyTutorial:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L829
	ldr	r0, [r5]
	ldr	r1, .L829+0x4
	add	r0, r0, r1
	ldr	r4, .L829+0x8
	ldr	r1, [r4]
	mov	r2, #0xa0
	bl	memcpy
	ldr	r0, [r5]
	mov	r2, #0xed
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	ldr	r1, [r4]
	add	r1, r1, #0xa0
	mov	r2, #0x7c
	bl	memcpy
	ldr	r1, .L829+0xc
	ldr	r0, [r4]
	mov	r2, #0xa3
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x5]
	mov	r5, #0x0
	mov	ip, r4
	add	r3, r1, #0
	add	r3, r3, #0x8
	mov	r7, ip
	mov	r6, #0x8e
	lsl	r6, r6, #0x1
	mov	r4, #0x98
	lsl	r4, r4, #0x1
.L827:
	lsl	r2, r5, #0x1
	ldr	r1, [r7]
	add	r0, r1, r6
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r3]
	add	r1, r1, r4
	add	r1, r1, r2
	ldrh	r0, [r1]
	strh	r0, [r3, #0x14]
	add	r3, r3, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x4
	bls	.L827	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	bl	Free
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L830:
	.align	2, 0
.L829:
	.word	gSaveBlock1Ptr
	.word	0x918
	.word	sTempWallyBag
	.word	gBagPositionStruct
.Lfe98:
	.size	 RestoreBagAfterWallyTutorial,.Lfe98-RestoreBagAfterWallyTutorial
	.align	2, 0
	.globl	DoWallyTutorialBagMenu
	.type	 DoWallyTutorialBagMenu,function
	.thumb_func
DoWallyTutorialBagMenu:
	push	{lr}
	bl	PrepareBagForWallyTutorial
	mov	r0, #0x1c
	mov	r1, #0x1
	bl	AddBagItem
	mov	r0, #0x4
	mov	r1, #0x1
	bl	AddBagItem
	ldr	r2, .L832
	mov	r0, #0xa
	mov	r1, #0x1
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L833:
	.align	2, 0
.L832:
	.word	CB2_SetUpReshowBattleScreenAfterMenu2
.Lfe99:
	.size	 DoWallyTutorialBagMenu,.Lfe99-DoWallyTutorialBagMenu
	.align	2, 0
	.globl	Task_WallyTutorialBagMenu
	.type	 Task_WallyTutorialBagMenu,function
	.thumb_func
Task_WallyTutorialBagMenu:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L843
	add	r4, r0, r1
	ldr	r0, .L843+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L835	@cond_branch
	mov	r0, #0x10
	ldrsh	r1, [r4, r0]
	cmp	r1, #0xcc
	beq	.L838	@cond_branch
	cmp	r1, #0xcc
	bgt	.L842	@cond_branch
	cmp	r1, #0x66
	beq	.L837	@cond_branch
	b	.L840
.L844:
	.align	2, 0
.L843:
	.word	gTasks+0x8
	.word	gPaletteFade
.L842:
	mov	r0, #0x99
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L839	@cond_branch
	b	.L840
.L837:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SwitchBagPocket
	b	.L840
.L838:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	BagMenu_PrintCursor_
	ldr	r1, .L845
	mov	r0, #0x4
	strh	r0, [r1]
	add	r0, r5, #0
	bl	OpenContextMenu
	b	.L840
.L846:
	.align	2, 0
.L845:
	.word	gSpecialVar_ItemId
.L839:
	mov	r0, #0x5
	bl	PlaySE
	bl	BagMenu_RemoveSomeWindow
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	bl	RestoreBagAfterWallyTutorial
	add	r0, r5, #0
	bl	Task_FadeAndCloseBagMenu
	b	.L835
.L840:
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
.L835:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe100:
	.size	 Task_WallyTutorialBagMenu,.Lfe100-Task_WallyTutorialBagMenu
	.align	2, 0
	.globl	unknown_ItemMenu_Show
	.type	 unknown_ItemMenu_Show,function
	.thumb_func
unknown_ItemMenu_Show:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L848
	ldr	r0, .L848+0x4
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L848+0x8
	mov	r0, #0x1
	strh	r0, [r1]
	bl	BagMenu_RemoveSomeWindow
	add	r0, r4, #0
	bl	Task_FadeAndCloseBagMenu
	pop	{r4}
	pop	{r0}
	bx	r0
.L849:
	.align	2, 0
.L848:
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_ItemId
	.word	gSpecialVar_Result
.Lfe101:
	.size	 unknown_ItemMenu_Show,.Lfe101-unknown_ItemMenu_Show
	.align	2, 0
	.globl	CB2_ApprenticeExitBagMenu
	.type	 CB2_ApprenticeExitBagMenu,function
	.thumb_func
CB2_ApprenticeExitBagMenu:
	push	{lr}
	ldr	r0, .L851
	ldr	r1, .L851+0x4
	str	r1, [r0]
	ldr	r0, .L851+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L852:
	.align	2, 0
.L851:
	.word	gFieldCallback
	.word	Apprentice_EnableBothScriptContexts
	.word	CB2_ReturnToField
.Lfe102:
	.size	 CB2_ApprenticeExitBagMenu,.Lfe102-CB2_ApprenticeExitBagMenu
	.align	2, 0
	.globl	unknown_ItemMenu_Give2
	.type	 unknown_ItemMenu_Give2,function
	.thumb_func
unknown_ItemMenu_Give2:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L854
	ldrh	r0, [r0]
	mov	r1, #0x1
	bl	RemoveBagItem
	ldr	r1, .L854+0x4
	mov	r0, #0x1
	strh	r0, [r1]
	bl	BagMenu_RemoveSomeWindow
	add	r0, r4, #0
	bl	Task_FadeAndCloseBagMenu
	pop	{r4}
	pop	{r0}
	bx	r0
.L855:
	.align	2, 0
.L854:
	.word	gSpecialVar_ItemId
	.word	gSpecialVar_Result
.Lfe103:
	.size	 unknown_ItemMenu_Give2,.Lfe103-unknown_ItemMenu_Give2
	.align	2, 0
	.globl	CB2_FavorLadyExitBagMenu
	.type	 CB2_FavorLadyExitBagMenu,function
	.thumb_func
CB2_FavorLadyExitBagMenu:
	push	{lr}
	ldr	r0, .L857
	ldr	r1, .L857+0x4
	str	r1, [r0]
	ldr	r0, .L857+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L858:
	.align	2, 0
.L857:
	.word	gFieldCallback
	.word	FieldCallback_FavorLadyEnableScriptContexts
	.word	CB2_ReturnToField
.Lfe104:
	.size	 CB2_FavorLadyExitBagMenu,.Lfe104-CB2_FavorLadyExitBagMenu
	.align	2, 0
	.globl	unknown_ItemMenu_Confirm2
	.type	 unknown_ItemMenu_Confirm2,function
	.thumb_func
unknown_ItemMenu_Confirm2:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L860
	mov	r0, #0x1
	strh	r0, [r1]
	bl	BagMenu_RemoveSomeWindow
	add	r0, r4, #0
	bl	Task_FadeAndCloseBagMenu
	pop	{r4}
	pop	{r0}
	bx	r0
.L861:
	.align	2, 0
.L860:
	.word	gSpecialVar_Result
.Lfe105:
	.size	 unknown_ItemMenu_Confirm2,.Lfe105-unknown_ItemMenu_Confirm2
	.align	2, 0
	.globl	CB2_QuizLadyExitBagMenu
	.type	 CB2_QuizLadyExitBagMenu,function
	.thumb_func
CB2_QuizLadyExitBagMenu:
	push	{lr}
	ldr	r0, .L863
	ldr	r1, .L863+0x4
	str	r1, [r0]
	ldr	r0, .L863+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L864:
	.align	2, 0
.L863:
	.word	gFieldCallback
	.word	FieldCallback_QuizLadyEnableScriptContexts
	.word	CB2_ReturnToField
.Lfe106:
	.size	 CB2_QuizLadyExitBagMenu,.Lfe106-CB2_QuizLadyExitBagMenu
	.align	2, 0
	.globl	BagMenu_PrintPocketNames
	.type	 BagMenu_PrintPocketNames,function
	.thumb_func
BagMenu_PrintPocketNames:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x1c
	add	r4, r0, #0
	mov	r8, r1
	mov	r0, #0x0
	mov	r1, #0
	str	r0, [sp, #0x14]
	str	r1, [sp, #0x18]
	ldr	r1, .L867
	ldr	r0, [sp, #0x14]
	and	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x15
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	ldr	r1, .L867+0x4
	ldr	r0, [sp, #0x18]
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	str	r0, [sp, #0x18]
	add	r0, sp, #0x14
	bl	AddWindow
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	add	r1, r4, #0
	mov	r2, #0x40
	bl	GetStringCenterAlignXOffset
	lsl	r3, r0, #0x18
	lsr	r3, r3, #0x18
	mov	r7, #0x1
	str	r7, [sp]
	mov	r5, #0x0
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0xff
	mov	r9, r0
	str	r0, [sp, #0xc]
	str	r7, [sp, #0x10]
	add	r0, r6, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	BagMenu_Print
	mov	r2, r8
	cmp	r2, #0
	beq	.L866	@cond_branch
	mov	r0, #0x1
	mov	r1, r8
	mov	r2, #0x40
	bl	GetStringCenterAlignXOffset
	add	r3, r0, #0
	add	r3, r3, #0x40
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r7, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, r9
	str	r0, [sp, #0xc]
	str	r7, [sp, #0x10]
	add	r0, r6, #0
	mov	r1, #0x1
	mov	r2, r8
	bl	BagMenu_Print
.L866:
	add	r0, r6, #0
	mov	r1, #0x7
	bl	GetWindowAttribute
	ldr	r1, .L867+0x8
	ldr	r1, [r1]
	ldr	r2, .L867+0xc
	add	r1, r1, r2
	ldr	r2, .L867+0x10
	bl	CpuSet
	add	r0, r6, #0
	bl	RemoveWindow
	add	sp, sp, #0x1c
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L868:
	.align	2, 0
.L867:
	.word	0xffffff
	.word	-0x100
	.word	gBagMenu
	.word	0x84e
	.word	0x4000100
.Lfe107:
	.size	 BagMenu_PrintPocketNames,.Lfe107-BagMenu_PrintPocketNames
	.align	2, 0
	.globl	BagMenu_CopyPocketNameToWindow
	.type	 BagMenu_CopyPocketNameToWindow,function
	.thumb_func
BagMenu_CopyPocketNameToWindow:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	cmp	r7, #0x8
	bls	.L870	@cond_branch
	mov	r7, #0x8
.L870:
	ldr	r0, .L871
	ldr	r4, [r0]
	ldr	r0, .L871+0x4
	add	r4, r4, r0
	mov	r0, #0x2
	mov	r1, #0x7
	bl	GetWindowAttribute
	add	r5, r0, #0
	lsl	r0, r7, #0x5
	add	r0, r4, r0
	ldr	r6, .L871+0x8
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CpuSet
	add	r0, r7, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x5
	add	r4, r4, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CpuSet
	mov	r0, #0x2
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L872:
	.align	2, 0
.L871:
	.word	gBagMenu
	.word	0x84e
	.word	0x4000040
.Lfe108:
	.size	 BagMenu_CopyPocketNameToWindow,.Lfe108-BagMenu_CopyPocketNameToWindow
	.align	2, 0
	.globl	SetupBagMenu_Textboxes
	.type	 SetupBagMenu_Textboxes,function
	.thumb_func
SetupBagMenu_Textboxes:
	push	{r4, lr}
	ldr	r0, .L879
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0xe0
	bl	LoadUserWindowBorderGfx
	mov	r0, #0x0
	mov	r1, #0xa
	mov	r2, #0xd0
	bl	LoadMessageBoxGfx
	mov	r0, #0xc0
	mov	r1, #0x1
	bl	ListMenuLoadStdPalAt
	ldr	r0, .L879+0x4
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r4, #0x0
.L877:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L877	@cond_branch
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L880:
	.align	2, 0
.L879:
	.word	sDefaultBagWindows
	.word	gUnknown_0860F074
.Lfe109:
	.size	 SetupBagMenu_Textboxes,.Lfe109-SetupBagMenu_Textboxes
	.align	2, 0
	.globl	BagMenu_Print
	.type	 BagMenu_Print,function
	.thumb_func
BagMenu_Print:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	mov	r9, r3
	ldr	r3, [sp, #0x30]
	ldr	r4, [sp, #0x34]
	ldr	r6, [sp, #0x38]
	ldr	r5, [sp, #0x3c]
	mov	r8, r5
	ldr	r5, [sp, #0x40]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r7, r9
	lsl	r7, r7, #0x18
	lsr	r7, r7, #0x18
	mov	r9, r7
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r6, [sp, #0x4]
	lsl	r4, r5, #0x1
	add	r4, r4, r5
	ldr	r5, .L882
	add	r4, r4, r5
	str	r4, [sp, #0x8]
	mov	r4, r8
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	str	r4, [sp, #0xc]
	str	r2, [sp, #0x10]
	mov	r2, r9
	bl	AddTextPrinterParameterized4
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L883:
	.align	2, 0
.L882:
	.word	sFontColorTable
.Lfe110:
	.size	 BagMenu_Print,.Lfe110-BagMenu_Print
	.align	2, 0
	.globl	sub_81AE124
	.type	 sub_81AE124,function
	.thumb_func
sub_81AE124:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L885
	ldr	r1, [r1]
	mov	r2, #0x81
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	add	r1, r1, r0
	ldrb	r0, [r1]
	bx	lr
.L886:
	.align	2, 0
.L885:
	.word	gBagMenu
.Lfe111:
	.size	 sub_81AE124,.Lfe111-sub_81AE124
	.align	2, 0
	.type	 BagMenu_AddWindow,function
	.thumb_func
BagMenu_AddWindow:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L889
	mov	r3, #0x81
	lsl	r3, r3, #0x4
	add	r1, r2, r3
	ldr	r0, [r0]
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0xff
	bne	.L888	@cond_branch
	lsl	r0, r2, #0x3
	ldr	r1, .L889+0x4
	add	r0, r0, r1
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0x1
	mov	r3, #0xe
	bl	DrawStdFrameWithCustomTileAndPalette
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
.L888:
	ldrb	r0, [r4]
	pop	{r4}
	pop	{r1}
	bx	r1
.L890:
	.align	2, 0
.L889:
	.word	gBagMenu
	.word	sContextMenuWindowTemplates
.Lfe112:
	.size	 BagMenu_AddWindow,.Lfe112-BagMenu_AddWindow
	.align	2, 0
	.globl	BagMenu_RemoveWindow
	.type	 BagMenu_RemoveWindow,function
	.thumb_func
BagMenu_RemoveWindow:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L893
	mov	r2, #0x81
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, [r1]
	add	r4, r1, r0
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L892	@cond_branch
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	bl	RemoveWindow
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0xff
	strb	r0, [r4]
.L892:
	pop	{r4}
	pop	{r0}
	bx	r0
.L894:
	.align	2, 0
.L893:
	.word	gBagMenu
.Lfe113:
	.size	 BagMenu_RemoveWindow,.Lfe113-BagMenu_RemoveWindow
	.align	2, 0
	.globl	AddItemMessageWindow
	.type	 AddItemMessageWindow,function
	.thumb_func
AddItemMessageWindow:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L897
	mov	r3, #0x81
	lsl	r3, r3, #0x4
	add	r1, r2, r3
	ldr	r0, [r0]
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0xff
	bne	.L896	@cond_branch
	lsl	r0, r2, #0x3
	ldr	r1, .L897+0x4
	add	r0, r0, r1
	bl	AddWindow
	strb	r0, [r4]
.L896:
	ldrb	r0, [r4]
	pop	{r4}
	pop	{r1}
	bx	r1
.L898:
	.align	2, 0
.L897:
	.word	gBagMenu
	.word	sContextMenuWindowTemplates
.Lfe114:
	.size	 AddItemMessageWindow,.Lfe114-AddItemMessageWindow
	.align	2, 0
	.globl	BagMenu_RemoveBagItemMessageindow
	.type	 BagMenu_RemoveBagItemMessageindow,function
	.thumb_func
BagMenu_RemoveBagItemMessageindow:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L901
	mov	r2, #0x81
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, [r1]
	add	r4, r1, r0
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L900	@cond_branch
	mov	r1, #0x0
	bl	ClearDialogWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	bl	RemoveWindow
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0xff
	strb	r0, [r4]
.L900:
	pop	{r4}
	pop	{r0}
	bx	r0
.L902:
	.align	2, 0
.L901:
	.word	gBagMenu
.Lfe115:
	.size	 BagMenu_RemoveBagItemMessageindow,.Lfe115-BagMenu_RemoveBagItemMessageindow
	.align	2, 0
	.globl	BagMenu_YesNo
	.type	 BagMenu_YesNo,function
	.thumb_func
BagMenu_YesNo:
	push	{lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x15
	ldr	r3, .L904
	add	r1, r1, r3
	mov	r3, #0x2
	str	r3, [sp]
	mov	r3, #0x1
	str	r3, [sp, #0x4]
	mov	r3, #0xe
	str	r3, [sp, #0x8]
	str	r2, [sp, #0xc]
	mov	r2, #0x1
	mov	r3, #0x0
	bl	CreateYesNoMenuWithCallbacks
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L905:
	.align	2, 0
.L904:
	.word	sContextMenuWindowTemplates
.Lfe116:
	.size	 BagMenu_YesNo,.Lfe116-BagMenu_YesNo
	.align	2, 0
	.type	 DisplayCurrentMoneyWindow,function
	.thumb_func
DisplayCurrentMoneyWindow:
	push	{r4, lr}
	mov	r0, #0x9
	bl	BagMenu_AddWindow
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L907
	ldr	r0, [r0]
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	bl	GetMoney
	add	r3, r0, #0
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0xe
	bl	PrintMoneyAmountInMoneyBoxWithBorder
	mov	r0, #0x13
	mov	r1, #0xb
	bl	AddMoneyLabelObject
	pop	{r4}
	pop	{r0}
	bx	r0
.L908:
	.align	2, 0
.L907:
	.word	gSaveBlock1Ptr
.Lfe117:
	.size	 DisplayCurrentMoneyWindow,.Lfe117-DisplayCurrentMoneyWindow
	.align	2, 0
	.type	 RemoveMoneyWindow,function
	.thumb_func
RemoveMoneyWindow:
	push	{lr}
	mov	r0, #0x9
	bl	BagMenu_RemoveWindow
	bl	RemoveMoneyLabelObject
	pop	{r0}
	bx	r0
.Lfe118:
	.size	 RemoveMoneyWindow,.Lfe118-RemoveMoneyWindow
	.align	2, 0
	.globl	BagMenu_PrepareTMHMMoveWindow
	.type	 BagMenu_PrepareTMHMMoveWindow,function
	.thumb_func
BagMenu_PrepareTMHMMoveWindow:
	push	{lr}
	mov	r0, #0x3
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x3
	mov	r1, #0x14
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BlitMenuInfoIcon
	mov	r0, #0x3
	mov	r1, #0x15
	mov	r2, #0x0
	mov	r3, #0xc
	bl	BlitMenuInfoIcon
	mov	r0, #0x3
	mov	r1, #0x16
	mov	r2, #0x0
	mov	r3, #0x18
	bl	BlitMenuInfoIcon
	mov	r0, #0x3
	mov	r1, #0x17
	mov	r2, #0x0
	mov	r3, #0x24
	bl	BlitMenuInfoIcon
	mov	r0, #0x3
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.Lfe119:
	.size	 BagMenu_PrepareTMHMMoveWindow,.Lfe119-BagMenu_PrepareTMHMMoveWindow
	.align	2, 0
	.globl	PrintTMHMMoveData
	.type	 PrintTMHMMoveData,function
	.thumb_func
PrintTMHMMoveData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x4
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	cmp	r4, #0
	bne	.L912	@cond_branch
	mov	r4, #0x0
	mov	r5, #0x0
.L916:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x18
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	mov	r0, #0x4
	str	r0, [sp, #0x10]
	mov	r1, #0x1
	ldr	r2, .L923
	mov	r3, #0x7
	bl	BagMenu_Print
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L916	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L918
.L924:
	.align	2, 0
.L923:
	.word	gText_ThreeDashes
.L912:
	add	r0, r4, #0
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r1, .L925
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	ldrb	r1, [r5, #0x3]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x4
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BlitMenuInfoIcon
	ldrb	r0, [r5, #0x2]
	cmp	r0, #0x1
	bhi	.L919	@cond_branch
	ldr	r2, .L925+0x4
	b	.L920
.L926:
	.align	2, 0
.L925:
	.word	gBattleMoves
	.word	gText_ThreeDashes
.L919:
	ldr	r4, .L927
	ldrb	r1, [r5, #0x2]
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r2, r4, #0
.L920:
	mov	r0, #0xc
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	mov	r0, #0x4
	str	r0, [sp, #0x10]
	mov	r1, #0x1
	mov	r3, #0x7
	bl	BagMenu_Print
	ldr	r2, .L927+0x4
	lsl	r1, r7, #0x2
	add	r0, r1, r7
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x4]
	add	r6, r1, #0
	cmp	r0, #0
	bne	.L921	@cond_branch
	ldr	r2, .L927+0x8
	b	.L922
.L928:
	.align	2, 0
.L927:
	.word	gStringVar1
	.word	gBattleMoves
	.word	gText_ThreeDashes
.L921:
	ldr	r4, .L929
	ldrb	r1, [r2, #0x4]
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r2, r4, #0
.L922:
	mov	r0, #0x18
	str	r0, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0xff
	mov	r8, r0
	str	r0, [sp, #0xc]
	mov	r0, #0x4
	mov	r9, r0
	str	r0, [sp, #0x10]
	mov	r1, #0x1
	mov	r3, #0x7
	bl	BagMenu_Print
	ldr	r5, .L929
	ldr	r1, .L929+0x4
	add	r0, r6, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x5]
	add	r0, r5, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x24
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, r8
	str	r0, [sp, #0xc]
	mov	r0, r9
	str	r0, [sp, #0x10]
	mov	r0, #0x4
	mov	r1, #0x1
	add	r2, r5, #0
	mov	r3, #0x7
	bl	BagMenu_Print
	mov	r0, #0x4
	mov	r1, #0x2
	bl	CopyWindowToVram
.L918:
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L930:
	.align	2, 0
.L929:
	.word	gStringVar1
	.word	gBattleMoves
.Lfe120:
	.size	 PrintTMHMMoveData,.Lfe120-PrintTMHMMoveData
	.section .rodata
	.type	 sText_SortItemsHow,object
sText_SortItemsHow:
	.byte	0xcd
	.byte	0xe3
	.byte	0xe6
	.byte	0xe8
	.byte	0x0
	.byte	0xdd
	.byte	0xe8
	.byte	0xd9
	.byte	0xe1
	.byte	0xe7
	.byte	0x0
	.byte	0xdc
	.byte	0xe3
	.byte	0xeb
	.byte	0xac
	.byte	0xff
	.size	 sText_SortItemsHow,16
	.type	 sText_Name,object
sText_Name:
	.byte	0xe2
	.byte	0xd5
	.byte	0xe1
	.byte	0xd9
	.byte	0xff
	.size	 sText_Name,5
	.type	 sText_Type,object
sText_Type:
	.byte	0xe8
	.byte	0xed
	.byte	0xe4
	.byte	0xd9
	.byte	0xff
	.size	 sText_Type,5
	.type	 sText_Amount,object
sText_Amount:
	.byte	0xd5
	.byte	0xe1
	.byte	0xe3
	.byte	0xe9
	.byte	0xe2
	.byte	0xe8
	.byte	0xff
	.size	 sText_Amount,7
	.type	 sText_Number,object
sText_Number:
	.byte	0xe2
	.byte	0xe9
	.byte	0xe1
	.byte	0xd6
	.byte	0xd9
	.byte	0xe6
	.byte	0xff
	.size	 sText_Number,7
	.type	 sText_ItemsSorted,object
sText_ItemsSorted:
	.byte	0xc3
	.byte	0xe8
	.byte	0xd9
	.byte	0xe1
	.byte	0xe7
	.byte	0x0
	.byte	0xe7
	.byte	0xe3
	.byte	0xe6
	.byte	0xe8
	.byte	0xd9
	.byte	0xd8
	.byte	0x0
	.byte	0xd6
	.byte	0xed
	.byte	0x0
	.byte	0xfd
	.byte	0x2
	.byte	0xab
	.byte	0xff
	.size	 sText_ItemsSorted,20
	.align	2, 0
	.type	 sSortTypeStrings,object
sSortTypeStrings:
	.word	sText_Number
	.word	sText_Name
	.word	sText_Type
	.word	sText_Amount
	.word	sText_Type
	.size	 sSortTypeStrings,20
	.type	 sBagMenuSortItems,object
sBagMenuSortItems:
	.byte	0xe
	.byte	0xf
	.byte	0x10
	.byte	0x4
	.size	 sBagMenuSortItems,4
	.type	 sBagMenuSortKeyItems,object
sBagMenuSortKeyItems:
	.byte	0xe
	.byte	0x4
	.size	 sBagMenuSortKeyItems,2
	.type	 sBagMenuSortPokeBalls,object
sBagMenuSortPokeBalls:
	.byte	0xe
	.byte	0x10
	.byte	0x16
	.byte	0x4
	.size	 sBagMenuSortPokeBalls,4
	.type	 sBagMenuSortBerries,object
sBagMenuSortBerries:
	.byte	0xe
	.byte	0x10
	.byte	0x11
	.byte	0x4
	.size	 sBagMenuSortBerries,4
	.type	 sBagMenuSortTMHMs,object
sBagMenuSortTMHMs:
	.byte	0xe
	.byte	0x12
	.byte	0x11
	.byte	0x4
	.size	 sBagMenuSortTMHMs,4
	.align	1, 0
	.type	 sItemsByType,object
	.size	 sItemsByType,1546
sItemsByType:
	.space	56
	.short	0x1
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x2
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x2
	.short	0x1
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x2
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x1
	.short	0x1
	.short	0x2
	.short	0x2
	.short	0x1
	.short	0x14
	.short	0x14
	.short	0x16
	.short	0x16
	.short	0x16
	.short	0x16
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x4
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x6
	.space	14
	.short	0x14
	.short	0x14
	.short	0x14
	.short	0x14
	.short	0x14
	.short	0x14
	.short	0x14
	.short	0x0
	.short	0x13
	.short	0x13
	.short	0x13
	.short	0x13
	.short	0x2
	.short	0x14
	.short	0x18
	.short	0x18
	.short	0x18
	.short	0x18
	.short	0x18
	.short	0x18
	.short	0x18
	.short	0x18
	.short	0x18
	.short	0x18
	.short	0x18
	.short	0x18
	.space	134
	.short	0xb
	.short	0xb
	.short	0xa
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0x7
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0x7
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0x7
	.short	0xb
	.short	0x7
	.short	0x6
	.short	0x7
	.short	0x7
	.short	0x7
	.short	0x7
	.short	0x7
	.short	0x7
	.short	0x7
	.short	0x7
	.short	0x7
	.short	0x7
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0x7
	.short	0xb
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0x10
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xb
	.short	0x7
	.short	0x7
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0xb
	.short	0x14
	.short	0xb
	.short	0xb
	.short	0xb
	.space	2
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xf
	.short	0xf
	.short	0xf
	.short	0xf
	.space	10
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.short	0x11
	.space	2
	.short	0x17
	.short	0x17
	.short	0x17
	.short	0x17
	.short	0x17
	.short	0x17
	.short	0x17
	.short	0x17
	.short	0x17
	.short	0x17
	.space	32
	.short	0x11
	.short	0x11
	.space	434
	.short	0x4
	.short	0x4
	.space	6
	.short	0x17
	.space	154
.text
	.align	2, 0
	.type	 AddBagSortSubMenu,function
	.thumb_func
AddBagSortSubMenu:
	push	{r4, lr}
	add	sp, sp, #-0x14
	ldr	r0, .L946
	ldrb	r0, [r0, #0x5]
	add	r0, r0, #0x1
	cmp	r0, #0x7
	beq	.L935	@cond_branch
	cmp	r0, #0x7
	bgt	.L939	@cond_branch
	cmp	r0, #0x3
	beq	.L936	@cond_branch
	b	.L937
.L947:
	.align	2, 0
.L946:
	.word	gBagPositionStruct
.L939:
	cmp	r0, #0x9
	beq	.L934	@cond_branch
	cmp	r0, #0xa
	bne	.L937	@cond_branch
	ldr	r4, .L948
	ldr	r0, [r4]
	mov	r1, #0x82
	lsl	r1, r1, #0x4
	add	r2, r0, r1
	ldr	r1, .L948+0x4
	str	r1, [r2]
	ldr	r2, .L948+0x8
	add	r0, r0, r2
	mov	r2, #0x2
	bl	memcpy
	ldr	r0, [r4]
	ldr	r1, .L948+0xc
	add	r0, r0, r1
	mov	r1, #0x2
	b	.L944
.L949:
	.align	2, 0
.L948:
	.word	gBagMenu
	.word	sBagMenuSortKeyItems
	.word	0x824
	.word	0x828
.L934:
	ldr	r4, .L950
	ldr	r0, [r4]
	mov	r1, #0x82
	lsl	r1, r1, #0x4
	add	r2, r0, r1
	ldr	r1, .L950+0x4
	b	.L945
.L951:
	.align	2, 0
.L950:
	.word	gBagMenu
	.word	sBagMenuSortTMHMs
.L935:
	ldr	r4, .L952
	ldr	r0, [r4]
	mov	r1, #0x82
	lsl	r1, r1, #0x4
	add	r2, r0, r1
	ldr	r1, .L952+0x4
	b	.L945
.L953:
	.align	2, 0
.L952:
	.word	gBagMenu
	.word	sBagMenuSortBerries
.L936:
	ldr	r4, .L954
	ldr	r0, [r4]
	mov	r1, #0x82
	lsl	r1, r1, #0x4
	add	r2, r0, r1
	ldr	r1, .L954+0x4
	b	.L945
.L955:
	.align	2, 0
.L954:
	.word	gBagMenu
	.word	sBagMenuSortPokeBalls
.L937:
	ldr	r4, .L956
	ldr	r0, [r4]
	mov	r1, #0x82
	lsl	r1, r1, #0x4
	add	r2, r0, r1
	ldr	r1, .L956+0x4
.L945:
	str	r1, [r2]
	ldr	r2, .L956+0x8
	add	r0, r0, r2
	mov	r2, #0x4
	bl	memcpy
	ldr	r0, [r4]
	ldr	r1, .L956+0xc
	add	r0, r0, r1
	mov	r1, #0x4
.L944:
	strb	r1, [r0]
	ldr	r4, .L956+0x10
	ldr	r1, .L956+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	BagMenu_Print
	ldr	r0, .L956
	ldr	r0, [r0]
	ldr	r2, .L956+0xc
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L940	@cond_branch
	mov	r0, #0x1
	bl	BagMenu_AddWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_81ACAF8
	b	.L941
.L957:
	.align	2, 0
.L956:
	.word	gBagMenu
	.word	sBagMenuSortItems
	.word	0x824
	.word	0x828
	.word	gStringVar4
	.word	sText_SortItemsHow
.L940:
	cmp	r0, #0x4
	bne	.L942	@cond_branch
	mov	r0, #0x2
	bl	BagMenu_AddWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	mov	r2, #0x2
	bl	sub_81ACB54
	b	.L941
.L942:
	mov	r0, #0x3
	bl	BagMenu_AddWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	mov	r2, #0x3
	bl	sub_81ACB54
.L941:
	add	sp, sp, #0x14
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe121:
	.size	 AddBagSortSubMenu,.Lfe121-AddBagSortSubMenu
	.align	2, 0
	.type	 Task_LoadBagSortOptions,function
	.thumb_func
Task_LoadBagSortOptions:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	AddBagSortSubMenu
	ldr	r1, .L959
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L959+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L960:
	.align	2, 0
.L959:
	.word	gTasks
	.word	Task_HandleOutOfBattleItemMenuInput
.Lfe122:
	.size	 Task_LoadBagSortOptions,.Lfe122-Task_LoadBagSortOptions
	.align	2, 0
	.type	 ItemMenu_SortByName,function
	.thumb_func
ItemMenu_SortByName:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L962
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r0, #0x1
	strh	r0, [r4, #0xc]
	ldr	r0, .L962+0x4
	ldr	r1, .L962+0x8
	ldr	r1, [r1, #0x4]
	bl	StringCopy
	ldr	r0, .L962+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L963:
	.align	2, 0
.L962:
	.word	gTasks
	.word	gStringVar1
	.word	sSortTypeStrings
	.word	SortBagItems
.Lfe123:
	.size	 ItemMenu_SortByName,.Lfe123-ItemMenu_SortByName
	.align	2, 0
	.type	 ItemMenu_SortByType,function
	.thumb_func
ItemMenu_SortByType:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L965
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r0, #0x4
	strh	r0, [r4, #0xc]
	ldr	r0, .L965+0x4
	ldr	r1, .L965+0x8
	ldr	r1, [r1, #0x10]
	bl	StringCopy
	ldr	r0, .L965+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L966:
	.align	2, 0
.L965:
	.word	gTasks
	.word	gStringVar1
	.word	sSortTypeStrings
	.word	SortBagItems
.Lfe124:
	.size	 ItemMenu_SortByType,.Lfe124-ItemMenu_SortByType
	.align	2, 0
	.type	 ItemMenu_SortByAmount,function
	.thumb_func
ItemMenu_SortByAmount:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L968
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r0, #0x3
	strh	r0, [r4, #0xc]
	ldr	r0, .L968+0x4
	ldr	r1, .L968+0x8
	ldr	r1, [r1, #0xc]
	bl	StringCopy
	ldr	r0, .L968+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L969:
	.align	2, 0
.L968:
	.word	gTasks
	.word	gStringVar1
	.word	sSortTypeStrings
	.word	SortBagItems
.Lfe125:
	.size	 ItemMenu_SortByAmount,.Lfe125-ItemMenu_SortByAmount
	.align	2, 0
	.type	 ItemMenu_SortByNumber,function
	.thumb_func
ItemMenu_SortByNumber:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L971
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r0, #0x0
	strh	r0, [r4, #0xc]
	ldr	r0, .L971+0x4
	ldr	r1, .L971+0x8
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L971+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L972:
	.align	2, 0
.L971:
	.word	gTasks
	.word	gStringVar1
	.word	sSortTypeStrings
	.word	SortBagItems
.Lfe126:
	.size	 ItemMenu_SortByNumber,.Lfe126-ItemMenu_SortByNumber
	.align	2, 0
	.type	 ItemMenu_SortByMoveType,function
	.thumb_func
ItemMenu_SortByMoveType:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L974
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r0, #0x2
	strh	r0, [r4, #0xc]
	ldr	r0, .L974+0x4
	ldr	r1, .L974+0x8
	ldr	r1, [r1, #0x8]
	bl	StringCopy
	ldr	r0, .L974+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L975:
	.align	2, 0
.L974:
	.word	gTasks
	.word	gStringVar1
	.word	sSortTypeStrings
	.word	SortBagItems
.Lfe127:
	.size	 ItemMenu_SortByMoveType,.Lfe127-ItemMenu_SortByMoveType
	.align	2, 0
	.type	 SortBagItems,function
	.thumb_func
SortBagItems:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L977
	add	r4, r4, r0
	bl	BagMenu_RemoveSomeWindow
	ldr	r0, .L977+0x4
	ldr	r2, .L977+0x8
	mov	r3, #0x4
	ldrsh	r1, [r4, r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r4, .L977+0xc
	ldr	r1, .L977+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L977+0x14
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	DisplayItemMessage
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L978:
	.align	2, 0
.L977:
	.word	gTasks+0x8
	.word	gStringVar1
	.word	sSortTypeStrings
	.word	gStringVar4
	.word	sText_ItemsSorted
	.word	Task_SortFinish
.Lfe128:
	.size	 SortBagItems,.Lfe128-SortBagItems
	.align	2, 0
	.type	 Task_SortFinish,function
	.thumb_func
Task_SortFinish:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L981
	add	r5, r0, r1
	ldr	r4, .L981+0x4
	ldrb	r2, [r4, #0x5]
	lsl	r1, r2, #0x1
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r0, r1
	mov	r8, r0
	add	r0, r4, #0
	add	r0, r0, #0x8
	add	r7, r1, r0
	ldr	r0, .L981+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L980	@cond_branch
	ldrb	r1, [r5, #0x4]
	add	r0, r2, #0
	bl	SortItemsInBag
	mov	r0, #0x4
	bl	BagMenu_RemoveBagItemMessageindow
	ldrb	r0, [r5]
	mov	r1, r8
	add	r2, r7, #0
	bl	DestroyListMenuTask
	ldrb	r0, [r4, #0x5]
	bl	SetInitialScrollAndCursorPositions
	ldrb	r0, [r4, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L981+0xc
	mov	r2, r8
	ldrh	r1, [r2]
	ldrh	r2, [r7]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r6, #0
	bl	set_callback3_to_bag
.L980:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L982:
	.align	2, 0
.L981:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gMain
	.word	gMultiuseListMenuTemplate
.Lfe129:
	.size	 Task_SortFinish,.Lfe129-Task_SortFinish
	.align	2, 0
	.globl	SortItemsInBag
	.type	 SortItemsInBag,function
	.thumb_func
SortItemsInBag:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	cmp	r0, #0x9
	bls	.LCB10093
	b	.L983	@long jump
.LCB10093:
	lsl	r0, r0, #0x2
	ldr	r1, .L1008
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1009:
	.align	2, 0
.L1008:
	.word	.L996
	.align	2, 0
	.align	2, 0
.L996:
	.word	.L985
	.word	.L986
	.word	.L987
	.word	.L988
	.word	.L989
	.word	.L990
	.word	.L991
	.word	.L992
	.word	.L993
	.word	.L994
.L985:
	ldr	r0, .L1010
	ldr	r0, [r0]
	mov	r1, #0xac
	lsl	r1, r1, #0x3
	b	.L1005
.L1011:
	.align	2, 0
.L1010:
	.word	gSaveBlock1Ptr
.L986:
	ldr	r0, .L1012
	ldr	r0, [r0]
	ldr	r1, .L1012+0x4
	add	r4, r0, r1
	mov	r5, #0x28
	b	.L984
.L1013:
	.align	2, 0
.L1012:
	.word	gSaveBlock1Ptr
	.word	0x918
.L987:
	ldr	r0, .L1014
	ldr	r0, [r0]
	mov	r1, #0xed
	lsl	r1, r1, #0x3
	add	r4, r0, r1
	mov	r5, #0x1f
	b	.L984
.L1015:
	.align	2, 0
.L1014:
	.word	gSaveBlock1Ptr
.L988:
	ldr	r0, .L1016
	ldr	r0, [r0]
	ldr	r1, .L1016+0x4
	add	r4, r0, r1
	mov	r5, #0x64
	b	.L984
.L1017:
	.align	2, 0
.L1016:
	.word	gSaveBlock1Ptr
	.word	0x9b8
.L989:
	ldr	r0, .L1018
	ldr	r0, [r0]
	mov	r1, #0xc6
	lsl	r1, r1, #0x4
.L1005:
	add	r4, r0, r1
	mov	r5, #0x50
	b	.L984
.L1019:
	.align	2, 0
.L1018:
	.word	gSaveBlock1Ptr
.L990:
	ldr	r0, .L1020
	ldr	r0, [r0]
	mov	r1, #0xda
	lsl	r1, r1, #0x4
	add	r4, r0, r1
	mov	r5, #0x2f
	b	.L984
.L1021:
	.align	2, 0
.L1020:
	.word	gSaveBlock1Ptr
.L991:
	ldr	r0, .L1022
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	b	.L1006
.L1023:
	.align	2, 0
.L1022:
	.word	gSaveBlock1Ptr
.L992:
	ldr	r0, .L1024
	ldr	r0, [r0]
	ldr	r1, .L1024+0x4
.L1006:
	add	r4, r0, r1
	mov	r5, #0x46
	b	.L984
.L1025:
	.align	2, 0
.L1024:
	.word	gSaveBlock1Ptr
	.word	0xb48
.L993:
	ldr	r4, .L1026
	mov	r5, #0xd0
	ldr	r0, .L1026+0x4
	ldr	r2, [r0]
	lsl	r3, r6, #0x6
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x3f
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2, #0x15]
	b	.L984
.L1027:
	.align	2, 0
.L1026:
	.word	gTmHmItemSlots
	.word	gSaveBlock2Ptr
.L994:
	ldr	r0, .L1028
	ldr	r0, [r0]
	mov	r1, #0xd4
	lsl	r1, r1, #0x3
	add	r4, r0, r1
	mov	r5, #0x32
.L984:
	cmp	r6, #0x1
	beq	.L998	@cond_branch
	cmp	r6, #0x1
	bgt	.L1004	@cond_branch
	cmp	r6, #0
	beq	.L1000	@cond_branch
	b	.L1002
.L1029:
	.align	2, 0
.L1028:
	.word	gSaveBlock1Ptr
.L1004:
	cmp	r6, #0x2
	beq	.L1001	@cond_branch
	cmp	r6, #0x3
	beq	.L999	@cond_branch
	b	.L1002
.L998:
	sub	r2, r5, #0x1
	ldr	r3, .L1030
	b	.L1007
.L1031:
	.align	2, 0
.L1030:
	.word	CompareItemsAlphabetically
.L999:
	sub	r2, r5, #0x1
	ldr	r3, .L1032
	b	.L1007
.L1033:
	.align	2, 0
.L1032:
	.word	CompareItemsByMost
.L1000:
	sub	r2, r5, #0x1
	ldr	r3, .L1034
	b	.L1007
.L1035:
	.align	2, 0
.L1034:
	.word	CompareItemsById
.L1001:
	sub	r2, r5, #0x1
	ldr	r3, .L1036
.L1007:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	MergeSort
	b	.L983
.L1037:
	.align	2, 0
.L1036:
	.word	CompareItemsByMoveType
.L1002:
	sub	r2, r5, #0x1
	ldr	r3, .L1038
	add	r0, r4, #0
	mov	r1, #0x0
	bl	MergeSort
.L983:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1039:
	.align	2, 0
.L1038:
	.word	CompareItemsByType
.Lfe130:
	.size	 SortItemsInBag,.Lfe130-SortItemsInBag
	.align	2, 0
	.type	 MergeSort,function
	.thumb_func
MergeSort:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r8, r0
	add	r5, r1, #0
	add	r7, r2, #0
	add	r6, r3, #0
	cmp	r7, r5
	bls	.L1040	@cond_branch
	sub	r4, r7, r5
	lsr	r4, r4, #0x1
	add	r4, r5, r4
	add	r2, r4, #0
	bl	MergeSort
	add	r1, r4, #0x1
	mov	r0, r8
	add	r2, r7, #0
	add	r3, r6, #0
	bl	MergeSort
	str	r6, [sp]
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r4, #0
	add	r3, r7, #0
	bl	Merge
.L1040:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe131:
	.size	 MergeSort,.Lfe131-MergeSort
	.align	2, 0
	.type	 Merge,function
	.thumb_func
Merge:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	mov	r7, sp
	mov	ip, r0
	mov	r8, r1
	mov	r9, r2
	add	r2, r3, #0
	mov	sl, sp
	mov	r6, r8
	mov	r0, r9
	add	r0, r0, #0x1
	str	r0, [r7]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x5
	lsr	r0, r0, #0x3
	mov	r1, sp
	sub	r1, r1, r0
	mov	sp, r1
	add	r4, r6, #0
	cmp	r4, r2
	bhi	.L1044	@cond_branch
	lsl	r0, r4, #0x2
	mov	r3, ip
	add	r3, r0, r3
	str	r3, [r7, #0x10]
	add	r3, r0, r1
.L1046:
	ldr	r5, [r7, #0x10]
	ldmia	r5!, {r0}
	str	r5, [r7, #0x10]
	stmia	r3!, {r0}
	add	r4, r4, #0x1
	cmp	r4, r2
	bls	.L1046	@cond_branch
.L1044:
	mov	r4, r8
	cmp	r4, r2
	bhi	.L1049	@cond_branch
	lsl	r0, r4, #0x2
	mov	r3, ip
	add	r5, r0, r3
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	mov	r8, r0
	ldr	r3, [r7]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	str	r0, [r7, #0xc]
.L1051:
	cmp	r6, r9
	bhi	.L1059	@cond_branch
	ldr	r0, [r7]
	cmp	r0, r2
	bhi	.L1056	@cond_branch
	ldr	r0, [r7, #0xc]
	mov	r1, r8
	str	r2, [r7, #0x4]
	ldr	r3, [r7, #0x34]
	bl	_call_via_r3
	lsl	r0, r0, #0x18
	ldr	r2, [r7, #0x4]
	cmp	r0, #0
	bge	.L1056	@cond_branch
.L1059:
	ldr	r1, [r7, #0xc]
	ldmia	r1!, {r0}
	str	r1, [r7, #0xc]
	str	r0, [r5]
	ldr	r3, [r7]
	add	r3, r3, #0x1
	str	r3, [r7]
	b	.L1050
.L1056:
	mov	r1, r8
	add	r1, r1, #0x4
	mov	r8, r1
	sub	r1, r1, #0x4
	ldmia	r1!, {r0}
	str	r0, [r5]
	add	r6, r6, #0x1
.L1050:
	add	r5, r5, #0x4
	add	r4, r4, #0x1
	cmp	r4, r2
	bls	.L1051	@cond_branch
.L1049:
	mov	sp, sl
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe132:
	.size	 Merge,.Lfe132-Merge
	.align	2, 0
	.type	 CompareItemsAlphabetically,function
	.thumb_func
CompareItemsAlphabetically:
	push	{r4, r5, lr}
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	add	r4, r1, #0
	cmp	r0, #0
	beq	.L1066	@cond_branch
	cmp	r1, #0
	beq	.L1079	@cond_branch
	bl	ItemId_GetName
	add	r5, r0, #0
	add	r0, r4, #0
	bl	ItemId_GetName
	add	r4, r0, #0
	mov	r3, #0x0
.L1064:
	add	r0, r5, r3
	ldrb	r1, [r0]
	add	r2, r0, #0
	cmp	r1, #0xff
	bne	.L1076	@cond_branch
	add	r0, r4, r3
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L1077	@cond_branch
.L1079:
	mov	r0, #0x1
	neg	r0, r0
	b	.L1075
.L1076:
	add	r0, r4, r3
	ldrb	r1, [r0]
	cmp	r1, #0xff
	bne	.L1068	@cond_branch
	b	.L1066
.L1077:
	mov	r0, #0x0
	b	.L1075
.L1068:
	ldrb	r0, [r2]
	cmp	r0, r1
	bcc	.L1079	@cond_branch
	cmp	r0, r1
	bhi	.L1066	@cond_branch
	add	r3, r3, #0x1
	b	.L1064
.L1066:
	mov	r0, #0x1
.L1075:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe133:
	.size	 CompareItemsAlphabetically,.Lfe133-CompareItemsAlphabetically
	.align	2, 0
	.type	 CompareItemsByMost,function
	.thumb_func
CompareItemsByMost:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r0, r4, #0x2
	bl	GetBagItemQuantity
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r7, r6, #0
	add	r0, r5, #0x2
	bl	GetBagItemQuantity
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	add	r2, r1, #0
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L1088	@cond_branch
	ldrh	r0, [r5]
	cmp	r0, #0
	beq	.L1085	@cond_branch
	cmp	r6, r1
	bcs	.L1084	@cond_branch
.L1088:
	mov	r0, #0x1
	b	.L1087
.L1084:
	cmp	r7, r2
	bhi	.L1085	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	bl	CompareItemsAlphabetically
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	b	.L1087
.L1085:
	mov	r0, #0x1
	neg	r0, r0
.L1087:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe134:
	.size	 CompareItemsByMost,.Lfe134-CompareItemsByMost
	.align	2, 0
	.type	 CompareItemsById,function
	.thumb_func
CompareItemsById:
	push	{lr}
	ldrh	r3, [r0]
	cmp	r3, #0
	beq	.L1097	@cond_branch
	ldrh	r2, [r1]
	cmp	r2, #0
	beq	.L1094	@cond_branch
	cmp	r2, r3
	bcs	.L1093	@cond_branch
.L1097:
	mov	r0, #0x1
	b	.L1096
.L1093:
	cmp	r2, r3
	bhi	.L1094	@cond_branch
	bl	CompareItemsByMost
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	b	.L1096
.L1094:
	mov	r0, #0x1
	neg	r0, r0
.L1096:
	pop	{r1}
	bx	r1
.Lfe135:
	.size	 CompareItemsById,.Lfe135-CompareItemsById
	.align	2, 0
	.type	 CompareItemsByMoveType,function
	.thumb_func
CompareItemsByMoveType:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldrh	r0, [r4]
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrh	r0, [r5]
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L1106	@cond_branch
	ldrh	r0, [r5]
	cmp	r0, #0
	beq	.L1103	@cond_branch
	ldr	r2, .L1107
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r1, #0x3]
	ldrb	r0, [r0, #0x3]
	cmp	r1, r0
	bcs	.L1102	@cond_branch
.L1106:
	mov	r0, #0x1
	b	.L1105
.L1108:
	.align	2, 0
.L1107:
	.word	gBattleMoves
.L1102:
	cmp	r1, r0
	bhi	.L1103	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	bl	CompareItemsById
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	b	.L1105
.L1103:
	mov	r0, #0x1
	neg	r0, r0
.L1105:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe136:
	.size	 CompareItemsByMoveType,.Lfe136-CompareItemsByMoveType
	.align	2, 0
	.type	 CompareItemsByType,function
	.thumb_func
CompareItemsByType:
	push	{r4, lr}
	add	r2, r0, #0
	add	r3, r1, #0
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L1110	@cond_branch
	ldr	r1, .L1118
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	b	.L1111
.L1119:
	.align	2, 0
.L1118:
	.word	sItemsByType
.L1110:
	mov	r0, #0xff
.L1111:
	add	r4, r0, #0
	ldrh	r0, [r3]
	cmp	r0, #0
	beq	.L1112	@cond_branch
	ldr	r1, .L1120
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	b	.L1113
.L1121:
	.align	2, 0
.L1120:
	.word	sItemsByType
.L1112:
	mov	r0, #0xff
.L1113:
	cmp	r4, r0
	bcs	.L1114	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L1117
.L1114:
	cmp	r4, r0
	bhi	.L1115	@cond_branch
	add	r0, r2, #0
	add	r1, r3, #0
	bl	CompareItemsAlphabetically
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	b	.L1117
.L1115:
	mov	r0, #0x1
.L1117:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe137:
	.size	 CompareItemsByType,.Lfe137-CompareItemsByType
	.align	2, 0
	.type	 ResetRegisteredItem,function
	.thumb_func
ResetRegisteredItem:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	add	r4, r1, #0
	ldr	r0, .L1129
	ldr	r2, [r0]
	ldr	r0, .L1129+0x4
	add	r3, r2, r0
	ldrh	r0, [r3]
	cmp	r0, r1
	beq	.L1128	@cond_branch
	ldr	r0, .L1129+0x8
	add	r3, r2, r0
	ldrh	r0, [r3]
	cmp	r0, r1
	bne	.L1125	@cond_branch
.L1128:
	mov	r0, #0x0
	strh	r0, [r3]
	b	.L1124
.L1130:
	.align	2, 0
.L1129:
	.word	gSaveBlock1Ptr
	.word	0x496
	.word	0x361c
.L1125:
	ldr	r0, .L1131
	add	r1, r2, r0
	ldrh	r0, [r1]
	cmp	r0, r4
	bne	.L1124	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
.L1124:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1132:
	.align	2, 0
.L1131:
	.word	0x361e
.Lfe138:
	.size	 ResetRegisteredItem,.Lfe138-ResetRegisteredItem
	.align	2, 0
	.type	 ItemMenu_FinishRegister,function
	.thumb_func
ItemMenu_FinishRegister:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r5, r0, #0x2
	add	r5, r5, r8
	lsl	r5, r5, #0x3
	ldr	r0, .L1134
	add	r5, r5, r0
	ldr	r7, .L1134+0x4
	ldrb	r4, [r7, #0x5]
	lsl	r4, r4, #0x1
	add	r6, r7, #0
	add	r6, r6, #0x1c
	add	r6, r4, r6
	add	r0, r7, #0
	add	r0, r0, #0x8
	add	r4, r4, r0
	ldrb	r0, [r5]
	add	r1, r6, #0
	add	r2, r4, #0
	bl	DestroyListMenuTask
	ldrb	r0, [r7, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L1134+0x8
	ldrh	r1, [r6]
	ldrh	r2, [r4]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, r8
	bl	ItemMenu_Cancel
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1135:
	.align	2, 0
.L1134:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gMultiuseListMenuTemplate
.Lfe139:
	.size	 ItemMenu_FinishRegister,.Lfe139-ItemMenu_FinishRegister
	.align	2, 0
	.type	 ItemMenu_Register,function
	.thumb_func
ItemMenu_Register:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r4, r0, #0x2
	add	r4, r4, r9
	lsl	r4, r4, #0x3
	ldr	r0, .L1137
	add	r4, r4, r0
	ldr	r7, .L1137+0x4
	ldrb	r6, [r7, #0x5]
	lsl	r6, r6, #0x1
	mov	r0, #0x1c
	add	r0, r0, r7
	mov	r8, r0
	add	r8, r8, r6
	add	r0, r7, #0
	add	r0, r0, #0x8
	add	r6, r6, r0
	bl	BagMenu_RemoveSomeWindow
	ldr	r1, .L1137+0x8
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	bl	ListMenu_ProcessInput
	add	r5, r0, #0
	ldrb	r0, [r4]
	mov	r1, r8
	add	r2, r6, #0
	bl	ListMenuGetScrollAndRow
	bl	BagDestroyPocketScrollArrowPair
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	BagMenu_PrintCursor_
	strh	r5, [r4, #0x2]
	ldrb	r0, [r7, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r1, r5, #0
	bl	BagGetQuantityByPocketPosition
	strh	r0, [r4, #0x4]
	ldrb	r0, [r7, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r5, #0
	bl	BagGetItemIdByPocketPosition
	ldr	r1, .L1137+0xc
	strh	r0, [r1]
	ldr	r1, .L1137+0x10
	ldrb	r0, [r7, #0x4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, r9
	bl	_call_via_r1
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1138:
	.align	2, 0
.L1137:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	sRegisterSubMenu
	.word	gSpecialVar_ItemId
	.word	gUnknown_08614054
.Lfe140:
	.size	 ItemMenu_Register,.Lfe140-ItemMenu_Register
	.align	2, 0
	.type	 ItemMenu_RegisterSelect,function
	.thumb_func
ItemMenu_RegisterSelect:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L1142
	ldr	r0, [r0]
	ldr	r2, .L1142+0x4
	add	r1, r0, r2
	ldr	r0, .L1142+0x8
	ldrh	r2, [r0]
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L1140	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L1141
.L1143:
	.align	2, 0
.L1142:
	.word	gSaveBlock1Ptr
	.word	0x496
	.word	gSpecialVar_ItemId
.L1140:
	strh	r2, [r1]
.L1141:
	ldr	r0, .L1144
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1144+0x4
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1145:
	.align	2, 0
.L1144:
	.word	gTasks
	.word	ItemMenu_FinishRegister
.Lfe141:
	.size	 ItemMenu_RegisterSelect,.Lfe141-ItemMenu_RegisterSelect
	.align	2, 0
	.type	 ItemMenu_RegisterL,function
	.thumb_func
ItemMenu_RegisterL:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L1149
	ldr	r0, [r0]
	ldr	r2, .L1149+0x4
	add	r1, r0, r2
	ldr	r0, .L1149+0x8
	ldrh	r2, [r0]
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L1147	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L1148
.L1150:
	.align	2, 0
.L1149:
	.word	gSaveBlock1Ptr
	.word	0x361c
	.word	gSpecialVar_ItemId
.L1147:
	strh	r2, [r1]
.L1148:
	ldr	r0, .L1151
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1151+0x4
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1152:
	.align	2, 0
.L1151:
	.word	gTasks
	.word	ItemMenu_FinishRegister
.Lfe142:
	.size	 ItemMenu_RegisterL,.Lfe142-ItemMenu_RegisterL
	.align	2, 0
	.type	 ItemMenu_RegisterR,function
	.thumb_func
ItemMenu_RegisterR:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1156
	ldr	r0, [r0]
	ldr	r2, .L1156+0x4
	add	r1, r0, r2
	ldr	r0, .L1156+0x8
	ldrh	r2, [r0]
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L1154	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L1155
.L1157:
	.align	2, 0
.L1156:
	.word	gSaveBlock1Ptr
	.word	0x361e
	.word	gSpecialVar_ItemId
.L1154:
	strh	r2, [r1]
.L1155:
	ldr	r0, .L1158
	mov	r1, #0x0
	bl	VarSet
	ldr	r1, .L1158+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1158+0x8
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1159:
	.align	2, 0
.L1158:
	.word	0x40f7
	.word	gTasks
	.word	ItemMenu_FinishRegister
.Lfe143:
	.size	 ItemMenu_RegisterR,.Lfe143-ItemMenu_RegisterR
	.align	2, 0
	.type	 ItemMenu_Deselect,function
	.thumb_func
ItemMenu_Deselect:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r5, .L1161
	add	r0, r4, r5
	ldr	r6, .L1161+0x4
	ldrb	r0, [r0]
	bl	ListMenu_ProcessInput
	add	r1, r0, #0
	ldrb	r0, [r6, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ResetRegisteredItem
	sub	r5, r5, #0x8
	add	r4, r4, r5
	ldr	r0, .L1161+0x8
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1162:
	.align	2, 0
.L1161:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	ItemMenu_FinishRegister
.Lfe144:
	.size	 ItemMenu_Deselect,.Lfe144-ItemMenu_Deselect
	.align	2, 0
	.globl	UseRegisteredKeyItemOnField
	.type	 UseRegisteredKeyItemOnField,function
	.thumb_func
UseRegisteredKeyItemOnField:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	InUnionRoom
	cmp	r0, #0x1
	beq	.L1186	@cond_branch
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1186	@cond_branch
	bl	InBattlePike
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1186	@cond_branch
	bl	InMultiPartnerRoom
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1186	@cond_branch
	bl	HideMapNamePopUpWindow
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY_ScreenOff
	cmp	r5, #0x1
	beq	.L1168	@cond_branch
	cmp	r5, #0x1
	bgt	.L1173	@cond_branch
	cmp	r5, #0
	beq	.L1167	@cond_branch
	b	.L1186
.L1173:
	cmp	r5, #0x2
	beq	.L1169	@cond_branch
	b	.L1186
.L1167:
	ldr	r0, .L1189
	ldr	r0, [r0]
	ldr	r1, .L1189+0x4
	b	.L1185
.L1190:
	.align	2, 0
.L1189:
	.word	gSaveBlock1Ptr
	.word	0x496
.L1168:
	ldr	r0, .L1191
	ldr	r0, [r0]
	ldr	r1, .L1191+0x4
	b	.L1185
.L1192:
	.align	2, 0
.L1191:
	.word	gSaveBlock1Ptr
	.word	0x361c
.L1169:
	ldr	r0, .L1193
	bl	VarGet
	ldr	r1, .L1193+0x4
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1170	@cond_branch
.L1186:
	mov	r0, #0x0
	b	.L1184
.L1194:
	.align	2, 0
.L1193:
	.word	0x40f7
	.word	0x3fff
.L1170:
	ldr	r0, .L1195
	ldr	r0, [r0]
	ldr	r1, .L1195+0x4
.L1185:
	add	r0, r0, r1
	ldrh	r4, [r0]
	cmp	r4, #0
	beq	.L1174	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	CheckBagHasItem
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x1
	bne	.L1175	@cond_branch
	bl	ScriptContext2_Enable
	bl	FreezeObjectEvents
	bl	sub_808B864
	bl	sub_808BCF4
	ldr	r0, .L1195+0x8
	strh	r4, [r0]
	add	r0, r4, #0
	bl	ItemId_GetFieldFunc
	mov	r1, #0x8
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1195+0xc
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r6, [r1, #0xe]
	b	.L1187
.L1196:
	.align	2, 0
.L1195:
	.word	gSaveBlock1Ptr
	.word	0x361e
	.word	gSpecialVar_ItemId
	.word	gTasks
.L1175:
	cmp	r5, #0x1
	beq	.L1179	@cond_branch
	cmp	r5, #0x1
	bgt	.L1183	@cond_branch
	cmp	r5, #0
	beq	.L1178	@cond_branch
	b	.L1174
.L1183:
	cmp	r5, #0x2
	beq	.L1180	@cond_branch
	b	.L1174
.L1178:
	ldr	r0, .L1197
	ldr	r0, [r0]
	ldr	r1, .L1197+0x4
	add	r0, r0, r1
	strh	r5, [r0]
	b	.L1174
.L1198:
	.align	2, 0
.L1197:
	.word	gSaveBlock1Ptr
	.word	0x496
.L1179:
	ldr	r0, .L1199
	ldr	r0, [r0]
	ldr	r1, .L1199+0x4
	b	.L1188
.L1200:
	.align	2, 0
.L1199:
	.word	gSaveBlock1Ptr
	.word	0x361c
.L1180:
	ldr	r0, .L1201
	ldr	r0, [r0]
	ldr	r1, .L1201+0x4
.L1188:
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
.L1174:
	ldr	r0, .L1201+0x8
	bl	ScriptContext1_SetupScript
.L1187:
	mov	r0, #0x1
.L1184:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1202:
	.align	2, 0
.L1201:
	.word	gSaveBlock1Ptr
	.word	0x361e
	.word	EventScript_SelectWithoutRegisteredItem
.Lfe145:
	.size	 UseRegisteredKeyItemOnField,.Lfe145-UseRegisteredKeyItemOnField
.text
	.align	2, 0

