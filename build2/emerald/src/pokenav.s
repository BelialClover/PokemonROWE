@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	PokenavMenuCallbacks
	.section .rodata
	.align	2, 0
	.type	 PokenavMenuCallbacks,object
	.size	 PokenavMenuCallbacks,420
PokenavMenuCallbacks:
	.word	PokenavCallback_Init_MainMenuCursorOnMap
	.word	GetMenuHandlerCallback
	.word	OpenPokenavMenuInitial
	.word	CreateMenuHandlerLoopedTask
	.word	IsMenuHandlerLoopedTaskActive
	.word	FreeMenuHandlerSubstruct1
	.word	FreeMenuHandlerSubstruct2
	.word	PokenavCallback_Init_MainMenuCursorOnMap
	.word	GetMenuHandlerCallback
	.word	OpenPokenavMenuNotInitial
	.word	CreateMenuHandlerLoopedTask
	.word	IsMenuHandlerLoopedTaskActive
	.word	FreeMenuHandlerSubstruct1
	.word	FreeMenuHandlerSubstruct2
	.word	PokenavCallback_Init_ConditionMenu
	.word	GetMenuHandlerCallback
	.word	OpenPokenavMenuNotInitial
	.word	CreateMenuHandlerLoopedTask
	.word	IsMenuHandlerLoopedTaskActive
	.word	FreeMenuHandlerSubstruct1
	.word	FreeMenuHandlerSubstruct2
	.word	PokenavCallback_Init_ConditionSearchMenu
	.word	GetMenuHandlerCallback
	.word	OpenPokenavMenuNotInitial
	.word	CreateMenuHandlerLoopedTask
	.word	IsMenuHandlerLoopedTaskActive
	.word	FreeMenuHandlerSubstruct1
	.word	FreeMenuHandlerSubstruct2
	.word	PokenavCallback_Init_MainMenuCursorOnMatchCall
	.word	GetMenuHandlerCallback
	.word	OpenPokenavMenuNotInitial
	.word	CreateMenuHandlerLoopedTask
	.word	IsMenuHandlerLoopedTaskActive
	.word	FreeMenuHandlerSubstruct1
	.word	FreeMenuHandlerSubstruct2
	.word	PokenavCallback_Init_MainMenuCursorOnRibbons
	.word	GetMenuHandlerCallback
	.word	OpenPokenavMenuNotInitial
	.word	CreateMenuHandlerLoopedTask
	.word	IsMenuHandlerLoopedTaskActive
	.word	FreeMenuHandlerSubstruct1
	.word	FreeMenuHandlerSubstruct2
	.word	PokenavCallback_Init_RegionMap
	.word	GetRegionMapCallback
	.word	OpenPokenavRegionMap
	.word	CreateRegionMapLoopedTask
	.word	IsRegionMapLoopedTaskActive
	.word	FreeRegionMapSubstruct1
	.word	FreeRegionMapSubstruct2
	.word	PokenavCallback_Init_PartyCondition
	.word	GetPartyConditionCallback
	.word	OpenPartyConditionMenu
	.word	CreatePartyConditionLoopedTask
	.word	IsPartyConditionLoopedTaskActive
	.word	FreePartyConditionSubstruct1
	.word	FreePartyConditionSubstruct2
	.word	PokenavCallback_Init_ConditionSearch
	.word	GetConditionSearchResultsCallback
	.word	OpenConditionSearchResults
	.word	CreateSearchResultsLoopedTask
	.word	IsSearchResultLoopedTaskActive
	.word	FreeSearchResultSubstruct1
	.word	FreeSearchResultSubstruct2
	.word	PokenavCallback_Init_ConditionGraphFromSearch
	.word	GetPartyConditionCallback
	.word	OpenPartyConditionMenu
	.word	CreatePartyConditionLoopedTask
	.word	IsPartyConditionLoopedTaskActive
	.word	FreePartyConditionSubstruct1
	.word	FreePartyConditionSubstruct2
	.word	PokenavCallback_Init_ReturnToMonSearchList
	.word	GetConditionSearchResultsCallback
	.word	OpenConditionSearchListFromGraph
	.word	CreateSearchResultsLoopedTask
	.word	IsSearchResultLoopedTaskActive
	.word	FreeSearchResultSubstruct1
	.word	FreeSearchResultSubstruct2
	.word	PokenavCallback_Init_MatchCall
	.word	GetMatchCallCallback
	.word	OpenMatchCall
	.word	CreateMatchCallLoopedTask
	.word	IsMatchCallLoopedTaskActive
	.word	FreeMatchCallSubstruct1
	.word	FreeMatchCallSubstruct2
	.word	PokenavCallback_Init_MonRibbonList
	.word	GetRibbonsMonListCallback
	.word	OpenRibbonsMonList
	.word	CreateRibbonsMonListLoopedTask
	.word	IsRibbonsMonListLoopedTaskActive
	.word	FreeRibbonsMonList1
	.word	FreeRibbonsMonList2
	.word	PokenavCallback_Init_RibbonsSummaryMenu
	.word	GetRibbonsSummaryMenuCallback
	.word	OpenRibbonsSummaryMenu
	.word	CreateRibbonsSummaryLoopedTask
	.word	IsRibbonsSummaryLoopedTaskActive
	.word	FreeRibbonsSummaryScreen1
	.word	FreeRibbonsSummaryScreen2
	.word	PokenavCallback_Init_RibbonsMonListFromSummary
	.word	GetRibbonsMonListCallback
	.word	OpenRibbonsMonListFromRibbonsSummary
	.word	CreateRibbonsMonListLoopedTask
	.word	IsRibbonsMonListLoopedTaskActive
	.word	FreeRibbonsMonList1
	.word	FreeRibbonsMonList2
	.globl	gNextLoopedTaskId
	.section ewram_data,"aw"
	.type	 gNextLoopedTaskId,object
	.size	 gNextLoopedTaskId,1
gNextLoopedTaskId:
	.byte	0x0
	.globl	gPokenavResources
	.align	2, 0
	.type	 gPokenavResources,object
	.size	 gPokenavResources,4
gPokenavResources:
	.word	0x0
.text
	.align	2, 0
	.globl	CreateLoopedTask
	.type	 CreateLoopedTask,function
	.thumb_func
CreateLoopedTask:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	bl	IsUpdateLinkStateCBActive
	cmp	r0, #0
	bne	.L3	@cond_branch
	ldr	r0, .L6
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	Task_RunLoopedTask
.L3:
	ldr	r0, .L8
.L5:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r5, #0
	bl	SetWordTaskArg
	ldr	r1, .L8+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r2, .L8+0x8
	ldrb	r1, [r2]
	strh	r1, [r0, #0xe]
	ldrb	r0, [r2]
	add	r1, r0, #0x1
	strb	r1, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	orr	r0, r0, r4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L9:
	.align	2, 0
.L8:
	.word	Task_RunLoopedTask_LinkMode
	.word	gTasks
	.word	gNextLoopedTaskId
.Lfe1:
	.size	 CreateLoopedTask,.Lfe1-CreateLoopedTask
	.align	2, 0
	.globl	IsLoopedTaskActive
	.type	 IsLoopedTaskActive,function
	.thumb_func
IsLoopedTaskActive:
	push	{lr}
	ldr	r1, .L15
	and	r1, r1, r0
	lsr	r3, r0, #0x10
	ldr	r2, .L15+0x4
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L11	@cond_branch
	ldr	r2, [r1]
	ldr	r0, .L15+0x8
	cmp	r2, r0
	beq	.L12	@cond_branch
	ldr	r0, .L15+0xc
	cmp	r2, r0
	bne	.L11	@cond_branch
.L12:
	mov	r2, #0xe
	ldrsh	r0, [r1, r2]
	cmp	r0, r3
	bne	.L11	@cond_branch
	mov	r0, #0x1
	b	.L14
.L16:
	.align	2, 0
.L15:
	.word	0xffff
	.word	gTasks
	.word	Task_RunLoopedTask
	.word	Task_RunLoopedTask_LinkMode
.L11:
	mov	r0, #0x0
.L14:
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 IsLoopedTaskActive,.Lfe2-IsLoopedTaskActive
	.align	2, 0
	.globl	FuncIsActiveLoopedTask
	.type	 FuncIsActiveLoopedTask,function
	.thumb_func
FuncIsActiveLoopedTask:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r5, #0x0
	ldr	r4, .L26
.L21:
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L20	@cond_branch
	ldr	r1, [r4]
	ldr	r0, .L26+0x4
	cmp	r1, r0
	beq	.L23	@cond_branch
	ldr	r0, .L26+0x8
	cmp	r1, r0
	bne	.L20	@cond_branch
.L23:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	GetWordTaskArg
	cmp	r0, r6
	bne	.L20	@cond_branch
	mov	r0, #0x1
	b	.L25
.L27:
	.align	2, 0
.L26:
	.word	gTasks
	.word	Task_RunLoopedTask
	.word	Task_RunLoopedTask_LinkMode
.L20:
	add	r4, r4, #0x28
	add	r5, r5, #0x1
	cmp	r5, #0xf
	ble	.L21	@cond_branch
	mov	r0, #0x0
.L25:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 FuncIsActiveLoopedTask,.Lfe3-FuncIsActiveLoopedTask
	.align	2, 0
	.type	 Task_RunLoopedTask,function
	.thumb_func
Task_RunLoopedTask:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetWordTaskArg
	add	r6, r0, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L42
	add	r4, r0, r1
	mov	r7, #0x0
.L31:
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	bl	_call_via_r6
	cmp	r0, #0x4
	bhi	.L36	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L42+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L43:
	.align	2, 0
.L42:
	.word	gTasks+0x8
	.word	.L39
	.align	2, 0
	.align	2, 0
.L39:
	.word	.L34
	.word	.L33
	.word	.L28
	.word	.L29
	.word	.L35
.L33:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	b	.L41
.L34:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L28
.L35:
	add	r0, r5, #0
	bl	DestroyTask
	b	.L28
.L36:
	sub	r0, r0, #0x5
.L41:
	strh	r0, [r4]
.L29:
	cmp	r7, #0
	beq	.L31	@cond_branch
.L28:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 Task_RunLoopedTask,.Lfe4-Task_RunLoopedTask
	.align	2, 0
	.type	 Task_RunLoopedTask_LinkMode,function
	.thumb_func
Task_RunLoopedTask_LinkMode:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	sub_8087598
	cmp	r0, #0
	bne	.L44	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetWordTaskArg
	add	r2, r0, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L55
	add	r4, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	bl	_call_via_r2
	cmp	r0, #0x4
	bhi	.L50	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L55+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L56:
	.align	2, 0
.L55:
	.word	gTasks+0x8
	.word	.L53
	.align	2, 0
	.align	2, 0
.L53:
	.word	.L48
	.word	.L48
	.word	.L44
	.word	.L44
	.word	.L49
.L48:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	b	.L54
.L49:
	add	r0, r5, #0
	bl	DestroyTask
	b	.L44
.L50:
	sub	r0, r0, #0x5
.L54:
	strh	r0, [r4]
.L44:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 Task_RunLoopedTask_LinkMode,.Lfe5-Task_RunLoopedTask_LinkMode
	.align	2, 0
	.globl	CB2_InitPokeNav
	.type	 CB2_InitPokeNav,function
	.thumb_func
CB2_InitPokeNav:
	push	{r4, lr}
	ldr	r4, .L60
	mov	r0, #0x5c
	bl	Alloc
	str	r0, [r4]
	cmp	r0, #0
	bne	.L58	@cond_branch
	ldr	r0, .L60+0x4
	bl	SetMainCallback2
	b	.L59
.L61:
	.align	2, 0
.L60:
	.word	gPokenavResources
	.word	CB2_ReturnToFieldWithOpenMenu
.L58:
	bl	InitPokenavResources
	bl	ResetTasks
	mov	r0, #0x0
	bl	SetVBlankCallback
	ldr	r0, .L62
	mov	r1, #0x0
	bl	CreateTask
	ldr	r0, .L62+0x4
	bl	SetMainCallback2
	ldr	r0, .L62+0x8
	bl	SetVBlankCallback
.L59:
	pop	{r4}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	Task_Pokenav
	.word	CB2_Pokenav
	.word	VBlankCB_Pokenav
.Lfe6:
	.size	 CB2_InitPokeNav,.Lfe6-CB2_InitPokeNav
	.align	2, 0
	.globl	OpenPokenavForTutorial
	.type	 OpenPokenavForTutorial,function
	.thumb_func
OpenPokenavForTutorial:
	push	{lr}
	ldr	r0, .L65
	bl	SetMainCallback2
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FadeScreen
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	CB2_InitPokenavForTutorial
.Lfe7:
	.size	 OpenPokenavForTutorial,.Lfe7-OpenPokenavForTutorial
	.align	2, 0
	.type	 CB2_InitPokenavForTutorial,function
	.thumb_func
CB2_InitPokenavForTutorial:
	push	{r4, lr}
	bl	UpdatePaletteFade
	ldr	r0, .L71
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L67	@cond_branch
	ldr	r4, .L71+0x4
	mov	r0, #0x5c
	bl	Alloc
	str	r0, [r4]
	cmp	r0, #0
	bne	.L69	@cond_branch
	ldr	r0, .L71+0x8
	bl	SetMainCallback2
	b	.L67
.L72:
	.align	2, 0
.L71:
	.word	gPaletteFade
	.word	gPokenavResources
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.L69:
	bl	InitPokenavResources
	ldr	r1, [r4]
	mov	r0, #0x1
	strh	r0, [r1, #0x8]
	bl	ResetTasks
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	mov	r0, #0x0
	bl	SetVBlankCallback
	ldr	r0, .L73
	mov	r1, #0x0
	bl	CreateTask
	ldr	r0, .L73+0x4
	bl	SetMainCallback2
	ldr	r0, .L73+0x8
	bl	SetVBlankCallback
.L67:
	pop	{r4}
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	Task_Pokenav
	.word	CB2_Pokenav
	.word	VBlankCB_Pokenav
.Lfe8:
	.size	 CB2_InitPokenavForTutorial,.Lfe8-CB2_InitPokenavForTutorial
	.align	2, 0
	.type	 FreePokenavResources,function
	.thumb_func
FreePokenavResources:
	push	{r4, lr}
	mov	r4, #0x0
.L79:
	add	r0, r4, #0
	bl	FreePokenavSubstruct
	add	r4, r4, #0x1
	cmp	r4, #0x12
	ble	.L79	@cond_branch
	ldr	r4, .L81
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
	bl	InitKeys
	pop	{r4}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gPokenavResources
.Lfe9:
	.size	 FreePokenavResources,.Lfe9-FreePokenavResources
	.align	2, 0
	.type	 InitPokenavResources,function
	.thumb_func
InitPokenavResources:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r2, #0x0
	mov	r1, #0x12
	add	r0, r0, #0x58
.L87:
	str	r2, [r0]
	sub	r0, r0, #0x4
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L87	@cond_branch
	mov	r4, #0x0
	strh	r4, [r5, #0x8]
	str	r4, [r5, #0x4]
	bl	AnyMonHasRibbon
	str	r0, [r5, #0xc]
	str	r4, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 InitPokenavResources,.Lfe10-InitPokenavResources
	.align	2, 0
	.type	 AnyMonHasRibbon,function
	.thumb_func
AnyMonHasRibbon:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
.L93:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L109
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x5
	bl	GetMonData
	cmp	r0, #0
	beq	.L92	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x6
	bl	GetMonData
	cmp	r0, #0
	bne	.L92	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x52
	bl	GetMonData
	cmp	r0, #0
	bne	.L108	@cond_branch
.L92:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L93	@cond_branch
	mov	r4, #0x0
.L99:
	mov	r5, #0x0
	lsl	r6, r4, #0x18
.L103:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	CheckBoxMonSanityAt
	cmp	r0, #0
	beq	.L102	@cond_branch
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r6, #0x18
	mov	r2, #0x52
	bl	GetBoxMonDataAt
	cmp	r0, #0
	beq	.L102	@cond_branch
.L108:
	mov	r0, #0x1
	b	.L107
.L110:
	.align	2, 0
.L109:
	.word	gPlayerParty
.L102:
	add	r5, r5, #0x1
	cmp	r5, #0x1d
	ble	.L103	@cond_branch
	add	r4, r4, #0x1
	cmp	r4, #0xd
	ble	.L99	@cond_branch
	mov	r0, #0x0
.L107:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 AnyMonHasRibbon,.Lfe11-AnyMonHasRibbon
	.align	2, 0
	.type	 CB2_Pokenav,function
	.thumb_func
CB2_Pokenav:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 CB2_Pokenav,.Lfe12-CB2_Pokenav
	.align	2, 0
	.type	 VBlankCB_Pokenav,function
	.thumb_func
VBlankCB_Pokenav:
	push	{lr}
	bl	TransferPlttBuffer
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 VBlankCB_Pokenav,.Lfe13-VBlankCB_Pokenav
	.align	2, 0
	.type	 Task_Pokenav,function
	.thumb_func
Task_Pokenav:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L139
	add	r7, r1, r0
	mov	r1, #0x0
	ldrsh	r0, [r7, r1]
	cmp	r0, #0x5
	bls	.LCB703
	b	.L114	@long jump
.LCB703:
	lsl	r0, r0, #0x2
	ldr	r1, .L139+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L140:
	.align	2, 0
.L139:
	.word	gTasks+0x8
	.word	.L136
	.align	2, 0
	.align	2, 0
.L136:
	.word	.L115
	.word	.L116
	.word	.L118
	.word	.L120
	.word	.L129
	.word	.L131
.L115:
	bl	InitPokenavMainMenu
	mov	r0, #0x1
	strh	r0, [r7]
	b	.L114
.L116:
	bl	PokenavMainMenuLoopedTaskIsActive
	cmp	r0, #0
	bne	.L114	@cond_branch
	ldr	r0, .L141
	bl	SetActivePokenavMenu
	b	.L138
.L142:
	.align	2, 0
.L141:
	.word	0x186a0
.L118:
	bl	IsActiveMenuLoopTaskActive
	cmp	r0, #0
	bne	.L114	@cond_branch
	mov	r0, #0x3
	strh	r0, [r7]
.L120:
	bl	GetCurrentMenuCB
	add	r6, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r6, r0
	beq	.L124	@cond_branch
	ldr	r0, .L143
	cmp	r6, r0
	bls	.L123	@cond_branch
	ldr	r4, .L143+0x4
	ldr	r5, .L143+0x8
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x14
	add	r0, r0, r4
	ldr	r0, [r0]
	bl	_call_via_r0
	add	r0, r6, #0
	bl	SetActivePokenavMenu
	cmp	r0, #0
	beq	.L124	@cond_branch
.L138:
	mov	r0, #0x4
	strh	r0, [r7]
	b	.L114
.L144:
	.align	2, 0
.L143:
	.word	0x1869f
	.word	PokenavMenuCallbacks
	.word	gPokenavResources
.L124:
	bl	ShutdownPokenav
	mov	r0, #0x5
	strh	r0, [r7]
	b	.L114
.L123:
	cmp	r6, #0
	beq	.L114	@cond_branch
	add	r0, r6, #0
	bl	RunMainMenuLoopedTask
	bl	IsActiveMenuLoopTaskActive
	cmp	r0, #0
	beq	.L114	@cond_branch
	mov	r0, #0x2
	strh	r0, [r7]
	b	.L114
.L129:
	bl	IsActiveMenuLoopTaskActive_
	cmp	r0, #0
	bne	.L114	@cond_branch
	mov	r0, #0x3
	strh	r0, [r7]
	b	.L114
.L131:
	bl	WaitForPokenavShutdownFade
	cmp	r0, #0
	bne	.L114	@cond_branch
	ldr	r0, .L145
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x8]
	neg	r4, r0
	orr	r4, r4, r0
	lsr	r4, r4, #0x1f
	bl	FreeMenuHandlerSubstruct1
	bl	FreePokenavResources
	cmp	r4, #0
	beq	.L134	@cond_branch
	ldr	r0, .L145+0x4
	bl	SetMainCallback2
	b	.L114
.L146:
	.align	2, 0
.L145:
	.word	gPokenavResources
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.L134:
	ldr	r0, .L147
	bl	SetMainCallback2
.L114:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	CB2_ReturnToFieldWithOpenMenu
.Lfe14:
	.size	 Task_Pokenav,.Lfe14-Task_Pokenav
	.align	2, 0
	.type	 SetActivePokenavMenu,function
	.thumb_func
SetActivePokenavMenu:
	push	{r4, r5, r6, lr}
	ldr	r1, .L153
	add	r6, r0, r1
	bl	InitKeys_
	ldr	r5, .L153+0x4
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r4, r0, #0x2
	add	r0, r4, r5
	ldr	r0, [r0]
	bl	_call_via_r0
	cmp	r0, #0
	beq	.L151	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x8
	add	r0, r4, r0
	ldr	r0, [r0]
	bl	_call_via_r0
	cmp	r0, #0
	beq	.L151	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0xc
	add	r0, r4, r0
	ldr	r0, [r0]
	add	r1, r5, #0
	add	r1, r1, #0x10
	add	r1, r4, r1
	ldr	r1, [r1]
	bl	SetActiveMenuLoopTasks
	ldr	r0, .L153+0x8
	ldr	r1, [r0]
	add	r0, r5, #0x4
	add	r0, r4, r0
	ldr	r0, [r0]
	str	r0, [r1]
	str	r6, [r1, #0x4]
	mov	r0, #0x1
	b	.L152
.L154:
	.align	2, 0
.L153:
	.word	-0x186a0
	.word	PokenavMenuCallbacks
	.word	gPokenavResources
.L151:
	mov	r0, #0x0
.L152:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 SetActivePokenavMenu,.Lfe15-SetActivePokenavMenu
	.align	2, 0
	.type	 IsActiveMenuLoopTaskActive_,function
	.thumb_func
IsActiveMenuLoopTaskActive_:
	push	{lr}
	bl	IsActiveMenuLoopTaskActive
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 IsActiveMenuLoopTaskActive_,.Lfe16-IsActiveMenuLoopTaskActive_
	.align	2, 0
	.type	 GetCurrentMenuCB,function
	.thumb_func
GetCurrentMenuCB:
	push	{lr}
	ldr	r0, .L157
	ldr	r0, [r0]
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r1}
	bx	r1
.L158:
	.align	2, 0
.L157:
	.word	gPokenavResources
.Lfe17:
	.size	 GetCurrentMenuCB,.Lfe17-GetCurrentMenuCB
	.align	2, 0
	.type	 InitKeys_,function
	.thumb_func
InitKeys_:
	push	{lr}
	bl	InitKeys
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 InitKeys_,.Lfe18-InitKeys_
	.align	2, 0
	.globl	SetVBlankCallback_
	.type	 SetVBlankCallback_,function
	.thumb_func
SetVBlankCallback_:
	push	{lr}
	bl	SetVBlankCallback
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 SetVBlankCallback_,.Lfe19-SetVBlankCallback_
	.align	2, 0
	.globl	SetPokenavVBlankCallback
	.type	 SetPokenavVBlankCallback,function
	.thumb_func
SetPokenavVBlankCallback:
	push	{lr}
	ldr	r0, .L162
	bl	SetVBlankCallback
	pop	{r0}
	bx	r0
.L163:
	.align	2, 0
.L162:
	.word	VBlankCB_Pokenav
.Lfe20:
	.size	 SetPokenavVBlankCallback,.Lfe20-SetPokenavVBlankCallback
	.align	2, 0
	.globl	AllocSubstruct
	.type	 AllocSubstruct,function
	.thumb_func
AllocSubstruct:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	bl	Alloc
	ldr	r1, .L165
	ldr	r1, [r1]
	lsl	r4, r4, #0x2
	add	r1, r1, #0x10
	add	r1, r1, r4
	str	r0, [r1]
	pop	{r4}
	pop	{r1}
	bx	r1
.L166:
	.align	2, 0
.L165:
	.word	gPokenavResources
.Lfe21:
	.size	 AllocSubstruct,.Lfe21-AllocSubstruct
	.align	2, 0
	.globl	GetSubstructPtr
	.type	 GetSubstructPtr,function
	.thumb_func
GetSubstructPtr:
	ldr	r1, .L168
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r1, r1, #0x10
	add	r1, r1, r0
	ldr	r0, [r1]
	bx	lr
.L169:
	.align	2, 0
.L168:
	.word	gPokenavResources
.Lfe22:
	.size	 GetSubstructPtr,.Lfe22-GetSubstructPtr
	.align	2, 0
	.globl	FreePokenavSubstruct
	.type	 FreePokenavSubstruct,function
	.thumb_func
FreePokenavSubstruct:
	push	{r4, r5, lr}
	ldr	r5, .L172
	ldr	r1, [r5]
	lsl	r4, r0, #0x2
	add	r1, r1, #0x10
	add	r1, r1, r4
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L171	@cond_branch
	bl	Free
	ldr	r0, [r5]
	add	r0, r0, #0x10
	add	r0, r0, r4
	mov	r1, #0x0
	str	r1, [r0]
.L171:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	gPokenavResources
.Lfe23:
	.size	 FreePokenavSubstruct,.Lfe23-FreePokenavSubstruct
	.align	2, 0
	.globl	GetPokenavMode
	.type	 GetPokenavMode,function
	.thumb_func
GetPokenavMode:
	ldr	r0, .L175
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x8]
	bx	lr
.L176:
	.align	2, 0
.L175:
	.word	gPokenavResources
.Lfe24:
	.size	 GetPokenavMode,.Lfe24-GetPokenavMode
	.align	2, 0
	.globl	SetPokenavMode
	.type	 SetPokenavMode,function
	.thumb_func
SetPokenavMode:
	ldr	r1, .L178
	ldr	r1, [r1]
	strh	r0, [r1, #0x8]
	bx	lr
.L179:
	.align	2, 0
.L178:
	.word	gPokenavResources
.Lfe25:
	.size	 SetPokenavMode,.Lfe25-SetPokenavMode
	.align	2, 0
	.globl	SetSelectedConditionSearch
	.type	 SetSelectedConditionSearch,function
	.thumb_func
SetSelectedConditionSearch:
	push	{lr}
	add	r1, r0, #0
	cmp	r1, #0x4
	bls	.L181	@cond_branch
	mov	r1, #0x0
.L181:
	ldr	r0, .L182
	ldr	r0, [r0]
	strh	r1, [r0, #0xa]
	pop	{r0}
	bx	r0
.L183:
	.align	2, 0
.L182:
	.word	gPokenavResources
.Lfe26:
	.size	 SetSelectedConditionSearch,.Lfe26-SetSelectedConditionSearch
	.align	2, 0
	.globl	GetSelectedConditionSearch
	.type	 GetSelectedConditionSearch,function
	.thumb_func
GetSelectedConditionSearch:
	ldr	r0, .L185
	ldr	r0, [r0]
	ldrh	r0, [r0, #0xa]
	bx	lr
.L186:
	.align	2, 0
.L185:
	.word	gPokenavResources
.Lfe27:
	.size	 GetSelectedConditionSearch,.Lfe27-GetSelectedConditionSearch
	.align	2, 0
	.globl	CanViewRibbonsMenu
	.type	 CanViewRibbonsMenu,function
	.thumb_func
CanViewRibbonsMenu:
	ldr	r0, .L188
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	bx	lr
.L189:
	.align	2, 0
.L188:
	.word	gPokenavResources
.Lfe28:
	.size	 CanViewRibbonsMenu,.Lfe28-CanViewRibbonsMenu
.text
	.align	2, 0

