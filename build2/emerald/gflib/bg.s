@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sZeroedBgControlStruct,object
	.size	 sZeroedBgControlStruct,4
sZeroedBgControlStruct:
	.byte	0x0
	.space	3
.text
	.align	2, 0
	.globl	ResetBgs
	.type	 ResetBgs,function
	.thumb_func
ResetBgs:
	push	{lr}
	bl	ResetBgControlStructs
	ldr	r1, .L3
	mov	r0, #0x0
	strh	r0, [r1, #0x10]
	bl	SetTextModeAndHideBgs
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sGpuBgConfigs
.Lfe1:
	.size	 ResetBgs,.Lfe1-ResetBgs
	.align	2, 0
	.type	 SetBgModeInternal,function
	.thumb_func
SetBgModeInternal:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L6
	ldrh	r2, [r3, #0x10]
	ldr	r1, .L6+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x10]
	bx	lr
.L7:
	.align	2, 0
.L6:
	.word	sGpuBgConfigs
	.word	0xfff8
.Lfe2:
	.size	 SetBgModeInternal,.Lfe2-SetBgModeInternal
	.align	2, 0
	.globl	GetBgMode
	.type	 GetBgMode,function
	.thumb_func
GetBgMode:
	ldr	r0, .L9
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x7
	and	r0, r0, r1
	bx	lr
.L10:
	.align	2, 0
.L9:
	.word	sGpuBgConfigs
.Lfe3:
	.size	 GetBgMode,.Lfe3-GetBgMode
	.align	2, 0
	.globl	ResetBgControlStructs
	.type	 ResetBgControlStructs,function
	.thumb_func
ResetBgControlStructs:
	push	{lr}
	ldr	r2, .L17
	ldr	r0, .L17+0x4
	ldr	r0, [r0]
	add	r1, r2, #0
	add	r1, r1, #0xc
.L15:
	str	r0, [r1]
	sub	r1, r1, #0x4
	cmp	r1, r2
	bge	.L15	@cond_branch
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	sGpuBgConfigs
	.word	sZeroedBgControlStruct
.Lfe4:
	.size	 ResetBgControlStructs,.Lfe4-ResetBgControlStructs
	.align	2, 0
	.globl	Unused_ResetBgControlStruct
	.type	 Unused_ResetBgControlStruct,function
	.thumb_func
Unused_ResetBgControlStruct:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L20	@cond_branch
	ldr	r1, .L21
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r1, .L21+0x4
	ldr	r1, [r1]
	str	r1, [r0]
.L20:
	pop	{r4}
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	sGpuBgConfigs
	.word	sZeroedBgControlStruct
.Lfe5:
	.size	 Unused_ResetBgControlStruct,.Lfe5-Unused_ResetBgControlStruct
	.align	2, 0
	.type	 SetBgControlAttributes,function
	.thumb_func
SetBgControlAttributes:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x30]
	ldr	r5, [sp, #0x34]
	ldr	r6, [sp, #0x38]
	mov	ip, r6
	ldr	r6, [sp, #0x3c]
	mov	r8, r6
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	str	r7, [sp]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x4]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, ip
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r1, r8
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0xc]
	add	r0, r7, #0
	bl	IsInvalidBg
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	cmp	r0, #0
	bne	.L24	@cond_branch
	ldr	r2, .L32
	mov	r8, r2
	mov	r0, sl
	cmp	r0, #0xff
	beq	.L25	@cond_branch
	lsl	r2, r7, #0x2
	add	r2, r2, r8
	mov	r1, #0x3
	and	r1, r1, r0
	ldrb	r3, [r2, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
.L25:
	cmp	r6, #0xff
	beq	.L26	@cond_branch
	lsl	r1, r7, #0x2
	add	r1, r1, r8
	mov	r0, #0x1f
	and	r6, r6, r0
	lsl	r3, r6, #0x2
	ldrb	r2, [r1, #0x1]
	sub	r0, r0, #0x9c
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x1]
.L26:
	mov	r1, r9
	cmp	r1, #0xff
	beq	.L27	@cond_branch
	lsl	r1, r7, #0x2
	add	r1, r1, r8
	mov	r0, #0x3
	mov	r2, r9
	and	r2, r2, r0
	lsl	r3, r2, #0x2
	ldrb	r2, [r1]
	sub	r0, r0, #0x10
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1]
.L27:
	ldr	r6, [sp, #0x4]
	cmp	r6, #0xff
	beq	.L28	@cond_branch
	lsl	r1, r7, #0x2
	add	r1, r1, r8
	lsl	r3, r6, #0x7
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x1]
.L28:
	cmp	r5, #0xff
	beq	.L29	@cond_branch
	lsl	r1, r7, #0x2
	add	r1, r1, r8
	mov	r0, #0x3
	and	r5, r5, r0
	lsl	r3, r5, #0x4
	ldrb	r2, [r1]
	sub	r0, r0, #0x34
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1]
.L29:
	cmp	r4, #0xff
	beq	.L30	@cond_branch
	lsl	r1, r7, #0x2
	add	r1, r1, r8
	mov	r0, #0x1
	and	r4, r4, r0
	lsl	r3, r4, #0x6
	ldrb	r2, [r1]
	sub	r0, r0, #0x42
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1]
.L30:
	ldr	r0, [sp, #0xc]
	cmp	r0, #0xff
	beq	.L31	@cond_branch
	lsl	r1, r7, #0x2
	add	r1, r1, r8
	lsl	r3, r0, #0x7
	ldrb	r2, [r1]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1]
.L31:
	ldr	r1, [sp]
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	mov	r2, ip
	strb	r2, [r0, #0x2]
	strb	r2, [r0, #0x3]
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
.L24:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	sGpuBgConfigs
.Lfe6:
	.size	 SetBgControlAttributes,.Lfe6-SetBgControlAttributes
	.align	2, 0
	.type	 GetBgControlAttribute,function
	.thumb_func
GetBgControlAttribute:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L35	@cond_branch
	ldr	r1, .L48
	lsl	r2, r4, #0x2
	add	r0, r2, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	add	r3, r1, #0
	cmp	r0, #0
	beq	.L35	@cond_branch
	sub	r0, r5, #0x1
	cmp	r0, #0x7
	bhi	.L35	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L48+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L49:
	.align	2, 0
.L48:
	.word	sGpuBgConfigs
	.word	.L45
	.align	2, 0
	.align	2, 0
.L45:
	.word	.L37
	.word	.L38
	.word	.L39
	.word	.L40
	.word	.L41
	.word	.L42
	.word	.L43
	.word	.L44
.L37:
	add	r0, r2, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	b	.L47
.L38:
	add	r0, r2, r3
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	b	.L47
.L39:
	add	r0, r2, r3
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	b	.L47
.L40:
	add	r0, r2, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	b	.L47
.L41:
	add	r0, r2, r3
	ldrb	r0, [r0, #0x1]
	lsr	r0, r0, #0x7
	b	.L47
.L42:
	add	r0, r2, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1e
	b	.L47
.L43:
	add	r0, r2, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1f
	b	.L47
.L44:
	add	r0, r2, r3
	ldrb	r0, [r0]
	lsr	r0, r0, #0x7
	b	.L47
.L35:
	mov	r0, #0xff
.L47:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 GetBgControlAttribute,.Lfe7-GetBgControlAttribute
	.align	2, 0
	.globl	LoadBgVram
	.type	 LoadBgVram,function
	.thumb_func
LoadBgVram:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r1
	ldr	r1, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r7, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r6, r3, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L61	@cond_branch
	ldr	r1, .L62
	lsl	r0, r4, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L61	@cond_branch
	cmp	r5, #0x1
	beq	.L53	@cond_branch
	cmp	r5, #0x2
	beq	.L54	@cond_branch
	mov	r2, #0xff
	b	.L56
.L63:
	.align	2, 0
.L62:
	.word	sGpuBgConfigs
.L53:
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x10
	b	.L52
.L54:
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	lsl	r0, r0, #0xb
.L52:
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r1, r0, r1
	mov	r0, r8
	add	r2, r7, #0
	mov	r3, #0x0
	bl	RequestDma3Copy
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L56	@cond_branch
.L61:
	mov	r0, #0xff
	b	.L60
.L56:
	add	r0, r2, #0
.L60:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 LoadBgVram,.Lfe8-LoadBgVram
	.align	2, 0
	.type	 ShowBgInternal,function
	.thumb_func
ShowBgInternal:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L65	@cond_branch
	ldr	r5, .L66
	lsl	r0, r4, #0x2
	add	r2, r0, r5
	ldrb	r3, [r2]
	lsl	r0, r3, #0x1f
	cmp	r0, #0
	beq	.L65	@cond_branch
	lsl	r1, r3, #0x1a
	lsr	r1, r1, #0x1e
	ldrb	r2, [r2, #0x1]
	lsl	r0, r2, #0x1e
	lsr	r0, r0, #0x1c
	orr	r1, r1, r0
	mov	r0, #0x40
	and	r0, r0, r3
	orr	r1, r1, r0
	lsr	r0, r2, #0x7
	lsl	r0, r0, #0x7
	orr	r1, r1, r0
	lsl	r2, r2, #0x19
	lsr	r2, r2, #0x1b
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	lsr	r0, r3, #0x7
	lsl	r0, r0, #0xd
	orr	r1, r1, r0
	lsl	r0, r3, #0x1c
	lsr	r0, r0, #0x1e
	lsl	r0, r0, #0xe
	orr	r1, r1, r0
	lsl	r0, r4, #0x19
	mov	r2, #0x80
	lsl	r2, r2, #0x14
	add	r0, r0, r2
	lsr	r0, r0, #0x18
	bl	SetGpuReg
	add	r1, r4, #0
	add	r1, r1, #0x8
	mov	r0, #0x1
	lsl	r0, r0, r1
	ldrh	r1, [r5, #0x10]
	orr	r0, r0, r1
	ldr	r1, .L66+0x4
	and	r0, r0, r1
	strh	r0, [r5, #0x10]
.L65:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L67:
	.align	2, 0
.L66:
	.word	sGpuBgConfigs
	.word	0xf07
.Lfe9:
	.size	 ShowBgInternal,.Lfe9-ShowBgInternal
	.align	2, 0
	.type	 HideBgInternal,function
	.thumb_func
HideBgInternal:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L69	@cond_branch
	ldr	r2, .L70
	add	r0, r4, #0
	add	r0, r0, #0x8
	mov	r1, #0x1
	lsl	r1, r1, r0
	ldrh	r0, [r2, #0x10]
	bic	r0, r0, r1
	ldr	r1, .L70+0x4
	and	r0, r0, r1
	strh	r0, [r2, #0x10]
.L69:
	pop	{r4}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	sGpuBgConfigs
	.word	0xf07
.Lfe10:
	.size	 HideBgInternal,.Lfe10-HideBgInternal
	.align	2, 0
	.type	 SyncBgVisibilityAndMode,function
	.thumb_func
SyncBgVisibilityAndMode:
	push	{lr}
	mov	r0, #0x0
	bl	GetGpuReg
	ldr	r1, .L73
	and	r1, r1, r0
	ldr	r0, .L73+0x4
	ldrh	r0, [r0, #0x10]
	orr	r1, r1, r0
	mov	r0, #0x0
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	0xf0f8
	.word	sGpuBgConfigs
.Lfe11:
	.size	 SyncBgVisibilityAndMode,.Lfe11-SyncBgVisibilityAndMode
	.align	2, 0
	.globl	SetTextModeAndHideBgs
	.type	 SetTextModeAndHideBgs,function
	.thumb_func
SetTextModeAndHideBgs:
	push	{lr}
	mov	r0, #0x0
	bl	GetGpuReg
	ldr	r1, .L76
	and	r1, r1, r0
	mov	r0, #0x0
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	0xf0f8
.Lfe12:
	.size	 SetTextModeAndHideBgs,.Lfe12-SetTextModeAndHideBgs
	.align	2, 0
	.type	 SetBgAffineInternal,function
	.thumb_func
SetBgAffineInternal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x24
	mov	ip, r1
	mov	r8, r2
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x40]
	ldr	r4, [sp, #0x44]
	ldr	r5, [sp, #0x48]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r0, .L88
	ldrh	r0, [r0, #0x10]
	mov	r1, #0x7
	and	r1, r1, r0
	cmp	r1, #0x1
	beq	.L80	@cond_branch
	cmp	r1, #0x1
	ble	.L78	@cond_branch
	cmp	r1, #0x2
	beq	.L82	@cond_branch
	b	.L78
.L89:
	.align	2, 0
.L88:
	.word	sGpuBgConfigs
.L80:
	cmp	r6, #0x2
	bne	.L78	@cond_branch
	b	.L79
.L82:
	sub	r0, r6, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L78	@cond_branch
.L79:
	mov	r0, ip
	str	r0, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	mov	r0, sp
	strh	r3, [r0, #0x8]
	strh	r7, [r0, #0xa]
	strh	r2, [r0, #0xc]
	strh	r4, [r0, #0xe]
	strh	r5, [r0, #0x10]
	add	r4, sp, #0x14
	add	r1, r4, #0
	mov	r2, #0x1
	bl	BgAffineSet
	ldrh	r1, [r4]
	mov	r0, #0x20
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2]
	mov	r0, #0x22
	bl	SetGpuReg
	ldrh	r1, [r4, #0x4]
	mov	r0, #0x24
	bl	SetGpuReg
	ldrh	r1, [r4, #0x6]
	mov	r0, #0x26
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x20
	bl	SetGpuReg
	ldrh	r1, [r4, #0x8]
	mov	r0, #0x28
	bl	SetGpuReg
	ldrh	r1, [r4, #0xa]
	mov	r0, #0x2a
	bl	SetGpuReg
	ldrh	r1, [r4, #0xc]
	mov	r0, #0x2c
	bl	SetGpuReg
	ldrh	r1, [r4, #0xe]
	mov	r0, #0x2e
	bl	SetGpuReg
.L78:
	add	sp, sp, #0x24
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 SetBgAffineInternal,.Lfe13-SetBgAffineInternal
	.align	2, 0
	.globl	IsInvalidBg
	.type	 IsInvalidBg,function
	.thumb_func
IsInvalidBg:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bhi	.L91	@cond_branch
	mov	r0, #0x0
	b	.L93
.L91:
	mov	r0, #0x1
.L93:
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 IsInvalidBg,.Lfe14-IsInvalidBg
	.align	2, 0
	.globl	DummiedOutFireRedLeafGreenTileAllocFunc
	.type	 DummiedOutFireRedLeafGreenTileAllocFunc,function
	.thumb_func
DummiedOutFireRedLeafGreenTileAllocFunc:
	mov	r0, #0x0
	bx	lr
.Lfe15:
	.size	 DummiedOutFireRedLeafGreenTileAllocFunc,.Lfe15-DummiedOutFireRedLeafGreenTileAllocFunc
	.align	2, 0
	.globl	ResetBgsAndClearDma3BusyFlags
	.type	 ResetBgsAndClearDma3BusyFlags,function
	.thumb_func
ResetBgsAndClearDma3BusyFlags:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ResetBgs
	ldr	r1, .L101
	mov	r2, #0x0
	add	r0, r1, #0
	add	r0, r0, #0xc
.L99:
	str	r2, [r0]
	sub	r0, r0, #0x4
	cmp	r0, r1
	bge	.L99	@cond_branch
	ldr	r0, .L101+0x4
	str	r4, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L102:
	.align	2, 0
.L101:
	.word	sDmaBusyBitfield
	.word	gUnneededFireRedVariable
.Lfe16:
	.size	 ResetBgsAndClearDma3BusyFlags,.Lfe16-ResetBgsAndClearDma3BusyFlags
	.align	2, 0
	.globl	InitBgsFromTemplates
	.type	 InitBgsFromTemplates,function
	.thumb_func
InitBgsFromTemplates:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	bl	SetBgModeInternal
	bl	ResetBgControlStructs
	cmp	r4, #0
	beq	.L105	@cond_branch
	mov	r7, #0x0
	ldr	r0, .L110
	mov	r9, r0
	mov	r2, #0xc
	add	r2, r2, r9
	mov	sl, r2
	add	r6, r5, #0
	mov	r8, r4
.L107:
	ldr	r4, [r6]
	lsl	r0, r4, #0x1e
	lsr	r5, r0, #0x1e
	cmp	r5, #0x3
	bhi	.L106	@cond_branch
	lsl	r1, r4, #0x1c
	lsr	r1, r1, #0x1e
	lsl	r2, r4, #0x17
	lsr	r2, r2, #0x1b
	lsl	r3, r4, #0x15
	lsr	r3, r3, #0x1e
	lsl	r0, r4, #0x14
	lsr	r0, r0, #0x1f
	str	r0, [sp]
	lsl	r0, r4, #0x12
	lsr	r0, r0, #0x1e
	str	r0, [sp, #0x4]
	str	r7, [sp, #0x8]
	str	r7, [sp, #0xc]
	add	r0, r5, #0
	bl	SetBgControlAttributes
	lsl	r4, r5, #0x4
	mov	r5, r9
	add	r3, r4, r5
	ldr	r2, [r6]
	lsl	r2, r2, #0x8
	lsr	r2, r2, #0x16
	ldrh	r0, [r3]
	ldr	r5, .L110+0x4
	add	r1, r5, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r3]
	ldrb	r0, [r3, #0x1]
	mov	r2, #0x3d
	neg	r2, r2
	add	r1, r2, #0
	and	r0, r0, r1
	strb	r0, [r3, #0x1]
	ldr	r0, [r3]
	ldr	r1, .L110+0x8
	and	r0, r0, r1
	str	r0, [r3]
	mov	r0, r9
	add	r0, r0, #0x4
	add	r0, r4, r0
	str	r7, [r0]
	mov	r0, r9
	add	r0, r0, #0x8
	add	r0, r4, r0
	str	r7, [r0]
	add	r4, r4, sl
	str	r7, [r4]
.L106:
	add	r6, r6, #0x4
	mov	r5, #0x1
	neg	r5, r5
	add	r8, r8, r5
	mov	r0, r8
	cmp	r0, #0
	bne	.L107	@cond_branch
.L105:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L111:
	.align	2, 0
.L110:
	.word	sGpuBgConfigs2
	.word	-0x400
	.word	0x3fff
.Lfe17:
	.size	 InitBgsFromTemplates,.Lfe17-InitBgsFromTemplates
	.align	2, 0
	.globl	InitBgFromTemplate
	.type	 InitBgFromTemplate,function
	.thumb_func
InitBgFromTemplate:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x10
	add	r7, r0, #0
	ldr	r4, [r7]
	lsl	r0, r4, #0x1e
	lsr	r5, r0, #0x1e
	cmp	r5, #0x3
	bhi	.L113	@cond_branch
	lsl	r1, r4, #0x1c
	lsr	r1, r1, #0x1e
	lsl	r2, r4, #0x17
	lsr	r2, r2, #0x1b
	lsl	r3, r4, #0x15
	lsr	r3, r3, #0x1e
	lsl	r0, r4, #0x14
	lsr	r0, r0, #0x1f
	str	r0, [sp]
	lsl	r0, r4, #0x12
	lsr	r0, r0, #0x1e
	str	r0, [sp, #0x4]
	mov	r6, #0x0
	str	r6, [sp, #0x8]
	str	r6, [sp, #0xc]
	add	r0, r5, #0
	bl	SetBgControlAttributes
	ldr	r4, .L114
	lsl	r5, r5, #0x4
	add	r3, r5, r4
	ldr	r1, [r7]
	lsl	r1, r1, #0x8
	lsr	r1, r1, #0x16
	ldrh	r2, [r3]
	ldr	r0, .L114+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3]
	ldrb	r1, [r3, #0x1]
	mov	r0, #0x3d
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3, #0x1]
	ldr	r0, [r3]
	ldr	r1, .L114+0x8
	and	r0, r0, r1
	str	r0, [r3]
	add	r0, r4, #0x4
	add	r0, r5, r0
	str	r6, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x8
	add	r0, r5, r0
	str	r6, [r0]
	add	r4, r4, #0xc
	add	r5, r5, r4
	str	r6, [r5]
.L113:
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L115:
	.align	2, 0
.L114:
	.word	sGpuBgConfigs2
	.word	-0x400
	.word	0x3fff
.Lfe18:
	.size	 InitBgFromTemplate,.Lfe18-InitBgFromTemplate
	.align	2, 0
	.globl	SetBgMode
	.type	 SetBgMode,function
	.thumb_func
SetBgMode:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBgModeInternal
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 SetBgMode,.Lfe19-SetBgMode
	.align	2, 0
	.globl	LoadBgTiles
	.type	 LoadBgTiles,function
	.thumb_func
LoadBgTiles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r8, r2
	lsl	r3, r3, #0x10
	lsr	r4, r3, #0x10
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L118	@cond_branch
	ldr	r1, .L124
	lsl	r0, r5, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	lsl	r0, r0, #0x15
	b	.L123
.L125:
	.align	2, 0
.L124:
	.word	sGpuBgConfigs2
.L118:
	ldr	r1, .L126
	lsl	r0, r5, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	lsl	r0, r0, #0x16
.L123:
	lsr	r4, r0, #0x10
	mov	r6, #0x1
	str	r6, [sp]
	add	r0, r5, #0
	add	r1, r7, #0
	mov	r2, r8
	add	r3, r4, #0
	bl	LoadBgVram
	lsl	r2, r0, #0x18
	lsr	r1, r2, #0x18
	add	r7, r1, #0
	cmp	r1, #0xff
	bne	.L120	@cond_branch
	ldr	r0, .L126+0x4
	b	.L122
.L127:
	.align	2, 0
.L126:
	.word	sGpuBgConfigs2
	.word	0xffff
.L120:
	ldr	r0, .L128
	lsr	r2, r2, #0x1d
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	mov	r0, #0x1f
	and	r0, r0, r1
	add	r1, r6, #0
	lsl	r1, r1, r0
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L128+0x4
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L121	@cond_branch
	lsr	r1, r4, #0x5
	mov	r0, r8
	lsr	r2, r0, #0x5
	add	r0, r5, #0
	mov	r3, #0x1
	bl	DummiedOutFireRedLeafGreenTileAllocFunc
.L121:
	add	r0, r7, #0
.L122:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L129:
	.align	2, 0
.L128:
	.word	sDmaBusyBitfield
	.word	gUnneededFireRedVariable
.Lfe20:
	.size	 LoadBgTiles,.Lfe20-LoadBgTiles
	.align	2, 0
	.globl	LoadBgTilemap
	.type	 LoadBgTilemap,function
	.thumb_func
LoadBgTilemap:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x11
	lsr	r3, r3, #0x10
	mov	r4, #0x2
	str	r4, [sp]
	bl	LoadBgVram
	lsl	r2, r0, #0x18
	lsr	r3, r2, #0x18
	cmp	r3, #0xff
	beq	.L131	@cond_branch
	ldr	r0, .L133
	lsr	r2, r2, #0x1d
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	mov	r0, #0x1f
	and	r0, r0, r3
	mov	r1, #0x1
	lsl	r1, r1, r0
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	add	r0, r3, #0
	b	.L132
.L134:
	.align	2, 0
.L133:
	.word	sDmaBusyBitfield
.L131:
	ldr	r0, .L135
.L132:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.L136:
	.align	2, 0
.L135:
	.word	0xffff
.Lfe21:
	.size	 LoadBgTilemap,.Lfe21-LoadBgTilemap
	.align	2, 0
	.globl	Unused_LoadBgPalette
	.type	 Unused_LoadBgPalette,function
	.thumb_func
Unused_LoadBgPalette:
	push	{r4, r5, r6, r7, lr}
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r6, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r5, r3, #0x10
	add	r0, r4, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L144	@cond_branch
	ldr	r1, .L145
	lsl	r0, r4, #0x4
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1c
	lsl	r1, r1, #0x5
	lsl	r0, r5, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0xa0
	lsl	r0, r0, #0x13
	add	r1, r1, r0
	add	r0, r7, #0
	add	r2, r6, #0
	mov	r3, #0x0
	bl	RequestDma3Copy
	lsl	r3, r0, #0x18
	asr	r1, r3, #0x18
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L140	@cond_branch
.L144:
	ldr	r0, .L145+0x4
	b	.L143
.L146:
	.align	2, 0
.L145:
	.word	sGpuBgConfigs2
	.word	0xffff
.L140:
	ldr	r4, .L147
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L141	@cond_branch
	add	r0, r0, #0x1f
.L141:
	asr	r0, r0, #0x5
	lsl	r2, r0, #0x2
	add	r2, r2, r4
	lsl	r0, r0, #0x5
	sub	r0, r1, r0
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x1
	lsl	r1, r1, r0
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	lsr	r0, r3, #0x18
.L143:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L148:
	.align	2, 0
.L147:
	.word	sDmaBusyBitfield
.Lfe22:
	.size	 Unused_LoadBgPalette,.Lfe22-Unused_LoadBgPalette
	.align	2, 0
	.globl	IsDma3ManagerBusyWithBgCopy
	.type	 IsDma3ManagerBusyWithBgCopy,function
	.thumb_func
IsDma3ManagerBusyWithBgCopy:
	push	{r4, r5, r6, r7, lr}
	mov	r5, #0x0
	mov	r7, #0x1
	neg	r7, r7
.L153:
	add	r0, r5, #0
	cmp	r5, #0
	bge	.L154	@cond_branch
	add	r0, r0, #0x1f
.L154:
	asr	r0, r0, #0x5
	lsl	r2, r0, #0x18
	lsl	r0, r0, #0x5
	sub	r0, r5, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L160
	lsr	r2, r2, #0x16
	add	r4, r2, r1
	mov	r6, #0x1
	lsl	r6, r6, r0
	ldr	r0, [r4]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L152	@cond_branch
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	bl	CheckForSpaceForDma3Request
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, r7
	bne	.L157	@cond_branch
	mov	r0, #0x1
	b	.L159
.L161:
	.align	2, 0
.L160:
	.word	sDmaBusyBitfield
.L157:
	ldr	r0, [r4]
	bic	r0, r0, r6
	str	r0, [r4]
.L152:
	add	r5, r5, #0x1
	cmp	r5, #0x7f
	ble	.L153	@cond_branch
	mov	r0, #0x0
.L159:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 IsDma3ManagerBusyWithBgCopy,.Lfe23-IsDma3ManagerBusyWithBgCopy
	.align	2, 0
	.globl	ShowBg
	.type	 ShowBg,function
	.thumb_func
ShowBg:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ShowBgInternal
	bl	SyncBgVisibilityAndMode
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 ShowBg,.Lfe24-ShowBg
	.align	2, 0
	.globl	HideBg
	.type	 HideBg,function
	.thumb_func
HideBg:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	HideBgInternal
	bl	SyncBgVisibilityAndMode
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 HideBg,.Lfe25-HideBg
	.align	2, 0
	.globl	SetBgAttribute
	.type	 SetBgAttribute,function
	.thumb_func
SetBgAttribute:
	push	{r4, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r3, r2, #0x18
	sub	r0, r1, #0x1
	cmp	r0, #0x6
	bhi	.L165	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L178
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L179:
	.align	2, 0
.L178:
	.word	.L173
	.align	2, 0
	.align	2, 0
.L173:
	.word	.L166
	.word	.L167
	.word	.L168
	.word	.L169
	.word	.L171
	.word	.L172
	.word	.L170
.L166:
	mov	r0, #0xff
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	add	r1, r3, #0
	b	.L175
.L167:
	mov	r0, #0xff
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	mov	r1, #0xff
	add	r2, r3, #0
	b	.L176
.L168:
	mov	r0, #0xff
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	mov	r1, #0xff
	mov	r2, #0xff
	bl	SetBgControlAttributes
	b	.L165
.L169:
	str	r3, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	b	.L177
.L170:
	mov	r0, #0xff
	str	r0, [sp]
	str	r3, [sp, #0x4]
	str	r0, [sp, #0x8]
	b	.L177
.L171:
	mov	r0, #0xff
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r3, [sp, #0x8]
.L177:
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	mov	r1, #0xff
.L175:
	mov	r2, #0xff
.L176:
	mov	r3, #0xff
	bl	SetBgControlAttributes
	b	.L165
.L172:
	mov	r0, #0xff
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r3, [sp, #0xc]
	add	r0, r4, #0
	mov	r1, #0xff
	mov	r2, #0xff
	mov	r3, #0xff
	bl	SetBgControlAttributes
.L165:
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 SetBgAttribute,.Lfe26-SetBgAttribute
	.align	2, 0
	.globl	GetBgAttribute
	.type	 GetBgAttribute,function
	.thumb_func
GetBgAttribute:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	sub	r0, r1, #0x1
	cmp	r0, #0x9
	bhi	.L197	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L201
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L202:
	.align	2, 0
.L201:
	.word	.L198
	.align	2, 0
	.align	2, 0
.L198:
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L187
	.word	.L188
	.word	.L186
	.word	.L189
	.word	.L195
	.word	.L196
.L182:
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetBgControlAttribute
	b	.L200
.L183:
	add	r0, r4, #0
	mov	r1, #0x3
	bl	GetBgControlAttribute
	b	.L200
.L184:
	add	r0, r4, #0
	mov	r1, #0x4
	bl	GetBgControlAttribute
	b	.L200
.L185:
	add	r0, r4, #0
	mov	r1, #0x5
	bl	GetBgControlAttribute
	b	.L200
.L186:
	add	r0, r4, #0
	mov	r1, #0x6
	bl	GetBgControlAttribute
	b	.L200
.L187:
	add	r0, r4, #0
	mov	r1, #0x7
	bl	GetBgControlAttribute
	b	.L200
.L188:
	add	r0, r4, #0
	mov	r1, #0x8
	bl	GetBgControlAttribute
	b	.L200
.L189:
	add	r0, r4, #0
	bl	GetBgType
	cmp	r0, #0
	beq	.L191	@cond_branch
	cmp	r0, #0x1
	beq	.L192	@cond_branch
	mov	r0, #0x0
	b	.L199
.L191:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBgMetricTextMode
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x10
	b	.L199
.L192:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBgMetricAffineMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x10
	b	.L199
.L195:
	add	r0, r4, #0
	bl	GetBgType
.L200:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L199
.L196:
	ldr	r0, .L203
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	b	.L199
.L204:
	.align	2, 0
.L203:
	.word	sGpuBgConfigs2
.L197:
	ldr	r0, .L205
.L199:
	pop	{r4}
	pop	{r1}
	bx	r1
.L206:
	.align	2, 0
.L205:
	.word	0xffff
.Lfe27:
	.size	 GetBgAttribute,.Lfe27-GetBgAttribute
	.align	2, 0
	.globl	ChangeBgX
	.type	 ChangeBgX,function
	.thumb_func
ChangeBgX:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L209	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L208	@cond_branch
.L209:
	mov	r0, #0x1
	neg	r0, r0
	b	.L230
.L208:
	cmp	r5, #0x1
	beq	.L213	@cond_branch
	cmp	r5, #0x1
	ble	.L212	@cond_branch
	cmp	r5, #0x2
	beq	.L214	@cond_branch
.L212:
	ldr	r0, .L232
	lsl	r1, r4, #0x4
	add	r0, r0, #0x8
	add	r0, r1, r0
	str	r6, [r0]
	add	r5, r1, #0
	b	.L210
.L233:
	.align	2, 0
.L232:
	.word	sGpuBgConfigs2
.L213:
	ldr	r0, .L234
	lsl	r2, r4, #0x4
	add	r0, r0, #0x8
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r1, r1, r6
	b	.L231
.L235:
	.align	2, 0
.L234:
	.word	sGpuBgConfigs2
.L214:
	ldr	r0, .L236
	lsl	r2, r4, #0x4
	add	r0, r0, #0x8
	add	r0, r2, r0
	ldr	r1, [r0]
	sub	r1, r1, r6
.L231:
	str	r1, [r0]
	add	r5, r2, #0
.L210:
	bl	GetBgMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, #0x1
	beq	.L219	@cond_branch
	cmp	r4, #0x1
	bgt	.L229	@cond_branch
	cmp	r4, #0
	beq	.L218	@cond_branch
	b	.L217
.L237:
	.align	2, 0
.L236:
	.word	sGpuBgConfigs2
.L229:
	cmp	r4, #0x2
	beq	.L220	@cond_branch
	cmp	r4, #0x3
	beq	.L223	@cond_branch
	b	.L217
.L218:
	ldr	r0, .L238
	ldr	r0, [r0, #0x8]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x10
	bl	SetGpuReg
	b	.L217
.L239:
	.align	2, 0
.L238:
	.word	sGpuBgConfigs2
.L219:
	ldr	r0, .L240
	ldr	r0, [r0, #0x18]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x14
	bl	SetGpuReg
	b	.L217
.L241:
	.align	2, 0
.L240:
	.word	sGpuBgConfigs2
.L220:
	cmp	r0, #0
	bne	.L221	@cond_branch
	ldr	r0, .L242
	ldr	r0, [r0, #0x28]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x18
	bl	SetGpuReg
	b	.L217
.L243:
	.align	2, 0
.L242:
	.word	sGpuBgConfigs2
.L221:
	ldr	r0, .L244
	ldr	r0, [r0, #0x28]
	lsr	r1, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x2a
	bl	SetGpuReg
	mov	r0, #0x28
	add	r1, r4, #0
	bl	SetGpuReg
	b	.L217
.L245:
	.align	2, 0
.L244:
	.word	sGpuBgConfigs2
.L223:
	cmp	r0, #0
	bne	.L224	@cond_branch
	ldr	r0, .L246
	ldr	r0, [r0, #0x38]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x1c
	bl	SetGpuReg
	b	.L217
.L247:
	.align	2, 0
.L246:
	.word	sGpuBgConfigs2
.L224:
	cmp	r0, #0x2
	bne	.L217	@cond_branch
	ldr	r0, .L248
	ldr	r0, [r0, #0x38]
	lsr	r1, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x3a
	bl	SetGpuReg
	mov	r0, #0x38
	add	r1, r4, #0
	bl	SetGpuReg
.L217:
	ldr	r0, .L248
	add	r0, r0, #0x8
	add	r0, r5, r0
	ldr	r0, [r0]
.L230:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L249:
	.align	2, 0
.L248:
	.word	sGpuBgConfigs2
.Lfe28:
	.size	 ChangeBgX,.Lfe28-ChangeBgX
	.align	2, 0
	.globl	GetBgX
	.type	 GetBgX,function
	.thumb_func
GetBgX:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L253	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L253	@cond_branch
	ldr	r0, .L256
	lsl	r1, r4, #0x4
	add	r0, r0, #0x8
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L255
.L257:
	.align	2, 0
.L256:
	.word	sGpuBgConfigs2
.L253:
	mov	r0, #0x1
	neg	r0, r0
.L255:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 GetBgX,.Lfe29-GetBgX
	.align	2, 0
	.globl	ChangeBgY
	.type	 ChangeBgY,function
	.thumb_func
ChangeBgY:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L260	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L259	@cond_branch
.L260:
	mov	r0, #0x1
	neg	r0, r0
	b	.L281
.L259:
	cmp	r5, #0x1
	beq	.L264	@cond_branch
	cmp	r5, #0x1
	ble	.L263	@cond_branch
	cmp	r5, #0x2
	beq	.L265	@cond_branch
.L263:
	ldr	r0, .L283
	lsl	r1, r4, #0x4
	add	r0, r0, #0xc
	add	r0, r1, r0
	str	r6, [r0]
	add	r5, r1, #0
	b	.L261
.L284:
	.align	2, 0
.L283:
	.word	sGpuBgConfigs2
.L264:
	ldr	r0, .L285
	lsl	r2, r4, #0x4
	add	r0, r0, #0xc
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r1, r1, r6
	b	.L282
.L286:
	.align	2, 0
.L285:
	.word	sGpuBgConfigs2
.L265:
	ldr	r0, .L287
	lsl	r2, r4, #0x4
	add	r0, r0, #0xc
	add	r0, r2, r0
	ldr	r1, [r0]
	sub	r1, r1, r6
.L282:
	str	r1, [r0]
	add	r5, r2, #0
.L261:
	bl	GetBgMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, #0x1
	beq	.L270	@cond_branch
	cmp	r4, #0x1
	bgt	.L280	@cond_branch
	cmp	r4, #0
	beq	.L269	@cond_branch
	b	.L268
.L288:
	.align	2, 0
.L287:
	.word	sGpuBgConfigs2
.L280:
	cmp	r4, #0x2
	beq	.L271	@cond_branch
	cmp	r4, #0x3
	beq	.L274	@cond_branch
	b	.L268
.L269:
	ldr	r0, .L289
	ldr	r0, [r0, #0xc]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x12
	bl	SetGpuReg
	b	.L268
.L290:
	.align	2, 0
.L289:
	.word	sGpuBgConfigs2
.L270:
	ldr	r0, .L291
	ldr	r0, [r0, #0x1c]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x16
	bl	SetGpuReg
	b	.L268
.L292:
	.align	2, 0
.L291:
	.word	sGpuBgConfigs2
.L271:
	cmp	r0, #0
	bne	.L272	@cond_branch
	ldr	r0, .L293
	ldr	r0, [r0, #0x2c]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x1a
	bl	SetGpuReg
	b	.L268
.L294:
	.align	2, 0
.L293:
	.word	sGpuBgConfigs2
.L272:
	ldr	r0, .L295
	ldr	r0, [r0, #0x2c]
	lsr	r1, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x2e
	bl	SetGpuReg
	mov	r0, #0x2c
	add	r1, r4, #0
	bl	SetGpuReg
	b	.L268
.L296:
	.align	2, 0
.L295:
	.word	sGpuBgConfigs2
.L274:
	cmp	r0, #0
	bne	.L275	@cond_branch
	ldr	r0, .L297
	ldr	r0, [r0, #0x3c]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x1e
	bl	SetGpuReg
	b	.L268
.L298:
	.align	2, 0
.L297:
	.word	sGpuBgConfigs2
.L275:
	cmp	r0, #0x2
	bne	.L268	@cond_branch
	ldr	r0, .L299
	ldr	r0, [r0, #0x3c]
	lsr	r1, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x3e
	bl	SetGpuReg
	mov	r0, #0x3c
	add	r1, r4, #0
	bl	SetGpuReg
.L268:
	ldr	r0, .L299
	add	r0, r0, #0xc
	add	r0, r5, r0
	ldr	r0, [r0]
.L281:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L300:
	.align	2, 0
.L299:
	.word	sGpuBgConfigs2
.Lfe30:
	.size	 ChangeBgY,.Lfe30-ChangeBgY
	.align	2, 0
	.globl	ChangeBgY_ScreenOff
	.type	 ChangeBgY_ScreenOff,function
	.thumb_func
ChangeBgY_ScreenOff:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L303	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L302	@cond_branch
.L303:
	mov	r0, #0x1
	neg	r0, r0
	b	.L324
.L302:
	cmp	r5, #0x1
	beq	.L307	@cond_branch
	cmp	r5, #0x1
	ble	.L306	@cond_branch
	cmp	r5, #0x2
	beq	.L308	@cond_branch
.L306:
	ldr	r0, .L326
	lsl	r1, r4, #0x4
	add	r0, r0, #0xc
	add	r0, r1, r0
	str	r6, [r0]
	add	r5, r1, #0
	b	.L304
.L327:
	.align	2, 0
.L326:
	.word	sGpuBgConfigs2
.L307:
	ldr	r0, .L328
	lsl	r2, r4, #0x4
	add	r0, r0, #0xc
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r1, r1, r6
	b	.L325
.L329:
	.align	2, 0
.L328:
	.word	sGpuBgConfigs2
.L308:
	ldr	r0, .L330
	lsl	r2, r4, #0x4
	add	r0, r0, #0xc
	add	r0, r2, r0
	ldr	r1, [r0]
	sub	r1, r1, r6
.L325:
	str	r1, [r0]
	add	r5, r2, #0
.L304:
	bl	GetBgMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, #0x1
	beq	.L313	@cond_branch
	cmp	r4, #0x1
	bgt	.L323	@cond_branch
	cmp	r4, #0
	beq	.L312	@cond_branch
	b	.L311
.L331:
	.align	2, 0
.L330:
	.word	sGpuBgConfigs2
.L323:
	cmp	r4, #0x2
	beq	.L314	@cond_branch
	cmp	r4, #0x3
	beq	.L317	@cond_branch
	b	.L311
.L312:
	ldr	r0, .L332
	ldr	r0, [r0, #0xc]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x12
	bl	SetGpuReg_ForcedBlank
	b	.L311
.L333:
	.align	2, 0
.L332:
	.word	sGpuBgConfigs2
.L313:
	ldr	r0, .L334
	ldr	r0, [r0, #0x1c]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x16
	bl	SetGpuReg_ForcedBlank
	b	.L311
.L335:
	.align	2, 0
.L334:
	.word	sGpuBgConfigs2
.L314:
	cmp	r0, #0
	bne	.L315	@cond_branch
	ldr	r0, .L336
	ldr	r0, [r0, #0x2c]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x1a
	bl	SetGpuReg_ForcedBlank
	b	.L311
.L337:
	.align	2, 0
.L336:
	.word	sGpuBgConfigs2
.L315:
	ldr	r0, .L338
	ldr	r0, [r0, #0x2c]
	lsr	r1, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x2e
	bl	SetGpuReg_ForcedBlank
	mov	r0, #0x2c
	add	r1, r4, #0
	bl	SetGpuReg_ForcedBlank
	b	.L311
.L339:
	.align	2, 0
.L338:
	.word	sGpuBgConfigs2
.L317:
	cmp	r0, #0
	bne	.L318	@cond_branch
	ldr	r0, .L340
	ldr	r0, [r0, #0x3c]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	mov	r0, #0x1e
	bl	SetGpuReg_ForcedBlank
	b	.L311
.L341:
	.align	2, 0
.L340:
	.word	sGpuBgConfigs2
.L318:
	cmp	r0, #0x2
	bne	.L311	@cond_branch
	ldr	r0, .L342
	ldr	r0, [r0, #0x3c]
	lsr	r1, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x3e
	bl	SetGpuReg_ForcedBlank
	mov	r0, #0x3c
	add	r1, r4, #0
	bl	SetGpuReg_ForcedBlank
.L311:
	ldr	r0, .L342
	add	r0, r0, #0xc
	add	r0, r5, r0
	ldr	r0, [r0]
.L324:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L343:
	.align	2, 0
.L342:
	.word	sGpuBgConfigs2
.Lfe31:
	.size	 ChangeBgY_ScreenOff,.Lfe31-ChangeBgY_ScreenOff
	.align	2, 0
	.globl	GetBgY
	.type	 GetBgY,function
	.thumb_func
GetBgY:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L347	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L347	@cond_branch
	ldr	r0, .L350
	lsl	r1, r4, #0x4
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L349
.L351:
	.align	2, 0
.L350:
	.word	sGpuBgConfigs2
.L347:
	mov	r0, #0x1
	neg	r0, r0
.L349:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 GetBgY,.Lfe32-GetBgY
	.align	2, 0
	.globl	SetBgAffine
	.type	 SetBgAffine,function
	.thumb_func
SetBgAffine:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	ldr	r6, [sp, #0x30]
	ldr	r7, [sp, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r7, r7, #0x10
	lsr	r7, r7, #0x10
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	str	r4, [sp]
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	str	r5, [sp, #0x4]
	lsl	r6, r6, #0x10
	asr	r6, r6, #0x10
	str	r6, [sp, #0x8]
	str	r7, [sp, #0xc]
	bl	SetBgAffineInternal
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 SetBgAffine,.Lfe33-SetBgAffine
	.align	2, 0
	.globl	Unused_AdjustBgMosaic
	.type	 Unused_AdjustBgMosaic,function
	.thumb_func
Unused_AdjustBgMosaic:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r0, #0x4c
	bl	GetGpuReg
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r1, #0xf
	mov	r3, #0xf
	and	r3, r3, r5
	lsr	r2, r0, #0x14
	and	r2, r2, r1
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r5, r5, r0
	cmp	r6, #0x6
	bhi	.L356	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L374
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L375:
	.align	2, 0
.L374:
	.word	.L371
	.align	2, 0
	.align	2, 0
.L371:
	.word	.L356
	.word	.L357
	.word	.L358
	.word	.L361
	.word	.L364
	.word	.L365
	.word	.L368
.L356:
	mov	r3, #0xf
	and	r3, r3, r4
	lsr	r2, r4, #0x4
	b	.L354
.L357:
	mov	r3, #0xf
	and	r3, r3, r4
	b	.L354
.L358:
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r4
	cmp	r0, #0xf
	ble	.L359	@cond_branch
	mov	r3, #0xf
	b	.L354
.L359:
	add	r0, r3, r4
	b	.L372
.L361:
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r4
	cmp	r0, #0
	bge	.L362	@cond_branch
	mov	r3, #0x0
	b	.L354
.L362:
	sub	r0, r3, r4
.L372:
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	b	.L354
.L364:
	mov	r2, #0xf
	and	r2, r2, r4
	b	.L354
.L365:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r4
	cmp	r0, #0xf
	ble	.L366	@cond_branch
	mov	r2, #0xf
	b	.L354
.L366:
	add	r0, r2, r4
	b	.L373
.L368:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r4
	cmp	r0, #0
	bge	.L369	@cond_branch
	mov	r2, #0x0
	b	.L354
.L369:
	sub	r0, r2, r4
.L373:
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L354:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0xc
	mov	r1, #0xf0
	and	r0, r0, r1
	orr	r5, r5, r0
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	orr	r5, r5, r0
	lsl	r0, r5, #0x10
	lsr	r5, r0, #0x10
	mov	r0, #0x4c
	add	r1, r5, #0
	bl	SetGpuReg
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 Unused_AdjustBgMosaic,.Lfe34-Unused_AdjustBgMosaic
	.align	2, 0
	.globl	SetBgTilemapBuffer
	.type	 SetBgTilemapBuffer,function
	.thumb_func
SetBgTilemapBuffer:
	push	{r4, r5, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L377	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L377	@cond_branch
	ldr	r0, .L378
	lsl	r1, r4, #0x4
	add	r0, r0, #0x4
	add	r1, r1, r0
	str	r5, [r1]
.L377:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L379:
	.align	2, 0
.L378:
	.word	sGpuBgConfigs2
.Lfe35:
	.size	 SetBgTilemapBuffer,.Lfe35-SetBgTilemapBuffer
	.align	2, 0
	.globl	UnsetBgTilemapBuffer
	.type	 UnsetBgTilemapBuffer,function
	.thumb_func
UnsetBgTilemapBuffer:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg32
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L381	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L381	@cond_branch
	ldr	r0, .L382
	lsl	r1, r4, #0x4
	add	r0, r0, #0x4
	add	r1, r1, r0
	str	r5, [r1]
.L381:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L383:
	.align	2, 0
.L382:
	.word	sGpuBgConfigs2
.Lfe36:
	.size	 UnsetBgTilemapBuffer,.Lfe36-UnsetBgTilemapBuffer
	.align	2, 0
	.globl	GetBgTilemapBuffer
	.type	 GetBgTilemapBuffer,function
	.thumb_func
GetBgTilemapBuffer:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L387	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L387	@cond_branch
	ldr	r0, .L390
	lsl	r1, r4, #0x4
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L389
.L391:
	.align	2, 0
.L390:
	.word	sGpuBgConfigs2
.L387:
	mov	r0, #0x0
.L389:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 GetBgTilemapBuffer,.Lfe37-GetBgTilemapBuffer
	.align	2, 0
	.globl	CopyToBgTilemapBuffer
	.type	 CopyToBgTilemapBuffer,function
	.thumb_func
CopyToBgTilemapBuffer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r9, r4
	lsl	r7, r2, #0x10
	lsr	r6, r7, #0x10
	lsl	r3, r3, #0x10
	lsr	r5, r3, #0x10
	mov	r8, r5
	add	r0, r4, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L393	@cond_branch
	add	r0, r4, #0
	bl	IsTileMapOutsideWram
	cmp	r0, #0
	bne	.L393	@cond_branch
	cmp	r6, #0
	beq	.L394	@cond_branch
	ldr	r0, .L396
	lsl	r1, r4, #0x4
	add	r0, r0, #0x4
	add	r1, r1, r0
	lsl	r0, r5, #0x1
	ldr	r1, [r1]
	add	r1, r1, r0
	lsr	r2, r7, #0x11
	mov	r0, sl
	bl	CpuSet
	b	.L393
.L397:
	.align	2, 0
.L396:
	.word	sGpuBgConfigs2
.L394:
	ldr	r0, .L398
	mov	r2, r9
	lsl	r1, r2, #0x4
	add	r0, r0, #0x4
	add	r1, r1, r0
	mov	r2, r8
	lsl	r0, r2, #0x1
	ldr	r1, [r1]
	add	r1, r1, r0
	mov	r0, sl
	bl	LZ77UnCompWram
.L393:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L399:
	.align	2, 0
.L398:
	.word	sGpuBgConfigs2
.Lfe38:
	.size	 CopyToBgTilemapBuffer,.Lfe38-CopyToBgTilemapBuffer
	.align	2, 0
	.globl	CopyBgTilemapBufferToVram
	.type	 CopyBgTilemapBufferToVram,function
	.thumb_func
CopyBgTilemapBufferToVram:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L401	@cond_branch
	add	r0, r4, #0
	bl	IsTileMapOutsideWram
	cmp	r0, #0
	bne	.L401	@cond_branch
	add	r0, r4, #0
	bl	GetBgType
	cmp	r0, #0
	beq	.L403	@cond_branch
	cmp	r0, #0x1
	beq	.L404	@cond_branch
	mov	r2, #0x0
	b	.L402
.L403:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBgMetricTextMode
	lsl	r0, r0, #0x1b
	b	.L407
.L404:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBgMetricAffineMode
	lsl	r0, r0, #0x18
.L407:
	lsr	r2, r0, #0x10
.L402:
	ldr	r0, .L408
	lsl	r1, r4, #0x4
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r1, [r1]
	mov	r0, #0x2
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x0
	bl	LoadBgVram
.L401:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L409:
	.align	2, 0
.L408:
	.word	sGpuBgConfigs2
.Lfe39:
	.size	 CopyBgTilemapBufferToVram,.Lfe39-CopyBgTilemapBufferToVram
	.align	2, 0
	.globl	CopyToBgTilemapBufferRect
	.type	 CopyToBgTilemapBufferRect,function
	.thumb_func
CopyToBgTilemapBufferRect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r1
	ldr	r1, [sp, #0x24]
	ldr	r4, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r4, r4, #0x18
	lsr	r6, r4, #0x18
	add	r0, r5, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L411	@cond_branch
	add	r0, r5, #0
	bl	IsTileMapOutsideWram
	cmp	r0, #0
	bne	.L411	@cond_branch
	add	r0, r5, #0
	bl	GetBgType
	cmp	r0, #0
	beq	.L413	@cond_branch
	cmp	r0, #0x1
	beq	.L424	@cond_branch
	b	.L411
.L413:
	mov	r4, r8
	add	r3, r7, #0
	add	r0, r3, r6
	cmp	r3, r0
	bge	.L411	@cond_branch
	mov	ip, r0
	lsl	r1, r5, #0x4
	ldr	r0, .L437
	add	r1, r1, r0
	mov	r8, r1
.L417:
	mov	r2, sl
	mov	r1, r9
	add	r0, r2, r1
	add	r7, r3, #0x1
	cmp	r2, r0
	bge	.L416	@cond_branch
	mov	r1, r8
	ldr	r6, [r1]
	lsl	r5, r3, #0x5
	add	r3, r0, #0
.L421:
	add	r0, r5, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r1, [r4]
	strh	r1, [r0]
	add	r4, r4, #0x2
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r3
	blt	.L421	@cond_branch
.L416:
	lsl	r0, r7, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, ip
	blt	.L417	@cond_branch
	b	.L411
.L438:
	.align	2, 0
.L437:
	.word	sGpuBgConfigs2+0x4
.L424:
	mov	r4, r8
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBgMetricAffineMode
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp]
	add	r3, r7, #0
	add	r0, r3, r6
	cmp	r3, r0
	bge	.L411	@cond_branch
	mov	ip, r0
	lsl	r5, r5, #0x4
	mov	r8, r5
.L428:
	mov	r2, sl
	mov	r1, r9
	add	r0, r2, r1
	add	r7, r3, #0x1
	cmp	r2, r0
	bge	.L427	@cond_branch
	ldr	r6, .L439
	add	r6, r6, r8
	ldr	r1, [sp]
	mov	r5, r3
	mul	r5, r5, r1
	add	r3, r0, #0
.L432:
	ldr	r1, [r6]
	add	r0, r5, r2
	add	r1, r1, r0
	ldrb	r0, [r4]
	strb	r0, [r1]
	add	r4, r4, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r3
	blt	.L432	@cond_branch
.L427:
	lsl	r0, r7, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, ip
	blt	.L428	@cond_branch
.L411:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L440:
	.align	2, 0
.L439:
	.word	sGpuBgConfigs2+0x4
.Lfe40:
	.size	 CopyToBgTilemapBufferRect,.Lfe40-CopyToBgTilemapBufferRect
	.align	2, 0
	.globl	CopyToBgTilemapBufferRect_ChangePalette
	.type	 CopyToBgTilemapBufferRect_ChangePalette,function
	.thumb_func
CopyToBgTilemapBufferRect_ChangePalette:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x24
	ldr	r4, [sp, #0x34]
	ldr	r5, [sp, #0x38]
	ldr	r6, [sp, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r2, [sp, #0x8]
	str	r3, [sp, #0xc]
	str	r4, [sp, #0x10]
	str	r5, [sp, #0x14]
	str	r6, [sp, #0x18]
	mov	r2, #0x0
	str	r2, [sp, #0x1c]
	str	r2, [sp, #0x20]
	mov	r3, #0x0
	bl	CopyRectToBgTilemapBufferRect
	add	sp, sp, #0x24
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 CopyToBgTilemapBufferRect_ChangePalette,.Lfe41-CopyToBgTilemapBufferRect_ChangePalette
	.align	2, 0
	.globl	CopyRectToBgTilemapBufferRect
	.type	 CopyRectToBgTilemapBufferRect,function
	.thumb_func
CopyRectToBgTilemapBufferRect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x40
	str	r1, [sp, #0x8]
	ldr	r1, [sp, #0x60]
	ldr	r4, [sp, #0x68]
	ldr	r5, [sp, #0x6c]
	ldr	r6, [sp, #0x70]
	ldr	r7, [sp, #0x74]
	mov	r8, r7
	ldr	r7, [sp, #0x78]
	mov	r9, r7
	ldr	r7, [sp, #0x7c]
	mov	sl, r7
	ldr	r7, [sp, #0x80]
	mov	ip, r7
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0xc]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x10]
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x14]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp, #0x18]
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x1c]
	mov	r2, sl
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r2, [sp, #0x20]
	mov	r0, ip
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x24]
	ldr	r0, [sp, #0x4]
	bl	IsInvalidBg32
	cmp	r0, #0
	beq	.LCB3626
	b	.L443	@long jump
.LCB3626:
	ldr	r0, [sp, #0x4]
	bl	IsTileMapOutsideWram
	cmp	r0, #0
	beq	.LCB3631
	b	.L443	@long jump
.LCB3631:
	ldr	r0, [sp, #0x4]
	mov	r1, #0x4
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x30]
	ldr	r0, [sp, #0x4]
	mov	r1, #0x1
	bl	GetBgMetricTextMode
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x28]
	ldr	r0, [sp, #0x4]
	mov	r1, #0x2
	bl	GetBgMetricTextMode
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x2c]
	ldr	r0, [sp, #0x4]
	bl	GetBgType
	cmp	r0, #0
	beq	.L445	@cond_branch
	cmp	r0, #0x1
	beq	.L456	@cond_branch
	b	.L443
.L445:
	ldr	r1, [sp, #0x10]
	mov	r0, r1
	mul	r0, r0, r7
	ldr	r2, [sp, #0xc]
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	ldr	r1, [sp, #0x8]
	add	r6, r1, r0
	add	r0, r5, r4
	cmp	r5, r0
	blt	.LCB3683
	b	.L443	@long jump
.LCB3683:
	ldr	r2, [sp, #0x18]
	sub	r2, r7, r2
	str	r2, [sp, #0x34]
	str	r0, [sp, #0x38]
.L449:
	ldr	r4, [sp, #0x14]
	ldr	r7, [sp, #0x18]
	add	r0, r4, r7
	add	r1, r5, #0x1
	str	r1, [sp, #0x3c]
	cmp	r4, r0
	bge	.L451	@cond_branch
	ldr	r2, [sp, #0x4]
	lsl	r0, r2, #0x4
	ldr	r1, .L469
	add	r0, r0, r1
	mov	sl, r0
	ldr	r7, [sp, #0x20]
	lsl	r7, r7, #0x10
	mov	r9, r7
	ldr	r1, [sp, #0x24]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r8, r0
.L453:
	ldr	r2, [sp, #0x2c]
	str	r2, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	ldr	r2, [sp, #0x30]
	ldr	r3, [sp, #0x28]
	bl	GetTileMapIndexFromCoords
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	mov	r7, sl
	ldr	r1, [r7]
	add	r1, r1, r0
	mov	r0, r8
	str	r0, [sp]
	add	r0, r6, #0
	ldr	r2, [sp, #0x1c]
	mov	r7, r9
	asr	r3, r7, #0x10
	bl	CopyTileMapEntry
	add	r6, r6, #0x2
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r1, [sp, #0x14]
	ldr	r2, [sp, #0x18]
	add	r0, r1, r2
	cmp	r4, r0
	blt	.L453	@cond_branch
.L451:
	ldr	r5, [sp, #0x34]
	lsl	r0, r5, #0x1
	add	r6, r6, r0
	ldr	r7, [sp, #0x3c]
	lsl	r0, r7, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, [sp, #0x38]
	cmp	r5, r0
	blt	.L449	@cond_branch
	b	.L443
.L470:
	.align	2, 0
.L469:
	.word	sGpuBgConfigs2+0x4
.L456:
	ldr	r1, [sp, #0x10]
	mov	r0, r1
	mul	r0, r0, r7
	ldr	r2, [sp, #0xc]
	add	r0, r0, r2
	ldr	r1, [sp, #0x8]
	add	r6, r1, r0
	ldr	r0, [sp, #0x4]
	mov	r1, #0x1
	bl	GetBgMetricAffineMode
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	add	r0, r5, r4
	cmp	r5, r0
	bge	.L443	@cond_branch
	ldr	r2, [sp, #0x18]
	sub	r2, r7, r2
	str	r2, [sp, #0x34]
	str	r0, [sp, #0x38]
	ldr	r7, .L471
	mov	sl, r7
	ldr	r0, [sp, #0x4]
	lsl	r0, r0, #0x4
	mov	r8, r0
.L460:
	ldr	r4, [sp, #0x14]
	ldr	r1, [sp, #0x18]
	add	r0, r4, r1
	add	r2, r5, #0x1
	str	r2, [sp, #0x3c]
	cmp	r4, r0
	bge	.L462	@cond_branch
	mov	r3, r8
	add	r3, r3, sl
	mov	r7, r9
	mul	r7, r7, r5
	mov	ip, r7
	add	r2, r0, #0
.L464:
	ldr	r1, [r3]
	mov	r5, ip
	add	r0, r5, r4
	add	r1, r1, r0
	ldrb	r0, [r6]
	ldr	r7, [sp, #0x20]
	add	r0, r0, r7
	strb	r0, [r1]
	add	r6, r6, #0x1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r2
	blt	.L464	@cond_branch
.L462:
	ldr	r0, [sp, #0x34]
	add	r6, r6, r0
	ldr	r1, [sp, #0x3c]
	lsl	r0, r1, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, [sp, #0x38]
	cmp	r5, r2
	blt	.L460	@cond_branch
.L443:
	add	sp, sp, #0x40
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L472:
	.align	2, 0
.L471:
	.word	sGpuBgConfigs2+0x4
.Lfe42:
	.size	 CopyRectToBgTilemapBufferRect,.Lfe42-CopyRectToBgTilemapBufferRect
	.align	2, 0
	.globl	FillBgTilemapBufferRect_Palette0
	.type	 FillBgTilemapBufferRect_Palette0,function
	.thumb_func
FillBgTilemapBufferRect_Palette0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0x24]
	ldr	r5, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r9, r4
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	IsInvalidBg32
	cmp	r0, #0
	bne	.L474	@cond_branch
	add	r0, r6, #0
	bl	IsTileMapOutsideWram
	cmp	r0, #0
	bne	.L474	@cond_branch
	add	r0, r6, #0
	bl	GetBgType
	cmp	r0, #0
	beq	.L476	@cond_branch
	cmp	r0, #0x1
	beq	.L487	@cond_branch
	b	.L474
.L476:
	add	r3, r7, #0
	add	r5, r3, r5
	cmp	r3, r5
	bge	.L474	@cond_branch
	add	r7, r5, #0
	lsl	r1, r6, #0x4
	ldr	r0, .L500
	add	r1, r1, r0
	mov	ip, r1
.L480:
	mov	r2, sl
	mov	r1, r9
	add	r0, r2, r1
	add	r6, r3, #0x1
	cmp	r2, r0
	bge	.L479	@cond_branch
	mov	r5, ip
	ldr	r4, [r5]
	lsl	r3, r3, #0x5
	add	r1, r0, #0
.L484:
	add	r0, r3, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r5, r8
	strh	r5, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r1
	blt	.L484	@cond_branch
.L479:
	lsl	r0, r6, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r7
	blt	.L480	@cond_branch
	b	.L474
.L501:
	.align	2, 0
.L500:
	.word	sGpuBgConfigs2+0x4
.L487:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetBgMetricAffineMode
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp]
	add	r3, r7, #0
	add	r5, r3, r5
	cmp	r3, r5
	bge	.L474	@cond_branch
	add	r7, r5, #0
	lsl	r6, r6, #0x4
	mov	ip, r6
.L491:
	mov	r2, sl
	mov	r1, r9
	add	r0, r2, r1
	add	r6, r3, #0x1
	cmp	r2, r0
	bge	.L490	@cond_branch
	ldr	r5, .L502
	add	r5, r5, ip
	ldr	r1, [sp]
	mov	r4, r3
	mul	r4, r4, r1
	add	r3, r0, #0
.L495:
	ldr	r0, [r5]
	add	r1, r4, r2
	add	r0, r0, r1
	mov	r1, r8
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r3
	blt	.L495	@cond_branch
.L490:
	lsl	r0, r6, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r7
	blt	.L491	@cond_branch
.L474:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L503:
	.align	2, 0
.L502:
	.word	sGpuBgConfigs2+0x4
.Lfe43:
	.size	 FillBgTilemapBufferRect_Palette0,.Lfe43-FillBgTilemapBufferRect_Palette0
	.align	2, 0
	.globl	FillBgTilemapBufferRect
	.type	 FillBgTilemapBufferRect,function
	.thumb_func
FillBgTilemapBufferRect:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x20]
	ldr	r5, [sp, #0x24]
	ldr	r6, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r4, #0x0
	str	r4, [sp, #0xc]
	bl	WriteSequenceToBgTilemapBuffer
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 FillBgTilemapBufferRect,.Lfe44-FillBgTilemapBufferRect
	.align	2, 0
	.globl	WriteSequenceToBgTilemapBuffer
	.type	 WriteSequenceToBgTilemapBuffer,function
	.thumb_func
WriteSequenceToBgTilemapBuffer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	ldr	r4, [sp, #0x4c]
	ldr	r5, [sp, #0x50]
	ldr	r6, [sp, #0x54]
	ldr	r7, [sp, #0x58]
	mov	r8, r7
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	add	r0, sp, #0x4
	strh	r1, [r0]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x8]
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	sl, r4
	lsl	r5, r5, #0x18
	lsr	r4, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp, #0xc]
	mov	r0, r8
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x10]
	mov	r0, r9
	bl	IsInvalidBg32
	cmp	r0, #0
	beq	.LCB4125
	b	.L506	@long jump
.LCB4125:
	mov	r0, r9
	bl	IsTileMapOutsideWram
	cmp	r0, #0
	beq	.LCB4130
	b	.L506	@long jump
.LCB4130:
	mov	r0, r9
	mov	r1, #0x4
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x1c]
	mov	r0, r9
	mov	r1, #0x1
	bl	GetBgMetricTextMode
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x14]
	mov	r0, r9
	mov	r1, #0x2
	bl	GetBgMetricTextMode
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x18]
	mov	r0, r9
	bl	GetBgType
	cmp	r0, #0
	beq	.L508	@cond_branch
	cmp	r0, #0x1
	beq	.L519	@cond_branch
	b	.L506
.L508:
	add	r5, r7, #0
	add	r0, r5, r4
	cmp	r5, r0
	bge	.L506	@cond_branch
	str	r0, [sp, #0x24]
	add	r7, sp, #0x4
.L512:
	ldr	r4, [sp, #0x8]
	mov	r1, sl
	add	r0, r4, r1
	add	r2, r5, #0x1
	mov	r8, r2
	cmp	r4, r0
	bge	.L511	@cond_branch
	mov	r3, r9
	lsl	r1, r3, #0x4
	ldr	r0, .L532
	add	r6, r1, r0
.L516:
	ldr	r0, [sp, #0x18]
	str	r0, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	ldr	r2, [sp, #0x1c]
	ldr	r3, [sp, #0x14]
	bl	GetTileMapIndexFromCoords
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	ldr	r1, [r6]
	add	r1, r1, r0
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, sp, #0x4
	ldr	r2, [sp, #0xc]
	mov	r3, #0x0
	bl	CopyTileMapEntry
	ldrh	r0, [r7]
	mov	r2, #0xfc
	lsl	r2, r2, #0x8
	add	r1, r2, #0
	add	r2, r0, #0
	and	r2, r2, r1
	ldr	r3, [sp, #0x10]
	add	r0, r0, r3
	ldr	r3, .L532+0x4
	add	r1, r3, #0
	and	r0, r0, r1
	add	r2, r2, r0
	strh	r2, [r7]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, [sp, #0x8]
	add	r0, r0, sl
	cmp	r4, r0
	blt	.L516	@cond_branch
.L511:
	mov	r1, r8
	lsl	r0, r1, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, [sp, #0x24]
	cmp	r5, r2
	blt	.L512	@cond_branch
	b	.L506
.L533:
	.align	2, 0
.L532:
	.word	sGpuBgConfigs2+0x4
	.word	0x3ff
.L519:
	mov	r0, r9
	mov	r1, #0x1
	bl	GetBgMetricAffineMode
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x20]
	add	r5, r7, #0
	add	r0, r5, r4
	cmp	r5, r0
	bge	.L506	@cond_branch
	str	r0, [sp, #0x24]
	mov	r3, r9
	lsl	r3, r3, #0x4
	mov	ip, r3
.L523:
	ldr	r4, [sp, #0x8]
	mov	r7, sl
	add	r0, r4, r7
	add	r1, r5, #0x1
	mov	r8, r1
	cmp	r4, r0
	bge	.L522	@cond_branch
	ldr	r2, .L534
	add	r2, r2, ip
	str	r2, [sp, #0x28]
	ldr	r7, [sp, #0x20]
	mov	r3, r5
	mul	r3, r3, r7
	add	r2, sp, #0x4
	mov	r1, #0xfc
	lsl	r1, r1, #0x8
	mov	r9, r1
	ldr	r7, .L534+0x4
	add	r5, r7, #0
	add	r6, r0, #0
.L527:
	ldr	r0, [sp, #0x28]
	ldr	r1, [r0]
	add	r0, r3, r4
	add	r1, r1, r0
	ldrh	r0, [r2]
	strb	r0, [r1]
	ldrh	r0, [r2]
	mov	r1, r9
	and	r1, r1, r0
	ldr	r7, [sp, #0x10]
	add	r0, r0, r7
	and	r0, r0, r5
	add	r1, r1, r0
	strh	r1, [r2]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r6
	blt	.L527	@cond_branch
.L522:
	mov	r1, r8
	lsl	r0, r1, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, [sp, #0x24]
	cmp	r5, r2
	blt	.L523	@cond_branch
.L506:
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L535:
	.align	2, 0
.L534:
	.word	sGpuBgConfigs2+0x4
	.word	0x3ff
.Lfe45:
	.size	 WriteSequenceToBgTilemapBuffer,.Lfe45-WriteSequenceToBgTilemapBuffer
	.align	2, 0
	.globl	GetBgMetricTextMode
	.type	 GetBgMetricTextMode,function
	.thumb_func
GetBgMetricTextMode:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	add	r5, r4, #0
	mov	r1, #0x4
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, #0x1
	beq	.L547	@cond_branch
	cmp	r4, #0x1
	bgt	.L566	@cond_branch
	cmp	r4, #0
	beq	.L538	@cond_branch
	b	.L537
.L566:
	cmp	r5, #0x2
	beq	.L556	@cond_branch
	b	.L537
.L538:
	cmp	r0, #0x2
	bgt	.L546	@cond_branch
	cmp	r0, #0x1
	bge	.L569	@cond_branch
.L570:
	cmp	r0, #0
	beq	.L568	@cond_branch
	b	.L537
.L546:
	cmp	r0, #0x3
	bne	.L537	@cond_branch
	mov	r0, #0x4
	b	.L567
.L547:
	cmp	r0, #0x1
	beq	.L569	@cond_branch
	cmp	r0, #0x1
	ble	.L570	@cond_branch
	cmp	r0, #0x2
	beq	.L568	@cond_branch
	cmp	r0, #0x3
	bne	.L537	@cond_branch
	b	.L569
.L556:
	cmp	r0, #0
	blt	.L537	@cond_branch
	cmp	r0, #0x1
	bgt	.L559	@cond_branch
.L568:
	mov	r0, #0x1
	b	.L567
.L559:
	cmp	r0, #0x3
	bgt	.L537	@cond_branch
.L569:
	mov	r0, #0x2
	b	.L567
.L537:
	mov	r0, #0x0
.L567:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 GetBgMetricTextMode,.Lfe46-GetBgMetricTextMode
	.align	2, 0
	.globl	GetBgMetricAffineMode
	.type	 GetBgMetricAffineMode,function
	.thumb_func
GetBgMetricAffineMode:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	mov	r1, #0x4
	bl	GetBgControlAttribute
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r0, r1, #0
	cmp	r4, #0
	beq	.L573	@cond_branch
	cmp	r4, #0
	blt	.L572	@cond_branch
	cmp	r4, #0x2
	bgt	.L572	@cond_branch
	mov	r0, #0x10
	lsl	r0, r0, r1
	b	.L586
.L573:
	cmp	r1, #0x1
	beq	.L576	@cond_branch
	cmp	r1, #0x1
	bgt	.L581	@cond_branch
	cmp	r1, #0
	beq	.L575	@cond_branch
	b	.L572
.L581:
	cmp	r0, #0x2
	beq	.L577	@cond_branch
	cmp	r0, #0x3
	beq	.L578	@cond_branch
	b	.L572
.L575:
	mov	r0, #0x1
	b	.L586
.L576:
	mov	r0, #0x4
	b	.L586
.L577:
	mov	r0, #0x10
	b	.L586
.L578:
	mov	r0, #0x40
	b	.L586
.L572:
	mov	r0, #0x0
.L586:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 GetBgMetricAffineMode,.Lfe47-GetBgMetricAffineMode
	.align	2, 0
	.globl	GetTileMapIndexFromCoords
	.type	 GetTileMapIndexFromCoords,function
	.thumb_func
GetTileMapIndexFromCoords:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [sp, #0x8]
	sub	r3, r3, #0x1
	and	r4, r4, r3
	sub	r0, r0, #0x1
	and	r1, r1, r0
	cmp	r2, #0x1
	beq	.L593	@cond_branch
	cmp	r2, #0x1
	ble	.L588	@cond_branch
	cmp	r2, #0x2
	beq	.L588	@cond_branch
	cmp	r2, #0x3
	bne	.L588	@cond_branch
	cmp	r1, #0x1f
	ble	.L593	@cond_branch
	add	r1, r1, #0x20
.L593:
	cmp	r4, #0x1f
	ble	.L588	@cond_branch
	sub	r4, r4, #0x20
	add	r1, r1, #0x20
.L588:
	lsl	r0, r1, #0x5
	add	r0, r0, r4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 GetTileMapIndexFromCoords,.Lfe48-GetTileMapIndexFromCoords
	.align	2, 0
	.globl	CopyTileMapEntry
	.type	 CopyTileMapEntry,function
	.thumb_func
CopyTileMapEntry:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	ldr	r5, [sp, #0x10]
	cmp	r2, #0x10
	beq	.L601	@cond_branch
	cmp	r2, #0x10
	bgt	.L603	@cond_branch
	cmp	r2, #0
	blt	.L603	@cond_branch
	ldrh	r0, [r4]
	add	r0, r0, r3
	ldr	r3, .L607
	add	r1, r3, #0
	and	r0, r0, r1
	add	r1, r2, r5
	lsl	r1, r1, #0xc
	b	.L605
.L608:
	.align	2, 0
.L607:
	.word	0xfff
.L601:
	ldrh	r1, [r6]
	mov	r0, #0xfc
	lsl	r0, r0, #0x8
	and	r1, r1, r0
	lsl	r2, r5, #0xc
	add	r2, r1, r2
	ldrh	r0, [r4]
	add	r0, r0, r3
	ldr	r3, .L609
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	b	.L606
.L610:
	.align	2, 0
.L609:
	.word	0x3ff
.L603:
	ldrh	r0, [r4]
	add	r0, r0, r3
	lsl	r1, r5, #0xc
.L605:
	add	r0, r0, r1
.L606:
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	strh	r1, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 CopyTileMapEntry,.Lfe49-CopyTileMapEntry
	.align	2, 0
	.globl	GetBgType
	.type	 GetBgType,function
	.thumb_func
GetBgType:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	bl	GetBgMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, #0x2
	beq	.L620	@cond_branch
	cmp	r4, #0x2
	ble	.L635	@cond_branch
	cmp	r4, #0x3
	beq	.L627	@cond_branch
	b	.L612
.L635:
	cmp	r5, #0
	blt	.L612	@cond_branch
	cmp	r0, #0x1
	bgt	.L612	@cond_branch
	cmp	r0, #0
	blt	.L612	@cond_branch
.L637:
	mov	r0, #0x0
	b	.L636
.L620:
	cmp	r0, #0
	beq	.L637	@cond_branch
	cmp	r0, #0
	blt	.L612	@cond_branch
	cmp	r0, #0x2
	bgt	.L612	@cond_branch
.L638:
	mov	r0, #0x1
	b	.L636
.L627:
	cmp	r0, #0
	beq	.L637	@cond_branch
	cmp	r0, #0x2
	beq	.L638	@cond_branch
.L612:
	ldr	r0, .L639
.L636:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L640:
	.align	2, 0
.L639:
	.word	0xffff
.Lfe50:
	.size	 GetBgType,.Lfe50-GetBgType
	.align	2, 0
	.globl	IsInvalidBg32
	.type	 IsInvalidBg32,function
	.thumb_func
IsInvalidBg32:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bhi	.L642	@cond_branch
	mov	r0, #0x0
	b	.L644
.L642:
	mov	r0, #0x1
.L644:
	pop	{r1}
	bx	r1
.Lfe51:
	.size	 IsInvalidBg32,.Lfe51-IsInvalidBg32
	.align	2, 0
	.globl	IsTileMapOutsideWram
	.type	 IsTileMapOutsideWram,function
	.thumb_func
IsTileMapOutsideWram:
	push	{lr}
	lsl	r0, r0, #0x18
	ldr	r1, .L651
	lsr	r0, r0, #0x14
	add	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L651+0x4
	cmp	r1, r0
	bhi	.L648	@cond_branch
	cmp	r1, #0
	beq	.L648	@cond_branch
	mov	r0, #0x0
	b	.L650
.L652:
	.align	2, 0
.L651:
	.word	sGpuBgConfigs2
	.word	0x3008000
.L648:
	mov	r0, #0x1
.L650:
	pop	{r1}
	bx	r1
.Lfe52:
	.size	 IsTileMapOutsideWram,.Lfe52-IsTileMapOutsideWram

	.lcomm	sGpuBgConfigs,20

	.lcomm	sGpuBgConfigs2,64

	.lcomm	sDmaBusyBitfield,16
	.comm	gUnneededFireRedVariable, 4	@ 4
.text
	.align	2, 0

