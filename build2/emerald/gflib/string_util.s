@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gStringVar1
	.section ewram_data,"aw"
	.type	 gStringVar1,object
	.size	 gStringVar1,256
gStringVar1:
	.byte	0x0
	.space	255
	.globl	gStringVar2
	.type	 gStringVar2,object
	.size	 gStringVar2,256
gStringVar2:
	.byte	0x0
	.space	255
	.globl	gStringVar3
	.type	 gStringVar3,object
	.size	 gStringVar3,256
gStringVar3:
	.byte	0x0
	.space	255
	.globl	gStringVar4
	.type	 gStringVar4,object
	.size	 gStringVar4,1000
gStringVar4:
	.byte	0x0
	.space	999
	.type	 sUnknownStringVar,object
	.size	 sUnknownStringVar,16
sUnknownStringVar:
	.byte	0x0
	.space	15
	.section .rodata
	.type	 sDigits,object
sDigits:
	.byte	0xa1
	.byte	0xa2
	.byte	0xa3
	.byte	0xa4
	.byte	0xa5
	.byte	0xa6
	.byte	0xa7
	.byte	0xa8
	.byte	0xa9
	.byte	0xaa
	.byte	0xbb
	.byte	0xbc
	.byte	0xbd
	.byte	0xbe
	.byte	0xbf
	.byte	0xc0
	.size	 sDigits,16
	.align	2, 0
	.type	 sPowersOfTen,object
sPowersOfTen:
	.word	0x1
	.word	0xa
	.word	0x64
	.word	0x3e8
	.word	0x2710
	.word	0x186a0
	.word	0xf4240
	.word	0x989680
	.word	0x5f5e100
	.word	0x3b9aca00
	.size	 sPowersOfTen,40
.text
	.align	2, 0
	.globl	StringCopy10
	.type	 StringCopy10,function
	.thumb_func
StringCopy10:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0xa
	mov	r3, #0x0
.L6:
	add	r2, r4, r3
	add	r0, r1, r3
	ldrb	r0, [r0]
	strb	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L5	@cond_branch
	add	r0, r2, #0
	b	.L9
.L5:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r5
	bcc	.L6	@cond_branch
	add	r0, r4, r3
	mov	r1, #0xff
	strb	r1, [r0]
.L9:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 StringCopy10,.Lfe1-StringCopy10
	.align	2, 0
	.globl	StringGetEnd10
	.type	 StringGetEnd10,function
	.thumb_func
StringGetEnd10:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r4, #0xa
	mov	r2, #0x0
.L14:
	add	r1, r3, r2
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L13	@cond_branch
	add	r0, r1, #0
	b	.L17
.L13:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r4
	bcc	.L14	@cond_branch
	add	r0, r3, r2
	mov	r1, #0xff
	strb	r1, [r0]
.L17:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 StringGetEnd10,.Lfe2-StringGetEnd10
	.align	2, 0
	.globl	StringCopy7
	.type	 StringCopy7,function
	.thumb_func
StringCopy7:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x7
	mov	r3, #0x0
.L22:
	add	r2, r4, r3
	add	r0, r1, r3
	ldrb	r0, [r0]
	strb	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L21	@cond_branch
	add	r0, r2, #0
	b	.L25
.L21:
	add	r3, r3, #0x1
	cmp	r3, r5
	blt	.L22	@cond_branch
	add	r0, r4, r3
	mov	r1, #0xff
	strb	r1, [r0]
.L25:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 StringCopy7,.Lfe3-StringCopy7
	.align	2, 0
	.globl	StringCopy
	.type	 StringCopy,function
	.thumb_func
StringCopy:
	push	{lr}
	add	r3, r0, #0
	b	.L31
.L29:
	strb	r2, [r3]
	add	r3, r3, #0x1
	add	r1, r1, #0x1
.L31:
	ldrb	r2, [r1]
	add	r0, r2, #0
	cmp	r0, #0xff
	bne	.L29	@cond_branch
	mov	r0, #0xff
	strb	r0, [r3]
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 StringCopy,.Lfe4-StringCopy
	.align	2, 0
	.globl	StringAppend
	.type	 StringAppend,function
	.thumb_func
StringAppend:
	push	{lr}
	add	r2, r0, #0
	b	.L37
.L35:
	add	r2, r2, #0x1
.L37:
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L35	@cond_branch
	add	r0, r2, #0
	bl	StringCopy
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 StringAppend,.Lfe5-StringAppend
	.align	2, 0
	.globl	StringCopyN
	.type	 StringCopyN,function
	.thumb_func
StringCopyN:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	mov	r3, #0x0
	add	r0, r5, #0
	cmp	r3, r0
	bcs	.L40	@cond_branch
	add	r2, r0, #0
.L42:
	add	r1, r4, r3
	add	r0, r6, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r2
	bcc	.L42	@cond_branch
.L40:
	add	r0, r4, r5
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 StringCopyN,.Lfe6-StringCopyN
	.align	2, 0
	.globl	StringAppendN
	.type	 StringAppendN,function
	.thumb_func
StringAppendN:
	push	{lr}
	add	r3, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	b	.L49
.L47:
	add	r3, r3, #0x1
.L49:
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L47	@cond_branch
	add	r0, r3, #0
	bl	StringCopyN
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 StringAppendN,.Lfe7-StringAppendN
	.align	2, 0
	.globl	StringLength
	.type	 StringLength,function
	.thumb_func
StringLength:
	push	{lr}
	add	r2, r0, #0
	mov	r1, #0x0
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L52	@cond_branch
.L53:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L53	@cond_branch
.L52:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 StringLength,.Lfe8-StringLength
	.align	2, 0
	.globl	StringCompare
	.type	 StringCompare,function
	.thumb_func
StringCompare:
	push	{lr}
	add	r2, r0, #0
	b	.L62
.L58:
	cmp	r0, #0xff
	bne	.L59	@cond_branch
	mov	r0, #0x0
	b	.L61
.L59:
	add	r2, r2, #0x1
	add	r1, r1, #0x1
.L62:
	ldrb	r0, [r2]
	ldrb	r3, [r1]
	cmp	r0, r3
	beq	.L58	@cond_branch
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	sub	r0, r0, r1
.L61:
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 StringCompare,.Lfe9-StringCompare
	.align	2, 0
	.globl	StringCompareN
	.type	 StringCompareN,function
	.thumb_func
StringCompareN:
	push	{r4, lr}
	add	r3, r0, #0
	b	.L64
.L66:
	cmp	r0, #0xff
	beq	.L71	@cond_branch
	add	r3, r3, #0x1
	add	r1, r1, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L64	@cond_branch
.L71:
	mov	r0, #0x0
	b	.L70
.L64:
	ldrb	r0, [r3]
	ldrb	r4, [r1]
	cmp	r0, r4
	beq	.L66	@cond_branch
	ldrb	r0, [r3]
	ldrb	r1, [r1]
	sub	r0, r0, r1
.L70:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 StringCompareN,.Lfe10-StringCompareN
	.align	2, 0
	.globl	IsStringLengthAtLeast
	.type	 IsStringLengthAtLeast,function
	.thumb_func
IsStringLengthAtLeast:
	push	{lr}
	add	r3, r0, #0
	mov	r2, #0x0
	cmp	r2, r1
	bge	.L74	@cond_branch
.L76:
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L75	@cond_branch
	cmp	r0, #0xff
	beq	.L75	@cond_branch
	mov	r0, #0x1
	b	.L79
.L75:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r1
	blt	.L76	@cond_branch
.L74:
	mov	r0, #0x0
.L79:
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 IsStringLengthAtLeast,.Lfe11-IsStringLengthAtLeast
	.align	2, 0
	.globl	ConvertIntToDecimalStringN
	.type	 ConvertIntToDecimalStringN,function
	.thumb_func
ConvertIntToDecimalStringN:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	add	r6, r1, #0
	lsl	r3, r3, #0x18
	ldr	r0, .L98
	lsr	r3, r3, #0x16
	sub	r3, r3, #0x4
	add	r3, r3, r0
	ldr	r0, [r3]
	mov	r7, #0x0
	cmp	r2, #0x1
	bne	.L81	@cond_branch
	mov	r7, #0x2
.L81:
	cmp	r2, #0x2
	bne	.L82	@cond_branch
	mov	r7, #0x1
.L82:
	add	r5, r0, #0
	cmp	r5, #0
	ble	.L84	@cond_branch
	ldr	r0, .L98+0x4
	mov	r8, r0
.L86:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r3, r2, #0
	mov	r0, r5
	mul	r0, r0, r2
	sub	r1, r6, r0
	cmp	r7, #0x1
	bne	.L87	@cond_branch
	add	r3, r4, #0
	add	r4, r4, #0x1
	cmp	r2, #0x9
	bhi	.L88	@cond_branch
	mov	r6, r8
	add	r0, r2, r6
	ldrb	r0, [r0]
	b	.L89
.L99:
	.align	2, 0
.L98:
	.word	sPowersOfTen
	.word	sDigits
.L88:
	mov	r0, #0xac
.L89:
	strb	r0, [r3]
	b	.L90
.L87:
	cmp	r2, #0
	bne	.L92	@cond_branch
	cmp	r5, #0x1
	bne	.L91	@cond_branch
.L92:
	mov	r7, #0x1
	add	r2, r4, #0
	add	r4, r4, #0x1
	cmp	r3, #0x9
	bhi	.L93	@cond_branch
	mov	r6, r8
	add	r0, r3, r6
	ldrb	r0, [r0]
	b	.L94
.L93:
	mov	r0, #0xac
.L94:
	strb	r0, [r2]
	b	.L90
.L91:
	cmp	r7, #0x2
	bne	.L90	@cond_branch
	mov	r0, #0x77
	strb	r0, [r4]
	add	r4, r4, #0x1
.L90:
	add	r6, r1, #0
	add	r0, r5, #0
	mov	r1, #0xa
	bl	__divsi3
	add	r5, r0, #0
	cmp	r5, #0
	bgt	.L86	@cond_branch
.L84:
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r4, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 ConvertIntToDecimalStringN,.Lfe12-ConvertIntToDecimalStringN
	.align	2, 0
	.globl	ConvertUIntToDecimalStringN
	.type	 ConvertUIntToDecimalStringN,function
	.thumb_func
ConvertUIntToDecimalStringN:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	add	r6, r1, #0
	lsl	r3, r3, #0x18
	ldr	r0, .L118
	lsr	r3, r3, #0x16
	sub	r3, r3, #0x4
	add	r3, r3, r0
	ldr	r0, [r3]
	mov	r7, #0x0
	cmp	r2, #0x1
	bne	.L101	@cond_branch
	mov	r7, #0x2
.L101:
	cmp	r2, #0x2
	bne	.L102	@cond_branch
	mov	r7, #0x1
.L102:
	add	r5, r0, #0
	cmp	r5, #0
	ble	.L104	@cond_branch
	ldr	r0, .L118+0x4
	mov	r8, r0
.L106:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r3, r2, #0
	mov	r0, r5
	mul	r0, r0, r2
	sub	r1, r6, r0
	cmp	r7, #0x1
	bne	.L107	@cond_branch
	add	r3, r4, #0
	add	r4, r4, #0x1
	cmp	r2, #0x9
	bhi	.L108	@cond_branch
	mov	r6, r8
	add	r0, r2, r6
	ldrb	r0, [r0]
	b	.L109
.L119:
	.align	2, 0
.L118:
	.word	sPowersOfTen
	.word	sDigits
.L108:
	mov	r0, #0xac
.L109:
	strb	r0, [r3]
	b	.L110
.L107:
	cmp	r2, #0
	bne	.L112	@cond_branch
	cmp	r5, #0x1
	bne	.L111	@cond_branch
.L112:
	mov	r7, #0x1
	add	r2, r4, #0
	add	r4, r4, #0x1
	cmp	r3, #0x9
	bhi	.L113	@cond_branch
	mov	r6, r8
	add	r0, r3, r6
	ldrb	r0, [r0]
	b	.L114
.L113:
	mov	r0, #0xac
.L114:
	strb	r0, [r2]
	b	.L110
.L111:
	cmp	r7, #0x2
	bne	.L110	@cond_branch
	mov	r0, #0x77
	strb	r0, [r4]
	add	r4, r4, #0x1
.L110:
	add	r6, r1, #0
	add	r0, r5, #0
	mov	r1, #0xa
	bl	__divsi3
	add	r5, r0, #0
	cmp	r5, #0
	bgt	.L106	@cond_branch
.L104:
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r4, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 ConvertUIntToDecimalStringN,.Lfe13-ConvertUIntToDecimalStringN
	.align	2, 0
	.globl	ConvertIntToHexStringN
	.type	 ConvertIntToHexStringN,function
	.thumb_func
ConvertIntToHexStringN:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	mov	r8, r1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, #0x1
	mov	r0, #0x1
	cmp	r1, r3
	bcs	.L122	@cond_branch
.L124:
	lsl	r1, r1, #0x4
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r3
	bcc	.L124	@cond_branch
.L122:
	mov	r3, #0x0
	cmp	r2, #0x1
	bne	.L126	@cond_branch
	mov	r3, #0x2
.L126:
	cmp	r2, #0x2
	bne	.L127	@cond_branch
	mov	r3, #0x1
.L127:
	add	r5, r1, #0
	cmp	r5, #0
	ble	.L129	@cond_branch
	ldr	r0, .L144
	mov	r9, r0
.L131:
	mov	r0, r8
	add	r1, r5, #0
	str	r3, [sp]
	bl	__divsi3
	add	r4, r0, #0
	add	r7, r4, #0
	mov	r0, r8
	add	r1, r5, #0
	bl	__modsi3
	add	r1, r0, #0
	ldr	r3, [sp]
	cmp	r3, #0x1
	bne	.L132	@cond_branch
	add	r2, r6, #0
	add	r6, r6, #0x1
	cmp	r4, #0xf
	bhi	.L138	@cond_branch
	mov	r7, r9
	add	r0, r4, r7
	ldrb	r0, [r0]
	b	.L139
.L145:
	.align	2, 0
.L144:
	.word	sDigits
.L132:
	cmp	r4, #0
	bne	.L137	@cond_branch
	cmp	r5, #0x1
	bne	.L136	@cond_branch
.L137:
	mov	r3, #0x1
	add	r2, r6, #0
	add	r6, r6, #0x1
	cmp	r7, #0xf
	bhi	.L138	@cond_branch
	mov	r4, r9
	add	r0, r7, r4
	ldrb	r0, [r0]
	b	.L139
.L138:
	mov	r0, #0xac
.L139:
	strb	r0, [r2]
	b	.L135
.L136:
	cmp	r3, #0x2
	bne	.L135	@cond_branch
	mov	r0, #0x77
	strb	r0, [r6]
	add	r6, r6, #0x1
.L135:
	mov	r8, r1
	add	r0, r5, #0
	cmp	r5, #0
	bge	.L142	@cond_branch
	add	r0, r0, #0xf
.L142:
	asr	r5, r0, #0x4
	cmp	r5, #0
	bgt	.L131	@cond_branch
.L129:
	mov	r0, #0xff
	strb	r0, [r6]
	add	r0, r6, #0
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 ConvertIntToHexStringN,.Lfe14-ConvertIntToHexStringN
	.align	2, 0
	.globl	StringExpandPlaceholders
	.type	 StringExpandPlaceholders,function
	.thumb_func
StringExpandPlaceholders:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
.L147:
	ldrb	r2, [r5]
	add	r5, r5, #0x1
	add	r0, r2, #0
	sub	r0, r0, #0xfa
	cmp	r0, #0x5
	bhi	.L169	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L172
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L173:
	.align	2, 0
.L172:
	.word	.L170
	.align	2, 0
	.align	2, 0
.L170:
	.word	.L169
	.word	.L169
	.word	.L152
	.word	.L151
	.word	.L169
	.word	.L171
.L151:
	ldrb	r0, [r5]
	add	r5, r5, #0x1
	bl	GetExpandedPlaceholder
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r4, r0, #0
	b	.L147
.L152:
	strb	r2, [r4]
	add	r4, r4, #0x1
	ldrb	r2, [r5]
	add	r5, r5, #0x1
	strb	r2, [r4]
	add	r4, r4, #0x1
	sub	r0, r2, #0x4
	cmp	r0, #0x14
	bhi	.L163	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L174
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L175:
	.align	2, 0
.L174:
	.word	.L164
	.align	2, 0
	.align	2, 0
.L164:
	.word	.L161
	.word	.L163
	.word	.L163
	.word	.L147
	.word	.L163
	.word	.L147
	.word	.L163
	.word	.L162
	.word	.L163
	.word	.L163
	.word	.L163
	.word	.L147
	.word	.L163
	.word	.L163
	.word	.L163
	.word	.L163
	.word	.L163
	.word	.L147
	.word	.L147
	.word	.L147
	.word	.L147
.L161:
	ldrb	r0, [r5]
	strb	r0, [r4]
	add	r5, r5, #0x1
	add	r4, r4, #0x1
.L162:
	ldrb	r0, [r5]
	strb	r0, [r4]
	add	r5, r5, #0x1
	add	r4, r4, #0x1
.L163:
	ldrb	r0, [r5]
	strb	r0, [r4]
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	b	.L147
.L169:
	strb	r2, [r4]
	add	r4, r4, #0x1
	b	.L147
.L171:
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 StringExpandPlaceholders,.Lfe15-StringExpandPlaceholders
	.section .rodata
.LC7:
	.byte	0xfc
	.byte	0x6
	.byte	0x6
	.byte	0xff
.LC9:
	.byte	0xfe
	.byte	0xfc
	.byte	0xe
	.byte	0x2
	.byte	0xff
.text
	.align	2, 0
	.globl	StringBraille
	.type	 StringBraille,function
	.thumb_func
StringBraille:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	add	r6, r1, #0
	ldr	r1, .L187
	mov	r0, sp
	mov	r2, #0x4
	bl	memcpy
	add	r4, sp, #0x4
	ldr	r1, .L187+0x4
	add	r0, r4, #0
	mov	r2, #0x5
	bl	memcpy
	add	r0, r5, #0
	mov	r1, sp
.L186:
	bl	StringCopy
	add	r5, r0, #0
.L177:
	ldrb	r0, [r6]
	add	r6, r6, #0x1
	cmp	r0, #0xfe
	beq	.L182	@cond_branch
	cmp	r0, #0xff
	bne	.L183	@cond_branch
	b	.L185
.L188:
	.align	2, 0
.L187:
	.word	.LC7
	.word	.LC9
.L182:
	add	r0, r5, #0
	add	r1, r4, #0
	b	.L186
.L183:
	strb	r0, [r5]
	add	r5, r5, #0x1
	add	r0, r0, #0x40
	strb	r0, [r5]
	add	r5, r5, #0x1
	b	.L177
.L185:
	strb	r0, [r5]
	add	r0, r5, #0
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 StringBraille,.Lfe16-StringBraille
	.align	2, 0
	.type	 ExpandPlaceholder_UnknownStringVar,function
	.thumb_func
ExpandPlaceholder_UnknownStringVar:
	ldr	r0, .L190
	bx	lr
.L191:
	.align	2, 0
.L190:
	.word	sUnknownStringVar
.Lfe17:
	.size	 ExpandPlaceholder_UnknownStringVar,.Lfe17-ExpandPlaceholder_UnknownStringVar
	.align	2, 0
	.type	 ExpandPlaceholder_PlayerName,function
	.thumb_func
ExpandPlaceholder_PlayerName:
	ldr	r0, .L193
	ldr	r0, [r0]
	bx	lr
.L194:
	.align	2, 0
.L193:
	.word	gSaveBlock2Ptr
.Lfe18:
	.size	 ExpandPlaceholder_PlayerName,.Lfe18-ExpandPlaceholder_PlayerName
	.align	2, 0
	.type	 ExpandPlaceholder_StringVar1,function
	.thumb_func
ExpandPlaceholder_StringVar1:
	ldr	r0, .L196
	bx	lr
.L197:
	.align	2, 0
.L196:
	.word	gStringVar1
.Lfe19:
	.size	 ExpandPlaceholder_StringVar1,.Lfe19-ExpandPlaceholder_StringVar1
	.align	2, 0
	.type	 ExpandPlaceholder_StringVar2,function
	.thumb_func
ExpandPlaceholder_StringVar2:
	ldr	r0, .L199
	bx	lr
.L200:
	.align	2, 0
.L199:
	.word	gStringVar2
.Lfe20:
	.size	 ExpandPlaceholder_StringVar2,.Lfe20-ExpandPlaceholder_StringVar2
	.align	2, 0
	.type	 ExpandPlaceholder_StringVar3,function
	.thumb_func
ExpandPlaceholder_StringVar3:
	ldr	r0, .L202
	bx	lr
.L203:
	.align	2, 0
.L202:
	.word	gStringVar3
.Lfe21:
	.size	 ExpandPlaceholder_StringVar3,.Lfe21-ExpandPlaceholder_StringVar3
	.align	2, 0
	.type	 ExpandPlaceholder_KunChan,function
	.thumb_func
ExpandPlaceholder_KunChan:
	push	{lr}
	ldr	r0, .L208
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	beq	.L205	@cond_branch
	ldr	r0, .L208+0x4
	b	.L207
.L209:
	.align	2, 0
.L208:
	.word	gSaveBlock2Ptr
	.word	gText_ExpandedPlaceholder_Chan
.L205:
	ldr	r0, .L210
.L207:
	pop	{r1}
	bx	r1
.L211:
	.align	2, 0
.L210:
	.word	gText_ExpandedPlaceholder_Kun
.Lfe22:
	.size	 ExpandPlaceholder_KunChan,.Lfe22-ExpandPlaceholder_KunChan
	.align	2, 0
	.type	 ExpandPlaceholder_RivalName,function
	.thumb_func
ExpandPlaceholder_RivalName:
	push	{lr}
	ldr	r0, .L216
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	beq	.L213	@cond_branch
	ldr	r0, .L216+0x4
	b	.L215
.L217:
	.align	2, 0
.L216:
	.word	gSaveBlock2Ptr
	.word	gText_ExpandedPlaceholder_Brendan
.L213:
	ldr	r0, .L218
.L215:
	pop	{r1}
	bx	r1
.L219:
	.align	2, 0
.L218:
	.word	gText_ExpandedPlaceholder_May
.Lfe23:
	.size	 ExpandPlaceholder_RivalName,.Lfe23-ExpandPlaceholder_RivalName
	.align	2, 0
	.type	 ExpandPlaceholder_Version,function
	.thumb_func
ExpandPlaceholder_Version:
	ldr	r0, .L221
	bx	lr
.L222:
	.align	2, 0
.L221:
	.word	gText_ExpandedPlaceholder_Emerald
.Lfe24:
	.size	 ExpandPlaceholder_Version,.Lfe24-ExpandPlaceholder_Version
	.align	2, 0
	.type	 ExpandPlaceholder_Aqua,function
	.thumb_func
ExpandPlaceholder_Aqua:
	ldr	r0, .L224
	bx	lr
.L225:
	.align	2, 0
.L224:
	.word	gText_ExpandedPlaceholder_Aqua
.Lfe25:
	.size	 ExpandPlaceholder_Aqua,.Lfe25-ExpandPlaceholder_Aqua
	.align	2, 0
	.type	 ExpandPlaceholder_Magma,function
	.thumb_func
ExpandPlaceholder_Magma:
	ldr	r0, .L227
	bx	lr
.L228:
	.align	2, 0
.L227:
	.word	gText_ExpandedPlaceholder_Magma
.Lfe26:
	.size	 ExpandPlaceholder_Magma,.Lfe26-ExpandPlaceholder_Magma
	.align	2, 0
	.type	 ExpandPlaceholder_Archie,function
	.thumb_func
ExpandPlaceholder_Archie:
	ldr	r0, .L230
	bx	lr
.L231:
	.align	2, 0
.L230:
	.word	gText_ExpandedPlaceholder_Archie
.Lfe27:
	.size	 ExpandPlaceholder_Archie,.Lfe27-ExpandPlaceholder_Archie
	.align	2, 0
	.type	 ExpandPlaceholder_Maxie,function
	.thumb_func
ExpandPlaceholder_Maxie:
	ldr	r0, .L233
	bx	lr
.L234:
	.align	2, 0
.L233:
	.word	gText_ExpandedPlaceholder_Maxie
.Lfe28:
	.size	 ExpandPlaceholder_Maxie,.Lfe28-ExpandPlaceholder_Maxie
	.align	2, 0
	.type	 ExpandPlaceholder_Kyogre,function
	.thumb_func
ExpandPlaceholder_Kyogre:
	ldr	r0, .L236
	bx	lr
.L237:
	.align	2, 0
.L236:
	.word	gText_ExpandedPlaceholder_Kyogre
.Lfe29:
	.size	 ExpandPlaceholder_Kyogre,.Lfe29-ExpandPlaceholder_Kyogre
	.align	2, 0
	.type	 ExpandPlaceholder_Groudon,function
	.thumb_func
ExpandPlaceholder_Groudon:
	ldr	r0, .L239
	bx	lr
.L240:
	.align	2, 0
.L239:
	.word	gText_ExpandedPlaceholder_Groudon
.Lfe30:
	.size	 ExpandPlaceholder_Groudon,.Lfe30-ExpandPlaceholder_Groudon
	.section .rodata
	.align	2, 0
	.type	 funcs.93,object
funcs.93:
	.word	ExpandPlaceholder_UnknownStringVar
	.word	ExpandPlaceholder_PlayerName
	.word	ExpandPlaceholder_StringVar1
	.word	ExpandPlaceholder_StringVar2
	.word	ExpandPlaceholder_StringVar3
	.word	ExpandPlaceholder_KunChan
	.word	ExpandPlaceholder_RivalName
	.word	ExpandPlaceholder_Version
	.word	ExpandPlaceholder_Aqua
	.word	ExpandPlaceholder_Magma
	.word	ExpandPlaceholder_Archie
	.word	ExpandPlaceholder_Maxie
	.word	ExpandPlaceholder_Kyogre
	.word	ExpandPlaceholder_Groudon
.text
	.align	2, 0
	.globl	GetExpandedPlaceholder
	.type	 GetExpandedPlaceholder,function
	.thumb_func
GetExpandedPlaceholder:
	push	{lr}
	cmp	r0, #0xd
	bhi	.L242	@cond_branch
	ldr	r1, .L245
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	b	.L244
.L246:
	.align	2, 0
.L245:
	.word	funcs.93
.L242:
	ldr	r0, .L247
.L244:
	pop	{r1}
	bx	r1
.L248:
	.align	2, 0
.L247:
	.word	gText_ExpandedPlaceholder_Empty
.Lfe31:
	.size	 GetExpandedPlaceholder,.Lfe31-GetExpandedPlaceholder
	.align	2, 0
	.globl	StringFill
	.type	 StringFill,function
	.thumb_func
StringFill:
	push	{lr}
	add	r3, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x0
	cmp	r0, r2
	bcs	.L251	@cond_branch
.L253:
	strb	r1, [r3]
	add	r3, r3, #0x1
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r2
	bcc	.L253	@cond_branch
.L251:
	mov	r0, #0xff
	strb	r0, [r3]
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 StringFill,.Lfe32-StringFill
	.align	2, 0
	.globl	StringCopyPadded
	.type	 StringCopyPadded,function
	.thumb_func
StringCopyPadded:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	b	.L256
.L258:
	strb	r1, [r4]
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	cmp	r3, #0
	beq	.L256	@cond_branch
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
.L256:
	ldrb	r1, [r5]
	add	r0, r1, #0
	cmp	r0, #0xff
	bne	.L258	@cond_branch
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r0, .L265
	cmp	r3, r0
	beq	.L262	@cond_branch
	add	r1, r0, #0
.L263:
	strb	r2, [r4]
	add	r4, r4, #0x1
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r1
	bne	.L263	@cond_branch
.L262:
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L266:
	.align	2, 0
.L265:
	.word	0xffff
.Lfe33:
	.size	 StringCopyPadded,.Lfe33-StringCopyPadded
	.align	2, 0
	.globl	StringFillWithTerminator
	.type	 StringFillWithTerminator,function
	.thumb_func
StringFillWithTerminator:
	push	{lr}
	lsl	r2, r1, #0x10
	lsr	r2, r2, #0x10
	mov	r1, #0xff
	bl	StringFill
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 StringFillWithTerminator,.Lfe34-StringFillWithTerminator
	.align	2, 0
	.globl	StringCopyN_Multibyte
	.type	 StringCopyN_Multibyte,function
	.thumb_func
StringCopyN_Multibyte:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r3, r1, #0
	sub	r2, r2, #0x1
	mov	r5, #0x1
	neg	r5, r5
	b	.L277
.L273:
	strb	r0, [r4]
	add	r3, r3, #0x1
	add	r4, r4, #0x1
	sub	r0, r3, #0x1
	ldrb	r0, [r0]
	cmp	r0, #0xf9
	bne	.L271	@cond_branch
	ldrb	r0, [r3]
	strb	r0, [r4]
	add	r3, r3, #0x1
	add	r4, r4, #0x1
.L271:
	sub	r2, r2, #0x1
.L277:
	cmp	r2, r5
	beq	.L270	@cond_branch
	ldrb	r0, [r3]
	add	r1, r0, #0
	cmp	r1, #0xff
	bne	.L273	@cond_branch
.L270:
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 StringCopyN_Multibyte,.Lfe35-StringCopyN_Multibyte
	.align	2, 0
	.globl	StringLength_Multibyte
	.type	 StringLength_Multibyte,function
	.thumb_func
StringLength_Multibyte:
	push	{lr}
	add	r2, r0, #0
	mov	r3, #0x0
	b	.L284
.L281:
	cmp	r1, #0xf9
	bne	.L282	@cond_branch
	add	r2, r2, #0x1
.L282:
	add	r2, r2, #0x1
	add	r3, r3, #0x1
.L284:
	ldrb	r1, [r2]
	add	r0, r1, #0
	cmp	r0, #0xff
	bne	.L281	@cond_branch
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 StringLength_Multibyte,.Lfe36-StringLength_Multibyte
	.align	2, 0
	.globl	WriteColorChangeControlCode
	.type	 WriteColorChangeControlCode,function
	.thumb_func
WriteColorChangeControlCode:
	push	{lr}
	add	r3, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0xfc
	strb	r0, [r3]
	add	r3, r3, #0x1
	cmp	r1, #0x1
	beq	.L288	@cond_branch
	cmp	r1, #0x1
	bcc	.L287	@cond_branch
	cmp	r1, #0x2
	beq	.L289	@cond_branch
	b	.L286
.L287:
	mov	r0, #0x1
	strb	r0, [r3]
	b	.L292
.L288:
	mov	r0, #0x3
	strb	r0, [r3]
	b	.L292
.L289:
	strb	r1, [r3]
.L292:
	add	r3, r3, #0x1
.L286:
	strb	r2, [r3]
	add	r3, r3, #0x1
	mov	r0, #0xff
	strb	r0, [r3]
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 WriteColorChangeControlCode,.Lfe37-WriteColorChangeControlCode
	.align	2, 0
	.globl	IsStringJapanese
	.type	 IsStringJapanese,function
	.thumb_func
IsStringJapanese:
	push	{lr}
	add	r2, r0, #0
	b	.L301
.L296:
	add	r0, r1, #0
	cmp	r0, #0xa0
	bhi	.L297	@cond_branch
	cmp	r0, #0
	beq	.L297	@cond_branch
	mov	r0, #0x1
	b	.L300
.L297:
	add	r2, r2, #0x1
.L301:
	ldrb	r1, [r2]
	add	r0, r1, #0
	cmp	r0, #0xff
	bne	.L296	@cond_branch
	mov	r0, #0x0
.L300:
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 IsStringJapanese,.Lfe38-IsStringJapanese
	.align	2, 0
	.globl	sub_800924C
	.type	 sub_800924C,function
	.thumb_func
sub_800924C:
	push	{r4, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	mov	r1, #0x0
	b	.L312
.L306:
	add	r0, r2, #0
	cmp	r0, #0xa0
	bhi	.L308	@cond_branch
	cmp	r0, #0
	beq	.L308	@cond_branch
	mov	r0, #0x1
	b	.L311
.L308:
	add	r3, r3, #0x1
	add	r1, r1, #0x1
.L312:
	ldrb	r2, [r3]
	add	r0, r2, #0
	cmp	r0, #0xff
	beq	.L304	@cond_branch
	cmp	r1, r4
	blt	.L306	@cond_branch
.L304:
	mov	r0, #0x0
.L311:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 sub_800924C,.Lfe39-sub_800924C
	.section .rodata
	.type	 lengths.121,object
lengths.121:
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x4
	.byte	0x2
	.byte	0x2
	.byte	0x1
	.byte	0x2
	.byte	0x1
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
.text
	.align	2, 0
	.globl	GetExtCtrlCodeLength
	.type	 GetExtCtrlCodeLength,function
	.thumb_func
GetExtCtrlCodeLength:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x0
	cmp	r1, #0x18
	bhi	.L314	@cond_branch
	ldr	r0, .L315
	add	r0, r1, r0
	ldrb	r0, [r0]
.L314:
	pop	{r1}
	bx	r1
.L316:
	.align	2, 0
.L315:
	.word	lengths.121
.Lfe40:
	.size	 GetExtCtrlCodeLength,.Lfe40-GetExtCtrlCodeLength
	.align	2, 0
	.type	 SkipExtCtrlCode,function
	.thumb_func
SkipExtCtrlCode:
	push	{r4, lr}
	add	r4, r0, #0
	b	.L322
.L320:
	add	r4, r4, #0x1
	ldrb	r0, [r4]
	bl	GetExtCtrlCodeLength
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r4, r0
.L322:
	ldrb	r0, [r4]
	cmp	r0, #0xfc
	beq	.L320	@cond_branch
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 SkipExtCtrlCode,.Lfe41-SkipExtCtrlCode
	.align	2, 0
	.globl	StringCompareWithoutExtCtrlCodes
	.type	 StringCompareWithoutExtCtrlCodes,function
	.thumb_func
StringCompareWithoutExtCtrlCodes:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r6, #0x0
	b	.L326
.L327:
	cmp	r1, r0
	bcs	.L328	@cond_branch
	mov	r6, #0x1
	neg	r6, r6
	cmp	r0, #0xff
	bne	.L328	@cond_branch
	mov	r6, #0x1
.L328:
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L332	@cond_branch
	add	r4, r4, #0x1
	add	r5, r5, #0x1
.L326:
	add	r0, r4, #0
	bl	SkipExtCtrlCode
	add	r4, r0, #0
	add	r0, r5, #0
	bl	SkipExtCtrlCode
	add	r5, r0, #0
	ldrb	r1, [r4]
	ldrb	r0, [r5]
	cmp	r1, r0
	bls	.L327	@cond_branch
	mov	r6, #0x1
	cmp	r1, #0xff
	bne	.L332	@cond_branch
	sub	r6, r6, #0x2
.L332:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 StringCompareWithoutExtCtrlCodes,.Lfe42-StringCompareWithoutExtCtrlCodes
	.align	2, 0
	.globl	ConvertInternationalString
	.type	 ConvertInternationalString,function
	.thumb_func
ConvertInternationalString:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	bne	.L335	@cond_branch
	bl	StripExtCtrlCodes
	add	r0, r4, #0
	bl	StringLength
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r1, r2, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r2, #0
	add	r1, r4, r1
	mov	r0, #0xfc
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r4, r3
	mov	r0, #0x16
	strb	r0, [r3]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	add	r2, r4, r2
	mov	r1, #0xff
	strb	r1, [r2]
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	b	.L340
.L338:
	add	r1, r2, r4
	ldrb	r0, [r1]
	strb	r0, [r1, #0x2]
	sub	r0, r2, #0x1
	lsl	r0, r0, #0x18
.L340:
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	bne	.L338	@cond_branch
	mov	r0, #0xfc
	strb	r0, [r4]
	mov	r0, #0x15
	strb	r0, [r4, #0x1]
.L335:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 ConvertInternationalString,.Lfe43-ConvertInternationalString
	.align	2, 0
	.globl	StripExtCtrlCodes
	.type	 StripExtCtrlCodes,function
	.thumb_func
StripExtCtrlCodes:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r4, #0x0
	mov	r6, #0x0
	ldrb	r0, [r5]
	cmp	r0, #0xff
	beq	.L343	@cond_branch
.L344:
	add	r0, r5, r4
	ldrb	r0, [r0]
	cmp	r0, #0xfc
	bne	.L345	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r5, r4
	ldrb	r0, [r0]
	bl	GetExtCtrlCodeLength
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	b	.L342
.L345:
	add	r2, r6, #0
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r2, r5, r2
	add	r1, r4, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r1, r5, r1
	ldrb	r0, [r1]
	strb	r0, [r2]
.L342:
	add	r0, r5, r4
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L344	@cond_branch
.L343:
	add	r1, r5, r6
	mov	r0, #0xff
	strb	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 StripExtCtrlCodes,.Lfe44-StripExtCtrlCodes
	.align	2, 0
	.globl	ConvertToAscii
	.type	 ConvertToAscii,function
	.thumb_func
ConvertToAscii:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x80
	bl	Alloc
	add	r5, r0, #0
	mov	r3, #0x0
	b	.L361
.L352:
	mov	r2, #0x3f
	add	r0, r1, #0
	add	r0, r0, #0x2b
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x19
	bhi	.L353	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0x5a
	b	.L362
.L353:
	add	r0, r1, #0
	add	r0, r0, #0x45
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x19
	bhi	.L355	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0x7a
	b	.L362
.L355:
	add	r0, r1, #0
	add	r0, r0, #0x5f
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x9
	bhi	.L357	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0x71
.L362:
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	b	.L354
.L357:
	cmp	r1, #0
	bne	.L354	@cond_branch
	mov	r2, #0x20
.L354:
	add	r0, r5, r3
	strb	r2, [r0]
	add	r3, r3, #0x1
	add	r4, r4, #0x1
.L361:
	ldrb	r1, [r4]
	add	r0, r1, #0
	cmp	r0, #0xff
	bne	.L352	@cond_branch
	add	r1, r5, r3
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 ConvertToAscii,.Lfe45-ConvertToAscii
.text
	.align	2, 0

