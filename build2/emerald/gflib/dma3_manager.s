@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	ClearDma3Requests
	.type	 ClearDma3Requests,function
	.thumb_func
ClearDma3Requests:
	push	{lr}
	ldr	r2, .L8
	mov	r0, #0x1
	strb	r0, [r2]
	ldr	r1, .L8+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r3, #0x0
	ldr	r0, .L8+0x8
	mov	r1, #0x7f
.L6:
	strh	r3, [r0, #0x8]
	str	r3, [r0]
	str	r3, [r0, #0x4]
	add	r0, r0, #0x10
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L6	@cond_branch
	mov	r0, #0x0
	strb	r0, [r2]
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gDma3ManagerLocked
	.word	gDma3RequestCursor
	.word	gDma3Requests
.Lfe1:
	.size	 ClearDma3Requests,.Lfe1-ClearDma3Requests
	.align	2, 0
	.globl	ProcessDma3Requests
	.type	 ProcessDma3Requests,function
	.thumb_func
ProcessDma3Requests:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	ldr	r0, .L53
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB60
	b	.L10	@long jump
.LCB60:
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	ldr	r1, .L53+0x4
	ldr	r2, .L53+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	mov	ip, r2
	cmp	r0, #0
	bne	.LCB74
	b	.L10	@long jump
.LCB74:
	mov	r8, r1
	add	r1, r1, #0x4
	mov	sl, r1
	mov	r6, #0x80
	lsl	r6, r6, #0x5
	ldr	r7, .L53+0xc
	mov	r2, #0x0
	mov	r9, r2
.L14:
	mov	r3, ip
	ldrb	r0, [r3]
	lsl	r5, r0, #0x4
	mov	r0, r8
	add	r1, r5, r0
	ldrh	r0, [r1, #0x8]
	ldr	r2, [sp, #0x8]
	add	r0, r2, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x8]
	mov	r0, #0xa0
	lsl	r0, r0, #0x8
	ldr	r3, [sp, #0x8]
	cmp	r3, r0
	bls	.LCB105
	b	.L10	@long jump
.LCB105:
	ldr	r0, .L53+0x10
	ldrb	r0, [r0]
	cmp	r0, #0xe0
	bls	.LCB111
	b	.L10	@long jump
.LCB111:
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x2
	beq	.L24	@cond_branch
	cmp	r0, #0x2
	bgt	.L44	@cond_branch
	cmp	r0, #0x1
	beq	.L18	@cond_branch
	b	.L17
.L54:
	.align	2, 0
.L53:
	.word	gDma3ManagerLocked
	.word	gDma3Requests
	.word	gDma3RequestCursor
	.word	0x40000d4
	.word	0x4000006
.L44:
	cmp	r0, #0x3
	beq	.L30	@cond_branch
	cmp	r0, #0x4
	bne	.LCB136
	b	.L36	@long jump
.LCB136:
	b	.L17
.L18:
	ldr	r3, [r1]
	mov	r2, sl
	add	r0, r5, r2
	ldr	r2, [r0]
	ldrh	r1, [r1, #0x8]
	cmp	r1, r6
	bhi	.L22	@cond_branch
	str	r3, [r7]
	str	r2, [r7, #0x4]
	lsr	r0, r1, #0x2
	mov	r1, #0x84
	lsl	r1, r1, #0x18
	b	.L50
.L22:
	ldr	r4, .L55
	str	r3, [r4]
	str	r2, [r4, #0x4]
	ldr	r0, .L55+0x4
	str	r0, [r4, #0x8]
	ldr	r0, [r4, #0x8]
	add	r3, r3, r6
	add	r2, r2, r6
	sub	r1, r1, r6
	cmp	r1, r6
	bhi	.L22	@cond_branch
	str	r3, [r4]
	str	r2, [r4, #0x4]
	lsr	r0, r1, #0x2
	mov	r1, #0x84
	lsl	r1, r1, #0x18
	b	.L51
.L56:
	.align	2, 0
.L55:
	.word	0x40000d4
	.word	-0x7bfffc00
.L24:
	mov	r3, sl
	add	r0, r5, r3
	ldr	r4, [r0]
	ldrh	r1, [r1, #0x8]
	cmp	r1, r6
	bhi	.L28	@cond_branch
	mov	r0, r8
	add	r0, r0, #0xc
	add	r0, r5, r0
	ldr	r0, [r0]
	str	r0, [sp]
	mov	r5, sp
	str	r5, [r7]
	str	r4, [r7, #0x4]
	lsr	r0, r1, #0x2
	mov	r1, #0x85
	lsl	r1, r1, #0x18
	b	.L50
.L28:
	mov	r2, ip
	ldrb	r0, [r2]
	lsl	r0, r0, #0x4
	mov	r5, r8
	add	r5, r5, #0xc
	add	r0, r0, r5
	ldr	r0, [r0]
	str	r0, [sp]
	ldr	r3, .L57
	mov	r0, sp
	str	r0, [r3]
	str	r4, [r3, #0x4]
	ldr	r0, .L57+0x4
	str	r0, [r3, #0x8]
	ldr	r0, [r3, #0x8]
	add	r4, r4, r6
	sub	r1, r1, r6
	cmp	r1, r6
	bhi	.L28	@cond_branch
	ldrb	r0, [r2]
	lsl	r0, r0, #0x4
	add	r0, r0, r5
	ldr	r0, [r0]
	str	r0, [sp]
	mov	r2, sp
	str	r2, [r3]
	str	r4, [r3, #0x4]
	lsr	r0, r1, #0x2
	mov	r1, #0x85
	lsl	r1, r1, #0x18
	b	.L52
.L58:
	.align	2, 0
.L57:
	.word	0x40000d4
	.word	-0x7afffc00
.L30:
	ldr	r3, [r1]
	mov	r2, sl
	add	r0, r5, r2
	ldr	r2, [r0]
	ldrh	r1, [r1, #0x8]
	cmp	r1, r6
	bhi	.L34	@cond_branch
	str	r3, [r7]
	str	r2, [r7, #0x4]
	lsr	r0, r1, #0x1
	mov	r1, #0x80
	lsl	r1, r1, #0x18
	b	.L50
.L34:
	ldr	r4, .L59
	str	r3, [r4]
	str	r2, [r4, #0x4]
	ldr	r0, .L59+0x4
	str	r0, [r4, #0x8]
	ldr	r0, [r4, #0x8]
	add	r3, r3, r6
	add	r2, r2, r6
	sub	r1, r1, r6
	cmp	r1, r6
	bhi	.L34	@cond_branch
	str	r3, [r4]
	str	r2, [r4, #0x4]
	lsr	r0, r1, #0x1
	mov	r1, #0x80
	lsl	r1, r1, #0x18
.L51:
	orr	r0, r0, r1
	str	r0, [r4, #0x8]
	ldr	r0, [r4, #0x8]
	b	.L17
.L60:
	.align	2, 0
.L59:
	.word	0x40000d4
	.word	-0x7ffff800
.L36:
	mov	r3, sl
	add	r0, r5, r3
	ldr	r2, [r0]
	ldrh	r4, [r1, #0x8]
	add	r1, sp, #0x4
	cmp	r4, r6
	bhi	.L40	@cond_branch
	mov	r0, r8
	add	r0, r0, #0xc
	add	r0, r5, r0
	ldr	r0, [r0]
	strh	r0, [r1]
	str	r1, [r7]
	str	r2, [r7, #0x4]
	lsr	r0, r4, #0x1
	mov	r1, #0x81
	lsl	r1, r1, #0x18
.L50:
	orr	r0, r0, r1
	str	r0, [r7, #0x8]
	ldr	r0, [r7, #0x8]
	b	.L17
.L40:
	mov	r5, ip
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	ldr	r3, .L61
	add	r0, r0, r3
	ldr	r0, [r0]
	strh	r0, [r1]
	ldr	r3, .L61+0x4
	str	r1, [r3]
	str	r2, [r3, #0x4]
	ldr	r0, .L61+0x8
	str	r0, [r3, #0x8]
	ldr	r0, [r3, #0x8]
	add	r2, r2, r6
	sub	r4, r4, r6
	cmp	r4, r6
	bhi	.L40	@cond_branch
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	ldr	r5, .L61
	add	r0, r0, r5
	ldr	r0, [r0]
	strh	r0, [r1]
	str	r1, [r3]
	str	r2, [r3, #0x4]
	lsr	r0, r4, #0x1
	mov	r1, #0x81
	lsl	r1, r1, #0x18
.L52:
	orr	r0, r0, r1
	str	r0, [r3, #0x8]
	ldr	r0, [r3, #0x8]
.L17:
	ldr	r1, .L61+0xc
	mov	r3, ip
	ldrb	r0, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	mov	r2, r9
	str	r2, [r0]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, sl
	str	r2, [r0]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	mov	r4, #0x0
	strh	r2, [r0, #0x8]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	mov	r5, r9
	strh	r5, [r0, #0xa]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x4
	add	r1, r1, #0xc
	add	r0, r0, r1
	mov	r1, r9
	str	r1, [r0]
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bge	.L12	@cond_branch
	strb	r4, [r3]
.L12:
	mov	r2, ip
	ldrb	r0, [r2]
	lsl	r0, r0, #0x4
	ldr	r3, .L61+0xc
	add	r0, r0, r3
	ldrh	r0, [r0, #0x8]
	cmp	r0, #0
	beq	.LCB455
	b	.L14	@long jump
.LCB455:
.L10:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	gDma3Requests+0xc
	.word	0x40000d4
	.word	-0x7efff800
	.word	gDma3Requests
.Lfe2:
	.size	 ProcessDma3Requests,.Lfe2-ProcessDma3Requests
	.align	2, 0
	.globl	RequestDma3Copy
	.type	 RequestDma3Copy,function
	.thumb_func
RequestDma3Copy:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	ip, r0
	mov	r8, r1
	lsl	r2, r2, #0x10
	lsr	r7, r2, #0x10
	lsl	r3, r3, #0x18
	lsr	r4, r3, #0x18
	mov	r5, #0x0
	ldr	r1, .L73
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L73+0x4
	ldrb	r2, [r0]
	mov	sl, r1
	ldr	r6, .L73+0x8
	mov	r9, r6
	lsl	r0, r2, #0x4
	add	r1, r0, r6
.L66:
	lsl	r3, r2, #0x4
	ldrh	r0, [r1, #0x8]
	cmp	r0, #0
	bne	.L67	@cond_branch
	mov	r0, ip
	str	r0, [r1]
	mov	r0, r9
	add	r0, r0, #0x4
	add	r0, r3, r0
	mov	r3, r8
	str	r3, [r0]
	strh	r7, [r1, #0x8]
	cmp	r4, #0x1
	bne	.L68	@cond_branch
	strh	r4, [r1, #0xa]
	b	.L69
.L74:
	.align	2, 0
.L73:
	.word	gDma3ManagerLocked
	.word	gDma3RequestCursor
	.word	gDma3Requests
.L68:
	mov	r0, #0x3
	strh	r0, [r1, #0xa]
.L69:
	mov	r0, #0x0
	ldr	r1, .L75
	strb	r0, [r1]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	b	.L72
.L76:
	.align	2, 0
.L75:
	.word	gDma3ManagerLocked
.L67:
	add	r1, r1, #0x10
	add	r2, r2, #0x1
	cmp	r2, #0x7f
	ble	.L70	@cond_branch
	add	r1, r6, #0
	mov	r2, #0x0
.L70:
	add	r5, r5, #0x1
	cmp	r5, #0x7f
	ble	.L66	@cond_branch
	mov	r0, #0x0
	mov	r3, sl
	strb	r0, [r3]
	mov	r0, #0x1
	neg	r0, r0
.L72:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 RequestDma3Copy,.Lfe3-RequestDma3Copy
	.align	2, 0
	.globl	RequestDma3Fill
	.type	 RequestDma3Fill,function
	.thumb_func
RequestDma3Fill:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r0
	mov	r8, r1
	lsl	r2, r2, #0x10
	lsr	r7, r2, #0x10
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	mov	r6, #0x0
	ldr	r0, .L88
	ldrb	r2, [r0]
	ldr	r1, .L88+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	mov	sl, r1
	ldr	r0, .L88+0x8
	mov	ip, r0
	mov	r4, ip
	lsl	r0, r2, #0x4
	add	r0, r0, #0x8
	add	r1, r0, r4
.L80:
	lsl	r3, r2, #0x4
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L81	@cond_branch
	add	r0, r4, #0x4
	add	r0, r3, r0
	mov	r6, r8
	str	r6, [r0]
	strh	r7, [r1]
	strh	r5, [r1, #0x2]
	add	r0, r4, #0
	add	r0, r0, #0xc
	add	r0, r3, r0
	mov	r3, r9
	str	r3, [r0]
	cmp	r5, #0x1
	bne	.L82	@cond_branch
	mov	r0, #0x2
	b	.L87
.L89:
	.align	2, 0
.L88:
	.word	gDma3RequestCursor
	.word	gDma3ManagerLocked
	.word	gDma3Requests
.L82:
	mov	r0, #0x4
.L87:
	strh	r0, [r1, #0x2]
	mov	r0, #0x0
	ldr	r6, .L90
	strb	r0, [r6]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	b	.L86
.L91:
	.align	2, 0
.L90:
	.word	gDma3ManagerLocked
.L81:
	add	r1, r1, #0x10
	add	r2, r2, #0x1
	cmp	r2, #0x7f
	ble	.L84	@cond_branch
	mov	r1, ip
	add	r1, r1, #0x8
	mov	r2, #0x0
.L84:
	add	r6, r6, #0x1
	cmp	r6, #0x7f
	ble	.L80	@cond_branch
	mov	r0, #0x0
	mov	r1, sl
	strb	r0, [r1]
	mov	r0, #0x1
	neg	r0, r0
.L86:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 RequestDma3Fill,.Lfe4-RequestDma3Fill
	.align	2, 0
	.globl	CheckForSpaceForDma3Request
	.type	 CheckForSpaceForDma3Request,function
	.thumb_func
CheckForSpaceForDma3Request:
	push	{lr}
	mov	r2, #0x0
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	mov	r3, #0x1
	neg	r3, r3
	cmp	r1, r3
	bne	.L93	@cond_branch
	ldr	r1, .L104
.L96:
	ldrh	r0, [r1, #0x8]
	cmp	r0, #0
	bne	.L102	@cond_branch
	add	r1, r1, #0x10
	add	r2, r2, #0x1
	cmp	r2, #0x7f
	ble	.L96	@cond_branch
.L103:
	mov	r0, #0x0
	b	.L101
.L105:
	.align	2, 0
.L104:
	.word	gDma3Requests
.L93:
	ldr	r0, .L106
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L103	@cond_branch
.L102:
	mov	r0, #0x1
	neg	r0, r0
.L101:
	pop	{r1}
	bx	r1
.L107:
	.align	2, 0
.L106:
	.word	gDma3Requests
.Lfe5:
	.size	 CheckForSpaceForDma3Request,.Lfe5-CheckForSpaceForDma3Request
	.globl	gDma3Requests
.bss
	.align	2, 0
	.type	 gDma3Requests,object
	.size	 gDma3Requests,2048
gDma3Requests:
	.space	2048

	.lcomm	gDma3ManagerLocked,1

	.lcomm	gDma3RequestCursor,1
.text
	.align	2, 0

