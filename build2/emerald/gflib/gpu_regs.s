@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	InitGpuRegManager
	.type	 InitGpuRegManager,function
	.thumb_func
InitGpuRegManager:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r2, #0x0
	ldr	r7, .L8
	ldr	r0, .L8+0x4
	mov	ip, r0
	ldr	r1, .L8+0x8
	mov	r8, r1
	ldr	r6, .L8+0xc
	mov	r5, #0x0
	ldr	r4, .L8+0x10
	mov	r3, #0xff
.L6:
	add	r0, r2, r6
	strb	r5, [r0]
	add	r1, r2, r4
	ldrb	r0, [r1]
	orr	r0, r0, r3
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x5f
	ble	.L6	@cond_branch
	mov	r0, #0x0
	strb	r0, [r7]
	mov	r1, ip
	strb	r0, [r1]
	mov	r0, #0x0
	mov	r1, r8
	strh	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	sGpuRegBufferLocked
	.word	sShouldSyncRegIE
	.word	sRegIE
	.word	sGpuRegBuffer
	.word	sGpuRegWaitingList
.Lfe1:
	.size	 InitGpuRegManager,.Lfe1-InitGpuRegManager
	.align	2, 0
	.type	 CopyBufferedValueToGpuReg,function
	.thumb_func
CopyBufferedValueToGpuReg:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x4
	bne	.L11	@cond_branch
	ldr	r2, .L13
	ldrh	r1, [r2]
	ldr	r0, .L13+0x4
	and	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L13+0x8
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	orr	r0, r0, r1
	strh	r0, [r2]
	b	.L12
.L14:
	.align	2, 0
.L13:
	.word	0x4000004
	.word	0xffe7
	.word	sGpuRegBuffer+0x4
.L11:
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	add	r0, r2, r0
	ldr	r1, .L15
	add	r1, r2, r1
	ldrh	r1, [r1]
	strh	r1, [r0]
.L12:
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	sGpuRegBuffer
.Lfe2:
	.size	 CopyBufferedValueToGpuReg,.Lfe2-CopyBufferedValueToGpuReg
	.align	2, 0
	.globl	CopyBufferedValuesToGpuRegs
	.type	 CopyBufferedValuesToGpuRegs,function
	.thumb_func
CopyBufferedValuesToGpuRegs:
	push	{r4, r5, lr}
	ldr	r0, .L25
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L17	@cond_branch
	mov	r5, #0x0
.L22:
	ldr	r0, .L25+0x4
	add	r4, r5, r0
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L17	@cond_branch
	bl	CopyBufferedValueToGpuReg
	mov	r0, #0xff
	strb	r0, [r4]
	add	r5, r5, #0x1
	cmp	r5, #0x5f
	ble	.L22	@cond_branch
.L17:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	sGpuRegBufferLocked
	.word	sGpuRegWaitingList
.Lfe3:
	.size	 CopyBufferedValuesToGpuRegs,.Lfe3-CopyBufferedValuesToGpuRegs
	.align	2, 0
	.globl	SetGpuReg
	.type	 SetGpuReg,function
	.thumb_func
SetGpuReg:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r4, #0x5f
	bhi	.L27	@cond_branch
	ldr	r0, .L40
	add	r0, r4, r0
	strh	r1, [r0]
	ldr	r0, .L40+0x4
	ldrh	r1, [r0]
	mov	r0, #0xff
	and	r0, r0, r1
	sub	r0, r0, #0xa1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x40
	bls	.L30	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	ldrh	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L29	@cond_branch
.L30:
	add	r0, r4, #0
	bl	CopyBufferedValueToGpuReg
	b	.L27
.L41:
	.align	2, 0
.L40:
	.word	sGpuRegBuffer
	.word	0x4000006
.L39:
	mov	r0, #0x0
	strb	r0, [r5]
	b	.L27
.L29:
	ldr	r2, .L42
	mov	r0, #0x1
	strb	r0, [r2]
	mov	r3, #0x0
	ldr	r0, .L42+0x4
	ldrb	r1, [r0]
	add	r5, r2, #0
	add	r2, r0, #0
	cmp	r1, #0xff
	beq	.L33	@cond_branch
	add	r1, r2, #0
.L35:
	ldrb	r0, [r1]
	cmp	r0, r4
	beq	.L39	@cond_branch
	add	r1, r1, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x5f
	bgt	.L33	@cond_branch
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L35	@cond_branch
.L33:
	add	r0, r3, r2
	mov	r1, #0x0
	strb	r4, [r0]
	strb	r1, [r5]
.L27:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	sGpuRegBufferLocked
	.word	sGpuRegWaitingList
.Lfe4:
	.size	 SetGpuReg,.Lfe4-SetGpuReg
	.align	2, 0
	.globl	SetGpuReg_ForcedBlank
	.type	 SetGpuReg_ForcedBlank,function
	.thumb_func
SetGpuReg_ForcedBlank:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r4, #0x5f
	bhi	.L44	@cond_branch
	ldr	r0, .L56
	add	r0, r4, r0
	strh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	ldrh	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L46	@cond_branch
	add	r0, r4, #0
	bl	CopyBufferedValueToGpuReg
	b	.L44
.L57:
	.align	2, 0
.L56:
	.word	sGpuRegBuffer
.L55:
	mov	r0, #0x0
	strb	r0, [r5]
	b	.L44
.L46:
	ldr	r2, .L58
	mov	r0, #0x1
	strb	r0, [r2]
	mov	r3, #0x0
	ldr	r0, .L58+0x4
	ldrb	r1, [r0]
	add	r5, r2, #0
	add	r2, r0, #0
	cmp	r1, #0xff
	beq	.L49	@cond_branch
	add	r1, r2, #0
.L51:
	ldrb	r0, [r1]
	cmp	r0, r4
	beq	.L55	@cond_branch
	add	r1, r1, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x5f
	bgt	.L49	@cond_branch
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L51	@cond_branch
.L49:
	add	r0, r3, r2
	mov	r1, #0x0
	strb	r4, [r0]
	strb	r1, [r5]
.L44:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	sGpuRegBufferLocked
	.word	sGpuRegWaitingList
.Lfe5:
	.size	 SetGpuReg_ForcedBlank,.Lfe5-SetGpuReg_ForcedBlank
	.align	2, 0
	.globl	GetGpuReg
	.type	 GetGpuReg,function
	.thumb_func
GetGpuReg:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r1, #0x4
	bne	.L61	@cond_branch
	ldr	r0, .L67
	b	.L65
.L68:
	.align	2, 0
.L67:
	.word	0x4000004
.L61:
	cmp	r1, #0x6
	beq	.L62	@cond_branch
	ldr	r0, .L69
	add	r0, r1, r0
	ldrh	r0, [r0]
	b	.L66
.L70:
	.align	2, 0
.L69:
	.word	sGpuRegBuffer
.L62:
	ldr	r0, .L71
.L65:
	ldrh	r0, [r0]
.L66:
	pop	{r1}
	bx	r1
.L72:
	.align	2, 0
.L71:
	.word	0x4000006
.Lfe6:
	.size	 GetGpuReg,.Lfe6-GetGpuReg
	.align	2, 0
	.globl	SetGpuRegBits
	.type	 SetGpuRegBits,function
	.thumb_func
SetGpuRegBits:
	push	{lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L74
	add	r1, r0, r1
	ldrh	r1, [r1]
	orr	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	sGpuRegBuffer
.Lfe7:
	.size	 SetGpuRegBits,.Lfe7-SetGpuRegBits
	.align	2, 0
	.globl	ClearGpuRegBits
	.type	 ClearGpuRegBits,function
	.thumb_func
ClearGpuRegBits:
	push	{lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	ldr	r1, .L77
	add	r1, r0, r1
	ldrh	r1, [r1]
	lsr	r2, r2, #0x10
	bic	r1, r1, r2
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L78:
	.align	2, 0
.L77:
	.word	sGpuRegBuffer
.Lfe8:
	.size	 ClearGpuRegBits,.Lfe8-ClearGpuRegBits
	.align	2, 0
	.type	 SyncRegIE,function
	.thumb_func
SyncRegIE:
	push	{r4, r5, lr}
	ldr	r5, .L81
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L80	@cond_branch
	ldr	r2, .L81+0x4
	ldrh	r1, [r2]
	mov	r4, #0x0
	strh	r4, [r2]
	ldr	r3, .L81+0x8
	ldr	r0, .L81+0xc
	ldrh	r0, [r0]
	strh	r0, [r3]
	strh	r1, [r2]
	strb	r4, [r5]
.L80:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	sShouldSyncRegIE
	.word	0x4000208
	.word	0x4000200
	.word	sRegIE
.Lfe9:
	.size	 SyncRegIE,.Lfe9-SyncRegIE
	.align	2, 0
	.globl	EnableInterrupts
	.type	 EnableInterrupts,function
	.thumb_func
EnableInterrupts:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L84
	ldrh	r1, [r4]
	orr	r0, r0, r1
	strh	r0, [r4]
	ldr	r1, .L84+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	bl	SyncRegIE
	ldrh	r0, [r4]
	bl	UpdateRegDispstatIntrBits
	pop	{r4}
	pop	{r0}
	bx	r0
.L85:
	.align	2, 0
.L84:
	.word	sRegIE
	.word	sShouldSyncRegIE
.Lfe10:
	.size	 EnableInterrupts,.Lfe10-EnableInterrupts
	.align	2, 0
	.globl	DisableInterrupts
	.type	 DisableInterrupts,function
	.thumb_func
DisableInterrupts:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L87
	ldrh	r1, [r4]
	bic	r1, r1, r0
	strh	r1, [r4]
	ldr	r1, .L87+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	bl	SyncRegIE
	ldrh	r0, [r4]
	bl	UpdateRegDispstatIntrBits
	pop	{r4}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	sRegIE
	.word	sShouldSyncRegIE
.Lfe11:
	.size	 DisableInterrupts,.Lfe11-DisableInterrupts
	.align	2, 0
	.type	 UpdateRegDispstatIntrBits,function
	.thumb_func
UpdateRegDispstatIntrBits:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x4
	bl	GetGpuReg
	mov	r2, #0x18
	and	r2, r2, r0
	mov	r1, #0x1
	and	r1, r1, r4
	neg	r0, r1
	orr	r0, r0, r1
	asr	r1, r0, #0x1f
	mov	r0, #0x8
	and	r1, r1, r0
	mov	r0, #0x2
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L91	@cond_branch
	mov	r0, #0x10
	orr	r1, r1, r0
.L91:
	cmp	r2, r1
	beq	.L92	@cond_branch
	mov	r0, #0x4
	bl	SetGpuReg
.L92:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 UpdateRegDispstatIntrBits,.Lfe12-UpdateRegDispstatIntrBits

	.lcomm	sGpuRegBuffer,96

	.lcomm	sGpuRegWaitingList,96

	.lcomm	sGpuRegBufferLocked,1

	.lcomm	sShouldSyncRegIE,1

	.lcomm	sRegIE,2
.text
	.align	2, 0

