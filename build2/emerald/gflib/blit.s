@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	BlitBitmapRect4BitWithoutColorKey
	.type	 BlitBitmapRect4BitWithoutColorKey,function
	.thumb_func
BlitBitmapRect4BitWithoutColorKey:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	ldr	r4, [sp, #0x2c]
	ldr	r5, [sp, #0x30]
	ldr	r6, [sp, #0x34]
	ldr	r7, [sp, #0x38]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	lsl	r7, r7, #0x10
	lsr	r7, r7, #0x10
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	str	r7, [sp, #0xc]
	mov	r4, #0xff
	str	r4, [sp, #0x10]
	bl	BlitBitmapRect4Bit
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 BlitBitmapRect4BitWithoutColorKey,.Lfe1-BlitBitmapRect4BitWithoutColorKey
	.align	2, 0
	.globl	BlitBitmapRect4Bit
	.type	 BlitBitmapRect4Bit,function
	.thumb_func
BlitBitmapRect4Bit:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldr	r0, [sp, #0x4c]
	ldr	r1, [sp, #0x50]
	ldr	r4, [sp, #0x54]
	ldr	r5, [sp, #0x58]
	ldr	r6, [sp, #0x5c]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r2, [sp, #0x8]
	lsl	r3, r3, #0x10
	lsr	r7, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0xc]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp, #0x10]
	ldr	r0, [sp, #0x4]
	ldrh	r3, [r0, #0x4]
	ldr	r1, [sp, #0xc]
	sub	r0, r3, r1
	add	r2, r2, r4
	mov	r8, r2
	cmp	r0, r4
	bge	.L4	@cond_branch
	ldr	r2, [sp, #0x8]
	add	r0, r0, r2
	mov	r8, r0
.L4:
	ldr	r4, [sp, #0x4]
	ldrh	r0, [r4, #0x6]
	mov	r1, r9
	sub	r0, r0, r1
	add	r2, r5, r7
	str	r2, [sp, #0x14]
	cmp	r0, r5
	bge	.L6	@cond_branch
	add	r0, r0, r7
	str	r0, [sp, #0x14]
.L6:
	ldr	r4, [sp]
	ldrh	r1, [r4, #0x4]
	mov	r2, #0x7
	add	r0, r1, #0
	and	r0, r0, r2
	add	r1, r1, r0
	asr	r1, r1, #0x3
	str	r1, [sp, #0x18]
	add	r0, r3, #0
	and	r0, r0, r2
	add	r0, r3, r0
	asr	r0, r0, #0x3
	str	r0, [sp, #0x1c]
	ldr	r0, [sp, #0x10]
	cmp	r0, #0xff
	bne	.L8	@cond_branch
	add	r3, r7, #0
	mov	r1, r9
	ldr	r2, [sp, #0x14]
	cmp	r3, r2
	blt	.LCB131
	b	.L19	@long jump
.LCB131:
.L12:
	ldr	r5, [sp, #0x8]
	ldr	r6, [sp, #0xc]
	add	r4, r3, #0x1
	str	r4, [sp, #0x24]
	add	r0, r1, #0x1
	str	r0, [sp, #0x28]
	cmp	r5, r8
	bge	.L11	@cond_branch
	mov	r7, #0x3
	asr	r0, r3, #0x3
	ldr	r2, [sp, #0x18]
	mul	r0, r0, r2
	lsl	r0, r0, #0x5
	mov	sl, r0
	lsl	r0, r3, #0x1d
	lsr	r0, r0, #0x1b
	mov	r9, r0
	asr	r0, r1, #0x3
	ldr	r4, [sp, #0x1c]
	mul	r0, r0, r4
	lsl	r0, r0, #0x5
	mov	ip, r0
	lsl	r0, r1, #0x1d
	lsr	r3, r0, #0x1b
.L16:
	asr	r0, r5, #0x1
	and	r0, r0, r7
	ldr	r2, [sp]
	ldr	r1, [r2]
	add	r1, r1, r0
	asr	r0, r5, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, sl
	mov	r4, r9
	add	r2, r1, r4
	asr	r0, r6, #0x1
	and	r0, r0, r7
	ldr	r4, [sp, #0x4]
	ldr	r1, [r4]
	add	r1, r1, r0
	asr	r0, r6, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, ip
	add	r4, r1, r3
	ldrb	r2, [r2]
	add	r0, r5, #0
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	asr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	add	r0, r6, #0
	and	r0, r0, r1
	lsl	r1, r0, #0x2
	lsl	r2, r2, r1
	mov	r0, #0xf0
	asr	r0, r0, r1
	ldrb	r1, [r4]
	and	r0, r0, r1
	orr	r2, r2, r0
	strb	r2, [r4]
	add	r5, r5, #0x1
	add	r6, r6, #0x1
	cmp	r5, r8
	blt	.L16	@cond_branch
.L11:
	ldr	r3, [sp, #0x24]
	ldr	r1, [sp, #0x28]
	ldr	r2, [sp, #0x14]
	cmp	r3, r2
	blt	.L12	@cond_branch
	b	.L19
.L8:
	add	r3, r7, #0
	mov	r1, r9
	ldr	r4, [sp, #0x14]
	cmp	r3, r4
	bge	.L19	@cond_branch
.L23:
	ldr	r5, [sp, #0x8]
	ldr	r6, [sp, #0xc]
	add	r0, r3, #0x1
	str	r0, [sp, #0x24]
	add	r2, r1, #0x1
	str	r2, [sp, #0x28]
	cmp	r5, r8
	bge	.L22	@cond_branch
	mov	r4, #0x3
	mov	r9, r4
	asr	r0, r3, #0x3
	ldr	r2, [sp, #0x18]
	mul	r0, r0, r2
	lsl	r0, r0, #0x5
	str	r0, [sp, #0x20]
	lsl	r0, r3, #0x1d
	lsr	r0, r0, #0x1b
	mov	sl, r0
	mov	r3, #0x1
	asr	r0, r1, #0x3
	ldr	r4, [sp, #0x1c]
	mul	r0, r0, r4
	lsl	r0, r0, #0x5
	mov	ip, r0
	lsl	r0, r1, #0x1d
	lsr	r7, r0, #0x1b
.L27:
	asr	r0, r5, #0x1
	mov	r1, r9
	and	r0, r0, r1
	ldr	r2, [sp]
	ldr	r1, [r2]
	add	r1, r1, r0
	asr	r0, r5, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldr	r4, [sp, #0x20]
	add	r1, r1, r4
	mov	r0, sl
	add	r2, r1, r0
	asr	r0, r6, #0x1
	mov	r1, r9
	and	r0, r0, r1
	ldr	r4, [sp, #0x4]
	ldr	r1, [r4]
	add	r1, r1, r0
	asr	r0, r6, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, ip
	add	r4, r1, r7
	ldrb	r2, [r2]
	add	r0, r5, #0
	and	r0, r0, r3
	lsl	r0, r0, #0x2
	asr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	ldr	r0, [sp, #0x10]
	cmp	r2, r0
	beq	.L26	@cond_branch
	add	r0, r6, #0
	and	r0, r0, r3
	lsl	r1, r0, #0x2
	lsl	r2, r2, r1
	mov	r0, #0xf0
	asr	r0, r0, r1
	ldrb	r1, [r4]
	and	r0, r0, r1
	orr	r2, r2, r0
	strb	r2, [r4]
.L26:
	add	r5, r5, #0x1
	add	r6, r6, #0x1
	cmp	r5, r8
	blt	.L27	@cond_branch
.L22:
	ldr	r3, [sp, #0x24]
	ldr	r1, [sp, #0x28]
	ldr	r2, [sp, #0x14]
	cmp	r3, r2
	blt	.L23	@cond_branch
.L19:
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 BlitBitmapRect4Bit,.Lfe2-BlitBitmapRect4Bit
	.align	2, 0
	.globl	FillBitmapRect4Bit
	.type	 FillBitmapRect4Bit,function
	.thumb_func
FillBitmapRect4Bit:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r9, r0
	ldr	r0, [sp, #0x28]
	ldr	r4, [sp, #0x2c]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r1, [sp]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r6, r2, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x18
	lsr	r5, r4, #0x18
	add	r4, r1, r3
	mov	r3, r9
	ldrh	r1, [r3, #0x4]
	cmp	r4, r1
	ble	.L32	@cond_branch
	add	r4, r1, #0
.L32:
	add	r2, r2, r0
	mov	ip, r2
	mov	r2, r9
	ldrh	r0, [r2, #0x6]
	cmp	ip, r0
	ble	.L33	@cond_branch
	mov	ip, r0
.L33:
	mov	r0, #0x7
	and	r0, r0, r1
	add	r0, r1, r0
	asr	r0, r0, #0x3
	str	r0, [sp, #0x4]
	lsl	r0, r5, #0x1c
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r3, #0xf
	mov	sl, r3
	mov	r0, sl
	and	r0, r0, r5
	mov	sl, r0
	add	r1, r6, #0
	cmp	r1, ip
	bge	.L35	@cond_branch
.L37:
	ldr	r3, [sp]
	add	r7, r1, #0x1
	cmp	r3, r4
	bge	.L36	@cond_branch
	asr	r0, r1, #0x3
	ldr	r2, [sp, #0x4]
	mul	r0, r0, r2
	lsl	r6, r0, #0x5
	lsl	r0, r1, #0x1d
	lsr	r5, r0, #0x1b
.L41:
	asr	r2, r3, #0x1
	mov	r0, #0x3
	and	r2, r2, r0
	mov	r0, r9
	ldr	r1, [r0]
	add	r1, r1, r2
	asr	r0, r3, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, r6
	add	r2, r1, r5
	lsl	r0, r3, #0x1f
	cmp	r0, #0
	beq	.L42	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0xf
	and	r0, r0, r1
	mov	r1, r8
	b	.L46
.L42:
	ldrb	r1, [r2]
	mov	r0, #0xf0
	and	r0, r0, r1
	mov	r1, sl
.L46:
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, r4
	blt	.L41	@cond_branch
.L36:
	add	r1, r7, #0
	cmp	r1, ip
	blt	.L37	@cond_branch
.L35:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 FillBitmapRect4Bit,.Lfe3-FillBitmapRect4Bit
	.align	2, 0
	.globl	BlitBitmapRect4BitTo8Bit
	.type	 BlitBitmapRect4BitTo8Bit,function
	.thumb_func
BlitBitmapRect4BitTo8Bit:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x3c
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldr	r0, [sp, #0x5c]
	ldr	r1, [sp, #0x60]
	ldr	r5, [sp, #0x64]
	ldr	r4, [sp, #0x68]
	ldr	r6, [sp, #0x6c]
	ldr	r7, [sp, #0x70]
	mov	r8, r7
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r2, [sp, #0x8]
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0xc]
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp, #0x10]
	mov	r0, r8
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
	lsl	r0, r6, #0x1c
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x28]
	ldr	r1, [sp, #0x4]
	ldrh	r0, [r1, #0x4]
	ldr	r2, [sp, #0xc]
	sub	r0, r0, r2
	ldr	r1, [sp, #0x8]
	add	r1, r5, r1
	str	r1, [sp, #0x18]
	cmp	r0, r5
	bge	.L48	@cond_branch
	ldr	r2, [sp, #0x8]
	add	r0, r0, r2
	str	r0, [sp, #0x18]
.L48:
	ldr	r5, [sp, #0x4]
	ldrh	r1, [r5, #0x6]
	sub	r0, r1, r7
	cmp	r0, r4
	bge	.L50	@cond_branch
	add	r0, r3, r1
	sub	r0, r0, r7
	str	r0, [sp, #0x1c]
	b	.L51
.L50:
	add	r4, r3, r4
	str	r4, [sp, #0x1c]
.L51:
	ldr	r0, [sp]
	ldrh	r1, [r0, #0x4]
	mov	r2, #0x7
	add	r0, r1, #0
	and	r0, r0, r2
	add	r1, r1, r0
	asr	r1, r1, #0x3
	str	r1, [sp, #0x20]
	ldr	r5, [sp, #0x4]
	ldrh	r1, [r5, #0x4]
	add	r0, r1, #0
	and	r0, r0, r2
	add	r1, r1, r0
	asr	r1, r1, #0x3
	str	r1, [sp, #0x24]
	ldr	r0, [sp, #0x10]
	cmp	r0, #0xff
	bne	.L52	@cond_branch
	add	r2, r3, #0
	add	r5, r7, #0
	ldr	r1, [sp, #0x1c]
	cmp	r2, r1
	blt	.LCB556
	b	.L65	@long jump
.LCB556:
	ldr	r3, [sp, #0x8]
	lsr	r3, r3, #0x1
	str	r3, [sp, #0x2c]
	mov	r0, #0x3
	and	r3, r3, r0
	str	r3, [sp, #0x2c]
	ldr	r7, [sp, #0x8]
	lsr	r0, r7, #0x3
	lsl	r0, r0, #0x5
	str	r0, [sp, #0x30]
.L56:
	ldr	r0, [sp]
	ldr	r1, [r0]
	ldr	r3, [sp, #0x2c]
	add	r1, r1, r3
	ldr	r7, [sp, #0x30]
	add	r1, r1, r7
	asr	r0, r2, #0x3
	ldr	r3, [sp, #0x20]
	mul	r0, r0, r3
	lsl	r0, r0, #0x5
	mov	r8, r0
	add	r1, r1, r8
	lsl	r0, r2, #0x1d
	lsr	r7, r0, #0x1b
	add	r6, r1, r7
	ldr	r3, [sp, #0x8]
	ldr	r4, [sp, #0xc]
	add	r2, r2, #0x1
	mov	sl, r2
	add	r0, r5, #0x1
	str	r0, [sp, #0x38]
	ldr	r1, [sp, #0x18]
	cmp	r3, r1
	bge	.L55	@cond_branch
	asr	r0, r5, #0x3
	ldr	r2, [sp, #0x24]
	mul	r0, r0, r2
	lsl	r0, r0, #0x6
	mov	ip, r0
	lsl	r0, r5, #0x1d
	lsr	r0, r0, #0x1a
	mov	r9, r0
.L60:
	mov	r0, #0x7
	and	r0, r0, r4
	ldr	r5, [sp, #0x4]
	ldr	r1, [r5]
	add	r1, r1, r0
	asr	r0, r4, #0x3
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r1, r1, ip
	mov	r0, r9
	add	r5, r1, r0
	mov	r0, #0x1
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L61	@cond_branch
	ldrb	r0, [r6]
	lsr	r0, r0, #0x4
	b	.L80
.L61:
	asr	r2, r3, #0x1
	mov	r0, #0x3
	and	r2, r2, r0
	ldr	r0, [sp]
	ldr	r1, [r0]
	add	r1, r1, r2
	asr	r0, r3, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, r8
	add	r6, r1, r7
	ldrb	r1, [r6]
	mov	r0, #0xf
	and	r0, r0, r1
.L80:
	ldr	r1, [sp, #0x14]
	add	r0, r1, r0
	strb	r0, [r5]
	add	r3, r3, #0x1
	add	r4, r4, #0x1
	ldr	r2, [sp, #0x18]
	cmp	r3, r2
	blt	.L60	@cond_branch
.L55:
	mov	r2, sl
	ldr	r5, [sp, #0x38]
	ldr	r3, [sp, #0x1c]
	cmp	r2, r3
	blt	.L56	@cond_branch
	b	.L65
.L52:
	add	r2, r3, #0
	add	r5, r7, #0
	ldr	r7, [sp, #0x1c]
	cmp	r2, r7
	bge	.L65	@cond_branch
	ldr	r0, [sp, #0x8]
	lsr	r0, r0, #0x1
	str	r0, [sp, #0x34]
	mov	r0, #0x3
	ldr	r1, [sp, #0x34]
	and	r1, r1, r0
	str	r1, [sp, #0x34]
.L69:
	ldr	r3, [sp]
	ldr	r1, [r3]
	ldr	r7, [sp, #0x34]
	add	r1, r1, r7
	ldr	r3, [sp, #0x8]
	lsr	r0, r3, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	asr	r0, r2, #0x3
	ldr	r7, [sp, #0x20]
	mul	r0, r0, r7
	lsl	r0, r0, #0x5
	mov	r8, r0
	add	r1, r1, r8
	lsl	r0, r2, #0x1d
	lsr	r7, r0, #0x1b
	add	r6, r1, r7
	ldr	r4, [sp, #0xc]
	add	r2, r2, #0x1
	mov	sl, r2
	add	r0, r5, #0x1
	str	r0, [sp, #0x38]
	ldr	r1, [sp, #0x18]
	cmp	r3, r1
	bge	.L68	@cond_branch
	asr	r0, r5, #0x3
	ldr	r2, [sp, #0x24]
	mul	r0, r0, r2
	lsl	r0, r0, #0x6
	mov	r9, r0
	lsl	r0, r5, #0x1d
	lsr	r0, r0, #0x1a
	mov	ip, r0
.L73:
	mov	r0, #0x1
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L74	@cond_branch
	ldrb	r2, [r6]
	mov	r0, #0xf0
	and	r0, r0, r2
	ldr	r5, [sp, #0x28]
	cmp	r0, r5
	beq	.L72	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x7
	and	r0, r0, r1
	ldr	r5, [sp, #0x4]
	ldr	r1, [r5]
	add	r1, r1, r0
	asr	r0, r4, #0x3
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r1, r1, r9
	mov	r0, ip
	add	r5, r1, r0
	lsr	r0, r2, #0x4
	ldr	r1, [sp, #0x14]
	add	r0, r1, r0
	b	.L81
.L74:
	asr	r2, r3, #0x1
	mov	r0, #0x3
	and	r2, r2, r0
	ldr	r5, [sp]
	ldr	r1, [r5]
	add	r1, r1, r2
	asr	r0, r3, #0x3
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	add	r1, r1, r8
	add	r6, r1, r7
	ldrb	r0, [r6]
	mov	r2, #0xf
	and	r2, r2, r0
	ldr	r0, [sp, #0x10]
	cmp	r2, r0
	beq	.L72	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x7
	and	r0, r0, r1
	ldr	r5, [sp, #0x4]
	ldr	r1, [r5]
	add	r1, r1, r0
	asr	r0, r4, #0x3
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r1, r1, r9
	mov	r0, ip
	add	r5, r1, r0
	ldr	r1, [sp, #0x14]
	add	r0, r1, r2
.L81:
	strb	r0, [r5]
.L72:
	add	r3, r3, #0x1
	add	r4, r4, #0x1
	ldr	r2, [sp, #0x18]
	cmp	r3, r2
	blt	.L73	@cond_branch
.L68:
	mov	r2, sl
	ldr	r5, [sp, #0x38]
	ldr	r3, [sp, #0x1c]
	cmp	r2, r3
	blt	.L69	@cond_branch
.L65:
	add	sp, sp, #0x3c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 BlitBitmapRect4BitTo8Bit,.Lfe4-BlitBitmapRect4BitTo8Bit
	.align	2, 0
	.globl	FillBitmapRect8Bit
	.type	 FillBitmapRect8Bit,function
	.thumb_func
FillBitmapRect8Bit:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r8, r0
	ldr	r0, [sp, #0x28]
	ldr	r4, [sp, #0x2c]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	sl, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r6, r2, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r9, r4
	add	r5, r1, r3
	mov	r3, r8
	ldrh	r1, [r3, #0x4]
	cmp	r5, r1
	ble	.L83	@cond_branch
	add	r5, r1, #0
.L83:
	add	r7, r2, r0
	mov	r2, r8
	ldrh	r0, [r2, #0x6]
	cmp	r7, r0
	ble	.L84	@cond_branch
	add	r7, r0, #0
.L84:
	mov	r0, #0x7
	and	r0, r0, r1
	add	r0, r1, r0
	asr	r0, r0, #0x3
	str	r0, [sp]
	add	r1, r6, #0
	cmp	r1, r7
	bge	.L86	@cond_branch
.L88:
	mov	r3, sl
	add	r6, r1, #0x1
	str	r6, [sp, #0x4]
	cmp	r3, r5
	bge	.L87	@cond_branch
	mov	r0, #0x7
	mov	ip, r0
	asr	r0, r1, #0x3
	ldr	r2, [sp]
	mul	r0, r0, r2
	lsl	r4, r0, #0x6
	lsl	r0, r1, #0x1d
	lsr	r2, r0, #0x1a
.L92:
	add	r0, r3, #0
	mov	r6, ip
	and	r0, r0, r6
	mov	r6, r8
	ldr	r1, [r6]
	add	r1, r1, r0
	asr	r0, r3, #0x3
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r1, r1, r4
	add	r1, r1, r2
	mov	r0, r9
	strb	r0, [r1]
	add	r3, r3, #0x1
	cmp	r3, r5
	blt	.L92	@cond_branch
.L87:
	ldr	r1, [sp, #0x4]
	cmp	r1, r7
	blt	.L88	@cond_branch
.L86:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 FillBitmapRect8Bit,.Lfe5-FillBitmapRect8Bit
.text
	.align	2, 0

