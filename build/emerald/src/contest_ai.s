@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sContestAICmdTable,object
sContestAICmdTable:
	.word	ContestAICmd_score
	.word	ContestAICmd_get_appeal_num
	.word	ContestAICmd_if_appeal_num_less_than
	.word	ContestAICmd_if_appeal_num_more_than
	.word	ContestAICmd_if_appeal_num_eq
	.word	ContestAICmd_if_appeal_num_not_eq
	.word	ContestAICmd_get_excitement
	.word	ContestAICmd_if_excitement_less_than
	.word	ContestAICmd_if_excitement_more_than
	.word	ContestAICmd_if_excitement_eq
	.word	ContestAICmd_if_excitement_not_eq
	.word	ContestAICmd_get_user_order
	.word	ContestAICmd_if_user_order_less_than
	.word	ContestAICmd_if_user_order_more_than
	.word	ContestAICmd_if_user_order_eq
	.word	ContestAICmd_if_user_order_not_eq
	.word	ContestAICmd_get_user_condition
	.word	ContestAICmd_if_user_condition_less_than
	.word	ContestAICmd_if_user_condition_more_than
	.word	ContestAICmd_if_user_condition_eq
	.word	ContestAICmd_if_user_condition_not_eq
	.word	ContestAICmd_get_points
	.word	ContestAICmd_if_points_less_than
	.word	ContestAICmd_if_points_more_than
	.word	ContestAICmd_if_points_eq
	.word	ContestAICmd_if_points_not_eq
	.word	ContestAICmd_get_preliminary_points
	.word	ContestAICmd_if_preliminary_points_less_than
	.word	ContestAICmd_if_preliminary_points_more_than
	.word	ContestAICmd_if_preliminary_points_eq
	.word	ContestAICmd_if_preliminary_points_not_eq
	.word	ContestAICmd_get_contest_type
	.word	ContestAICmd_if_contest_type_eq
	.word	ContestAICmd_if_contest_type_not_eq
	.word	ContestAICmd_get_move_excitement
	.word	ContestAICmd_if_move_excitement_less_than
	.word	ContestAICmd_if_move_excitement_more_than
	.word	ContestAICmd_if_move_excitement_eq
	.word	ContestAICmd_if_move_excitement_not_eq
	.word	ContestAICmd_get_move_effect
	.word	ContestAICmd_if_move_effect_eq
	.word	ContestAICmd_if_move_effect_not_eq
	.word	ContestAICmd_get_move_effect_type
	.word	ContestAICmd_if_move_effect_type_eq
	.word	ContestAICmd_if_move_effect_type_not_eq
	.word	ContestAICmd_check_most_appealing_move
	.word	ContestAICmd_if_most_appealing_move
	.word	ContestAICmd_check_most_jamming_move
	.word	ContestAICmd_if_most_jamming_move
	.word	ContestAICmd_get_num_move_hearts
	.word	ContestAICmd_if_num_move_hearts_less_than
	.word	ContestAICmd_if_num_move_hearts_more_than
	.word	ContestAICmd_if_num_move_hearts_eq
	.word	ContestAICmd_if_num_move_hearts_not_eq
	.word	ContestAICmd_get_num_move_jam_hearts
	.word	ContestAICmd_if_num_move_jam_hearts_less_than
	.word	ContestAICmd_if_num_move_jam_hearts_more_than
	.word	ContestAICmd_if_num_move_jam_hearts_eq
	.word	ContestAICmd_if_num_move_jam_hearts_not_eq
	.word	ContestAICmd_get_move_used_count
	.word	ContestAICmd_if_most_used_count_less_than
	.word	ContestAICmd_if_most_used_count_more_than
	.word	ContestAICmd_if_most_used_count_eq
	.word	ContestAICmd_if_most_used_count_not_eq
	.word	ContestAICmd_check_combo_starter
	.word	ContestAICmd_if_combo_starter
	.word	ContestAICmd_if_not_combo_starter
	.word	ContestAICmd_check_combo_finisher
	.word	ContestAICmd_if_combo_finisher
	.word	ContestAICmd_if_not_combo_finisher
	.word	ContestAICmd_check_would_finish_combo
	.word	ContestAICmd_if_would_finish_combo
	.word	ContestAICmd_if_would_not_finish_combo
	.word	ContestAICmd_get_condition
	.word	ContestAICmd_if_condition_less_than
	.word	ContestAICmd_if_condition_more_than
	.word	ContestAICmd_if_condition_eq
	.word	ContestAICmd_if_condition_not_eq
	.word	ContestAICmd_get_used_combo_starter
	.word	ContestAICmd_if_used_combo_starter_less_than
	.word	ContestAICmd_if_used_combo_starter_more_than
	.word	ContestAICmd_if_used_combo_starter_eq
	.word	ContestAICmd_if_used_combo_starter_not_eq
	.word	ContestAICmd_check_can_participate
	.word	ContestAICmd_if_can_participate
	.word	ContestAICmd_if_cannot_participate
	.word	ContestAICmd_get_completed_combo
	.word	ContestAICmd_if_completed_combo
	.word	ContestAICmd_if_not_completed_combo
	.word	ContestAICmd_get_points_diff
	.word	ContestAICmd_if_points_more_than_mon
	.word	ContestAICmd_if_points_less_than_mon
	.word	ContestAICmd_if_points_eq_mon
	.word	ContestAICmd_if_points_not_eq_mon
	.word	ContestAICmd_get_preliminary_points_diff
	.word	ContestAICmd_if_preliminary_points_more_than_mon
	.word	ContestAICmd_if_preliminary_points_less_than_mon
	.word	ContestAICmd_if_preliminary_points_eq_mon
	.word	ContestAICmd_if_preliminary_points_not_eq_mon
	.word	ContestAICmd_get_used_moves_effect
	.word	ContestAICmd_if_used_moves_effect_less_than
	.word	ContestAICmd_if_used_moves_effect_more_than
	.word	ContestAICmd_if_used_moves_effect_eq
	.word	ContestAICmd_if_used_moves_effect_not_eq
	.word	ContestAICmd_get_used_moves_excitement
	.word	ContestAICmd_if_used_moves_excitement_less_than
	.word	ContestAICmd_if_used_moves_excitement_more_than
	.word	ContestAICmd_if_used_moves_excitement_eq
	.word	ContestAICmd_if_used_moves_excitement_not_eq
	.word	ContestAICmd_get_used_moves_effect_type
	.word	ContestAICmd_if_used_moves_effect_type_eq
	.word	ContestAICmd_if_used_moves_effect_type_not_eq
	.word	ContestAICmd_save_result
	.word	ContestAICmd_setvar
	.word	ContestAICmd_add
	.word	ContestAICmd_addvar
	.word	ContestAICmd_addvar_duplicate
	.word	ContestAICmd_if_less_than
	.word	ContestAICmd_if_greater_than
	.word	ContestAICmd_if_eq
	.word	ContestAICmd_if_not_eq
	.word	ContestAICmd_if_less_than_var
	.word	ContestAICmd_if_greater_than_var
	.word	ContestAICmd_if_eq_var
	.word	ContestAICmd_if_not_eq_var
	.word	ContestAICmd_if_random_less_than
	.word	ContestAICmd_if_random_greater_than
	.word	ContestAICmd_goto
	.word	ContestAICmd_call
	.word	ContestAICmd_end
	.word	ContestAICmd_check_user_has_exciting_move
	.word	ContestAICmd_if_user_has_exciting_move
	.word	ContestAICmd_if_user_doesnt_have_exciting_move
	.word	ContestAICmd_check_user_has_move
	.word	ContestAICmd_if_user_has_move
	.word	ContestAICmd_if_user_doesnt_have_move
	.size	 sContestAICmdTable,544
.text
	.align	2, 0
	.globl	ContestAI_ResetAI
	.type	 ContestAI_ResetAI,function
	.thumb_func
ContestAI_ResetAI:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L8
	ldr	r0, [r4]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x0
	mov	r2, #0x44
	bl	memset
	mov	r1, #0x0
	mov	r3, #0x64
	add	r2, r4, #0
.L6:
	ldr	r0, [r4]
	ldr	r0, [r0, #0xc]
	add	r0, r0, #0x5
	add	r0, r0, r1
	strb	r3, [r0]
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L6	@cond_branch
	ldr	r0, [r2]
	ldr	r0, [r0, #0xc]
	add	r0, r0, #0x41
	mov	r1, #0x0
	strb	r5, [r0]
	ldr	r0, [r2]
	ldr	r0, [r0, #0xc]
	add	r0, r0, #0x40
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r2, [r0, #0xc]
	ldr	r1, .L8+0x4
	add	r0, r2, #0
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [r2, #0x14]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gContestResources
	.word	gContestMons
.Lfe1:
	.size	 ContestAI_ResetAI,.Lfe1-ContestAI_ResetAI
	.align	2, 0
	.globl	ContestAI_GetActionToUse
	.type	 ContestAI_GetActionToUse,function
	.thumb_func
ContestAI_GetActionToUse:
	push	{r4, r5, r6, lr}
	ldr	r1, .L27
	ldr	r0, [r1]
	ldr	r0, [r0, #0xc]
	ldr	r0, [r0, #0x14]
	cmp	r0, #0
	beq	.L12	@cond_branch
	add	r4, r1, #0
	mov	r5, #0x0
.L13:
	ldr	r0, [r4]
	ldr	r2, [r0, #0xc]
	ldr	r0, [r2, #0x14]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L14	@cond_branch
	strb	r5, [r2]
	bl	ContestAI_DoAIProcessing
.L14:
	ldr	r0, [r4]
	ldr	r1, [r0, #0xc]
	ldr	r0, [r1, #0x14]
	lsr	r0, r0, #0x1
	str	r0, [r1, #0x14]
	ldrb	r0, [r1, #0x10]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x10]
	ldr	r0, [r4]
	ldr	r0, [r0, #0xc]
	strb	r5, [r0, #0x4]
	ldr	r0, [r4]
	ldr	r0, [r0, #0xc]
	ldr	r0, [r0, #0x14]
	cmp	r0, #0
	bne	.L13	@cond_branch
.L12:
	mov	r6, #0x3
.L18:
	bl	Random
	add	r5, r0, #0
	and	r5, r5, r6
	ldr	r4, .L27
	ldr	r0, [r4]
	ldr	r1, [r0, #0xc]
	add	r0, r1, #0x5
	add	r0, r0, r5
	ldrb	r3, [r0]
	mov	r2, #0x0
	ldrb	r1, [r1, #0x5]
	cmp	r3, r1
	bcc	.L20	@cond_branch
	add	r1, r4, #0
.L21:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L20	@cond_branch
	ldr	r0, [r1]
	ldr	r0, [r0, #0xc]
	add	r0, r0, #0x5
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r3, r0
	bcs	.L21	@cond_branch
.L20:
	cmp	r2, #0x4
	bne	.L18	@cond_branch
	add	r0, r5, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L28:
	.align	2, 0
.L27:
	.word	gContestResources
.Lfe2:
	.size	 ContestAI_GetActionToUse,.Lfe2-ContestAI_GetActionToUse
	.align	2, 0
	.type	 ContestAI_DoAIProcessing,function
	.thumb_func
ContestAI_DoAIProcessing:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r5, .L48
	ldr	r0, [r5]
	ldr	r0, [r0, #0xc]
	ldrb	r0, [r0]
	add	r4, r5, #0
	cmp	r0, #0x2
	beq	.L31	@cond_branch
	add	r7, r5, #0
	ldr	r6, .L48+0x4
	ldr	r0, .L48+0x8
	mov	r8, r0
.L32:
	ldr	r0, [r7]
	ldr	r2, [r0, #0xc]
	ldrb	r0, [r2]
	cmp	r0, #0x1
	beq	.L38	@cond_branch
	cmp	r0, #0x1
	bgt	.L30	@cond_branch
	cmp	r0, #0
	bne	.L30	@cond_branch
	ldr	r1, .L48+0xc
	ldrb	r0, [r2, #0x10]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [r6]
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x1
	add	r0, r2, #0
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r1, r1, r8
	ldrh	r1, [r1]
	add	r0, r1, #0
	cmp	r0, #0
	bne	.L36	@cond_branch
	strh	r0, [r2, #0x2]
	b	.L37
.L49:
	.align	2, 0
.L48:
	.word	gContestResources
	.word	gAIScriptPtr
	.word	gContestMons+0x1e
	.word	gContestAI_ScriptsTable
.L36:
	strh	r1, [r2, #0x2]
.L37:
	ldr	r0, [r4]
	ldr	r1, [r0, #0xc]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L30
.L38:
	ldrh	r1, [r2, #0x2]
	cmp	r1, #0
	beq	.L39	@cond_branch
	ldr	r1, .L50
	ldr	r0, [r6]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	b	.L40
.L51:
	.align	2, 0
.L50:
	.word	sContestAICmdTable
.L39:
	add	r0, r2, #0x5
	ldrb	r2, [r2, #0x4]
	add	r0, r0, r2
	strb	r1, [r0]
	ldr	r0, [r7]
	ldr	r2, [r0, #0xc]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
.L40:
	ldr	r2, .L52
	ldr	r0, [r2]
	ldr	r3, [r0, #0xc]
	ldrb	r1, [r3, #0x9]
	mov	r0, #0x1
	and	r0, r0, r1
	add	r4, r2, #0
	cmp	r0, #0
	beq	.L30	@cond_branch
	ldrb	r0, [r3, #0x4]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strb	r0, [r3, #0x4]
	ldr	r0, [r4]
	ldr	r1, [r0, #0xc]
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0x3
	bhi	.L42	@cond_branch
	strb	r2, [r1]
	b	.L43
.L53:
	.align	2, 0
.L52:
	.word	gContestResources
.L42:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L43:
	ldr	r0, [r4]
	ldr	r2, [r0, #0xc]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0xfe
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
.L30:
	ldr	r0, [r5]
	ldr	r0, [r0, #0xc]
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L32	@cond_branch
.L31:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 ContestAI_DoAIProcessing,.Lfe3-ContestAI_DoAIProcessing
	.align	2, 0
	.type	 GetContestantIdByTurn,function
	.thumb_func
GetContestantIdByTurn:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	ldr	r3, .L62
	ldr	r0, [r3]
	ldr	r0, [r0, #0x8]
	b	.L61
.L63:
	.align	2, 0
.L62:
	.word	gContestResources
.L57:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	bgt	.L56	@cond_branch
	ldr	r0, [r3]
	ldr	r0, [r0, #0x8]
	add	r0, r0, r1
.L61:
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L57	@cond_branch
.L56:
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 GetContestantIdByTurn,.Lfe4-GetContestantIdByTurn
	.align	2, 0
	.type	 ContestAICmd_score,function
	.thumb_func
ContestAICmd_score:
	push	{r4, lr}
	ldr	r3, .L68
	ldr	r0, [r3]
	ldr	r0, [r0, #0xc]
	add	r1, r0, #0x5
	ldrb	r0, [r0, #0x4]
	add	r1, r1, r0
	ldr	r2, .L68+0x4
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L65	@cond_branch
	mov	r4, #0xff
	b	.L66
.L69:
	.align	2, 0
.L68:
	.word	gContestResources
	.word	gAIScriptPtr
.L65:
	cmp	r0, #0
	bge	.L66	@cond_branch
	mov	r4, #0x0
.L66:
	ldr	r0, [r3]
	ldr	r1, [r0, #0xc]
	add	r0, r1, #0x5
	ldrb	r1, [r1, #0x4]
	add	r0, r0, r1
	strb	r4, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0x2
	str	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 ContestAICmd_score,.Lfe5-ContestAICmd_score
	.align	2, 0
	.type	 ContestAICmd_get_appeal_num,function
	.thumb_func
ContestAICmd_get_appeal_num:
	ldr	r0, .L71
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	strh	r0, [r1, #0x18]
	ldr	r1, .L71+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L72:
	.align	2, 0
.L71:
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe6:
	.size	 ContestAICmd_get_appeal_num,.Lfe6-ContestAICmd_get_appeal_num
	.align	2, 0
	.type	 ContestAICmd_if_appeal_num_less_than,function
	.thumb_func
ContestAICmd_if_appeal_num_less_than:
	push	{lr}
	bl	ContestAICmd_get_appeal_num
	ldr	r0, .L76
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L76+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bge	.L74	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L75
.L77:
	.align	2, 0
.L76:
	.word	gContestResources
	.word	gAIScriptPtr
.L74:
	add	r0, r2, #0x5
	str	r0, [r3]
.L75:
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 ContestAICmd_if_appeal_num_less_than,.Lfe7-ContestAICmd_if_appeal_num_less_than
	.align	2, 0
	.type	 ContestAICmd_if_appeal_num_more_than,function
	.thumb_func
ContestAICmd_if_appeal_num_more_than:
	push	{lr}
	bl	ContestAICmd_get_appeal_num
	ldr	r0, .L81
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L81+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	ble	.L79	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L80
.L82:
	.align	2, 0
.L81:
	.word	gContestResources
	.word	gAIScriptPtr
.L79:
	add	r0, r2, #0x5
	str	r0, [r3]
.L80:
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 ContestAICmd_if_appeal_num_more_than,.Lfe8-ContestAICmd_if_appeal_num_more_than
	.align	2, 0
	.type	 ContestAICmd_if_appeal_num_eq,function
	.thumb_func
ContestAICmd_if_appeal_num_eq:
	push	{lr}
	bl	ContestAICmd_get_appeal_num
	ldr	r0, .L86
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L86+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L84	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L85
.L87:
	.align	2, 0
.L86:
	.word	gContestResources
	.word	gAIScriptPtr
.L84:
	add	r0, r2, #0x5
	str	r0, [r3]
.L85:
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 ContestAICmd_if_appeal_num_eq,.Lfe9-ContestAICmd_if_appeal_num_eq
	.align	2, 0
	.type	 ContestAICmd_if_appeal_num_not_eq,function
	.thumb_func
ContestAICmd_if_appeal_num_not_eq:
	push	{lr}
	bl	ContestAICmd_get_appeal_num
	ldr	r0, .L91
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L91+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L89	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L90
.L92:
	.align	2, 0
.L91:
	.word	gContestResources
	.word	gAIScriptPtr
.L89:
	add	r0, r2, #0x5
	str	r0, [r3]
.L90:
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 ContestAICmd_if_appeal_num_not_eq,.Lfe10-ContestAICmd_if_appeal_num_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_excitement,function
	.thumb_func
ContestAICmd_get_excitement:
	ldr	r0, .L94
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	strh	r0, [r1, #0x18]
	ldr	r1, .L94+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L95:
	.align	2, 0
.L94:
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe11:
	.size	 ContestAICmd_get_excitement,.Lfe11-ContestAICmd_get_excitement
	.align	2, 0
	.type	 ContestAICmd_if_excitement_less_than,function
	.thumb_func
ContestAICmd_if_excitement_less_than:
	push	{lr}
	bl	ContestAICmd_get_excitement
	ldr	r0, .L99
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L99+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bge	.L97	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L98
.L100:
	.align	2, 0
.L99:
	.word	gContestResources
	.word	gAIScriptPtr
.L97:
	add	r0, r2, #0x5
	str	r0, [r3]
.L98:
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 ContestAICmd_if_excitement_less_than,.Lfe12-ContestAICmd_if_excitement_less_than
	.align	2, 0
	.type	 ContestAICmd_if_excitement_more_than,function
	.thumb_func
ContestAICmd_if_excitement_more_than:
	push	{lr}
	bl	ContestAICmd_get_excitement
	ldr	r0, .L104
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L104+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	ble	.L102	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L103
.L105:
	.align	2, 0
.L104:
	.word	gContestResources
	.word	gAIScriptPtr
.L102:
	add	r0, r2, #0x5
	str	r0, [r3]
.L103:
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 ContestAICmd_if_excitement_more_than,.Lfe13-ContestAICmd_if_excitement_more_than
	.align	2, 0
	.type	 ContestAICmd_if_excitement_eq,function
	.thumb_func
ContestAICmd_if_excitement_eq:
	push	{lr}
	bl	ContestAICmd_get_excitement
	ldr	r0, .L109
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L109+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L107	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L108
.L110:
	.align	2, 0
.L109:
	.word	gContestResources
	.word	gAIScriptPtr
.L107:
	add	r0, r2, #0x5
	str	r0, [r3]
.L108:
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 ContestAICmd_if_excitement_eq,.Lfe14-ContestAICmd_if_excitement_eq
	.align	2, 0
	.type	 ContestAICmd_if_excitement_not_eq,function
	.thumb_func
ContestAICmd_if_excitement_not_eq:
	push	{lr}
	bl	ContestAICmd_get_excitement
	ldr	r0, .L114
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L114+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L112	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L113
.L115:
	.align	2, 0
.L114:
	.word	gContestResources
	.word	gAIScriptPtr
.L112:
	add	r0, r2, #0x5
	str	r0, [r3]
.L113:
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 ContestAICmd_if_excitement_not_eq,.Lfe15-ContestAICmd_if_excitement_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_user_order,function
	.thumb_func
ContestAICmd_get_user_order:
	ldr	r0, .L117
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r0, [r0, #0x8]
	add	r1, r2, #0
	add	r1, r1, #0x41
	ldrb	r1, [r1]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r2, #0x18]
	ldr	r1, .L117+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L118:
	.align	2, 0
.L117:
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe16:
	.size	 ContestAICmd_get_user_order,.Lfe16-ContestAICmd_get_user_order
	.align	2, 0
	.type	 ContestAICmd_if_user_order_less_than,function
	.thumb_func
ContestAICmd_if_user_order_less_than:
	push	{lr}
	bl	ContestAICmd_get_user_order
	ldr	r0, .L122
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L122+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bge	.L120	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L121
.L123:
	.align	2, 0
.L122:
	.word	gContestResources
	.word	gAIScriptPtr
.L120:
	add	r0, r2, #0x5
	str	r0, [r3]
.L121:
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 ContestAICmd_if_user_order_less_than,.Lfe17-ContestAICmd_if_user_order_less_than
	.align	2, 0
	.type	 ContestAICmd_if_user_order_more_than,function
	.thumb_func
ContestAICmd_if_user_order_more_than:
	push	{lr}
	bl	ContestAICmd_get_user_order
	ldr	r0, .L127
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L127+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	ble	.L125	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L126
.L128:
	.align	2, 0
.L127:
	.word	gContestResources
	.word	gAIScriptPtr
.L125:
	add	r0, r2, #0x5
	str	r0, [r3]
.L126:
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 ContestAICmd_if_user_order_more_than,.Lfe18-ContestAICmd_if_user_order_more_than
	.align	2, 0
	.type	 ContestAICmd_if_user_order_eq,function
	.thumb_func
ContestAICmd_if_user_order_eq:
	push	{lr}
	bl	ContestAICmd_get_user_order
	ldr	r0, .L132
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L132+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L130	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L131
.L133:
	.align	2, 0
.L132:
	.word	gContestResources
	.word	gAIScriptPtr
.L130:
	add	r0, r2, #0x5
	str	r0, [r3]
.L131:
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 ContestAICmd_if_user_order_eq,.Lfe19-ContestAICmd_if_user_order_eq
	.align	2, 0
	.type	 ContestAICmd_if_user_order_not_eq,function
	.thumb_func
ContestAICmd_if_user_order_not_eq:
	push	{lr}
	bl	ContestAICmd_get_user_order
	ldr	r0, .L137
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L137+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L135	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L136
.L138:
	.align	2, 0
.L137:
	.word	gContestResources
	.word	gAIScriptPtr
.L135:
	add	r0, r2, #0x5
	str	r0, [r3]
.L136:
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 ContestAICmd_if_user_order_not_eq,.Lfe20-ContestAICmd_if_user_order_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_user_condition,function
	.thumb_func
ContestAICmd_get_user_condition:
	push	{r4, lr}
	ldr	r0, .L140
	ldr	r0, [r0]
	ldr	r4, [r0, #0xc]
	add	r1, r4, #0
	add	r1, r1, #0x41
	ldrb	r1, [r1]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0xd]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x18]
	ldr	r1, .L140+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L141:
	.align	2, 0
.L140:
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe21:
	.size	 ContestAICmd_get_user_condition,.Lfe21-ContestAICmd_get_user_condition
	.align	2, 0
	.type	 ContestAICmd_if_user_condition_less_than,function
	.thumb_func
ContestAICmd_if_user_condition_less_than:
	push	{lr}
	bl	ContestAICmd_get_user_condition
	ldr	r0, .L145
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L145+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bge	.L143	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L144
.L146:
	.align	2, 0
.L145:
	.word	gContestResources
	.word	gAIScriptPtr
.L143:
	add	r0, r2, #0x5
	str	r0, [r3]
.L144:
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 ContestAICmd_if_user_condition_less_than,.Lfe22-ContestAICmd_if_user_condition_less_than
	.align	2, 0
	.type	 ContestAICmd_if_user_condition_more_than,function
	.thumb_func
ContestAICmd_if_user_condition_more_than:
	push	{lr}
	bl	ContestAICmd_get_user_condition
	ldr	r0, .L150
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L150+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	ble	.L148	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L149
.L151:
	.align	2, 0
.L150:
	.word	gContestResources
	.word	gAIScriptPtr
.L148:
	add	r0, r2, #0x5
	str	r0, [r3]
.L149:
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 ContestAICmd_if_user_condition_more_than,.Lfe23-ContestAICmd_if_user_condition_more_than
	.align	2, 0
	.type	 ContestAICmd_if_user_condition_eq,function
	.thumb_func
ContestAICmd_if_user_condition_eq:
	push	{lr}
	bl	ContestAICmd_get_user_condition
	ldr	r0, .L155
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L155+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L153	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L154
.L156:
	.align	2, 0
.L155:
	.word	gContestResources
	.word	gAIScriptPtr
.L153:
	add	r0, r2, #0x5
	str	r0, [r3]
.L154:
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 ContestAICmd_if_user_condition_eq,.Lfe24-ContestAICmd_if_user_condition_eq
	.align	2, 0
	.type	 ContestAICmd_if_user_condition_not_eq,function
	.thumb_func
ContestAICmd_if_user_condition_not_eq:
	push	{lr}
	bl	ContestAICmd_get_user_condition
	ldr	r0, .L160
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L160+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L158	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L159
.L161:
	.align	2, 0
.L160:
	.word	gContestResources
	.word	gAIScriptPtr
.L158:
	add	r0, r2, #0x5
	str	r0, [r3]
.L159:
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 ContestAICmd_if_user_condition_not_eq,.Lfe25-ContestAICmd_if_user_condition_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_points,function
	.thumb_func
ContestAICmd_get_points:
	ldr	r0, .L163
	ldr	r0, [r0]
	ldr	r3, [r0, #0xc]
	add	r1, r3, #0
	add	r1, r1, #0x41
	ldrb	r1, [r1]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x4]
	strh	r0, [r3, #0x18]
	ldr	r1, .L163+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L164:
	.align	2, 0
.L163:
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe26:
	.size	 ContestAICmd_get_points,.Lfe26-ContestAICmd_get_points
	.align	2, 0
	.type	 ContestAICmd_if_points_less_than,function
	.thumb_func
ContestAICmd_if_points_less_than:
	push	{r4, r5, lr}
	bl	ContestAICmd_get_points
	ldr	r0, .L168
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L168+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r5, #0x18
	ldrsh	r0, [r2, r5]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	bge	.L166	@cond_branch
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L167
.L169:
	.align	2, 0
.L168:
	.word	gContestResources
	.word	gAIScriptPtr
.L166:
	add	r0, r3, #0x6
	str	r0, [r4]
.L167:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 ContestAICmd_if_points_less_than,.Lfe27-ContestAICmd_if_points_less_than
	.align	2, 0
	.type	 ContestAICmd_if_points_more_than,function
	.thumb_func
ContestAICmd_if_points_more_than:
	push	{r4, r5, lr}
	bl	ContestAICmd_get_points
	ldr	r0, .L173
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L173+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r5, #0x18
	ldrsh	r0, [r2, r5]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	ble	.L171	@cond_branch
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L172
.L174:
	.align	2, 0
.L173:
	.word	gContestResources
	.word	gAIScriptPtr
.L171:
	add	r0, r3, #0x6
	str	r0, [r4]
.L172:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 ContestAICmd_if_points_more_than,.Lfe28-ContestAICmd_if_points_more_than
	.align	2, 0
	.type	 ContestAICmd_if_points_eq,function
	.thumb_func
ContestAICmd_if_points_eq:
	push	{r4, r5, lr}
	bl	ContestAICmd_get_points
	ldr	r0, .L178
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L178+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r5, #0x18
	ldrsh	r0, [r2, r5]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	bne	.L176	@cond_branch
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L177
.L179:
	.align	2, 0
.L178:
	.word	gContestResources
	.word	gAIScriptPtr
.L176:
	add	r0, r3, #0x6
	str	r0, [r4]
.L177:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 ContestAICmd_if_points_eq,.Lfe29-ContestAICmd_if_points_eq
	.align	2, 0
	.type	 ContestAICmd_if_points_not_eq,function
	.thumb_func
ContestAICmd_if_points_not_eq:
	push	{r4, r5, lr}
	bl	ContestAICmd_get_points
	ldr	r0, .L183
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L183+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r5, #0x18
	ldrsh	r0, [r2, r5]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	beq	.L181	@cond_branch
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L182
.L184:
	.align	2, 0
.L183:
	.word	gContestResources
	.word	gAIScriptPtr
.L181:
	add	r0, r3, #0x6
	str	r0, [r4]
.L182:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 ContestAICmd_if_points_not_eq,.Lfe30-ContestAICmd_if_points_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_preliminary_points,function
	.thumb_func
ContestAICmd_get_preliminary_points:
	ldr	r0, .L186
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r1, .L186+0x4
	add	r0, r2, #0
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2, #0x18]
	ldr	r1, .L186+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L187:
	.align	2, 0
.L186:
	.word	gContestResources
	.word	gContestMonRound1Points
	.word	gAIScriptPtr
.Lfe31:
	.size	 ContestAICmd_get_preliminary_points,.Lfe31-ContestAICmd_get_preliminary_points
	.align	2, 0
	.type	 ContestAICmd_if_preliminary_points_less_than,function
	.thumb_func
ContestAICmd_if_preliminary_points_less_than:
	push	{r4, r5, lr}
	bl	ContestAICmd_get_preliminary_points
	ldr	r0, .L191
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L191+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r5, #0x18
	ldrsh	r0, [r2, r5]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	bge	.L189	@cond_branch
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L190
.L192:
	.align	2, 0
.L191:
	.word	gContestResources
	.word	gAIScriptPtr
.L189:
	add	r0, r3, #0x6
	str	r0, [r4]
.L190:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 ContestAICmd_if_preliminary_points_less_than,.Lfe32-ContestAICmd_if_preliminary_points_less_than
	.align	2, 0
	.type	 ContestAICmd_if_preliminary_points_more_than,function
	.thumb_func
ContestAICmd_if_preliminary_points_more_than:
	push	{r4, r5, lr}
	bl	ContestAICmd_get_preliminary_points
	ldr	r0, .L196
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L196+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r5, #0x18
	ldrsh	r0, [r2, r5]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	ble	.L194	@cond_branch
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L195
.L197:
	.align	2, 0
.L196:
	.word	gContestResources
	.word	gAIScriptPtr
.L194:
	add	r0, r3, #0x6
	str	r0, [r4]
.L195:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 ContestAICmd_if_preliminary_points_more_than,.Lfe33-ContestAICmd_if_preliminary_points_more_than
	.align	2, 0
	.type	 ContestAICmd_if_preliminary_points_eq,function
	.thumb_func
ContestAICmd_if_preliminary_points_eq:
	push	{r4, r5, lr}
	bl	ContestAICmd_get_preliminary_points
	ldr	r0, .L201
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L201+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r5, #0x18
	ldrsh	r0, [r2, r5]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	bne	.L199	@cond_branch
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L200
.L202:
	.align	2, 0
.L201:
	.word	gContestResources
	.word	gAIScriptPtr
.L199:
	add	r0, r3, #0x6
	str	r0, [r4]
.L200:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 ContestAICmd_if_preliminary_points_eq,.Lfe34-ContestAICmd_if_preliminary_points_eq
	.align	2, 0
	.type	 ContestAICmd_if_preliminary_points_not_eq,function
	.thumb_func
ContestAICmd_if_preliminary_points_not_eq:
	push	{r4, r5, lr}
	bl	ContestAICmd_get_preliminary_points
	ldr	r0, .L206
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L206+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r5, #0x18
	ldrsh	r0, [r2, r5]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	beq	.L204	@cond_branch
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L205
.L207:
	.align	2, 0
.L206:
	.word	gContestResources
	.word	gAIScriptPtr
.L204:
	add	r0, r3, #0x6
	str	r0, [r4]
.L205:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 ContestAICmd_if_preliminary_points_not_eq,.Lfe35-ContestAICmd_if_preliminary_points_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_contest_type,function
	.thumb_func
ContestAICmd_get_contest_type:
	ldr	r0, .L209
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	ldr	r0, .L209+0x4
	ldrh	r0, [r0]
	strh	r0, [r1, #0x18]
	ldr	r1, .L209+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L210:
	.align	2, 0
.L209:
	.word	gContestResources
	.word	gSpecialVar_ContestCategory
	.word	gAIScriptPtr
.Lfe36:
	.size	 ContestAICmd_get_contest_type,.Lfe36-ContestAICmd_get_contest_type
	.align	2, 0
	.type	 ContestAICmd_if_contest_type_eq,function
	.thumb_func
ContestAICmd_if_contest_type_eq:
	push	{lr}
	bl	ContestAICmd_get_contest_type
	ldr	r0, .L214
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L214+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L212	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L213
.L215:
	.align	2, 0
.L214:
	.word	gContestResources
	.word	gAIScriptPtr
.L212:
	add	r0, r2, #0x5
	str	r0, [r3]
.L213:
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 ContestAICmd_if_contest_type_eq,.Lfe37-ContestAICmd_if_contest_type_eq
	.align	2, 0
	.type	 ContestAICmd_if_contest_type_not_eq,function
	.thumb_func
ContestAICmd_if_contest_type_not_eq:
	push	{lr}
	bl	ContestAICmd_get_contest_type
	ldr	r0, .L219
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L219+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L217	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L218
.L220:
	.align	2, 0
.L219:
	.word	gContestResources
	.word	gAIScriptPtr
.L217:
	add	r0, r2, #0x5
	str	r0, [r3]
.L218:
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 ContestAICmd_if_contest_type_not_eq,.Lfe38-ContestAICmd_if_contest_type_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_move_excitement,function
	.thumb_func
ContestAICmd_get_move_excitement:
	push	{r4, lr}
	ldr	r2, .L222
	ldr	r4, .L222+0x4
	ldr	r0, [r4]
	ldr	r0, [r0, #0xc]
	ldrb	r1, [r0, #0x4]
	lsl	r1, r1, #0x1
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x1e
	add	r1, r1, r2
	ldrh	r0, [r1]
	bl	Contest_GetMoveExcitement
	ldr	r1, [r4]
	ldr	r1, [r1, #0xc]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x18]
	ldr	r1, .L222+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L223:
	.align	2, 0
.L222:
	.word	gContestMons
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe39:
	.size	 ContestAICmd_get_move_excitement,.Lfe39-ContestAICmd_get_move_excitement
	.align	2, 0
	.type	 ContestAICmd_if_move_excitement_less_than,function
	.thumb_func
ContestAICmd_if_move_excitement_less_than:
	push	{r4, lr}
	bl	ContestAICmd_get_move_excitement
	ldr	r0, .L227
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	ldr	r3, .L227+0x4
	ldr	r2, [r3]
	mov	r4, #0x18
	ldrsh	r1, [r0, r4]
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bge	.L225	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L226
.L228:
	.align	2, 0
.L227:
	.word	gContestResources
	.word	gAIScriptPtr
.L225:
	add	r0, r2, #0x5
	str	r0, [r3]
.L226:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 ContestAICmd_if_move_excitement_less_than,.Lfe40-ContestAICmd_if_move_excitement_less_than
	.align	2, 0
	.type	 ContestAICmd_if_move_excitement_more_than,function
	.thumb_func
ContestAICmd_if_move_excitement_more_than:
	push	{r4, lr}
	bl	ContestAICmd_get_move_excitement
	ldr	r0, .L232
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	ldr	r3, .L232+0x4
	ldr	r2, [r3]
	mov	r4, #0x18
	ldrsh	r1, [r0, r4]
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	ble	.L230	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L231
.L233:
	.align	2, 0
.L232:
	.word	gContestResources
	.word	gAIScriptPtr
.L230:
	add	r0, r2, #0x5
	str	r0, [r3]
.L231:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 ContestAICmd_if_move_excitement_more_than,.Lfe41-ContestAICmd_if_move_excitement_more_than
	.align	2, 0
	.type	 ContestAICmd_if_move_excitement_eq,function
	.thumb_func
ContestAICmd_if_move_excitement_eq:
	push	{r4, lr}
	bl	ContestAICmd_get_move_excitement
	ldr	r0, .L237
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	ldr	r3, .L237+0x4
	ldr	r2, [r3]
	mov	r4, #0x18
	ldrsh	r1, [r0, r4]
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bne	.L235	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L236
.L238:
	.align	2, 0
.L237:
	.word	gContestResources
	.word	gAIScriptPtr
.L235:
	add	r0, r2, #0x5
	str	r0, [r3]
.L236:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 ContestAICmd_if_move_excitement_eq,.Lfe42-ContestAICmd_if_move_excitement_eq
	.align	2, 0
	.type	 ContestAICmd_if_move_excitement_not_eq,function
	.thumb_func
ContestAICmd_if_move_excitement_not_eq:
	push	{r4, lr}
	bl	ContestAICmd_get_move_excitement
	ldr	r0, .L242
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	ldr	r3, .L242+0x4
	ldr	r2, [r3]
	mov	r4, #0x18
	ldrsh	r1, [r0, r4]
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	beq	.L240	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L241
.L243:
	.align	2, 0
.L242:
	.word	gContestResources
	.word	gAIScriptPtr
.L240:
	add	r0, r2, #0x5
	str	r0, [r3]
.L241:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 ContestAICmd_if_move_excitement_not_eq,.Lfe43-ContestAICmd_if_move_excitement_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_move_effect,function
	.thumb_func
ContestAICmd_get_move_effect:
	ldr	r2, .L245
	ldr	r0, .L245+0x4
	ldr	r0, [r0]
	ldr	r3, [r0, #0xc]
	ldrb	r1, [r3, #0x4]
	lsl	r1, r1, #0x1
	add	r0, r3, #0
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x1e
	add	r1, r1, r2
	ldrh	r0, [r1]
	ldr	r1, .L245+0x8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r3, #0x18]
	ldr	r1, .L245+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L246:
	.align	2, 0
.L245:
	.word	gContestMons
	.word	gContestResources
	.word	gContestMoves
	.word	gAIScriptPtr
.Lfe44:
	.size	 ContestAICmd_get_move_effect,.Lfe44-ContestAICmd_get_move_effect
	.align	2, 0
	.type	 ContestAICmd_if_move_effect_eq,function
	.thumb_func
ContestAICmd_if_move_effect_eq:
	push	{lr}
	bl	ContestAICmd_get_move_effect
	ldr	r0, .L250
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L250+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L248	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L249
.L251:
	.align	2, 0
.L250:
	.word	gContestResources
	.word	gAIScriptPtr
.L248:
	add	r0, r2, #0x5
	str	r0, [r3]
.L249:
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 ContestAICmd_if_move_effect_eq,.Lfe45-ContestAICmd_if_move_effect_eq
	.align	2, 0
	.type	 ContestAICmd_if_move_effect_not_eq,function
	.thumb_func
ContestAICmd_if_move_effect_not_eq:
	push	{lr}
	bl	ContestAICmd_get_move_effect
	ldr	r0, .L255
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L255+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L253	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L254
.L256:
	.align	2, 0
.L255:
	.word	gContestResources
	.word	gAIScriptPtr
.L253:
	add	r0, r2, #0x5
	str	r0, [r3]
.L254:
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 ContestAICmd_if_move_effect_not_eq,.Lfe46-ContestAICmd_if_move_effect_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_move_effect_type,function
	.thumb_func
ContestAICmd_get_move_effect_type:
	ldr	r2, .L258
	ldr	r0, .L258+0x4
	ldr	r0, [r0]
	ldr	r3, [r0, #0xc]
	ldrb	r1, [r3, #0x4]
	lsl	r1, r1, #0x1
	add	r0, r3, #0
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x1e
	add	r1, r1, r2
	ldrh	r0, [r1]
	ldr	r2, .L258+0x8
	ldr	r1, .L258+0xc
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r3, #0x18]
	ldr	r1, .L258+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L259:
	.align	2, 0
.L258:
	.word	gContestMons
	.word	gContestResources
	.word	gContestEffects
	.word	gContestMoves
	.word	gAIScriptPtr
.Lfe47:
	.size	 ContestAICmd_get_move_effect_type,.Lfe47-ContestAICmd_get_move_effect_type
	.align	2, 0
	.type	 ContestAICmd_if_move_effect_type_eq,function
	.thumb_func
ContestAICmd_if_move_effect_type_eq:
	push	{lr}
	bl	ContestAICmd_get_move_effect_type
	ldr	r0, .L263
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L263+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L261	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L262
.L264:
	.align	2, 0
.L263:
	.word	gContestResources
	.word	gAIScriptPtr
.L261:
	add	r0, r2, #0x5
	str	r0, [r3]
.L262:
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 ContestAICmd_if_move_effect_type_eq,.Lfe48-ContestAICmd_if_move_effect_type_eq
	.align	2, 0
	.type	 ContestAICmd_if_move_effect_type_not_eq,function
	.thumb_func
ContestAICmd_if_move_effect_type_not_eq:
	push	{lr}
	bl	ContestAICmd_get_move_effect_type
	ldr	r0, .L268
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L268+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L266	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L267
.L269:
	.align	2, 0
.L268:
	.word	gContestResources
	.word	gAIScriptPtr
.L266:
	add	r0, r2, #0x5
	str	r0, [r3]
.L267:
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 ContestAICmd_if_move_effect_type_not_eq,.Lfe49-ContestAICmd_if_move_effect_type_not_eq
	.align	2, 0
	.type	 ContestAICmd_check_most_appealing_move,function
	.thumb_func
ContestAICmd_check_most_appealing_move:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L280
	ldr	r5, .L280+0x4
	ldr	r0, [r5]
	ldr	r1, [r0, #0xc]
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x41
	ldrb	r1, [r1]
	lsl	r1, r1, #0x6
	add	r0, r0, r1
	add	r2, r2, #0x1e
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldr	r3, .L280+0x8
	ldr	r4, .L280+0xc
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r7, [r0, #0x1]
	mov	r6, #0x0
	ldr	r0, .L280+0x10
	mov	ip, r0
	add	r1, r1, r2
.L274:
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L273	@cond_branch
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1]
	cmp	r7, r0
	bcc	.L272	@cond_branch
.L273:
	add	r1, r1, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L274	@cond_branch
.L272:
	cmp	r6, #0x4
	bne	.L277	@cond_branch
	ldr	r0, [r5]
	ldr	r1, [r0, #0xc]
	mov	r0, #0x1
	b	.L279
.L281:
	.align	2, 0
.L280:
	.word	gContestMons
	.word	gContestResources
	.word	gContestEffects
	.word	gContestMoves
	.word	gAIScriptPtr
.L277:
	ldr	r0, [r5]
	ldr	r1, [r0, #0xc]
	mov	r0, #0x0
.L279:
	strh	r0, [r1, #0x18]
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 ContestAICmd_check_most_appealing_move,.Lfe50-ContestAICmd_check_most_appealing_move
	.align	2, 0
	.type	 ContestAICmd_if_most_appealing_move,function
	.thumb_func
ContestAICmd_if_most_appealing_move:
	push	{lr}
	bl	ContestAICmd_check_most_appealing_move
	ldr	r0, .L285
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L283	@cond_branch
	ldr	r3, .L285+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L284
.L286:
	.align	2, 0
.L285:
	.word	gContestResources
	.word	gAIScriptPtr
.L283:
	ldr	r1, .L287
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L284:
	pop	{r0}
	bx	r0
.L288:
	.align	2, 0
.L287:
	.word	gAIScriptPtr
.Lfe51:
	.size	 ContestAICmd_if_most_appealing_move,.Lfe51-ContestAICmd_if_most_appealing_move
	.align	2, 0
	.type	 ContestAICmd_check_most_jamming_move,function
	.thumb_func
ContestAICmd_check_most_jamming_move:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L299
	ldr	r5, .L299+0x4
	ldr	r0, [r5]
	ldr	r1, [r0, #0xc]
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x41
	ldrb	r1, [r1]
	lsl	r1, r1, #0x6
	add	r0, r0, r1
	add	r2, r2, #0x1e
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldr	r3, .L299+0x8
	ldr	r4, .L299+0xc
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r7, [r0, #0x2]
	mov	r6, #0x0
	ldr	r0, .L299+0x10
	mov	ip, r0
	add	r1, r1, r2
.L293:
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L292	@cond_branch
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x2]
	cmp	r7, r0
	bcc	.L291	@cond_branch
.L292:
	add	r1, r1, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L293	@cond_branch
.L291:
	cmp	r6, #0x4
	bne	.L296	@cond_branch
	ldr	r0, [r5]
	ldr	r1, [r0, #0xc]
	mov	r0, #0x1
	b	.L298
.L300:
	.align	2, 0
.L299:
	.word	gContestMons
	.word	gContestResources
	.word	gContestEffects
	.word	gContestMoves
	.word	gAIScriptPtr
.L296:
	ldr	r0, [r5]
	ldr	r1, [r0, #0xc]
	mov	r0, #0x0
.L298:
	strh	r0, [r1, #0x18]
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 ContestAICmd_check_most_jamming_move,.Lfe52-ContestAICmd_check_most_jamming_move
	.align	2, 0
	.type	 ContestAICmd_if_most_jamming_move,function
	.thumb_func
ContestAICmd_if_most_jamming_move:
	push	{lr}
	bl	ContestAICmd_check_most_jamming_move
	ldr	r0, .L304
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L302	@cond_branch
	ldr	r3, .L304+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L303
.L305:
	.align	2, 0
.L304:
	.word	gContestResources
	.word	gAIScriptPtr
.L302:
	ldr	r1, .L306
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L303:
	pop	{r0}
	bx	r0
.L307:
	.align	2, 0
.L306:
	.word	gAIScriptPtr
.Lfe53:
	.size	 ContestAICmd_if_most_jamming_move,.Lfe53-ContestAICmd_if_most_jamming_move
	.align	2, 0
	.type	 ContestAICmd_get_num_move_hearts,function
	.thumb_func
ContestAICmd_get_num_move_hearts:
	push	{r4, lr}
	ldr	r2, .L309
	ldr	r0, .L309+0x4
	ldr	r0, [r0]
	ldr	r4, [r0, #0xc]
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x1
	add	r0, r4, #0
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x1e
	add	r1, r1, r2
	ldrh	r0, [r1]
	ldr	r2, .L309+0x8
	ldr	r1, .L309+0xc
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x18]
	ldr	r1, .L309+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L310:
	.align	2, 0
.L309:
	.word	gContestMons
	.word	gContestResources
	.word	gContestEffects
	.word	gContestMoves
	.word	gAIScriptPtr
.Lfe54:
	.size	 ContestAICmd_get_num_move_hearts,.Lfe54-ContestAICmd_get_num_move_hearts
	.align	2, 0
	.type	 ContestAICmd_if_num_move_hearts_less_than,function
	.thumb_func
ContestAICmd_if_num_move_hearts_less_than:
	push	{lr}
	bl	ContestAICmd_get_num_move_hearts
	ldr	r0, .L314
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L314+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bge	.L312	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L313
.L315:
	.align	2, 0
.L314:
	.word	gContestResources
	.word	gAIScriptPtr
.L312:
	add	r0, r2, #0x5
	str	r0, [r3]
.L313:
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 ContestAICmd_if_num_move_hearts_less_than,.Lfe55-ContestAICmd_if_num_move_hearts_less_than
	.align	2, 0
	.type	 ContestAICmd_if_num_move_hearts_more_than,function
	.thumb_func
ContestAICmd_if_num_move_hearts_more_than:
	push	{lr}
	bl	ContestAICmd_get_num_move_hearts
	ldr	r0, .L319
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L319+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	ble	.L317	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L318
.L320:
	.align	2, 0
.L319:
	.word	gContestResources
	.word	gAIScriptPtr
.L317:
	add	r0, r2, #0x5
	str	r0, [r3]
.L318:
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 ContestAICmd_if_num_move_hearts_more_than,.Lfe56-ContestAICmd_if_num_move_hearts_more_than
	.align	2, 0
	.type	 ContestAICmd_if_num_move_hearts_eq,function
	.thumb_func
ContestAICmd_if_num_move_hearts_eq:
	push	{lr}
	bl	ContestAICmd_get_num_move_hearts
	ldr	r0, .L324
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L324+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L322	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L323
.L325:
	.align	2, 0
.L324:
	.word	gContestResources
	.word	gAIScriptPtr
.L322:
	add	r0, r2, #0x5
	str	r0, [r3]
.L323:
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 ContestAICmd_if_num_move_hearts_eq,.Lfe57-ContestAICmd_if_num_move_hearts_eq
	.align	2, 0
	.type	 ContestAICmd_if_num_move_hearts_not_eq,function
	.thumb_func
ContestAICmd_if_num_move_hearts_not_eq:
	push	{lr}
	bl	ContestAICmd_get_num_move_hearts
	ldr	r0, .L329
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L329+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L327	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L328
.L330:
	.align	2, 0
.L329:
	.word	gContestResources
	.word	gAIScriptPtr
.L327:
	add	r0, r2, #0x5
	str	r0, [r3]
.L328:
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 ContestAICmd_if_num_move_hearts_not_eq,.Lfe58-ContestAICmd_if_num_move_hearts_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_num_move_jam_hearts,function
	.thumb_func
ContestAICmd_get_num_move_jam_hearts:
	push	{r4, lr}
	ldr	r2, .L332
	ldr	r0, .L332+0x4
	ldr	r0, [r0]
	ldr	r4, [r0, #0xc]
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x1
	add	r0, r4, #0
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x1e
	add	r1, r1, r2
	ldrh	r0, [r1]
	ldr	r2, .L332+0x8
	ldr	r1, .L332+0xc
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x18]
	ldr	r1, .L332+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L333:
	.align	2, 0
.L332:
	.word	gContestMons
	.word	gContestResources
	.word	gContestEffects
	.word	gContestMoves
	.word	gAIScriptPtr
.Lfe59:
	.size	 ContestAICmd_get_num_move_jam_hearts,.Lfe59-ContestAICmd_get_num_move_jam_hearts
	.align	2, 0
	.type	 ContestAICmd_if_num_move_jam_hearts_less_than,function
	.thumb_func
ContestAICmd_if_num_move_jam_hearts_less_than:
	push	{lr}
	bl	ContestAICmd_get_num_move_jam_hearts
	ldr	r0, .L337
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L337+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bge	.L335	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L336
.L338:
	.align	2, 0
.L337:
	.word	gContestResources
	.word	gAIScriptPtr
.L335:
	add	r0, r2, #0x5
	str	r0, [r3]
.L336:
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 ContestAICmd_if_num_move_jam_hearts_less_than,.Lfe60-ContestAICmd_if_num_move_jam_hearts_less_than
	.align	2, 0
	.type	 ContestAICmd_if_num_move_jam_hearts_more_than,function
	.thumb_func
ContestAICmd_if_num_move_jam_hearts_more_than:
	push	{lr}
	bl	ContestAICmd_get_num_move_jam_hearts
	ldr	r0, .L342
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L342+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	ble	.L340	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L341
.L343:
	.align	2, 0
.L342:
	.word	gContestResources
	.word	gAIScriptPtr
.L340:
	add	r0, r2, #0x5
	str	r0, [r3]
.L341:
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 ContestAICmd_if_num_move_jam_hearts_more_than,.Lfe61-ContestAICmd_if_num_move_jam_hearts_more_than
	.align	2, 0
	.type	 ContestAICmd_if_num_move_jam_hearts_eq,function
	.thumb_func
ContestAICmd_if_num_move_jam_hearts_eq:
	push	{lr}
	bl	ContestAICmd_get_num_move_jam_hearts
	ldr	r0, .L347
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L347+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L345	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L346
.L348:
	.align	2, 0
.L347:
	.word	gContestResources
	.word	gAIScriptPtr
.L345:
	add	r0, r2, #0x5
	str	r0, [r3]
.L346:
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 ContestAICmd_if_num_move_jam_hearts_eq,.Lfe62-ContestAICmd_if_num_move_jam_hearts_eq
	.align	2, 0
	.type	 ContestAICmd_if_num_move_jam_hearts_not_eq,function
	.thumb_func
ContestAICmd_if_num_move_jam_hearts_not_eq:
	push	{lr}
	bl	ContestAICmd_get_num_move_jam_hearts
	ldr	r0, .L352
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L352+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L350	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L351
.L353:
	.align	2, 0
.L352:
	.word	gContestResources
	.word	gAIScriptPtr
.L350:
	add	r0, r2, #0x5
	str	r0, [r3]
.L351:
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 ContestAICmd_if_num_move_jam_hearts_not_eq,.Lfe63-ContestAICmd_if_num_move_jam_hearts_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_move_used_count,function
	.thumb_func
ContestAICmd_get_move_used_count:
	push	{r4, r5, lr}
	ldr	r3, .L357
	ldr	r5, .L357+0x4
	ldr	r4, [r5]
	ldr	r1, [r4, #0xc]
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x41
	ldrb	r2, [r1]
	lsl	r1, r2, #0x6
	add	r0, r0, r1
	add	r3, r3, #0x1e
	add	r0, r0, r3
	ldrh	r3, [r0]
	ldr	r1, [r4, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	cmp	r3, r1
	beq	.L355	@cond_branch
	mov	r1, #0x0
	b	.L356
.L358:
	.align	2, 0
.L357:
	.word	gContestMons
	.word	gContestResources
.L355:
	ldrb	r0, [r0, #0xb]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1d
	add	r1, r0, #0x1
.L356:
	ldr	r0, [r5]
	ldr	r0, [r0, #0xc]
	strh	r1, [r0, #0x18]
	ldr	r1, .L359
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L360:
	.align	2, 0
.L359:
	.word	gAIScriptPtr
.Lfe64:
	.size	 ContestAICmd_get_move_used_count,.Lfe64-ContestAICmd_get_move_used_count
	.align	2, 0
	.type	 ContestAICmd_if_most_used_count_less_than,function
	.thumb_func
ContestAICmd_if_most_used_count_less_than:
	push	{lr}
	bl	ContestAICmd_get_move_used_count
	ldr	r0, .L364
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L364+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bge	.L362	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L363
.L365:
	.align	2, 0
.L364:
	.word	gContestResources
	.word	gAIScriptPtr
.L362:
	add	r0, r2, #0x5
	str	r0, [r3]
.L363:
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 ContestAICmd_if_most_used_count_less_than,.Lfe65-ContestAICmd_if_most_used_count_less_than
	.align	2, 0
	.type	 ContestAICmd_if_most_used_count_more_than,function
	.thumb_func
ContestAICmd_if_most_used_count_more_than:
	push	{lr}
	bl	ContestAICmd_get_move_used_count
	ldr	r0, .L369
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L369+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	ble	.L367	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L368
.L370:
	.align	2, 0
.L369:
	.word	gContestResources
	.word	gAIScriptPtr
.L367:
	add	r0, r2, #0x5
	str	r0, [r3]
.L368:
	pop	{r0}
	bx	r0
.Lfe66:
	.size	 ContestAICmd_if_most_used_count_more_than,.Lfe66-ContestAICmd_if_most_used_count_more_than
	.align	2, 0
	.type	 ContestAICmd_if_most_used_count_eq,function
	.thumb_func
ContestAICmd_if_most_used_count_eq:
	push	{lr}
	bl	ContestAICmd_get_move_used_count
	ldr	r0, .L374
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L374+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L372	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L373
.L375:
	.align	2, 0
.L374:
	.word	gContestResources
	.word	gAIScriptPtr
.L372:
	add	r0, r2, #0x5
	str	r0, [r3]
.L373:
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 ContestAICmd_if_most_used_count_eq,.Lfe67-ContestAICmd_if_most_used_count_eq
	.align	2, 0
	.type	 ContestAICmd_if_most_used_count_not_eq,function
	.thumb_func
ContestAICmd_if_most_used_count_not_eq:
	push	{lr}
	bl	ContestAICmd_get_move_used_count
	ldr	r0, .L379
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L379+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L377	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L378
.L380:
	.align	2, 0
.L379:
	.word	gContestResources
	.word	gAIScriptPtr
.L377:
	add	r0, r2, #0x5
	str	r0, [r3]
.L378:
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 ContestAICmd_if_most_used_count_not_eq,.Lfe68-ContestAICmd_if_most_used_count_not_eq
	.align	2, 0
	.type	 ContestAICmd_check_combo_starter,function
	.thumb_func
ContestAICmd_check_combo_starter:
	push	{r4, r5, r6, lr}
	mov	r3, #0x0
	ldr	r2, .L391
	ldr	r0, .L391+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	ldrb	r1, [r0, #0x4]
	lsl	r1, r1, #0x1
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x1e
	add	r1, r1, r2
	ldrh	r5, [r1]
	mov	r4, #0x0
	add	r6, r2, #0
.L385:
	lsl	r1, r4, #0x1
	ldr	r0, .L391+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r1, r1, r6
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L384	@cond_branch
	add	r1, r0, #0
	add	r0, r5, #0
	bl	AreMovesContestCombo
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	bne	.L390	@cond_branch
.L384:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L385	@cond_branch
	cmp	r3, #0
	beq	.L389	@cond_branch
.L390:
	mov	r3, #0x1
.L389:
	ldr	r0, .L391+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	strh	r3, [r0, #0x18]
	ldr	r1, .L391+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L392:
	.align	2, 0
.L391:
	.word	gContestMons
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe69:
	.size	 ContestAICmd_check_combo_starter,.Lfe69-ContestAICmd_check_combo_starter
	.align	2, 0
	.type	 ContestAICmd_if_combo_starter,function
	.thumb_func
ContestAICmd_if_combo_starter:
	push	{lr}
	bl	ContestAICmd_check_combo_starter
	ldr	r0, .L396
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L394	@cond_branch
	ldr	r3, .L396+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L395
.L397:
	.align	2, 0
.L396:
	.word	gContestResources
	.word	gAIScriptPtr
.L394:
	ldr	r1, .L398
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L395:
	pop	{r0}
	bx	r0
.L399:
	.align	2, 0
.L398:
	.word	gAIScriptPtr
.Lfe70:
	.size	 ContestAICmd_if_combo_starter,.Lfe70-ContestAICmd_if_combo_starter
	.align	2, 0
	.type	 ContestAICmd_if_not_combo_starter,function
	.thumb_func
ContestAICmd_if_not_combo_starter:
	push	{lr}
	bl	ContestAICmd_check_combo_starter
	ldr	r0, .L403
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L401	@cond_branch
	ldr	r3, .L403+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L402
.L404:
	.align	2, 0
.L403:
	.word	gContestResources
	.word	gAIScriptPtr
.L401:
	ldr	r1, .L405
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L402:
	pop	{r0}
	bx	r0
.L406:
	.align	2, 0
.L405:
	.word	gAIScriptPtr
.Lfe71:
	.size	 ContestAICmd_if_not_combo_starter,.Lfe71-ContestAICmd_if_not_combo_starter
	.align	2, 0
	.type	 ContestAICmd_check_combo_finisher,function
	.thumb_func
ContestAICmd_check_combo_finisher:
	push	{r4, r5, r6, lr}
	mov	r3, #0x0
	ldr	r2, .L417
	ldr	r0, .L417+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	ldrb	r1, [r0, #0x4]
	lsl	r1, r1, #0x1
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x1e
	add	r1, r1, r2
	ldrh	r5, [r1]
	mov	r4, #0x0
	add	r6, r2, #0
.L411:
	lsl	r1, r4, #0x1
	ldr	r0, .L417+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r1, r1, r6
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L410	@cond_branch
	add	r1, r5, #0
	bl	AreMovesContestCombo
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	bne	.L416	@cond_branch
.L410:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L411	@cond_branch
	cmp	r3, #0
	beq	.L415	@cond_branch
.L416:
	mov	r3, #0x1
.L415:
	ldr	r0, .L417+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	strh	r3, [r0, #0x18]
	ldr	r1, .L417+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L418:
	.align	2, 0
.L417:
	.word	gContestMons
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe72:
	.size	 ContestAICmd_check_combo_finisher,.Lfe72-ContestAICmd_check_combo_finisher
	.align	2, 0
	.type	 ContestAICmd_if_combo_finisher,function
	.thumb_func
ContestAICmd_if_combo_finisher:
	push	{lr}
	bl	ContestAICmd_check_combo_finisher
	ldr	r0, .L422
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L420	@cond_branch
	ldr	r3, .L422+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L421
.L423:
	.align	2, 0
.L422:
	.word	gContestResources
	.word	gAIScriptPtr
.L420:
	ldr	r1, .L424
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L421:
	pop	{r0}
	bx	r0
.L425:
	.align	2, 0
.L424:
	.word	gAIScriptPtr
.Lfe73:
	.size	 ContestAICmd_if_combo_finisher,.Lfe73-ContestAICmd_if_combo_finisher
	.align	2, 0
	.type	 ContestAICmd_if_not_combo_finisher,function
	.thumb_func
ContestAICmd_if_not_combo_finisher:
	push	{lr}
	bl	ContestAICmd_check_combo_finisher
	ldr	r0, .L429
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L427	@cond_branch
	ldr	r3, .L429+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L428
.L430:
	.align	2, 0
.L429:
	.word	gContestResources
	.word	gAIScriptPtr
.L427:
	ldr	r1, .L431
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L428:
	pop	{r0}
	bx	r0
.L432:
	.align	2, 0
.L431:
	.word	gAIScriptPtr
.Lfe74:
	.size	 ContestAICmd_if_not_combo_finisher,.Lfe74-ContestAICmd_if_not_combo_finisher
	.align	2, 0
	.type	 ContestAICmd_check_would_finish_combo,function
	.thumb_func
ContestAICmd_check_would_finish_combo:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	ldr	r3, .L436
	ldr	r6, .L436+0x4
	ldr	r4, [r6]
	ldr	r1, [r4, #0xc]
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x41
	ldrb	r2, [r1]
	lsl	r1, r2, #0x6
	add	r0, r0, r1
	add	r3, r3, #0x1e
	add	r0, r0, r3
	ldrh	r3, [r0]
	ldr	r1, [r4, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L434	@cond_branch
	add	r1, r3, #0
	bl	AreMovesContestCombo
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L434:
	cmp	r5, #0
	beq	.L435	@cond_branch
	mov	r5, #0x1
.L435:
	ldr	r0, [r6]
	ldr	r0, [r0, #0xc]
	strh	r5, [r0, #0x18]
	ldr	r1, .L436+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L437:
	.align	2, 0
.L436:
	.word	gContestMons
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe75:
	.size	 ContestAICmd_check_would_finish_combo,.Lfe75-ContestAICmd_check_would_finish_combo
	.align	2, 0
	.type	 ContestAICmd_if_would_finish_combo,function
	.thumb_func
ContestAICmd_if_would_finish_combo:
	push	{lr}
	bl	ContestAICmd_check_would_finish_combo
	ldr	r0, .L441
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L439	@cond_branch
	ldr	r3, .L441+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L440
.L442:
	.align	2, 0
.L441:
	.word	gContestResources
	.word	gAIScriptPtr
.L439:
	ldr	r1, .L443
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L440:
	pop	{r0}
	bx	r0
.L444:
	.align	2, 0
.L443:
	.word	gAIScriptPtr
.Lfe76:
	.size	 ContestAICmd_if_would_finish_combo,.Lfe76-ContestAICmd_if_would_finish_combo
	.align	2, 0
	.type	 ContestAICmd_if_would_not_finish_combo,function
	.thumb_func
ContestAICmd_if_would_not_finish_combo:
	push	{lr}
	bl	ContestAICmd_check_would_finish_combo
	ldr	r0, .L448
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L446	@cond_branch
	ldr	r3, .L448+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L447
.L449:
	.align	2, 0
.L448:
	.word	gContestResources
	.word	gAIScriptPtr
.L446:
	ldr	r1, .L450
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L447:
	pop	{r0}
	bx	r0
.L451:
	.align	2, 0
.L450:
	.word	gAIScriptPtr
.Lfe77:
	.size	 ContestAICmd_if_would_not_finish_combo,.Lfe77-ContestAICmd_if_would_not_finish_combo
	.align	2, 0
	.type	 ContestAICmd_get_condition,function
	.thumb_func
ContestAICmd_get_condition:
	push	{r4, r5, lr}
	ldr	r4, .L453
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetContestantIdByTurn
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L453+0x4
	ldr	r1, [r1]
	ldr	r5, [r1, #0xc]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0xd
	ldrsb	r0, [r1, r0]
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r5, #0x18]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L454:
	.align	2, 0
.L453:
	.word	gAIScriptPtr
	.word	gContestResources
.Lfe78:
	.size	 ContestAICmd_get_condition,.Lfe78-ContestAICmd_get_condition
	.align	2, 0
	.type	 ContestAICmd_if_condition_less_than,function
	.thumb_func
ContestAICmd_if_condition_less_than:
	push	{lr}
	bl	ContestAICmd_get_condition
	ldr	r0, .L458
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L458+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bge	.L456	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L457
.L459:
	.align	2, 0
.L458:
	.word	gContestResources
	.word	gAIScriptPtr
.L456:
	add	r0, r2, #0x5
	str	r0, [r3]
.L457:
	pop	{r0}
	bx	r0
.Lfe79:
	.size	 ContestAICmd_if_condition_less_than,.Lfe79-ContestAICmd_if_condition_less_than
	.align	2, 0
	.type	 ContestAICmd_if_condition_more_than,function
	.thumb_func
ContestAICmd_if_condition_more_than:
	push	{lr}
	bl	ContestAICmd_get_condition
	ldr	r0, .L463
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L463+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	ble	.L461	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L462
.L464:
	.align	2, 0
.L463:
	.word	gContestResources
	.word	gAIScriptPtr
.L461:
	add	r0, r2, #0x5
	str	r0, [r3]
.L462:
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 ContestAICmd_if_condition_more_than,.Lfe80-ContestAICmd_if_condition_more_than
	.align	2, 0
	.type	 ContestAICmd_if_condition_eq,function
	.thumb_func
ContestAICmd_if_condition_eq:
	push	{lr}
	bl	ContestAICmd_get_condition
	ldr	r0, .L468
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L468+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L466	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L467
.L469:
	.align	2, 0
.L468:
	.word	gContestResources
	.word	gAIScriptPtr
.L466:
	add	r0, r2, #0x5
	str	r0, [r3]
.L467:
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 ContestAICmd_if_condition_eq,.Lfe81-ContestAICmd_if_condition_eq
	.align	2, 0
	.type	 ContestAICmd_if_condition_not_eq,function
	.thumb_func
ContestAICmd_if_condition_not_eq:
	push	{lr}
	bl	ContestAICmd_get_condition
	ldr	r0, .L473
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L473+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L471	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L472
.L474:
	.align	2, 0
.L473:
	.word	gContestResources
	.word	gAIScriptPtr
.L471:
	add	r0, r2, #0x5
	str	r0, [r3]
.L472:
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 ContestAICmd_if_condition_not_eq,.Lfe82-ContestAICmd_if_condition_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_used_combo_starter,function
	.thumb_func
ContestAICmd_get_used_combo_starter:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	ldr	r5, .L478
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetContestantIdByTurn
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsContestantAllowedToCombo
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L476	@cond_branch
	ldr	r2, .L478+0x4
	ldr	r0, .L478+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0, #0x2]
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r6, r0, #0x1f
.L476:
	ldr	r0, .L478+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	strh	r6, [r0, #0x18]
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L479:
	.align	2, 0
.L478:
	.word	gAIScriptPtr
	.word	gContestMoves
	.word	gContestResources
.Lfe83:
	.size	 ContestAICmd_get_used_combo_starter,.Lfe83-ContestAICmd_get_used_combo_starter
	.align	2, 0
	.type	 ContestAICmd_if_used_combo_starter_less_than,function
	.thumb_func
ContestAICmd_if_used_combo_starter_less_than:
	push	{lr}
	bl	ContestAICmd_get_used_combo_starter
	ldr	r0, .L483
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L483+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bge	.L481	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L482
.L484:
	.align	2, 0
.L483:
	.word	gContestResources
	.word	gAIScriptPtr
.L481:
	add	r0, r2, #0x5
	str	r0, [r3]
.L482:
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 ContestAICmd_if_used_combo_starter_less_than,.Lfe84-ContestAICmd_if_used_combo_starter_less_than
	.align	2, 0
	.type	 ContestAICmd_if_used_combo_starter_more_than,function
	.thumb_func
ContestAICmd_if_used_combo_starter_more_than:
	push	{lr}
	bl	ContestAICmd_get_used_combo_starter
	ldr	r0, .L488
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L488+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	ble	.L486	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L487
.L489:
	.align	2, 0
.L488:
	.word	gContestResources
	.word	gAIScriptPtr
.L486:
	add	r0, r2, #0x5
	str	r0, [r3]
.L487:
	pop	{r0}
	bx	r0
.Lfe85:
	.size	 ContestAICmd_if_used_combo_starter_more_than,.Lfe85-ContestAICmd_if_used_combo_starter_more_than
	.align	2, 0
	.type	 ContestAICmd_if_used_combo_starter_eq,function
	.thumb_func
ContestAICmd_if_used_combo_starter_eq:
	push	{lr}
	bl	ContestAICmd_get_used_combo_starter
	ldr	r0, .L493
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L493+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L491	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L492
.L494:
	.align	2, 0
.L493:
	.word	gContestResources
	.word	gAIScriptPtr
.L491:
	add	r0, r2, #0x5
	str	r0, [r3]
.L492:
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 ContestAICmd_if_used_combo_starter_eq,.Lfe86-ContestAICmd_if_used_combo_starter_eq
	.align	2, 0
	.type	 ContestAICmd_if_used_combo_starter_not_eq,function
	.thumb_func
ContestAICmd_if_used_combo_starter_not_eq:
	push	{lr}
	bl	ContestAICmd_get_used_combo_starter
	ldr	r0, .L498
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L498+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L496	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L497
.L499:
	.align	2, 0
.L498:
	.word	gContestResources
	.word	gAIScriptPtr
.L496:
	add	r0, r2, #0x5
	str	r0, [r3]
.L497:
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 ContestAICmd_if_used_combo_starter_not_eq,.Lfe87-ContestAICmd_if_used_combo_starter_not_eq
	.align	2, 0
	.type	 ContestAICmd_check_can_participate,function
	.thumb_func
ContestAICmd_check_can_participate:
	push	{lr}
	ldr	r0, .L504
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetContestantIdByTurn
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L501	@cond_branch
	ldr	r0, .L504+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	mov	r0, #0x0
	b	.L503
.L505:
	.align	2, 0
.L504:
	.word	gAIScriptPtr
	.word	gContestResources
.L501:
	ldr	r0, .L506
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	mov	r0, #0x1
.L503:
	strh	r0, [r1, #0x18]
	ldr	r1, .L506+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L507:
	.align	2, 0
.L506:
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe88:
	.size	 ContestAICmd_check_can_participate,.Lfe88-ContestAICmd_check_can_participate
	.align	2, 0
	.type	 ContestAICmd_if_can_participate,function
	.thumb_func
ContestAICmd_if_can_participate:
	push	{lr}
	bl	ContestAICmd_check_can_participate
	ldr	r0, .L511
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L509	@cond_branch
	ldr	r3, .L511+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L510
.L512:
	.align	2, 0
.L511:
	.word	gContestResources
	.word	gAIScriptPtr
.L509:
	ldr	r1, .L513
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L510:
	pop	{r0}
	bx	r0
.L514:
	.align	2, 0
.L513:
	.word	gAIScriptPtr
.Lfe89:
	.size	 ContestAICmd_if_can_participate,.Lfe89-ContestAICmd_if_can_participate
	.align	2, 0
	.type	 ContestAICmd_if_cannot_participate,function
	.thumb_func
ContestAICmd_if_cannot_participate:
	push	{lr}
	bl	ContestAICmd_check_can_participate
	ldr	r0, .L518
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L516	@cond_branch
	ldr	r3, .L518+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L517
.L519:
	.align	2, 0
.L518:
	.word	gContestResources
	.word	gAIScriptPtr
.L516:
	ldr	r1, .L520
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L517:
	pop	{r0}
	bx	r0
.L521:
	.align	2, 0
.L520:
	.word	gAIScriptPtr
.Lfe90:
	.size	 ContestAICmd_if_cannot_participate,.Lfe90-ContestAICmd_if_cannot_participate
	.align	2, 0
	.type	 ContestAICmd_get_completed_combo,function
	.thumb_func
ContestAICmd_get_completed_combo:
	push	{r4, lr}
	ldr	r4, .L523
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetContestantIdByTurn
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L523+0x4
	ldr	r1, [r1]
	ldr	r3, [r1, #0xc]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x15]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1f
	strh	r0, [r3, #0x18]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L524:
	.align	2, 0
.L523:
	.word	gAIScriptPtr
	.word	gContestResources
.Lfe91:
	.size	 ContestAICmd_get_completed_combo,.Lfe91-ContestAICmd_get_completed_combo
	.align	2, 0
	.type	 ContestAICmd_if_completed_combo,function
	.thumb_func
ContestAICmd_if_completed_combo:
	push	{lr}
	bl	ContestAICmd_get_completed_combo
	ldr	r0, .L528
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L526	@cond_branch
	ldr	r3, .L528+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L527
.L529:
	.align	2, 0
.L528:
	.word	gContestResources
	.word	gAIScriptPtr
.L526:
	ldr	r1, .L530
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L527:
	pop	{r0}
	bx	r0
.L531:
	.align	2, 0
.L530:
	.word	gAIScriptPtr
.Lfe92:
	.size	 ContestAICmd_if_completed_combo,.Lfe92-ContestAICmd_if_completed_combo
	.align	2, 0
	.type	 ContestAICmd_if_not_completed_combo,function
	.thumb_func
ContestAICmd_if_not_completed_combo:
	push	{lr}
	bl	ContestAICmd_get_completed_combo
	ldr	r0, .L535
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L533	@cond_branch
	ldr	r3, .L535+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L534
.L536:
	.align	2, 0
.L535:
	.word	gContestResources
	.word	gAIScriptPtr
.L533:
	ldr	r1, .L537
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L534:
	pop	{r0}
	bx	r0
.L538:
	.align	2, 0
.L537:
	.word	gAIScriptPtr
.Lfe93:
	.size	 ContestAICmd_if_not_completed_combo,.Lfe93-ContestAICmd_if_not_completed_combo
	.align	2, 0
	.type	 ContestAICmd_get_points_diff,function
	.thumb_func
ContestAICmd_get_points_diff:
	push	{r4, r5, lr}
	ldr	r4, .L540
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetContestantIdByTurn
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L540+0x4
	ldr	r1, [r1]
	ldr	r5, [r1, #0xc]
	ldr	r3, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	add	r0, r5, #0
	add	r0, r0, #0x41
	ldrb	r2, [r0]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r1, #0x4]
	ldrh	r0, [r0, #0x4]
	sub	r1, r1, r0
	strh	r1, [r5, #0x18]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L541:
	.align	2, 0
.L540:
	.word	gAIScriptPtr
	.word	gContestResources
.Lfe94:
	.size	 ContestAICmd_get_points_diff,.Lfe94-ContestAICmd_get_points_diff
	.align	2, 0
	.type	 ContestAICmd_if_points_more_than_mon,function
	.thumb_func
ContestAICmd_if_points_more_than_mon:
	push	{lr}
	bl	ContestAICmd_get_points_diff
	ldr	r0, .L545
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bge	.L543	@cond_branch
	ldr	r3, .L545+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L544
.L546:
	.align	2, 0
.L545:
	.word	gContestResources
	.word	gAIScriptPtr
.L543:
	ldr	r1, .L547
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L544:
	pop	{r0}
	bx	r0
.L548:
	.align	2, 0
.L547:
	.word	gAIScriptPtr
.Lfe95:
	.size	 ContestAICmd_if_points_more_than_mon,.Lfe95-ContestAICmd_if_points_more_than_mon
	.align	2, 0
	.type	 ContestAICmd_if_points_less_than_mon,function
	.thumb_func
ContestAICmd_if_points_less_than_mon:
	push	{lr}
	bl	ContestAICmd_get_points_diff
	ldr	r0, .L552
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	ble	.L550	@cond_branch
	ldr	r3, .L552+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L551
.L553:
	.align	2, 0
.L552:
	.word	gContestResources
	.word	gAIScriptPtr
.L550:
	ldr	r1, .L554
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L551:
	pop	{r0}
	bx	r0
.L555:
	.align	2, 0
.L554:
	.word	gAIScriptPtr
.Lfe96:
	.size	 ContestAICmd_if_points_less_than_mon,.Lfe96-ContestAICmd_if_points_less_than_mon
	.align	2, 0
	.type	 ContestAICmd_if_points_eq_mon,function
	.thumb_func
ContestAICmd_if_points_eq_mon:
	push	{lr}
	bl	ContestAICmd_get_points_diff
	ldr	r0, .L559
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L557	@cond_branch
	ldr	r3, .L559+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L558
.L560:
	.align	2, 0
.L559:
	.word	gContestResources
	.word	gAIScriptPtr
.L557:
	ldr	r1, .L561
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L558:
	pop	{r0}
	bx	r0
.L562:
	.align	2, 0
.L561:
	.word	gAIScriptPtr
.Lfe97:
	.size	 ContestAICmd_if_points_eq_mon,.Lfe97-ContestAICmd_if_points_eq_mon
	.align	2, 0
	.type	 ContestAICmd_if_points_not_eq_mon,function
	.thumb_func
ContestAICmd_if_points_not_eq_mon:
	push	{lr}
	bl	ContestAICmd_get_points_diff
	ldr	r0, .L566
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L564	@cond_branch
	ldr	r3, .L566+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L565
.L567:
	.align	2, 0
.L566:
	.word	gContestResources
	.word	gAIScriptPtr
.L564:
	ldr	r1, .L568
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L565:
	pop	{r0}
	bx	r0
.L569:
	.align	2, 0
.L568:
	.word	gAIScriptPtr
.Lfe98:
	.size	 ContestAICmd_if_points_not_eq_mon,.Lfe98-ContestAICmd_if_points_not_eq_mon
	.align	2, 0
	.type	 ContestAICmd_get_preliminary_points_diff,function
	.thumb_func
ContestAICmd_get_preliminary_points_diff:
	push	{r4, lr}
	ldr	r4, .L571
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetContestantIdByTurn
	lsl	r0, r0, #0x18
	ldr	r1, .L571+0x4
	ldr	r1, [r1]
	ldr	r3, [r1, #0xc]
	ldr	r2, .L571+0x8
	lsr	r0, r0, #0x17
	add	r0, r0, r2
	add	r1, r3, #0
	add	r1, r1, #0x41
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	sub	r0, r0, r1
	strh	r0, [r3, #0x18]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L572:
	.align	2, 0
.L571:
	.word	gAIScriptPtr
	.word	gContestResources
	.word	gContestMonRound1Points
.Lfe99:
	.size	 ContestAICmd_get_preliminary_points_diff,.Lfe99-ContestAICmd_get_preliminary_points_diff
	.align	2, 0
	.type	 ContestAICmd_if_preliminary_points_more_than_mon,function
	.thumb_func
ContestAICmd_if_preliminary_points_more_than_mon:
	push	{lr}
	bl	ContestAICmd_get_preliminary_points_diff
	ldr	r0, .L576
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bge	.L574	@cond_branch
	ldr	r3, .L576+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L575
.L577:
	.align	2, 0
.L576:
	.word	gContestResources
	.word	gAIScriptPtr
.L574:
	ldr	r1, .L578
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L575:
	pop	{r0}
	bx	r0
.L579:
	.align	2, 0
.L578:
	.word	gAIScriptPtr
.Lfe100:
	.size	 ContestAICmd_if_preliminary_points_more_than_mon,.Lfe100-ContestAICmd_if_preliminary_points_more_than_mon
	.align	2, 0
	.type	 ContestAICmd_if_preliminary_points_less_than_mon,function
	.thumb_func
ContestAICmd_if_preliminary_points_less_than_mon:
	push	{lr}
	bl	ContestAICmd_get_preliminary_points_diff
	ldr	r0, .L583
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	ble	.L581	@cond_branch
	ldr	r3, .L583+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L582
.L584:
	.align	2, 0
.L583:
	.word	gContestResources
	.word	gAIScriptPtr
.L581:
	ldr	r1, .L585
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L582:
	pop	{r0}
	bx	r0
.L586:
	.align	2, 0
.L585:
	.word	gAIScriptPtr
.Lfe101:
	.size	 ContestAICmd_if_preliminary_points_less_than_mon,.Lfe101-ContestAICmd_if_preliminary_points_less_than_mon
	.align	2, 0
	.type	 ContestAICmd_if_preliminary_points_eq_mon,function
	.thumb_func
ContestAICmd_if_preliminary_points_eq_mon:
	push	{lr}
	bl	ContestAICmd_get_preliminary_points_diff
	ldr	r0, .L590
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L588	@cond_branch
	ldr	r3, .L590+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L589
.L591:
	.align	2, 0
.L590:
	.word	gContestResources
	.word	gAIScriptPtr
.L588:
	ldr	r1, .L592
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L589:
	pop	{r0}
	bx	r0
.L593:
	.align	2, 0
.L592:
	.word	gAIScriptPtr
.Lfe102:
	.size	 ContestAICmd_if_preliminary_points_eq_mon,.Lfe102-ContestAICmd_if_preliminary_points_eq_mon
	.align	2, 0
	.type	 ContestAICmd_if_preliminary_points_not_eq_mon,function
	.thumb_func
ContestAICmd_if_preliminary_points_not_eq_mon:
	push	{lr}
	bl	ContestAICmd_get_preliminary_points_diff
	ldr	r0, .L597
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L595	@cond_branch
	ldr	r3, .L597+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L596
.L598:
	.align	2, 0
.L597:
	.word	gContestResources
	.word	gAIScriptPtr
.L595:
	ldr	r1, .L599
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L596:
	pop	{r0}
	bx	r0
.L600:
	.align	2, 0
.L599:
	.word	gAIScriptPtr
.Lfe103:
	.size	 ContestAICmd_if_preliminary_points_not_eq_mon,.Lfe103-ContestAICmd_if_preliminary_points_not_eq_mon
	.align	2, 0
	.type	 ContestAICmd_get_used_moves_effect,function
	.thumb_func
ContestAICmd_get_used_moves_effect:
	push	{r4, r5, lr}
	ldr	r5, .L602
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetContestantIdByTurn
	lsl	r0, r0, #0x18
	ldr	r3, [r5]
	ldrb	r2, [r3, #0x2]
	ldr	r1, .L602+0x4
	ldr	r4, [r1]
	ldr	r1, [r4]
	lsr	r0, r0, #0x17
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	add	r1, r1, #0x1c
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r2, [r4, #0xc]
	ldr	r1, .L602+0x8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r2, #0x18]
	add	r3, r3, #0x3
	str	r3, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L603:
	.align	2, 0
.L602:
	.word	gAIScriptPtr
	.word	gContestResources
	.word	gContestMoves
.Lfe104:
	.size	 ContestAICmd_get_used_moves_effect,.Lfe104-ContestAICmd_get_used_moves_effect
	.align	2, 0
	.type	 ContestAICmd_if_used_moves_effect_less_than,function
	.thumb_func
ContestAICmd_if_used_moves_effect_less_than:
	push	{lr}
	bl	ContestAICmd_get_used_moves_effect
	ldr	r0, .L607
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L607+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bge	.L605	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L606
.L608:
	.align	2, 0
.L607:
	.word	gContestResources
	.word	gAIScriptPtr
.L605:
	add	r0, r2, #0x5
	str	r0, [r3]
.L606:
	pop	{r0}
	bx	r0
.Lfe105:
	.size	 ContestAICmd_if_used_moves_effect_less_than,.Lfe105-ContestAICmd_if_used_moves_effect_less_than
	.align	2, 0
	.type	 ContestAICmd_if_used_moves_effect_more_than,function
	.thumb_func
ContestAICmd_if_used_moves_effect_more_than:
	push	{lr}
	bl	ContestAICmd_get_used_moves_effect
	ldr	r0, .L612
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L612+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	ble	.L610	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L611
.L613:
	.align	2, 0
.L612:
	.word	gContestResources
	.word	gAIScriptPtr
.L610:
	add	r0, r2, #0x5
	str	r0, [r3]
.L611:
	pop	{r0}
	bx	r0
.Lfe106:
	.size	 ContestAICmd_if_used_moves_effect_more_than,.Lfe106-ContestAICmd_if_used_moves_effect_more_than
	.align	2, 0
	.type	 ContestAICmd_if_used_moves_effect_eq,function
	.thumb_func
ContestAICmd_if_used_moves_effect_eq:
	push	{lr}
	bl	ContestAICmd_get_used_moves_effect
	ldr	r0, .L617
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L617+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L615	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L616
.L618:
	.align	2, 0
.L617:
	.word	gContestResources
	.word	gAIScriptPtr
.L615:
	add	r0, r2, #0x5
	str	r0, [r3]
.L616:
	pop	{r0}
	bx	r0
.Lfe107:
	.size	 ContestAICmd_if_used_moves_effect_eq,.Lfe107-ContestAICmd_if_used_moves_effect_eq
	.align	2, 0
	.type	 ContestAICmd_if_used_moves_effect_not_eq,function
	.thumb_func
ContestAICmd_if_used_moves_effect_not_eq:
	push	{lr}
	bl	ContestAICmd_get_used_moves_effect
	ldr	r0, .L622
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L622+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L620	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L621
.L623:
	.align	2, 0
.L622:
	.word	gContestResources
	.word	gAIScriptPtr
.L620:
	add	r0, r2, #0x5
	str	r0, [r3]
.L621:
	pop	{r0}
	bx	r0
.Lfe108:
	.size	 ContestAICmd_if_used_moves_effect_not_eq,.Lfe108-ContestAICmd_if_used_moves_effect_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_used_moves_excitement,function
	.thumb_func
ContestAICmd_get_used_moves_excitement:
	push	{r4, r5, lr}
	ldr	r5, .L625
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetContestantIdByTurn
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, [r5]
	ldrb	r2, [r3, #0x2]
	ldr	r1, .L625+0x4
	ldr	r4, [r1]
	ldr	r1, [r4]
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	add	r1, r1, #0x44
	add	r1, r1, r0
	ldr	r2, [r4, #0xc]
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	strh	r0, [r2, #0x18]
	add	r3, r3, #0x3
	str	r3, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L626:
	.align	2, 0
.L625:
	.word	gAIScriptPtr
	.word	gContestResources
.Lfe109:
	.size	 ContestAICmd_get_used_moves_excitement,.Lfe109-ContestAICmd_get_used_moves_excitement
	.align	2, 0
	.type	 ContestAICmd_if_used_moves_excitement_less_than,function
	.thumb_func
ContestAICmd_if_used_moves_excitement_less_than:
	push	{lr}
	bl	ContestAICmd_get_used_moves_excitement
	ldr	r0, .L630
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L630+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bge	.L628	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L629
.L631:
	.align	2, 0
.L630:
	.word	gContestResources
	.word	gAIScriptPtr
.L628:
	add	r0, r2, #0x5
	str	r0, [r3]
.L629:
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 ContestAICmd_if_used_moves_excitement_less_than,.Lfe110-ContestAICmd_if_used_moves_excitement_less_than
	.align	2, 0
	.type	 ContestAICmd_if_used_moves_excitement_more_than,function
	.thumb_func
ContestAICmd_if_used_moves_excitement_more_than:
	push	{lr}
	bl	ContestAICmd_get_used_moves_excitement
	ldr	r0, .L635
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L635+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	ble	.L633	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L634
.L636:
	.align	2, 0
.L635:
	.word	gContestResources
	.word	gAIScriptPtr
.L633:
	add	r0, r2, #0x5
	str	r0, [r3]
.L634:
	pop	{r0}
	bx	r0
.Lfe111:
	.size	 ContestAICmd_if_used_moves_excitement_more_than,.Lfe111-ContestAICmd_if_used_moves_excitement_more_than
	.align	2, 0
	.type	 ContestAICmd_if_used_moves_excitement_eq,function
	.thumb_func
ContestAICmd_if_used_moves_excitement_eq:
	push	{lr}
	bl	ContestAICmd_get_used_moves_excitement
	ldr	r0, .L640
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L640+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L638	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L639
.L641:
	.align	2, 0
.L640:
	.word	gContestResources
	.word	gAIScriptPtr
.L638:
	add	r0, r2, #0x5
	str	r0, [r3]
.L639:
	pop	{r0}
	bx	r0
.Lfe112:
	.size	 ContestAICmd_if_used_moves_excitement_eq,.Lfe112-ContestAICmd_if_used_moves_excitement_eq
	.align	2, 0
	.type	 ContestAICmd_if_used_moves_excitement_not_eq,function
	.thumb_func
ContestAICmd_if_used_moves_excitement_not_eq:
	push	{lr}
	bl	ContestAICmd_get_used_moves_excitement
	ldr	r0, .L645
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L645+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L643	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L644
.L646:
	.align	2, 0
.L645:
	.word	gContestResources
	.word	gAIScriptPtr
.L643:
	add	r0, r2, #0x5
	str	r0, [r3]
.L644:
	pop	{r0}
	bx	r0
.Lfe113:
	.size	 ContestAICmd_if_used_moves_excitement_not_eq,.Lfe113-ContestAICmd_if_used_moves_excitement_not_eq
	.align	2, 0
	.type	 ContestAICmd_get_used_moves_effect_type,function
	.thumb_func
ContestAICmd_get_used_moves_effect_type:
	push	{r4, r5, lr}
	ldr	r5, .L648
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetContestantIdByTurn
	lsl	r0, r0, #0x18
	ldr	r3, [r5]
	ldrb	r2, [r3, #0x2]
	ldr	r1, .L648+0x4
	ldr	r4, [r1]
	ldr	r1, [r4]
	lsr	r0, r0, #0x17
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	add	r1, r1, #0x1c
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r4, [r4, #0xc]
	ldr	r2, .L648+0x8
	ldr	r1, .L648+0xc
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r4, #0x18]
	add	r3, r3, #0x3
	str	r3, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L649:
	.align	2, 0
.L648:
	.word	gAIScriptPtr
	.word	gContestResources
	.word	gContestEffects
	.word	gContestMoves
.Lfe114:
	.size	 ContestAICmd_get_used_moves_effect_type,.Lfe114-ContestAICmd_get_used_moves_effect_type
	.align	2, 0
	.type	 ContestAICmd_if_used_moves_effect_type_eq,function
	.thumb_func
ContestAICmd_if_used_moves_effect_type_eq:
	push	{lr}
	bl	ContestAICmd_get_used_moves_effect_type
	ldr	r0, .L653
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L653+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L651	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L652
.L654:
	.align	2, 0
.L653:
	.word	gContestResources
	.word	gAIScriptPtr
.L651:
	add	r0, r2, #0x5
	str	r0, [r3]
.L652:
	pop	{r0}
	bx	r0
.Lfe115:
	.size	 ContestAICmd_if_used_moves_effect_type_eq,.Lfe115-ContestAICmd_if_used_moves_effect_type_eq
	.align	2, 0
	.type	 ContestAICmd_if_used_moves_effect_type_not_eq,function
	.thumb_func
ContestAICmd_if_used_moves_effect_type_not_eq:
	push	{lr}
	bl	ContestAICmd_get_used_moves_effect_type
	ldr	r0, .L658
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	ldr	r3, .L658+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L656	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L657
.L659:
	.align	2, 0
.L658:
	.word	gContestResources
	.word	gAIScriptPtr
.L656:
	add	r0, r2, #0x5
	str	r0, [r3]
.L657:
	pop	{r0}
	bx	r0
.Lfe116:
	.size	 ContestAICmd_if_used_moves_effect_type_not_eq,.Lfe116-ContestAICmd_if_used_moves_effect_type_not_eq
	.align	2, 0
	.type	 ContestAICmd_save_result,function
	.thumb_func
ContestAICmd_save_result:
	push	{r4, lr}
	ldr	r0, .L661
	ldr	r0, [r0]
	ldr	r3, [r0, #0xc]
	ldr	r4, .L661+0x4
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x1
	add	r1, r3, #0
	add	r1, r1, #0x1a
	add	r1, r1, r0
	ldrh	r0, [r3, #0x18]
	strh	r0, [r1]
	add	r2, r2, #0x2
	str	r2, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L662:
	.align	2, 0
.L661:
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe117:
	.size	 ContestAICmd_save_result,.Lfe117-ContestAICmd_save_result
	.align	2, 0
	.type	 ContestAICmd_setvar,function
	.thumb_func
ContestAICmd_setvar:
	push	{r4, lr}
	ldr	r0, .L664
	ldr	r0, [r0]
	ldr	r3, [r0, #0xc]
	ldr	r4, .L664+0x4
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x1
	add	r3, r3, #0x1a
	add	r3, r3, r0
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	strh	r1, [r3]
	add	r2, r2, #0x4
	str	r2, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L665:
	.align	2, 0
.L664:
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe118:
	.size	 ContestAICmd_setvar,.Lfe118-ContestAICmd_setvar
	.align	2, 0
	.type	 ContestAICmd_add,function
	.thumb_func
ContestAICmd_add:
	push	{r4, lr}
	ldr	r0, .L667
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L667+0x4
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1
	add	r2, r2, #0x1a
	add	r2, r2, r0
	mov	r1, #0x2
	ldrsb	r1, [r3, r1]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrh	r0, [r2]
	add	r1, r1, r0
	strh	r1, [r2]
	add	r3, r3, #0x4
	str	r3, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L668:
	.align	2, 0
.L667:
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe119:
	.size	 ContestAICmd_add,.Lfe119-ContestAICmd_add
	.align	2, 0
	.type	 ContestAICmd_addvar,function
	.thumb_func
ContestAICmd_addvar:
	push	{r4, lr}
	ldr	r0, .L670
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L670+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	lsl	r1, r1, #0x1
	add	r2, r2, #0x1a
	add	r1, r2, r1
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x1
	add	r2, r2, r0
	ldrh	r0, [r2]
	ldrh	r2, [r1]
	add	r0, r0, r2
	strh	r0, [r1]
	add	r3, r3, #0x3
	str	r3, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L671:
	.align	2, 0
.L670:
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe120:
	.size	 ContestAICmd_addvar,.Lfe120-ContestAICmd_addvar
	.align	2, 0
	.type	 ContestAICmd_addvar_duplicate,function
	.thumb_func
ContestAICmd_addvar_duplicate:
	push	{r4, lr}
	ldr	r0, .L673
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L673+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	lsl	r1, r1, #0x1
	add	r2, r2, #0x1a
	add	r1, r2, r1
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x1
	add	r2, r2, r0
	ldrh	r0, [r2]
	ldrh	r2, [r1]
	add	r0, r0, r2
	strh	r0, [r1]
	add	r3, r3, #0x3
	str	r3, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L674:
	.align	2, 0
.L673:
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe121:
	.size	 ContestAICmd_addvar_duplicate,.Lfe121-ContestAICmd_addvar_duplicate
	.align	2, 0
	.type	 ContestAICmd_if_less_than,function
	.thumb_func
ContestAICmd_if_less_than:
	push	{r4, lr}
	ldr	r0, .L678
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	ldr	r4, .L678+0x4
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1a
	add	r1, r1, r0
	mov	r0, #0x0
	ldrsh	r2, [r1, r0]
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r2, r1
	bge	.L676	@cond_branch
	ldrb	r1, [r3, #0x4]
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L677
.L679:
	.align	2, 0
.L678:
	.word	gContestResources
	.word	gAIScriptPtr
.L676:
	add	r0, r3, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L677:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe122:
	.size	 ContestAICmd_if_less_than,.Lfe122-ContestAICmd_if_less_than
	.align	2, 0
	.type	 ContestAICmd_if_greater_than,function
	.thumb_func
ContestAICmd_if_greater_than:
	push	{r4, lr}
	ldr	r0, .L683
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	ldr	r4, .L683+0x4
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1a
	add	r1, r1, r0
	mov	r0, #0x0
	ldrsh	r2, [r1, r0]
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r2, r1
	ble	.L681	@cond_branch
	ldrb	r1, [r3, #0x4]
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L682
.L684:
	.align	2, 0
.L683:
	.word	gContestResources
	.word	gAIScriptPtr
.L681:
	add	r0, r3, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L682:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe123:
	.size	 ContestAICmd_if_greater_than,.Lfe123-ContestAICmd_if_greater_than
	.align	2, 0
	.type	 ContestAICmd_if_eq,function
	.thumb_func
ContestAICmd_if_eq:
	push	{r4, lr}
	ldr	r0, .L688
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	ldr	r4, .L688+0x4
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1a
	add	r1, r1, r0
	mov	r0, #0x0
	ldrsh	r2, [r1, r0]
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r2, r1
	bne	.L686	@cond_branch
	ldrb	r1, [r3, #0x4]
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L687
.L689:
	.align	2, 0
.L688:
	.word	gContestResources
	.word	gAIScriptPtr
.L686:
	add	r0, r3, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L687:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe124:
	.size	 ContestAICmd_if_eq,.Lfe124-ContestAICmd_if_eq
	.align	2, 0
	.type	 ContestAICmd_if_not_eq,function
	.thumb_func
ContestAICmd_if_not_eq:
	push	{r4, lr}
	ldr	r0, .L693
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	ldr	r4, .L693+0x4
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1a
	add	r1, r1, r0
	mov	r0, #0x0
	ldrsh	r2, [r1, r0]
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	cmp	r2, r1
	beq	.L691	@cond_branch
	ldrb	r1, [r3, #0x4]
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L692
.L694:
	.align	2, 0
.L693:
	.word	gContestResources
	.word	gAIScriptPtr
.L691:
	add	r0, r3, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L692:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe125:
	.size	 ContestAICmd_if_not_eq,.Lfe125-ContestAICmd_if_not_eq
	.align	2, 0
	.type	 ContestAICmd_if_less_than_var,function
	.thumb_func
ContestAICmd_if_less_than_var:
	push	{r4, r5, lr}
	ldr	r0, .L698
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L698+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	lsl	r1, r1, #0x1
	add	r2, r2, #0x1a
	add	r1, r2, r1
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x1
	add	r2, r2, r0
	mov	r0, #0x0
	ldrsh	r1, [r1, r0]
	mov	r5, #0x0
	ldrsh	r0, [r2, r5]
	cmp	r1, r0
	bge	.L696	@cond_branch
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L697
.L699:
	.align	2, 0
.L698:
	.word	gContestResources
	.word	gAIScriptPtr
.L696:
	add	r0, r3, #0x7
	str	r0, [r4]
.L697:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe126:
	.size	 ContestAICmd_if_less_than_var,.Lfe126-ContestAICmd_if_less_than_var
	.align	2, 0
	.type	 ContestAICmd_if_greater_than_var,function
	.thumb_func
ContestAICmd_if_greater_than_var:
	push	{r4, r5, lr}
	ldr	r0, .L703
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L703+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	lsl	r1, r1, #0x1
	add	r2, r2, #0x1a
	add	r1, r2, r1
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x1
	add	r2, r2, r0
	mov	r0, #0x0
	ldrsh	r1, [r1, r0]
	mov	r5, #0x0
	ldrsh	r0, [r2, r5]
	cmp	r1, r0
	ble	.L701	@cond_branch
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L702
.L704:
	.align	2, 0
.L703:
	.word	gContestResources
	.word	gAIScriptPtr
.L701:
	add	r0, r3, #0x7
	str	r0, [r4]
.L702:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe127:
	.size	 ContestAICmd_if_greater_than_var,.Lfe127-ContestAICmd_if_greater_than_var
	.align	2, 0
	.type	 ContestAICmd_if_eq_var,function
	.thumb_func
ContestAICmd_if_eq_var:
	push	{r4, r5, lr}
	ldr	r0, .L708
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L708+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	lsl	r1, r1, #0x1
	add	r2, r2, #0x1a
	add	r1, r2, r1
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x1
	add	r2, r2, r0
	mov	r0, #0x0
	ldrsh	r1, [r1, r0]
	mov	r5, #0x0
	ldrsh	r0, [r2, r5]
	cmp	r1, r0
	bne	.L706	@cond_branch
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L707
.L709:
	.align	2, 0
.L708:
	.word	gContestResources
	.word	gAIScriptPtr
.L706:
	add	r0, r3, #0x7
	str	r0, [r4]
.L707:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe128:
	.size	 ContestAICmd_if_eq_var,.Lfe128-ContestAICmd_if_eq_var
	.align	2, 0
	.type	 ContestAICmd_if_not_eq_var,function
	.thumb_func
ContestAICmd_if_not_eq_var:
	push	{r4, r5, lr}
	ldr	r0, .L713
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldr	r4, .L713+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	lsl	r1, r1, #0x1
	add	r2, r2, #0x1a
	add	r1, r2, r1
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x1
	add	r2, r2, r0
	mov	r0, #0x0
	ldrsh	r1, [r1, r0]
	mov	r5, #0x0
	ldrsh	r0, [r2, r5]
	cmp	r1, r0
	beq	.L711	@cond_branch
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L712
.L714:
	.align	2, 0
.L713:
	.word	gContestResources
	.word	gAIScriptPtr
.L711:
	add	r0, r3, #0x7
	str	r0, [r4]
.L712:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe129:
	.size	 ContestAICmd_if_not_eq_var,.Lfe129-ContestAICmd_if_not_eq_var
	.align	2, 0
	.type	 ContestAICmd_if_random_less_than,function
	.thumb_func
ContestAICmd_if_random_less_than:
	push	{r4, r5, lr}
	bl	Random
	mov	r2, #0xff
	and	r2, r2, r0
	ldr	r0, .L718
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	ldr	r4, .L718+0x4
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1a
	add	r1, r1, r0
	mov	r5, #0x0
	ldrsh	r0, [r1, r5]
	cmp	r2, r0
	bge	.L716	@cond_branch
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L717
.L719:
	.align	2, 0
.L718:
	.word	gContestResources
	.word	gAIScriptPtr
.L716:
	add	r0, r3, #0x6
	str	r0, [r4]
.L717:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe130:
	.size	 ContestAICmd_if_random_less_than,.Lfe130-ContestAICmd_if_random_less_than
	.align	2, 0
	.type	 ContestAICmd_if_random_greater_than,function
	.thumb_func
ContestAICmd_if_random_greater_than:
	push	{r4, r5, lr}
	bl	Random
	mov	r2, #0xff
	and	r2, r2, r0
	ldr	r0, .L723
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	ldr	r4, .L723+0x4
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1a
	add	r1, r1, r0
	mov	r5, #0x0
	ldrsh	r0, [r1, r5]
	cmp	r2, r0
	ble	.L721	@cond_branch
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L722
.L724:
	.align	2, 0
.L723:
	.word	gContestResources
	.word	gAIScriptPtr
.L721:
	add	r0, r3, #0x6
	str	r0, [r4]
.L722:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe131:
	.size	 ContestAICmd_if_random_greater_than,.Lfe131-ContestAICmd_if_random_greater_than
	.align	2, 0
	.type	 ContestAICmd_goto,function
	.thumb_func
ContestAICmd_goto:
	ldr	r3, .L726
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	bx	lr
.L727:
	.align	2, 0
.L726:
	.word	gAIScriptPtr
.Lfe132:
	.size	 ContestAICmd_goto,.Lfe132-ContestAICmd_goto
	.align	2, 0
	.type	 ContestAICmd_call,function
	.thumb_func
ContestAICmd_call:
	push	{r4, lr}
	ldr	r4, .L729
	ldr	r0, [r4]
	add	r0, r0, #0x5
	bl	AIStackPushVar
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L730:
	.align	2, 0
.L729:
	.word	gAIScriptPtr
.Lfe133:
	.size	 ContestAICmd_call,.Lfe133-ContestAICmd_call
	.align	2, 0
	.type	 ContestAICmd_end,function
	.thumb_func
ContestAICmd_end:
	push	{lr}
	bl	AIStackPop
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L732	@cond_branch
	ldr	r0, .L733
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
.L732:
	pop	{r0}
	bx	r0
.L734:
	.align	2, 0
.L733:
	.word	gContestResources
.Lfe134:
	.size	 ContestAICmd_end,.Lfe134-ContestAICmd_end
	.align	2, 0
	.type	 AIStackPushVar,function
	.thumb_func
AIStackPushVar:
	push	{r4, lr}
	ldr	r1, .L736
	ldr	r1, [r1]
	ldr	r3, [r1, #0xc]
	add	r4, r3, #0
	add	r4, r4, #0x40
	ldrb	r1, [r4]
	add	r2, r1, #0x1
	strb	r2, [r4]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x16
	add	r3, r3, #0x20
	add	r3, r3, r1
	str	r0, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L737:
	.align	2, 0
.L736:
	.word	gContestResources
.Lfe135:
	.size	 AIStackPushVar,.Lfe135-AIStackPushVar
	.align	2, 0
	.type	 AIStackPop,function
	.thumb_func
AIStackPop:
	push	{lr}
	ldr	r3, .L742
	ldr	r0, [r3]
	ldr	r0, [r0, #0xc]
	add	r1, r0, #0
	add	r1, r1, #0x40
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L739	@cond_branch
	mov	r0, #0x0
	b	.L741
.L743:
	.align	2, 0
.L742:
	.word	gContestResources
.L739:
	sub	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r2, .L744
	ldr	r0, [r3]
	ldr	r1, [r0, #0xc]
	add	r0, r1, #0
	add	r0, r0, #0x40
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r1, r1, #0x20
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r2]
	mov	r0, #0x1
.L741:
	pop	{r1}
	bx	r1
.L745:
	.align	2, 0
.L744:
	.word	gAIScriptPtr
.Lfe136:
	.size	 AIStackPop,.Lfe136-AIStackPop
	.align	2, 0
	.type	 ContestAICmd_check_user_has_exciting_move,function
	.thumb_func
ContestAICmd_check_user_has_exciting_move:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	mov	r4, #0x0
	ldr	r6, .L754
.L750:
	lsl	r1, r4, #0x1
	ldr	r0, .L754+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r1, r1, r6
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L749	@cond_branch
	bl	Contest_GetMoveExcitement
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L749	@cond_branch
	mov	r5, #0x1
	b	.L748
.L755:
	.align	2, 0
.L754:
	.word	gContestMons+0x1e
	.word	gContestResources
.L749:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L750	@cond_branch
.L748:
	ldr	r0, .L756
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	strh	r5, [r0, #0x18]
	ldr	r1, .L756+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L757:
	.align	2, 0
.L756:
	.word	gContestResources
	.word	gAIScriptPtr
.Lfe137:
	.size	 ContestAICmd_check_user_has_exciting_move,.Lfe137-ContestAICmd_check_user_has_exciting_move
	.align	2, 0
	.type	 ContestAICmd_if_user_has_exciting_move,function
	.thumb_func
ContestAICmd_if_user_has_exciting_move:
	push	{lr}
	bl	ContestAICmd_check_user_has_exciting_move
	ldr	r0, .L761
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L759	@cond_branch
	ldr	r3, .L761+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L760
.L762:
	.align	2, 0
.L761:
	.word	gContestResources
	.word	gAIScriptPtr
.L759:
	ldr	r1, .L763
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L760:
	pop	{r0}
	bx	r0
.L764:
	.align	2, 0
.L763:
	.word	gAIScriptPtr
.Lfe138:
	.size	 ContestAICmd_if_user_has_exciting_move,.Lfe138-ContestAICmd_if_user_has_exciting_move
	.align	2, 0
	.type	 ContestAICmd_if_user_doesnt_have_exciting_move,function
	.thumb_func
ContestAICmd_if_user_doesnt_have_exciting_move:
	push	{lr}
	bl	ContestAICmd_check_user_has_exciting_move
	ldr	r0, .L768
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L766	@cond_branch
	ldr	r3, .L768+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L767
.L769:
	.align	2, 0
.L768:
	.word	gContestResources
	.word	gAIScriptPtr
.L766:
	ldr	r1, .L770
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L767:
	pop	{r0}
	bx	r0
.L771:
	.align	2, 0
.L770:
	.word	gAIScriptPtr
.Lfe139:
	.size	 ContestAICmd_if_user_doesnt_have_exciting_move,.Lfe139-ContestAICmd_if_user_doesnt_have_exciting_move
	.align	2, 0
	.type	 ContestAICmd_check_user_has_move,function
	.thumb_func
ContestAICmd_check_user_has_move:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	ldr	r3, .L780
	ldr	r0, [r3]
	ldrb	r5, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r5, r5, r0
	mov	r4, #0x0
	ldr	r0, .L780+0x4
	mov	ip, r0
	ldr	r2, .L780+0x8
	ldr	r0, [r2]
	ldr	r0, [r0, #0xc]
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	mov	r1, ip
	add	r1, r1, #0x1e
	add	r0, r0, r1
	ldrh	r0, [r0]
	b	.L779
.L781:
	.align	2, 0
.L780:
	.word	gAIScriptPtr
	.word	gContestMons
	.word	gContestResources
.L775:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L774	@cond_branch
	lsl	r1, r4, #0x1
	ldr	r0, [r2]
	ldr	r0, [r0, #0xc]
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	mov	r0, ip
	add	r0, r0, #0x1e
	add	r1, r1, r0
	ldrh	r0, [r1]
.L779:
	cmp	r0, r5
	bne	.L775	@cond_branch
	mov	r6, #0x1
.L774:
	ldr	r0, [r2]
	ldr	r0, [r0, #0xc]
	strh	r6, [r0, #0x18]
	ldr	r0, [r3]
	add	r0, r0, #0x3
	str	r0, [r3]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe140:
	.size	 ContestAICmd_check_user_has_move,.Lfe140-ContestAICmd_check_user_has_move
	.align	2, 0
	.type	 ContestAICmd_if_user_has_move,function
	.thumb_func
ContestAICmd_if_user_has_move:
	push	{lr}
	bl	ContestAICmd_check_user_has_move
	ldr	r0, .L785
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L783	@cond_branch
	ldr	r3, .L785+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L784
.L786:
	.align	2, 0
.L785:
	.word	gContestResources
	.word	gAIScriptPtr
.L783:
	ldr	r1, .L787
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L784:
	pop	{r0}
	bx	r0
.L788:
	.align	2, 0
.L787:
	.word	gAIScriptPtr
.Lfe141:
	.size	 ContestAICmd_if_user_has_move,.Lfe141-ContestAICmd_if_user_has_move
	.align	2, 0
	.type	 ContestAICmd_if_user_doesnt_have_move,function
	.thumb_func
ContestAICmd_if_user_doesnt_have_move:
	push	{lr}
	bl	ContestAICmd_check_user_has_move
	ldr	r0, .L792
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L790	@cond_branch
	ldr	r3, .L792+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L791
.L793:
	.align	2, 0
.L792:
	.word	gContestResources
	.word	gAIScriptPtr
.L790:
	ldr	r1, .L794
	ldr	r0, [r1]
	add	r0, r0, #0x4
	str	r0, [r1]
.L791:
	pop	{r0}
	bx	r0
.L795:
	.align	2, 0
.L794:
	.word	gAIScriptPtr
.Lfe142:
	.size	 ContestAICmd_if_user_doesnt_have_move,.Lfe142-ContestAICmd_if_user_doesnt_have_move
.text
	.align	2, 0

