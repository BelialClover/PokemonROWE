@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sOamWork,object
	.size	 sOamWork,4
sOamWork:
	.word	0x0
	.section .rodata
	.type	 sTilesPerImage,object
	.size	 sTilesPerImage,16
sTilesPerImage:
	.byte	0x1
	.byte	0x4
	.byte	0x10
	.byte	0x40
	.byte	0x2
	.byte	0x4
	.byte	0x8
	.byte	0x20
	.byte	0x2
	.byte	0x4
	.byte	0x8
	.byte	0x20
	.space	4
.text
	.align	2, 0
	.globl	DigitObjUtil_Init
	.type	 DigitObjUtil_Init,function
	.thumb_func
DigitObjUtil_Init:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r5, .L12
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L3	@cond_branch
	bl	DigitObjUtil_Free
.L3:
	mov	r0, #0x8
	bl	Alloc
	str	r0, [r5]
	cmp	r0, #0
	bne	.L4	@cond_branch
	mov	r0, #0x0
	b	.L11
.L13:
	.align	2, 0
.L12:
	.word	sOamWork
.L4:
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	bl	Alloc
	ldr	r1, [r5]
	str	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.L5	@cond_branch
	add	r0, r1, #0
	bl	Free
	mov	r0, #0x0
	b	.L11
.L5:
	str	r4, [r1]
	mov	r3, #0x0
	cmp	r3, r4
	bcs	.L7	@cond_branch
	mov	r7, #0x0
	mov	r6, #0xff
	mov	r2, #0x0
.L9:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r2, r0
	strb	r7, [r0]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r2, r1
	ldrb	r0, [r1, #0x1]
	orr	r0, r0, r6
	strb	r0, [r1, #0x1]
	add	r2, r2, #0x1c
	add	r3, r3, #0x1
	cmp	r3, r4
	bcc	.L9	@cond_branch
.L7:
	mov	r0, #0x1
.L11:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 DigitObjUtil_Init,.Lfe1-DigitObjUtil_Init
	.align	2, 0
	.globl	DigitObjUtil_Free
	.type	 DigitObjUtil_Free,function
	.thumb_func
DigitObjUtil_Free:
	push	{r4, r5, lr}
	ldr	r2, .L22
	ldr	r1, [r2]
	cmp	r1, #0
	beq	.L15	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L16	@cond_branch
	mov	r4, #0x0
	ldr	r0, [r1]
	cmp	r4, r0
	bcs	.L18	@cond_branch
	add	r5, r2, #0
.L20:
	add	r0, r4, #0
	bl	DigitObjUtil_DeletePrinter
	add	r4, r4, #0x1
	ldr	r0, [r5]
	ldr	r0, [r0]
	cmp	r4, r0
	bcc	.L20	@cond_branch
.L18:
	ldr	r0, .L22
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	bl	Free
.L16:
	ldr	r4, .L22
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L15:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	sOamWork
.Lfe2:
	.size	 DigitObjUtil_Free,.Lfe2-DigitObjUtil_Free
	.align	2, 0
	.globl	DigitObjUtil_CreatePrinter
	.type	 DigitObjUtil_CreatePrinter,function
	.thumb_func
DigitObjUtil_CreatePrinter:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r8, r0
	mov	sl, r1
	add	r5, r2, #0
	ldr	r6, .L41
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L39	@cond_branch
	ldr	r1, [r0, #0x4]
	mov	r0, r8
	lsl	r2, r0, #0x3
	sub	r0, r2, r0
	lsl	r4, r0, #0x2
	add	r1, r4, r1
	ldrb	r0, [r1]
	mov	r9, r2
	cmp	r0, #0
	bne	.L39	@cond_branch
	ldrb	r0, [r5, #0x1]
	bl	GetFirstOamId
	ldr	r1, [r6]
	ldr	r1, [r1, #0x4]
	add	r1, r4, r1
	strb	r0, [r1, #0x1]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0xff
	beq	.L39	@cond_branch
	ldr	r0, [r5, #0x8]
	ldrh	r0, [r0, #0x6]
	bl	GetSpriteTileStartByTag
	ldr	r2, [r6]
	ldr	r1, [r2, #0x4]
	add	r1, r4, r1
	strh	r0, [r1, #0xa]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	ldrh	r1, [r0, #0xa]
	ldr	r7, .L41+0x4
	lsr	r0, r7, #0x10
	cmp	r1, r0
	bne	.L28	@cond_branch
	ldr	r2, [r5, #0x8]
	ldrh	r0, [r2, #0x4]
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L29	@cond_branch
	add	r0, r1, #0
	bl	LoadSpriteSheet
	b	.L40
.L42:
	.align	2, 0
.L41:
	.word	sOamWork
	.word	-0x10000
.L29:
	ldr	r0, [r2]		@ created by thumb_load_double_from_address
	ldr	r1, [r2, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldr	r0, [r2]
	bl	GetDecompressedDataSize
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp, #0x4]
	and	r1, r1, r7
	orr	r1, r1, r0
	str	r1, [sp, #0x4]
	mov	r0, sp
	bl	LoadCompressedSpriteSheet
.L40:
	ldr	r1, [r6]
	ldr	r1, [r1, #0x4]
	add	r1, r4, r1
	strh	r0, [r1, #0xa]
	ldr	r0, .L43
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	mov	r2, r9
	mov	r3, r8
	sub	r0, r2, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0xa]
	ldr	r0, .L43+0x4
	cmp	r1, r0
	bne	.L28	@cond_branch
.L39:
	mov	r0, #0x0
	b	.L38
.L44:
	.align	2, 0
.L43:
	.word	sOamWork
	.word	0xffff
.L28:
	ldr	r0, [r5, #0xc]
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	ldr	r6, .L45
	ldr	r1, [r6]
	ldr	r1, [r1, #0x4]
	mov	r4, r9
	mov	r3, r8
	sub	r2, r4, r3
	lsl	r4, r2, #0x2
	add	r1, r4, r1
	strb	r0, [r1, #0x4]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0xff
	bne	.L32	@cond_branch
	ldr	r0, [r5, #0xc]
	bl	LoadSpritePalette
	ldr	r1, [r6]
	ldr	r1, [r1, #0x4]
	add	r1, r4, r1
	strb	r0, [r1, #0x4]
.L32:
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	strb	r0, [r1, #0x2]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	ldrb	r1, [r5, #0x1]
	strb	r1, [r0, #0x3]
	ldr	r2, [r6]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	ldrh	r1, [r5, #0x4]
	strh	r1, [r0, #0xc]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	ldrh	r1, [r5, #0x6]
	strh	r1, [r0, #0xe]
	ldr	r1, [r2, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	strb	r0, [r1, #0x6]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1e
	strb	r0, [r1, #0x5]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r5]
	lsr	r0, r0, #0x6
	strb	r0, [r1, #0x7]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	ldrb	r1, [r5, #0x2]
	strb	r1, [r0, #0x8]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1c
	lsr	r0, r0, #0x1e
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	bl	GetTilesPerImage
	ldr	r1, [r6]
	ldr	r1, [r1, #0x4]
	add	r1, r4, r1
	strb	r0, [r1, #0x9]
	ldr	r2, [r6]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	ldr	r1, [r5, #0x8]
	ldrh	r1, [r1, #0x6]
	strh	r1, [r0, #0x10]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	ldr	r1, [r5, #0xc]
	ldrh	r1, [r1, #0x4]
	strh	r1, [r0, #0x12]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	str	r1, [r0, #0x14]
	mov	r3, #0x1
	ldrb	r0, [r5, #0x1]
	cmp	r3, r0
	bcs	.L34	@cond_branch
.L36:
	ldr	r0, [r6]
	ldr	r2, [r0, #0x4]
	add	r2, r4, r2
	ldr	r1, [r2, #0x14]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	str	r0, [r2, #0x14]
	add	r3, r3, #0x1
	ldrb	r2, [r5, #0x1]
	cmp	r3, r2
	bcc	.L36	@cond_branch
.L34:
	ldr	r0, .L45
	ldr	r0, [r0]
	mov	r3, r9
	mov	r4, r8
	sub	r1, r3, r4
	lsl	r1, r1, #0x2
	ldr	r0, [r0, #0x4]
	add	r0, r0, r1
	bl	CopyWorkToOam
	mov	r0, r8
	mov	r1, sl
	bl	DigitObjUtil_PrintNumOn
	mov	r0, #0x1
.L38:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L46:
	.align	2, 0
.L45:
	.word	sOamWork
.Lfe3:
	.size	 DigitObjUtil_CreatePrinter,.Lfe3-DigitObjUtil_CreatePrinter
	.align	2, 0
	.type	 CopyWorkToOam,function
	.thumb_func
CopyWorkToOam:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldrb	r5, [r4, #0x1]
	mov	r0, #0xc
	ldrsh	r7, [r4, r0]
	ldrb	r0, [r4, #0x3]
	add	r0, r0, #0x1
	mov	r8, r0
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	lsl	r1, r5, #0x3
	ldr	r2, .L53
	mov	r9, r2
	add	r1, r1, r9
	mov	r0, r8
	lsl	r2, r0, #0x2
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	orr	r2, r2, r0
	mov	r0, sp
	bl	CpuSet
	mov	r6, #0x0
	ldrb	r5, [r4, #0x1]
	cmp	r6, r8
	bcs	.L49	@cond_branch
	mov	r1, #0x3f
	mov	sl, r1
	mov	r2, #0xd
	neg	r2, r2
	mov	r9, r2
.L51:
	lsl	r0, r5, #0x3
	ldr	r1, .L53+0x4
	add	r3, r0, r1
	ldrh	r1, [r4, #0xe]
	add	r0, r3, #0
	add	r0, r0, #0x38
	strb	r1, [r0]
	ldr	r2, .L53+0x8
	add	r0, r2, #0
	add	r1, r7, #0
	and	r1, r1, r0
	ldrh	r2, [r3, #0x3a]
	ldr	r0, .L53+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x3a]
	ldrb	r1, [r4, #0x6]
	mov	r0, #0x39
	add	r0, r0, r3
	mov	ip, r0
	lsl	r1, r1, #0x6
	ldrb	r2, [r0]
	mov	r0, sl
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrb	r1, [r4, #0x5]
	mov	r2, #0x3b
	add	r2, r2, r3
	mov	ip, r2
	lsl	r1, r1, #0x6
	ldrb	r2, [r2]
	mov	r0, sl
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r4, #0xa]
	ldr	r1, .L53+0x10
	and	r1, r1, r0
	ldrh	r2, [r3, #0x3c]
	ldr	r0, .L53+0x14
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x3c]
	add	r3, r3, #0x3d
	mov	r0, #0x3
	ldrb	r1, [r4, #0x7]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, r9
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrb	r2, [r4, #0x4]
	lsl	r2, r2, #0x4
	mov	r1, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3]
	ldrb	r0, [r4, #0x8]
	add	r7, r7, r0
	add	r6, r6, #0x1
	add	r5, r5, #0x1
	cmp	r6, r8
	bcc	.L51	@cond_branch
.L49:
	sub	r5, r5, #0x1
	ldr	r0, .L53+0x4
	lsl	r3, r5, #0x3
	add	r3, r3, r0
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	ldrb	r0, [r4, #0x8]
	sub	r1, r1, r0
	ldr	r2, .L53+0x8
	add	r0, r2, #0
	and	r1, r1, r0
	ldrh	r2, [r3, #0x3a]
	ldr	r0, .L53+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x3a]
	add	r2, r3, #0
	add	r2, r2, #0x39
	ldrb	r1, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4, #0x9]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrh	r4, [r4, #0xa]
	add	r1, r1, r4
	ldr	r2, .L53+0x10
	add	r0, r2, #0
	and	r1, r1, r0
	ldrh	r2, [r3, #0x3c]
	ldr	r0, .L53+0x14
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x3c]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gMain+0x38
	.word	gMain
	.word	0x1ff
	.word	-0x200
	.word	0x3ff
	.word	-0x400
.Lfe4:
	.size	 CopyWorkToOam,.Lfe4-CopyWorkToOam
	.align	2, 0
	.globl	DigitObjUtil_PrintNumOn
	.type	 DigitObjUtil_PrintNumOn,function
	.thumb_func
DigitObjUtil_PrintNumOn:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	ldr	r0, .L67
	ldr	r1, [r0]
	add	r6, r0, #0
	cmp	r1, #0
	beq	.L55	@cond_branch
	ldr	r2, [r1, #0x4]
	lsl	r1, r3, #0x3
	sub	r0, r1, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2]
	add	r5, r1, #0
	cmp	r0, #0
	beq	.L55	@cond_branch
	str	r4, [r2, #0x18]
	cmp	r4, #0
	bge	.L58	@cond_branch
	mov	r2, #0x1
	neg	r4, r4
	b	.L59
.L68:
	.align	2, 0
.L67:
	.word	sOamWork
.L58:
	mov	r2, #0x0
.L59:
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	sub	r0, r5, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r3, [r0, #0x2]
	cmp	r3, #0x1
	beq	.L63	@cond_branch
	cmp	r3, #0x1
	ble	.L62	@cond_branch
	cmp	r3, #0x2
	beq	.L64	@cond_branch
.L62:
	add	r1, r4, #0
	bl	DrawNumObjsLeadingZeros
	b	.L55
.L63:
	add	r1, r4, #0
	bl	DrawNumObjsMinusInFront
	b	.L55
.L64:
	add	r1, r4, #0
	bl	DrawNumObjsMinusInBack
.L55:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 DigitObjUtil_PrintNumOn,.Lfe5-DigitObjUtil_PrintNumOn
	.align	2, 0
	.type	 DrawNumObjsLeadingZeros,function
	.thumb_func
DrawNumObjsLeadingZeros:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r0
	mov	r9, r1
	str	r2, [sp]
	ldr	r5, [r0, #0x14]
	ldrb	r7, [r0, #0x1]
	ldr	r0, .L76
	mov	sl, r0
	cmp	r5, #0
	beq	.L71	@cond_branch
	lsl	r0, r7, #0x3
	add	r0, r0, #0x3c
	mov	r1, sl
	add	r6, r0, r1
.L72:
	mov	r0, r9
	add	r1, r5, #0
	bl	__udivsi3
	add	r4, r0, #0
	mov	r0, r4
	mul	r0, r0, r5
	mov	r2, r9
	sub	r2, r2, r0
	mov	r9, r2
	add	r0, r5, #0
	mov	r1, #0xa
	bl	__udivsi3
	add	r5, r0, #0
	mov	r1, r8
	ldrb	r0, [r1, #0x9]
	mov	r1, r4
	mul	r1, r1, r0
	mov	r2, r8
	ldrh	r2, [r2, #0xa]
	add	r1, r1, r2
	ldr	r2, .L76+0x4
	add	r0, r2, #0
	and	r1, r1, r0
	ldrh	r0, [r6]
	ldr	r2, .L76+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r6]
	add	r6, r6, #0x8
	add	r7, r7, #0x1
	cmp	r5, #0
	bne	.L72	@cond_branch
.L71:
	ldr	r0, [sp]
	cmp	r0, #0
	beq	.L74	@cond_branch
	lsl	r0, r7, #0x3
	add	r0, r0, sl
	add	r0, r0, #0x39
	ldrb	r2, [r0]
	mov	r1, #0x4
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	b	.L75
.L77:
	.align	2, 0
.L76:
	.word	gMain
	.word	0x3ff
	.word	-0x400
.L74:
	lsl	r2, r7, #0x3
	add	r2, r2, sl
	add	r2, r2, #0x39
	ldrb	r1, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
.L75:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 DrawNumObjsLeadingZeros,.Lfe6-DrawNumObjsLeadingZeros

	.lcomm	oamId.21,4

	.lcomm	curDigit.22,4

	.lcomm	firstDigit.23,4
	.align	2, 0
	.type	 DrawNumObjsMinusInFront,function
	.thumb_func
DrawNumObjsMinusInFront:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	mov	r8, r1
	str	r2, [sp]
	ldr	r5, [r6, #0x14]
	ldr	r3, .L89
	ldrb	r0, [r6, #0x1]
	str	r0, [r3]
	ldr	r2, .L89+0x4
	mov	r0, #0x0
	str	r0, [r2]
	ldr	r1, .L89+0x8
	sub	r0, r0, #0x1
	str	r0, [r1]
	add	r7, r3, #0
	mov	sl, r1
	ldr	r0, .L89+0xc
	mov	r9, r0
	cmp	r5, #0
	beq	.L80	@cond_branch
.L81:
	mov	r0, r8
	add	r1, r5, #0
	bl	__udivsi3
	add	r4, r0, #0
	mov	r0, r4
	mul	r0, r0, r5
	mov	r1, r8
	sub	r1, r1, r0
	mov	r8, r1
	add	r0, r5, #0
	mov	r1, #0xa
	bl	__udivsi3
	add	r5, r0, #0
	cmp	r4, #0
	bne	.L83	@cond_branch
	mov	r2, sl
	ldr	r1, [r2]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L83	@cond_branch
	cmp	r5, #0
	bne	.L82	@cond_branch
.L83:
	ldr	r2, [r7]
	lsl	r2, r2, #0x3
	add	r2, r2, r9
	ldrb	r0, [r6, #0x9]
	mov	r3, r4
	mul	r3, r3, r0
	ldrh	r4, [r6, #0xa]
	add	r3, r3, r4
	ldr	r1, .L89+0x10
	add	r0, r1, #0
	and	r3, r3, r0
	ldrh	r0, [r2, #0x3c]
	ldr	r4, .L89+0x14
	add	r1, r4, #0
	and	r0, r0, r1
	orr	r0, r0, r3
	strh	r0, [r2, #0x3c]
	add	r2, r2, #0x39
	ldrb	r0, [r2]
	mov	r1, #0x4
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r2, sl
	ldr	r1, [r2]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L85	@cond_branch
	ldr	r4, .L89+0x4
	ldr	r0, [r4]
	str	r0, [r2]
	b	.L85
.L90:
	.align	2, 0
.L89:
	.word	oamId.21
	.word	curDigit.22
	.word	firstDigit.23
	.word	gMain
	.word	0x3ff
	.word	-0x400
.L82:
	ldr	r0, [r7]
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	add	r0, r0, #0x39
	ldrb	r1, [r0]
	mov	r2, #0x4
	neg	r2, r2
	and	r1, r1, r2
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
.L85:
	ldr	r0, [r7]
	add	r0, r0, #0x1
	str	r0, [r7]
	ldr	r4, .L91
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
	cmp	r5, #0
	bne	.L81	@cond_branch
.L80:
	ldr	r0, [sp]
	cmp	r0, #0
	beq	.L87	@cond_branch
	ldr	r1, [r7]
	lsl	r1, r1, #0x3
	add	r1, r1, r9
	add	r1, r1, #0x39
	ldrb	r2, [r1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r3, [r7]
	lsl	r3, r3, #0x3
	add	r3, r3, r9
	mov	r1, #0xc
	ldrsh	r2, [r6, r1]
	mov	r4, sl
	ldr	r0, [r4]
	sub	r0, r0, #0x1
	ldrb	r1, [r6, #0x8]
	mul	r0, r0, r1
	add	r2, r2, r0
	ldr	r1, .L91+0x4
	add	r0, r1, #0
	and	r2, r2, r0
	ldrh	r1, [r3, #0x3a]
	ldr	r0, .L91+0x8
	and	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r3, #0x3a]
	b	.L88
.L92:
	.align	2, 0
.L91:
	.word	curDigit.22
	.word	0x1ff
	.word	-0x200
.L87:
	ldr	r0, [r7]
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	add	r0, r0, #0x39
	ldrb	r2, [r0]
	mov	r1, #0x4
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
.L88:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 DrawNumObjsMinusInFront,.Lfe7-DrawNumObjsMinusInFront
	.align	2, 0
	.type	 DrawNumObjsMinusInBack,function
	.thumb_func
DrawNumObjsMinusInBack:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r8, r0
	mov	sl, r1
	str	r2, [sp]
	ldr	r5, [r0, #0x14]
	ldrb	r3, [r0, #0x1]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r9, r0
	cmp	r5, #0
	beq	.L95	@cond_branch
.L107:
	lsl	r0, r3, #0x3
	add	r1, r0, #0
	add	r1, r1, #0x39
	ldr	r2, .L108
	add	r7, r1, r2
	add	r0, r0, #0x3c
	add	r6, r0, r2
.L96:
	mov	r0, sl
	add	r1, r5, #0
	str	r3, [sp, #0x8]
	bl	__udivsi3
	add	r4, r0, #0
	mov	r0, r4
	mul	r0, r0, r5
	mov	r1, sl
	sub	r1, r1, r0
	mov	sl, r1
	add	r0, r5, #0
	mov	r1, #0xa
	bl	__udivsi3
	add	r5, r0, #0
	ldr	r3, [sp, #0x8]
	cmp	r4, #0
	bne	.L98	@cond_branch
	ldr	r2, [sp, #0x4]
	cmp	r2, #0
	bne	.L98	@cond_branch
	cmp	r5, #0
	bne	.L107	@cond_branch
.L98:
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r1, r8
	ldrb	r0, [r1, #0x9]
	mov	r2, r4
	mul	r2, r2, r0
	ldrh	r4, [r1, #0xa]
	add	r2, r2, r4
	ldr	r1, .L108+0x4
	add	r0, r1, #0
	and	r2, r2, r0
	ldrh	r0, [r6]
	ldr	r4, .L108+0x8
	add	r1, r4, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r6]
	ldrb	r0, [r7]
	mov	r2, #0x4
	neg	r2, r2
	add	r1, r2, #0
	and	r0, r0, r1
	strb	r0, [r7]
	add	r7, r7, #0x8
	add	r6, r6, #0x8
	add	r3, r3, #0x1
	mov	r4, #0x1
	add	r9, r9, r4
	cmp	r5, #0
	bne	.L96	@cond_branch
.L95:
	mov	r0, r8
	ldrb	r0, [r0, #0x3]
	cmp	r9, r0
	bge	.L106	@cond_branch
	ldr	r1, .L108
	mov	r5, #0x4
	neg	r5, r5
	mov	r4, #0x2
	lsl	r0, r3, #0x3
	add	r0, r0, #0x39
	add	r2, r0, r1
.L102:
	ldrb	r1, [r2]
	add	r0, r5, #0
	and	r0, r0, r1
	orr	r0, r0, r4
	strb	r0, [r2]
	add	r2, r2, #0x8
	add	r3, r3, #0x1
	mov	r1, #0x1
	add	r9, r9, r1
	mov	r0, r8
	ldrb	r0, [r0, #0x3]
	cmp	r9, r0
	blt	.L102	@cond_branch
.L106:
	ldr	r1, [sp]
	cmp	r1, #0
	beq	.L104	@cond_branch
	lsl	r0, r3, #0x3
	ldr	r2, .L108
	add	r0, r0, r2
	add	r0, r0, #0x39
	ldrb	r2, [r0]
	mov	r1, #0x4
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	b	.L105
.L109:
	.align	2, 0
.L108:
	.word	gMain
	.word	0x3ff
	.word	-0x400
.L104:
	lsl	r2, r3, #0x3
	ldr	r4, .L110
	add	r2, r2, r4
	add	r2, r2, #0x39
	ldrb	r1, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
.L105:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L111:
	.align	2, 0
.L110:
	.word	gMain
.Lfe8:
	.size	 DrawNumObjsMinusInBack,.Lfe8-DrawNumObjsMinusInBack
	.align	2, 0
	.globl	DigitObjUtil_DeletePrinter
	.type	 DigitObjUtil_DeletePrinter,function
	.thumb_func
DigitObjUtil_DeletePrinter:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r0, .L122
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L112	@cond_branch
	ldr	r2, [r0, #0x4]
	lsl	r1, r4, #0x3
	sub	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2]
	add	r5, r1, #0
	cmp	r0, #0
	beq	.L112	@cond_branch
	ldrb	r3, [r2, #0x3]
	add	r0, r3, #0x1
	ldrb	r2, [r2, #0x1]
	cmp	r0, #0
	beq	.L116	@cond_branch
	ldr	r1, .L122+0x4
	mov	r7, #0x4
	neg	r7, r7
	mov	r6, #0x2
	add	r3, r0, #0
	lsl	r0, r2, #0x3
	add	r0, r0, #0x39
	add	r2, r0, r1
.L118:
	ldrb	r1, [r2]
	add	r0, r7, #0
	and	r0, r0, r1
	orr	r0, r0, r6
	strb	r0, [r2]
	sub	r3, r3, #0x1
	add	r2, r2, #0x8
	cmp	r3, #0
	bne	.L118	@cond_branch
.L116:
	add	r0, r4, #0
	bl	SharesTileWithAnyActive
	cmp	r0, #0
	bne	.L120	@cond_branch
	ldr	r0, .L122
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	sub	r0, r5, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x10]
	bl	FreeSpriteTilesByTag
.L120:
	add	r0, r4, #0
	bl	SharesPalWithAnyActive
	cmp	r0, #0
	bne	.L121	@cond_branch
	ldr	r0, .L122
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	sub	r0, r5, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x12]
	bl	FreeSpritePaletteByTag
.L121:
	ldr	r0, .L122
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	sub	r0, r5, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
.L112:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	sOamWork
	.word	gMain
.Lfe9:
	.size	 DigitObjUtil_DeletePrinter,.Lfe9-DigitObjUtil_DeletePrinter
	.align	2, 0
	.globl	DigitObjUtil_HideOrShow
	.type	 DigitObjUtil_HideOrShow,function
	.thumb_func
DigitObjUtil_HideOrShow:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r0, .L139
	ldr	r1, [r0]
	add	r7, r0, #0
	cmp	r1, #0
	beq	.L124	@cond_branch
	ldr	r2, [r1, #0x4]
	lsl	r1, r4, #0x3
	sub	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2]
	add	r6, r1, #0
	cmp	r0, #0
	beq	.L124	@cond_branch
	ldrb	r3, [r2, #0x3]
	add	r1, r3, #0x1
	ldrb	r0, [r2, #0x1]
	cmp	r5, #0
	beq	.L127	@cond_branch
	cmp	r1, #0
	beq	.L124	@cond_branch
	ldr	r1, .L139+0x4
	mov	r5, #0x4
	neg	r5, r5
	mov	r4, #0x2
	add	r3, r3, #0x1
	lsl	r0, r0, #0x3
	add	r0, r0, #0x39
	add	r2, r0, r1
.L131:
	ldrb	r1, [r2]
	add	r0, r5, #0
	and	r0, r0, r1
	orr	r0, r0, r4
	strb	r0, [r2]
	sub	r3, r3, #0x1
	add	r2, r2, #0x8
	cmp	r3, #0
	bne	.L131	@cond_branch
	b	.L124
.L140:
	.align	2, 0
.L139:
	.word	sOamWork
	.word	gMain
.L127:
	cmp	r1, #0
	beq	.L135	@cond_branch
	ldr	r1, .L141
	mov	r5, #0x4
	neg	r5, r5
	add	r3, r3, #0x1
	lsl	r0, r0, #0x3
	add	r0, r0, #0x39
	add	r2, r0, r1
.L137:
	ldrb	r1, [r2]
	add	r0, r5, #0
	and	r0, r0, r1
	strb	r0, [r2]
	sub	r3, r3, #0x1
	add	r2, r2, #0x8
	cmp	r3, #0
	bne	.L137	@cond_branch
.L135:
	ldr	r0, [r7]
	ldr	r1, [r0, #0x4]
	sub	r0, r6, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0, #0x18]
	add	r0, r4, #0
	bl	DigitObjUtil_PrintNumOn
.L124:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L142:
	.align	2, 0
.L141:
	.word	gMain
.Lfe10:
	.size	 DigitObjUtil_HideOrShow,.Lfe10-DigitObjUtil_HideOrShow
	.align	2, 0
	.type	 GetFirstOamId,function
	.thumb_func
GetFirstOamId:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r5, #0x40
	mov	r3, #0x0
	ldr	r0, .L155
	ldr	r0, [r0]
	ldr	r2, [r0]
	cmp	r3, r2
	bcs	.L145	@cond_branch
	ldr	r1, [r0, #0x4]
.L147:
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L148	@cond_branch
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0xff
	beq	.L146	@cond_branch
	ldrb	r0, [r1, #0x3]
	cmp	r0, r4
	bhi	.L146	@cond_branch
	ldrb	r0, [r1, #0x1]
	b	.L154
.L156:
	.align	2, 0
.L155:
	.word	sOamWork
.L148:
	add	r0, r5, #0x1
	ldrb	r5, [r1, #0x3]
	add	r0, r0, r5
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L146:
	add	r1, r1, #0x1c
	add	r3, r3, #0x1
	cmp	r3, r2
	bcc	.L147	@cond_branch
.L145:
	add	r0, r5, r4
	add	r0, r0, #0x1
	cmp	r0, #0x80
	bgt	.L152	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	b	.L154
.L152:
	mov	r0, #0xff
.L154:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 GetFirstOamId,.Lfe11-GetFirstOamId
	.align	2, 0
	.type	 SharesTileWithAnyActive,function
	.thumb_func
SharesTileWithAnyActive:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	ldr	r0, .L165
	ldr	r0, [r0]
	ldr	r4, [r0]
	cmp	r2, r4
	bcs	.L159	@cond_branch
	ldr	r1, [r0, #0x4]
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r5, r0, r1
.L161:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L160	@cond_branch
	cmp	r2, r3
	beq	.L160	@cond_branch
	ldrh	r0, [r1, #0x10]
	ldrh	r6, [r5, #0x10]
	cmp	r0, r6
	bne	.L160	@cond_branch
	mov	r0, #0x1
	b	.L164
.L166:
	.align	2, 0
.L165:
	.word	sOamWork
.L160:
	add	r1, r1, #0x1c
	add	r2, r2, #0x1
	cmp	r2, r4
	bcc	.L161	@cond_branch
.L159:
	mov	r0, #0x0
.L164:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 SharesTileWithAnyActive,.Lfe12-SharesTileWithAnyActive
	.align	2, 0
	.type	 SharesPalWithAnyActive,function
	.thumb_func
SharesPalWithAnyActive:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	ldr	r0, .L175
	ldr	r0, [r0]
	ldr	r4, [r0]
	cmp	r2, r4
	bcs	.L169	@cond_branch
	ldr	r1, [r0, #0x4]
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r5, r0, r1
.L171:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L170	@cond_branch
	cmp	r2, r3
	beq	.L170	@cond_branch
	ldrh	r0, [r1, #0x12]
	ldrh	r6, [r5, #0x12]
	cmp	r0, r6
	bne	.L170	@cond_branch
	mov	r0, #0x1
	b	.L174
.L176:
	.align	2, 0
.L175:
	.word	sOamWork
.L170:
	add	r1, r1, #0x1c
	add	r2, r2, #0x1
	cmp	r2, r4
	bcc	.L171	@cond_branch
.L169:
	mov	r0, #0x0
.L174:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 SharesPalWithAnyActive,.Lfe13-SharesPalWithAnyActive
	.align	2, 0
	.globl	GetTilesPerImage
	.type	 GetTilesPerImage,function
	.thumb_func
GetTilesPerImage:
	ldr	r2, .L178
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1]
	bx	lr
.L179:
	.align	2, 0
.L178:
	.word	sTilesPerImage
.Lfe14:
	.size	 GetTilesPerImage,.Lfe14-GetTilesPerImage
.text
	.align	2, 0

