@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gContestMons
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gContestMons,object
	.size	 gContestMons,256
gContestMons:
	.byte	0x0
	.byte	0x0
	.space	62
	.space	192
	.globl	gContestMonRound1Points
	.align	1, 0
	.type	 gContestMonRound1Points,object
	.size	 gContestMonRound1Points,8
gContestMonRound1Points:
	.short	0x0
	.space	6
	.globl	gContestMonTotalPoints
	.align	1, 0
	.type	 gContestMonTotalPoints,object
	.size	 gContestMonTotalPoints,8
gContestMonTotalPoints:
	.short	0x0
	.space	6
	.globl	gContestMonAppealPointTotals
	.align	1, 0
	.type	 gContestMonAppealPointTotals,object
	.size	 gContestMonAppealPointTotals,8
gContestMonAppealPointTotals:
	.short	0x0
	.space	6
	.globl	gContestMonRound2Points
	.align	1, 0
	.type	 gContestMonRound2Points,object
	.size	 gContestMonRound2Points,8
gContestMonRound2Points:
	.short	0x0
	.space	6
	.globl	gContestFinalStandings
	.type	 gContestFinalStandings,object
	.size	 gContestFinalStandings,4
gContestFinalStandings:
	.byte	0x0
	.space	3
	.globl	gContestMonPartyIndex
	.type	 gContestMonPartyIndex,object
	.size	 gContestMonPartyIndex,1
gContestMonPartyIndex:
	.byte	0x0
	.globl	gContestPlayerMonIndex
	.type	 gContestPlayerMonIndex,object
	.size	 gContestPlayerMonIndex,1
gContestPlayerMonIndex:
	.byte	0x0
	.globl	gContestantTurnOrder
	.type	 gContestantTurnOrder,object
	.size	 gContestantTurnOrder,4
gContestantTurnOrder:
	.byte	0x0
	.space	3
	.globl	gLinkContestFlags
	.type	 gLinkContestFlags,object
	.size	 gLinkContestFlags,1
gLinkContestFlags:
	.byte	0x0
	.globl	gContestLinkLeaderIndex
	.type	 gContestLinkLeaderIndex,object
	.size	 gContestLinkLeaderIndex,1
gContestLinkLeaderIndex:
	.byte	0x0
	.globl	gSpecialVar_ContestCategory
	.align	1, 0
	.type	 gSpecialVar_ContestCategory,object
	.size	 gSpecialVar_ContestCategory,2
gSpecialVar_ContestCategory:
	.short	0x0
	.globl	gSpecialVar_ContestRank
	.align	1, 0
	.type	 gSpecialVar_ContestRank,object
	.size	 gSpecialVar_ContestRank,2
gSpecialVar_ContestRank:
	.short	0x0
	.globl	gNumLinkContestPlayers
	.type	 gNumLinkContestPlayers,object
	.size	 gNumLinkContestPlayers,1
gNumLinkContestPlayers:
	.byte	0x0
	.globl	gHighestRibbonRank
	.type	 gHighestRibbonRank,object
	.size	 gHighestRibbonRank,1
gHighestRibbonRank:
	.byte	0x0
	.globl	gContestResources
	.align	2, 0
	.type	 gContestResources,object
	.size	 gContestResources,4
gContestResources:
	.word	0x0
	.globl	sContestBgCopyFlags
	.type	 sContestBgCopyFlags,object
	.size	 sContestBgCopyFlags,1
sContestBgCopyFlags:
	.byte	0x0
	.globl	gCurContestWinner
	.align	2, 0
	.type	 gCurContestWinner,object
	.size	 gCurContestWinner,32
gCurContestWinner:
	.word	0x0
	.space	28
	.globl	gUnknown_02039F5C
	.type	 gUnknown_02039F5C,object
	.size	 gUnknown_02039F5C,1
gUnknown_02039F5C:
	.byte	0x0
	.globl	gUnknown_02039F5D
	.type	 gUnknown_02039F5D,object
	.size	 gUnknown_02039F5D,1
gUnknown_02039F5D:
	.byte	0x0
	.section .rodata
	.type	 sSliderHeartYPositions,object
	.size	 sSliderHeartYPositions,4
sSliderHeartYPositions:
	.byte	0x24
	.byte	0x4c
	.byte	0x74
	.byte	0x9c
	.type	 sNextTurnSpriteYPositions,object
	.size	 sNextTurnSpriteYPositions,4
sNextTurnSpriteYPositions:
	.byte	0x24
	.byte	0x4c
	.byte	0x74
	.byte	0x9c
	.align	2, 0
	.type	 sSpriteSheet_SliderHeart,object
	.size	 sSpriteSheet_SliderHeart,8
sSpriteSheet_SliderHeart:
	.word	gContestSliderHeart_Gfx
	.short	0x20
	.short	0x4e20
	.align	2, 0
	.type	 sOam_SliderHeart,object
	.size	 sOam_SliderHeart,8
sOam_SliderHeart:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sAffineAnim_SliderHeart_Normal,object
sAffineAnim_SliderHeart_Normal:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_SliderHeart_Normal,16
	.align	2, 0
	.type	 sAffineAnim_SliderHeart_SpinDisappear,object
sAffineAnim_SliderHeart_SpinDisappear:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0xa
	.short	-0xa
	.byte	0xec
	.byte	0x14
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_SliderHeart_SpinDisappear,24
	.align	2, 0
	.type	 sAffineAnim_SliderHeart_SpinAppear,object
sAffineAnim_SliderHeart_SpinAppear:
	.short	0x38
	.short	0x38
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0xa
	.short	0xa
	.byte	0x14
	.byte	0x14
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_SliderHeart_SpinAppear,24
	.align	2, 0
	.type	 sAffineAnims_SliderHeart,object
sAffineAnims_SliderHeart:
	.word	sAffineAnim_SliderHeart_Normal
	.word	sAffineAnim_SliderHeart_SpinDisappear
	.word	sAffineAnim_SliderHeart_SpinAppear
	.size	 sAffineAnims_SliderHeart,12
	.align	2, 0
	.type	 sSpriteTemplate_SliderHeart,object
	.size	 sSpriteTemplate_SliderHeart,24
sSpriteTemplate_SliderHeart:
	.short	0x4e20
	.short	0xabe0
	.word	sOam_SliderHeart
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_SliderHeart
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteSheet_NextTurn,object
	.size	 sSpriteSheet_NextTurn,32
sSpriteSheet_NextTurn:
	.word	gContestNextTurnGfx
	.short	0x100
	.short	0x4e22
	.word	gContestNextTurnGfx
	.short	0x100
	.short	0x4e23
	.word	gContestNextTurnGfx
	.short	0x100
	.short	0x4e24
	.word	gContestNextTurnGfx
	.short	0x100
	.short	0x4e25
	.align	2, 0
	.type	 sSpritePalette_NextTurn,object
	.size	 sSpritePalette_NextTurn,8
sSpritePalette_NextTurn:
	.word	gContestPal
	.short	0x4e22
	.space	2
	.align	2, 0
	.type	 sOam_NextTurn,object
	.size	 sOam_NextTurn,8
sOam_NextTurn:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sSpriteTemplates_NextTurn,object
	.size	 sSpriteTemplates_NextTurn,96
sSpriteTemplates_NextTurn:
	.short	0x4e22
	.short	0x4e22
	.word	sOam_NextTurn
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0x4e23
	.short	0x4e22
	.word	sOam_NextTurn
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0x4e24
	.short	0x4e22
	.word	sOam_NextTurn
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0x4e25
	.short	0x4e22
	.word	sOam_NextTurn
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSubsprites_NextTurn,object
	.size	 sSubsprites_NextTurn,8
sSubsprites_NextTurn:
	.byte	-0x1c
	.byte	-0x4
	.byte	0x5
	.byte	0x0
	.byte	0x4
	.byte	-0x4
	.byte	0x45
	.byte	0x0
	.align	2, 0
	.type	 sSubspriteTable_NextTurn,object
sSubspriteTable_NextTurn:
	.byte	0x2
	.space	3
	.word	sSubsprites_NextTurn
	.size	 sSubspriteTable_NextTurn,8
	.align	2, 0
	.type	 sSpriteSheet_Faces,object
	.size	 sSpriteSheet_Faces,8
sSpriteSheet_Faces:
	.word	gContestFaces_Gfx
	.short	0x180
	.short	0xabe1
	.align	2, 0
	.type	 sOam_Faces,object
	.size	 sOam_Faces,8
sOam_Faces:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.space	2
	.align	2, 0
	.type	 sSpriteTemplate_Faces,object
	.size	 sSpriteTemplate_Faces,24
sSpriteTemplate_Faces:
	.short	0xabe1
	.short	0xabe0
	.word	sOam_Faces
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteSheet_ApplauseMeter,object
	.size	 sSpriteSheet_ApplauseMeter,8
sSpriteSheet_ApplauseMeter:
	.word	gContestApplauseGfx
	.short	0x400
	.short	0xabe2
	.align	2, 0
	.type	 sSpritePalette_ApplauseMeter,object
	.size	 sSpritePalette_ApplauseMeter,8
sSpritePalette_ApplauseMeter:
	.word	gContestPal
	.short	0xabe2
	.space	2
	.align	2, 0
	.type	 sOam_ApplauseMeter,object
	.size	 sOam_ApplauseMeter,8
sOam_ApplauseMeter:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.space	2
	.align	2, 0
	.type	 sSpriteTemplate_ApplauseMeter,object
	.size	 sSpriteTemplate_ApplauseMeter,24
sSpriteTemplate_ApplauseMeter:
	.short	0xabe2
	.short	0xabe2
	.word	sOam_ApplauseMeter
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	sOam_Judge
	.align	2, 0
	.type	 sOam_Judge,object
	.size	 sOam_Judge,8
sOam_Judge:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x2c
	.space	2
	.globl	sSpriteTemplate_Judge
	.align	2, 0
	.type	 sSpriteTemplate_Judge,object
	.size	 sSpriteTemplate_Judge,24
sSpriteTemplate_Judge:
	.short	0x4e21
	.short	0x4e21
	.word	sOam_Judge
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	sSpriteSheet_Judge
	.align	2, 0
	.type	 sSpriteSheet_Judge,object
	.size	 sSpriteSheet_Judge,8
sSpriteSheet_Judge:
	.word	gContestJudgeGfx
	.short	0x800
	.short	0x4e21
	.align	2, 0
	.type	 sSpriteSheet_JudgeSymbols,object
	.size	 sSpriteSheet_JudgeSymbols,8
sSpriteSheet_JudgeSymbols:
	.word	gContestJudgeSymbolsGfx
	.short	0x380
	.short	0xabe0
	.globl	sSpritePalette_JudgeSymbols
	.align	2, 0
	.type	 sSpritePalette_JudgeSymbols,object
	.size	 sSpritePalette_JudgeSymbols,8
sSpritePalette_JudgeSymbols:
	.word	gContest3Pal
	.short	0xabe0
	.space	2
	.globl	sSpriteTemplate_JudgeSpeechBubble
	.align	2, 0
	.type	 sSpriteTemplate_JudgeSpeechBubble,object
	.size	 sSpriteTemplate_JudgeSpeechBubble,24
sSpriteTemplate_JudgeSpeechBubble:
	.short	0xabe0
	.short	0xabe0
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	1, 0
	.type	 sText_Pal,object
sText_Pal:
	.short	0x0
	.short	0x2529
	.short	0x1f
	.short	0x3e0
	.short	0x7c00
	.short	0x3ff
	.short	0x7fe0
	.short	0x7c1f
	.short	0x675a
	.short	0x0
	.short	0x0
	.short	0x779c
	.short	0x7fff
	.short	0x7f33
	.short	0x72ef
	.short	0x7fff
	.size	 sText_Pal,32
	.globl	gContestEffectDescriptionPointers
	.align	2, 0
	.type	 gContestEffectDescriptionPointers,object
gContestEffectDescriptionPointers:
	.word	gText_HighlyAppealingMove
	.word	gText_UserMoreEasilyStartled
	.word	gText_GreatAppealButNoMoreToEnd
	.word	gText_UsedRepeatedlyWithoutBoringJudge
	.word	gText_AvoidStartledByOthersOnce
	.word	gText_AvoidStartledByOthers
	.word	gText_AvoidStartledByOthersLittle
	.word	gText_UserLessLikelyStartled
	.word	gText_SlightlyStartleFrontMon
	.word	gText_SlightlyStartleAppealed
	.word	gText_StartleAppealedBeforeUser
	.word	gText_StartleAllAppealed
	.word	gText_BadlyStartleFrontMon
	.word	gText_BadlyStartleAppealed
	.word	gText_StartleAppealedBeforeUser2
	.word	gText_StartleAllAppealed2
	.word	gText_ShiftJudgesAttentionFromOthers
	.word	gText_StartleMonHasJudgesAttention
	.word	gText_JamOthersMissesTurn
	.word	gText_StartleMonsMadeSameTypeAppeal
	.word	gText_BadlyStartleCoolAppeals
	.word	gText_BadlyStartleBeautyAppeals
	.word	gText_BadlyStartleCuteAppeals
	.word	gText_BadlyStartleSmartAppeals
	.word	gText_BadlyStartleToughAppeals
	.word	gText_MakeMonAfterUserNervous
	.word	gText_MakeAllMonsAfterUserNervous
	.word	gText_WorsenConditionOfThoseMadeAppeals
	.word	gText_BadlyStartleMonsGoodCondition
	.word	gText_AppealGreatIfPerformedFirst
	.word	gText_AppealGreatIfPerformedLast
	.word	gText_AppealAsGoodAsThoseBeforeIt
	.word	gText_AppealAsGoodAsOneBeforeIt
	.word	gText_AppealBetterLaterItsPerformed
	.word	gText_AppealVariesDependingOnTiming
	.word	gText_WorksWellIfSameTypeAsBefore
	.word	gText_WorksWellIfDifferentTypeAsBefore
	.word	gText_AffectedByAppealInFront
	.word	gText_UpsConditionHelpsPreventNervousness
	.word	gText_AppealWorksWellIfConditionGood
	.word	gText_NextAppealMadeEarlier
	.word	gText_NextAppealMadeLater
	.word	gText_TurnOrderMoreEasilyScrambled
	.word	gText_ScrambleOrderOfNextAppeals
	.word	gText_AppealExcitesAudienceInAnyContest
	.word	gText_BadlyStartlesMonsGoodAppeals
	.word	gText_AppealBestMoreCrowdExcited
	.word	gText_TemporarilyStopCrowdExcited
	.size	 gContestEffectDescriptionPointers,192
	.align	2, 0
	.type	 sUnusedComboMoveNameTexts,object
sUnusedComboMoveNameTexts:
	.word	gText_RainDance
	.word	gText_RainDance
	.word	gText_Rage
	.word	gText_FocusEnergy
	.word	gText_Hypnosis
	.word	gText_Softboiled
	.word	gText_HornAttack
	.word	gText_SwordsDance
	.word	gText_Conversion
	.word	gText_SunnyDay
	.word	gText_Rest2
	.word	gText_Vicegrip
	.word	gText_DefenseCurl
	.word	gText_LockOn
	.size	 sUnusedComboMoveNameTexts,56
	.globl	gContestMoveTypeTextPointers
	.align	2, 0
	.type	 gContestMoveTypeTextPointers,object
gContestMoveTypeTextPointers:
	.word	gContestMoveTypeCoolText
	.word	gContestMoveTypeBeautyText
	.word	gContestMoveTypeCuteText
	.word	gContestMoveTypeSmartText
	.word	gContestMoveTypeToughText
	.size	 gContestMoveTypeTextPointers,20
	.align	2, 0
	.type	 sUnusedAppealResultTexts,object
sUnusedAppealResultTexts:
	.word	gText_ButAppealWasJammed
	.word	gText_FollowedAnotherMonsLead
	.word	gText_ButItMessedUp
	.word	gText_WentBetterThanUsual
	.word	gText_WentBetterThanUsual
	.word	gText_JudgeLookedAwayForSomeReason
	.word	gText_WorkedHardToBuildOnPastMistakes
	.word	gText_CantMakeAnyMoreMoves
	.word	gText_WorkedFrighteninglyWell
	.word	gText_WorkedHardAsStandoutMon
	.word	gText_JudgedLookedOnExpectantly
	.word	gText_WorkedRatherWell
	.word	gText_WorkedLittleBetterThanUsual
	.size	 sUnusedAppealResultTexts,52
	.align	2, 0
	.type	 sRoundResultTexts,object
sRoundResultTexts:
	.word	gText_MonFailedToStandOutAtAll
	.word	gText_MonDidntStandOutVeryMuch
	.word	gText_MonCaughtALittleAttention
	.word	gText_MonAttractedALotOfAttention
	.word	gText_MonCommandedTotalAttention
	.word	gText_MonHasntMadeItsAppeal
	.word	gText_JudgesViewsOnMonHeldFirm
	.word	gText_MonsXChangedPerceptions
	.word	gText_EmptyContestString
	.word	gText_MonsAppealEffectWoreOff
	.word	gText_SpecialAppealsEffectWoreOff
	.word	gText_EveryonesAppealsMadeToLookSame
	.word	gText_CheapenedMonsAppeal
	.word	gText_CheapenedAppealOfThoseAhead
	.word	gText_StoleAttentionAwayFromMon
	.word	gText_CheapenedMonsAppeal2
	.word	gText_SeverelyCheapenedOtherAppeals
	.word	gText_AnticipationSwelledForMonsAppealNext
	.word	gText_CheapenedAppealOfThoseAhead2
	.word	gText_CheapenedJudgesFavoriteAppeal
	.word	gText_AppealsOfOthersCheapenedByHalf
	.word	gText_StoodOutToMakeUpForBeingJammed
	.word	gText_CantParticipateInAppealsAnyMore
	.word	gText_TouchedJudgeForFantasticAppeal
	.word	gText_AnticipationRoseForUpcomingAppeals
	.word	gText_StoodOutAsMuchAsSpecialAppeals
	.word	gText_StoodOutAsMuchAsMon
	.word	gText_EmptyContestString
	.word	gText_EmptyContestString
	.word	gText_EmptyContestString
	.word	gText_JammedAppealsMadeEvenLessNoticeable
	.word	gText_EveryonesAppealsMadeSame
	.size	 sRoundResultTexts,128
	.align	2, 0
	.type	 sAppealResultTexts,object
sAppealResultTexts:
	.word	gText_BecameMoreConsciousOfOtherMons
	.word	gText_MonCantMakeAnAppealAfterThis
	.word	gText_SettledDownJustLittleBit
	.word	gText_BecameObliviousToOtherMons
	.word	gText_BecameLessAwareOfOtherMons
	.word	gText_StoppedCaringAboutOtherMons
	.word	gText_TriedToStartleOtherMons
	.word	gText_TriedToDazzleOthers
	.word	gText_JudgeLookedAwayFromMon
	.word	gText_TriedToUnnerveNextMon
	.word	gText_MonBecameNervous
	.word	gText_AppealTriedToUnnerveWaitingMons
	.word	gText_TauntedMonsDoingWell
	.word	gText_MonRegainedItsForm
	.word	gText_TriedToJamMonDoingWell
	.word	gText_StandoutMonHustledEvenMore
	.word	gText_LargelyUnnoticedMonWorkedHard
	.word	gText_WorkedAsMuchAsMonBefore
	.word	gText_MonsAppealDidNotGoWell
	.word	gText_WorkedAsMuchAsPrecedingMon
	.word	gText_MonsAppealDidNotGoWell2
	.word	gText_MonsAppealDidNotGoWell3
	.word	gText_MonsAppealWentSlightlyWell
	.word	gText_MonsAppealWentPrettyWell
	.word	gText_MonsAppealWentExcellently
	.word	gText_MonsAppealWasDud
	.word	gText_MonsAppealDidNotWorkVeryWell
	.word	gText_MonsAppealWentSlightlyWell2
	.word	gText_MonsAppealWentPrettyWell2
	.word	gText_MonsAppealWentVeryWell
	.word	gText_MonsAppealWentExcellently2
	.word	gText_SameTypeAsOneBeforeGood
	.word	gText_NotSameTypeAsOneBeforeGood
	.word	gText_StoodOutMuchMoreThanMonBefore
	.word	gText_DidntDoAsWellAsMonBefore
	.word	gText_MonsConditionRoseAboveUsual
	.word	gText_MonsHotStatusMadeGreatAppeal
	.word	gText_MovedUpInLineForNextAppeal
	.word	gText_MovedBackInLineForNextAppeal
	.word	gText_ScrambledUpOrderForNextTurn
	.word	gText_JudgeLookedAtMonExpectantly
	.word	gText_AppealComboWentOverWell
	.word	gText_AppealComboWentOverVeryWell
	.word	gText_AppealComboWentOverExcellently
	.word	gText_MonManagedToAvertGaze
	.word	gText_MonManagedToAvoidSeeingIt
	.word	gText_MonIsntFazedByThatSortOfThing
	.word	gText_MonBecameALittleDistracted
	.word	gText_TriedToStartleOtherPokemon
	.word	gText_MonLookedDownOutOfDistraction
	.word	gText_MonTurnedBackOutOfDistraction
	.word	gText_MonCouldntHelpUtteringCry
	.word	gText_MonCouldntHelpLeapingUp
	.word	gText_MonTrippedOutOfDistraction
	.word	gText_ButItMessedUp2
	.word	gText_ButItFailedToMakeTargetNervous
	.word	gText_ButItFailedToMakeAnyoneNervous
	.word	gText_ButItWasIgnored
	.word	gText_CouldntImproveItsCondition
	.word	gText_BadConditionResultedInWeakAppeal
	.word	gText_MonWasUnaffected
	.word	gText_AttractedCrowdsAttention
	.size	 sAppealResultTexts,248
	.align	2, 0
	.type	 sContestConditions,object
sContestConditions:
	.word	gText_Contest_Coolness
	.word	gText_Contest_Beauty
	.word	gText_Contest_Cuteness
	.word	gText_Contest_Smartness
	.word	gText_Contest_Toughness
	.size	 sContestConditions,20
	.align	2, 0
	.type	 sInvalidContestMoveNames,object
sInvalidContestMoveNames:
	.word	gText_CoolMove
	.word	gText_BeautyMove
	.word	gText_CuteMove
	.word	gText_SmartMove
	.word	gText_ToughMove
	.word	gText_3QuestionMarks
	.size	 sInvalidContestMoveNames,24
	.align	2, 0
	.type	 sContestBgTemplates,object
	.size	 sContestBgTemplates,16
sContestBgTemplates:
	.byte	0x80
	.byte	0x5
	.byte	0x0
	.space	1
	.byte	0xe9
	.byte	0x15
	.byte	0x0
	.space	1
	.byte	0xc2
	.byte	0x5
	.byte	0x0
	.space	1
	.byte	0xa3
	.byte	0x31
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sContestWindowTemplates,object
sContestWindowTemplates:
	.byte	0x0
	.byte	0x12
	.byte	0x0
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x200
	.byte	0x0
	.byte	0x12
	.byte	0x5
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x218
	.byte	0x0
	.byte	0x12
	.byte	0xa
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x230
	.byte	0x0
	.byte	0x12
	.byte	0xf
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x248
	.byte	0x0
	.byte	0x1
	.byte	0xf
	.byte	0x11
	.byte	0x4
	.byte	0xf
	.short	0x260
	.byte	0x0
	.byte	0x1
	.byte	0x1f
	.byte	0x9
	.byte	0x2
	.byte	0xf
	.short	0x2a4
	.byte	0x0
	.byte	0x1
	.byte	0x21
	.byte	0x9
	.byte	0x2
	.byte	0xf
	.short	0x2b6
	.byte	0x0
	.byte	0x1
	.byte	0x23
	.byte	0x9
	.byte	0x2
	.byte	0xf
	.short	0x2c8
	.byte	0x0
	.byte	0x1
	.byte	0x25
	.byte	0x9
	.byte	0x2
	.byte	0xf
	.short	0x2da
	.byte	0x0
	.byte	0x10
	.byte	0x1f
	.byte	0x1
	.byte	0x2
	.byte	0xf
	.short	0x2ec
	.byte	0x0
	.byte	0xb
	.byte	0x23
	.byte	0x12
	.byte	0x4
	.byte	0xf
	.short	0x2ee
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sContestWindowTemplates,96
	.globl	gDefaultContestWinners
	.align	2, 0
	.type	 gDefaultContestWinners,object
gDefaultContestWinners:
	.word	0x0
	.word	0xffff
	.short	0x135
	.byte	0x2
	.byte	0xbf
	.byte	0xe0
	.byte	0xd9
	.byte	0xd7
	.byte	0xe8
	.byte	0xd9
	.byte	0xe6
	.byte	0xff
	.space	3
	.byte	0xbf
	.byte	0xee
	.byte	0xe6
	.byte	0xd5
	.byte	0xff
	.space	3
	.byte	0x0
	.space	1
	.word	0x0
	.word	0xffff
	.short	0x165
	.byte	0x0
	.byte	0xce
	.byte	0xe6
	.byte	0xe3
	.byte	0xe4
	.byte	0xe3
	.byte	0xff
	.space	5
	.byte	0xbb
	.byte	0xe0
	.byte	0xe0
	.byte	0xd5
	.byte	0xe2
	.byte	0xff
	.space	2
	.byte	0x2
	.space	1
	.word	0x0
	.word	0xffff
	.short	0xb2
	.byte	0x1
	.byte	0xce
	.byte	0xe9
	.byte	0xec
	.byte	0xd5
	.byte	0xff
	.space	6
	.byte	0xc4
	.byte	0xe9
	.byte	0xe0
	.byte	0xdd
	.byte	0xd9
	.byte	0xe8
	.byte	0xff
	.space	1
	.byte	0x0
	.space	1
	.word	0x0
	.word	0xffff
	.short	0x137
	.byte	0x4
	.byte	0xca
	.byte	0xe9
	.byte	0xe0
	.byte	0xe7
	.byte	0xd9
	.byte	0xff
	.space	5
	.byte	0xbc
	.byte	0xd5
	.byte	0xdd
	.byte	0xe0
	.byte	0xed
	.byte	0xff
	.space	2
	.byte	0x3
	.space	1
	.word	0x0
	.word	0xffff
	.short	0x161
	.byte	0x3
	.byte	0xcd
	.byte	0xdc
	.byte	0xe9
	.byte	0xe4
	.byte	0xe9
	.byte	0xe4
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xd9
	.byte	0xe0
	.byte	0xd5
	.byte	0xe2
	.byte	0xed
	.byte	0xff
	.space	1
	.byte	0x1
	.space	1
	.word	0x0
	.word	0xffff
	.short	0x14f
	.byte	0x0
	.byte	0xc1
	.byte	0xe3
	.byte	0xe3
	.byte	0xee
	.byte	0xd5
	.byte	0xe2
	.byte	0xff
	.space	4
	.byte	0xc2
	.byte	0xd5
	.byte	0xe2
	.byte	0xd5
	.byte	0xff
	.space	3
	.byte	0x2
	.space	1
	.word	0x0
	.word	0xffff
	.short	0x126
	.byte	0x1
	.byte	0xc6
	.byte	0xe3
	.byte	0xe9
	.byte	0xd8
	.byte	0xd9
	.byte	0xd8
	.byte	0xff
	.space	4
	.byte	0xbc
	.byte	0xe6
	.byte	0xed
	.byte	0xd5
	.byte	0xe2
	.byte	0xe8
	.byte	0xff
	.space	1
	.byte	0x2
	.space	1
	.word	0x0
	.word	0xffff
	.short	0x12d
	.byte	0x2
	.byte	0xc5
	.byte	0xdd
	.byte	0xe8
	.byte	0xe7
	.byte	0xed
	.byte	0xff
	.space	5
	.byte	0xc9
	.byte	0xe1
	.byte	0xd5
	.byte	0xe6
	.byte	0xff
	.space	3
	.byte	0x3
	.space	1
	.size	 gDefaultContestWinners,256
	.globl	gContestOpponents
	.align	2, 0
	.type	 gContestOpponents,object
	.size	 gContestOpponents,6144
gContestOpponents:
	.byte	0x5
	.byte	0x1
	.byte	0xca
	.byte	0xe3
	.byte	0xe3
	.byte	0xd7
	.byte	0xdc
	.byte	0xed
	.byte	0xff
	.space	4
	.byte	0xc4
	.byte	0xdd
	.byte	0xe1
	.byte	0xe1
	.byte	0xed
	.byte	0xff
	.space	2
	.byte	0x7
	.space	2
	.word	0xc000fff
	.byte	0x44
	.space	1
	.short	0x2e
	.short	0x2c
	.short	0x24
	.short	0x150
	.byte	0xa
	.byte	0x4
	.byte	0xa
	.byte	0x3
	.byte	0x4
	.byte	0x32
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x3a
	.byte	0x1
	.byte	0xc7
	.byte	0xe9
	.byte	0xe7
	.byte	0xdd
	.byte	0xe0
	.byte	0xe0
	.byte	0xd9
	.byte	0xff
	.space	3
	.byte	0xbf
	.byte	0xd8
	.byte	0xdd
	.byte	0xe8
	.byte	0xdc
	.byte	0xff
	.space	2
	.byte	0x8
	.space	2
	.word	-0x7dfff001
	.byte	0x10
	.space	1
	.short	0x9c
	.short	0x107
	.short	0x21
	.short	0x157
	.byte	0xa
	.byte	0xa
	.byte	0x6
	.byte	0x1
	.byte	0x2
	.byte	0x3c
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xd
	.byte	0x1
	.byte	0xbe
	.byte	0xe9
	.byte	0xe7
	.byte	0xe8
	.byte	0xd9
	.byte	0xe6
	.byte	0xff
	.space	4
	.byte	0xbf
	.byte	0xea
	.byte	0xd5
	.byte	0xe2
	.byte	0xff
	.space	3
	.byte	0xb
	.space	2
	.word	0x21000fff
	.byte	0x8
	.space	1
	.short	0x13e
	.short	0xec
	.short	0x71
	.short	0x10
	.byte	0x2
	.byte	0xa
	.byte	0xa
	.byte	0xc
	.byte	0x4
	.byte	0x46
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x11
	.byte	0x1
	.byte	0xbe
	.byte	0xe3
	.byte	0xe8
	.byte	0xe7
	.byte	0xff
	.space	6
	.byte	0xc5
	.byte	0xd9
	.byte	0xe0
	.byte	0xe7
	.byte	0xd9
	.byte	0xed
	.byte	0xff
	.space	1
	.byte	0x10
	.space	2
	.word	0x20800fff
	.byte	0x60
	.space	1
	.short	0x75
	.short	0xeb
	.short	0x14b
	.short	0x4a
	.byte	0x3
	.byte	0x3
	.byte	0x5
	.byte	0x2
	.byte	0x7
	.byte	0x50
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x14
	.byte	0x1
	.byte	0xce
	.byte	0xd5
	.byte	0xe8
	.byte	0xd5
	.byte	0xed
	.byte	0xff
	.space	5
	.byte	0xc7
	.byte	0xd5
	.byte	0xd8
	.byte	0xdd
	.byte	0xe7
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.byte	0x12
	.space	2
	.word	-0x7fbff001
	.byte	0x4
	.space	1
	.short	0x11
	.short	0x61
	.short	0x14c
	.short	0x2d
	.byte	0x1
	.byte	0x3
	.byte	0x3
	.byte	0x5
	.byte	0x4
	.byte	0x5a
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x22
	.byte	0x1
	.byte	0xc8
	.byte	0xdd
	.byte	0xe2
	.byte	0xd8
	.byte	0xd5
	.byte	0xff
	.space	5
	.byte	0xcc
	.byte	0xd5
	.byte	0xed
	.byte	0xe1
	.byte	0xe3
	.byte	0xe2
	.byte	0xd8
	.byte	0xff
	.byte	0x2c
	.space	2
	.word	0x10200fff
	.byte	0x20
	.space	1
	.short	0x8d
	.short	0xce
	.short	0x9a
	.short	0xaa
	.byte	0x5
	.byte	0x2
	.byte	0xa
	.byte	0x7
	.byte	0x8
	.byte	0x64
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x1d
	.byte	0x1
	.byte	0xcd
	.byte	0xe1
	.byte	0xdd
	.byte	0xe7
	.byte	0xdc
	.byte	0xff
	.space	5
	.byte	0xc1
	.byte	0xe6
	.byte	0xd5
	.byte	0xe2
	.byte	0xe8
	.byte	0xff
	.space	2
	.byte	0x23
	.space	2
	.word	0x20100fff
	.byte	0x20
	.space	1
	.short	0x4e
	.short	0x49
	.short	0x48
	.short	0xd5
	.byte	0x3
	.byte	0x3
	.byte	0xa
	.byte	0x2
	.byte	0x2
	.byte	0x32
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x6b
	.byte	0x1
	.byte	0xcd
	.byte	0xe0
	.byte	0xd9
	.byte	0xd5
	.byte	0xe0
	.byte	0xff
	.space	5
	.byte	0xca
	.byte	0xd5
	.byte	0xdd
	.byte	0xdb
	.byte	0xd9
	.byte	0xff
	.space	2
	.byte	0x1a
	.space	2
	.word	0x8080fff
	.byte	0x18
	.space	1
	.short	0x3e
	.short	0x37
	.short	0x2d
	.short	0x13d
	.byte	0x3
	.byte	0x5
	.byte	0x1
	.byte	0xa
	.byte	0xa
	.byte	0x3c
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x1f
	.byte	0x1
	.byte	0xcd
	.byte	0xe0
	.byte	0xe3
	.byte	0xdf
	.byte	0xe8
	.byte	0xdc
	.byte	0xff
	.space	4
	.byte	0xbb
	.byte	0xe0
	.byte	0xd9
	.byte	0xd7
	.byte	0xff
	.space	3
	.byte	0x1f
	.space	2
	.word	0x40040fff
	.byte	0x58
	.space	1
	.short	0x46
	.short	0x44
	.short	0x119
	.short	0xe3
	.byte	0xa
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x12
	.byte	0x46
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x25
	.byte	0x1
	.byte	0xd1
	.byte	0xdc
	.byte	0xdd
	.byte	0xe6
	.byte	0xdd
	.byte	0xe7
	.byte	0xff
	.space	4
	.byte	0xcd
	.byte	0xed
	.byte	0xd8
	.byte	0xe2
	.byte	0xd9
	.byte	0xed
	.byte	0xff
	.space	1
	.byte	0x2f
	.space	2
	.word	-0x7ffdf001
	.byte	0x24
	.space	1
	.short	0x136
	.short	0x67
	.short	0xfd
	.short	0x130
	.byte	0x2
	.byte	0x2
	.byte	0x7
	.byte	0x2
	.byte	0x7
	.byte	0x50
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x28
	.byte	0x1
	.byte	0xc7
	.byte	0xd5
	.byte	0xdc
	.byte	0xdd
	.byte	0xe8
	.byte	0xd5
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xe3
	.byte	0xe6
	.byte	0xe6
	.byte	0xdd
	.byte	0xe7
	.byte	0xff
	.space	1
	.byte	0x26
	.space	2
	.word	0x8010fff
	.byte	0x44
	.space	1
	.short	0x45
	.short	0xe9
	.short	0x21
	.short	0xb3
	.byte	0x9
	.byte	0x1
	.byte	0x1
	.byte	0x8
	.byte	0x1
	.byte	0x5a
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x30
	.byte	0x1
	.byte	0xcc
	.byte	0xe3
	.byte	0xe2
	.byte	0xd5
	.byte	0xe6
	.byte	0xff
	.space	5
	.byte	0xc7
	.byte	0xd5
	.byte	0xe6
	.byte	0xdd
	.byte	0xd5
	.byte	0xdc
	.byte	0xff
	.space	1
	.byte	0xa
	.space	2
	.word	0x8008fff
	.byte	0x44
	.space	1
	.short	0xe8
	.short	0x14e
	.short	0x1d
	.short	0x24
	.byte	0x5
	.byte	0xa
	.byte	0x2
	.byte	0xa
	.byte	0x2
	.byte	0x64
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xa9
	.byte	0x0
	.byte	0xbc
	.byte	0xd5
	.byte	0xe8
	.byte	0xe6
	.byte	0xe3
	.byte	0xff
	.space	5
	.byte	0xcc
	.byte	0xe9
	.byte	0xe7
	.byte	0xe7
	.byte	0xd9
	.byte	0xe0
	.byte	0xe0
	.byte	0xff
	.byte	0x21
	.space	2
	.word	-0x6fffb001
	.byte	0x38
	.space	1
	.short	0x72
	.short	0xd4
	.short	0x6d
	.short	0x8d
	.byte	0x4
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0xa
	.byte	0x32
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x3c
	.byte	0x1
	.byte	0xc1
	.byte	0xe9
	.byte	0xe0
	.byte	0xdd
	.byte	0xe2
	.byte	0xff
	.space	5
	.byte	0xc7
	.byte	0xd9
	.byte	0xe0
	.byte	0xd5
	.byte	0xe2
	.byte	0xdd
	.byte	0xd9
	.byte	0xff
	.byte	0x6
	.space	2
	.word	0x40002fff
	.byte	0x10
	.space	1
	.short	0x7c
	.short	0x85
	.short	0x5c
	.short	0x119
	.byte	0x1
	.byte	0xa
	.byte	0x1
	.byte	0xa
	.byte	0x5
	.byte	0x3c
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x36
	.byte	0x1
	.byte	0xcc
	.byte	0xdd
	.byte	0xdf
	.byte	0xd9
	.byte	0xe0
	.byte	0xd9
	.byte	0xd7
	.byte	0xff
	.space	3
	.byte	0xbd
	.byte	0xdc
	.byte	0xd5
	.byte	0xe2
	.byte	0xd7
	.byte	0xd9
	.byte	0xff
	.space	1
	.byte	0xf
	.space	2
	.word	-0x7fffe001
	.byte	0xc
	.space	1
	.short	0xd1
	.short	0x56
	.short	0x57
	.short	0x2e
	.byte	0x14
	.byte	0xa
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x46
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x1
	.byte	0x0
	.byte	0xbc
	.byte	0xe9
	.byte	0xe0
	.byte	0xd6
	.byte	0xed
	.byte	0xff
	.space	5
	.byte	0xbb
	.byte	0xdb
	.byte	0xd5
	.byte	0xe8
	.byte	0xdc
	.byte	0xd5
	.byte	0xff
	.space	1
	.byte	0x14
	.space	2
	.word	0xc000fff
	.byte	0x30
	.space	1
	.short	0x2d
	.short	0x49
	.short	0x21
	.short	0xe6
	.byte	0x5
	.byte	0x3
	.byte	0xa
	.byte	0xa
	.byte	0x4
	.byte	0x32
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xc
	.byte	0x0
	.byte	0xc0
	.byte	0xe9
	.byte	0xe8
	.byte	0xe8
	.byte	0xd9
	.byte	0xe6
	.byte	0xd6
	.byte	0xd9
	.byte	0xff
	.space	2
	.byte	0xbc
	.byte	0xd9
	.byte	0xd5
	.byte	0xe9
	.byte	0xff
	.space	3
	.byte	0x28
	.space	2
	.word	-0x7dfff001
	.byte	0x28
	.space	1
	.short	0x30
	.short	0x12
	.short	0x13e
	.short	0xdb
	.byte	0x3
	.byte	0xa
	.byte	0x2
	.byte	0xa
	.byte	0x4
	.byte	0x3c
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x11
	.byte	0x0
	.byte	0xca
	.byte	0xdd
	.byte	0xd8
	.byte	0xd9
	.byte	0xe3
	.byte	0xe8
	.byte	0xff
	.space	4
	.byte	0xc5
	.byte	0xd5
	.byte	0xed
	.byte	0xff
	.space	4
	.byte	0x22
	.space	2
	.word	0x21000fff
	.byte	0xc
	.space	1
	.short	0x77
	.short	0x62
	.short	0x14c
	.short	0x129
	.byte	0xa
	.byte	0x8
	.byte	0x4
	.byte	0x2
	.byte	0x3
	.byte	0x46
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x32
	.byte	0x0
	.byte	0xbe
	.byte	0xdd
	.byte	0xdb
	.byte	0xe0
	.byte	0xd9
	.byte	0xff
	.space	5
	.byte	0xbd
	.byte	0xd5
	.byte	0xe0
	.byte	0xd9
	.byte	0xff
	.space	3
	.byte	0x37
	.space	2
	.word	0x20800fff
	.byte	0x60
	.space	1
	.short	0x5b
	.short	0x59
	.short	0x5a
	.short	0xde
	.byte	0x4
	.byte	0x2
	.byte	0x3
	.byte	0x5
	.byte	0xa
	.byte	0x50
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x3c
	.byte	0x0
	.byte	0xd1
	.byte	0xd5
	.byte	0xdb
	.byte	0xdd
	.byte	0xe0
	.byte	0xff
	.space	5
	.byte	0xbd
	.byte	0xd5
	.byte	0xdd
	.byte	0xe8
	.byte	0xe0
	.byte	0xdd
	.byte	0xe2
	.byte	0xff
	.byte	0x35
	.space	2
	.word	-0x7fbff001
	.byte	0x48
	.space	1
	.short	0x38
	.short	0xf0
	.short	0x22
	.short	0x3a
	.byte	0x2
	.byte	0xa
	.byte	0x5
	.byte	0x3
	.byte	0xa
	.byte	0x5a
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x9e
	.byte	0x0
	.byte	0xce
	.byte	0xe3
	.byte	0xe8
	.byte	0xd8
	.byte	0xdd
	.byte	0xe0
	.byte	0xff
	.space	4
	.byte	0xbd
	.byte	0xe3
	.byte	0xe0
	.byte	0xd6
	.byte	0xed
	.byte	0xff
	.space	2
	.byte	0x5
	.space	2
	.word	0x10200fff
	.byte	0xc
	.space	1
	.short	0x63
	.short	0x67
	.short	0x39
	.short	0x3b
	.byte	0x6
	.byte	0xa
	.byte	0x2
	.byte	0x1
	.byte	0x5
	.byte	0x64
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xa5
	.byte	0x0
	.byte	0xbc
	.byte	0xd5
	.byte	0xe0
	.byte	0xd9
	.byte	0xd8
	.byte	0xed
	.byte	0xff
	.space	4
	.byte	0xc5
	.byte	0xed
	.byte	0xe0
	.byte	0xdd
	.byte	0xd9
	.byte	0xff
	.space	2
	.byte	0x2d
	.space	2
	.word	0x20100fff
	.byte	0x14
	.space	1
	.short	0xe2
	.short	0x61
	.short	0x81
	.short	0xd5
	.byte	0x8
	.byte	0x6
	.byte	0x8
	.byte	0x6
	.byte	0x2
	.byte	0x5a
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xe1
	.byte	0x0
	.byte	0xbc
	.byte	0xdd
	.byte	0xe6
	.byte	0xd8
	.byte	0xe0
	.byte	0xed
	.byte	0xff
	.space	4
	.byte	0xc6
	.byte	0xdd
	.byte	0xd5
	.byte	0xe1
	.byte	0xff
	.space	3
	.byte	0x42
	.space	2
	.word	0x8080fff
	.byte	0x70
	.space	1
	.short	0xd9
	.short	0x107
	.short	0x108
	.short	0xd8
	.byte	0x4
	.byte	0x3
	.byte	0xa
	.byte	0x5
	.byte	0x3
	.byte	0x50
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xf6
	.byte	0x0
	.byte	0xce
	.byte	0xd5
	.byte	0xe6
	.byte	0xea
	.byte	0xdd
	.byte	0xe8
	.byte	0xd5
	.byte	0xe6
	.byte	0xff
	.space	2
	.byte	0xc7
	.byte	0xdd
	.byte	0xe0
	.byte	0xe3
	.byte	0xff
	.space	3
	.byte	0x27
	.space	2
	.word	0x40040fff
	.byte	0x40
	.space	1
	.short	0x25
	.short	0x103
	.short	0xf2
	.short	0x5b
	.byte	0x8
	.byte	0x5
	.byte	0x5
	.byte	0x8
	.byte	0xa
	.byte	0x46
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x3b
	.byte	0x1
	.byte	0xcc
	.byte	0xd9
	.byte	0xe0
	.byte	0xdd
	.byte	0xd5
	.byte	0xff
	.space	5
	.byte	0xc5
	.byte	0xd5
	.byte	0xe6
	.byte	0xdd
	.byte	0xe2
	.byte	0xd5
	.byte	0xff
	.space	1
	.byte	0x20
	.space	2
	.word	0x24000fff
	.byte	0x29
	.space	1
	.short	0x50
	.short	0x159
	.short	0x140
	.short	0x113
	.byte	0x32
	.byte	0xf
	.byte	0x4b
	.byte	0xa
	.byte	0x14
	.byte	0x64
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x55
	.byte	0x0
	.byte	0xbe
	.byte	0xe9
	.byte	0xe3
	.byte	0xd8
	.byte	0xe3
	.byte	0xff
	.space	5
	.byte	0xbc
	.byte	0xe3
	.byte	0xd6
	.byte	0xd6
	.byte	0xed
	.byte	0xff
	.space	2
	.byte	0x33
	.space	2
	.word	-0x7dfff001
	.byte	0x7d
	.space	1
	.short	0x40
	.short	0x1f
	.short	0xd8
	.short	0x2d
	.byte	0xf
	.byte	0x15
	.byte	0xf
	.byte	0x55
	.byte	0x23
	.byte	0x6e
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x48
	.byte	0x1
	.byte	0xca
	.byte	0xdd
	.byte	0xe2
	.byte	0xd7
	.byte	0xdc
	.byte	0xdd
	.byte	0xe2
	.byte	0xff
	.space	3
	.byte	0xbd
	.byte	0xe0
	.byte	0xd5
	.byte	0xdd
	.byte	0xe6
	.byte	0xd9
	.byte	0xff
	.space	1
	.byte	0x8
	.space	2
	.word	-0x7efff001
	.byte	0x71
	.space	1
	.short	0x2c
	.short	0x1c
	.short	0x5b
	.short	0xb9
	.byte	0x4b
	.byte	0x19
	.byte	0x19
	.byte	0xa
	.byte	0x19
	.byte	0x78
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x4b
	.byte	0x1
	.byte	0xc8
	.byte	0xd5
	.byte	0xd7
	.byte	0xd5
	.byte	0xd7
	.byte	0xff
	.space	5
	.byte	0xd1
	.byte	0xdd
	.byte	0xe0
	.byte	0xe0
	.byte	0xdd
	.byte	0xd9
	.byte	0xff
	.space	1
	.byte	0xb
	.space	2
	.word	-0x7f7ff001
	.byte	0x25
	.space	1
	.short	0xbf
	.short	0x2b
	.short	0x28
	.short	0x1c
	.byte	0xa
	.byte	0x1e
	.byte	0x19
	.byte	0x41
	.byte	0x19
	.byte	0x82
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x1c
	.byte	0x0
	.byte	0xcd
	.byte	0xdc
	.byte	0xe6
	.byte	0xd5
	.byte	0xe2
	.byte	0xd8
	.byte	0xff
	.space	4
	.byte	0xbd
	.byte	0xd5
	.byte	0xe7
	.byte	0xe7
	.byte	0xdd
	.byte	0xd8
	.byte	0xed
	.byte	0xff
	.byte	0x12
	.space	2
	.word	0x10400fff
	.byte	0x45
	.space	1
	.short	0xa3
	.short	0x6f
	.short	0x81
	.short	0x9a
	.byte	0x1e
	.byte	0x5a
	.byte	0x1e
	.byte	0xa
	.byte	0x64
	.byte	0x8c
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x57
	.byte	0x1
	.byte	0xce
	.byte	0xe3
	.byte	0xed
	.byte	0xd6
	.byte	0xd5
	.byte	0xe0
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xe3
	.byte	0xe6
	.byte	0xdb
	.byte	0xd5
	.byte	0xe2
	.byte	0xff
	.space	1
	.byte	0x2c
	.space	2
	.word	0x8200fff
	.byte	0x29
	.space	1
	.short	0x78
	.short	0x13d
	.short	0x3c
	.short	0x5d
	.byte	0x32
	.byte	0x28
	.byte	0xa
	.byte	0x23
	.byte	0x23
	.byte	0x96
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x34
	.byte	0x1
	.byte	0xbd
	.byte	0xdc
	.byte	0xd5
	.byte	0xe1
	.byte	0xd7
	.byte	0xdc
	.byte	0xd5
	.byte	0xe1
	.byte	0xff
	.space	2
	.byte	0xcd
	.byte	0xe9
	.byte	0xe1
	.byte	0xe1
	.byte	0xd9
	.byte	0xe6
	.byte	0xff
	.space	1
	.byte	0x1a
	.space	2
	.word	0x10100fff
	.byte	0x4d
	.space	1
	.short	0xb3
	.short	0x9
	.short	0x7
	.short	0x8
	.byte	0x28
	.byte	0x14
	.byte	0x28
	.byte	0x28
	.byte	0x28
	.byte	0x64
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x47
	.byte	0x1
	.byte	0xcd
	.byte	0xe4
	.byte	0xdd
	.byte	0xe2
	.byte	0xdd
	.byte	0xe2
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xdd
	.byte	0xe0
	.byte	0xd9
	.byte	0xe7
	.byte	0xff
	.space	2
	.byte	0x1f
	.space	2
	.word	-0x7ff7f001
	.byte	0x31
	.space	1
	.short	0x12a
	.short	0xf4
	.short	0x5f
	.short	0xfd
	.byte	0x19
	.byte	0x4b
	.byte	0x19
	.byte	0xa
	.byte	0x19
	.byte	0x6e
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x4d
	.byte	0x1
	.byte	0xcd
	.byte	0xeb
	.byte	0xd5
	.byte	0xd6
	.byte	0xed
	.byte	0xff
	.space	5
	.byte	0xbb
	.byte	0xe9
	.byte	0xd8
	.byte	0xe6
	.byte	0xd9
	.byte	0xed
	.byte	0xff
	.space	1
	.byte	0x2f
	.space	2
	.word	-0x5ffbf001
	.byte	0x29
	.space	1
	.short	0x77
	.short	0xc3
	.short	0xdb
	.short	0x36
	.byte	0x1e
	.byte	0x1e
	.byte	0x28
	.byte	0x1e
	.byte	0x19
	.byte	0x78
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x45
	.byte	0x1
	.byte	0xca
	.byte	0xe3
	.byte	0xdd
	.byte	0xe2
	.byte	0xdf
	.byte	0xd9
	.byte	0xe6
	.byte	0xff
	.space	3
	.byte	0xbb
	.byte	0xea
	.byte	0xd9
	.byte	0xe6
	.byte	0xed
	.byte	0xff
	.space	2
	.byte	0x26
	.space	2
	.word	-0x7ffdf001
	.byte	0x31
	.space	1
	.short	0x96
	.short	0x6d
	.short	0xad
	.short	0x9c
	.byte	0x28
	.byte	0xa
	.byte	0x1e
	.byte	0x28
	.byte	0x1e
	.byte	0x82
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x60
	.byte	0x1
	.byte	0xc5
	.byte	0xd9
	.byte	0xd7
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.space	5
	.byte	0xbb
	.byte	0xe6
	.byte	0xdd
	.byte	0xd5
	.byte	0xe2
	.byte	0xd5
	.byte	0xff
	.space	1
	.byte	0xa
	.space	2
	.word	-0x7ffef001
	.byte	0x61
	.space	1
	.short	0xa8
	.short	0x67
	.short	0xf6
	.short	0x14
	.byte	0xa
	.byte	0xa
	.byte	0x28
	.byte	0x4b
	.byte	0x23
	.byte	0x8c
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x76
	.byte	0x0
	.byte	0xc1
	.byte	0xe3
	.byte	0xe0
	.byte	0xd8
	.byte	0xd9
	.byte	0xe2
	.byte	0xff
	.space	4
	.byte	0xbb
	.byte	0xe7
	.byte	0xdc
	.byte	0xe8
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.space	1
	.byte	0x21
	.space	2
	.word	-0x7fff7001
	.byte	0xd
	.space	1
	.short	0x1e
	.short	0x1f
	.short	0x20
	.short	0x27
	.byte	0x46
	.byte	0x1e
	.byte	0x5
	.byte	0x1e
	.byte	0x19
	.byte	0x96
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x53
	.byte	0x1
	.byte	0xbc
	.byte	0xe3
	.byte	0xd6
	.byte	0xe3
	.byte	0xd5
	.byte	0xd7
	.byte	0xdc
	.byte	0xff
	.space	3
	.byte	0xcd
	.byte	0xd5
	.byte	0xe2
	.byte	0xd8
	.byte	0xe6
	.byte	0xd5
	.byte	0xff
	.space	1
	.byte	0x6
	.space	2
	.word	-0x7fffb001
	.byte	0x71
	.space	1
	.short	0x12c
	.short	0x15a
	.short	0x59
	.short	0xf8
	.byte	0x2d
	.byte	0x2d
	.byte	0x3c
	.byte	0x19
	.byte	0xf
	.byte	0x64
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xe3
	.byte	0x0
	.byte	0xbd
	.byte	0xe3
	.byte	0xe6
	.byte	0xe4
	.byte	0xed
	.byte	0xff
	.space	5
	.byte	0xbd
	.byte	0xd5
	.byte	0xe6
	.byte	0xe7
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.space	1
	.byte	0x23
	.space	2
	.word	0x8002fff
	.byte	0x4d
	.space	1
	.short	0x81
	.short	0x68
	.short	0x61
	.short	0xf
	.byte	0x28
	.byte	0x1e
	.byte	0x19
	.byte	0x3c
	.byte	0x14
	.byte	0x6e
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xe
	.byte	0x1
	.byte	0xce
	.byte	0xd5
	.byte	0xd8
	.byte	0xe3
	.byte	0xff
	.space	6
	.byte	0xc5
	.byte	0xd5
	.byte	0xe8
	.byte	0xe6
	.byte	0xdd
	.byte	0xe2
	.byte	0xd5
	.byte	0xff
	.byte	0x10
	.space	2
	.word	0x8001fff
	.byte	0x39
	.space	1
	.short	0x136
	.short	0x2d
	.short	0xf0
	.short	0x160
	.byte	0xf
	.byte	0xf
	.byte	0x1e
	.byte	0xf
	.byte	0x4b
	.byte	0x78
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x50
	.byte	0x0
	.byte	0xbc
	.byte	0xe6
	.byte	0xe3
	.byte	0xeb
	.byte	0xe0
	.byte	0xe3
	.byte	0xff
	.space	4
	.byte	0xc6
	.byte	0xe9
	.byte	0xdf
	.byte	0xd9
	.byte	0xff
	.space	3
	.byte	0x11
	.space	2
	.word	0xc000fff
	.byte	0x31
	.space	1
	.short	0x119
	.short	0x32
	.short	0x2d
	.short	0x5d
	.byte	0x14
	.byte	0x28
	.byte	0x28
	.byte	0x1e
	.byte	0x14
	.byte	0x64
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x53
	.byte	0x0
	.byte	0xc0
	.byte	0xd9
	.byte	0xe8
	.byte	0xd7
	.byte	0xdc
	.byte	0xdd
	.byte	0xe2
	.byte	0xff
	.space	3
	.byte	0xcc
	.byte	0xd5
	.byte	0xe9
	.byte	0xe0
	.byte	0xff
	.space	3
	.byte	0x42
	.space	2
	.word	-0x7dfff001
	.byte	0x15
	.space	1
	.short	0x107
	.short	0xd2
	.short	0x13
	.short	0xd8
	.byte	0x28
	.byte	0xa
	.byte	0x28
	.byte	0x14
	.byte	0x14
	.byte	0x6e
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x56
	.byte	0x0
	.byte	0xcd
	.byte	0xd9
	.byte	0xd9
	.byte	0xe0
	.byte	0xd9
	.byte	0xed
	.byte	0xff
	.space	4
	.byte	0xc4
	.byte	0xd5
	.byte	0xd8
	.byte	0xd5
	.byte	0xff
	.space	3
	.byte	0x14
	.space	2
	.word	0x21000fff
	.byte	0x19
	.space	1
	.short	0xd5
	.short	0x3a
	.short	0xdb
	.short	0x2d
	.byte	0xa
	.byte	0x1e
	.byte	0x28
	.byte	0x14
	.byte	0x14
	.byte	0x78
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x60
	.byte	0x0
	.byte	0xbe
	.byte	0xe6
	.byte	0xe3
	.byte	0xeb
	.byte	0xee
	.byte	0xdd
	.byte	0xe2
	.byte	0xff
	.space	3
	.byte	0xd4
	.byte	0xd9
	.byte	0xd9
	.byte	0xdf
	.byte	0xff
	.space	3
	.byte	0x25
	.space	2
	.word	0x20800fff
	.byte	0x79
	.space	1
	.short	0x32
	.short	0xf8
	.short	0xed
	.short	0xd8
	.byte	0xa
	.byte	0x28
	.byte	0x32
	.byte	0x1e
	.byte	0x2d
	.byte	0x82
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x6b
	.byte	0x0
	.byte	0xc2
	.byte	0xdd
	.byte	0xe8
	.byte	0xd9
	.byte	0xe1
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.space	3
	.byte	0xbe
	.byte	0xdd
	.byte	0xd9
	.byte	0xdb
	.byte	0xe3
	.byte	0xff
	.space	2
	.byte	0x15
	.space	2
	.word	-0x7fbff001
	.byte	0x45
	.space	1
	.short	0x147
	.short	0xc5
	.short	0x117
	.short	0x5
	.byte	0x2d
	.byte	0x14
	.byte	0xa
	.byte	0x14
	.byte	0x2d
	.byte	0x8c
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xf2
	.byte	0x0
	.byte	0xbc
	.byte	0xe0
	.byte	0xdd
	.byte	0xe7
	.byte	0xe7
	.byte	0xff
	.space	5
	.byte	0xbb
	.byte	0xe0
	.byte	0xdd
	.byte	0xed
	.byte	0xd5
	.byte	0xdc
	.byte	0xff
	.space	1
	.byte	0x55
	.space	2
	.word	0x10200fff
	.byte	0x59
	.space	1
	.short	0x2f
	.short	0x87
	.short	0x79
	.short	0x26
	.byte	0x14
	.byte	0x23
	.byte	0x28
	.byte	0x14
	.byte	0x14
	.byte	0x96
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xef
	.byte	0x0
	.byte	0xc5
	.byte	0xdd
	.byte	0xd8
	.byte	0xe0
	.byte	0xd9
	.byte	0xdf
	.byte	0xff
	.space	4
	.byte	0xc8
	.byte	0xd5
	.byte	0xe8
	.byte	0xd5
	.byte	0xe0
	.byte	0xdd
	.byte	0xd5
	.byte	0xff
	.byte	0x12
	.space	2
	.word	0x20100fff
	.byte	0x15
	.space	1
	.short	0x15f
	.short	0x62
	.short	0x67
	.short	0xd5
	.byte	0x28
	.byte	0xa
	.byte	0x28
	.byte	0x19
	.byte	0x19
	.byte	0x8c
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xd1
	.byte	0x0
	.byte	0xcd
	.byte	0xe2
	.byte	0xe9
	.byte	0xd6
	.byte	0xd6
	.byte	0xdd
	.byte	0xe2
	.byte	0xe7
	.byte	0xff
	.space	2
	.byte	0xbe
	.byte	0xd9
	.byte	0xea
	.byte	0xdd
	.byte	0xe2
	.byte	0xff
	.space	2
	.byte	0x30
	.space	2
	.word	0x8080fff
	.byte	0x51
	.space	1
	.short	0xb8
	.short	0x10d
	.short	0x27
	.short	0x2c
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x82
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xc8
	.byte	0x0
	.byte	0xbe
	.byte	0xe6
	.byte	0xd9
	.byte	0xd5
	.byte	0xea
	.byte	0xdd
	.byte	0xe7
	.byte	0xff
	.space	3
	.byte	0xce
	.byte	0xed
	.byte	0xe0
	.byte	0xe3
	.byte	0xe6
	.byte	0xff
	.space	2
	.byte	0x28
	.space	2
	.word	0x40040fff
	.byte	0x29
	.space	1
	.short	0xc3
	.short	0xd4
	.short	0x6d
	.short	0xdc
	.byte	0xa
	.byte	0x23
	.byte	0xa
	.byte	0x2d
	.byte	0x14
	.byte	0x78
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x31
	.byte	0x1
	.byte	0xc6
	.byte	0xd5
	.byte	0xdd
	.byte	0xe6
	.byte	0xe2
	.byte	0xff
	.space	5
	.byte	0xcc
	.byte	0xe3
	.byte	0xe2
	.byte	0xe2
	.byte	0xdd
	.byte	0xd9
	.byte	0xff
	.space	1
	.byte	0x37
	.space	2
	.word	-0x7bfff001
	.byte	0x62
	.space	1
	.short	0x13f
	.short	0xe8
	.short	0x6a
	.short	0x24
	.byte	0x1e
	.byte	0x32
	.byte	0x23
	.byte	0x64
	.byte	0x5a
	.byte	0xc8
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x13
	.byte	0x1
	.byte	0xcd
	.byte	0xdc
	.byte	0xdd
	.byte	0xda
	.byte	0xe8
	.byte	0xed
	.byte	0xff
	.space	4
	.byte	0xbd
	.byte	0xe0
	.byte	0xd5
	.byte	0xe9
	.byte	0xd8
	.byte	0xdd
	.byte	0xd5
	.byte	0xff
	.byte	0x8
	.space	2
	.word	-0x7dfff001
	.byte	0xe
	.space	1
	.short	0x4a
	.short	0xd
	.short	0x99
	.short	0x146
	.byte	0x4b
	.byte	0x4b
	.byte	0x41
	.byte	0x23
	.byte	0x46
	.byte	0xd2
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x23
	.byte	0x1
	.byte	0xc8
	.byte	0xdd
	.byte	0xe2
	.byte	0xd5
	.byte	0xe7
	.byte	0xff
	.space	5
	.byte	0xbf
	.byte	0xe0
	.byte	0xdd
	.byte	0xd5
	.byte	0xe7
	.byte	0xff
	.space	2
	.byte	0xb
	.space	2
	.word	-0x7efff001
	.byte	0x72
	.space	1
	.short	0x67
	.short	0x9a
	.short	0x1c
	.short	0xe2
	.byte	0x1e
	.byte	0x32
	.byte	0x5f
	.byte	0x46
	.byte	0x46
	.byte	0xdc
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x15
	.byte	0x1
	.byte	0xd1
	.byte	0xd9
	.byte	0xe0
	.byte	0xe3
	.byte	0xeb
	.byte	0xff
	.space	5
	.byte	0xc4
	.byte	0xd5
	.byte	0xd8
	.byte	0xd9
	.byte	0xff
	.space	3
	.byte	0x12
	.space	2
	.word	-0x7f7ff001
	.byte	0xe
	.space	1
	.short	0x61
	.short	0x14c
	.short	0x11
	.short	0x13
	.byte	0x41
	.byte	0x55
	.byte	0x23
	.byte	0x4b
	.byte	0x28
	.byte	0xe6
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x6
	.byte	0x1
	.byte	0xd3
	.byte	0xd9
	.byte	0xe2
	.byte	0xd5
	.byte	0xff
	.space	6
	.byte	0xc0
	.byte	0xe6
	.byte	0xd5
	.byte	0xe2
	.byte	0xd7
	.byte	0xdd
	.byte	0xe7
	.byte	0xff
	.byte	0x2c
	.space	2
	.word	-0x7fbff001
	.byte	0x62
	.space	1
	.short	0x10d
	.short	0xa8
	.short	0x13c
	.short	0x24
	.byte	0x28
	.byte	0x50
	.byte	0x23
	.byte	0x46
	.byte	0x46
	.byte	0xf0
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xb
	.byte	0x1
	.byte	0xce
	.byte	0xdd
	.byte	0xda
	.byte	0xe0
	.byte	0xed
	.byte	0xff
	.space	5
	.byte	0xbb
	.byte	0xe0
	.byte	0xdd
	.byte	0xe7
	.byte	0xdc
	.byte	0xd5
	.byte	0xff
	.space	1
	.byte	0x1a
	.space	2
	.word	-0x7fdff001
	.byte	0x2a
	.space	1
	.short	0xea
	.short	0x13e
	.short	0x4e
	.short	0x122
	.byte	0x28
	.byte	0x46
	.byte	0x19
	.byte	0x50
	.byte	0x64
	.byte	0xfa
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x77
	.byte	0x0
	.byte	0xc5
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0xe7
	.byte	0xd9
	.byte	0xd5
	.byte	0xff
	.space	3
	.byte	0xcd
	.byte	0xd5
	.byte	0xe9
	.byte	0xe0
	.byte	0xff
	.space	3
	.byte	0x1f
	.space	2
	.word	-0x7feff001
	.byte	0x76
	.space	1
	.short	0xaf
	.short	0x30
	.short	0x1e
	.short	0x1f
	.byte	0x50
	.byte	0x3c
	.byte	0x1e
	.byte	0x46
	.byte	0x5a
	.byte	0xc8
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x5f
	.byte	0x1
	.byte	0xbd
	.byte	0xd5
	.byte	0xe7
	.byte	0xe8
	.byte	0xd9
	.byte	0xe6
	.byte	0xff
	.space	4
	.byte	0xc0
	.byte	0xd9
	.byte	0xe0
	.byte	0xdd
	.byte	0xd7
	.byte	0xdd
	.byte	0xd5
	.byte	0xff
	.byte	0x2f
	.space	2
	.word	-0x7ff7f001
	.byte	0x7e
	.space	1
	.short	0xf1
	.short	0x137
	.short	0xc9
	.short	0xd8
	.byte	0x46
	.byte	0x50
	.byte	0x50
	.byte	0x32
	.byte	0x41
	.byte	0xd2
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x43
	.byte	0x0
	.byte	0xbd
	.byte	0xdc
	.byte	0xe3
	.byte	0xdf
	.byte	0xd9
	.byte	0xe1
	.byte	0xff
	.space	4
	.byte	0xbf
	.byte	0xe1
	.byte	0xdd
	.byte	0xe0
	.byte	0xdd
	.byte	0xe3
	.byte	0xff
	.space	1
	.byte	0x26
	.space	2
	.word	-0x7ffbf001
	.byte	0x46
	.space	1
	.short	0x45
	.short	0x74
	.short	0x2
	.short	0xb8
	.byte	0x46
	.byte	0x55
	.byte	0x19
	.byte	0x3c
	.byte	0x32
	.byte	0xdc
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xf
	.byte	0x1
	.byte	0xc6
	.byte	0xe3
	.byte	0xe1
	.byte	0xd6
	.byte	0xd9
	.byte	0xff
	.space	5
	.byte	0xc5
	.byte	0xd5
	.byte	0xe6
	.byte	0xe0
	.byte	0xd5
	.byte	0xff
	.space	2
	.byte	0xa
	.space	2
	.word	-0x7ffdf001
	.byte	0x3a
	.space	1
	.short	0xd5
	.short	0x94
	.short	0xfd
	.short	0x2d
	.byte	0x28
	.byte	0x3c
	.byte	0x5a
	.byte	0x2d
	.byte	0x46
	.byte	0xe6
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x50
	.byte	0x1
	.byte	0xd0
	.byte	0xdd
	.byte	0xe4
	.byte	0xd9
	.byte	0xe7
	.byte	0xff
	.space	5
	.byte	0xbe
	.byte	0xd5
	.byte	0xe6
	.byte	0xe6
	.byte	0xed
	.byte	0xe0
	.byte	0xff
	.space	1
	.byte	0x21
	.space	2
	.word	-0x7ffef001
	.byte	0x62
	.space	1
	.short	0x131
	.short	0x89
	.short	0x23
	.short	0x67
	.byte	0x23
	.byte	0x32
	.byte	0x5a
	.byte	0x28
	.byte	0x64
	.byte	0xf0
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x40
	.byte	0x1
	.byte	0xc7
	.byte	0xd9
	.byte	0xe6
	.byte	0xd5
	.byte	0xdd
	.byte	0xe0
	.byte	0xff
	.space	4
	.byte	0xcd
	.byte	0xd9
	.byte	0xe0
	.byte	0xd9
	.byte	0xe2
	.byte	0xd5
	.byte	0xff
	.space	1
	.byte	0x16
	.space	2
	.word	-0x7fff7001
	.byte	0x1a
	.space	1
	.short	0x160
	.short	0x9c
	.short	0x143
	.short	0x96
	.byte	0x1e
	.byte	0x64
	.byte	0x64
	.byte	0x32
	.byte	0x1e
	.byte	0xfa
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x81
	.byte	0x0
	.byte	0xc5
	.byte	0xd5
	.byte	0xe6
	.byte	0xe4
	.byte	0xd5
	.byte	0xdb
	.byte	0xff
	.space	4
	.byte	0xc8
	.byte	0xe3
	.byte	0xd9
	.byte	0xe0
	.byte	0xff
	.space	3
	.byte	0x23
	.space	2
	.word	-0x7fffb001
	.byte	0x52
	.space	1
	.short	0x21
	.short	0x96
	.short	0xaf
	.short	0x21
	.byte	0x1e
	.byte	0x1e
	.byte	0xa0
	.byte	0x32
	.byte	0xa0
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x51
	.byte	0x1
	.byte	0xc6
	.byte	0xe9
	.byte	0xe2
	.byte	0xe3
	.byte	0xe2
	.byte	0xd9
	.byte	0xff
	.space	4
	.byte	0xc6
	.byte	0xd5
	.byte	0xd7
	.byte	0xd9
	.byte	0xed
	.byte	0xff
	.space	2
	.byte	0x10
	.space	2
	.word	-0x7fffd001
	.byte	0x2a
	.space	1
	.short	0x99
	.short	0xf8
	.short	0x5e
	.short	0x5d
	.byte	0x32
	.byte	0x46
	.byte	0x3c
	.byte	0x46
	.byte	0x32
	.byte	0xd2
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x67
	.byte	0x1
	.byte	0xbb
	.byte	0xd6
	.byte	0xe7
	.byte	0xe3
	.byte	0xff
	.space	6
	.byte	0xbd
	.byte	0xe3
	.byte	0xe6
	.byte	0xd6
	.byte	0xdd
	.byte	0xe2
	.byte	0xff
	.space	1
	.byte	0x27
	.space	2
	.word	-0x7fffe001
	.byte	0xe
	.space	1
	.short	0xc3
	.short	0x102
	.short	0x3f
	.short	0xa3
	.byte	0x5f
	.byte	0x50
	.byte	0x55
	.byte	0x23
	.byte	0x23
	.byte	0xdc
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x67
	.byte	0x0
	.byte	0xbf
	.byte	0xdb
	.byte	0xdb
	.byte	0xe7
	.byte	0xe3
	.byte	0xe6
	.byte	0xff
	.space	4
	.byte	0xc1
	.byte	0xe6
	.byte	0xd5
	.byte	0xd7
	.byte	0xdd
	.byte	0xd9
	.byte	0xff
	.space	1
	.byte	0x20
	.space	2
	.word	0xc000fff
	.byte	0x62
	.space	1
	.short	0x17
	.short	0x5f
	.short	0x79
	.short	0x11d
	.byte	0x28
	.byte	0x32
	.byte	0x3c
	.byte	0x64
	.byte	0x50
	.byte	0xc8
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x68
	.byte	0x0
	.byte	0xbd
	.byte	0xe9
	.byte	0xd6
	.byte	0xdd
	.byte	0xe2
	.byte	0xff
	.space	5
	.byte	0xbd
	.byte	0xe3
	.byte	0xe0
	.byte	0xe8
	.byte	0xdd
	.byte	0xe2
	.byte	0xff
	.space	1
	.byte	0x41
	.space	2
	.word	-0x7dfff001
	.byte	0x52
	.space	1
	.short	0x7d
	.short	0x9b
	.short	0xc6
	.short	0x2d
	.byte	0x28
	.byte	0x23
	.byte	0x55
	.byte	0x23
	.byte	0x64
	.byte	0xd2
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x6a
	.byte	0x0
	.byte	0xc2
	.byte	0xdd
	.byte	0xe8
	.byte	0xe1
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.space	4
	.byte	0xbf
	.byte	0xe0
	.byte	0xe0
	.byte	0xdd
	.byte	0xd9
	.byte	0xff
	.space	2
	.byte	0x16
	.space	2
	.word	0x21000fff
	.byte	0x46
	.space	1
	.short	0xb3
	.short	0x117
	.short	0x74
	.short	0x19
	.byte	0x55
	.byte	0x1e
	.byte	0x19
	.byte	0x32
	.byte	0x64
	.byte	0xdc
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x7
	.byte	0x0
	.byte	0xcd
	.byte	0xe9
	.byte	0xe6
	.byte	0xe8
	.byte	0xe0
	.byte	0xd9
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xd5
	.byte	0xe6
	.byte	0xd7
	.byte	0xe9
	.byte	0xe7
	.byte	0xff
	.space	1
	.byte	0x31
	.space	2
	.word	0x20800fff
	.byte	0x52
	.space	1
	.short	0x27
	.short	0x91
	.short	0x108
	.short	0x6e
	.byte	0x1e
	.byte	0x23
	.byte	0x64
	.byte	0x28
	.byte	0x5f
	.byte	0xe6
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x73
	.byte	0x0
	.byte	0xc5
	.byte	0xdc
	.byte	0xd5
	.byte	0xe2
	.byte	0xdf
	.byte	0xd5
	.byte	0xe2
	.byte	0xff
	.space	3
	.byte	0xc5
	.byte	0xdd
	.byte	0xd5
	.byte	0xe6
	.byte	0xd5
	.byte	0xff
	.space	2
	.byte	0xe
	.space	2
	.word	-0x7fbff001
	.byte	0x46
	.space	1
	.short	0x5
	.short	0x63
	.short	0x108
	.short	0x27
	.byte	0x64
	.byte	0x32
	.byte	0x1e
	.byte	0x32
	.byte	0x64
	.byte	0xf0
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xcc
	.byte	0x0
	.byte	0xca
	.byte	0xdd
	.byte	0xe2
	.byte	0xe3
	.byte	0xd7
	.byte	0xff
	.space	5
	.byte	0xbc
	.byte	0xe6
	.byte	0xed
	.byte	0xd7
	.byte	0xd9
	.byte	0xff
	.space	2
	.byte	0x24
	.space	2
	.word	0x10200fff
	.byte	0x2a
	.space	1
	.short	0x99
	.short	0xbf
	.short	0x71
	.short	0xca
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0xfa
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xce
	.byte	0x0
	.byte	0xbe
	.byte	0xdd
	.byte	0xe0
	.byte	0xe8
	.byte	0xe3
	.byte	0xe8
	.byte	0xff
	.space	4
	.byte	0xc4
	.byte	0xd5
	.byte	0xe1
	.byte	0xdd
	.byte	0xd9
	.byte	0xff
	.space	2
	.byte	0x22
	.space	2
	.word	0x20100fff
	.byte	0x52
	.space	1
	.short	0xb4
	.short	0x119
	.short	0x6f
	.short	0x24
	.byte	0x28
	.byte	0x23
	.byte	0x64
	.byte	0x28
	.byte	0x6e
	.byte	0xf0
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xe5
	.byte	0x0
	.byte	0xbe
	.byte	0xe3
	.byte	0xe3
	.byte	0xe1
	.byte	0xe3
	.byte	0xe2
	.byte	0xd8
	.byte	0xff
	.space	3
	.byte	0xc4
	.byte	0xe3
	.byte	0xe6
	.byte	0xdb
	.byte	0xd9
	.byte	0xff
	.space	2
	.byte	0x30
	.space	2
	.word	0x8080fff
	.byte	0xe
	.space	1
	.short	0x2e
	.short	0x35
	.short	0xb9
	.short	0xf1
	.byte	0x64
	.byte	0x64
	.byte	0x1e
	.byte	0x19
	.byte	0x50
	.byte	0xe6
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xf1
	.byte	0x0
	.byte	0xc7
	.byte	0xdd
	.byte	0xe0
	.byte	0xdf
	.byte	0xd5
	.byte	0xe2
	.byte	0xff
	.space	4
	.byte	0xbe
	.byte	0xd9
	.byte	0xea
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.space	2
	.byte	0x19
	.space	2
	.word	0x40040fff
	.byte	0x1a
	.space	1
	.short	0xd0
	.short	0xd7
	.short	0x6f
	.short	0x3b
	.byte	0x32
	.byte	0x6e
	.byte	0x64
	.byte	0x23
	.byte	0x28
	.byte	0xdc
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x82
	.byte	0x0
	.byte	0xcc
	.byte	0xd5
	.byte	0xd8
	.byte	0xe3
	.byte	0xe7
	.byte	0xff
	.space	5
	.byte	0xc4
	.byte	0xe9
	.byte	0xe7
	.byte	0xe8
	.byte	0xdd
	.byte	0xe2
	.byte	0xd5
	.byte	0xff
	.byte	0x20
	.space	2
	.word	-0x7bfff001
	.byte	0x4f
	.space	1
	.short	0x3f
	.short	0x38
	.short	0xf0
	.short	0x2c
	.byte	0xa0
	.byte	0xc8
	.byte	0x14
	.byte	0x28
	.byte	0xa0
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x26
	.byte	0x1
	.byte	0xc6
	.byte	0xe3
	.byte	0xe9
	.byte	0xd8
	.byte	0xd9
	.byte	0xe6
	.byte	0xd8
	.byte	0xff
	.space	3
	.byte	0xcc
	.byte	0xd5
	.byte	0xe0
	.byte	0xe4
	.byte	0xdc
	.byte	0xff
	.space	2
	.byte	0x15
	.space	2
	.word	-0x7dfff001
	.byte	0x47
	.space	1
	.short	0x130
	.short	0x17
	.short	0x2e
	.short	0x150
	.byte	0xaa
	.byte	0x32
	.byte	0x37
	.byte	0x96
	.byte	0xa0
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x2c
	.byte	0x1
	.byte	0xcd
	.byte	0xdd
	.byte	0xe8
	.byte	0xe8
	.byte	0xed
	.byte	0xff
	.space	5
	.byte	0xcc
	.byte	0xe3
	.byte	0xe7
	.byte	0xd5
	.byte	0xff
	.space	3
	.byte	0x8
	.space	2
	.word	-0x7efff001
	.byte	0x3b
	.space	1
	.short	0xd5
	.short	0x112
	.short	0xb9
	.short	0x27
	.byte	0x28
	.byte	0xc8
	.byte	0x96
	.byte	0xb9
	.byte	0x3c
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x21
	.byte	0x1
	.byte	0xcd
	.byte	0xe0
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0xff
	.space	5
	.byte	0xc5
	.byte	0xd9
	.byte	0xd5
	.byte	0xe8
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.space	1
	.byte	0xb
	.space	2
	.word	-0x7f7ff001
	.byte	0x73
	.space	1
	.short	0x157
	.short	0x44
	.short	0xe3
	.short	0x12f
	.byte	0x55
	.byte	0x55
	.byte	0xaa
	.byte	0x6e
	.byte	0x96
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x4e
	.byte	0x1
	.byte	0xce
	.byte	0xd5
	.byte	0xe6
	.byte	0xdd
	.byte	0xd5
	.byte	0xff
	.space	5
	.byte	0xc7
	.byte	0xd5
	.byte	0xed
	.byte	0xe6
	.byte	0xd5
	.byte	0xff
	.space	2
	.byte	0x12
	.space	2
	.word	-0x7fbff001
	.byte	0xf
	.space	1
	.short	0x15d
	.short	0x3f
	.short	0xc3
	.short	0xdb
	.byte	0xaa
	.byte	0x96
	.byte	0x1e
	.byte	0x1e
	.byte	0x5a
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x19
	.byte	0x1
	.byte	0xc6
	.byte	0xdd
	.byte	0xe6
	.byte	0xdf
	.byte	0xdd
	.byte	0xff
	.space	5
	.byte	0xc6
	.byte	0xd5
	.byte	0xe1
	.byte	0xd5
	.byte	0xe6
	.byte	0xff
	.space	2
	.byte	0xf
	.space	2
	.word	-0x7fdff001
	.byte	0x27
	.space	1
	.short	0x15f
	.short	0xf7
	.short	0x11d
	.short	0xd8
	.byte	0xe6
	.byte	0x3c
	.byte	0x3c
	.byte	0xe6
	.byte	0x50
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xb6
	.byte	0x0
	.byte	0xbc
	.byte	0xe0
	.byte	0xe3
	.byte	0xe7
	.byte	0xe7
	.byte	0xe3
	.byte	0xe1
	.byte	0xff
	.space	3
	.byte	0xbb
	.byte	0xe9
	.byte	0xd6
	.byte	0xe6
	.byte	0xd9
	.byte	0xed
	.byte	0xff
	.space	1
	.byte	0x1a
	.space	2
	.word	-0x7feff001
	.byte	0x3b
	.space	1
	.short	0x50
	.short	0xe6
	.short	0x4e
	.short	0x94
	.byte	0x23
	.byte	0xc8
	.byte	0x96
	.byte	0x82
	.byte	0x28
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x2e
	.byte	0x1
	.byte	0xbf
	.byte	0xed
	.byte	0xd9
	.byte	0xe7
	.byte	0xd5
	.byte	0xd6
	.byte	0xff
	.space	4
	.byte	0xc8
	.byte	0xdd
	.byte	0xdb
	.byte	0xd9
	.byte	0xe0
	.byte	0xff
	.space	2
	.byte	0x1f
	.space	2
	.word	-0x7ff7f001
	.byte	0x73
	.space	1
	.short	0xd4
	.short	0xb9
	.short	0x11a
	.short	0x6d
	.byte	0x19
	.byte	0x23
	.byte	0xe6
	.byte	0x96
	.byte	0xa0
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xb1
	.byte	0x0
	.byte	0xcf
	.byte	0xe8
	.byte	0xd5
	.byte	0xe2
	.byte	0xff
	.space	6
	.byte	0xbd
	.byte	0xd5
	.byte	0xe1
	.byte	0xdd
	.byte	0xe0
	.byte	0xe0
	.byte	0xd9
	.byte	0xff
	.byte	0x2f
	.space	2
	.word	-0x7ffbf001
	.byte	0x73
	.space	1
	.short	0x65
	.short	0xf8
	.short	0x6d
	.short	0x5e
	.byte	0x23
	.byte	0x23
	.byte	0x96
	.byte	0x82
	.byte	0xaa
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x3f
	.byte	0x1
	.byte	0xca
	.byte	0xd9
	.byte	0xd8
	.byte	0xe3
	.byte	0xe7
	.byte	0xff
	.space	5
	.byte	0xbe
	.byte	0xd9
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.space	3
	.byte	0x26
	.space	2
	.word	-0x7ffdf001
	.byte	0x57
	.space	1
	.short	0x61
	.short	0xcf
	.short	0x10d
	.short	0x24
	.byte	0x8c
	.byte	0x46
	.byte	0x8c
	.byte	0x4b
	.byte	0x64
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x72
	.byte	0x1
	.byte	0xc6
	.byte	0xe9
	.byte	0xea
	.byte	0xdd
	.byte	0xe7
	.byte	0xff
	.space	5
	.byte	0xc4
	.byte	0xd5
	.byte	0xe2
	.byte	0xd9
	.byte	0xe0
	.byte	0xe0
	.byte	0xd9
	.byte	0xff
	.byte	0xa
	.space	2
	.word	-0x7ffef001
	.byte	0x53
	.space	1
	.short	0xba
	.short	0xd5
	.short	0x24
	.short	0xcc
	.byte	0x32
	.byte	0x64
	.byte	0xdc
	.byte	0x28
	.byte	0xbe
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xd6
	.byte	0x0
	.byte	0xc2
	.byte	0xd9
	.byte	0xe6
	.byte	0xe3
	.byte	0xe7
	.byte	0xe7
	.byte	0xff
	.space	4
	.byte	0xc2
	.byte	0xd9
	.byte	0xd5
	.byte	0xe8
	.byte	0xdc
	.byte	0xff
	.space	2
	.byte	0x21
	.space	2
	.word	-0x7fff7001
	.byte	0x47
	.space	1
	.short	0x46
	.short	0xcb
	.short	0xb3
	.short	0x13d
	.byte	0xaa
	.byte	0x46
	.byte	0x6e
	.byte	0xf0
	.byte	0x8c
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x65
	.byte	0x0
	.byte	0xcc
	.byte	0xe3
	.byte	0xd8
	.byte	0xe0
	.byte	0xd9
	.byte	0xd7
	.byte	0xe8
	.byte	0xff
	.space	3
	.byte	0xcd
	.byte	0xd5
	.byte	0xe7
	.byte	0xdc
	.byte	0xd5
	.byte	0xff
	.space	2
	.byte	0x6
	.space	2
	.word	-0x7fffb001
	.byte	0xf
	.space	1
	.short	0x99
	.short	0x71
	.short	0x81
	.short	0x94
	.byte	0xc8
	.byte	0xc8
	.byte	0x1e
	.byte	0x23
	.byte	0x32
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xac
	.byte	0x0
	.byte	0xbd
	.byte	0xdc
	.byte	0xe9
	.byte	0xe4
	.byte	0xed
	.byte	0xff
	.space	5
	.byte	0xc0
	.byte	0xe6
	.byte	0xd5
	.byte	0xe2
	.byte	0xdf
	.byte	0xdd
	.byte	0xd9
	.byte	0xff
	.byte	0x23
	.space	2
	.word	-0x7fffd001
	.byte	0x3b
	.space	1
	.short	0xba
	.short	0xd5
	.short	0x9c
	.short	0x27
	.byte	0x19
	.byte	0x96
	.byte	0xb4
	.byte	0x73
	.byte	0x78
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xca
	.byte	0x0
	.byte	0xd1
	.byte	0xe3
	.byte	0xd6
	.byte	0xd9
	.byte	0xe8
	.byte	0xff
	.space	5
	.byte	0xc2
	.byte	0xd9
	.byte	0xe0
	.byte	0xd9
	.byte	0xe2
	.byte	0xff
	.space	2
	.byte	0x10
	.space	2
	.word	-0x7fffe001
	.byte	0x6f
	.space	1
	.short	0x44
	.short	0xf3
	.short	0xdb
	.short	0xc2
	.byte	0x3c
	.byte	0xe6
	.byte	0x32
	.byte	0xdc
	.byte	0xd2
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x5e
	.byte	0x0
	.byte	0xc1
	.byte	0xd5
	.byte	0xe6
	.byte	0xd9
	.byte	0xe2
	.byte	0xff
	.space	5
	.byte	0xbd
	.byte	0xd5
	.byte	0xe1
	.byte	0xdd
	.byte	0xe0
	.byte	0xd9
	.byte	0xff
	.space	1
	.byte	0x28
	.space	2
	.word	0xc000fff
	.byte	0x47
	.space	1
	.short	0xc2
	.short	0x6d
	.short	0x7a
	.short	0xbc
	.byte	0xc8
	.byte	0x64
	.byte	0x32
	.byte	0x50
	.byte	0xb4
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x89
	.byte	0x0
	.byte	0xc1
	.byte	0xe3
	.byte	0xe2
	.byte	0xe4
	.byte	0xe3
	.byte	0xe6
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xd5
	.byte	0xe6
	.byte	0xe8
	.byte	0xdd
	.byte	0xe2
	.byte	0xff
	.space	1
	.byte	0x2e
	.space	2
	.word	-0x7dfff001
	.byte	0x7f
	.space	1
	.short	0xb0
	.short	0xa0
	.short	0xd8
	.short	0x116
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x95
	.byte	0x0
	.byte	0xbe
	.byte	0xe6
	.byte	0xdd
	.byte	0xe8
	.byte	0xd9
	.byte	0xff
	.space	5
	.byte	0xcd
	.byte	0xd9
	.byte	0xe6
	.byte	0xdb
	.byte	0xdd
	.byte	0xe3
	.byte	0xff
	.space	1
	.byte	0x7
	.space	2
	.word	0x21000fff
	.byte	0x47
	.space	1
	.short	0xc8
	.short	0x15
	.short	0xef
	.short	0x59
	.byte	0x96
	.byte	0x8c
	.byte	0x32
	.byte	0x78
	.byte	0x96
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x34
	.byte	0x0
	.byte	0xc7
	.byte	0xd9
	.byte	0xe3
	.byte	0xeb
	.byte	0xed
	.byte	0xff
	.space	5
	.byte	0xc5
	.byte	0xd5
	.byte	0xdd
	.byte	0xe0
	.byte	0xd9
	.byte	0xed
	.byte	0xff
	.space	1
	.byte	0x6
	.space	2
	.word	0x20800fff
	.byte	0x33
	.space	1
	.short	0x2d
	.short	0x10d
	.short	0x6
	.short	0x2c
	.byte	0x7d
	.byte	0x6e
	.byte	0xb4
	.byte	0xaa
	.byte	0x50
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0x7c
	.byte	0x0
	.byte	0xc8
	.byte	0xed
	.byte	0xec
	.byte	0xff
	.space	7
	.byte	0xca
	.byte	0xd9
	.byte	0xe6
	.byte	0xe0
	.byte	0xd5
	.byte	0xff
	.space	2
	.byte	0x2d
	.space	2
	.word	-0x7fbff001
	.byte	0x2b
	.space	1
	.short	0xc3
	.short	0xd4
	.short	0x8e
	.short	0x139
	.byte	0x64
	.byte	0x96
	.byte	0x64
	.byte	0x96
	.byte	0x78
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xaf
	.byte	0x0
	.byte	0xc1
	.byte	0xd9
	.byte	0xe4
	.byte	0xdd
	.byte	0xe8
	.byte	0xe3
	.byte	0xff
	.space	4
	.byte	0xbd
	.byte	0xe0
	.byte	0xd5
	.byte	0xe6
	.byte	0xd5
	.byte	0xff
	.space	2
	.byte	0x14
	.space	2
	.word	0x10200fff
	.byte	0x13
	.space	1
	.short	0x2d
	.short	0x119
	.short	0xe3
	.short	0x10a
	.byte	0x50
	.byte	0x78
	.byte	0xc8
	.byte	0x78
	.byte	0x50
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xc4
	.byte	0x0
	.byte	0xcd
	.byte	0xe4
	.byte	0xd9
	.byte	0xe3
	.byte	0xe2
	.byte	0xff
	.space	5
	.byte	0xc4
	.byte	0xd5
	.byte	0xdf
	.byte	0xe3
	.byte	0xd6
	.byte	0xff
	.space	2
	.byte	0x25
	.space	2
	.word	0x20100fff
	.byte	0xf
	.space	1
	.short	0x81
	.short	0x62
	.short	0xea
	.short	0x27
	.byte	0xb4
	.byte	0x96
	.byte	0x64
	.byte	0x50
	.byte	0x96
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xc7
	.byte	0x0
	.byte	0xcd
	.byte	0xe0
	.byte	0xe3
	.byte	0xeb
	.byte	0xdb
	.byte	0xe3
	.byte	0xff
	.space	4
	.byte	0xce
	.byte	0xe6
	.byte	0xd9
	.byte	0xed
	.byte	0xff
	.space	3
	.byte	0x31
	.space	2
	.word	0x8080fff
	.byte	0x53
	.space	1
	.short	0x107
	.short	0xae
	.short	0x119
	.short	0x108
	.byte	0x64
	.byte	0x50
	.byte	0xc8
	.byte	0x6e
	.byte	0xaa
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.byte	0xd9
	.byte	0x0
	.byte	0xcf
	.byte	0xe6
	.byte	0xe7
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0xff
	.space	4
	.byte	0xc6
	.byte	0xd5
	.byte	0xe2
	.byte	0xd9
	.byte	0xff
	.space	3
	.byte	0x2c
	.space	2
	.word	0x40040fff
	.byte	0x47
	.space	1
	.short	0x25
	.short	0x14c
	.short	0x139
	.short	0x2b
	.byte	0xb4
	.byte	0x8c
	.byte	0x1e
	.byte	0x50
	.byte	0xbe
	.byte	0xff
	.space	12
	.word	0x0
	.word	0xffff
	.globl	gPostgameContestOpponentFilter
	.type	 gPostgameContestOpponentFilter,object
gPostgameContestOpponentFilter:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.size	 gPostgameContestOpponentFilter,96
	.align	2, 0
	.type	 sSpriteSheets_ContestantsTurnBlinkEffect,object
	.size	 sSpriteSheets_ContestantsTurnBlinkEffect,32
sSpriteSheets_ContestantsTurnBlinkEffect:
	.word	gBlankGfxCompressed
	.short	0x1000
	.short	0x80e8
	.word	gBlankGfxCompressed
	.short	0x1000
	.short	0x80e9
	.word	gBlankGfxCompressed
	.short	0x1000
	.short	0x80ea
	.word	gBlankGfxCompressed
	.short	0x1000
	.short	0x80eb
	.align	2, 0
	.type	 sSpritePalettes_ContestantsTurnBlinkEffect,object
	.size	 sSpritePalettes_ContestantsTurnBlinkEffect,32
sSpritePalettes_ContestantsTurnBlinkEffect:
	.word	gHeap+0x1a0a4
	.short	0x80e8
	.space	2
	.word	gHeap+0x1a0c4
	.short	0x80e9
	.space	2
	.word	gHeap+0x1a0e4
	.short	0x80ea
	.space	2
	.word	gHeap+0x1a104
	.short	0x80eb
	.space	2
	.globl	sOam_ContestantsTurnBlinkEffect
	.align	2, 0
	.type	 sOam_ContestantsTurnBlinkEffect,object
	.size	 sOam_ContestantsTurnBlinkEffect,8
sOam_ContestantsTurnBlinkEffect:
	.byte	0x0
	.byte	0x7
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.globl	sAffineAnim_ContestantsTurnBlinkEffect_0
	.align	2, 0
	.type	 sAffineAnim_ContestantsTurnBlinkEffect_0,object
sAffineAnim_ContestantsTurnBlinkEffect_0:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ContestantsTurnBlinkEffect_0,16
	.globl	sAffineAnim_ContestantsTurnBlinkEffect_1
	.align	2, 0
	.type	 sAffineAnim_ContestantsTurnBlinkEffect_1,object
sAffineAnim_ContestantsTurnBlinkEffect_1:
	.short	0x3
	.short	0x3
	.byte	0x0
	.byte	0xf
	.space	2
	.short	-0x3
	.short	-0x3
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x3
	.short	0x3
	.byte	0x0
	.byte	0xf
	.space	2
	.short	-0x3
	.short	-0x3
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ContestantsTurnBlinkEffect_1,40
	.globl	sAffineAnims_ContestantsTurnBlinkEffect
	.align	2, 0
	.type	 sAffineAnims_ContestantsTurnBlinkEffect,object
sAffineAnims_ContestantsTurnBlinkEffect:
	.word	sAffineAnim_ContestantsTurnBlinkEffect_0
	.word	sAffineAnim_ContestantsTurnBlinkEffect_1
	.size	 sAffineAnims_ContestantsTurnBlinkEffect,8
	.globl	sSpriteTemplates_ContestantsTurnBlinkEffect
	.align	2, 0
	.type	 sSpriteTemplates_ContestantsTurnBlinkEffect,object
	.size	 sSpriteTemplates_ContestantsTurnBlinkEffect,96
sSpriteTemplates_ContestantsTurnBlinkEffect:
	.short	0x80e8
	.short	0x80e8
	.word	sOam_ContestantsTurnBlinkEffect
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_ContestantsTurnBlinkEffect
	.word	SpriteCallbackDummy
	.short	0x80e9
	.short	0x80e9
	.word	sOam_ContestantsTurnBlinkEffect
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_ContestantsTurnBlinkEffect
	.word	SpriteCallbackDummy
	.short	0x80ea
	.short	0x80ea
	.word	sOam_ContestantsTurnBlinkEffect
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_ContestantsTurnBlinkEffect
	.word	SpriteCallbackDummy
	.short	0x80eb
	.short	0x80eb
	.word	sOam_ContestantsTurnBlinkEffect
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_ContestantsTurnBlinkEffect
	.word	SpriteCallbackDummy
	.type	 gContestExcitementTable,object
	.size	 gContestExcitementTable,25
gContestExcitementTable:
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	-0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	-0x1
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	-0x1
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	-0x1
	.byte	-0x1
	.byte	0x0
	.byte	0x1
.text
	.align	2, 0
	.type	 TaskDummy1,function
	.thumb_func
TaskDummy1:
	bx	lr
.Lfe1:
	.size	 TaskDummy1,.Lfe1-TaskDummy1
	.align	2, 0
	.globl	ResetLinkContestBoolean
	.type	 ResetLinkContestBoolean,function
	.thumb_func
ResetLinkContestBoolean:
	ldr	r1, .L4
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gLinkContestFlags
.Lfe2:
	.size	 ResetLinkContestBoolean,.Lfe2-ResetLinkContestBoolean
	.align	2, 0
	.type	 SetupContestGpuRegs,function
	.thumb_func
SetupContestGpuRegs:
	push	{r4, lr}
	mov	r0, #0x0
	mov	r1, #0x40
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r4, .L7
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r1, #0xfe
	lsl	r1, r1, #0x7
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r0, .L7+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L7+0x8
	strh	r1, [r0]
	ldr	r0, .L7+0xc
	strh	r1, [r0]
	ldr	r0, .L7+0x10
	strh	r1, [r0]
	ldr	r0, .L7+0x14
	strh	r1, [r0]
	ldr	r0, .L7+0x18
	strh	r1, [r0]
	ldr	r0, .L7+0x1c
	strh	r1, [r0]
	ldr	r0, .L7+0x20
	strh	r1, [r0]
	ldr	r0, .L7+0x24
	strh	r1, [r0]
	ldr	r0, .L7+0x28
	strh	r1, [r0]
	ldr	r0, .L7+0x2c
	strh	r1, [r0]
	ldr	r0, .L7+0x30
	strh	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	0x3f3f
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
.Lfe3:
	.size	 SetupContestGpuRegs,.Lfe3-SetupContestGpuRegs
	.align	2, 0
	.globl	LoadContestBgAfterMoveAnim
	.type	 LoadContestBgAfterMoveAnim,function
	.thumb_func
LoadContestBgAfterMoveAnim:
	push	{r4, r5, lr}
	ldr	r0, .L15
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	bl	LZDecompressVram
	ldr	r0, .L15+0x4
	ldr	r1, .L15+0x8
	bl	LZDecompressVram
	ldr	r1, .L15+0xc
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	ldr	r0, .L15+0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	mov	r1, #0x0
	bl	LoadCompressedPalette
	bl	LoadContestPalettes
	mov	r4, #0x0
	mov	r5, #0xa0
.L13:
	ldr	r0, .L15+0x14
	add	r0, r5, r0
	ldr	r1, .L15+0x18
	add	r1, r4, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x5
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadPalette
	add	r5, r5, #0x20
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L13	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gContestMiscGfx
	.word	gContestAudienceGfx
	.word	0x6002000
	.word	gOldContestGfx
	.word	gOldContestPalette
	.word	gHeap+0x1a004
	.word	gContestantTurnOrder
.Lfe4:
	.size	 LoadContestBgAfterMoveAnim,.Lfe4-LoadContestBgAfterMoveAnim
	.align	2, 0
	.type	 InitContestInfoBgs,function
	.thumb_func
InitContestInfoBgs:
	push	{r4, lr}
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L23
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	mov	r0, #0x3
	mov	r1, #0x6
	mov	r2, #0x1
	bl	SetBgAttribute
	mov	r4, #0x0
.L21:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L23+0x4
	ldr	r1, [r1]
	lsl	r2, r4, #0x2
	add	r1, r1, #0x24
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	SetBgTilemapBuffer
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L21	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	sContestBgTemplates
	.word	gContestResources
.Lfe5:
	.size	 InitContestInfoBgs,.Lfe5-InitContestInfoBgs
	.align	2, 0
	.type	 InitContestWindows,function
	.thumb_func
InitContestWindows:
	push	{lr}
	ldr	r0, .L28
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	ldr	r0, .L28+0x4
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L26	@cond_branch
	ldr	r2, .L28+0x8
	ldrb	r1, [r2]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	b	.L27
.L29:
	.align	2, 0
.L28:
	.word	sContestWindowTemplates
	.word	gLinkContestFlags
	.word	gTextFlags
.L26:
	ldr	r0, .L30
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
.L27:
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	gTextFlags
.Lfe6:
	.size	 InitContestWindows,.Lfe6-InitContestWindows
	.align	2, 0
	.type	 LoadContestPalettes,function
	.thumb_func
LoadContestPalettes:
	push	{r4, r5, lr}
	ldr	r0, .L38
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x2
	bl	FillPalette
	mov	r5, #0xa
	mov	r4, #0xfa
	lsl	r4, r4, #0x10
.L36:
	lsr	r1, r4, #0x10
	ldr	r0, .L38+0x4
	mov	r2, #0x2
	bl	LoadPalette
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	add	r4, r4, r0
	add	r5, r5, #0x1
	cmp	r5, #0xd
	ble	.L36	@cond_branch
	ldr	r0, .L38+0x8
	mov	r1, #0xf3
	mov	r2, #0x2
	bl	FillPalette
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	sText_Pal
	.word	gPlttBufferUnfaded+0x1e2
	.word	0x7e3f
.Lfe7:
	.size	 LoadContestPalettes,.Lfe7-LoadContestPalettes
	.align	2, 0
	.type	 InitContestResources,function
	.thumb_func
InitContestResources:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L62
	ldr	r0, [r4]
	ldr	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x5c
	bl	memset
	mov	r5, #0x0
	mov	r2, #0xff
.L44:
	ldr	r0, [r4]
	ldr	r1, [r0]
	add	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L44	@cond_branch
	mov	r4, #0x0
	ldr	r6, .L62
	mov	r5, #0x3
.L49:
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	mov	r1, #0x0
	mov	r2, #0x1c
	bl	memset
	add	r4, r4, #0x1c
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L49	@cond_branch
	ldr	r4, .L62
	mov	r7, #0x4
	neg	r7, r7
	mov	r6, #0xff
	mov	r3, #0x0
	mov	r5, #0x3
.L54:
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	add	r1, r3, r1
	ldrb	r2, [r1, #0xb]
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1, #0xb]
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	add	r1, r3, r1
	ldrb	r0, [r1, #0x13]
	orr	r0, r0, r6
	strb	r0, [r1, #0x13]
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	add	r1, r3, r1
	ldrb	r0, [r1, #0x14]
	orr	r0, r0, r6
	strb	r0, [r1, #0x14]
	add	r3, r3, #0x1c
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L54	@cond_branch
	ldr	r4, .L62
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	mov	r1, #0x0
	mov	r2, #0x14
	bl	memset
	ldr	r0, [r4]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x0
	mov	r2, #0x44
	bl	memset
	ldr	r2, [r4]
	ldr	r1, [r2, #0x10]
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r0, [r2, #0x14]
	mov	r1, #0x0
	mov	r2, #0x10
	bl	memset
	ldr	r0, .L62+0x4
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L56	@cond_branch
	mov	r0, #0x0
	bl	SortContestants
.L56:
	mov	r5, #0x0
	add	r2, r4, #0
	mov	r6, #0xff
	mov	r3, #0x0
	ldr	r4, .L62+0x8
.L60:
	ldr	r0, [r2]
	ldr	r1, [r0, #0x4]
	add	r1, r3, r1
	ldrb	r0, [r1, #0x19]
	orr	r0, r0, r6
	strb	r0, [r1, #0x19]
	ldr	r0, [r2]
	ldr	r1, [r0]
	add	r1, r1, #0x14
	add	r1, r1, r5
	add	r0, r5, r4
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x1c
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L60	@cond_branch
	bl	ApplyNextTurnOrder
	ldr	r0, .L62
	ldr	r0, [r0]
	ldr	r0, [r0, #0x1c]
	mov	r1, #0x0
	mov	r2, #0x40
	bl	memset
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	gContestResources
	.word	gLinkContestFlags
	.word	gContestantTurnOrder
.Lfe8:
	.size	 InitContestResources,.Lfe8-InitContestResources
	.align	2, 0
	.type	 AllocContestResources,function
	.thumb_func
AllocContestResources:
	push	{r4, r5, lr}
	ldr	r4, .L65
	mov	r0, #0x40
	bl	AllocZeroed
	str	r0, [r4]
	mov	r0, #0x5c
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1]
	mov	r0, #0x70
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x4]
	mov	r0, #0x14
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x8]
	mov	r0, #0x44
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0xc]
	mov	r0, #0x10
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x10]
	mov	r0, #0x10
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x14]
	mov	r0, #0x14
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x18]
	mov	r0, #0x40
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x1c]
	mov	r0, #0xc
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x20]
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x24]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x28]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x2c]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x30]
	mov	r5, #0x80
	lsl	r5, r5, #0x4
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x34]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x38]
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	ldr	r2, [r4]
	str	r0, [r2, #0x3c]
	ldr	r1, .L65+0x4
	str	r0, [r1]
	ldr	r1, .L65+0x8
	ldr	r0, [r2, #0x28]
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	gContestResources
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.Lfe9:
	.size	 AllocContestResources,.Lfe9-AllocContestResources
	.align	2, 0
	.type	 FreeContestResources,function
	.thumb_func
FreeContestResources:
	push	{r4, r5, lr}
	ldr	r5, .L68
	ldr	r0, [r5]
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r5]
	mov	r4, #0x0
	str	r4, [r0]
	ldr	r0, [r0, #0x4]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x4]
	ldr	r0, [r0, #0x8]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x8]
	ldr	r0, [r0, #0xc]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0xc]
	ldr	r0, [r0, #0x10]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x10]
	ldr	r0, [r0, #0x14]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x14]
	ldr	r0, [r0, #0x18]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x18]
	ldr	r0, [r0, #0x1c]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x1c]
	ldr	r0, [r0, #0x20]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x20]
	ldr	r0, [r0, #0x24]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x24]
	ldr	r0, [r0, #0x28]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x28]
	ldr	r0, [r0, #0x2c]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x2c]
	ldr	r0, [r0, #0x30]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x30]
	ldr	r0, [r0, #0x34]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x34]
	ldr	r0, [r0, #0x38]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x38]
	ldr	r0, [r0, #0x3c]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x3c]
	bl	Free
	str	r4, [r5]
	ldr	r0, .L68+0x4
	str	r4, [r0]
	ldr	r0, .L68+0x8
	str	r4, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L69:
	.align	2, 0
.L68:
	.word	gContestResources
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.Lfe10:
	.size	 FreeContestResources,.Lfe10-FreeContestResources
	.align	2, 0
	.globl	CB2_StartContest
	.type	 CB2_StartContest,function
	.thumb_func
CB2_StartContest:
	push	{r4, r5, r6, lr}
	ldr	r0, .L82
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r6, r0, r1
	ldrb	r5, [r6]
	cmp	r5, #0x1
	beq	.L73	@cond_branch
	cmp	r5, #0x1
	bgt	.L80	@cond_branch
	cmp	r5, #0
	beq	.L72	@cond_branch
	b	.L71
.L83:
	.align	2, 0
.L82:
	.word	gMain
.L80:
	cmp	r5, #0x2
	beq	.L74	@cond_branch
	cmp	r5, #0x3
	beq	.L76	@cond_branch
	b	.L71
.L72:
	ldr	r0, .L84
	strb	r5, [r0]
	bl	AllocContestResources
	bl	AllocateMonSpritesGfx
	ldr	r4, .L84+0x4
	ldr	r0, [r4]
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r4]
	str	r5, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1]
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	InitContestInfoBgs
	bl	InitContestWindows
	bl	SetupContestGpuRegs
	bl	ScanlineEffect_Clear
	bl	ResetPaletteFade
	ldr	r2, .L84+0x8
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
	bl	ResetSpriteData
	bl	ResetTasks
	bl	FreeAllSpritePalettes
	ldr	r1, .L84+0xc
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r0, .L84+0x10
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	strb	r5, [r0]
	bl	ClearBattleMonForms
	bl	InitContestResources
	b	.L81
.L85:
	.align	2, 0
.L84:
	.word	sContestBgCopyFlags
	.word	gMonSpritesGfxPtr
	.word	gPaletteFade
	.word	gReservedSpritePaletteCount
	.word	gHeap
.L73:
	mov	r0, #0x2
	strb	r0, [r6]
	b	.L71
.L74:
	ldr	r4, .L86
	ldr	r0, [r4]
	ldr	r0, [r0]
	add	r0, r0, #0x59
	bl	SetupContestGraphics
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L71	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0]
	add	r0, r0, #0x59
	mov	r1, #0x0
	strb	r1, [r0]
.L81:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	b	.L71
.L87:
	.align	2, 0
.L86:
	.word	gContestResources
.L76:
	bl	SetBgForCurtainDrop
	ldr	r0, .L88
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L88+0x4
	strh	r1, [r0]
	mov	r0, #0x2
	bl	BeginFastPaletteFade
	ldr	r2, .L88+0x8
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldr	r0, .L88+0xc
	bl	SetVBlankCallback
	ldr	r0, .L88+0x10
	mov	r1, #0xa
	bl	CreateTask
	ldr	r1, .L88+0x14
	ldr	r1, [r1]
	ldr	r1, [r1]
	strb	r0, [r1, #0x8]
	ldr	r0, .L88+0x18
	bl	SetMainCallback2
	ldr	r0, .L88+0x1c
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L71	@cond_branch
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0x8
	mov	r1, #0x8
	bl	CreateWirelessStatusIndicatorSprite
.L71:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L89:
	.align	2, 0
.L88:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gPaletteFade
	.word	VBlankCB_Contest
	.word	Task_StartContestWaitFade
	.word	gContestResources
	.word	CB2_ContestMain
	.word	gLinkContestFlags
.Lfe11:
	.size	 CB2_StartContest,.Lfe11-CB2_StartContest
	.align	2, 0
	.type	 Task_StartContestWaitFade,function
	.thumb_func
Task_StartContestWaitFade:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L92
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L91	@cond_branch
	ldr	r0, .L92+0x4
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r2, [r1, #0x8]
	ldr	r0, .L92+0x8
	str	r0, [r1]
.L91:
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	gPaletteFade
	.word	gTasks
	.word	Task_TryStartLinkContest
.Lfe12:
	.size	 Task_StartContestWaitFade,.Lfe12-Task_StartContestWaitFade
	.align	2, 0
	.type	 Task_TryStartLinkContest,function
	.thumb_func
Task_TryStartLinkContest:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L109
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L95	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L96	@cond_branch
	ldr	r2, .L109+0x4
	lsl	r1, r5, #0x2
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	add	r6, r1, #0
	cmp	r0, #0x1
	beq	.L99	@cond_branch
	cmp	r0, #0x1
	bgt	.L105	@cond_branch
	cmp	r0, #0
	beq	.L98	@cond_branch
	b	.L96
.L110:
	.align	2, 0
.L109:
	.word	gLinkContestFlags
	.word	gTasks
.L105:
	cmp	r0, #0x2
	beq	.L101	@cond_branch
	b	.L96
.L98:
	bl	ContestPrintLinkStandby
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L99:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L94	@cond_branch
	bl	SetLinkStandbyCallback
	ldr	r0, .L111
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L94
.L112:
	.align	2, 0
.L111:
	.word	gTasks
.L101:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L94	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L96:
	ldr	r2, .L113
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L94	@cond_branch
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldr	r0, .L113+0x4
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L107	@cond_branch
	bl	ContestPrintLinkStandby
.L107:
	ldr	r0, .L113+0x8
	mov	r1, #0x0
	bl	CreateTask
	ldr	r1, .L113+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x8]
	ldr	r1, .L113+0x10
	str	r1, [r0]
	b	.L94
.L114:
	.align	2, 0
.L113:
	.word	gPaletteFade
	.word	gLinkContestFlags
	.word	Task_CommunicateMonIdxs
	.word	gTasks
	.word	TaskDummy1
.L95:
	ldr	r0, .L115
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L115+0x4
	str	r0, [r1]
.L94:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L116:
	.align	2, 0
.L115:
	.word	gTasks
	.word	Task_WaitToRaiseCurtainAtStart
.Lfe13:
	.size	 Task_TryStartLinkContest,.Lfe13-Task_TryStartLinkContest
	.align	2, 0
	.type	 Task_CommunicateMonIdxs,function
	.thumb_func
Task_CommunicateMonIdxs:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L118
	ldr	r2, .L118+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L119:
	.align	2, 0
.L118:
	.word	Task_LinkContest_CommunicateMonIdxs
	.word	Task_EndCommunicateMonIdxs
.Lfe14:
	.size	 Task_CommunicateMonIdxs,.Lfe14-Task_CommunicateMonIdxs
	.align	2, 0
	.type	 Task_EndCommunicateMonIdxs,function
	.thumb_func
Task_EndCommunicateMonIdxs:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L121
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x1
	strh	r0, [r1, #0x8]
	ldr	r0, .L121+0x4
	str	r0, [r1]
	bx	lr
.L122:
	.align	2, 0
.L121:
	.word	gTasks
	.word	Task_ReadyStartLinkContest
.Lfe15:
	.size	 Task_EndCommunicateMonIdxs,.Lfe15-Task_EndCommunicateMonIdxs
	.align	2, 0
	.type	 Task_ReadyStartLinkContest,function
	.thumb_func
Task_ReadyStartLinkContest:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L125
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrh	r1, [r0, #0x8]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bgt	.L124	@cond_branch
	bl	GetMultiplayerId
	add	r0, r4, #0
	bl	DestroyTask
	ldr	r0, .L125+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldr	r1, .L125+0x8
	str	r1, [r0]
	ldr	r1, .L125+0xc
	ldr	r0, .L125+0x10
	ldr	r0, [r0]
	str	r0, [r1]
.L124:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	gTasks
	.word	gContestResources
	.word	Task_WaitToRaiseCurtainAtStart
	.word	gRngValue
	.word	gContestRngValue
.Lfe16:
	.size	 Task_ReadyStartLinkContest,.Lfe16-Task_ReadyStartLinkContest
	.align	2, 0
	.type	 SetupContestGraphics,function
	.thumb_func
SetupContestGraphics:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x40
	mov	sl, r0
	ldrb	r0, [r0]
	cmp	r0, #0x6
	bls	.LCB1268
	b	.L141	@long jump
.LCB1268:
	lsl	r0, r0, #0x2
	ldr	r1, .L144
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L145:
	.align	2, 0
.L144:
	.word	.L142
	.align	2, 0
	.align	2, 0
.L142:
	.word	.L129
	.word	.L130
	.word	.L131
	.word	.L137
	.word	.L138
	.word	.L139
	.word	.L140
.L129:
	ldr	r2, .L146
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	mov	r4, #0x80
	lsl	r4, r4, #0x8
	mov	r0, #0x0
	add	r2, r4, #0
	mov	r3, #0x1
	bl	RequestDma3Fill
	ldr	r1, .L146+0x4
	mov	r0, #0x0
	add	r2, r4, #0
	mov	r3, #0x1
	bl	RequestDma3Fill
	ldr	r1, .L146+0x8
	mov	r0, #0x0
	add	r2, r4, #0
	mov	r3, #0x1
	bl	RequestDma3Fill
	b	.L128
.L147:
	.align	2, 0
.L146:
	.word	gPaletteFade
	.word	0x6008000
	.word	0x6010000
.L130:
	ldr	r0, .L148
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	bl	LZDecompressVram
	b	.L128
.L149:
	.align	2, 0
.L148:
	.word	gContestMiscGfx
.L131:
	ldr	r0, .L150
	ldr	r4, .L150+0x4
	add	r1, r4, #0
	bl	LZDecompressVram
	ldr	r3, .L150+0x8
	mov	r5, #0x80
	lsl	r5, r5, #0x6
	ldr	r1, .L150+0xc
	ldr	r6, .L150+0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	mov	r7, #0x84
	lsl	r7, r7, #0x18
.L132:
	str	r4, [r1]
	str	r3, [r1, #0x4]
	str	r6, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r4, r4, r2
	add	r3, r3, r2
	sub	r5, r5, r2
	cmp	r5, r2
	bhi	.L132	@cond_branch
	str	r4, [r1]
	str	r3, [r1, #0x4]
	lsr	r0, r5, #0x2
	orr	r0, r0, r7
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	b	.L128
.L151:
	.align	2, 0
.L150:
	.word	gContestAudienceGfx
	.word	0x6002000
	.word	gHeap+0x18000
	.word	0x40000d4
	.word	-0x7bfffc00
.L137:
	ldr	r1, .L152
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	b	.L128
.L153:
	.align	2, 0
.L152:
	.word	gOldContestGfx
.L138:
	ldr	r1, .L154
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	ldr	r0, .L154+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x2c]
	ldr	r2, .L154+0x8
	ldr	r0, .L154+0xc
	str	r1, [r0]
	str	r2, [r0, #0x4]
	ldr	r1, .L154+0x10
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	b	.L128
.L155:
	.align	2, 0
.L154:
	.word	gUnknown_08C17170
	.word	gContestResources
	.word	gHeap+0x1aa04
	.word	0x40000d4
	.word	-0x7bfffe00
.L139:
	ldr	r0, .L156
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	mov	r1, #0x0
	bl	LoadCompressedPalette
	ldr	r5, .L156+0x4
	ldr	r6, .L156+0x8
	add	r0, r5, #0
	mov	r1, sp
	add	r2, r6, #0
	bl	CpuSet
	ldr	r0, .L156+0xc
	mov	r9, r0
	ldrb	r0, [r0]
	add	r0, r0, #0x5
	lsl	r0, r0, #0x5
	ldr	r1, .L156+0x10
	add	r1, r1, r5
	mov	r8, r1
	add	r0, r0, r8
	add	r4, sp, #0x20
	add	r1, r4, #0
	add	r2, r6, #0
	bl	CpuSet
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CpuSet
	mov	r2, r9
	ldrb	r1, [r2]
	add	r1, r1, #0x5
	lsl	r1, r1, #0x5
	add	r1, r1, r8
	mov	r0, sp
	add	r2, r6, #0
	bl	CpuSet
	ldr	r1, .L156+0x14
	ldr	r0, .L156+0x18
	mov	r2, r8
	str	r2, [r0]
	str	r1, [r0, #0x4]
	ldr	r1, .L156+0x1c
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	bl	LoadContestPalettes
	b	.L128
.L157:
	.align	2, 0
.L156:
	.word	gOldContestPalette
	.word	gPlttBufferUnfaded+0x100
	.word	0x4000008
	.word	gContestPlayerMonIndex
	.word	-0x100
	.word	gHeap+0x1a004
	.word	0x40000d4
	.word	-0x7bffff80
.L140:
	bl	DrawContestantWindows
	bl	FillContestantWindowBgs
	bl	SwapMoveDescAndContestTilemaps
	bl	CreateJudgeSpeechBubbleSprite
	ldr	r1, .L158
	ldr	r1, [r1]
	ldr	r1, [r1]
	mov	r4, #0x0
	strb	r0, [r1, #0x12]
	bl	CreateSliderHeartSprites
	bl	CreateNextTurnSprites
	bl	CreateApplauseMeterSprite
	bl	CreateJudgeAttentionEyeTask
	bl	CreateUnusedBlendTask
	ldr	r1, .L158+0x4
	strb	r4, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r3, #0x3
	strb	r3, [r1, #0x2]
	mov	r2, #0x2
	strb	r2, [r1, #0x3]
	ldr	r0, .L158+0x8
	str	r4, [r0]
	ldr	r4, .L158+0xc
	strb	r2, [r4]
	ldr	r0, .L158+0x10
	strb	r3, [r0]
	bl	CreateJudgeSprite
	ldr	r2, .L158+0x14
	ldrb	r1, [r4]
	add	r1, r1, r2
	strb	r0, [r1]
	bl	CreateInvisibleBattleTargetSprite
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x3
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	b	.L128
.L159:
	.align	2, 0
.L158:
	.word	gContestResources
	.word	gBattlerPositions
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlerSpriteIds
.L141:
	mov	r0, #0x0
	mov	r1, sl
	strb	r0, [r1]
	mov	r0, #0x1
	b	.L143
.L128:
	mov	r2, sl
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	mov	r0, #0x0
.L143:
	add	sp, sp, #0x40
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 SetupContestGraphics,.Lfe17-SetupContestGraphics
	.align	2, 0
	.type	 Task_WaitToRaiseCurtainAtStart,function
	.thumb_func
Task_WaitToRaiseCurtainAtStart:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L162
	ldrb	r2, [r1, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1, #0x8]
	ldrb	r1, [r1, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L161	@cond_branch
	ldr	r0, .L162+0x4
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r2, [r1, #0x8]
	strh	r2, [r1, #0xa]
	ldr	r0, .L162+0x8
	str	r0, [r1]
.L161:
	pop	{r0}
	bx	r0
.L163:
	.align	2, 0
.L162:
	.word	gPaletteFade
	.word	gTasks
	.word	Task_RaiseCurtainAtStart
.Lfe18:
	.size	 Task_WaitToRaiseCurtainAtStart,.Lfe18-Task_WaitToRaiseCurtainAtStart
	.align	2, 0
	.type	 Task_RaiseCurtainAtStart,function
	.thumb_func
Task_RaiseCurtainAtStart:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L177
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bhi	.L173	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L177+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L178:
	.align	2, 0
.L177:
	.word	gTasks
	.word	.L175
	.align	2, 0
	.align	2, 0
.L175:
	.word	.L166
	.word	.L168
	.word	.L170
	.word	.L171
	.word	.L173
.L166:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0xa]
	add	r1, r0, #0x1
	strh	r1, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3c
	ble	.L165	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	mov	r0, #0x61
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L165
.L168:
	ldr	r1, .L179
	ldrh	r0, [r1]
	add	r0, r0, #0x7
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa0
	ble	.L165	@cond_branch
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	b	.L176
.L180:
	.align	2, 0
.L179:
	.word	gBattle_BG1_Y
.L170:
	bl	UpdateContestantBoxOrder
	ldr	r0, .L181
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L165
.L182:
	.align	2, 0
.L181:
	.word	gTasks
.L171:
	mov	r0, #0x8
	bl	GetGpuReg
	mov	r1, sp
	strh	r0, [r1]
	mov	r0, #0xc
	bl	GetGpuReg
	mov	r4, sp
	add	r4, r4, #0x2
	strh	r0, [r4]
	mov	r3, sp
	ldrb	r2, [r3]
	mov	r1, #0x4
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3]
	ldrb	r0, [r4]
	and	r1, r1, r0
	strb	r1, [r4]
	mov	r0, sp
	ldrh	r1, [r0]
	mov	r0, #0x8
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0xc
	bl	SetGpuReg
	bl	SlideApplauseMeterIn
	ldr	r1, .L183
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
.L176:
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L165
.L184:
	.align	2, 0
.L183:
	.word	gTasks
.L173:
	ldr	r0, .L185
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L165	@cond_branch
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	strh	r1, [r0, #0x8]
	strh	r1, [r0, #0xa]
	ldr	r1, .L185+0x4
	str	r1, [r0]
.L165:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L186:
	.align	2, 0
.L185:
	.word	gContestResources
	.word	Task_DisplayAppealNumberText
.Lfe19:
	.size	 Task_RaiseCurtainAtStart,.Lfe19-Task_RaiseCurtainAtStart
	.align	2, 0
	.type	 CB2_ContestMain,function
	.thumb_func
CB2_ContestMain:
	push	{r4, r5, lr}
	bl	AnimateSprites
	bl	RunTasks
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	mov	r4, #0x0
.L191:
	ldr	r5, .L194
	ldrb	r0, [r5]
	asr	r0, r0, r4
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L190	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	CopyBgTilemapBufferToVram
.L190:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L191	@cond_branch
	mov	r0, #0x0
	strb	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	sContestBgCopyFlags
.Lfe20:
	.size	 CB2_ContestMain,.Lfe20-CB2_ContestMain
	.align	2, 0
	.type	 VBlankCB_Contest,function
	.thumb_func
VBlankCB_Contest:
	push	{lr}
	ldr	r0, .L197
	ldrh	r1, [r0]
	mov	r0, #0x10
	bl	SetGpuReg
	ldr	r0, .L197+0x4
	ldrh	r1, [r0]
	mov	r0, #0x12
	bl	SetGpuReg
	ldr	r0, .L197+0x8
	ldrh	r1, [r0]
	mov	r0, #0x14
	bl	SetGpuReg
	ldr	r0, .L197+0xc
	ldrh	r1, [r0]
	mov	r0, #0x16
	bl	SetGpuReg
	ldr	r0, .L197+0x10
	ldrh	r1, [r0]
	mov	r0, #0x18
	bl	SetGpuReg
	ldr	r0, .L197+0x14
	ldrh	r1, [r0]
	mov	r0, #0x1a
	bl	SetGpuReg
	ldr	r0, .L197+0x18
	ldrh	r1, [r0]
	mov	r0, #0x1c
	bl	SetGpuReg
	ldr	r0, .L197+0x1c
	ldrh	r1, [r0]
	mov	r0, #0x1e
	bl	SetGpuReg
	ldr	r0, .L197+0x20
	ldrh	r1, [r0]
	mov	r0, #0x40
	bl	SetGpuReg
	ldr	r0, .L197+0x24
	ldrh	r1, [r0]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, .L197+0x28
	ldrh	r1, [r0]
	mov	r0, #0x42
	bl	SetGpuReg
	ldr	r0, .L197+0x2c
	ldrh	r1, [r0]
	mov	r0, #0x46
	bl	SetGpuReg
	bl	TransferPlttBuffer
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	ScanlineEffect_InitHBlankDmaTransfer
	pop	{r0}
	bx	r0
.L198:
	.align	2, 0
.L197:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
.Lfe21:
	.size	 VBlankCB_Contest,.Lfe21-VBlankCB_Contest
	.align	2, 0
	.type	 Task_DisplayAppealNumberText,function
	.thumb_func
Task_DisplayAppealNumberText:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L205
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L200	@cond_branch
	ldr	r0, .L205+0x4
	strh	r1, [r0]
	ldr	r0, .L205+0x8
	strh	r1, [r0]
	bl	ContestDebugDoPrint
	ldr	r1, .L205+0xc
	ldr	r2, .L205+0x10
	ldr	r0, .L205+0x14
	str	r1, [r0]
	str	r2, [r0, #0x4]
	ldr	r1, .L205+0x18
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	ldr	r0, .L205+0x1c
	ldr	r1, .L205+0x20
	ldr	r1, [r1]
	ldr	r1, [r1]
	ldrb	r1, [r1, #0x1]
	add	r1, r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L205+0x24
	ldrb	r0, [r0]
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L201	@cond_branch
	ldr	r0, .L205+0x28
	ldr	r1, .L205+0x2c
	bl	StringCopy
	b	.L202
.L206:
	.align	2, 0
.L205:
	.word	gTasks
	.word	gBattle_BG0_Y
	.word	gBattle_BG2_Y
	.word	gPlttBufferUnfaded
	.word	gHeap+0x1a204
	.word	0x40000d4
	.word	-0x7bffff00
	.word	gStringVar1
	.word	gContestResources
	.word	gContestPlayerMonIndex
	.word	gDisplayedStringBattle
	.word	gText_AppealNumWhichMoveWillBePlayed
.L201:
	ldr	r0, .L207
	ldr	r1, .L207+0x4
	bl	StringCopy
.L202:
	bl	ContestClearGeneralTextWindow
	ldr	r4, .L207+0x8
	ldr	r1, .L207
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L207+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L203
.L208:
	.align	2, 0
.L207:
	.word	gDisplayedStringBattle
	.word	gText_AppealNumButItCantParticipate
	.word	gStringVar4
	.word	gTasks
.L200:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	bne	.L203	@cond_branch
	strh	r0, [r4, #0x8]
	ldr	r0, .L209
	str	r0, [r4]
.L203:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L210:
	.align	2, 0
.L209:
	.word	Task_TryShowMoveSelectScreen
.Lfe22:
	.size	 Task_DisplayAppealNumberText,.Lfe22-Task_DisplayAppealNumberText
	.align	2, 0
	.type	 Task_TryShowMoveSelectScreen,function
	.thumb_func
Task_TryShowMoveSelectScreen:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	ldr	r0, .L217
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L213	@cond_branch
	cmp	r1, #0x2
	bne	.L212	@cond_branch
.L213:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L217+0x4
	ldrb	r0, [r0]
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L214	@cond_branch
	mov	r0, #0x1
	bl	SetBottomSliderHeartsInvisibility
	ldr	r0, .L217+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L217+0xc
	b	.L216
.L218:
	.align	2, 0
.L217:
	.word	gMain
	.word	gContestPlayerMonIndex
	.word	gTasks
	.word	Task_ShowMoveSelectScreen
.L214:
	ldr	r0, .L219
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L219+0x4
.L216:
	str	r0, [r1]
.L212:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L220:
	.align	2, 0
.L219:
	.word	gTasks
	.word	Task_SelectedMove
.Lfe23:
	.size	 Task_TryShowMoveSelectScreen,.Lfe23-Task_TryShowMoveSelectScreen
	.align	2, 0
	.type	 Task_ShowMoveSelectScreen,function
	.thumb_func
Task_ShowMoveSelectScreen:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L231
	mov	r1, #0xa0
	strh	r1, [r0]
	ldr	r0, .L231+0x4
	strh	r1, [r0]
	mov	r6, #0x0
	ldr	r0, .L231+0x8
	mov	r8, r0
	ldr	r2, .L231+0xc
	mov	sl, r2
	ldr	r7, .L231+0x10
.L225:
	lsl	r1, r6, #0x1
	mov	r0, r8
	ldrb	r2, [r0]
	lsl	r0, r2, #0x6
	add	r1, r1, r0
	add	r1, r1, sl
	ldrh	r4, [r1]
	add	r5, sp, #0x4
	ldr	r0, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	cmp	r0, #0
	beq	.L226	@cond_branch
	add	r0, r2, #0
	bl	IsContestantAllowedToCombo
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L226	@cond_branch
	ldr	r0, [r7]
	mov	r2, r8
	ldrb	r1, [r2]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x8]
	add	r1, r4, #0
	bl	AreMovesContestCombo
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L226	@cond_branch
	ldr	r0, [r7]
	mov	r2, r8
	ldrb	r1, [r2]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L226	@cond_branch
	add	r0, sp, #0x4
	ldr	r1, .L231+0x14
	b	.L230
.L232:
	.align	2, 0
.L231:
	.word	gBattle_BG0_Y
	.word	gBattle_BG2_Y
	.word	gContestPlayerMonIndex
	.word	gContestMons+0x1e
	.word	gContestResources
	.word	gText_ColorLightShadowDarkGrey
.L226:
	cmp	r4, #0
	beq	.L227	@cond_branch
	ldr	r0, [r7]
	mov	r2, r8
	ldrb	r1, [r2]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x8]
	cmp	r0, r4
	bne	.L227	@cond_branch
	ldr	r0, .L233
	lsl	r1, r4, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x3
	beq	.L227	@cond_branch
	add	r0, sp, #0x4
	ldr	r1, .L233+0x4
.L230:
	bl	StringCopy
	add	r5, r0, #0
.L227:
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	ldr	r0, .L233+0x8
	add	r1, r1, r0
	add	r0, r5, #0
	bl	StringCopy
	add	r4, r6, #0x5
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x7
	str	r0, [sp]
	add	r0, r4, #0
	add	r1, sp, #0x4
	mov	r2, #0x5
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L225	@cond_branch
	ldr	r4, .L233+0xc
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	DrawMoveSelectArrow
	ldr	r2, .L233+0x10
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1
	ldr	r0, .L233+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x1e
	add	r1, r1, r2
	ldrh	r0, [r1]
	bl	PrintContestMoveDescription
	ldr	r1, .L233+0x18
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L233+0x1c
	str	r1, [r0]
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L234:
	.align	2, 0
.L233:
	.word	gContestMoves
	.word	gText_ColorBlue
	.word	gMoveNames
	.word	gContestResources
	.word	gContestMons
	.word	gContestPlayerMonIndex
	.word	gTasks
	.word	Task_HandleMoveSelectInput
.Lfe24:
	.size	 Task_ShowMoveSelectScreen,.Lfe24-Task_ShowMoveSelectScreen
	.align	2, 0
	.type	 Task_HandleMoveSelectInput,function
	.thumb_func
Task_HandleMoveSelectInput:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r6, #0x0
	ldr	r3, .L262
	ldr	r1, .L262+0x4
	ldr	r0, .L262+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, #0x1e
	add	r1, r0, r1
	mov	r2, #0x3
.L239:
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L238	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L238:
	add	r1, r1, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L239	@cond_branch
	ldrh	r0, [r3, #0x2e]
	mov	r5, #0x1
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L242	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L262+0xc
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L262+0x10
	str	r0, [r1]
	b	.L243
.L263:
	.align	2, 0
.L262:
	.word	gMain
	.word	gContestMons
	.word	gContestPlayerMonIndex
	.word	gTasks
	.word	Task_SelectedMove
.L242:
	ldrh	r0, [r3, #0x30]
	cmp	r0, #0x20
	bne	.LCB2488
	b	.L243	@long jump
.LCB2488:
	cmp	r0, #0x20
	bgt	.L260	@cond_branch
	cmp	r0, #0x2
	beq	.L245	@cond_branch
	b	.L243
.L260:
	cmp	r0, #0x40
	beq	.L250	@cond_branch
	cmp	r0, #0x80
	bne	.LCB2499
	b	.L254	@long jump
.LCB2499:
	b	.L243
.L245:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	bl	SetBottomSliderHeartsInvisibility
	ldr	r0, .L264
	ldr	r1, .L264+0x4
	ldr	r1, [r1]
	ldr	r1, [r1]
	ldrb	r1, [r1, #0x1]
	add	r1, r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L264+0x8
	ldrb	r0, [r0]
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L246	@cond_branch
	ldr	r0, .L264+0xc
	ldr	r1, .L264+0x10
	bl	StringCopy
	b	.L247
.L265:
	.align	2, 0
.L264:
	.word	gStringVar1
	.word	gContestResources
	.word	gContestPlayerMonIndex
	.word	gDisplayedStringBattle
	.word	gText_AppealNumWhichMoveWillBePlayed
.L246:
	ldr	r0, .L266
	ldr	r1, .L266+0x4
	bl	StringCopy
.L247:
	bl	ContestClearGeneralTextWindow
	ldr	r4, .L266+0x8
	ldr	r1, .L266
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x0
	bl	Contest_StartTextPrinter
	ldr	r0, .L266+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L266+0x10
	strh	r1, [r0]
	ldr	r1, .L266+0x14
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L266+0x18
	str	r1, [r0]
	b	.L243
.L267:
	.align	2, 0
.L266:
	.word	gDisplayedStringBattle
	.word	gText_AppealNumButItCantParticipate
	.word	gStringVar4
	.word	gBattle_BG0_Y
	.word	gBattle_BG2_Y
	.word	gTasks
	.word	Task_TryShowMoveSelectScreen
.L250:
	ldr	r4, .L268
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	EraseMoveSelectArrow
	ldr	r0, [r4]
	ldr	r1, [r0]
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L251	@cond_branch
	sub	r0, r6, #0x1
	b	.L261
.L269:
	.align	2, 0
.L268:
	.word	gContestResources
.L251:
	sub	r0, r0, #0x1
.L261:
	strb	r0, [r1]
	ldr	r4, .L270
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	DrawMoveSelectArrow
	ldr	r2, .L270+0x4
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1
	ldr	r0, .L270+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x1e
	add	r1, r1, r2
	ldrh	r0, [r1]
	bl	PrintContestMoveDescription
	cmp	r6, #0x1
	bls	.L243	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	b	.L243
.L271:
	.align	2, 0
.L270:
	.word	gContestResources
	.word	gContestMons
	.word	gContestPlayerMonIndex
.L254:
	ldr	r4, .L272
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	EraseMoveSelectArrow
	ldr	r0, [r4]
	ldr	r1, [r0]
	ldrb	r2, [r1]
	sub	r0, r6, #0x1
	cmp	r2, r0
	bne	.L255	@cond_branch
	strb	r5, [r1]
	b	.L256
.L273:
	.align	2, 0
.L272:
	.word	gContestResources
.L255:
	add	r0, r2, #0x1
	strb	r0, [r1]
.L256:
	ldr	r4, .L274
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	DrawMoveSelectArrow
	ldr	r2, .L274+0x4
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1
	ldr	r0, .L274+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x1e
	add	r1, r1, r2
	ldrh	r0, [r1]
	bl	PrintContestMoveDescription
	cmp	r6, #0x1
	bls	.L243	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L243:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L275:
	.align	2, 0
.L274:
	.word	gContestResources
	.word	gContestMons
	.word	gContestPlayerMonIndex
.Lfe25:
	.size	 Task_HandleMoveSelectInput,.Lfe25-Task_HandleMoveSelectInput
	.align	2, 0
	.type	 DrawMoveSelectArrow,function
	.thumb_func
DrawMoveSelectArrow:
	push	{lr}
	add	sp, sp, #-0x10
	add	r3, r0, #0
	lsl	r3, r3, #0x19
	mov	r0, #0xf8
	lsl	r0, r0, #0x15
	add	r3, r3, r0
	lsr	r3, r3, #0x18
	mov	r0, #0x2
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	str	r0, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0x37
	mov	r2, #0x0
	bl	ContestBG_FillBoxWithIncrementingTile
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 DrawMoveSelectArrow,.Lfe26-DrawMoveSelectArrow
	.align	2, 0
	.type	 EraseMoveSelectArrow,function
	.thumb_func
EraseMoveSelectArrow:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x17
	add	r3, r4, #0
	add	r3, r3, #0x1f
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x2
	mov	r8, r0
	str	r0, [sp]
	mov	r5, #0x1
	str	r5, [sp, #0x4]
	mov	r6, #0x11
	str	r6, [sp, #0x8]
	str	r5, [sp, #0xc]
	mov	r1, #0xb
	mov	r2, #0x0
	bl	ContestBG_FillBoxWithIncrementingTile
	add	r4, r4, #0x20
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	str	r5, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0xb
	mov	r2, #0x0
	add	r3, r4, #0
	bl	ContestBG_FillBoxWithIncrementingTile
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 EraseMoveSelectArrow,.Lfe27-EraseMoveSelectArrow
	.align	2, 0
	.type	 Task_SelectedMove,function
	.thumb_func
Task_SelectedMove:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L281
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L279	@cond_branch
	ldr	r4, .L281+0x4
	ldrb	r0, [r4]
	bl	GetChosenMove
	ldr	r1, .L281+0x8
	ldr	r1, [r1]
	ldrb	r2, [r4]
	ldr	r3, [r1, #0x4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	strh	r0, [r1, #0x6]
	ldr	r4, .L281+0xc
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L281+0x10
	add	r1, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	ldr	r1, .L281+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L281+0x18
	str	r1, [r0]
	bl	ContestPrintLinkStandby
	mov	r0, #0x0
	bl	SetBottomSliderHeartsInvisibility
	b	.L280
.L282:
	.align	2, 0
.L281:
	.word	gLinkContestFlags
	.word	gContestPlayerMonIndex
	.word	gContestResources
	.word	Task_LinkContest_CommunicateMoveSelections
	.word	Task_EndCommunicateMoveSelections
	.word	gTasks
	.word	TaskDummy1
.L279:
	bl	GetAllChosenMoves
	ldr	r0, .L283
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L283+0x4
	str	r0, [r1]
.L280:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L284:
	.align	2, 0
.L283:
	.word	gTasks
	.word	Task_HideMoveSelectScreen
.Lfe28:
	.size	 Task_SelectedMove,.Lfe28-Task_SelectedMove
	.align	2, 0
	.type	 Task_EndCommunicateMoveSelections,function
	.thumb_func
Task_EndCommunicateMoveSelections:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	ldr	r2, .L286
	ldr	r0, .L286+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L286+0x8
	str	r1, [r0]
	pop	{r0}
	bx	r0
.L287:
	.align	2, 0
.L286:
	.word	gTasks
	.word	gContestResources
	.word	Task_HideMoveSelectScreen
.Lfe29:
	.size	 Task_EndCommunicateMoveSelections,.Lfe29-Task_EndCommunicateMoveSelections
	.align	2, 0
	.type	 Task_HideMoveSelectScreen,function
	.thumb_func
Task_HideMoveSelectScreen:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L294
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L294+0x4
	strh	r1, [r0]
	mov	r0, #0x0
	bl	SetBottomSliderHeartsInvisibility
	mov	r6, #0x0
	mov	r5, #0xa0
	lsl	r5, r5, #0x13
.L292:
	lsr	r4, r5, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r5, r5, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L292	@cond_branch
	mov	r0, #0x0
	bl	Contest_SetBgCopyFlags
	ldr	r1, .L294+0x8
	ldr	r0, .L294+0xc
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	ldr	r4, .L294+0x10
	str	r1, [r4]
	str	r0, [r4, #0x4]
	lsr	r1, r2, #0x2
	mov	r3, #0x84
	lsl	r3, r3, #0x18
	orr	r1, r1, r3
	str	r1, [r4, #0x8]
	ldr	r1, [r4, #0x8]
	ldr	r1, .L294+0x14
	add	r0, r0, r1
	mov	r1, #0x0
	bl	LoadPalette
	ldr	r1, .L294+0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	strh	r1, [r0, #0xa]
	ldr	r1, .L294+0x1c
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L295:
	.align	2, 0
.L294:
	.word	gBattle_BG0_Y
	.word	gBattle_BG2_Y
	.word	gPlttBufferFaded
	.word	gHeap+0x1a604
	.word	0x40000d4
	.word	-0x400
	.word	gTasks
	.word	Task_HideApplauseMeterForAppealStart
.Lfe30:
	.size	 Task_HideMoveSelectScreen,.Lfe30-Task_HideMoveSelectScreen
	.align	2, 0
	.type	 Task_HideApplauseMeterForAppealStart,function
	.thumb_func
Task_HideApplauseMeterForAppealStart:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L299
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L297	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L297	@cond_branch
	bl	SlideApplauseMeterOut
	mov	r0, #0x1
	bl	AnimateSliderHearts
	ldr	r0, .L299+0x4
	str	r0, [r4]
.L297:
	pop	{r4}
	pop	{r0}
	bx	r0
.L300:
	.align	2, 0
.L299:
	.word	gTasks
	.word	Task_WaitHideApplauseMeterForAppealStart
.Lfe31:
	.size	 Task_HideApplauseMeterForAppealStart,.Lfe31-Task_HideApplauseMeterForAppealStart
	.align	2, 0
	.type	 Task_WaitHideApplauseMeterForAppealStart,function
	.thumb_func
Task_WaitHideApplauseMeterForAppealStart:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L303
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x6]
	mov	r0, #0x90
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L302	@cond_branch
	ldr	r0, .L303+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L303+0x8
	str	r0, [r1]
.L302:
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	gContestResources
	.word	gTasks
	.word	Task_AppealSetup
.Lfe32:
	.size	 Task_WaitHideApplauseMeterForAppealStart,.Lfe32-Task_WaitHideApplauseMeterForAppealStart
	.align	2, 0
	.type	 Task_AppealSetup,function
	.thumb_func
Task_AppealSetup:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L313
	lsl	r3, r6, #0x2
	add	r1, r3, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L306	@cond_branch
	ldr	r2, .L313+0x4
	ldr	r0, [r2]
	ldr	r1, [r0]
	mov	r0, #0x0
	strb	r0, [r1, #0x10]
	ldr	r0, [r2]
	ldr	r1, [r0]
	ldr	r0, .L313+0x8
	ldr	r0, [r0]
	str	r0, [r1, #0x18]
	ldr	r0, .L313+0xc
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	add	r7, r3, #0
	cmp	r0, #0
	beq	.L307	@cond_branch
	bl	IsPlayerLinkLeader
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L307	@cond_branch
	mov	r4, #0x0
	ldr	r1, .L313+0x10
	ldrb	r0, [r1]
	cmp	r0, #0x3
	bgt	.L307	@cond_branch
	add	r5, r1, #0
.L311:
	ldrb	r0, [r5]
	add	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetChosenMove
	ldr	r1, .L313+0x4
	ldr	r1, [r1]
	ldrb	r2, [r5]
	add	r2, r2, r4
	ldr	r3, [r1, #0x4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	strh	r0, [r1, #0x6]
	add	r4, r4, #0x1
	ldrb	r0, [r5]
	add	r0, r4, r0
	cmp	r0, #0x3
	ble	.L311	@cond_branch
.L307:
	ldr	r1, .L313
	add	r0, r7, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	ldr	r1, .L313+0x14
	str	r1, [r0]
.L306:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L314:
	.align	2, 0
.L313:
	.word	gTasks
	.word	gContestResources
	.word	gRngValue
	.word	gLinkContestFlags
	.word	gNumLinkContestPlayers
	.word	Task_DoAppeals
.Lfe33:
	.size	 Task_AppealSetup,.Lfe33-Task_AppealSetup
	.align	2, 0
	.type	 Task_DoAppeals,function
	.thumb_func
Task_DoAppeals:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r2, .L562
	ldr	r0, [r2]
	ldr	r0, [r0]
	ldrb	r6, [r0, #0x11]
	ldr	r1, .L562+0x4
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, #0x8
	ldrsh	r0, [r0, r4]
	mov	r9, r2
	add	r4, r1, #0
	cmp	r0, #0x3b
	bls	.LCB3248
	bl	.L315	@far jump
.LCB3248:
	lsl	r0, r0, #0x2
	ldr	r1, .L562+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L563:
	.align	2, 0
.L562:
	.word	gContestResources
	.word	gTasks
	.word	.L549
	.align	2, 0
	.align	2, 0
.L549:
	.word	.L317
	.word	.L326
	.word	.L328
	.word	.L332
	.word	.L338
	.word	.L341
	.word	.L346
	.word	.L348
	.word	.L349
	.word	.L354
	.word	.L537
	.word	.L538
	.word	.L381
	.word	.L382
	.word	.L454
	.word	.L463
	.word	.L467
	.word	.L469
	.word	.L476
	.word	.L474
	.word	.L540
	.word	.L544
	.word	.L546
	.word	.L356
	.word	.L369
	.word	.L395
	.word	.L396
	.word	.L411
	.word	.L413
	.word	.L419
	.word	.L436
	.word	.L541
	.word	.L542
	.word	.L529
	.word	.L531
	.word	.L384
	.word	.L386
	.word	.L388
	.word	.L391
	.word	.L426
	.word	.L434
	.word	.L478
	.word	.L315
	.word	.L522
	.word	.L315
	.word	.L461
	.word	.L472
	.word	.L380
	.word	.L371
	.word	.L378
	.word	.L393
	.word	.L446
	.word	.L450
	.word	.L493
	.word	.L506
	.word	.L533
	.word	.L534
	.word	.L524
	.word	.L525
	.word	.L527
.L317:
	bl	ContestDebugDoPrint
	mov	r7, #0x0
	ldr	r0, .L564
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1, #0x10]
	mov	r5, r8
	lsl	r5, r5, #0x2
	mov	sl, r5
	ldrb	r2, [r0]
	cmp	r1, r2
	beq	.L319	@cond_branch
	add	r2, r0, #0
.L320:
	add	r7, r7, #0x1
	add	r0, r2, r7
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L320	@cond_branch
.L319:
	ldr	r4, .L564
	ldr	r0, [r4]
	ldr	r0, [r0]
	strb	r7, [r0, #0x11]
	ldr	r0, [r4]
	ldr	r2, [r0]
	ldrb	r6, [r2, #0x11]
	ldr	r0, .L564+0x4
	ldrb	r1, [r0]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L323	@cond_branch
	ldrb	r0, [r2, #0x7]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x7]
	bl	IsPlayerLinkLeader
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L324	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x11]
	bl	CalculateAppealMoveImpact
.L324:
	ldr	r4, .L564+0x8
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L564+0xc
	add	r1, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	bl	ContestPrintLinkStandby
	ldr	r1, .L564+0x10
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	bl	.L315	@ far jump
.L565:
	.align	2, 0
.L564:
	.word	gContestResources
	.word	gLinkContestFlags
	.word	Task_LinkContest_CommunicateAppealsState
	.word	Task_EndWaitForLink
	.word	gTasks
.L323:
	add	r0, r6, #0
	bl	CalculateAppealMoveImpact
	ldr	r0, .L566
	mov	r1, sl
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x2
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L567:
	.align	2, 0
.L566:
	.word	gTasks
.L326:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB3406
	bl	.L315	@far jump
.LCB3406:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x2
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L328:
	add	r0, r6, #0
	bl	SetContestLiveUpdateFlags
	bl	ContestDebugPrintBitStrings
	ldr	r0, .L568
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r1, [r2, #0xc]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L330	@cond_branch
	ldrb	r1, [r2, #0xb]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	beq	.L329	@cond_branch
.L330:
	ldr	r0, .L568+0x4
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x1f
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L569:
	.align	2, 0
.L568:
	.word	gContestResources
	.word	gTasks
.L329:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L570
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r6, [r1, #0x1c]
	mov	r0, #0x3
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L571:
	.align	2, 0
.L570:
	.word	gTasks
.L332:
	mov	r4, r8
	lsl	r4, r4, #0x2
	mov	sl, r4
	ldr	r1, .L572
	mov	r2, #0x0
	add	r0, r1, #0x3
.L336:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L336	@cond_branch
	mov	r7, #0x4
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r0, [r0, #0x18]
	mov	r1, #0x0
	mov	r2, #0x14
	bl	memset
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x11]
	bl	SetMoveAnimAttackerData
	ldr	r4, .L572+0x4
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r3, [r0, #0x11]
	lsl	r2, r3, #0x6
	add	r5, r2, r4
	ldrh	r0, [r5]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	add	r1, r4, #0
	add	r1, r1, #0x3c
	add	r1, r2, r1
	ldr	r1, [r1]
	add	r4, r4, #0x38
	add	r2, r2, r4
	ldr	r2, [r2]
	ldrb	r4, [r5, #0x1]
	lsr	r4, r4, #0x3
	str	r4, [sp]
	bl	CreateContestantSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L572+0x8
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r3, r0, r2
	mov	r1, #0x78
	strh	r1, [r3, #0x24]
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L572+0xc
	str	r1, [r0]
	ldr	r0, .L572+0x10
	mov	r4, sl
	add	r4, r4, r8
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	strh	r5, [r4, #0xc]
	ldr	r1, .L572+0x14
	ldr	r0, .L572+0x18
	ldrb	r0, [r0]
	add	r0, r0, r1
	strb	r5, [r0]
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x11]
	bl	CreateContestantBoxBlinkSprites
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	BlinkContestantBox
	strh	r7, [r4, #0x8]
	bl	.L315	@ far jump
.L573:
	.align	2, 0
.L572:
	.word	gBattleMonForms
	.word	gContestMons
	.word	gSprites
	.word	SpriteCB_MonSlideIn
	.word	gTasks
	.word	gBattlerSpriteIds
	.word	gBattlerAttacker
.L338:
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r2, r0, r4
	ldrb	r5, [r2, #0xc]
	ldr	r1, .L574
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L574+0x4
	cmp	r1, r0
	beq	.LCB3621
	bl	.L315	@far jump
.LCB3621:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r1, [r0, #0x14]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB3635
	bl	.L315	@far jump
.LCB3635:
	mov	r0, #0x5
	strh	r0, [r2, #0x8]
	bl	.L315	@ far jump
.L575:
	.align	2, 0
.L574:
	.word	gSprites
	.word	SpriteCallbackDummy
.L341:
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r5, r0, #0x2
	add	r1, r5, r1
	ldrb	r1, [r1, #0xc]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L342	@cond_branch
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x21
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L342:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L576
	lsl	r1, r6, #0x6
	ldr	r2, .L576+0x4
	add	r1, r1, r2
	bl	StringCopy
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	add	r3, r5, r0
	ldrh	r1, [r3, #0x6]
	ldr	r0, .L576+0x8
	cmp	r1, r0
	bhi	.L344	@cond_branch
	ldr	r0, .L576+0xc
	add	r2, r1, #0
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	ldr	r2, .L576+0x10
	add	r1, r1, r2
	bl	StringCopy
	b	.L345
.L577:
	.align	2, 0
.L576:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	0x2f2
	.word	gStringVar2
	.word	gMoveNames
.L344:
	ldr	r0, .L578
	ldr	r2, .L578+0x4
	ldrb	r1, [r3, #0xa]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	StringCopy
.L345:
	ldr	r4, .L578+0x8
	ldr	r1, .L578+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L578+0x10
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x6
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L579:
	.align	2, 0
.L578:
	.word	gStringVar2
	.word	sInvalidContestMoveNames
	.word	gStringVar4
	.word	gText_MonAppealedWithMove
	.word	gTasks
.L346:
	bl	Contest_RunTextPrinters
	add	r1, r0, #0
	cmp	r1, #0
	beq	.LCB3761
	bl	.L315	@far jump
.LCB3761:
	ldr	r0, .L580
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, #0x5a
	strb	r1, [r0]
	ldr	r1, .L580+0x4
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x7
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L581:
	.align	2, 0
.L580:
	.word	gContestResources
	.word	gTasks
.L348:
	mov	r5, r9
	ldr	r1, [r5]
	ldr	r0, [r1]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x6]
	bl	SanitizeMove
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x11]
	bl	SetMoveSpecificAnimData
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x11]
	bl	SetMoveAnimAttackerData
	add	r0, r4, #0
	bl	SetMoveTargetPosition
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r1, .L582
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L583:
	.align	2, 0
.L582:
	.word	gTasks
.L349:
	ldr	r0, .L584
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L584+0x4
	ldrb	r4, [r0]
	cmp	r4, #0
	beq	.LCB3843
	bl	.L315	@far jump
.LCB3843:
	add	r0, r6, #0
	bl	ClearMoveAnimData
	ldr	r0, .L584+0x8
	ldr	r1, [r0]
	ldr	r0, [r1]
	add	r0, r0, #0x5a
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L351	@cond_branch
	ldr	r0, .L584+0xc
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r4, [r1, #0x1c]
	mov	r0, #0x9
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L585:
	.align	2, 0
.L584:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gContestResources
	.word	gTasks
.L351:
	ldr	r1, [r1, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L353	@cond_branch
	add	r0, r6, #0
	bl	StopFlashJudgeAttentionEye
.L353:
	bl	DrawUnnervedSymbols
	ldr	r0, .L586
	mov	r4, r8
	lsl	r1, r4, #0x2
	b	.L552
.L587:
	.align	2, 0
.L586:
	.word	gTasks
.L354:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r2, r0, r4
	ldrh	r0, [r2, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	bgt	.LCB3920
	bl	.L315	@far jump
.LCB3920:
	mov	r0, #0x0
	strh	r0, [r2, #0x1c]
	mov	r0, #0x7
	strh	r0, [r2, #0x8]
	bl	.L315	@ far jump
.L356:
	mov	r0, r8
	lsl	r2, r0, #0x2
	add	r0, r2, r0
	lsl	r0, r0, #0x3
	add	r7, r0, r4
	mov	r0, #0x0
	strh	r0, [r7, #0xa]
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	mov	ip, r0
	lsl	r1, r6, #0x3
	sub	r0, r1, r6
	lsl	r5, r0, #0x2
	mov	r0, ip
	add	r3, r5, r0
	ldrb	r0, [r3, #0x13]
	mov	sl, r2
	str	r1, [sp, #0x8]
	cmp	r0, #0xff
	beq	.L357	@cond_branch
	ldrb	r1, [r3, #0x13]
	add	r0, r6, #0
	bl	PrintAppealMoveResultText
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r0, r5, r0
	mov	r1, #0xff
	strb	r1, [r0, #0x13]
	mov	r0, #0x18
	strh	r0, [r7, #0x8]
	bl	.L315	@ far jump
.L357:
	ldrb	r0, [r3, #0x14]
	cmp	r0, #0xff
	beq	.L359	@cond_branch
	mov	r7, #0x0
	cmp	r7, r6
	beq	.L362	@cond_branch
	mov	r2, ip
	ldrb	r0, [r2, #0x13]
	cmp	r0, #0xff
	bne	.L361	@cond_branch
.L362:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bgt	.L361	@cond_branch
	cmp	r7, r6
	beq	.L362	@cond_branch
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r1, [r0, #0x4]
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0xff
	beq	.L362	@cond_branch
.L361:
	cmp	r7, #0x4
	bne	.L366	@cond_branch
	mov	r4, r9
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	ldr	r5, [sp, #0x8]
	sub	r4, r5, r6
	lsl	r4, r4, #0x2
	add	r0, r4, r0
	ldrb	r1, [r0, #0x14]
	add	r0, r6, #0
	bl	PrintAppealMoveResultText
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r4, r4, r0
	mov	r0, #0xff
	strb	r0, [r4, #0x14]
	ldr	r1, .L588
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x18
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L589:
	.align	2, 0
.L588:
	.word	gTasks
.L366:
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x30
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L359:
	mov	r0, #0x30
	strh	r0, [r7, #0x8]
	bl	.L315	@ far jump
.L369:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB4079
	bl	.L315	@far jump
.LCB4079:
	ldr	r0, .L590
	mov	r2, r8
	lsl	r1, r2, #0x2
.L552:
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x17
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L591:
	.align	2, 0
.L590:
	.word	gTasks
.L371:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x11]
	mov	r3, #0x3
	and	r3, r3, r0
	cmp	r3, #0x1
	bne	.L372	@cond_branch
	mov	r0, #0x5
	bl	DoJudgeSpeechBubble
	b	.L373
.L372:
	cmp	r3, #0x2
	bne	.L374	@cond_branch
	mov	r0, #0x6
	bl	DoJudgeSpeechBubble
	b	.L373
.L374:
	cmp	r3, #0x3
	bne	.L553	@cond_branch
	mov	r0, #0x7
	bl	DoJudgeSpeechBubble
.L373:
	ldr	r0, .L592
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x31
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L593:
	.align	2, 0
.L592:
	.word	gTasks
.L378:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB4163
	bl	.L315	@far jump
.LCB4163:
.L553:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x2f
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L380:
	mov	r0, #0x1
	bl	ShowHideNextTurnGfx
	ldr	r0, .L594
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0xc
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L595:
	.align	2, 0
.L594:
	.word	gTasks
.L381:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r4, #0x2
	ldrsh	r1, [r0, r4]
	mov	r0, #0x0
	add	r2, r6, #0
	bl	UpdateAppealHearts
	ldr	r1, .L596
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xd
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L597:
	.align	2, 0
.L596:
	.word	gTasks
.L382:
	mov	r0, r9
	ldr	r1, [r0]
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x11]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB4239
	bl	.L315	@far jump
.LCB4239:
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x23
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L384:
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0x10
	bne	.L385	@cond_branch
	mov	r0, #0x8
	bl	DoJudgeSpeechBubble
.L385:
	ldr	r0, .L598
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x24
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L599:
	.align	2, 0
.L598:
	.word	gTasks
.L386:
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB4297
	bl	.L315	@far jump
.LCB4297:
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x25
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L388:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	UpdateConditionStars
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L389	@cond_branch
	ldr	r1, .L600
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x1c]
	mov	r1, #0x26
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L601:
	.align	2, 0
.L600:
	.word	gTasks
.L389:
	ldr	r0, .L602
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	b	.L554
.L603:
	.align	2, 0
.L602:
	.word	gTasks
.L391:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r4
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bgt	.LCB4366
	bl	.L315	@far jump
.LCB4366:
	mov	r0, #0x0
	strh	r0, [r1, #0x1c]
.L554:
	mov	r0, #0x32
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L393:
	add	r0, r6, #0
	bl	DrawStatusSymbol
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L394	@cond_branch
	mov	r0, #0x63
	bl	PlaySE
.L394:
	ldr	r0, .L604
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x19
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L605:
	.align	2, 0
.L604:
	.word	gTasks
.L395:
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0, #0xa]
	mov	r1, #0x1a
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L396:
	mov	r3, #0x0
	mov	r5, #0x0
	str	r5, [sp, #0x4]
	mov	r0, r8
	lsl	r1, r0, #0x2
	add	r0, r1, r0
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r2, #0xa
	ldrsh	r7, [r0, r2]
	mov	sl, r1
	cmp	r7, #0x3
	bgt	.L398	@cond_branch
	ldr	r5, .L606
	ldr	r2, .L606+0x4
.L400:
	mov	r3, #0x0
	str	r3, [sp, #0x4]
	add	r0, r3, #0
	cmp	r0, r6
	beq	.L403	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, r7
	bne	.L403	@cond_branch
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0xff
	beq	.L403	@cond_branch
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	b	.L402
.L607:
	.align	2, 0
.L606:
	.word	gContestantTurnOrder
	.word	gContestResources
.L403:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L402	@cond_branch
	cmp	r3, r6
	beq	.L403	@cond_branch
	add	r0, r3, r5
	ldrb	r0, [r0]
	cmp	r0, r7
	bne	.L403	@cond_branch
	ldr	r0, [r2]
	ldr	r1, [r0, #0x4]
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0xff
	beq	.L403	@cond_branch
	mov	r0, #0x1
	str	r0, [sp, #0x4]
.L402:
	ldr	r1, [sp, #0x4]
	cmp	r1, #0
	bne	.L551	@cond_branch
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L400	@cond_branch
.L398:
	ldr	r2, [sp, #0x4]
	lsl	r0, r2, #0x18
	asr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L409	@cond_branch
.L551:
	mov	r5, sl
	add	r5, r5, r8
	lsl	r5, r5, #0x3
	add	r5, r5, r4
	ldr	r0, .L608
	add	r0, r3, r0
	ldrb	r0, [r0]
	strh	r0, [r5, #0xa]
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	mov	r4, r9
	ldr	r1, [r4]
	ldr	r1, [r1, #0x4]
	lsl	r4, r3, #0x3
	sub	r4, r4, r3
	lsl	r4, r4, #0x2
	add	r1, r4, r1
	ldrb	r1, [r1, #0x13]
	bl	PrintAppealMoveResultText
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r4, r4, r0
	mov	r0, #0xff
	strb	r0, [r4, #0x13]
	mov	r0, #0x1b
	strh	r0, [r5, #0x8]
	bl	.L315	@ far jump
.L609:
	.align	2, 0
.L608:
	.word	gContestantTurnOrder
.L409:
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strh	r2, [r0, #0xa]
	strh	r2, [r0, #0x1c]
	mov	r1, #0x33
	strh	r1, [r0, #0x8]
	bl	DrawStatusSymbols
	bl	.L315	@ far jump
.L411:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB4577
	bl	.L315	@far jump
.LCB4577:
	ldr	r0, .L610
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x1c
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L611:
	.align	2, 0
.L610:
	.word	gTasks
.L413:
	mov	r7, #0x0
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r1, r0, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	mov	r4, #0xa
	ldrsh	r2, [r1, r4]
	ldr	r1, .L612
	mov	sl, r0
	add	r5, r1, #0
	ldrb	r0, [r5]
	cmp	r2, r0
	beq	.L415	@cond_branch
	add	r1, r2, #0
	add	r2, r5, #0
.L416:
	add	r7, r7, #0x1
	add	r0, r7, r2
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L416	@cond_branch
.L415:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, [r0, #0x4]
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0xe]
	ldrh	r0, [r0, #0x2]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	neg	r1, r1
	lsl	r2, r7, #0x18
	lsr	r2, r2, #0x18
	bl	UpdateAppealHearts
	ldr	r1, .L612+0x4
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1d
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L613:
	.align	2, 0
.L612:
	.word	gContestantTurnOrder
	.word	gTasks
.L419:
	mov	r7, #0x0
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r1, r0, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	mov	r5, #0xa
	ldrsh	r3, [r1, r5]
	ldr	r1, .L614
	mov	sl, r0
	add	r5, r1, #0
	ldrb	r0, [r5]
	cmp	r3, r0
	beq	.L421	@cond_branch
.L422:
	add	r7, r7, #0x1
	add	r0, r7, r1
	ldrb	r0, [r0]
	cmp	r3, r0
	bne	.L422	@cond_branch
.L421:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, [r0, #0x14]
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB4715
	bl	.L315	@far jump
.LCB4715:
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x27
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L615:
	.align	2, 0
.L614:
	.word	gContestantTurnOrder
.L426:
	mov	r7, #0x0
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r1, r0, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	mov	r3, #0xa
	ldrsh	r2, [r1, r3]
	ldr	r1, .L616
	mov	sl, r0
	add	r5, r1, #0
	ldrb	r4, [r5]
	cmp	r2, r4
	beq	.L428	@cond_branch
	add	r1, r2, #0
	add	r2, r5, #0
.L429:
	add	r7, r7, #0x1
	add	r0, r7, r2
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L429	@cond_branch
.L428:
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	UpdateConditionStars
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L432	@cond_branch
	ldr	r1, .L616+0x4
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x1c]
	mov	r1, #0x28
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L617:
	.align	2, 0
.L616:
	.word	gContestantTurnOrder
	.word	gTasks
.L432:
	ldr	r0, .L618
	mov	r1, sl
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	b	.L555
.L619:
	.align	2, 0
.L618:
	.word	gTasks
.L434:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r4
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bgt	.LCB4827
	bl	.L315	@far jump
.LCB4827:
	mov	r0, #0x0
	strh	r0, [r1, #0x1c]
.L555:
	mov	r0, #0x1e
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L436:
	mov	r7, #0x0
	ldr	r2, .L620
	ldrb	r3, [r2]
	mov	r0, r8
	lsl	r1, r0, #0x2
	add	r0, r1, r0
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	mov	r5, #0xa
	ldrsh	r0, [r4, r5]
	mov	sl, r1
	add	r5, r2, #0
	cmp	r3, r0
	beq	.L438	@cond_branch
	add	r3, r5, #0
	add	r2, r4, #0
.L439:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bgt	.L438	@cond_branch
	add	r0, r7, r3
	ldrb	r1, [r0]
	mov	r4, #0xa
	ldrsh	r0, [r2, r4]
	cmp	r1, r0
	bne	.L439	@cond_branch
.L438:
	lsl	r4, r7, #0x18
	lsr	r0, r4, #0x18
	bl	DrawStatusSymbol
	lsl	r0, r0, #0x18
	add	r6, r4, #0
	cmp	r0, #0
	beq	.L443	@cond_branch
	mov	r0, #0x63
	bl	PlaySE
	b	.L444
.L621:
	.align	2, 0
.L620:
	.word	gContestantTurnOrder
.L443:
	mov	r0, #0x64
	bl	PlaySE
.L444:
	ldr	r5, .L622
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r4, r0, #0x2
	add	r1, r4, r1
	ldrb	r1, [r1, #0x15]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L445	@cond_branch
	lsr	r0, r6, #0x18
	bl	StopFlashJudgeAttentionEye
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x15]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x15]
.L445:
	ldr	r0, .L622+0x4
	mov	r1, sl
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	mov	r0, #0x1a
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L623:
	.align	2, 0
.L622:
	.word	gContestResources
	.word	gTasks
.L446:
	mov	r5, r8
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	sl, r2
	cmp	r0, #0x9
	bgt	.LCB4962
	bl	.L315	@far jump
.LCB4962:
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r1, [r2, #0xc]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L449	@cond_branch
	ldrb	r1, [r2, #0x11]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L448	@cond_branch
.L449:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L624
	lsl	r1, r6, #0x6
	ldr	r2, .L624+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L624+0x8
	ldr	r1, .L624+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
.L448:
	ldr	r0, .L624+0x10
	mov	r1, sl
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x34
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L625:
	.align	2, 0
.L624:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar4
	.word	gText_MonCantAppealNextTurn
	.word	gTasks
.L450:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB5032
	bl	.L315	@far jump
.LCB5032:
	ldr	r0, .L626
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L452	@cond_branch
	ldr	r0, .L626+0x4
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x11
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L627:
	.align	2, 0
.L626:
	.word	gContestResources
	.word	gTasks
.L452:
	ldr	r0, .L628
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0xe
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L629:
	.align	2, 0
.L628:
	.word	gTasks
.L454:
	mov	r4, r9
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x16]
	lsl	r4, r0, #0x18
	lsr	r5, r4, #0x18
	cmp	r5, #0
	beq	.L455	@cond_branch
	bl	ContestClearGeneralTextWindow
	asr	r0, r4, #0x18
	cmp	r0, #0x1
	bne	.L456	@cond_branch
	ldr	r0, .L630
	b	.L556
.L631:
	.align	2, 0
.L630:
	.word	gText_AppealComboWentOverWell
.L456:
	cmp	r0, #0x2
	bne	.L458	@cond_branch
	ldr	r0, .L632
.L556:
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	b	.L457
.L633:
	.align	2, 0
.L632:
	.word	gText_AppealComboWentOverVeryWell
.L458:
	ldr	r0, .L634
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
.L457:
	mov	r0, #0x3
	bl	DoJudgeSpeechBubble
	ldr	r1, .L634+0x4
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x1c]
	b	.L557
.L635:
	.align	2, 0
.L634:
	.word	gText_AppealComboWentOverExcellently
	.word	gTasks
.L455:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L636
	lsl	r1, r6, #0x6
	ldr	r2, .L636+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L636+0x8
	ldr	r1, .L636+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	mov	r0, #0x2
	bl	DoJudgeSpeechBubble
	ldr	r1, .L636+0x10
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x1c]
.L557:
	mov	r1, #0x2d
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L637:
	.align	2, 0
.L636:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar4
	.word	gText_JudgeLookedAtMonExpectantly
	.word	gTasks
.L461:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5209
	bl	.L315	@far jump
.LCB5209:
	ldrb	r0, [r2, #0x11]
	bl	StartStopFlashJudgeAttentionEye
	ldr	r1, .L638
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xf
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L639:
	.align	2, 0
.L638:
	.word	gTasks
.L463:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB5234
	bl	.L315	@far jump
.LCB5234:
	ldr	r1, .L640
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x32
	bgt	.LCB5248
	bl	.L315	@far jump
.LCB5248:
	ldr	r7, .L640+0x4
	ldr	r0, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r5, r0, #0x2
	add	r2, r5, r1
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x10
	mov	r8, r0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L466	@cond_branch
	mov	r1, #0x2
	ldrsh	r0, [r2, r1]
	ldrb	r1, [r2, #0x17]
	add	r2, r6, #0
	bl	UpdateAppealHearts
	ldr	r0, [r7]
	ldr	r1, [r0, #0x4]
	add	r1, r5, r1
	ldrh	r0, [r1, #0x2]
	ldrb	r2, [r1, #0x17]
	add	r0, r0, r2
	strh	r0, [r1, #0x2]
.L466:
	mov	r3, r8
	strh	r3, [r4, #0x8]
	bl	.L315	@ far jump
.L641:
	.align	2, 0
.L640:
	.word	gTasks
	.word	gContestResources
.L467:
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.LCB5305
	bl	.L315	@far jump
.LCB5305:
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strh	r1, [r0, #0x1c]
	mov	r1, #0x11
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L469:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L470	@cond_branch
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L642
	lsl	r1, r6, #0x6
	ldr	r2, .L642+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L642+0x8
	ldr	r1, .L642+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r0, .L642+0x10
	mov	r5, r8
	lsl	r4, r5, #0x2
	add	r4, r4, r8
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	bl	DoJudgeSpeechBubble
	mov	r0, #0x2e
	strh	r0, [r4, #0x8]
	b	.L315
.L643:
	.align	2, 0
.L642:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar4
	.word	gText_RepeatedAppeal
	.word	gTasks
.L470:
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x29
	strh	r1, [r0, #0x8]
	b	.L315
.L472:
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5398
	b	.L315	@long jump
.LCB5398:
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x13
	strh	r1, [r0, #0x8]
	b	.L315
.L474:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB5413
	b	.L315	@long jump
.LCB5413:
	ldr	r5, .L644
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r4, r6, #0x3
	sub	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r1, r4, r1
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	ldrb	r1, [r1, #0x18]
	neg	r1, r1
	add	r2, r6, #0
	bl	UpdateAppealHearts
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r4, r4, r0
	ldrb	r1, [r4, #0x18]
	ldrh	r0, [r4, #0x2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x2]
	ldr	r1, .L644+0x4
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x12
	strh	r1, [r0, #0x8]
	b	.L315
.L645:
	.align	2, 0
.L644:
	.word	gContestResources
	.word	gTasks
.L476:
	bl	ContestDebugDoPrint
	ldr	r0, .L646
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB5468
	b	.L315	@long jump
.LCB5468:
	ldr	r0, .L646+0x4
	mov	r5, r8
	lsl	r4, r5, #0x2
	add	r4, r4, r8
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	strh	r3, [r4, #0x1c]
	bl	ContestClearGeneralTextWindow
	mov	r0, #0x29
	strh	r0, [r4, #0x8]
	b	.L315
.L647:
	.align	2, 0
.L646:
	.word	gContestResources
	.word	gTasks
.L478:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, [r0, #0x10]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L479	@cond_branch
	ldr	r0, [r2]
	lsl	r0, r0, #0x14
	lsr	r0, r0, #0x1d
	cmp	r6, r0
	beq	.L479	@cond_branch
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x39
	strh	r1, [r0, #0x8]
	b	.L315
.L479:
	mov	r3, r9
	ldr	r1, [r3]
	ldr	r0, [r1, #0x10]
	ldrb	r0, [r0]
	str	r0, [sp, #0x4]
	ldr	r1, [r1, #0x4]
	lsl	r2, r6, #0x3
	sub	r0, r2, r6
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	ldrb	r1, [r5, #0x11]
	mov	r0, #0x10
	and	r0, r0, r1
	str	r2, [sp, #0x8]
	cmp	r0, #0
	beq	.L481	@cond_branch
	mov	r4, #0x1
	str	r4, [sp, #0x4]
	ldr	r0, .L648
	ldrh	r2, [r5, #0x6]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	ldr	r2, .L648+0x4
	add	r1, r1, r2
	bl	StringCopy
	b	.L482
.L649:
	.align	2, 0
.L648:
	.word	gStringVar3
	.word	gMoveNames
.L481:
	ldr	r0, .L650
	ldr	r3, .L650+0x4
	ldr	r2, .L650+0x8
	ldrh	r1, [r5, #0x6]
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r1, [r1, #0x1]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1b
	add	r1, r1, r3
	ldr	r1, [r1]
	bl	StringCopy
.L482:
	ldr	r5, [sp, #0x4]
	lsl	r0, r5, #0x18
	cmp	r0, #0
	ble	.L483	@cond_branch
	ldr	r0, .L650+0xc
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	ldr	r2, [sp, #0x8]
	sub	r0, r2, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L483	@cond_branch
	mov	r3, #0x0
	str	r3, [sp, #0x4]
.L483:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L650+0x10
	lsl	r1, r6, #0x6
	ldr	r2, .L650+0x14
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L650+0xc
	ldr	r0, [r4]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x13]
	ldr	r5, [sp, #0x4]
	lsl	r2, r5, #0x18
	asr	r3, r2, #0x18
	add	r0, r3, r0
	strb	r0, [r1, #0x13]
	ldr	r0, [r4]
	ldr	r1, [r0]
	mov	r0, #0x13
	ldrsb	r0, [r1, r0]
	add	r5, r2, #0
	cmp	r0, #0
	bge	.L484	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1, #0x13]
.L484:
	cmp	r3, #0
	bne	.L485	@cond_branch
	ldr	r0, .L650+0x18
	mov	r2, r8
	lsl	r1, r2, #0x2
	b	.L558
.L651:
	.align	2, 0
.L650:
	.word	gStringVar3
	.word	sContestConditions
	.word	gContestMoves
	.word	gContestResources
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gTasks
.L485:
	cmp	r3, #0
	bge	.L487	@cond_branch
	ldr	r0, .L652
	ldr	r1, .L652+0x4
	bl	StringExpandPlaceholders
	b	.L488
.L653:
	.align	2, 0
.L652:
	.word	gStringVar4
	.word	gText_MonsXDidntGoOverWell
.L487:
	cmp	r3, #0
	ble	.L489	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x4
	bgt	.L489	@cond_branch
	ldr	r0, .L654
	ldr	r1, .L654+0x4
	bl	StringExpandPlaceholders
	b	.L488
.L655:
	.align	2, 0
.L654:
	.word	gStringVar4
	.word	gText_MonsXWentOverGreat
.L489:
	ldr	r0, .L656
	ldr	r1, .L656+0x4
	bl	StringExpandPlaceholders
.L488:
	ldr	r0, .L656
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L656+0x8
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r0, #0x0
	strh	r0, [r1, #0x1c]
	strh	r0, [r1, #0x1e]
	cmp	r5, #0
	bge	.L491	@cond_branch
	mov	r0, #0x35
	strh	r0, [r1, #0x8]
	b	.L315
.L657:
	.align	2, 0
.L656:
	.word	gStringVar4
	.word	gText_MonsXGotTheCrowdGoing
	.word	gTasks
.L491:
	mov	r0, #0x36
	strh	r0, [r1, #0x8]
	b	.L315
.L493:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	mov	r0, #0x1c
	ldrsh	r3, [r4, r0]
	cmp	r3, #0x1
	beq	.L496	@cond_branch
	cmp	r3, #0x1
	bgt	.L505	@cond_branch
	cmp	r3, #0
	beq	.L495	@cond_branch
	b	.L315
.L505:
	cmp	r3, #0x2
	beq	.L498	@cond_branch
	cmp	r3, #0x3
	beq	.L501	@cond_branch
	b	.L315
.L495:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x1
	bl	BlendAudienceBackground
	ldr	r0, .L658
	bl	PlayFanfare
	b	.L559
.L659:
	.align	2, 0
.L658:
	.word	0x187
.L496:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x7]
	and	r3, r3, r0
	cmp	r3, #0
	beq	.LCB5791
	b	.L315	@long jump
.LCB5791:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB5795
	b	.L315	@long jump
.LCB5795:
	mov	r0, #0x1
	neg	r0, r0
	bl	ShowAndUpdateApplauseMeter
	b	.L559
.L498:
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x20
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.LCB5814
	b	.L315	@long jump
.LCB5814:
	ldrh	r0, [r4, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	bgt	.LCB5822
	b	.L315	@long jump
.LCB5822:
	strh	r2, [r4, #0x1e]
	mov	r1, #0x1
	neg	r1, r1
	add	r0, r1, #0
	bl	BlendAudienceBackground
.L559:
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	b	.L315
.L501:
	ldr	r0, .L660
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5844
	b	.L315	@long jump
.LCB5844:
	strh	r0, [r4, #0x1c]
	strh	r0, [r4, #0x1e]
	mov	r0, #0x2b
	strh	r0, [r4, #0x8]
	b	.L315
.L661:
	.align	2, 0
.L660:
	.word	gPaletteFade
.L506:
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r0, r1, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r5, #0x1c
	ldrsh	r0, [r0, r5]
	mov	sl, r1
	cmp	r0, #0x4
	bls	.LCB5869
	b	.L315	@long jump
.LCB5869:
	lsl	r0, r0, #0x2
	ldr	r1, .L662
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L663:
	.align	2, 0
.L662:
	.word	.L520
	.align	2, 0
	.align	2, 0
.L520:
	.word	.L508
	.word	.L510
	.word	.L512
	.word	.L515
	.word	.L518
.L508:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB5891
	b	.L315	@long jump
.LCB5891:
	mov	r0, #0x1
	mov	r1, #0x1
	b	.L560
.L510:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5909
	b	.L315	@long jump
.LCB5909:
	bl	AnimateAudience
	mov	r0, #0xdf
	bl	PlaySE
	mov	r0, #0x1
	bl	ShowAndUpdateApplauseMeter
	b	.L561
.L512:
	mov	r3, r9
	ldr	r2, [r3]
	ldr	r0, [r2]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x20
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB5930
	b	.L315	@long jump
.LCB5930:
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r4
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	bgt	.LCB5944
	b	.L315	@long jump
.LCB5944:
	strh	r3, [r5, #0x1e]
	ldr	r0, [r2, #0x4]
	lsl	r4, r6, #0x3
	sub	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r0, r4, r0
	mov	r1, #0x2
	ldrsh	r0, [r0, r1]
	ldr	r1, [r2, #0x10]
	ldrb	r1, [r1, #0x2]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	add	r2, r6, #0
	bl	UpdateAppealHearts
	mov	r2, r9
	ldr	r1, [r2]
	ldr	r0, [r1, #0x4]
	add	r4, r4, r0
	ldr	r0, [r1, #0x10]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrh	r3, [r4, #0x2]
	add	r0, r0, r3
	strh	r0, [r4, #0x2]
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	b	.L315
.L515:
	mov	r4, r9
	ldr	r2, [r4]
	ldr	r1, [r2, #0x14]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5987
	b	.L315	@long jump
.LCB5987:
	ldr	r0, [r2]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5996
	b	.L315	@long jump
.LCB5996:
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x1
.L560:
	bl	BlendAudienceBackground
.L561:
	ldr	r0, .L664
	mov	r1, sl
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	b	.L315
.L665:
	.align	2, 0
.L664:
	.word	gTasks
.L518:
	ldr	r0, .L666
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB6030
	b	.L315	@long jump
.LCB6030:
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strh	r3, [r0, #0x1c]
	strh	r3, [r0, #0x1e]
	mov	r1, #0x2b
	strh	r1, [r0, #0x8]
	b	.L315
.L667:
	.align	2, 0
.L666:
	.word	gPaletteFade
.L522:
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB6063
	b	.L315	@long jump
.LCB6063:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L668
	mov	r2, r8
	lsl	r1, r2, #0x2
	b	.L558
.L669:
	.align	2, 0
.L668:
	.word	gTasks
.L524:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L670
	ldr	r5, .L670+0x4
	ldr	r1, [r5]
	ldr	r1, [r1, #0x10]
	ldr	r1, [r1]
	lsl	r1, r1, #0x14
	lsr	r1, r1, #0x1d
	lsl	r1, r1, #0x6
	ldr	r4, .L670+0x8
	add	r1, r1, r4
	bl	StringCopy
	ldr	r0, .L670+0xc
	lsl	r1, r6, #0x6
	add	r1, r1, r4
	bl	StringCopy
	ldr	r0, .L670+0x10
	ldr	r1, [r5]
	ldr	r2, [r1, #0x4]
	lsl	r1, r6, #0x3
	sub	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r1, #0x6]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	ldr	r2, .L670+0x14
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L670+0x18
	ldr	r1, .L670+0x1c
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L670+0x20
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x3a
	strh	r1, [r0, #0x8]
	b	.L315
.L671:
	.align	2, 0
.L670:
	.word	gStringVar3
	.word	gContestResources
	.word	gContestMons+0x2
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar4
	.word	gText_CrowdContinuesToWatchMon
	.word	gTasks
.L525:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB6151
	b	.L315	@long jump
.LCB6151:
	bl	ContestClearGeneralTextWindow
	ldr	r4, .L672
	ldr	r1, .L672+0x4
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L672+0x8
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x3b
	strh	r1, [r0, #0x8]
	b	.L315
.L673:
	.align	2, 0
.L672:
	.word	gStringVar4
	.word	gText_MonsMoveIsIgnored
	.word	gTasks
.L527:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB6184
	b	.L315	@long jump
.LCB6184:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L674
	mov	r5, r8
	lsl	r1, r5, #0x2
	b	.L558
.L675:
	.align	2, 0
.L674:
	.word	gTasks
.L529:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r4, r0, #0x2
	add	r2, r4, r1
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L530	@cond_branch
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x15]
.L530:
	add	r0, r6, #0
	bl	StartStopFlashJudgeAttentionEye
	ldr	r0, .L676
	lsl	r1, r6, #0x6
	ldr	r2, .L676+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r0, .L676+0x8
	mov	r2, r9
	ldr	r1, [r2]
	ldr	r1, [r1, #0x4]
	add	r1, r4, r1
	ldrh	r2, [r1, #0x6]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	ldr	r2, .L676+0xc
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L676+0x10
	ldr	r1, .L676+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L676+0x18
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x22
	strh	r1, [r0, #0x8]
	b	.L315
.L677:
	.align	2, 0
.L676:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar4
	.word	gText_MonWasTooNervousToMove
	.word	gTasks
.L531:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB6276
	b	.L315	@long jump
.LCB6276:
	ldr	r0, .L678
	mov	r4, r8
	lsl	r1, r4, #0x2
.L558:
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x37
	strh	r0, [r1, #0x8]
	b	.L315
.L679:
	.align	2, 0
.L678:
	.word	gTasks
.L533:
	bl	SlideApplauseMeterOut
	ldr	r0, .L680
	mov	r5, r8
	lsl	r1, r5, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x38
	strh	r0, [r1, #0x8]
	b	.L315
.L681:
	.align	2, 0
.L680:
	.word	gTasks
.L534:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.LCB6323
	b	.L315	@long jump
.LCB6323:
	mov	r0, #0x13
	ldrsb	r0, [r2, r0]
	cmp	r0, #0x4
	ble	.L536	@cond_branch
	strb	r1, [r2, #0x13]
	bl	UpdateApplauseMeter
.L536:
	ldr	r0, .L682
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0xa
	strh	r0, [r1, #0x8]
	b	.L315
.L683:
	.align	2, 0
.L682:
	.word	gTasks
.L537:
	mov	r3, r8
	lsl	r2, r3, #0x2
	add	r2, r2, r8
	lsl	r2, r2, #0x3
	add	r2, r2, r4
	ldrb	r5, [r2, #0xc]
	ldr	r1, .L684
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L684+0x4
	str	r1, [r0]
	mov	r0, #0xb
	strh	r0, [r2, #0x8]
	b	.L315
.L685:
	.align	2, 0
.L684:
	.word	gSprites
	.word	SpriteCB_MonSlideOut
.L538:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	ldrb	r5, [r4, #0xc]
	ldr	r1, .L686
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r6, r0, r1
	add	r0, r6, #0
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L315	@cond_branch
	add	r0, r6, #0
	bl	FreeSpriteOamMatrix
	add	r0, r6, #0
	bl	DestroySprite
	mov	r0, #0x14
	strh	r0, [r4, #0x8]
	b	.L315
.L687:
	.align	2, 0
.L686:
	.word	gSprites
.L540:
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0, #0x1c]
	mov	r1, #0x15
	strh	r1, [r0, #0x8]
	b	.L315
.L541:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L688
	lsl	r1, r6, #0x6
	ldr	r2, .L688+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L688+0x8
	ldr	r1, .L688+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L688+0x10
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x20
	strh	r1, [r0, #0x8]
	b	.L315
.L689:
	.align	2, 0
.L688:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar4
	.word	gText_MonWasWatchingOthers
	.word	gTasks
.L542:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	bne	.L315	@cond_branch
	ldr	r0, .L690
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x15
	strh	r0, [r1, #0x8]
	b	.L315
.L691:
	.align	2, 0
.L690:
	.word	gTasks
.L544:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r4
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	ble	.L315	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x1c]
	mov	r0, #0x16
	strh	r0, [r1, #0x8]
	b	.L315
.L546:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strb	r0, [r1, #0x10]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L547	@cond_branch
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strh	r2, [r0, #0x8]
	strh	r2, [r0, #0xa]
	strh	r2, [r0, #0xc]
	ldr	r1, .L692
	str	r1, [r0]
	b	.L315
.L693:
	.align	2, 0
.L692:
	.word	Task_FinishRoundOfAppeals
.L547:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strh	r2, [r0, #0x8]
.L315:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 Task_DoAppeals,.Lfe34-Task_DoAppeals
	.align	2, 0
	.type	 Task_EndWaitForLink,function
	.thumb_func
Task_EndWaitForLink:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L695
	ldr	r1, [r1]
	ldr	r3, [r1]
	ldrb	r2, [r3, #0x7]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r3, #0x7]
	bl	DestroyTask
	pop	{r0}
	bx	r0
.L696:
	.align	2, 0
.L695:
	.word	gContestResources
.Lfe35:
	.size	 Task_EndWaitForLink,.Lfe35-Task_EndWaitForLink
	.align	2, 0
	.type	 SpriteCB_MonSlideIn,function
	.thumb_func
SpriteCB_MonSlideIn:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x24]
	mov	r3, #0x24
	ldrsh	r2, [r1, r3]
	cmp	r2, #0
	beq	.L698	@cond_branch
	sub	r0, r0, #0x2
	strh	r0, [r1, #0x24]
	b	.L699
.L698:
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L699	@cond_branch
	strh	r2, [r1, #0x2e]
	ldr	r0, .L701
	str	r0, [r1, #0x1c]
.L699:
	pop	{r0}
	bx	r0
.L702:
	.align	2, 0
.L701:
	.word	SpriteCallbackDummy
.Lfe36:
	.size	 SpriteCB_MonSlideIn,.Lfe36-SpriteCB_MonSlideIn
	.align	2, 0
	.type	 SpriteCB_MonSlideOut,function
	.thumb_func
SpriteCB_MonSlideOut:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, #0x6
	strh	r0, [r2, #0x24]
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	mov	r3, #0x24
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L704	@cond_branch
	ldr	r0, .L705
	str	r0, [r2, #0x1c]
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L704:
	pop	{r0}
	bx	r0
.L706:
	.align	2, 0
.L705:
	.word	SpriteCallbackDummy
.Lfe37:
	.size	 SpriteCB_MonSlideOut,.Lfe37-SpriteCB_MonSlideOut
	.align	2, 0
	.type	 Task_FinishRoundOfAppeals,function
	.thumb_func
Task_FinishRoundOfAppeals:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L720
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r5, r1, r2
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L713	@cond_branch
	cmp	r0, #0x1
	bgt	.L718	@cond_branch
	cmp	r0, #0
	beq	.L709	@cond_branch
	b	.L708
.L721:
	.align	2, 0
.L720:
	.word	gTasks
.L718:
	cmp	r0, #0x2
	beq	.L715	@cond_branch
	b	.L708
.L709:
	ldr	r0, .L722
	ldrb	r1, [r0]
	mov	r6, #0x1
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L710	@cond_branch
	ldr	r0, .L722+0x4
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x7]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x7]
	bl	IsPlayerLinkLeader
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L711	@cond_branch
	bl	RankContestants
	bl	SetAttentionLevels
.L711:
	ldr	r4, .L722+0x8
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L722+0xc
	add	r1, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	bl	ContestPrintLinkStandby
	strh	r6, [r5, #0x8]
	b	.L708
.L723:
	.align	2, 0
.L722:
	.word	gLinkContestFlags
	.word	gContestResources
	.word	Task_LinkContest_CommunicateAppealsState
	.word	Task_EndWaitForLink
.L710:
	bl	RankContestants
	bl	SetAttentionLevels
	b	.L719
.L713:
	ldr	r0, .L724
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L708	@cond_branch
.L719:
	mov	r0, #0x2
	strh	r0, [r5, #0x8]
	b	.L708
.L725:
	.align	2, 0
.L724:
	.word	gContestResources
.L715:
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	ldr	r0, .L726
	str	r0, [r5]
.L708:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L727:
	.align	2, 0
.L726:
	.word	Task_ReadyUpdateHeartSliders
.Lfe38:
	.size	 Task_FinishRoundOfAppeals,.Lfe38-Task_FinishRoundOfAppeals
	.align	2, 0
	.type	 Task_ReadyUpdateHeartSliders,function
	.thumb_func
Task_ReadyUpdateHeartSliders:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	bl	ShowHideNextTurnGfx
	ldr	r1, .L729
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	strh	r1, [r0, #0xa]
	ldr	r1, .L729+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L730:
	.align	2, 0
.L729:
	.word	gTasks
	.word	Task_UpdateHeartSliders
.Lfe39:
	.size	 Task_ReadyUpdateHeartSliders,.Lfe39-Task_ReadyUpdateHeartSliders
	.align	2, 0
	.type	 Task_UpdateHeartSliders,function
	.thumb_func
Task_UpdateHeartSliders:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L743
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	mov	r0, #0x8
	ldrsh	r5, [r4, r0]
	cmp	r5, #0x1
	beq	.L735	@cond_branch
	cmp	r5, #0x1
	bgt	.L741	@cond_branch
	cmp	r5, #0
	beq	.L733	@cond_branch
	b	.L732
.L744:
	.align	2, 0
.L743:
	.word	gTasks
.L741:
	cmp	r5, #0x2
	beq	.L738	@cond_branch
	b	.L732
.L733:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L732	@cond_branch
	mov	r0, #0x2
	bl	AnimateSliderHearts
	strh	r5, [r4, #0xa]
	b	.L742
.L735:
	ldr	r0, .L745
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x2
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L732	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L732	@cond_branch
	strh	r1, [r4, #0xa]
.L742:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L732
.L746:
	.align	2, 0
.L745:
	.word	gContestResources
.L738:
	bl	UpdateHeartSliders
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xa]
	ldr	r0, .L747
	str	r0, [r4]
.L732:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L748:
	.align	2, 0
.L747:
	.word	Task_WaitForHeartSliders
.Lfe40:
	.size	 Task_UpdateHeartSliders,.Lfe40-Task_UpdateHeartSliders
	.align	2, 0
	.type	 Task_WaitForHeartSliders,function
	.thumb_func
Task_WaitForHeartSliders:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	SlidersDoneUpdating
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L750	@cond_branch
	ldr	r0, .L751
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L751+0x4
	str	r0, [r1]
.L750:
	pop	{r4}
	pop	{r0}
	bx	r0
.L752:
	.align	2, 0
.L751:
	.word	gTasks
	.word	sub_80DA348
.Lfe41:
	.size	 Task_WaitForHeartSliders,.Lfe41-Task_WaitForHeartSliders
	.align	2, 0
	.type	 sub_80DA348,function
	.thumb_func
sub_80DA348:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L754
	ldr	r3, .L754+0x4
	ldr	r1, .L754+0x8
	str	r2, [r1]
	str	r3, [r1, #0x4]
	ldr	r2, .L754+0xc
	str	r2, [r1, #0x8]
	ldr	r1, [r1, #0x8]
	ldr	r2, .L754+0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	mov	r0, #0x2
	strh	r0, [r1, #0xa]
	ldr	r0, .L754+0x14
	str	r0, [r1]
	bx	lr
.L755:
	.align	2, 0
.L754:
	.word	gHeap+0x1a204
	.word	gPlttBufferUnfaded
	.word	0x40000d4
	.word	-0x7bffff00
	.word	gTasks
	.word	Task_WaitPrintRoundResult
.Lfe42:
	.size	 sub_80DA348,.Lfe42-sub_80DA348
	.align	2, 0
	.type	 Task_WaitPrintRoundResult,function
	.thumb_func
Task_WaitPrintRoundResult:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L759
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L757	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	ldrh	r0, [r1, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L757	@cond_branch
	ldr	r0, .L759+0x4
	str	r0, [r1]
.L757:
	pop	{r0}
	bx	r0
.L760:
	.align	2, 0
.L759:
	.word	gTasks
	.word	Task_PrintRoundResultText
.Lfe43:
	.size	 Task_WaitPrintRoundResult,.Lfe43-Task_WaitPrintRoundResult
	.align	2, 0
	.type	 Task_PrintRoundResultText,function
	.thumb_func
Task_PrintRoundResultText:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L765
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r6, r1, r2
	mov	r1, #0x8
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L762	@cond_branch
	ldr	r0, .L765+0x4
	ldr	r0, [r0]
	ldr	r5, .L765+0x8
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r4, [r0, #0x1a]
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L765+0xc
	ldrb	r1, [r5]
	lsl	r1, r1, #0x6
	ldr	r2, .L765+0x10
	add	r1, r1, r2
	bl	StringCopy
	ldr	r5, .L765+0x14
	ldr	r0, .L765+0x18
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldr	r1, [r4]
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	add	r0, r5, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	b	.L763
.L766:
	.align	2, 0
.L765:
	.word	gTasks
	.word	gContestResources
	.word	gContestPlayerMonIndex
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar4
	.word	sRoundResultTexts
.L762:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	bne	.L763	@cond_branch
	strh	r0, [r6, #0x8]
	ldr	r0, .L767
	str	r0, [r6]
	bl	ContestDebugDoPrint
.L763:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L768:
	.align	2, 0
.L767:
	.word	Task_ReUpdateHeartSliders
.Lfe44:
	.size	 Task_PrintRoundResultText,.Lfe44-Task_PrintRoundResultText
	.align	2, 0
	.type	 Task_ReUpdateHeartSliders,function
	.thumb_func
Task_ReUpdateHeartSliders:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L771
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x8]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	ble	.L770	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	bl	UpdateHeartSliders
	ldr	r0, .L771+0x4
	str	r0, [r4]
.L770:
	pop	{r4}
	pop	{r0}
	bx	r0
.L772:
	.align	2, 0
.L771:
	.word	gTasks
	.word	Task_WaitForHeartSlidersAgain
.Lfe45:
	.size	 Task_ReUpdateHeartSliders,.Lfe45-Task_ReUpdateHeartSliders
	.align	2, 0
	.type	 Task_WaitForHeartSlidersAgain,function
	.thumb_func
Task_WaitForHeartSlidersAgain:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	SlidersDoneUpdating
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L774	@cond_branch
	ldr	r1, .L775
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	ldr	r1, .L775+0x4
	str	r1, [r0]
.L774:
	pop	{r4}
	pop	{r0}
	bx	r0
.L776:
	.align	2, 0
.L775:
	.word	gTasks
	.word	Task_DropCurtainAtRoundEnd
.Lfe46:
	.size	 Task_WaitForHeartSlidersAgain,.Lfe46-Task_WaitForHeartSlidersAgain
	.align	2, 0
	.type	 Task_DropCurtainAtRoundEnd,function
	.thumb_func
Task_DropCurtainAtRoundEnd:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	SetBgForCurtainDrop
	ldr	r1, .L778
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L778+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L779:
	.align	2, 0
.L778:
	.word	gTasks
	.word	Task_StartDropCurtainAtRoundEnd
.Lfe47:
	.size	 Task_DropCurtainAtRoundEnd,.Lfe47-Task_DropCurtainAtRoundEnd
	.align	2, 0
	.type	 Task_UpdateContestantBoxOrder,function
	.thumb_func
Task_UpdateContestantBoxOrder:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	UpdateContestantBoxOrder
	ldr	r1, .L781
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L781+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L782:
	.align	2, 0
.L781:
	.word	gTasks
	.word	Task_TryStartNextRoundOfAppeals
.Lfe48:
	.size	 Task_UpdateContestantBoxOrder,.Lfe48-Task_UpdateContestantBoxOrder
	.align	2, 0
	.type	 Task_TryStartNextRoundOfAppeals,function
	.thumb_func
Task_TryStartNextRoundOfAppeals:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x8
	bl	GetGpuReg
	mov	r1, sp
	strh	r0, [r1]
	mov	r0, #0xc
	bl	GetGpuReg
	mov	r4, sp
	add	r4, r4, #0x2
	strh	r0, [r4]
	mov	r3, sp
	ldrb	r2, [r3]
	mov	r1, #0x4
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3]
	ldrb	r0, [r4]
	and	r1, r1, r0
	strb	r1, [r4]
	mov	r0, sp
	ldrh	r1, [r0]
	mov	r0, #0x8
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0xc
	bl	SetGpuReg
	ldr	r2, .L787
	ldr	r0, [r2]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	ldr	r0, [r2]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x5
	bne	.L784	@cond_branch
	ldr	r0, .L787+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L787+0x8
	b	.L786
.L788:
	.align	2, 0
.L787:
	.word	gContestResources
	.word	gTasks
	.word	Task_EndAppeals
.L784:
	bl	SlideApplauseMeterIn
	ldr	r0, .L789
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L789+0x4
.L786:
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L790:
	.align	2, 0
.L789:
	.word	gTasks
	.word	Task_StartNewRoundOfAppeals
.Lfe49:
	.size	 Task_TryStartNextRoundOfAppeals,.Lfe49-Task_TryStartNextRoundOfAppeals
	.align	2, 0
	.type	 Task_StartNewRoundOfAppeals,function
	.thumb_func
Task_StartNewRoundOfAppeals:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L793
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L792	@cond_branch
	ldr	r0, .L793+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L793+0x8
	str	r0, [r1]
.L792:
	pop	{r0}
	bx	r0
.L794:
	.align	2, 0
.L793:
	.word	gContestResources
	.word	gTasks
	.word	Task_DisplayAppealNumberText
.Lfe50:
	.size	 Task_StartNewRoundOfAppeals,.Lfe50-Task_StartNewRoundOfAppeals
	.align	2, 0
	.type	 Task_EndAppeals,function
	.thumb_func
Task_EndAppeals:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L803
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L803+0x4
	strh	r1, [r0]
	ldr	r4, .L803+0x8
	mov	r3, #0x0
	ldr	r2, .L803+0xc
	mov	r1, #0x3
.L799:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r0, r3, r0
	ldrh	r0, [r0, #0x4]
	strh	r0, [r2]
	add	r3, r3, #0x1c
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L799	@cond_branch
	bl	CalculateFinalScores
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L803+0x10
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L801	@cond_branch
	ldr	r0, .L803+0x8
	ldr	r2, [r0]
	ldr	r0, .L803+0x14
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x8]
	bl	BravoTrainerPokemonProfile_BeforeInterview1
	b	.L802
.L804:
	.align	2, 0
.L803:
	.word	gBattle_BG0_Y
	.word	gBattle_BG2_Y
	.word	gContestResources
	.word	gContestMonAppealPointTotals
	.word	gLinkContestFlags
	.word	gContestPlayerMonIndex
.L801:
	bl	CalculateContestLiveUpdateData
	bl	SetConestLiveUpdateTVData
	bl	ContestDebugPrintBitStrings
.L802:
	ldr	r1, .L805
	ldr	r0, .L805+0x4
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r4, .L805+0x8
	ldr	r1, .L805+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L805+0x10
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0xc]
	ldr	r1, .L805+0x14
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L806:
	.align	2, 0
.L805:
	.word	gContestRngValue
	.word	gRngValue
	.word	gStringVar4
	.word	gText_AllOutOfAppealTime
	.word	gTasks
	.word	Task_WaitForOutOfTimeMsg
.Lfe51:
	.size	 Task_EndAppeals,.Lfe51-Task_EndAppeals
	.align	2, 0
	.type	 Task_WaitForOutOfTimeMsg,function
	.thumb_func
Task_WaitForOutOfTimeMsg:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	Contest_RunTextPrinters
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L808	@cond_branch
	bl	SetBgForCurtainDrop
	ldr	r0, .L809
	strh	r4, [r0]
	ldr	r1, .L809+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	mov	r0, #0x62
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	ldr	r1, .L809+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x8]
	ldr	r1, .L809+0xc
	str	r1, [r0]
.L808:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L810:
	.align	2, 0
.L809:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	Task_DropCurtainAtAppealsEnd
.Lfe52:
	.size	 Task_WaitForOutOfTimeMsg,.Lfe52-Task_WaitForOutOfTimeMsg
	.align	2, 0
	.type	 Task_DropCurtainAtAppealsEnd,function
	.thumb_func
Task_DropCurtainAtAppealsEnd:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L814
	ldrh	r0, [r1]
	sub	r0, r0, #0x7
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L812	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
.L812:
	ldrh	r2, [r1]
	cmp	r2, #0
	bne	.L813	@cond_branch
	ldr	r0, .L814+0x4
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L814+0x8
	str	r0, [r1]
	strh	r2, [r1, #0x8]
.L813:
	pop	{r0}
	bx	r0
.L815:
	.align	2, 0
.L814:
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	Task_TryCommunicateFinalStandings
.Lfe53:
	.size	 Task_DropCurtainAtAppealsEnd,.Lfe53-Task_DropCurtainAtAppealsEnd
	.align	2, 0
	.type	 Task_TryCommunicateFinalStandings,function
	.thumb_func
Task_TryCommunicateFinalStandings:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L821
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x8]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x31
	ble	.L817	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L821+0x4
	ldrb	r0, [r0]
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L818	@cond_branch
	ldr	r0, .L821+0x8
	b	.L820
.L822:
	.align	2, 0
.L821:
	.word	gTasks
	.word	gLinkContestFlags
	.word	Task_CommunicateFinalStandings
.L818:
	mov	r0, #0x1
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L823
.L820:
	str	r0, [r4]
.L817:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L824:
	.align	2, 0
.L823:
	.word	Task_ContestReturnToField
.Lfe54:
	.size	 Task_TryCommunicateFinalStandings,.Lfe54-Task_TryCommunicateFinalStandings
	.align	2, 0
	.type	 Task_CommunicateFinalStandings,function
	.thumb_func
Task_CommunicateFinalStandings:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L826
	add	r0, r5, #0
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L826+0x4
	add	r1, r5, #0
	bl	SetTaskFuncWithFollowupFunc
	ldr	r1, .L826+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L826+0xc
	str	r1, [r0]
	bl	ContestPrintLinkStandby
	mov	r0, #0x0
	bl	SetBottomSliderHeartsInvisibility
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L827:
	.align	2, 0
.L826:
	.word	Task_LinkContest_CommunicateFinalStandings
	.word	Task_EndCommunicateFinalStandings
	.word	gTasks
	.word	TaskDummy1
.Lfe55:
	.size	 Task_CommunicateFinalStandings,.Lfe55-Task_CommunicateFinalStandings
	.align	2, 0
	.type	 Task_EndCommunicateFinalStandings,function
	.thumb_func
Task_EndCommunicateFinalStandings:
	push	{lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r2, .L829
	ldr	r0, .L829+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L829+0x8
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L830:
	.align	2, 0
.L829:
	.word	gTasks
	.word	gContestResources
	.word	Task_ContestReturnToField
.Lfe56:
	.size	 Task_EndCommunicateFinalStandings,.Lfe56-Task_EndCommunicateFinalStandings
	.align	2, 0
	.type	 Task_ContestReturnToField,function
	.thumb_func
Task_ContestReturnToField:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L833
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L832	@cond_branch
	add	r0, r2, #0
	bl	DestroyTask
	ldr	r0, .L833+0x4
	ldr	r1, .L833+0x8
	str	r1, [r0]
	bl	FreeAllWindowBuffers
	bl	FreeContestResources
	bl	FreeMonSpritesGfx
	ldr	r0, .L833+0xc
	bl	SetMainCallback2
.L832:
	pop	{r0}
	bx	r0
.L834:
	.align	2, 0
.L833:
	.word	gPaletteFade
	.word	gFieldCallback
	.word	FieldCB_ContestReturnToField
	.word	CB2_ReturnToField
.Lfe57:
	.size	 Task_ContestReturnToField,.Lfe57-Task_ContestReturnToField
	.align	2, 0
	.type	 FieldCB_ContestReturnToField,function
	.thumb_func
FieldCB_ContestReturnToField:
	push	{lr}
	bl	ScriptContext2_Disable
	bl	EnableBothScriptContexts
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 FieldCB_ContestReturnToField,.Lfe58-FieldCB_ContestReturnToField
	.align	2, 0
	.type	 TryPutPlayerLast,function
	.thumb_func
TryPutPlayerLast:
	push	{lr}
	ldr	r0, .L838
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L837	@cond_branch
	ldr	r1, .L838+0x4
	mov	r0, #0x3
	strb	r0, [r1]
.L837:
	pop	{r0}
	bx	r0
.L839:
	.align	2, 0
.L838:
	.word	gLinkContestFlags
	.word	gContestPlayerMonIndex
.Lfe59:
	.size	 TryPutPlayerLast,.Lfe59-TryPutPlayerLast
	.align	2, 0
	.type	 IsPlayerLinkLeader,function
	.thumb_func
IsPlayerLinkLeader:
	push	{lr}
	ldr	r0, .L843
	ldr	r1, .L843+0x4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L841	@cond_branch
	mov	r0, #0x0
	b	.L842
.L844:
	.align	2, 0
.L843:
	.word	gContestPlayerMonIndex
	.word	gContestLinkLeaderIndex
.L841:
	mov	r0, #0x1
.L842:
	pop	{r1}
	bx	r1
.Lfe60:
	.size	 IsPlayerLinkLeader,.Lfe60-IsPlayerLinkLeader
	.align	2, 0
	.globl	CreateContestMonFromParty
	.type	 CreateContestMonFromParty,function
	.thumb_func
CreateContestMonFromParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r6, .L865
	ldr	r1, [r6]
	mov	r0, sp
	bl	StringCopy
	ldr	r0, .L865+0x4
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L846	@cond_branch
	mov	r0, sp
	bl	StripPlayerNameForLinkContest
.L846:
	ldr	r5, .L865+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x6
	ldr	r4, .L865+0xc
	add	r0, r0, r4
	mov	r1, sp
	mov	r2, #0x8
	bl	memcpy
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L847	@cond_branch
	ldrb	r0, [r5]
	lsl	r0, r0, #0x6
	add	r0, r4, r0
	mov	r1, #0xd8
	b	.L864
.L866:
	.align	2, 0
.L865:
	.word	gSaveBlock2Ptr
	.word	gLinkContestFlags
	.word	gContestPlayerMonIndex
	.word	gContestMons+0xd
.L847:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x6
	add	r0, r4, r0
	mov	r1, #0xd9
.L864:
	strb	r1, [r0, #0x8]
	ldr	r7, .L867
	ldr	r6, .L867+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x6
	add	r1, r7, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x6
	add	r0, r0, r7
	add	r0, r0, #0x2c
	strb	r1, [r0]
	mov	r0, #0x64
	mov	r1, r8
	mul	r1, r1, r0
	ldr	r0, .L867+0x8
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x6
	add	r2, r2, r7
	ldr	r3, .L867+0xc
	add	r1, r3, #0
	and	r0, r0, r1
	ldrh	r3, [r2]
	ldr	r1, .L867+0x10
	and	r1, r1, r3
	orr	r1, r1, r0
	strh	r1, [r2]
	add	r0, r5, #0
	mov	r1, #0x2
	mov	r2, sp
	bl	GetMonData
	mov	r0, sp
	bl	StringGetEnd10
	ldr	r0, .L867+0x14
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L849	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	GetMonData
	add	r1, r0, #0
	mov	r0, sp
	bl	StripMonNameForLinkContest
.L849:
	ldrb	r0, [r6]
	lsl	r0, r0, #0x6
	add	r4, r7, #0x2
	add	r0, r0, r4
	mov	r1, sp
	mov	r2, #0xb
	bl	memcpy
	ldrb	r0, [r6]
	lsl	r0, r0, #0x6
	add	r0, r0, r4
	mov	r1, sp
	bl	StringCopy
	add	r0, r5, #0
	mov	r1, #0x16
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r1, r1, #0x26
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x17
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r1, r1, #0x27
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x18
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r1, r1, #0x28
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x21
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r1, r1, #0x29
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x2f
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r1, r1, #0x2a
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x30
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r1, r1, #0x2b
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0xd
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	strh	r0, [r1, #0x1e]
	add	r0, r5, #0
	mov	r1, #0xe
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	strh	r0, [r1, #0x20]
	add	r0, r5, #0
	mov	r1, #0xf
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	strh	r0, [r1, #0x22]
	add	r0, r5, #0
	mov	r1, #0x10
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	strh	r0, [r1, #0x24]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r2, r7, #0
	add	r2, r2, #0x38
	add	r1, r1, r2
	str	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r2, r7, #0
	add	r2, r2, #0x3c
	add	r1, r1, r2
	str	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrb	r0, [r6]
	lsl	r0, r0, #0x6
	add	r1, r0, r7
	add	r0, r1, #0
	add	r0, r0, #0x26
	ldrb	r3, [r0]
	add	r0, r0, #0x1
	ldrb	r5, [r0]
	add	r0, r0, #0x1
	ldrb	r6, [r0]
	add	r0, r0, #0x1
	ldrb	r7, [r0]
	add	r0, r0, #0x1
	ldrb	r4, [r0]
	mov	r0, #0xc4
	lsl	r0, r0, #0x1
	cmp	r2, r0
	bne	.L850	@cond_branch
	add	r3, r3, #0x14
	b	.L851
.L868:
	.align	2, 0
.L867:
	.word	gContestMons
	.word	gContestPlayerMonIndex
	.word	gPlayerParty
	.word	0x7ff
	.word	-0x800
	.word	gLinkContestFlags
.L850:
	ldr	r0, .L869
	cmp	r2, r0
	bne	.L852	@cond_branch
	lsl	r0, r5, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r5, r0, #0x10
	b	.L851
.L870:
	.align	2, 0
.L869:
	.word	0x189
.L852:
	mov	r0, #0xc5
	lsl	r0, r0, #0x1
	cmp	r2, r0
	bne	.L854	@cond_branch
	lsl	r0, r6, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r6, r0, #0x10
	b	.L851
.L854:
	ldr	r0, .L871
	cmp	r2, r0
	bne	.L856	@cond_branch
	lsl	r0, r7, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r7, r0, #0x10
	b	.L851
.L872:
	.align	2, 0
.L871:
	.word	0x18b
.L856:
	mov	r0, #0xc6
	lsl	r0, r0, #0x1
	cmp	r2, r0
	bne	.L851	@cond_branch
	lsl	r0, r4, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r4, r0, #0x10
.L851:
	cmp	r3, #0xff
	ble	.L859	@cond_branch
	mov	r3, #0xff
.L859:
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L860	@cond_branch
	mov	r5, #0xff
.L860:
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L861	@cond_branch
	mov	r6, #0xff
.L861:
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L862	@cond_branch
	mov	r7, #0xff
.L862:
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L863	@cond_branch
	mov	r4, #0xff
.L863:
	ldr	r2, .L873
	ldr	r1, .L873+0x4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x6
	add	r0, r0, r2
	add	r0, r0, #0x26
	strb	r3, [r0]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x6
	add	r0, r0, r2
	add	r0, r0, #0x27
	strb	r5, [r0]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x6
	add	r0, r0, r2
	add	r0, r0, #0x28
	strb	r6, [r0]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x6
	add	r0, r0, r2
	add	r0, r0, #0x29
	strb	r7, [r0]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x6
	add	r0, r0, r2
	add	r0, r0, #0x2a
	strb	r4, [r0]
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L874:
	.align	2, 0
.L873:
	.word	gContestMons
	.word	gContestPlayerMonIndex
.Lfe61:
	.size	 CreateContestMonFromParty,.Lfe61-CreateContestMonFromParty
	.align	2, 0
	.globl	SetContestants
	.type	 SetContestants,function
	.thumb_func
SetContestants:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x64
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r6, #0x0
	mov	r7, #0x0
	bl	TryPutPlayerLast
	ldr	r0, .L907
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L876	@cond_branch
	ldr	r0, .L907+0x4
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L876	@cond_branch
	mov	r7, #0x1
.L876:
	mov	r5, #0x0
	ldr	r2, .L907+0x8
	ldr	r3, .L907+0xc
.L880:
	ldrb	r0, [r2, #0x1c]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r8, r0
	bne	.L879	@cond_branch
	cmp	r7, #0x1
	bne	.L882	@cond_branch
	ldrb	r0, [r3]
	cmp	r0, #0x1
	beq	.L879	@cond_branch
	b	.L884
.L908:
	.align	2, 0
.L907:
	.word	0x864
	.word	gLinkContestFlags
	.word	gContestOpponents
	.word	gPostgameContestOpponentFilter
.L882:
	ldrb	r0, [r3]
	cmp	r0, #0x2
	beq	.L879	@cond_branch
.L884:
	cmp	r4, #0
	bne	.L886	@cond_branch
	ldrb	r0, [r2, #0x1c]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L906	@cond_branch
.L886:
	cmp	r4, #0x1
	bne	.L888	@cond_branch
	ldrb	r0, [r2, #0x1c]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	blt	.L906	@cond_branch
.L888:
	cmp	r4, #0x2
	bne	.L890	@cond_branch
	ldrb	r0, [r2, #0x1c]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	blt	.L906	@cond_branch
.L890:
	cmp	r4, #0x3
	bne	.L892	@cond_branch
	ldrb	r0, [r2, #0x1c]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	blt	.L906	@cond_branch
.L892:
	cmp	r4, #0x4
	bne	.L879	@cond_branch
	ldrb	r0, [r2, #0x1c]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	bge	.L879	@cond_branch
.L906:
	add	r0, r6, #0
	add	r1, r0, #0x1
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	add	r0, r0, sp
	strb	r5, [r0]
.L879:
	add	r2, r2, #0x40
	add	r3, r3, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5f
	bls	.L880	@cond_branch
	mov	r0, sp
	add	r1, r0, r6
	mov	r0, #0xff
	strb	r0, [r1]
	mov	r5, #0x0
	ldr	r7, .L909
.L899:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L909+0x4
	lsl	r2, r5, #0x6
	add	r2, r2, r1
	mov	r1, sp
	add	r4, r1, r0
	ldrb	r1, [r4]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r0, r2, #0
	mov	r2, #0x40
	bl	memcpy
	ldrb	r0, [r4]
	add	r2, r5, #0x1
	sub	r1, r6, #0x1
	cmp	r0, #0xff
	beq	.L901	@cond_branch
	add	r3, r4, #0
.L903:
	ldrb	r0, [r3, #0x1]
	strb	r0, [r3]
	add	r3, r3, #0x1
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L903	@cond_branch
.L901:
	lsl	r0, r1, #0x18
	lsr	r6, r0, #0x18
	add	r5, r2, #0
	cmp	r5, #0x2
	ble	.L899	@cond_branch
	ldr	r0, .L909+0x8
	ldrb	r0, [r0]
	bl	CreateContestMonFromParty
	add	sp, sp, #0x64
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L910:
	.align	2, 0
.L909:
	.word	gContestOpponents
	.word	gContestMons
	.word	gContestMonPartyIndex
.Lfe62:
	.size	 SetContestants,.Lfe62-SetContestants
	.align	2, 0
	.globl	SetLinkAIContestants
	.type	 SetLinkAIContestants,function
	.thumb_func
SetLinkAIContestants:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x64
	mov	r8, r2
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	mov	r7, #0x0
	ldr	r0, .L939
	ldrb	r1, [r0]
	mov	r9, r0
	cmp	r1, #0x4
	bne	.LCB8599
	b	.L911	@long jump
.LCB8599:
	mov	r5, #0x0
	ldr	r3, .L939+0x4
	ldr	r6, .L939+0x8
.L916:
	ldrb	r0, [r3, #0x1c]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r2, r0
	bne	.L915	@cond_branch
	mov	r0, r8
	cmp	r0, #0x1
	bne	.L918	@cond_branch
	ldrb	r0, [r6]
	cmp	r0, #0x1
	beq	.L915	@cond_branch
	b	.L920
.L940:
	.align	2, 0
.L939:
	.word	gNumLinkContestPlayers
	.word	gContestOpponents
	.word	gPostgameContestOpponentFilter
.L918:
	ldrb	r0, [r6]
	cmp	r0, #0x2
	beq	.L915	@cond_branch
.L920:
	cmp	r4, #0
	bne	.L924	@cond_branch
	ldrb	r0, [r3, #0x1c]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L923	@cond_branch
.L924:
	cmp	r4, #0x1
	bne	.L925	@cond_branch
	ldrb	r0, [r3, #0x1c]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	blt	.L923	@cond_branch
.L925:
	cmp	r4, #0x2
	bne	.L926	@cond_branch
	ldrb	r0, [r3, #0x1c]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	blt	.L923	@cond_branch
.L926:
	cmp	r4, #0x3
	bne	.L927	@cond_branch
	ldrb	r0, [r3, #0x1c]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	blt	.L923	@cond_branch
.L927:
	cmp	r4, #0x4
	bne	.L915	@cond_branch
	ldrb	r0, [r3, #0x1c]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	bge	.L915	@cond_branch
.L923:
	add	r0, r7, #0
	add	r1, r0, #0x1
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	add	r0, r0, sp
	strb	r5, [r0]
.L915:
	add	r3, r3, #0x40
	add	r6, r6, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5f
	bls	.L916	@cond_branch
	mov	r3, sp
	add	r1, r3, r7
	mov	r0, #0xff
	strb	r0, [r1]
	mov	r5, #0x0
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x4
	sub	r0, r0, r1
	cmp	r5, r0
	bge	.L911	@cond_branch
	ldr	r3, .L941
	mov	r8, r3
	mov	r6, r9
	mov	r0, #0x2
	add	r0, r0, r8
	mov	r9, r0
.L932:
	bl	GetContestRand
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r7, #0
	bl	__modsi3
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldrb	r0, [r6]
	add	r0, r0, r5
	lsl	r0, r0, #0x6
	add	r0, r0, r8
	ldr	r2, .L941+0x4
	mov	r3, sp
	add	r4, r3, r1
	ldrb	r1, [r4]
	lsl	r1, r1, #0x6
	add	r1, r1, r2
	mov	r2, #0x40
	bl	memcpy
	ldrb	r0, [r6]
	add	r0, r0, r5
	lsl	r0, r0, #0x6
	mov	r1, r8
	add	r1, r1, #0xd
	add	r0, r0, r1
	bl	StripPlayerNameForLinkContest
	ldrb	r0, [r6]
	add	r0, r0, r5
	lsl	r0, r0, #0x6
	add	r0, r0, r9
	mov	r1, #0x2
	bl	StripMonNameForLinkContest
	ldrb	r0, [r4]
	add	r3, r5, #0x1
	sub	r1, r7, #0x1
	cmp	r0, #0xff
	beq	.L934	@cond_branch
	add	r2, r4, #0
.L936:
	ldrb	r0, [r2, #0x1]
	strb	r0, [r2]
	add	r2, r2, #0x1
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L936	@cond_branch
.L934:
	lsl	r0, r1, #0x18
	lsr	r7, r0, #0x18
	add	r5, r3, #0
	ldrb	r1, [r6]
	mov	r0, #0x4
	sub	r0, r0, r1
	cmp	r5, r0
	blt	.L932	@cond_branch
.L911:
	add	sp, sp, #0x64
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L942:
	.align	2, 0
.L941:
	.word	gContestMons
	.word	gContestOpponents
.Lfe63:
	.size	 SetLinkAIContestants,.Lfe63-SetLinkAIContestants
	.align	2, 0
	.globl	GetContestEntryEligibility
	.type	 GetContestEntryEligibility,function
	.thumb_func
GetContestEntryEligibility:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	beq	.L944	@cond_branch
	mov	r0, #0x3
	b	.L958
.L944:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.L945	@cond_branch
	mov	r0, #0x4
	b	.L958
.L945:
	ldr	r0, .L960
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L952	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L960+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L961:
	.align	2, 0
.L960:
	.word	gSpecialVar_ContestCategory
	.word	.L953
	.align	2, 0
	.align	2, 0
.L953:
	.word	.L947
	.word	.L948
	.word	.L949
	.word	.L950
	.word	.L951
.L947:
	add	r0, r4, #0
	mov	r1, #0x32
	b	.L959
.L948:
	add	r0, r4, #0
	mov	r1, #0x33
	b	.L959
.L949:
	add	r0, r4, #0
	mov	r1, #0x34
	b	.L959
.L950:
	add	r0, r4, #0
	mov	r1, #0x35
	b	.L959
.L951:
	add	r0, r4, #0
	mov	r1, #0x36
.L959:
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	b	.L946
.L952:
	mov	r0, #0x0
	b	.L958
.L946:
	ldr	r0, .L962
	add	r2, r1, #0
	ldrh	r1, [r0]
	mov	r0, #0x2
	cmp	r2, r1
	bhi	.L958	@cond_branch
	mov	r0, #0x0
	cmp	r2, r1
	bcc	.L958	@cond_branch
	mov	r0, #0x1
.L958:
	pop	{r4}
	pop	{r1}
	bx	r1
.L963:
	.align	2, 0
.L962:
	.word	gSpecialVar_ContestRank
.Lfe64:
	.size	 GetContestEntryEligibility,.Lfe64-GetContestEntryEligibility
	.align	2, 0
	.type	 DrawContestantWindowText,function
	.thumb_func
DrawContestantWindowText:
	push	{r4, r5, lr}
	mov	r5, #0x0
.L968:
	ldr	r0, .L970
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	lsl	r4, r5, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	PrintContestantTrainerName
	add	r0, r4, #0
	bl	PrintContestantMonName
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L968	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L971:
	.align	2, 0
.L970:
	.word	gContestantTurnOrder
.Lfe65:
	.size	 DrawContestantWindowText,.Lfe65-DrawContestantWindowText
	.align	2, 0
	.type	 Contest_CopyStringWithColor,function
	.thumb_func
Contest_CopyStringWithColor:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L973
	ldr	r1, .L973+0x4
	bl	StringCopy
	add	r1, r0, #0
	sub	r0, r1, #0x1
	strb	r4, [r0]
	add	r0, r1, #0
	add	r1, r5, #0
	bl	StringCopy
	add	r1, r0, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L974:
	.align	2, 0
.L973:
	.word	gDisplayedStringBattle
	.word	gText_ColorTransparent
.Lfe66:
	.size	 Contest_CopyStringWithColor,.Lfe66-Contest_CopyStringWithColor
	.align	2, 0
	.type	 PrintContestantTrainerName,function
	.thumb_func
PrintContestantTrainerName:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	mov	r2, #0xa0
	lsl	r2, r2, #0x14
	add	r1, r1, r2
	lsr	r1, r1, #0x18
	bl	PrintContestantTrainerNameWithColor
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 PrintContestantTrainerName,.Lfe67-PrintContestantTrainerName
	.align	2, 0
	.type	 PrintContestantTrainerNameWithColor,function
	.thumb_func
PrintContestantTrainerNameWithColor:
	push	{r4, r5, lr}
	add	sp, sp, #-0x24
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L978
	add	r0, sp, #0x4
	bl	StringCopy
	lsl	r1, r5, #0x6
	ldr	r0, .L978+0x4
	add	r1, r1, r0
	add	r0, sp, #0x4
	bl	StringAppend
	add	r0, sp, #0x4
	add	r1, r4, #0
	bl	Contest_CopyStringWithColor
	ldr	r4, .L978+0x8
	mov	r0, #0x7
	add	r1, r4, #0
	mov	r2, #0x60
	bl	GetStringRightAlignXOffset
	add	r2, r0, #0
	cmp	r2, #0x37
	ble	.L977	@cond_branch
	mov	r2, #0x37
.L977:
	ldr	r0, .L978+0xc
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r1, #0x7
	str	r1, [sp]
	add	r1, r4, #0
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	add	sp, sp, #0x24
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L979:
	.align	2, 0
.L978:
	.word	gText_Slash
	.word	gContestMons+0xd
	.word	gDisplayedStringBattle
	.word	gContestantTurnOrder
.Lfe68:
	.size	 PrintContestantTrainerNameWithColor,.Lfe68-PrintContestantTrainerNameWithColor
	.align	2, 0
	.type	 PrintContestantMonName,function
	.thumb_func
PrintContestantMonName:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	mov	r2, #0xa0
	lsl	r2, r2, #0x14
	add	r1, r1, r2
	lsr	r1, r1, #0x18
	bl	PrintContestantMonNameWithColor
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 PrintContestantMonName,.Lfe69-PrintContestantMonName
	.align	2, 0
	.type	 PrintContestantMonNameWithColor,function
	.thumb_func
PrintContestantMonNameWithColor:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r4, #0x6
	ldr	r2, .L982
	add	r0, r0, r2
	bl	Contest_CopyStringWithColor
	ldr	r0, .L982+0x4
	add	r4, r4, r0
	ldrb	r0, [r4]
	ldr	r1, .L982+0x8
	mov	r2, #0x7
	str	r2, [sp]
	mov	r2, #0x5
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L983:
	.align	2, 0
.L982:
	.word	gContestMons+0x2
	.word	gContestantTurnOrder
	.word	gDisplayedStringBattle
.Lfe70:
	.size	 PrintContestantMonNameWithColor,.Lfe70-PrintContestantMonNameWithColor
	.align	2, 0
	.type	 CalculateContestantRound1Points,function
	.thumb_func
CalculateContestantRound1Points:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	cmp	r0, #0x4
	bhi	.L991	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L995
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L996:
	.align	2, 0
.L995:
	.word	.L992
	.align	2, 0
	.align	2, 0
.L992:
	.word	.L986
	.word	.L987
	.word	.L988
	.word	.L989
	.word	.L991
.L986:
	ldr	r0, .L997
	lsl	r2, r2, #0x6
	add	r1, r2, r0
	add	r3, r1, #0
	add	r3, r3, #0x26
	ldrb	r5, [r3]
	add	r3, r3, #0x4
	ldrb	r4, [r3]
	add	r1, r1, #0x27
	b	.L993
.L998:
	.align	2, 0
.L997:
	.word	gContestMons
.L987:
	ldr	r0, .L999
	lsl	r2, r2, #0x6
	add	r1, r2, r0
	add	r3, r1, #0
	add	r3, r3, #0x27
	ldrb	r5, [r3]
	sub	r3, r3, #0x1
	ldrb	r4, [r3]
	add	r1, r1, #0x28
	b	.L993
.L1000:
	.align	2, 0
.L999:
	.word	gContestMons
.L988:
	ldr	r1, .L1001
	lsl	r2, r2, #0x6
	add	r3, r2, r1
	add	r0, r3, #0
	add	r0, r0, #0x28
	b	.L994
.L1002:
	.align	2, 0
.L1001:
	.word	gContestMons
.L989:
	ldr	r1, .L1003
	lsl	r2, r2, #0x6
	add	r3, r2, r1
	add	r0, r3, #0
	add	r0, r0, #0x29
.L994:
	ldrb	r5, [r0]
	sub	r0, r0, #0x1
	ldrb	r4, [r0]
	add	r0, r0, #0x2
	ldrb	r3, [r0]
	add	r0, r1, #0
	b	.L985
.L1004:
	.align	2, 0
.L1003:
	.word	gContestMons
.L991:
	ldr	r0, .L1005
	lsl	r2, r2, #0x6
	add	r1, r2, r0
	add	r3, r1, #0
	add	r3, r3, #0x2a
	ldrb	r5, [r3]
	sub	r3, r3, #0x1
	ldrb	r4, [r3]
	add	r1, r1, #0x26
.L993:
	ldrb	r3, [r1]
.L985:
	add	r1, r2, r0
	add	r1, r1, #0x2b
	add	r0, r4, r3
	ldrb	r1, [r1]
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1006:
	.align	2, 0
.L1005:
	.word	gContestMons
.Lfe71:
	.size	 CalculateContestantRound1Points,.Lfe71-CalculateContestantRound1Points
	.align	2, 0
	.globl	CalculateRound1Points
	.type	 CalculateRound1Points,function
	.thumb_func
CalculateRound1Points:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
	ldr	r5, .L1013
.L1011:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	add	r1, r6, #0
	bl	CalculateContestantRound1Points
	strh	r0, [r5]
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1011	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1014:
	.align	2, 0
.L1013:
	.word	gContestMonRound1Points
.Lfe72:
	.size	 CalculateRound1Points,.Lfe72-CalculateRound1Points
	.align	2, 0
	.type	 CreateJudgeSprite,function
	.thumb_func
CreateJudgeSprite:
	push	{r4, r5, lr}
	ldr	r0, .L1016
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L1016+0x4
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r0, .L1016+0x8
	mov	r1, #0x70
	mov	r2, #0x24
	mov	r3, #0x1e
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L1016+0xc
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r5, r2, r4
	ldrb	r3, [r5, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	mov	r3, #0x10
	orr	r1, r1, r3
	strb	r1, [r5, #0x5]
	add	r4, r4, #0x1c
	add	r2, r2, r4
	ldr	r1, .L1016+0x10
	str	r1, [r2]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1017:
	.align	2, 0
.L1016:
	.word	sSpriteSheet_Judge
	.word	gContest2Pal
	.word	sSpriteTemplate_Judge
	.word	gSprites
	.word	SpriteCallbackDummy
.Lfe73:
	.size	 CreateJudgeSprite,.Lfe73-CreateJudgeSprite
	.align	2, 0
	.type	 CreateJudgeSpeechBubbleSprite,function
	.thumb_func
CreateJudgeSpeechBubbleSprite:
	push	{lr}
	ldr	r0, .L1019
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L1019+0x4
	bl	LoadCompressedSpritePalette
	ldr	r0, .L1019+0x8
	mov	r1, #0x60
	mov	r2, #0xa
	mov	r3, #0x1d
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1019+0xc
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	mov	r1, #0x3e
	add	r1, r1, r2
	mov	ip, r1
	ldrb	r1, [r1]
	mov	r3, #0x4
	orr	r1, r1, r3
	mov	r3, ip
	strb	r1, [r3]
	ldrh	r1, [r2, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	strh	r1, [r2, #0x2e]
	pop	{r1}
	bx	r1
.L1020:
	.align	2, 0
.L1019:
	.word	sSpriteSheet_JudgeSymbols
	.word	sSpritePalette_JudgeSymbols
	.word	sSpriteTemplate_JudgeSpeechBubble
	.word	gSprites
.Lfe74:
	.size	 CreateJudgeSpeechBubbleSprite,.Lfe74-CreateJudgeSpeechBubbleSprite
	.align	2, 0
	.type	 CreateContestantSprite,function
	.thumb_func
CreateContestantSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r9, r1
	mov	r8, r2
	ldr	r5, [sp, #0x24]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	bl	SanitizeSpecies
	mov	r1, sp
	strh	r0, [r1]
	mov	sl, r0
	mov	r0, sl
	add	r1, r5, #0
	bl	GetFormSpeciesId
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r4, #0x3
	ldr	r1, .L1025
	add	r0, r0, r1
	ldr	r1, .L1025+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
	add	r2, r4, #0
	mov	r3, r8
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
	add	r0, r4, #0
	mov	r1, r9
	mov	r2, r8
	bl	GetMonSpritePalFromSpeciesAndPersonality
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	mov	r2, #0x20
	bl	LoadCompressedPalette
	mov	r0, sl
	mov	r1, #0x0
	add	r2, r5, #0
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r4, .L1025+0x8
	mov	r0, #0x2
	mov	r1, sl
	mov	r2, #0x0
	bl	GetBattlerSpriteFinal_Y
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	mov	r1, #0x70
	mov	r3, #0x1e
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r6, .L1025+0xc
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r5, r0, #0x2
	add	r4, r5, r6
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	mov	r1, #0x20
	orr	r0, r0, r1
	mov	r1, #0xd
	neg	r1, r1
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	mov	r0, #0x2
	bl	GetBattlerSpriteSubpriority
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	add	r0, r6, #0
	add	r0, r0, #0x1c
	add	r0, r5, r0
	ldr	r1, .L1025+0x10
	str	r1, [r0]
	ldrb	r0, [r4, #0x5]
	lsr	r0, r0, #0x4
	strh	r0, [r4, #0x2e]
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4, #0x32]
	mov	r0, sl
	bl	IsSpeciesNotUnown
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1022	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0x10
	add	r0, r5, r0
	ldr	r1, .L1025+0x14
	b	.L1024
.L1026:
	.align	2, 0
.L1025:
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
	.word	gMultiuseSpriteTemplate
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	gUnknown_082FF6C0
.L1022:
	add	r0, r6, #0
	add	r0, r0, #0x10
	add	r0, r5, r0
	ldr	r1, .L1027
.L1024:
	str	r1, [r0]
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	ldr	r1, .L1027+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	add	r0, r7, #0
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1028:
	.align	2, 0
.L1027:
	.word	gUnknown_082FF694
	.word	gSprites
.Lfe75:
	.size	 CreateContestantSprite,.Lfe75-CreateContestantSprite
	.align	2, 0
	.globl	IsSpeciesNotUnown
	.type	 IsSpeciesNotUnown,function
	.thumb_func
IsSpeciesNotUnown:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xc9
	beq	.L1030	@cond_branch
	mov	r0, #0x1
	b	.L1032
.L1030:
	mov	r0, #0x0
.L1032:
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 IsSpeciesNotUnown,.Lfe76-IsSpeciesNotUnown
	.align	2, 0
	.type	 SwapMoveDescAndContestTilemaps,function
	.thumb_func
SwapMoveDescAndContestTilemaps:
	push	{r4, r5, r6, lr}
	ldr	r5, .L1034
	ldr	r0, [r5]
	ldr	r0, [r0, #0x24]
	mov	r4, #0xa0
	lsl	r4, r4, #0x3
	add	r1, r0, r4
	mov	r6, #0xa0
	lsl	r6, r6, #0x1
	add	r2, r6, #0
	bl	CpuSet
	ldr	r0, [r5]
	ldr	r0, [r0, #0x2c]
	add	r4, r0, r4
	add	r1, r4, #0
	add	r2, r6, #0
	bl	CpuSet
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1035:
	.align	2, 0
.L1034:
	.word	gContestResources
.Lfe77:
	.size	 SwapMoveDescAndContestTilemaps,.Lfe77-SwapMoveDescAndContestTilemaps
	.align	2, 0
	.type	 GetMoveEffectSymbolTileOffset,function
	.thumb_func
GetMoveEffectSymbolTileOffset:
	push	{lr}
	lsl	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	ldr	r2, .L1045
	ldr	r1, .L1045+0x4
	lsr	r0, r0, #0xd
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bhi	.L1043	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1045+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1046:
	.align	2, 0
.L1045:
	.word	gContestEffects
	.word	gContestMoves
	.word	.L1044
	.align	2, 0
	.align	2, 0
.L1044:
	.word	.L1040
	.word	.L1040
	.word	.L1042
	.word	.L1042
	.word	.L1043
	.word	.L1043
	.word	.L1043
	.word	.L1043
	.word	.L1040
.L1040:
	ldr	r0, .L1047
	b	.L1037
.L1048:
	.align	2, 0
.L1047:
	.word	0x9082
.L1042:
	ldr	r0, .L1049
	b	.L1037
.L1050:
	.align	2, 0
.L1049:
	.word	0x9088
.L1043:
	ldr	r0, .L1051
.L1037:
	lsl	r1, r3, #0xc
	mov	r2, #0x90
	lsl	r2, r2, #0x8
	add	r1, r1, r2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L1052:
	.align	2, 0
.L1051:
	.word	0x9086
.Lfe78:
	.size	 GetMoveEffectSymbolTileOffset,.Lfe78-GetMoveEffectSymbolTileOffset
	.align	2, 0
	.type	 PrintContestMoveDescription,function
	.thumb_func
PrintContestMoveDescription:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r1, .L1068
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	ldr	r7, .L1068+0x4
	cmp	r0, #0
	beq	.L1055	@cond_branch
	add	r7, r7, #0x5
	cmp	r0, #0x1
	beq	.L1055	@cond_branch
	add	r7, r7, #0x5
	cmp	r0, #0x2
	beq	.L1055	@cond_branch
	add	r7, r7, #0x40
	cmp	r0, #0x3
	bne	.L1055	@cond_branch
	sub	r7, r7, #0x20
.L1055:
	mov	r6, #0x5
	str	r6, [sp]
	mov	r4, #0x1
	str	r4, [sp, #0x4]
	mov	r5, #0x11
	str	r5, [sp, #0x8]
	str	r4, [sp, #0xc]
	mov	r0, #0x0
	add	r1, r7, #0
	mov	r2, #0xb
	mov	r3, #0x1f
	bl	ContestBG_FillBoxWithIncrementingTile
	add	r1, r7, #0
	add	r1, r1, #0x10
	str	r6, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r4, [sp, #0xc]
	mov	r0, #0x0
	mov	r2, #0xb
	mov	r3, #0x20
	bl	ContestBG_FillBoxWithIncrementingTile
	ldr	r2, .L1068+0x8
	ldr	r0, .L1068
	mov	r3, r8
	lsl	r1, r3, #0x3
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x1]
	add	r7, r1, #0
	cmp	r0, #0xff
	bne	.L1062	@cond_branch
	mov	r6, #0x0
	b	.L1063
.L1069:
	.align	2, 0
.L1068:
	.word	gContestMoves
	.word	0x4040
	.word	gContestEffects
.L1062:
	ldrb	r0, [r2, #0x1]
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L1063:
	cmp	r6, #0x8
	bls	.L1064	@cond_branch
	mov	r6, #0x8
.L1064:
	ldr	r1, .L1070
	mov	r0, #0x8
	str	r0, [sp]
	mov	r5, #0x1
	str	r5, [sp, #0x4]
	mov	r4, #0x11
	str	r4, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x15
	mov	r3, #0x1f
	bl	ContestBG_FillBoxWithTile
	ldr	r1, .L1070+0x4
	str	r6, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x15
	mov	r3, #0x1f
	bl	ContestBG_FillBoxWithTile
	ldr	r1, .L1070+0x8
	ldr	r0, .L1070+0xc
	add	r0, r7, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0xff
	bne	.L1065	@cond_branch
	mov	r6, #0x0
	b	.L1066
.L1071:
	.align	2, 0
.L1070:
	.word	0x5035
	.word	0x5012
	.word	gContestEffects
	.word	gContestMoves
.L1065:
	ldrb	r0, [r1, #0x2]
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L1066:
	cmp	r6, #0x8
	bls	.L1067	@cond_branch
	mov	r6, #0x8
.L1067:
	ldr	r1, .L1072
	mov	r0, #0x8
	str	r0, [sp]
	mov	r5, #0x1
	str	r5, [sp, #0x4]
	mov	r4, #0x11
	str	r4, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x15
	mov	r3, #0x20
	bl	ContestBG_FillBoxWithTile
	ldr	r1, .L1072+0x4
	str	r6, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x15
	mov	r3, #0x20
	bl	ContestBG_FillBoxWithTile
	mov	r0, #0xa
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldr	r1, .L1072+0x8
	ldr	r0, .L1072+0xc
	add	r0, r7, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0xa
	bl	Contest_PrintTextToBg0WindowStd
	ldr	r1, .L1072+0x10
	mov	r0, #0x9
	bl	Contest_PrintTextToBg0WindowStd
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1073:
	.align	2, 0
.L1072:
	.word	0x5036
	.word	0x5014
	.word	gContestEffectDescriptionPointers
	.word	gContestMoves
	.word	gText_Slash
.Lfe79:
	.size	 PrintContestMoveDescription,.Lfe79-PrintContestMoveDescription
	.align	2, 0
	.type	 DrawMoveEffectSymbol,function
	.thumb_func
DrawMoveEffectSymbol:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	ldr	r0, .L1077
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r4, #0
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1075	@cond_branch
	cmp	r5, #0
	beq	.L1075	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetMoveEffectSymbolTileOffset
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x2
	mov	r8, r0
	str	r0, [sp]
	mov	r5, #0x1
	str	r5, [sp, #0x4]
	mov	r6, #0x11
	str	r6, [sp, #0x8]
	str	r5, [sp, #0xc]
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x14
	add	r3, r7, #0
	bl	ContestBG_FillBoxWithIncrementingTile
	add	r4, r4, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r3, r7, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	str	r5, [sp, #0xc]
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x14
	bl	ContestBG_FillBoxWithIncrementingTile
	b	.L1076
.L1078:
	.align	2, 0
.L1077:
	.word	gContestantTurnOrder
.L1075:
	mov	r0, #0x2
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x14
	add	r3, r7, #0
	bl	ContestBG_FillBoxWithTile
.L1076:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 DrawMoveEffectSymbol,.Lfe80-DrawMoveEffectSymbol
	.align	2, 0
	.type	 DrawMoveEffectSymbols,function
	.thumb_func
DrawMoveEffectSymbols:
	push	{r4, r5, lr}
	mov	r4, #0x0
	mov	r5, #0x0
.L1083:
	ldr	r0, .L1085
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	add	r0, r5, r0
	ldrh	r0, [r0, #0x6]
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	bl	DrawMoveEffectSymbol
	add	r5, r5, #0x1c
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1083	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1086:
	.align	2, 0
.L1085:
	.word	gContestResources
.Lfe81:
	.size	 DrawMoveEffectSymbols,.Lfe81-DrawMoveEffectSymbols
	.align	2, 0
	.type	 GetStarTileOffset,function
	.thumb_func
GetStarTileOffset:
	ldr	r0, .L1088
	bx	lr
.L1089:
	.align	2, 0
.L1088:
	.word	0x2034
.Lfe82:
	.size	 GetStarTileOffset,.Lfe82-GetStarTileOffset
	.align	2, 0
	.type	 UpdateConditionStars,function
	.thumb_func
UpdateConditionStars:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	sl, r8
	ldr	r0, .L1098
	mov	r9, r0
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r7, r0, #0x2
	add	r3, r7, r1
	ldrb	r0, [r3, #0x10]
	mov	r5, #0x30
	and	r5, r5, r0
	cmp	r5, #0
	bne	.L1091	@cond_branch
	mov	r0, #0x0
	b	.L1096
.L1099:
	.align	2, 0
.L1098:
	.word	gContestResources
.L1091:
	ldr	r0, .L1100
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0xd
	ldrsb	r0, [r3, r0]
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	cmp	r5, #0x10
	bne	.L1092	@cond_branch
	bl	GetStarTileOffset
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	str	r0, [sp]
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x13
	add	r3, r6, #0
	bl	ContestBG_FillBoxWithTile
	mov	r1, r8
	cmp	r1, #0
	beq	.L1094	@cond_branch
	mov	r0, #0x5b
	b	.L1097
.L1101:
	.align	2, 0
.L1100:
	.word	gContestantTurnOrder
.L1092:
	add	r3, r6, r4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x13
	bl	ContestBG_FillBoxWithTile
	mov	r0, sl
	cmp	r0, #0
	beq	.L1094	@cond_branch
	mov	r0, #0x26
.L1097:
	bl	PlaySE
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, [r0, #0x4]
	add	r1, r7, r1
	ldrb	r2, [r1, #0x10]
	mov	r0, #0x31
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
.L1094:
	mov	r0, #0x1
.L1096:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe83:
	.size	 UpdateConditionStars,.Lfe83-UpdateConditionStars
	.align	2, 0
	.type	 DrawConditionStars,function
	.thumb_func
DrawConditionStars:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r7, #0x0
	mov	r0, #0x1
	mov	sl, r0
	mov	r1, #0x11
	mov	r9, r1
	mov	r0, #0x0
	mov	r8, r0
.L1106:
	ldr	r0, .L1108
	add	r0, r7, r0
	ldrb	r0, [r0]
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	add	r4, r4, #0x2
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	GetStarTileOffset
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r0, .L1108+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	add	r0, r0, r8
	ldrb	r0, [r0, #0xd]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x18
	mov	r1, sl
	str	r1, [sp]
	asr	r6, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, r9
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r2, #0x13
	add	r3, r4, #0
	bl	ContestBG_FillBoxWithTile
	add	r4, r4, r6
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, sl
	str	r1, [sp]
	mov	r0, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, r9
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x13
	add	r3, r4, #0
	bl	ContestBG_FillBoxWithTile
	mov	r1, #0x1c
	add	r8, r8, r1
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L1106	@cond_branch
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1109:
	.align	2, 0
.L1108:
	.word	gContestantTurnOrder
	.word	gContestResources
.Lfe84:
	.size	 DrawConditionStars,.Lfe84-DrawConditionStars
	.align	2, 0
	.type	 GetStatusSymbolTileOffset,function
	.thumb_func
GetStatusSymbolTileOffset:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x0
	cmp	r1, #0x4
	bhi	.L1111	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L1119
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1120:
	.align	2, 0
.L1119:
	.word	.L1117
	.align	2, 0
	.align	2, 0
.L1117:
	.word	.L1112
	.word	.L1113
	.word	.L1114
	.word	.L1115
	.word	.L1116
.L1112:
	mov	r0, #0x80
	b	.L1111
.L1113:
	mov	r0, #0x84
	b	.L1111
.L1114:
	mov	r0, #0x86
	b	.L1111
.L1115:
	mov	r0, #0x88
	b	.L1111
.L1116:
	mov	r0, #0x82
.L1111:
	mov	r1, #0x90
	lsl	r1, r1, #0x8
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 GetStatusSymbolTileOffset,.Lfe85-GetStatusSymbolTileOffset
	.align	2, 0
	.type	 DrawStatusSymbol,function
	.thumb_func
DrawStatusSymbol:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	mov	r9, r1
	mov	r1, #0x0
	mov	r8, r1
	ldr	r1, .L1133
	add	r1, r0, r1
	ldrb	r2, [r1]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x2
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r1, .L1133+0x4
	ldr	r1, [r1]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldr	r0, [r2, #0x10]
	ldr	r1, .L1133+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1123	@cond_branch
	ldrb	r0, [r2, #0xf]
	cmp	r0, #0
	beq	.L1122	@cond_branch
.L1123:
	mov	r0, #0x0
	b	.L1132
.L1134:
	.align	2, 0
.L1133:
	.word	gContestantTurnOrder
	.word	gContestResources
	.word	0xff0003
.L1122:
	ldrb	r1, [r2, #0xc]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1125	@cond_branch
	mov	r0, #0x1
	b	.L1132
.L1125:
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1128	@cond_branch
	ldrb	r1, [r2, #0xb]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1127	@cond_branch
.L1128:
	mov	r0, #0x2
.L1132:
	bl	GetStatusSymbolTileOffset
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	b	.L1124
.L1127:
	mov	r0, #0x0
	mov	r9, r0
.L1124:
	mov	r1, r9
	cmp	r1, #0
	beq	.L1130	@cond_branch
	mov	r6, #0x2
	str	r6, [sp]
	mov	r4, #0x1
	str	r4, [sp, #0x4]
	mov	r5, #0x11
	str	r5, [sp, #0x8]
	str	r4, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, r8
	mov	r2, #0x14
	add	r3, r7, #0
	bl	ContestBG_FillBoxWithIncrementingTile
	mov	r1, r8
	add	r1, r1, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r3, r7, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r6, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r4, [sp, #0xc]
	mov	r0, #0x0
	mov	r2, #0x14
	bl	ContestBG_FillBoxWithIncrementingTile
	b	.L1131
.L1130:
	mov	r0, #0x2
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x14
	add	r3, r7, #0
	bl	ContestBG_FillBoxWithTile
.L1131:
	mov	r0, r9
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe86:
	.size	 DrawStatusSymbol,.Lfe86-DrawStatusSymbol
	.align	2, 0
	.type	 DrawStatusSymbols,function
	.thumb_func
DrawStatusSymbols:
	push	{r4, lr}
	mov	r4, #0x0
.L1139:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	DrawStatusSymbol
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1139	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 DrawStatusSymbols,.Lfe87-DrawStatusSymbols
	.align	2, 0
	.type	 ContestClearGeneralTextWindow,function
	.thumb_func
ContestClearGeneralTextWindow:
	push	{lr}
	mov	r0, #0x4
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x4
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x0
	bl	Contest_SetBgCopyFlags
	pop	{r0}
	bx	r0
.Lfe88:
	.size	 ContestClearGeneralTextWindow,.Lfe88-ContestClearGeneralTextWindow
	.align	2, 0
	.type	 GetChosenMove,function
	.thumb_func
GetChosenMove:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	add	r0, r4, #0
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1143	@cond_branch
	mov	r0, #0x0
	b	.L1146
.L1143:
	ldr	r0, .L1149
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L1144	@cond_branch
	add	r0, r4, #0
	bl	ContestAI_ResetAI
	bl	ContestAI_GetActionToUse
	lsl	r0, r0, #0x18
	ldr	r2, .L1149+0x4
	lsr	r0, r0, #0x17
	lsl	r1, r4, #0x6
	b	.L1148
.L1150:
	.align	2, 0
.L1149:
	.word	gContestPlayerMonIndex
	.word	gContestMons
.L1144:
	ldr	r2, .L1151
	ldr	r0, .L1151+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	lsl	r1, r5, #0x6
.L1148:
	add	r0, r0, r1
	add	r2, r2, #0x1e
	add	r0, r0, r2
	ldrh	r0, [r0]
.L1146:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1152:
	.align	2, 0
.L1151:
	.word	gContestMons
	.word	gContestResources
.Lfe89:
	.size	 GetChosenMove,.Lfe89-GetChosenMove
	.align	2, 0
	.type	 GetAllChosenMoves,function
	.thumb_func
GetAllChosenMoves:
	push	{r4, r5, lr}
	mov	r4, #0x0
	mov	r5, #0x0
.L1157:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetChosenMove
	ldr	r1, .L1159
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
	add	r1, r5, r1
	strh	r0, [r1, #0x6]
	add	r5, r5, #0x1c
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1157	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1160:
	.align	2, 0
.L1159:
	.word	gContestResources
.Lfe90:
	.size	 GetAllChosenMoves,.Lfe90-GetAllChosenMoves
	.align	2, 0
	.type	 RankContestants,function
	.thumb_func
RankContestants:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	ldr	r5, .L1189
	mov	r4, sp
	mov	r3, #0x0
	mov	r6, #0x3
.L1165:
	ldr	r2, [r5]
	ldr	r1, [r2, #0x4]
	add	r1, r3, r1
	ldrh	r0, [r1, #0x2]
	ldrh	r7, [r1, #0x4]
	add	r0, r0, r7
	strh	r0, [r1, #0x4]
	ldr	r0, [r2, #0x4]
	add	r0, r3, r0
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4]
	add	r4, r4, #0x2
	add	r3, r3, #0x1c
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L1165	@cond_branch
	mov	r6, #0x0
.L1170:
	mov	r4, #0x3
	cmp	r4, r6
	ble	.L1169	@cond_branch
.L1174:
	sub	r5, r4, #0x1
	lsl	r0, r5, #0x1
	mov	r1, sp
	add	r3, r1, r0
	lsl	r0, r4, #0x1
	add	r2, r1, r0
	ldrh	r4, [r3]
	mov	r7, #0x0
	ldrsh	r1, [r3, r7]
	mov	r7, #0x0
	ldrsh	r0, [r2, r7]
	cmp	r1, r0
	bge	.L1173	@cond_branch
	ldrh	r0, [r2]
	strh	r4, [r2]
	strh	r0, [r3]
.L1173:
	add	r4, r5, #0
	cmp	r4, r6
	bgt	.L1174	@cond_branch
.L1169:
	add	r6, r6, #0x1
	cmp	r6, #0x2
	ble	.L1170	@cond_branch
	mov	r6, #0x0
	mov	r0, #0x4
	neg	r0, r0
	mov	r9, r0
	ldr	r1, .L1189
	mov	r8, r1
	mov	r7, #0x3
	mov	ip, r7
.L1181:
	mov	r4, #0x0
	lsl	r0, r6, #0x3
	add	r7, r6, #0x1
	sub	r0, r0, r6
	lsl	r5, r0, #0x2
	mov	r3, sp
.L1185:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r2, r5, r0
	mov	r6, #0x4
	ldrsh	r1, [r2, r6]
	mov	r6, #0x0
	ldrsh	r0, [r3, r6]
	cmp	r1, r0
	bne	.L1184	@cond_branch
	mov	r0, ip
	and	r4, r4, r0
	ldrb	r1, [r2, #0xb]
	mov	r0, r9
	and	r0, r0, r1
	orr	r0, r0, r4
	strb	r0, [r2, #0xb]
	b	.L1180
.L1190:
	.align	2, 0
.L1189:
	.word	gContestResources
.L1184:
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1185	@cond_branch
.L1180:
	add	r6, r7, #0
	cmp	r6, #0x3
	ble	.L1181	@cond_branch
	mov	r0, #0x1
	bl	SortContestants
	bl	ApplyNextTurnOrder
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 RankContestants,.Lfe91-RankContestants
	.align	2, 0
	.type	 SetAttentionLevels,function
	.thumb_func
SetAttentionLevels:
	push	{r4, r5, lr}
	ldr	r4, .L1207
	mov	r2, #0x0
	mov	r3, #0x3
.L1195:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r1, r2, r0
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0
	bne	.L1196	@cond_branch
	mov	r1, #0x5
	b	.L1197
.L1208:
	.align	2, 0
.L1207:
	.word	gContestResources
.L1196:
	mov	r5, #0x2
	ldrsh	r0, [r1, r5]
	mov	r1, #0x0
	cmp	r0, #0
	ble	.L1197	@cond_branch
	mov	r1, #0x1
	cmp	r0, #0x1d
	ble	.L1197	@cond_branch
	mov	r1, #0x2
	cmp	r0, #0x3b
	ble	.L1197	@cond_branch
	mov	r1, #0x4
	cmp	r0, #0x4f
	bgt	.L1197	@cond_branch
	mov	r1, #0x3
.L1197:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r0, r2, r0
	strb	r1, [r0, #0x1a]
	add	r2, r2, #0x1c
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L1195	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe92:
	.size	 SetAttentionLevels,.Lfe92-SetAttentionLevels
	.align	2, 0
	.type	 ContestantCanUseTurn,function
	.thumb_func
ContestantCanUseTurn:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1214
	ldr	r1, [r1]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r1, [r2, #0xc]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1211	@cond_branch
	ldrb	r1, [r2, #0xb]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1210	@cond_branch
.L1211:
	mov	r0, #0x0
	b	.L1213
.L1215:
	.align	2, 0
.L1214:
	.word	gContestResources
.L1210:
	mov	r0, #0x1
.L1213:
	pop	{r1}
	bx	r1
.Lfe93:
	.size	 ContestantCanUseTurn,.Lfe93-ContestantCanUseTurn
	.align	2, 0
	.type	 SetContestantStatusesForNextRound,function
	.thumb_func
SetContestantStatusesForNextRound:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r5, .L1230
	mov	r0, #0x0
	mov	r8, r0
	mov	r1, #0x7
	neg	r1, r1
	mov	sl, r1
	mov	r0, #0x2
	neg	r0, r0
	mov	r9, r0
	mov	r4, #0x0
	mov	r6, #0x3
.L1220:
	ldr	r1, [r5]
	ldr	r0, [r1, #0x4]
	add	r0, r4, r0
	mov	r2, #0x0
	strh	r2, [r0, #0x2]
	ldr	r0, [r1, #0x4]
	add	r0, r4, r0
	strh	r2, [r0]
	ldr	r0, [r1, #0x4]
	add	r0, r4, r0
	mov	r1, r8
	strb	r1, [r0, #0x12]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r3, r4, r0
	ldrb	r2, [r3, #0xc]
	mov	r0, #0x6
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1221	@cond_branch
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1e
	sub	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, sl
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xc]
.L1221:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	mov	r1, r8
	strb	r1, [r0, #0xe]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x10]
	mov	r0, r9
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	mov	r1, r8
	strb	r1, [r0, #0xf]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x10]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x10]
	mov	r7, #0x5
	neg	r7, r7
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x10]
	mov	r0, #0x9
	neg	r0, r0
	mov	ip, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0xc]
	mov	r0, r9
	and	r0, r0, r2
	strb	r0, [r1, #0xc]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	mov	r1, #0xff
	strb	r1, [r0, #0x13]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0, #0x14]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x10]
	mov	r0, #0x31
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
	ldr	r0, [r5]
	ldr	r2, [r0, #0x4]
	add	r2, r4, r2
	ldrb	r3, [r2, #0x15]
	lsl	r1, r3, #0x1f
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x2
	add	r0, r7, #0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x15]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x15]
	mov	r0, r9
	and	r0, r0, r2
	strb	r0, [r1, #0x15]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x11]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x11]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r2, r4, r0
	ldrb	r1, [r2, #0x11]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1222	@cond_branch
	ldrb	r1, [r2, #0xc]
	mov	r0, sl
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0xc]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x11]
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
.L1222:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r2, r4, r0
	ldrb	r1, [r2, #0x11]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1223	@cond_branch
	ldrb	r0, [r2, #0xb]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0xb]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x11]
	mov	r0, ip
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
.L1223:
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x11]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
	add	r4, r4, #0x1c
	sub	r6, r6, #0x1
	cmp	r6, #0
	blt	.LCB11255
	b	.L1220	@long jump
.LCB11255:
	mov	r6, #0x0
	ldr	r5, .L1230
	mov	r7, #0x0
	mov	r4, #0x0
.L1228:
	ldr	r3, [r5]
	ldr	r0, [r3, #0x4]
	add	r0, r4, r0
	ldrh	r1, [r0, #0x6]
	strh	r1, [r0, #0x8]
	ldr	r2, [r3]
	lsl	r1, r6, #0x1
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r2, r2, #0x1c
	add	r2, r2, r1
	ldr	r0, [r3, #0x4]
	add	r0, r4, r0
	ldrh	r0, [r0, #0x6]
	strh	r0, [r2]
	ldr	r0, [r3, #0x4]
	add	r0, r4, r0
	ldrh	r0, [r0, #0x6]
	bl	Contest_GetMoveExcitement
	ldr	r1, [r5]
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x2
	add	r1, r6, r1
	add	r2, r2, #0x44
	add	r2, r2, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	strh	r7, [r0, #0x6]
	add	r4, r4, #0x1c
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L1228	@cond_branch
	ldr	r0, .L1230
	ldr	r0, [r0]
	ldr	r2, [r0, #0x10]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1231:
	.align	2, 0
.L1230:
	.word	gContestResources
.Lfe94:
	.size	 SetContestantStatusesForNextRound,.Lfe94-SetContestantStatusesForNextRound
	.align	2, 0
	.globl	Contest_IsMonsTurnDisabled
	.type	 Contest_IsMonsTurnDisabled,function
	.thumb_func
Contest_IsMonsTurnDisabled:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1237
	ldr	r1, [r1]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r1, [r2, #0xc]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1234	@cond_branch
	ldrb	r1, [r2, #0xb]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1233	@cond_branch
.L1234:
	mov	r0, #0x1
	b	.L1236
.L1238:
	.align	2, 0
.L1237:
	.word	gContestResources
.L1233:
	mov	r0, #0x0
.L1236:
	pop	{r1}
	bx	r1
.Lfe95:
	.size	 Contest_IsMonsTurnDisabled,.Lfe95-Contest_IsMonsTurnDisabled
	.align	2, 0
	.type	 CalculateTotalPointsForContestant,function
	.thumb_func
CalculateTotalPointsForContestant:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetContestantRound2Points
	ldr	r1, .L1240
	lsl	r4, r4, #0x1
	add	r1, r4, r1
	strh	r0, [r1]
	ldr	r2, .L1240+0x4
	add	r2, r4, r2
	ldr	r1, .L1240+0x8
	add	r4, r4, r1
	ldrh	r4, [r4]
	add	r0, r0, r4
	strh	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1241:
	.align	2, 0
.L1240:
	.word	gContestMonRound2Points
	.word	gContestMonTotalPoints
	.word	gContestMonRound1Points
.Lfe96:
	.size	 CalculateTotalPointsForContestant,.Lfe96-CalculateTotalPointsForContestant
	.align	2, 0
	.type	 CalculateFinalScores,function
	.thumb_func
CalculateFinalScores:
	push	{r4, lr}
	mov	r4, #0x0
.L1246:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	CalculateTotalPointsForContestant
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1246	@cond_branch
	bl	DetermineFinalStandings
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe97:
	.size	 CalculateFinalScores,.Lfe97-CalculateFinalScores
	.align	2, 0
	.type	 GetContestantRound2Points,function
	.thumb_func
GetContestantRound2Points:
	lsl	r0, r0, #0x18
	ldr	r1, .L1249
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	lsl	r0, r0, #0x11
	asr	r0, r0, #0x10
	bx	lr
.L1250:
	.align	2, 0
.L1249:
	.word	gContestMonAppealPointTotals
.Lfe98:
	.size	 GetContestantRound2Points,.Lfe98-GetContestantRound2Points
	.align	2, 0
	.type	 DetermineFinalStandings,function
	.thumb_func
DetermineFinalStandings:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x70
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, sp
	add	r1, r1, #0x8
	str	r1, [sp, #0x64]
	mov	r3, sp
	add	r3, r3, #0xc
	str	r3, [sp, #0x68]
	mov	r6, sp
	add	r6, r6, #0x14
	str	r6, [sp, #0x6c]
	mov	r4, sp
.L1255:
	bl	Random
	strh	r0, [r4]
	mov	r2, #0x0
	cmp	r2, r9
	bge	.L1254	@cond_branch
	mov	r1, sp
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L1258	@cond_branch
	sub	r4, r4, #0x2
	mov	r7, #0x1
	neg	r7, r7
	add	r9, r9, r7
	b	.L1254
.L1258:
	add	r2, r2, #0x1
	cmp	r2, r9
	bge	.L1254	@cond_branch
	lsl	r0, r2, #0x1
	mov	r3, sp
	add	r1, r3, r0
	ldrh	r0, [r4]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L1258	@cond_branch
	sub	r4, r4, #0x2
	mov	r6, #0x1
	neg	r6, r6
	add	r9, r9, r6
.L1254:
	add	r4, r4, #0x2
	mov	r7, #0x1
	add	r9, r9, r7
	mov	r0, r9
	cmp	r0, #0x3
	ble	.L1255	@cond_branch
	mov	r1, #0x0
	mov	r9, r1
	mov	r4, sp
	ldr	r6, .L1284
	ldr	r2, [sp, #0x64]
	ldr	r5, .L1284+0x4
	ldr	r3, [sp, #0x68]
.L1266:
	mov	r7, r9
	lsl	r1, r7, #0x4
	mov	r7, #0x0
	ldrsh	r0, [r6, r7]
	str	r0, [r2]
	mov	r7, #0x0
	ldrsh	r0, [r5, r7]
	str	r0, [r3]
	ldrh	r0, [r4]
	str	r0, [r2, #0x8]
	ldr	r0, [sp, #0x6c]
	add	r1, r0, r1
	mov	r7, r9
	str	r7, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x2
	add	r2, r2, #0x10
	add	r5, r5, #0x2
	add	r3, r3, #0x10
	mov	r0, #0x1
	add	r9, r9, r0
	mov	r1, r9
	cmp	r1, #0x3
	ble	.L1266	@cond_branch
	mov	r3, #0x0
	mov	r9, r3
.L1271:
	mov	r4, #0x3
	cmp	r4, r9
	ble	.L1270	@cond_branch
	add	r7, sp, #0x48
	ldr	r6, [sp, #0x68]
	str	r6, [sp, #0x58]
	ldr	r0, [sp, #0x64]
	add	r0, r0, #0x8
	str	r0, [sp, #0x5c]
	ldr	r1, [sp, #0x6c]
	str	r1, [sp, #0x60]
.L1275:
	sub	r3, r4, #0x1
	mov	sl, r3
	mov	r0, sl
	add	r1, r4, #0
	ldr	r2, [sp, #0x64]
	bl	DidContestantPlaceHigher
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1274	@cond_branch
	mov	r6, sl
	lsl	r2, r6, #0x4
	ldr	r0, [sp, #0x64]
	add	r3, r0, r2
	ldr	r0, [r3]
	str	r0, [sp, #0x48]
	ldr	r1, [sp, #0x58]
	add	r6, r1, r2
	ldr	r0, [r6]
	str	r0, [r7, #0x4]
	ldr	r0, [sp, #0x5c]
	add	r0, r0, r2
	mov	r8, r0
	ldr	r0, [r0]
	str	r0, [r7, #0x8]
	ldr	r1, [sp, #0x60]
	add	r2, r1, r2
	ldr	r0, [r2]
	str	r0, [r7, #0xc]
	lsl	r1, r4, #0x4
	ldr	r0, [sp, #0x64]
	add	r5, r0, r1
	ldr	r0, [r5]
	str	r0, [r3]
	ldr	r3, [sp, #0x58]
	add	r4, r3, r1
	ldr	r0, [r4]
	str	r0, [r6]
	ldr	r6, [sp, #0x5c]
	add	r3, r6, r1
	ldr	r0, [r3]
	mov	r6, r8
	str	r0, [r6]
	ldr	r0, [sp, #0x60]
	add	r1, r0, r1
	ldr	r0, [r1]
	str	r0, [r2]
	ldr	r0, [sp, #0x48]
	str	r0, [r5]
	ldr	r0, [r7, #0x4]
	str	r0, [r4]
	ldr	r0, [r7, #0x8]
	str	r0, [r3]
	ldr	r0, [r7, #0xc]
	str	r0, [r1]
.L1274:
	mov	r4, sl
	cmp	r4, r9
	bgt	.L1275	@cond_branch
.L1270:
	mov	r1, #0x1
	add	r9, r9, r1
	mov	r3, r9
	cmp	r3, #0x2
	ble	.L1271	@cond_branch
	mov	r6, #0x0
	mov	r9, r6
	ldr	r2, .L1284+0x8
	ldr	r1, [sp, #0x6c]
.L1282:
	ldr	r0, [r1]
	add	r0, r0, r2
	mov	r7, r9
	strb	r7, [r0]
	add	r1, r1, #0x10
	mov	r0, #0x1
	add	r9, r9, r0
	mov	r3, r9
	cmp	r3, #0x3
	ble	.L1282	@cond_branch
	add	sp, sp, #0x70
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1285:
	.align	2, 0
.L1284:
	.word	gContestMonTotalPoints
	.word	gContestMonRound1Points
	.word	gContestFinalStandings
.Lfe99:
	.size	 DetermineFinalStandings,.Lfe99-DetermineFinalStandings
	.align	2, 0
	.globl	SaveLinkContestResults
	.type	 SaveLinkContestResults,function
	.thumb_func
SaveLinkContestResults:
	push	{lr}
	ldr	r0, .L1289
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1287	@cond_branch
	ldr	r0, .L1289+0x4
	ldr	r2, [r0]
	ldr	r1, .L1289+0x8
	ldr	r0, .L1289+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1
	ldr	r0, .L1289+0x10
	ldrh	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldr	r0, .L1289+0x14
	add	r2, r2, r0
	add	r2, r2, r1
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	ldr	r1, .L1289+0x18
	cmp	r0, r1
	ble	.L1288	@cond_branch
	add	r0, r1, #0
.L1288:
	strh	r0, [r2]
.L1287:
	pop	{r0}
	bx	r0
.L1290:
	.align	2, 0
.L1289:
	.word	gLinkContestFlags
	.word	gSaveBlock2Ptr
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gSpecialVar_ContestCategory
	.word	0x5ac
	.word	0x270f
.Lfe100:
	.size	 SaveLinkContestResults,.Lfe100-SaveLinkContestResults
	.align	2, 0
	.type	 DidContestantPlaceHigher,function
	.thumb_func
DidContestantPlaceHigher:
	push	{lr}
	lsl	r0, r0, #0x4
	add	r0, r0, r2
	lsl	r1, r1, #0x4
	add	r3, r1, r2
	ldr	r2, [r0]
	ldr	r1, [r3]
	cmp	r2, r1
	blt	.L1302	@cond_branch
	cmp	r2, r1
	bgt	.L1303	@cond_branch
	ldr	r2, [r0, #0x4]
	ldr	r1, [r3, #0x4]
	cmp	r2, r1
	blt	.L1302	@cond_branch
	cmp	r2, r1
	ble	.L1298	@cond_branch
.L1303:
	mov	r2, #0x0
	b	.L1293
.L1298:
	ldr	r1, [r0, #0x8]
	ldr	r0, [r3, #0x8]
	mov	r2, #0x0
	cmp	r1, r0
	bge	.L1293	@cond_branch
.L1302:
	mov	r2, #0x1
.L1293:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.Lfe101:
	.size	 DidContestantPlaceHigher,.Lfe101-DidContestantPlaceHigher
	.align	2, 0
	.type	 ContestPrintLinkStandby,function
	.thumb_func
ContestPrintLinkStandby:
	push	{lr}
	ldr	r0, .L1305
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L1305+0x4
	strh	r1, [r0]
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L1305+0x8
	mov	r1, #0x0
	bl	Contest_StartTextPrinter
	pop	{r0}
	bx	r0
.L1306:
	.align	2, 0
.L1305:
	.word	gBattle_BG0_Y
	.word	gBattle_BG2_Y
	.word	gText_LinkStandby4
.Lfe102:
	.size	 ContestPrintLinkStandby,.Lfe102-ContestPrintLinkStandby
	.align	2, 0
	.type	 FillContestantWindowBgs,function
	.thumb_func
FillContestantWindowBgs:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	mov	r5, #0x80
	lsl	r5, r5, #0x12
	mov	r4, #0x3
.L1311:
	lsr	r3, r5, #0x18
	mov	r0, #0x8
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x16
	bl	ContestBG_FillBoxWithTile
	mov	r0, #0xa0
	lsl	r0, r0, #0x13
	add	r5, r5, r0
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L1311	@cond_branch
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe103:
	.size	 FillContestantWindowBgs,.Lfe103-FillContestantWindowBgs
	.align	2, 0
	.type	 GetAppealHeartTileOffset,function
	.thumb_func
GetAppealHeartTileOffset:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1320
	cmp	r0, #0
	beq	.L1315	@cond_branch
	ldr	r1, .L1320+0x4
	cmp	r0, #0x1
	beq	.L1315	@cond_branch
	ldr	r1, .L1320+0x8
	cmp	r0, #0x2
	bne	.L1315	@cond_branch
	ldr	r1, .L1320+0xc
.L1315:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L1321:
	.align	2, 0
.L1320:
	.word	0x5011
	.word	0x6011
	.word	0x8011
	.word	0x7011
.Lfe104:
	.size	 GetAppealHeartTileOffset,.Lfe104-GetAppealHeartTileOffset
	.align	2, 0
	.type	 GetNumHeartsFromAppealPoints,function
	.thumb_func
GetNumHeartsFromAppealPoints:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	asr	r2, r0, #0x18
	cmp	r2, #0x10
	ble	.L1323	@cond_branch
	mov	r1, #0x10
	b	.L1324
.L1323:
	mov	r0, #0x10
	neg	r0, r0
	cmp	r2, r0
	bge	.L1324	@cond_branch
	mov	r1, #0xf0
.L1324:
	lsl	r0, r1, #0x18
	asr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe105:
	.size	 GetNumHeartsFromAppealPoints,.Lfe105-GetNumHeartsFromAppealPoints
	.align	2, 0
	.type	 UpdateAppealHearts,function
	.thumb_func
UpdateAppealHearts:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	add	r6, r1, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r0, .L1331
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	ldr	r0, .L1331+0x4
	mov	r1, #0x14
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r0, r5, #0
	bl	GetNumHeartsFromAppealPoints
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x10
	asr	r6, r6, #0x10
	add	r5, r5, r6
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r0, r5, #0
	bl	GetNumHeartsFromAppealPoints
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	sub	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, r8
	bl	GetAppealHeartTileOffset
	ldr	r2, .L1331+0x8
	lsl	r3, r7, #0x2
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	add	r0, r4, #0
	cmp	r4, #0
	bge	.L1327	@cond_branch
	neg	r0, r4
.L1327:
	strh	r0, [r1, #0x8]
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r1, #0xa]
	cmp	r4, #0
	bgt	.L1329	@cond_branch
	cmp	r4, #0
	bne	.L1328	@cond_branch
	cmp	r0, #0
	ble	.L1328	@cond_branch
.L1329:
	mov	r0, #0x1
	strh	r0, [r1, #0xc]
	b	.L1330
.L1332:
	.align	2, 0
.L1331:
	.word	gContestResources
	.word	Task_UpdateAppealHearts
	.word	gTasks
.L1328:
	ldr	r2, .L1333
	lsl	r3, r7, #0x2
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L1333+0x4
	strh	r1, [r0, #0xc]
.L1330:
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, r8
	strh	r1, [r0, #0xe]
	add	r0, r7, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1334:
	.align	2, 0
.L1333:
	.word	gTasks
	.word	0xffff
.Lfe106:
	.size	 UpdateAppealHearts,.Lfe106-UpdateAppealHearts
	.align	2, 0
	.type	 Task_UpdateAppealHearts,function
	.thumb_func
Task_UpdateAppealHearts:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L1355
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrb	r0, [r4, #0xe]
	mov	r9, r0
	ldrh	r3, [r4, #0x8]
	ldrh	r1, [r4, #0xa]
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xe
	bgt	.LCB12142
	b	.L1335	@long jump
.LCB12142:
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r2, [r4, #0xa]
	mov	r5, #0xa
	ldrsh	r0, [r4, r5]
	cmp	r0, #0
	bne	.L1337	@cond_branch
	add	r0, r7, #0
	bl	DestroyTask
	ldr	r0, .L1355+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x2]
	b	.L1335
.L1356:
	.align	2, 0
.L1355:
	.word	gTasks
	.word	gContestResources
.L1337:
	cmp	r3, #0
	bne	.L1339	@cond_branch
	lsl	r0, r1, #0x10
	mov	r8, r0
	cmp	r0, #0
	bge	.L1340	@cond_branch
	mov	r0, r9
	bl	GetAppealHeartTileOffset
	add	r0, r0, #0x2
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	b	.L1353
.L1340:
	mov	r0, r9
	bl	GetAppealHeartTileOffset
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
.L1353:
	strh	r0, [r4, #0xa]
	ldr	r1, .L1357
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	add	r2, r1, #0x1
	strh	r2, [r0, #0x8]
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	b	.L1338
.L1358:
	.align	2, 0
.L1357:
	.word	gTasks
.L1339:
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bge	.L1343	@cond_branch
	lsl	r0, r1, #0x10
	mov	r8, r0
	cmp	r0, #0
	bge	.L1344	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r2, #0x1
	strh	r0, [r4, #0xa]
	mov	r0, r9
	bl	GetAppealHeartTileOffset
	add	r0, r0, #0x2
	b	.L1354
.L1344:
	ldrh	r0, [r4, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	sub	r0, r2, #0x1
	strh	r0, [r4, #0xa]
	b	.L1338
.L1343:
	lsl	r0, r1, #0x10
	mov	r8, r0
	cmp	r0, #0
	bge	.L1347	@cond_branch
	ldrh	r0, [r4, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	add	r0, r2, #0x1
	strh	r0, [r4, #0xa]
	b	.L1338
.L1347:
	ldrh	r0, [r4, #0x8]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	sub	r0, r2, #0x1
	strh	r0, [r4, #0xa]
	mov	r0, r9
	bl	GetAppealHeartTileOffset
.L1354:
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L1338:
	str	r5, [sp, #0xc]
	mov	r0, #0x0
	mov	sl, r0
	cmp	r5, #0x7
	bls	.L1349	@cond_branch
	mov	r2, #0x1
	mov	sl, r2
	add	r0, r5, #0
	sub	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L1349:
	add	r2, r5, #0
	add	r2, r2, #0x16
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L1359
	add	r0, r0, r9
	ldrb	r0, [r0]
	lsl	r3, r0, #0x2
	add	r3, r3, r0
	add	r3, r3, #0x2
	add	r3, r3, sl
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, r6, #0
	bl	ContestBG_FillBoxWithTile
	mov	r3, r8
	cmp	r3, #0
	ble	.L1350	@cond_branch
	mov	r0, #0x60
	bl	PlaySE
	ldr	r4, .L1359+0x4
	add	r0, r4, #0
	bl	m4aMPlayImmInit
	ldr	r1, .L1359+0x8
	ldr	r0, [sp, #0xc]
	lsl	r2, r0, #0x18
	asr	r2, r2, #0x10
	add	r0, r4, #0
	bl	m4aMPlayPitchControl
	b	.L1351
.L1360:
	.align	2, 0
.L1359:
	.word	gContestantTurnOrder
	.word	gMPlayInfo_SE1
	.word	0xffff
.L1350:
	mov	r0, #0x16
	bl	PlaySE
.L1351:
	mov	r2, sl
	cmp	r2, #0
	bne	.L1335	@cond_branch
	cmp	r5, #0
	bne	.L1335	@cond_branch
	cmp	r6, #0
	bne	.L1335	@cond_branch
	ldr	r0, .L1361
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xc]
	neg	r0, r0
	strh	r0, [r1, #0xc]
.L1335:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1362:
	.align	2, 0
.L1361:
	.word	gTasks
.Lfe107:
	.size	 Task_UpdateAppealHearts,.Lfe107-Task_UpdateAppealHearts
	.align	2, 0
	.type	 CreateSliderHeartSprites,function
	.thumb_func
CreateSliderHeartSprites:
	push	{r4, r5, lr}
	ldr	r0, .L1369
	bl	LoadSpriteSheet
	mov	r4, #0x0
	ldr	r5, .L1369+0x4
.L1367:
	ldr	r0, .L1369+0x8
	add	r0, r4, r0
	ldrb	r0, [r0]
	add	r0, r0, r5
	ldrb	r2, [r0]
	ldr	r0, .L1369+0xc
	mov	r1, #0xb4
	mov	r3, #0x1
	bl	CreateSprite
	ldr	r1, .L1369+0x10
	ldr	r1, [r1]
	ldr	r2, [r1, #0x14]
	lsl	r1, r4, #0x2
	add	r1, r1, r2
	strb	r0, [r1]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1367	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1370:
	.align	2, 0
.L1369:
	.word	sSpriteSheet_SliderHeart
	.word	sSliderHeartYPositions
	.word	gContestantTurnOrder
	.word	sSpriteTemplate_SliderHeart
	.word	gContestResources
.Lfe108:
	.size	 CreateSliderHeartSprites,.Lfe108-CreateSliderHeartSprites
	.align	2, 0
	.type	 UpdateHeartSlider,function
	.thumb_func
UpdateHeartSlider:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L1378
	ldr	r0, [r4]
	ldr	r2, [r0, #0x14]
	lsl	r3, r6, #0x2
	add	r2, r3, r2
	ldrb	r0, [r2, #0x2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x2]
	ldr	r1, [r4]
	ldr	r0, [r1, #0x14]
	add	r3, r3, r0
	ldrb	r7, [r3]
	ldr	r1, [r1, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x11
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x38
	ble	.L1372	@cond_branch
	mov	r5, #0x38
	b	.L1373
.L1379:
	.align	2, 0
.L1378:
	.word	gContestResources
.L1372:
	cmp	r0, #0
	bge	.L1373	@cond_branch
	mov	r5, #0x0
.L1373:
	ldr	r2, .L1380
	lsl	r3, r7, #0x4
	add	r0, r3, r7
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r0, #0x3e
	add	r0, r0, r4
	mov	ip, r0
	ldrb	r1, [r0]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	strh	r6, [r4, #0x2e]
	strh	r5, [r4, #0x30]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x24
	ldrsh	r1, [r4, r5]
	cmp	r0, r1
	ble	.L1375	@cond_branch
	mov	r0, #0x1
	b	.L1377
.L1381:
	.align	2, 0
.L1380:
	.word	gSprites
.L1375:
	ldr	r0, .L1382
.L1377:
	strh	r0, [r4, #0x32]
	add	r0, r3, r7
	lsl	r0, r0, #0x2
	add	r1, r2, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L1382+0x4
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1383:
	.align	2, 0
.L1382:
	.word	0xffff
	.word	SpriteCB_UpdateHeartSlider
.Lfe109:
	.size	 UpdateHeartSlider,.Lfe109-UpdateHeartSlider
	.align	2, 0
	.type	 UpdateHeartSliders,function
	.thumb_func
UpdateHeartSliders:
	push	{r4, lr}
	mov	r4, #0x0
.L1388:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	UpdateHeartSlider
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1388	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 UpdateHeartSliders,.Lfe110-UpdateHeartSliders
	.align	2, 0
	.type	 SlidersDoneUpdating,function
	.thumb_func
SlidersDoneUpdating:
	push	{r4, lr}
	mov	r2, #0x0
	ldr	r3, .L1400
	ldr	r0, [r3]
	ldr	r0, [r0, #0x14]
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1392	@cond_branch
	mov	r4, #0x1
.L1393:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L1392	@cond_branch
	ldr	r0, [r3]
	ldr	r1, [r0, #0x14]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1393	@cond_branch
.L1392:
	cmp	r2, #0x4
	beq	.L1397	@cond_branch
	mov	r0, #0x0
	b	.L1399
.L1401:
	.align	2, 0
.L1400:
	.word	gContestResources
.L1397:
	mov	r0, #0x1
.L1399:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe111:
	.size	 SlidersDoneUpdating,.Lfe111-SlidersDoneUpdating
	.align	2, 0
	.type	 SpriteCB_UpdateHeartSlider,function
	.thumb_func
SpriteCB_UpdateHeartSlider:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r2, [r3, #0x24]
	mov	r0, #0x24
	ldrsh	r1, [r3, r0]
	mov	r4, #0x30
	ldrsh	r0, [r3, r4]
	cmp	r1, r0
	bne	.L1403	@cond_branch
	ldr	r0, .L1405
	ldr	r0, [r0]
	mov	r2, #0x2e
	ldrsh	r1, [r3, r2]
	ldr	r0, [r0, #0x14]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x2]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x2]
	ldr	r0, .L1405+0x4
	str	r0, [r3, #0x1c]
	b	.L1404
.L1406:
	.align	2, 0
.L1405:
	.word	gContestResources
	.word	SpriteCallbackDummy
.L1403:
	ldrh	r0, [r3, #0x32]
	add	r0, r2, r0
	strh	r0, [r3, #0x24]
.L1404:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe112:
	.size	 SpriteCB_UpdateHeartSlider,.Lfe112-SpriteCB_UpdateHeartSlider
	.align	2, 0
	.type	 UpdateSliderHeartSpriteYPositions,function
	.thumb_func
UpdateSliderHeartSpriteYPositions:
	push	{r4, r5, r6, lr}
	mov	r2, #0x0
	ldr	r6, .L1413
	ldr	r5, .L1413+0x4
	ldr	r4, .L1413+0x8
	ldr	r3, .L1413+0xc
.L1411:
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	add	r0, r2, r3
	ldrb	r0, [r0]
	add	r0, r0, r4
	ldrb	r0, [r0]
	strh	r0, [r1, #0x22]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1411	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1414:
	.align	2, 0
.L1413:
	.word	gSprites
	.word	gContestResources
	.word	sSliderHeartYPositions
	.word	gContestantTurnOrder
.Lfe113:
	.size	 UpdateSliderHeartSpriteYPositions,.Lfe113-UpdateSliderHeartSpriteYPositions
	.align	2, 0
	.type	 SetBottomSliderHeartsInvisibility,function
	.thumb_func
SetBottomSliderHeartsInvisibility:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r3, #0x0
	ldr	r7, .L1425
	ldr	r5, .L1425+0x4
	ldr	r4, .L1425+0x8
	mov	r2, #0x0
.L1419:
	add	r0, r3, r7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L1418	@cond_branch
	cmp	r6, #0
	bne	.L1421	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0xb4
	b	.L1424
.L1426:
	.align	2, 0
.L1425:
	.word	gContestantTurnOrder
	.word	gSprites
	.word	gContestResources
.L1421:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x80
	lsl	r1, r1, #0x1
.L1424:
	strh	r1, [r0, #0x20]
.L1418:
	add	r2, r2, #0x4
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1419	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 SetBottomSliderHeartsInvisibility,.Lfe114-SetBottomSliderHeartsInvisibility
	.align	2, 0
	.type	 CreateNextTurnSprites,function
	.thumb_func
CreateNextTurnSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L1433
	bl	LoadSpritePalette
	mov	r5, #0x0
	ldr	r7, .L1433+0x4
	ldr	r0, .L1433+0x8
	mov	r8, r0
	mov	r6, #0x0
.L1431:
	lsl	r0, r5, #0x3
	ldr	r1, .L1433+0xc
	add	r0, r0, r1
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L1433+0x10
	add	r0, r6, r0
	ldr	r2, .L1433+0x14
	ldr	r1, .L1433+0x18
	add	r1, r5, r1
	ldrb	r1, [r1]
	add	r1, r1, r2
	ldrb	r2, [r1]
	mov	r1, #0xcc
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r1, [r7]
	ldr	r1, [r1, #0x14]
	lsl	r4, r5, #0x2
	add	r1, r4, r1
	strb	r0, [r1, #0x1]
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldr	r1, .L1433+0x1c
	bl	SetSubspriteTables
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	add	r4, r4, r0
	ldrb	r1, [r4, #0x1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r6, r6, #0x18
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1431	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1434:
	.align	2, 0
.L1433:
	.word	sSpritePalette_NextTurn
	.word	gContestResources
	.word	gSprites
	.word	sSpriteSheet_NextTurn
	.word	sSpriteTemplates_NextTurn
	.word	sNextTurnSpriteYPositions
	.word	gContestantTurnOrder
	.word	sSubspriteTable_NextTurn
.Lfe115:
	.size	 CreateNextTurnSprites,.Lfe115-CreateNextTurnSprites
	.align	2, 0
	.type	 CreateApplauseMeterSprite,function
	.thumb_func
CreateApplauseMeterSprite:
	push	{lr}
	ldr	r0, .L1436
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L1436+0x4
	bl	LoadSpritePalette
	ldr	r0, .L1436+0x8
	mov	r1, #0x1e
	mov	r2, #0x2c
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1436+0xc
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r3, #0x4
	orr	r2, r2, r3
	strb	r2, [r1]
	ldr	r1, .L1436+0x10
	ldr	r1, [r1]
	ldr	r1, [r1]
	add	r1, r1, #0x58
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L1437:
	.align	2, 0
.L1436:
	.word	sSpriteSheet_ApplauseMeter
	.word	sSpritePalette_ApplauseMeter
	.word	sSpriteTemplate_ApplauseMeter
	.word	gSprites
	.word	gContestResources
.Lfe116:
	.size	 CreateApplauseMeterSprite,.Lfe116-CreateApplauseMeterSprite
	.align	2, 0
	.type	 CreateJudgeAttentionEyeTask,function
	.thumb_func
CreateJudgeAttentionEyeTask:
	push	{r4, lr}
	ldr	r0, .L1444
	mov	r1, #0x1e
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1444+0x4
	ldr	r1, [r1]
	ldr	r1, [r1]
	strb	r0, [r1, #0xd]
	mov	r2, #0x0
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r4, .L1444+0x8
	mov	r3, #0xff
.L1442:
	lsl	r0, r2, #0x3
	add	r0, r0, r1
	add	r0, r0, r4
	strh	r3, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L1442	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L1445:
	.align	2, 0
.L1444:
	.word	Task_FlashJudgeAttentionEye
	.word	gContestResources
	.word	gTasks+0x8
.Lfe117:
	.size	 CreateJudgeAttentionEyeTask,.Lfe117-CreateJudgeAttentionEyeTask
	.align	2, 0
	.type	 StartFlashJudgeAttentionEye,function
	.thumb_func
StartFlashJudgeAttentionEye:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L1447
	ldr	r1, .L1447+0x4
	ldr	r5, [r1]
	ldr	r1, [r5]
	ldrb	r2, [r1, #0xd]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r3, r3, #0x8
	add	r1, r1, r3
	mov	r4, #0x0
	strh	r4, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	ldr	r1, [r5]
	ldrb	r2, [r1, #0xd]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r0, r0, r3
	strh	r4, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1448:
	.align	2, 0
.L1447:
	.word	gTasks
	.word	gContestResources
.Lfe118:
	.size	 StartFlashJudgeAttentionEye,.Lfe118-StartFlashJudgeAttentionEye
	.align	2, 0
	.type	 StopFlashJudgeAttentionEye,function
	.thumb_func
StopFlashJudgeAttentionEye:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L1450
	mov	r1, #0x1f
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1450+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1451:
	.align	2, 0
.L1450:
	.word	Task_StopFlashJudgeAttentionEye
	.word	gTasks
.Lfe119:
	.size	 StopFlashJudgeAttentionEye,.Lfe119-StopFlashJudgeAttentionEye
	.align	2, 0
	.type	 Task_StopFlashJudgeAttentionEye,function
	.thumb_func
Task_StopFlashJudgeAttentionEye:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r2, .L1455
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x8]
	add	r5, r0, #0
	ldr	r0, .L1455+0x4
	ldr	r4, [r0]
	ldr	r0, [r4]
	ldrb	r1, [r0, #0xd]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r7, r2, #0
	add	r7, r7, #0x8
	add	r1, r0, r7
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L1454	@cond_branch
	cmp	r0, #0xff
	bne	.L1453	@cond_branch
.L1454:
	mov	r3, #0x0
	mov	r0, #0xff
	strh	r0, [r1]
	lsl	r1, r5, #0x2
	add	r1, r1, #0x1
	lsl	r1, r1, #0x1
	ldr	r0, [r4]
	ldrb	r2, [r0, #0xd]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r1, r1, r7
	strh	r3, [r1]
	ldr	r0, [r4]
	add	r0, r0, #0x14
	add	r0, r0, r5
	ldrb	r0, [r0]
	add	r0, r0, #0x5
	lsl	r0, r0, #0x4
	add	r0, r0, #0x6
	ldr	r3, .L1455+0x8
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BlendPalette
	add	r0, r6, #0
	bl	DestroyTask
.L1453:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1456:
	.align	2, 0
.L1455:
	.word	gTasks
	.word	gContestResources
	.word	0x4bff
.Lfe120:
	.size	 Task_StopFlashJudgeAttentionEye,.Lfe120-Task_StopFlashJudgeAttentionEye
	.align	2, 0
	.type	 Task_FlashJudgeAttentionEye,function
	.thumb_func
Task_FlashJudgeAttentionEye:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	mov	r9, r1
	lsl	r7, r1, #0x3
	ldr	r0, .L1469
	mov	r8, r0
	mov	r1, #0x8
	neg	r1, r1
	add	r1, r1, r8
	mov	sl, r1
.L1461:
	lsl	r0, r6, #0x1a
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r7
	mov	r4, r8
	add	r2, r0, r4
	ldrh	r4, [r2]
	mov	r5, #0x0
	ldrsh	r0, [r2, r5]
	cmp	r0, #0xff
	beq	.L1460	@cond_branch
	add	r0, r3, #0x1
	lsl	r1, r0, #0x1
	add	r1, r1, r7
	add	r1, r1, r8
	mov	r5, #0x0
	ldrsh	r1, [r1, r5]
	add	r5, r0, #0
	cmp	r1, #0
	bne	.L1463	@cond_branch
	add	r0, r4, #0x1
	b	.L1468
.L1470:
	.align	2, 0
.L1469:
	.word	gTasks+0x8
.L1463:
	sub	r0, r4, #0x1
.L1468:
	strh	r0, [r2]
	lsl	r1, r3, #0x1
	mov	r0, r9
	lsl	r2, r0, #0x3
	add	r0, r1, r2
	mov	r3, sl
	add	r3, r3, #0x8
	add	r0, r0, r3
	mov	r4, #0x0
	ldrsh	r0, [r0, r4]
	add	r4, r1, #0
	cmp	r0, #0x10
	beq	.L1466	@cond_branch
	cmp	r0, #0
	bne	.L1465	@cond_branch
.L1466:
	lsl	r0, r5, #0x1
	add	r0, r0, r2
	add	r0, r0, r3
	ldrh	r1, [r0]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0]
.L1465:
	ldr	r0, .L1471
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, #0x14
	add	r0, r0, r6
	ldrb	r0, [r0]
	add	r0, r0, #0x5
	lsl	r0, r0, #0x4
	add	r0, r0, #0x6
	add	r1, r4, r7
	add	r1, r1, r8
	ldrb	r2, [r1]
	mov	r1, #0x2
	ldr	r3, .L1471+0x4
	bl	BlendPalette
.L1460:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L1461	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1472:
	.align	2, 0
.L1471:
	.word	gContestResources
	.word	0x4bff
.Lfe121:
	.size	 Task_FlashJudgeAttentionEye,.Lfe121-Task_FlashJudgeAttentionEye
	.align	2, 0
	.type	 CreateUnusedBlendTask,function
	.thumb_func
CreateUnusedBlendTask:
	push	{r4, lr}
	ldr	r0, .L1479
	mov	r1, #0x1e
	bl	CreateTask
	ldr	r1, .L1479+0x4
	ldr	r1, [r1]
	ldr	r1, [r1]
	strb	r0, [r1, #0xe]
	mov	r4, #0x0
.L1477:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	InitUnusedBlendTaskData
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1477	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L1480:
	.align	2, 0
.L1479:
	.word	Task_UnusedBlend
	.word	gContestResources
.Lfe122:
	.size	 CreateUnusedBlendTask,.Lfe122-CreateUnusedBlendTask
	.align	2, 0
	.type	 InitUnusedBlendTaskData,function
	.thumb_func
InitUnusedBlendTaskData:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L1482
	ldr	r1, .L1482+0x4
	ldr	r4, [r1]
	ldr	r1, [r4]
	ldrb	r2, [r1, #0xe]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r3, r3, #0x8
	add	r1, r1, r3
	mov	r5, #0x0
	mov	r2, #0xff
	strh	r2, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	ldr	r1, [r4]
	ldrb	r2, [r1, #0xe]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r0, r0, r3
	strh	r5, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1483:
	.align	2, 0
.L1482:
	.word	gTasks
	.word	gContestResources
.Lfe123:
	.size	 InitUnusedBlendTaskData,.Lfe123-InitUnusedBlendTaskData
	.align	2, 0
	.type	 UpdateBlendTaskContestantsData,function
	.thumb_func
UpdateBlendTaskContestantsData:
	push	{r4, lr}
	mov	r4, #0x0
.L1488:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	UpdateBlendTaskContestantData
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1488	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe124:
	.size	 UpdateBlendTaskContestantsData,.Lfe124-UpdateBlendTaskContestantsData
	.align	2, 0
	.type	 UpdateBlendTaskContestantData,function
	.thumb_func
UpdateBlendTaskContestantData:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	InitUnusedBlendTaskData
	add	r0, r4, #0x5
	lsl	r2, r0, #0x5
	ldr	r3, .L1491
	add	r6, r2, r3
	ldr	r5, .L1491+0x4
	add	r2, r2, r5
	ldr	r1, .L1491+0x8
	str	r6, [r1]
	str	r2, [r1, #0x4]
	ldr	r2, .L1491+0xc
	str	r2, [r1, #0x8]
	ldr	r6, [r1, #0x8]
	lsl	r0, r0, #0x4
	add	r4, r4, #0xc
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	sub	r3, r3, #0x14
	add	r3, r0, r3
	sub	r5, r5, #0x14
	add	r0, r0, r5
	str	r3, [r1]
	str	r0, [r1, #0x4]
	str	r2, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1492:
	.align	2, 0
.L1491:
	.word	gPlttBufferUnfaded+0x14
	.word	gPlttBufferFaded+0x14
	.word	0x40000d4
	.word	-0x7fffffff
.Lfe125:
	.size	 UpdateBlendTaskContestantData,.Lfe125-UpdateBlendTaskContestantData
	.align	2, 0
	.type	 Task_UnusedBlend,function
	.thumb_func
Task_UnusedBlend:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r7, #0x0
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	mov	r9, r1
	lsl	r6, r1, #0x3
	ldr	r0, .L1506
	mov	r8, r0
	ldr	r1, .L1506+0x4
	mov	sl, r1
.L1497:
	lsl	r0, r7, #0x1a
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r6
	mov	r4, r8
	add	r2, r0, r4
	mov	r5, #0x0
	ldrsh	r0, [r2, r5]
	cmp	r0, #0xff
	beq	.L1496	@cond_branch
	add	r0, r3, #0x2
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	add	r1, r0, r4
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	mov	r4, #0x0
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L1496	@cond_branch
	strh	r4, [r1]
	add	r0, r3, #0x1
	lsl	r1, r0, #0x1
	add	r1, r1, r6
	add	r1, r1, r8
	mov	r4, #0x0
	ldrsh	r1, [r1, r4]
	add	r4, r0, #0
	cmp	r1, #0
	bne	.L1500	@cond_branch
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	b	.L1505
.L1507:
	.align	2, 0
.L1506:
	.word	gTasks+0x8
	.word	0x4bff
.L1500:
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
.L1505:
	strh	r0, [r2]
	lsl	r1, r3, #0x1
	mov	r5, r9
	lsl	r2, r5, #0x3
	add	r0, r1, r2
	ldr	r3, .L1508
	add	r3, r3, #0x8
	add	r0, r0, r3
	mov	r5, #0x0
	ldrsh	r0, [r0, r5]
	add	r5, r1, #0
	cmp	r0, #0x10
	beq	.L1503	@cond_branch
	cmp	r0, #0
	bne	.L1502	@cond_branch
.L1503:
	lsl	r0, r4, #0x1
	add	r0, r0, r2
	add	r0, r0, r3
	ldrh	r1, [r0]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0]
.L1502:
	add	r4, r7, #0x5
	lsl	r4, r4, #0x4
	add	r0, r4, #0
	add	r0, r0, #0xa
	add	r5, r5, r6
	add	r5, r5, r8
	ldrb	r2, [r5]
	mov	r1, #0x1
	mov	r3, sl
	bl	BlendPalette
	add	r4, r4, #0xc
	add	r4, r4, r7
	ldrb	r2, [r5]
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r3, sl
	bl	BlendPalette
.L1496:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x3
	bls	.L1497	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1509:
	.align	2, 0
.L1508:
	.word	gTasks
.Lfe126:
	.size	 Task_UnusedBlend,.Lfe126-Task_UnusedBlend
	.align	2, 0
	.type	 StartStopFlashJudgeAttentionEye,function
	.thumb_func
StartStopFlashJudgeAttentionEye:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L1513
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1511	@cond_branch
	add	r0, r2, #0
	bl	StartFlashJudgeAttentionEye
	b	.L1512
.L1514:
	.align	2, 0
.L1513:
	.word	gContestResources
.L1511:
	add	r0, r2, #0
	bl	StopFlashJudgeAttentionEye
.L1512:
	pop	{r0}
	bx	r0
.Lfe127:
	.size	 StartStopFlashJudgeAttentionEye,.Lfe127-StartStopFlashJudgeAttentionEye
	.align	2, 0
	.type	 CreateContestantBoxBlinkSprites,function
	.thumb_func
CreateContestantBoxBlinkSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0xc]
	ldr	r6, .L1516
	add	r6, r0, r6
	ldrb	r0, [r6]
	lsl	r5, r0, #0x2
	add	r5, r5, r0
	lsl	r5, r5, #0x1b
	mov	r0, #0x80
	lsl	r0, r0, #0x16
	add	r5, r5, r0
	lsr	r5, r5, #0x18
	ldr	r1, [sp, #0xc]
	lsl	r4, r1, #0x3
	ldr	r0, .L1516+0x4
	add	r0, r4, r0
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L1516+0x8
	add	r4, r4, r0
	add	r0, r4, #0
	bl	LoadSpritePalette
	ldr	r2, [sp, #0xc]
	lsl	r4, r2, #0x1
	add	r4, r4, r2
	lsl	r4, r4, #0x3
	ldr	r0, .L1516+0xc
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb8
	add	r2, r5, #0
	mov	r3, #0x1d
	bl	CreateSprite
	mov	r9, r0
	mov	r3, r9
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	add	r0, r4, #0
	mov	r1, #0xf8
	add	r2, r5, #0
	mov	r3, #0x1d
	bl	CreateSprite
	mov	r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r5, r0, #0x4
	add	r5, r5, r8
	lsl	r5, r5, #0x2
	ldr	r1, .L1516+0x10
	add	r5, r5, r1
	ldrh	r2, [r5, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x40
	ldr	r3, .L1516+0x14
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L1516+0x18
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	mov	r4, #0xc0
	lsl	r4, r4, #0x13
	ldrb	r0, [r6]
	lsl	r3, r0, #0x2
	add	r3, r3, r0
	lsl	r3, r3, #0x6
	ldr	r0, .L1516+0x1c
	add	r3, r3, r0
	ldr	r7, .L1516+0x20
	ldr	r0, [r7]
	ldr	r0, [r0, #0x34]
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x3
	add	r2, r4, #0
	bl	CopySpriteTiles
	ldrb	r0, [r6]
	lsl	r3, r0, #0x2
	add	r3, r3, r0
	lsl	r3, r3, #0x6
	ldr	r1, .L1516+0x24
	add	r3, r3, r1
	ldr	r0, [r7]
	ldr	r0, [r0, #0x38]
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x3
	add	r2, r4, #0
	bl	CopySpriteTiles
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r0, [r7]
	ldr	r1, [r0, #0x34]
	mov	r6, #0xa0
	lsl	r6, r6, #0x3
	add	r1, r1, r6
	ldr	r2, .L1516+0x28
	mov	sl, r2
	add	r0, sp, #0x4
	bl	CpuSet
	str	r4, [sp, #0x8]
	add	r0, sp, #0x8
	ldr	r1, [r7]
	ldr	r1, [r1, #0x38]
	add	r1, r1, r6
	mov	r2, sl
	bl	CpuSet
	ldr	r0, [r7]
	ldr	r0, [r0, #0x34]
	mov	r3, r9
	lsl	r4, r3, #0x4
	add	r4, r4, r9
	lsl	r4, r4, #0x2
	ldr	r1, .L1516+0x10
	add	r4, r4, r1
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r6, .L1516+0x2c
	add	r1, r1, r6
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	sl, r2
	mov	r3, #0x1
	bl	RequestDma3Copy
	ldr	r0, [r7]
	ldr	r0, [r0, #0x38]
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, r6
	mov	r2, sl
	mov	r3, #0x1
	bl	RequestDma3Copy
	mov	r3, r8
	strh	r3, [r4, #0x2e]
	mov	r0, r9
	strh	r0, [r5, #0x2e]
	mov	r1, sp
	ldrh	r1, [r1, #0xc]
	strh	r1, [r4, #0x30]
	mov	r2, sp
	ldrh	r2, [r2, #0xc]
	strh	r2, [r5, #0x30]
	mov	r0, r9
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1517:
	.align	2, 0
.L1516:
	.word	gContestantTurnOrder
	.word	sSpriteSheets_ContestantsTurnBlinkEffect
	.word	sSpritePalettes_ContestantsTurnBlinkEffect
	.word	sSpriteTemplates_ContestantsTurnBlinkEffect
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	0x600e026
	.word	gContestResources
	.word	0x600e036
	.word	0x50000c0
	.word	0x6010000
.Lfe128:
	.size	 CreateContestantBoxBlinkSprites,.Lfe128-CreateContestantBoxBlinkSprites
	.align	2, 0
	.type	 DestroyContestantBoxBlinkSprites,function
	.thumb_func
DestroyContestantBoxBlinkSprites:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1519
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	add	r5, r5, r1
	ldrh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	add	r0, r5, #0
	bl	DestroySpriteAndFreeResources
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1520:
	.align	2, 0
.L1519:
	.word	gSprites
.Lfe129:
	.size	 DestroyContestantBoxBlinkSprites,.Lfe129-DestroyContestantBoxBlinkSprites
	.align	2, 0
	.type	 SetBlendForContestantBoxBlink,function
	.thumb_func
SetBlendForContestantBoxBlink:
	push	{lr}
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L1522
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L1523:
	.align	2, 0
.L1522:
	.word	0x907
.Lfe130:
	.size	 SetBlendForContestantBoxBlink,.Lfe130-SetBlendForContestantBoxBlink
	.align	2, 0
	.type	 ResetBlendForContestantBoxBlink,function
	.thumb_func
ResetBlendForContestantBoxBlink:
	push	{lr}
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.Lfe131:
	.size	 ResetBlendForContestantBoxBlink,.Lfe131-ResetBlendForContestantBoxBlink
	.align	2, 0
	.type	 BlinkContestantBox,function
	.thumb_func
BlinkContestantBox:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	r4, r0, #0
	mov	r9, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	bl	SetBlendForContestantBoxBlink
	ldr	r0, .L1528
	ldr	r1, [r0]
	ldr	r2, .L1528+0x4
	mov	r8, r2
	lsl	r6, r4, #0x4
	add	r6, r6, r4
	lsl	r6, r6, #0x2
	add	r0, r6, r2
	mov	r3, #0x30
	ldrsh	r2, [r0, r3]
	ldr	r1, [r1, #0x14]
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldrb	r1, [r2, #0x2]
	mov	r3, #0x2
	orr	r1, r1, r3
	strb	r1, [r2, #0x2]
	ldrh	r5, [r0, #0x2e]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	mov	r1, r8
	add	r0, r4, r1
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	mov	r2, #0x1c
	add	r8, r8, r2
	add	r6, r6, r8
	ldr	r0, .L1528+0x8
	str	r0, [r6]
	add	r4, r4, r8
	ldr	r0, .L1528+0xc
	str	r0, [r4]
	mov	r3, r9
	cmp	r3, #0
	bne	.L1526	@cond_branch
	mov	r0, #0x65
	bl	PlaySE
	b	.L1527
.L1529:
	.align	2, 0
.L1528:
	.word	gContestResources
	.word	gSprites
	.word	SpriteCB_BlinkContestantBox
	.word	SpriteCallbackDummy
.L1526:
	mov	r0, #0x2
	bl	PlaySE
.L1527:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe132:
	.size	 BlinkContestantBox,.Lfe132-BlinkContestantBox
	.align	2, 0
	.type	 SpriteCB_BlinkContestantBox,function
	.thumb_func
SpriteCB_BlinkContestantBox:
	push	{lr}
	mov	ip, r0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1531	@cond_branch
	mov	r0, ip
	ldrh	r1, [r0, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L1533
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L1531	@cond_branch
	mov	r3, ip
	add	r3, r3, #0x3e
	ldrb	r0, [r3]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r3]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, .L1533+0x4
	mov	r1, ip
	str	r0, [r1, #0x1c]
.L1531:
	pop	{r0}
	bx	r0
.L1534:
	.align	2, 0
.L1533:
	.word	gSprites
	.word	SpriteCB_EndBlinkContestantBox
.Lfe133:
	.size	 SpriteCB_BlinkContestantBox,.Lfe133-SpriteCB_BlinkContestantBox
	.align	2, 0
	.type	 SpriteCB_EndBlinkContestantBox,function
	.thumb_func
SpriteCB_EndBlinkContestantBox:
	push	{lr}
	ldr	r1, .L1536
	ldr	r1, [r1]
	mov	r3, #0x30
	ldrsh	r2, [r0, r3]
	ldr	r1, [r1, #0x14]
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldrb	r3, [r2, #0x2]
	mov	r1, #0x3
	neg	r1, r1
	and	r1, r1, r3
	strb	r1, [r2, #0x2]
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyContestantBoxBlinkSprites
	bl	ResetBlendForContestantBoxBlink
	pop	{r0}
	bx	r0
.L1537:
	.align	2, 0
.L1536:
	.word	gContestResources
.Lfe134:
	.size	 SpriteCB_EndBlinkContestantBox,.Lfe134-SpriteCB_EndBlinkContestantBox
	.align	2, 0
	.type	 ContestDebugTogglePointTotal,function
	.thumb_func
ContestDebugTogglePointTotal:
	push	{lr}
	ldr	r0, .L1544
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r2, r0, r1
	ldrb	r1, [r2]
	add	r3, r0, #0
	cmp	r1, #0x1
	bne	.L1539	@cond_branch
	mov	r0, #0x0
	b	.L1543
.L1545:
	.align	2, 0
.L1544:
	.word	gHeap
.L1539:
	mov	r0, #0x1
.L1543:
	strb	r0, [r2]
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1541	@cond_branch
	bl	DrawContestantWindowText
	bl	SwapMoveDescAndContestTilemaps
	b	.L1542
.L1541:
	bl	ContestDebugDoPrint
.L1542:
	pop	{r0}
	bx	r0
.Lfe135:
	.size	 ContestDebugTogglePointTotal,.Lfe135-ContestDebugTogglePointTotal
	.align	2, 0
	.type	 ContestDebugDoPrint,function
	.thumb_func
ContestDebugDoPrint:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	ldr	r0, .L1571
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1546	@cond_branch
	ldr	r0, .L1571+0x4
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1546	@cond_branch
	cmp	r0, #0
	blt	.L1552	@cond_branch
	cmp	r0, #0x3
	bgt	.L1552	@cond_branch
	cmp	r0, #0x2
	blt	.L1552	@cond_branch
	bl	ContestDebugPrintBitStrings
	b	.L1546
.L1572:
	.align	2, 0
.L1571:
	.word	gEnableContestDebugging
	.word	gHeap
.L1552:
	mov	r5, #0x0
.L1556:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L1556	@cond_branch
	mov	r5, #0x0
.L1561:
	ldr	r0, .L1573
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r2, sp, #0x4
	ldrh	r4, [r0, #0x4]
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bge	.L1562	@cond_branch
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r2, #0
	ldr	r1, .L1573+0x4
	bl	StringCopy
	add	r2, r0, #0
.L1562:
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	add	r0, r2, #0
	mov	r2, #0x0
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L1573+0x8
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r1, #0x7
	str	r1, [sp]
	add	r1, sp, #0x4
	mov	r2, #0x37
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L1561	@cond_branch
	mov	r5, #0x0
.L1567:
	ldr	r0, .L1573
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r2, sp, #0x4
	ldrh	r4, [r0, #0x2]
	mov	r1, #0x2
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bge	.L1568	@cond_branch
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r2, #0
	ldr	r1, .L1573+0x4
	bl	StringCopy
	add	r2, r0, #0
.L1568:
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	add	r0, r2, #0
	mov	r2, #0x0
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L1573+0x8
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r1, #0x7
	str	r1, [sp]
	add	r1, sp, #0x4
	mov	r2, #0x5
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L1567	@cond_branch
	bl	SwapMoveDescAndContestTilemaps
.L1546:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1574:
	.align	2, 0
.L1573:
	.word	gContestResources
	.word	gText_OneDash
	.word	gContestantTurnOrder
.Lfe136:
	.size	 ContestDebugDoPrint,.Lfe136-ContestDebugDoPrint
	.align	2, 0
	.globl	SortContestants
	.type	 SortContestants,function
	.thumb_func
SortContestants:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	add	r4, sp, #0x4
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	mov	r5, #0x0
	add	r4, sp, #0x4
	add	r6, r4, #0
	mov	r7, #0x0
.L1579:
	bl	Random
	add	r1, r0, #0
	mov	r0, sp
	add	r0, r0, r7
	add	r0, r0, #0x4
	strh	r1, [r0]
	mov	r2, #0x0
	cmp	r2, r5
	bge	.L1578	@cond_branch
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	mov	r1, sp
	ldrh	r1, [r1, #0x4]
	cmp	r0, r1
	beq	.L1634	@cond_branch
.L1582:
	add	r2, r2, #0x1
	cmp	r2, r5
	bge	.L1578	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r4, r0
	ldrh	r1, [r6]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L1582	@cond_branch
.L1634:
	sub	r6, r6, #0x2
	sub	r7, r7, #0x2
	sub	r5, r5, #0x1
.L1578:
	add	r6, r6, #0x2
	add	r7, r7, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1579	@cond_branch
	mov	r2, r8
	cmp	r2, #0
	bne	.L1587	@cond_branch
	mov	r5, #0x0
	ldr	r3, .L1636
	mov	r8, r3
.L1591:
	mov	r6, r8
	strb	r5, [r6]
	mov	r4, #0x0
	cmp	r4, r5
	bge	.L1593	@cond_branch
	ldr	r7, .L1636+0x4
	mov	r9, r7
	lsl	r0, r5, #0x1
	add	r1, r0, #0
	add	r1, r1, r9
	mov	ip, r1
	mov	r2, sp
	add	r2, r2, #0x4
	str	r2, [sp, #0xc]
	add	r0, r0, sp
	add	r0, r0, #0x4
	str	r0, [sp, #0x10]
	ldr	r3, .L1636
	add	r6, r3, #0
	mov	sl, r6
.L1595:
	ldrb	r0, [r3]
	lsl	r2, r0, #0x1
	mov	r7, r9
	add	r0, r2, r7
	mov	r6, #0x0
	ldrsh	r1, [r0, r6]
	mov	r7, ip
	mov	r6, #0x0
	ldrsh	r0, [r7, r6]
	cmp	r1, r0
	blt	.L1597	@cond_branch
	cmp	r1, r0
	bne	.L1594	@cond_branch
	ldr	r7, [sp, #0xc]
	add	r0, r7, r2
	ldrh	r0, [r0]
	ldr	r1, [sp, #0x10]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L1594	@cond_branch
.L1597:
	add	r2, r5, #0
	cmp	r5, r4
	ble	.L1599	@cond_branch
	sub	r0, r5, #0x1
	mov	r6, sl
	add	r1, r0, r6
.L1601:
	ldrb	r0, [r1]
	strb	r0, [r1, #0x1]
	sub	r1, r1, #0x1
	sub	r2, r2, #0x1
	cmp	r2, r4
	bgt	.L1601	@cond_branch
.L1599:
	strb	r5, [r3]
	b	.L1593
.L1637:
	.align	2, 0
.L1636:
	.word	gContestantTurnOrder
	.word	gContestMonRound1Points
.L1594:
	add	r3, r3, #0x1
	add	r4, r4, #0x1
	cmp	r4, r5
	blt	.L1595	@cond_branch
.L1593:
	cmp	r4, r5
	bne	.L1590	@cond_branch
	mov	r7, r8
	strb	r5, [r7]
.L1590:
	mov	r0, #0x1
	add	r8, r8, r0
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1591	@cond_branch
	ldr	r4, .L1638
	mov	r0, sp
	add	r1, r4, #0
	mov	r2, #0x4
	bl	memcpy
	mov	r5, #0x0
.L1609:
	mov	r1, sp
	add	r0, r1, r5
	ldrb	r0, [r0]
	add	r0, r0, r4
	strb	r5, [r0]
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1609	@cond_branch
	b	.L1611
.L1639:
	.align	2, 0
.L1638:
	.word	gContestantTurnOrder
.L1587:
	mov	r0, sp
	mov	r1, #0xff
	mov	r2, #0x4
	bl	memset
	mov	r5, #0x0
	ldr	r3, .L1640
	mov	r6, #0x0
.L1615:
	ldr	r0, .L1640+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	add	r0, r6, r0
	ldrb	r0, [r0, #0xb]
	lsl	r0, r0, #0x1e
	lsr	r2, r0, #0x1e
	mov	r7, sp
	add	r1, r7, r2
	b	.L1635
.L1641:
	.align	2, 0
.L1640:
	.word	gContestantTurnOrder
	.word	gContestResources
.L1619:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r0, sp
	add	r1, r0, r2
.L1635:
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L1619	@cond_branch
	strb	r5, [r1]
	strb	r2, [r3]
	add	r3, r3, #0x1
	add	r6, r6, #0x1c
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1615	@cond_branch
	mov	r5, #0x0
.L1625:
	mov	r4, #0x3
	add	r1, r5, #0x1
	mov	sl, r1
	cmp	r4, r5
	ble	.L1624	@cond_branch
	mov	r9, r4
	ldr	r2, .L1642
	mov	r8, r2
	add	r3, sp, #0x4
	mov	ip, r3
.L1629:
	ldr	r6, .L1642+0x4
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r1, r0, #0
	sub	r1, r1, #0x1c
	ldrb	r2, [r1, #0xb]
	ldrb	r3, [r0, #0xb]
	mov	r1, r9
	and	r1, r1, r2
	mov	r0, r9
	and	r0, r0, r3
	sub	r3, r4, #0x1
	cmp	r1, r0
	bne	.L1628	@cond_branch
	mov	r0, r8
	add	r7, r3, r0
	add	r2, r4, r0
	ldrb	r6, [r7]
	ldrb	r1, [r2]
	cmp	r6, r1
	bcs	.L1628	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, ip
	lsl	r1, r4, #0x1
	add	r1, r1, ip
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L1628	@cond_branch
	ldrb	r0, [r2]
	strb	r6, [r2]
	strb	r0, [r7]
.L1628:
	add	r4, r3, #0
	cmp	r4, r5
	bgt	.L1629	@cond_branch
.L1624:
	mov	r5, sl
	cmp	r5, #0x2
	ble	.L1625	@cond_branch
.L1611:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1643:
	.align	2, 0
.L1642:
	.word	gContestantTurnOrder
	.word	gContestResources
.Lfe137:
	.size	 SortContestants,.Lfe137-SortContestants
	.align	2, 0
	.type	 DrawContestantWindows,function
	.thumb_func
DrawContestantWindows:
	push	{r4, r5, lr}
	mov	r4, #0x0
	mov	r5, #0xa0
.L1648:
	ldr	r0, .L1650
	add	r0, r5, r0
	ldr	r1, .L1650+0x4
	add	r1, r4, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x5
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadPalette
	add	r5, r5, #0x20
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1648	@cond_branch
	bl	DrawContestantWindowText
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1651:
	.align	2, 0
.L1650:
	.word	gHeap+0x1a004
	.word	gContestantTurnOrder
.Lfe138:
	.size	 DrawContestantWindows,.Lfe138-DrawContestantWindows
	.align	2, 0
	.type	 CalculateAppealMoveImpact,function
	.thumb_func
CalculateAppealMoveImpact:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L1690
	ldr	r3, [r4]
	ldr	r1, [r3, #0x4]
	lsl	r7, r6, #0x3
	sub	r0, r7, r6
	lsl	r5, r0, #0x2
	add	r1, r5, r1
	mov	r2, #0x0
	strh	r2, [r1, #0x2]
	ldr	r0, [r3, #0x4]
	add	r0, r5, r0
	strh	r2, [r0]
	add	r0, r6, #0
	bl	ContestantCanUseTurn
	lsl	r0, r0, #0x18
	mov	r8, r4
	cmp	r0, #0
	bne	.LCB14878
	b	.L1652	@long jump
.LCB14878:
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	add	r1, r5, r1
	ldrh	r0, [r1, #0x6]
	ldr	r2, .L1690+0x4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0]
	mov	r9, r2
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	strb	r0, [r1, #0xa]
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r2, r5, r0
	ldrh	r0, [r2, #0x6]
	ldrh	r1, [r2, #0x8]
	cmp	r0, r1
	bne	.L1654	@cond_branch
	cmp	r0, #0
	beq	.L1654	@cond_branch
	ldrb	r0, [r2, #0x15]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x15]
	ldr	r0, [r4]
	ldr	r2, [r0, #0x4]
	add	r2, r5, r2
	ldrb	r3, [r2, #0xb]
	lsl	r1, r3, #0x19
	lsr	r1, r1, #0x1d
	add	r1, r1, #0x1
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x4
	mov	r0, #0x71
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0xb]
	b	.L1655
.L1691:
	.align	2, 0
.L1690:
	.word	gContestResources
	.word	gContestMoves
.L1654:
	ldr	r4, .L1692
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	lsl	r3, r6, #0x3
	sub	r1, r3, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0xb]
	mov	r0, #0x71
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0xb]
	mov	r8, r4
	add	r7, r3, #0
.L1655:
	mov	r2, r8
	ldr	r4, [r2]
	ldr	r2, [r4, #0x4]
	sub	r0, r7, r6
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldr	r3, .L1692+0x4
	mov	r1, r9
	lsl	r5, r1, #0x2
	add	r3, r5, r3
	ldrb	r1, [r3, #0x1]
	strh	r1, [r2]
	ldr	r1, [r4, #0x4]
	add	r0, r0, r1
	ldrh	r1, [r0]
	strh	r1, [r0, #0x2]
	ldr	r1, [r4, #0x8]
	ldrb	r0, [r3, #0x2]
	strh	r0, [r1, #0x4]
	ldr	r1, [r4, #0x8]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r1, #0x6]
	ldr	r0, [r4, #0x8]
	strb	r6, [r0, #0x11]
	mov	r2, #0x0
	mov	r9, r5
	mov	r4, r8
	mov	r3, #0x0
	mov	r1, #0x0
.L1659:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r0, r1, r0
	strb	r3, [r0, #0xe]
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	add	r0, r0, #0xd
	add	r0, r0, r2
	strb	r3, [r0]
	add	r1, r1, #0x1c
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1659	@cond_branch
	ldr	r5, .L1692
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	sub	r0, r7, r6
	lsl	r4, r0, #0x2
	add	r2, r4, r1
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1661	@cond_branch
	ldrh	r0, [r2, #0x8]
	ldrh	r1, [r2, #0x6]
	bl	AreMovesContestCombo
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1661	@cond_branch
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x15]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x15]
.L1661:
	ldr	r0, .L1692+0x8
	add	r0, r0, r9
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L1692
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	sub	r0, r7, r6
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0x10
	bne	.L1662	@cond_branch
	ldrh	r1, [r2, #0x2]
	sub	r1, r1, #0xa
	mov	r0, #0xd
	ldrsb	r0, [r2, r0]
	b	.L1685
.L1693:
	.align	2, 0
.L1692:
	.word	gContestResources
	.word	gContestEffects
	.word	gContestEffectFuncs
.L1662:
	ldrb	r1, [r2, #0x11]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1664	@cond_branch
	mov	r1, #0xd
	ldrsb	r1, [r2, r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	b	.L1686
.L1664:
	mov	r0, #0xd
	ldrsb	r0, [r2, r0]
.L1686:
	ldrh	r1, [r2, #0x2]
.L1685:
	add	r0, r0, r1
	strh	r0, [r2, #0x2]
	ldr	r5, .L1694
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	sub	r0, r7, r6
	lsl	r4, r0, #0x2
	add	r1, r4, r1
	mov	r0, #0x0
	strb	r0, [r1, #0x16]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x15]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x15]
	add	r0, r6, #0
	bl	IsContestantAllowedToCombo
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1666	@cond_branch
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrh	r0, [r1, #0x8]
	ldrh	r1, [r1, #0x6]
	bl	AreMovesContestCombo
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L1667	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r2, r4, r0
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1667	@cond_branch
	strb	r3, [r2, #0x16]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r1, #0x15]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x15]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x15]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x15]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	mov	r1, #0x0
	ldrsh	r2, [r0, r1]
	ldrb	r1, [r0, #0x16]
	mul	r1, r1, r2
	strb	r1, [r0, #0x17]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r1, #0x15]
	mov	r2, #0x8
	b	.L1687
.L1695:
	.align	2, 0
.L1694:
	.word	gContestResources
.L1667:
	ldr	r2, .L1696
	ldr	r5, .L1696+0x4
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	sub	r0, r7, r6
	lsl	r4, r0, #0x2
	add	r3, r4, r1
	ldrh	r0, [r3, #0x6]
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L1669	@cond_branch
	ldrb	r0, [r3, #0x15]
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r3, #0x15]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r1, #0x15]
	mov	r2, #0x40
.L1687:
	orr	r0, r0, r2
	strb	r0, [r1, #0x15]
	b	.L1666
.L1697:
	.align	2, 0
.L1696:
	.word	gContestMoves
	.word	gContestResources
.L1669:
	ldrb	r1, [r3, #0x15]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3, #0x15]
.L1666:
	ldr	r5, .L1698
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	sub	r0, r7, r6
	lsl	r4, r0, #0x2
	add	r2, r4, r1
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x1
	mov	r8, r0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1671	@cond_branch
	ldrb	r0, [r2, #0xb]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1d
	add	r0, r0, #0x1
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	strb	r1, [r2, #0x18]
.L1671:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r2, r4, r0
	ldrb	r1, [r2, #0xc]
	mov	r0, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1672	@cond_branch
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x15]
	ldr	r2, [r5]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	mov	r1, #0x0
	strh	r1, [r0, #0x2]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	strh	r1, [r0]
.L1672:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	ldrh	r0, [r0, #0x6]
	bl	Contest_GetMoveExcitement
	ldr	r1, [r5]
	ldr	r1, [r1, #0x10]
	strb	r0, [r1]
	ldr	r2, [r5]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	ldrb	r1, [r0, #0x11]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1673	@cond_branch
	ldr	r0, [r2, #0x10]
	mov	r1, r8
	strb	r1, [r0]
.L1673:
	ldr	r1, [r5]
	ldr	r3, [r1, #0x10]
	mov	r0, #0x0
	ldrsb	r0, [r3, r0]
	cmp	r0, #0
	ble	.L1674	@cond_branch
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r1, #0x0
	ldrsb	r1, [r3, r1]
	add	r0, r0, r1
	cmp	r0, #0x4
	ble	.L1675	@cond_branch
	mov	r0, #0x3c
	b	.L1688
.L1699:
	.align	2, 0
.L1698:
	.word	gContestResources
.L1675:
	mov	r0, #0xa
	b	.L1688
.L1674:
	mov	r0, #0x0
.L1688:
	strb	r0, [r3, #0x2]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	b	.L1689
.L1683:
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1680:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L1679	@cond_branch
.L1689:
	cmp	r2, r6
	beq	.L1680	@cond_branch
	cmp	r0, #0
	bne	.L1683	@cond_branch
.L1679:
	ldr	r0, .L1700
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	sub	r0, r7, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r2, [r0, #0x1b]
.L1652:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1701:
	.align	2, 0
.L1700:
	.word	gContestResources
.Lfe139:
	.size	 CalculateAppealMoveImpact,.Lfe139-CalculateAppealMoveImpact
	.align	2, 0
	.globl	SetContestantEffectStringID
	.type	 SetContestantEffectStringID,function
	.thumb_func
SetContestantEffectStringID:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1703
	ldr	r2, [r2]
	ldr	r3, [r2, #0x4]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	strb	r1, [r2, #0x13]
	bx	lr
.L1704:
	.align	2, 0
.L1703:
	.word	gContestResources
.Lfe140:
	.size	 SetContestantEffectStringID,.Lfe140-SetContestantEffectStringID
	.align	2, 0
	.globl	SetContestantEffectStringID2
	.type	 SetContestantEffectStringID2,function
	.thumb_func
SetContestantEffectStringID2:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1706
	ldr	r2, [r2]
	ldr	r3, [r2, #0x4]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	strb	r1, [r2, #0x14]
	bx	lr
.L1707:
	.align	2, 0
.L1706:
	.word	gContestResources
.Lfe141:
	.size	 SetContestantEffectStringID2,.Lfe141-SetContestantEffectStringID2
	.align	2, 0
	.globl	SetStartledString
	.type	 SetStartledString,function
	.thumb_func
SetStartledString:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r1, #0
	cmp	r1, #0x3b
	bls	.L1709	@cond_branch
	mov	r1, #0x35
	bl	SetContestantEffectStringID
	b	.L1710
.L1709:
	cmp	r1, #0x27
	bls	.L1711	@cond_branch
	mov	r1, #0x34
	bl	SetContestantEffectStringID
	b	.L1710
.L1711:
	cmp	r1, #0x1d
	bls	.L1713	@cond_branch
	mov	r1, #0x33
	bl	SetContestantEffectStringID
	b	.L1710
.L1713:
	cmp	r1, #0x13
	bls	.L1715	@cond_branch
	mov	r1, #0x32
	bl	SetContestantEffectStringID
	b	.L1710
.L1715:
	cmp	r2, #0x9
	bls	.L1710	@cond_branch
	add	r0, r3, #0
	mov	r1, #0x31
	bl	SetContestantEffectStringID
.L1710:
	pop	{r0}
	bx	r0
.Lfe142:
	.size	 SetStartledString,.Lfe142-SetStartledString
	.align	2, 0
	.type	 PrintAppealMoveResultText,function
	.thumb_func
PrintAppealMoveResultText:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	ldr	r0, .L1727
	lsl	r1, r4, #0x6
	ldr	r2, .L1727+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r0, .L1727+0x8
	ldr	r5, .L1727+0xc
	ldr	r1, [r5]
	ldr	r2, [r1, #0x4]
	lsl	r1, r4, #0x3
	sub	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r1, #0x6]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	ldr	r2, .L1727+0x10
	add	r1, r1, r2
	bl	StringCopy
	ldr	r3, .L1727+0x14
	ldr	r1, [r5]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x6]
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1]
	lsl	r1, r0, #0x1d
	cmp	r1, #0
	bne	.L1719	@cond_branch
	ldr	r0, .L1727+0x18
	ldr	r1, .L1727+0x1c
	bl	StringCopy
	b	.L1720
.L1728:
	.align	2, 0
.L1727:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar2
	.word	gContestResources
	.word	gMoveNames
	.word	gContestMoves
	.word	gStringVar3
	.word	gText_Contest_Shyness
.L1719:
	lsr	r0, r1, #0x1d
	cmp	r0, #0x1
	bne	.L1721	@cond_branch
	ldr	r0, .L1729
	ldr	r1, .L1729+0x4
	bl	StringCopy
	b	.L1720
.L1730:
	.align	2, 0
.L1729:
	.word	gStringVar3
	.word	gText_Contest_Anxiety
.L1721:
	lsr	r0, r1, #0x1d
	cmp	r0, #0x2
	bne	.L1723	@cond_branch
	ldr	r0, .L1731
	ldr	r1, .L1731+0x4
	bl	StringCopy
	b	.L1720
.L1732:
	.align	2, 0
.L1731:
	.word	gStringVar3
	.word	gText_Contest_Laziness
.L1723:
	lsr	r0, r1, #0x1d
	cmp	r0, #0x3
	bne	.L1725	@cond_branch
	ldr	r0, .L1733
	ldr	r1, .L1733+0x4
	bl	StringCopy
	b	.L1720
.L1734:
	.align	2, 0
.L1733:
	.word	gStringVar3
	.word	gText_Contest_Hesitancy
.L1725:
	ldr	r0, .L1735
	ldr	r1, .L1735+0x4
	bl	StringCopy
.L1720:
	ldr	r4, .L1735+0x8
	ldr	r1, .L1735+0xc
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	bl	ContestClearGeneralTextWindow
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1736:
	.align	2, 0
.L1735:
	.word	gStringVar3
	.word	gText_Contest_Fear
	.word	gStringVar4
	.word	sAppealResultTexts
.Lfe143:
	.size	 PrintAppealMoveResultText,.Lfe143-PrintAppealMoveResultText
	.align	2, 0
	.globl	MakeContestantNervous
	.type	 MakeContestantNervous,function
	.thumb_func
MakeContestantNervous:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L1738
	ldr	r1, [r4]
	ldr	r3, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r3, r1, r3
	ldrb	r0, [r3, #0xc]
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r3, #0xc]
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0x6]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1739:
	.align	2, 0
.L1738:
	.word	gContestResources
.Lfe144:
	.size	 MakeContestantNervous,.Lfe144-MakeContestantNervous
	.align	2, 0
	.type	 ApplyNextTurnOrder,function
	.thumb_func
ApplyNextTurnOrder:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	mov	r0, #0x0
	mov	ip, r0
	mov	r4, #0x0
	ldr	r1, .L1777
	mov	r9, r1
	add	r2, sp, #0x4
	mov	r6, r9
	mov	r5, #0x0
	add	r3, r2, #0
.L1744:
	mov	r0, sp
	add	r1, r0, r4
	add	r0, r4, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, r4
	strb	r5, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1744	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L1777+0x4
	ldr	r1, [r7]
	mov	r8, r1
	add	r5, r2, #0
.L1749:
	mov	r2, #0x0
	mov	r0, r8
	ldr	r1, [r0, #0x4]
.L1753:
	ldrb	r0, [r1, #0x19]
	cmp	r0, r4
	beq	.L1776	@cond_branch
	add	r1, r1, #0x1c
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1753	@cond_branch
.L1751:
	cmp	r2, #0x4
	bne	.L1748	@cond_branch
	mov	r2, #0x0
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L1759	@cond_branch
	ldr	r0, [r7]
	ldr	r0, [r0, #0x4]
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0xff
	bne	.L1759	@cond_branch
	mov	ip, r2
	mov	r2, #0x1
	b	.L1758
.L1778:
	.align	2, 0
.L1777:
	.word	gContestantTurnOrder
	.word	gContestResources
.L1776:
	mov	r1, sp
	add	r0, r1, r2
	strb	r4, [r0]
	add	r1, r5, r2
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L1751
.L1759:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L1775	@cond_branch
	add	r0, r5, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1759	@cond_branch
	ldr	r0, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0xff
	bne	.L1759	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	add	r2, r2, #0x1
.L1758:
	cmp	r2, #0x3
	bgt	.L1775	@cond_branch
	ldr	r6, .L1779
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r3, r0, #0x2
.L1766:
	add	r0, r5, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1765	@cond_branch
	ldr	r0, [r7]
	ldr	r0, [r0, #0x4]
	add	r0, r3, r0
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0xff
	bne	.L1765	@cond_branch
	mov	r1, ip
	add	r0, r1, r6
	add	r1, r2, r6
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bls	.L1765	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
.L1765:
	add	r3, r3, #0x1c
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1766	@cond_branch
.L1775:
	mov	r0, sp
	add	r0, r0, ip
	strb	r4, [r0]
	mov	r0, ip
	add	r1, r5, r0
	mov	r0, #0x1
	strb	r0, [r1]
.L1748:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1749	@cond_branch
	mov	r4, #0x0
	ldr	r6, .L1779+0x4
	mov	r5, #0x0
.L1773:
	ldr	r0, [r6]
	ldr	r1, [r0, #0x8]
	add	r1, r1, r4
	mov	r0, sp
	add	r3, r0, r4
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r5, r0
	mov	r1, #0xff
	strb	r1, [r0, #0x19]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	add	r1, r5, r1
	ldrb	r2, [r1, #0x10]
	mov	r0, #0x3f
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
	mov	r0, r9
	add	r1, r4, r0
	ldrb	r0, [r3]
	strb	r0, [r1]
	add	r5, r5, #0x1c
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1773	@cond_branch
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1780:
	.align	2, 0
.L1779:
	.word	gContestantTurnOrder
	.word	gContestResources
.Lfe145:
	.size	 ApplyNextTurnOrder,.Lfe145-ApplyNextTurnOrder
	.align	2, 0
	.type	 SpriteCB_JudgeSpeechBubble,function
	.thumb_func
SpriteCB_JudgeSpeechBubble:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x30]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x54
	ble	.L1782	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L1783
	str	r0, [r2, #0x1c]
	ldr	r0, .L1783+0x4
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x6]
.L1782:
	pop	{r0}
	bx	r0
.L1784:
	.align	2, 0
.L1783:
	.word	SpriteCallbackDummy
	.word	gContestResources
.Lfe146:
	.size	 SpriteCB_JudgeSpeechBubble,.Lfe146-SpriteCB_JudgeSpeechBubble
	.align	2, 0
	.type	 DoJudgeSpeechBubble,function
	.thumb_func
DoJudgeSpeechBubble:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L1799
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r5, [r0, #0x12]
	cmp	r1, #0x8
	bls	.LCB16027
	b	.L1796	@long jump
.LCB16027:
	lsl	r0, r1, #0x2
	ldr	r1, .L1799+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1800:
	.align	2, 0
.L1799:
	.word	gContestResources
	.word	.L1797
	.align	2, 0
	.align	2, 0
.L1797:
	.word	.L1788
	.word	.L1788
	.word	.L1789
	.word	.L1790
	.word	.L1791
	.word	.L1792
	.word	.L1793
	.word	.L1796
	.word	.L1794
.L1788:
	ldr	r0, .L1801
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x2e]
	ldr	r2, .L1801+0x4
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1801+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x20
	bl	PlaySE
	b	.L1798
.L1802:
	.align	2, 0
.L1801:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1789:
	ldr	r0, .L1803
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0x4
	ldr	r3, .L1803+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1803+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x1f
	bl	PlaySE
	b	.L1798
.L1804:
	.align	2, 0
.L1803:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1790:
	ldr	r0, .L1805
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0x8
	ldr	r3, .L1805+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1805+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x1f
	bl	PlaySE
	b	.L1798
.L1806:
	.align	2, 0
.L1805:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1791:
	ldr	r0, .L1807
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0xc
	ldr	r3, .L1807+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1807+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x2d
	bl	PlaySE
	b	.L1798
.L1808:
	.align	2, 0
.L1807:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1792:
	ldr	r0, .L1809
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0xc
	ldr	r3, .L1809+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1809+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x2d
	bl	PlaySE
	b	.L1798
.L1810:
	.align	2, 0
.L1809:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1793:
	ldr	r0, .L1811
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0x10
	ldr	r3, .L1811+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1811+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x2d
	bl	PlaySE
	b	.L1798
.L1812:
	.align	2, 0
.L1811:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1794:
	ldr	r0, .L1813
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0x18
	ldr	r3, .L1813+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1813+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0xc3
	bl	PlaySE
	b	.L1798
.L1814:
	.align	2, 0
.L1813:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1796:
	ldr	r0, .L1815
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0x14
	ldr	r3, .L1815+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1815+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x2d
	bl	PlaySE
.L1798:
	add	r2, r4, #0
	ldr	r4, .L1815
	add	r2, r2, r5
	lsl	r2, r2, #0x2
	add	r1, r2, r4
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
	add	r1, r1, #0x3e
	ldrb	r3, [r1]
	sub	r0, r0, #0x5
	and	r0, r0, r3
	strb	r0, [r1]
	add	r4, r4, #0x1c
	add	r2, r2, r4
	ldr	r0, .L1815+0xc
	str	r0, [r2]
	ldr	r0, .L1815+0x10
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x6]
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r2, #0x6]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1816:
	.align	2, 0
.L1815:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_JudgeSpeechBubble
	.word	gContestResources
.Lfe147:
	.size	 DoJudgeSpeechBubble,.Lfe147-DoJudgeSpeechBubble
	.align	2, 0
	.type	 UpdateApplauseMeter,function
	.thumb_func
UpdateApplauseMeter:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r5, #0x0
	ldr	r6, .L1826
	ldr	r0, .L1826+0x4
	mov	r9, r0
	ldr	r0, .L1826+0x8
	mov	r8, r0
	ldr	r7, .L1826+0xc
.L1821:
	ldr	r0, [r6]
	ldr	r1, [r0]
	mov	r0, #0x13
	ldrsb	r0, [r1, r0]
	ldr	r4, .L1826+0x10
	cmp	r5, r0
	bge	.L1822	@cond_branch
	add	r4, r4, #0x40
.L1822:
	add	r0, r1, #0
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r0, r5, #0
	add	r0, r0, #0x11
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	add	r1, r1, r8
	add	r0, r4, #0
	add	r2, r7, #0
	bl	CpuSet
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldr	r1, [r6]
	ldr	r1, [r1]
	add	r1, r1, #0x58
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r2, r5, #0
	add	r2, r2, #0x19
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	add	r1, r1, r8
	add	r2, r7, #0
	bl	CpuSet
	ldr	r0, [r6]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x4
	ble	.L1820	@cond_branch
	bl	StartApplauseOverflowAnimation
.L1820:
	add	r5, r5, #0x1
	cmp	r5, #0x4
	ble	.L1821	@cond_branch
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1827:
	.align	2, 0
.L1826:
	.word	gContestResources
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
	.word	gContestApplauseMeterGfx
.Lfe148:
	.size	 UpdateApplauseMeter,.Lfe148-UpdateApplauseMeter
	.align	2, 0
	.globl	Contest_GetMoveExcitement
	.type	 Contest_GetMoveExcitement,function
	.thumb_func
Contest_GetMoveExcitement:
	lsl	r0, r0, #0x10
	ldr	r3, .L1829
	ldr	r1, .L1829+0x4
	lsr	r0, r0, #0xd
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1d
	ldr	r0, .L1829+0x8
	ldrh	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r3
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	bx	lr
.L1830:
	.align	2, 0
.L1829:
	.word	gContestExcitementTable
	.word	gContestMoves
	.word	gSpecialVar_ContestCategory
.Lfe149:
	.size	 Contest_GetMoveExcitement,.Lfe149-Contest_GetMoveExcitement
	.align	2, 0
	.type	 StartApplauseOverflowAnimation,function
	.thumb_func
StartApplauseOverflowAnimation:
	push	{r4, r5, lr}
	ldr	r0, .L1832
	mov	r1, #0xa
	bl	CreateTask
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L1832+0x4
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	mov	r0, #0x1
	strh	r0, [r4, #0xa]
	ldr	r0, .L1832+0x8
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0xc]
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1833:
	.align	2, 0
.L1832:
	.word	Task_ApplauseOverflowAnimation
	.word	gTasks
	.word	0xabe2
.Lfe150:
	.size	 StartApplauseOverflowAnimation,.Lfe150-StartApplauseOverflowAnimation
	.align	2, 0
	.type	 Task_ApplauseOverflowAnimation,function
	.thumb_func
Task_ApplauseOverflowAnimation:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1842
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1835	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x8]
	mov	r3, #0xe
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L1836	@cond_branch
	ldrh	r0, [r2, #0x10]
	add	r0, r0, #0x1
	b	.L1841
.L1843:
	.align	2, 0
.L1842:
	.word	gTasks
.L1836:
	ldrh	r0, [r2, #0x10]
	sub	r0, r0, #0x1
.L1841:
	strh	r0, [r2, #0x10]
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x4
	mov	r3, #0x84
	lsl	r3, r3, #0x1
	add	r6, r3, #0
	add	r0, r0, r6
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0x10]
	ldr	r3, .L1844
	mov	r1, #0x1
	bl	BlendPalette
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1839	@cond_branch
	cmp	r0, #0x10
	bne	.L1835	@cond_branch
.L1839:
	ldrh	r0, [r4, #0xe]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0xe]
	ldr	r0, .L1844+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x4
	bgt	.L1835	@cond_branch
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x1f
	bl	BlendPalette
	add	r0, r5, #0
	bl	DestroyTask
.L1835:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1845:
	.align	2, 0
.L1844:
	.word	0x7fff
	.word	gContestResources
.Lfe151:
	.size	 Task_ApplauseOverflowAnimation,.Lfe151-Task_ApplauseOverflowAnimation
	.align	2, 0
	.type	 SlideApplauseMeterIn,function
	.thumb_func
SlideApplauseMeterIn:
	push	{r4, lr}
	ldr	r0, .L1847
	mov	r1, #0xa
	bl	CreateTask
	ldr	r3, .L1847+0x4
	ldr	r4, .L1847+0x8
	ldr	r2, [r4]
	ldr	r0, [r2]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r1, .L1847+0xc
	strh	r1, [r0, #0x24]
	ldr	r0, [r2]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, [r4]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x6]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0x6]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1848:
	.align	2, 0
.L1847:
	.word	Task_SlideApplauseMeterIn
	.word	gSprites
	.word	gContestResources
	.word	0xffba
.Lfe152:
	.size	 SlideApplauseMeterIn,.Lfe152-SlideApplauseMeterIn
	.align	2, 0
	.type	 Task_SlideApplauseMeterIn,function
	.thumb_func
Task_SlideApplauseMeterIn:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r0, #0
	ldr	r4, .L1852
	ldr	r0, [r4]
	ldr	r0, [r0]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1852+0x4
	add	r2, r0, r1
	ldr	r0, .L1852+0x8
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r5, #0xd0
	lsl	r5, r5, #0x3
	add	r0, r5, #0
	ldrh	r5, [r1, #0x1c]
	add	r0, r0, r5
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r5, [r2, #0x24]
	add	r0, r0, r5
	strh	r0, [r2, #0x24]
	ldrb	r0, [r1, #0x1c]
	strh	r0, [r1, #0x1c]
	mov	r1, #0x24
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	ble	.L1850	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x24]
.L1850:
	mov	r5, #0x24
	ldrsh	r0, [r2, r5]
	cmp	r0, #0
	bne	.L1851	@cond_branch
	ldr	r0, [r4]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x6]
	add	r0, r3, #0
	bl	DestroyTask
.L1851:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1853:
	.align	2, 0
.L1852:
	.word	gContestResources
	.word	gSprites
	.word	gTasks
.Lfe153:
	.size	 Task_SlideApplauseMeterIn,.Lfe153-Task_SlideApplauseMeterIn
	.align	2, 0
	.type	 SlideApplauseMeterOut,function
	.thumb_func
SlideApplauseMeterOut:
	push	{r4, r5, lr}
	ldr	r5, .L1858
	ldr	r4, .L1858+0x4
	ldr	r0, [r4]
	ldr	r2, [r0]
	add	r0, r2, #0
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L1855	@cond_branch
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	b	.L1857
.L1859:
	.align	2, 0
.L1858:
	.word	gSprites
	.word	gContestResources
.L1855:
	ldr	r0, .L1860
	mov	r1, #0xa
	bl	CreateTask
	ldr	r2, [r4]
	ldr	r0, [r2]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
	ldr	r2, [r2]
	ldrb	r0, [r2, #0x6]
	mov	r1, #0x40
	orr	r0, r0, r1
.L1857:
	strb	r0, [r2, #0x6]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1861:
	.align	2, 0
.L1860:
	.word	Task_SlideApplauseMeterOut
.Lfe154:
	.size	 SlideApplauseMeterOut,.Lfe154-SlideApplauseMeterOut
	.align	2, 0
	.type	 Task_SlideApplauseMeterOut,function
	.thumb_func
Task_SlideApplauseMeterOut:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	ldr	r5, .L1865
	ldr	r0, [r5]
	ldr	r0, [r0]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1865+0x4
	add	r3, r0, r1
	ldr	r0, .L1865+0x8
	lsl	r2, r4, #0x2
	add	r2, r2, r4
	lsl	r2, r2, #0x3
	add	r2, r2, r0
	mov	r1, #0xd0
	lsl	r1, r1, #0x3
	add	r0, r1, #0
	ldrh	r1, [r2, #0x1c]
	add	r0, r0, r1
	strh	r0, [r2, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r3, #0x24]
	sub	r1, r1, r0
	strh	r1, [r3, #0x24]
	ldrb	r0, [r2, #0x1c]
	strh	r0, [r2, #0x1c]
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	mov	r1, #0x46
	neg	r1, r1
	cmp	r0, r1
	bge	.L1863	@cond_branch
	ldr	r0, .L1865+0xc
	strh	r0, [r3, #0x24]
.L1863:
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	cmp	r0, r1
	bne	.L1864	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x6]
	add	r0, r4, #0
	bl	DestroyTask
.L1864:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1866:
	.align	2, 0
.L1865:
	.word	gContestResources
	.word	gSprites
	.word	gTasks
	.word	0xffba
.Lfe155:
	.size	 Task_SlideApplauseMeterOut,.Lfe155-Task_SlideApplauseMeterOut
	.align	2, 0
	.type	 ShowAndUpdateApplauseMeter,function
	.thumb_func
ShowAndUpdateApplauseMeter:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L1868
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1868+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	strh	r4, [r1, #0x8]
	ldr	r0, .L1868+0x8
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x6]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2, #0x6]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1869:
	.align	2, 0
.L1868:
	.word	Task_ShowAndUpdateApplauseMeter
	.word	gTasks
	.word	gContestResources
.Lfe156:
	.size	 ShowAndUpdateApplauseMeter,.Lfe156-ShowAndUpdateApplauseMeter
	.align	2, 0
	.type	 Task_ShowAndUpdateApplauseMeter,function
	.thumb_func
Task_ShowAndUpdateApplauseMeter:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1881
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x1c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L1873	@cond_branch
	cmp	r0, #0x1
	bgt	.L1879	@cond_branch
	cmp	r0, #0
	beq	.L1872	@cond_branch
	b	.L1871
.L1882:
	.align	2, 0
.L1881:
	.word	gTasks
.L1879:
	cmp	r0, #0x2
	beq	.L1875	@cond_branch
	b	.L1871
.L1872:
	bl	SlideApplauseMeterIn
	b	.L1880
.L1873:
	ldr	r0, .L1883
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1871	@cond_branch
.L1880:
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	b	.L1871
.L1884:
	.align	2, 0
.L1883:
	.word	gContestResources
.L1875:
	ldrh	r0, [r4, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L1871	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1e]
	bl	UpdateApplauseMeter
	ldr	r0, .L1885
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x6]
	add	r0, r5, #0
	bl	DestroyTask
.L1871:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1886:
	.align	2, 0
.L1885:
	.word	gContestResources
.Lfe157:
	.size	 Task_ShowAndUpdateApplauseMeter,.Lfe157-Task_ShowAndUpdateApplauseMeter
	.align	2, 0
	.type	 HideApplauseMeterNoAnim,function
	.thumb_func
HideApplauseMeterNoAnim:
	ldr	r3, .L1888
	ldr	r0, .L1888+0x4
	ldr	r2, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
	ldr	r0, [r2]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.L1889:
	.align	2, 0
.L1888:
	.word	gSprites
	.word	gContestResources
.Lfe158:
	.size	 HideApplauseMeterNoAnim,.Lfe158-HideApplauseMeterNoAnim
	.align	2, 0
	.type	 ShowApplauseMeterNoAnim,function
	.thumb_func
ShowApplauseMeterNoAnim:
	ldr	r2, .L1891
	ldr	r0, .L1891+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.L1892:
	.align	2, 0
.L1891:
	.word	gSprites
	.word	gContestResources
.Lfe159:
	.size	 ShowApplauseMeterNoAnim,.Lfe159-ShowApplauseMeterNoAnim
	.align	2, 0
	.type	 AnimateAudience,function
	.thumb_func
AnimateAudience:
	push	{lr}
	ldr	r0, .L1894
	mov	r1, #0xf
	bl	CreateTask
	ldr	r0, .L1894+0x4
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x6]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x6]
	pop	{r0}
	bx	r0
.L1895:
	.align	2, 0
.L1894:
	.word	Task_AnimateAudience
	.word	gContestResources
.Lfe160:
	.size	 AnimateAudience,.Lfe160-AnimateAudience
	.align	2, 0
	.type	 Task_AnimateAudience,function
	.thumb_func
Task_AnimateAudience:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1901
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	ble	.L1897	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1898	@cond_branch
	ldr	r0, .L1901+0x4
	ldr	r1, .L1901+0x8
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	mov	r3, #0x1
	bl	RequestDma3Copy
	b	.L1899
.L1902:
	.align	2, 0
.L1901:
	.word	gTasks
	.word	gHeap+0x19000
	.word	0x6002000
.L1898:
	ldr	r0, .L1903
	ldr	r1, .L1903+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	mov	r3, #0x1
	bl	RequestDma3Copy
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
.L1899:
	ldr	r1, .L1903+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x1e]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0, #0x1e]
	mov	r1, #0x20
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x9
	bne	.L1897	@cond_branch
	ldr	r0, .L1903+0xc
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x6]
	add	r0, r5, #0
	bl	DestroyTask
.L1897:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1904:
	.align	2, 0
.L1903:
	.word	gHeap+0x18000
	.word	0x6002000
	.word	gTasks
	.word	gContestResources
.Lfe161:
	.size	 Task_AnimateAudience,.Lfe161-Task_AnimateAudience
	.align	2, 0
	.type	 BlendAudienceBackground,function
	.thumb_func
BlendAudienceBackground:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r0, .L1913
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r4, r4, #0x18
	cmp	r4, #0
	ble	.L1906	@cond_branch
	ldr	r7, .L1913+0x4
	lsl	r0, r5, #0x18
	add	r4, r0, #0
	cmp	r4, #0
	ble	.L1907	@cond_branch
	mov	r5, #0x0
	ldr	r2, .L1913+0x8
	ldr	r0, [r2]
	ldr	r0, [r0]
	mov	r1, #0x13
	ldrsb	r1, [r0, r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	b	.L1909
.L1914:
	.align	2, 0
.L1913:
	.word	Task_BlendAudienceBackground
	.word	0x237e
	.word	gContestResources
.L1907:
	ldr	r2, .L1915
	ldr	r0, [r2]
	ldr	r0, [r0]
	mov	r1, #0x13
	ldrsb	r1, [r0, r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r3, #0x0
	b	.L1909
.L1916:
	.align	2, 0
.L1915:
	.word	gContestResources
.L1906:
	mov	r7, #0x0
	lsl	r0, r5, #0x18
	add	r4, r0, #0
	cmp	r4, #0
	ble	.L1910	@cond_branch
	mov	r5, #0x0
	mov	r3, #0xc
	b	.L1912
.L1910:
	mov	r5, #0xc
	mov	r3, #0x0
.L1912:
	ldr	r2, .L1917
.L1909:
	ldr	r1, .L1917+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r7, [r0, #0x8]
	strh	r5, [r0, #0xa]
	asr	r1, r4, #0x18
	strh	r1, [r0, #0xc]
	strh	r3, [r0, #0xe]
	ldr	r0, [r2]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x7]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1918:
	.align	2, 0
.L1917:
	.word	gContestResources
	.word	gTasks
.Lfe162:
	.size	 BlendAudienceBackground,.Lfe162-BlendAudienceBackground
	.align	2, 0
	.type	 Task_BlendAudienceBackground,function
	.thumb_func
Task_BlendAudienceBackground:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L1925
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r3, #0x1c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L1920	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x1c]
	mov	r1, #0xc
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	ble	.L1921	@cond_branch
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	b	.L1924
.L1926:
	.align	2, 0
.L1925:
	.word	gTasks
.L1921:
	ldrh	r0, [r3, #0xa]
	sub	r0, r0, #0x1
.L1924:
	strh	r0, [r3, #0xa]
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r2
	ldrb	r2, [r4, #0xa]
	ldrh	r3, [r4, #0x8]
	mov	r0, #0x11
	mov	r1, #0x1
	bl	BlendPalette
	ldrb	r2, [r4, #0xa]
	ldrh	r3, [r4, #0x8]
	mov	r0, #0x1a
	mov	r1, #0x1
	bl	BlendPalette
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L1920	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r0, .L1927
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x7]
.L1920:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1928:
	.align	2, 0
.L1927:
	.word	gContestResources
.Lfe163:
	.size	 Task_BlendAudienceBackground,.Lfe163-Task_BlendAudienceBackground
	.align	2, 0
	.type	 ShowHideNextTurnGfx,function
	.thumb_func
ShowHideNextTurnGfx:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	mov	r5, #0x0
	ldr	r0, .L1938
	mov	r9, r0
	mov	r8, r9
	ldr	r6, .L1938+0x4
	mov	r4, #0x0
	mov	r7, #0x0
.L1933:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r0, r7, r0
	ldrb	r1, [r0, #0x10]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1934	@cond_branch
	mov	r2, sl
	cmp	r2, #0
	beq	.L1934	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetTurnOrderNumberGfx
	mov	r3, r8
	ldr	r1, [r3]
	ldr	r1, [r1, #0x14]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L1938+0x8
	add	r1, r1, r2
	ldr	r2, .L1938+0xc
	bl	CpuSet
	mov	r0, r8
	ldr	r3, [r0]
	ldr	r0, [r3, #0x14]
	add	r0, r4, r0
	ldrb	r0, [r0, #0x1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldr	r2, .L1938+0x10
	ldr	r0, .L1938+0x14
	add	r0, r5, r0
	ldrb	r0, [r0]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r1, #0x22]
	ldr	r0, [r3, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r3, #0x5
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	b	.L1937
.L1939:
	.align	2, 0
.L1938:
	.word	gContestResources
	.word	gSprites
	.word	0x60100c0
	.word	0x4000008
	.word	sNextTurnSpriteYPositions
	.word	gContestantTurnOrder
.L1934:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
.L1937:
	strb	r1, [r0]
	add	r4, r4, #0x4
	add	r7, r7, #0x1c
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1933	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe164:
	.size	 ShowHideNextTurnGfx,.Lfe164-ShowHideNextTurnGfx
	.align	2, 0
	.type	 GetTurnOrderNumberGfx,function
	.thumb_func
GetTurnOrderNumberGfx:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1944
	ldr	r1, [r1]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x40
	bne	.L1941	@cond_branch
	ldrb	r0, [r2, #0x19]
	lsl	r0, r0, #0x5
	ldr	r1, .L1944+0x4
	add	r0, r0, r1
	b	.L1943
.L1945:
	.align	2, 0
.L1944:
	.word	gContestResources
	.word	gContestNextTurnNumbersGfx
.L1941:
	ldr	r0, .L1946
.L1943:
	pop	{r1}
	bx	r1
.L1947:
	.align	2, 0
.L1946:
	.word	gContestNextTurnRandomGfx
.Lfe165:
	.size	 GetTurnOrderNumberGfx,.Lfe165-GetTurnOrderNumberGfx
	.align	2, 0
	.type	 DrawUnnervedSymbols,function
	.thumb_func
DrawUnnervedSymbols:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	mov	r7, #0x0
	mov	r0, #0x2
	mov	sl, r0
	mov	r0, #0x1
	mov	r8, r0
	mov	r0, #0x11
	mov	r9, r0
.L1952:
	ldr	r0, .L1955
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	add	r0, r0, #0xd
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1951	@cond_branch
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1951	@cond_branch
	ldr	r0, .L1955+0x4
	add	r0, r7, r0
	ldrb	r0, [r0]
	lsl	r5, r0, #0x2
	add	r5, r5, r0
	add	r6, r5, #0x2
	mov	r0, #0x3
	bl	GetStatusSymbolTileOffset
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, sl
	str	r0, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	mov	r0, r9
	str	r0, [sp, #0x8]
	mov	r0, r8
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x14
	add	r3, r6, #0
	bl	ContestBG_FillBoxWithIncrementingTile
	add	r4, r4, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r5, r5, #0x3
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, sl
	str	r0, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	mov	r0, r9
	str	r0, [sp, #0x8]
	mov	r0, r8
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x14
	add	r3, r5, #0
	bl	ContestBG_FillBoxWithIncrementingTile
	mov	r0, #0x63
	bl	PlaySE
.L1951:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L1952	@cond_branch
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1956:
	.align	2, 0
.L1955:
	.word	gContestResources
	.word	gContestantTurnOrder
.Lfe166:
	.size	 DrawUnnervedSymbols,.Lfe166-DrawUnnervedSymbols
	.align	2, 0
	.globl	IsContestantAllowedToCombo
	.type	 IsContestantAllowedToCombo,function
	.thumb_func
IsContestantAllowedToCombo:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1962
	ldr	r1, [r1]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r1, [r2, #0x15]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1959	@cond_branch
	ldrb	r1, [r2, #0xc]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1958	@cond_branch
.L1959:
	mov	r0, #0x0
	b	.L1961
.L1963:
	.align	2, 0
.L1962:
	.word	gContestResources
.L1958:
	mov	r0, #0x1
.L1961:
	pop	{r1}
	bx	r1
.Lfe167:
	.size	 IsContestantAllowedToCombo,.Lfe167-IsContestantAllowedToCombo
	.align	2, 0
	.type	 SetBgForCurtainDrop,function
	.thumb_func
SetBgForCurtainDrop:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	mov	r0, #0xa
	bl	GetGpuReg
	mov	r1, sp
	strh	r0, [r1]
	mov	r2, sp
	ldrb	r1, [r2]
	mov	r4, #0x4
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrb	r1, [r2]
	mov	r0, #0xd
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, sp
	ldrh	r1, [r0]
	mov	r0, #0xa
	bl	SetGpuReg
	mov	r0, #0x8
	bl	GetGpuReg
	mov	r6, sp
	add	r6, r6, #0x2
	strh	r0, [r6]
	mov	r0, #0xc
	bl	GetGpuReg
	add	r5, sp, #0x4
	strh	r0, [r5]
	ldrb	r1, [r6]
	add	r0, r4, #0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r6]
	ldrb	r0, [r5]
	and	r4, r4, r0
	orr	r4, r4, r1
	strb	r4, [r5]
	ldrh	r1, [r6]
	mov	r0, #0x8
	bl	SetGpuReg
	ldrh	r1, [r5]
	mov	r0, #0xc
	bl	SetGpuReg
	ldr	r1, .L1970
	mov	r0, #0xf0
	strh	r0, [r1]
	ldr	r4, .L1970+0x4
	mov	r0, #0xa0
	strh	r0, [r4]
	mov	r0, #0x14
	mov	r1, #0xf0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x16
	bl	SetGpuReg
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, sp, #0x8
	ldr	r4, .L1970+0x8
	ldr	r1, [r4]
	ldr	r1, [r1, #0x28]
	ldr	r2, .L1970+0xc
	bl	CpuSet
	ldr	r1, .L1970+0x10
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x1
	bl	Contest_SetBgCopyFlags
	mov	r5, #0x0
	ldr	r7, .L1970+0x14
	mov	r6, #0x4
.L1968:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	lsl	r3, r5, #0x2
	add	r0, r3, r0
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0x5]
	mov	r0, r8
	and	r0, r0, r2
	orr	r0, r0, r6
	strb	r0, [r1, #0x5]
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r3, r3, r0
	ldrb	r0, [r3, #0x1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0x5]
	mov	r0, r8
	and	r0, r0, r2
	orr	r0, r0, r6
	strb	r0, [r1, #0x5]
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1968	@cond_branch
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1971:
	.align	2, 0
.L1970:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gContestResources
	.word	0x5000400
	.word	gUnknown_08C17980
	.word	gSprites
.Lfe168:
	.size	 SetBgForCurtainDrop,.Lfe168-SetBgForCurtainDrop
	.align	2, 0
	.type	 UpdateContestantBoxOrder,function
	.thumb_func
UpdateContestantBoxOrder:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	ldr	r1, .L1978
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	mov	r0, #0x0
	mov	r3, #0x1
	bl	RequestDma3Fill
	mov	r5, #0x0
	str	r5, [sp]
	ldr	r6, .L1978+0x4
	ldr	r0, [r6]
	ldr	r1, [r0, #0x28]
	ldr	r2, .L1978+0x8
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x1
	bl	Contest_SetBgCopyFlags
	mov	r0, #0xa
	bl	GetGpuReg
	add	r3, sp, #0x4
	strh	r0, [r3]
	ldrb	r1, [r3]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r1, sp
	add	r1, r1, #0x5
	ldrb	r2, [r1]
	mov	r0, #0x3f
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r3]
	mov	r4, #0xd
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r1, [r3]
	mov	r0, #0xa
	bl	SetGpuReg
	ldr	r0, .L1978+0xc
	strh	r5, [r0]
	ldr	r0, .L1978+0x10
	strh	r5, [r0]
	ldr	r7, .L1978+0x14
.L1976:
	ldr	r0, [r6]
	ldr	r0, [r0, #0x14]
	lsl	r3, r5, #0x2
	add	r0, r3, r0
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0x5]
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x14]
	add	r3, r3, r0
	ldrb	r0, [r3, #0x1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0x5]
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1976	@cond_branch
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1979:
	.align	2, 0
.L1978:
	.word	0x6008000
	.word	gContestResources
	.word	0x5000400
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gSprites
.Lfe169:
	.size	 UpdateContestantBoxOrder,.Lfe169-UpdateContestantBoxOrder
	.align	2, 0
	.type	 Task_StartDropCurtainAtRoundEnd,function
	.thumb_func
Task_StartDropCurtainAtRoundEnd:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L1981
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L1981+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	mov	r0, #0x62
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	ldr	r1, .L1981+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1981+0xc
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1982:
	.align	2, 0
.L1981:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	Task_UpdateCurtainDropAtRoundEnd
.Lfe170:
	.size	 Task_StartDropCurtainAtRoundEnd,.Lfe170-Task_StartDropCurtainAtRoundEnd
	.align	2, 0
	.type	 Task_UpdateCurtainDropAtRoundEnd,function
	.thumb_func
Task_UpdateCurtainDropAtRoundEnd:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L1986
	ldrh	r0, [r1]
	sub	r0, r0, #0x7
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1984	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
.L1984:
	ldrh	r2, [r1]
	cmp	r2, #0
	bne	.L1985	@cond_branch
	ldr	r0, .L1986+0x4
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r2, [r1, #0x8]
	strh	r2, [r1, #0xa]
	strh	r2, [r1, #0xc]
	ldr	r0, .L1986+0x8
	str	r0, [r1]
.L1985:
	pop	{r0}
	bx	r0
.L1987:
	.align	2, 0
.L1986:
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	Task_ResetForNextRound
.Lfe171:
	.size	 Task_UpdateCurtainDropAtRoundEnd,.Lfe171-Task_UpdateCurtainDropAtRoundEnd
	.align	2, 0
	.type	 Task_ResetForNextRound,function
	.thumb_func
Task_ResetForNextRound:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L2007
	lsl	r3, r4, #0x2
	add	r0, r3, r4
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	cmp	r1, #0x1
	beq	.L1996	@cond_branch
	cmp	r1, #0x1
	bgt	.L2005	@cond_branch
	cmp	r1, #0
	beq	.L1990	@cond_branch
	b	.L1989
.L2008:
	.align	2, 0
.L2007:
	.word	gTasks
.L2005:
	cmp	r1, #0x2
	beq	.L2000	@cond_branch
	cmp	r1, #0x3
	beq	.L2002	@cond_branch
	b	.L1989
.L1990:
	mov	r2, #0x0
	add	r6, r3, #0
	ldr	r5, .L2009
	ldr	r3, .L2009+0x4
.L1994:
	ldr	r0, [r5]
	ldr	r1, [r0]
	add	r1, r1, #0x14
	add	r1, r1, r2
	add	r0, r2, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1994	@cond_branch
	bl	FillContestantWindowBgs
	bl	UpdateBlendTaskContestantsData
	bl	DrawConditionStars
	bl	DrawContestantWindows
	mov	r0, #0x1
	bl	ShowHideNextTurnGfx
	bl	UpdateSliderHeartSpriteYPositions
	ldr	r0, .L2009+0x8
	add	r1, r6, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L1989
.L2010:
	.align	2, 0
.L2009:
	.word	gContestResources
	.word	gContestantTurnOrder
	.word	gTasks
.L1996:
	ldr	r0, .L2011
	ldrb	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1997	@cond_branch
	ldr	r0, .L2011+0x4
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x7]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x7]
	bl	IsPlayerLinkLeader
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1998	@cond_branch
	bl	SetContestantStatusesForNextRound
.L1998:
	ldr	r4, .L2011+0x8
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2011+0xc
	add	r1, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	bl	ContestPrintLinkStandby
	mov	r0, #0x2
	strh	r0, [r5, #0x8]
	b	.L1989
.L2012:
	.align	2, 0
.L2011:
	.word	gLinkContestFlags
	.word	gContestResources
	.word	Task_LinkContest_CommunicateAppealsState
	.word	Task_EndWaitForLink
.L1997:
	bl	SetContestantStatusesForNextRound
	b	.L2006
.L2000:
	ldr	r0, .L2013
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1989	@cond_branch
.L2006:
	mov	r0, #0x3
	strh	r0, [r5, #0x8]
	b	.L1989
.L2014:
	.align	2, 0
.L2013:
	.word	gContestResources
.L2002:
	bl	DrawStatusSymbols
	bl	SwapMoveDescAndContestTilemaps
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	ldr	r0, .L2015
	str	r0, [r5]
.L1989:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2016:
	.align	2, 0
.L2015:
	.word	Task_WaitRaiseCurtainAtRoundEnd
.Lfe172:
	.size	 Task_ResetForNextRound,.Lfe172-Task_ResetForNextRound
	.align	2, 0
	.type	 Task_UpdateRaiseCurtainAtRoundEnd,function
	.thumb_func
Task_UpdateRaiseCurtainAtRoundEnd:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L2019
	ldrh	r0, [r1]
	add	r0, r0, #0x7
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa0
	ble	.L2018	@cond_branch
	ldr	r0, .L2019+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2019+0x8
	str	r0, [r1]
.L2018:
	pop	{r0}
	bx	r0
.L2020:
	.align	2, 0
.L2019:
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	Task_UpdateContestantBoxOrder
.Lfe173:
	.size	 Task_UpdateRaiseCurtainAtRoundEnd,.Lfe173-Task_UpdateRaiseCurtainAtRoundEnd
	.align	2, 0
	.type	 Task_WaitRaiseCurtainAtRoundEnd,function
	.thumb_func
Task_WaitRaiseCurtainAtRoundEnd:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2031
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r2, [r1, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x9
	bgt	.L2022	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0xc]
	b	.L2023
.L2032:
	.align	2, 0
.L2031:
	.word	gTasks
.L2022:
	ldrh	r3, [r1, #0xa]
	mov	r4, #0xa
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bne	.L2024	@cond_branch
	ldrh	r2, [r1, #0x8]
	mov	r4, #0x8
	ldrsh	r0, [r1, r4]
	cmp	r0, #0x10
	bne	.L2025	@cond_branch
	add	r0, r3, #0x1
	strh	r0, [r1, #0xa]
	b	.L2023
.L2025:
	add	r0, r2, #0x1
	b	.L2030
.L2024:
	ldrh	r0, [r1, #0x8]
	mov	r3, #0x8
	ldrsh	r2, [r1, r3]
	cmp	r2, #0
	bne	.L2028	@cond_branch
	strh	r2, [r1, #0xa]
	strh	r2, [r1, #0xc]
	ldr	r0, .L2033
	str	r0, [r1]
	b	.L2023
.L2034:
	.align	2, 0
.L2033:
	.word	Task_StartRaiseCurtainAtRoundEnd
.L2028:
	sub	r0, r0, #0x1
.L2030:
	strh	r0, [r1, #0x8]
.L2023:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe174:
	.size	 Task_WaitRaiseCurtainAtRoundEnd,.Lfe174-Task_WaitRaiseCurtainAtRoundEnd
	.align	2, 0
	.type	 Task_StartRaiseCurtainAtRoundEnd,function
	.thumb_func
Task_StartRaiseCurtainAtRoundEnd:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2038
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r1, [r4, #0xc]
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x9
	bgt	.L2036	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0xc]
	b	.L2037
.L2039:
	.align	2, 0
.L2038:
	.word	gTasks
.L2036:
	mov	r0, #0x0
	strh	r0, [r4, #0xc]
	mov	r0, #0x61
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	ldr	r0, .L2040
	str	r0, [r4]
.L2037:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2041:
	.align	2, 0
.L2040:
	.word	Task_UpdateRaiseCurtainAtRoundEnd
.Lfe175:
	.size	 Task_StartRaiseCurtainAtRoundEnd,.Lfe175-Task_StartRaiseCurtainAtRoundEnd
	.align	2, 0
	.type	 AnimateSliderHearts,function
	.thumb_func
AnimateSliderHearts:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r7, #0x0
	ldr	r6, .L2049
	ldr	r5, .L2049+0x4
.L2046:
	bl	AllocOamMatrix
	ldr	r1, [r5]
	ldr	r1, [r1, #0x14]
	lsl	r4, r7, #0x2
	add	r1, r4, r1
	ldrb	r1, [r1]
	lsl	r3, r1, #0x4
	add	r3, r3, r1
	lsl	r3, r3, #0x2
	add	r3, r3, r6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1f
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	ldrb	r1, [r3, #0x3]
	mov	r2, #0x3f
	neg	r2, r2
	mov	ip, r2
	mov	r2, ip
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x3]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r2, [r0, #0x1]
	mov	r3, #0x4
	neg	r3, r3
	add	r1, r3, #0
	and	r2, r2, r1
	mov	r1, #0x1
	orr	r2, r2, r1
	strb	r2, [r0, #0x1]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, r8
	bl	StartSpriteAffineAnim
	mov	r0, r8
	cmp	r0, #0x2
	bne	.L2045	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	AnimateSprite
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r3, #0x5
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	strb	r1, [r0]
.L2045:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L2046	@cond_branch
	ldr	r0, .L2049+0x8
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2049+0xc
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, r8
	strh	r0, [r1, #0x8]
	ldr	r0, .L2049+0x4
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x7]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x7]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2050:
	.align	2, 0
.L2049:
	.word	gSprites
	.word	gContestResources
	.word	Task_WaitForSliderHeartAnim
	.word	gTasks
.Lfe176:
	.size	 AnimateSliderHearts,.Lfe176-AnimateSliderHearts
	.align	2, 0
	.type	 Task_WaitForSliderHeartAnim,function
	.thumb_func
Task_WaitForSliderHeartAnim:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, .L2064
	ldr	r3, .L2064+0x4
	ldr	r0, [r3]
	ldr	r0, [r0, #0x14]
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L2052	@cond_branch
	ldr	r0, .L2064+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0x1
	bne	.L2053	@cond_branch
	mov	r4, #0x0
	add	r5, r2, #0
	mov	r2, #0x4
.L2057:
	ldr	r0, [r3]
	ldr	r1, [r0, #0x14]
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L2057	@cond_branch
.L2053:
	mov	r4, #0x0
.L2062:
	ldr	r5, .L2064+0x4
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L2064
	add	r0, r0, r1
	bl	FreeSpriteOamMatrix
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L2062	@cond_branch
	ldr	r0, [r5]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x7]
	add	r0, r6, #0
	bl	DestroyTask
.L2052:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2065:
	.align	2, 0
.L2064:
	.word	gSprites
	.word	gContestResources
	.word	gTasks
.Lfe177:
	.size	 Task_WaitForSliderHeartAnim,.Lfe177-Task_WaitForSliderHeartAnim
	.align	2, 0
	.type	 SanitizeMove,function
	.thumb_func
SanitizeMove:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r0, .L2068
	cmp	r1, r0
	bls	.L2067	@cond_branch
	mov	r1, #0x1
.L2067:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L2069:
	.align	2, 0
.L2068:
	.word	0x2f2
.Lfe178:
	.size	 SanitizeMove,.Lfe178-SanitizeMove
	.align	2, 0
	.type	 SanitizeSpecies,function
	.thumb_func
SanitizeSpecies:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r0, .L2072
	cmp	r1, r0
	bls	.L2071	@cond_branch
	mov	r1, #0x0
.L2071:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L2073:
	.align	2, 0
.L2072:
	.word	0x4b6
.Lfe179:
	.size	 SanitizeSpecies,.Lfe179-SanitizeSpecies
	.align	2, 0
	.type	 SetMoveSpecificAnimData,function
	.thumb_func
SetMoveSpecificAnimData:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L2101
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x6]
	bl	SanitizeMove
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r1, .L2101+0x4
	lsl	r0, r7, #0x6
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	bl	SanitizeSpecies
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, [r4]
	ldr	r0, [r0, #0x18]
	mov	r1, #0x0
	mov	r2, #0x14
	bl	memset
	bl	ClearBattleAnimationVars
	ldr	r1, .L2101+0x8
	mov	r2, #0x0
	add	r0, r1, #0x3
.L2078:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L2078	@cond_branch
	cmp	r5, #0x90
	beq	.L2086	@cond_branch
	cmp	r5, #0x90
	bgt	.L2097	@cond_branch
	cmp	r5, #0x4c
	beq	.L2092	@cond_branch
	cmp	r5, #0x4c
	bgt	.L2098	@cond_branch
	cmp	r5, #0xd
	beq	.L2092	@cond_branch
	b	.L2080
.L2102:
	.align	2, 0
.L2101:
	.word	gContestResources
	.word	gContestMons
	.word	gBattleMonForms
.L2098:
	cmp	r5, #0x82
	beq	.L2092	@cond_branch
	cmp	r5, #0x8f
	beq	.L2092	@cond_branch
	b	.L2080
.L2097:
	cmp	r5, #0xd8
	beq	.L2087	@cond_branch
	cmp	r5, #0xd8
	bgt	.L2099	@cond_branch
	cmp	r5, #0xae
	beq	.L2081	@cond_branch
	b	.L2080
.L2099:
	cmp	r5, #0xda
	beq	.L2088	@cond_branch
	mov	r0, #0x88
	lsl	r0, r0, #0x1
	cmp	r5, r0
	beq	.L2086	@cond_branch
	b	.L2080
.L2081:
	ldr	r0, .L2103
	lsl	r1, r6, #0x3
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x7
	beq	.L2083	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0x7
	bne	.L2093	@cond_branch
.L2083:
	ldr	r1, .L2103+0x4
	mov	r0, #0x0
	b	.L2100
.L2104:
	.align	2, 0
.L2103:
	.word	gBaseStats
	.word	gAnimMoveTurn
.L2086:
	ldr	r6, .L2105
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x1b]
	ldr	r5, .L2105+0x4
	lsl	r4, r4, #0x6
	add	r0, r4, r5
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	bl	SanitizeSpecies
	ldr	r2, [r6]
	ldr	r1, [r2, #0x18]
	strh	r0, [r1, #0x2]
	ldr	r2, [r2, #0x18]
	add	r5, r5, #0x38
	add	r4, r4, r5
	ldr	r0, [r4]
	str	r0, [r2, #0x10]
	ldrb	r0, [r2, #0x4]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x4]
	b	.L2080
.L2106:
	.align	2, 0
.L2105:
	.word	gContestResources
	.word	gContestMons
.L2087:
	ldr	r1, .L2107
	mov	r0, #0xff
	b	.L2100
.L2108:
	.align	2, 0
.L2107:
	.word	gAnimFriendship
.L2088:
	ldr	r1, .L2109
	mov	r0, #0x0
	b	.L2100
.L2110:
	.align	2, 0
.L2109:
	.word	gAnimFriendship
.L2092:
	ldr	r0, .L2111
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r2, r0, #0
	add	r2, r2, #0x5a
	ldrb	r1, [r2]
	cmp	r1, #0
	bne	.L2093	@cond_branch
	mov	r0, #0x2
	strb	r0, [r2]
	ldr	r0, .L2111+0x4
	strb	r1, [r0]
	b	.L2080
.L2112:
	.align	2, 0
.L2111:
	.word	gContestResources
	.word	gAnimMoveTurn
.L2093:
	ldr	r1, .L2113
	mov	r0, #0x1
.L2100:
	strb	r0, [r1]
.L2080:
	bl	SetBattleTargetSpritePosition
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2114:
	.align	2, 0
.L2113:
	.word	gAnimMoveTurn
.Lfe180:
	.size	 SetMoveSpecificAnimData,.Lfe180-SetMoveSpecificAnimData
	.align	2, 0
	.type	 ClearMoveAnimData,function
	.thumb_func
ClearMoveAnimData:
	push	{r4, lr}
	ldr	r4, .L2117
	ldr	r0, [r4]
	ldr	r0, [r0, #0x18]
	mov	r1, #0x0
	mov	r2, #0x14
	bl	memset
	ldr	r0, [r4]
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x5a
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L2116	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L2116:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2118:
	.align	2, 0
.L2117:
	.word	gContestResources
.Lfe181:
	.size	 ClearMoveAnimData,.Lfe181-ClearMoveAnimData
	.align	2, 0
	.type	 SetMoveAnimAttackerData,function
	.thumb_func
SetMoveAnimAttackerData:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r6, .L2120
	ldr	r0, [r6]
	ldr	r0, [r0, #0x18]
	strb	r4, [r0, #0x5]
	ldr	r5, .L2120+0x4
	lsl	r4, r4, #0x6
	add	r0, r4, r5
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	bl	SanitizeSpecies
	ldr	r2, [r6]
	ldr	r1, [r2, #0x18]
	strh	r0, [r1]
	ldr	r1, [r2, #0x18]
	add	r0, r5, #0
	add	r0, r0, #0x38
	add	r0, r4, r0
	ldr	r0, [r0]
	str	r0, [r1, #0x8]
	add	r5, r5, #0x3c
	add	r4, r4, r5
	ldr	r0, [r4]
	str	r0, [r1, #0xc]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2121:
	.align	2, 0
.L2120:
	.word	gContestResources
	.word	gContestMons
.Lfe182:
	.size	 SetMoveAnimAttackerData,.Lfe182-SetMoveAnimAttackerData
	.align	2, 0
	.type	 CreateInvisibleBattleTargetSprite,function
	.thumb_func
CreateInvisibleBattleTargetSprite:
	push	{lr}
	ldr	r0, .L2123
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L2123+0x4
	strb	r0, [r1, #0x3]
	ldr	r0, .L2123+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L2123+0xc
	add	r0, r0, r1
	bl	InitSpriteAffineAnim
	bl	SetBattleTargetSpritePosition
	pop	{r0}
	bx	r0
.L2124:
	.align	2, 0
.L2123:
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
	.word	gBattlerTarget
	.word	gSprites
.Lfe183:
	.size	 CreateInvisibleBattleTargetSprite,.Lfe183-CreateInvisibleBattleTargetSprite
	.align	2, 0
	.type	 SetBattleTargetSpritePosition,function
	.thumb_func
SetBattleTargetSpritePosition:
	push	{r4, lr}
	ldr	r0, .L2126
	ldrb	r0, [r0, #0x3]
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L2126+0x4
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0x3
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	mov	r0, #0x3
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2127:
	.align	2, 0
.L2126:
	.word	gBattlerSpriteIds
	.word	gSprites
.Lfe184:
	.size	 SetBattleTargetSpritePosition,.Lfe184-SetBattleTargetSpritePosition
	.align	2, 0
	.type	 SetMoveTargetPosition,function
	.thumb_func
SetMoveTargetPosition:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L2139
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0x20
	bhi	.L2136	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L2139+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2140:
	.align	2, 0
.L2139:
	.word	gBattleMoves
	.word	.L2137
	.align	2, 0
	.align	2, 0
.L2137:
	.word	.L2136
	.word	.L2136
	.word	.L2131
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2131
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
	.word	.L2136
.L2131:
	ldr	r1, .L2141
	mov	r0, #0x2
	b	.L2138
.L2142:
	.align	2, 0
.L2141:
	.word	gBattlerTarget
.L2136:
	ldr	r1, .L2143
	mov	r0, #0x3
.L2138:
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L2144:
	.align	2, 0
.L2143:
	.word	gBattlerTarget
.Lfe185:
	.size	 SetMoveTargetPosition,.Lfe185-SetMoveTargetPosition
	.align	2, 0
	.type	 Contest_PrintTextToBg0WindowStd,function
	.thumb_func
Contest_PrintTextToBg0WindowStd:
	push	{r4, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	str	r1, [sp]
	mov	r0, sp
	mov	r2, #0x0
	strb	r4, [r0, #0x4]
	mov	r1, #0x1
	strb	r1, [r0, #0x5]
	strb	r2, [r0, #0x6]
	strb	r1, [r0, #0x7]
	strb	r2, [r0, #0x8]
	strb	r1, [r0, #0x9]
	strb	r2, [r0, #0xa]
	strb	r2, [r0, #0xb]
	mov	r3, sp
	ldrb	r2, [r3, #0xc]
	sub	r1, r1, #0x11
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	mov	r2, sp
	mov	r0, #0xf0
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	mov	r1, sp
	mov	r0, #0x80
	strb	r0, [r1, #0xd]
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	Contest_SetBgCopyFlags
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe186:
	.size	 Contest_PrintTextToBg0WindowStd,.Lfe186-Contest_PrintTextToBg0WindowStd
	.align	2, 0
	.globl	Contest_PrintTextToBg0WindowAt
	.type	 Contest_PrintTextToBg0WindowAt,function
	.thumb_func
Contest_PrintTextToBg0WindowAt:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	ldr	r4, [sp, #0x1c]
	str	r1, [sp]
	mov	r0, sp
	mov	r1, #0x0
	strb	r5, [r0, #0x4]
	strb	r4, [r0, #0x5]
	strb	r2, [r0, #0x6]
	strb	r3, [r0, #0x7]
	strb	r2, [r0, #0x8]
	strb	r3, [r0, #0x9]
	strb	r1, [r0, #0xa]
	strb	r1, [r0, #0xb]
	mov	r3, sp
	ldrb	r2, [r3, #0xc]
	sub	r1, r1, #0x10
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	mov	r2, sp
	mov	r0, #0xf0
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	mov	r1, sp
	mov	r0, #0x80
	strb	r0, [r1, #0xd]
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r5, #0
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	Contest_SetBgCopyFlags
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe187:
	.size	 Contest_PrintTextToBg0WindowAt,.Lfe187-Contest_PrintTextToBg0WindowAt
	.align	2, 0
	.type	 Contest_StartTextPrinter,function
	.thumb_func
Contest_StartTextPrinter:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	str	r0, [sp]
	mov	r2, sp
	mov	r3, #0x0
	mov	r0, #0x4
	strb	r0, [r2, #0x4]
	mov	r0, sp
	mov	r5, #0x1
	strb	r5, [r0, #0x5]
	strb	r3, [r0, #0x6]
	strb	r5, [r0, #0x7]
	strb	r3, [r0, #0x8]
	strb	r5, [r0, #0x9]
	strb	r3, [r0, #0xa]
	strb	r3, [r0, #0xb]
	mov	r4, sp
	ldrb	r3, [r4, #0xc]
	mov	r2, #0x10
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r3
	strb	r0, [r4, #0xc]
	mov	r3, sp
	mov	r0, #0x10
	strb	r0, [r3, #0xc]
	ldrb	r0, [r3, #0xd]
	and	r2, r2, r0
	strb	r2, [r3, #0xd]
	mov	r2, sp
	mov	r0, #0x80
	strb	r0, [r2, #0xd]
	cmp	r1, #0
	bne	.L2148	@cond_branch
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	b	.L2149
.L2148:
	ldr	r0, .L2152
	ldrb	r1, [r0]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2150	@cond_branch
	mov	r1, #0x4
	b	.L2151
.L2153:
	.align	2, 0
.L2152:
	.word	gLinkContestFlags
.L2150:
	bl	GetPlayerTextSpeedDelay
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
.L2151:
	mov	r0, sp
	mov	r2, #0x0
	bl	AddTextPrinter
.L2149:
	mov	r0, #0x4
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	Contest_SetBgCopyFlags
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe188:
	.size	 Contest_StartTextPrinter,.Lfe188-Contest_StartTextPrinter
	.align	2, 0
	.type	 ContestBG_FillBoxWithIncrementingTile,function
	.thumb_func
ContestBG_FillBoxWithIncrementingTile:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	mov	r8, r0
	ldr	r0, [sp, #0x28]
	ldr	r4, [sp, #0x2c]
	ldr	r5, [sp, #0x30]
	ldr	r6, [sp, #0x34]
	mov	r7, r8
	lsl	r7, r7, #0x18
	lsr	r7, r7, #0x18
	mov	r8, r7
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	lsl	r6, r6, #0x10
	asr	r6, r6, #0x10
	str	r6, [sp, #0xc]
	mov	r0, r8
	bl	WriteSequenceToBgTilemapBuffer
	mov	r0, r8
	bl	Contest_SetBgCopyFlags
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe189:
	.size	 ContestBG_FillBoxWithIncrementingTile,.Lfe189-ContestBG_FillBoxWithIncrementingTile
	.align	2, 0
	.type	 ContestBG_FillBoxWithTile,function
	.thumb_func
ContestBG_FillBoxWithTile:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x20]
	ldr	r5, [sp, #0x24]
	ldr	r6, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r4, #0x0
	str	r4, [sp, #0xc]
	bl	ContestBG_FillBoxWithIncrementingTile
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe190:
	.size	 ContestBG_FillBoxWithTile,.Lfe190-ContestBG_FillBoxWithTile
	.align	2, 0
	.type	 Contest_RunTextPrinters,function
	.thumb_func
Contest_RunTextPrinters:
	push	{lr}
	bl	RunTextPrinters
	mov	r0, #0x4
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe191:
	.size	 Contest_RunTextPrinters,.Lfe191-Contest_RunTextPrinters
	.align	2, 0
	.type	 Contest_SetBgCopyFlags,function
	.thumb_func
Contest_SetBgCopyFlags:
	ldr	r2, .L2158
	mov	r1, #0x1
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	orr	r1, r1, r0
	strb	r1, [r2]
	bx	lr
.L2159:
	.align	2, 0
.L2158:
	.word	sContestBgCopyFlags
.Lfe192:
	.size	 Contest_SetBgCopyFlags,.Lfe192-Contest_SetBgCopyFlags
	.align	2, 0
	.globl	ResetContestLinkResults
	.type	 ResetContestLinkResults,function
	.thumb_func
ResetContestLinkResults:
	push	{r4, r5, r6, lr}
	mov	r0, #0x0
	ldr	r6, .L2171
	ldr	r5, .L2171+0x4
	mov	r4, #0x0
.L2164:
	add	r3, r0, #0x1
	lsl	r1, r0, #0x3
	mov	r2, #0x3
.L2168:
	ldr	r0, [r6]
	add	r0, r0, r5
	add	r0, r0, r1
	strh	r4, [r0]
	add	r1, r1, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L2168	@cond_branch
	add	r0, r3, #0
	cmp	r0, #0x4
	ble	.L2164	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2172:
	.align	2, 0
.L2171:
	.word	gSaveBlock2Ptr
	.word	0x5ac
.Lfe193:
	.size	 ResetContestLinkResults,.Lfe193-ResetContestLinkResults
	.align	2, 0
	.globl	sub_80DEDA8
	.type	 sub_80DEDA8,function
	.thumb_func
sub_80DEDA8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r1, .L2198
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L2175	@cond_branch
.L2176:
	add	r5, r5, #0x1
	cmp	r5, #0x2
	bgt	.L2175	@cond_branch
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2176	@cond_branch
.L2175:
	ldr	r0, [sp]
	cmp	r0, #0xff
	bne	.L2180	@cond_branch
	ldr	r0, .L2198+0x4
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L2180	@cond_branch
	mov	r0, #0x0
	b	.L2195
.L2199:
	.align	2, 0
.L2198:
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
.L2180:
	ldr	r0, .L2200
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L2181	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L2200+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2201:
	.align	2, 0
.L2200:
	.word	gSpecialVar_ContestCategory
	.word	.L2187
	.align	2, 0
	.align	2, 0
.L2187:
	.word	.L2181
	.word	.L2183
	.word	.L2184
	.word	.L2185
	.word	.L2186
.L2183:
	mov	r0, r8
	add	r0, r0, #0x3
	b	.L2196
.L2184:
	mov	r0, r8
	add	r0, r0, #0x6
	b	.L2196
.L2185:
	mov	r0, r8
	add	r0, r0, #0x9
	b	.L2196
.L2186:
	mov	r0, r8
	add	r0, r0, #0xc
.L2196:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L2181:
	ldr	r1, [sp]
	cmp	r1, #0xfe
	bne	.LCB19840
	b	.L2189	@long jump
.LCB19840:
	add	r0, r1, #0
	mov	r1, #0x1
	bl	sub_80DEFA8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r2, .L2202
	mov	sl, r2
	ldr	r0, [r2]
	mov	r3, r9
	lsl	r7, r3, #0x5
	ldr	r6, .L2202+0x4
	add	r2, r0, r6
	add	r2, r2, r7
	ldr	r4, .L2202+0x8
	lsl	r5, r5, #0x6
	add	r1, r4, #0
	add	r1, r1, #0x38
	add	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r2]
	add	r2, r0, r7
	add	r1, r5, r4
	ldrh	r1, [r1]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x15
	ldr	r3, .L2202+0xc
	add	r2, r2, r3
	strh	r1, [r2]
	ldr	r1, .L2202+0x10
	add	r2, r0, r1
	add	r2, r2, r7
	add	r1, r4, #0
	add	r1, r1, #0x3c
	add	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r2]
	add	r6, r7, r6
	add	r0, r0, r6
	add	r0, r0, #0xb
	add	r1, r4, #0x2
	add	r1, r5, r1
	bl	StringCopy
	mov	r2, sl
	ldr	r0, [r2]
	add	r0, r0, r6
	add	r0, r0, #0x16
	add	r4, r4, #0xd
	add	r5, r5, r4
	add	r1, r5, #0
	bl	StringCopy
	ldr	r0, .L2202+0x14
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2190	@cond_branch
	mov	r3, sl
	ldr	r0, [r3]
	add	r0, r0, r7
	ldr	r1, .L2202+0x18
	add	r0, r0, r1
	mov	r1, #0x4
	b	.L2197
.L2203:
	.align	2, 0
.L2202:
	.word	gSaveBlock1Ptr
	.word	0x2b10
	.word	gContestMons
	.word	0x2b18
	.word	0x2b14
	.word	gLinkContestFlags
	.word	0x2b2e
.L2190:
	mov	r2, sl
	ldr	r0, [r2]
	add	r0, r0, r7
	ldr	r1, .L2204
	ldrh	r1, [r1]
	ldr	r3, .L2204+0x4
	add	r0, r0, r3
.L2197:
	strb	r1, [r0]
	ldr	r0, [sp]
	cmp	r0, #0xff
	beq	.L2192	@cond_branch
	ldr	r0, .L2204+0x8
	ldr	r0, [r0]
	mov	r2, r9
	lsl	r1, r2, #0x5
	add	r0, r0, r1
	ldr	r1, .L2204+0xc
	ldrh	r1, [r1]
	ldr	r3, .L2204+0x10
	add	r0, r0, r3
	strb	r1, [r0]
	b	.L2194
.L2205:
	.align	2, 0
.L2204:
	.word	gSpecialVar_ContestRank
	.word	0x2b2e
	.word	gSaveBlock1Ptr
	.word	gSpecialVar_ContestCategory
	.word	0x2b1a
.L2192:
	ldr	r0, .L2206
	ldr	r0, [r0]
	mov	r2, r9
	lsl	r1, r2, #0x5
	add	r0, r0, r1
	ldr	r3, .L2206+0x4
	add	r0, r0, r3
	mov	r1, r8
	strb	r1, [r0]
	b	.L2194
.L2207:
	.align	2, 0
.L2206:
	.word	gSaveBlock1Ptr
	.word	0x2b1a
.L2189:
	ldr	r6, .L2208
	ldr	r4, .L2208+0x4
	lsl	r5, r5, #0x6
	add	r0, r4, #0
	add	r0, r0, #0x38
	add	r0, r5, r0
	ldr	r0, [r0]
	str	r0, [r6]
	add	r0, r4, #0
	add	r0, r0, #0x3c
	add	r0, r5, r0
	ldr	r0, [r0]
	str	r0, [r6, #0x4]
	add	r0, r5, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	strh	r0, [r6, #0x8]
	add	r0, r6, #0
	add	r0, r0, #0xb
	add	r1, r4, #0x2
	add	r1, r5, r1
	bl	StringCopy
	add	r0, r6, #0
	add	r0, r0, #0x16
	add	r4, r4, #0xd
	add	r5, r5, r4
	add	r1, r5, #0
	bl	StringCopy
	mov	r2, r8
	strb	r2, [r6, #0xa]
.L2194:
	mov	r0, #0x1
.L2195:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2209:
	.align	2, 0
.L2208:
	.word	gCurContestWinner
	.word	gContestMons
.Lfe194:
	.size	 sub_80DEDA8,.Lfe194-sub_80DEDA8
	.align	2, 0
	.globl	sub_80DEFA8
	.type	 sub_80DEFA8,function
	.thumb_func
sub_80DEFA8:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r0, #0x3
	bgt	.L2222	@cond_branch
	cmp	r0, #0
	blt	.L2222	@cond_branch
	cmp	r1, #0
	beq	.L2216	@cond_branch
	mov	r2, #0x5
	ldr	r0, .L2233
	mov	ip, r0
	ldr	r4, .L2233+0x4
	ldr	r3, .L2233+0x8
.L2220:
	mov	r1, ip
	ldr	r0, [r1]
	lsl	r1, r2, #0x5
	add	r1, r1, r0
	add	r0, r1, r4
	add	r1, r1, r3
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6}
	stmia	r0!, {r5, r6}
	sub	r2, r2, #0x1
	cmp	r2, #0
	bgt	.L2220	@cond_branch
.L2216:
	mov	r0, #0x0
	b	.L2232
.L2234:
	.align	2, 0
.L2233:
	.word	gSaveBlock1Ptr
	.word	0x2b10
	.word	0x2af0
.L2222:
	ldr	r0, .L2235
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L2229	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L2235+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2236:
	.align	2, 0
.L2235:
	.word	gSpecialVar_ContestCategory
	.word	.L2230
	.align	2, 0
	.align	2, 0
.L2230:
	.word	.L2224
	.word	.L2225
	.word	.L2226
	.word	.L2227
	.word	.L2229
.L2224:
	mov	r0, #0x8
	b	.L2232
.L2225:
	mov	r0, #0x9
	b	.L2232
.L2226:
	mov	r0, #0xa
	b	.L2232
.L2227:
	mov	r0, #0xb
	b	.L2232
.L2229:
	mov	r0, #0xc
.L2232:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe195:
	.size	 sub_80DEFA8,.Lfe195-sub_80DEFA8
	.align	2, 0
	.globl	ClearContestWinnerPicsInContestHall
	.type	 ClearContestWinnerPicsInContestHall,function
	.thumb_func
ClearContestWinnerPicsInContestHall:
	push	{r4, r5, r6, r7, lr}
	mov	r2, #0x0
	ldr	r0, .L2243
	mov	ip, r0
	ldr	r4, .L2243+0x4
	ldr	r3, .L2243+0x8
.L2241:
	mov	r1, ip
	ldr	r0, [r1]
	lsl	r1, r2, #0x5
	add	r0, r0, r1
	add	r0, r0, r4
	add	r1, r3, #0
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6}
	stmia	r0!, {r5, r6}
	add	r3, r3, #0x20
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L2241	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2244:
	.align	2, 0
.L2243:
	.word	gSaveBlock1Ptr
	.word	0x2b10
	.word	gDefaultContestWinners
.Lfe196:
	.size	 ClearContestWinnerPicsInContestHall,.Lfe196-ClearContestWinnerPicsInContestHall
	.align	2, 0
	.type	 SetContestLiveUpdateFlags,function
	.thumb_func
SetContestLiveUpdateFlags:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r2, .L2262
	ldr	r3, [r2]
	ldr	r5, [r3, #0x10]
	ldrb	r1, [r5, #0x1]
	mov	r7, #0x1
	add	r0, r7, #0
	and	r0, r0, r1
	add	r6, r2, #0
	cmp	r0, #0
	bne	.L2246	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r5, r0]
	cmp	r0, #0
	ble	.L2246	@cond_branch
	ldr	r1, [r3, #0x4]
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2246	@cond_branch
	ldr	r1, [r3, #0x1c]
	lsl	r2, r4, #0x4
	add	r1, r2, r1
	ldrb	r3, [r1, #0xc]
	mov	r0, #0x1
	orr	r0, r0, r3
	strb	r0, [r1, #0xc]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x1c]
	add	r2, r2, r0
	ldrb	r0, [r2, #0xe]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0xe]
.L2246:
	ldr	r3, [r6]
	ldr	r1, [r3, #0x4]
	lsl	r2, r4, #0x3
	sub	r0, r2, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	add	r7, r2, #0
	cmp	r0, #0
	beq	.L2247	@cond_branch
	ldr	r0, [r3, #0x1c]
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xc]
	mov	r0, #0x2
	orr	r0, r0, r2
	strb	r0, [r1, #0xc]
.L2247:
	ldr	r3, [r6]
	ldr	r2, [r3, #0x10]
	ldrb	r1, [r2, #0x1]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2248	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r0, #0
	beq	.L2248	@cond_branch
	mov	r0, #0x2
	ldrsb	r0, [r2, r0]
	cmp	r0, #0x3c
	bne	.L2248	@cond_branch
	ldr	r0, [r3, #0x1c]
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xc]
	mov	r0, #0x4
	orr	r0, r0, r2
	strb	r0, [r1, #0xc]
.L2248:
	ldr	r3, [r6]
	ldr	r1, [r3, #0x4]
	sub	r0, r7, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2249	@cond_branch
	ldrb	r0, [r2, #0x16]
	cmp	r0, #0
	beq	.L2249	@cond_branch
	ldr	r0, [r3, #0x1c]
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xc]
	mov	r0, #0x8
	orr	r0, r0, r2
	strb	r0, [r1, #0xc]
.L2249:
	mov	r3, #0x0
	mov	r5, #0x0
.L2253:
	cmp	r3, r4
	beq	.L2252	@cond_branch
	ldr	r1, [r6]
	ldr	r0, [r1, #0x4]
	add	r0, r5, r0
	ldrb	r0, [r0, #0xe]
	cmp	r0, #0
	beq	.L2252	@cond_branch
	ldr	r0, [r1, #0x1c]
	lsl	r2, r4, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0xc]
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r2, #0xc]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x1c]
	lsl	r2, r3, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0xc]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0xc]
.L2252:
	add	r5, r5, #0x1c
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L2253	@cond_branch
	ldr	r2, [r6]
	ldr	r1, [r2, #0x4]
	sub	r0, r7, r4
	lsl	r5, r0, #0x2
	add	r1, r5, r1
	ldrb	r3, [r1, #0xc]
	mov	r0, #0x6
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L2257	@cond_branch
	ldrb	r1, [r1, #0xb]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2256	@cond_branch
.L2257:
	ldr	r0, [r2, #0x1c]
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xc]
	mov	r0, #0x20
	orr	r0, r0, r2
	strb	r0, [r1, #0xc]
	b	.L2258
.L2263:
	.align	2, 0
.L2262:
	.word	gContestResources
.L2256:
	mov	r0, #0x1
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L2258	@cond_branch
	ldr	r2, [r2, #0x1c]
	lsl	r3, r4, #0x4
	add	r2, r3, r2
	ldrb	r0, [r2, #0xc]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0xc]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x1c]
	add	r1, r3, r1
	ldrb	r0, [r1, #0xe]
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r1, #0xe]
	ldr	r1, [r6]
	ldr	r0, [r1, #0x1c]
	add	r3, r3, r0
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1
	add	r3, r3, r0
	ldr	r0, [r1, #0x4]
	add	r0, r5, r0
	ldrh	r0, [r0, #0x6]
	strh	r0, [r3]
.L2258:
	ldr	r2, [r6]
	ldr	r1, [r2, #0x4]
	sub	r0, r7, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2260	@cond_branch
	ldr	r0, [r2, #0x1c]
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xd]
	mov	r0, #0x2
	orr	r0, r0, r2
	strb	r0, [r1, #0xd]
.L2260:
	ldr	r2, [r6]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x4
	bne	.L2261	@cond_branch
	ldr	r3, [r2, #0x10]
	ldrb	r1, [r3, #0x1]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2261	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r3, r0]
	cmp	r0, #0
	bge	.L2261	@cond_branch
	ldr	r0, [r2, #0x1c]
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xd]
	mov	r0, #0x20
	orr	r0, r0, r2
	strb	r0, [r1, #0xd]
.L2261:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe197:
	.size	 SetContestLiveUpdateFlags,.Lfe197-SetContestLiveUpdateFlags
	.align	2, 0
	.type	 CalculateContestLiveUpdateData,function
	.thumb_func
CalculateContestLiveUpdateData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	mov	r1, #0x0
	mov	r0, #0x0
	str	r0, [sp, #0x20]
	mov	r4, #0x0
	ldr	r6, .L2323
	mov	r2, sp
	add	r2, r2, #0xc
	str	r2, [sp, #0x28]
	mov	r3, sp
	add	r3, r3, #0x14
	str	r3, [sp, #0x2c]
	mov	r7, sp
	add	r7, r7, #0x2
	str	r7, [sp, #0x24]
	ldr	r5, .L2323+0x4
	mov	r2, #0x0
	mov	r3, #0x80
	lsl	r3, r3, #0x11
.L2268:
	add	r0, r4, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2269	@cond_branch
	lsr	r0, r2, #0x18
	str	r0, [sp, #0x20]
	b	.L2267
.L2324:
	.align	2, 0
.L2323:
	.word	gContestResources
	.word	gContestFinalStandings
.L2269:
	cmp	r0, #0x3
	bne	.L2267	@cond_branch
	lsr	r1, r2, #0x18
.L2267:
	add	r2, r2, r3
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L2268	@cond_branch
	ldr	r0, [r6]
	ldr	r0, [r0, #0x1c]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xd]
	mov	r0, #0x1
	orr	r0, r0, r2
	strb	r0, [r1, #0xd]
	mov	r4, #0x0
	ldr	r1, [sp, #0x20]
	lsl	r1, r1, #0x4
	str	r1, [sp, #0x30]
	mov	r9, r4
	mov	sl, r4
.L2276:
	ldr	r2, [sp, #0x20]
	cmp	r4, r2
	beq	.L2277	@cond_branch
	ldr	r1, .L2325
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	mov	r3, #0x0
	ldrsh	r2, [r0, r3]
	add	r1, r1, sl
	mov	r6, #0x0
	ldrsh	r0, [r1, r6]
	sub	r2, r2, r0
	cmp	r2, #0x32
	bgt	.L2277	@cond_branch
	ldr	r7, .L2325+0x4
	ldr	r0, [r7]
	ldr	r2, [r0, #0x1c]
	add	r2, r2, r9
	ldrb	r0, [r2, #0xd]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0xd]
.L2277:
	ldr	r1, .L2325+0x4
	ldr	r0, [r1]
	ldr	r0, [r0, #0x1c]
	mov	r3, r9
	add	r2, r3, r0
	ldrb	r1, [r2, #0xe]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2278	@cond_branch
	ldrb	r0, [r2, #0xd]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0xd]
.L2278:
	mov	r5, #0x0
	ldr	r2, .L2325+0x8
	add	r2, r2, sl
	mov	r6, #0x0
	ldrsh	r1, [r2, r6]
	ldr	r7, .L2325+0x8
	mov	r3, #0x0
	ldrsh	r0, [r7, r3]
	cmp	r1, r0
	blt	.L2280	@cond_branch
	add	r3, r2, #0
	add	r2, r7, #0
.L2281:
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	bgt	.L2280	@cond_branch
	mov	r6, #0x0
	ldrsh	r1, [r3, r6]
	mov	r7, #0x0
	ldrsh	r0, [r2, r7]
	cmp	r1, r0
	bge	.L2281	@cond_branch
.L2280:
	cmp	r5, #0x4
	bne	.L2285	@cond_branch
	ldr	r1, .L2325+0xc
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L2285	@cond_branch
	ldr	r2, .L2325+0x4
	ldr	r0, [r2]
	ldr	r2, [r0, #0x1c]
	add	r2, r2, r9
	ldrb	r0, [r2, #0xd]
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r2, #0xd]
.L2285:
	mov	r3, #0x0
	mov	ip, r3
	mov	r8, r3
	mov	r5, #0x0
	ldr	r0, .L2325+0x8
	add	r0, r0, sl
	mov	r7, #0x0
	ldrsh	r6, [r0, r7]
	str	r6, [sp, #0x34]
	ldr	r2, .L2325+0x8
	ldr	r0, .L2325+0x10
	mov	r1, sl
	add	r6, r1, r0
	add	r3, r0, #0
.L2289:
	mov	r7, #0x0
	ldrsh	r0, [r2, r7]
	ldr	r1, [sp, #0x34]
	cmp	r1, r0
	ble	.L2290	@cond_branch
	mov	r7, #0x1
	mov	ip, r7
.L2290:
	mov	r0, #0x0
	ldrsh	r1, [r6, r0]
	mov	r7, #0x0
	ldrsh	r0, [r3, r7]
	cmp	r1, r0
	ble	.L2288	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
.L2288:
	add	r2, r2, #0x2
	add	r3, r3, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L2289	@cond_branch
	mov	r1, ip
	cmp	r1, #0
	bne	.L2293	@cond_branch
	mov	r2, r8
	cmp	r2, #0
	bne	.L2293	@cond_branch
	ldr	r3, .L2325+0x4
	ldr	r0, [r3]
	ldr	r2, [r0, #0x1c]
	add	r2, r2, r9
	ldrb	r0, [r2, #0xd]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0xd]
.L2293:
	ldr	r6, .L2325+0x4
	ldr	r0, [r6]
	ldr	r0, [r0, #0x1c]
	mov	r7, r9
	add	r2, r7, r0
	ldrb	r1, [r2, #0xe]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2275	@cond_branch
	ldrb	r0, [r2, #0xd]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0xd]
.L2275:
	mov	r0, #0x10
	add	r9, r9, r0
	mov	r1, #0x2
	add	sl, sl, r1
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.LCB20795
	b	.L2276	@long jump
.LCB20795:
	mov	r4, #0x0
	mov	r5, #0x0
	mov	r3, #0x0
	ldr	r2, [sp, #0x28]
	mov	r1, sp
.L2299:
	strh	r3, [r1]
	add	r0, r2, r4
	strb	r5, [r0]
	add	r1, r1, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x4
	ble	.L2299	@cond_branch
	mov	r1, sp
	ldr	r0, .L2325+0x14
	strh	r0, [r1, #0xa]
	mov	r0, #0x0
	ldr	r2, [sp, #0x28]
	strb	r0, [r2, #0x5]
	mov	r4, #0x0
	ldr	r0, .L2325+0x4
	ldr	r0, [r0]
	mov	r8, r0
	ldr	r7, [sp, #0x30]
.L2304:
	mov	r3, r8
	ldr	r0, [r3, #0x1c]
	add	r0, r7, r0
	lsl	r1, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	add	r4, r4, #0x1
	mov	ip, r4
	cmp	r0, #0
	beq	.L2303	@cond_branch
	ldr	r0, .L2325+0x4
	ldr	r6, [r0]
	ldr	r3, [sp, #0x28]
	mov	r4, sp
	mov	r5, #0x4
.L2309:
	ldr	r0, [r6, #0x1c]
	add	r0, r7, r0
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldrh	r2, [r4]
	cmp	r0, r2
	beq	.L2310	@cond_branch
	cmp	r2, #0
	bne	.L2308	@cond_branch
	strh	r0, [r4]
.L2310:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
.L2308:
	add	r3, r3, #0x1
	add	r4, r4, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L2309	@cond_branch
.L2303:
	mov	r4, ip
	cmp	r4, #0x4
	ble	.L2304	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0]
	ldr	r6, [sp, #0x2c]
	strh	r0, [r6]
	ldr	r7, [sp, #0x28]
	ldrb	r3, [r7]
	mov	r6, #0x0
	mov	r4, #0x1
	ldr	r1, [sp, #0x24]
	ldrh	r0, [r1]
	ldr	r1, .L2325+0x14
	cmp	r0, r1
	beq	.L2316	@cond_branch
	ldr	r5, [sp, #0x2c]
	add	r7, r1, #0
	mov	r2, sp
	add	r2, r2, #0x2
.L2318:
	ldr	r0, [sp, #0x28]
	add	r1, r0, r4
	ldrb	r0, [r1]
	cmp	r3, r0
	bcs	.L2319	@cond_branch
	ldrh	r0, [r2]
	strh	r0, [r5]
	ldrb	r3, [r1]
	mov	r6, #0x1
	b	.L2317
.L2326:
	.align	2, 0
.L2325:
	.word	gContestMonTotalPoints
	.word	gContestResources
	.word	gContestMonRound1Points
	.word	gContestFinalStandings
	.word	gContestMonRound2Points
	.word	0xffff
.L2319:
	cmp	r3, r0
	bne	.L2317	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r5, r0
	ldrh	r1, [r2]
	strh	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L2317:
	add	r2, r2, #0x2
	add	r4, r4, #0x1
	ldrh	r0, [r2]
	cmp	r0, r7
	bne	.L2318	@cond_branch
.L2316:
	bl	Random
	ldr	r1, .L2327
	ldr	r1, [r1]
	ldr	r4, [r1, #0x1c]
	ldr	r1, [sp, #0x30]
	add	r4, r1, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	__modsi3
	lsl	r0, r0, #0x1
	ldr	r2, [sp, #0x2c]
	add	r0, r2, r0
	ldrh	r0, [r0]
	strh	r0, [r4, #0xa]
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2328:
	.align	2, 0
.L2327:
	.word	gContestResources
.Lfe198:
	.size	 CalculateContestLiveUpdateData,.Lfe198-CalculateContestLiveUpdateData
	.align	2, 0
	.type	 SetConestLiveUpdateTVData,function
	.thumb_func
SetConestLiveUpdateTVData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	ldr	r1, .L2375
	ldr	r0, .L2375+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB21038
	b	.L2329	@long jump
.LCB21038:
	mov	r7, #0x0
	mov	r3, #0x0
	ldr	r0, .L2375+0x8
	mov	ip, r0
.L2334:
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2333	@cond_branch
	lsl	r0, r3, #0x18
	lsr	r7, r0, #0x18
.L2333:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L2334	@cond_branch
	mov	r1, #0x0
	mov	r9, r1
	mov	sl, r1
	mov	r3, #0x0
	lsl	r2, r7, #0x1
	lsl	r4, r7, #0x4
	mov	r8, r4
	ldr	r1, .L2375+0xc
	add	r0, r2, r1
	mov	r6, #0x0
	ldrsh	r5, [r0, r6]
	str	r5, [sp, #0x8]
	add	r5, r1, #0
	ldr	r0, .L2375+0x10
	add	r2, r2, r0
	add	r4, r0, #0
.L2340:
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	ldr	r6, [sp, #0x8]
	cmp	r6, r0
	bge	.L2341	@cond_branch
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L2341:
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	mov	r6, #0x0
	ldrsh	r0, [r4, r6]
	cmp	r1, r0
	bge	.L2339	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
.L2339:
	add	r5, r5, #0x2
	add	r4, r4, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L2340	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r0, [r0, #0x1c]
	add	r0, r0, r8
	ldrb	r1, [r0, #0xc]
	mov	r4, #0x0
	mov	r2, #0x1
	mov	r3, #0x7
.L2347:
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L2346	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L2346:
	lsr	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L2347	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	__modsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L2375+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x1c]
	add	r0, r0, r8
	ldrb	r1, [r0, #0xc]
	mov	r4, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2352	@cond_branch
	cmp	r5, #0
	beq	.L2351	@cond_branch
.L2355:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L2352:
	lsr	r1, r1, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r3, #0x1
	cmp	r3, #0x7
	bgt	.L2351	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2352	@cond_branch
	cmp	r5, r4
	bne	.L2355	@cond_branch
.L2351:
	mov	r1, #0x1
	add	r0, r1, #0
	lsl	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r7, #0
	bne	.L2357	@cond_branch
	mov	r0, sp
	strb	r1, [r0]
	ldr	r1, .L2375+0x8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x1c]
	ldrb	r4, [r0, #0x1d]
	mov	r3, #0x2
	b	.L2374
.L2376:
	.align	2, 0
.L2375:
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gContestResources
	.word	gContestMonRound1Points
	.word	gContestMonRound2Points
.L2357:
	mov	r1, sp
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L2377
	ldr	r0, [r1]
	ldr	r0, [r0, #0x1c]
	ldrb	r4, [r0, #0xd]
	mov	r3, #0x1
.L2374:
	mov	ip, r1
	mov	r5, #0x1
	lsl	r2, r2, #0x18
	str	r2, [sp, #0x4]
	cmp	r3, #0x3
	bgt	.L2360	@cond_branch
.L2362:
	cmp	r3, r7
	beq	.L2361	@cond_branch
	mov	r6, ip
	ldr	r2, [r6]
	ldr	r0, [r2, #0x1c]
	lsl	r1, r3, #0x4
	add	r0, r1, r0
	ldrb	r0, [r0, #0xd]
	cmp	r4, r0
	bcs	.L2364	@cond_branch
	mov	r0, sp
	strb	r3, [r0]
	ldr	r0, [r2, #0x1c]
	add	r0, r1, r0
	ldrb	r4, [r0, #0xd]
	mov	r5, #0x1
	b	.L2361
.L2378:
	.align	2, 0
.L2377:
	.word	gContestResources
.L2364:
	cmp	r4, r0
	bne	.L2361	@cond_branch
	mov	r1, sp
	add	r0, r1, r5
	strb	r3, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L2361:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L2362	@cond_branch
.L2360:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	bl	__modsi3
	add	r0, r0, sp
	ldrb	r6, [r0]
	mov	r2, #0x80
	mov	r3, #0x0
	ldr	r5, .L2379
	ldr	r0, [r5]
	ldr	r0, [r0, #0x1c]
	lsl	r1, r6, #0x4
	add	r0, r1, r0
	ldrb	r0, [r0, #0xd]
	and	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L2369	@cond_branch
.L2370:
	lsr	r2, r2, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x7
	bgt	.L2369	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x1c]
	add	r0, r1, r0
	ldrb	r4, [r0, #0xd]
	and	r4, r4, r2
	cmp	r4, #0
	beq	.L2370	@cond_branch
.L2369:
	mov	r0, r9
	bl	ContestLiveUpdates_Init
	mov	r0, sl
	bl	ContestLiveUpdates_SetRound2Placing
	ldr	r5, [sp, #0x4]
	lsr	r0, r5, #0x18
	bl	ContestLiveUpdates_SetWinnerAppealFlag
	ldr	r0, .L2379
	ldr	r0, [r0]
	ldr	r0, [r0, #0x1c]
	add	r0, r0, r8
	ldrh	r0, [r0, #0xa]
	bl	ContestLiveUpdates_SetWinnerMoveUsed
	add	r0, r4, #0
	add	r1, r6, #0
	bl	ContestLiveUpdates_SetLoserData
.L2329:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2380:
	.align	2, 0
.L2379:
	.word	gContestResources
.Lfe199:
	.size	 SetConestLiveUpdateTVData,.Lfe199-SetConestLiveUpdateTVData
	.align	2, 0
	.globl	ContestDebugToggleBitfields
	.type	 ContestDebugToggleBitfields,function
	.thumb_func
ContestDebugToggleBitfields:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L2389
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r2, r0, r1
	ldrb	r1, [r2]
	add	r4, r0, #0
	cmp	r1, #0
	bne	.L2382	@cond_branch
	cmp	r3, #0
	bne	.L2383	@cond_branch
	mov	r0, #0x2
	b	.L2388
.L2390:
	.align	2, 0
.L2389:
	.word	gHeap
.L2383:
	mov	r0, #0x3
	b	.L2388
.L2382:
	mov	r0, #0x0
.L2388:
	strb	r0, [r2]
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2386	@cond_branch
	bl	DrawContestantWindowText
	bl	SwapMoveDescAndContestTilemaps
	b	.L2387
.L2386:
	bl	ContestDebugPrintBitStrings
.L2387:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe200:
	.size	 ContestDebugToggleBitfields,.Lfe200-ContestDebugToggleBitfields
	.align	2, 0
	.type	 ContestDebugPrintBitStrings,function
	.thumb_func
ContestDebugPrintBitStrings:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x34
	ldr	r0, .L2431
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB21460
	b	.L2391	@long jump
.LCB21460:
	ldr	r0, .L2431+0x4
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	ldrb	r0, [r0]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.LCB21471
	b	.L2391	@long jump
.LCB21471:
	mov	r7, #0x0
	mov	r2, sp
	add	r2, r2, #0x18
	str	r2, [sp, #0x30]
.L2397:
	add	r0, r7, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x3
	bls	.L2397	@cond_branch
	ldr	r0, .L2431+0x4
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L2399	@cond_branch
	mov	r7, #0x0
	mov	r2, #0x7
	mov	sl, r2
	ldr	r0, [sp, #0x30]
	mov	r9, r0
.L2403:
	add	r0, sp, #0x4
	ldr	r1, .L2431+0x8
	bl	StringCopy
	add	r5, r0, #0
	ldr	r0, .L2431+0xc
	add	r0, r7, r0
	ldrb	r0, [r0]
	mov	r1, sl
	str	r1, [sp]
	add	r1, sp, #0x4
	mov	r2, #0x5
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	ldr	r0, .L2431+0x10
	ldr	r0, [r0]
	ldr	r1, [r0, #0x1c]
	lsl	r0, r7, #0x4
	add	r0, r0, r1
	ldrb	r4, [r0, #0xc]
	mov	r6, #0x7
	add	r2, r7, #0x1
	mov	r8, r2
.L2407:
	mov	r1, #0x1
	and	r1, r1, r4
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	add	r5, r0, #0
	lsr	r4, r4, #0x1
	lsl	r0, r6, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r6, r0, #0x18
	asr	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	cmp	r0, r2
	bgt	.L2407	@cond_branch
	mov	r6, #0x0
	ldr	r4, .L2431+0xc
	ldr	r3, [sp, #0x30]
.L2412:
	lsl	r0, r6, #0x18
	asr	r0, r0, #0x18
	add	r2, r3, r0
	mov	r1, sp
	add	r1, r1, r0
	add	r1, r1, #0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	asr	r5, r0, #0x18
	cmp	r5, #0x4
	ble	.L2412	@cond_branch
	mov	r0, r9
	add	r1, r0, r5
	mov	r0, #0xff
	strb	r0, [r1]
	add	r4, r7, r4
	ldrb	r0, [r4]
	mov	r1, sl
	str	r1, [sp]
	mov	r1, r9
	mov	r2, #0x5
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	ldrb	r0, [r4]
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x4
	mov	r2, sl
	str	r2, [sp]
	mov	r2, #0x37
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x3
	bls	.L2403	@cond_branch
	b	.L2415
.L2432:
	.align	2, 0
.L2431:
	.word	gEnableContestDebugging
	.word	gHeap
	.word	gText_CDot
	.word	gContestantTurnOrder
	.word	gContestResources
.L2399:
	mov	r7, #0x0
	mov	r2, sp
	add	r2, r2, #0x6
	str	r2, [sp, #0x2c]
	ldr	r0, [sp, #0x30]
	mov	r9, r0
	mov	r1, #0x7
	mov	sl, r1
.L2419:
	add	r0, sp, #0x4
	ldr	r1, .L2433
	bl	StringCopy
	ldr	r0, .L2433+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x1c]
	lsl	r0, r7, #0x4
	add	r0, r0, r1
	ldrb	r4, [r0, #0xd]
	ldr	r5, [sp, #0x2c]
	mov	r6, #0x7
	add	r2, r7, #0x1
	mov	r8, r2
.L2423:
	mov	r1, #0x1
	and	r1, r1, r4
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	add	r5, r0, #0
	lsr	r4, r4, #0x1
	lsl	r0, r6, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r6, r0, #0x18
	asr	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	cmp	r0, r2
	bgt	.L2423	@cond_branch
	mov	r6, #0x0
	ldr	r4, .L2433+0x8
	ldr	r3, [sp, #0x30]
.L2428:
	lsl	r0, r6, #0x18
	asr	r0, r0, #0x18
	add	r2, r3, r0
	mov	r1, sp
	add	r1, r1, r0
	add	r1, r1, #0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	asr	r5, r0, #0x18
	cmp	r5, #0x4
	ble	.L2428	@cond_branch
	mov	r0, r9
	add	r1, r0, r5
	mov	r0, #0xff
	strb	r0, [r1]
	add	r4, r7, r4
	ldrb	r0, [r4]
	mov	r1, sl
	str	r1, [sp]
	mov	r1, r9
	mov	r2, #0x5
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	ldrb	r0, [r4]
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x4
	mov	r2, sl
	str	r2, [sp]
	mov	r2, #0x37
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x3
	bls	.L2419	@cond_branch
.L2415:
	bl	SwapMoveDescAndContestTilemaps
.L2391:
	add	sp, sp, #0x34
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2434:
	.align	2, 0
.L2433:
	.word	gText_BDot
	.word	gContestResources
	.word	gContestantTurnOrder
.Lfe201:
	.size	 ContestDebugPrintBitStrings,.Lfe201-ContestDebugPrintBitStrings
	.align	2, 0
	.type	 GetMonNicknameLanguage,function
	.thumb_func
GetMonNicknameLanguage:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x2
	ldrb	r0, [r4]
	cmp	r0, #0xfc
	bne	.L2436	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x15
	bne	.L2436	@cond_branch
	mov	r0, #0x2
	b	.L2445
.L2436:
	add	r0, r4, #0
	bl	StringLength
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5
	bhi	.L2437	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L2437	@cond_branch
.L2440:
	ldrb	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x45
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x33
	bls	.L2442	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x5f
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x9
	bls	.L2442	@cond_branch
	add	r0, r1, #0
	cmp	r0, #0
	beq	.L2442	@cond_branch
	cmp	r0, #0xad
	beq	.L2442	@cond_branch
	cmp	r0, #0xb8
	beq	.L2442	@cond_branch
	cmp	r0, #0xab
	beq	.L2442	@cond_branch
	cmp	r0, #0xac
	beq	.L2442	@cond_branch
	cmp	r0, #0xb5
	beq	.L2442	@cond_branch
	cmp	r0, #0xb6
	beq	.L2442	@cond_branch
	cmp	r0, #0xba
	beq	.L2442	@cond_branch
	cmp	r0, #0xae
	beq	.L2442	@cond_branch
	cmp	r0, #0xb0
	beq	.L2442	@cond_branch
	cmp	r0, #0xb1
	beq	.L2442	@cond_branch
	cmp	r0, #0xb2
	beq	.L2442	@cond_branch
	cmp	r0, #0xb3
	beq	.L2442	@cond_branch
	cmp	r0, #0xb1
	bne	.L2441	@cond_branch
.L2442:
	add	r4, r4, #0x1
	ldrb	r0, [r4]
	cmp	r0, #0xff
	bne	.L2440	@cond_branch
	b	.L2437
.L2441:
	mov	r5, #0x1
.L2437:
	add	r0, r5, #0
.L2445:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe202:
	.size	 GetMonNicknameLanguage,.Lfe202-GetMonNicknameLanguage
	.align	2, 0
	.type	 StripPlayerNameForLinkContest,function
	.thumb_func
StripPlayerNameForLinkContest:
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xff
	strb	r1, [r0, #0x5]
	strb	r2, [r0, #0x7]
	bx	lr
.Lfe203:
	.size	 StripPlayerNameForLinkContest,.Lfe203-StripPlayerNameForLinkContest
	.align	2, 0
	.type	 StripMonNameForLinkContest,function
	.thumb_func
StripMonNameForLinkContest:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	bl	StripExtCtrlCodes
	cmp	r4, #0x1
	bne	.L2448	@cond_branch
	mov	r0, #0xff
	strb	r0, [r5, #0x5]
	mov	r0, #0xfc
	strb	r0, [r5, #0xa]
	b	.L2449
.L2448:
	ldrb	r1, [r5, #0x5]
	mov	r0, #0xff
	strb	r0, [r5, #0x5]
	strb	r1, [r5, #0xa]
.L2449:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe204:
	.size	 StripMonNameForLinkContest,.Lfe204-StripMonNameForLinkContest
	.align	2, 0
	.globl	StripPlayerAndMonNamesForLinkContest
	.type	 StripPlayerAndMonNamesForLinkContest,function
	.thumb_func
StripPlayerAndMonNamesForLinkContest:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	add	r4, r5, #0x2
	cmp	r6, #0x1
	bne	.L2451	@cond_branch
	add	r0, r4, #0
	bl	GetMonNicknameLanguage
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	ConvertInternationalString
	b	.L2452
.L2451:
	ldrb	r0, [r4, #0xa]
	cmp	r0, #0xfc
	bne	.L2453	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ConvertInternationalString
	b	.L2452
.L2453:
	strb	r0, [r4, #0x5]
	mov	r0, #0xff
	strb	r0, [r4, #0xa]
.L2452:
	add	r4, r5, #0
	add	r4, r4, #0xd
	cmp	r6, #0x1
	bne	.L2455	@cond_branch
	mov	r0, #0xff
	strb	r0, [r4, #0x7]
	ldrb	r0, [r4, #0x4]
	strb	r0, [r4, #0x6]
	ldrb	r0, [r4, #0x3]
	strb	r0, [r4, #0x5]
	ldrb	r0, [r4, #0x2]
	strb	r0, [r4, #0x4]
	ldrb	r0, [r4, #0x1]
	strb	r0, [r4, #0x3]
	ldrb	r0, [r5, #0xd]
	strb	r0, [r4, #0x2]
	mov	r0, #0x15
	strb	r0, [r4, #0x1]
	mov	r0, #0xfc
	strb	r0, [r5, #0xd]
	b	.L2456
.L2455:
	ldrb	r0, [r4, #0x7]
	strb	r0, [r4, #0x5]
	mov	r0, #0xff
	strb	r0, [r4, #0x7]
.L2456:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe205:
	.size	 StripPlayerAndMonNamesForLinkContest,.Lfe205-StripPlayerAndMonNamesForLinkContest
	.comm	gContestRngValue, 4	@ 4
.text
	.align	2, 0

