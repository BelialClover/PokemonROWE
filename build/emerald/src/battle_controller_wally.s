@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sWallyBufferCommands,object
	.size	 sWallyBufferCommands,232
sWallyBufferCommands:
	.word	WallyHandleGetMonData
	.word	WallyHandleGetRawMonData
	.word	WallyHandleSetMonData
	.word	WallyHandleSetRawMonData
	.word	WallyHandleLoadMonSprite
	.word	WallyHandleSwitchInAnim
	.word	WallyHandleReturnMonToBall
	.word	WallyHandleDrawTrainerPic
	.word	WallyHandleTrainerSlide
	.word	WallyHandleTrainerSlideBack
	.word	WallyHandleFaintAnimation
	.word	WallyHandlePaletteFade
	.word	WallyHandleSuccessBallThrowAnim
	.word	WallyHandleBallThrowAnim
	.word	WallyHandlePause
	.word	WallyHandleMoveAnimation
	.word	WallyHandlePrintString
	.word	WallyHandlePrintSelectionString
	.word	WallyHandleChooseAction
	.word	WallyHandleUnknownYesNoBox
	.word	WallyHandleChooseMove
	.word	WallyHandleChooseItem
	.word	WallyHandleChoosePokemon
	.word	WallyHandleCmd23
	.word	WallyHandleHealthBarUpdate
	.word	WallyHandleExpUpdate
	.word	WallyHandleStatusIconUpdate
	.word	WallyHandleStatusAnimation
	.word	WallyHandleStatusXor
	.word	WallyHandleDataTransfer
	.word	WallyHandleDMA3Transfer
	.word	WallyHandlePlayBGM
	.word	WallyHandleCmd32
	.word	WallyHandleTwoReturnValues
	.word	WallyHandleChosenMonReturnValue
	.word	WallyHandleOneReturnValue
	.word	WallyHandleOneReturnValue_Duplicate
	.word	WallyHandleCmd37
	.word	WallyHandleCmd38
	.word	WallyHandleCmd39
	.word	WallyHandleCmd40
	.word	WallyHandleHitAnimation
	.word	WallyHandleCmd42
	.word	WallyHandlePlaySE
	.word	WallyHandlePlayFanfareOrBGM
	.word	WallyHandleFaintingCry
	.word	WallyHandleIntroSlide
	.word	WallyHandleIntroTrainerBallThrow
	.word	WallyHandleDrawPartyStatusSummary
	.word	WallyHandleHidePartyStatusSummary
	.word	WallyHandleEndBounceEffect
	.word	WallyHandleSpriteInvisibility
	.word	WallyHandleBattleAnimation
	.word	WallyHandleLinkStandbyMsg
	.word	WallyHandleResetActionMoveSelection
	.word	WallyHandleCmd55
	.word	WallyHandleBattleDebug
	.word	WallyCmdEnd
.text
	.align	2, 0
	.type	 SpriteCB_Null7,function
	.thumb_func
SpriteCB_Null7:
	bx	lr
.Lfe1:
	.size	 SpriteCB_Null7,.Lfe1-SpriteCB_Null7
	.align	2, 0
	.globl	SetControllerToWally
	.type	 SetControllerToWally,function
	.thumb_func
SetControllerToWally:
	ldr	r1, .L4
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L4+0x8
	str	r1, [r0]
	ldr	r2, .L4+0xc
	ldr	r0, [r2]
	add	r0, r0, #0x8d
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0x8e
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0x8f
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0x90
	strb	r1, [r0]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	WallyBufferRunCommand
	.word	gBattleStruct
.Lfe2:
	.size	 SetControllerToWally,.Lfe2-SetControllerToWally
	.align	2, 0
	.type	 WallyBufferRunCommand,function
	.thumb_func
WallyBufferRunCommand:
	push	{lr}
	ldr	r2, .L10
	ldr	r1, .L10+0x4
	ldr	r0, .L10+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L7	@cond_branch
	ldr	r0, .L10+0xc
	ldr	r0, [r0]
	lsl	r1, r3, #0x9
	add	r0, r0, #0x20
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0x39
	bhi	.L8	@cond_branch
	ldr	r0, .L10+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L7
.L11:
	.align	2, 0
.L10:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleResources
	.word	sWallyBufferCommands
.L8:
	bl	WallyBufferExecCompleted
.L7:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 WallyBufferRunCommand,.Lfe3-WallyBufferRunCommand
	.align	2, 0
	.type	 WallyHandleActions,function
	.thumb_func
WallyHandleActions:
	push	{r4, r5, lr}
	ldr	r1, .L28
	ldr	r0, [r1]
	add	r0, r0, #0x8d
	ldrb	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0x5
	bls	.LCB112
	b	.L13	@long jump
.LCB112:
	lsl	r0, r0, #0x2
	ldr	r1, .L28+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L29:
	.align	2, 0
.L28:
	.word	gBattleStruct
	.word	.L25
	.align	2, 0
	.align	2, 0
.L25:
	.word	.L14
	.word	.L15
	.word	.L17
	.word	.L19
	.word	.L21
	.word	.L23
.L14:
	ldr	r0, [r4]
	add	r0, r0, #0x8f
	mov	r1, #0x40
	strb	r1, [r0]
	ldr	r1, [r4]
	add	r1, r1, #0x8d
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L15:
	ldr	r1, [r4]
	add	r1, r1, #0x8f
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L13	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	mov	r1, #0x0
	b	.L27
.L17:
	ldr	r1, [r4]
	add	r1, r1, #0x8f
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L13	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	mov	r1, #0x0
	b	.L27
.L19:
	ldr	r1, [r4]
	add	r1, r1, #0x8f
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L13	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x9
.L27:
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	bl	WallyBufferExecCompleted
	ldr	r1, [r4]
	add	r1, r1, #0x8d
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, #0x8e
	strb	r5, [r0]
	ldr	r0, [r4]
	add	r0, r0, #0x8f
	mov	r1, #0x40
	strb	r1, [r0]
	b	.L13
.L21:
	ldr	r1, [r4]
	add	r1, r1, #0x8f
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L13	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	bl	ActionSelectionDestroyCursorAt
	mov	r0, #0x1
	mov	r1, #0x0
	bl	ActionSelectionCreateCursorAt
	ldr	r0, [r4]
	add	r0, r0, #0x8f
	mov	r1, #0x40
	strb	r1, [r0]
	ldr	r1, [r4]
	add	r1, r1, #0x8d
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L13
.L23:
	ldr	r1, [r4]
	add	r1, r1, #0x8f
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L13	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	bl	WallyBufferExecCompleted
.L13:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 WallyHandleActions,.Lfe4-WallyHandleActions
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy:
	push	{lr}
	ldr	r2, .L32
	ldr	r1, .L32+0x4
	ldr	r0, .L32+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L32+0xc
	cmp	r1, r0
	bne	.L31	@cond_branch
	bl	WallyBufferExecCompleted
.L31:
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe5:
	.size	 CompleteOnBattlerSpriteCallbackDummy,.Lfe5-CompleteOnBattlerSpriteCallbackDummy
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter,function
	.thumb_func
CompleteOnInactiveTextPrinter:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L35	@cond_branch
	bl	WallyBufferExecCompleted
.L35:
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 CompleteOnInactiveTextPrinter,.Lfe6-CompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 CompleteOnFinishedAnimation,function
	.thumb_func
CompleteOnFinishedAnimation:
	push	{lr}
	ldr	r0, .L38
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L37	@cond_branch
	bl	WallyBufferExecCompleted
.L37:
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	gDoingBattleAnim
.Lfe7:
	.size	 CompleteOnFinishedAnimation,.Lfe7-CompleteOnFinishedAnimation
	.align	2, 0
	.type	 OpenBagAfterPaletteFade,function
	.thumb_func
OpenBagAfterPaletteFade:
	push	{lr}
	ldr	r0, .L42
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L41	@cond_branch
	ldr	r1, .L42+0x4
	ldr	r0, .L42+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L42+0xc
	str	r1, [r0]
	bl	nullsub_35
	bl	FreeAllWindowBuffers
	bl	DoWallyTutorialBagMenu
.L41:
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	gPaletteFade
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnChosenItem
.Lfe8:
	.size	 OpenBagAfterPaletteFade,.Lfe8-OpenBagAfterPaletteFade
	.align	2, 0
	.type	 CompleteOnChosenItem,function
	.thumb_func
CompleteOnChosenItem:
	push	{lr}
	ldr	r0, .L46
	ldr	r1, [r0, #0x4]
	ldr	r0, .L46+0x4
	cmp	r1, r0
	bne	.L45	@cond_branch
	ldr	r0, .L46+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L45	@cond_branch
	ldr	r0, .L46+0xc
	ldrh	r1, [r0]
	mov	r0, #0x1
	bl	BtlController_EmitOneReturnValue
	bl	WallyBufferExecCompleted
.L45:
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	gMain
	.word	BattleMainCB2
	.word	gPaletteFade
	.word	gSpecialVar_ItemId
.Lfe9:
	.size	 CompleteOnChosenItem,.Lfe9-CompleteOnChosenItem
	.align	2, 0
	.type	 sub_816864C,function
	.thumb_func
sub_816864C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L53
	ldr	r0, [r4]
	ldr	r5, .L53+0x4
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r7, #0x88
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L49	@cond_branch
	ldr	r0, .L53+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L53+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L49:
	ldr	r1, [r4]
	ldrb	r0, [r5]
	mov	r6, #0x2
	add	r2, r6, #0
	eor	r2, r2, r0
	ldr	r1, [r1, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L50	@cond_branch
	ldr	r0, .L53+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L53+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L50:
	ldr	r0, [r4]
	ldrb	r2, [r5]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	mov	r4, #0x8
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB512
	b	.L51	@long jump
.LCB512:
	add	r1, r2, #0
	eor	r1, r1, r6
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L51	@cond_branch
	ldr	r0, .L53+0x10
	mov	r8, r0
	ldr	r7, .L53+0x14
	add	r0, r2, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r4, r8
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r3, [r0]
	ldr	r0, .L53+0x18
	cmp	r3, r0
	bne	.L51	@cond_branch
	ldr	r0, .L53+0x1c
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	cmp	r0, r3
	bne	.L51	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L52	@cond_branch
	ldr	r0, .L53+0x20
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L52	@cond_branch
	ldrb	r0, [r5]
	eor	r0, r0, r6
	add	r0, r0, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	bl	DestroySprite
	ldr	r4, .L53+0x24
	ldrb	r0, [r5]
	add	r1, r6, #0
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L53+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L53+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r5]
	eor	r0, r0, r6
	bl	sub_8076918
	ldrb	r0, [r5]
	eor	r0, r0, r6
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L52:
	ldr	r1, .L53+0x14
	ldr	r4, .L53+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L53+0x10
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r5, .L53+0x24
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L53+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L53+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r4]
	bl	sub_8076918
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldr	r0, .L53
	ldr	r0, [r0]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L53+0x28
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L53+0x2c
	str	r1, [r0]
.L51:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
	.word	gBattleTypeFlags
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	sub_8168818
.Lfe10:
	.size	 sub_816864C,.Lfe10-sub_816864C
	.align	2, 0
	.type	 sub_8168818,function
	.thumb_func
sub_8168818:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r4, #0x0
	ldr	r2, .L58
	ldr	r0, .L58+0x4
	ldr	r1, .L58+0x8
	mov	r8, r1
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L58+0xc
	cmp	r1, r0
	bne	.L56	@cond_branch
	mov	r4, #0x1
.L56:
	cmp	r4, #0
	beq	.L57	@cond_branch
	ldr	r7, .L58+0x10
	ldr	r0, [r7]
	ldr	r4, [r0, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r4
	ldrb	r1, [r2, #0x1]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L57	@cond_branch
	mov	r6, #0x2
	add	r1, r6, #0
	eor	r1, r1, r3
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L57	@cond_branch
	ldrb	r1, [r2]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r7]
	mov	r1, r8
	ldrb	r2, [r1]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r2, [r7]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r1, r6, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	ldr	r2, [r7]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r1, r6, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L58+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r0, .L58+0x18
	mov	r1, #0xa
	bl	CreateTask
	ldr	r2, .L58+0x1c
	mov	r0, r8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L58+0x20
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	bl	WallyBufferExecCompleted
.L57:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	0x27f9
	.word	c3_0802FDF4
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe11:
	.size	 sub_8168818,.Lfe11-sub_8168818
	.align	2, 0
	.type	 CompleteOnHealthbarDone,function
	.thumb_func
CompleteOnHealthbarDone:
	push	{r4, r5, r6, lr}
	ldr	r5, .L63
	ldrb	r0, [r5]
	ldr	r6, .L63+0x4
	add	r1, r0, r6
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L61	@cond_branch
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
	b	.L62
.L64:
	.align	2, 0
.L63:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.L61:
	ldr	r2, .L65
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L65+0x4
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	bl	WallyBufferExecCompleted
.L62:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe12:
	.size	 CompleteOnHealthbarDone,.Lfe12-CompleteOnHealthbarDone
	.align	2, 0
	.type	 DoHitAnimBlinkSpriteEffect,function
	.thumb_func
DoHitAnimBlinkSpriteEffect:
	push	{r4, lr}
	ldr	r1, .L71
	ldr	r0, .L71+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L71+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L68	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L71+0xc
	strb	r3, [r0]
	bl	WallyBufferExecCompleted
	b	.L69
.L72:
	.align	2, 0
.L71:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	gDoingBattleAnim
.L68:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L70	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L70:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L69:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 DoHitAnimBlinkSpriteEffect,.Lfe13-DoHitAnimBlinkSpriteEffect
	.align	2, 0
	.type	 sub_8168A20,function
	.thumb_func
sub_8168A20:
	push	{r4, r5, r6, lr}
	ldr	r0, .L75
	ldr	r0, [r0]
	ldr	r6, .L75+0x4
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L74	@cond_branch
	ldr	r5, .L75+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L75+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L75+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	WallyBufferExecCompleted
.L74:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe14:
	.size	 sub_8168A20,.Lfe14-sub_8168A20
	.align	2, 0
	.type	 CompleteOnBankSpriteCallbackDummy2,function
	.thumb_func
CompleteOnBankSpriteCallbackDummy2:
	push	{lr}
	ldr	r2, .L79
	ldr	r1, .L79+0x4
	ldr	r0, .L79+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L79+0xc
	cmp	r1, r0
	bne	.L78	@cond_branch
	bl	WallyBufferExecCompleted
.L78:
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe15:
	.size	 CompleteOnBankSpriteCallbackDummy2,.Lfe15-CompleteOnBankSpriteCallbackDummy2
	.align	2, 0
	.type	 CompleteOnFinishedBattleAnimation,function
	.thumb_func
CompleteOnFinishedBattleAnimation:
	push	{lr}
	ldr	r0, .L83
	ldr	r2, [r0]
	ldr	r0, .L83+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L82	@cond_branch
	bl	WallyBufferExecCompleted
.L82:
	pop	{r0}
	bx	r0
.L84:
	.align	2, 0
.L83:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe16:
	.size	 CompleteOnFinishedBattleAnimation,.Lfe16-CompleteOnFinishedBattleAnimation
	.align	2, 0
	.type	 WallyBufferExecCompleted,function
	.thumb_func
WallyBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L88
	ldr	r4, .L88+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L88+0x8
	str	r1, [r0]
	ldr	r0, .L88+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L86	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r0, .L88+0x10
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x20
	add	r1, r1, r0
	mov	r0, #0x39
	strb	r0, [r1]
	b	.L87
.L89:
	.align	2, 0
.L88:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	WallyBufferRunCommand
	.word	gBattleTypeFlags
	.word	gBattleResources
.L86:
	ldr	r2, .L90
	ldr	r1, .L90+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L87:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe17:
	.size	 WallyBufferExecCompleted,.Lfe17-WallyBufferExecCompleted
	.align	2, 0
	.type	 CompleteOnFinishedStatusAnimation,function
	.thumb_func
CompleteOnFinishedStatusAnimation:
	push	{lr}
	ldr	r0, .L94
	ldr	r2, [r0]
	ldr	r0, .L94+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L93	@cond_branch
	bl	WallyBufferExecCompleted
.L93:
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe18:
	.size	 CompleteOnFinishedStatusAnimation,.Lfe18-CompleteOnFinishedStatusAnimation
	.align	2, 0
	.type	 WallyHandleGetMonData,function
	.thumb_func
WallyHandleGetMonData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x100
	mov	r6, #0x0
	ldr	r0, .L105
	ldr	r1, [r0]
	ldr	r0, .L105+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L97	@cond_branch
	ldr	r0, .L105+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	CopyWallyMonData
	add	r6, r0, #0
	b	.L98
.L106:
	.align	2, 0
.L105:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L97:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L102:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L103	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	CopyWallyMonData
	add	r6, r6, r0
.L103:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L102	@cond_branch
.L98:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	BtlController_EmitDataTransfer
	bl	WallyBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 WallyHandleGetMonData,.Lfe19-WallyHandleGetMonData
	.align	2, 0
	.type	 CopyWallyMonData,function
	.thumb_func
CopyWallyMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x94
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r3, .L196
	ldr	r1, [r3]
	ldr	r2, .L196+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r4, r2, #0
	cmp	r0, #0x3b
	bls	.LCB1361
	bl	.L108	@far jump
.LCB1361:
	lsl	r0, r0, #0x2
	ldr	r1, .L196+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L197:
	.align	2, 0
.L196:
	.word	gBattleResources
	.word	gActiveBattler
	.word	.L190
	.align	2, 0
	.align	2, 0
.L190:
	.word	.L109
	.word	.L120
	.word	.L121
	.word	.L122
	.word	.L136
	.word	.L136
	.word	.L136
	.word	.L136
	.word	.L137
	.word	.L146
	.word	.L146
	.word	.L146
	.word	.L146
	.word	.L108
	.word	.L108
	.word	.L108
	.word	.L108
	.word	.L147
	.word	.L148
	.word	.L149
	.word	.L150
	.word	.L151
	.word	.L152
	.word	.L153
	.word	.L154
	.word	.L155
	.word	.L156
	.word	.L157
	.word	.L158
	.word	.L159
	.word	.L160
	.word	.L161
	.word	.L162
	.word	.L163
	.word	.L164
	.word	.L165
	.word	.L166
	.word	.L167
	.word	.L168
	.word	.L169
	.word	.L170
	.word	.L171
	.word	.L172
	.word	.L173
	.word	.L174
	.word	.L175
	.word	.L176
	.word	.L177
	.word	.L178
	.word	.L179
	.word	.L180
	.word	.L181
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L186
	.word	.L187
	.word	.L188
	.word	.L189
.L109:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L198
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r3, sp
	ldr	r2, .L198+0x4
	add	r1, r2, #0
	and	r0, r0, r1
	ldrh	r2, [r3]
	ldr	r1, .L198+0x8
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3]
	add	r0, r4, #0
	mov	r1, #0x59
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x3
	ldrb	r2, [r3, #0x1]
	mov	r1, #0x7
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x30]
	mov	r6, #0x0
	mov	r0, #0x25
	add	r0, r0, sp
	mov	r9, r0
	mov	r1, #0x3d
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2d
	str	r2, [sp, #0x84]
	mov	r0, sp
	add	r0, r0, #0x2c
	str	r0, [sp, #0x80]
	mov	r1, sp
	add	r1, r1, #0x6c
	str	r1, [sp, #0x90]
	add	r2, r2, #0x5
	str	r2, [sp, #0x88]
	add	r0, r0, #0x12
	str	r0, [sp, #0x8c]
	mov	r8, r4
	add	r4, sp, #0xc
.L113:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L113	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L198
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x84]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L198+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L198+0x10
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L198+0x14
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x50]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x80]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2a]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x58]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x90]
	bl	GetMonData
	ldr	r0, [sp, #0x88]
	ldr	r1, [sp, #0x90]
	bl	StringCopy10
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L118:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x5b
	bls	.L118	@cond_branch
	b	.L108
.L199:
	.align	2, 0
.L198:
	.word	gPlayerParty
	.word	0x7ff
	.word	-0x800
	.word	-0x3e1
	.word	-0xf8001
	.word	-0x1f1
.L120:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L200
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L192
.L201:
	.align	2, 0
.L200:
	.word	gPlayerParty
.L121:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L202
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L192
.L203:
	.align	2, 0
.L202:
	.word	gPlayerParty
.L122:
	mov	r6, #0x0
	add	r2, sp, #0x5c
	mov	r9, r2
	add	r0, sp, #0x64
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L204
	add	r4, r1, r0
	mov	r8, r9
.L126:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L126	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L204
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L131:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L131	@cond_branch
	b	.L108
.L205:
	.align	2, 0
.L204:
	.word	gPlayerParty
.L136:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L206
	add	r0, r0, r1
	ldr	r2, [r3]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x21
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0x9
	b	.L192
.L207:
	.align	2, 0
.L206:
	.word	gPlayerParty
.L137:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L208
	mov	r8, r2
.L141:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L141	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L208
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L108
.L209:
	.align	2, 0
.L208:
	.word	gPlayerParty
.L146:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L210
	add	r0, r0, r1
	ldr	r2, [r3]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x21
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0x8
	b	.L193
.L211:
	.align	2, 0
.L210:
	.word	gPlayerParty
.L147:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L212
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L194
.L213:
	.align	2, 0
.L212:
	.word	gPlayerParty
.L148:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L214
	add	r0, r0, r1
	mov	r1, #0x19
.L194:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L108
.L215:
	.align	2, 0
.L214:
	.word	gPlayerParty
.L149:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L216
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L193
.L217:
	.align	2, 0
.L216:
	.word	gPlayerParty
.L150:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L218
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L193
.L219:
	.align	2, 0
.L218:
	.word	gPlayerParty
.L151:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L220
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L193
.L221:
	.align	2, 0
.L220:
	.word	gPlayerParty
.L152:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L222
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L193
.L223:
	.align	2, 0
.L222:
	.word	gPlayerParty
.L153:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L224
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L193
.L225:
	.align	2, 0
.L224:
	.word	gPlayerParty
.L154:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L226
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L193
.L227:
	.align	2, 0
.L226:
	.word	gPlayerParty
.L155:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L228
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L193
.L229:
	.align	2, 0
.L228:
	.word	gPlayerParty
.L156:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L230
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L193
.L231:
	.align	2, 0
.L230:
	.word	gPlayerParty
.L157:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L232
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L193
.L233:
	.align	2, 0
.L232:
	.word	gPlayerParty
.L158:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L234
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L193
.L235:
	.align	2, 0
.L234:
	.word	gPlayerParty
.L159:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L236
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L193
.L237:
	.align	2, 0
.L236:
	.word	gPlayerParty
.L160:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L238
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L193
.L239:
	.align	2, 0
.L238:
	.word	gPlayerParty
.L161:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L240
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L108
.L241:
	.align	2, 0
.L240:
	.word	gPlayerParty
.L162:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L242
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L193
.L243:
	.align	2, 0
.L242:
	.word	gPlayerParty
.L163:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L244
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L193
.L245:
	.align	2, 0
.L244:
	.word	gPlayerParty
.L164:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L246
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L193
.L247:
	.align	2, 0
.L246:
	.word	gPlayerParty
.L165:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L248
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L193
.L249:
	.align	2, 0
.L248:
	.word	gPlayerParty
.L166:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L250
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L193
.L251:
	.align	2, 0
.L250:
	.word	gPlayerParty
.L167:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L252
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L193
.L253:
	.align	2, 0
.L252:
	.word	gPlayerParty
.L168:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L254
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L195
.L255:
	.align	2, 0
.L254:
	.word	gPlayerParty
.L169:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L256
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L192
.L257:
	.align	2, 0
.L256:
	.word	gPlayerParty
.L170:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L258
	add	r0, r0, r1
	mov	r1, #0x37
.L195:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L108
.L259:
	.align	2, 0
.L258:
	.word	gPlayerParty
.L171:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L260
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L193
.L261:
	.align	2, 0
.L260:
	.word	gPlayerParty
.L172:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L262
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L192
.L263:
	.align	2, 0
.L262:
	.word	gPlayerParty
.L173:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L264
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L192
.L265:
	.align	2, 0
.L264:
	.word	gPlayerParty
.L174:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L266
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L192
.L267:
	.align	2, 0
.L266:
	.word	gPlayerParty
.L175:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L268
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L192
.L269:
	.align	2, 0
.L268:
	.word	gPlayerParty
.L176:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L270
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L192
.L271:
	.align	2, 0
.L270:
	.word	gPlayerParty
.L177:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L272
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L192
.L273:
	.align	2, 0
.L272:
	.word	gPlayerParty
.L178:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L274
	add	r0, r0, r1
	mov	r1, #0x3f
.L192:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L108
.L275:
	.align	2, 0
.L274:
	.word	gPlayerParty
.L179:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L276
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L193
.L277:
	.align	2, 0
.L276:
	.word	gPlayerParty
.L180:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L278
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L193
.L279:
	.align	2, 0
.L278:
	.word	gPlayerParty
.L181:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L280
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L193
.L281:
	.align	2, 0
.L280:
	.word	gPlayerParty
.L182:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L282
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L193
.L283:
	.align	2, 0
.L282:
	.word	gPlayerParty
.L183:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L284
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L193
.L285:
	.align	2, 0
.L284:
	.word	gPlayerParty
.L184:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L286
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L193
.L287:
	.align	2, 0
.L286:
	.word	gPlayerParty
.L185:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L288
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L193
.L289:
	.align	2, 0
.L288:
	.word	gPlayerParty
.L186:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L290
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L193
.L291:
	.align	2, 0
.L290:
	.word	gPlayerParty
.L187:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L292
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L193
.L293:
	.align	2, 0
.L292:
	.word	gPlayerParty
.L188:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L294
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L193
.L295:
	.align	2, 0
.L294:
	.word	gPlayerParty
.L189:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L296
	add	r0, r0, r1
	mov	r1, #0x36
.L193:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L108:
	add	r0, r6, #0
	add	sp, sp, #0x94
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L297:
	.align	2, 0
.L296:
	.word	gPlayerParty
.Lfe20:
	.size	 CopyWallyMonData,.Lfe20-CopyWallyMonData
	.align	2, 0
	.type	 WallyHandleGetRawMonData,function
	.thumb_func
WallyHandleGetRawMonData:
	push	{lr}
	bl	PlayerHandleGetRawMonData
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 WallyHandleGetRawMonData,.Lfe21-WallyHandleGetRawMonData
	.align	2, 0
	.type	 WallyHandleSetMonData,function
	.thumb_func
WallyHandleSetMonData:
	push	{r4, r5, lr}
	ldr	r0, .L308
	ldr	r1, [r0]
	ldr	r0, .L308+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L300	@cond_branch
	ldr	r0, .L308+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	SetWallyMonData
	b	.L301
.L309:
	.align	2, 0
.L308:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L300:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L305:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L306	@cond_branch
	add	r0, r5, #0
	bl	SetWallyMonData
.L306:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L305	@cond_branch
.L301:
	bl	WallyBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 WallyHandleSetMonData,.Lfe22-WallyHandleSetMonData
	.align	2, 0
	.type	 SetWallyMonData,function
	.thumb_func
SetWallyMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L382
	ldr	r0, .L382+0x4
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x20
	ldr	r1, [r3]
	add	r0, r1, r0
	add	r4, r0, #0x3
	mov	r8, r4
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r7, r3, #0
	cmp	r0, #0x3b
	bls	.LCB2792
	bl	.L311	@far jump
.LCB2792:
	lsl	r0, r0, #0x2
	ldr	r1, .L382+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L383:
	.align	2, 0
.L382:
	.word	gBattleResources
	.word	gActiveBattler
	.word	.L378
	.align	2, 0
	.align	2, 0
.L378:
	.word	.L312
	.word	.L318
	.word	.L319
	.word	.L320
	.word	.L329
	.word	.L329
	.word	.L329
	.word	.L329
	.word	.L330
	.word	.L334
	.word	.L334
	.word	.L334
	.word	.L334
	.word	.L311
	.word	.L311
	.word	.L311
	.word	.L311
	.word	.L335
	.word	.L336
	.word	.L337
	.word	.L338
	.word	.L339
	.word	.L340
	.word	.L341
	.word	.L342
	.word	.L343
	.word	.L344
	.word	.L345
	.word	.L346
	.word	.L347
	.word	.L348
	.word	.L349
	.word	.L350
	.word	.L351
	.word	.L352
	.word	.L353
	.word	.L354
	.word	.L355
	.word	.L356
	.word	.L357
	.word	.L358
	.word	.L359
	.word	.L360
	.word	.L361
	.word	.L362
	.word	.L363
	.word	.L364
	.word	.L365
	.word	.L366
	.word	.L367
	.word	.L368
	.word	.L369
	.word	.L370
	.word	.L371
	.word	.L372
	.word	.L373
	.word	.L374
	.word	.L375
	.word	.L376
	.word	.L377
.L312:
	mov	r1, r8
	ldrh	r0, [r1]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	mov	r1, sp
	strh	r0, [r1]
	mov	r1, r8
	ldrb	r0, [r1, #0x1]
	lsr	r0, r0, #0x3
	mov	r5, sp
	add	r5, r5, #0x2
	strb	r0, [r5]
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L384
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x59
	add	r2, r5, #0
	bl	SetMonData
	mov	r2, r8
	add	r2, r2, #0x30
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r7, #0x0
	mov	r0, r8
	add	r0, r0, #0x3d
	str	r0, [sp, #0x28]
	mov	r1, r8
	add	r1, r1, #0x2d
	str	r1, [sp, #0x20]
	add	r0, r0, #0xb
	str	r0, [sp, #0x2c]
	mov	r1, #0x3
	add	r1, r1, sp
	mov	sl, r1
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	mov	r1, r8
	add	r1, r1, #0x50
	str	r1, [sp, #0x34]
	sub	r0, r0, #0x20
	str	r0, [sp, #0x1c]
	sub	r1, r1, #0x26
	str	r1, [sp, #0x18]
	add	r0, r0, #0x2
	str	r0, [sp, #0x24]
	sub	r1, r1, #0x28
	str	r1, [sp, #0x4]
	sub	r0, r0, #0x2a
	str	r0, [sp, #0x8]
	add	r1, r1, #0x4
	str	r1, [sp, #0xc]
	add	r0, r0, #0x4
	str	r0, [sp, #0x10]
	add	r1, r1, #0x4
	str	r1, [sp, #0x14]
	mov	r9, r4
	mov	r4, r8
	add	r4, r4, #0x25
	mov	r5, r8
	add	r5, r5, #0xc
.L316:
	add	r1, r7, #0
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r5, #0
	bl	SetMonData
	add	r1, r7, #0
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	add	r4, r4, #0x1
	add	r5, r5, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L316	@cond_branch
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L384
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrh	r0, [r1, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldr	r0, [r1, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrh	r0, [r1, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x34]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	bl	.L311	@ far jump
.L385:
	.align	2, 0
.L384:
	.word	gPlayerParty
.L318:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L386
	add	r0, r0, r1
	ldr	r1, .L386+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0xb
	bl	SetMonData
	bl	.L311	@ far jump
.L387:
	.align	2, 0
.L386:
	.word	gPlayerParty
	.word	gActiveBattler
.L319:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L388
	add	r0, r0, r1
	ldr	r1, .L388+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0xc
	bl	SetMonData
	bl	.L311	@ far jump
.L389:
	.align	2, 0
.L388:
	.word	gPlayerParty
	.word	gActiveBattler
.L320:
	mov	r7, #0x0
	mov	r0, #0xc
	add	r0, r0, r4
	mov	r9, r0
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, .L390
	add	r1, r1, r0
	mov	r8, r1
	add	r5, r4, #0
	add	r5, r5, #0x8
.L324:
	add	r1, r7, #0
	add	r1, r1, #0xd
	mov	r0, r8
	add	r2, r4, #0
	bl	SetMonData
	add	r1, r7, #0
	add	r1, r1, #0x11
	mov	r0, r8
	add	r2, r5, #0
	bl	SetMonData
	add	r5, r5, #0x1
	add	r4, r4, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L324	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L390
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	bl	.L311	@ far jump
.L391:
	.align	2, 0
.L390:
	.word	gPlayerParty
.L329:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L392
	add	r0, r0, r1
	ldr	r2, [r7]
	ldr	r1, .L392+0x4
	ldrb	r3, [r1]
	lsl	r3, r3, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L380
.L393:
	.align	2, 0
.L392:
	.word	gPlayerParty
	.word	gActiveBattler
.L330:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L394
	add	r4, r4, r0
	ldr	r5, .L394+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x3
	add	r0, r4, #0
	mov	r1, #0x11
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x4
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x5
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x6
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x7
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L311
.L395:
	.align	2, 0
.L394:
	.word	gPlayerParty
	.word	gActiveBattler
.L334:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L396
	add	r0, r0, r1
	ldr	r2, [r7]
	ldr	r1, .L396+0x4
	ldrb	r3, [r1]
	lsl	r3, r3, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L380:
	add	r3, r3, #0x20
	add	r2, r2, r3
	add	r2, r2, #0x3
	bl	SetMonData
	b	.L311
.L397:
	.align	2, 0
.L396:
	.word	gPlayerParty
	.word	gActiveBattler
.L335:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L398
	add	r0, r0, r1
	ldr	r1, .L398+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1
	bl	SetMonData
	b	.L311
.L399:
	.align	2, 0
.L398:
	.word	gPlayerParty
	.word	gActiveBattler
.L336:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L400
	add	r0, r0, r1
	ldr	r1, .L400+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x19
	bl	SetMonData
	b	.L311
.L401:
	.align	2, 0
.L400:
	.word	gPlayerParty
	.word	gActiveBattler
.L337:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L402
	add	r0, r0, r1
	ldr	r1, .L402+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1a
	bl	SetMonData
	b	.L311
.L403:
	.align	2, 0
.L402:
	.word	gPlayerParty
	.word	gActiveBattler
.L338:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L404
	add	r0, r0, r1
	ldr	r1, .L404+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1b
	bl	SetMonData
	b	.L311
.L405:
	.align	2, 0
.L404:
	.word	gPlayerParty
	.word	gActiveBattler
.L339:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L406
	add	r0, r0, r1
	ldr	r1, .L406+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1c
	bl	SetMonData
	b	.L311
.L407:
	.align	2, 0
.L406:
	.word	gPlayerParty
	.word	gActiveBattler
.L340:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L408
	add	r0, r0, r1
	ldr	r1, .L408+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1d
	bl	SetMonData
	b	.L311
.L409:
	.align	2, 0
.L408:
	.word	gPlayerParty
	.word	gActiveBattler
.L341:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L410
	add	r0, r0, r1
	ldr	r1, .L410+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1e
	bl	SetMonData
	b	.L311
.L411:
	.align	2, 0
.L410:
	.word	gPlayerParty
	.word	gActiveBattler
.L342:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L412
	add	r0, r0, r1
	ldr	r1, .L412+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1f
	bl	SetMonData
	b	.L311
.L413:
	.align	2, 0
.L412:
	.word	gPlayerParty
	.word	gActiveBattler
.L343:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L414
	add	r0, r0, r1
	ldr	r1, .L414+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x20
	bl	SetMonData
	b	.L311
.L415:
	.align	2, 0
.L414:
	.word	gPlayerParty
	.word	gActiveBattler
.L344:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L416
	add	r0, r0, r1
	ldr	r1, .L416+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x22
	bl	SetMonData
	b	.L311
.L417:
	.align	2, 0
.L416:
	.word	gPlayerParty
	.word	gActiveBattler
.L345:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L418
	add	r0, r0, r1
	ldr	r1, .L418+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x23
	bl	SetMonData
	b	.L311
.L419:
	.align	2, 0
.L418:
	.word	gPlayerParty
	.word	gActiveBattler
.L346:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L420
	add	r0, r0, r1
	ldr	r1, .L420+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x24
	bl	SetMonData
	b	.L311
.L421:
	.align	2, 0
.L420:
	.word	gPlayerParty
	.word	gActiveBattler
.L347:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L422
	add	r0, r0, r1
	ldr	r1, .L422+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x25
	bl	SetMonData
	b	.L311
.L423:
	.align	2, 0
.L422:
	.word	gPlayerParty
	.word	gActiveBattler
.L348:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L424
	add	r0, r0, r1
	ldr	r1, .L424+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x26
	bl	SetMonData
	b	.L311
.L425:
	.align	2, 0
.L424:
	.word	gPlayerParty
	.word	gActiveBattler
.L349:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L426
	add	r4, r4, r0
	ldr	r5, .L426+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x3
	add	r0, r4, #0
	mov	r1, #0x27
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x4
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x5
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x6
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x7
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x8
	add	r0, r4, #0
	b	.L381
.L427:
	.align	2, 0
.L426:
	.word	gPlayerParty
	.word	gActiveBattler
.L350:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L428
	add	r0, r0, r1
	ldr	r1, .L428+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x27
	bl	SetMonData
	b	.L311
.L429:
	.align	2, 0
.L428:
	.word	gPlayerParty
	.word	gActiveBattler
.L351:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L430
	add	r0, r0, r1
	ldr	r1, .L430+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x28
	bl	SetMonData
	b	.L311
.L431:
	.align	2, 0
.L430:
	.word	gPlayerParty
	.word	gActiveBattler
.L352:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L432
	add	r0, r0, r1
	ldr	r1, .L432+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x29
	bl	SetMonData
	b	.L311
.L433:
	.align	2, 0
.L432:
	.word	gPlayerParty
	.word	gActiveBattler
.L353:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L434
	add	r0, r0, r1
	ldr	r1, .L434+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2a
	bl	SetMonData
	b	.L311
.L435:
	.align	2, 0
.L434:
	.word	gPlayerParty
	.word	gActiveBattler
.L354:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L436
	add	r0, r0, r1
	ldr	r1, .L436+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2b
	bl	SetMonData
	b	.L311
.L437:
	.align	2, 0
.L436:
	.word	gPlayerParty
	.word	gActiveBattler
.L355:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L438
	add	r0, r0, r1
	ldr	r1, .L438+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
.L381:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L311
.L439:
	.align	2, 0
.L438:
	.word	gPlayerParty
	.word	gActiveBattler
.L356:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L440
	add	r0, r0, r1
	ldr	r1, .L440+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x0
	bl	SetMonData
	b	.L311
.L441:
	.align	2, 0
.L440:
	.word	gPlayerParty
	.word	gActiveBattler
.L357:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L442
	add	r0, r0, r1
	ldr	r1, .L442+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x9
	bl	SetMonData
	b	.L311
.L443:
	.align	2, 0
.L442:
	.word	gPlayerParty
	.word	gActiveBattler
.L358:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L444
	add	r0, r0, r1
	ldr	r1, .L444+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x37
	bl	SetMonData
	b	.L311
.L445:
	.align	2, 0
.L444:
	.word	gPlayerParty
	.word	gActiveBattler
.L359:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L446
	add	r0, r0, r1
	ldr	r1, .L446+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x38
	bl	SetMonData
	b	.L311
.L447:
	.align	2, 0
.L446:
	.word	gPlayerParty
	.word	gActiveBattler
.L360:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L448
	add	r0, r0, r1
	ldr	r1, .L448+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x39
	bl	SetMonData
	b	.L311
.L449:
	.align	2, 0
.L448:
	.word	gPlayerParty
	.word	gActiveBattler
.L361:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L450
	add	r0, r0, r1
	ldr	r1, .L450+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3a
	bl	SetMonData
	b	.L311
.L451:
	.align	2, 0
.L450:
	.word	gPlayerParty
	.word	gActiveBattler
.L362:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L452
	add	r0, r0, r1
	ldr	r1, .L452+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3b
	bl	SetMonData
	b	.L311
.L453:
	.align	2, 0
.L452:
	.word	gPlayerParty
	.word	gActiveBattler
.L363:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L454
	add	r0, r0, r1
	ldr	r1, .L454+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3c
	bl	SetMonData
	b	.L311
.L455:
	.align	2, 0
.L454:
	.word	gPlayerParty
	.word	gActiveBattler
.L364:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L456
	add	r0, r0, r1
	ldr	r1, .L456+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3d
	bl	SetMonData
	b	.L311
.L457:
	.align	2, 0
.L456:
	.word	gPlayerParty
	.word	gActiveBattler
.L365:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L458
	add	r0, r0, r1
	ldr	r1, .L458+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3e
	bl	SetMonData
	b	.L311
.L459:
	.align	2, 0
.L458:
	.word	gPlayerParty
	.word	gActiveBattler
.L366:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L460
	add	r0, r0, r1
	ldr	r1, .L460+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3f
	bl	SetMonData
	b	.L311
.L461:
	.align	2, 0
.L460:
	.word	gPlayerParty
	.word	gActiveBattler
.L367:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L462
	add	r0, r0, r1
	ldr	r1, .L462+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x16
	bl	SetMonData
	b	.L311
.L463:
	.align	2, 0
.L462:
	.word	gPlayerParty
	.word	gActiveBattler
.L368:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L464
	add	r0, r0, r1
	ldr	r1, .L464+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x17
	bl	SetMonData
	b	.L311
.L465:
	.align	2, 0
.L464:
	.word	gPlayerParty
	.word	gActiveBattler
.L369:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L466
	add	r0, r0, r1
	ldr	r1, .L466+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x18
	bl	SetMonData
	b	.L311
.L467:
	.align	2, 0
.L466:
	.word	gPlayerParty
	.word	gActiveBattler
.L370:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L468
	add	r0, r0, r1
	ldr	r1, .L468+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x21
	bl	SetMonData
	b	.L311
.L469:
	.align	2, 0
.L468:
	.word	gPlayerParty
	.word	gActiveBattler
.L371:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L470
	add	r0, r0, r1
	ldr	r1, .L470+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2f
	bl	SetMonData
	b	.L311
.L471:
	.align	2, 0
.L470:
	.word	gPlayerParty
	.word	gActiveBattler
.L372:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L472
	add	r0, r0, r1
	ldr	r1, .L472+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x30
	bl	SetMonData
	b	.L311
.L473:
	.align	2, 0
.L472:
	.word	gPlayerParty
	.word	gActiveBattler
.L373:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L474
	add	r0, r0, r1
	ldr	r1, .L474+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x32
	bl	SetMonData
	b	.L311
.L475:
	.align	2, 0
.L474:
	.word	gPlayerParty
	.word	gActiveBattler
.L374:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L476
	add	r0, r0, r1
	ldr	r1, .L476+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x33
	bl	SetMonData
	b	.L311
.L477:
	.align	2, 0
.L476:
	.word	gPlayerParty
	.word	gActiveBattler
.L375:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L478
	add	r0, r0, r1
	ldr	r1, .L478+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x34
	bl	SetMonData
	b	.L311
.L479:
	.align	2, 0
.L478:
	.word	gPlayerParty
	.word	gActiveBattler
.L376:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L480
	add	r0, r0, r1
	ldr	r1, .L480+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x35
	bl	SetMonData
	b	.L311
.L481:
	.align	2, 0
.L480:
	.word	gPlayerParty
	.word	gActiveBattler
.L377:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L482
	add	r0, r0, r1
	ldr	r1, .L482+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x36
	bl	SetMonData
.L311:
	ldr	r2, .L482+0x8
	ldr	r0, .L482+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L482
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L483:
	.align	2, 0
.L482:
	.word	gPlayerParty
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.Lfe23:
	.size	 SetWallyMonData,.Lfe23-SetWallyMonData
	.align	2, 0
	.type	 WallyHandleSetRawMonData,function
	.thumb_func
WallyHandleSetRawMonData:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 WallyHandleSetRawMonData,.Lfe24-WallyHandleSetRawMonData
	.align	2, 0
	.type	 WallyHandleLoadMonSprite,function
	.thumb_func
WallyHandleLoadMonSprite:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 WallyHandleLoadMonSprite,.Lfe25-WallyHandleLoadMonSprite
	.align	2, 0
	.type	 WallyHandleSwitchInAnim,function
	.thumb_func
WallyHandleSwitchInAnim:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 WallyHandleSwitchInAnim,.Lfe26-WallyHandleSwitchInAnim
	.align	2, 0
	.type	 WallyHandleReturnMonToBall,function
	.thumb_func
WallyHandleReturnMonToBall:
	push	{r4, r5, r6, lr}
	ldr	r0, .L490
	ldr	r0, [r0]
	ldr	r6, .L490+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L488	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x1
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, .L490+0x8
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L490+0xc
	str	r0, [r1]
	b	.L489
.L491:
	.align	2, 0
.L490:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	sub_8168A20
.L488:
	ldr	r5, .L492
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L492+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L492+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	WallyBufferExecCompleted
.L489:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe27:
	.size	 WallyHandleReturnMonToBall,.Lfe27-WallyHandleReturnMonToBall
	.align	2, 0
	.type	 WallyHandleDrawTrainerPic,function
	.thumb_func
WallyHandleDrawTrainerPic:
	push	{r4, r5, r6, lr}
	ldr	r4, .L495
	ldrb	r1, [r4]
	mov	r0, #0x6
	bl	DecompressTrainerBackPic
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x6
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r0, .L495+0x4
	ldr	r1, .L495+0x8
	ldrb	r1, [r1, #0x18]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0x50
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r6, .L495+0xc
	ldrb	r1, [r4]
	add	r1, r1, r6
	strb	r0, [r1]
	ldr	r5, .L495+0x10
	ldrb	r3, [r4]
	add	r0, r3, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0xf0
	strh	r1, [r0, #0x24]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L495+0x14
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r5, #0x1c
	add	r0, r0, r5
	ldr	r1, .L495+0x18
	str	r1, [r0]
	ldr	r1, .L495+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L495+0x20
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L496:
	.align	2, 0
.L495:
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerBackPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xfffe
	.word	sub_805D7AC
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy
.Lfe28:
	.size	 WallyHandleDrawTrainerPic,.Lfe28-WallyHandleDrawTrainerPic
	.align	2, 0
	.type	 WallyHandleTrainerSlide,function
	.thumb_func
WallyHandleTrainerSlide:
	push	{r4, r5, r6, lr}
	ldr	r4, .L498
	ldrb	r1, [r4]
	mov	r0, #0x6
	bl	DecompressTrainerBackPic
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x6
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r0, .L498+0x4
	ldr	r1, .L498+0x8
	ldrb	r1, [r1, #0x18]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0x50
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r6, .L498+0xc
	ldrb	r1, [r4]
	add	r1, r1, r6
	strb	r0, [r1]
	ldr	r5, .L498+0x10
	ldrb	r3, [r4]
	add	r0, r3, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L498+0x14
	strh	r1, [r0, #0x24]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r5, #0x1c
	add	r0, r0, r5
	ldr	r1, .L498+0x18
	str	r1, [r0]
	ldr	r1, .L498+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L498+0x20
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L499:
	.align	2, 0
.L498:
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerBackPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xffa0
	.word	sub_805D7AC
	.word	gBattlerControllerFuncs
	.word	CompleteOnBankSpriteCallbackDummy2
.Lfe29:
	.size	 WallyHandleTrainerSlide,.Lfe29-WallyHandleTrainerSlide
	.align	2, 0
	.type	 WallyHandleTrainerSlideBack,function
	.thumb_func
WallyHandleTrainerSlideBack:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 WallyHandleTrainerSlideBack,.Lfe30-WallyHandleTrainerSlideBack
	.align	2, 0
	.type	 WallyHandleFaintAnimation,function
	.thumb_func
WallyHandleFaintAnimation:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 WallyHandleFaintAnimation,.Lfe31-WallyHandleFaintAnimation
	.align	2, 0
	.type	 WallyHandlePaletteFade,function
	.thumb_func
WallyHandlePaletteFade:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 WallyHandlePaletteFade,.Lfe32-WallyHandlePaletteFade
	.align	2, 0
	.type	 WallyHandleSuccessBallThrowAnim,function
	.thumb_func
WallyHandleSuccessBallThrowAnim:
	push	{r4, r5, lr}
	ldr	r0, .L504
	ldr	r0, [r0]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x40
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldr	r1, .L504+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r5, .L504+0x8
	ldrb	r4, [r5]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r3, #0x4
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L504+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L504+0x10
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L505:
	.align	2, 0
.L504:
	.word	gBattleSpritesDataPtr
	.word	gDoingBattleAnim
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedAnimation
.Lfe33:
	.size	 WallyHandleSuccessBallThrowAnim,.Lfe33-WallyHandleSuccessBallThrowAnim
	.align	2, 0
	.type	 WallyHandleBallThrowAnim,function
	.thumb_func
WallyHandleBallThrowAnim:
	push	{r4, r5, lr}
	ldr	r0, .L507
	ldr	r1, [r0]
	ldr	r5, .L507+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r2, [r1]
	ldr	r0, .L507+0x8
	ldr	r0, [r0]
	ldr	r3, [r0, #0x8]
	mov	r0, #0x3f
	and	r2, r2, r0
	ldrb	r1, [r3, #0x8]
	sub	r0, r0, #0x7f
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3, #0x8]
	ldr	r1, .L507+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r4, [r5]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r3, #0x4
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L507+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L507+0x14
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L508:
	.align	2, 0
.L507:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedAnimation
.Lfe34:
	.size	 WallyHandleBallThrowAnim,.Lfe34-WallyHandleBallThrowAnim
	.align	2, 0
	.type	 WallyHandlePause,function
	.thumb_func
WallyHandlePause:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 WallyHandlePause,.Lfe35-WallyHandlePause
	.align	2, 0
	.type	 WallyHandleMoveAnimation,function
	.thumb_func
WallyHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r0, .L513
	ldr	r0, [r0]
	mov	ip, r0
	ldr	r6, .L513+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L513+0x8
	mov	r1, ip
	add	r1, r1, #0x23
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r5]
	ldr	r4, .L513+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x24
	add	r1, r1, r2
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x25
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L513+0x10
	ldrb	r3, [r6]
	lsl	r3, r3, #0x9
	mov	r1, ip
	add	r1, r1, #0x26
	add	r1, r1, r3
	ldrb	r2, [r1]
	mov	r1, ip
	add	r1, r1, #0x27
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r2, r2, r1
	mov	r1, ip
	add	r1, r1, #0x28
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	mov	r1, ip
	add	r1, r1, #0x29
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x18
	orr	r2, r2, r1
	str	r2, [r4]
	ldr	r3, .L513+0x14
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x2a
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L513+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x2c
	add	r1, r1, r2
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x2d
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L513+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, #0x20
	add	r2, r2, ip
	add	r1, r2, #0
	add	r1, r1, #0x10
	str	r1, [r3]
	ldr	r3, .L513+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2, #0x10]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	IsMoveWithoutAnimation
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L511	@cond_branch
	bl	WallyBufferExecCompleted
	b	.L512
.L514:
	.align	2, 0
.L513:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gAnimMoveTurn
	.word	gAnimMovePower
	.word	gAnimMoveDmg
	.word	gAnimFriendship
	.word	gWeatherMoveAnim
	.word	gAnimDisableStructPtr
	.word	gTransformedPersonalities
.L511:
	ldr	r0, .L515
	ldr	r0, [r0]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x4]
	ldr	r1, .L515+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L515+0x8
	str	r1, [r0]
.L512:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L516:
	.align	2, 0
.L515:
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	WallyDoMoveAnimation
.Lfe36:
	.size	 WallyHandleMoveAnimation,.Lfe36-WallyHandleMoveAnimation
	.align	2, 0
	.type	 WallyDoMoveAnimation,function
	.thumb_func
WallyDoMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L531
	mov	r8, r0
	ldr	r1, [r0]
	ldr	r6, .L531+0x4
	ldrb	r3, [r6]
	lsl	r2, r3, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r4, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldr	r7, .L531+0x8
	ldr	r5, [r7]
	ldr	r1, [r5, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L521	@cond_branch
	cmp	r2, #0x1
	bgt	.L530	@cond_branch
	cmp	r2, #0
	beq	.L519	@cond_branch
	b	.L518
.L532:
	.align	2, 0
.L531:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
.L530:
	cmp	r2, #0x2
	beq	.L523	@cond_branch
	cmp	r2, #0x3
	beq	.L526	@cond_branch
	b	.L518
.L519:
	ldr	r1, [r5]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L520	@cond_branch
	add	r0, r3, #0
	add	r1, r3, #0
	add	r2, r3, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L520:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L518
.L521:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L518	@cond_branch
	mov	r0, #0x0
	bl	sub_805EB9C
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x4]
	b	.L518
.L523:
	ldr	r0, .L533
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L533+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L518	@cond_branch
	mov	r0, #0x1
	bl	sub_805EB9C
	ldr	r0, [r7]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L525	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
.L525:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L518
.L534:
	.align	2, 0
.L533:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
.L526:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L518	@cond_branch
	bl	CopyAllBattleSpritesInvisibilities
	ldrb	r0, [r6]
	mov	r1, r8
	ldr	r2, [r1]
	lsl	r3, r0, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r2, r2, #0x22
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	TrySetBehindSubstituteSpriteBit
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r4, [r0, #0x4]
	bl	WallyBufferExecCompleted
.L518:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 WallyDoMoveAnimation,.Lfe37-WallyDoMoveAnimation
	.align	2, 0
	.type	 WallyHandlePrintString,function
	.thumb_func
WallyHandlePrintString:
	push	{r4, lr}
	ldr	r0, .L536
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L536+0x4
	strh	r1, [r0]
	ldr	r0, .L536+0x8
	ldr	r4, .L536+0xc
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	bl	BufferStringBattle
	ldr	r0, .L536+0x10
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
	ldr	r1, .L536+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L536+0x18
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L537:
	.align	2, 0
.L536:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleResources
	.word	gActiveBattler
	.word	gDisplayedStringBattle
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter
.Lfe38:
	.size	 WallyHandlePrintString,.Lfe38-WallyHandlePrintString
	.align	2, 0
	.type	 WallyHandlePrintSelectionString,function
	.thumb_func
WallyHandlePrintSelectionString:
	push	{lr}
	ldr	r0, .L541
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L539	@cond_branch
	bl	WallyHandlePrintString
	b	.L540
.L542:
	.align	2, 0
.L541:
	.word	gActiveBattler
.L539:
	bl	WallyBufferExecCompleted
.L540:
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 WallyHandlePrintSelectionString,.Lfe39-WallyHandlePrintSelectionString
	.align	2, 0
	.type	 HandleChooseActionAfterDma3,function
	.thumb_func
HandleChooseActionAfterDma3:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L544	@cond_branch
	ldr	r0, .L545
	strh	r1, [r0]
	ldr	r1, .L545+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r1, .L545+0x8
	ldr	r0, .L545+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L545+0x10
	str	r1, [r0]
.L544:
	pop	{r0}
	bx	r0
.L546:
	.align	2, 0
.L545:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	WallyHandleActions
.Lfe40:
	.size	 HandleChooseActionAfterDma3,.Lfe40-HandleChooseActionAfterDma3
	.align	2, 0
	.type	 WallyHandleChooseAction,function
	.thumb_func
WallyHandleChooseAction:
	push	{r4, lr}
	ldr	r1, .L553
	ldr	r0, .L553+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L553+0x8
	str	r1, [r0]
	ldr	r0, .L553+0xc
	mov	r1, #0x2
	bl	BattlePutTextOnWindow
	mov	r4, #0x0
.L551:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	ActionSelectionDestroyCursorAt
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L551	@cond_branch
	ldr	r1, .L553+0x10
	ldr	r0, .L553+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	ActionSelectionCreateCursorAt
	ldr	r0, .L553+0x14
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r0, .L553+0x18
	mov	r1, #0x1
	bl	BattlePutTextOnWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.L554:
	.align	2, 0
.L553:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	HandleChooseActionAfterDma3
	.word	gText_BattleMenu
	.word	gActionSelectionCursor
	.word	gText_WhatWillWallyDo
	.word	gDisplayedStringBattle
.Lfe41:
	.size	 WallyHandleChooseAction,.Lfe41-WallyHandleChooseAction
	.align	2, 0
	.type	 WallyHandleUnknownYesNoBox,function
	.thumb_func
WallyHandleUnknownYesNoBox:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 WallyHandleUnknownYesNoBox,.Lfe42-WallyHandleUnknownYesNoBox
	.align	2, 0
	.type	 WallyHandleChooseMove,function
	.thumb_func
WallyHandleChooseMove:
	push	{r4, lr}
	ldr	r4, .L566
	ldr	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x8e
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L559	@cond_branch
	cmp	r0, #0x1
	bgt	.L565	@cond_branch
	cmp	r0, #0
	beq	.L558	@cond_branch
	b	.L557
.L567:
	.align	2, 0
.L566:
	.word	gBattleStruct
.L565:
	cmp	r0, #0x2
	beq	.L561	@cond_branch
	b	.L557
.L558:
	bl	InitMoveSelectionsVarsAndStrings
	ldr	r1, [r4]
	add	r1, r1, #0x8e
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, #0x90
	mov	r1, #0x50
	strb	r1, [r0]
	b	.L557
.L559:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L557	@cond_branch
	ldr	r0, .L568
	strh	r1, [r0]
	ldr	r1, .L568+0x4
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, [r4]
	add	r1, r1, #0x8e
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L557
.L569:
	.align	2, 0
.L568:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
.L561:
	add	r1, r1, #0x90
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L557	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
	bl	WallyBufferExecCompleted
.L557:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 WallyHandleChooseMove,.Lfe43-WallyHandleChooseMove
	.align	2, 0
	.type	 WallyHandleChooseItem,function
	.thumb_func
WallyHandleChooseItem:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L571
	ldr	r2, .L571+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L571+0x8
	str	r1, [r0]
	ldr	r1, .L571+0xc
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L572:
	.align	2, 0
.L571:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	OpenBagAfterPaletteFade
	.word	gBattlerInMenuId
.Lfe44:
	.size	 WallyHandleChooseItem,.Lfe44-WallyHandleChooseItem
	.align	2, 0
	.type	 WallyHandleChoosePokemon,function
	.thumb_func
WallyHandleChoosePokemon:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 WallyHandleChoosePokemon,.Lfe45-WallyHandleChoosePokemon
	.align	2, 0
	.type	 WallyHandleCmd23,function
	.thumb_func
WallyHandleCmd23:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 WallyHandleCmd23,.Lfe46-WallyHandleCmd23
	.align	2, 0
	.type	 WallyHandleHealthBarUpdate,function
	.thumb_func
WallyHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	ldr	r0, .L578
	ldr	r2, [r0]
	ldr	r0, .L578+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r3, r4, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x22
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r2, r2, #0x23
	add	r2, r2, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r7, r1, #0x10
	ldr	r0, .L578+0x8
	cmp	r7, r0
	beq	.L576	@cond_branch
	ldr	r6, .L578+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L578+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L578+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	SetBattleBarStruct
	b	.L577
.L579:
	.align	2, 0
.L578:
	.word	gBattleResources
	.word	gActiveBattler
	.word	0x7fff
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
.L576:
	ldr	r1, .L580
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L580+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r4, .L580+0x8
	add	r1, r0, r4
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	SetBattleBarStruct
	mov	r1, r9
	ldrb	r0, [r1]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
.L577:
	ldr	r1, .L580+0xc
	ldr	r0, .L580+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L580+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L581:
	.align	2, 0
.L580:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnHealthbarDone
.Lfe47:
	.size	 WallyHandleHealthBarUpdate,.Lfe47-WallyHandleHealthBarUpdate
	.align	2, 0
	.type	 WallyHandleExpUpdate,function
	.thumb_func
WallyHandleExpUpdate:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 WallyHandleExpUpdate,.Lfe48-WallyHandleExpUpdate
	.align	2, 0
	.type	 WallyHandleStatusIconUpdate,function
	.thumb_func
WallyHandleStatusIconUpdate:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 WallyHandleStatusIconUpdate,.Lfe49-WallyHandleStatusIconUpdate
	.align	2, 0
	.type	 WallyHandleStatusAnimation,function
	.thumb_func
WallyHandleStatusAnimation:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 WallyHandleStatusAnimation,.Lfe50-WallyHandleStatusAnimation
	.align	2, 0
	.type	 WallyHandleStatusXor,function
	.thumb_func
WallyHandleStatusXor:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 WallyHandleStatusXor,.Lfe51-WallyHandleStatusXor
	.align	2, 0
	.type	 WallyHandleDataTransfer,function
	.thumb_func
WallyHandleDataTransfer:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 WallyHandleDataTransfer,.Lfe52-WallyHandleDataTransfer
	.align	2, 0
	.type	 WallyHandleDMA3Transfer,function
	.thumb_func
WallyHandleDMA3Transfer:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 WallyHandleDMA3Transfer,.Lfe53-WallyHandleDMA3Transfer
	.align	2, 0
	.type	 WallyHandlePlayBGM,function
	.thumb_func
WallyHandlePlayBGM:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 WallyHandlePlayBGM,.Lfe54-WallyHandlePlayBGM
	.align	2, 0
	.type	 WallyHandleCmd32,function
	.thumb_func
WallyHandleCmd32:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 WallyHandleCmd32,.Lfe55-WallyHandleCmd32
	.align	2, 0
	.type	 WallyHandleTwoReturnValues,function
	.thumb_func
WallyHandleTwoReturnValues:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 WallyHandleTwoReturnValues,.Lfe56-WallyHandleTwoReturnValues
	.align	2, 0
	.type	 WallyHandleChosenMonReturnValue,function
	.thumb_func
WallyHandleChosenMonReturnValue:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 WallyHandleChosenMonReturnValue,.Lfe57-WallyHandleChosenMonReturnValue
	.align	2, 0
	.type	 WallyHandleOneReturnValue,function
	.thumb_func
WallyHandleOneReturnValue:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 WallyHandleOneReturnValue,.Lfe58-WallyHandleOneReturnValue
	.align	2, 0
	.type	 WallyHandleOneReturnValue_Duplicate,function
	.thumb_func
WallyHandleOneReturnValue_Duplicate:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 WallyHandleOneReturnValue_Duplicate,.Lfe59-WallyHandleOneReturnValue_Duplicate
	.align	2, 0
	.type	 WallyHandleCmd37,function
	.thumb_func
WallyHandleCmd37:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 WallyHandleCmd37,.Lfe60-WallyHandleCmd37
	.align	2, 0
	.type	 WallyHandleCmd38,function
	.thumb_func
WallyHandleCmd38:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 WallyHandleCmd38,.Lfe61-WallyHandleCmd38
	.align	2, 0
	.type	 WallyHandleCmd39,function
	.thumb_func
WallyHandleCmd39:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 WallyHandleCmd39,.Lfe62-WallyHandleCmd39
	.align	2, 0
	.type	 WallyHandleCmd40,function
	.thumb_func
WallyHandleCmd40:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 WallyHandleCmd40,.Lfe63-WallyHandleCmd40
	.align	2, 0
	.type	 WallyHandleHitAnimation,function
	.thumb_func
WallyHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L601
	ldr	r2, .L601+0x4
	ldr	r4, .L601+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L599	@cond_branch
	bl	WallyBufferExecCompleted
	b	.L600
.L602:
	.align	2, 0
.L601:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.L599:
	ldr	r1, .L603
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	DoHitAnimHealthboxEffect
	ldr	r1, .L603+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L603+0x8
	str	r1, [r0]
.L600:
	pop	{r4}
	pop	{r0}
	bx	r0
.L604:
	.align	2, 0
.L603:
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	DoHitAnimBlinkSpriteEffect
.Lfe64:
	.size	 WallyHandleHitAnimation,.Lfe64-WallyHandleHitAnimation
	.align	2, 0
	.type	 WallyHandleCmd42,function
	.thumb_func
WallyHandleCmd42:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 WallyHandleCmd42,.Lfe65-WallyHandleCmd42
	.align	2, 0
	.type	 WallyHandlePlaySE,function
	.thumb_func
WallyHandlePlaySE:
	push	{lr}
	ldr	r0, .L607
	ldr	r2, [r0]
	ldr	r0, .L607+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r2, r2, #0x22
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlaySE
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.L608:
	.align	2, 0
.L607:
	.word	gBattleResources
	.word	gActiveBattler
.Lfe66:
	.size	 WallyHandlePlaySE,.Lfe66-WallyHandlePlaySE
	.align	2, 0
	.type	 WallyHandlePlayFanfareOrBGM,function
	.thumb_func
WallyHandlePlayFanfareOrBGM:
	push	{r4, r5, lr}
	ldr	r5, .L612
	ldr	r1, [r5]
	ldr	r4, .L612+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x23
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L610	@cond_branch
	bl	BattleStopLowHpSound
	ldr	r1, [r5]
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayBGM
	b	.L611
.L613:
	.align	2, 0
.L612:
	.word	gBattleResources
	.word	gActiveBattler
.L610:
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
.L611:
	bl	WallyBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 WallyHandlePlayFanfareOrBGM,.Lfe67-WallyHandlePlayFanfareOrBGM
	.align	2, 0
	.type	 WallyHandleFaintingCry,function
	.thumb_func
WallyHandleFaintingCry:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r0, .L615
	mov	r9, r0
	ldr	r1, .L615+0x4
	mov	r8, r1
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L615+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x59
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	GetFormSpeciesId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	bl	PlayCry1
	bl	WallyBufferExecCompleted
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L616:
	.align	2, 0
.L615:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gPlayerParty
.Lfe68:
	.size	 WallyHandleFaintingCry,.Lfe68-WallyHandleFaintingCry
	.align	2, 0
	.type	 WallyHandleIntroSlide,function
	.thumb_func
WallyHandleIntroSlide:
	push	{lr}
	ldr	r0, .L618
	ldr	r1, [r0]
	ldr	r0, .L618+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	HandleIntroSlide
	ldr	r2, .L618+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.L619:
	.align	2, 0
.L618:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gIntroSlideFlags
.Lfe69:
	.size	 WallyHandleIntroSlide,.Lfe69-WallyHandleIntroSlide
	.align	2, 0
	.type	 WallyHandleIntroTrainerBallThrow,function
	.thumb_func
WallyHandleIntroTrainerBallThrow:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L622
	ldr	r7, .L622+0x4
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L622+0x8
	add	r0, r0, r5
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x32
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L622+0xc
	strh	r1, [r0, #0x32]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L622+0x10
	str	r1, [r0]
	ldrb	r2, [r7]
	add	r0, r2, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x38]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L622+0x14
	bl	StoreSpriteCallbackInData6
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r0, .L622+0x18
	bl	AllocSpritePalette
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	ldr	r0, .L622+0x1c
	ldr	r0, [r0, #0x30]
	lsr	r4, r4, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r1, #0x5]
	ldr	r0, .L622+0x20
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L622+0x24
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r7]
	strh	r0, [r1, #0x8]
	ldr	r3, .L622+0x28
	ldr	r0, [r3]
	ldrb	r2, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L621	@cond_branch
	ldr	r0, .L622+0x2c
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L622+0x30
	str	r1, [r0]
.L621:
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L622+0x34
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L622+0x38
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L623:
	.align	2, 0
.L622:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	0xffd8
	.word	StartAnimLinearTranslation
	.word	sub_805CC00
	.word	0xd6f8
	.word	gTrainerBackPicPaletteTable
	.word	sub_816AC04
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
	.word	gBattlerControllerFuncs
	.word	nullsub_21
.Lfe70:
	.size	 WallyHandleIntroTrainerBallThrow,.Lfe70-WallyHandleIntroTrainerBallThrow
	.align	2, 0
	.type	 sub_816AA80,function
	.thumb_func
sub_816AA80:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L625
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x2]
	ldr	r0, .L625+0x4
	lsl	r4, r6, #0x1
	add	r4, r4, r0
	ldr	r0, .L625+0x8
	ldr	r0, [r0]
	lsl	r1, r6, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r5, .L625+0xc
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	mov	r9, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldrh	r0, [r4]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r5
	mov	r1, #0x59
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L625+0x10
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L625+0x14
	mov	r8, r1
	add	r8, r8, r6
	mov	r1, r8
	strb	r0, [r1]
	add	r0, r6, #0
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L625+0x18
	mov	sl, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, sl
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L625+0x1c
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L625+0x20
	mov	r0, r8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	mov	r0, r8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x32]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r9
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L625+0x24
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L625+0x28
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xff
	bl	DoPokeballSendOutAnimation
	mov	r1, r8
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L626:
	.align	2, 0
.L625:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gBattleResources
	.word	gPlayerParty
	.word	sub_805D714
	.word	gUnknown_03005D7C
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe71:
	.size	 sub_816AA80,.Lfe71-sub_816AA80
	.align	2, 0
	.type	 sub_816AC04,function
	.thumb_func
sub_816AC04:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L630
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x1e
	bgt	.L628	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0xa]
	b	.L629
.L631:
	.align	2, 0
.L630:
	.word	gTasks
.L628:
	ldr	r4, .L632
	ldrb	r5, [r4]
	ldrh	r0, [r1, #0x8]
	strb	r0, [r4]
	ldr	r0, .L632+0x4
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldr	r2, .L632+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r4]
	bl	sub_816AA80
	ldr	r1, .L632+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L632+0x10
	str	r1, [r0]
	strb	r5, [r4]
	add	r0, r6, #0
	bl	DestroyTask
.L629:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L633:
	.align	2, 0
.L632:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlerPartyIndexes
	.word	gBattlerControllerFuncs
	.word	sub_816864C
.Lfe72:
	.size	 sub_816AC04,.Lfe72-sub_816AC04
	.align	2, 0
	.type	 WallyHandleDrawPartyStatusSummary,function
	.thumb_func
WallyHandleDrawPartyStatusSummary:
	push	{r4, r5, lr}
	ldr	r0, .L637
	ldr	r0, [r0]
	ldr	r1, .L637+0x4
	ldrb	r2, [r1]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L635	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L635	@cond_branch
	bl	WallyBufferExecCompleted
	b	.L636
.L638:
	.align	2, 0
.L637:
	.word	gBattleResources
	.word	gActiveBattler
.L635:
	ldr	r0, .L639
	ldr	r0, [r0]
	ldr	r5, .L639+0x4
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r5]
	ldr	r2, .L639+0x8
	lsl	r4, r0, #0x9
	add	r1, r4, #0
	add	r1, r1, #0x20
	ldr	r3, [r2]
	add	r1, r3, r1
	add	r1, r1, #0x4
	add	r2, r3, #0
	add	r2, r2, #0x21
	add	r2, r2, r4
	ldrb	r2, [r2]
	add	r3, r3, #0x22
	add	r3, r3, r4
	ldrb	r3, [r3]
	bl	CreatePartyStatusSummarySprites
	ldr	r2, .L639+0xc
	ldrb	r1, [r5]
	add	r1, r1, r2
	strb	r0, [r1]
	bl	WallyBufferExecCompleted
.L636:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L640:
	.align	2, 0
.L639:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlerStatusSummaryTaskId
.Lfe73:
	.size	 WallyHandleDrawPartyStatusSummary,.Lfe73-WallyHandleDrawPartyStatusSummary
	.align	2, 0
	.type	 WallyHandleHidePartyStatusSummary,function
	.thumb_func
WallyHandleHidePartyStatusSummary:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe74:
	.size	 WallyHandleHidePartyStatusSummary,.Lfe74-WallyHandleHidePartyStatusSummary
	.align	2, 0
	.type	 WallyHandleEndBounceEffect,function
	.thumb_func
WallyHandleEndBounceEffect:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 WallyHandleEndBounceEffect,.Lfe75-WallyHandleEndBounceEffect
	.align	2, 0
	.type	 WallyHandleSpriteInvisibility,function
	.thumb_func
WallyHandleSpriteInvisibility:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe76:
	.size	 WallyHandleSpriteInvisibility,.Lfe76-WallyHandleSpriteInvisibility
	.align	2, 0
	.type	 WallyHandleBattleAnimation,function
	.thumb_func
WallyHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L647
	ldr	r1, [r0]
	ldr	r6, .L647+0x4
	ldrb	r2, [r6]
	lsl	r5, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r5
	ldrb	r3, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x22
	add	r0, r0, r5
	ldrb	r4, [r0]
	add	r1, r1, #0x23
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	TryHandleLaunchBattleTableAnimation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L645	@cond_branch
	bl	WallyBufferExecCompleted
	b	.L646
.L648:
	.align	2, 0
.L647:
	.word	gBattleResources
	.word	gActiveBattler
.L645:
	ldr	r0, .L649
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L649+0x4
	str	r0, [r1]
.L646:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L650:
	.align	2, 0
.L649:
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedBattleAnimation
.Lfe77:
	.size	 WallyHandleBattleAnimation,.Lfe77-WallyHandleBattleAnimation
	.align	2, 0
	.type	 WallyHandleLinkStandbyMsg,function
	.thumb_func
WallyHandleLinkStandbyMsg:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 WallyHandleLinkStandbyMsg,.Lfe78-WallyHandleLinkStandbyMsg
	.align	2, 0
	.type	 WallyHandleResetActionMoveSelection,function
	.thumb_func
WallyHandleResetActionMoveSelection:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe79:
	.size	 WallyHandleResetActionMoveSelection,.Lfe79-WallyHandleResetActionMoveSelection
	.align	2, 0
	.type	 WallyHandleCmd55,function
	.thumb_func
WallyHandleCmd55:
	push	{r4, lr}
	ldr	r2, .L655
	ldr	r0, .L655+0x4
	ldr	r1, [r0]
	ldr	r4, .L655+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	mov	r0, #0x5
	bl	FadeOutMapMusic
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	bl	WallyBufferExecCompleted
	ldr	r0, .L655+0xc
	ldr	r0, [r0]
	mov	r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0x2
	bne	.L654	@cond_branch
	ldr	r0, .L655+0x10
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L655+0x14
	str	r0, [r1]
.L654:
	pop	{r4}
	pop	{r0}
	bx	r0
.L656:
	.align	2, 0
.L655:
	.word	gBattleOutcome
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattlerControllerFuncs
	.word	sub_80587B0
.Lfe80:
	.size	 WallyHandleCmd55,.Lfe80-WallyHandleCmd55
	.align	2, 0
	.type	 WallyHandleBattleDebug,function
	.thumb_func
WallyHandleBattleDebug:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 WallyHandleBattleDebug,.Lfe81-WallyHandleBattleDebug
	.align	2, 0
	.type	 WallyCmdEnd,function
	.thumb_func
WallyCmdEnd:
	bx	lr
.Lfe82:
	.size	 WallyCmdEnd,.Lfe82-WallyCmdEnd
.text
	.align	2, 0

