@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sPlayerPartnerBufferCommands,object
	.size	 sPlayerPartnerBufferCommands,232
sPlayerPartnerBufferCommands:
	.word	PlayerPartnerHandleGetMonData
	.word	PlayerPartnerHandleGetRawMonData
	.word	PlayerPartnerHandleSetMonData
	.word	PlayerPartnerHandleSetRawMonData
	.word	PlayerPartnerHandleLoadMonSprite
	.word	PlayerPartnerHandleSwitchInAnim
	.word	PlayerPartnerHandleReturnMonToBall
	.word	PlayerPartnerHandleDrawTrainerPic
	.word	PlayerPartnerHandleTrainerSlide
	.word	PlayerPartnerHandleTrainerSlideBack
	.word	PlayerPartnerHandleFaintAnimation
	.word	PlayerPartnerHandlePaletteFade
	.word	PlayerPartnerHandleSuccessBallThrowAnim
	.word	PlayerPartnerHandleBallThrowAnim
	.word	PlayerPartnerHandlePause
	.word	PlayerPartnerHandleMoveAnimation
	.word	PlayerPartnerHandlePrintString
	.word	PlayerPartnerHandlePrintSelectionString
	.word	PlayerPartnerHandleChooseAction
	.word	PlayerPartnerHandleUnknownYesNoBox
	.word	PlayerPartnerHandleChooseMove
	.word	PlayerPartnerHandleChooseItem
	.word	PlayerPartnerHandleChoosePokemon
	.word	PlayerPartnerHandleCmd23
	.word	PlayerPartnerHandleHealthBarUpdate
	.word	PlayerPartnerHandleExpUpdate
	.word	PlayerPartnerHandleStatusIconUpdate
	.word	PlayerPartnerHandleStatusAnimation
	.word	PlayerPartnerHandleStatusXor
	.word	PlayerPartnerHandleDataTransfer
	.word	PlayerPartnerHandleDMA3Transfer
	.word	PlayerPartnerHandlePlayBGM
	.word	PlayerPartnerHandleCmd32
	.word	PlayerPartnerHandleTwoReturnValues
	.word	PlayerPartnerHandleChosenMonReturnValue
	.word	PlayerPartnerHandleOneReturnValue
	.word	PlayerPartnerHandleOneReturnValue_Duplicate
	.word	PlayerPartnerHandleCmd37
	.word	PlayerPartnerHandleCmd38
	.word	PlayerPartnerHandleCmd39
	.word	PlayerPartnerHandleCmd40
	.word	PlayerPartnerHandleHitAnimation
	.word	PlayerPartnerHandleCmd42
	.word	PlayerPartnerHandlePlaySE
	.word	PlayerPartnerHandlePlayFanfareOrBGM
	.word	PlayerPartnerHandleFaintingCry
	.word	PlayerPartnerHandleIntroSlide
	.word	PlayerPartnerHandleIntroTrainerBallThrow
	.word	PlayerPartnerHandleDrawPartyStatusSummary
	.word	PlayerPartnerHandleHidePartyStatusSummary
	.word	PlayerPartnerHandleEndBounceEffect
	.word	PlayerPartnerHandleSpriteInvisibility
	.word	PlayerPartnerHandleBattleAnimation
	.word	PlayerPartnerHandleLinkStandbyMsg
	.word	PlayerPartnerHandleResetActionMoveSelection
	.word	PlayerPartnerHandleCmd55
	.word	PlayerPartnerHandleBattleDebug
	.word	PlayerPartnerCmdEnd
	.type	 sUnknown_08617254,object
sUnknown_08617254:
	.byte	0x83
	.byte	0x4d
	.byte	0xf3
	.byte	0x5f
	.byte	0x6f
	.byte	0x4f
	.byte	0xeb
	.byte	0x3e
	.byte	0x67
	.byte	0x2e
	.byte	0x10
	.byte	0x46
	.byte	0x8c
	.byte	0x3d
	.byte	0x28
	.byte	0x35
	.byte	0xc5
	.byte	0x2c
	.byte	0x15
	.byte	0x7f
	.byte	0xb5
	.byte	0x56
	.byte	0x9d
	.byte	0x53
	.byte	0x3b
	.byte	0x43
	.byte	0xda
	.byte	0x36
	.byte	0x79
	.byte	0x2a
	.byte	0xe
	.byte	0x53
	.size	 sUnknown_08617254,32
.text
	.align	2, 0
	.type	 nullsub_77,function
	.thumb_func
nullsub_77:
	bx	lr
.Lfe1:
	.size	 nullsub_77,.Lfe1-nullsub_77
	.align	2, 0
	.globl	SetControllerToPlayerPartner
	.type	 SetControllerToPlayerPartner,function
	.thumb_func
SetControllerToPlayerPartner:
	ldr	r1, .L4
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L4+0x8
	str	r1, [r0]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PlayerPartnerBufferRunCommand
.Lfe2:
	.size	 SetControllerToPlayerPartner,.Lfe2-SetControllerToPlayerPartner
	.align	2, 0
	.type	 PlayerPartnerBufferRunCommand,function
	.thumb_func
PlayerPartnerBufferRunCommand:
	push	{lr}
	ldr	r2, .L10
	ldr	r1, .L10+0x4
	ldr	r0, .L10+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L7	@cond_branch
	ldr	r0, .L10+0xc
	ldr	r0, [r0]
	lsl	r1, r3, #0x9
	add	r0, r0, #0x20
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0x39
	bhi	.L8	@cond_branch
	ldr	r0, .L10+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L7
.L11:
	.align	2, 0
.L10:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleResources
	.word	sPlayerPartnerBufferCommands
.L8:
	bl	PlayerPartnerBufferExecCompleted
.L7:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 PlayerPartnerBufferRunCommand,.Lfe3-PlayerPartnerBufferRunCommand
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy:
	push	{lr}
	ldr	r2, .L14
	ldr	r1, .L14+0x4
	ldr	r0, .L14+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L14+0xc
	cmp	r1, r0
	bne	.L13	@cond_branch
	bl	PlayerPartnerBufferExecCompleted
.L13:
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe4:
	.size	 CompleteOnBattlerSpriteCallbackDummy,.Lfe4-CompleteOnBattlerSpriteCallbackDummy
	.align	2, 0
	.type	 sub_81BAE98,function
	.thumb_func
sub_81BAE98:
	push	{r4, r5, r6, lr}
	ldr	r6, .L18
	ldr	r5, .L18+0x4
	ldr	r4, .L18+0x8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L18+0xc
	cmp	r1, r0
	bne	.L17	@cond_branch
	mov	r0, #0x0
	bl	nullsub_25
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	bl	PlayerPartnerBufferExecCompleted
.L17:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe5:
	.size	 sub_81BAE98,.Lfe5-sub_81BAE98
	.align	2, 0
	.type	 sub_81BAF00,function
	.thumb_func
sub_81BAF00:
	push	{r4, lr}
	ldr	r4, .L22
	ldr	r1, [r4]
	ldr	r3, .L22+0x4
	ldrb	r0, [r3]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L21	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	bl	PlayerPartnerBufferExecCompleted
.L21:
	pop	{r4}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe6:
	.size	 sub_81BAF00,.Lfe6-sub_81BAF00
	.align	2, 0
	.type	 sub_81BAF48,function
	.thumb_func
sub_81BAF48:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L26	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L25	@cond_branch
	ldr	r0, .L33
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L25	@cond_branch
.L26:
	ldr	r2, .L33+0x4
	ldr	r1, .L33+0x8
	ldr	r0, .L33+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L33+0x10
	cmp	r1, r0
	bne	.L28	@cond_branch
	b	.L32
.L34:
	.align	2, 0
.L33:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.L25:
	ldr	r2, .L35
	ldr	r5, .L35+0x4
	ldr	r0, .L35+0x8
	ldrb	r3, [r0]
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r2, #0
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r2, [r0]
	ldr	r0, .L35+0xc
	cmp	r2, r0
	bne	.L28	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	cmp	r0, r2
	bne	.L28	@cond_branch
.L32:
	mov	r6, #0x1
.L28:
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L30	@cond_branch
	mov	r6, #0x0
.L30:
	cmp	r6, #0
	beq	.L31	@cond_branch
	ldr	r0, .L35+0x10
	ldr	r0, [r0]
	ldr	r3, .L35+0x8
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x9]
	ldr	r1, .L35+0x14
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L35+0x18
	str	r1, [r0]
.L31:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_81BAF00
.Lfe7:
	.size	 sub_81BAF48,.Lfe7-sub_81BAF48
	.align	2, 0
	.type	 sub_81BB02C,function
	.thumb_func
sub_81BB02C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L40
	mov	ip, r0
	ldr	r0, [r0]
	ldr	r7, .L40+0x4
	ldrb	r2, [r7]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r3
	ldrb	r1, [r4]
	mov	r5, #0x8
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB384
	b	.L38	@long jump
.LCB384:
	mov	r1, #0x2
	mov	r8, r1
	add	r1, r2, #0
	mov	r0, r8
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r0, r5, #0
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	beq	.LCB402
	b	.L38	@long jump
.LCB402:
	ldr	r1, .L40+0x8
	mov	sl, r1
	ldr	r0, .L40+0xc
	mov	r9, r0
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r5, sl
	add	r5, r5, #0x1c
	add	r0, r0, r5
	ldr	r3, [r0]
	ldr	r0, .L40+0x10
	cmp	r3, r0
	bne	.L38	@cond_branch
	ldr	r0, .L40+0x14
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	cmp	r0, r3
	bne	.L38	@cond_branch
	ldrb	r0, [r4, #0x9]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L38	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	ldrb	r1, [r7]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r6, [r0, #0x9]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L39	@cond_branch
	ldr	r0, .L40+0x18
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L39	@cond_branch
	ldrb	r0, [r7]
	mov	r1, r8
	eor	r0, r0, r1
	add	r0, r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	bl	DestroySprite
	ldr	r4, .L40+0x1c
	ldrb	r0, [r7]
	mov	r1, r8
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L40+0x20
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L40+0x24
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r7]
	mov	r1, r8
	eor	r0, r0, r1
	bl	sub_8076918
	ldrb	r0, [r7]
	mov	r1, r8
	eor	r0, r0, r1
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L39:
	ldr	r1, .L40+0xc
	ldr	r4, .L40+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L40+0x8
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r5, .L40+0x1c
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L40+0x20
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L40+0x24
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r4]
	bl	sub_8076918
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldr	r0, .L40
	ldr	r0, [r0]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L40+0x28
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L40+0x2c
	str	r1, [r0]
.L38:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
	.word	gBattleTypeFlags
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	sub_81BAF48
.Lfe8:
	.size	 sub_81BB02C,.Lfe8-sub_81BB02C
	.align	2, 0
	.type	 sub_81BB1D4,function
	.thumb_func
sub_81BB1D4:
	push	{lr}
	ldr	r2, .L44
	ldr	r1, .L44+0x4
	ldr	r0, .L44+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L43	@cond_branch
	mov	r2, #0x24
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L43	@cond_branch
	bl	PlayerPartnerBufferExecCompleted
.L43:
	pop	{r0}
	bx	r0
.L45:
	.align	2, 0
.L44:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.Lfe9:
	.size	 sub_81BB1D4,.Lfe9-sub_81BB1D4
	.align	2, 0
	.type	 CompleteOnHealthbarDone,function
	.thumb_func
CompleteOnHealthbarDone:
	push	{r4, r5, r6, lr}
	ldr	r5, .L49
	ldrb	r0, [r5]
	ldr	r6, .L49+0x4
	add	r1, r0, r6
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L47	@cond_branch
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
	b	.L48
.L50:
	.align	2, 0
.L49:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.L47:
	ldr	r2, .L51
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L51+0x4
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	bl	PlayerPartnerBufferExecCompleted
.L48:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe10:
	.size	 CompleteOnHealthbarDone,.Lfe10-CompleteOnHealthbarDone
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter,function
	.thumb_func
CompleteOnInactiveTextPrinter:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L54	@cond_branch
	bl	PlayerPartnerBufferExecCompleted
.L54:
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 CompleteOnInactiveTextPrinter,.Lfe11-CompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 Task_GiveExpToMon,function
	.thumb_func
Task_GiveExpToMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L66
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r8, r0
	ldrb	r0, [r0, #0x8]
	mov	sl, r0
	mov	r1, r8
	ldrb	r7, [r1, #0xc]
	str	r7, [sp, #0x8]
	ldrh	r2, [r1, #0xa]
	str	r2, [sp, #0xc]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L57	@cond_branch
	ldr	r1, .L66+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	sl, r0
	bne	.LCB766
	b	.L56	@long jump
.LCB766:
.L57:
	mov	r0, #0x64
	mov	r1, sl
	mul	r1, r1, r0
	ldr	r0, .L66+0x8
	add	r6, r1, r0
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x4]
	ldr	r3, .L66+0xc
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	ldr	r2, .L66+0x10
	lsl	r1, r5, #0x3
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x15]
	mov	r1, #0xca
	lsl	r1, r1, #0x1
	mul	r1, r1, r2
	add	r4, r4, r1
	add	r4, r4, r3
	ldr	r2, [r4]
	str	r2, [sp]
	ldr	r3, [sp, #0xc]
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x10
	add	r0, r0, r1
	cmp	r0, r2
	bcc	.L58	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x19
	mov	r2, sp
	bl	SetMonData
	add	r0, r6, #0
	bl	CalculateMonStats
	ldr	r2, [sp]
	add	r0, sp, #0x4
	ldrh	r0, [r0]
	sub	r2, r2, r0
	ldr	r0, [sp, #0xc]
	sub	r2, r0, r2
	ldr	r4, .L66+0x14
	ldrb	r5, [r4]
	strb	r7, [r4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0xb
	bl	BtlController_EmitTwoReturnValues
	strb	r5, [r4]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L59	@cond_branch
	ldr	r2, .L66+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r2
	mov	r1, sl
	ldrh	r0, [r0]
	cmp	r1, r0
	beq	.L60	@cond_branch
	mov	r0, #0x2
	eor	r7, r7, r0
	lsl	r0, r7, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L59	@cond_branch
.L60:
	ldr	r0, .L66+0x18
	b	.L64
.L67:
	.align	2, 0
.L66:
	.word	gTasks
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gBaseStats
	.word	gActiveBattler
	.word	sub_81BB628
.L59:
	ldr	r0, .L68
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L68+0x4
	b	.L65
.L69:
	.align	2, 0
.L68:
	.word	gTasks
	.word	DestroyExpTaskAndCompleteOnInactiveTextPrinter
.L58:
	str	r0, [sp, #0x4]
	add	r2, sp, #0x4
	add	r0, r6, #0
	mov	r1, #0x19
	bl	SetMonData
	ldr	r1, .L70
	ldr	r3, [sp, #0x8]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, .L70+0x4
	str	r1, [r0]
	mov	r0, r9
	bl	DestroyTask
	b	.L63
.L71:
	.align	2, 0
.L70:
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter
.L56:
	ldr	r0, .L72
.L64:
	mov	r1, r8
.L65:
	str	r0, [r1]
.L63:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	Task_PrepareToGiveExpWithExpBar
.Lfe12:
	.size	 Task_GiveExpToMon,.Lfe12-Task_GiveExpToMon
	.align	2, 0
	.type	 Task_PrepareToGiveExpWithExpBar,function
	.thumb_func
Task_PrepareToGiveExpWithExpBar:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L75
	lsl	r2, r0, #0x2
	mov	r8, r2
	add	r8, r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x3
	mov	r8, r0
	add	r8, r8, r1
	mov	r2, r8
	ldrb	r1, [r2, #0x8]
	mov	r0, #0xa
	ldrsh	r2, [r2, r0]
	mov	r9, r2
	mov	r2, r8
	ldrb	r2, [r2, #0xc]
	mov	sl, r2
	mov	r0, #0x64
	mov	r6, r1
	mul	r6, r6, r0
	ldr	r0, .L75+0x4
	add	r6, r6, r0
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	mov	r1, #0x19
	bl	GetMonData
	add	r3, r0, #0
	ldr	r6, .L75+0x8
	lsl	r1, r4, #0x2
	ldr	r2, .L75+0xc
	lsl	r0, r5, #0x3
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x15]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r6
	ldr	r1, [r1]
	sub	r3, r3, r1
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	add	r4, r4, r6
	ldr	r2, [r4]
	sub	r2, r2, r1
	ldr	r0, .L75+0x10
	add	r0, r0, sl
	ldrb	r1, [r0]
	mov	r0, r9
	neg	r0, r0
	str	r0, [sp]
	mov	r0, sl
	bl	SetBattleBarStruct
	mov	r0, #0x21
	bl	PlaySE
	ldr	r0, .L75+0x14
	mov	r1, r8
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gTasks
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gBaseStats
	.word	gHealthboxSpriteIds
	.word	sub_81BB4E4
.Lfe13:
	.size	 Task_PrepareToGiveExpWithExpBar,.Lfe13-Task_PrepareToGiveExpWithExpBar
	.align	2, 0
	.type	 sub_81BB4E4,function
	.thumb_func
sub_81BB4E4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L83
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrh	r1, [r6, #0x1c]
	mov	r2, #0x1c
	ldrsh	r0, [r6, r2]
	cmp	r0, #0xc
	bgt	.L78	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r6, #0x1c]
	b	.L79
.L84:
	.align	2, 0
.L83:
	.word	gTasks
.L78:
	ldrb	r0, [r6, #0x8]
	mov	r9, r0
	ldrh	r2, [r6, #0xa]
	mov	sl, r2
	ldrb	r7, [r6, #0xc]
	ldr	r5, .L85
	add	r5, r7, r5
	ldrb	r1, [r5]
	add	r0, r7, #0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r4, r0
	bne	.L79	@cond_branch
	mov	r0, #0x21
	bl	m4aSongNumStop
	mov	r0, #0x64
	mov	r1, r9
	mul	r1, r1, r0
	ldr	r0, .L85+0x4
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x4]
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r3, .L85+0x8
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	ldr	r2, .L85+0xc
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x15]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mul	r0, r0, r1
	add	r4, r4, r0
	add	r4, r4, r3
	ldr	r1, [r4]
	str	r1, [sp]
	mov	r2, sl
	lsl	r0, r2, #0x10
	asr	r4, r0, #0x10
	ldr	r0, [sp, #0x4]
	add	r0, r0, r4
	cmp	r0, r1
	blt	.L81	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x19
	mov	r2, sp
	bl	SetMonData
	add	r0, r5, #0
	bl	CalculateMonStats
	ldr	r2, [sp]
	add	r0, sp, #0x4
	ldrh	r0, [r0]
	sub	r2, r2, r0
	sub	r2, r4, r2
	ldr	r4, .L85+0x10
	ldrb	r5, [r4]
	strb	r7, [r4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0xb
	bl	BtlController_EmitTwoReturnValues
	strb	r5, [r4]
	ldr	r0, .L85+0x14
	str	r0, [r6]
	b	.L79
.L86:
	.align	2, 0
.L85:
	.word	gHealthboxSpriteIds
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gBaseStats
	.word	gActiveBattler
	.word	sub_81BB628
.L81:
	str	r0, [sp, #0x4]
	add	r2, sp, #0x4
	add	r0, r5, #0
	mov	r1, #0x19
	bl	SetMonData
	ldr	r1, .L87
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r1, .L87+0x4
	str	r1, [r0]
	mov	r0, r8
	bl	DestroyTask
.L79:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter
.Lfe14:
	.size	 sub_81BB4E4,.Lfe14-sub_81BB4E4
	.align	2, 0
	.type	 sub_81BB628,function
	.thumb_func
sub_81BB628:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L91
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r4, [r0, #0xc]
	ldrb	r6, [r0, #0x8]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L90	@cond_branch
	ldr	r1, .L91+0x4
	mov	r0, #0x2
	add	r2, r4, #0
	eor	r2, r2, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	bne	.L90	@cond_branch
	add	r4, r2, #0
.L90:
	add	r0, r4, #0
	add	r1, r4, #0
	add	r2, r4, #0
	mov	r3, #0x0
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, .L91
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L91+0x8
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L92:
	.align	2, 0
.L91:
	.word	gTasks
	.word	gBattlerPartyIndexes
	.word	sub_81BB688
.Lfe15:
	.size	 sub_81BB628,.Lfe15-sub_81BB628
	.align	2, 0
	.type	 sub_81BB688,function
	.thumb_func
sub_81BB688:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L97
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	ldrb	r5, [r2, #0xc]
	ldr	r0, .L97+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L94	@cond_branch
	ldrb	r4, [r2, #0x8]
	mov	r0, #0x64
	mov	r1, r4
	mul	r1, r1, r0
	ldr	r0, .L97+0x8
	add	r7, r1, r0
	add	r0, r7, #0
	mov	r1, #0x38
	bl	GetMonData
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L95	@cond_branch
	ldr	r1, .L97+0xc
	mov	r0, #0x2
	add	r2, r5, #0
	eor	r2, r2, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L95	@cond_branch
	ldr	r0, .L97+0x10
	add	r0, r2, r0
	ldrb	r0, [r0]
	add	r1, r7, #0
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	b	.L96
.L98:
	.align	2, 0
.L97:
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gPlayerParty
	.word	gBattlerPartyIndexes
	.word	gHealthboxSpriteIds
.L95:
	ldr	r0, .L99
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r1, #0x64
	mul	r1, r1, r4
	ldr	r2, .L99+0x4
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
.L96:
	ldr	r0, .L99+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L99+0xc
	str	r0, [r1]
.L94:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	gHealthboxSpriteIds
	.word	gPlayerParty
	.word	gTasks
	.word	DestroyExpTaskAndCompleteOnInactiveTextPrinter
.Lfe16:
	.size	 sub_81BB688,.Lfe16-sub_81BB688
	.align	2, 0
	.type	 DestroyExpTaskAndCompleteOnInactiveTextPrinter,function
	.thumb_func
DestroyExpTaskAndCompleteOnInactiveTextPrinter:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L102
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrb	r1, [r4, #0x8]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L102+0x4
	add	r0, r0, r1
	mov	r1, #0x38
	bl	GetMonData
	ldrb	r0, [r4, #0xc]
	ldr	r1, .L102+0x8
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L102+0xc
	str	r1, [r0]
	add	r0, r5, #0
	bl	DestroyTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L103:
	.align	2, 0
.L102:
	.word	gTasks
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter
.Lfe17:
	.size	 DestroyExpTaskAndCompleteOnInactiveTextPrinter,.Lfe17-DestroyExpTaskAndCompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 sub_81BB78C,function
	.thumb_func
sub_81BB78C:
	push	{r4, r5, r6, lr}
	ldr	r6, .L106
	ldr	r5, .L106+0x4
	ldr	r4, .L106+0x8
	ldrb	r2, [r4]
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r3, #0x22
	ldrsh	r1, [r0, r3]
	mov	r3, #0x26
	ldrsh	r0, [r0, r3]
	add	r1, r1, r0
	cmp	r1, #0xa0
	ble	.L105	@cond_branch
	ldr	r1, .L106+0xc
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L106+0x10
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	nullsub_24
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	ldr	r1, .L106+0x14
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	PlayerPartnerBufferExecCompleted
.L105:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
.Lfe18:
	.size	 sub_81BB78C,.Lfe18-sub_81BB78C
	.align	2, 0
	.type	 sub_81BB828,function
	.thumb_func
sub_81BB828:
	push	{r4, r5, r6, lr}
	ldr	r0, .L110
	ldr	r0, [r0]
	ldr	r6, .L110+0x4
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L109	@cond_branch
	ldr	r5, .L110+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L110+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L110+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	PlayerPartnerBufferExecCompleted
.L109:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L111:
	.align	2, 0
.L110:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe19:
	.size	 sub_81BB828,.Lfe19-sub_81BB828
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter2,function
	.thumb_func
CompleteOnInactiveTextPrinter2:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L113	@cond_branch
	bl	PlayerPartnerBufferExecCompleted
.L113:
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 CompleteOnInactiveTextPrinter2,.Lfe20-CompleteOnInactiveTextPrinter2
	.align	2, 0
	.type	 DoHitAnimBlinkSpriteEffect,function
	.thumb_func
DoHitAnimBlinkSpriteEffect:
	push	{r4, lr}
	ldr	r1, .L118
	ldr	r0, .L118+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L118+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L115	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L118+0xc
	strb	r3, [r0]
	bl	PlayerPartnerBufferExecCompleted
	b	.L116
.L119:
	.align	2, 0
.L118:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	gDoingBattleAnim
.L115:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L117	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L117:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L116:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 DoHitAnimBlinkSpriteEffect,.Lfe21-DoHitAnimBlinkSpriteEffect
	.align	2, 0
	.type	 sub_81BB92C,function
	.thumb_func
sub_81BB92C:
	push	{r4, lr}
	ldr	r2, .L123
	ldr	r0, .L123+0x4
	ldr	r4, .L123+0x8
	ldrb	r3, [r4]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L123+0xc
	cmp	r1, r0
	bne	.L121	@cond_branch
	add	r0, r3, #0
	bl	CopyBattleSpriteInvisibility
	ldr	r0, .L123+0x10
	ldr	r0, [r0]
	ldrb	r2, [r4]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L122	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
.L122:
	ldr	r0, .L123+0x14
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L123+0x18
	str	r0, [r1]
.L121:
	pop	{r4}
	pop	{r0}
	bx	r0
.L124:
	.align	2, 0
.L123:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_81BB9A0
.Lfe22:
	.size	 sub_81BB92C,.Lfe22-sub_81BB92C
	.align	2, 0
	.type	 sub_81BB9A0,function
	.thumb_func
sub_81BB9A0:
	push	{lr}
	ldr	r0, .L127
	ldr	r1, [r0]
	ldr	r0, .L127+0x4
	ldrb	r3, [r0]
	ldr	r1, [r1, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L126	@cond_branch
	ldr	r2, .L127+0x8
	ldr	r0, .L127+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L127+0x10
	cmp	r1, r0
	bne	.L126	@cond_branch
	bl	PlayerPartnerBufferExecCompleted
.L126:
	pop	{r0}
	bx	r0
.L128:
	.align	2, 0
.L127:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCallbackDummy
.Lfe23:
	.size	 sub_81BB9A0,.Lfe23-sub_81BB9A0
	.align	2, 0
	.type	 sub_81BB9F4,function
	.thumb_func
sub_81BB9F4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r3, .L131
	ldr	r0, [r3]
	ldr	r7, .L131+0x4
	ldrb	r1, [r7]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L130	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r3]
	ldrb	r2, [r7]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L131+0x8
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r0, .L131+0xc
	mov	r1, #0xa
	bl	CreateTask
	ldr	r0, .L131+0x10
	mov	r8, r0
	ldrb	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L131+0x14
	add	r0, r0, r5
	bl	HandleLowHpMusicChange
	ldr	r1, .L131+0x18
	ldrb	r0, [r7]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L131+0x1c
	add	r0, r0, r1
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r4, .L131+0x20
	ldrb	r1, [r7]
	add	r0, r1, r4
	ldrb	r0, [r0]
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	ldrh	r1, [r1]
	mul	r1, r1, r6
	add	r1, r1, r5
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r7]
	bl	sub_8076918
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldr	r1, .L131+0x24
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L131+0x28
	str	r1, [r0]
.L130:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L132:
	.align	2, 0
.L131:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	0x27f9
	.word	c3_0802FDF4
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	sub_81BB92C
.Lfe24:
	.size	 sub_81BB9F4,.Lfe24-sub_81BB9F4
	.align	2, 0
	.type	 sub_81BBAE8,function
	.thumb_func
sub_81BBAE8:
	push	{r4, r5, r6, lr}
	ldr	r6, .L136
	ldr	r0, [r6]
	ldr	r4, .L136+0x4
	ldrb	r2, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L134	@cond_branch
	ldr	r0, .L136+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L136+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L134:
	ldr	r5, .L136+0x10
	ldr	r0, .L136+0x14
	ldrb	r2, [r4]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r0, r5, #0
	add	r0, r0, #0x1c
	add	r0, r3, r0
	ldr	r1, [r0]
	ldr	r0, .L136+0x18
	cmp	r1, r0
	bne	.L135	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L135	@cond_branch
	add	r0, r3, r5
	bl	DestroySprite
	ldr	r1, .L136+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L136+0x20
	str	r1, [r0]
.L135:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L137:
	.align	2, 0
.L136:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	sub_81BB9F4
.Lfe25:
	.size	 sub_81BBAE8,.Lfe25-sub_81BBAE8
	.align	2, 0
	.type	 PlayerPartnerBufferExecCompleted,function
	.thumb_func
PlayerPartnerBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L141
	ldr	r4, .L141+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L141+0x8
	str	r1, [r0]
	ldr	r0, .L141+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L139	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r0, .L141+0x10
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x20
	add	r1, r1, r0
	mov	r0, #0x39
	strb	r0, [r1]
	b	.L140
.L142:
	.align	2, 0
.L141:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PlayerPartnerBufferRunCommand
	.word	gBattleTypeFlags
	.word	gBattleResources
.L139:
	ldr	r2, .L143
	ldr	r1, .L143+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L140:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L144:
	.align	2, 0
.L143:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe26:
	.size	 PlayerPartnerBufferExecCompleted,.Lfe26-PlayerPartnerBufferExecCompleted
	.align	2, 0
	.type	 CompleteOnFinishedStatusAnimation,function
	.thumb_func
CompleteOnFinishedStatusAnimation:
	push	{lr}
	ldr	r0, .L147
	ldr	r2, [r0]
	ldr	r0, .L147+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L146	@cond_branch
	bl	PlayerPartnerBufferExecCompleted
.L146:
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe27:
	.size	 CompleteOnFinishedStatusAnimation,.Lfe27-CompleteOnFinishedStatusAnimation
	.align	2, 0
	.type	 CompleteOnFinishedBattleAnimation,function
	.thumb_func
CompleteOnFinishedBattleAnimation:
	push	{lr}
	ldr	r0, .L151
	ldr	r2, [r0]
	ldr	r0, .L151+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L150	@cond_branch
	bl	PlayerPartnerBufferExecCompleted
.L150:
	pop	{r0}
	bx	r0
.L152:
	.align	2, 0
.L151:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe28:
	.size	 CompleteOnFinishedBattleAnimation,.Lfe28-CompleteOnFinishedBattleAnimation
	.align	2, 0
	.type	 PlayerPartnerHandleGetMonData,function
	.thumb_func
PlayerPartnerHandleGetMonData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x100
	mov	r6, #0x0
	ldr	r0, .L162
	ldr	r1, [r0]
	ldr	r0, .L162+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L154	@cond_branch
	ldr	r0, .L162+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	CopyPlayerPartnerMonData
	add	r6, r0, #0
	b	.L155
.L163:
	.align	2, 0
.L162:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L154:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L159:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L160	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	CopyPlayerPartnerMonData
	add	r6, r6, r0
.L160:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L159	@cond_branch
.L155:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	BtlController_EmitDataTransfer
	bl	PlayerPartnerBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 PlayerPartnerHandleGetMonData,.Lfe29-PlayerPartnerHandleGetMonData
	.align	2, 0
	.type	 CopyPlayerPartnerMonData,function
	.thumb_func
CopyPlayerPartnerMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x94
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r3, .L253
	ldr	r1, [r3]
	ldr	r2, .L253+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r4, r2, #0
	cmp	r0, #0x3b
	bls	.LCB2325
	bl	.L165	@far jump
.LCB2325:
	lsl	r0, r0, #0x2
	ldr	r1, .L253+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L254:
	.align	2, 0
.L253:
	.word	gBattleResources
	.word	gActiveBattler
	.word	.L247
	.align	2, 0
	.align	2, 0
.L247:
	.word	.L166
	.word	.L177
	.word	.L178
	.word	.L179
	.word	.L193
	.word	.L193
	.word	.L193
	.word	.L193
	.word	.L194
	.word	.L203
	.word	.L203
	.word	.L203
	.word	.L203
	.word	.L165
	.word	.L165
	.word	.L165
	.word	.L165
	.word	.L204
	.word	.L205
	.word	.L206
	.word	.L207
	.word	.L208
	.word	.L209
	.word	.L210
	.word	.L211
	.word	.L212
	.word	.L213
	.word	.L214
	.word	.L215
	.word	.L216
	.word	.L217
	.word	.L218
	.word	.L219
	.word	.L220
	.word	.L221
	.word	.L222
	.word	.L223
	.word	.L224
	.word	.L225
	.word	.L226
	.word	.L227
	.word	.L228
	.word	.L229
	.word	.L230
	.word	.L231
	.word	.L232
	.word	.L233
	.word	.L234
	.word	.L235
	.word	.L236
	.word	.L237
	.word	.L238
	.word	.L239
	.word	.L240
	.word	.L241
	.word	.L242
	.word	.L243
	.word	.L244
	.word	.L245
	.word	.L246
.L166:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L255
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r3, sp
	ldr	r2, .L255+0x4
	add	r1, r2, #0
	and	r0, r0, r1
	ldrh	r2, [r3]
	ldr	r1, .L255+0x8
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3]
	add	r0, r4, #0
	mov	r1, #0x59
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x3
	ldrb	r2, [r3, #0x1]
	mov	r1, #0x7
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x30]
	mov	r6, #0x0
	mov	r0, #0x25
	add	r0, r0, sp
	mov	r9, r0
	mov	r1, #0x3d
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2d
	str	r2, [sp, #0x84]
	mov	r0, sp
	add	r0, r0, #0x2c
	str	r0, [sp, #0x80]
	mov	r1, sp
	add	r1, r1, #0x6c
	str	r1, [sp, #0x90]
	add	r2, r2, #0x5
	str	r2, [sp, #0x88]
	add	r0, r0, #0x12
	str	r0, [sp, #0x8c]
	mov	r8, r4
	add	r4, sp, #0xc
.L170:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L170	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L255
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x84]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L255+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L255+0x10
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L255+0x14
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x50]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x80]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2a]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x58]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x90]
	bl	GetMonData
	ldr	r0, [sp, #0x88]
	ldr	r1, [sp, #0x90]
	bl	StringCopy10
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L175:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x5b
	bls	.L175	@cond_branch
	b	.L165
.L256:
	.align	2, 0
.L255:
	.word	gPlayerParty
	.word	0x7ff
	.word	-0x800
	.word	-0x3e1
	.word	-0xf8001
	.word	-0x1f1
.L177:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L257
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L249
.L258:
	.align	2, 0
.L257:
	.word	gPlayerParty
.L178:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L259
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L249
.L260:
	.align	2, 0
.L259:
	.word	gPlayerParty
.L179:
	mov	r6, #0x0
	add	r2, sp, #0x5c
	mov	r9, r2
	add	r0, sp, #0x64
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L261
	add	r4, r1, r0
	mov	r8, r9
.L183:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L183	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L261
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L188:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L188	@cond_branch
	b	.L165
.L262:
	.align	2, 0
.L261:
	.word	gPlayerParty
.L193:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L263
	add	r0, r0, r1
	ldr	r2, [r3]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x21
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0x9
	b	.L249
.L264:
	.align	2, 0
.L263:
	.word	gPlayerParty
.L194:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L265
	mov	r8, r2
.L198:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L198	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L265
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L165
.L266:
	.align	2, 0
.L265:
	.word	gPlayerParty
.L203:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L267
	add	r0, r0, r1
	ldr	r2, [r3]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x21
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0x8
	b	.L250
.L268:
	.align	2, 0
.L267:
	.word	gPlayerParty
.L204:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L269
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L251
.L270:
	.align	2, 0
.L269:
	.word	gPlayerParty
.L205:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L271
	add	r0, r0, r1
	mov	r1, #0x19
.L251:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L165
.L272:
	.align	2, 0
.L271:
	.word	gPlayerParty
.L206:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L273
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L250
.L274:
	.align	2, 0
.L273:
	.word	gPlayerParty
.L207:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L275
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L250
.L276:
	.align	2, 0
.L275:
	.word	gPlayerParty
.L208:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L277
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L250
.L278:
	.align	2, 0
.L277:
	.word	gPlayerParty
.L209:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L279
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L250
.L280:
	.align	2, 0
.L279:
	.word	gPlayerParty
.L210:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L281
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L250
.L282:
	.align	2, 0
.L281:
	.word	gPlayerParty
.L211:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L283
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L250
.L284:
	.align	2, 0
.L283:
	.word	gPlayerParty
.L212:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L285
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L250
.L286:
	.align	2, 0
.L285:
	.word	gPlayerParty
.L213:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L287
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L250
.L288:
	.align	2, 0
.L287:
	.word	gPlayerParty
.L214:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L289
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L250
.L290:
	.align	2, 0
.L289:
	.word	gPlayerParty
.L215:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L291
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L250
.L292:
	.align	2, 0
.L291:
	.word	gPlayerParty
.L216:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L293
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L250
.L294:
	.align	2, 0
.L293:
	.word	gPlayerParty
.L217:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L295
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L250
.L296:
	.align	2, 0
.L295:
	.word	gPlayerParty
.L218:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L297
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L165
.L298:
	.align	2, 0
.L297:
	.word	gPlayerParty
.L219:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L299
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L250
.L300:
	.align	2, 0
.L299:
	.word	gPlayerParty
.L220:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L301
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L250
.L302:
	.align	2, 0
.L301:
	.word	gPlayerParty
.L221:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L303
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L250
.L304:
	.align	2, 0
.L303:
	.word	gPlayerParty
.L222:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L305
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L250
.L306:
	.align	2, 0
.L305:
	.word	gPlayerParty
.L223:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L307
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L250
.L308:
	.align	2, 0
.L307:
	.word	gPlayerParty
.L224:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L309
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L250
.L310:
	.align	2, 0
.L309:
	.word	gPlayerParty
.L225:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L311
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L252
.L312:
	.align	2, 0
.L311:
	.word	gPlayerParty
.L226:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L313
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L249
.L314:
	.align	2, 0
.L313:
	.word	gPlayerParty
.L227:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L315
	add	r0, r0, r1
	mov	r1, #0x37
.L252:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L165
.L316:
	.align	2, 0
.L315:
	.word	gPlayerParty
.L228:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L317
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L250
.L318:
	.align	2, 0
.L317:
	.word	gPlayerParty
.L229:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L319
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L249
.L320:
	.align	2, 0
.L319:
	.word	gPlayerParty
.L230:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L321
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L249
.L322:
	.align	2, 0
.L321:
	.word	gPlayerParty
.L231:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L323
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L249
.L324:
	.align	2, 0
.L323:
	.word	gPlayerParty
.L232:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L325
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L249
.L326:
	.align	2, 0
.L325:
	.word	gPlayerParty
.L233:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L327
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L249
.L328:
	.align	2, 0
.L327:
	.word	gPlayerParty
.L234:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L329
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L249
.L330:
	.align	2, 0
.L329:
	.word	gPlayerParty
.L235:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L331
	add	r0, r0, r1
	mov	r1, #0x3f
.L249:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L165
.L332:
	.align	2, 0
.L331:
	.word	gPlayerParty
.L236:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L333
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L250
.L334:
	.align	2, 0
.L333:
	.word	gPlayerParty
.L237:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L335
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L250
.L336:
	.align	2, 0
.L335:
	.word	gPlayerParty
.L238:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L337
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L250
.L338:
	.align	2, 0
.L337:
	.word	gPlayerParty
.L239:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L339
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L250
.L340:
	.align	2, 0
.L339:
	.word	gPlayerParty
.L240:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L341
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L250
.L342:
	.align	2, 0
.L341:
	.word	gPlayerParty
.L241:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L343
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L250
.L344:
	.align	2, 0
.L343:
	.word	gPlayerParty
.L242:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L345
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L250
.L346:
	.align	2, 0
.L345:
	.word	gPlayerParty
.L243:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L347
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L250
.L348:
	.align	2, 0
.L347:
	.word	gPlayerParty
.L244:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L349
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L250
.L350:
	.align	2, 0
.L349:
	.word	gPlayerParty
.L245:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L351
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L250
.L352:
	.align	2, 0
.L351:
	.word	gPlayerParty
.L246:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L353
	add	r0, r0, r1
	mov	r1, #0x36
.L250:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L165:
	add	r0, r6, #0
	add	sp, sp, #0x94
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L354:
	.align	2, 0
.L353:
	.word	gPlayerParty
.Lfe30:
	.size	 CopyPlayerPartnerMonData,.Lfe30-CopyPlayerPartnerMonData
	.align	2, 0
	.type	 PlayerPartnerHandleGetRawMonData,function
	.thumb_func
PlayerPartnerHandleGetRawMonData:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 PlayerPartnerHandleGetRawMonData,.Lfe31-PlayerPartnerHandleGetRawMonData
	.align	2, 0
	.type	 PlayerPartnerHandleSetMonData,function
	.thumb_func
PlayerPartnerHandleSetMonData:
	push	{r4, r5, lr}
	ldr	r0, .L365
	ldr	r1, [r0]
	ldr	r0, .L365+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L357	@cond_branch
	ldr	r0, .L365+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	SetPlayerPartnerMonData
	b	.L358
.L366:
	.align	2, 0
.L365:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L357:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L362:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L363	@cond_branch
	add	r0, r5, #0
	bl	SetPlayerPartnerMonData
.L363:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L362	@cond_branch
.L358:
	bl	PlayerPartnerBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 PlayerPartnerHandleSetMonData,.Lfe32-PlayerPartnerHandleSetMonData
	.align	2, 0
	.type	 SetPlayerPartnerMonData,function
	.thumb_func
SetPlayerPartnerMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L439
	ldr	r0, .L439+0x4
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x20
	ldr	r1, [r3]
	add	r0, r1, r0
	add	r4, r0, #0x3
	mov	r8, r4
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r7, r3, #0
	cmp	r0, #0x3b
	bls	.LCB3756
	bl	.L368	@far jump
.LCB3756:
	lsl	r0, r0, #0x2
	ldr	r1, .L439+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L440:
	.align	2, 0
.L439:
	.word	gBattleResources
	.word	gActiveBattler
	.word	.L435
	.align	2, 0
	.align	2, 0
.L435:
	.word	.L369
	.word	.L375
	.word	.L376
	.word	.L377
	.word	.L386
	.word	.L386
	.word	.L386
	.word	.L386
	.word	.L387
	.word	.L391
	.word	.L391
	.word	.L391
	.word	.L391
	.word	.L368
	.word	.L368
	.word	.L368
	.word	.L368
	.word	.L392
	.word	.L393
	.word	.L394
	.word	.L395
	.word	.L396
	.word	.L397
	.word	.L398
	.word	.L399
	.word	.L400
	.word	.L401
	.word	.L402
	.word	.L403
	.word	.L404
	.word	.L405
	.word	.L406
	.word	.L407
	.word	.L408
	.word	.L409
	.word	.L410
	.word	.L411
	.word	.L412
	.word	.L413
	.word	.L414
	.word	.L415
	.word	.L416
	.word	.L417
	.word	.L418
	.word	.L419
	.word	.L420
	.word	.L421
	.word	.L422
	.word	.L423
	.word	.L424
	.word	.L425
	.word	.L426
	.word	.L427
	.word	.L428
	.word	.L429
	.word	.L430
	.word	.L431
	.word	.L432
	.word	.L433
	.word	.L434
.L369:
	mov	r1, r8
	ldrh	r0, [r1]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	mov	r1, sp
	strh	r0, [r1]
	mov	r1, r8
	ldrb	r0, [r1, #0x1]
	lsr	r0, r0, #0x3
	mov	r5, sp
	add	r5, r5, #0x2
	strb	r0, [r5]
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L441
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x59
	add	r2, r5, #0
	bl	SetMonData
	mov	r2, r8
	add	r2, r2, #0x30
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r7, #0x0
	mov	r0, r8
	add	r0, r0, #0x3d
	str	r0, [sp, #0x28]
	mov	r1, r8
	add	r1, r1, #0x2d
	str	r1, [sp, #0x20]
	add	r0, r0, #0xb
	str	r0, [sp, #0x2c]
	mov	r1, #0x3
	add	r1, r1, sp
	mov	sl, r1
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	mov	r1, r8
	add	r1, r1, #0x50
	str	r1, [sp, #0x34]
	sub	r0, r0, #0x20
	str	r0, [sp, #0x1c]
	sub	r1, r1, #0x26
	str	r1, [sp, #0x18]
	add	r0, r0, #0x2
	str	r0, [sp, #0x24]
	sub	r1, r1, #0x28
	str	r1, [sp, #0x4]
	sub	r0, r0, #0x2a
	str	r0, [sp, #0x8]
	add	r1, r1, #0x4
	str	r1, [sp, #0xc]
	add	r0, r0, #0x4
	str	r0, [sp, #0x10]
	add	r1, r1, #0x4
	str	r1, [sp, #0x14]
	mov	r9, r4
	mov	r4, r8
	add	r4, r4, #0x25
	mov	r5, r8
	add	r5, r5, #0xc
.L373:
	add	r1, r7, #0
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r5, #0
	bl	SetMonData
	add	r1, r7, #0
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	add	r4, r4, #0x1
	add	r5, r5, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L373	@cond_branch
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L441
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrh	r0, [r1, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldr	r0, [r1, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrh	r0, [r1, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x34]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	bl	.L368	@ far jump
.L442:
	.align	2, 0
.L441:
	.word	gPlayerParty
.L375:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L443
	add	r0, r0, r1
	ldr	r1, .L443+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0xb
	bl	SetMonData
	bl	.L368	@ far jump
.L444:
	.align	2, 0
.L443:
	.word	gPlayerParty
	.word	gActiveBattler
.L376:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L445
	add	r0, r0, r1
	ldr	r1, .L445+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0xc
	bl	SetMonData
	bl	.L368	@ far jump
.L446:
	.align	2, 0
.L445:
	.word	gPlayerParty
	.word	gActiveBattler
.L377:
	mov	r7, #0x0
	mov	r0, #0xc
	add	r0, r0, r4
	mov	r9, r0
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, .L447
	add	r1, r1, r0
	mov	r8, r1
	add	r5, r4, #0
	add	r5, r5, #0x8
.L381:
	add	r1, r7, #0
	add	r1, r1, #0xd
	mov	r0, r8
	add	r2, r4, #0
	bl	SetMonData
	add	r1, r7, #0
	add	r1, r1, #0x11
	mov	r0, r8
	add	r2, r5, #0
	bl	SetMonData
	add	r5, r5, #0x1
	add	r4, r4, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L381	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L447
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	bl	.L368	@ far jump
.L448:
	.align	2, 0
.L447:
	.word	gPlayerParty
.L386:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L449
	add	r0, r0, r1
	ldr	r2, [r7]
	ldr	r1, .L449+0x4
	ldrb	r3, [r1]
	lsl	r3, r3, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L437
.L450:
	.align	2, 0
.L449:
	.word	gPlayerParty
	.word	gActiveBattler
.L387:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L451
	add	r4, r4, r0
	ldr	r5, .L451+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x3
	add	r0, r4, #0
	mov	r1, #0x11
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x4
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x5
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x6
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x7
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L368
.L452:
	.align	2, 0
.L451:
	.word	gPlayerParty
	.word	gActiveBattler
.L391:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L453
	add	r0, r0, r1
	ldr	r2, [r7]
	ldr	r1, .L453+0x4
	ldrb	r3, [r1]
	lsl	r3, r3, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L437:
	add	r3, r3, #0x20
	add	r2, r2, r3
	add	r2, r2, #0x3
	bl	SetMonData
	b	.L368
.L454:
	.align	2, 0
.L453:
	.word	gPlayerParty
	.word	gActiveBattler
.L392:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L455
	add	r0, r0, r1
	ldr	r1, .L455+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1
	bl	SetMonData
	b	.L368
.L456:
	.align	2, 0
.L455:
	.word	gPlayerParty
	.word	gActiveBattler
.L393:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L457
	add	r0, r0, r1
	ldr	r1, .L457+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x19
	bl	SetMonData
	b	.L368
.L458:
	.align	2, 0
.L457:
	.word	gPlayerParty
	.word	gActiveBattler
.L394:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L459
	add	r0, r0, r1
	ldr	r1, .L459+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1a
	bl	SetMonData
	b	.L368
.L460:
	.align	2, 0
.L459:
	.word	gPlayerParty
	.word	gActiveBattler
.L395:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L461
	add	r0, r0, r1
	ldr	r1, .L461+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1b
	bl	SetMonData
	b	.L368
.L462:
	.align	2, 0
.L461:
	.word	gPlayerParty
	.word	gActiveBattler
.L396:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L463
	add	r0, r0, r1
	ldr	r1, .L463+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1c
	bl	SetMonData
	b	.L368
.L464:
	.align	2, 0
.L463:
	.word	gPlayerParty
	.word	gActiveBattler
.L397:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L465
	add	r0, r0, r1
	ldr	r1, .L465+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1d
	bl	SetMonData
	b	.L368
.L466:
	.align	2, 0
.L465:
	.word	gPlayerParty
	.word	gActiveBattler
.L398:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L467
	add	r0, r0, r1
	ldr	r1, .L467+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1e
	bl	SetMonData
	b	.L368
.L468:
	.align	2, 0
.L467:
	.word	gPlayerParty
	.word	gActiveBattler
.L399:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L469
	add	r0, r0, r1
	ldr	r1, .L469+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1f
	bl	SetMonData
	b	.L368
.L470:
	.align	2, 0
.L469:
	.word	gPlayerParty
	.word	gActiveBattler
.L400:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L471
	add	r0, r0, r1
	ldr	r1, .L471+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x20
	bl	SetMonData
	b	.L368
.L472:
	.align	2, 0
.L471:
	.word	gPlayerParty
	.word	gActiveBattler
.L401:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L473
	add	r0, r0, r1
	ldr	r1, .L473+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x22
	bl	SetMonData
	b	.L368
.L474:
	.align	2, 0
.L473:
	.word	gPlayerParty
	.word	gActiveBattler
.L402:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L475
	add	r0, r0, r1
	ldr	r1, .L475+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x23
	bl	SetMonData
	b	.L368
.L476:
	.align	2, 0
.L475:
	.word	gPlayerParty
	.word	gActiveBattler
.L403:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L477
	add	r0, r0, r1
	ldr	r1, .L477+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x24
	bl	SetMonData
	b	.L368
.L478:
	.align	2, 0
.L477:
	.word	gPlayerParty
	.word	gActiveBattler
.L404:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L479
	add	r0, r0, r1
	ldr	r1, .L479+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x25
	bl	SetMonData
	b	.L368
.L480:
	.align	2, 0
.L479:
	.word	gPlayerParty
	.word	gActiveBattler
.L405:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L481
	add	r0, r0, r1
	ldr	r1, .L481+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x26
	bl	SetMonData
	b	.L368
.L482:
	.align	2, 0
.L481:
	.word	gPlayerParty
	.word	gActiveBattler
.L406:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L483
	add	r4, r4, r0
	ldr	r5, .L483+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x3
	add	r0, r4, #0
	mov	r1, #0x27
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x4
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x5
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x6
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x7
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x8
	add	r0, r4, #0
	b	.L438
.L484:
	.align	2, 0
.L483:
	.word	gPlayerParty
	.word	gActiveBattler
.L407:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L485
	add	r0, r0, r1
	ldr	r1, .L485+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x27
	bl	SetMonData
	b	.L368
.L486:
	.align	2, 0
.L485:
	.word	gPlayerParty
	.word	gActiveBattler
.L408:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L487
	add	r0, r0, r1
	ldr	r1, .L487+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x28
	bl	SetMonData
	b	.L368
.L488:
	.align	2, 0
.L487:
	.word	gPlayerParty
	.word	gActiveBattler
.L409:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L489
	add	r0, r0, r1
	ldr	r1, .L489+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x29
	bl	SetMonData
	b	.L368
.L490:
	.align	2, 0
.L489:
	.word	gPlayerParty
	.word	gActiveBattler
.L410:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L491
	add	r0, r0, r1
	ldr	r1, .L491+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2a
	bl	SetMonData
	b	.L368
.L492:
	.align	2, 0
.L491:
	.word	gPlayerParty
	.word	gActiveBattler
.L411:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L493
	add	r0, r0, r1
	ldr	r1, .L493+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2b
	bl	SetMonData
	b	.L368
.L494:
	.align	2, 0
.L493:
	.word	gPlayerParty
	.word	gActiveBattler
.L412:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L495
	add	r0, r0, r1
	ldr	r1, .L495+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
.L438:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L368
.L496:
	.align	2, 0
.L495:
	.word	gPlayerParty
	.word	gActiveBattler
.L413:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L497
	add	r0, r0, r1
	ldr	r1, .L497+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x0
	bl	SetMonData
	b	.L368
.L498:
	.align	2, 0
.L497:
	.word	gPlayerParty
	.word	gActiveBattler
.L414:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L499
	add	r0, r0, r1
	ldr	r1, .L499+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x9
	bl	SetMonData
	b	.L368
.L500:
	.align	2, 0
.L499:
	.word	gPlayerParty
	.word	gActiveBattler
.L415:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L501
	add	r0, r0, r1
	ldr	r1, .L501+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x37
	bl	SetMonData
	b	.L368
.L502:
	.align	2, 0
.L501:
	.word	gPlayerParty
	.word	gActiveBattler
.L416:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L503
	add	r0, r0, r1
	ldr	r1, .L503+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x38
	bl	SetMonData
	b	.L368
.L504:
	.align	2, 0
.L503:
	.word	gPlayerParty
	.word	gActiveBattler
.L417:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L505
	add	r0, r0, r1
	ldr	r1, .L505+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x39
	bl	SetMonData
	b	.L368
.L506:
	.align	2, 0
.L505:
	.word	gPlayerParty
	.word	gActiveBattler
.L418:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L507
	add	r0, r0, r1
	ldr	r1, .L507+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3a
	bl	SetMonData
	b	.L368
.L508:
	.align	2, 0
.L507:
	.word	gPlayerParty
	.word	gActiveBattler
.L419:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L509
	add	r0, r0, r1
	ldr	r1, .L509+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3b
	bl	SetMonData
	b	.L368
.L510:
	.align	2, 0
.L509:
	.word	gPlayerParty
	.word	gActiveBattler
.L420:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L511
	add	r0, r0, r1
	ldr	r1, .L511+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3c
	bl	SetMonData
	b	.L368
.L512:
	.align	2, 0
.L511:
	.word	gPlayerParty
	.word	gActiveBattler
.L421:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L513
	add	r0, r0, r1
	ldr	r1, .L513+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3d
	bl	SetMonData
	b	.L368
.L514:
	.align	2, 0
.L513:
	.word	gPlayerParty
	.word	gActiveBattler
.L422:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L515
	add	r0, r0, r1
	ldr	r1, .L515+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3e
	bl	SetMonData
	b	.L368
.L516:
	.align	2, 0
.L515:
	.word	gPlayerParty
	.word	gActiveBattler
.L423:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L517
	add	r0, r0, r1
	ldr	r1, .L517+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3f
	bl	SetMonData
	b	.L368
.L518:
	.align	2, 0
.L517:
	.word	gPlayerParty
	.word	gActiveBattler
.L424:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L519
	add	r0, r0, r1
	ldr	r1, .L519+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x16
	bl	SetMonData
	b	.L368
.L520:
	.align	2, 0
.L519:
	.word	gPlayerParty
	.word	gActiveBattler
.L425:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L521
	add	r0, r0, r1
	ldr	r1, .L521+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x17
	bl	SetMonData
	b	.L368
.L522:
	.align	2, 0
.L521:
	.word	gPlayerParty
	.word	gActiveBattler
.L426:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L523
	add	r0, r0, r1
	ldr	r1, .L523+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x18
	bl	SetMonData
	b	.L368
.L524:
	.align	2, 0
.L523:
	.word	gPlayerParty
	.word	gActiveBattler
.L427:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L525
	add	r0, r0, r1
	ldr	r1, .L525+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x21
	bl	SetMonData
	b	.L368
.L526:
	.align	2, 0
.L525:
	.word	gPlayerParty
	.word	gActiveBattler
.L428:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L527
	add	r0, r0, r1
	ldr	r1, .L527+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2f
	bl	SetMonData
	b	.L368
.L528:
	.align	2, 0
.L527:
	.word	gPlayerParty
	.word	gActiveBattler
.L429:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L529
	add	r0, r0, r1
	ldr	r1, .L529+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x30
	bl	SetMonData
	b	.L368
.L530:
	.align	2, 0
.L529:
	.word	gPlayerParty
	.word	gActiveBattler
.L430:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L531
	add	r0, r0, r1
	ldr	r1, .L531+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x32
	bl	SetMonData
	b	.L368
.L532:
	.align	2, 0
.L531:
	.word	gPlayerParty
	.word	gActiveBattler
.L431:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L533
	add	r0, r0, r1
	ldr	r1, .L533+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x33
	bl	SetMonData
	b	.L368
.L534:
	.align	2, 0
.L533:
	.word	gPlayerParty
	.word	gActiveBattler
.L432:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L535
	add	r0, r0, r1
	ldr	r1, .L535+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x34
	bl	SetMonData
	b	.L368
.L536:
	.align	2, 0
.L535:
	.word	gPlayerParty
	.word	gActiveBattler
.L433:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L537
	add	r0, r0, r1
	ldr	r1, .L537+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x35
	bl	SetMonData
	b	.L368
.L538:
	.align	2, 0
.L537:
	.word	gPlayerParty
	.word	gActiveBattler
.L434:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L539
	add	r0, r0, r1
	ldr	r1, .L539+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x36
	bl	SetMonData
.L368:
	ldr	r2, .L539+0x8
	ldr	r0, .L539+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L539
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L540:
	.align	2, 0
.L539:
	.word	gPlayerParty
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.Lfe33:
	.size	 SetPlayerPartnerMonData,.Lfe33-SetPlayerPartnerMonData
	.align	2, 0
	.type	 PlayerPartnerHandleSetRawMonData,function
	.thumb_func
PlayerPartnerHandleSetRawMonData:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L547
	ldr	r7, .L547+0x4
	ldrb	r3, [r7]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r5, .L547+0x8
	ldr	r2, [r5]
	lsl	r3, r3, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x21
	add	r0, r0, r3
	ldrb	r0, [r0]
	ldr	r1, .L547+0xc
	add	r0, r0, r1
	add	r6, r4, r0
	mov	r4, #0x0
	add	r2, r2, #0x22
	add	r2, r2, r3
	ldrb	r2, [r2]
	cmp	r4, r2
	bcs	.L543	@cond_branch
	add	r3, r7, #0
.L545:
	add	r2, r6, r4
	ldr	r1, [r5]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x3
	add	r0, r4, r0
	add	r1, r1, #0x20
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, [r5]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r1, [r1]
	cmp	r4, r1
	bcc	.L545	@cond_branch
.L543:
	bl	PlayerPartnerBufferExecCompleted
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L548:
	.align	2, 0
.L547:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleResources
	.word	gPlayerParty
.Lfe34:
	.size	 PlayerPartnerHandleSetRawMonData,.Lfe34-PlayerPartnerHandleSetRawMonData
	.align	2, 0
	.type	 PlayerPartnerHandleLoadMonSprite,function
	.thumb_func
PlayerPartnerHandleLoadMonSprite:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r0, .L550
	mov	r9, r0
	ldr	r1, .L550+0x4
	mov	r8, r1
	ldrb	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r4, .L550+0x8
	add	r0, r0, r4
	bl	BattleLoadPlayerMonSpriteGfx
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r4
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r4
	mov	r1, #0x59
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r2, r8
	ldrb	r0, [r2]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	add	r2, r4, #0
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r6, .L550+0xc
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r2, r8
	ldrb	r0, [r2]
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L550+0x10
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r5, .L550+0x14
	ldrb	r0, [r2]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L550+0x18
	strh	r1, [r0, #0x24]
	ldrb	r2, [r2]
	add	r0, r2, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x2e]
	mov	r0, r8
	ldrb	r3, [r0]
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	mov	r1, r8
	ldrb	r2, [r1]
	add	r4, r2, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L550+0x1c
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	StartSpriteAnim
	ldr	r1, .L550+0x20
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L550+0x24
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L551:
	.align	2, 0
.L550:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gPlayerParty
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gBattleMonForms
	.word	gBattlerControllerFuncs
	.word	sub_81BB1D4
.Lfe35:
	.size	 PlayerPartnerHandleLoadMonSprite,.Lfe35-PlayerPartnerHandleLoadMonSprite
	.align	2, 0
	.type	 PlayerPartnerHandleSwitchInAnim,function
	.thumb_func
PlayerPartnerHandleSwitchInAnim:
	push	{r4, r5, lr}
	ldr	r4, .L553
	ldrb	r0, [r4]
	ldr	r5, .L553+0x4
	ldr	r1, [r5]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	ClearTemporarySpeciesSpriteData
	ldr	r3, .L553+0x8
	ldrb	r1, [r4]
	lsl	r2, r1, #0x1
	add	r2, r2, r3
	ldr	r0, [r5]
	lsl	r1, r1, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r2]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L553+0xc
	add	r0, r0, r2
	bl	BattleLoadPlayerMonSpriteGfx
	ldrb	r0, [r4]
	ldr	r1, [r5]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	sub_81BD0E4
	ldr	r1, .L553+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L553+0x14
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L554:
	.align	2, 0
.L553:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	sub_81BBAE8
.Lfe36:
	.size	 PlayerPartnerHandleSwitchInAnim,.Lfe36-PlayerPartnerHandleSwitchInAnim
	.align	2, 0
	.type	 sub_81BD0E4,function
	.thumb_func
sub_81BD0E4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	ClearTemporarySpeciesSpriteData
	ldr	r0, .L556
	lsl	r4, r6, #0x1
	add	r4, r4, r0
	ldr	r0, .L556+0x4
	ldr	r0, [r0]
	lsl	r1, r6, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r5, .L556+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	mov	r9, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldrh	r0, [r4]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r5
	mov	r1, #0x59
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L556+0xc
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L556+0x10
	mov	sl, r1
	add	sl, sl, r6
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r6, #0
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r9
	mov	r2, r8
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r7, .L556+0x14
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r7, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L556+0x18
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L556+0x1c
	mov	r0, sl
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	mov	r0, sl
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x32]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	mov	r0, r9
	mov	r1, r8
	bl	GetFormSpeciesId
	ldrb	r2, [r4]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	strh	r0, [r1, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L556+0x20
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L556+0x24
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xff
	bl	DoPokeballSendOutAnimation
	mov	r1, sl
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L557:
	.align	2, 0
.L556:
	.word	gBattlerPartyIndexes
	.word	gBattleResources
	.word	gPlayerParty
	.word	sub_805D714
	.word	gUnknown_03005D7C
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe37:
	.size	 sub_81BD0E4,.Lfe37-sub_81BD0E4
	.align	2, 0
	.type	 PlayerPartnerHandleReturnMonToBall,function
	.thumb_func
PlayerPartnerHandleReturnMonToBall:
	push	{r4, r5, r6, lr}
	ldr	r0, .L561
	ldr	r0, [r0]
	ldr	r6, .L561+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L559	@cond_branch
	ldr	r0, .L561+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r3, [r0, #0x4]
	ldr	r1, .L561+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L561+0x10
	str	r1, [r0]
	b	.L560
.L562:
	.align	2, 0
.L561:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	DoSwitchOutAnimation
.L559:
	ldr	r5, .L563
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L563+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L563+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	PlayerPartnerBufferExecCompleted
.L560:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L564:
	.align	2, 0
.L563:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe38:
	.size	 PlayerPartnerHandleReturnMonToBall,.Lfe38-PlayerPartnerHandleReturnMonToBall
	.align	2, 0
	.type	 DoSwitchOutAnimation,function
	.thumb_func
DoSwitchOutAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L573
	ldr	r4, [r6]
	ldr	r5, .L573+0x4
	ldrb	r2, [r5]
	ldr	r1, [r4, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	beq	.L567	@cond_branch
	cmp	r0, #0x1
	beq	.L569	@cond_branch
	b	.L566
.L574:
	.align	2, 0
.L573:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L567:
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L568	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L568:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L566
.L569:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L566	@cond_branch
	strb	r0, [r3, #0x4]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x1
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L575
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L575+0x4
	str	r1, [r0]
.L566:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L576:
	.align	2, 0
.L575:
	.word	gBattlerControllerFuncs
	.word	sub_81BB828
.Lfe39:
	.size	 DoSwitchOutAnimation,.Lfe39-DoSwitchOutAnimation
	.align	2, 0
	.type	 PlayerPartnerHandleDrawTrainerPic,function
	.thumb_func
PlayerPartnerHandleDrawTrainerPic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r2, .L586
	ldrh	r0, [r2]
	ldr	r1, .L586+0x4
	cmp	r0, r1
	bne	.L578	@cond_branch
	mov	r4, #0x7
	mov	r0, #0x5a
	mov	r9, r0
	ldr	r0, .L586+0x8
	ldrb	r1, [r0, #0x1c]
	b	.L584
.L587:
	.align	2, 0
.L586:
	.word	gPartnerTrainerId
	.word	0xc03
	.word	gTrainerBackPicCoords
.L578:
	cmp	r0, r1
	bls	.L580	@cond_branch
	ldr	r0, .L588
	ldrh	r4, [r0]
	mov	r0, #0x5a
	mov	r9, r0
	ldr	r1, .L588+0x4
	b	.L585
.L589:
	.align	2, 0
.L588:
	.word	gPartnerSpriteId
	.word	gTrainerBackPicCoords
.L580:
	ldrh	r0, [r2]
	bl	GetFrontierTrainerFrontSpriteId
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x20
	mov	r9, r0
	ldr	r1, .L590
.L585:
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
.L584:
	mov	r0, #0x8
	sub	r0, r0, r1
	lsl	r0, r0, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r0, r0, r1
	lsr	r7, r0, #0x10
	ldr	r0, .L590+0x4
	ldrh	r1, [r0]
	ldr	r0, .L590+0x8
	cmp	r1, r0
	bls	.L582	@cond_branch
	ldr	r5, .L590+0xc
	ldrb	r1, [r5]
	add	r0, r4, #0
	bl	DecompressTrainerBackPic
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r6, .L590+0x10
	mov	r8, r9
	lsl	r4, r7, #0x10
	asr	r4, r4, #0x10
	ldrb	r0, [r5]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r6, #0
	mov	r1, r8
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r6, .L590+0x14
	ldrb	r1, [r5]
	add	r1, r1, r6
	strb	r0, [r1]
	ldr	r4, .L590+0x18
	ldrb	r3, [r5]
	add	r0, r3, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0xf0
	strh	r1, [r0, #0x24]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L590+0x1c
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L590+0x20
	str	r1, [r0]
	b	.L583
.L591:
	.align	2, 0
.L590:
	.word	gTrainerFrontPicCoords
	.word	gPartnerTrainerId
	.word	0xc02
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xfffe
	.word	sub_805D7AC
.L582:
	add	r5, r4, #0
	ldr	r6, .L592
	ldrb	r1, [r6]
	add	r0, r5, #0
	bl	DecompressTrainerFrontPic
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	SetMultiuseSpriteTemplateToTrainerFront
	ldr	r0, .L592+0x4
	mov	r8, r0
	lsl	r4, r7, #0x10
	asr	r4, r4, #0x10
	ldrb	r0, [r6]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	mov	r1, r9
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L592+0x8
	ldrb	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r0, .L592+0xc
	lsl	r5, r5, #0x3
	add	r5, r5, r0
	ldrh	r0, [r5, #0x4]
	bl	IndexOfSpritePaletteTag
	ldr	r5, .L592+0x10
	ldrb	r1, [r6]
	add	r1, r1, r4
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0xf0
	strh	r1, [r0, #0x24]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x30
	strh	r1, [r0, #0x26]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L592+0x14
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L592+0x18
	str	r1, [r0]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
.L583:
	ldr	r1, .L592+0x1c
	ldr	r0, .L592
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L592+0x20
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L593:
	.align	2, 0
.L592:
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gTrainerFrontPicPaletteTable
	.word	gSprites
	.word	0xfffe
	.word	sub_805D7AC
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy
.Lfe40:
	.size	 PlayerPartnerHandleDrawTrainerPic,.Lfe40-PlayerPartnerHandleDrawTrainerPic
	.align	2, 0
	.type	 PlayerPartnerHandleTrainerSlide,function
	.thumb_func
PlayerPartnerHandleTrainerSlide:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 PlayerPartnerHandleTrainerSlide,.Lfe41-PlayerPartnerHandleTrainerSlide
	.align	2, 0
	.type	 PlayerPartnerHandleTrainerSlideBack,function
	.thumb_func
PlayerPartnerHandleTrainerSlideBack:
	push	{r4, r5, r6, lr}
	ldr	r6, .L596
	ldr	r4, .L596+0x4
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L596+0x8
	add	r0, r0, r5
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L596+0xc
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L596+0x10
	str	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L596+0x14
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L596+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L596+0x1c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L597:
	.align	2, 0
.L596:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	0xffd8
	.word	StartAnimLinearTranslation
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	sub_81BAE98
.Lfe42:
	.size	 PlayerPartnerHandleTrainerSlideBack,.Lfe42-PlayerPartnerHandleTrainerSlideBack
	.align	2, 0
	.type	 PlayerPartnerHandleFaintAnimation,function
	.thumb_func
PlayerPartnerHandleFaintAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L603
	ldr	r4, [r6]
	ldr	r5, .L603+0x4
	ldrb	r2, [r5]
	ldr	r0, [r4, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L599	@cond_branch
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L600	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L600:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x4]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L601
.L604:
	.align	2, 0
.L603:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L599:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L601	@cond_branch
	strb	r4, [r3, #0x4]
	ldr	r2, .L605
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L605+0x4
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	mov	r1, #0x40
	neg	r1, r1
	mov	r0, #0x10
	bl	PlaySE12WithPanning
	ldr	r2, .L605+0x8
	ldr	r3, .L605+0xc
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x30]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x5
	strh	r1, [r0, #0x32]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L605+0x10
	str	r1, [r0]
	ldr	r1, .L605+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L605+0x18
	str	r1, [r0]
.L601:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L606:
	.align	2, 0
.L605:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	sub_8039C00
	.word	gBattlerControllerFuncs
	.word	sub_81BB78C
.Lfe43:
	.size	 PlayerPartnerHandleFaintAnimation,.Lfe43-PlayerPartnerHandleFaintAnimation
	.align	2, 0
	.type	 PlayerPartnerHandlePaletteFade,function
	.thumb_func
PlayerPartnerHandlePaletteFade:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 PlayerPartnerHandlePaletteFade,.Lfe44-PlayerPartnerHandlePaletteFade
	.align	2, 0
	.type	 PlayerPartnerHandleSuccessBallThrowAnim,function
	.thumb_func
PlayerPartnerHandleSuccessBallThrowAnim:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 PlayerPartnerHandleSuccessBallThrowAnim,.Lfe45-PlayerPartnerHandleSuccessBallThrowAnim
	.align	2, 0
	.type	 PlayerPartnerHandleBallThrowAnim,function
	.thumb_func
PlayerPartnerHandleBallThrowAnim:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 PlayerPartnerHandleBallThrowAnim,.Lfe46-PlayerPartnerHandleBallThrowAnim
	.align	2, 0
	.type	 PlayerPartnerHandlePause,function
	.thumb_func
PlayerPartnerHandlePause:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 PlayerPartnerHandlePause,.Lfe47-PlayerPartnerHandlePause
	.align	2, 0
	.type	 PlayerPartnerHandleMoveAnimation,function
	.thumb_func
PlayerPartnerHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L615
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB6779
	b	.L612	@long jump
.LCB6779:
	ldr	r0, .L615+0x4
	ldr	r0, [r0]
	mov	ip, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L615+0x8
	mov	r1, ip
	add	r1, r1, #0x23
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r5]
	ldr	r4, .L615+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x24
	add	r1, r1, r2
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x25
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L615+0x10
	ldrb	r3, [r6]
	lsl	r3, r3, #0x9
	mov	r1, ip
	add	r1, r1, #0x26
	add	r1, r1, r3
	ldrb	r2, [r1]
	mov	r1, ip
	add	r1, r1, #0x27
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r2, r2, r1
	mov	r1, ip
	add	r1, r1, #0x28
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	mov	r1, ip
	add	r1, r1, #0x29
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x18
	orr	r2, r2, r1
	str	r2, [r4]
	ldr	r3, .L615+0x14
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x2a
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L615+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x2c
	add	r1, r1, r2
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x2d
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L615+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, #0x20
	add	r2, r2, ip
	add	r1, r2, #0
	add	r1, r1, #0x10
	str	r1, [r3]
	ldr	r3, .L615+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2, #0x10]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	IsMoveWithoutAnimation
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L613	@cond_branch
	bl	PlayerPartnerBufferExecCompleted
	b	.L612
.L616:
	.align	2, 0
.L615:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gAnimMoveTurn
	.word	gAnimMovePower
	.word	gAnimMoveDmg
	.word	gAnimFriendship
	.word	gWeatherMoveAnim
	.word	gAnimDisableStructPtr
	.word	gTransformedPersonalities
.L613:
	ldr	r0, .L617
	ldr	r0, [r0]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x4]
	ldr	r1, .L617+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L617+0x8
	str	r1, [r0]
.L612:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L618:
	.align	2, 0
.L617:
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	PlayerPartnerDoMoveAnimation
.Lfe48:
	.size	 PlayerPartnerHandleMoveAnimation,.Lfe48-PlayerPartnerHandleMoveAnimation
	.align	2, 0
	.type	 PlayerPartnerDoMoveAnimation,function
	.thumb_func
PlayerPartnerDoMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L633
	mov	r9, r0
	ldr	r1, [r0]
	ldr	r6, .L633+0x4
	ldrb	r3, [r6]
	lsl	r2, r3, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r4, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x22
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	add	r1, r1, #0x2b
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r8, r1
	ldr	r7, .L633+0x8
	ldr	r5, [r7]
	ldr	r1, [r5, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L623	@cond_branch
	cmp	r2, #0x1
	bgt	.L632	@cond_branch
	cmp	r2, #0
	beq	.L621	@cond_branch
	b	.L620
.L634:
	.align	2, 0
.L633:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
.L632:
	cmp	r2, #0x2
	beq	.L625	@cond_branch
	cmp	r2, #0x3
	beq	.L628	@cond_branch
	b	.L620
.L621:
	ldr	r1, [r5]
	lsl	r0, r3, #0x2
	add	r1, r0, r1
	ldrb	r3, [r1]
	mov	r0, #0xc
	and	r0, r0, r3
	cmp	r0, #0x4
	bne	.L622	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r3
	strb	r0, [r1]
	ldrb	r2, [r6]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L622:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L620
.L623:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L620	@cond_branch
	mov	r0, #0x0
	bl	sub_805EB9C
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x4]
	b	.L620
.L625:
	ldr	r0, .L635
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L635+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L620	@cond_branch
	mov	r0, #0x1
	bl	sub_805EB9C
	ldr	r0, [r7]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L627	@cond_branch
	mov	r1, r8
	cmp	r1, #0x1
	bhi	.L627	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L627:
	ldr	r0, .L635+0x8
	ldr	r2, [r0]
	ldr	r0, .L635+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L620
.L636:
	.align	2, 0
.L635:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L628:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L620	@cond_branch
	bl	CopyAllBattleSpritesInvisibilities
	ldrb	r0, [r6]
	mov	r1, r9
	ldr	r2, [r1]
	lsl	r3, r0, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r2, r2, #0x22
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	TrySetBehindSubstituteSpriteBit
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r4, [r0, #0x4]
	bl	PlayerPartnerBufferExecCompleted
.L620:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 PlayerPartnerDoMoveAnimation,.Lfe49-PlayerPartnerDoMoveAnimation
	.align	2, 0
	.type	 PlayerPartnerHandlePrintString,function
	.thumb_func
PlayerPartnerHandlePrintString:
	push	{r4, lr}
	ldr	r0, .L638
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L638+0x4
	strh	r1, [r0]
	ldr	r0, .L638+0x8
	ldr	r4, .L638+0xc
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	bl	BufferStringBattle
	ldr	r0, .L638+0x10
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
	ldr	r1, .L638+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L638+0x18
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L639:
	.align	2, 0
.L638:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleResources
	.word	gActiveBattler
	.word	gDisplayedStringBattle
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter2
.Lfe50:
	.size	 PlayerPartnerHandlePrintString,.Lfe50-PlayerPartnerHandlePrintString
	.align	2, 0
	.type	 PlayerPartnerHandlePrintSelectionString,function
	.thumb_func
PlayerPartnerHandlePrintSelectionString:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 PlayerPartnerHandlePrintSelectionString,.Lfe51-PlayerPartnerHandlePrintSelectionString
	.align	2, 0
	.type	 PlayerPartnerHandleChooseAction,function
	.thumb_func
PlayerPartnerHandleChooseAction:
	push	{lr}
	bl	AI_TrySwitchOrUseItem
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 PlayerPartnerHandleChooseAction,.Lfe52-PlayerPartnerHandleChooseAction
	.align	2, 0
	.type	 PlayerPartnerHandleUnknownYesNoBox,function
	.thumb_func
PlayerPartnerHandleUnknownYesNoBox:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 PlayerPartnerHandleUnknownYesNoBox,.Lfe53-PlayerPartnerHandleUnknownYesNoBox
	.align	2, 0
	.type	 PlayerPartnerHandleChooseMove,function
	.thumb_func
PlayerPartnerHandleChooseMove:
	push	{r4, r5, r6, lr}
	ldr	r1, .L649
	ldr	r6, .L649+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r4, [r1]
	add	r4, r4, r0
	add	r4, r4, #0x4
	mov	r0, #0xf
	bl	BattleAI_SetupAIData
	bl	BattleAI_ChooseMoveOrAction
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L649+0x8
	lsl	r0, r5, #0x1
	add	r4, r4, r0
	ldrh	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L644	@cond_branch
	ldr	r1, .L649+0xc
	ldrb	r0, [r6]
	strb	r0, [r1]
.L644:
	ldrh	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L645	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	ldr	r4, .L649+0xc
	strb	r0, [r4]
	ldr	r0, .L649+0x10
	ldrb	r1, [r0]
	ldr	r2, .L649+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L645	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	strb	r0, [r4]
.L645:
	ldr	r0, .L649+0x4
	ldrb	r0, [r0]
	bl	CanMegaEvolve
	cmp	r0, #0
	beq	.L647	@cond_branch
	mov	r0, #0x80
	add	r2, r5, #0
	orr	r2, r2, r0
	ldr	r0, .L649+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
	b	.L648
.L650:
	.align	2, 0
.L649:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleMoves
	.word	gBattlerTarget
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L647:
	ldr	r0, .L651
	ldrb	r2, [r0]
	lsl	r2, r2, #0x8
	orr	r2, r2, r5
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
.L648:
	bl	PlayerPartnerBufferExecCompleted
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L652:
	.align	2, 0
.L651:
	.word	gBattlerTarget
.Lfe54:
	.size	 PlayerPartnerHandleChooseMove,.Lfe54-PlayerPartnerHandleChooseMove
	.align	2, 0
	.type	 PlayerPartnerHandleChooseItem,function
	.thumb_func
PlayerPartnerHandleChooseItem:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 PlayerPartnerHandleChooseItem,.Lfe55-PlayerPartnerHandleChooseItem
	.align	2, 0
	.type	 PlayerPartnerHandleChoosePokemon,function
	.thumb_func
PlayerPartnerHandleChoosePokemon:
	push	{r4, r5, r6, lr}
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bne	.L655	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x3
	b	.L656
.L658:
	add	r4, r4, #0x1
.L656:
	cmp	r4, #0x5
	bgt	.L655	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L662
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L658	@cond_branch
	ldr	r1, .L662+0x4
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L658	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L658	@cond_branch
.L655:
	ldr	r0, .L662+0x8
	ldrb	r0, [r0]
	ldr	r1, .L662+0xc
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	strb	r4, [r0]
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitChosenMonReturnValue
	bl	PlayerPartnerBufferExecCompleted
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L663:
	.align	2, 0
.L662:
	.word	gPlayerParty
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleStruct
.Lfe56:
	.size	 PlayerPartnerHandleChoosePokemon,.Lfe56-PlayerPartnerHandleChoosePokemon
	.align	2, 0
	.type	 PlayerPartnerHandleCmd23,function
	.thumb_func
PlayerPartnerHandleCmd23:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 PlayerPartnerHandleCmd23,.Lfe57-PlayerPartnerHandleCmd23
	.align	2, 0
	.type	 PlayerPartnerHandleHealthBarUpdate,function
	.thumb_func
PlayerPartnerHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	ldr	r0, .L668
	ldr	r2, [r0]
	ldr	r0, .L668+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r3, r4, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x22
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r2, r2, #0x23
	add	r2, r2, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r7, r1, #0x10
	ldr	r0, .L668+0x8
	cmp	r7, r0
	beq	.L666	@cond_branch
	ldr	r6, .L668+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L668+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L668+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	SetBattleBarStruct
	b	.L667
.L669:
	.align	2, 0
.L668:
	.word	gBattleResources
	.word	gActiveBattler
	.word	0x7fff
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
.L666:
	ldr	r1, .L670
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L670+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L670+0x8
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	SetBattleBarStruct
.L667:
	ldr	r1, .L670+0xc
	ldr	r0, .L670+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L670+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L671:
	.align	2, 0
.L670:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnHealthbarDone
.Lfe58:
	.size	 PlayerPartnerHandleHealthBarUpdate,.Lfe58-PlayerPartnerHandleHealthBarUpdate
	.align	2, 0
	.type	 PlayerPartnerHandleExpUpdate,function
	.thumb_func
PlayerPartnerHandleExpUpdate:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L675
	ldr	r1, [r7]
	ldr	r5, .L675+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r6, [r1]
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, .L675+0x8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x63
	bls	.L673	@cond_branch
	bl	PlayerPartnerBufferExecCompleted
	b	.L674
.L676:
	.align	2, 0
.L675:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gPlayerParty
.L673:
	mov	r0, #0x1
	bl	LoadBattleBarGfx
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	ldr	r1, [r7]
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x22
	add	r0, r0, r2
	ldrb	r4, [r0]
	add	r1, r1, #0x23
	add	r1, r1, r2
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldr	r0, .L677
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L677+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r6, [r1, #0x8]
	strh	r4, [r1, #0xa]
	ldrb	r0, [r5]
	strh	r0, [r1, #0xc]
	ldr	r1, .L677+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L677+0xc
	str	r1, [r0]
.L674:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L678:
	.align	2, 0
.L677:
	.word	Task_GiveExpToMon
	.word	gTasks
	.word	gBattlerControllerFuncs
	.word	nullsub_21
.Lfe59:
	.size	 PlayerPartnerHandleExpUpdate,.Lfe59-PlayerPartnerHandleExpUpdate
	.align	2, 0
	.type	 PlayerPartnerHandleStatusIconUpdate,function
	.thumb_func
PlayerPartnerHandleStatusIconUpdate:
	push	{r4, lr}
	ldr	r4, .L681
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L680	@cond_branch
	ldr	r0, .L681+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L681+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L681+0xc
	add	r1, r1, r2
	mov	r2, #0x9
	bl	UpdateHealthboxAttribute
	ldrb	r2, [r4]
	ldr	r0, .L681+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L681+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L681+0x18
	str	r1, [r0]
.L680:
	pop	{r4}
	pop	{r0}
	bx	r0
.L682:
	.align	2, 0
.L681:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe60:
	.size	 PlayerPartnerHandleStatusIconUpdate,.Lfe60-PlayerPartnerHandleStatusIconUpdate
	.align	2, 0
	.type	 PlayerPartnerHandleStatusAnimation,function
	.thumb_func
PlayerPartnerHandleStatusAnimation:
	push	{r4, lr}
	ldr	r4, .L685
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L684	@cond_branch
	ldr	r0, .L685+0x4
	ldr	r0, [r0]
	mov	ip, r0
	ldrb	r3, [r4]
	lsl	r3, r3, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r3
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x22
	add	r1, r1, r3
	ldrb	r1, [r1]
	mov	r2, ip
	add	r2, r2, #0x23
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	mov	r2, ip
	add	r2, r2, #0x24
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x10
	orr	r1, r1, r2
	mov	r2, ip
	add	r2, r2, #0x25
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	bl	InitAndLaunchChosenStatusAnimation
	ldr	r1, .L685+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L685+0xc
	str	r1, [r0]
.L684:
	pop	{r4}
	pop	{r0}
	bx	r0
.L686:
	.align	2, 0
.L685:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe61:
	.size	 PlayerPartnerHandleStatusAnimation,.Lfe61-PlayerPartnerHandleStatusAnimation
	.align	2, 0
	.type	 PlayerPartnerHandleStatusXor,function
	.thumb_func
PlayerPartnerHandleStatusXor:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 PlayerPartnerHandleStatusXor,.Lfe62-PlayerPartnerHandleStatusXor
	.align	2, 0
	.type	 PlayerPartnerHandleDataTransfer,function
	.thumb_func
PlayerPartnerHandleDataTransfer:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 PlayerPartnerHandleDataTransfer,.Lfe63-PlayerPartnerHandleDataTransfer
	.align	2, 0
	.type	 PlayerPartnerHandleDMA3Transfer,function
	.thumb_func
PlayerPartnerHandleDMA3Transfer:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 PlayerPartnerHandleDMA3Transfer,.Lfe64-PlayerPartnerHandleDMA3Transfer
	.align	2, 0
	.type	 PlayerPartnerHandlePlayBGM,function
	.thumb_func
PlayerPartnerHandlePlayBGM:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 PlayerPartnerHandlePlayBGM,.Lfe65-PlayerPartnerHandlePlayBGM
	.align	2, 0
	.type	 PlayerPartnerHandleCmd32,function
	.thumb_func
PlayerPartnerHandleCmd32:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe66:
	.size	 PlayerPartnerHandleCmd32,.Lfe66-PlayerPartnerHandleCmd32
	.align	2, 0
	.type	 PlayerPartnerHandleTwoReturnValues,function
	.thumb_func
PlayerPartnerHandleTwoReturnValues:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 PlayerPartnerHandleTwoReturnValues,.Lfe67-PlayerPartnerHandleTwoReturnValues
	.align	2, 0
	.type	 PlayerPartnerHandleChosenMonReturnValue,function
	.thumb_func
PlayerPartnerHandleChosenMonReturnValue:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 PlayerPartnerHandleChosenMonReturnValue,.Lfe68-PlayerPartnerHandleChosenMonReturnValue
	.align	2, 0
	.type	 PlayerPartnerHandleOneReturnValue,function
	.thumb_func
PlayerPartnerHandleOneReturnValue:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 PlayerPartnerHandleOneReturnValue,.Lfe69-PlayerPartnerHandleOneReturnValue
	.align	2, 0
	.type	 PlayerPartnerHandleOneReturnValue_Duplicate,function
	.thumb_func
PlayerPartnerHandleOneReturnValue_Duplicate:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 PlayerPartnerHandleOneReturnValue_Duplicate,.Lfe70-PlayerPartnerHandleOneReturnValue_Duplicate
	.align	2, 0
	.type	 PlayerPartnerHandleCmd37,function
	.thumb_func
PlayerPartnerHandleCmd37:
	push	{lr}
	ldr	r2, .L697
	ldrb	r1, [r2]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L698:
	.align	2, 0
.L697:
	.word	gUnknown_02022D0C
.Lfe71:
	.size	 PlayerPartnerHandleCmd37,.Lfe71-PlayerPartnerHandleCmd37
	.align	2, 0
	.type	 PlayerPartnerHandleCmd38,function
	.thumb_func
PlayerPartnerHandleCmd38:
	push	{lr}
	ldr	r3, .L700
	ldr	r0, .L700+0x4
	ldr	r1, [r0]
	ldr	r0, .L700+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, #0x7f
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L701:
	.align	2, 0
.L700:
	.word	gUnknown_02022D0C
	.word	gBattleResources
	.word	gActiveBattler
.Lfe72:
	.size	 PlayerPartnerHandleCmd38,.Lfe72-PlayerPartnerHandleCmd38
	.align	2, 0
	.type	 PlayerPartnerHandleCmd39,function
	.thumb_func
PlayerPartnerHandleCmd39:
	push	{lr}
	ldr	r2, .L703
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L704:
	.align	2, 0
.L703:
	.word	gUnknown_02022D0C
.Lfe73:
	.size	 PlayerPartnerHandleCmd39,.Lfe73-PlayerPartnerHandleCmd39
	.align	2, 0
	.type	 PlayerPartnerHandleCmd40,function
	.thumb_func
PlayerPartnerHandleCmd40:
	push	{lr}
	ldr	r3, .L706
	ldr	r1, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrb	r2, [r3]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L707:
	.align	2, 0
.L706:
	.word	gUnknown_02022D0C
.Lfe74:
	.size	 PlayerPartnerHandleCmd40,.Lfe74-PlayerPartnerHandleCmd40
	.align	2, 0
	.type	 PlayerPartnerHandleHitAnimation,function
	.thumb_func
PlayerPartnerHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L711
	ldr	r2, .L711+0x4
	ldr	r4, .L711+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L709	@cond_branch
	bl	PlayerPartnerBufferExecCompleted
	b	.L710
.L712:
	.align	2, 0
.L711:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.L709:
	ldr	r1, .L713
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	DoHitAnimHealthboxEffect
	ldr	r1, .L713+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L713+0x8
	str	r1, [r0]
.L710:
	pop	{r4}
	pop	{r0}
	bx	r0
.L714:
	.align	2, 0
.L713:
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	DoHitAnimBlinkSpriteEffect
.Lfe75:
	.size	 PlayerPartnerHandleHitAnimation,.Lfe75-PlayerPartnerHandleHitAnimation
	.align	2, 0
	.type	 PlayerPartnerHandleCmd42,function
	.thumb_func
PlayerPartnerHandleCmd42:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe76:
	.size	 PlayerPartnerHandleCmd42,.Lfe76-PlayerPartnerHandleCmd42
	.align	2, 0
	.type	 PlayerPartnerHandlePlaySE,function
	.thumb_func
PlayerPartnerHandlePlaySE:
	push	{r4, lr}
	ldr	r4, .L719
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r3, #0x3f
	cmp	r0, #0
	bne	.L717	@cond_branch
	mov	r3, #0xc0
.L717:
	ldr	r0, .L719+0x4
	ldr	r1, [r0]
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	bl	PlayerPartnerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L720:
	.align	2, 0
.L719:
	.word	gActiveBattler
	.word	gBattleResources
.Lfe77:
	.size	 PlayerPartnerHandlePlaySE,.Lfe77-PlayerPartnerHandlePlaySE
	.align	2, 0
	.type	 PlayerPartnerHandlePlayFanfareOrBGM,function
	.thumb_func
PlayerPartnerHandlePlayFanfareOrBGM:
	push	{r4, r5, lr}
	ldr	r5, .L724
	ldr	r1, [r5]
	ldr	r4, .L724+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x23
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L722	@cond_branch
	bl	BattleStopLowHpSound
	ldr	r1, [r5]
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayBGM
	b	.L723
.L725:
	.align	2, 0
.L724:
	.word	gBattleResources
	.word	gActiveBattler
.L722:
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
.L723:
	bl	PlayerPartnerBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 PlayerPartnerHandlePlayFanfareOrBGM,.Lfe78-PlayerPartnerHandlePlayFanfareOrBGM
	.align	2, 0
	.type	 PlayerPartnerHandleFaintingCry,function
	.thumb_func
PlayerPartnerHandleFaintingCry:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r0, .L727
	mov	r9, r0
	ldr	r1, .L727+0x4
	mov	r8, r1
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L727+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x59
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	GetFormSpeciesId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	neg	r1, r1
	mov	r2, #0x5
	bl	PlayCry3
	bl	PlayerPartnerBufferExecCompleted
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L728:
	.align	2, 0
.L727:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gPlayerParty
.Lfe79:
	.size	 PlayerPartnerHandleFaintingCry,.Lfe79-PlayerPartnerHandleFaintingCry
	.align	2, 0
	.type	 PlayerPartnerHandleIntroSlide,function
	.thumb_func
PlayerPartnerHandleIntroSlide:
	push	{lr}
	ldr	r0, .L730
	ldr	r1, [r0]
	ldr	r0, .L730+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	HandleIntroSlide
	ldr	r2, .L730+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L731:
	.align	2, 0
.L730:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gIntroSlideFlags
.Lfe80:
	.size	 PlayerPartnerHandleIntroSlide,.Lfe80-PlayerPartnerHandleIntroSlide
	.align	2, 0
	.type	 PlayerPartnerHandleIntroTrainerBallThrow,function
	.thumb_func
PlayerPartnerHandleIntroTrainerBallThrow:
	push	{r4, r5, r6, lr}
	ldr	r6, .L739
	ldr	r5, .L739+0x4
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L739+0x8
	add	r0, r0, r4
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x32
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L739+0xc
	strh	r1, [r0, #0x32]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L739+0x10
	str	r1, [r0]
	ldrb	r2, [r5]
	add	r0, r2, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r2, [r0, #0x38]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L739+0x14
	bl	StoreSpriteCallbackInData6
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r0, .L739+0x18
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r2, .L739+0x1c
	ldrh	r0, [r2]
	ldr	r1, .L739+0x20
	cmp	r0, r1
	bne	.L733	@cond_branch
	ldr	r0, .L739+0x24
	ldr	r0, [r0, #0x38]
	b	.L738
.L740:
	.align	2, 0
.L739:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	0xffd8
	.word	StartAnimLinearTranslation
	.word	sub_805CC00
	.word	0xd6f9
	.word	gPartnerTrainerId
	.word	0xc03
	.word	gTrainerBackPicPaletteTable
.L733:
	cmp	r0, r1
	bls	.L735	@cond_branch
	ldr	r0, .L741
	ldrb	r0, [r0]
	ldr	r1, .L741+0x4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
.L738:
	lsl	r4, r4, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r2, #0x20
	bl	LoadCompressedPalette
	b	.L734
.L742:
	.align	2, 0
.L741:
	.word	gPartnerSpriteId
	.word	gTrainerBackPicPaletteTable
.L735:
	ldrh	r0, [r2]
	bl	GetFrontierTrainerFrontSpriteId
	lsl	r0, r0, #0x18
	ldr	r1, .L743
	lsr	r0, r0, #0x15
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r4, r4, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r2, #0x20
	bl	LoadCompressedPalette
.L734:
	ldr	r2, .L743+0x4
	ldr	r1, .L743+0x8
	ldr	r5, .L743+0xc
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r1, #0x5]
	ldr	r0, .L743+0x10
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L743+0x14
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r5]
	strh	r0, [r1, #0x8]
	ldr	r3, .L743+0x18
	ldr	r0, [r3]
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L737	@cond_branch
	ldr	r0, .L743+0x1c
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L743+0x20
	str	r1, [r0]
.L737:
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L743+0x24
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L743+0x28
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L744:
	.align	2, 0
.L743:
	.word	gTrainerFrontPicPaletteTable
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	sub_81BE2C8
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
	.word	gBattlerControllerFuncs
	.word	nullsub_77
.Lfe81:
	.size	 PlayerPartnerHandleIntroTrainerBallThrow,.Lfe81-PlayerPartnerHandleIntroTrainerBallThrow
	.align	2, 0
	.type	 sub_81BE2C8,function
	.thumb_func
sub_81BE2C8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L751
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x17
	bgt	.L746	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0xa]
	b	.L747
.L752:
	.align	2, 0
.L751:
	.word	gTasks
.L746:
	ldr	r7, .L753
	ldrb	r0, [r7]
	mov	r9, r0
	ldrh	r0, [r1, #0x8]
	strb	r0, [r7]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L749	@cond_branch
	ldr	r0, .L753+0x4
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L748	@cond_branch
.L749:
	ldr	r0, .L753+0x8
	ldr	r1, [r0]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldr	r2, .L753+0xc
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_81BD0E4
	b	.L750
.L754:
	.align	2, 0
.L753:
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattleResources
	.word	gBattlerPartyIndexes
.L748:
	ldr	r5, .L755
	ldr	r1, [r5]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldr	r4, .L755+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_81BD0E4
	ldrb	r0, [r7]
	mov	r6, #0x2
	eor	r0, r0, r6
	strb	r0, [r7]
	ldr	r1, [r5]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r4
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L755+0x8
	add	r0, r0, r2
	bl	BattleLoadPlayerMonSpriteGfx
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_81BD0E4
	ldrb	r0, [r7]
	eor	r0, r0, r6
	strb	r0, [r7]
.L750:
	ldr	r1, .L755+0xc
	ldr	r2, .L755+0x10
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L755+0x14
	str	r1, [r0]
	mov	r3, r9
	strb	r3, [r2]
	mov	r0, r8
	bl	DestroyTask
.L747:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L756:
	.align	2, 0
.L755:
	.word	gBattleResources
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	sub_81BB02C
.Lfe82:
	.size	 sub_81BE2C8,.Lfe82-sub_81BE2C8
	.align	2, 0
	.type	 PlayerPartnerHandleDrawPartyStatusSummary,function
	.thumb_func
PlayerPartnerHandleDrawPartyStatusSummary:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L761
	ldr	r0, [r0]
	ldr	r1, .L761+0x4
	ldrb	r2, [r1]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L758	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L758	@cond_branch
	bl	PlayerPartnerBufferExecCompleted
	b	.L759
.L762:
	.align	2, 0
.L761:
	.word	gBattleResources
	.word	gActiveBattler
.L758:
	ldr	r7, .L763
	ldr	r0, [r7]
	ldr	r6, .L763+0x4
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r6]
	ldr	r5, .L763+0x8
	lsl	r4, r0, #0x9
	add	r1, r4, #0
	add	r1, r1, #0x20
	ldr	r3, [r5]
	add	r1, r3, r1
	add	r1, r1, #0x4
	add	r2, r3, #0
	add	r2, r2, #0x21
	add	r2, r2, r4
	ldrb	r2, [r2]
	add	r3, r3, #0x22
	add	r3, r3, r4
	ldrb	r3, [r3]
	bl	CreatePartyStatusSummarySprites
	ldr	r2, .L763+0xc
	ldrb	r1, [r6]
	add	r1, r1, r2
	mov	r3, #0x0
	strb	r0, [r1]
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x5]
	ldr	r0, [r5]
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x22
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L760	@cond_branch
	ldr	r0, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x5d
	strb	r1, [r0, #0x5]
.L760:
	ldr	r0, .L763+0x10
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L763+0x14
	str	r0, [r1]
.L759:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L764:
	.align	2, 0
.L763:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlerStatusSummaryTaskId
	.word	gBattlerControllerFuncs
	.word	sub_81BE498
.Lfe83:
	.size	 PlayerPartnerHandleDrawPartyStatusSummary,.Lfe83-PlayerPartnerHandleDrawPartyStatusSummary
	.align	2, 0
	.type	 sub_81BE498,function
	.thumb_func
sub_81BE498:
	push	{r4, lr}
	ldr	r4, .L767
	ldr	r0, [r4]
	ldr	r3, .L767+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x5]
	add	r2, r1, #0x1
	strb	r2, [r0, #0x5]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x5c
	bls	.L766	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x5]
	bl	PlayerPartnerBufferExecCompleted
.L766:
	pop	{r4}
	pop	{r0}
	bx	r0
.L768:
	.align	2, 0
.L767:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe84:
	.size	 sub_81BE498,.Lfe84-sub_81BE498
	.align	2, 0
	.type	 PlayerPartnerHandleHidePartyStatusSummary,function
	.thumb_func
PlayerPartnerHandleHidePartyStatusSummary:
	push	{lr}
	ldr	r0, .L771
	ldr	r1, [r0]
	ldr	r0, .L771+0x4
	ldrb	r3, [r0]
	ldr	r1, [r1, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L770	@cond_branch
	ldr	r2, .L771+0x8
	ldr	r0, .L771+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L771+0x10
	str	r1, [r0]
.L770:
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.L772:
	.align	2, 0
.L771:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gTasks
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
.Lfe85:
	.size	 PlayerPartnerHandleHidePartyStatusSummary,.Lfe85-PlayerPartnerHandleHidePartyStatusSummary
	.align	2, 0
	.type	 PlayerPartnerHandleEndBounceEffect,function
	.thumb_func
PlayerPartnerHandleEndBounceEffect:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 PlayerPartnerHandleEndBounceEffect,.Lfe86-PlayerPartnerHandleEndBounceEffect
	.align	2, 0
	.type	 PlayerPartnerHandleSpriteInvisibility,function
	.thumb_func
PlayerPartnerHandleSpriteInvisibility:
	push	{r4, lr}
	ldr	r4, .L776
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L775	@cond_branch
	ldr	r3, .L776+0x4
	ldr	r0, .L776+0x8
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r0, .L776+0xc
	ldr	r0, [r0]
	lsl	r1, r1, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	add	r2, r2, #0x3e
	mov	r3, #0x1
	ldrb	r1, [r0]
	and	r1, r1, r3
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	CopyBattleSpriteInvisibility
.L775:
	bl	PlayerPartnerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L777:
	.align	2, 0
.L776:
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleResources
.Lfe87:
	.size	 PlayerPartnerHandleSpriteInvisibility,.Lfe87-PlayerPartnerHandleSpriteInvisibility
	.align	2, 0
	.type	 PlayerPartnerHandleBattleAnimation,function
	.thumb_func
PlayerPartnerHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r6, .L782
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L779	@cond_branch
	ldr	r0, .L782+0x4
	ldr	r1, [r0]
	ldrb	r2, [r6]
	lsl	r5, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r5
	ldrb	r3, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x22
	add	r0, r0, r5
	ldrb	r4, [r0]
	add	r1, r1, #0x23
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	TryHandleLaunchBattleTableAnimation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L780	@cond_branch
	bl	PlayerPartnerBufferExecCompleted
	b	.L779
.L783:
	.align	2, 0
.L782:
	.word	gActiveBattler
	.word	gBattleResources
.L780:
	ldr	r0, .L784
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L784+0x4
	str	r0, [r1]
.L779:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L785:
	.align	2, 0
.L784:
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedBattleAnimation
.Lfe88:
	.size	 PlayerPartnerHandleBattleAnimation,.Lfe88-PlayerPartnerHandleBattleAnimation
	.align	2, 0
	.type	 PlayerPartnerHandleLinkStandbyMsg,function
	.thumb_func
PlayerPartnerHandleLinkStandbyMsg:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe89:
	.size	 PlayerPartnerHandleLinkStandbyMsg,.Lfe89-PlayerPartnerHandleLinkStandbyMsg
	.align	2, 0
	.type	 PlayerPartnerHandleResetActionMoveSelection,function
	.thumb_func
PlayerPartnerHandleResetActionMoveSelection:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe90:
	.size	 PlayerPartnerHandleResetActionMoveSelection,.Lfe90-PlayerPartnerHandleResetActionMoveSelection
	.align	2, 0
	.type	 PlayerPartnerHandleCmd55,function
	.thumb_func
PlayerPartnerHandleCmd55:
	push	{r4, lr}
	ldr	r2, .L789
	ldr	r0, .L789+0x4
	ldr	r1, [r0]
	ldr	r4, .L789+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	mov	r0, #0x5
	bl	FadeOutMapMusic
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	bl	PlayerPartnerBufferExecCompleted
	ldr	r1, .L789+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L789+0x10
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L790:
	.align	2, 0
.L789:
	.word	gBattleOutcome
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	sub_80587B0
.Lfe91:
	.size	 PlayerPartnerHandleCmd55,.Lfe91-PlayerPartnerHandleCmd55
	.align	2, 0
	.type	 PlayerPartnerHandleBattleDebug,function
	.thumb_func
PlayerPartnerHandleBattleDebug:
	push	{lr}
	bl	PlayerPartnerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe92:
	.size	 PlayerPartnerHandleBattleDebug,.Lfe92-PlayerPartnerHandleBattleDebug
	.align	2, 0
	.type	 PlayerPartnerCmdEnd,function
	.thumb_func
PlayerPartnerCmdEnd:
	bx	lr
.Lfe93:
	.size	 PlayerPartnerCmdEnd,.Lfe93-PlayerPartnerCmdEnd
.text
	.align	2, 0

