@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	ResetTasks
	.type	 ResetTasks,function
	.thumb_func
ResetTasks:
	push	{r4, r5, r6, r7, lr}
	mov	r4, #0x0
	ldr	r6, .L8
	add	r7, r6, #0
	add	r7, r7, #0x8
.L6:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r6
	mov	r1, #0x0
	strb	r1, [r2, #0x4]
	ldr	r1, .L8+0x4
	str	r1, [r2]
	strb	r4, [r2, #0x5]
	add	r4, r4, #0x1
	strb	r4, [r2, #0x6]
	mov	r1, #0x1
	neg	r1, r1
	add	r5, r1, #0
	mov	r1, #0xff
	strb	r1, [r2, #0x7]
	add	r0, r0, r7
	mov	r1, #0x0
	mov	r2, #0x20
	bl	memset
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	cmp	r4, #0xf
	bls	.L6	@cond_branch
	ldr	r0, .L8
	mov	r1, #0xfe
	strb	r1, [r0, #0x5]
	ldr	r1, .L8+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	orr	r1, r1, r5
	strb	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gTasks
	.word	TaskDummy
	.word	0x25e
.Lfe1:
	.size	 ResetTasks,.Lfe1-ResetTasks
	.align	2, 0
	.globl	CreateTask
	.type	 CreateTask,function
	.thumb_func
CreateTask:
	push	{r4, r5, r6, r7, lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r6, #0x0
	ldr	r7, .L18
.L14:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r5, r0, #0x3
	add	r4, r5, r7
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0
	bne	.L13	@cond_branch
	str	r2, [r4]
	strb	r1, [r4, #0x7]
	add	r0, r6, #0
	bl	InsertTask
	add	r0, r7, #0
	add	r0, r0, #0x8
	add	r0, r5, r0
	mov	r1, #0x0
	mov	r2, #0x20
	bl	memset
	mov	r0, #0x1
	strb	r0, [r4, #0x4]
	add	r0, r6, #0
	b	.L17
.L19:
	.align	2, 0
.L18:
	.word	gTasks
.L13:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0xf
	bls	.L14	@cond_branch
	mov	r0, #0x0
.L17:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 CreateTask,.Lfe2-CreateTask
	.align	2, 0
	.type	 InsertTask,function
	.thumb_func
InsertTask:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	FindFirstActiveTask
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x10
	bne	.L21	@cond_branch
	ldr	r1, .L29
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xfe
	strb	r1, [r0, #0x5]
	mov	r1, #0xff
	strb	r1, [r0, #0x6]
	b	.L20
.L30:
	.align	2, 0
.L29:
	.word	gTasks
.L21:
	ldr	r6, .L31
	lsl	r0, r4, #0x2
	mov	ip, r0
	mov	r8, r6
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r6
.L24:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r5, r0, #0x3
	mov	r7, r8
	add	r3, r5, r7
	ldrb	r0, [r2, #0x7]
	ldrb	r7, [r3, #0x7]
	cmp	r0, r7
	bcs	.L25	@cond_branch
	ldrb	r0, [r3, #0x5]
	strb	r0, [r2, #0x5]
	strb	r1, [r2, #0x6]
	ldrb	r0, [r3, #0x5]
	cmp	r0, #0xfe
	beq	.L26	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	strb	r4, [r0, #0x6]
.L26:
	strb	r4, [r3, #0x5]
	b	.L20
.L32:
	.align	2, 0
.L31:
	.word	gTasks
.L25:
	ldrb	r0, [r3, #0x6]
	cmp	r0, #0xff
	beq	.L27	@cond_branch
	add	r1, r0, #0
	b	.L24
.L27:
	mov	r2, ip
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	strb	r1, [r0, #0x5]
	add	r2, r5, r6
	ldrb	r1, [r2, #0x6]
	strb	r1, [r0, #0x6]
	strb	r4, [r2, #0x6]
.L20:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 InsertTask,.Lfe3-InsertTask
	.align	2, 0
	.globl	DestroyTask
	.type	 DestroyTask,function
	.thumb_func
DestroyTask:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L40
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r2, r1, r4
	ldrb	r0, [r2, #0x4]
	cmp	r0, #0
	beq	.L34	@cond_branch
	mov	r0, #0x0
	strb	r0, [r2, #0x4]
	ldrb	r3, [r2, #0x5]
	cmp	r3, #0xfe
	bne	.L35	@cond_branch
	ldrb	r0, [r2, #0x6]
	cmp	r0, #0xff
	beq	.L34	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strb	r3, [r0, #0x5]
	b	.L34
.L41:
	.align	2, 0
.L40:
	.word	gTasks
.L35:
	ldrb	r3, [r2, #0x6]
	add	r0, r3, #0
	cmp	r0, #0xff
	bne	.L38	@cond_branch
	ldrb	r0, [r2, #0x5]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	mov	r0, #0xff
	strb	r0, [r1, #0x6]
	b	.L34
.L38:
	ldrb	r1, [r2, #0x5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strb	r3, [r0, #0x6]
	ldrb	r1, [r2, #0x6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r1, [r2, #0x5]
	strb	r1, [r0, #0x5]
.L34:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 DestroyTask,.Lfe4-DestroyTask
	.align	2, 0
	.globl	RunTasks
	.type	 RunTasks,function
	.thumb_func
RunTasks:
	push	{r4, r5, lr}
	bl	FindFirstActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x10
	beq	.L43	@cond_branch
	ldr	r5, .L49
.L44:
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r5
	ldr	r1, [r4]
	bl	_call_via_r1
	ldrb	r0, [r4, #0x6]
	cmp	r0, #0xff
	bne	.L44	@cond_branch
.L43:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gTasks
.Lfe5:
	.size	 RunTasks,.Lfe5-RunTasks
	.align	2, 0
	.type	 FindFirstActiveTask,function
	.thumb_func
FindFirstActiveTask:
	push	{lr}
	mov	r2, #0x0
	ldr	r0, .L58
	ldrb	r1, [r0, #0x4]
	add	r3, r0, #0
	cmp	r1, #0x1
	bne	.L54	@cond_branch
	ldrb	r0, [r3, #0x5]
	cmp	r0, #0xfe
	beq	.L53	@cond_branch
.L54:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xf
	bhi	.L53	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r0, r3
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0x1
	bne	.L54	@cond_branch
	ldrb	r0, [r1, #0x5]
	cmp	r0, #0xfe
	bne	.L54	@cond_branch
.L53:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L59:
	.align	2, 0
.L58:
	.word	gTasks
.Lfe6:
	.size	 FindFirstActiveTask,.Lfe6-FindFirstActiveTask
	.align	2, 0
	.globl	TaskDummy
	.type	 TaskDummy,function
	.thumb_func
TaskDummy:
	bx	lr
.Lfe7:
	.size	 TaskDummy,.Lfe7-TaskDummy
	.align	2, 0
	.globl	SetTaskFuncWithFollowupFunc
	.type	 SetTaskFuncWithFollowupFunc,function
	.thumb_func
SetTaskFuncWithFollowupFunc:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L62
	lsl	r3, r0, #0x2
	add	r3, r3, r0
	lsl	r3, r3, #0x3
	add	r0, r3, #0
	add	r0, r0, #0x1c
	add	r4, r5, #0
	add	r4, r4, #0x8
	add	r0, r0, r4
	strh	r2, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x1e
	add	r0, r0, r4
	lsr	r2, r2, #0x10
	strh	r2, [r0]
	add	r3, r3, r5
	str	r1, [r3]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	gTasks
.Lfe8:
	.size	 SetTaskFuncWithFollowupFunc,.Lfe8-SetTaskFuncWithFollowupFunc
	.align	2, 0
	.globl	SwitchTaskToFollowupFunc
	.type	 SwitchTaskToFollowupFunc,function
	.thumb_func
SwitchTaskToFollowupFunc:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L65
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r3
	add	r0, r1, #0
	add	r0, r0, #0x1c
	add	r3, r3, #0x8
	add	r0, r0, r3
	ldrh	r2, [r0]
	add	r1, r1, #0x1e
	add	r1, r1, r3
	mov	r3, #0x0
	ldrsh	r0, [r1, r3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	str	r2, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	gTasks
.Lfe9:
	.size	 SwitchTaskToFollowupFunc,.Lfe9-SwitchTaskToFollowupFunc
	.align	2, 0
	.globl	FuncIsActiveTask
	.type	 FuncIsActiveTask,function
	.thumb_func
FuncIsActiveTask:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	ldr	r4, .L75
.L71:
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r0, r4
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0x1
	bne	.L70	@cond_branch
	ldr	r0, [r1]
	cmp	r0, r3
	bne	.L70	@cond_branch
	mov	r0, #0x1
	b	.L74
.L76:
	.align	2, 0
.L75:
	.word	gTasks
.L70:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xf
	bls	.L71	@cond_branch
	mov	r0, #0x0
.L74:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 FuncIsActiveTask,.Lfe10-FuncIsActiveTask
	.align	2, 0
	.globl	FindTaskIdByFunc
	.type	 FindTaskIdByFunc,function
	.thumb_func
FindTaskIdByFunc:
	push	{lr}
	add	r3, r0, #0
	mov	r2, #0x0
	ldr	r1, .L85
.L81:
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0x1
	bne	.L80	@cond_branch
	ldr	r0, [r1]
	cmp	r0, r3
	bne	.L80	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	b	.L84
.L86:
	.align	2, 0
.L85:
	.word	gTasks
.L80:
	add	r1, r1, #0x28
	add	r2, r2, #0x1
	cmp	r2, #0xf
	ble	.L81	@cond_branch
	mov	r0, #0xff
.L84:
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 FindTaskIdByFunc,.Lfe11-FindTaskIdByFunc
	.align	2, 0
	.globl	GetTaskCount
	.type	 GetTaskCount,function
	.thumb_func
GetTaskCount:
	push	{lr}
	mov	r2, #0x0
	mov	r1, #0x0
	ldr	r3, .L94
.L91:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0x1
	bne	.L90	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L90:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xf
	bls	.L91	@cond_branch
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L95:
	.align	2, 0
.L94:
	.word	gTasks
.Lfe12:
	.size	 GetTaskCount,.Lfe12-GetTaskCount
	.align	2, 0
	.globl	SetWordTaskArg
	.type	 SetWordTaskArg,function
	.thumb_func
SetWordTaskArg:
	push	{r4, r5, lr}
	add	r5, r2, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	cmp	r3, #0xe
	bhi	.L97	@cond_branch
	ldr	r2, .L98
	lsl	r0, r3, #0x1
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r2, r2, #0x8
	add	r0, r0, r2
	strh	r5, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, r2
	lsr	r1, r5, #0x10
	strh	r1, [r0]
.L97:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L99:
	.align	2, 0
.L98:
	.word	gTasks
.Lfe13:
	.size	 SetWordTaskArg,.Lfe13-SetWordTaskArg
	.align	2, 0
	.globl	GetWordTaskArg
	.type	 GetWordTaskArg,function
	.thumb_func
GetWordTaskArg:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0xe
	bls	.L101	@cond_branch
	mov	r0, #0x0
	b	.L103
.L101:
	ldr	r3, .L104
	lsl	r0, r1, #0x1
	lsl	r2, r4, #0x2
	add	r2, r2, r4
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	add	r3, r3, #0x8
	add	r0, r0, r3
	ldrh	r0, [r0]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	add	r1, r1, r3
	mov	r2, #0x0
	ldrsh	r1, [r1, r2]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
.L103:
	pop	{r4}
	pop	{r1}
	bx	r1
.L105:
	.align	2, 0
.L104:
	.word	gTasks
.Lfe14:
	.size	 GetWordTaskArg,.Lfe14-GetWordTaskArg
	.comm	gTasks, 640	@ 640
.text
	.align	2, 0

