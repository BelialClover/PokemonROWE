@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gScratchAnimCmds
	.section .rodata
	.align	2, 0
	.type	 gScratchAnimCmds,object
gScratchAnimCmds:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gScratchAnimCmds,24
	.globl	gScratchAnimTable
	.align	2, 0
	.type	 gScratchAnimTable,object
gScratchAnimTable:
	.word	gScratchAnimCmds
	.size	 gScratchAnimTable,4
	.globl	gScratchSpriteTemplate
	.align	2, 0
	.type	 gScratchSpriteTemplate,object
	.size	 gScratchSpriteTemplate,24
gScratchSpriteTemplate:
	.short	0x2799
	.short	0x2799
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	gScratchAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpriteOnMonPos
	.globl	gBlackSmokeSpriteTemplate
	.align	2, 0
	.type	 gBlackSmokeSpriteTemplate,object
	.size	 gBlackSmokeSpriteTemplate,24
gBlackSmokeSpriteTemplate:
	.short	0x2720
	.short	0x2720
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBlackSmoke
	.globl	gBlackBallSpriteTemplate
	.align	2, 0
	.type	 gBlackBallSpriteTemplate,object
	.size	 gBlackBallSpriteTemplate,24
gBlackBallSpriteTemplate:
	.short	0x2721
	.short	0x2721
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimThrowProjectile
	.globl	gOpeningEyeAnimCmds
	.align	2, 0
	.type	 gOpeningEyeAnimCmds,object
gOpeningEyeAnimCmds:
	.short	0x0
	.byte	0x28
	.space	1
	.short	0x10
	.byte	0x8
	.space	1
	.short	0x20
	.byte	0x28
	.space	1
	.short	-0x1
	.space	2
	.size	 gOpeningEyeAnimCmds,16
	.globl	gOpeningEyeAnimTable
	.align	2, 0
	.type	 gOpeningEyeAnimTable,object
gOpeningEyeAnimTable:
	.word	gOpeningEyeAnimCmds
	.size	 gOpeningEyeAnimTable,4
	.globl	gOpeningEyeSpriteTemplate
	.align	2, 0
	.type	 gOpeningEyeSpriteTemplate,object
	.size	 gOpeningEyeSpriteTemplate,24
gOpeningEyeSpriteTemplate:
	.short	0x27ce
	.short	0x27ce
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gOpeningEyeAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpriteOnMonPos
	.globl	gWhiteHaloSpriteTemplate
	.align	2, 0
	.type	 gWhiteHaloSpriteTemplate,object
	.size	 gWhiteHaloSpriteTemplate,24
gWhiteHaloSpriteTemplate:
	.short	0x27cf
	.short	0x27cf
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWhiteHalo
	.globl	gTealAlertSpriteTemplate
	.align	2, 0
	.type	 gTealAlertSpriteTemplate,object
	.size	 gTealAlertSpriteTemplate,24
gTealAlertSpriteTemplate:
	.short	0x27cd
	.short	0x27cd
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimTealAlert
	.globl	gMeanLookEyeAffineAnimCmds1
	.align	2, 0
	.type	 gMeanLookEyeAffineAnimCmds1,object
gMeanLookEyeAffineAnimCmds1:
	.short	0x180
	.short	0x180
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x20
	.short	0x18
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x18
	.short	-0x20
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gMeanLookEyeAffineAnimCmds1,32
	.globl	gMeanLookEyeAffineAnimCmds2
	.align	2, 0
	.type	 gMeanLookEyeAffineAnimCmds2,object
gMeanLookEyeAffineAnimCmds2:
	.short	0x30
	.short	0x30
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x20
	.short	0x20
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7fff
	.space	6
	.size	 gMeanLookEyeAffineAnimCmds2,24
	.globl	gMeanLookEyeAffineAnimTable
	.align	2, 0
	.type	 gMeanLookEyeAffineAnimTable,object
gMeanLookEyeAffineAnimTable:
	.word	gMeanLookEyeAffineAnimCmds1
	.word	gMeanLookEyeAffineAnimCmds2
	.size	 gMeanLookEyeAffineAnimTable,8
	.globl	gMeanLookEyeSpriteTemplate
	.align	2, 0
	.type	 gMeanLookEyeSpriteTemplate,object
	.size	 gMeanLookEyeSpriteTemplate,24
gMeanLookEyeSpriteTemplate:
	.short	0x27cb
	.short	0x27cb
	.word	gOamData_AffineDouble_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gMeanLookEyeAffineAnimTable
	.word	AnimMeanLookEye
	.globl	gSpikesSpriteTemplate
	.align	2, 0
	.type	 gSpikesSpriteTemplate,object
	.size	 gSpikesSpriteTemplate,24
gSpikesSpriteTemplate:
	.short	0x27a8
	.short	0x27a8
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpikes
	.globl	gToxicSpikesSpriteTemplate
	.align	2, 0
	.type	 gToxicSpikesSpriteTemplate,object
	.size	 gToxicSpikesSpriteTemplate,24
gToxicSpikesSpriteTemplate:
	.short	0x2833
	.short	0x2833
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpikes
	.globl	gLeerAnimCmds
	.align	2, 0
	.type	 gLeerAnimCmds,object
gLeerAnimCmds:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 gLeerAnimCmds,24
	.globl	gLeerAnimTable
	.align	2, 0
	.type	 gLeerAnimTable,object
gLeerAnimTable:
	.word	gLeerAnimCmds
	.size	 gLeerAnimTable,4
	.globl	gLeerSpriteTemplate
	.align	2, 0
	.type	 gLeerSpriteTemplate,object
	.size	 gLeerSpriteTemplate,24
gLeerSpriteTemplate:
	.short	0x272b
	.short	0x272b
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gLeerAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimLeer
	.globl	gLetterZAnimCmds
	.align	2, 0
	.type	 gLetterZAnimCmds,object
gLetterZAnimCmds:
	.short	0x0
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 gLetterZAnimCmds,8
	.globl	gLetterZAnimTable
	.align	2, 0
	.type	 gLetterZAnimTable,object
gLetterZAnimTable:
	.word	gLetterZAnimCmds
	.size	 gLetterZAnimTable,4
	.globl	gLetterZAffineAnimCmds
	.align	2, 0
	.type	 gLetterZAffineAnimCmds,object
gLetterZAffineAnimCmds:
	.short	-0x7
	.short	-0x7
	.byte	0xfd
	.byte	0x10
	.space	2
	.short	0x7
	.short	0x7
	.byte	0x3
	.byte	0x10
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gLetterZAffineAnimCmds,24
	.globl	gLetterZAffineAnimTable
	.align	2, 0
	.type	 gLetterZAffineAnimTable,object
gLetterZAffineAnimTable:
	.word	gLetterZAffineAnimCmds
	.size	 gLetterZAffineAnimTable,4
	.globl	gLetterZSpriteTemplate
	.align	2, 0
	.type	 gLetterZSpriteTemplate,object
	.size	 gLetterZSpriteTemplate,24
gLetterZSpriteTemplate:
	.short	0x27f4
	.short	0x27f4
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gLetterZAnimTable
	.word	0x0
	.word	gLetterZAffineAnimTable
	.word	AnimLetterZ
	.globl	gFangAnimCmds
	.align	2, 0
	.type	 gFangAnimCmds,object
gFangAnimCmds:
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x10
	.byte	0x10
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gFangAnimCmds,20
	.globl	gFangAnimTable
	.align	2, 0
	.type	 gFangAnimTable,object
gFangAnimTable:
	.word	gFangAnimCmds
	.size	 gFangAnimTable,4
	.globl	gFangAffineAnimCmds
	.align	2, 0
	.type	 gFangAffineAnimCmds,object
gFangAffineAnimCmds:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x20
	.short	-0x20
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gFangAffineAnimCmds,24
	.globl	gFangAffineAnimTable
	.align	2, 0
	.type	 gFangAffineAnimTable,object
gFangAffineAnimTable:
	.word	gFangAffineAnimCmds
	.size	 gFangAffineAnimTable,4
	.globl	gFangSpriteTemplate
	.align	2, 0
	.type	 gFangSpriteTemplate,object
	.size	 gFangSpriteTemplate,24
gFangSpriteTemplate:
	.short	0x27d0
	.short	0x27d0
	.word	gOamData_AffineDouble_ObjNormal_32x32
	.word	gFangAnimTable
	.word	0x0
	.word	gFangAffineAnimTable
	.word	AnimFang
	.globl	gSpotlightAffineAnimCmds1
	.align	2, 0
	.type	 gSpotlightAffineAnimCmds1,object
gSpotlightAffineAnimCmds1:
	.short	0x0
	.short	0x180
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x10
	.short	0x0
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSpotlightAffineAnimCmds1,24
	.globl	gSpotlightAffineAnimCmds2
	.align	2, 0
	.type	 gSpotlightAffineAnimCmds2,object
gSpotlightAffineAnimCmds2:
	.short	0x140
	.short	0x180
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x10
	.short	0x0
	.byte	0x0
	.byte	0x13
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSpotlightAffineAnimCmds2,24
	.globl	gSpotlightAffineAnimTable
	.align	2, 0
	.type	 gSpotlightAffineAnimTable,object
gSpotlightAffineAnimTable:
	.word	gSpotlightAffineAnimCmds1
	.word	gSpotlightAffineAnimCmds2
	.size	 gSpotlightAffineAnimTable,8
	.globl	gSpotlightSpriteTemplate
	.align	2, 0
	.type	 gSpotlightSpriteTemplate,object
	.size	 gSpotlightSpriteTemplate,24
gSpotlightSpriteTemplate:
	.short	0x27f3
	.short	0x27f3
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gSpotlightAffineAnimTable
	.word	AnimSpotlight
	.globl	gClappingHandSpriteTemplate
	.align	2, 0
	.type	 gClappingHandSpriteTemplate,object
	.size	 gClappingHandSpriteTemplate,24
gClappingHandSpriteTemplate:
	.short	0x2807
	.short	0x2807
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimClappingHand
	.globl	gClappingHand2SpriteTemplate
	.align	2, 0
	.type	 gClappingHand2SpriteTemplate,object
	.size	 gClappingHand2SpriteTemplate,24
gClappingHand2SpriteTemplate:
	.short	0x2807
	.short	0x2807
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimClappingHand2
	.globl	gRapidSpinAnimCmds
	.align	2, 0
	.type	 gRapidSpinAnimCmds,object
gRapidSpinAnimCmds:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x8
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gRapidSpinAnimCmds,16
	.globl	gRapidSpinAnimTable
	.align	2, 0
	.type	 gRapidSpinAnimTable,object
gRapidSpinAnimTable:
	.word	gRapidSpinAnimCmds
	.size	 gRapidSpinAnimTable,4
	.globl	gRapidSpinSpriteTemplate
	.align	2, 0
	.type	 gRapidSpinSpriteTemplate,object
	.size	 gRapidSpinSpriteTemplate,24
gRapidSpinSpriteTemplate:
	.short	0x27f5
	.short	0x27f5
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	gRapidSpinAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRapidSpin
	.globl	gUnknown_085CE2A0
	.align	2, 0
	.type	 gUnknown_085CE2A0,object
gUnknown_085CE2A0:
	.short	-0xc
	.short	0x8
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x14
	.short	-0x14
	.byte	0x0
	.byte	0x4
	.space	2
	.short	-0x8
	.short	0xc
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085CE2A0,32
	.globl	gTriAttackTriangleAnimCmds
	.align	2, 0
	.type	 gTriAttackTriangleAnimCmds,object
gTriAttackTriangleAnimCmds:
	.short	0x0
	.byte	0x8
	.space	1
	.short	-0x1
	.space	2
	.size	 gTriAttackTriangleAnimCmds,8
	.globl	gTriAttackTriangleAnimTable
	.align	2, 0
	.type	 gTriAttackTriangleAnimTable,object
gTriAttackTriangleAnimTable:
	.word	gTriAttackTriangleAnimCmds
	.size	 gTriAttackTriangleAnimTable,4
	.globl	gTriAttackTriangleAffineAnimCmds
	.align	2, 0
	.type	 gTriAttackTriangleAffineAnimCmds,object
gTriAttackTriangleAffineAnimCmds:
	.short	0x0
	.short	0x0
	.byte	0x5
	.byte	0x28
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xa
	.byte	0xa
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf
	.byte	0xa
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x14
	.byte	0x28
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gTriAttackTriangleAffineAnimCmds,40
	.globl	gTriAttackTriangleAffineAnimTable
	.align	2, 0
	.type	 gTriAttackTriangleAffineAnimTable,object
gTriAttackTriangleAffineAnimTable:
	.word	gTriAttackTriangleAffineAnimCmds
	.size	 gTriAttackTriangleAffineAnimTable,4
	.globl	gTriAttackTriangleSpriteTemplate
	.align	2, 0
	.type	 gTriAttackTriangleSpriteTemplate,object
	.size	 gTriAttackTriangleSpriteTemplate,24
gTriAttackTriangleSpriteTemplate:
	.short	0x27f6
	.short	0x27f6
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gTriAttackTriangleAnimTable
	.word	0x0
	.word	gTriAttackTriangleAffineAnimTable
	.word	AnimTriAttackTriangle
	.globl	gEclipsingOrbAnimCmds
	.align	2, 0
	.type	 gEclipsingOrbAnimCmds,object
gEclipsingOrbAnimCmds:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x43
	.space	1
	.short	0x10
	.byte	0x43
	.space	1
	.short	0x0
	.byte	0x43
	.space	1
	.short	-0x3
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gEclipsingOrbAnimCmds,36
	.globl	gEclipsingOrbAnimTable
	.align	2, 0
	.type	 gEclipsingOrbAnimTable,object
gEclipsingOrbAnimTable:
	.word	gEclipsingOrbAnimCmds
	.size	 gEclipsingOrbAnimTable,4
	.globl	gEclipsingOrbSpriteTemplate
	.align	2, 0
	.type	 gEclipsingOrbSpriteTemplate,object
	.size	 gEclipsingOrbSpriteTemplate,24
gEclipsingOrbSpriteTemplate:
	.short	0x27fa
	.short	0x27fa
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gEclipsingOrbAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpriteOnMonPos
	.globl	DefenseCurlDeformMonAffineAnimCmds
	.align	2, 0
	.type	 DefenseCurlDeformMonAffineAnimCmds,object
DefenseCurlDeformMonAffineAnimCmds:
	.short	-0xc
	.short	0x14
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0xc
	.short	-0x14
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	0x7fff
	.space	6
	.size	 DefenseCurlDeformMonAffineAnimCmds,32
	.globl	gBatonPassPokeballSpriteTemplate
	.align	2, 0
	.type	 gBatonPassPokeballSpriteTemplate,object
	.size	 gBatonPassPokeballSpriteTemplate,24
gBatonPassPokeballSpriteTemplate:
	.short	0x27f2
	.short	0x27f2
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBatonPassPokeball
	.globl	gWishStarSpriteTemplate
	.align	2, 0
	.type	 gWishStarSpriteTemplate,object
	.size	 gWishStarSpriteTemplate,24
gWishStarSpriteTemplate:
	.short	0x27f9
	.short	0x27f9
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWishStar
	.globl	gMiniTwinklingStarSpriteTemplate
	.align	2, 0
	.type	 gMiniTwinklingStarSpriteTemplate,object
	.size	 gMiniTwinklingStarSpriteTemplate,24
gMiniTwinklingStarSpriteTemplate:
	.short	0x27f9
	.short	0x27f9
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMiniTwinklingStar
	.globl	gStockpileDeformMonAffineAnimCmds
	.align	2, 0
	.type	 gStockpileDeformMonAffineAnimCmds,object
gStockpileDeformMonAffineAnimCmds:
	.short	0x8
	.short	-0x8
	.byte	0x0
	.byte	0xc
	.space	2
	.short	-0x10
	.short	0x10
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x8
	.short	-0x8
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x7ffd
	.short	0x1
	.space	4
	.short	0x7fff
	.space	6
	.size	 gStockpileDeformMonAffineAnimCmds,40
	.globl	gSpitUpDeformMonAffineAnimCmds
	.align	2, 0
	.type	 gSpitUpDeformMonAffineAnimCmds,object
gSpitUpDeformMonAffineAnimCmds:
	.short	0x0
	.short	0x6
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x0
	.short	-0x12
	.byte	0x0
	.byte	0x6
	.space	2
	.short	-0x12
	.short	-0x12
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0xd
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSpitUpDeformMonAffineAnimCmds,56
	.globl	gSwallowBlueOrbSpriteTemplate
	.align	2, 0
	.type	 gSwallowBlueOrbSpriteTemplate,object
	.size	 gSwallowBlueOrbSpriteTemplate,24
gSwallowBlueOrbSpriteTemplate:
	.short	0x27fc
	.short	0x27fc
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSwallowBlueOrb
	.globl	gSwallowDeformMonAffineAnimCmds
	.align	2, 0
	.type	 gSwallowDeformMonAffineAnimCmds,object
gSwallowDeformMonAffineAnimCmds:
	.short	0x0
	.short	0x6
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x7
	.short	-0x1e
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x14
	.space	2
	.short	-0x2
	.short	0x3
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSwallowDeformMonAffineAnimCmds,48
	.globl	gMorningSunLightBeamCoordsTable
	.type	 gMorningSunLightBeamCoordsTable,object
gMorningSunLightBeamCoordsTable:
	.byte	-0x18
	.byte	0x18
	.byte	-0x4
	.byte	0x0
	.size	 gMorningSunLightBeamCoordsTable,4
	.globl	gGreenStarAnimCmds1
	.align	2, 0
	.type	 gGreenStarAnimCmds1,object
gGreenStarAnimCmds1:
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x4
	.byte	0x6
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gGreenStarAnimCmds1,12
	.globl	gGreenStarAnimCmds2
	.align	2, 0
	.type	 gGreenStarAnimCmds2,object
gGreenStarAnimCmds2:
	.short	0x8
	.byte	0x6
	.space	1
	.short	-0x1
	.space	2
	.size	 gGreenStarAnimCmds2,8
	.globl	gGreenStarAnimCmds3
	.align	2, 0
	.type	 gGreenStarAnimCmds3,object
gGreenStarAnimCmds3:
	.short	0xc
	.byte	0x6
	.space	1
	.short	-0x1
	.space	2
	.size	 gGreenStarAnimCmds3,8
	.globl	gGreenStarAnimTable
	.align	2, 0
	.type	 gGreenStarAnimTable,object
gGreenStarAnimTable:
	.word	gGreenStarAnimCmds1
	.word	gGreenStarAnimCmds2
	.word	gGreenStarAnimCmds3
	.size	 gGreenStarAnimTable,12
	.globl	gGreenStarSpriteTemplate
	.align	2, 0
	.type	 gGreenStarSpriteTemplate,object
	.size	 gGreenStarSpriteTemplate,24
gGreenStarSpriteTemplate:
	.short	0x2801
	.short	0x2801
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gGreenStarAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGreenStar
	.globl	gDoomDesireLightBeamCoordTable
	.type	 gDoomDesireLightBeamCoordTable,object
gDoomDesireLightBeamCoordTable:
	.byte	0x78
	.byte	0x50
	.byte	0x28
	.byte	0x0
	.size	 gDoomDesireLightBeamCoordTable,4
	.globl	gDoomDesireLightBeamDelayTable
	.type	 gDoomDesireLightBeamDelayTable,object
gDoomDesireLightBeamDelayTable:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x32
	.size	 gDoomDesireLightBeamDelayTable,5
	.globl	gStrongFrustrationAffineAnimCmds
	.align	2, 0
	.type	 gStrongFrustrationAffineAnimCmds,object
gStrongFrustrationAffineAnimCmds:
	.short	0x0
	.short	-0xf
	.byte	0x0
	.byte	0x7
	.space	2
	.short	0x0
	.short	0xf
	.byte	0x0
	.byte	0x7
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	0x7fff
	.space	6
	.size	 gStrongFrustrationAffineAnimCmds,32
	.globl	gWeakFrustrationAngerMarkSpriteTemplate
	.align	2, 0
	.type	 gWeakFrustrationAngerMarkSpriteTemplate,object
	.size	 gWeakFrustrationAngerMarkSpriteTemplate,24
gWeakFrustrationAngerMarkSpriteTemplate:
	.short	0x2767
	.short	0x2767
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWeakFrustrationAngerMark
	.globl	gSweetScentPetalAnimCmds1
	.align	2, 0
	.type	 gSweetScentPetalAnimCmds1,object
gSweetScentPetalAnimCmds1:
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x1
	.byte	0x8
	.space	1
	.short	0x2
	.byte	0x8
	.space	1
	.short	0x3
	.byte	0x8
	.space	1
	.short	0x3
	.byte	0x88
	.space	1
	.short	0x2
	.byte	0x88
	.space	1
	.short	0x0
	.byte	0x88
	.space	1
	.short	0x1
	.byte	0x88
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gSweetScentPetalAnimCmds1,36
	.globl	gSweetScentPetalAnimCmds2
	.align	2, 0
	.type	 gSweetScentPetalAnimCmds2,object
gSweetScentPetalAnimCmds2:
	.short	0x0
	.byte	0x48
	.space	1
	.short	0x1
	.byte	0x48
	.space	1
	.short	0x2
	.byte	0x48
	.space	1
	.short	0x3
	.byte	0x48
	.space	1
	.short	0x3
	.byte	0xc8
	.space	1
	.short	0x2
	.byte	0xc8
	.space	1
	.short	0x0
	.byte	0xc8
	.space	1
	.short	0x1
	.byte	0xc8
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gSweetScentPetalAnimCmds2,36
	.globl	gSweetScentPetalAnimCmds3
	.align	2, 0
	.type	 gSweetScentPetalAnimCmds3,object
gSweetScentPetalAnimCmds3:
	.short	0x0
	.byte	0x8
	.space	1
	.short	-0x1
	.space	2
	.size	 gSweetScentPetalAnimCmds3,8
	.globl	gSweetScentPetalAnimCmdTable
	.align	2, 0
	.type	 gSweetScentPetalAnimCmdTable,object
gSweetScentPetalAnimCmdTable:
	.word	gSweetScentPetalAnimCmds1
	.word	gSweetScentPetalAnimCmds2
	.word	gSweetScentPetalAnimCmds3
	.size	 gSweetScentPetalAnimCmdTable,12
	.globl	gSweetScentPetalSpriteTemplate
	.align	2, 0
	.type	 gSweetScentPetalSpriteTemplate,object
	.size	 gSweetScentPetalSpriteTemplate,24
gSweetScentPetalSpriteTemplate:
	.short	0x27fe
	.short	0x27fe
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gSweetScentPetalAnimCmdTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSweetScentPetal
	.globl	gUnknown_085CE55C
	.align	1, 0
	.type	 gUnknown_085CE55C,object
gUnknown_085CE55C:
	.short	0x180c
	.short	0x1610
	.short	0x1313
	.short	0x1015
	.short	0xc17
	.short	0x716
	.short	0x413
	.short	0x110
	.short	0xb
	.short	0x106
	.short	0x404
	.short	0x701
	.short	0xc00
	.short	0x1102
	.short	0x1304
	.short	0x1608
	.size	 gUnknown_085CE55C,32
	.globl	gPainSplitAnimCmds
	.align	2, 0
	.type	 gPainSplitAnimCmds,object
gPainSplitAnimCmds:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x9
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gPainSplitAnimCmds,16
	.globl	gPainSplitAnimCmdTable
	.align	2, 0
	.type	 gPainSplitAnimCmdTable,object
gPainSplitAnimCmdTable:
	.word	gPainSplitAnimCmds
	.size	 gPainSplitAnimCmdTable,4
	.globl	gPainSplitProjectileSpriteTemplate
	.align	2, 0
	.type	 gPainSplitProjectileSpriteTemplate,object
	.size	 gPainSplitProjectileSpriteTemplate,24
gPainSplitProjectileSpriteTemplate:
	.short	0x27ff
	.short	0x27ff
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gPainSplitAnimCmdTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPainSplitProjectile
	.globl	gFlatterConfettiSpriteTemplate
	.align	2, 0
	.type	 gFlatterConfettiSpriteTemplate,object
	.size	 gFlatterConfettiSpriteTemplate,24
gFlatterConfettiSpriteTemplate:
	.short	0x2800
	.short	0x2800
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFlatterConfetti
	.globl	gFlatterSpotlightSpriteTemplate
	.align	2, 0
	.type	 gFlatterSpotlightSpriteTemplate,object
	.size	 gFlatterSpotlightSpriteTemplate,24
gFlatterSpotlightSpriteTemplate:
	.short	0x27f3
	.short	0x27f3
	.word	gOamData_AffineDouble_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gSpotlightAffineAnimTable
	.word	AnimFlatterSpotlight
	.globl	gReversalOrbSpriteTemplate
	.align	2, 0
	.type	 gReversalOrbSpriteTemplate,object
	.size	 gReversalOrbSpriteTemplate,24
gReversalOrbSpriteTemplate:
	.short	0x27fc
	.short	0x27fc
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimReversalOrb
	.globl	gDeepInhaleAffineAnimCmds
	.align	2, 0
	.type	 gDeepInhaleAffineAnimCmds,object
gDeepInhaleAffineAnimCmds:
	.short	0x10
	.short	0x0
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x0
	.short	-0x3
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x4
	.short	0x0
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x18
	.space	2
	.short	-0x5
	.short	0x3
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7fff
	.space	6
	.size	 gDeepInhaleAffineAnimCmds,48
	.globl	gYawnCloudAffineAnimCmds1
	.align	2, 0
	.type	 gYawnCloudAffineAnimCmds1,object
gYawnCloudAffineAnimCmds1:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gYawnCloudAffineAnimCmds1,32
	.globl	gYawnCloudAffineAnimCmds2
	.align	2, 0
	.type	 gYawnCloudAffineAnimCmds2,object
gYawnCloudAffineAnimCmds2:
	.short	0xc0
	.short	0xc0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gYawnCloudAffineAnimCmds2,32
	.globl	gYawnCloudAffineAnimCmds3
	.align	2, 0
	.type	 gYawnCloudAffineAnimCmds3,object
gYawnCloudAffineAnimCmds3:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gYawnCloudAffineAnimCmds3,32
	.globl	gYawnCloudAffineAnimTable
	.align	2, 0
	.type	 gYawnCloudAffineAnimTable,object
gYawnCloudAffineAnimTable:
	.word	gYawnCloudAffineAnimCmds1
	.word	gYawnCloudAffineAnimCmds2
	.word	gYawnCloudAffineAnimCmds3
	.size	 gYawnCloudAffineAnimTable,12
	.globl	gYawnCloudSpriteTemplate
	.align	2, 0
	.type	 gYawnCloudSpriteTemplate,object
	.size	 gYawnCloudSpriteTemplate,24
gYawnCloudSpriteTemplate:
	.short	0x2802
	.short	0x2802
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gYawnCloudAffineAnimTable
	.word	AnimYawnCloud
	.globl	gSmokeBallEscapeCloudAffineAnimCmds1
	.align	2, 0
	.type	 gSmokeBallEscapeCloudAffineAnimCmds1,object
gSmokeBallEscapeCloudAffineAnimCmds1:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x4
	.short	-0x6
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x4
	.short	0x6
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gSmokeBallEscapeCloudAffineAnimCmds1,32
	.globl	gSmokeBallEscapeCloudAffineAnimCmds2
	.align	2, 0
	.type	 gSmokeBallEscapeCloudAffineAnimCmds2,object
gSmokeBallEscapeCloudAffineAnimCmds2:
	.short	0xc0
	.short	0xc0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x6
	.byte	0x0
	.byte	0x10
	.space	2
	.short	-0x4
	.short	-0x6
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gSmokeBallEscapeCloudAffineAnimCmds2,32
	.globl	gSmokeBallEscapeCloudAffineAnimCmds3
	.align	2, 0
	.type	 gSmokeBallEscapeCloudAffineAnimCmds3,object
gSmokeBallEscapeCloudAffineAnimCmds3:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x6
	.byte	0x0
	.byte	0x10
	.space	2
	.short	-0x4
	.short	-0x6
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gSmokeBallEscapeCloudAffineAnimCmds3,32
	.globl	gSmokeBallEscapeCloudAffineAnimCmds4
	.align	2, 0
	.type	 gSmokeBallEscapeCloudAffineAnimCmds4,object
gSmokeBallEscapeCloudAffineAnimCmds4:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0xa
	.byte	0x0
	.byte	0x1e
	.space	2
	.short	-0x8
	.short	-0xa
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gSmokeBallEscapeCloudAffineAnimCmds4,32
	.globl	gSmokeBallEscapeCloudAffineAnimTable
	.align	2, 0
	.type	 gSmokeBallEscapeCloudAffineAnimTable,object
gSmokeBallEscapeCloudAffineAnimTable:
	.word	gSmokeBallEscapeCloudAffineAnimCmds1
	.word	gSmokeBallEscapeCloudAffineAnimCmds2
	.word	gSmokeBallEscapeCloudAffineAnimCmds3
	.word	gSmokeBallEscapeCloudAffineAnimCmds4
	.size	 gSmokeBallEscapeCloudAffineAnimTable,16
	.globl	gSmokeBallEscapeCloudSpriteTemplate
	.align	2, 0
	.type	 gSmokeBallEscapeCloudSpriteTemplate,object
	.size	 gSmokeBallEscapeCloudSpriteTemplate,24
gSmokeBallEscapeCloudSpriteTemplate:
	.short	0x2802
	.short	0x2802
	.word	gOamData_AffineDouble_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gSmokeBallEscapeCloudAffineAnimTable
	.word	AnimSmokeBallEscapeCloud
	.globl	gFacadeSquishAffineAnimCmds
	.align	2, 0
	.type	 gFacadeSquishAffineAnimCmds,object
gFacadeSquishAffineAnimCmds:
	.short	-0x10
	.short	0x10
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x10
	.short	-0x10
	.byte	0x0
	.byte	0xc
	.space	2
	.short	-0x10
	.short	0x10
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7fff
	.space	6
	.size	 gFacadeSquishAffineAnimCmds,32
	.globl	gFacadeSweatDropSpriteTemplate
	.align	2, 0
	.type	 gFacadeSweatDropSpriteTemplate,object
	.size	 gFacadeSweatDropSpriteTemplate,24
gFacadeSweatDropSpriteTemplate:
	.short	0x2803
	.short	0x2803
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFacadeSweatDrop
	.globl	gFacadeBlendColors
	.align	1, 0
	.type	 gFacadeBlendColors,object
gFacadeBlendColors:
	.short	0x73c
	.short	0x16bc
	.short	0x225b
	.short	0x2ddb
	.short	0x3d5a
	.short	0x48fa
	.short	0x5479
	.short	0x6419
	.short	0x5c19
	.short	0x5019
	.short	0x4019
	.short	0x3419
	.short	0x281a
	.short	0x181a
	.short	0xc1a
	.short	0x1b
	.short	0x3b
	.short	0xbb
	.short	0x13b
	.short	0x19b
	.short	0x21c
	.short	0x27c
	.short	0x2fc
	.short	0x37d
	.size	 gFacadeBlendColors,48
	.globl	gRoarNoiseLineAnimCmds1
	.align	2, 0
	.type	 gRoarNoiseLineAnimCmds1,object
gRoarNoiseLineAnimCmds1:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gRoarNoiseLineAnimCmds1,12
	.globl	gRoarNoiseLineAnimCmds2
	.align	2, 0
	.type	 gRoarNoiseLineAnimCmds2,object
gRoarNoiseLineAnimCmds2:
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gRoarNoiseLineAnimCmds2,12
	.globl	gRoarNoiseLineAnimTable
	.align	2, 0
	.type	 gRoarNoiseLineAnimTable,object
gRoarNoiseLineAnimTable:
	.word	gRoarNoiseLineAnimCmds1
	.word	gRoarNoiseLineAnimCmds2
	.size	 gRoarNoiseLineAnimTable,8
	.globl	gRoarNoiseLineSpriteTemplate
	.align	2, 0
	.type	 gRoarNoiseLineSpriteTemplate,object
	.size	 gRoarNoiseLineSpriteTemplate,24
gRoarNoiseLineSpriteTemplate:
	.short	0x2745
	.short	0x2745
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gRoarNoiseLineAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRoarNoiseLine
	.globl	gGlareEyeDotSpriteTemplate
	.align	2, 0
	.type	 gGlareEyeDotSpriteTemplate,object
	.size	 gGlareEyeDotSpriteTemplate,24
gGlareEyeDotSpriteTemplate:
	.short	0x2808
	.short	0x2808
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGlareEyeDot
	.globl	gAssistPawprintSpriteTemplate
	.align	2, 0
	.type	 gAssistPawprintSpriteTemplate,object
	.size	 gAssistPawprintSpriteTemplate,24
gAssistPawprintSpriteTemplate:
	.short	0x280c
	.short	0x280c
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimAssistPawprint
	.globl	gBarrageBallAffineAnimCmds1
	.align	2, 0
	.type	 gBarrageBallAffineAnimCmds1,object
gBarrageBallAffineAnimCmds1:
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0x18
	.space	2
	.short	0x7fff
	.space	6
	.size	 gBarrageBallAffineAnimCmds1,16
	.globl	gBarrageBallAffineAnimCmds2
	.align	2, 0
	.type	 gBarrageBallAffineAnimCmds2,object
gBarrageBallAffineAnimCmds2:
	.short	0x100
	.short	0x100
	.byte	0xc0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x18
	.space	2
	.short	0x7fff
	.space	6
	.size	 gBarrageBallAffineAnimCmds2,24
	.globl	gBarrageBallAffineAnimTable
	.align	2, 0
	.type	 gBarrageBallAffineAnimTable,object
gBarrageBallAffineAnimTable:
	.word	gBarrageBallAffineAnimCmds1
	.word	gBarrageBallAffineAnimCmds2
	.size	 gBarrageBallAffineAnimTable,8
	.globl	gBarrageBallSpriteTemplate
	.align	2, 0
	.type	 gBarrageBallSpriteTemplate,object
	.size	 gBarrageBallSpriteTemplate,24
gBarrageBallSpriteTemplate:
	.short	0x280e
	.short	0x280e
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gBarrageBallAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gSmellingSaltsHandSpriteTemplate
	.align	2, 0
	.type	 gSmellingSaltsHandSpriteTemplate,object
	.size	 gSmellingSaltsHandSpriteTemplate,24
gSmellingSaltsHandSpriteTemplate:
	.short	0x2807
	.short	0x2807
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSmellingSaltsHand
	.globl	gSmellingSaltsSquishAffineAnimCmds
	.align	2, 0
	.type	 gSmellingSaltsSquishAffineAnimCmds,object
gSmellingSaltsSquishAffineAnimCmds:
	.short	0x0
	.short	-0x10
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	0x10
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSmellingSaltsSquishAffineAnimCmds,24
	.globl	gSmellingSaltExclamationSpriteTemplate
	.align	2, 0
	.type	 gSmellingSaltExclamationSpriteTemplate,object
	.size	 gSmellingSaltExclamationSpriteTemplate,24
gSmellingSaltExclamationSpriteTemplate:
	.short	0x280f
	.short	0x280f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSmellingSaltExclamation
	.globl	gHelpingHandClapSpriteTemplate
	.align	2, 0
	.type	 gHelpingHandClapSpriteTemplate,object
	.size	 gHelpingHandClapSpriteTemplate,24
gHelpingHandClapSpriteTemplate:
	.short	0x2807
	.short	0x2807
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimHelpingHandClap
	.globl	gForesightMagnifyingGlassSpriteTemplate
	.align	2, 0
	.type	 gForesightMagnifyingGlassSpriteTemplate,object
	.size	 gForesightMagnifyingGlassSpriteTemplate,24
gForesightMagnifyingGlassSpriteTemplate:
	.short	0x2812
	.short	0x2812
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimForesightMagnifyingGlass
	.globl	gMeteorMashStarSpriteTemplate
	.align	2, 0
	.type	 gMeteorMashStarSpriteTemplate,object
	.size	 gMeteorMashStarSpriteTemplate,24
gMeteorMashStarSpriteTemplate:
	.short	0x27f9
	.short	0x27f9
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMeteorMashStar
	.globl	gUnknown_085CE8F4
	.align	2, 0
	.type	 gUnknown_085CE8F4,object
	.size	 gUnknown_085CE8F4,24
gUnknown_085CE8F4:
	.short	0x27f9
	.short	0x27f9
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimParticleBurst
	.globl	gBlockXSpriteTemplate
	.align	2, 0
	.type	 gBlockXSpriteTemplate,object
	.size	 gBlockXSpriteTemplate,24
gBlockXSpriteTemplate:
	.short	0x280a
	.short	0x280a
	.word	gOamData_AffineOff_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBlockX
	.globl	gUnknown_085CE924
	.align	2, 0
	.type	 gUnknown_085CE924,object
	.size	 gUnknown_085CE924,24
gUnknown_085CE924:
	.short	0x27f0
	.short	0x27f0
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_815FE80
	.globl	gKnockOffStrikeAnimCmds
	.align	2, 0
	.type	 gKnockOffStrikeAnimCmds,object
gKnockOffStrikeAnimCmds:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gKnockOffStrikeAnimCmds,12
	.globl	gKnockOffStrikeAnimTable
	.align	2, 0
	.type	 gKnockOffStrikeAnimTable,object
gKnockOffStrikeAnimTable:
	.word	gKnockOffStrikeAnimCmds
	.size	 gKnockOffStrikeAnimTable,4
	.globl	gKnockOffStrikeAffineanimCmds1
	.align	2, 0
	.type	 gKnockOffStrikeAffineanimCmds1,object
gKnockOffStrikeAffineanimCmds1:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gKnockOffStrikeAffineanimCmds1,24
	.globl	gKnockOffStrikeAffineanimCmds2
	.align	2, 0
	.type	 gKnockOffStrikeAffineanimCmds2,object
gKnockOffStrikeAffineanimCmds2:
	.short	-0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gKnockOffStrikeAffineanimCmds2,24
	.globl	gKnockOffStrikeAffineAnimTable
	.align	2, 0
	.type	 gKnockOffStrikeAffineAnimTable,object
gKnockOffStrikeAffineAnimTable:
	.word	gKnockOffStrikeAffineanimCmds1
	.word	gKnockOffStrikeAffineanimCmds2
	.size	 gKnockOffStrikeAffineAnimTable,8
	.globl	gKnockOffStrikeSpriteTemplate
	.align	2, 0
	.type	 gKnockOffStrikeSpriteTemplate,object
	.size	 gKnockOffStrikeSpriteTemplate,24
gKnockOffStrikeSpriteTemplate:
	.short	0x2825
	.short	0x2825
	.word	gOamData_AffineNormal_ObjNormal_64x64
	.word	gKnockOffStrikeAnimTable
	.word	0x0
	.word	gKnockOffStrikeAffineAnimTable
	.word	AnimKnockOffStrike
	.globl	gRecycleSpriteAffineAnimCmds
	.align	2, 0
	.type	 gRecycleSpriteAffineAnimCmds,object
gRecycleSpriteAffineAnimCmds:
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0x40
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gRecycleSpriteAffineAnimCmds,16
	.globl	gRecycleSpriteAffineAnimTable
	.align	2, 0
	.type	 gRecycleSpriteAffineAnimTable,object
gRecycleSpriteAffineAnimTable:
	.word	gRecycleSpriteAffineAnimCmds
	.size	 gRecycleSpriteAffineAnimTable,4
	.globl	gRecycleSpriteTemplate
	.align	2, 0
	.type	 gRecycleSpriteTemplate,object
	.size	 gRecycleSpriteTemplate,24
gRecycleSpriteTemplate:
	.short	0x2826
	.short	0x2826
	.word	gOamData_AffineNormal_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gRecycleSpriteAffineAnimTable
	.word	AnimRecycle
	.globl	gSlackOffSquishAffineAnimCmds
	.align	2, 0
	.type	 gSlackOffSquishAffineAnimCmds,object
gSlackOffSquishAffineAnimCmds:
	.short	0x0
	.short	0x10
	.byte	0x0
	.byte	0x4
	.space	2
	.short	-0x2
	.short	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x0
	.short	0x4
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x18
	.space	2
	.short	0x1
	.short	-0x5
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSlackOffSquishAffineAnimCmds,48
	.globl	gMegaStoneSpriteTemplate
	.align	2, 0
	.type	 gMegaStoneSpriteTemplate,object
	.size	 gMegaStoneSpriteTemplate,24
gMegaStoneSpriteTemplate:
	.short	0x2837
	.short	0x2837
	.word	gOamData_AffineDouble_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gAffineAnims_LusterPurgeCircle
	.word	AnimSpriteOnMonPos
	.globl	gMegaParticlesSpriteTemplate
	.align	2, 0
	.type	 gMegaParticlesSpriteTemplate,object
	.size	 gMegaParticlesSpriteTemplate,24
gMegaParticlesSpriteTemplate:
	.short	0x2839
	.short	0x2839
	.word	gOamData_AffineNormal_ObjBlend_16x16
	.word	gPowerAbsorptionOrbAnimTable
	.word	0x0
	.word	gPowerAbsorptionOrbAffineAnimTable
	.word	AnimPowerAbsorptionOrb
	.globl	gMegaSymbolSpriteTemplate
	.align	2, 0
	.type	 gMegaSymbolSpriteTemplate,object
	.size	 gMegaSymbolSpriteTemplate,24
gMegaSymbolSpriteTemplate:
	.short	0x2838
	.short	0x2838
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGhostStatusSprite
.text
	.align	2, 0
	.globl	AnimBlackSmoke
	.type	 AnimBlackSmoke,function
	.thumb_func
AnimBlackSmoke:
	push	{lr}
	add	r2, r0, #0
	ldr	r1, .L6
	ldrh	r0, [r1]
	ldrh	r3, [r2, #0x20]
	add	r0, r0, r3
	strh	r0, [r2, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r3, [r2, #0x22]
	add	r0, r0, r3
	strh	r0, [r2, #0x22]
	mov	r3, #0x6
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L3	@cond_branch
	ldrh	r0, [r1, #0x4]
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	gBattleAnimArgs
.L3:
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
.L5:
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r2, #0x30]
	ldr	r0, .L8
	str	r0, [r2, #0x1c]
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	AnimBlackSmoke_Step
.Lfe1:
	.size	 AnimBlackSmoke,.Lfe1-AnimBlackSmoke
	.align	2, 0
	.type	 AnimBlackSmoke_Step,function
	.thumb_func
AnimBlackSmoke_Step:
	push	{lr}
	add	r3, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	ble	.L11	@cond_branch
	ldrh	r1, [r3, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r3, #0x24]
	ldrh	r0, [r3, #0x2e]
	add	r1, r1, r0
	strh	r1, [r3, #0x32]
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	b	.L12
.L11:
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L12:
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 AnimBlackSmoke_Step,.Lfe2-AnimBlackSmoke_Step
	.align	2, 0
	.globl	AnimTask_SmokescreenImpact
	.type	 AnimTask_SmokescreenImpact,function
	.thumb_func
AnimTask_SmokescreenImpact:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r6, .L14
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x8
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	add	r4, r4, r0
	asr	r4, r4, #0x10
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x8
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	add	r1, r1, r0
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	SmokescreenImpact
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gBattleAnimTarget
.Lfe3:
	.size	 AnimTask_SmokescreenImpact,.Lfe3-AnimTask_SmokescreenImpact
	.align	2, 0
	.type	 AnimWhiteHalo,function
	.thumb_func
AnimWhiteHalo:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x5a
	strh	r0, [r4, #0x2e]
	ldr	r0, .L17
	str	r0, [r4, #0x1c]
	mov	r0, #0x7
	strh	r0, [r4, #0x30]
	ldr	r1, .L17+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	WaitAnimForDuration
	.word	AnimWhiteHalo_Step1
.Lfe4:
	.size	 AnimWhiteHalo,.Lfe4-AnimWhiteHalo
	.align	2, 0
	.type	 AnimWhiteHalo_Step1,function
	.thumb_func
AnimWhiteHalo_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L20	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L21
	str	r0, [r4, #0x1c]
.L20:
	pop	{r4}
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	AnimWhiteHalo_Step2
.Lfe5:
	.size	 AnimWhiteHalo_Step1,.Lfe5-AnimWhiteHalo_Step1
	.align	2, 0
	.type	 AnimWhiteHalo_Step2,function
	.thumb_func
AnimWhiteHalo_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 AnimWhiteHalo_Step2,.Lfe6-AnimWhiteHalo_Step2
	.align	2, 0
	.globl	AnimTealAlert
	.type	 AnimTealAlert,function
	.thumb_func
AnimTealAlert:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	ldr	r4, .L26
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r0, #0
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, r7
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r5, #0x22]
	sub	r1, r1, r6
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2Neg
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x17
	add	r0, r0, r1
	lsr	r4, r0, #0x10
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L25	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	add	r0, r4, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L25:
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r4, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	ldr	r0, .L26+0x4
	ldrh	r0, [r0, #0x4]
	strh	r0, [r5, #0x2e]
	strh	r7, [r5, #0x32]
	strh	r6, [r5, #0x36]
	ldr	r0, .L26+0x8
	str	r0, [r5, #0x1c]
	ldr	r1, .L26+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe7:
	.size	 AnimTealAlert,.Lfe7-AnimTealAlert
	.align	2, 0
	.type	 AnimMeanLookEye,function
	.thumb_func
AnimMeanLookEye:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x4
	strh	r0, [r4, #0x2e]
	ldr	r0, .L29
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	AnimMeanLookEye_Step1
.Lfe8:
	.size	 AnimMeanLookEye,.Lfe8-AnimMeanLookEye
	.align	2, 0
	.type	 AnimMeanLookEye_Step1,function
	.thumb_func
AnimMeanLookEye_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L32	@cond_branch
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	b	.L37
.L32:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
.L37:
	strh	r0, [r4, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xf
	beq	.L35	@cond_branch
	cmp	r0, #0x4
	bne	.L34	@cond_branch
.L35:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x30]
.L34:
	ldrh	r0, [r4, #0x32]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x46
	ble	.L36	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	sub	r2, r2, #0x12
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L38
	str	r0, [r4, #0x1c]
.L36:
	pop	{r4}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	AnimMeanLookEye_Step2
.Lfe9:
	.size	 AnimMeanLookEye_Step1,.Lfe9-AnimMeanLookEye_Step1
	.align	2, 0
	.type	 AnimMeanLookEye_Step2,function
	.thumb_func
AnimMeanLookEye_Step2:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x32]
	add	r1, r0, #0x1
	strh	r1, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	ble	.L41	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	sub	r2, r2, #0x12
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r3, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L41	@cond_branch
	ldr	r0, .L43
	str	r0, [r3, #0x1c]
.L41:
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	AnimMeanLookEye_Step3
.Lfe10:
	.size	 AnimMeanLookEye_Step2,.Lfe10-AnimMeanLookEye_Step2
	.align	2, 0
	.type	 AnimMeanLookEye_Step3,function
	.thumb_func
AnimMeanLookEye_Step3:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x6
	bhi	.L54	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L59
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L60:
	.align	2, 0
.L59:
	.word	.L55
	.align	2, 0
	.align	2, 0
.L55:
	.word	.L48
	.word	.L48
	.word	.L50
	.word	.L50
	.word	.L52
	.word	.L52
	.word	.L54
.L48:
	mov	r1, #0x0
	mov	r0, #0x1
	strh	r0, [r4, #0x24]
	strh	r1, [r4, #0x26]
	b	.L46
.L50:
	ldr	r0, .L61
	strh	r0, [r4, #0x24]
	mov	r0, #0x0
	b	.L58
.L62:
	.align	2, 0
.L61:
	.word	0xffff
.L52:
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	mov	r0, #0x1
	b	.L58
.L54:
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	ldr	r0, .L63
.L58:
	strh	r0, [r4, #0x26]
.L46:
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	ble	.L56	@cond_branch
	strh	r2, [r4, #0x34]
.L56:
	ldrh	r0, [r4, #0x36]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	ble	.L57	@cond_branch
	mov	r0, #0x10
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L63+0x4
	str	r0, [r4, #0x1c]
.L57:
	pop	{r4}
	pop	{r0}
	bx	r0
.L64:
	.align	2, 0
.L63:
	.word	0xffff
	.word	AnimMeanLookEye_Step4
.Lfe11:
	.size	 AnimMeanLookEye_Step3,.Lfe11-AnimMeanLookEye_Step3
	.align	2, 0
	.type	 AnimMeanLookEye_Step4,function
	.thumb_func
AnimMeanLookEye_Step4:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r0, [r4, #0x30]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L66	@cond_branch
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
.L66:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L67	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L67:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L68	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L68:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 AnimMeanLookEye_Step4,.Lfe12-AnimMeanLookEye_Step4
	.align	2, 0
	.globl	AnimTask_SetPsychicBackground
	.type	 AnimTask_SetPsychicBackground,function
	.thumb_func
AnimTask_SetPsychicBackground:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L70
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L70+0x4
	str	r0, [r1]
	ldr	r1, .L70+0x8
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	bx	lr
.L71:
	.align	2, 0
.L70:
	.word	gTasks
	.word	SetPsychicBackground_Step
	.word	gAnimVisualTaskCount
.Lfe13:
	.size	 AnimTask_SetPsychicBackground,.Lfe13-AnimTask_SetPsychicBackground
	.align	2, 0
	.type	 SetPsychicBackground_Step,function
	.thumb_func
SetPsychicBackground_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	GetBattleBgPaletteNum
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r7, .L80
	lsl	r5, r4, #0x2
	add	r1, r5, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r7
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L73	@cond_branch
	ldr	r0, .L80+0x4
	lsl	r2, r6, #0x4
	add	r1, r2, #0
	add	r1, r1, #0xb
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r3, [r1]
	mov	r8, r3
	mov	r3, #0xa
	mov	r9, r7
	add	r7, r5, #0
	mov	ip, r0
	add	r5, r2, #0
	lsl	r0, r6, #0x5
	add	r0, r0, ip
	add	r2, r0, #0
	add	r2, r2, #0x14
.L77:
	ldrh	r0, [r2]
	strh	r0, [r1]
	sub	r2, r2, #0x2
	sub	r1, r1, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bgt	.L77	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, ip
	mov	r1, #0x0
	mov	r2, r8
	strh	r2, [r0]
	add	r0, r7, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	strh	r1, [r0, #0x12]
.L73:
	ldr	r0, .L80+0x8
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L80+0xc
	cmp	r1, r0
	bne	.L79	@cond_branch
	add	r0, r4, #0
	bl	DestroyTask
.L79:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	gTasks
	.word	gPlttBufferFaded
	.word	gBattleAnimArgs
	.word	0xffff
.Lfe14:
	.size	 SetPsychicBackground_Step,.Lfe14-SetPsychicBackground_Step
	.align	2, 0
	.globl	AnimTask_FadeScreenToWhite
	.type	 AnimTask_FadeScreenToWhite,function
	.thumb_func
AnimTask_FadeScreenToWhite:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L83
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L83+0x4
	str	r0, [r1]
	ldr	r1, .L83+0x8
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	bx	lr
.L84:
	.align	2, 0
.L83:
	.word	gTasks
	.word	FadeScreenToWhite_Step
	.word	gAnimVisualTaskCount
.Lfe15:
	.size	 AnimTask_FadeScreenToWhite,.Lfe15-AnimTask_FadeScreenToWhite
	.align	2, 0
	.type	 FadeScreenToWhite_Step,function
	.thumb_func
FadeScreenToWhite_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	GetBattleBgPaletteNum
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r5, .L98
	mov	r0, r8
	lsl	r3, r0, #0x2
	add	r1, r3, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L86	@cond_branch
	ldr	r0, .L98+0x4
	lsl	r2, r7, #0x4
	add	r1, r2, #0
	add	r1, r1, #0xb
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r6, [r1]
	mov	r4, #0xa
	mov	sl, r3
	mov	r9, r0
	add	r5, r2, #0
	ldr	r2, .L98+0x8
	mov	ip, r2
	lsl	r0, r7, #0x5
	add	r0, r0, r9
	add	r3, r0, #0
	add	r3, r3, #0x14
.L90:
	ldrh	r0, [r3]
	strh	r0, [r1]
	sub	r3, r3, #0x2
	sub	r1, r1, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bgt	.L90	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	strh	r6, [r0]
	add	r1, r5, #0
	add	r1, r1, #0xb
	lsl	r1, r1, #0x1
	add	r1, r1, ip
	ldrh	r6, [r1]
	mov	r4, #0xa
	lsl	r0, r7, #0x5
	add	r0, r0, ip
	add	r2, r0, #0
	add	r2, r2, #0x14
.L95:
	ldrh	r0, [r2]
	strh	r0, [r1]
	sub	r2, r2, #0x2
	sub	r1, r1, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bgt	.L95	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, ip
	mov	r1, #0x0
	strh	r6, [r0]
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r2, .L98
	add	r0, r0, r2
	strh	r1, [r0, #0x12]
.L86:
	ldr	r0, .L98+0xc
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L98+0x10
	cmp	r1, r0
	bne	.L97	@cond_branch
	mov	r0, r8
	bl	DestroyTask
.L97:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L99:
	.align	2, 0
.L98:
	.word	gTasks
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	gBattleAnimArgs
	.word	0xffff
.Lfe16:
	.size	 FadeScreenToWhite_Step,.Lfe16-FadeScreenToWhite_Step
	.align	2, 0
	.type	 AnimSpikes,function
	.thumb_func
AnimSpikes:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L102
	ldrb	r0, [r0]
	mov	r5, sp
	add	r5, r5, #0x2
	mov	r1, #0x0
	mov	r2, sp
	add	r3, r5, #0
	bl	SetAverageBattlerPositions
	ldr	r0, .L102+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L101	@cond_branch
	ldr	r1, .L102+0x8
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L101:
	ldr	r1, .L102+0x8
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x2e]
	mov	r2, sp
	ldrh	r0, [r1, #0x4]
	ldrh	r2, [r2]
	add	r0, r0, r2
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0x6]
	ldrh	r5, [r5]
	add	r0, r0, r5
	strh	r0, [r4, #0x36]
	ldr	r0, .L102+0xc
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L102+0x10
	str	r0, [r4, #0x1c]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L103:
	.align	2, 0
.L102:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	0xffce
	.word	AnimSpikes_Step1
.Lfe17:
	.size	 AnimSpikes,.Lfe17-AnimSpikes
	.align	2, 0
	.type	 AnimSpikes_Step1,function
	.thumb_func
AnimSpikes_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L105	@cond_branch
	mov	r1, #0x0
	mov	r0, #0x1e
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	ldr	r0, .L106
	str	r0, [r4, #0x1c]
	ldr	r1, .L106+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
.L105:
	pop	{r4}
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	WaitAnimForDuration
	.word	AnimSpikes_Step2
.Lfe18:
	.size	 AnimSpikes_Step1,.Lfe18-AnimSpikes_Step1
	.align	2, 0
	.type	 AnimSpikes_Step2,function
	.thumb_func
AnimSpikes_Step2:
	push	{lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x30]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L109	@cond_branch
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
.L109:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	bne	.L110	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L110:
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimSpikes_Step2,.Lfe19-AnimSpikes_Step2
	.align	2, 0
	.type	 AnimLeer,function
	.thumb_func
AnimLeer:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r5, .L112
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L112+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L112+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	gBattleAnimArgs
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe20:
	.size	 AnimLeer,.Lfe20-AnimLeer
	.align	2, 0
	.type	 AnimLetterZ,function
	.thumb_func
AnimLetterZ:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L115	@cond_branch
	add	r0, r4, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r5, .L123
	mov	r2, #0x0
	ldrsh	r1, [r5, r2]
	add	r0, r4, #0
	bl	SetAnimSpriteInitialXOffset
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L116	@cond_branch
	ldr	r0, .L123+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L117	@cond_branch
	ldrh	r0, [r5, #0x4]
	b	.L121
.L124:
	.align	2, 0
.L123:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L117:
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	neg	r0, r0
	strh	r0, [r4, #0x30]
	mov	r2, #0x6
	ldrsh	r0, [r5, r2]
	neg	r0, r0
	b	.L122
.L116:
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	neg	r0, r0
.L121:
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x6]
.L122:
	strh	r0, [r4, #0x32]
.L115:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r3, #0xff
	ldrh	r1, [r4, #0x30]
	ldrh	r2, [r4, #0x34]
	add	r1, r1, r2
	strh	r1, [r4, #0x34]
	ldrh	r1, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r1, r1, r2
	strh	r1, [r4, #0x36]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	lsr	r2, r1, #0x1f
	add	r1, r1, r2
	asr	r1, r1, #0x1
	strh	r1, [r4, #0x24]
	and	r0, r0, r3
	mov	r1, #0x5
	bl	Sin
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	lsr	r2, r1, #0x1f
	add	r1, r1, r2
	asr	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xf0
	bls	.L120	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L120:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 AnimLetterZ,.Lfe21-AnimLetterZ
	.align	2, 0
	.type	 AnimFang,function
	.thumb_func
AnimFang:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L126	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L126:
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 AnimFang,.Lfe22-AnimFang
	.align	2, 0
	.globl	AnimTask_IsTargetPlayerSide
	.type	 AnimTask_IsTargetPlayerSide,function
	.thumb_func
AnimTask_IsTargetPlayerSide:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L131
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L128	@cond_branch
	ldr	r1, .L131+0x4
	mov	r0, #0x0
	b	.L130
.L132:
	.align	2, 0
.L131:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L128:
	ldr	r1, .L133
	mov	r0, #0x1
.L130:
	strh	r0, [r1, #0xe]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L134:
	.align	2, 0
.L133:
	.word	gBattleAnimArgs
.Lfe23:
	.size	 AnimTask_IsTargetPlayerSide,.Lfe23-AnimTask_IsTargetPlayerSide
	.align	2, 0
	.globl	AnimTask_IsHealingMove
	.type	 AnimTask_IsHealingMove,function
	.thumb_func
AnimTask_IsHealingMove:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L139
	ldr	r0, [r0]
	cmp	r0, #0
	ble	.L136	@cond_branch
	ldr	r1, .L139+0x4
	mov	r0, #0x0
	b	.L138
.L140:
	.align	2, 0
.L139:
	.word	gAnimMoveDmg
	.word	gBattleAnimArgs
.L136:
	ldr	r1, .L141
	mov	r0, #0x1
.L138:
	strh	r0, [r1, #0xe]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L142:
	.align	2, 0
.L141:
	.word	gBattleAnimArgs
.Lfe24:
	.size	 AnimTask_IsHealingMove,.Lfe24-AnimTask_IsHealingMove
	.align	2, 0
	.type	 AnimSpotlight,function
	.thumb_func
AnimSpotlight:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r1, .L144
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r0, .L144+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r4, .L144+0x8
	strh	r1, [r4]
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x44
	bl	SetGpuReg
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldrb	r1, [r5, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r5, #0x1]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L144+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L145:
	.align	2, 0
.L144:
	.word	0x1f3f
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	AnimSpotlight_Step1
.Lfe25:
	.size	 AnimSpotlight,.Lfe25-AnimSpotlight
	.align	2, 0
	.type	 AnimSpotlight_Step1,function
	.thumb_func
AnimSpotlight_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bhi	.L147	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L161
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L162:
	.align	2, 0
.L161:
	.word	.L158
	.align	2, 0
	.align	2, 0
.L158:
	.word	.L148
	.word	.L151
	.word	.L153
	.word	.L151
	.word	.L155
	.word	.L156
.L148:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L147	@cond_branch
	b	.L160
.L151:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x75
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x15
	bne	.L147	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	b	.L160
.L153:
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x75
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x29
	bne	.L147	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	b	.L160
.L155:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
.L160:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L147
.L156:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L147	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L163
	str	r0, [r4, #0x1c]
.L147:
	pop	{r4}
	pop	{r0}
	bx	r0
.L164:
	.align	2, 0
.L163:
	.word	AnimSpotlight_Step2
.Lfe26:
	.size	 AnimSpotlight_Step1,.Lfe26-AnimSpotlight_Step1
	.align	2, 0
	.type	 AnimSpotlight_Step2,function
	.thumb_func
AnimSpotlight_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L166
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.L167:
	.align	2, 0
.L166:
	.word	0x3f3f
.Lfe27:
	.size	 AnimSpotlight_Step2,.Lfe27-AnimSpotlight_Step2
	.align	2, 0
	.type	 AnimClappingHand,function
	.thumb_func
AnimClappingHand:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L174
	mov	r1, #0x6
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L169	@cond_branch
	ldr	r4, .L174+0x4
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L169:
	ldrh	r0, [r6]
	ldrh	r2, [r5, #0x20]
	add	r0, r0, r2
	mov	r3, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r6, #0x2]
	ldrh	r4, [r5, #0x22]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	ldrh	r2, [r5, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x10
	ldr	r4, .L174+0x8
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L174+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L170	@cond_branch
	ldrb	r1, [r5, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	ldr	r0, .L174+0x10
	strh	r0, [r5, #0x24]
	mov	r0, #0x2
	b	.L173
.L175:
	.align	2, 0
.L174:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	0x3ff
	.word	-0x400
	.word	0xfff4
.L170:
	mov	r0, #0xc
	strh	r0, [r5, #0x24]
	ldr	r0, .L176
.L173:
	strh	r0, [r5, #0x30]
	ldr	r1, .L176+0x4
	ldrh	r0, [r1, #0x8]
	strh	r0, [r5, #0x2e]
	mov	r2, #0x34
	ldrsh	r0, [r5, r2]
	cmp	r0, #0xff
	beq	.L172	@cond_branch
	ldrh	r0, [r1, #0x4]
	strh	r0, [r5, #0x34]
.L172:
	ldr	r0, .L176+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L177:
	.align	2, 0
.L176:
	.word	0xfffe
	.word	gBattleAnimArgs
	.word	AnimClappingHand_Step
.Lfe28:
	.size	 AnimClappingHand,.Lfe28-AnimClappingHand
	.align	2, 0
	.type	 AnimClappingHand_Step,function
	.thumb_func
AnimClappingHand_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x32]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L179	@cond_branch
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L182	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r4, #0x32]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L182	@cond_branch
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xde
	bl	PlaySE1WithPanning
	b	.L182
.L179:
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x30]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L184	@cond_branch
	neg	r0, r0
.L184:
	cmp	r0, #0xc
	bne	.L182	@cond_branch
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	sub	r0, r2, #0x1
	strh	r0, [r4, #0x32]
.L182:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L185	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L185:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 AnimClappingHand_Step,.Lfe29-AnimClappingHand_Step
	.align	2, 0
	.type	 AnimClappingHand2,function
	.thumb_func
AnimClappingHand2:
	push	{lr}
	ldrb	r2, [r0, #0x1]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r1, #0xff
	strh	r1, [r0, #0x34]
	bl	AnimClappingHand
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 AnimClappingHand2,.Lfe30-AnimClappingHand2
	.align	2, 0
	.globl	AnimTask_CreateSpotlight
	.type	 AnimTask_CreateSpotlight,function
	.thumb_func
AnimTask_CreateSpotlight:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L188	@cond_branch
	ldr	r1, .L190
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L190+0x4
	ldr	r2, .L190+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L190+0xc
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r0, .L190+0x10
	ldrh	r1, [r0]
	mov	r0, #0x42
	bl	SetGpuReg
	ldr	r0, .L190+0x14
	ldrh	r1, [r0]
	mov	r0, #0x46
	bl	SetGpuReg
	b	.L189
.L191:
	.align	2, 0
.L190:
	.word	0x1f3f
	.word	gBattle_WIN1H
	.word	0x98f0
	.word	gBattle_WIN1V
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
.L188:
	ldr	r1, .L192
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L192+0x4
	mov	r0, #0xf0
	strh	r0, [r1]
	ldr	r4, .L192+0x8
	ldr	r1, .L192+0xc
	add	r0, r1, #0
	strh	r0, [r4]
	mov	r0, #0x42
	mov	r1, #0xf0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x46
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	mov	r0, #0x0
	bl	SetGpuRegBits
.L189:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L193:
	.align	2, 0
.L192:
	.word	0x1f3f
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
	.word	0x78a0
.Lfe31:
	.size	 AnimTask_CreateSpotlight,.Lfe31-AnimTask_CreateSpotlight
	.align	2, 0
	.globl	AnimTask_RemoveSpotlight
	.type	 AnimTask_RemoveSpotlight,function
	.thumb_func
AnimTask_RemoveSpotlight:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L196
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, .L196+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L196+0x8
	strh	r1, [r0]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L195	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	mov	r0, #0x0
	bl	ClearGpuRegBits
.L195:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L197:
	.align	2, 0
.L196:
	.word	0x3f3f
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
.Lfe32:
	.size	 AnimTask_RemoveSpotlight,.Lfe32-AnimTask_RemoveSpotlight
	.align	2, 0
	.type	 AnimRapidSpin,function
	.thumb_func
AnimRapidSpin:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L203
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L199	@cond_branch
	ldr	r4, .L203+0x4
	b	.L202
.L204:
	.align	2, 0
.L203:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L199:
	ldr	r4, .L205
.L202:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x2]
	add	r0, r0, r6
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r2, .L205+0x4
	ldrh	r0, [r2, #0x4]
	strh	r0, [r5, #0x26]
	mov	r3, #0x0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r4, [r2, #0x6]
	mov	r6, #0x6
	ldrsh	r1, [r2, r6]
	cmp	r0, r1
	ble	.L201	@cond_branch
	mov	r3, #0x1
.L201:
	strh	r3, [r5, #0x2e]
	mov	r0, #0x0
	strh	r0, [r5, #0x30]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r2, #0xa]
	strh	r0, [r5, #0x34]
	strh	r4, [r5, #0x36]
	ldr	r0, .L205+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L206:
	.align	2, 0
.L205:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimRapidSpin_Step
.Lfe33:
	.size	 AnimRapidSpin,.Lfe33-AnimRapidSpin
	.align	2, 0
	.type	 AnimRapidSpin_Step,function
	.thumb_func
AnimRapidSpin_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x30]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r2, #0x30]
	ldr	r1, .L212
	mov	r3, #0x30
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x34]
	ldrh	r3, [r2, #0x26]
	add	r1, r0, r3
	strh	r1, [r2, #0x26]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L208	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x36
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	bge	.L210	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
	b	.L210
.L213:
	.align	2, 0
.L212:
	.word	gSineTable
.L208:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x36
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	ble	.L210	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L210:
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 AnimRapidSpin_Step,.Lfe34-AnimRapidSpin_Step
	.align	2, 0
	.globl	AnimTask_RapinSpinMonElevation
	.type	 AnimTask_RapinSpinMonElevation,function
	.thumb_func
AnimTask_RapinSpinMonElevation:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L231
	add	r5, r1, r0
	ldr	r0, .L231+0x4
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L215	@cond_branch
	ldr	r4, .L231+0x8
	b	.L228
.L232:
	.align	2, 0
.L231:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L215:
	ldr	r4, .L233
.L228:
	ldrb	r0, [r4]
	bl	GetBattlerYCoordWithElevation
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r6, #0
	add	r1, r0, #0
	add	r1, r1, #0x24
	mov	r2, #0x0
	strh	r1, [r5, #0x8]
	strh	r1, [r5, #0xa]
	sub	r0, r0, #0x21
	strh	r0, [r5, #0xc]
	cmp	r0, #0
	bge	.L217	@cond_branch
	strh	r2, [r5, #0xc]
.L217:
	ldrh	r0, [r5, #0x8]
	strh	r0, [r5, #0xe]
	mov	r0, #0x8
	strh	r0, [r5, #0x10]
	ldr	r1, .L233+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r5, #0x12]
	strh	r2, [r5, #0x14]
	strh	r2, [r5, #0x16]
	cmp	r7, #0x1
	bne	.L218	@cond_branch
	ldr	r0, .L233+0x8
	b	.L229
.L234:
	.align	2, 0
.L233:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gBattle_BG1_X
.L218:
	ldr	r0, .L235
.L229:
	ldrh	r2, [r0]
	strh	r2, [r5, #0x18]
	add	r3, r2, #0
	add	r3, r3, #0xf0
	strh	r3, [r5, #0x1a]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r5, #0x1c]
	mov	r4, #0x4
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bne	.L220	@cond_branch
	strh	r3, [r5, #0x1e]
	ldrh	r3, [r5, #0x18]
	b	.L221
.L236:
	.align	2, 0
.L235:
	.word	gBattle_BG2_X
.L220:
	strh	r2, [r5, #0x1e]
	ldrh	r3, [r5, #0x1a]
.L221:
	mov	r0, #0x0
	strh	r0, [r5, #0x26]
	ldrh	r1, [r5, #0xc]
	lsl	r2, r1, #0x10
	asr	r1, r2, #0x10
	mov	r6, #0xe
	ldrsh	r0, [r5, r6]
	cmp	r1, r0
	bgt	.L223	@cond_branch
	ldr	r4, .L237
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	ip, r0
.L224:
	asr	r2, r2, #0x10
	lsl	r1, r2, #0x1
	add	r0, r1, r4
	strh	r3, [r0]
	add	r1, r1, ip
	strh	r3, [r1]
	add	r2, r2, #0x1
	lsl	r2, r2, #0x10
	asr	r1, r2, #0x10
	mov	r6, #0xe
	ldrsh	r0, [r5, r6]
	cmp	r1, r0
	ble	.L224	@cond_branch
.L223:
	cmp	r7, #0x1
	bne	.L226	@cond_branch
	ldr	r0, .L237+0x4
	b	.L230
.L238:
	.align	2, 0
.L237:
	.word	gScanlineEffectRegBuffers
	.word	0x4000014
.L226:
	ldr	r0, .L239
.L230:
	str	r0, [sp]
	ldr	r0, .L239+0x4
	str	r0, [sp, #0x4]
	mov	r1, sp
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
	mov	r0, sp
	strb	r2, [r0, #0x9]
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	ldr	r0, .L239+0x8
	str	r0, [r5]
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L240:
	.align	2, 0
.L239:
	.word	0x4000018
	.word	-0x5d9fffff
	.word	RapinSpinMonElevation_Step
.Lfe35:
	.size	 AnimTask_RapinSpinMonElevation,.Lfe35-AnimTask_RapinSpinMonElevation
	.align	2, 0
	.type	 RapinSpinMonElevation_Step,function
	.thumb_func
RapinSpinMonElevation_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L261
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	ldrh	r1, [r4, #0x12]
	sub	r0, r0, r1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r4, #0xc]
	mov	r3, #0xc
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	bge	.L242	@cond_branch
	strh	r2, [r4, #0x8]
.L242:
	ldrh	r1, [r4, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L243	@cond_branch
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x12]
	sub	r0, r0, r1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r4, #0xc]
	mov	r3, #0xc
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	bge	.L245	@cond_branch
	strh	r2, [r4, #0xa]
	mov	r0, #0x1
	strh	r0, [r4, #0x26]
	b	.L245
.L262:
	.align	2, 0
.L261:
	.word	gTasks
.L243:
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x10]
.L245:
	ldrh	r0, [r4, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L246	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x14]
	mov	r1, #0x0
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L247	@cond_branch
	mov	r1, #0x1
.L247:
	strh	r1, [r4, #0x16]
	cmp	r1, #0
	beq	.L248	@cond_branch
	ldrh	r0, [r4, #0x18]
	b	.L260
.L248:
	ldrh	r0, [r4, #0x1a]
.L260:
	strh	r0, [r4, #0x20]
.L246:
	ldrh	r1, [r4, #0x8]
	lsl	r3, r1, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bge	.L251	@cond_branch
	ldr	r5, .L263
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r6, r5, r0
.L252:
	asr	r3, r3, #0x10
	lsl	r1, r3, #0x1
	add	r2, r1, r5
	ldrh	r0, [r4, #0x20]
	strh	r0, [r2]
	add	r1, r1, r6
	ldrh	r0, [r4, #0x20]
	strh	r0, [r1]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	blt	.L252	@cond_branch
.L251:
	ldrh	r1, [r4, #0xa]
	lsl	r3, r1, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bgt	.L255	@cond_branch
	ldr	r5, .L263
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r6, r5, r0
.L256:
	asr	r3, r3, #0x10
	lsl	r1, r3, #0x1
	add	r2, r1, r5
	ldrh	r0, [r4, #0x1e]
	strh	r0, [r2]
	add	r1, r1, r6
	ldrh	r0, [r4, #0x1e]
	strh	r0, [r1]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	ble	.L256	@cond_branch
.L255:
	mov	r3, #0x26
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L258	@cond_branch
	mov	r1, #0x1c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L259	@cond_branch
	ldr	r1, .L263+0x4
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
.L259:
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L258:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L264:
	.align	2, 0
.L263:
	.word	gScanlineEffectRegBuffers
	.word	gScanlineEffect
.Lfe36:
	.size	 RapinSpinMonElevation_Step,.Lfe36-RapinSpinMonElevation_Step
	.align	2, 0
	.globl	AnimTask_TormentAttacker
	.type	 AnimTask_TormentAttacker,function
	.thumb_func
AnimTask_TormentAttacker:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L266
	add	r4, r4, r0
	mov	r5, #0x0
	strh	r5, [r4, #0x8]
	strh	r5, [r4, #0xa]
	ldr	r6, .L266+0x4
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0xc]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0xe]
	mov	r0, #0x20
	strh	r0, [r4, #0x10]
	ldr	r0, .L266+0x8
	strh	r0, [r4, #0x12]
	strh	r5, [r4, #0x14]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L266+0xc
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L267:
	.align	2, 0
.L266:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	0xffec
	.word	TormentAttacker_Step
.Lfe37:
	.size	 AnimTask_TormentAttacker,.Lfe37-AnimTask_TormentAttacker
	.align	2, 0
	.type	 TormentAttacker_Step,function
	.thumb_func
TormentAttacker_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L300
	add	r6, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x5
	bls	.LCB2648
	b	.L269	@long jump
.LCB2648:
	lsl	r0, r0, #0x2
	ldr	r1, .L300+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L301:
	.align	2, 0
.L300:
	.word	gTasks
	.word	.L297
	.align	2, 0
	.align	2, 0
.L297:
	.word	.L270
	.word	.L275
	.word	.L281
	.word	.L284
	.word	.L287
	.word	.L295
.L270:
	mov	r0, #0xc
	ldrsh	r2, [r6, r0]
	ldrh	r1, [r6, #0xa]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L271	@cond_branch
	mov	r1, #0x10
	ldrsh	r0, [r6, r1]
	sub	r0, r2, r0
	b	.L299
.L271:
	mov	r1, #0x10
	ldrsh	r0, [r6, r1]
	add	r0, r2, r0
.L299:
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldrh	r2, [r6, #0x12]
	ldrh	r0, [r6, #0xe]
	add	r2, r2, r0
	ldr	r0, .L302
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldrb	r4, [r6, #0xa]
	mov	r3, #0x6
	sub	r3, r3, r4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xba
	bl	PlaySE12WithPanning
	cmp	r4, #0x40
	beq	.L273	@cond_branch
	ldr	r5, .L302+0x4
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r3, r1, r5
	ldrh	r0, [r6, #0xa]
	mov	r2, #0x1
	and	r2, r2, r0
	add	r3, r3, #0x3f
	ldrb	r4, [r3]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r4
	orr	r0, r0, r2
	strb	r0, [r3]
	add	r5, r5, #0x1c
	add	r1, r1, r5
	ldr	r0, .L302+0x8
	str	r0, [r1]
.L273:
	ldrh	r1, [r6, #0xa]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L274	@cond_branch
	ldrh	r0, [r6, #0x10]
	sub	r0, r0, #0x6
	strh	r0, [r6, #0x10]
	ldrh	r0, [r6, #0x12]
	sub	r0, r0, #0x6
	strh	r0, [r6, #0x12]
.L274:
	ldrh	r1, [r6, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L302+0xc
	add	r0, r6, #0
	bl	PrepareAffineAnimInTaskData
	ldrh	r0, [r6, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xa]
	strh	r4, [r6, #0x8]
	b	.L269
.L303:
	.align	2, 0
.L302:
	.word	gThoughtBubbleSpriteTemplate
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	gUnknown_085CE2A0
.L275:
	add	r0, r6, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L269	@cond_branch
	mov	r2, #0xa
	ldrsh	r1, [r6, r2]
	cmp	r1, #0x6
	bne	.L277	@cond_branch
	mov	r0, #0x8
	strh	r0, [r6, #0x14]
	mov	r0, #0x3
	strh	r0, [r6, #0x8]
	b	.L269
.L277:
	cmp	r1, #0x2
	bgt	.L279	@cond_branch
	mov	r0, #0xa
.L279:
	strh	r0, [r6, #0x14]
	mov	r0, #0x2
	strh	r0, [r6, #0x8]
	b	.L269
.L281:
	ldrh	r0, [r6, #0x14]
	mov	r2, #0x14
	ldrsh	r1, [r6, r2]
	cmp	r1, #0
	beq	.L282	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r6, #0x14]
	b	.L269
.L282:
	strh	r1, [r6, #0x8]
	b	.L269
.L284:
	ldrh	r1, [r6, #0x14]
	mov	r2, #0x14
	ldrsh	r0, [r6, r2]
	cmp	r0, #0
	beq	.L285	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r6, #0x14]
	b	.L269
.L285:
	mov	r0, #0x4
	strh	r0, [r6, #0x8]
	b	.L269
.L287:
	mov	r5, #0x0
	mov	r7, #0x0
	ldr	r3, .L304
	mov	r0, #0x1c
	add	r0, r0, r3
	mov	r8, r0
.L291:
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r4, r0, #0x2
	add	r0, r3, #0
	add	r0, r0, #0x14
	add	r0, r4, r0
	ldr	r1, [r0]
	ldr	r0, .L304+0x4
	cmp	r1, r0
	bne	.L290	@cond_branch
	add	r0, r4, r3
	strh	r2, [r0, #0x2e]
	mov	r1, #0x6
	strh	r1, [r0, #0x30]
	mov	r1, #0x2
	str	r2, [sp]
	str	r3, [sp, #0x4]
	bl	StartSpriteAnim
	mov	r0, r8
	add	r1, r4, r0
	ldr	r0, .L304+0x8
	str	r0, [r1]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r2, [sp]
	ldr	r3, [sp, #0x4]
	cmp	r7, #0x6
	beq	.L289	@cond_branch
.L290:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x3f
	bls	.L291	@cond_branch
.L289:
	strh	r7, [r6, #0x14]
	mov	r0, #0x5
	strh	r0, [r6, #0x8]
	b	.L269
.L305:
	.align	2, 0
.L304:
	.word	gSprites
	.word	gThoughtBubbleSpriteTemplate
	.word	TormentAttacker_Callback
.L295:
	mov	r1, #0x14
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L269	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L269:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 TormentAttacker_Step,.Lfe38-TormentAttacker_Step
	.align	2, 0
	.type	 TormentAttacker_Callback,function
	.thumb_func
TormentAttacker_Callback:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L307	@cond_branch
	ldr	r3, .L308
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x2e
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L307:
	pop	{r4}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	gTasks
.Lfe39:
	.size	 TormentAttacker_Callback,.Lfe39-TormentAttacker_Callback
	.align	2, 0
	.type	 AnimTriAttackTriangle,function
	.thumb_func
AnimTriAttackTriangle:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L311	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
.L311:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x27
	bgt	.L312	@cond_branch
	ldrh	r0, [r5, #0x2e]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L313	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	b	.L317
.L313:
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
.L317:
	strb	r0, [r2]
.L312:
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x1e
	ble	.L315	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L315:
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x3d
	bne	.L316	@cond_branch
	ldr	r1, .L318
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldrh	r0, [r5, #0x24]
	ldrh	r2, [r5, #0x20]
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x26]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	strh	r1, [r5, #0x24]
	strh	r1, [r5, #0x26]
	mov	r0, #0x14
	strh	r0, [r5, #0x2e]
	ldr	r4, .L318+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	ldr	r0, .L318+0x8
	str	r0, [r5, #0x1c]
.L316:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L319:
	.align	2, 0
.L318:
	.word	DestroyAnimSprite
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
.Lfe40:
	.size	 AnimTriAttackTriangle,.Lfe40-AnimTriAttackTriangle
	.align	2, 0
	.globl	AnimTask_DefenseCurlDeformMon
	.type	 AnimTask_DefenseCurlDeformMon,function
	.thumb_func
AnimTask_DefenseCurlDeformMon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L327
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L322	@cond_branch
	cmp	r0, #0x1
	beq	.L323	@cond_branch
	b	.L321
.L328:
	.align	2, 0
.L327:
	.word	gTasks
.L322:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L329
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L321
.L330:
	.align	2, 0
.L329:
	.word	DefenseCurlDeformMonAffineAnimCmds
.L323:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L321	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L321:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 AnimTask_DefenseCurlDeformMon,.Lfe41-AnimTask_DefenseCurlDeformMon
	.align	2, 0
	.type	 AnimBatonPassPokeball,function
	.thumb_func
AnimBatonPassPokeball:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L334	@cond_branch
	cmp	r0, #0x1
	bgt	.L342	@cond_branch
	cmp	r0, #0
	beq	.L333	@cond_branch
	b	.L332
.L342:
	cmp	r0, #0x2
	beq	.L336	@cond_branch
	cmp	r0, #0x3
	beq	.L338	@cond_branch
	b	.L332
.L333:
	ldr	r4, .L344
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	add	r0, r6, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	strh	r0, [r5, #0x32]
	b	.L343
.L345:
	.align	2, 0
.L344:
	.word	gBattleAnimAttacker
.L334:
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x60
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	sub	r0, r0, #0x1a
	strh	r0, [r5, #0x32]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	mov	r0, #0x32
	ldrsh	r2, [r5, r0]
	add	r0, r6, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L336	@cond_branch
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
.L336:
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x60
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x30
	strh	r0, [r5, #0x32]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	mov	r0, #0x32
	ldrsh	r2, [r5, r0]
	add	r0, r6, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bne	.L332	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x34]
	ldr	r1, .L346
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r6, #0
	bl	ResetSpriteRotScale
.L343:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L332
.L347:
	.align	2, 0
.L346:
	.word	gSprites
.L338:
	ldrh	r0, [r5, #0x26]
	sub	r0, r0, #0x6
	strh	r0, [r5, #0x26]
	mov	r1, #0x22
	ldrsh	r0, [r5, r1]
	mov	r2, #0x26
	ldrsh	r1, [r5, r2]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L332	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimSprite
.L332:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 AnimBatonPassPokeball,.Lfe42-AnimBatonPassPokeball
	.align	2, 0
	.type	 AnimWishStar,function
	.thumb_func
AnimWishStar:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L352
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L349	@cond_branch
	ldr	r0, .L352+0x4
	b	.L351
.L353:
	.align	2, 0
.L352:
	.word	gBattleAnimAttacker
	.word	0xfff0
.L349:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
.L351:
	strh	r0, [r4, #0x20]
	mov	r0, #0x0
	strh	r0, [r4, #0x22]
	ldr	r0, .L354
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L355:
	.align	2, 0
.L354:
	.word	AnimWishStar_Step
.Lfe43:
	.size	 AnimWishStar,.Lfe43-AnimWishStar
	.align	2, 0
	.type	 AnimWishStar_Step,function
	.thumb_func
AnimWishStar_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x48
	strh	r0, [r4, #0x2e]
	ldr	r0, .L362
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L357	@cond_branch
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	b	.L361
.L363:
	.align	2, 0
.L362:
	.word	gBattleAnimAttacker
.L357:
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	neg	r0, r0
.L361:
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x10
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r5, r0, r1
	strh	r5, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L359	@cond_branch
	ldr	r0, .L364
	ldrh	r1, [r4, #0x24]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldrh	r2, [r4, #0x22]
	add	r2, r2, r5
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	add	r3, r4, #0
	add	r3, r3, #0x43
	ldrb	r3, [r3]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	CreateSpriteAndAnimate
.L359:
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	add	r0, r0, #0x20
	mov	r1, #0x98
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bls	.L360	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L360:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L365:
	.align	2, 0
.L364:
	.word	gMiniTwinklingStarSpriteTemplate
.Lfe44:
	.size	 AnimWishStar_Step,.Lfe44-AnimWishStar_Step
	.align	2, 0
	.type	 AnimMiniTwinklingStar,function
	.thumb_func
AnimMiniTwinklingStar:
	push	{r4, lr}
	add	r4, r0, #0
	bl	Random2
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L367	@cond_branch
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x4
	b	.L370
.L367:
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x5
.L370:
	ldr	r3, .L371
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L371+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	bl	Random2
	mov	r1, #0x7
	and	r0, r0, r1
	add	r1, r0, #0
	cmp	r1, #0x3
	ble	.L369	@cond_branch
	neg	r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L369:
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L371+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L372:
	.align	2, 0
.L371:
	.word	0x3ff
	.word	-0x400
	.word	AnimMiniTwinklingStar_Step
.Lfe45:
	.size	 AnimMiniTwinklingStar,.Lfe45-AnimMiniTwinklingStar
	.align	2, 0
	.type	 AnimMiniTwinklingStar_Step,function
	.thumb_func
AnimMiniTwinklingStar_Step:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	bgt	.L374	@cond_branch
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L376	@cond_branch
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	mov	r0, #0x0
	b	.L380
.L374:
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x2
	bne	.L377	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L377:
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x3
	bne	.L378	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L381
	strh	r0, [r3, #0x30]
.L378:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
.L380:
	strh	r0, [r3, #0x30]
.L376:
	mov	r1, #0x2e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x3c
	ble	.L379	@cond_branch
	add	r0, r3, #0
	bl	DestroySprite
.L379:
	pop	{r0}
	bx	r0
.L382:
	.align	2, 0
.L381:
	.word	0xffff
.Lfe46:
	.size	 AnimMiniTwinklingStar_Step,.Lfe46-AnimMiniTwinklingStar_Step
	.align	2, 0
	.globl	AnimTask_StockpileDeformMon
	.type	 AnimTask_StockpileDeformMon,function
	.thumb_func
AnimTask_StockpileDeformMon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L387
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L384	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L387+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L385
.L388:
	.align	2, 0
.L387:
	.word	gTasks
	.word	gStockpileDeformMonAffineAnimCmds
.L384:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L385	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L385:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 AnimTask_StockpileDeformMon,.Lfe47-AnimTask_StockpileDeformMon
	.align	2, 0
	.globl	AnimTask_SpitUpDeformMon
	.type	 AnimTask_SpitUpDeformMon,function
	.thumb_func
AnimTask_SpitUpDeformMon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L393
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L390	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L393+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L391
.L394:
	.align	2, 0
.L393:
	.word	gTasks
	.word	gSpitUpDeformMonAffineAnimCmds
.L390:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L391	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L391:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 AnimTask_SpitUpDeformMon,.Lfe48-AnimTask_SpitUpDeformMon
	.align	2, 0
	.type	 AnimSwallowBlueOrb,function
	.thumb_func
AnimSwallowBlueOrb:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L397	@cond_branch
	cmp	r0, #0x1
	beq	.L398	@cond_branch
	b	.L396
.L397:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	mov	r0, #0x90
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x30]
	ldr	r0, .L402
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L396
.L403:
	.align	2, 0
.L402:
	.word	gBattleAnimAttacker
.L398:
	ldrh	r2, [r4, #0x30]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, r1
	strh	r0, [r4, #0x26]
	sub	r2, r2, #0x60
	strh	r2, [r4, #0x30]
	mov	r2, #0x22
	ldrsh	r0, [r4, r2]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	ble	.L396	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L396:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 AnimSwallowBlueOrb,.Lfe49-AnimSwallowBlueOrb
	.align	2, 0
	.globl	AnimTask_SwallowDeformMon
	.type	 AnimTask_SwallowDeformMon,function
	.thumb_func
AnimTask_SwallowDeformMon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L408
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L405	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L408+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L406
.L409:
	.align	2, 0
.L408:
	.word	gTasks
	.word	gSwallowDeformMonAffineAnimCmds
.L405:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L406	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L406:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 AnimTask_SwallowDeformMon,.Lfe50-AnimTask_SwallowDeformMon
	.align	2, 0
	.globl	AnimTask_TransformMon
	.type	 AnimTask_TransformMon,function
	.thumb_func
AnimTask_TransformMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L459
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r3, r1, #0
	cmp	r0, #0x4
	bls	.LCB3902
	b	.L411	@long jump
.LCB3902:
	lsl	r0, r0, #0x2
	ldr	r1, .L459+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L460:
	.align	2, 0
.L459:
	.word	gTasks
	.word	.L454
	.align	2, 0
	.align	2, 0
.L454:
	.word	.L412
	.word	.L415
	.word	.L418
	.word	.L445
	.word	.L448
.L412:
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L461
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L413	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	b	.L414
.L462:
	.align	2, 0
.L461:
	.word	gBattleAnimAttacker
.L413:
	mov	r0, #0x2
	mov	r1, #0x2
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L414:
	ldr	r0, .L463
	mov	r6, r8
	lsl	r1, r6, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L463+0x4
	ldrh	r0, [r0]
	strh	r0, [r1, #0x1c]
	b	.L456
.L464:
	.align	2, 0
.L463:
	.word	gTasks
	.word	gBattleAnimArgs
.L415:
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r4, r0, r3
	ldrh	r0, [r4, #0xc]
	add	r1, r0, #0x1
	strh	r1, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bgt	.LCB3984
	b	.L411	@long jump
.LCB3984:
	mov	r0, #0x0
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	ldrh	r5, [r4, #0xa]
	lsl	r1, r5, #0x4
	orr	r1, r1, r5
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x4c
	bl	SetGpuReg
	cmp	r5, #0xf
	beq	.LCB4000
	b	.L411	@long jump
.LCB4000:
	b	.L457
.L418:
	ldr	r5, .L465
	ldrb	r0, [r5]
	ldr	r1, .L465+0x4
	ldrb	r1, [r1]
	mov	r2, r8
	lsl	r4, r2, #0x2
	add	r2, r4, r2
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	ldrb	r2, [r2, #0x1c]
	ldr	r3, .L465+0x8
	mov	r6, #0x2
	ldrsh	r3, [r3, r6]
	bl	HandleSpeciesGfxDataChange
	ldrb	r1, [r5]
	mov	r0, sp
	bl	sub_80A6BFC
	bl	IsContest
	lsl	r0, r0, #0x18
	mov	r9, r4
	cmp	r0, #0
	beq	.L419	@cond_branch
	mov	r1, #0x0
	b	.L420
.L466:
	.align	2, 0
.L465:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L419:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
.L420:
	ldr	r0, .L467
	ldr	r2, [r0]
	lsl	r0, r1, #0x2
	add	r2, r2, #0x4
	add	r2, r2, r0
	ldr	r1, .L467+0x4
	ldr	r0, .L467+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0xb
	ldr	r0, [r2]
	add	r0, r0, r1
	ldr	r1, [sp]
	ldr	r2, .L467+0xc
	bl	CpuSet
	ldr	r1, [sp]
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	r0, sp
	ldrh	r3, [r0, #0xa]
	mov	r0, #0x1
	bl	LoadBgTiles
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L421	@cond_branch
	ldr	r5, .L467+0x10
	ldr	r0, [r5]
	ldr	r0, [r0, #0x18]
	ldrh	r0, [r0]
	bl	IsSpeciesNotUnown
	add	r4, r0, #0
	ldr	r0, [r5]
	ldr	r0, [r0, #0x18]
	ldrh	r0, [r0, #0x2]
	bl	IsSpeciesNotUnown
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L422	@cond_branch
	ldr	r6, [sp, #0x4]
	mov	r5, #0x0
	mov	r0, #0x7
	mov	ip, r0
	mov	r7, #0x0
.L426:
	mov	r4, #0x0
	add	r3, r7, r6
	mov	r1, ip
	lsl	r0, r1, #0x1
	add	r2, r0, r6
.L430:
	ldrh	r1, [r3]
	ldrh	r0, [r2]
	strh	r0, [r3]
	strh	r1, [r2]
	add	r3, r3, #0x2
	sub	r2, r2, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L430	@cond_branch
	mov	r2, #0x20
	add	ip, ip, r2
	add	r7, r7, #0x40
	add	r5, r5, #0x1
	cmp	r5, #0x7
	ble	.L426	@cond_branch
	mov	r5, #0x0
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	add	r3, r0, #0
.L436:
	add	r2, r5, #0x1
	lsl	r0, r5, #0x6
	add	r1, r0, r6
	mov	r4, #0x7
.L440:
	ldrh	r0, [r1]
	eor	r0, r0, r3
	strh	r0, [r1]
	add	r1, r1, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L440	@cond_branch
	add	r5, r2, #0
	cmp	r5, #0x7
	ble	.L436	@cond_branch
.L422:
	ldr	r0, .L467+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldrh	r0, [r0, #0x2]
	bl	IsSpeciesNotUnown
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L443	@cond_branch
	ldr	r3, .L467+0x14
	ldr	r4, .L467+0x18
	ldr	r2, .L467+0x8
	ldrb	r0, [r2]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r3, #0
	add	r1, r1, #0x10
	add	r0, r0, r1
	ldr	r1, .L467+0x1c
	b	.L458
.L468:
	.align	2, 0
.L467:
	.word	gMonSpritesGfxPtr
	.word	gBattleMonForms
	.word	gBattleAnimAttacker
	.word	0x4000200
	.word	gContestResources
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gUnknown_082FF6C0
.L443:
	ldr	r3, .L469
	ldr	r4, .L469+0x4
	ldr	r2, .L469+0x8
	ldrb	r0, [r2]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r3, #0
	add	r1, r1, #0x10
	add	r0, r0, r1
	ldr	r1, .L469+0xc
.L458:
	str	r1, [r0]
	ldrb	r0, [r2]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
.L421:
	ldr	r0, .L469+0x10
	mov	r1, r9
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
.L456:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L411
.L470:
	.align	2, 0
.L469:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gUnknown_082FF694
	.word	gTasks
.L445:
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r4, r0, r3
	ldrh	r0, [r4, #0xc]
	add	r1, r0, #0x1
	strh	r1, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L411	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	ldrh	r5, [r4, #0xa]
	lsl	r1, r5, #0x4
	orr	r1, r1, r5
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x4c
	bl	SetGpuReg
	cmp	r5, #0
	bne	.L411	@cond_branch
.L457:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L411
.L448:
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L471
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L449	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	b	.L450
.L472:
	.align	2, 0
.L471:
	.word	gBattleAnimAttacker
.L449:
	mov	r0, #0x2
	mov	r1, #0x2
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L450:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L451	@cond_branch
	ldr	r4, .L473
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L451	@cond_branch
	ldr	r0, .L473+0x4
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r6, #0x1c
	ldrsh	r0, [r1, r6]
	cmp	r0, #0
	bne	.L451	@cond_branch
	ldrb	r0, [r4]
	ldr	r1, .L473+0x8
	ldr	r1, [r1]
	ldr	r2, [r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1, #0x2]
	bl	SetBattlerShadowSpriteCallback
.L451:
	mov	r0, r8
	bl	DestroyAnimVisualTask
.L411:
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L474:
	.align	2, 0
.L473:
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	gBattleSpritesDataPtr
.Lfe51:
	.size	 AnimTask_TransformMon,.Lfe51-AnimTask_TransformMon
	.align	2, 0
	.globl	AnimTask_IsMonInvisible
	.type	 AnimTask_IsMonInvisible,function
	.thumb_func
AnimTask_IsMonInvisible:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L476
	ldr	r3, .L476+0x4
	ldr	r2, .L476+0x8
	ldr	r1, .L476+0xc
	ldrb	r1, [r1]
	add	r1, r1, r2
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	add	r1, r1, #0x3e
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	strh	r1, [r4, #0xe]
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L477:
	.align	2, 0
.L476:
	.word	gBattleAnimArgs
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.Lfe52:
	.size	 AnimTask_IsMonInvisible,.Lfe52-AnimTask_IsMonInvisible
	.align	2, 0
	.globl	AnimTask_CastformGfxDataChange
	.type	 AnimTask_CastformGfxDataChange,function
	.thumb_func
AnimTask_CastformGfxDataChange:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L479
	ldrb	r0, [r0]
	ldr	r1, .L479+0x4
	ldrb	r1, [r1]
	mov	r2, #0x1
	mov	r3, #0x0
	bl	HandleSpeciesGfxDataChange
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L480:
	.align	2, 0
.L479:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.Lfe53:
	.size	 AnimTask_CastformGfxDataChange,.Lfe53-AnimTask_CastformGfxDataChange
	.align	2, 0
	.globl	AnimTask_MorningSunLightBeam
	.type	 AnimTask_MorningSunLightBeam,function
	.thumb_func
AnimTask_MorningSunLightBeam:
	push	{r4, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L507
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bls	.LCB4520
	b	.L482	@long jump
.LCB4520:
	lsl	r0, r0, #0x2
	ldr	r1, .L507+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L508:
	.align	2, 0
.L507:
	.word	gTasks
	.word	.L502
	.align	2, 0
	.align	2, 0
.L502:
	.word	.L483
	.word	.L489
	.word	.L493
	.word	.L498
	.word	.L500
.L483:
	ldr	r1, .L509
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L484	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L484:
	mov	r0, sp
	bl	sub_80A6B30
	ldr	r1, .L509+0x4
	mov	r0, sp
	mov	r2, #0x0
	bl	AnimLoadCompressedBgTilemapHandleContest
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L485	@cond_branch
	ldr	r1, .L509+0x8
	ldr	r3, .L509+0xc
	b	.L504
.L510:
	.align	2, 0
.L509:
	.word	0x3f42
	.word	gBattleAnimMaskTilemap_LightBeam
	.word	gBattle_BG1_X
	.word	0xffc8
.L485:
	ldr	r0, .L511
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L487	@cond_branch
	ldr	r1, .L511+0x4
	ldr	r2, .L511+0x8
	add	r0, r2, #0
	b	.L505
.L512:
	.align	2, 0
.L511:
	.word	gBattleAnimAttacker
	.word	gBattle_BG1_X
	.word	0xff79
.L487:
	ldr	r1, .L513
	ldr	r3, .L513+0x4
.L504:
	add	r0, r3, #0
.L505:
	strh	r0, [r1]
	ldr	r1, .L513+0x8
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L513+0xc
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L513+0x10
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r0, .L513+0x14
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L513
	ldrh	r0, [r0]
	strh	r0, [r1, #0x1c]
	ldr	r0, .L513+0x8
	ldrh	r0, [r0]
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	b	.L506
.L514:
	.align	2, 0
.L513:
	.word	gBattle_BG1_X
	.word	0xfff6
	.word	gBattle_BG1_Y
	.word	gBattleAnimMaskImage_LightBeam
	.word	gBattleAnimMaskPalette_LightBeam
	.word	gTasks
.L489:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x10]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.LCB4689
	b	.L482	@long jump
.LCB4689:
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L491	@cond_branch
	mov	r0, #0xc
	strh	r0, [r4, #0xa]
.L491:
	ldrh	r0, [r4, #0xa]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xc
	bne	.L482	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L482
.L493:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L494	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
.L494:
	ldrh	r0, [r4, #0xa]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L482	@cond_branch
	ldr	r2, .L515
	ldr	r1, .L515+0x4
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L496	@cond_branch
	strh	r0, [r4, #0x8]
	b	.L482
.L516:
	.align	2, 0
.L515:
	.word	gBattle_BG1_X
	.word	gMorningSunLightBeamCoordsTable
.L496:
	mov	r0, #0x3
	strh	r0, [r4, #0x8]
	b	.L482
.L498:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L482	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0xe]
	mov	r0, #0x1
.L506:
	strh	r0, [r1, #0x8]
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xe4
	bl	PlaySE12WithPanning
	b	.L482
.L500:
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	bl	sub_80A6C68
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L501	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L501:
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	ldr	r0, .L517
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L517+0x4
	strh	r1, [r0]
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L482:
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L518:
	.align	2, 0
.L517:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.Lfe54:
	.size	 AnimTask_MorningSunLightBeam,.Lfe54-AnimTask_MorningSunLightBeam
	.align	2, 0
	.type	 AnimGreenStar,function
	.thumb_func
AnimGreenStar:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r7, r0, #0
	bl	Random2
	lsl	r0, r0, #0x10
	mov	r1, #0xfc
	lsl	r1, r1, #0xe
	and	r1, r1, r0
	lsr	r5, r1, #0x10
	add	r1, r5, #0
	cmp	r1, #0x1f
	ble	.L520	@cond_branch
	mov	r0, #0x20
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L520:
	ldr	r4, .L521
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r5
	strh	r0, [r7, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x20
	strh	r0, [r7, #0x22]
	ldr	r1, .L521+0x4
	ldrh	r0, [r1]
	strh	r0, [r7, #0x30]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r7, #0x32]
	ldr	r4, .L521+0x8
	mov	r0, #0x20
	ldrsh	r1, [r7, r0]
	mov	r0, #0x22
	ldrsh	r2, [r7, r0]
	add	r5, r7, #0
	add	r5, r5, #0x43
	ldrb	r3, [r5]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	bl	CreateSprite
	mov	r9, r0
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r0, #0x20
	ldrsh	r1, [r7, r0]
	mov	r0, #0x22
	ldrsh	r2, [r7, r0]
	ldrb	r3, [r5]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	bl	CreateSprite
	mov	r8, r0
	mov	r1, r8
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r0, r9
	lsl	r2, r0, #0x4
	add	r2, r2, r9
	lsl	r2, r2, #0x2
	ldr	r1, .L521+0xc
	mov	sl, r1
	add	r5, r2, r1
	add	r0, r5, #0
	mov	r1, #0x1
	str	r2, [sp]
	bl	StartSpriteAnim
	mov	r0, r8
	lsl	r6, r0, #0x4
	add	r6, r6, r8
	lsl	r6, r6, #0x2
	mov	r1, sl
	add	r4, r6, r1
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAnim
	ldr	r1, .L521+0x4
	ldrh	r0, [r1]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r1]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x32]
	ldr	r0, .L521+0x10
	strh	r0, [r5, #0x3c]
	mov	r0, #0x1
	neg	r0, r0
	strh	r0, [r4, #0x3c]
	add	r5, r5, #0x3e
	ldrb	r0, [r5]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r5]
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	orr	r0, r0, r1
	strb	r0, [r4]
	mov	r0, #0x1c
	add	sl, sl, r0
	ldr	r2, [sp]
	add	r2, r2, sl
	ldr	r0, .L521+0x14
	str	r0, [r2]
	add	r6, r6, sl
	str	r0, [r6]
	mov	r1, r9
	strh	r1, [r7, #0x3a]
	mov	r0, r8
	strh	r0, [r7, #0x3c]
	ldr	r0, .L521+0x18
	str	r0, [r7, #0x1c]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L522:
	.align	2, 0
.L521:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gGreenStarSpriteTemplate
	.word	gSprites
	.word	0xffff
	.word	AnimGreenStar_Callback
	.word	AnimGreenStar_Step1
.Lfe55:
	.size	 AnimGreenStar,.Lfe55-AnimGreenStar
	.align	2, 0
	.type	 AnimGreenStar_Step1,function
	.thumb_func
AnimGreenStar_Step1:
	push	{lr}
	add	r3, r0, #0
	ldrh	r2, [r3, #0x32]
	ldrh	r0, [r3, #0x34]
	add	r2, r2, r0
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r3, #0x26]
	sub	r1, r1, r0
	strh	r1, [r3, #0x26]
	mov	r0, #0xff
	and	r2, r2, r0
	strh	r2, [r3, #0x34]
	mov	r2, #0x36
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	bne	.L524	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x8
	neg	r1, r1
	cmp	r0, r1
	bge	.L524	@cond_branch
	ldr	r2, .L527
	mov	r0, #0x3a
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldrh	r0, [r3, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x36]
.L524:
	mov	r1, #0x36
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x1
	bne	.L525	@cond_branch
	mov	r2, #0x26
	ldrsh	r1, [r3, r2]
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	bge	.L525	@cond_branch
	ldr	r2, .L527
	mov	r0, #0x3c
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldrh	r0, [r3, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x36]
.L525:
	ldrh	r0, [r3, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L526	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L527+0x4
	str	r0, [r3, #0x1c]
.L526:
	pop	{r0}
	bx	r0
.L528:
	.align	2, 0
.L527:
	.word	gSprites
	.word	AnimGreenStar_Step2
.Lfe56:
	.size	 AnimGreenStar_Step1,.Lfe56-AnimGreenStar_Step1
	.align	2, 0
	.type	 AnimGreenStar_Step2,function
	.thumb_func
AnimGreenStar_Step2:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L531
	mov	r0, #0x3a
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r6, r5, #0
	add	r6, r6, #0x1c
	add	r0, r3, r6
	ldr	r2, [r0]
	ldr	r0, .L531+0x4
	cmp	r2, r0
	bne	.L530	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldr	r0, [r1]
	cmp	r0, r2
	bne	.L530	@cond_branch
	add	r0, r3, r5
	bl	DestroySprite
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L530:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L532:
	.align	2, 0
.L531:
	.word	gSprites
	.word	SpriteCallbackDummy
.Lfe57:
	.size	 AnimGreenStar_Step2,.Lfe57-AnimGreenStar_Step2
	.align	2, 0
	.type	 AnimGreenStar_Callback,function
	.thumb_func
AnimGreenStar_Callback:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L534	@cond_branch
	ldrh	r2, [r3, #0x32]
	ldrh	r1, [r3, #0x34]
	add	r2, r2, r1
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r3, #0x26]
	sub	r0, r0, r1
	strh	r0, [r3, #0x26]
	mov	r0, #0xff
	and	r2, r2, r0
	strh	r2, [r3, #0x34]
	ldrh	r0, [r3, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L534	@cond_branch
	mov	r1, ip
	ldrb	r0, [r1]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldr	r0, .L536
	str	r0, [r3, #0x1c]
.L534:
	pop	{r0}
	bx	r0
.L537:
	.align	2, 0
.L536:
	.word	SpriteCallbackDummy
.Lfe58:
	.size	 AnimGreenStar_Callback,.Lfe58-AnimGreenStar_Callback
	.align	2, 0
	.globl	AnimTask_DoomDesireLightBeam
	.type	 AnimTask_DoomDesireLightBeam,function
	.thumb_func
AnimTask_DoomDesireLightBeam:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L573
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r4, r1, #0
	cmp	r0, #0x5
	bls	.LCB5293
	b	.L539	@long jump
.LCB5293:
	lsl	r0, r0, #0x2
	ldr	r1, .L573+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L574:
	.align	2, 0
.L573:
	.word	gTasks
	.word	.L567
	.align	2, 0
	.align	2, 0
.L567:
	.word	.L540
	.word	.L552
	.word	.L557
	.word	.L560
	.word	.L562
	.word	.L565
.L540:
	ldr	r1, .L575
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L575+0x4
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L541	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L541:
	mov	r0, sp
	bl	sub_80A6B30
	ldr	r1, .L575+0x8
	mov	r0, sp
	mov	r2, #0x0
	bl	AnimLoadCompressedBgTilemapHandleContest
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L542	@cond_branch
	ldr	r1, .L575+0xc
	ldr	r3, .L575+0x10
	add	r0, r3, #0
	b	.L569
.L576:
	.align	2, 0
.L575:
	.word	0x3f42
	.word	0xd03
	.word	gBattleAnimMaskTilemap_LightBeam
	.word	gBattle_BG1_X
	.word	0xffc8
.L542:
	ldr	r0, .L577
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L544	@cond_branch
	cmp	r4, #0x1
	bne	.L545	@cond_branch
	ldr	r1, .L577+0x4
	ldr	r2, .L577+0x8
	add	r0, r2, #0
	strh	r0, [r1]
.L545:
	cmp	r4, #0x3
	bne	.L546	@cond_branch
	ldr	r1, .L577+0x4
	ldr	r3, .L577+0xc
	add	r0, r3, #0
	strh	r0, [r1]
.L546:
	cmp	r4, #0
	bne	.L547	@cond_branch
	ldr	r1, .L577+0x4
	mov	r0, #0xe
	strh	r0, [r1]
.L547:
	cmp	r4, #0x2
	bne	.L549	@cond_branch
	ldr	r1, .L577+0x4
	ldr	r2, .L577+0x10
	b	.L570
.L578:
	.align	2, 0
.L577:
	.word	gBattleAnimTarget
	.word	gBattle_BG1_X
	.word	0xff65
	.word	0xff8d
	.word	0xffec
.L544:
	cmp	r4, #0x1
	bne	.L550	@cond_branch
	ldr	r1, .L579
	ldr	r3, .L579+0x4
	add	r0, r3, #0
	strh	r0, [r1]
.L550:
	cmp	r4, #0
	bne	.L549	@cond_branch
	ldr	r1, .L579
	ldr	r2, .L579+0x8
.L570:
	add	r0, r2, #0
.L569:
	strh	r0, [r1]
.L549:
	ldr	r1, .L579+0xc
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L579+0x10
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L579+0x14
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r0, .L579+0x18
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L579
	ldrh	r0, [r0]
	strh	r0, [r1, #0x1c]
	ldr	r0, .L579+0xc
	ldrh	r0, [r0]
	strh	r0, [r1, #0x1e]
	b	.L555
.L580:
	.align	2, 0
.L579:
	.word	gBattle_BG1_X
	.word	0xff79
	.word	0xfff6
	.word	gBattle_BG1_Y
	.word	gBattleAnimMaskImage_LightBeam
	.word	gBattleAnimMaskPalette_LightBeam
	.word	gTasks
.L552:
	ldr	r1, .L581
	lsl	r4, r6, #0x2
	add	r0, r4, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r0, #0x0
	strh	r0, [r5, #0xe]
	ldr	r0, .L581+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L553	@cond_branch
	ldr	r2, .L581+0x8
	ldr	r1, .L581+0xc
	mov	r3, #0xc
	ldrsh	r0, [r5, r3]
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrh	r5, [r5, #0x1c]
	add	r0, r0, r5
	b	.L571
.L582:
	.align	2, 0
.L581:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	gBattle_BG1_X
	.word	gDoomDesireLightBeamCoordTable
.L553:
	ldr	r2, .L583
	ldr	r1, .L583+0x4
	mov	r3, #0xc
	ldrsh	r0, [r5, r3]
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	ldrh	r0, [r5, #0x1c]
	sub	r0, r0, r1
.L571:
	strh	r0, [r2]
	ldr	r0, .L583+0x8
	add	r1, r4, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L555	@cond_branch
	strh	r0, [r1, #0x8]
	b	.L539
.L584:
	.align	2, 0
.L583:
	.word	gBattle_BG1_X
	.word	gDoomDesireLightBeamCoordTable
	.word	gTasks
.L555:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L539
.L557:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bgt	.L558	@cond_branch
	mov	r0, #0x5
	strh	r0, [r4, #0xa]
.L558:
	ldrh	r1, [r4, #0xa]
	lsl	r1, r1, #0x8
	mov	r0, #0x3
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bne	.L539	@cond_branch
	b	.L572
.L560:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	ldrh	r1, [r4, #0xe]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xe]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldr	r2, .L585
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r1, r0
	ble	.L539	@cond_branch
.L572:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L539
.L586:
	.align	2, 0
.L585:
	.word	gDoomDesireLightBeamDelayTable
.L562:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xd
	ble	.L563	@cond_branch
	mov	r0, #0xd
	strh	r0, [r4, #0xa]
.L563:
	ldrh	r1, [r4, #0xa]
	lsl	r1, r1, #0x8
	mov	r0, #0x3
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xd
	bne	.L539	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L539
.L565:
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	bl	sub_80A6C68
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L566	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L566:
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	ldr	r0, .L587
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L587+0x4
	strh	r1, [r0]
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L539:
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L588:
	.align	2, 0
.L587:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.Lfe59:
	.size	 AnimTask_DoomDesireLightBeam,.Lfe59-AnimTask_DoomDesireLightBeam
	.align	2, 0
	.globl	AnimTask_StrongFrustrationGrowAndShrink
	.type	 AnimTask_StrongFrustrationGrowAndShrink,function
	.thumb_func
AnimTask_StrongFrustrationGrowAndShrink:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L593
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L590	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L593+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L591
.L594:
	.align	2, 0
.L593:
	.word	gTasks
	.word	gStrongFrustrationAffineAnimCmds
.L590:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L591	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L591:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 AnimTask_StrongFrustrationGrowAndShrink,.Lfe60-AnimTask_StrongFrustrationGrowAndShrink
	.align	2, 0
	.type	 AnimWeakFrustrationAngerMark,function
	.thumb_func
AnimWeakFrustrationAngerMark:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	bne	.L596	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L597
.L596:
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	cmp	r1, #0x14
	ble	.L597	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0xa0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x80
	strh	r0, [r4, #0x32]
	ldr	r0, .L603
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L599	@cond_branch
	ldrh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	neg	r0, r0
	b	.L602
.L604:
	.align	2, 0
.L603:
	.word	gBattleAnimAttacker
.L599:
	ldrh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
.L602:
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	ble	.L597	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L597:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 AnimWeakFrustrationAngerMark,.Lfe61-AnimWeakFrustrationAngerMark
	.align	2, 0
	.globl	AnimTask_RockMonBackAndForth
	.type	 AnimTask_RockMonBackAndForth,function
	.thumb_func
AnimTask_RockMonBackAndForth:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L613
	add	r4, r0, r1
	ldr	r5, .L613+0x4
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L606	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L605
.L614:
	.align	2, 0
.L613:
	.word	gTasks
	.word	gBattleAnimArgs
.L606:
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bge	.L607	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x4]
.L607:
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x2
	ble	.L608	@cond_branch
	mov	r0, #0x2
	strh	r0, [r5, #0x4]
.L608:
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	mov	r0, #0x4
	ldrsh	r1, [r5, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x8
	sub	r0, r0, r1
	strh	r0, [r4, #0xe]
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x7
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrh	r0, [r5, #0x4]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x12]
	ldrh	r0, [r5, #0x2]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x14]
	ldrb	r0, [r5]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L609	@cond_branch
	ldr	r0, .L615
	b	.L612
.L616:
	.align	2, 0
.L615:
	.word	gBattleAnimAttacker
.L609:
	ldr	r0, .L617
.L612:
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L611	@cond_branch
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x10]
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x12]
.L611:
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r0, .L617+0x4
	str	r0, [r4]
.L605:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L618:
	.align	2, 0
.L617:
	.word	gBattleAnimTarget
	.word	AnimTask_RockMonBackAndForth_Step
.Lfe62:
	.size	 AnimTask_RockMonBackAndForth,.Lfe62-AnimTask_RockMonBackAndForth
	.align	2, 0
	.type	 AnimTask_RockMonBackAndForth_Step,function
	.thumb_func
AnimTask_RockMonBackAndForth_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L633
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r6, [r4, r0]
	cmp	r6, #0x1
	beq	.L623	@cond_branch
	cmp	r6, #0x1
	bgt	.L632	@cond_branch
	cmp	r6, #0
	beq	.L621	@cond_branch
	b	.L620
.L634:
	.align	2, 0
.L633:
	.word	gTasks
.L632:
	cmp	r6, #0x2
	beq	.L625	@cond_branch
	cmp	r6, #0x3
	bne	.LCB6020
	b	.L629	@long jump
.LCB6020:
	b	.L620
.L621:
	ldr	r2, .L635
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x12]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r0, [r4, #0xc]
	ldrh	r1, [r4, #0x10]
	sub	r0, r0, r1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0xc]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xe
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L620	@cond_branch
	strh	r6, [r4, #0xa]
	b	.L627
.L636:
	.align	2, 0
.L635:
	.word	gSprites
.L623:
	ldr	r2, .L637
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r4, #0x12]
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r0, [r4, #0x10]
	ldrh	r1, [r4, #0xc]
	add	r0, r0, r1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0xc]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	cmp	r1, r0
	blt	.L620	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L627
.L638:
	.align	2, 0
.L637:
	.word	gSprites
.L625:
	ldr	r2, .L639
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x12]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	mov	r5, #0x0
	strh	r1, [r0, #0x24]
	ldrh	r0, [r4, #0xc]
	ldrh	r1, [r4, #0x10]
	sub	r0, r0, r1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0xc]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xe
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L620	@cond_branch
	ldrh	r1, [r4, #0x14]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L627	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x14]
	strh	r5, [r4, #0xa]
	strh	r5, [r4, #0x8]
	b	.L620
.L640:
	.align	2, 0
.L639:
	.word	gSprites
.L627:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L620
.L629:
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L620:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 AnimTask_RockMonBackAndForth_Step,.Lfe63-AnimTask_RockMonBackAndForth_Step
	.align	2, 0
	.globl	AnimSweetScentPetal
	.type	 AnimSweetScentPetal,function
	.thumb_func
AnimSweetScentPetal:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L645
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L642	@cond_branch
	strh	r0, [r4, #0x20]
	ldr	r1, .L645+0x4
	ldrh	r0, [r1]
	b	.L644
.L646:
	.align	2, 0
.L645:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L642:
	mov	r0, #0xf0
	strh	r0, [r4, #0x20]
	ldr	r1, .L647
	ldrh	r0, [r1]
	sub	r0, r0, #0x1e
.L644:
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x32]
	ldrb	r1, [r1, #0x2]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r0, .L647+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L648:
	.align	2, 0
.L647:
	.word	gBattleAnimArgs
	.word	AnimSweetScentPetal_Step
.Lfe64:
	.size	 AnimSweetScentPetal,.Lfe64-AnimSweetScentPetal
	.align	2, 0
	.type	 AnimSweetScentPetal_Step,function
	.thumb_func
AnimSweetScentPetal_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x3
	strh	r0, [r4, #0x2e]
	ldr	r0, .L655
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L650	@cond_branch
	ldrh	r1, [r4, #0x20]
	add	r1, r1, #0x5
	strh	r1, [r4, #0x20]
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0xf0
	ble	.L651	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L651:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0xff
	and	r0, r0, r1
	mov	r1, #0x10
	bl	Sin
	b	.L654
.L656:
	.align	2, 0
.L655:
	.word	gBattleAnimAttacker
.L650:
	ldrh	r1, [r4, #0x20]
	sub	r1, r1, #0x5
	strh	r1, [r4, #0x20]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bge	.L653	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L653:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0xff
	and	r0, r0, r1
	mov	r1, #0x10
	bl	Cos
.L654:
	strh	r0, [r4, #0x26]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 AnimSweetScentPetal_Step,.Lfe65-AnimSweetScentPetal_Step
	.align	2, 0
	.globl	AnimTask_FlailMovement
	.type	 AnimTask_FlailMovement,function
	.thumb_func
AnimTask_FlailMovement:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L658
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	mov	r0, #0x20
	strh	r0, [r4, #0x20]
	mov	r0, #0x40
	strh	r0, [r4, #0x22]
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x24]
	ldr	r0, .L658+0x4
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r0, .L658+0x8
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L659:
	.align	2, 0
.L658:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_FlailMovement_Step
.Lfe66:
	.size	 AnimTask_FlailMovement,.Lfe66-AnimTask_FlailMovement
	.align	2, 0
	.type	 AnimTask_FlailMovement_Step,function
	.thumb_func
AnimTask_FlailMovement_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L682
	add	r7, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r7, r1]
	mov	r8, r0
	cmp	r0, #0x1
	beq	.L666	@cond_branch
	cmp	r0, #0x1
	bgt	.L673	@cond_branch
	cmp	r0, #0
	beq	.L662	@cond_branch
	b	.L661
.L683:
	.align	2, 0
.L682:
	.word	gTasks
.L673:
	mov	r2, r8
	cmp	r2, #0x2
	beq	.L670	@cond_branch
	b	.L661
.L662:
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	add	r0, r3, #0
	ldrh	r1, [r7, #0xc]
	add	r2, r0, r1
	strh	r2, [r7, #0xc]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	ldrh	r3, [r7, #0x24]
	mov	r8, r3
	mov	r3, #0x24
	ldrsh	r1, [r7, r3]
	cmp	r0, r1
	blt	.L661	@cond_branch
	mov	r0, r8
	sub	r5, r0, r2
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r6, r1, #0
	lsl	r6, r6, #0x1
	add	r0, r5, #0
	add	r1, r6, #0
	bl	__divsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	add	r1, r6, #0
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r1, #0x1
	and	r4, r4, r1
	cmp	r4, #0
	bne	.L664	@cond_branch
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, r8
	sub	r0, r2, r0
	b	.L680
.L664:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, r8
	sub	r0, r0, r3
	strh	r0, [r7, #0xc]
	b	.L661
.L666:
	ldr	r1, .L684
	add	r0, r1, #0
	ldrh	r2, [r7, #0xc]
	add	r1, r0, r2
	strh	r1, [r7, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r7, r3]
	mov	r2, #0x24
	ldrsh	r6, [r7, r2]
	cmn	r0, r6
	bgt	.L661	@cond_branch
	ldrh	r3, [r7, #0x24]
	mov	r9, r3
	mov	r0, r9
	sub	r4, r0, r1
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r6, r6, #0x1
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__divsi3
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r1, r8
	and	r1, r1, r5
	lsl	r0, r1, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L668	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r2, r9
	sub	r0, r0, r2
.L680:
	strh	r0, [r7, #0xc]
	strh	r1, [r7, #0x8]
	b	.L661
.L685:
	.align	2, 0
.L684:
	.word	-0x200
.L668:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r3, r9
	sub	r0, r3, r0
	strh	r0, [r7, #0xc]
	b	.L661
.L670:
	ldrh	r0, [r7, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L660
.L661:
	ldrh	r0, [r7, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r7, #0xc]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r7, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldr	r2, .L686
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	mov	r2, #0xc
	ldrsh	r0, [r7, r2]
	cmp	r0, #0
	bge	.L681	@cond_branch
	add	r0, r0, #0x3f
.L681:
	asr	r0, r0, #0x6
	neg	r0, r0
	strh	r0, [r1, #0x24]
	ldrh	r0, [r7, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r7, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L660	@cond_branch
	ldrh	r1, [r7, #0x20]
	mov	r3, #0x20
	ldrsh	r0, [r7, r3]
	cmp	r0, #0
	beq	.L677	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r7, #0x20]
	ldrh	r0, [r7, #0x24]
	ldrh	r1, [r7, #0x22]
	sub	r0, r0, r1
	strh	r0, [r7, #0x24]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	bgt	.L660	@cond_branch
	mov	r0, #0x10
	strh	r0, [r7, #0x24]
	b	.L660
.L687:
	.align	2, 0
.L686:
	.word	gSprites
.L677:
	mov	r0, #0x2
	strh	r0, [r7, #0x8]
.L660:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 AnimTask_FlailMovement_Step,.Lfe67-AnimTask_FlailMovement_Step
	.align	2, 0
	.type	 AnimPainSplitProjectile,function
	.thumb_func
AnimPainSplitProjectile:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L689	@cond_branch
	ldr	r6, .L694
	mov	r2, #0x4
	ldrsh	r0, [r6, r2]
	cmp	r0, #0
	bne	.L690	@cond_branch
	ldr	r4, .L694+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L690:
	ldrh	r0, [r6]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrh	r1, [r6, #0x2]
	ldrh	r2, [r5, #0x22]
	add	r0, r1, r2
	strh	r0, [r5, #0x22]
	mov	r0, #0x80
	strh	r0, [r5, #0x30]
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	strh	r0, [r5, #0x32]
	strh	r1, [r5, #0x34]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L691
.L695:
	.align	2, 0
.L694:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L689:
	ldrh	r1, [r5, #0x30]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r5, #0x24]
	ldrh	r0, [r5, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r5, #0x26]
	add	r0, r0, r2
	strh	r0, [r5, #0x26]
	mov	r2, #0x36
	ldrsh	r0, [r5, r2]
	add	r4, r1, #0
	cmp	r0, #0
	bne	.L692	@cond_branch
	mov	r0, #0x26
	ldrsh	r1, [r5, r0]
	mov	r2, #0x34
	ldrsh	r0, [r5, r2]
	cmn	r1, r0
	ble	.L692	@cond_branch
	mov	r0, #0x1
	strh	r0, [r5, #0x36]
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	neg	r0, r0
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x32]
.L692:
	add	r0, r4, #0
	add	r0, r0, #0xc0
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x80
	strh	r0, [r5, #0x32]
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L691	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimSprite
.L691:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 AnimPainSplitProjectile,.Lfe68-AnimPainSplitProjectile
	.align	2, 0
	.globl	AnimTask_PainSplitMovement
	.type	 AnimTask_PainSplitMovement,function
	.thumb_func
AnimTask_PainSplitMovement:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r0, #0
	ldr	r1, .L716
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L697	@cond_branch
	ldr	r0, .L716+0x4
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	mov	r8, r0
	cmp	r1, #0
	bne	.L698	@cond_branch
	ldr	r0, .L716+0x8
	b	.L714
.L717:
	.align	2, 0
.L716:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L698:
	ldr	r0, .L718
.L714:
	ldrb	r0, [r0]
	strh	r0, [r2, #0x1e]
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L718+0x4
	lsl	r4, r7, #0x2
	add	r0, r4, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	strh	r5, [r6, #0x1c]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	mov	r2, r8
	mov	r3, #0x2
	ldrsh	r0, [r2, r3]
	cmp	r0, #0x1
	beq	.L702	@cond_branch
	cmp	r0, #0x1
	bgt	.L710	@cond_branch
	cmp	r0, #0
	beq	.L701	@cond_branch
	lsl	r2, r5, #0x4
	b	.L700
.L719:
	.align	2, 0
.L718:
	.word	gBattleAnimTarget
	.word	gTasks
.L710:
	cmp	r0, #0x2
	beq	.L705	@cond_branch
	lsl	r2, r5, #0x4
	b	.L700
.L701:
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r0, r5, #0
	mov	r1, #0xe0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	add	r0, r5, #0
	bl	SetBattlerSpriteYOffsetFromYScale
	lsl	r2, r5, #0x4
	b	.L700
.L702:
	mov	r2, #0x98
	lsl	r2, r2, #0x1
	mov	r3, #0xf0
	lsl	r3, r3, #0x4
	b	.L715
.L705:
	mov	r2, #0x98
	lsl	r2, r2, #0x1
	mov	r3, #0xf1
	lsl	r3, r3, #0x8
.L715:
	add	r0, r5, #0
	mov	r1, #0xd0
	bl	SetSpriteRotScale
	add	r0, r5, #0
	bl	SetBattlerSpriteYOffsetFromYScale
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L707	@cond_branch
	ldrb	r0, [r6, #0x1e]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsl	r2, r5, #0x4
	cmp	r0, #0
	bne	.L700	@cond_branch
.L707:
	ldr	r0, .L720
	lsl	r2, r5, #0x4
	add	r1, r2, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x10
	strh	r0, [r1, #0x26]
.L700:
	ldr	r1, .L720
	add	r0, r2, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x2
	strh	r1, [r0, #0x24]
	ldr	r0, .L720+0x4
	add	r1, r4, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L711
.L721:
	.align	2, 0
.L720:
	.word	gSprites
	.word	gTasks
.L697:
	ldrb	r5, [r2, #0x1c]
	ldrh	r0, [r2, #0xc]
	add	r0, r0, #0x1
	mov	r4, #0x0
	strh	r0, [r2, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L712	@cond_branch
	strh	r4, [r2, #0xc]
	ldr	r0, .L722
	lsl	r1, r5, #0x4
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x24]
	neg	r0, r0
	strh	r0, [r1, #0x24]
.L712:
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xd
	bne	.L711	@cond_branch
	add	r0, r5, #0
	bl	ResetSpriteRotScale
	ldr	r1, .L722
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r4, [r0, #0x24]
	strh	r4, [r0, #0x26]
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L711:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L723:
	.align	2, 0
.L722:
	.word	gSprites
.Lfe69:
	.size	 AnimTask_PainSplitMovement,.Lfe69-AnimTask_PainSplitMovement
	.align	2, 0
	.type	 AnimFlatterConfetti,function
	.thumb_func
AnimFlatterConfetti:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xc
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, r0
	ldr	r3, .L734
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L734+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	bl	Random2
	ldr	r5, .L734+0x8
	and	r5, r5, r0
	bl	Random2
	mov	r1, #0xff
	and	r1, r1, r0
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L725	@cond_branch
	mov	r2, #0xbc
	lsl	r2, r2, #0x3
	add	r0, r5, r2
	b	.L731
.L735:
	.align	2, 0
.L734:
	.word	0x3ff
	.word	-0x400
	.word	0x1ff
.L725:
	mov	r3, #0xbc
	lsl	r3, r3, #0x3
	add	r0, r3, #0
	sub	r0, r0, r5
.L731:
	strh	r0, [r4, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L727	@cond_branch
	mov	r2, #0x90
	lsl	r2, r2, #0x3
	add	r0, r1, r2
	b	.L732
.L727:
	mov	r3, #0x90
	lsl	r3, r3, #0x3
	add	r0, r3, #0
	sub	r0, r0, r1
.L732:
	strh	r0, [r4, #0x30]
	ldr	r0, .L736
	ldrh	r0, [r0]
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L729	@cond_branch
	ldr	r0, .L736+0x4
	b	.L733
.L737:
	.align	2, 0
.L736:
	.word	gBattleAnimArgs
	.word	0xfff8
.L729:
	mov	r0, #0xf8
.L733:
	strh	r0, [r4, #0x20]
	mov	r0, #0x68
	strh	r0, [r4, #0x22]
	ldr	r0, .L738
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L739:
	.align	2, 0
.L738:
	.word	AnimFlatterConfetti_Step
.Lfe70:
	.size	 AnimFlatterConfetti,.Lfe70-AnimFlatterConfetti
	.align	2, 0
	.type	 AnimFlatterConfetti_Step,function
	.thumb_func
AnimFlatterConfetti_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L741	@cond_branch
	ldrh	r3, [r4, #0x2e]
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	b	.L745
.L741:
	ldrh	r3, [r4, #0x2e]
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
.L745:
	strh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x30]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, r1
	strh	r0, [r4, #0x26]
	add	r0, r3, #0
	sub	r0, r0, #0x16
	strh	r0, [r4, #0x2e]
	add	r1, r2, #0
	sub	r1, r1, #0x30
	strh	r1, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L743	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
.L743:
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L744	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L744:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe71:
	.size	 AnimFlatterConfetti_Step,.Lfe71-AnimFlatterConfetti_Step
	.align	2, 0
	.type	 AnimFlatterSpotlight,function
	.thumb_func
AnimFlatterSpotlight:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r1, .L747
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r0, .L747+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r4, .L747+0x8
	strh	r1, [r4]
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, .L747+0xc
	ldrh	r0, [r0, #0x4]
	strh	r0, [r5, #0x2e]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldrb	r1, [r5, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r5, #0x1]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L747+0x10
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L748:
	.align	2, 0
.L747:
	.word	0x1f3f
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	gBattleAnimArgs
	.word	AnimFlatterSpotlight_Step
.Lfe72:
	.size	 AnimFlatterSpotlight,.Lfe72-AnimFlatterSpotlight
	.align	2, 0
	.type	 AnimFlatterSpotlight_Step,function
	.thumb_func
AnimFlatterSpotlight_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L753	@cond_branch
	cmp	r0, #0x1
	bgt	.L760	@cond_branch
	cmp	r0, #0
	beq	.L751	@cond_branch
	b	.L750
.L760:
	cmp	r0, #0x2
	beq	.L755	@cond_branch
	cmp	r0, #0x3
	beq	.L757	@cond_branch
	b	.L750
.L751:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L750	@cond_branch
	b	.L761
.L753:
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L750	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
	b	.L761
.L755:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L750	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L761:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	b	.L750
.L757:
	ldr	r1, .L762
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L750:
	pop	{r4}
	pop	{r0}
	bx	r0
.L763:
	.align	2, 0
.L762:
	.word	0x3f3f
.Lfe73:
	.size	 AnimFlatterSpotlight_Step,.Lfe73-AnimFlatterSpotlight_Step
	.align	2, 0
	.type	 AnimReversalOrb,function
	.thumb_func
AnimReversalOrb:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L765
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r1, .L765+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	ldr	r1, .L765+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L766:
	.align	2, 0
.L765:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimReversalOrb_Step
.Lfe74:
	.size	 AnimReversalOrb,.Lfe74-AnimReversalOrb
	.align	2, 0
	.type	 AnimReversalOrb_Step,function
	.thumb_func
AnimReversalOrb_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	ldrh	r1, [r4, #0x34]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x9
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	lsl	r1, r0, #0x10
	cmp	r0, #0x3f
	bls	.L769	@cond_branch
	asr	r0, r1, #0x10
	cmp	r0, #0xc3
	ble	.L768	@cond_branch
.L769:
	ldr	r0, .L777
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	sub	r0, r0, #0x1
	b	.L776
.L778:
	.align	2, 0
.L777:
	.word	gBattleAnimAttacker
.L768:
	ldr	r0, .L779
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r0, r0, #0x1
.L776:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	mov	r3, #0x38
	ldrsh	r2, [r4, r3]
	cmp	r2, #0
	bne	.L771	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	add	r0, r1, #0
	ldrh	r3, [r4, #0x32]
	add	r0, r0, r3
	strh	r0, [r4, #0x32]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r3, [r4, #0x34]
	add	r0, r0, r3
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x2e
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	bne	.L773	@cond_branch
	strh	r2, [r4, #0x36]
	mov	r0, #0x1
	strh	r0, [r4, #0x38]
	b	.L773
.L780:
	.align	2, 0
.L779:
	.word	gBattleAnimAttacker
.L771:
	cmp	r2, #0x1
	bne	.L773	@cond_branch
	ldr	r1, .L781
	add	r0, r1, #0
	ldrh	r2, [r4, #0x32]
	add	r0, r0, r2
	strh	r0, [r4, #0x32]
	ldr	r3, .L781+0x4
	add	r0, r3, #0
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L773	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L773:
	pop	{r4}
	pop	{r0}
	bx	r0
.L782:
	.align	2, 0
.L781:
	.word	-0x400
	.word	-0x100
.Lfe75:
	.size	 AnimReversalOrb_Step,.Lfe75-AnimReversalOrb_Step
	.align	2, 0
	.globl	AnimTask_RolePlaySilhouette
	.type	 AnimTask_RolePlaySilhouette,function
	.thumb_func
AnimTask_RolePlaySilhouette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x1c]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L784	@cond_branch
	mov	r0, #0x1
	str	r0, [sp, #0x20]
	ldr	r0, .L799
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldr	r1, [r0, #0x10]
	str	r1, [sp, #0x24]
	ldr	r2, [r0, #0xc]
	mov	sl, r2
	ldrh	r6, [r0, #0x2]
	mov	r3, #0x14
	mov	r9, r3
	b	.L796
.L800:
	.align	2, 0
.L799:
	.word	gContestResources
.L784:
	ldr	r0, .L801
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L786	@cond_branch
	mov	r0, #0x0
	str	r0, [sp, #0x20]
	ldr	r1, .L801+0x4
	mov	r8, r1
	ldr	r5, .L801+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r4, .L801+0xc
	add	r0, r0, r4
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x24]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r4
	mov	r1, #0x1
	bl	GetMonData
	mov	sl, r0
	ldr	r0, .L801+0x10
	ldr	r0, [r0]
	ldrb	r2, [r5]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L787	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L788	@cond_branch
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r4
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r4
	mov	r1, #0x59
	bl	GetMonData
	b	.L797
.L802:
	.align	2, 0
.L801:
	.word	gBattleAnimAttacker
	.word	gBattlerPartyIndexes
	.word	gBattleAnimTarget
	.word	gPlayerParty
	.word	gBattleSpritesDataPtr
.L788:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r7
	ldr	r4, .L803
	add	r0, r0, r4
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r4
	mov	r1, #0x59
	bl	GetMonData
	b	.L797
.L804:
	.align	2, 0
.L803:
	.word	gEnemyParty
.L787:
	ldrh	r6, [r1, #0x2]
	add	r0, r6, #0
	bl	GetFormIdFromFormSpeciesId
.L797:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r2, #0x14
	mov	r9, r2
	b	.L796
.L786:
	mov	r3, #0x1
	str	r3, [sp, #0x20]
	ldr	r0, .L805
	mov	r8, r0
	ldr	r5, .L805+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r4, .L805+0x8
	add	r0, r0, r4
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x24]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r4
	mov	r1, #0x1
	bl	GetMonData
	mov	sl, r0
	ldr	r0, .L805+0xc
	ldr	r0, [r0]
	ldrb	r2, [r5]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L792	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L793	@cond_branch
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r7
	ldr	r4, .L805+0x10
	add	r0, r0, r4
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r4
	mov	r1, #0x59
	bl	GetMonData
	b	.L798
.L806:
	.align	2, 0
.L805:
	.word	gBattlerPartyIndexes
	.word	gBattleAnimTarget
	.word	gEnemyParty
	.word	gBattleSpritesDataPtr
	.word	gPlayerParty
.L793:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r4
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r4
	mov	r1, #0x59
	bl	GetMonData
	b	.L798
.L792:
	ldrh	r6, [r1, #0x2]
	add	r0, r6, #0
	bl	GetFormIdFromFormSpeciesId
.L798:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L807
	mov	r9, r1
.L796:
	ldr	r0, .L807+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r5, .L807+0x4
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	mov	r2, r9
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	add	r4, r4, r1
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0x5
	str	r0, [sp, #0x4]
	ldr	r3, [sp, #0x24]
	str	r3, [sp, #0x8]
	mov	r0, sl
	str	r0, [sp, #0xc]
	ldr	r0, .L807+0x8
	ldrb	r0, [r0]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	str	r0, [sp, #0x14]
	mov	r1, r8
	str	r1, [sp, #0x18]
	add	r0, r6, #0
	ldr	r1, [sp, #0x20]
	mov	r2, #0x0
	add	r3, r4, #0
	bl	sub_80A8394
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L807+0xc
	lsl	r5, r6, #0x4
	add	r5, r5, r6
	lsl	r5, r5, #0x2
	add	r5, r5, r0
	mov	r0, #0x3
	and	r7, r7, r0
	lsl	r7, r7, #0x2
	mov	r8, r7
	ldrb	r0, [r5, #0x5]
	mov	r4, #0xd
	neg	r4, r4
	add	r1, r4, #0
	and	r1, r1, r0
	mov	r2, r8
	orr	r1, r1, r2
	strb	r1, [r5, #0x5]
	ldrb	r2, [r5, #0x1]
	add	r0, r4, #0
	and	r0, r0, r2
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r5, #0x1]
	ldr	r0, .L807+0x10
	lsr	r1, r1, #0x4
	lsl	r1, r1, #0x4
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r2, r3, #0
	orr	r1, r1, r2
	mov	r2, #0x20
	bl	FillPalette
	ldrb	r0, [r5, #0x5]
	and	r4, r4, r0
	mov	r0, r8
	orr	r4, r4, r0
	strb	r4, [r5, #0x5]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, .L807+0x14
	ldr	r1, [sp, #0x1c]
	lsl	r4, r1, #0x2
	add	r4, r4, r1
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r4, #0xa]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	strh	r6, [r4, #0x8]
	ldr	r0, .L807+0x18
	str	r0, [r4]
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L808:
	.align	2, 0
.L807:
	.word	0xffec
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gSprites
	.word	0x7fff
	.word	gTasks
	.word	AnimTask_RolePlaySilhouette_Step1
.Lfe76:
	.size	 AnimTask_RolePlaySilhouette,.Lfe76-AnimTask_RolePlaySilhouette
	.align	2, 0
	.type	 AnimTask_RolePlaySilhouette_Step1,function
	.thumb_func
AnimTask_RolePlaySilhouette_Step1:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L812
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L810	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xa
	bne	.L810	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	strh	r0, [r4, #0x1e]
	ldr	r0, .L812+0x4
	str	r0, [r4]
.L810:
	pop	{r4}
	pop	{r0}
	bx	r0
.L813:
	.align	2, 0
.L812:
	.word	gTasks
	.word	AnimTask_RolePlaySilhouette_Step2
.Lfe77:
	.size	 AnimTask_RolePlaySilhouette_Step1,.Lfe77-AnimTask_RolePlaySilhouette_Step1
	.align	2, 0
	.type	 AnimTask_RolePlaySilhouette_Step2,function
	.thumb_func
AnimTask_RolePlaySilhouette_Step2:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L816
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r5, r1, r2
	ldrb	r2, [r5, #0x8]
	ldrh	r0, [r5, #0x1c]
	sub	r0, r0, #0x10
	mov	r4, #0x0
	strh	r0, [r5, #0x1c]
	ldrh	r0, [r5, #0x1e]
	add	r0, r0, #0x80
	strh	r0, [r5, #0x1e]
	ldr	r1, .L816+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r6, r0, r1
	ldrb	r2, [r6, #0x1]
	lsl	r1, r2, #0x1e
	lsr	r1, r1, #0x1e
	mov	r0, #0x2
	orr	r1, r1, r0
	sub	r0, r0, #0x6
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r6, #0x1]
	mov	r0, #0x1c
	ldrsh	r2, [r5, r0]
	mov	r0, #0x1e
	ldrsh	r3, [r5, r0]
	str	r4, [sp]
	add	r0, r6, #0
	mov	r1, #0x1
	bl	TrySetSpriteRotScale
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bne	.L815	@cond_branch
	add	r0, r6, #0
	bl	sub_80A749C
	add	r0, r6, #0
	bl	DestroySpriteAndFreeResources_
	ldr	r0, .L816+0x8
	str	r0, [r5]
.L815:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L817:
	.align	2, 0
.L816:
	.word	gTasks
	.word	gSprites
	.word	DestroyAnimVisualTaskAndDisableBlend
.Lfe78:
	.size	 AnimTask_RolePlaySilhouette_Step2,.Lfe78-AnimTask_RolePlaySilhouette_Step2
	.align	2, 0
	.globl	AnimTask_AcidArmor
	.type	 AnimTask_AcidArmor,function
	.thumb_func
AnimTask_AcidArmor:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L832
	add	r4, r1, r0
	ldr	r0, .L832+0x4
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L819	@cond_branch
	ldr	r0, .L832+0x8
	b	.L830
.L833:
	.align	2, 0
.L832:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L819:
	ldr	r0, .L834
.L830:
	ldrb	r5, [r0]
	mov	r6, #0x0
	strh	r6, [r4, #0x8]
	strh	r6, [r4, #0xa]
	strh	r6, [r4, #0xc]
	mov	r0, #0x10
	strh	r0, [r4, #0xe]
	strh	r6, [r4, #0x10]
	strh	r5, [r4, #0x12]
	mov	r0, #0x20
	strh	r0, [r4, #0x14]
	strh	r6, [r4, #0x16]
	mov	r0, #0x18
	strh	r0, [r4, #0x18]
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L821	@cond_branch
	mov	r1, #0x18
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x18]
.L821:
	add	r0, r5, #0
	bl	GetBattlerYCoordWithElevation
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x22
	strh	r0, [r4, #0x22]
	cmp	r0, #0
	bge	.L822	@cond_branch
	strh	r6, [r4, #0x22]
.L822:
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x42
	strh	r0, [r4, #0x24]
	ldr	r0, .L834+0x4
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	add	r0, r5, #0
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L823	@cond_branch
	ldr	r0, .L834+0x8
	str	r0, [sp]
	ldr	r1, .L834+0xc
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, .L834+0x10
	ldrh	r5, [r0]
	ldr	r0, .L834+0x14
	b	.L831
.L835:
	.align	2, 0
.L834:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0x4000014
	.word	0x3f42
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L823:
	ldr	r0, .L836
	str	r0, [sp]
	ldr	r1, .L836+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, .L836+0x8
	ldrh	r5, [r0]
	ldr	r0, .L836+0xc
.L831:
	ldrh	r3, [r0]
	mov	r7, #0x0
	mov	r2, #0x0
	ldr	r6, .L836+0x10
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mov	ip, r0
.L828:
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	lsl	r1, r2, #0x1
	add	r0, r1, r6
	strh	r5, [r0]
	add	r1, r1, ip
	strh	r5, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x1
	add	r1, r0, r6
	strh	r3, [r1]
	add	r0, r0, ip
	strh	r3, [r0]
	lsl	r0, r7, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	add	r2, r2, #0x2
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsr	r7, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.L828	@cond_branch
	ldr	r0, .L836+0x14
	str	r0, [sp, #0x4]
	mov	r1, sp
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
	mov	r0, sp
	strb	r2, [r0, #0x9]
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	ldr	r0, .L836+0x18
	str	r0, [r4]
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L837:
	.align	2, 0
.L836:
	.word	0x4000018
	.word	0x3f44
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gScanlineEffectRegBuffers
	.word	-0x599fffff
	.word	AnimTask_AcidArmor_Step
.Lfe79:
	.size	 AnimTask_AcidArmor,.Lfe79-AnimTask_AcidArmor
	.align	2, 0
	.type	 AnimTask_AcidArmor_Step,function
	.thumb_func
AnimTask_AcidArmor_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L868
	add	r6, r0, r1
	ldrb	r0, [r6, #0x12]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L839	@cond_branch
	ldr	r0, .L868+0x4
	ldrh	r0, [r0]
	str	r0, [sp, #0x4]
	ldr	r0, .L868+0x8
	b	.L866
.L869:
	.align	2, 0
.L868:
	.word	gTasks
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L839:
	ldr	r0, .L870
	ldrh	r0, [r0]
	str	r0, [sp, #0x4]
	ldr	r0, .L870+0x4
.L866:
	ldrh	r0, [r0]
	str	r0, [sp, #0x8]
	mov	r1, #0x8
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bne	.LCB8466
	b	.L856	@long jump
.LCB8466:
	cmp	r0, #0x1
	bgt	.L865	@cond_branch
	cmp	r0, #0
	beq	.L842	@cond_branch
	b	.L841
.L871:
	.align	2, 0
.L870:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L865:
	cmp	r0, #0x2
	bne	.LCB8482
	b	.L858	@long jump
.LCB8482:
	cmp	r0, #0x3
	bne	.LCB8484
	b	.L862	@long jump
.LCB8484:
	b	.L841
.L842:
	mov	r2, #0x24
	ldrsh	r0, [r6, r2]
	lsl	r0, r0, #0x11
	lsr	r5, r0, #0x10
	mov	r3, #0x0
	str	r3, [sp]
	mov	r9, r3
	mov	r4, #0x0
	ldrh	r0, [r6, #0xa]
	add	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r6, #0xa]
	ldrh	r7, [r6, #0xa]
	mov	r8, r7
	mov	r0, #0x14
	ldrsh	r1, [r6, r0]
	mov	r0, #0xfc
	lsl	r0, r0, #0x3
	bl	__divsi3
	strh	r0, [r6, #0x1a]
	mov	r1, #0x16
	ldrsh	r0, [r6, r1]
	lsl	r0, r0, #0x1
	mov	r2, #0x1a
	ldrsh	r1, [r6, r2]
	bl	__divsi3
	neg	r0, r0
	strh	r0, [r6, #0x1c]
	ldrh	r0, [r6, #0x16]
	strh	r0, [r6, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x15
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	strh	r7, [r6, #0x20]
	ldrh	r2, [r6, #0x24]
	lsl	r3, r2, #0x10
	mov	ip, r3
	asr	r1, r3, #0x10
	mov	r3, #0x22
	ldrsh	r0, [r6, r3]
	cmp	r1, r0
	ble	.L844	@cond_branch
	ldr	r0, .L872
	mov	sl, r0
	ldr	r1, [sp, #0x4]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp, #0x10]
	ldr	r2, [sp, #0x8]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp, #0xc]
.L845:
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r2, r5, #0x1
	lsl	r2, r2, #0x1
	mov	r3, sl
	ldrb	r1, [r3, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	ldr	r0, .L872+0x4
	add	r2, r2, r0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r1, r9
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	sub	r0, r4, r0
	ldr	r3, [sp, #0xc]
	add	r0, r3, r0
	strh	r0, [r2]
	lsl	r3, r5, #0x1
	mov	r0, sl
	ldrb	r1, [r0, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r3, r3, r0
	ldr	r1, .L872+0x4
	add	r3, r3, r1
	lsl	r1, r7, #0x10
	asr	r1, r1, #0x10
	ldr	r2, [sp, #0x10]
	add	r1, r2, r1
	mov	r7, r8
	lsl	r2, r7, #0x10
	asr	r2, r2, #0x10
	lsl	r0, r2, #0x1
	ldr	r7, .L872+0x8
	add	r0, r0, r7
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x15
	add	r1, r1, r0
	strh	r1, [r3]
	add	r2, r2, #0xa
	mov	r8, r2
	mov	r0, #0xff
	mov	r1, r8
	and	r1, r1, r0
	mov	r8, r1
	ldrh	r0, [r6, #0x1c]
	ldrh	r2, [r6, #0x1e]
	add	r0, r0, r2
	strh	r0, [r6, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x15
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	strh	r7, [r6, #0x20]
	add	r4, r4, #0x1
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	sub	r5, r5, #0x2
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r3, [sp]
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r6, #0x14]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	str	r2, [sp]
	asr	r0, r0, #0x15
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldr	r0, .L872+0xc
	add	r0, r0, ip
	lsr	r2, r0, #0x10
	lsl	r3, r2, #0x10
	mov	ip, r3
	asr	r1, r3, #0x10
	mov	r3, #0x22
	ldrsh	r0, [r6, r3]
	cmp	r1, r0
	bgt	.L845	@cond_branch
.L844:
	lsl	r1, r2, #0x11
	cmp	r1, #0
	blt	.L848	@cond_branch
	ldr	r4, .L872+0x4
	ldr	r7, [sp, #0x4]
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	add	r3, r0, #0
	add	r3, r3, #0xf0
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r5, r4, r0
.L849:
	asr	r2, r1, #0x10
	lsl	r1, r2, #0x1
	add	r0, r1, r4
	strh	r3, [r0]
	add	r1, r1, r5
	strh	r3, [r1]
	sub	r2, r2, #0x2
	lsl	r1, r2, #0x10
	cmp	r1, #0
	bge	.L849	@cond_branch
.L848:
	ldrh	r0, [r6, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3f
	ble	.L851	@cond_branch
	mov	r0, #0x40
	strh	r0, [r6, #0x14]
	ldrh	r0, [r6, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L852	@cond_branch
	ldrh	r0, [r6, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	b	.L853
.L873:
	.align	2, 0
.L872:
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
	.word	gSineTable
	.word	-0x10000
.L852:
	ldrh	r0, [r6, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x10]
.L853:
	ldrh	r1, [r6, #0x10]
	lsl	r1, r1, #0x8
	ldrh	r0, [r6, #0xe]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0xe
	ldrsh	r1, [r6, r2]
	cmp	r1, #0
	bne	.L841	@cond_branch
	mov	r3, #0x10
	ldrsh	r0, [r6, r3]
	cmp	r0, #0x10
	bne	.L841	@cond_branch
	strh	r1, [r6, #0xc]
	strh	r1, [r6, #0xe]
	b	.L867
.L851:
	ldrh	r0, [r6, #0x18]
	ldrh	r7, [r6, #0x16]
	add	r0, r0, r7
	strh	r0, [r6, #0x16]
	b	.L841
.L856:
	ldrh	r0, [r6, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L841	@cond_branch
	ldr	r1, .L874
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
	mov	r0, #0x0
	strh	r0, [r6, #0xc]
	b	.L867
.L875:
	.align	2, 0
.L874:
	.word	gScanlineEffect
.L858:
	ldrh	r0, [r6, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L859	@cond_branch
	ldrh	r0, [r6, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	b	.L860
.L859:
	ldrh	r0, [r6, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r6, #0x10]
.L860:
	ldrh	r1, [r6, #0x10]
	lsl	r1, r1, #0x8
	ldrh	r0, [r6, #0xe]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xe
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x10
	bne	.L841	@cond_branch
	mov	r2, #0x10
	ldrsh	r0, [r6, r2]
	cmp	r0, #0
	bne	.L841	@cond_branch
	strh	r0, [r6, #0xc]
	strh	r0, [r6, #0xe]
.L867:
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	b	.L841
.L862:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L841:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 AnimTask_AcidArmor_Step,.Lfe80-AnimTask_AcidArmor_Step
	.align	2, 0
	.globl	AnimTask_DeepInhale
	.type	 AnimTask_DeepInhale,function
	.thumb_func
AnimTask_DeepInhale:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L877
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L877+0x4
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	strh	r1, [r4, #0x26]
	ldr	r2, .L877+0x8
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L877+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L878:
	.align	2, 0
.L877:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gDeepInhaleAffineAnimCmds
	.word	AnimTask_DeepInhale_Step
.Lfe81:
	.size	 AnimTask_DeepInhale,.Lfe81-AnimTask_DeepInhale
	.align	2, 0
	.type	 AnimTask_DeepInhale_Step,function
	.thumb_func
AnimTask_DeepInhale_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r2, .L886
	add	r3, r0, r2
	ldrh	r0, [r3, #0x8]
	add	r1, r0, #0x1
	mov	r5, #0x0
	strh	r1, [r3, #0x8]
	sub	r0, r0, #0x14
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r6, r2, #0
	cmp	r0, #0x16
	bhi	.L880	@cond_branch
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L884	@cond_branch
	strh	r5, [r3, #0xa]
	ldrh	r0, [r3, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xc]
	mov	r5, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L880	@cond_branch
	ldr	r2, .L886+0x4
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L886+0x8
	strh	r1, [r0, #0x24]
	b	.L884
.L887:
	.align	2, 0
.L886:
	.word	gTasks
	.word	gSprites
	.word	0xffff
.L880:
	ldr	r2, .L888
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r5, [r0, #0x24]
.L884:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L885	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L885:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L889:
	.align	2, 0
.L888:
	.word	gSprites
.Lfe82:
	.size	 AnimTask_DeepInhale_Step,.Lfe82-AnimTask_DeepInhale_Step
	.align	2, 0
	.type	 InitYawnCloudPosition,function
	.thumb_func
InitYawnCloudPosition:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	mov	r8, r0
	add	r5, r2, #0
	add	r0, r3, #0
	ldr	r4, [sp, #0x14]
	ldr	r6, [sp, #0x18]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r2, r8
	strh	r1, [r2, #0x20]
	strh	r5, [r2, #0x22]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r1, #0x4
	mov	r3, r8
	strh	r2, [r3, #0x36]
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	lsl	r2, r5, #0x4
	strh	r2, [r3, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	add	r1, r6, #0
	bl	__divsi3
	mov	r1, r8
	strh	r0, [r1, #0x3a]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	sub	r4, r4, r5
	lsl	r4, r4, #0x4
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__divsi3
	mov	r2, r8
	strh	r0, [r2, #0x3c]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 InitYawnCloudPosition,.Lfe83-InitYawnCloudPosition
	.align	2, 0
	.type	 UpdateYawnCloudPosition,function
	.thumb_func
UpdateYawnCloudPosition:
	ldrh	r1, [r0, #0x3a]
	ldrh	r2, [r0, #0x36]
	add	r1, r1, r2
	strh	r1, [r0, #0x36]
	ldrh	r2, [r0, #0x3c]
	ldrh	r3, [r0, #0x38]
	add	r2, r2, r3
	strh	r2, [r0, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r0, #0x20]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x14
	strh	r2, [r0, #0x22]
	bx	lr
.Lfe84:
	.size	 UpdateYawnCloudPosition,.Lfe84-UpdateYawnCloudPosition
	.align	2, 0
	.type	 AnimYawnCloud,function
	.thumb_func
AnimYawnCloud:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	ldrh	r6, [r4, #0x20]
	ldrh	r5, [r4, #0x22]
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L893
	ldrb	r1, [r0]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	mov	r0, #0x20
	ldrsh	r1, [r4, r0]
	mov	r0, #0x22
	ldrsh	r2, [r4, r0]
	lsl	r6, r6, #0x10
	asr	r6, r6, #0x10
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	str	r5, [sp]
	mov	r0, #0x40
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	add	r3, r6, #0
	bl	InitYawnCloudPosition
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L893+0x4
	str	r0, [r4, #0x1c]
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L894:
	.align	2, 0
.L893:
	.word	gBattleAnimArgs
	.word	AnimYawnCloud_Step
.Lfe85:
	.size	 AnimYawnCloud,.Lfe85-AnimYawnCloud
	.align	2, 0
	.type	 AnimYawnCloud_Step,function
	.thumb_func
AnimYawnCloud_Step:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	mov	r0, #0x2e
	ldrsh	r4, [r5, r0]
	lsl	r4, r4, #0x3
	mov	r0, #0xff
	and	r4, r4, r0
	add	r0, r5, #0
	bl	UpdateYawnCloudPosition
	add	r0, r4, #0
	mov	r1, #0x8
	bl	Sin
	strh	r0, [r5, #0x26]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x3a
	ble	.L896	@cond_branch
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L896	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x30]
	ldrh	r1, [r5, #0x32]
	add	r1, r1, #0x1
	strh	r1, [r5, #0x32]
	mov	r0, #0x1
	and	r1, r1, r0
	add	r3, r5, #0
	add	r3, r3, #0x3e
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	sub	r0, r0, #0x6
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x3
	ble	.L896	@cond_branch
	add	r0, r5, #0
	bl	DestroySpriteAndMatrix
.L896:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 AnimYawnCloud_Step,.Lfe86-AnimYawnCloud_Step
	.align	2, 0
	.type	 AnimSmokeBallEscapeCloud,function
	.thumb_func
AnimSmokeBallEscapeCloud:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L901
	ldrh	r0, [r6, #0x6]
	strh	r0, [r5, #0x2e]
	ldrb	r1, [r6]
	add	r0, r5, #0
	bl	StartSpriteAffineAnim
	ldr	r0, .L901+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L900	@cond_branch
	ldrh	r0, [r6, #0x2]
	neg	r0, r0
	strh	r0, [r6, #0x2]
.L900:
	ldr	r4, .L901+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x4]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	ldr	r0, .L901+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L902:
	.align	2, 0
.L901:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	DestroyAnimSpriteAfterTimer
.Lfe87:
	.size	 AnimSmokeBallEscapeCloud,.Lfe87-AnimSmokeBallEscapeCloud
	.align	2, 0
	.type	 sub_815D8D8,function
	.thumb_func
sub_815D8D8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r7, #0x0
	ldr	r2, .L915
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	mov	r1, #0x14
	ldrsh	r0, [r3, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r8, r2
	cmp	r0, #0
	beq	.L904	@cond_branch
	ldrh	r0, [r3, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L904	@cond_branch
	mov	r2, #0x1a
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	bne	.L905	@cond_branch
	ldrh	r0, [r3, #0x10]
	strh	r0, [r3, #0x1a]
	neg	r0, r0
	strh	r0, [r3, #0x10]
	b	.L906
.L916:
	.align	2, 0
.L915:
	.word	gTasks
.L905:
	strh	r7, [r3, #0x1a]
.L906:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	mov	r2, r8
	add	r1, r0, r2
	mov	r2, #0x1c
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L907	@cond_branch
	ldrh	r0, [r1, #0x12]
	strh	r0, [r1, #0x1c]
	neg	r0, r0
	strh	r0, [r1, #0x12]
	b	.L908
.L907:
	mov	r0, #0x0
	strh	r0, [r1, #0x1c]
.L908:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0xa]
.L904:
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r4, r0, r1
	ldrh	r6, [r4, #0x16]
	ldrh	r7, [r4, #0x18]
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	ip, r2
	cmp	r0, #0
	beq	.L909	@cond_branch
	ldr	r3, .L917
	mov	r2, #0x26
	ldrsh	r0, [r4, r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	lsr	r2, r6, #0x8
	ldrh	r0, [r4, #0x1a]
	sub	r0, r0, r2
	strh	r0, [r1, #0x24]
	add	r2, r3, #0
	b	.L910
.L918:
	.align	2, 0
.L917:
	.word	gSprites
.L909:
	ldr	r2, .L919
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	lsr	r1, r6, #0x8
	ldrh	r4, [r4, #0x1a]
	add	r1, r1, r4
	strh	r1, [r0, #0x24]
.L910:
	mov	r1, ip
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r4, r0, r1
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L911	@cond_branch
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsr	r2, r7, #0x8
	ldrh	r0, [r4, #0x1c]
	sub	r0, r0, r2
	b	.L914
.L920:
	.align	2, 0
.L919:
	.word	gSprites
.L911:
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsr	r0, r7, #0x8
	ldrh	r4, [r4, #0x1c]
	add	r0, r0, r4
.L914:
	strh	r0, [r1, #0x26]
	mov	r2, ip
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bgt	.L913	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r1, .L921
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L913:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L922:
	.align	2, 0
.L921:
	.word	gAnimVisualTaskCount
.Lfe88:
	.size	 sub_815D8D8,.Lfe88-sub_815D8D8
	.align	2, 0
	.type	 sub_815DA20,function
	.thumb_func
sub_815DA20:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r7, #0x0
	ldr	r2, .L935
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	mov	r1, #0x14
	ldrsh	r0, [r3, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r8, r2
	cmp	r0, #0
	beq	.L924	@cond_branch
	ldrh	r0, [r3, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L924	@cond_branch
	mov	r2, #0x1a
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	bne	.L925	@cond_branch
	ldrh	r0, [r3, #0x10]
	strh	r0, [r3, #0x1a]
	neg	r0, r0
	strh	r0, [r3, #0x10]
	b	.L926
.L936:
	.align	2, 0
.L935:
	.word	gTasks
.L925:
	strh	r7, [r3, #0x1a]
.L926:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	mov	r2, r8
	add	r1, r0, r2
	mov	r2, #0x1c
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L927	@cond_branch
	ldrh	r0, [r1, #0x12]
	strh	r0, [r1, #0x1c]
	neg	r0, r0
	strh	r0, [r1, #0x12]
	b	.L928
.L927:
	mov	r0, #0x0
	strh	r0, [r1, #0x1c]
.L928:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0xa]
.L924:
	lsl	r3, r6, #0x2
	add	r0, r3, r6
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r4, r0, r1
	ldrh	r2, [r4, #0xc]
	ldr	r1, .L937
	add	r0, r1, #0
	and	r0, r0, r2
	ldrh	r2, [r4, #0x16]
	add	r0, r0, r2
	lsl	r5, r0, #0x10
	lsr	r0, r5, #0x10
	mov	r9, r0
	ldrh	r0, [r4, #0xe]
	and	r1, r1, r0
	ldrh	r2, [r4, #0x18]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	ip, r3
	cmp	r0, #0
	beq	.L929	@cond_branch
	ldr	r3, .L937+0x4
	mov	r2, #0x26
	ldrsh	r0, [r4, r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	lsr	r2, r5, #0x18
	ldrh	r0, [r4, #0x1a]
	sub	r0, r0, r2
	strh	r0, [r1, #0x24]
	add	r2, r3, #0
	b	.L930
.L938:
	.align	2, 0
.L937:
	.word	0x7fff
	.word	gSprites
.L929:
	ldr	r2, .L939
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	lsr	r1, r5, #0x18
	ldrh	r4, [r4, #0x1a]
	add	r1, r1, r4
	strh	r1, [r0, #0x24]
.L930:
	mov	r1, ip
	add	r0, r1, r6
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r4, r0, r1
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L931	@cond_branch
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsr	r2, r7, #0x8
	ldrh	r0, [r4, #0x1c]
	sub	r0, r0, r2
	b	.L934
.L940:
	.align	2, 0
.L939:
	.word	gSprites
.L931:
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsr	r0, r7, #0x8
	ldrh	r4, [r4, #0x1c]
	add	r0, r0, r4
.L934:
	strh	r0, [r1, #0x26]
	mov	r2, ip
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r2, r0, r1
	mov	r0, r9
	strh	r0, [r2, #0x16]
	strh	r7, [r2, #0x18]
	mov	r1, #0x8
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bgt	.L933	@cond_branch
	mov	r0, #0x1e
	strh	r0, [r2, #0x8]
	mov	r0, #0x0
	strh	r0, [r2, #0x22]
	ldr	r0, .L941
	str	r0, [r2]
.L933:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L942:
	.align	2, 0
.L941:
	.word	sub_815D8D8
.Lfe89:
	.size	 sub_815DA20,.Lfe89-sub_815DA20
	.align	2, 0
	.globl	AnimTask_SlideMonForFocusBand
	.type	 AnimTask_SlideMonForFocusBand,function
	.thumb_func
AnimTask_SlideMonForFocusBand:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L953
	mov	r8, r0
	lsl	r7, r6, #0x2
	add	r0, r7, r6
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r4, r0, r1
	ldr	r1, .L953+0x4
	ldr	r2, .L953+0x8
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x26]
	ldr	r5, .L953+0xc
	ldrh	r0, [r5]
	strh	r0, [r4, #0x24]
	ldrh	r0, [r5]
	strh	r0, [r4, #0x8]
	ldrh	r0, [r5, #0xc]
	strh	r0, [r4, #0x22]
	mov	r3, #0x6
	ldrsh	r0, [r5, r3]
	cmp	r0, #0
	beq	.L944	@cond_branch
	ldrh	r0, [r4, #0x14]
	ldr	r3, .L953+0x10
	add	r1, r3, #0
	orr	r0, r0, r1
	strh	r0, [r4, #0x14]
.L944:
	ldrb	r0, [r2]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L945	@cond_branch
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0xc]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0xe]
	mov	r3, r8
	add	r4, r7, #0
	b	.L946
.L954:
	.align	2, 0
.L953:
	.word	gTasks
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	-0x8000
.L945:
	mov	r7, #0x2
	ldrsh	r0, [r5, r7]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L947	@cond_branch
	ldrh	r1, [r5, #0x2]
	ldr	r0, .L955
	and	r0, r0, r1
	b	.L951
.L956:
	.align	2, 0
.L955:
	.word	0x7fff
.L947:
	ldrh	r0, [r5, #0x2]
	ldr	r2, .L957
	add	r1, r2, #0
	orr	r0, r0, r1
.L951:
	strh	r0, [r4, #0xc]
	ldr	r0, .L957+0x4
	mov	r3, #0x4
	ldrsh	r1, [r0, r3]
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	and	r1, r1, r2
	add	r5, r0, #0
	cmp	r1, #0
	beq	.L949	@cond_branch
	ldr	r3, .L957+0x8
	lsl	r4, r6, #0x2
	add	r1, r4, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	ldrh	r2, [r5, #0x4]
	ldr	r0, .L957+0xc
	and	r0, r0, r2
	b	.L952
.L958:
	.align	2, 0
.L957:
	.word	-0x8000
	.word	gBattleAnimArgs
	.word	gTasks
	.word	0x7fff
.L949:
	ldr	r3, .L959
	lsl	r4, r6, #0x2
	add	r1, r4, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	ldrh	r2, [r5, #0x4]
	ldr	r7, .L959+0x4
	add	r0, r7, #0
	orr	r0, r0, r2
.L952:
	strh	r0, [r1, #0xe]
.L946:
	add	r0, r4, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x18]
	strh	r1, [r0, #0x16]
	ldrh	r1, [r5, #0x8]
	strh	r1, [r0, #0x10]
	ldrh	r1, [r5, #0xa]
	strh	r1, [r0, #0x12]
	ldr	r1, .L959+0x8
	str	r1, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L960:
	.align	2, 0
.L959:
	.word	gTasks
	.word	-0x8000
	.word	sub_815DA20
.Lfe90:
	.size	 AnimTask_SlideMonForFocusBand,.Lfe90-AnimTask_SlideMonForFocusBand
	.align	2, 0
	.globl	AnimTask_SquishAndSweatDroplets
	.type	 AnimTask_SquishAndSweatDroplets,function
	.thumb_func
AnimTask_SquishAndSweatDroplets:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L966
	add	r5, r0, r1
	ldr	r4, .L966+0x4
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L962	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L962:
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	strh	r0, [r5, #0xa]
	strh	r0, [r5, #0xc]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0xe]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L963	@cond_branch
	ldr	r0, .L966+0x8
	b	.L965
.L967:
	.align	2, 0
.L966:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L963:
	ldr	r0, .L968
.L965:
	ldrb	r4, [r0]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x10]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x12]
	add	r0, r4, #0
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	ldr	r0, .L968+0x4
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	strh	r1, [r5, #0x26]
	ldr	r2, .L968+0x8
	add	r0, r5, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L968+0xc
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L969:
	.align	2, 0
.L968:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gFacadeSquishAffineAnimCmds
	.word	AnimTask_SquishAndSweatDroplets_Step
.Lfe91:
	.size	 AnimTask_SquishAndSweatDroplets,.Lfe91-AnimTask_SquishAndSweatDroplets
	.align	2, 0
	.type	 AnimTask_SquishAndSweatDroplets_Step,function
	.thumb_func
AnimTask_SquishAndSweatDroplets_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L982
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L972	@cond_branch
	cmp	r0, #0x1
	beq	.L978	@cond_branch
	b	.L971
.L983:
	.align	2, 0
.L982:
	.word	gTasks
.L972:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L973	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	CreateSweatDroplets
.L973:
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x12
	bne	.L974	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	CreateSweatDroplets
.L974:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L971	@cond_branch
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L976	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L971
.L976:
	strh	r1, [r4, #0xa]
	ldrh	r1, [r4, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L984
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	b	.L971
.L985:
	.align	2, 0
.L984:
	.word	gFacadeSquishAffineAnimCmds
.L978:
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L971	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L971:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe92:
	.size	 AnimTask_SquishAndSweatDroplets_Step,.Lfe92-AnimTask_SquishAndSweatDroplets_Step
	.align	2, 0
	.type	 CreateSweatDroplets,function
	.thumb_func
CreateSweatDroplets:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r2, .L997
	add	r4, r0, r2
	cmp	r1, #0
	bne	.L987	@cond_branch
	mov	r1, #0x12
	mov	r3, #0xec
	b	.L988
.L998:
	.align	2, 0
.L997:
	.word	gTasks
.L987:
	mov	r1, #0x1e
	mov	r3, #0x14
.L988:
	mov	r2, sp
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, r1
	sub	r0, r0, #0x4
	strh	r0, [r2, #0x2]
	ldrh	r0, [r4, #0x10]
	add	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrh	r0, [r4, #0x10]
	add	r0, r0, r1
	add	r0, r0, #0x4
	strh	r0, [r2, #0x6]
	add	r2, sp, #0x8
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x12]
	add	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r4, #0x12]
	add	r0, r0, r1
	add	r0, r0, #0x6
	strh	r0, [r2, #0x2]
	mov	r5, #0x0
	mov	r8, r2
	ldr	r7, .L999
.L992:
	lsl	r0, r5, #0x1
	add	r0, r0, sp
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r0, #0x1
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r3, #0x0
	ldrsh	r2, [r0, r3]
	ldrb	r3, [r4, #0x14]
	sub	r3, r3, #0x5
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L999+0x4
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x40
	beq	.L991	@cond_branch
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	mov	r0, #0x2
	cmp	r5, #0x1
	bhi	.L994	@cond_branch
	mov	r2, #0x2
	neg	r2, r2
	add	r0, r2, #0
.L994:
	strh	r0, [r1, #0x30]
	ldr	r0, .L999+0x8
	strh	r0, [r1, #0x32]
	strh	r6, [r1, #0x34]
	mov	r0, #0x2
	strh	r0, [r1, #0x36]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
.L991:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L992	@cond_branch
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1000:
	.align	2, 0
.L999:
	.word	gSprites
	.word	gFacadeSweatDropSpriteTemplate
	.word	0xffff
.Lfe93:
	.size	 CreateSweatDroplets,.Lfe93-CreateSweatDroplets
	.align	2, 0
	.type	 AnimFacadeSweatDrop,function
	.thumb_func
AnimFacadeSweatDrop:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x32]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	ble	.L1002	@cond_branch
	ldr	r3, .L1003
	mov	r0, #0x36
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x34
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L1002:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1004:
	.align	2, 0
.L1003:
	.word	gTasks
.Lfe94:
	.size	 AnimFacadeSweatDrop,.Lfe94-AnimFacadeSweatDrop
	.align	2, 0
	.globl	AnimTask_FacadeColorBlend
	.type	 AnimTask_FacadeColorBlend,function
	.thumb_func
AnimTask_FacadeColorBlend:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1006
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r1, .L1006+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0xa]
	ldrb	r0, [r1]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1006+0x8
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x5]
	lsr	r0, r0, #0x4
	lsl	r0, r0, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r2, #0
	add	r0, r0, r1
	strh	r0, [r4, #0xc]
	ldr	r0, .L1006+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1007:
	.align	2, 0
.L1006:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gSprites
	.word	AnimTask_FacadeColorBlend_Step
.Lfe95:
	.size	 AnimTask_FacadeColorBlend,.Lfe95-AnimTask_FacadeColorBlend
	.align	2, 0
	.type	 AnimTask_FacadeColorBlend_Step,function
	.thumb_func
AnimTask_FacadeColorBlend_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1012
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1009	@cond_branch
	ldrh	r0, [r4, #0xc]
	ldr	r2, .L1012+0x4
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r3, [r1]
	mov	r1, #0x10
	mov	r2, #0x8
	bl	BlendPalette
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x17
	ble	.L1010	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
.L1010:
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L1011
.L1013:
	.align	2, 0
.L1012:
	.word	gTasks
	.word	gFacadeBlendColors
.L1009:
	ldrh	r0, [r4, #0xc]
	mov	r1, #0x10
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BlendPalette
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L1011:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 AnimTask_FacadeColorBlend_Step,.Lfe96-AnimTask_FacadeColorBlend_Step
	.align	2, 0
	.globl	AnimTask_StatusClearedEffect
	.type	 AnimTask_StatusClearedEffect,function
	.thumb_func
AnimTask_StatusClearedEffect:
	push	{lr}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0xd0
	lsl	r2, r2, #0x1
	ldr	r1, .L1015
	ldrb	r3, [r1]
	ldr	r1, .L1015+0x4
	ldrb	r1, [r1]
	str	r1, [sp]
	mov	r1, #0xa
	str	r1, [sp, #0x4]
	mov	r1, #0x2
	str	r1, [sp, #0x8]
	mov	r1, #0x1e
	str	r1, [sp, #0xc]
	ldr	r1, .L1015+0x8
	str	r1, [sp, #0x10]
	ldr	r1, .L1015+0xc
	str	r1, [sp, #0x14]
	ldr	r1, .L1015+0x10
	str	r1, [sp, #0x18]
	mov	r1, #0x0
	bl	sub_8117854
	add	sp, sp, #0x1c
	pop	{r0}
	bx	r0
.L1016:
	.align	2, 0
.L1015:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gCureBubblesGfx
	.word	gCureBubblesTilemap
	.word	gCureBubblesPal
.Lfe97:
	.size	 AnimTask_StatusClearedEffect,.Lfe97-AnimTask_StatusClearedEffect
	.align	2, 0
	.type	 AnimRoarNoiseLine,function
	.thumb_func
AnimRoarNoiseLine:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L1024
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1018	@cond_branch
	ldr	r1, .L1024+0x4
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r1]
.L1018:
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L1024+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1019	@cond_branch
	mov	r0, #0xa0
	lsl	r0, r0, #0x2
	strh	r0, [r5, #0x2e]
	ldr	r0, .L1024+0x8
	strh	r0, [r5, #0x30]
	b	.L1020
.L1025:
	.align	2, 0
.L1024:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	0xfd80
.L1019:
	cmp	r0, #0x1
	bne	.L1021	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0xa0
	lsl	r0, r0, #0x2
	strh	r0, [r5, #0x2e]
	strh	r0, [r5, #0x30]
	b	.L1020
.L1021:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	mov	r0, #0xa0
	lsl	r0, r0, #0x2
	strh	r0, [r5, #0x2e]
.L1020:
	ldr	r0, .L1026
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1023	@cond_branch
	ldrh	r0, [r5, #0x2e]
	neg	r0, r0
	strh	r0, [r5, #0x2e]
	add	r2, r5, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L1023:
	ldr	r0, .L1026+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1027:
	.align	2, 0
.L1026:
	.word	gBattleAnimAttacker
	.word	AnimRoarNoiseLine_Step
.Lfe98:
	.size	 AnimRoarNoiseLine,.Lfe98-AnimRoarNoiseLine
	.align	2, 0
	.type	 AnimRoarNoiseLine_Step,function
	.thumb_func
AnimRoarNoiseLine_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x3a]
	add	r0, r0, r1
	strh	r0, [r2, #0x3a]
	ldrh	r1, [r2, #0x30]
	ldrh	r3, [r2, #0x3c]
	add	r1, r1, r3
	strh	r1, [r2, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r2, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r2, #0x26]
	ldrh	r0, [r2, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xe
	bne	.L1029	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L1029:
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 AnimRoarNoiseLine_Step,.Lfe99-AnimRoarNoiseLine_Step
	.align	2, 0
	.globl	AnimTask_GlareEyeDots
	.type	 AnimTask_GlareEyeDots,function
	.thumb_func
AnimTask_GlareEyeDots:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L1039
	add	r6, r1, r0
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L1031	@cond_branch
	mov	r0, #0x8
	strh	r0, [r6, #0x12]
	mov	r0, #0x3
	strh	r0, [r6, #0x14]
	mov	r0, #0x1
	strh	r0, [r6, #0x16]
	b	.L1032
.L1040:
	.align	2, 0
.L1039:
	.word	gTasks
.L1031:
	mov	r0, #0xc
	strh	r0, [r6, #0x12]
	mov	r0, #0x3
	strh	r0, [r6, #0x14]
	strh	r1, [r6, #0x16]
.L1032:
	ldr	r5, .L1041
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1033	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1034	@cond_branch
	add	r0, r0, #0x3
.L1034:
	asr	r0, r0, #0x2
	add	r0, r4, r0
	b	.L1038
.L1042:
	.align	2, 0
.L1041:
	.word	gBattleAnimAttacker
.L1033:
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1036	@cond_branch
	add	r0, r0, #0x3
.L1036:
	asr	r0, r0, #0x2
	sub	r0, r4, r0
.L1038:
	strh	r0, [r6, #0x1e]
	ldr	r5, .L1043
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1037	@cond_branch
	add	r0, r0, #0x3
.L1037:
	asr	r0, r0, #0x2
	sub	r0, r4, r0
	strh	r0, [r6, #0x20]
	ldr	r4, .L1043+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x24]
	ldr	r0, .L1043+0x8
	str	r0, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1044:
	.align	2, 0
.L1043:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	AnimTask_GlareEyeDots_Step
.Lfe100:
	.size	 AnimTask_GlareEyeDots,.Lfe100-AnimTask_GlareEyeDots
	.align	2, 0
	.type	 AnimTask_GlareEyeDots_Step,function
	.thumb_func
AnimTask_GlareEyeDots_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L1068
	add	r5, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	cmp	r1, #0
	beq	.L1047	@cond_branch
	cmp	r1, #0x1
	bne	.LCB10822
	b	.L1062	@long jump
.LCB10822:
	b	.L1046
.L1069:
	.align	2, 0
.L1068:
	.word	gTasks
.L1047:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L1046	@cond_branch
	strh	r1, [r5, #0xa]
	mov	r1, #0x1e
	ldrsh	r0, [r5, r1]
	mov	r2, #0x20
	ldrsh	r1, [r5, r2]
	mov	r3, #0x22
	ldrsh	r2, [r5, r3]
	mov	r4, #0x24
	ldrsh	r3, [r5, r4]
	ldrb	r4, [r5, #0x12]
	str	r4, [sp]
	ldrb	r4, [r5, #0xc]
	str	r4, [sp, #0x4]
	add	r4, sp, #0x10
	str	r4, [sp, #0x8]
	add	r4, r4, #0x2
	str	r4, [sp, #0xc]
	bl	GetGlareEyeDotCoords
	mov	r6, #0x0
	mov	r8, r4
	ldr	r4, .L1070
.L1052:
	add	r0, sp, #0x10
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r3, r8
	mov	r0, #0x0
	ldrsh	r2, [r3, r0]
	ldr	r0, .L1070+0x4
	mov	r3, #0x23
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x40
	beq	.L1051	@cond_branch
	mov	r1, #0x16
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L1054	@cond_branch
	cmp	r6, #0
	bne	.L1055	@cond_branch
	lsl	r2, r3, #0x4
	add	r1, r2, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r5, #0x14]
	neg	r0, r0
	strh	r0, [r1, #0x26]
	strh	r0, [r1, #0x24]
	b	.L1066
.L1071:
	.align	2, 0
.L1070:
	.word	gSprites
	.word	gGlareEyeDotSpriteTemplate
.L1055:
	lsl	r2, r3, #0x4
	add	r1, r2, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r5, #0x14]
	strh	r0, [r1, #0x26]
	ldrh	r0, [r5, #0x14]
	strh	r0, [r1, #0x24]
	b	.L1066
.L1054:
	cmp	r6, #0
	bne	.L1058	@cond_branch
	lsl	r2, r3, #0x4
	add	r1, r2, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r5, #0x14]
	neg	r0, r0
	strh	r0, [r1, #0x24]
	ldrh	r0, [r5, #0x14]
	b	.L1067
.L1058:
	lsl	r2, r3, #0x4
	add	r1, r2, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r5, #0x14]
	strh	r0, [r1, #0x24]
	ldrh	r0, [r5, #0x14]
	neg	r0, r0
.L1067:
	strh	r0, [r1, #0x26]
.L1066:
	ldr	r1, .L1072
	add	r0, r2, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	strh	r7, [r0, #0x30]
	mov	r1, #0xa
	strh	r1, [r0, #0x32]
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
.L1051:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x1
	bls	.L1052	@cond_branch
	ldrh	r2, [r5, #0xc]
	mov	r3, #0xc
	ldrsh	r1, [r5, r3]
	mov	r4, #0x12
	ldrsh	r0, [r5, r4]
	cmp	r1, r0
	bne	.L1061	@cond_branch
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
.L1061:
	add	r0, r2, #0x1
	strh	r0, [r5, #0xc]
	b	.L1046
.L1073:
	.align	2, 0
.L1072:
	.word	gSprites
.L1062:
	mov	r1, #0x1c
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L1046	@cond_branch
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L1046:
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 AnimTask_GlareEyeDots_Step,.Lfe101-AnimTask_GlareEyeDots_Step
	.align	2, 0
	.type	 GetGlareEyeDotCoords,function
	.thumb_func
GetGlareEyeDotCoords:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	ldr	r6, [sp, #0x30]
	mov	r9, r6
	ldr	r6, [sp, #0x34]
	mov	sl, r6
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	ip, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r1, [sp]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r7, r2, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	str	r3, [sp, #0x4]
	lsl	r4, r4, #0x18
	lsr	r6, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r8, r5
	cmp	r5, #0
	bne	.L1075	@cond_branch
	mov	r2, r9
	strh	r0, [r2]
	mov	r6, sl
	strh	r1, [r6]
	b	.L1074
.L1075:
	cmp	r5, r6
	bcc	.L1076	@cond_branch
	mov	r0, r9
	strh	r2, [r0]
	mov	r1, sl
	strh	r3, [r1]
	b	.L1074
.L1076:
	sub	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r2, ip
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	lsl	r5, r1, #0x8
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	add	r1, r6, #0
	bl	__divsi3
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r5, r5, r0
	ldr	r2, [sp]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	lsl	r4, r1, #0x8
	ldr	r2, [sp, #0x4]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	add	r1, r6, #0
	bl	__divsi3
	mov	r6, r8
	mul	r6, r6, r0
	add	r0, r6, #0
	add	r4, r4, r0
	asr	r5, r5, #0x8
	mov	r0, r9
	strh	r5, [r0]
	asr	r4, r4, #0x8
	mov	r1, sl
	strh	r4, [r1]
.L1074:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe102:
	.size	 GetGlareEyeDotCoords,.Lfe102-GetGlareEyeDotCoords
	.align	2, 0
	.type	 AnimGlareEyeDot,function
	.thumb_func
AnimGlareEyeDot:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x24
	ble	.L1078	@cond_branch
	ldr	r3, .L1079
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x30
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L1078:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1080:
	.align	2, 0
.L1079:
	.word	gTasks
.Lfe103:
	.size	 AnimGlareEyeDot,.Lfe103-AnimGlareEyeDot
	.align	2, 0
	.type	 AnimAssistPawprint,function
	.thumb_func
AnimAssistPawprint:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L1082
	ldrh	r0, [r1]
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x36]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x2e]
	ldr	r1, .L1082+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1082+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1083:
	.align	2, 0
.L1082:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	InitAndRunAnimFastLinearTranslation
.Lfe104:
	.size	 AnimAssistPawprint,.Lfe104-AnimAssistPawprint
	.align	2, 0
	.globl	AnimTask_BarrageBall
	.type	 AnimTask_BarrageBall,function
	.thumb_func
AnimTask_BarrageBall:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	ldr	r1, .L1089
	add	r7, r0, r1
	ldr	r0, .L1089+0x4
	mov	sl, r0
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x1e]
	mov	r1, sl
	ldrb	r0, [r1]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x20]
	ldr	r0, .L1089+0x8
	mov	r8, r0
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x22]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1085	@cond_branch
	add	r0, r0, #0x3
.L1085:
	asr	r0, r0, #0x2
	add	r0, r4, r0
	strh	r0, [r7, #0x24]
	ldr	r4, .L1089+0xc
	mov	r0, #0x1e
	ldrsh	r5, [r7, r0]
	mov	r1, #0x20
	ldrsh	r6, [r7, r1]
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	sub	r3, r3, #0x5
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x26]
	cmp	r0, #0x40
	beq	.L1086	@cond_branch
	ldr	r4, .L1089+0x10
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x10
	strh	r1, [r0, #0x2e]
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r7, #0x22]
	strh	r1, [r0, #0x32]
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r7, #0x24]
	strh	r1, [r0, #0x36]
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L1089+0x14
	strh	r1, [r0, #0x38]
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	InitAnimArcTranslation
	mov	r1, sl
	ldrb	r0, [r1]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1087	@cond_branch
	mov	r0, #0x26
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L1087:
	ldr	r0, .L1089+0x18
	str	r0, [r7]
	b	.L1088
.L1090:
	.align	2, 0
.L1089:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBarrageBallSpriteTemplate
	.word	gSprites
	.word	0xffe0
	.word	AnimTask_BarrageBall_Step
.L1086:
	mov	r0, r9
	bl	DestroyAnimVisualTask
.L1088:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe105:
	.size	 AnimTask_BarrageBall,.Lfe105-AnimTask_BarrageBall
	.align	2, 0
	.type	 AnimTask_BarrageBall_Step,function
	.thumb_func
AnimTask_BarrageBall_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L1106
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L1096	@cond_branch
	cmp	r1, #0x1
	bgt	.L1104	@cond_branch
	cmp	r1, #0
	beq	.L1093	@cond_branch
	b	.L1092
.L1107:
	.align	2, 0
.L1106:
	.word	gTasks
.L1104:
	cmp	r1, #0x2
	beq	.L1098	@cond_branch
	cmp	r1, #0x3
	beq	.L1101	@cond_branch
	b	.L1092
.L1093:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1092	@cond_branch
	strh	r1, [r4, #0xa]
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1108
	add	r0, r0, r1
	bl	TranslateAnimHorizontalArc
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	ble	.L1092	@cond_branch
	b	.L1105
.L1109:
	.align	2, 0
.L1108:
	.word	gSprites
.L1096:
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1110
	add	r0, r0, r1
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1092	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	b	.L1105
.L1111:
	.align	2, 0
.L1110:
	.word	gSprites
.L1098:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1092	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r2, [r4, #0xc]
	add	r2, r2, #0x1
	strh	r2, [r4, #0xc]
	ldr	r5, .L1112
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	mov	r0, #0x1
	and	r2, r2, r0
	add	r1, r1, #0x3e
	lsl	r2, r2, #0x2
	ldrb	r3, [r1]
	sub	r0, r0, #0x6
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1]
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L1092	@cond_branch
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
.L1105:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1092
.L1113:
	.align	2, 0
.L1112:
	.word	gSprites
.L1101:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L1092:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe106:
	.size	 AnimTask_BarrageBall_Step,.Lfe106-AnimTask_BarrageBall_Step
	.align	2, 0
	.type	 AnimSmellingSaltsHand,function
	.thumb_func
AnimSmellingSaltsHand:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r0, .L1123
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	add	r6, r0, #0
	cmp	r1, #0
	bne	.L1115	@cond_branch
	ldr	r0, .L1123+0x4
	b	.L1121
.L1124:
	.align	2, 0
.L1123:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1115:
	ldr	r0, .L1125
.L1121:
	ldrb	r5, [r0]
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x10
	ldr	r3, .L1125+0x4
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L1125+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	add	r1, r6, #0
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x3a]
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	mov	r1, #0x1
	cmp	r0, #0
	bne	.L1117	@cond_branch
	mov	r3, #0x1
	neg	r3, r3
	add	r1, r3, #0
.L1117:
	strh	r1, [r4, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	mov	r1, #0x2
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L1119	@cond_branch
	ldrb	r2, [r4, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x47
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x3]
	add	r0, r5, #0
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	b	.L1122
.L1126:
	.align	2, 0
.L1125:
	.word	gBattleAnimTarget
	.word	0x3ff
	.word	-0x400
.L1119:
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
.L1122:
	strh	r0, [r4, #0x20]
	ldr	r0, .L1127
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1128:
	.align	2, 0
.L1127:
	.word	AnimSmellingSaltsHand_Step
.Lfe107:
	.size	 AnimSmellingSaltsHand,.Lfe107-AnimSmellingSaltsHand
	.align	2, 0
	.type	 AnimSmellingSaltsHand_Step,function
	.thumb_func
AnimSmellingSaltsHand_Step:
	push	{lr}
	add	r2, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r2, r0]
	cmp	r1, #0x1
	beq	.L1134	@cond_branch
	cmp	r1, #0x1
	bgt	.L1144	@cond_branch
	cmp	r1, #0
	beq	.L1131	@cond_branch
	b	.L1130
.L1144:
	cmp	r1, #0x2
	beq	.L1136	@cond_branch
	cmp	r1, #0x3
	beq	.L1138	@cond_branch
	b	.L1130
.L1131:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1130	@cond_branch
	strh	r1, [r2, #0x30]
	ldrh	r0, [r2, #0x3c]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	bne	.L1130	@cond_branch
	b	.L1145
.L1134:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	bne	.L1130	@cond_branch
	b	.L1146
.L1136:
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	lsl	r1, r1, #0x2
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L1130	@cond_branch
.L1146:
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
.L1145:
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	b	.L1130
.L1138:
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	bne	.L1130	@cond_branch
	ldrh	r0, [r2, #0x3a]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x3a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1140	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	b	.L1130
.L1140:
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L1130:
	pop	{r0}
	bx	r0
.Lfe108:
	.size	 AnimSmellingSaltsHand_Step,.Lfe108-AnimSmellingSaltsHand_Step
	.align	2, 0
	.globl	AnimTask_SmellingSaltsSquish
	.type	 AnimTask_SmellingSaltsSquish,function
	.thumb_func
AnimTask_SmellingSaltsSquish:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r2, .L1150
	mov	r3, #0x0
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L1148	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimVisualTask
	b	.L1149
.L1151:
	.align	2, 0
.L1150:
	.word	gBattleAnimArgs
.L1148:
	ldr	r0, .L1152
	lsl	r4, r1, #0x2
	add	r4, r4, r1
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r2, #0x2]
	strh	r0, [r4, #0x8]
	ldrb	r0, [r2]
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	strh	r1, [r4, #0x26]
	ldr	r2, .L1152+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L1152+0x8
	str	r0, [r4]
.L1149:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1153:
	.align	2, 0
.L1152:
	.word	gTasks
	.word	gSmellingSaltsSquishAffineAnimCmds
	.word	AnimTask_SmellingSaltsSquish_Step
.Lfe109:
	.size	 AnimTask_SmellingSaltsSquish,.Lfe109-AnimTask_SmellingSaltsSquish
	.align	2, 0
	.type	 AnimTask_SmellingSaltsSquish_Step,function
	.thumb_func
AnimTask_SmellingSaltsSquish_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L1162
	add	r4, r0, r1
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1155	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0xc]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1156	@cond_branch
	ldr	r2, .L1162+0x4
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	b	.L1161
.L1163:
	.align	2, 0
.L1162:
	.word	gTasks
	.word	gSprites
.L1156:
	ldr	r2, .L1164
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L1164+0x4
.L1161:
	strh	r1, [r0, #0x24]
.L1155:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L1158	@cond_branch
	ldr	r2, .L1164
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r5, [r0, #0x24]
	ldrh	r0, [r4, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1159	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L1164+0x8
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L1164+0xc
	bl	PrepareAffineAnimInTaskData
	strh	r5, [r4, #0xa]
	strh	r5, [r4, #0xc]
	b	.L1158
.L1165:
	.align	2, 0
.L1164:
	.word	gSprites
	.word	0xfffe
	.word	gTasks
	.word	gSmellingSaltsSquishAffineAnimCmds
.L1159:
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L1158:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 AnimTask_SmellingSaltsSquish_Step,.Lfe110-AnimTask_SmellingSaltsSquish_Step
	.align	2, 0
	.type	 AnimSmellingSaltExclamation,function
	.thumb_func
AnimSmellingSaltExclamation:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L1171
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1167	@cond_branch
	ldr	r4, .L1171+0x4
	b	.L1170
.L1172:
	.align	2, 0
.L1171:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1167:
	ldr	r4, .L1173
.L1170:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r5, #0x22]
	mov	r1, #0x22
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x7
	bgt	.L1169	@cond_branch
	mov	r0, #0x8
	strh	r0, [r5, #0x22]
.L1169:
	mov	r2, #0x0
	strh	r2, [r5, #0x2e]
	ldr	r1, .L1173+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r5, #0x30]
	strh	r2, [r5, #0x32]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r5, #0x34]
	ldr	r0, .L1173+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1174:
	.align	2, 0
.L1173:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimSmellingSaltExclamation_Step
.Lfe111:
	.size	 AnimSmellingSaltExclamation,.Lfe111-AnimSmellingSaltExclamation
	.align	2, 0
	.type	 AnimSmellingSaltExclamation_Step,function
	.thumb_func
AnimSmellingSaltExclamation_Step:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x30
	ldrsh	r1, [r3, r2]
	cmp	r0, r1
	blt	.L1176	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x2e]
	ldrh	r1, [r3, #0x32]
	add	r1, r1, #0x1
	mov	r0, #0x1
	and	r1, r1, r0
	strh	r1, [r3, #0x32]
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r0]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	mov	r2, #0x32
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	beq	.L1176	@cond_branch
	ldrh	r0, [r3, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x34]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1176	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L1176:
	pop	{r0}
	bx	r0
.Lfe112:
	.size	 AnimSmellingSaltExclamation_Step,.Lfe112-AnimSmellingSaltExclamation_Step
	.align	2, 0
	.type	 AnimHelpingHandClap,function
	.thumb_func
AnimHelpingHandClap:
	push	{lr}
	add	r3, r0, #0
	ldr	r0, .L1182
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1179	@cond_branch
	ldrb	r2, [r3, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x47
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x3]
	mov	r0, #0x64
	strh	r0, [r3, #0x20]
	mov	r0, #0x1
	b	.L1181
.L1183:
	.align	2, 0
.L1182:
	.word	gBattleAnimArgs
.L1179:
	mov	r0, #0x8c
	strh	r0, [r3, #0x20]
	ldr	r0, .L1184
.L1181:
	strh	r0, [r3, #0x3c]
	mov	r0, #0x38
	strh	r0, [r3, #0x22]
	ldr	r0, .L1184+0x4
	str	r0, [r3, #0x1c]
	pop	{r0}
	bx	r0
.L1185:
	.align	2, 0
.L1184:
	.word	0xffff
	.word	AnimHelpingHandClap_Step
.Lfe113:
	.size	 AnimHelpingHandClap,.Lfe113-AnimHelpingHandClap
	.align	2, 0
	.type	 AnimHelpingHandClap_Step,function
	.thumb_func
AnimHelpingHandClap_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x8
	bls	.LCB12196
	b	.L1187	@long jump
.LCB12196:
	lsl	r0, r0, #0x2
	ldr	r1, .L1212
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1213:
	.align	2, 0
.L1212:
	.word	.L1208
	.align	2, 0
	.align	2, 0
.L1208:
	.word	.L1188
	.word	.L1191
	.word	.L1193
	.word	.L1195
	.word	.L1197
	.word	.L1199
	.word	.L1202
	.word	.L1204
	.word	.L1206
.L1188:
	mov	r3, #0x3c
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x1
	ldrh	r1, [r4, #0x22]
	sub	r1, r1, r0
	strh	r1, [r4, #0x22]
	ldrh	r2, [r4, #0x30]
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1189	@cond_branch
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	ldrh	r0, [r4, #0x20]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
.L1189:
	add	r0, r2, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	beq	.LCB12241
	b	.L1187	@long jump
.LCB12241:
	b	.L1210
.L1191:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	beq	.LCB12253
	b	.L1187	@long jump
.LCB12253:
	b	.L1210
.L1193:
	ldrh	r2, [r4, #0x30]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x30]
	mov	r3, #0x3c
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r3, .L1214
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	ldrh	r1, [r4, #0x3c]
	mul	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0xc
	beq	.LCB12285
	b	.L1187	@long jump
.LCB12285:
	b	.L1210
.L1215:
	.align	2, 0
.L1214:
	.word	gSineTable
.L1195:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	beq	.LCB12303
	b	.L1187	@long jump
.LCB12303:
	b	.L1210
.L1197:
	ldrh	r2, [r4, #0x30]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x30]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r3, .L1216
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	ldrh	r1, [r4, #0x3c]
	mul	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0xc
	bne	.L1187	@cond_branch
	b	.L1211
.L1217:
	.align	2, 0
.L1216:
	.word	gSineTable
.L1199:
	ldrh	r2, [r4, #0x30]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x30]
	mov	r3, #0x3c
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r3, .L1218
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	ldrh	r1, [r4, #0x3c]
	mul	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0xf
	bne	.L1200	@cond_branch
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x10
	ldr	r3, .L1218+0x4
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L1218+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
.L1200:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x12
	bne	.L1187	@cond_branch
	b	.L1210
.L1219:
	.align	2, 0
.L1218:
	.word	gSineTable
	.word	0x3ff
	.word	-0x400
.L1202:
	mov	r3, #0x3c
	ldrsh	r0, [r4, r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrh	r0, [r4, #0x20]
	add	r1, r1, r0
	strh	r1, [r4, #0x20]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bne	.L1187	@cond_branch
	b	.L1210
.L1204:
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	ldrh	r3, [r4, #0x20]
	add	r0, r0, r3
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1187	@cond_branch
.L1210:
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
.L1211:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L1187
.L1206:
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	ldrh	r0, [r4, #0x20]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L1187	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1187:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 AnimHelpingHandClap_Step,.Lfe114-AnimHelpingHandClap_Step
	.align	2, 0
	.globl	AnimTask_HelpingHandAttackerMovement
	.type	 AnimTask_HelpingHandAttackerMovement,function
	.thumb_func
AnimTask_HelpingHandAttackerMovement:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L1230
	add	r6, r1, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x26]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1221	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x1
	bne	.L1222	@cond_branch
	ldr	r5, .L1230+0x4
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r1, [r5]
	mov	r0, #0x2
	eor	r0, r0, r1
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	ble	.L1223	@cond_branch
	strh	r7, [r6, #0x24]
	b	.L1228
.L1231:
	.align	2, 0
.L1230:
	.word	gTasks
	.word	gBattleAnimAttacker
.L1223:
	ldr	r0, .L1232
	b	.L1229
.L1233:
	.align	2, 0
.L1232:
	.word	0xffff
.L1222:
	ldr	r0, .L1234
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1226	@cond_branch
	ldr	r0, .L1234+0x4
	b	.L1229
.L1235:
	.align	2, 0
.L1234:
	.word	gBattleAnimAttacker
	.word	0xffff
.L1226:
.L1221:
	mov	r0, #0x1
.L1229:
	strh	r0, [r6, #0x24]
.L1228:
	ldr	r0, .L1236
	str	r0, [r6]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1237:
	.align	2, 0
.L1236:
	.word	AnimTask_HelpingHandAttackerMovement_Step
.Lfe115:
	.size	 AnimTask_HelpingHandAttackerMovement,.Lfe115-AnimTask_HelpingHandAttackerMovement
	.align	2, 0
	.type	 AnimTask_HelpingHandAttackerMovement_Step,function
	.thumb_func
AnimTask_HelpingHandAttackerMovement_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L1264
	add	r3, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x8
	bls	.LCB12605
	b	.L1239	@long jump
.LCB12605:
	lsl	r0, r0, #0x2
	ldr	r1, .L1264+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1265:
	.align	2, 0
.L1264:
	.word	gTasks
	.word	.L1259
	.align	2, 0
	.align	2, 0
.L1259:
	.word	.L1240
	.word	.L1242
	.word	.L1244
	.word	.L1246
	.word	.L1250
	.word	.L1252
	.word	.L1254
	.word	.L1256
	.word	.L1258
.L1240:
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xd
	beq	.LCB12632
	b	.L1239	@long jump
.LCB12632:
	b	.L1261
.L1242:
	ldr	r2, .L1266
	mov	r1, #0x26
	ldrsh	r0, [r3, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	ldrh	r0, [r1, #0x24]
	sub	r0, r0, r2
	strh	r0, [r1, #0x24]
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	beq	.LCB12656
	b	.L1239	@long jump
.LCB12656:
	b	.L1261
.L1267:
	.align	2, 0
.L1266:
	.word	gSprites
.L1244:
	ldr	r2, .L1268
	mov	r1, #0x26
	ldrsh	r0, [r3, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x24
	ldrsh	r2, [r3, r0]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	ldrh	r2, [r1, #0x24]
	add	r0, r0, r2
	strh	r0, [r1, #0x24]
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L1239	@cond_branch
	b	.L1261
.L1269:
	.align	2, 0
.L1268:
	.word	gSprites
.L1246:
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L1239	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0xa]
	ldrh	r1, [r3, #0xc]
	mov	r2, #0xc
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	bne	.L1262	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r3, #0xc]
	mov	r0, #0x1
	strh	r0, [r3, #0x8]
	b	.L1239
.L1250:
	ldr	r2, .L1270
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x24]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L1239	@cond_branch
	b	.L1261
.L1271:
	.align	2, 0
.L1270:
	.word	gSprites
.L1252:
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L1239	@cond_branch
	b	.L1261
.L1254:
	ldr	r2, .L1272
	mov	r1, #0x26
	ldrsh	r0, [r3, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x24
	ldrsh	r2, [r3, r0]
	lsl	r2, r2, #0x2
	ldrh	r0, [r1, #0x24]
	sub	r0, r0, r2
	b	.L1263
.L1273:
	.align	2, 0
.L1272:
	.word	gSprites
.L1256:
	ldr	r2, .L1274
	mov	r1, #0x26
	ldrsh	r0, [r3, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	lsl	r0, r0, #0x2
	ldrh	r2, [r1, #0x24]
	add	r0, r0, r2
.L1263:
	strh	r0, [r1, #0x24]
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L1239	@cond_branch
.L1261:
	mov	r0, #0x0
	strh	r0, [r3, #0xa]
.L1262:
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	b	.L1239
.L1275:
	.align	2, 0
.L1274:
	.word	gSprites
.L1258:
	ldr	r2, .L1276
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L1239:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1277:
	.align	2, 0
.L1276:
	.word	gSprites
.Lfe116:
	.size	 AnimTask_HelpingHandAttackerMovement_Step,.Lfe116-AnimTask_HelpingHandAttackerMovement_Step
	.align	2, 0
	.type	 AnimForesightMagnifyingGlass,function
	.thumb_func
AnimForesightMagnifyingGlass:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1283
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1279	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L1283+0x4
	b	.L1282
.L1284:
	.align	2, 0
.L1283:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1279:
	ldr	r0, .L1285
.L1282:
	ldrb	r0, [r0]
	strh	r0, [r4, #0x3c]
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1281	@cond_branch
	ldrb	r0, [r4, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r4, #0x3]
.L1281:
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSpriteBGPriority
	mov	r2, #0x3
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r4, #0x5]
	ldrb	r0, [r4, #0x1]
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
	ldr	r0, .L1285+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1286:
	.align	2, 0
.L1285:
	.word	gBattleAnimTarget
	.word	AnimForesightMagnifyingGlass_Step
.Lfe117:
	.size	 AnimForesightMagnifyingGlass,.Lfe117-AnimForesightMagnifyingGlass
	.align	2, 0
	.type	 AnimForesightMagnifyingGlass_Step,function
	.thumb_func
AnimForesightMagnifyingGlass_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB12948
	b	.L1288	@long jump
.LCB12948:
	lsl	r0, r0, #0x2
	ldr	r1, .L1324
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1325:
	.align	2, 0
.L1324:
	.word	.L1317
	.align	2, 0
	.align	2, 0
.L1317:
	.word	.L1289
	.word	.L1303
	.word	.L1310
	.word	.L1312
	.word	.L1316
.L1289:
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x5
	bhi	.L1291	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1326
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1327:
	.align	2, 0
.L1326:
	.word	.L1298
	.align	2, 0
	.align	2, 0
.L1298:
	.word	.L1293
	.word	.L1294
	.word	.L1295
	.word	.L1296
	.word	.L1293
	.word	.L1297
.L1291:
	mov	r0, #0x0
	strh	r0, [r4, #0x3a]
.L1293:
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	b	.L1319
.L1294:
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x4
	b	.L1320
.L1295:
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	b	.L1319
.L1296:
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
.L1319:
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x4
.L1320:
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	b	.L1290
.L1297:
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
.L1290:
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x4
	bne	.L1299	@cond_branch
	mov	r0, #0x18
	b	.L1321
.L1299:
	cmp	r0, #0x5
	bne	.L1301	@cond_branch
	mov	r0, #0x6
	b	.L1321
.L1301:
	mov	r0, #0xc
.L1321:
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	strh	r1, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	b	.L1322
.L1303:
	add	r0, r4, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1288	@cond_branch
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	beq	.L1307	@cond_branch
	cmp	r0, #0x5
	beq	.L1308	@cond_branch
	ldrh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x26]
	strh	r1, [r4, #0x24]
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	b	.L1323
.L1307:
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x26]
	strh	r1, [r4, #0x24]
	strh	r1, [r4, #0x38]
.L1323:
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3a]
	b	.L1288
.L1308:
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	mov	r1, #0x10
	strh	r1, [r4, #0x30]
	strh	r0, [r4, #0x32]
	mov	r0, #0x3
	strh	r0, [r4, #0x38]
	b	.L1288
.L1310:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L1288	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	b	.L1288
.L1312:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1313	@cond_branch
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	b	.L1314
.L1313:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
.L1314:
	ldrh	r1, [r4, #0x32]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x30]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x20
	bne	.L1288	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L1322:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	b	.L1288
.L1316:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1288:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe118:
	.size	 AnimForesightMagnifyingGlass_Step,.Lfe118-AnimForesightMagnifyingGlass_Step
	.globl	gDracoMeteorSmashSpriteTemplate
	.section .rodata
	.align	2, 0
	.type	 gDracoMeteorSmashSpriteTemplate,object
	.size	 gDracoMeteorSmashSpriteTemplate,24
gDracoMeteorSmashSpriteTemplate:
	.short	0x27d9
	.short	0x27d9
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMeteorMashStar
.text
	.align	2, 0
	.type	 AnimMeteorMashStar_Step,function
	.thumb_func
AnimMeteorMashStar_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	mul	r0, r0, r1
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	add	r5, r0, #0
	strh	r5, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	mul	r0, r0, r1
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	add	r3, r0, #0
	strh	r3, [r4, #0x26]
	ldrh	r1, [r4, #0x38]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1329	@cond_branch
	ldr	r0, .L1331
	ldrh	r1, [r4, #0x20]
	add	r1, r1, r5
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldrh	r2, [r4, #0x22]
	add	r2, r2, r3
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r3, #0x5
	bl	CreateSprite
.L1329:
	mov	r0, #0x38
	ldrsh	r1, [r4, r0]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L1330	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1330:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1332:
	.align	2, 0
.L1331:
	.word	gMiniTwinklingStarSpriteTemplate
.Lfe119:
	.size	 AnimMeteorMashStar_Step,.Lfe119-AnimMeteorMashStar_Step
	.align	2, 0
	.type	 AnimMeteorMashStar,function
	.thumb_func
AnimMeteorMashStar:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L1338
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1335	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1334	@cond_branch
.L1335:
	ldr	r2, .L1338+0x4
	ldrh	r1, [r5, #0x20]
	ldrh	r0, [r2]
	sub	r0, r1, r0
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r2, #0x4]
	sub	r1, r1, r0
	b	.L1337
.L1339:
	.align	2, 0
.L1338:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L1334:
	ldr	r2, .L1340
	ldrh	r1, [r5, #0x20]
	ldrh	r0, [r2]
	add	r0, r1, r0
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r2, #0x4]
	add	r1, r1, r0
.L1337:
	strh	r1, [r5, #0x32]
	add	r3, r2, #0
	ldrh	r1, [r5, #0x22]
	ldrh	r2, [r3, #0x2]
	add	r2, r1, r2
	strh	r2, [r5, #0x30]
	ldrh	r0, [r3, #0x6]
	add	r1, r1, r0
	strh	r1, [r5, #0x34]
	ldrh	r0, [r3, #0x8]
	strh	r0, [r5, #0x36]
	ldrh	r0, [r5, #0x2e]
	strh	r0, [r5, #0x20]
	strh	r2, [r5, #0x22]
	ldr	r0, .L1340+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1341:
	.align	2, 0
.L1340:
	.word	gBattleAnimArgs
	.word	AnimMeteorMashStar_Step
.Lfe120:
	.size	 AnimMeteorMashStar,.Lfe120-AnimMeteorMashStar
	.align	2, 0
	.globl	AnimTask_MonToSubstitute
	.type	 AnimTask_MonToSubstitute,function
	.thumb_func
AnimTask_MonToSubstitute:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r2, r5, #0
	ldr	r0, .L1355
	mov	r9, r0
	lsl	r7, r6, #0x2
	add	r0, r7, r6
	lsl	r0, r0, #0x3
	mov	r8, r0
	mov	r4, r8
	add	r4, r4, r9
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1343	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	b	.L1354
.L1356:
	.align	2, 0
.L1355:
	.word	gTasks
.L1343:
	cmp	r0, #0x1
	bne	.L1345	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x60
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0xd
	strh	r0, [r4, #0xc]
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	mov	r0, #0xc
	ldrsh	r2, [r4, r0]
	add	r0, r5, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bne	.L1344	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xe]
	add	r0, r5, #0
	bl	ResetSpriteRotScale
	ldr	r1, .L1357
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1354:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1344
.L1358:
	.align	2, 0
.L1357:
	.word	gSprites
.L1345:
	ldr	r4, .L1359
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	LoadBattleMonGfxAndAnimate
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1348	@cond_branch
	ldr	r3, .L1359+0x4
	ldr	r2, .L1359+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r3, #0
	add	r1, r1, #0x10
	add	r0, r0, r1
	ldr	r1, .L1359+0xc
	str	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
.L1348:
	mov	r4, r9
	add	r3, r7, #0
	ldr	r5, .L1359+0x10
	mov	r1, #0xf
	mov	r2, r8
	add	r0, r4, r2
	add	r0, r0, #0x26
	mov	r2, #0x0
.L1352:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L1352	@cond_branch
	add	r0, r3, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	str	r5, [r0]
.L1344:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1360:
	.align	2, 0
.L1359:
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gUnknown_082FF6C0
	.word	AnimTask_MonToSubstituteDoll
.Lfe121:
	.size	 AnimTask_MonToSubstitute,.Lfe121-AnimTask_MonToSubstitute
	.align	2, 0
	.type	 AnimTask_MonToSubstituteDoll,function
	.thumb_func
AnimTask_MonToSubstituteDoll:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L1378
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r5, [r4, r0]
	cmp	r5, #0x1
	beq	.L1364	@cond_branch
	cmp	r5, #0x1
	bgt	.L1376	@cond_branch
	cmp	r5, #0
	beq	.L1363	@cond_branch
	b	.L1362
.L1379:
	.align	2, 0
.L1378:
	.word	gTasks
.L1376:
	cmp	r5, #0x2
	beq	.L1368	@cond_branch
	cmp	r5, #0x3
	beq	.L1371	@cond_branch
	b	.L1362
.L1363:
	ldr	r0, .L1380
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L1380+0x4
	strh	r0, [r1, #0x26]
	mov	r0, #0xc8
	strh	r0, [r1, #0x24]
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	sub	r0, r0, #0xcd
	and	r0, r0, r2
	strb	r0, [r1]
	strh	r5, [r4, #0x1c]
	b	.L1377
.L1381:
	.align	2, 0
.L1380:
	.word	gSprites
	.word	0xff38
.L1364:
	ldrh	r1, [r4, #0x1c]
	add	r1, r1, #0x70
	mov	r5, #0x0
	strh	r1, [r4, #0x1c]
	ldr	r2, .L1382
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r3, [r2, #0x26]
	add	r1, r1, r3
	strh	r1, [r2, #0x26]
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	blt	.L1365	@cond_branch
	strh	r5, [r2, #0x24]
.L1365:
	mov	r1, #0x26
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	ble	.L1366	@cond_branch
	strh	r5, [r2, #0x26]
.L1366:
	mov	r3, #0x26
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L1362	@cond_branch
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x7d
	bl	PlaySE12WithPanning
	ldr	r1, .L1382+0x4
	add	r0, r1, #0
	ldrh	r2, [r4, #0x1c]
	add	r0, r0, r2
	strh	r0, [r4, #0x1c]
	b	.L1377
.L1383:
	.align	2, 0
.L1382:
	.word	gSprites
	.word	-0x800
.L1368:
	ldrh	r0, [r4, #0x1c]
	sub	r0, r0, #0x70
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1369	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
.L1369:
	ldr	r0, .L1384
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r4, #0x1c]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x18
	ldrh	r0, [r1, #0x26]
	sub	r0, r0, r2
	strh	r0, [r1, #0x26]
	mov	r3, #0x1c
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bne	.L1362	@cond_branch
.L1377:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1362
.L1385:
	.align	2, 0
.L1384:
	.word	gSprites
.L1371:
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x70
	strh	r0, [r4, #0x1c]
	ldr	r2, .L1386
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r1, #0x26]
	add	r0, r0, r2
	strh	r0, [r1, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L1372	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x26]
.L1372:
	mov	r3, #0x26
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L1362	@cond_branch
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x7d
	bl	PlaySE12WithPanning
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L1362:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1387:
	.align	2, 0
.L1386:
	.word	gSprites
.Lfe122:
	.size	 AnimTask_MonToSubstituteDoll,.Lfe122-AnimTask_MonToSubstituteDoll
	.align	2, 0
	.globl	AnimBlockX
	.type	 AnimBlockX,function
	.thumb_func
AnimBlockX:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L1391
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1389	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerSpriteSubpriority
	sub	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldr	r4, .L1391+0x4
	b	.L1390
.L1392:
	.align	2, 0
.L1391:
	.word	gBattleAnimTarget
	.word	0xff70
.L1389:
	ldrb	r0, [r4]
	bl	GetBattlerSpriteSubpriority
	add	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldr	r4, .L1393
.L1390:
	ldr	r0, .L1393+0x4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	strh	r4, [r5, #0x26]
	ldr	r0, .L1393+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1394:
	.align	2, 0
.L1393:
	.word	0xffa0
	.word	gBattleAnimTarget
	.word	AnimBlockX_Step
.Lfe123:
	.size	 AnimBlockX,.Lfe123-AnimBlockX
	.align	2, 0
	.type	 AnimBlockX_Step,function
	.thumb_func
AnimBlockX_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB13929
	b	.L1396	@long jump
.LCB13929:
	lsl	r0, r0, #0x2
	ldr	r1, .L1411
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1412:
	.align	2, 0
.L1411:
	.word	.L1408
	.align	2, 0
	.align	2, 0
.L1408:
	.word	.L1397
	.word	.L1399
	.word	.L1401
	.word	.L1403
	.word	.L1405
.L1397:
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0xa
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L1396	@cond_branch
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xcd
	bl	PlaySE12WithPanning
	mov	r0, #0x0
	strh	r0, [r4, #0x26]
	b	.L1410
.L1399:
	ldrh	r1, [r4, #0x30]
	add	r1, r1, #0x4
	mov	r5, #0x0
	strh	r1, [r4, #0x30]
	ldr	r2, .L1413
	mov	r3, #0x30
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	neg	r0, r0
	strh	r0, [r4, #0x26]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L1396	@cond_branch
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xcd
	bl	PlaySE12WithPanning
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x26]
	b	.L1410
.L1414:
	.align	2, 0
.L1413:
	.word	gSineTable
.L1401:
	ldrh	r1, [r4, #0x30]
	add	r1, r1, #0x6
	mov	r3, #0x0
	strh	r1, [r4, #0x30]
	ldr	r2, .L1415
	mov	r5, #0x30
	ldrsh	r0, [r4, r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	neg	r0, r0
	strh	r0, [r4, #0x26]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L1396	@cond_branch
	strh	r3, [r4, #0x30]
	strh	r3, [r4, #0x26]
	b	.L1410
.L1416:
	.align	2, 0
.L1415:
	.word	gSineTable
.L1403:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L1396	@cond_branch
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xc0
	bl	PlaySE12WithPanning
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
.L1410:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L1396
.L1405:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L1396	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x32]
	add	r1, r1, #0x1
	strh	r1, [r4, #0x32]
	mov	r0, #0x1
	and	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	sub	r0, r0, #0x6
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7
	bne	.L1396	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1396:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe124:
	.size	 AnimBlockX_Step,.Lfe124-AnimBlockX_Step
	.align	2, 0
	.globl	AnimTask_OdorSleuthMovement
	.type	 AnimTask_OdorSleuthMovement,function
	.thumb_func
AnimTask_OdorSleuthMovement:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0
	bne	.L1423	@cond_branch
	mov	r0, #0x1
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	sl, r1
	asr	r6, r0, #0x10
	cmp	r6, #0
	blt	.L1423	@cond_branch
	mov	r0, #0x1
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	r9, r1
	asr	r1, r0, #0x10
	cmp	r1, #0
	bge	.L1420	@cond_branch
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	ldr	r1, .L1424
	add	r0, r0, r1
	bl	obj_delete_but_dont_free_vram
.L1423:
	mov	r0, r8
	bl	DestroyAnimVisualTask
	b	.L1417
.L1425:
	.align	2, 0
.L1424:
	.word	gSprites
.L1420:
	ldr	r4, .L1426
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r0, r4
	ldrh	r0, [r5, #0x24]
	add	r0, r0, #0x18
	strh	r0, [r5, #0x24]
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r6, r0, r4
	ldrh	r0, [r6, #0x24]
	sub	r0, r0, #0x18
	strh	r0, [r6, #0x24]
	strh	r7, [r5, #0x2e]
	strh	r7, [r6, #0x2e]
	strh	r7, [r5, #0x30]
	strh	r7, [r6, #0x30]
	strh	r7, [r5, #0x32]
	strh	r7, [r6, #0x32]
	mov	r0, #0x10
	strh	r0, [r5, #0x34]
	ldr	r0, .L1426+0x4
	strh	r0, [r6, #0x34]
	strh	r7, [r5, #0x36]
	mov	r0, #0x80
	strh	r0, [r6, #0x36]
	mov	r0, #0x18
	strh	r0, [r5, #0x38]
	strh	r0, [r6, #0x38]
	mov	r0, r8
	strh	r0, [r5, #0x3a]
	strh	r0, [r6, #0x3a]
	strh	r7, [r5, #0x3c]
	strh	r7, [r6, #0x3c]
	ldr	r2, .L1426+0x8
	mov	r1, r8
	lsl	r3, r1, #0x2
	add	r0, r3, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x2
	strh	r1, [r0, #0x8]
	ldr	r0, .L1426+0xc
	ldr	r1, [r0]
	ldr	r0, .L1426+0x10
	ldrb	r0, [r0]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	add	r7, r4, #0
	mov	ip, r3
	cmp	r0, #0
	bne	.L1421	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r2, r6, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L1422
.L1427:
	.align	2, 0
.L1426:
	.word	gSprites
	.word	0xfff0
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimTarget
.L1421:
	add	r1, r5, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
.L1422:
	mov	r1, r9
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r4, r2, r7
	ldrb	r1, [r4, #0x1]
	mov	r3, #0xd
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	mov	r1, sl
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r4, r1, r7
	ldrb	r0, [r4, #0x1]
	and	r3, r3, r0
	strb	r3, [r4, #0x1]
	add	r3, r7, #0
	add	r3, r3, #0x1c
	add	r2, r2, r3
	ldr	r0, .L1428
	str	r0, [r2]
	add	r1, r1, r3
	str	r0, [r1]
	mov	r0, ip
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L1428+0x4
	add	r0, r0, r1
	ldr	r1, .L1428+0x8
	str	r1, [r0]
.L1417:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1429:
	.align	2, 0
.L1428:
	.word	MoveOdorSleuthClone
	.word	gTasks
	.word	AnimTask_OdorSleuthMovementWaitFinish
.Lfe125:
	.size	 AnimTask_OdorSleuthMovement,.Lfe125-AnimTask_OdorSleuthMovement
	.align	2, 0
	.type	 AnimTask_OdorSleuthMovementWaitFinish,function
	.thumb_func
AnimTask_OdorSleuthMovementWaitFinish:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L1432
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1431	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L1431:
	pop	{r0}
	bx	r0
.L1433:
	.align	2, 0
.L1432:
	.word	gTasks
.Lfe126:
	.size	 AnimTask_OdorSleuthMovementWaitFinish,.Lfe126-AnimTask_OdorSleuthMovementWaitFinish
	.align	2, 0
	.type	 MoveOdorSleuthClone,function
	.thumb_func
MoveOdorSleuthClone:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1435	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldr	r0, .L1445
	ldr	r1, [r0]
	ldr	r0, .L1445+0x4
	ldrb	r0, [r0]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1435	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1d
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L1435:
	ldrh	r0, [r4, #0x34]
	ldrh	r1, [r4, #0x36]
	add	r0, r0, r1
	mov	r5, #0x0
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x36]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1438	@cond_branch
	cmp	r0, #0x1
	beq	.L1440	@cond_branch
	b	.L1437
.L1446:
	.align	2, 0
.L1445:
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimTarget
.L1438:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3c
	bne	.L1437	@cond_branch
	strh	r5, [r4, #0x32]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L1437
.L1440:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L1437	@cond_branch
	strh	r5, [r4, #0x32]
	ldrh	r0, [r4, #0x38]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1437	@cond_branch
	ldr	r3, .L1447
	mov	r2, #0x3c
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	obj_delete_but_dont_free_vram
.L1437:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1448:
	.align	2, 0
.L1447:
	.word	gTasks
.Lfe127:
	.size	 MoveOdorSleuthClone,.Lfe127-MoveOdorSleuthClone
	.align	2, 0
	.globl	AnimTask_GetReturnPowerLevel
	.type	 AnimTask_GetReturnPowerLevel,function
	.thumb_func
AnimTask_GetReturnPowerLevel:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r3, .L1454
	mov	r2, #0x0
	strh	r2, [r3, #0xe]
	ldr	r1, .L1454+0x4
	ldrb	r0, [r1]
	ldrb	r1, [r1]
	add	r0, r1, #0
	sub	r0, r0, #0x3d
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r1, #0
	cmp	r0, #0x1e
	bhi	.L1451	@cond_branch
	mov	r0, #0x1
	strh	r0, [r3, #0xe]
.L1451:
	add	r0, r2, #0
	sub	r0, r0, #0x5c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6c
	bhi	.L1452	@cond_branch
	mov	r0, #0x2
	strh	r0, [r3, #0xe]
.L1452:
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xc8
	bls	.L1453	@cond_branch
	mov	r0, #0x3
	strh	r0, [r3, #0xe]
.L1453:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L1455:
	.align	2, 0
.L1454:
	.word	gBattleAnimArgs
	.word	gAnimFriendship
.Lfe128:
	.size	 AnimTask_GetReturnPowerLevel,.Lfe128-AnimTask_GetReturnPowerLevel
	.align	2, 0
	.globl	AnimTask_SnatchOpposingMonMove
	.type	 AnimTask_SnatchOpposingMonMove,function
	.thumb_func
AnimTask_SnatchOpposingMonMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L1498
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x4
	bls	.LCB14572
	b	.L1457	@long jump
.LCB14572:
	lsl	r0, r0, #0x2
	ldr	r1, .L1498+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1499:
	.align	2, 0
.L1498:
	.word	gTasks
	.word	.L1490
	.align	2, 0
	.align	2, 0
.L1490:
	.word	.L1458
	.word	.L1462
	.word	.L1472
	.word	.L1481
	.word	.L1484
.L1458:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L1500
	mov	r2, r8
	lsl	r4, r2, #0x2
	add	r0, r4, r2
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	mov	r3, #0x80
	lsl	r3, r3, #0x4
	add	r0, r3, #0
	ldrh	r1, [r6, #0xa]
	add	r0, r0, r1
	strh	r0, [r6, #0xa]
	ldr	r0, .L1500+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r9, r4
	cmp	r0, #0
	bne	.L1459	@cond_branch
	ldr	r2, .L1500+0x8
	lsl	r3, r7, #0x4
	add	r1, r3, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r6, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r4, [r1, #0x24]
	add	r0, r0, r4
	strh	r0, [r1, #0x24]
	b	.L1460
.L1501:
	.align	2, 0
.L1500:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gSprites
.L1459:
	ldr	r3, .L1502
	lsl	r4, r7, #0x4
	add	r2, r4, r7
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r1, [r6, #0xa]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	add	r2, r3, #0
	add	r3, r4, #0
.L1460:
	ldr	r1, .L1502+0x4
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrb	r0, [r4, #0xa]
	strh	r0, [r4, #0xa]
	add	r1, r3, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x24]
	ldrh	r1, [r1, #0x20]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	add	r0, r0, r1
	mov	r1, #0x98
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.LCB14693
	b	.L1457	@long jump
.LCB14693:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1457
.L1503:
	.align	2, 0
.L1502:
	.word	gSprites
	.word	gTasks
.L1462:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1463	@cond_branch
	ldr	r0, .L1504
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldr	r2, [r0, #0x8]
	str	r2, [sp, #0x1c]
	ldr	r3, [r0, #0xc]
	mov	sl, r3
	ldrh	r6, [r0]
	ldr	r0, .L1504+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x0
	b	.L1492
.L1505:
	.align	2, 0
.L1504:
	.word	gContestResources
	.word	gBattleAnimAttacker
.L1463:
	ldr	r4, .L1506
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1465	@cond_branch
	ldr	r1, .L1506+0x4
	mov	r9, r1
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r5, .L1506+0x8
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x1c]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r5
	mov	r1, #0x1
	bl	GetMonData
	mov	sl, r0
	ldr	r0, .L1506+0xc
	ldr	r0, [r0]
	ldrb	r2, [r4]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L1466	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r5
	mov	r1, #0x59
	bl	GetMonData
	b	.L1493
.L1507:
	.align	2, 0
.L1506:
	.word	gBattleAnimAttacker
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleSpritesDataPtr
.L1466:
	ldrh	r6, [r1, #0x2]
	add	r0, r6, #0
	bl	GetFormIdFromFormSpeciesId
.L1493:
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L1508
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r2, #0x0
	mov	r9, r2
	mov	r5, #0x88
	lsl	r5, r5, #0x1
	b	.L1464
.L1509:
	.align	2, 0
.L1508:
	.word	gSprites
.L1465:
	ldr	r3, .L1510
	mov	r9, r3
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r5, .L1510+0x4
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x1c]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r5
	mov	r1, #0x1
	bl	GetMonData
	mov	sl, r0
	ldr	r0, .L1510+0x8
	ldr	r0, [r0]
	ldrb	r2, [r4]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L1469	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r5
	mov	r1, #0x59
	bl	GetMonData
	b	.L1494
.L1511:
	.align	2, 0
.L1510:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleSpritesDataPtr
.L1469:
	ldrh	r6, [r1, #0x2]
	add	r0, r6, #0
	bl	GetFormIdFromFormSpeciesId
.L1494:
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L1512
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x1
.L1492:
	mov	r9, r0
	ldr	r5, .L1512+0x4
.L1464:
	ldr	r0, .L1512+0x8
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r3, r5, #0x10
	asr	r3, r3, #0x10
	str	r0, [sp]
	str	r4, [sp, #0x4]
	ldr	r1, [sp, #0x1c]
	str	r1, [sp, #0x8]
	mov	r2, sl
	str	r2, [sp, #0xc]
	ldr	r4, .L1512+0xc
	ldrb	r0, [r4]
	str	r0, [sp, #0x10]
	mov	r0, #0x0
	str	r0, [sp, #0x14]
	str	r7, [sp, #0x18]
	add	r0, r6, #0
	mov	r1, r9
	mov	r2, #0x0
	bl	sub_80A8394
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L1512+0x10
	ldr	r1, [r0]
	ldrb	r0, [r4]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L1471	@cond_branch
	ldr	r1, .L1512
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	lsl	r0, r0, #0x4
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r1, r3, #0
	orr	r0, r0, r1
	ldr	r3, .L1512+0x14
	mov	r1, #0x10
	mov	r2, #0x6
	bl	BlendPalette
.L1471:
	ldr	r0, .L1512+0x18
	mov	r4, r8
	lsl	r1, r4, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r5, [r1, #0x26]
	b	.L1495
.L1513:
	.align	2, 0
.L1512:
	.word	gSprites
	.word	0xffe0
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleSpritesDataPtr
	.word	0x7fff
	.word	gTasks
.L1472:
	ldr	r1, .L1514
	mov	r0, r8
	lsl	r4, r0, #0x2
	add	r0, r4, r0
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrh	r0, [r6, #0x26]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	add	r0, r1, #0
	ldrh	r2, [r6, #0xa]
	add	r0, r0, r2
	strh	r0, [r6, #0xa]
	ldr	r0, .L1514+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r9, r4
	cmp	r0, #0
	bne	.L1473	@cond_branch
	ldr	r3, .L1514+0x8
	lsl	r4, r5, #0x4
	add	r2, r4, r5
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r1, [r6, #0xa]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	add	r2, r3, #0
	add	r3, r4, #0
	b	.L1474
.L1515:
	.align	2, 0
.L1514:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gSprites
.L1473:
	ldr	r2, .L1516
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r6, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r4, [r1, #0x24]
	add	r0, r0, r4
	strh	r0, [r1, #0x24]
.L1474:
	ldr	r1, .L1516+0x4
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrb	r0, [r6, #0xa]
	strh	r0, [r6, #0xa]
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x24]
	ldrh	r1, [r1, #0x20]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r1, #0x24
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L1475	@cond_branch
	ldr	r0, .L1516+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1476	@cond_branch
	lsl	r4, r5, #0x10
	asr	r4, r4, #0x10
	ldr	r0, .L1516+0xc
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bge	.L1475	@cond_branch
	b	.L1497
.L1517:
	.align	2, 0
.L1516:
	.word	gSprites
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L1476:
	lsl	r4, r5, #0x10
	asr	r4, r4, #0x10
	ldr	r0, .L1518
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	ble	.L1475	@cond_branch
.L1497:
	ldrh	r0, [r6, #0x24]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x24]
	ldr	r1, .L1518+0x4
	ldr	r0, .L1518+0x8
	strh	r0, [r1, #0xe]
.L1475:
	lsl	r0, r5, #0x10
	mov	r2, #0x80
	lsl	r2, r2, #0xe
	add	r0, r0, r2
	mov	r1, #0x98
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.LCB15211
	b	.L1457	@long jump
.LCB15211:
	ldr	r0, .L1518+0xc
	mov	r1, r9
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0xa]
	b	.L1495
.L1519:
	.align	2, 0
.L1518:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0xffff
	.word	gTasks
.L1481:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L1520
	mov	r3, r8
	lsl	r4, r3, #0x2
	add	r0, r4, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x26]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	ldr	r5, .L1520+0x4
	add	r0, r0, r5
	bl	DestroySpriteAndFreeResources_
	ldr	r0, .L1520+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r9, r4
	cmp	r0, #0
	bne	.L1482	@cond_branch
	lsl	r1, r7, #0x4
	add	r1, r1, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r0, [r1, #0x20]
	neg	r0, r0
	sub	r0, r0, #0x20
	strh	r0, [r1, #0x24]
	b	.L1483
.L1521:
	.align	2, 0
.L1520:
	.word	gTasks
	.word	gSprites
	.word	gBattleAnimAttacker
.L1482:
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r2, [r0, #0x20]
	mov	r4, #0x88
	lsl	r4, r4, #0x1
	add	r1, r4, #0
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
.L1483:
	ldr	r0, .L1522
	mov	r1, r9
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
.L1495:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L1457
.L1523:
	.align	2, 0
.L1522:
	.word	gTasks
.L1484:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L1524
	mov	r0, r8
	lsl	r4, r0, #0x2
	add	r0, r4, r0
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	add	r0, r1, #0
	ldrh	r3, [r2, #0xa]
	add	r0, r0, r3
	strh	r0, [r2, #0xa]
	ldr	r0, .L1524+0x4
	mov	sl, r0
	ldrb	r0, [r0]
	str	r2, [sp, #0x20]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r9, r4
	ldr	r2, [sp, #0x20]
	cmp	r0, #0
	bne	.L1485	@cond_branch
	ldr	r1, .L1524+0x8
	lsl	r5, r7, #0x4
	add	r0, r5, r7
	lsl	r0, r0, #0x2
	add	r6, r0, r1
	ldrh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r6, #0x24]
	add	r0, r0, r1
	strh	r0, [r6, #0x24]
	mov	r2, #0x24
	ldrsh	r4, [r6, r2]
	mov	r3, #0x20
	ldrsh	r0, [r6, r3]
	add	r4, r4, r0
	mov	r1, sl
	ldrb	r0, [r1]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r5, #0
	cmp	r4, r0
	blt	.L1487	@cond_branch
	mov	r2, #0x0
	strh	r2, [r6, #0x24]
	b	.L1487
.L1525:
	.align	2, 0
.L1524:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gSprites
.L1485:
	ldr	r1, .L1526
	lsl	r5, r7, #0x4
	add	r0, r5, r7
	lsl	r0, r0, #0x2
	add	r6, r0, r1
	ldrh	r1, [r2, #0xa]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r6, #0x24]
	sub	r0, r0, r1
	strh	r0, [r6, #0x24]
	mov	r3, #0x24
	ldrsh	r4, [r6, r3]
	mov	r1, #0x20
	ldrsh	r0, [r6, r1]
	add	r4, r4, r0
	mov	r2, sl
	ldrb	r0, [r2]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r5, #0
	cmp	r4, r0
	bgt	.L1487	@cond_branch
	mov	r4, #0x0
	strh	r4, [r6, #0x24]
.L1487:
	ldr	r1, .L1526+0x4
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xa]
	strh	r1, [r0, #0xa]
	ldr	r1, .L1526
	add	r0, r3, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1457	@cond_branch
	mov	r0, r8
	bl	DestroyAnimVisualTask
.L1457:
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1527:
	.align	2, 0
.L1526:
	.word	gSprites
	.word	gTasks
.Lfe129:
	.size	 AnimTask_SnatchOpposingMonMove,.Lfe129-AnimTask_SnatchOpposingMonMove
	.align	2, 0
	.type	 sub_815FE80,function
	.thumb_func
sub_815FE80:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1530	@cond_branch
	cmp	r0, #0x1
	beq	.L1534	@cond_branch
	b	.L1529
.L1530:
	ldr	r0, .L1541
	mov	r2, #0xe
	ldrsh	r1, [r0, r2]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L1531	@cond_branch
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x7a
	bl	PlaySE12WithPanning
	ldr	r0, .L1541+0x4
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	strh	r0, [r4, #0x22]
	ldr	r0, .L1541+0x8
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L1541+0xc
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1529	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1529	@cond_branch
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L1541+0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	b	.L1529
.L1542:
	.align	2, 0
.L1541:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	0xffe0
	.word	gBattleAnimAttacker
	.word	gSprites
.L1531:
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1529
.L1534:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x30]
	add	r0, r2, #0x5
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7f
	ble	.L1535	@cond_branch
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	add	r0, r2, #0
	sub	r0, r0, #0x7a
	strh	r0, [r4, #0x30]
.L1535:
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldr	r0, .L1543
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1536	@cond_branch
	ldrh	r2, [r4, #0x32]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
	add	r1, r2, #0
	b	.L1537
.L1544:
	.align	2, 0
.L1543:
	.word	gBattleAnimAttacker
.L1536:
	ldrh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r4, #0x24]
	add	r0, r0, r2
	strh	r0, [r4, #0x24]
.L1537:
	mov	r0, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x2
	bne	.L1529	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1529:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe130:
	.size	 sub_815FE80,.Lfe130-sub_815FE80
	.align	2, 0
	.globl	AnimTask_SnatchPartnerMove
	.type	 AnimTask_SnatchPartnerMove,function
	.thumb_func
AnimTask_SnatchPartnerMove:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L1565
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x26
	ldrsh	r0, [r0, r2]
	add	r3, r1, #0
	cmp	r0, #0x4
	bls	.LCB15670
	b	.L1561	@long jump
.LCB15670:
	lsl	r0, r0, #0x2
	ldr	r1, .L1565+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1566:
	.align	2, 0
.L1565:
	.word	gTasks
	.word	.L1562
	.align	2, 0
	.align	2, 0
.L1562:
	.word	.L1547
	.word	.L1549
	.word	.L1554
	.word	.L1555
	.word	.L1561
.L1547:
	ldr	r0, .L1567
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r0, .L1567+0x4
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r0, #0
	ldr	r1, .L1567+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r0, #0x6
	strh	r0, [r1, #0x8]
	cmp	r5, r2
	ble	.L1548	@cond_branch
	neg	r0, r0
	strh	r0, [r1, #0x8]
.L1548:
	strh	r5, [r1, #0xa]
	strh	r2, [r1, #0xc]
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x26]
	b	.L1546
.L1568:
	.align	2, 0
.L1567:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gTasks
.L1549:
	ldr	r1, .L1569
	ldr	r0, .L1569+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	ldr	r1, .L1569+0x8
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r3
	ldrh	r0, [r2, #0x8]
	ldrh	r3, [r1, #0x24]
	add	r0, r0, r3
	strh	r0, [r1, #0x24]
	mov	r3, #0x8
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L1550	@cond_branch
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	mov	r3, #0x24
	ldrsh	r1, [r1, r3]
	add	r0, r0, r1
	mov	r3, #0xc
	ldrsh	r1, [r2, r3]
	b	.L1563
.L1570:
	.align	2, 0
.L1569:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gSprites
.L1550:
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	mov	r3, #0x24
	ldrsh	r1, [r1, r3]
	add	r0, r0, r1
	mov	r3, #0xc
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	bgt	.L1546	@cond_branch
	b	.L1564
.L1554:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	mov	r2, #0x8
	ldrsh	r1, [r0, r2]
	neg	r1, r1
	strh	r1, [r0, #0x8]
	ldrh	r1, [r0, #0x26]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x26]
	b	.L1546
.L1555:
	ldr	r1, .L1571
	ldr	r0, .L1571+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	ldr	r1, .L1571+0x8
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r3
	ldrh	r0, [r2, #0x8]
	ldrh	r3, [r1, #0x24]
	add	r0, r0, r3
	strh	r0, [r1, #0x24]
	mov	r3, #0x8
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bge	.L1556	@cond_branch
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	mov	r3, #0x24
	ldrsh	r1, [r1, r3]
	add	r0, r0, r1
	mov	r3, #0xa
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	bgt	.L1546	@cond_branch
	b	.L1564
.L1572:
	.align	2, 0
.L1571:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gSprites
.L1556:
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	mov	r3, #0x24
	ldrsh	r1, [r1, r3]
	add	r0, r0, r1
	mov	r3, #0xa
	ldrsh	r1, [r2, r3]
.L1563:
	cmp	r0, r1
	blt	.L1546	@cond_branch
.L1564:
	ldrh	r0, [r2, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x26]
	b	.L1546
.L1561:
	ldr	r1, .L1573
	ldr	r0, .L1573+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	ldr	r1, .L1573+0x8
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L1546:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1574:
	.align	2, 0
.L1573:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gSprites
.Lfe131:
	.size	 AnimTask_SnatchPartnerMove,.Lfe131-AnimTask_SnatchPartnerMove
	.align	2, 0
	.globl	AnimTask_TeeterDanceMovement
	.type	 AnimTask_TeeterDanceMovement,function
	.thumb_func
AnimTask_TeeterDanceMovement:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L1578
	add	r4, r1, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0xe]
	ldr	r0, .L1578+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L1576	@cond_branch
	mov	r1, #0x1
.L1576:
	strh	r1, [r4, #0x10]
	ldr	r2, .L1578+0x8
	mov	r0, #0xe
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x22]
	strh	r0, [r4, #0x14]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x20]
	strh	r0, [r4, #0x12]
	strh	r5, [r4, #0x1a]
	strh	r5, [r4, #0x1e]
	mov	r0, #0x1
	strh	r0, [r4, #0x1c]
	strh	r5, [r4, #0x20]
	ldr	r0, .L1578+0xc
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1579:
	.align	2, 0
.L1578:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	AnimTask_TeeterDanceMovement_Step
.Lfe132:
	.size	 AnimTask_TeeterDanceMovement,.Lfe132-AnimTask_TeeterDanceMovement
	.align	2, 0
	.type	 AnimTask_TeeterDanceMovement_Step,function
	.thumb_func
AnimTask_TeeterDanceMovement_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L1591
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L1584	@cond_branch
	cmp	r0, #0x1
	bgt	.L1589	@cond_branch
	cmp	r0, #0
	beq	.L1582	@cond_branch
	b	.L1581
.L1592:
	.align	2, 0
.L1591:
	.word	gTasks
.L1589:
	cmp	r0, #0x2
	beq	.L1586	@cond_branch
	b	.L1581
.L1582:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x8
	mov	r2, #0xff
	and	r0, r0, r2
	strh	r0, [r4, #0x1e]
	ldr	r5, .L1593
	mov	r6, #0xe
	ldrsh	r0, [r4, r6]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r3, .L1593+0x4
	mov	r6, #0x1e
	ldrsh	r0, [r4, r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x15
	strh	r0, [r1, #0x24]
	ldrh	r0, [r4, #0x1a]
	add	r0, r0, #0x2
	and	r0, r0, r2
	strh	r0, [r4, #0x1a]
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	mov	r6, #0x1a
	ldrsh	r0, [r4, r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	ldrh	r1, [r4, #0x10]
	mul	r0, r0, r1
	ldrh	r1, [r4, #0x12]
	add	r0, r0, r1
	strh	r0, [r2, #0x20]
	mov	r6, #0x1a
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bne	.L1581	@cond_branch
	mov	r0, #0xe
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r4, #0x12]
	strh	r1, [r0, #0x20]
	b	.L1590
.L1594:
	.align	2, 0
.L1593:
	.word	gSprites
	.word	gSineTable
.L1584:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x8
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x1e]
	ldr	r3, .L1595
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, .L1595+0x4
	mov	r5, #0x1e
	ldrsh	r0, [r4, r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x15
	strh	r0, [r1, #0x24]
	mov	r6, #0x1e
	ldrsh	r2, [r4, r6]
	cmp	r2, #0
	bne	.L1581	@cond_branch
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	strh	r2, [r1, #0x24]
.L1590:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1581
.L1596:
	.align	2, 0
.L1595:
	.word	gSprites
	.word	gSineTable
.L1586:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L1581:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe133:
	.size	 AnimTask_TeeterDanceMovement_Step,.Lfe133-AnimTask_TeeterDanceMovement_Step
	.align	2, 0
	.type	 AnimKnockOffStrike_Step,function
	.thumb_func
AnimKnockOffStrike_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1601
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldrh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x14
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1600	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1600:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1602:
	.align	2, 0
.L1601:
	.word	gBattleAnimTarget
.Lfe134:
	.size	 AnimKnockOffStrike_Step,.Lfe134-AnimKnockOffStrike_Step
	.align	2, 0
	.type	 AnimKnockOffStrike,function
	.thumb_func
AnimKnockOffStrike:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1606
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1604	@cond_branch
	ldr	r2, .L1606+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L1606+0x8
	strh	r0, [r4, #0x2e]
	mov	r0, #0xc0
	strh	r0, [r4, #0x30]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L1605
.L1607:
	.align	2, 0
.L1606:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0xfff5
.L1604:
	mov	r0, #0xb
	strh	r0, [r4, #0x2e]
	mov	r0, #0xc0
	strh	r0, [r4, #0x30]
	ldr	r1, .L1608
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
.L1605:
	ldr	r0, .L1608+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1609:
	.align	2, 0
.L1608:
	.word	gBattleAnimArgs
	.word	AnimKnockOffStrike_Step
.Lfe135:
	.size	 AnimKnockOffStrike,.Lfe135-AnimKnockOffStrike
	.align	2, 0
	.type	 AnimRecycle,function
	.thumb_func
AnimRecycle:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L1612
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r5, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	bgt	.L1611	@cond_branch
	mov	r0, #0x10
	strh	r0, [r5, #0x22]
.L1611:
	mov	r0, #0x0
	strh	r0, [r5, #0x3a]
	mov	r1, #0x10
	strh	r1, [r5, #0x3c]
	ldr	r0, .L1612+0x4
	str	r0, [r5, #0x1c]
	lsl	r1, r1, #0x8
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1613:
	.align	2, 0
.L1612:
	.word	gBattleAnimAttacker
	.word	AnimRecycle_Step
.Lfe136:
	.size	 AnimRecycle,.Lfe136-AnimRecycle
	.align	2, 0
	.type	 AnimRecycle_Step,function
	.thumb_func
AnimRecycle_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L1623	@cond_branch
	cmp	r1, #0x1
	bgt	.L1635	@cond_branch
	cmp	r1, #0
	beq	.L1616	@cond_branch
	b	.L1615
.L1635:
	cmp	r1, #0x2
	beq	.L1625	@cond_branch
	cmp	r1, #0x3
	beq	.L1632	@cond_branch
	b	.L1615
.L1616:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1615	@cond_branch
	strh	r1, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1618	@cond_branch
	ldrh	r2, [r4, #0x3a]
	mov	r3, #0x3a
	ldrsh	r0, [r4, r3]
	cmp	r0, #0xf
	bgt	.L1620	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r4, #0x3a]
	b	.L1620
.L1618:
	ldrh	r2, [r4, #0x3c]
	mov	r3, #0x3c
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L1620	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r4, #0x3c]
.L1620:
	add	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x3a]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1615	@cond_branch
	b	.L1636
.L1623:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L1615	@cond_branch
	strh	r1, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	b	.L1636
.L1625:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1615	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1627	@cond_branch
	ldrh	r2, [r4, #0x3a]
	mov	r3, #0x3a
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L1629	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r4, #0x3a]
	b	.L1629
.L1627:
	ldrh	r2, [r4, #0x3c]
	mov	r3, #0x3c
	ldrsh	r0, [r4, r3]
	cmp	r0, #0xf
	bgt	.L1629	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r4, #0x3c]
.L1629:
	add	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x3a]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L1615	@cond_branch
.L1636:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	b	.L1615
.L1632:
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L1615:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe137:
	.size	 AnimRecycle_Step,.Lfe137-AnimRecycle_Step
	.align	2, 0
	.globl	AnimTask_GetWeather
	.type	 AnimTask_GetWeather,function
	.thumb_func
AnimTask_GetWeather:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L1646
	mov	r0, #0x0
	strh	r0, [r2, #0xe]
	ldr	r0, .L1646+0x4
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1638	@cond_branch
	mov	r0, #0x1
	b	.L1645
.L1647:
	.align	2, 0
.L1646:
	.word	gBattleAnimArgs
	.word	gWeatherMoveAnim
.L1638:
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1640	@cond_branch
	mov	r0, #0x2
	b	.L1645
.L1640:
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1642	@cond_branch
	mov	r0, #0x3
	b	.L1645
.L1642:
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1639	@cond_branch
	mov	r0, #0x4
.L1645:
	strh	r0, [r2, #0xe]
.L1639:
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.Lfe138:
	.size	 AnimTask_GetWeather,.Lfe138-AnimTask_GetWeather
	.align	2, 0
	.globl	AnimTask_SlackOffSquish
	.type	 AnimTask_SlackOffSquish,function
	.thumb_func
AnimTask_SlackOffSquish:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L1649
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L1649+0x4
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	strh	r1, [r4, #0x26]
	ldr	r2, .L1649+0x8
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L1649+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1650:
	.align	2, 0
.L1649:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gSlackOffSquishAffineAnimCmds
	.word	AnimTask_SlackOffSquish_Step
.Lfe139:
	.size	 AnimTask_SlackOffSquish,.Lfe139-AnimTask_SlackOffSquish
	.align	2, 0
	.type	 AnimTask_SlackOffSquish_Step,function
	.thumb_func
AnimTask_SlackOffSquish_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r2, .L1658
	add	r3, r0, r2
	ldrh	r0, [r3, #0x8]
	add	r1, r0, #0x1
	mov	r5, #0x0
	strh	r1, [r3, #0x8]
	sub	r0, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r6, r2, #0
	cmp	r0, #0x16
	bhi	.L1652	@cond_branch
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L1656	@cond_branch
	strh	r5, [r3, #0xa]
	ldrh	r0, [r3, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xc]
	mov	r5, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1654	@cond_branch
	ldr	r2, .L1658+0x4
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L1658+0x8
	strh	r1, [r0, #0x24]
	b	.L1656
.L1659:
	.align	2, 0
.L1658:
	.word	gTasks
	.word	gSprites
	.word	0xffff
.L1654:
.L1652:
	ldr	r2, .L1660
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r5, [r0, #0x24]
.L1656:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1657	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L1657:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1661:
	.align	2, 0
.L1660:
	.word	gSprites
.Lfe140:
	.size	 AnimTask_SlackOffSquish_Step,.Lfe140-AnimTask_SlackOffSquish_Step
.text
	.align	2, 0

