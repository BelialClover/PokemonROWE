@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sOpponentBufferCommands,object
	.size	 sOpponentBufferCommands,232
sOpponentBufferCommands:
	.word	OpponentHandleGetMonData
	.word	OpponentHandleGetRawMonData
	.word	OpponentHandleSetMonData
	.word	OpponentHandleSetRawMonData
	.word	OpponentHandleLoadMonSprite
	.word	OpponentHandleSwitchInAnim
	.word	OpponentHandleReturnMonToBall
	.word	OpponentHandleDrawTrainerPic
	.word	OpponentHandleTrainerSlide
	.word	OpponentHandleTrainerSlideBack
	.word	OpponentHandleFaintAnimation
	.word	OpponentHandlePaletteFade
	.word	OpponentHandleSuccessBallThrowAnim
	.word	OpponentHandleBallThrow
	.word	OpponentHandlePause
	.word	OpponentHandleMoveAnimation
	.word	OpponentHandlePrintString
	.word	OpponentHandlePrintSelectionString
	.word	OpponentHandleChooseAction
	.word	OpponentHandleUnknownYesNoBox
	.word	OpponentHandleChooseMove
	.word	OpponentHandleChooseItem
	.word	OpponentHandleChoosePokemon
	.word	OpponentHandleCmd23
	.word	OpponentHandleHealthBarUpdate
	.word	OpponentHandleExpUpdate
	.word	OpponentHandleStatusIconUpdate
	.word	OpponentHandleStatusAnimation
	.word	OpponentHandleStatusXor
	.word	OpponentHandleDataTransfer
	.word	OpponentHandleDMA3Transfer
	.word	OpponentHandlePlayBGM
	.word	OpponentHandleCmd32
	.word	OpponentHandleTwoReturnValues
	.word	OpponentHandleChosenMonReturnValue
	.word	OpponentHandleOneReturnValue
	.word	OpponentHandleOneReturnValue_Duplicate
	.word	OpponentHandleCmd37
	.word	OpponentHandleCmd38
	.word	OpponentHandleCmd39
	.word	OpponentHandleCmd40
	.word	OpponentHandleHitAnimation
	.word	OpponentHandleCmd42
	.word	OpponentHandlePlaySE
	.word	OpponentHandlePlayFanfareOrBGM
	.word	OpponentHandleFaintingCry
	.word	OpponentHandleIntroSlide
	.word	OpponentHandleIntroTrainerBallThrow
	.word	OpponentHandleDrawPartyStatusSummary
	.word	OpponentHandleHidePartyStatusSummary
	.word	OpponentHandleEndBounceEffect
	.word	OpponentHandleSpriteInvisibility
	.word	OpponentHandleBattleAnimation
	.word	OpponentHandleLinkStandbyMsg
	.word	OpponentHandleResetActionMoveSelection
	.word	OpponentHandleCmd55
	.word	OpponentHandleDebugMenu
	.word	OpponentCmdEnd
	.type	 sUnknown_0831C7AC,object
sUnknown_0831C7AC:
	.byte	0xb0
	.byte	0xb0
	.byte	0xc8
	.byte	0x98
	.byte	0x28
	.byte	0x28
	.byte	0x28
	.byte	0x20
	.size	 sUnknown_0831C7AC,8
.text
	.align	2, 0
	.type	 nullsub_26,function
	.thumb_func
nullsub_26:
	bx	lr
.Lfe1:
	.size	 nullsub_26,.Lfe1-nullsub_26
	.align	2, 0
	.globl	SetControllerToOpponent
	.type	 SetControllerToOpponent,function
	.thumb_func
SetControllerToOpponent:
	ldr	r1, .L4
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L4+0x8
	str	r1, [r0]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	OpponentBufferRunCommand
.Lfe2:
	.size	 SetControllerToOpponent,.Lfe2-SetControllerToOpponent
	.align	2, 0
	.type	 OpponentBufferRunCommand,function
	.thumb_func
OpponentBufferRunCommand:
	push	{lr}
	ldr	r2, .L10
	ldr	r1, .L10+0x4
	ldr	r0, .L10+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L7	@cond_branch
	ldr	r0, .L10+0xc
	ldr	r0, [r0]
	lsl	r1, r3, #0x9
	add	r0, r0, #0x20
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0x39
	bhi	.L8	@cond_branch
	ldr	r0, .L10+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L7
.L11:
	.align	2, 0
.L10:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleResources
	.word	sOpponentBufferCommands
.L8:
	bl	OpponentBufferExecCompleted
.L7:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 OpponentBufferRunCommand,.Lfe3-OpponentBufferRunCommand
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy:
	push	{lr}
	ldr	r2, .L14
	ldr	r1, .L14+0x4
	ldr	r0, .L14+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L14+0xc
	cmp	r1, r0
	bne	.L13	@cond_branch
	bl	OpponentBufferExecCompleted
.L13:
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe4:
	.size	 CompleteOnBattlerSpriteCallbackDummy,.Lfe4-CompleteOnBattlerSpriteCallbackDummy
	.align	2, 0
	.type	 CompleteOnBankSpriteCallbackDummy2,function
	.thumb_func
CompleteOnBankSpriteCallbackDummy2:
	push	{lr}
	ldr	r2, .L18
	ldr	r1, .L18+0x4
	ldr	r0, .L18+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L18+0xc
	cmp	r1, r0
	bne	.L17	@cond_branch
	bl	OpponentBufferExecCompleted
.L17:
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe5:
	.size	 CompleteOnBankSpriteCallbackDummy2,.Lfe5-CompleteOnBankSpriteCallbackDummy2
	.align	2, 0
	.type	 sub_805F240,function
	.thumb_func
sub_805F240:
	push	{r4, r5, r6, lr}
	ldr	r5, .L22
	ldr	r6, .L22+0x4
	ldr	r4, .L22+0x8
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r2, r0, #0x2
	add	r0, r5, #0
	add	r0, r0, #0x1c
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r0, .L22+0xc
	cmp	r1, r0
	bne	.L21	@cond_branch
	add	r0, r2, r5
	ldrh	r0, [r0, #0x6]
	bl	FreeTrainerFrontPicPalette
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	bl	OpponentBufferExecCompleted
.L21:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe6:
	.size	 sub_805F240,.Lfe6-sub_805F240
	.align	2, 0
	.type	 sub_805F2A8,function
	.thumb_func
sub_805F2A8:
	push	{r4, lr}
	ldr	r4, .L26
	ldr	r1, [r4]
	ldr	r3, .L26+0x4
	ldrb	r0, [r3]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L25	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	bl	OpponentBufferExecCompleted
.L25:
	pop	{r4}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe7:
	.size	 sub_805F2A8,.Lfe7-sub_805F2A8
	.align	2, 0
	.type	 sub_805F2F0,function
	.thumb_func
sub_805F2F0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	mov	sl, r0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L30	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L31	@cond_branch
	ldr	r0, .L45
	ldr	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L31	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L30	@cond_branch
	ldr	r0, .L45+0x4
	ldrh	r1, [r0]
	ldr	r0, .L45+0x8
	cmp	r1, r0
	bne	.L30	@cond_branch
.L31:
	ldr	r0, .L45
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L29	@cond_branch
.L30:
	ldr	r2, .L45+0xc
	ldr	r1, .L45+0x10
	ldr	r3, .L45+0x14
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L45+0x18
	cmp	r1, r0
	bne	.L32	@cond_branch
	mov	r1, #0x1
	mov	sl, r1
.L32:
	mov	r6, #0x0
	b	.L33
.L46:
	.align	2, 0
.L45:
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent_B
	.word	0xffff
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.L29:
	ldr	r3, .L47
	ldr	r6, .L47+0x4
	ldr	r2, .L47+0x8
	ldrb	r4, [r2]
	add	r0, r4, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r3, #0x1c
	add	r0, r0, r3
	ldr	r5, [r0]
	ldr	r0, .L47+0xc
	cmp	r5, r0
	bne	.L34	@cond_branch
	mov	r0, #0x2
	eor	r4, r4, r0
	add	r0, r4, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	cmp	r0, r5
	bne	.L34	@cond_branch
	mov	r0, #0x1
	mov	sl, r0
.L34:
	mov	r6, #0x1
.L33:
	ldr	r3, .L47+0x10
	ldr	r1, .L47+0x14
	mov	r8, r1
	ldr	r2, [r1]
	ldr	r7, .L47+0x8
	ldrb	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, [r2, #0x4]
	add	r0, r5, r0
	str	r0, [r3]
	ldr	r2, .L47+0x18
	ldrb	r0, [r7]
	mov	r1, #0x2
	mov	r9, r1
	mov	r1, r9
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r5, r0
	str	r0, [r2]
	mov	r0, sl
	cmp	r0, #0
	bne	.LCB412
	b	.L28	@long jump
.LCB412:
	cmp	r6, #0x1
	bne	.L36	@cond_branch
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r5
	ldrb	r1, [r4, #0x1]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB428
	b	.L28	@long jump
.LCB428:
	mov	r0, r9
	eor	r0, r0, r2
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x1]
	and	r6, r6, r0
	cmp	r6, #0
	bne	.LCB442
	b	.L28	@long jump
.LCB442:
	ldrb	r1, [r4]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r1, r8
	ldr	r0, [r1]
	ldrb	r2, [r7]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	mov	r0, r8
	ldr	r2, [r0]
	ldrb	r0, [r7]
	mov	r1, r9
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	mov	r1, r8
	ldr	r2, [r1]
	ldrb	r0, [r7]
	mov	r1, r9
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L47+0x1c
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	b	.L39
.L48:
	.align	2, 0
.L47:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gUnknown_020244D8
	.word	gBattleSpritesDataPtr
	.word	gUnknown_020244DC
	.word	0x27f9
.L36:
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L28	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bne	.L41	@cond_branch
	mov	r0, r8
	ldr	r2, [r0]
	ldrb	r0, [r7]
	mov	r1, r9
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L28	@cond_branch
	ldr	r4, .L49
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
.L41:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r1, .L49+0x4
	ldrb	r2, [r1]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r1, .L49+0x4
	ldrb	r2, [r1]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
.L39:
	ldr	r0, .L49+0x8
	ldr	r0, [r0]
	ldr	r3, .L49+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x9]
	ldr	r1, .L49+0xc
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L49+0x10
	str	r1, [r0]
.L28:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	0x27f9
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_805F2A8
.Lfe8:
	.size	 sub_805F2F0,.Lfe8-sub_805F2F0
	.align	2, 0
	.type	 sub_805F560,function
	.thumb_func
sub_805F560:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	sl, r0
	ldr	r5, .L72
	ldr	r0, [r5]
	ldr	r4, .L72+0x4
	ldrb	r2, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r6, #0xc4
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L52	@cond_branch
	ldr	r0, .L72+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L72+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L52:
	ldr	r0, .L72+0x10
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L53	@cond_branch
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L54	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L53	@cond_branch
	ldr	r0, .L72+0x14
	ldrh	r1, [r0]
	ldr	r0, .L72+0x18
	cmp	r1, r0
	bne	.L53	@cond_branch
.L54:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L53	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r4]
	mov	r0, #0x2
	add	r3, r0, #0
	eor	r3, r3, r1
	ldr	r1, [r2, #0x4]
	lsl	r2, r3, #0x1
	add	r0, r2, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L53	@cond_branch
	ldr	r0, .L72+0x8
	add	r0, r2, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L72+0xc
	add	r1, r1, r0
	add	r0, r3, #0
	bl	TryShinyAnimation
.L53:
	ldr	r2, .L72
	ldr	r0, [r2]
	ldr	r1, .L72+0x4
	mov	r8, r1
	ldrb	r4, [r1]
	ldr	r5, [r0, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r3, r0, r5
	ldrb	r1, [r3]
	mov	r6, #0x8
	add	r0, r6, #0
	and	r0, r0, r1
	mov	r9, r2
	cmp	r0, #0
	bne	.L55	@cond_branch
	mov	r7, #0x2
	add	r1, r7, #0
	eor	r1, r1, r4
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L55	@cond_branch
	ldrb	r1, [r3, #0x1]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L56	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L57	@cond_branch
	ldr	r0, .L72+0x10
	ldr	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L58	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L57	@cond_branch
	ldr	r0, .L72+0x14
	ldrh	r1, [r0]
	ldr	r0, .L72+0x18
	cmp	r1, r0
	bne	.L57	@cond_branch
.L58:
	ldr	r4, .L72+0x1c
	mov	r1, r8
	ldrb	r0, [r1]
	add	r1, r7, #0
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L72+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L72+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	mov	r1, r8
	ldrb	r0, [r1]
	eor	r0, r0, r7
	bl	sub_8076918
	mov	r1, r8
	ldrb	r0, [r1]
	eor	r0, r0, r7
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L57:
	ldr	r5, .L72+0x1c
	ldr	r4, .L72+0x4
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L72+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L72+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r4]
	bl	sub_8076918
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L56:
	ldr	r3, .L72
	ldr	r2, [r3]
	ldr	r0, .L72+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r9, r3
.L55:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r4, .L72+0x4
	ldrb	r2, [r4]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x80
	bne	.L59	@cond_branch
	mov	r1, #0x2
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L59	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L59	@cond_branch
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r4, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L60	@cond_branch
	ldr	r0, .L72+0x10
	ldr	r0, [r0]
	mov	r1, #0x42
	and	r0, r0, r1
	cmp	r0, #0x42
	bne	.L61	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L60	@cond_branch
	ldr	r0, .L72+0x20
	bl	m4aMPlayContinue
	b	.L60
.L73:
	.align	2, 0
.L72:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent_B
	.word	0xffff
	.word	gHealthboxSpriteIds
	.word	gMPlayInfo_BGM
.L61:
	ldr	r0, .L74
	ldr	r1, .L74+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L60:
	ldr	r0, .L74+0x8
	ldr	r2, [r0]
	ldr	r0, .L74+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r0, #0x1
	str	r0, [sp]
.L59:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L65	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L64	@cond_branch
	ldr	r0, .L74+0x10
	ldr	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L64	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L65	@cond_branch
	ldr	r0, .L74+0x14
	ldrh	r1, [r0]
	ldr	r0, .L74+0x4
	cmp	r1, r0
	beq	.L64	@cond_branch
.L65:
	ldr	r2, .L74+0x18
	ldr	r0, .L74+0x1c
	ldr	r1, .L74+0xc
	ldrb	r4, [r1]
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r3, [r0]
	ldr	r0, .L74+0x20
	cmp	r3, r0
	bne	.L67	@cond_branch
	ldr	r0, .L74+0x24
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r3
	bne	.L67	@cond_branch
	mov	r1, #0x1
	mov	sl, r1
	b	.L67
.L75:
	.align	2, 0
.L74:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent_B
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
.L64:
	ldr	r2, .L76
	ldr	r7, .L76+0x4
	ldr	r0, .L76+0x8
	ldrb	r3, [r0]
	add	r0, r3, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r4, [r0]
	ldr	r0, .L76+0xc
	cmp	r4, r0
	bne	.L67	@cond_branch
	ldr	r6, .L76+0x10
	add	r0, r3, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r5, [r0]
	cmp	r5, r4
	bne	.L67	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	add	r0, r3, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r4, [r0]
	cmp	r4, r5
	bne	.L67	@cond_branch
	add	r0, r3, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r4
	bne	.L67	@cond_branch
	mov	r0, #0x1
	mov	sl, r0
.L67:
	ldr	r1, [sp]
	cmp	r1, #0
	beq	.L69	@cond_branch
	mov	r0, sl
	cmp	r0, #0
	beq	.L69	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L70	@cond_branch
	ldr	r0, .L76+0x14
	ldr	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L71	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L70	@cond_branch
	ldr	r0, .L76+0x18
	ldrh	r1, [r0]
	ldr	r0, .L76+0x1c
	cmp	r1, r0
	bne	.L70	@cond_branch
.L71:
	ldr	r1, .L76+0x4
	ldr	r5, .L76+0x8
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L76
	add	r0, r0, r1
	bl	DestroySprite
	ldrb	r0, [r5]
	eor	r4, r4, r0
	ldr	r1, .L76+0x20
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L76+0x24
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
.L70:
	ldr	r1, .L76+0x4
	ldr	r4, .L76+0x8
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L76
	add	r0, r0, r1
	bl	DestroySprite
	ldrb	r5, [r4]
	ldr	r1, .L76+0x20
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L76+0x24
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r3, .L76+0x28
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r0, [r3]
	ldrb	r2, [r4]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r0, [r3]
	ldrb	r2, [r4]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r1, .L76+0x2c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L76+0x30
	str	r1, [r0]
.L69:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent_B
	.word	0xffff
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_805F2F0
.Lfe9:
	.size	 sub_805F560,.Lfe9-sub_805F560
	.align	2, 0
	.type	 sub_805F994,function
	.thumb_func
sub_805F994:
	push	{r4, r5, lr}
	ldr	r2, .L81
	ldr	r0, .L81+0x4
	ldr	r1, .L81+0x8
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L79	@cond_branch
	ldr	r0, .L81+0xc
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r2, r3, #0x1
	add	r0, r2, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L79	@cond_branch
	ldr	r0, .L81+0x10
	add	r0, r2, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L81+0x14
	add	r1, r1, r0
	add	r0, r3, #0
	bl	TryShinyAnimation
.L79:
	ldr	r2, .L81
	ldr	r0, .L81+0x4
	ldr	r5, .L81+0x8
	ldrb	r3, [r5]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L81+0x18
	cmp	r1, r0
	bne	.L80	@cond_branch
	ldr	r4, .L81+0xc
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L80	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r4]
	ldrb	r2, [r5]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L81+0x1c
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	bl	OpponentBufferExecCompleted
.L80:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	SpriteCallbackDummy
	.word	0x27f9
.Lfe10:
	.size	 sub_805F994,.Lfe10-sub_805F994
	.align	2, 0
	.type	 CompleteOnHealthbarDone,function
	.thumb_func
CompleteOnHealthbarDone:
	push	{r4, r5, r6, lr}
	ldr	r6, .L86
	ldrb	r0, [r6]
	ldr	r5, .L86+0x4
	add	r1, r0, r5
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L84	@cond_branch
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
	b	.L85
.L87:
	.align	2, 0
.L86:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.L84:
	bl	OpponentBufferExecCompleted
.L85:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 CompleteOnHealthbarDone,.Lfe11-CompleteOnHealthbarDone
	.align	2, 0
	.type	 sub_805FAC4,function
	.thumb_func
sub_805FAC4:
	push	{lr}
	ldr	r2, .L90
	ldr	r0, .L90+0x4
	ldr	r1, .L90+0x8
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L89	@cond_branch
	ldr	r0, .L90+0xc
	add	r0, r3, r0
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	OpponentBufferExecCompleted
.L89:
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.Lfe12:
	.size	 sub_805FAC4,.Lfe12-sub_805FAC4
	.align	2, 0
	.type	 sub_805FB08,function
	.thumb_func
sub_805FB08:
	push	{r4, r5, r6, lr}
	ldr	r0, .L94
	ldr	r0, [r0]
	ldr	r6, .L94+0x4
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L93	@cond_branch
	ldr	r5, .L94+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L94+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	HideBattlerShadowSprite
	ldr	r1, .L94+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	OpponentBufferExecCompleted
.L93:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe13:
	.size	 sub_805FB08,.Lfe13-sub_805FB08
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter,function
	.thumb_func
CompleteOnInactiveTextPrinter:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L97	@cond_branch
	bl	OpponentBufferExecCompleted
.L97:
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 CompleteOnInactiveTextPrinter,.Lfe14-CompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 DoHitAnimBlinkSpriteEffect,function
	.thumb_func
DoHitAnimBlinkSpriteEffect:
	push	{r4, lr}
	ldr	r1, .L102
	ldr	r0, .L102+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L102+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L99	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L102+0xc
	strb	r3, [r0]
	bl	OpponentBufferExecCompleted
	b	.L100
.L103:
	.align	2, 0
.L102:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	gDoingBattleAnim
.L99:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L101	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L101:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L100:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 DoHitAnimBlinkSpriteEffect,.Lfe15-DoHitAnimBlinkSpriteEffect
	.align	2, 0
	.type	 sub_805FC10,function
	.thumb_func
sub_805FC10:
	push	{r4, lr}
	ldr	r2, .L107
	ldr	r0, .L107+0x4
	ldr	r4, .L107+0x8
	ldrb	r3, [r4]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L107+0xc
	cmp	r1, r0
	bne	.L105	@cond_branch
	ldr	r0, .L107+0x10
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L106	@cond_branch
	add	r0, r3, #0
	add	r1, r3, #0
	add	r2, r3, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
.L106:
	ldr	r0, .L107+0x14
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L107+0x18
	str	r0, [r1]
.L105:
	pop	{r4}
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_805FC80
.Lfe16:
	.size	 sub_805FC10,.Lfe16-sub_805FC10
	.align	2, 0
	.type	 sub_805FC80,function
	.thumb_func
sub_805FC80:
	push	{r4, lr}
	ldr	r0, .L113
	ldr	r0, [r0]
	ldr	r4, .L113+0x4
	ldrb	r1, [r4]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L110	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L110	@cond_branch
	ldr	r2, .L113+0x8
	ldr	r1, .L113+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L113+0x10
	cmp	r1, r0
	beq	.L112	@cond_branch
	ldr	r0, .L113+0x14
	cmp	r1, r0
	bne	.L110	@cond_branch
.L112:
	ldr	r0, .L113+0x18
	ldr	r1, .L113+0x1c
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	bl	OpponentBufferExecCompleted
.L110:
	pop	{r4}
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCallbackDummy
	.word	SpriteCallbackDummy_2
	.word	gMPlayInfo_BGM
	.word	0xffff
.Lfe17:
	.size	 sub_805FC80,.Lfe17-sub_805FC80
	.align	2, 0
	.type	 sub_805FD00,function
	.thumb_func
sub_805FD00:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L117
	ldr	r0, [r4]
	ldr	r5, .L117+0x4
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r1, [r3, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L116	@cond_branch
	ldr	r7, .L117+0x8
	ldr	r6, .L117+0xc
	add	r0, r2, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r7, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L117+0x10
	cmp	r1, r0
	bne	.L116	@cond_branch
	ldrb	r1, [r3]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, [r4]
	ldrb	r2, [r5]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L117+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r4, .L117+0x18
	ldrb	r1, [r5]
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L117+0x1c
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L117+0x20
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r5]
	bl	sub_8076918
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldrb	r0, [r5]
	bl	CopyBattleSpriteInvisibility
	ldr	r1, .L117+0x24
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L117+0x28
	str	r1, [r0]
.L116:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L118:
	.align	2, 0
.L117:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCallbackDummy
	.word	0x27f9
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerControllerFuncs
	.word	sub_805FC10
.Lfe18:
	.size	 sub_805FD00,.Lfe18-sub_805FD00
	.align	2, 0
	.type	 sub_805FDF0,function
	.thumb_func
sub_805FDF0:
	push	{r4, r5, r6, lr}
	ldr	r6, .L122
	ldr	r0, [r6]
	ldr	r5, .L122+0x4
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L120	@cond_branch
	ldr	r0, .L122+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L122+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L120:
	ldr	r4, .L122+0x10
	ldr	r0, .L122+0x14
	ldrb	r2, [r5]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r3, r0
	ldr	r1, [r0]
	ldr	r0, .L122+0x18
	cmp	r1, r0
	bne	.L121	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L121	@cond_branch
	add	r0, r3, r4
	bl	DestroySprite
	ldrb	r4, [r5]
	ldr	r1, .L122+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L122+0xc
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r1, .L122+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L122+0x20
	str	r1, [r0]
.L121:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	sub_805FD00
.Lfe19:
	.size	 sub_805FDF0,.Lfe19-sub_805FDF0
	.align	2, 0
	.type	 CompleteOnFinishedStatusAnimation,function
	.thumb_func
CompleteOnFinishedStatusAnimation:
	push	{lr}
	ldr	r0, .L126
	ldr	r2, [r0]
	ldr	r0, .L126+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L125	@cond_branch
	bl	OpponentBufferExecCompleted
.L125:
	pop	{r0}
	bx	r0
.L127:
	.align	2, 0
.L126:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe20:
	.size	 CompleteOnFinishedStatusAnimation,.Lfe20-CompleteOnFinishedStatusAnimation
	.align	2, 0
	.type	 CompleteOnFinishedBattleAnimation,function
	.thumb_func
CompleteOnFinishedBattleAnimation:
	push	{lr}
	ldr	r0, .L130
	ldr	r2, [r0]
	ldr	r0, .L130+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L129	@cond_branch
	bl	OpponentBufferExecCompleted
.L129:
	pop	{r0}
	bx	r0
.L131:
	.align	2, 0
.L130:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe21:
	.size	 CompleteOnFinishedBattleAnimation,.Lfe21-CompleteOnFinishedBattleAnimation
	.align	2, 0
	.type	 OpponentBufferExecCompleted,function
	.thumb_func
OpponentBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L135
	ldr	r4, .L135+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L135+0x8
	str	r1, [r0]
	ldr	r0, .L135+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L133	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r0, .L135+0x10
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x20
	add	r1, r1, r0
	mov	r0, #0x39
	strb	r0, [r1]
	b	.L134
.L136:
	.align	2, 0
.L135:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	OpponentBufferRunCommand
	.word	gBattleTypeFlags
	.word	gBattleResources
.L133:
	ldr	r2, .L137
	ldr	r1, .L137+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L134:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L138:
	.align	2, 0
.L137:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe22:
	.size	 OpponentBufferExecCompleted,.Lfe22-OpponentBufferExecCompleted
	.align	2, 0
	.type	 OpponentHandleGetMonData,function
	.thumb_func
OpponentHandleGetMonData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x100
	mov	r6, #0x0
	ldr	r0, .L148
	ldr	r1, [r0]
	ldr	r0, .L148+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L140	@cond_branch
	ldr	r0, .L148+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	GetOpponentMonData
	add	r6, r0, #0
	b	.L141
.L149:
	.align	2, 0
.L148:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L140:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L145:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L146	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	GetOpponentMonData
	add	r6, r6, r0
.L146:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L145	@cond_branch
.L141:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	BtlController_EmitDataTransfer
	bl	OpponentBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 OpponentHandleGetMonData,.Lfe23-OpponentHandleGetMonData
	.align	2, 0
	.type	 GetOpponentMonData,function
	.thumb_func
GetOpponentMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x94
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r3, .L239
	ldr	r1, [r3]
	ldr	r2, .L239+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r4, r2, #0
	cmp	r0, #0x3b
	bls	.LCB2319
	bl	.L151	@far jump
.LCB2319:
	lsl	r0, r0, #0x2
	ldr	r1, .L239+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L240:
	.align	2, 0
.L239:
	.word	gBattleResources
	.word	gActiveBattler
	.word	.L233
	.align	2, 0
	.align	2, 0
.L233:
	.word	.L152
	.word	.L163
	.word	.L164
	.word	.L165
	.word	.L179
	.word	.L179
	.word	.L179
	.word	.L179
	.word	.L180
	.word	.L189
	.word	.L189
	.word	.L189
	.word	.L189
	.word	.L151
	.word	.L151
	.word	.L151
	.word	.L151
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L193
	.word	.L194
	.word	.L195
	.word	.L196
	.word	.L197
	.word	.L198
	.word	.L199
	.word	.L200
	.word	.L201
	.word	.L202
	.word	.L203
	.word	.L204
	.word	.L205
	.word	.L206
	.word	.L207
	.word	.L208
	.word	.L209
	.word	.L210
	.word	.L211
	.word	.L212
	.word	.L213
	.word	.L214
	.word	.L215
	.word	.L216
	.word	.L217
	.word	.L218
	.word	.L219
	.word	.L220
	.word	.L221
	.word	.L222
	.word	.L223
	.word	.L224
	.word	.L225
	.word	.L226
	.word	.L227
	.word	.L228
	.word	.L229
	.word	.L230
	.word	.L231
	.word	.L232
.L152:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L241
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r3, sp
	ldr	r2, .L241+0x4
	add	r1, r2, #0
	and	r0, r0, r1
	ldrh	r2, [r3]
	ldr	r1, .L241+0x8
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3]
	add	r0, r4, #0
	mov	r1, #0x59
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x3
	ldrb	r2, [r3, #0x1]
	mov	r1, #0x7
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x30]
	mov	r6, #0x0
	mov	r0, #0x25
	add	r0, r0, sp
	mov	r9, r0
	mov	r1, #0x3d
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2d
	str	r2, [sp, #0x84]
	mov	r0, sp
	add	r0, r0, #0x2c
	str	r0, [sp, #0x80]
	mov	r1, sp
	add	r1, r1, #0x6c
	str	r1, [sp, #0x90]
	add	r2, r2, #0x5
	str	r2, [sp, #0x88]
	add	r0, r0, #0x12
	str	r0, [sp, #0x8c]
	mov	r8, r4
	add	r4, sp, #0xc
.L156:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L156	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L241
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x84]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L241+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L241+0x10
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L241+0x14
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x50]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x80]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2a]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x58]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x90]
	bl	GetMonData
	ldr	r0, [sp, #0x88]
	ldr	r1, [sp, #0x90]
	bl	StringCopy10
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L161:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x5b
	bls	.L161	@cond_branch
	b	.L151
.L242:
	.align	2, 0
.L241:
	.word	gEnemyParty
	.word	0x7ff
	.word	-0x800
	.word	-0x3e1
	.word	-0xf8001
	.word	-0x1f1
.L163:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L243
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L235
.L244:
	.align	2, 0
.L243:
	.word	gEnemyParty
.L164:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L245
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L235
.L246:
	.align	2, 0
.L245:
	.word	gEnemyParty
.L165:
	mov	r6, #0x0
	add	r2, sp, #0x5c
	mov	r9, r2
	add	r0, sp, #0x64
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L247
	add	r4, r1, r0
	mov	r8, r9
.L169:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L169	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L247
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L174:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L174	@cond_branch
	b	.L151
.L248:
	.align	2, 0
.L247:
	.word	gEnemyParty
.L179:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L249
	add	r0, r0, r1
	ldr	r2, [r3]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x21
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0x9
	b	.L235
.L250:
	.align	2, 0
.L249:
	.word	gEnemyParty
.L180:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L251
	mov	r8, r2
.L184:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L184	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L251
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L151
.L252:
	.align	2, 0
.L251:
	.word	gEnemyParty
.L189:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L253
	add	r0, r0, r1
	ldr	r2, [r3]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x21
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0x8
	b	.L236
.L254:
	.align	2, 0
.L253:
	.word	gEnemyParty
.L190:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L255
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L237
.L256:
	.align	2, 0
.L255:
	.word	gEnemyParty
.L191:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L257
	add	r0, r0, r1
	mov	r1, #0x19
.L237:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L151
.L258:
	.align	2, 0
.L257:
	.word	gEnemyParty
.L192:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L259
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L236
.L260:
	.align	2, 0
.L259:
	.word	gEnemyParty
.L193:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L261
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L236
.L262:
	.align	2, 0
.L261:
	.word	gEnemyParty
.L194:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L263
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L236
.L264:
	.align	2, 0
.L263:
	.word	gEnemyParty
.L195:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L265
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L236
.L266:
	.align	2, 0
.L265:
	.word	gEnemyParty
.L196:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L267
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L236
.L268:
	.align	2, 0
.L267:
	.word	gEnemyParty
.L197:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L269
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L236
.L270:
	.align	2, 0
.L269:
	.word	gEnemyParty
.L198:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L271
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L236
.L272:
	.align	2, 0
.L271:
	.word	gEnemyParty
.L199:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L273
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L236
.L274:
	.align	2, 0
.L273:
	.word	gEnemyParty
.L200:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L275
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L236
.L276:
	.align	2, 0
.L275:
	.word	gEnemyParty
.L201:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L277
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L236
.L278:
	.align	2, 0
.L277:
	.word	gEnemyParty
.L202:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L279
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L236
.L280:
	.align	2, 0
.L279:
	.word	gEnemyParty
.L203:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L281
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L236
.L282:
	.align	2, 0
.L281:
	.word	gEnemyParty
.L204:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L283
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L151
.L284:
	.align	2, 0
.L283:
	.word	gEnemyParty
.L205:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L285
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L236
.L286:
	.align	2, 0
.L285:
	.word	gEnemyParty
.L206:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L287
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L236
.L288:
	.align	2, 0
.L287:
	.word	gEnemyParty
.L207:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L289
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L236
.L290:
	.align	2, 0
.L289:
	.word	gEnemyParty
.L208:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L291
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L236
.L292:
	.align	2, 0
.L291:
	.word	gEnemyParty
.L209:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L293
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L236
.L294:
	.align	2, 0
.L293:
	.word	gEnemyParty
.L210:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L295
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L236
.L296:
	.align	2, 0
.L295:
	.word	gEnemyParty
.L211:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L297
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L238
.L298:
	.align	2, 0
.L297:
	.word	gEnemyParty
.L212:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L299
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L235
.L300:
	.align	2, 0
.L299:
	.word	gEnemyParty
.L213:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L301
	add	r0, r0, r1
	mov	r1, #0x37
.L238:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L151
.L302:
	.align	2, 0
.L301:
	.word	gEnemyParty
.L214:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L303
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L236
.L304:
	.align	2, 0
.L303:
	.word	gEnemyParty
.L215:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L305
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L235
.L306:
	.align	2, 0
.L305:
	.word	gEnemyParty
.L216:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L307
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L235
.L308:
	.align	2, 0
.L307:
	.word	gEnemyParty
.L217:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L309
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L235
.L310:
	.align	2, 0
.L309:
	.word	gEnemyParty
.L218:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L311
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L235
.L312:
	.align	2, 0
.L311:
	.word	gEnemyParty
.L219:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L313
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L235
.L314:
	.align	2, 0
.L313:
	.word	gEnemyParty
.L220:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L315
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L235
.L316:
	.align	2, 0
.L315:
	.word	gEnemyParty
.L221:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L317
	add	r0, r0, r1
	mov	r1, #0x3f
.L235:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L151
.L318:
	.align	2, 0
.L317:
	.word	gEnemyParty
.L222:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L319
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L236
.L320:
	.align	2, 0
.L319:
	.word	gEnemyParty
.L223:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L321
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L236
.L322:
	.align	2, 0
.L321:
	.word	gEnemyParty
.L224:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L323
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L236
.L324:
	.align	2, 0
.L323:
	.word	gEnemyParty
.L225:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L325
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L236
.L326:
	.align	2, 0
.L325:
	.word	gEnemyParty
.L226:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L327
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L236
.L328:
	.align	2, 0
.L327:
	.word	gEnemyParty
.L227:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L329
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L236
.L330:
	.align	2, 0
.L329:
	.word	gEnemyParty
.L228:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L331
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L236
.L332:
	.align	2, 0
.L331:
	.word	gEnemyParty
.L229:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L333
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L236
.L334:
	.align	2, 0
.L333:
	.word	gEnemyParty
.L230:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L335
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L236
.L336:
	.align	2, 0
.L335:
	.word	gEnemyParty
.L231:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L337
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L236
.L338:
	.align	2, 0
.L337:
	.word	gEnemyParty
.L232:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L339
	add	r0, r0, r1
	mov	r1, #0x36
.L236:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L151:
	add	r0, r6, #0
	add	sp, sp, #0x94
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L340:
	.align	2, 0
.L339:
	.word	gEnemyParty
.Lfe24:
	.size	 GetOpponentMonData,.Lfe24-GetOpponentMonData
	.align	2, 0
	.type	 OpponentHandleGetRawMonData,function
	.thumb_func
OpponentHandleGetRawMonData:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x5c
	ldr	r1, .L348
	ldr	r6, .L348+0x4
	ldrb	r3, [r6]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r5, .L348+0x8
	ldr	r1, [r5]
	lsl	r3, r3, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r3
	ldrb	r2, [r0]
	ldr	r0, .L348+0xc
	add	r0, r2, r0
	add	r7, r4, r0
	mov	r0, sp
	add	r4, r0, r2
	mov	r2, #0x0
	add	r1, r1, #0x22
	add	r1, r1, r3
	mov	ip, r6
	add	r3, r5, #0
	b	.L347
.L349:
	.align	2, 0
.L348:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleResources
	.word	gEnemyParty
.L345:
	add	r1, r4, r2
	add	r0, r7, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, [r5]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
.L347:
	ldrb	r1, [r1]
	cmp	r2, r1
	bcc	.L345	@cond_branch
	ldr	r0, [r3]
	mov	r2, ip
	ldrb	r1, [r2]
	lsl	r1, r1, #0x9
	add	r0, r0, #0x22
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	add	r2, r4, #0
	bl	BtlController_EmitDataTransfer
	bl	OpponentBufferExecCompleted
	add	sp, sp, #0x5c
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 OpponentHandleGetRawMonData,.Lfe25-OpponentHandleGetRawMonData
	.align	2, 0
	.type	 OpponentHandleSetMonData,function
	.thumb_func
OpponentHandleSetMonData:
	push	{r4, r5, lr}
	ldr	r0, .L359
	ldr	r1, [r0]
	ldr	r0, .L359+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L351	@cond_branch
	ldr	r0, .L359+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	SetOpponentMonData
	b	.L352
.L360:
	.align	2, 0
.L359:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L351:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L356:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L357	@cond_branch
	add	r0, r5, #0
	bl	SetOpponentMonData
.L357:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L356	@cond_branch
.L352:
	bl	OpponentBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 OpponentHandleSetMonData,.Lfe26-OpponentHandleSetMonData
	.align	2, 0
	.type	 SetOpponentMonData,function
	.thumb_func
SetOpponentMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L433
	ldr	r4, .L433+0x4
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x20
	ldr	r1, [r3]
	add	r0, r1, r0
	add	r0, r0, #0x3
	mov	r9, r0
	mov	r8, r9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r7, r3, #0
	add	r5, r4, #0
	cmp	r0, #0x3b
	bls	.LCB3834
	bl	.L362	@far jump
.LCB3834:
	lsl	r0, r0, #0x2
	ldr	r1, .L433+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L434:
	.align	2, 0
.L433:
	.word	gBattleResources
	.word	gActiveBattler
	.word	.L429
	.align	2, 0
	.align	2, 0
.L429:
	.word	.L363
	.word	.L369
	.word	.L370
	.word	.L371
	.word	.L380
	.word	.L380
	.word	.L380
	.word	.L380
	.word	.L381
	.word	.L385
	.word	.L385
	.word	.L385
	.word	.L385
	.word	.L362
	.word	.L362
	.word	.L362
	.word	.L362
	.word	.L386
	.word	.L387
	.word	.L388
	.word	.L389
	.word	.L390
	.word	.L391
	.word	.L392
	.word	.L393
	.word	.L394
	.word	.L395
	.word	.L396
	.word	.L397
	.word	.L398
	.word	.L399
	.word	.L400
	.word	.L401
	.word	.L402
	.word	.L403
	.word	.L404
	.word	.L405
	.word	.L406
	.word	.L407
	.word	.L408
	.word	.L409
	.word	.L410
	.word	.L411
	.word	.L412
	.word	.L413
	.word	.L414
	.word	.L415
	.word	.L416
	.word	.L417
	.word	.L418
	.word	.L419
	.word	.L420
	.word	.L421
	.word	.L422
	.word	.L423
	.word	.L424
	.word	.L425
	.word	.L426
	.word	.L427
	.word	.L428
.L363:
	mov	r1, r8
	ldrh	r0, [r1]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	mov	r1, sp
	strh	r0, [r1]
	mov	r1, r8
	ldrb	r0, [r1, #0x1]
	lsr	r0, r0, #0x3
	mov	r5, sp
	add	r5, r5, #0x2
	strb	r0, [r5]
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L435
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x59
	add	r2, r5, #0
	bl	SetMonData
	mov	r2, r8
	add	r2, r2, #0x30
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r7, #0x0
	mov	r0, r8
	add	r0, r0, #0x3d
	str	r0, [sp, #0x28]
	mov	r1, r8
	add	r1, r1, #0x2d
	str	r1, [sp, #0x20]
	add	r0, r0, #0xb
	str	r0, [sp, #0x2c]
	mov	r1, #0x3
	add	r1, r1, sp
	mov	sl, r1
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	mov	r1, r8
	add	r1, r1, #0x50
	str	r1, [sp, #0x34]
	sub	r0, r0, #0x20
	str	r0, [sp, #0x1c]
	sub	r1, r1, #0x26
	str	r1, [sp, #0x18]
	add	r0, r0, #0x2
	str	r0, [sp, #0x24]
	sub	r1, r1, #0x28
	str	r1, [sp, #0x4]
	sub	r0, r0, #0x2a
	str	r0, [sp, #0x8]
	add	r1, r1, #0x4
	str	r1, [sp, #0xc]
	add	r0, r0, #0x4
	str	r0, [sp, #0x10]
	add	r1, r1, #0x4
	str	r1, [sp, #0x14]
	mov	r9, r4
	mov	r4, r8
	add	r4, r4, #0x25
	mov	r5, r8
	add	r5, r5, #0xc
.L367:
	add	r1, r7, #0
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r5, #0
	bl	SetMonData
	add	r1, r7, #0
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	add	r4, r4, #0x1
	add	r5, r5, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L367	@cond_branch
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L435
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrh	r0, [r1, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldr	r0, [r1, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrh	r0, [r1, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x34]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	b	.L362
.L436:
	.align	2, 0
.L435:
	.word	gEnemyParty
.L369:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L437
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0xb
	bl	SetMonData
	b	.L362
.L438:
	.align	2, 0
.L437:
	.word	gEnemyParty
.L370:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L439
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0xc
	bl	SetMonData
	b	.L362
.L440:
	.align	2, 0
.L439:
	.word	gEnemyParty
.L371:
	mov	r7, #0x0
	mov	r0, #0xc
	add	r0, r0, r9
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, .L441
	add	r1, r1, r0
	mov	r8, r1
	mov	r5, r9
	add	r5, r5, #0x8
	mov	r4, r9
.L375:
	add	r1, r7, #0
	add	r1, r1, #0xd
	mov	r0, r8
	add	r2, r4, #0
	bl	SetMonData
	add	r1, r7, #0
	add	r1, r1, #0x11
	mov	r0, r8
	add	r2, r5, #0
	bl	SetMonData
	add	r5, r5, #0x1
	add	r4, r4, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L375	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L441
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, sl
	bl	SetMonData
	b	.L362
.L442:
	.align	2, 0
.L441:
	.word	gEnemyParty
.L380:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L443
	add	r0, r0, r1
	ldr	r2, [r7]
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L431
.L444:
	.align	2, 0
.L443:
	.word	gEnemyParty
.L381:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L445
	add	r4, r4, r0
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x3
	add	r0, r4, #0
	mov	r1, #0x11
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x4
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x5
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x6
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x7
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L362
.L446:
	.align	2, 0
.L445:
	.word	gEnemyParty
.L385:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L447
	add	r0, r0, r1
	ldr	r2, [r7]
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L431:
	add	r3, r3, #0x20
	add	r2, r2, r3
	add	r2, r2, #0x3
	bl	SetMonData
	b	.L362
.L448:
	.align	2, 0
.L447:
	.word	gEnemyParty
.L386:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L449
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1
	bl	SetMonData
	b	.L362
.L450:
	.align	2, 0
.L449:
	.word	gEnemyParty
.L387:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L451
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x19
	bl	SetMonData
	b	.L362
.L452:
	.align	2, 0
.L451:
	.word	gEnemyParty
.L388:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L453
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1a
	bl	SetMonData
	b	.L362
.L454:
	.align	2, 0
.L453:
	.word	gEnemyParty
.L389:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L455
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1b
	bl	SetMonData
	b	.L362
.L456:
	.align	2, 0
.L455:
	.word	gEnemyParty
.L390:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L457
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1c
	bl	SetMonData
	b	.L362
.L458:
	.align	2, 0
.L457:
	.word	gEnemyParty
.L391:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L459
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1d
	bl	SetMonData
	b	.L362
.L460:
	.align	2, 0
.L459:
	.word	gEnemyParty
.L392:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L461
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1e
	bl	SetMonData
	b	.L362
.L462:
	.align	2, 0
.L461:
	.word	gEnemyParty
.L393:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L463
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1f
	bl	SetMonData
	b	.L362
.L464:
	.align	2, 0
.L463:
	.word	gEnemyParty
.L394:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L465
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x20
	bl	SetMonData
	b	.L362
.L466:
	.align	2, 0
.L465:
	.word	gEnemyParty
.L395:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L467
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x22
	bl	SetMonData
	b	.L362
.L468:
	.align	2, 0
.L467:
	.word	gEnemyParty
.L396:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L469
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x23
	bl	SetMonData
	b	.L362
.L470:
	.align	2, 0
.L469:
	.word	gEnemyParty
.L397:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L471
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x24
	bl	SetMonData
	b	.L362
.L472:
	.align	2, 0
.L471:
	.word	gEnemyParty
.L398:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L473
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x25
	bl	SetMonData
	b	.L362
.L474:
	.align	2, 0
.L473:
	.word	gEnemyParty
.L399:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L475
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x26
	bl	SetMonData
	b	.L362
.L476:
	.align	2, 0
.L475:
	.word	gEnemyParty
.L400:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L477
	add	r4, r4, r0
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x3
	add	r0, r4, #0
	mov	r1, #0x27
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x4
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x5
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x6
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x7
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x8
	add	r0, r4, #0
	b	.L432
.L478:
	.align	2, 0
.L477:
	.word	gEnemyParty
.L401:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L479
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x27
	bl	SetMonData
	b	.L362
.L480:
	.align	2, 0
.L479:
	.word	gEnemyParty
.L402:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L481
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x28
	bl	SetMonData
	b	.L362
.L482:
	.align	2, 0
.L481:
	.word	gEnemyParty
.L403:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L483
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x29
	bl	SetMonData
	b	.L362
.L484:
	.align	2, 0
.L483:
	.word	gEnemyParty
.L404:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L485
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2a
	bl	SetMonData
	b	.L362
.L486:
	.align	2, 0
.L485:
	.word	gEnemyParty
.L405:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L487
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2b
	bl	SetMonData
	b	.L362
.L488:
	.align	2, 0
.L487:
	.word	gEnemyParty
.L406:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L489
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
.L432:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L362
.L490:
	.align	2, 0
.L489:
	.word	gEnemyParty
.L407:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L491
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x0
	bl	SetMonData
	b	.L362
.L492:
	.align	2, 0
.L491:
	.word	gEnemyParty
.L408:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L493
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x9
	bl	SetMonData
	b	.L362
.L494:
	.align	2, 0
.L493:
	.word	gEnemyParty
.L409:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L495
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x37
	bl	SetMonData
	b	.L362
.L496:
	.align	2, 0
.L495:
	.word	gEnemyParty
.L410:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L497
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x38
	bl	SetMonData
	b	.L362
.L498:
	.align	2, 0
.L497:
	.word	gEnemyParty
.L411:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L499
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x39
	bl	SetMonData
	b	.L362
.L500:
	.align	2, 0
.L499:
	.word	gEnemyParty
.L412:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L501
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3a
	bl	SetMonData
	b	.L362
.L502:
	.align	2, 0
.L501:
	.word	gEnemyParty
.L413:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L503
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3b
	bl	SetMonData
	b	.L362
.L504:
	.align	2, 0
.L503:
	.word	gEnemyParty
.L414:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L505
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3c
	bl	SetMonData
	b	.L362
.L506:
	.align	2, 0
.L505:
	.word	gEnemyParty
.L415:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L507
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3d
	bl	SetMonData
	b	.L362
.L508:
	.align	2, 0
.L507:
	.word	gEnemyParty
.L416:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L509
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3e
	bl	SetMonData
	b	.L362
.L510:
	.align	2, 0
.L509:
	.word	gEnemyParty
.L417:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L511
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3f
	bl	SetMonData
	b	.L362
.L512:
	.align	2, 0
.L511:
	.word	gEnemyParty
.L418:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L513
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x16
	bl	SetMonData
	b	.L362
.L514:
	.align	2, 0
.L513:
	.word	gEnemyParty
.L419:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L515
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x17
	bl	SetMonData
	b	.L362
.L516:
	.align	2, 0
.L515:
	.word	gEnemyParty
.L420:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L517
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x18
	bl	SetMonData
	b	.L362
.L518:
	.align	2, 0
.L517:
	.word	gEnemyParty
.L421:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L519
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x21
	bl	SetMonData
	b	.L362
.L520:
	.align	2, 0
.L519:
	.word	gEnemyParty
.L422:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L521
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2f
	bl	SetMonData
	b	.L362
.L522:
	.align	2, 0
.L521:
	.word	gEnemyParty
.L423:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L523
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x30
	bl	SetMonData
	b	.L362
.L524:
	.align	2, 0
.L523:
	.word	gEnemyParty
.L424:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L525
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x32
	bl	SetMonData
	b	.L362
.L526:
	.align	2, 0
.L525:
	.word	gEnemyParty
.L425:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L527
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x33
	bl	SetMonData
	b	.L362
.L528:
	.align	2, 0
.L527:
	.word	gEnemyParty
.L426:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L529
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x34
	bl	SetMonData
	b	.L362
.L530:
	.align	2, 0
.L529:
	.word	gEnemyParty
.L427:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L531
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x35
	bl	SetMonData
	b	.L362
.L532:
	.align	2, 0
.L531:
	.word	gEnemyParty
.L428:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L533
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x36
	bl	SetMonData
.L362:
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	gEnemyParty
.Lfe27:
	.size	 SetOpponentMonData,.Lfe27-SetOpponentMonData
	.align	2, 0
	.type	 OpponentHandleSetRawMonData,function
	.thumb_func
OpponentHandleSetRawMonData:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L541
	ldr	r7, .L541+0x4
	ldrb	r3, [r7]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r5, .L541+0x8
	ldr	r2, [r5]
	lsl	r3, r3, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x21
	add	r0, r0, r3
	ldrb	r0, [r0]
	ldr	r1, .L541+0xc
	add	r0, r0, r1
	add	r6, r4, r0
	mov	r4, #0x0
	add	r2, r2, #0x22
	add	r2, r2, r3
	ldrb	r2, [r2]
	cmp	r4, r2
	bcs	.L537	@cond_branch
	add	r3, r7, #0
.L539:
	add	r2, r6, r4
	ldr	r1, [r5]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x3
	add	r0, r4, r0
	add	r1, r1, #0x20
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, [r5]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r1, [r1]
	cmp	r4, r1
	bcc	.L539	@cond_branch
.L537:
	bl	OpponentBufferExecCompleted
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L542:
	.align	2, 0
.L541:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleResources
	.word	gEnemyParty
.Lfe28:
	.size	 OpponentHandleSetRawMonData,.Lfe28-OpponentHandleSetRawMonData
	.align	2, 0
	.type	 OpponentHandleLoadMonSprite,function
	.thumb_func
OpponentHandleLoadMonSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r6, .L544
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	ldr	r1, .L544+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r2, #0x64
	mul	r0, r0, r2
	ldr	r7, .L544+0x8
	add	r0, r0, r7
	mov	r1, #0xb
	bl	GetMonData
	mov	r9, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	ldr	r1, .L544+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r2, #0x64
	mul	r0, r0, r2
	add	r0, r0, r7
	mov	r1, #0x59
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	ldr	r2, .L544+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	mov	r2, #0x64
	mul	r0, r0, r2
	add	r0, r0, r7
	bl	BattleLoadOpponentMonSpriteGfx
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r9
	mov	r2, r8
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L544+0xc
	mov	sl, r0
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, sl
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L544+0x10
	ldrb	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r5, .L544+0x14
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L544+0x18
	strh	r1, [r0, #0x24]
	ldrb	r2, [r6]
	add	r0, r2, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x2e]
	mov	r0, r9
	mov	r1, r8
	bl	GetFormSpeciesId
	ldrb	r1, [r6]
	add	r1, r1, r4
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	strh	r0, [r1, #0x32]
	ldrb	r3, [r6]
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r2, [r6]
	add	r4, r2, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L544+0x1c
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	StartSpriteAnim
	ldrb	r4, [r6]
	lsl	r0, r4, #0x1
	ldr	r1, .L544+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r2, #0x64
	mul	r0, r0, r2
	add	r0, r0, r7
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r1, .L544+0x20
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L544+0x24
	str	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L545:
	.align	2, 0
.L544:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gBattleMonForms
	.word	gBattlerControllerFuncs
	.word	sub_805F994
.Lfe29:
	.size	 OpponentHandleLoadMonSprite,.Lfe29-OpponentHandleLoadMonSprite
	.align	2, 0
	.type	 OpponentHandleSwitchInAnim,function
	.thumb_func
OpponentHandleSwitchInAnim:
	push	{r4, lr}
	ldr	r4, .L547
	ldrb	r0, [r4]
	ldr	r1, .L547+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	mov	r1, #0x6
	strb	r1, [r0]
	ldr	r0, .L547+0x8
	ldrb	r1, [r4]
	lsl	r3, r1, #0x1
	add	r3, r3, r0
	ldr	r0, .L547+0xc
	ldr	r2, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r3]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x9
	add	r2, r2, #0x22
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	sub_80613DC
	ldr	r1, .L547+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L547+0x14
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L548:
	.align	2, 0
.L547:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	gBattleResources
	.word	gBattlerControllerFuncs
	.word	sub_805FDF0
.Lfe30:
	.size	 OpponentHandleSwitchInAnim,.Lfe30-OpponentHandleSwitchInAnim
	.align	2, 0
	.type	 sub_80613DC,function
	.thumb_func
sub_80613DC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	ClearTemporarySpeciesSpriteData
	ldr	r0, .L550
	lsl	r5, r6, #0x1
	add	r5, r5, r0
	ldr	r0, .L550+0x4
	ldr	r0, [r0]
	lsl	r1, r6, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r5]
	ldrh	r0, [r5]
	mov	r1, #0x64
	mov	r9, r1
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r1, .L550+0x8
	mov	r8, r1
	add	r0, r0, r8
	mov	r1, #0xb
	bl	GetMonData
	mov	sl, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	ldrh	r0, [r5]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	mov	r1, #0x59
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L550+0xc
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L550+0x10
	add	r7, r6, r1
	strb	r0, [r7]
	ldrh	r0, [r5]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	add	r1, r6, #0
	bl	BattleLoadOpponentMonSpriteGfx
	add	r0, r6, #0
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, sl
	add	r2, r4, #0
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L550+0x14
	mov	r8, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L550+0x18
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L550+0x1c
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, sl
	strh	r1, [r0, #0x32]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L550+0x20
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L550+0x24
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xfe
	bl	DoPokeballSendOutAnimation
	ldrb	r2, [r7]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L551:
	.align	2, 0
.L550:
	.word	gBattlerPartyIndexes
	.word	gBattleResources
	.word	gEnemyParty
	.word	sub_805D714
	.word	gUnknown_03005D7C
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe31:
	.size	 sub_80613DC,.Lfe31-sub_80613DC
	.align	2, 0
	.type	 OpponentHandleReturnMonToBall,function
	.thumb_func
OpponentHandleReturnMonToBall:
	push	{r4, r5, r6, lr}
	ldr	r0, .L555
	ldr	r0, [r0]
	ldr	r6, .L555+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L553	@cond_branch
	ldr	r0, .L555+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r3, [r0, #0x4]
	ldr	r1, .L555+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L555+0x10
	str	r1, [r0]
	b	.L554
.L556:
	.align	2, 0
.L555:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	DoSwitchOutAnimation
.L553:
	ldr	r5, .L557
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L557+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	HideBattlerShadowSprite
	ldr	r1, .L557+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	OpponentBufferExecCompleted
.L554:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L558:
	.align	2, 0
.L557:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe32:
	.size	 OpponentHandleReturnMonToBall,.Lfe32-OpponentHandleReturnMonToBall
	.align	2, 0
	.type	 DoSwitchOutAnimation,function
	.thumb_func
DoSwitchOutAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L567
	ldr	r4, [r6]
	ldr	r5, .L567+0x4
	ldrb	r2, [r5]
	ldr	r1, [r4, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	beq	.L561	@cond_branch
	cmp	r0, #0x1
	beq	.L563	@cond_branch
	b	.L560
.L568:
	.align	2, 0
.L567:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L561:
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L562	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L562:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L560
.L563:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L560	@cond_branch
	strb	r0, [r3, #0x4]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x2
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L569
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L569+0x4
	str	r1, [r0]
.L560:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L570:
	.align	2, 0
.L569:
	.word	gBattlerControllerFuncs
	.word	sub_805FB08
.Lfe33:
	.size	 DoSwitchOutAnimation,.Lfe33-DoSwitchOutAnimation
	.align	2, 0
	.type	 OpponentHandleDrawTrainerPic,function
	.thumb_func
OpponentHandleDrawTrainerPic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L602
	ldr	r2, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x14
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L572	@cond_branch
	bl	GetSecretBaseTrainerPicIndex
	b	.L600
.L603:
	.align	2, 0
.L602:
	.word	gBattleTypeFlags
.L572:
	ldr	r3, .L604
	ldrh	r1, [r3]
	ldr	r0, .L604+0x4
	cmp	r1, r0
	bne	.L574	@cond_branch
	bl	GetFrontierBrainTrainerPicIndex
	b	.L600
.L605:
	.align	2, 0
.L604:
	.word	gTrainerBattleOpponent_A
	.word	0x3fe
.L574:
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L576	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L577	@cond_branch
	ldr	r0, .L606
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L578	@cond_branch
	ldrh	r0, [r3]
	bl	GetTrainerHillTrainerFrontSpriteId
	b	.L600
.L607:
	.align	2, 0
.L606:
	.word	gActiveBattler
.L578:
	ldr	r0, .L608
	ldrh	r0, [r0]
	bl	GetTrainerHillTrainerFrontSpriteId
	b	.L600
.L609:
	.align	2, 0
.L608:
	.word	gTrainerBattleOpponent_B
.L577:
	ldrh	r0, [r3]
	bl	GetTrainerHillTrainerFrontSpriteId
	b	.L600
.L576:
	ldr	r0, .L610
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L582	@cond_branch
	ldr	r0, .L610+0x4
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L583	@cond_branch
	ldr	r0, .L610+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L584	@cond_branch
	ldrh	r0, [r3]
	bl	GetFrontierTrainerFrontSpriteId
	b	.L600
.L611:
	.align	2, 0
.L610:
	.word	0x3f0100
	.word	0x808000
	.word	gActiveBattler
.L584:
	ldr	r0, .L612
	ldrh	r0, [r0]
	bl	GetFrontierTrainerFrontSpriteId
	b	.L600
.L613:
	.align	2, 0
.L612:
	.word	gTrainerBattleOpponent_B
.L583:
	ldrh	r0, [r3]
	bl	GetFrontierTrainerFrontSpriteId
	b	.L600
.L582:
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L588	@cond_branch
	bl	GetEreaderTrainerFrontSpriteId
.L600:
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L573
.L588:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L590	@cond_branch
	ldr	r0, .L614
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L591	@cond_branch
	ldr	r2, .L614+0x4
	ldr	r0, .L614+0x8
	ldrh	r1, [r0]
	b	.L601
.L615:
	.align	2, 0
.L614:
	.word	gActiveBattler
	.word	gTrainers
	.word	gTrainerBattleOpponent_B
.L591:
.L590:
	ldr	r2, .L616
	ldrh	r1, [r3]
.L601:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r5, [r0, #0x3]
.L573:
	ldr	r0, .L616+0x4
	ldr	r1, [r0]
	ldr	r0, .L616+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L594	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L595	@cond_branch
	ldr	r0, .L616+0xc
	ldrh	r1, [r0]
	ldr	r0, .L616+0x10
	cmp	r1, r0
	beq	.L594	@cond_branch
.L595:
	ldr	r0, .L616+0x14
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x2
	and	r1, r1, r0
	mov	r4, #0xc8
	cmp	r1, #0
	beq	.L598	@cond_branch
	mov	r4, #0x98
	b	.L598
.L617:
	.align	2, 0
.L616:
	.word	gTrainers
	.word	gBattleTypeFlags
	.word	0x8040
	.word	gTrainerBattleOpponent_B
	.word	0xffff
	.word	gActiveBattler
.L594:
	mov	r4, #0xb0
.L598:
	ldr	r7, .L618
	ldrb	r1, [r7]
	add	r0, r5, #0
	bl	DecompressTrainerFrontPic
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r6, .L618+0x4
	mov	r8, r4
	ldr	r1, .L618+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x8
	sub	r4, r4, r0
	lsl	r4, r4, #0x12
	mov	r0, #0xa0
	lsl	r0, r0, #0xe
	add	r4, r4, r0
	asr	r4, r4, #0x10
	ldrb	r0, [r7]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r6, #0
	mov	r1, r8
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L618+0xc
	ldrb	r1, [r7]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r6, .L618+0x10
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, .L618+0x14
	strh	r1, [r0, #0x24]
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldr	r1, .L618+0x18
	lsl	r0, r5, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	ldrb	r1, [r7]
	add	r1, r1, r4
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r5, [r0, #0x6]
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r6, #0
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L618+0x1c
	str	r1, [r0]
	ldr	r0, .L618+0x20
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x17]
	mov	r0, #0xc
	and	r0, r0, r1
	cmp	r0, #0x4
	bne	.L599	@cond_branch
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L618+0x24
	str	r1, [r0]
.L599:
	ldr	r0, .L618+0x28
	ldrb	r1, [r7]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L618+0x2c
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L619:
	.align	2, 0
.L618:
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerFrontPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gTrainerFrontPicPaletteTable
	.word	sub_805D7AC
	.word	gSaveBlock2Ptr
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy
.Lfe34:
	.size	 OpponentHandleDrawTrainerPic,.Lfe34-OpponentHandleDrawTrainerPic
	.align	2, 0
	.type	 OpponentHandleTrainerSlide,function
	.thumb_func
OpponentHandleTrainerSlide:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r0, .L645
	ldr	r2, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x14
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L621	@cond_branch
	bl	GetSecretBaseTrainerPicIndex
	b	.L643
.L646:
	.align	2, 0
.L645:
	.word	gBattleTypeFlags
.L621:
	ldr	r3, .L647
	ldrh	r1, [r3]
	ldr	r0, .L647+0x4
	cmp	r1, r0
	bne	.L623	@cond_branch
	bl	GetFrontierBrainTrainerPicIndex
	b	.L643
.L648:
	.align	2, 0
.L647:
	.word	gTrainerBattleOpponent_A
	.word	0x3fe
.L623:
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L625	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L626	@cond_branch
	ldr	r0, .L649
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L627	@cond_branch
	ldrh	r0, [r3]
	bl	GetTrainerHillTrainerFrontSpriteId
	b	.L643
.L650:
	.align	2, 0
.L649:
	.word	gActiveBattler
.L627:
	ldr	r0, .L651
	ldrh	r0, [r0]
	bl	GetTrainerHillTrainerFrontSpriteId
	b	.L643
.L652:
	.align	2, 0
.L651:
	.word	gTrainerBattleOpponent_B
.L626:
	ldrh	r0, [r3]
	bl	GetTrainerHillTrainerFrontSpriteId
	b	.L643
.L625:
	ldr	r0, .L653
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L631	@cond_branch
	ldr	r0, .L653+0x4
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L632	@cond_branch
	ldr	r0, .L653+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L633	@cond_branch
	ldrh	r0, [r3]
	bl	GetFrontierTrainerFrontSpriteId
	b	.L643
.L654:
	.align	2, 0
.L653:
	.word	0x3f0100
	.word	0x808000
	.word	gActiveBattler
.L633:
	ldr	r0, .L655
	ldrh	r0, [r0]
	bl	GetFrontierTrainerFrontSpriteId
	b	.L643
.L656:
	.align	2, 0
.L655:
	.word	gTrainerBattleOpponent_B
.L632:
	ldrh	r0, [r3]
	bl	GetFrontierTrainerFrontSpriteId
	b	.L643
.L631:
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L637	@cond_branch
	bl	GetEreaderTrainerFrontSpriteId
.L643:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L622
.L637:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L639	@cond_branch
	ldr	r0, .L657
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L640	@cond_branch
	ldr	r2, .L657+0x4
	ldr	r0, .L657+0x8
	ldrh	r1, [r0]
	b	.L644
.L658:
	.align	2, 0
.L657:
	.word	gActiveBattler
	.word	gTrainers
	.word	gTrainerBattleOpponent_B
.L640:
.L639:
	ldr	r2, .L659
	ldrh	r1, [r3]
.L644:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
.L622:
	mov	r8, r0
	ldr	r6, .L659+0x4
	ldrb	r1, [r6]
	bl	DecompressTrainerFrontPic
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r0, .L659+0x8
	ldr	r2, .L659+0xc
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xe
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0xb0
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r5, .L659+0x10
	ldrb	r1, [r6]
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r4, .L659+0x14
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x60
	strh	r1, [r0, #0x24]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x20
	strh	r1, [r0, #0x20]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L659+0x18
	strh	r1, [r0, #0x2e]
	ldr	r1, .L659+0x1c
	mov	r2, r8
	lsl	r0, r2, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	ldrb	r1, [r6]
	add	r1, r1, r5
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r3, r8
	strh	r3, [r0, #0x6]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L659+0x20
	str	r1, [r0]
	ldr	r1, .L659+0x24
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L659+0x28
	str	r1, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L660:
	.align	2, 0
.L659:
	.word	gTrainers
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerFrontPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xfffe
	.word	gTrainerFrontPicPaletteTable
	.word	sub_805D7AC
	.word	gBattlerControllerFuncs
	.word	CompleteOnBankSpriteCallbackDummy2
.Lfe35:
	.size	 OpponentHandleTrainerSlide,.Lfe35-OpponentHandleTrainerSlide
	.align	2, 0
	.type	 OpponentHandleTrainerSlideBack,function
	.thumb_func
OpponentHandleTrainerSlideBack:
	push	{r4, r5, r6, lr}
	ldr	r6, .L662
	ldr	r4, .L662+0x4
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L662+0x8
	add	r0, r0, r5
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L662+0xc
	str	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L662+0x10
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L662+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L662+0x18
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L663:
	.align	2, 0
.L662:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	StartAnimLinearTranslation
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	sub_805F240
.Lfe36:
	.size	 OpponentHandleTrainerSlideBack,.Lfe36-OpponentHandleTrainerSlideBack
	.align	2, 0
	.type	 OpponentHandleFaintAnimation,function
	.thumb_func
OpponentHandleFaintAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L669
	ldr	r4, [r6]
	ldr	r5, .L669+0x4
	ldrb	r2, [r5]
	ldr	r0, [r4, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L665	@cond_branch
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L666	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L666:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x4]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L667
.L670:
	.align	2, 0
.L669:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L665:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L667	@cond_branch
	strb	r0, [r3, #0x4]
	mov	r0, #0x10
	mov	r1, #0x3f
	bl	PlaySE12WithPanning
	ldr	r2, .L671
	ldr	r1, .L671+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L671+0x8
	str	r1, [r0]
	ldr	r1, .L671+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L671+0x10
	str	r1, [r0]
.L667:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L672:
	.align	2, 0
.L671:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCB_FaintOpponentMon
	.word	gBattlerControllerFuncs
	.word	sub_805FAC4
.Lfe37:
	.size	 OpponentHandleFaintAnimation,.Lfe37-OpponentHandleFaintAnimation
	.align	2, 0
	.type	 OpponentHandlePaletteFade,function
	.thumb_func
OpponentHandlePaletteFade:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 OpponentHandlePaletteFade,.Lfe38-OpponentHandlePaletteFade
	.align	2, 0
	.type	 OpponentHandleSuccessBallThrowAnim,function
	.thumb_func
OpponentHandleSuccessBallThrowAnim:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 OpponentHandleSuccessBallThrowAnim,.Lfe39-OpponentHandleSuccessBallThrowAnim
	.align	2, 0
	.type	 OpponentHandleBallThrow,function
	.thumb_func
OpponentHandleBallThrow:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 OpponentHandleBallThrow,.Lfe40-OpponentHandleBallThrow
	.align	2, 0
	.type	 OpponentHandlePause,function
	.thumb_func
OpponentHandlePause:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 OpponentHandlePause,.Lfe41-OpponentHandlePause
	.align	2, 0
	.type	 OpponentHandleMoveAnimation,function
	.thumb_func
OpponentHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L681
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB7196
	b	.L678	@long jump
.LCB7196:
	ldr	r0, .L681+0x4
	ldr	r0, [r0]
	mov	ip, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L681+0x8
	mov	r1, ip
	add	r1, r1, #0x23
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r5]
	ldr	r4, .L681+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x24
	add	r1, r1, r2
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x25
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L681+0x10
	ldrb	r3, [r6]
	lsl	r3, r3, #0x9
	mov	r1, ip
	add	r1, r1, #0x26
	add	r1, r1, r3
	ldrb	r2, [r1]
	mov	r1, ip
	add	r1, r1, #0x27
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r2, r2, r1
	mov	r1, ip
	add	r1, r1, #0x28
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	mov	r1, ip
	add	r1, r1, #0x29
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x18
	orr	r2, r2, r1
	str	r2, [r4]
	ldr	r3, .L681+0x14
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x2a
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L681+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x2c
	add	r1, r1, r2
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x2d
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L681+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, #0x20
	add	r2, r2, ip
	add	r1, r2, #0
	add	r1, r1, #0x10
	str	r1, [r3]
	ldr	r3, .L681+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2, #0x10]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	IsMoveWithoutAnimation
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L679	@cond_branch
	bl	OpponentBufferExecCompleted
	b	.L678
.L682:
	.align	2, 0
.L681:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gAnimMoveTurn
	.word	gAnimMovePower
	.word	gAnimMoveDmg
	.word	gAnimFriendship
	.word	gWeatherMoveAnim
	.word	gAnimDisableStructPtr
	.word	gTransformedPersonalities
.L679:
	ldr	r0, .L683
	ldr	r0, [r0]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x4]
	ldr	r1, .L683+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L683+0x8
	str	r1, [r0]
.L678:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L684:
	.align	2, 0
.L683:
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	OpponentDoMoveAnimation
.Lfe42:
	.size	 OpponentHandleMoveAnimation,.Lfe42-OpponentHandleMoveAnimation
	.align	2, 0
	.type	 OpponentDoMoveAnimation,function
	.thumb_func
OpponentDoMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L699
	mov	r9, r0
	ldr	r1, [r0]
	ldr	r6, .L699+0x4
	ldrb	r3, [r6]
	lsl	r2, r3, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r4, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x22
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	add	r1, r1, #0x2b
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r8, r1
	ldr	r7, .L699+0x8
	ldr	r5, [r7]
	ldr	r1, [r5, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L689	@cond_branch
	cmp	r2, #0x1
	bgt	.L698	@cond_branch
	cmp	r2, #0
	beq	.L687	@cond_branch
	b	.L686
.L700:
	.align	2, 0
.L699:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
.L698:
	cmp	r2, #0x2
	beq	.L691	@cond_branch
	cmp	r2, #0x3
	beq	.L694	@cond_branch
	b	.L686
.L687:
	ldr	r1, [r5]
	lsl	r0, r3, #0x2
	add	r1, r0, r1
	ldrb	r3, [r1]
	mov	r0, #0xc
	and	r0, r0, r3
	cmp	r0, #0x4
	bne	.L688	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r3
	strb	r0, [r1]
	ldrb	r2, [r6]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L688:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L686
.L689:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L686	@cond_branch
	mov	r0, #0x0
	bl	sub_805EB9C
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x4]
	b	.L686
.L691:
	ldr	r0, .L701
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L701+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L686	@cond_branch
	mov	r0, #0x1
	bl	sub_805EB9C
	ldr	r0, [r7]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L693	@cond_branch
	mov	r1, r8
	cmp	r1, #0x1
	bhi	.L693	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L693:
	ldr	r0, .L701+0x8
	ldr	r2, [r0]
	ldr	r0, .L701+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L686
.L702:
	.align	2, 0
.L701:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L694:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L686	@cond_branch
	bl	CopyAllBattleSpritesInvisibilities
	ldrb	r0, [r6]
	mov	r1, r9
	ldr	r2, [r1]
	lsl	r3, r0, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r2, r2, #0x22
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	TrySetBehindSubstituteSpriteBit
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r4, [r0, #0x4]
	bl	OpponentBufferExecCompleted
.L686:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 OpponentDoMoveAnimation,.Lfe43-OpponentDoMoveAnimation
	.align	2, 0
	.type	 OpponentHandlePrintString,function
	.thumb_func
OpponentHandlePrintString:
	push	{r4, r5, lr}
	ldr	r0, .L704
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L704+0x4
	strh	r1, [r0]
	ldr	r1, .L704+0x8
	ldr	r5, .L704+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r4, [r1]
	add	r4, r4, r0
	ldrh	r0, [r4, #0x2]
	bl	BufferStringBattle
	ldr	r0, .L704+0x10
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
	ldr	r1, .L704+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L704+0x18
	str	r1, [r0]
	ldrb	r0, [r5]
	ldrh	r1, [r4, #0x2]
	bl	BattleArena_DeductMindPoints
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L705:
	.align	2, 0
.L704:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleResources
	.word	gActiveBattler
	.word	gDisplayedStringBattle
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter
.Lfe44:
	.size	 OpponentHandlePrintString,.Lfe44-OpponentHandlePrintString
	.align	2, 0
	.type	 OpponentHandlePrintSelectionString,function
	.thumb_func
OpponentHandlePrintSelectionString:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 OpponentHandlePrintSelectionString,.Lfe45-OpponentHandlePrintSelectionString
	.align	2, 0
	.type	 OpponentHandleChooseAction,function
	.thumb_func
OpponentHandleChooseAction:
	push	{lr}
	bl	AI_TrySwitchOrUseItem
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 OpponentHandleChooseAction,.Lfe46-OpponentHandleChooseAction
	.align	2, 0
	.type	 OpponentHandleUnknownYesNoBox,function
	.thumb_func
OpponentHandleUnknownYesNoBox:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 OpponentHandleUnknownYesNoBox,.Lfe47-OpponentHandleUnknownYesNoBox
	.align	2, 0
	.type	 OpponentHandleChooseMove,function
	.thumb_func
OpponentHandleChooseMove:
	push	{r4, r5, r6, lr}
	ldr	r0, .L740
	ldr	r3, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xa
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L710	@cond_branch
	bl	ChooseMoveAndTargetInBattlePalace
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
.L739:
	mov	r0, #0x1
	mov	r1, #0xa
.L738:
	bl	BtlController_EmitTwoReturnValues
.L737:
	bl	OpponentBufferExecCompleted
	b	.L711
.L741:
	.align	2, 0
.L740:
	.word	gBattleTypeFlags
.L710:
	ldr	r2, .L742
	ldr	r0, .L742+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r0, [r2]
	add	r0, r0, r1
	add	r5, r0, #0x4
	mov	r0, #0x93
	lsl	r0, r0, #0x3
	and	r3, r3, r0
	cmp	r3, #0
	bne	.LCB7717
	b	.L712	@long jump
.LCB7717:
	mov	r0, #0xf
	bl	BattleAI_SetupAIData
	bl	BattleAI_ChooseMoveOrAction
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	beq	.L714	@cond_branch
	cmp	r4, #0x5
	bgt	.L725	@cond_branch
	cmp	r4, #0x4
	beq	.L715	@cond_branch
	b	.L718
.L743:
	.align	2, 0
.L742:
	.word	gBattleResources
	.word	gActiveBattler
.L725:
	cmp	r4, #0x6
	beq	.L717	@cond_branch
	cmp	r4, #0x7
	beq	.L716	@cond_branch
	b	.L718
.L714:
	mov	r0, #0x1
	mov	r1, #0x4
	b	.L736
.L715:
	mov	r0, #0x1
	mov	r1, #0x3
.L736:
	mov	r2, #0x0
	b	.L738
.L716:
	ldr	r2, .L744
	b	.L739
.L745:
	.align	2, 0
.L744:
	.word	0xffff
.L717:
	ldr	r0, .L746
	ldrb	r2, [r0]
	mov	r0, #0x1
	mov	r1, #0xf
	b	.L738
.L747:
	.align	2, 0
.L746:
	.word	gBattlerTarget
.L718:
	ldr	r3, .L748
	lsl	r0, r4, #0x1
	add	r2, r5, r0
	ldrh	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L719	@cond_branch
	ldr	r0, .L748+0x4
	ldr	r1, .L748+0x8
	ldrb	r1, [r1]
	strb	r1, [r0]
.L719:
	ldrh	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L720	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r5, .L748+0x4
	strb	r0, [r5]
	ldr	r0, .L748+0xc
	ldrb	r1, [r0]
	ldr	r2, .L748+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L720	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	strb	r0, [r5]
.L720:
	ldr	r0, .L748+0x8
	ldrb	r0, [r0]
	bl	CanMegaEvolve
	cmp	r0, #0
	beq	.L722	@cond_branch
	mov	r0, #0x80
	orr	r4, r4, r0
	ldr	r0, .L748+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	mov	r0, #0x1
	mov	r1, #0xa
	add	r2, r4, #0
	b	.L738
.L749:
	.align	2, 0
.L748:
	.word	gBattleMoves
	.word	gBattlerTarget
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L722:
	ldr	r0, .L750
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	mov	r0, #0x1
	mov	r1, #0xa
	add	r2, r4, #0
	bl	BtlController_EmitTwoReturnValues
	b	.L737
.L751:
	.align	2, 0
.L750:
	.word	gBattlerTarget
.L712:
	mov	r6, #0x3
.L727:
	bl	Random
	add	r4, r0, #0
	and	r4, r4, r6
	lsl	r0, r4, #0x1
	add	r0, r5, r0
	ldrh	r2, [r0]
	cmp	r2, #0
	beq	.L727	@cond_branch
	ldr	r1, .L752
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L732	@cond_branch
	ldr	r0, .L752+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	mov	r0, #0x1
	mov	r1, #0xa
	add	r2, r4, #0
	bl	BtlController_EmitTwoReturnValues
	b	.L733
.L753:
	.align	2, 0
.L752:
	.word	gBattleMoves
	.word	gActiveBattler
.L732:
	ldr	r0, .L754
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L734	@cond_branch
	bl	Random
	mov	r1, #0x2
	and	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r1, #0
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x10
	orr	r2, r2, r4
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
	b	.L733
.L755:
	.align	2, 0
.L754:
	.word	gBattleTypeFlags
.L734:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x10
	orr	r2, r2, r4
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
.L733:
	bl	OpponentBufferExecCompleted
.L711:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 OpponentHandleChooseMove,.Lfe48-OpponentHandleChooseMove
	.align	2, 0
	.type	 OpponentHandleChooseItem,function
	.thumb_func
OpponentHandleChooseItem:
	push	{lr}
	ldr	r0, .L757
	ldrb	r0, [r0]
	lsr	r0, r0, #0x1
	ldr	r1, .L757+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0xb8
	ldrh	r1, [r0]
	mov	r0, #0x1
	bl	BtlController_EmitOneReturnValue
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L758:
	.align	2, 0
.L757:
	.word	gActiveBattler
	.word	gBattleStruct
.Lfe49:
	.size	 OpponentHandleChooseItem,.Lfe49-OpponentHandleChooseItem
	.align	2, 0
	.type	 OpponentHandleChoosePokemon,function
	.thumb_func
OpponentHandleChoosePokemon:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	ldr	r0, .L771
	ldrb	r0, [r0]
	ldr	r1, .L771+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r2, #0x9a
	lsl	r2, r2, #0x2
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0x6
	bne	.L760	@cond_branch
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bne	.L770	@cond_branch
	ldr	r0, .L771+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L762	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	b	.L763
.L772:
	.align	2, 0
.L771:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleTypeFlags
.L762:
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L763:
	ldr	r0, .L773
	ldrb	r0, [r0]
	add	r2, sp, #0x4
	mov	r1, sp
	bl	GetAIPartyIndexes
	ldr	r4, [sp]
	b	.L764
.L774:
	.align	2, 0
.L773:
	.word	gActiveBattler
.L766:
	add	r4, r4, #0x1
.L764:
	ldr	r0, [sp, #0x4]
	cmp	r4, r0
	bge	.L770	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L775
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L766	@cond_branch
	ldr	r1, .L775+0x4
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L766	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L766	@cond_branch
	b	.L770
.L776:
	.align	2, 0
.L775:
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
.L760:
	ldrb	r4, [r1]
	mov	r0, #0x6
	strb	r0, [r1]
.L770:
	ldr	r0, .L777
	ldrb	r0, [r0]
	ldr	r1, .L777+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	strb	r4, [r0]
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitChosenMonReturnValue
	bl	OpponentBufferExecCompleted
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L778:
	.align	2, 0
.L777:
	.word	gActiveBattler
	.word	gBattleStruct
.Lfe50:
	.size	 OpponentHandleChoosePokemon,.Lfe50-OpponentHandleChoosePokemon
	.align	2, 0
	.type	 OpponentHandleCmd23,function
	.thumb_func
OpponentHandleCmd23:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 OpponentHandleCmd23,.Lfe51-OpponentHandleCmd23
	.align	2, 0
	.type	 OpponentHandleHealthBarUpdate,function
	.thumb_func
OpponentHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	ldr	r0, .L783
	ldr	r2, [r0]
	ldr	r0, .L783+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r3, r4, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x23
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r1, r1, #0x8
	add	r2, r2, #0x22
	add	r2, r2, r3
	ldrb	r0, [r2]
	orr	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r7, r0, #0x10
	ldr	r0, .L783+0x8
	cmp	r7, r0
	beq	.L781	@cond_branch
	ldr	r6, .L783+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L783+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L783+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	SetBattleBarStruct
	b	.L782
.L784:
	.align	2, 0
.L783:
	.word	gBattleResources
	.word	gActiveBattler
	.word	0x7fff
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHealthboxSpriteIds
.L781:
	ldr	r1, .L785
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L785+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L785+0x8
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	SetBattleBarStruct
.L782:
	ldr	r1, .L785+0xc
	ldr	r0, .L785+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L785+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L786:
	.align	2, 0
.L785:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnHealthbarDone
.Lfe52:
	.size	 OpponentHandleHealthBarUpdate,.Lfe52-OpponentHandleHealthBarUpdate
	.align	2, 0
	.type	 OpponentHandleExpUpdate,function
	.thumb_func
OpponentHandleExpUpdate:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 OpponentHandleExpUpdate,.Lfe53-OpponentHandleExpUpdate
	.align	2, 0
	.type	 OpponentHandleStatusIconUpdate,function
	.thumb_func
OpponentHandleStatusIconUpdate:
	push	{r4, lr}
	ldr	r4, .L790
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L789	@cond_branch
	ldr	r0, .L790+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L790+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L790+0xc
	add	r1, r1, r2
	mov	r2, #0x9
	bl	UpdateHealthboxAttribute
	ldrb	r2, [r4]
	ldr	r0, .L790+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L790+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L790+0x18
	str	r1, [r0]
.L789:
	pop	{r4}
	pop	{r0}
	bx	r0
.L791:
	.align	2, 0
.L790:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe54:
	.size	 OpponentHandleStatusIconUpdate,.Lfe54-OpponentHandleStatusIconUpdate
	.align	2, 0
	.type	 OpponentHandleStatusAnimation,function
	.thumb_func
OpponentHandleStatusAnimation:
	push	{r4, lr}
	ldr	r4, .L794
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L793	@cond_branch
	ldr	r0, .L794+0x4
	ldr	r0, [r0]
	mov	ip, r0
	ldrb	r3, [r4]
	lsl	r3, r3, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r3
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x22
	add	r1, r1, r3
	ldrb	r1, [r1]
	mov	r2, ip
	add	r2, r2, #0x23
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	mov	r2, ip
	add	r2, r2, #0x24
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x10
	orr	r1, r1, r2
	mov	r2, ip
	add	r2, r2, #0x25
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	bl	InitAndLaunchChosenStatusAnimation
	ldr	r1, .L794+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L794+0xc
	str	r1, [r0]
.L793:
	pop	{r4}
	pop	{r0}
	bx	r0
.L795:
	.align	2, 0
.L794:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe55:
	.size	 OpponentHandleStatusAnimation,.Lfe55-OpponentHandleStatusAnimation
	.align	2, 0
	.type	 OpponentHandleStatusXor,function
	.thumb_func
OpponentHandleStatusXor:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 OpponentHandleStatusXor,.Lfe56-OpponentHandleStatusXor
	.align	2, 0
	.type	 OpponentHandleDataTransfer,function
	.thumb_func
OpponentHandleDataTransfer:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 OpponentHandleDataTransfer,.Lfe57-OpponentHandleDataTransfer
	.align	2, 0
	.type	 OpponentHandleDMA3Transfer,function
	.thumb_func
OpponentHandleDMA3Transfer:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 OpponentHandleDMA3Transfer,.Lfe58-OpponentHandleDMA3Transfer
	.align	2, 0
	.type	 OpponentHandlePlayBGM,function
	.thumb_func
OpponentHandlePlayBGM:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 OpponentHandlePlayBGM,.Lfe59-OpponentHandlePlayBGM
	.align	2, 0
	.type	 OpponentHandleCmd32,function
	.thumb_func
OpponentHandleCmd32:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 OpponentHandleCmd32,.Lfe60-OpponentHandleCmd32
	.align	2, 0
	.type	 OpponentHandleTwoReturnValues,function
	.thumb_func
OpponentHandleTwoReturnValues:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 OpponentHandleTwoReturnValues,.Lfe61-OpponentHandleTwoReturnValues
	.align	2, 0
	.type	 OpponentHandleChosenMonReturnValue,function
	.thumb_func
OpponentHandleChosenMonReturnValue:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 OpponentHandleChosenMonReturnValue,.Lfe62-OpponentHandleChosenMonReturnValue
	.align	2, 0
	.type	 OpponentHandleOneReturnValue,function
	.thumb_func
OpponentHandleOneReturnValue:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 OpponentHandleOneReturnValue,.Lfe63-OpponentHandleOneReturnValue
	.align	2, 0
	.type	 OpponentHandleOneReturnValue_Duplicate,function
	.thumb_func
OpponentHandleOneReturnValue_Duplicate:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 OpponentHandleOneReturnValue_Duplicate,.Lfe64-OpponentHandleOneReturnValue_Duplicate
	.align	2, 0
	.type	 OpponentHandleCmd37,function
	.thumb_func
OpponentHandleCmd37:
	push	{lr}
	ldr	r2, .L806
	ldrb	r1, [r2]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L807:
	.align	2, 0
.L806:
	.word	gUnknown_02022D0C
.Lfe65:
	.size	 OpponentHandleCmd37,.Lfe65-OpponentHandleCmd37
	.align	2, 0
	.type	 OpponentHandleCmd38,function
	.thumb_func
OpponentHandleCmd38:
	push	{lr}
	ldr	r3, .L809
	ldr	r0, .L809+0x4
	ldr	r1, [r0]
	ldr	r0, .L809+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, #0x7f
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L810:
	.align	2, 0
.L809:
	.word	gUnknown_02022D0C
	.word	gBattleResources
	.word	gActiveBattler
.Lfe66:
	.size	 OpponentHandleCmd38,.Lfe66-OpponentHandleCmd38
	.align	2, 0
	.type	 OpponentHandleCmd39,function
	.thumb_func
OpponentHandleCmd39:
	push	{lr}
	ldr	r2, .L812
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L813:
	.align	2, 0
.L812:
	.word	gUnknown_02022D0C
.Lfe67:
	.size	 OpponentHandleCmd39,.Lfe67-OpponentHandleCmd39
	.align	2, 0
	.type	 OpponentHandleCmd40,function
	.thumb_func
OpponentHandleCmd40:
	push	{lr}
	ldr	r3, .L815
	ldr	r1, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrb	r2, [r3]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L816:
	.align	2, 0
.L815:
	.word	gUnknown_02022D0C
.Lfe68:
	.size	 OpponentHandleCmd40,.Lfe68-OpponentHandleCmd40
	.align	2, 0
	.type	 OpponentHandleHitAnimation,function
	.thumb_func
OpponentHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L820
	ldr	r2, .L820+0x4
	ldr	r4, .L820+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L818	@cond_branch
	bl	OpponentBufferExecCompleted
	b	.L819
.L821:
	.align	2, 0
.L820:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.L818:
	ldr	r1, .L822
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	DoHitAnimHealthboxEffect
	ldr	r1, .L822+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L822+0x8
	str	r1, [r0]
.L819:
	pop	{r4}
	pop	{r0}
	bx	r0
.L823:
	.align	2, 0
.L822:
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	DoHitAnimBlinkSpriteEffect
.Lfe69:
	.size	 OpponentHandleHitAnimation,.Lfe69-OpponentHandleHitAnimation
	.align	2, 0
	.type	 OpponentHandleCmd42,function
	.thumb_func
OpponentHandleCmd42:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 OpponentHandleCmd42,.Lfe70-OpponentHandleCmd42
	.align	2, 0
	.type	 OpponentHandlePlaySE,function
	.thumb_func
OpponentHandlePlaySE:
	push	{r4, lr}
	ldr	r4, .L828
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r3, #0x3f
	cmp	r0, #0
	bne	.L826	@cond_branch
	mov	r3, #0xc0
.L826:
	ldr	r0, .L828+0x4
	ldr	r1, [r0]
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	bl	OpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L829:
	.align	2, 0
.L828:
	.word	gActiveBattler
	.word	gBattleResources
.Lfe71:
	.size	 OpponentHandlePlaySE,.Lfe71-OpponentHandlePlaySE
	.align	2, 0
	.type	 OpponentHandlePlayFanfareOrBGM,function
	.thumb_func
OpponentHandlePlayFanfareOrBGM:
	push	{r4, r5, lr}
	ldr	r5, .L833
	ldr	r1, [r5]
	ldr	r4, .L833+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x23
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L831	@cond_branch
	bl	BattleStopLowHpSound
	ldr	r1, [r5]
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayBGM
	b	.L832
.L834:
	.align	2, 0
.L833:
	.word	gBattleResources
	.word	gActiveBattler
.L831:
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
.L832:
	bl	OpponentBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe72:
	.size	 OpponentHandlePlayFanfareOrBGM,.Lfe72-OpponentHandlePlayFanfareOrBGM
	.align	2, 0
	.type	 OpponentHandleFaintingCry,function
	.thumb_func
OpponentHandleFaintingCry:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r0, .L836
	mov	r9, r0
	ldr	r1, .L836+0x4
	mov	r8, r1
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L836+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x59
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	GetFormSpeciesId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	mov	r2, #0x5
	bl	PlayCry3
	bl	OpponentBufferExecCompleted
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L837:
	.align	2, 0
.L836:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gEnemyParty
.Lfe73:
	.size	 OpponentHandleFaintingCry,.Lfe73-OpponentHandleFaintingCry
	.align	2, 0
	.type	 OpponentHandleIntroSlide,function
	.thumb_func
OpponentHandleIntroSlide:
	push	{lr}
	ldr	r0, .L839
	ldr	r1, [r0]
	ldr	r0, .L839+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	HandleIntroSlide
	ldr	r2, .L839+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L840:
	.align	2, 0
.L839:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gIntroSlideFlags
.Lfe74:
	.size	 OpponentHandleIntroSlide,.Lfe74-OpponentHandleIntroSlide
	.align	2, 0
	.type	 OpponentHandleIntroTrainerBallThrow,function
	.thumb_func
OpponentHandleIntroTrainerBallThrow:
	push	{r4, r5, r6, lr}
	ldr	r5, .L843
	ldr	r6, .L843+0x4
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L843+0x8
	add	r0, r0, r4
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L843+0xc
	str	r1, [r0]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L843+0x10
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L843+0x14
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L843+0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r6]
	strh	r0, [r1, #0x8]
	ldr	r3, .L843+0x1c
	ldr	r0, [r3]
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L842	@cond_branch
	ldr	r0, .L843+0x20
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L843+0x24
	str	r1, [r0]
.L842:
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L843+0x28
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L843+0x2c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L844:
	.align	2, 0
.L843:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	StartAnimLinearTranslation
	.word	sub_806280C
	.word	sub_8062828
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
	.word	gBattlerControllerFuncs
	.word	nullsub_26
.Lfe75:
	.size	 OpponentHandleIntroTrainerBallThrow,.Lfe75-OpponentHandleIntroTrainerBallThrow
	.align	2, 0
	.type	 sub_806280C,function
	.thumb_func
sub_806280C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x6]
	bl	FreeTrainerFrontPicPalette
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe76:
	.size	 sub_806280C,.Lfe76-sub_806280C
	.align	2, 0
	.type	 sub_8062828,function
	.thumb_func
sub_8062828:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L854
	ldrb	r0, [r4]
	mov	r9, r0
	ldr	r1, .L854+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	strb	r0, [r4]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L848	@cond_branch
	ldr	r0, .L854+0x8
	ldr	r1, [r0]
	mov	r2, #0x40
	and	r1, r1, r2
	add	r2, r0, #0
	cmp	r1, #0
	beq	.L847	@cond_branch
.L848:
	ldr	r0, .L854+0x8
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0xf
	and	r1, r1, r2
	add	r2, r0, #0
	cmp	r1, #0
	beq	.L849	@cond_branch
	ldr	r0, .L854+0xc
	ldrh	r1, [r0]
	ldr	r0, .L854+0x10
	cmp	r1, r0
	beq	.L847	@cond_branch
.L849:
	ldr	r0, .L854+0x14
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldr	r2, .L854+0x18
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r4]
	b	.L853
.L855:
	.align	2, 0
.L854:
	.word	gActiveBattler
	.word	gTasks
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent_B
	.word	0xffff
	.word	gBattleResources
	.word	gBattlerPartyIndexes
.L847:
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L851	@cond_branch
	ldr	r0, .L856
	ldr	r1, [r0]
	ldr	r3, .L856+0x4
	ldrb	r0, [r3]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldr	r2, .L856+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r3]
.L853:
	mov	r1, #0x0
	bl	sub_80613DC
	b	.L850
.L857:
	.align	2, 0
.L856:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L851:
	ldr	r0, .L858
	mov	r8, r0
	ldr	r1, [r0]
	ldr	r4, .L858+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldr	r6, .L858+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	sub_80613DC
	ldrb	r0, [r4]
	mov	r5, #0x2
	eor	r0, r0, r5
	strb	r0, [r4]
	mov	r0, r8
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	sub_80613DC
	ldrb	r0, [r4]
	eor	r0, r0, r5
	strb	r0, [r4]
.L850:
	ldr	r1, .L858+0xc
	ldr	r2, .L858+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L858+0x10
	str	r1, [r0]
	mov	r0, r9
	strb	r0, [r2]
	add	r0, r7, #0
	bl	DestroyTask
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L859:
	.align	2, 0
.L858:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gBattlerControllerFuncs
	.word	sub_805F560
.Lfe77:
	.size	 sub_8062828,.Lfe77-sub_8062828
	.align	2, 0
	.type	 OpponentHandleDrawPartyStatusSummary,function
	.thumb_func
OpponentHandleDrawPartyStatusSummary:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L867
	ldr	r0, [r0]
	ldr	r1, .L867+0x4
	ldrb	r2, [r1]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L861	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L861	@cond_branch
	bl	OpponentBufferExecCompleted
	b	.L860
.L868:
	.align	2, 0
.L867:
	.word	gBattleResources
	.word	gActiveBattler
.L861:
	ldr	r5, .L869
	ldr	r0, [r5]
	ldr	r3, .L869+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r2, .L869+0x8
	ldr	r0, [r2]
	ldrb	r4, [r3]
	lsl	r1, r4, #0x9
	add	r0, r0, #0x22
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r7, r2, #0
	mov	r8, r3
	cmp	r0, #0
	beq	.L863	@cond_branch
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r2, [r3, #0x1]
	lsl	r1, r2, #0x1b
	lsr	r0, r1, #0x1c
	cmp	r0, #0x1
	bhi	.L864	@cond_branch
	add	r0, r0, #0x1
	mov	r1, #0xf
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, #0x1f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
	b	.L860
.L870:
	.align	2, 0
.L869:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleResources
.L864:
	mov	r0, #0x1f
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r3, #0x1]
.L863:
	mov	r5, r8
	ldrb	r0, [r5]
	lsl	r4, r0, #0x9
	add	r1, r4, #0
	add	r1, r1, #0x20
	ldr	r3, [r7]
	add	r1, r3, r1
	add	r1, r1, #0x4
	add	r2, r3, #0
	add	r2, r2, #0x21
	add	r2, r2, r4
	ldrb	r2, [r2]
	add	r3, r3, #0x22
	add	r3, r3, r4
	ldrb	r3, [r3]
	bl	CreatePartyStatusSummarySprites
	ldr	r2, .L871
	ldrb	r1, [r5]
	add	r1, r1, r2
	mov	r3, #0x0
	strb	r0, [r1]
	ldr	r6, .L871+0x4
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x5]
	ldr	r0, [r7]
	ldrb	r4, [r5]
	lsl	r1, r4, #0x9
	add	r0, r0, #0x22
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L866	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x5d
	strb	r1, [r0, #0x5]
.L866:
	ldr	r0, .L871+0x8
	mov	r2, r8
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L871+0xc
	str	r0, [r1]
.L860:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L872:
	.align	2, 0
.L871:
	.word	gBattlerStatusSummaryTaskId
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_8062A2C
.Lfe78:
	.size	 OpponentHandleDrawPartyStatusSummary,.Lfe78-OpponentHandleDrawPartyStatusSummary
	.align	2, 0
	.type	 sub_8062A2C,function
	.thumb_func
sub_8062A2C:
	push	{r4, lr}
	ldr	r4, .L875
	ldr	r0, [r4]
	ldr	r3, .L875+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x5]
	add	r2, r1, #0x1
	strb	r2, [r0, #0x5]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x5c
	bls	.L874	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x5]
	bl	OpponentBufferExecCompleted
.L874:
	pop	{r4}
	pop	{r0}
	bx	r0
.L876:
	.align	2, 0
.L875:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe79:
	.size	 sub_8062A2C,.Lfe79-sub_8062A2C
	.align	2, 0
	.type	 OpponentHandleHidePartyStatusSummary,function
	.thumb_func
OpponentHandleHidePartyStatusSummary:
	push	{lr}
	ldr	r0, .L879
	ldr	r1, [r0]
	ldr	r0, .L879+0x4
	ldrb	r3, [r0]
	ldr	r1, [r1, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L878	@cond_branch
	ldr	r2, .L879+0x8
	ldr	r0, .L879+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L879+0x10
	str	r1, [r0]
.L878:
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L880:
	.align	2, 0
.L879:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gTasks
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
.Lfe80:
	.size	 OpponentHandleHidePartyStatusSummary,.Lfe80-OpponentHandleHidePartyStatusSummary
	.align	2, 0
	.type	 OpponentHandleEndBounceEffect,function
	.thumb_func
OpponentHandleEndBounceEffect:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 OpponentHandleEndBounceEffect,.Lfe81-OpponentHandleEndBounceEffect
	.align	2, 0
	.type	 OpponentHandleSpriteInvisibility,function
	.thumb_func
OpponentHandleSpriteInvisibility:
	push	{r4, lr}
	ldr	r4, .L884
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L883	@cond_branch
	ldr	r3, .L884+0x4
	ldr	r0, .L884+0x8
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r0, .L884+0xc
	ldr	r0, [r0]
	lsl	r1, r1, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	add	r2, r2, #0x3e
	mov	r3, #0x1
	ldrb	r1, [r0]
	and	r1, r1, r3
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	CopyBattleSpriteInvisibility
.L883:
	bl	OpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L885:
	.align	2, 0
.L884:
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleResources
.Lfe82:
	.size	 OpponentHandleSpriteInvisibility,.Lfe82-OpponentHandleSpriteInvisibility
	.align	2, 0
	.type	 OpponentHandleBattleAnimation,function
	.thumb_func
OpponentHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r6, .L890
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L887	@cond_branch
	ldr	r0, .L890+0x4
	ldr	r1, [r0]
	ldrb	r2, [r6]
	lsl	r5, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r5
	ldrb	r3, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x22
	add	r0, r0, r5
	ldrb	r4, [r0]
	add	r1, r1, #0x23
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	TryHandleLaunchBattleTableAnimation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L888	@cond_branch
	bl	OpponentBufferExecCompleted
	b	.L887
.L891:
	.align	2, 0
.L890:
	.word	gActiveBattler
	.word	gBattleResources
.L888:
	ldr	r0, .L892
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L892+0x4
	str	r0, [r1]
.L887:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L893:
	.align	2, 0
.L892:
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedBattleAnimation
.Lfe83:
	.size	 OpponentHandleBattleAnimation,.Lfe83-OpponentHandleBattleAnimation
	.align	2, 0
	.type	 OpponentHandleLinkStandbyMsg,function
	.thumb_func
OpponentHandleLinkStandbyMsg:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 OpponentHandleLinkStandbyMsg,.Lfe84-OpponentHandleLinkStandbyMsg
	.align	2, 0
	.type	 OpponentHandleResetActionMoveSelection,function
	.thumb_func
OpponentHandleResetActionMoveSelection:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe85:
	.size	 OpponentHandleResetActionMoveSelection,.Lfe85-OpponentHandleResetActionMoveSelection
	.align	2, 0
	.type	 OpponentHandleCmd55,function
	.thumb_func
OpponentHandleCmd55:
	push	{lr}
	ldr	r0, .L898
	ldr	r0, [r0]
	mov	r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0x2
	bne	.L897	@cond_branch
	ldr	r2, .L898+0x4
	ldr	r0, .L898+0x8
	add	r3, r2, r0
	ldrb	r1, [r3]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L898+0xc
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r0, [r2, #0x8]
	bl	SetMainCallback2
.L897:
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L899:
	.align	2, 0
.L898:
	.word	gBattleTypeFlags
	.word	gMain
	.word	0x439
	.word	gPreBattleCallback1
.Lfe86:
	.size	 OpponentHandleCmd55,.Lfe86-OpponentHandleCmd55
	.align	2, 0
	.type	 OpponentHandleDebugMenu,function
	.thumb_func
OpponentHandleDebugMenu:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 OpponentHandleDebugMenu,.Lfe87-OpponentHandleDebugMenu
	.align	2, 0
	.type	 OpponentCmdEnd,function
	.thumb_func
OpponentCmdEnd:
	bx	lr
.Lfe88:
	.size	 OpponentCmdEnd,.Lfe88-OpponentCmdEnd
.text
	.align	2, 0

