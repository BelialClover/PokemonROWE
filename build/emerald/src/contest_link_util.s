@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	Task_LinkContest_StartCommunicationEm
	.type	 Task_LinkContest_StartCommunicationEm,function
	.thumb_func
Task_LinkContest_StartCommunicationEm:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L13
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1a
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x4
	bhi	.L9	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L13+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L14:
	.align	2, 0
.L13:
	.word	gTasks
	.word	.L10
	.align	2, 0
	.align	2, 0
.L10:
	.word	.L4
	.word	.L5
	.word	.L6
	.word	.L7
	.word	.L9
.L4:
	ldr	r4, .L15
	ldr	r0, .L15+0x4
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L15+0x8
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L12
.L16:
	.align	2, 0
.L15:
	.word	gHighestRibbonRank
	.word	gContestMonPartyIndex
	.word	gPlayerParty
.L5:
	ldr	r4, .L17
	ldr	r0, .L17+0x4
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L17+0x8
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L12
.L18:
	.align	2, 0
.L17:
	.word	gHighestRibbonRank
	.word	gContestMonPartyIndex
	.word	gPlayerParty
.L6:
	ldr	r4, .L19
	ldr	r0, .L19+0x4
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L19+0x8
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L12
.L20:
	.align	2, 0
.L19:
	.word	gHighestRibbonRank
	.word	gContestMonPartyIndex
	.word	gPlayerParty
.L7:
	ldr	r4, .L21
	ldr	r0, .L21+0x4
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L21+0x8
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L12
.L22:
	.align	2, 0
.L21:
	.word	gHighestRibbonRank
	.word	gContestMonPartyIndex
	.word	gPlayerParty
.L9:
	ldr	r4, .L23
	ldr	r0, .L23+0x4
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L23+0x8
	add	r0, r0, r1
	mov	r1, #0x36
.L12:
	bl	GetMonData
	strb	r0, [r4]
	ldr	r5, .L23+0xc
	ldr	r4, .L23+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x6
	add	r0, r0, r5
	ldr	r1, .L23
	ldrb	r1, [r1]
	add	r0, r0, #0x2c
	strb	r1, [r0]
	ldr	r0, .L23+0x14
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	neg	r0, r0
	lsr	r0, r0, #0x1f
	ldrb	r1, [r4]
	lsl	r1, r1, #0x6
	add	r1, r1, r5
	add	r1, r1, #0x2d
	strb	r0, [r1]
	ldr	r1, .L23+0x18
	ldr	r2, .L23+0x1c
	add	r0, r6, #0
	bl	SetTaskFuncWithFollowupFunc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	gHighestRibbonRank
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gContestMons
	.word	gContestPlayerMonIndex
	.word	0x864
	.word	Task_LinkContest_CommunicateMonsEm
	.word	Task_LinkContest_StartCommunicateRngEm
.Lfe1:
	.size	 Task_LinkContest_StartCommunicationEm,.Lfe1-Task_LinkContest_StartCommunicationEm
	.align	2, 0
	.type	 Task_LinkContest_StartCommunicateRngEm,function
	.thumb_func
Task_LinkContest_StartCommunicateRngEm:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L26
	ldr	r2, .L26+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	Task_LinkContest_CommunicateRngEm
	.word	Task_LinkContest_StartCommunicateLeaderIdsEm
.Lfe2:
	.size	 Task_LinkContest_StartCommunicateRngEm,.Lfe2-Task_LinkContest_StartCommunicateRngEm
	.align	2, 0
	.type	 Task_LinkContest_StartCommunicateLeaderIdsEm,function
	.thumb_func
Task_LinkContest_StartCommunicateLeaderIdsEm:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L29
	ldr	r2, .L29+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	Task_LinkContest_CommunicateLeaderIdsEm
	.word	Task_LinkContest_StartCommunicateCategoryEm
.Lfe3:
	.size	 Task_LinkContest_StartCommunicateLeaderIdsEm,.Lfe3-Task_LinkContest_StartCommunicateLeaderIdsEm
	.align	2, 0
	.type	 Task_LinkContest_StartCommunicateCategoryEm,function
	.thumb_func
Task_LinkContest_StartCommunicateCategoryEm:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L32
	ldr	r2, .L32+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	Task_LinkContest_CommunicateCategoryEm
	.word	Task_LinkContest_SetUpContestEm
.Lfe4:
	.size	 Task_LinkContest_StartCommunicateCategoryEm,.Lfe4-Task_LinkContest_StartCommunicateCategoryEm
	.align	2, 0
	.type	 Task_LinkContest_SetUpContestEm,function
	.thumb_func
Task_LinkContest_SetUpContestEm:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r3, #0x0
	ldr	r5, .L70
	mov	r8, r5
	ldr	r0, .L70+0x4
	mov	ip, r0
	add	r1, sp, #0x4
	mov	r9, r1
	ldrb	r4, [r5]
	cmp	r3, r4
	bcs	.L36	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r4, r0, #0x3
	ldr	r7, .L70+0x8
.L38:
	mov	r0, sp
	add	r2, r0, r3
	add	r1, r3, #0x1
	lsl	r0, r1, #0x1
	add	r0, r0, r4
	add	r0, r0, r7
	ldrh	r0, [r0]
	strb	r0, [r2]
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	ldrb	r1, [r5]
	cmp	r3, r1
	bcc	.L38	@cond_branch
.L36:
	mov	r3, #0x0
	mov	r4, r8
	ldrb	r0, [r4]
	cmp	r3, r0
	bcs	.L41	@cond_branch
	add	r4, r0, #0
	mov	r2, sp
.L42:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r4
	bcs	.L41	@cond_branch
	mov	r7, sp
	add	r1, r7, r3
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L42	@cond_branch
.L41:
	mov	r0, r8
	ldrb	r0, [r0]
	cmp	r3, r0
	bne	.L46	@cond_branch
	mov	r0, #0x0
	mov	r1, ip
	strh	r0, [r1]
	b	.L47
.L71:
	.align	2, 0
.L70:
	.word	gNumLinkContestPlayers
	.word	gSpecialVar_0x8004
	.word	gTasks+0x8
.L46:
	mov	r0, #0x1
	mov	r4, ip
	strh	r0, [r4]
.L47:
	mov	r3, #0x0
	mov	r7, r8
	mov	r0, r8
	ldrb	r0, [r0]
	cmp	r3, r0
	bcs	.L49	@cond_branch
	mov	r4, r9
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r2, r0, #0x3
	ldr	r5, .L72
.L51:
	add	r1, r4, r3
	add	r0, r3, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	add	r0, r0, r5
	ldrh	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r1, [r7]
	cmp	r3, r1
	bcc	.L51	@cond_branch
.L49:
	mov	r4, r8
	ldrb	r0, [r4]
	cmp	r0, #0x4
	beq	.L53	@cond_branch
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L53	@cond_branch
	ldr	r0, .L72+0x4
	add	r1, r0, #0
	add	r1, r1, #0x2c
	ldrb	r2, [r1]
	mov	r3, #0x1
	ldrb	r1, [r4]
	add	r5, r0, #0
	cmp	r3, r1
	bcs	.L55	@cond_branch
	add	r4, r5, #0
	mov	r7, r8
	ldrb	r1, [r7]
.L57:
	lsl	r0, r3, #0x6
	add	r0, r0, r4
	add	r0, r0, #0x2c
	ldrb	r7, [r0]
	cmp	r2, r7
	bcs	.L56	@cond_branch
	ldrb	r2, [r0]
.L56:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r1
	bcc	.L57	@cond_branch
.L55:
	cmp	r2, #0
	beq	.L60	@cond_branch
	sub	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L60:
	mov	r4, #0x1
	mov	r3, #0x0
	mov	r0, r8
	ldrb	r0, [r0]
	cmp	r3, r0
	bcs	.L62	@cond_branch
	add	r0, r5, #0
	b	.L69
.L73:
	.align	2, 0
.L72:
	.word	gTasks+0x8
	.word	gContestMons
.L63:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r1, r8
	ldrb	r1, [r1]
	cmp	r3, r1
	bcs	.L62	@cond_branch
	lsl	r0, r3, #0x6
	add	r0, r0, r5
.L69:
	add	r0, r0, #0x2d
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L63	@cond_branch
	mov	r4, #0x0
.L62:
	mov	r0, sp
	ldrb	r0, [r0]
	add	r1, r2, #0
	add	r2, r4, #0
	bl	SetLinkAIContestants
.L53:
	mov	r0, r9
	bl	LinkContest_GetLeaderIndex
	ldr	r1, .L74
	strb	r0, [r1]
	ldr	r0, .L74+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bhi	.L67	@cond_branch
	ldr	r1, .L74+0x8
	ldr	r2, .L74+0xc
	add	r0, r6, #0
	bl	SetTaskFuncWithFollowupFunc
	b	.L68
.L75:
	.align	2, 0
.L74:
	.word	gContestLinkLeaderIndex
	.word	gNumLinkContestPlayers
	.word	Task_LinkContest_CommunicateAIMonsEm
	.word	Task_LinkContest_CalculateRound1Em
.L67:
	ldr	r0, .L76
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L76+0x4
	str	r0, [r1]
.L68:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	gTasks
	.word	Task_LinkContest_CalculateRound1Em
.Lfe5:
	.size	 Task_LinkContest_SetUpContestEm,.Lfe5-Task_LinkContest_SetUpContestEm
	.align	2, 0
	.type	 Task_LinkContest_CalculateRound1Em,function
	.thumb_func
Task_LinkContest_CalculateRound1Em:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L79
	ldrb	r0, [r0]
	bl	CalculateRound1Points
	ldr	r1, .L79+0x4
	ldr	r2, .L79+0x8
	add	r0, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	pop	{r4}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gSpecialVar_ContestCategory
	.word	Task_LinkContest_CommunicateRound1Points
	.word	Task_LinkContest_CalculateTurnOrderEm
.Lfe6:
	.size	 Task_LinkContest_CalculateRound1Em,.Lfe6-Task_LinkContest_CalculateRound1Em
	.align	2, 0
	.type	 Task_LinkContest_CalculateTurnOrderEm,function
	.thumb_func
Task_LinkContest_CalculateTurnOrderEm:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	bl	SortContestants
	ldr	r1, .L82
	ldr	r2, .L82+0x4
	add	r0, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	pop	{r4}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	Task_LinkContest_CommunicateTurnOrder
	.word	Task_LinkContest_FinalizeConnection
.Lfe7:
	.size	 Task_LinkContest_CalculateTurnOrderEm,.Lfe7-Task_LinkContest_CalculateTurnOrderEm
	.align	2, 0
	.type	 Task_LinkContest_CommunicateMonsEm,function
	.thumb_func
Task_LinkContest_CommunicateMonsEm:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r6, r7, #0x2
	add	r0, r6, r7
	lsl	r4, r0, #0x3
	ldr	r5, .L99
	add	r0, r4, r5
	add	r0, r0, #0x18
	bl	LinkContest_TryLinkStandby
	cmp	r0, #0
	beq	.L84	@cond_branch
	add	r0, r5, #0
	sub	r0, r0, #0x8
	add	r4, r4, r0
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L88	@cond_branch
	cmp	r0, #0x1
	beq	.L91	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0x20]
	add	r0, r7, #0
	bl	SwitchTaskToFollowupFunc
	b	.L84
.L100:
	.align	2, 0
.L99:
	.word	gTasks+0x8
.L88:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L84	@cond_branch
	ldr	r0, .L101
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	ldr	r1, .L101+0x4
	add	r0, r0, r1
	mov	r1, #0x40
	bl	LinkContest_SendBlock
	cmp	r0, #0x1
	bne	.L84	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L84
.L102:
	.align	2, 0
.L101:
	.word	gContestPlayerMonIndex
	.word	gContestMons
.L91:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L84	@cond_branch
	mov	r5, #0x0
	ldr	r0, .L103
	mov	r8, r6
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L94	@cond_branch
	ldr	r6, .L103+0x4
.L96:
	lsl	r4, r5, #0x6
	ldr	r0, .L103+0x8
	add	r4, r4, r0
	lsl	r1, r5, #0x8
	ldr	r0, .L103+0xc
	add	r1, r1, r0
	add	r0, r4, #0
	mov	r2, #0x40
	bl	memcpy
	ldrh	r1, [r6, #0x1a]
	add	r0, r4, #0
	bl	StripPlayerAndMonNamesForLinkContest
	add	r6, r6, #0x1c
	add	r5, r5, #0x1
	ldr	r0, .L103
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L96	@cond_branch
.L94:
	ldr	r0, .L103+0x10
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
.L84:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	gNumLinkContestPlayers
	.word	gLinkPlayers
	.word	gContestMons
	.word	gBlockRecvBuffer
	.word	gTasks
.Lfe8:
	.size	 Task_LinkContest_CommunicateMonsEm,.Lfe8-Task_LinkContest_CommunicateMonsEm
	.align	2, 0
	.type	 Task_LinkContest_CommunicateRngEm,function
	.thumb_func
Task_LinkContest_CommunicateRngEm:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r5, r0, #0x3
	ldr	r6, .L118
	add	r0, r5, r6
	add	r0, r0, #0x18
	bl	LinkContest_TryLinkStandby
	cmp	r0, #0
	beq	.L105	@cond_branch
	add	r0, r6, #0
	sub	r0, r0, #0x8
	add	r5, r5, r0
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L109	@cond_branch
	cmp	r0, #0x1
	beq	.L114	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	strh	r0, [r5, #0x20]
	add	r0, r4, #0
	bl	SwitchTaskToFollowupFunc
	b	.L105
.L119:
	.align	2, 0
.L118:
	.word	gTasks+0x8
.L109:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L117	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L105	@cond_branch
	ldr	r0, .L120
	mov	r1, #0x4
	bl	LinkContest_SendBlock
	cmp	r0, #0x1
	bne	.L105	@cond_branch
	b	.L117
.L121:
	.align	2, 0
.L120:
	.word	gRngValue
.L114:
	mov	r0, #0x0
	bl	LinkContest_GetBlockReceived
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L105	@cond_branch
	ldr	r0, .L122
	ldr	r4, .L122+0x4
	add	r1, r4, #0
	mov	r2, #0x4
	bl	memcpy
	ldr	r0, .L122+0x8
	add	r1, r4, #0
	mov	r2, #0x4
	bl	memcpy
.L117:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
.L105:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	gRngValue
	.word	gBlockRecvBuffer
	.word	gContestRngValue
.Lfe9:
	.size	 Task_LinkContest_CommunicateRngEm,.Lfe9-Task_LinkContest_CommunicateRngEm
	.align	2, 0
	.type	 Task_LinkContest_CommunicateLeaderIdsEm,function
	.thumb_func
Task_LinkContest_CommunicateLeaderIdsEm:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	mov	r9, r0
	add	r0, r0, r6
	lsl	r5, r0, #0x3
	ldr	r1, .L139
	mov	r8, r1
	add	r0, r5, r1
	add	r0, r0, #0x18
	bl	LinkContest_TryLinkStandby
	cmp	r0, #0
	beq	.L124	@cond_branch
	mov	r0, #0x8
	neg	r0, r0
	add	r0, r0, r8
	mov	sl, r0
	add	r4, r5, r0
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L128	@cond_branch
	cmp	r0, #0x1
	beq	.L131	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0x20]
	add	r0, r6, #0
	bl	SwitchTaskToFollowupFunc
	b	.L124
.L140:
	.align	2, 0
.L139:
	.word	gTasks+0x8
.L128:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L124	@cond_branch
	add	r0, sp, #0x8
	mov	r1, #0x6e
	strh	r1, [r0]
	mov	r1, #0x2
	bl	LinkContest_SendBlock
	cmp	r0, #0x1
	bne	.L124	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L124
.L131:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L124	@cond_branch
	mov	r1, #0x0
	ldr	r7, .L141
	ldrb	r0, [r7]
	cmp	r1, r0
	bge	.L134	@cond_branch
	mov	r0, r8
	add	r0, r0, #0xa
	add	r3, r5, r0
	ldr	r4, .L141+0x4
	mov	r2, sp
	mov	r5, #0x80
	lsl	r5, r5, #0x1
.L136:
	ldrh	r0, [r4]
	strh	r0, [r2]
	strh	r0, [r3]
	add	r3, r3, #0x2
	add	r4, r4, r5
	add	r2, r2, #0x2
	add	r1, r1, #0x1
	ldrb	r0, [r7]
	cmp	r1, r0
	blt	.L136	@cond_branch
.L134:
	mov	r0, r9
	add	r1, r0, r6
	lsl	r1, r1, #0x3
	add	r1, r1, sl
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
.L124:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L142:
	.align	2, 0
.L141:
	.word	gNumLinkContestPlayers
	.word	gBlockRecvBuffer
.Lfe10:
	.size	 Task_LinkContest_CommunicateLeaderIdsEm,.Lfe10-Task_LinkContest_CommunicateLeaderIdsEm
	.align	2, 0
	.type	 Task_LinkContest_CommunicateCategoryEm,function
	.thumb_func
Task_LinkContest_CommunicateCategoryEm:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	mov	r9, r0
	add	r0, r0, r6
	lsl	r5, r0, #0x3
	ldr	r1, .L158
	mov	r8, r1
	add	r0, r5, r1
	add	r0, r0, #0x18
	bl	LinkContest_TryLinkStandby
	cmp	r0, #0
	beq	.L143	@cond_branch
	mov	r0, #0x8
	neg	r0, r0
	add	r0, r0, r8
	mov	sl, r0
	add	r4, r5, r0
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L147	@cond_branch
	cmp	r0, #0x1
	beq	.L150	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0x20]
	add	r0, r6, #0
	bl	SwitchTaskToFollowupFunc
	b	.L143
.L159:
	.align	2, 0
.L158:
	.word	gTasks+0x8
.L147:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L143	@cond_branch
	ldrh	r1, [r4, #0x1a]
	add	r0, sp, #0x8
	strh	r1, [r0]
	mov	r1, #0x2
	bl	LinkContest_SendBlock
	cmp	r0, #0x1
	bne	.L143	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L143
.L150:
	bl	LinkContest_GetBlockReceivedFromAllPlayers
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L143	@cond_branch
	mov	r1, #0x0
	ldr	r7, .L160
	ldrb	r0, [r7]
	cmp	r1, r0
	bge	.L153	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x2
	add	r3, r5, r0
	ldr	r4, .L160+0x4
	mov	r2, sp
	mov	r5, #0x80
	lsl	r5, r5, #0x1
.L155:
	ldrh	r0, [r4]
	strh	r0, [r2]
	strh	r0, [r3]
	add	r3, r3, #0x2
	add	r4, r4, r5
	add	r2, r2, #0x2
	add	r1, r1, #0x1
	ldrb	r0, [r7]
	cmp	r1, r0
	blt	.L155	@cond_branch
.L153:
	mov	r0, r9
	add	r1, r0, r6
	lsl	r1, r1, #0x3
	add	r1, r1, sl
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
.L143:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L161:
	.align	2, 0
.L160:
	.word	gNumLinkContestPlayers
	.word	gBlockRecvBuffer
.Lfe11:
	.size	 Task_LinkContest_CommunicateCategoryEm,.Lfe11-Task_LinkContest_CommunicateCategoryEm
	.align	2, 0
	.type	 Task_LinkContest_CommunicateAIMonsEm,function
	.thumb_func
Task_LinkContest_CommunicateAIMonsEm:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r7, r6, #0x2
	add	r0, r7, r6
	lsl	r4, r0, #0x3
	ldr	r5, .L179
	add	r0, r4, r5
	add	r0, r0, #0x18
	bl	LinkContest_TryLinkStandby
	cmp	r0, #0
	beq	.L162	@cond_branch
	add	r0, r5, #0
	sub	r0, r0, #0x8
	add	r4, r4, r0
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L166	@cond_branch
	cmp	r0, #0x1
	beq	.L171	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0x20]
	add	r0, r6, #0
	bl	SwitchTaskToFollowupFunc
	b	.L162
.L180:
	.align	2, 0
.L179:
	.word	gTasks+0x8
.L166:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L167	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L162	@cond_branch
	ldr	r0, .L181
	ldrb	r2, [r0]
	lsl	r0, r2, #0x6
	ldr	r1, .L181+0x4
	add	r0, r0, r1
	mov	r1, #0x4
	sub	r1, r1, r2
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x10
	bl	LinkContest_SendBlock
	cmp	r0, #0x1
	bne	.L162	@cond_branch
.L167:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L162
.L182:
	.align	2, 0
.L181:
	.word	gNumLinkContestPlayers
	.word	gContestMons
.L171:
	mov	r0, #0x0
	bl	LinkContest_GetBlockReceived
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L162	@cond_branch
	ldr	r4, .L183
	ldrb	r3, [r4]
	lsl	r0, r3, #0x6
	ldr	r5, .L183+0x4
	add	r0, r0, r5
	ldr	r1, .L183+0x8
	mov	r2, #0x4
	sub	r2, r2, r3
	lsl	r2, r2, #0x6
	bl	memcpy
	ldrb	r4, [r4]
	mov	r8, r7
	cmp	r4, #0x3
	bgt	.L174	@cond_branch
	lsl	r0, r4, #0x6
	add	r5, r0, r5
	ldr	r7, .L183+0xc
.L176:
	ldrh	r1, [r7, #0x1a]
	add	r0, r5, #0
	bl	StripPlayerAndMonNamesForLinkContest
	add	r5, r5, #0x40
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L176	@cond_branch
.L174:
	ldr	r0, .L183+0x10
	mov	r2, r8
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
.L162:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L184:
	.align	2, 0
.L183:
	.word	gNumLinkContestPlayers
	.word	gContestMons
	.word	gBlockRecvBuffer
	.word	gLinkPlayers
	.word	gTasks
.Lfe12:
	.size	 Task_LinkContest_CommunicateAIMonsEm,.Lfe12-Task_LinkContest_CommunicateAIMonsEm
.text
	.align	2, 0

