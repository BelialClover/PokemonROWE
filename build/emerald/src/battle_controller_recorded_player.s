@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sRecordedPlayerBufferCommands,object
	.size	 sRecordedPlayerBufferCommands,232
sRecordedPlayerBufferCommands:
	.word	RecordedPlayerHandleGetMonData
	.word	RecordedPlayerHandleGetRawMonData
	.word	RecordedPlayerHandleSetMonData
	.word	RecordedPlayerHandleSetRawMonData
	.word	RecordedPlayerHandleLoadMonSprite
	.word	RecordedPlayerHandleSwitchInAnim
	.word	RecordedPlayerHandleReturnMonToBall
	.word	RecordedPlayerHandleDrawTrainerPic
	.word	RecordedPlayerHandleTrainerSlide
	.word	RecordedPlayerHandleTrainerSlideBack
	.word	RecordedPlayerHandleFaintAnimation
	.word	RecordedPlayerHandlePaletteFade
	.word	RecordedPlayerHandleSuccessBallThrowAnim
	.word	RecordedPlayerHandleBallThrowAnim
	.word	RecordedPlayerHandlePause
	.word	RecordedPlayerHandleMoveAnimation
	.word	RecordedPlayerHandlePrintString
	.word	RecordedPlayerHandlePrintSelectionString
	.word	RecordedPlayerHandleChooseAction
	.word	RecordedPlayerHandleUnknownYesNoBox
	.word	RecordedPlayerHandleChooseMove
	.word	RecordedPlayerHandleChooseItem
	.word	RecordedPlayerHandleChoosePokemon
	.word	RecordedPlayerHandleCmd23
	.word	RecordedPlayerHandleHealthBarUpdate
	.word	RecordedPlayerHandleExpUpdate
	.word	RecordedPlayerHandleStatusIconUpdate
	.word	RecordedPlayerHandleStatusAnimation
	.word	RecordedPlayerHandleStatusXor
	.word	RecordedPlayerHandleDataTransfer
	.word	RecordedPlayerHandleDMA3Transfer
	.word	RecordedPlayerHandlePlayBGM
	.word	RecordedPlayerHandleCmd32
	.word	RecordedPlayerHandleTwoReturnValues
	.word	RecordedPlayerHandleChosenMonReturnValue
	.word	RecordedPlayerHandleOneReturnValue
	.word	RecordedPlayerHandleOneReturnValue_Duplicate
	.word	RecordedPlayerHandleCmd37
	.word	RecordedPlayerHandleCmd38
	.word	RecordedPlayerHandleCmd39
	.word	RecordedPlayerHandleCmd40
	.word	RecordedPlayerHandleHitAnimation
	.word	RecordedPlayerHandleCmd42
	.word	RecordedPlayerHandlePlaySE
	.word	RecordedPlayerHandlePlayFanfareOrBGM
	.word	RecordedPlayerHandleFaintingCry
	.word	RecordedPlayerHandleIntroSlide
	.word	RecordedPlayerHandleIntroTrainerBallThrow
	.word	RecordedPlayerHandleDrawPartyStatusSummary
	.word	RecordedPlayerHandleHidePartyStatusSummary
	.word	RecordedPlayerHandleEndBounceEffect
	.word	RecordedPlayerHandleSpriteInvisibility
	.word	RecordedPlayerHandleBattleAnimation
	.word	RecordedPlayerHandleLinkStandbyMsg
	.word	RecordedPlayerHandleResetActionMoveSelection
	.word	RecordedPlayerHandleCmd55
	.word	RecordedPlayerCmdEnd
	.space	4
.text
	.align	2, 0
	.type	 nullsub_120,function
	.thumb_func
nullsub_120:
	bx	lr
.Lfe1:
	.size	 nullsub_120,.Lfe1-nullsub_120
	.align	2, 0
	.globl	SetControllerToRecordedPlayer
	.type	 SetControllerToRecordedPlayer,function
	.thumb_func
SetControllerToRecordedPlayer:
	ldr	r1, .L4
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L4+0x8
	str	r1, [r0]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	RecordedPlayerBufferRunCommand
.Lfe2:
	.size	 SetControllerToRecordedPlayer,.Lfe2-SetControllerToRecordedPlayer
	.align	2, 0
	.type	 RecordedPlayerBufferRunCommand,function
	.thumb_func
RecordedPlayerBufferRunCommand:
	push	{lr}
	ldr	r2, .L10
	ldr	r1, .L10+0x4
	ldr	r0, .L10+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L7	@cond_branch
	ldr	r0, .L10+0xc
	ldr	r0, [r0]
	lsl	r1, r3, #0x9
	add	r0, r0, #0x20
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0x39
	bhi	.L8	@cond_branch
	ldr	r0, .L10+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L7
.L11:
	.align	2, 0
.L10:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleResources
	.word	sRecordedPlayerBufferCommands
.L8:
	bl	RecordedPlayerBufferExecCompleted
.L7:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 RecordedPlayerBufferRunCommand,.Lfe3-RecordedPlayerBufferRunCommand
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy:
	push	{lr}
	ldr	r2, .L14
	ldr	r1, .L14+0x4
	ldr	r0, .L14+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L14+0xc
	cmp	r1, r0
	bne	.L13	@cond_branch
	bl	RecordedPlayerBufferExecCompleted
.L13:
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe4:
	.size	 CompleteOnBattlerSpriteCallbackDummy,.Lfe4-CompleteOnBattlerSpriteCallbackDummy
	.align	2, 0
	.type	 sub_81899F0,function
	.thumb_func
sub_81899F0:
	push	{r4, r5, r6, lr}
	ldr	r6, .L18
	ldr	r5, .L18+0x4
	ldr	r4, .L18+0x8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L18+0xc
	cmp	r1, r0
	bne	.L17	@cond_branch
	mov	r0, #0x0
	bl	nullsub_25
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	bl	RecordedPlayerBufferExecCompleted
.L17:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe5:
	.size	 sub_81899F0,.Lfe5-sub_81899F0
	.align	2, 0
	.type	 sub_8189A58,function
	.thumb_func
sub_8189A58:
	push	{r4, lr}
	ldr	r4, .L22
	ldr	r1, [r4]
	ldr	r3, .L22+0x4
	ldrb	r0, [r3]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L21	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	bl	RecordedPlayerBufferExecCompleted
.L21:
	pop	{r4}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe6:
	.size	 sub_8189A58,.Lfe6-sub_8189A58
	.align	2, 0
	.type	 sub_8189AA0,function
	.thumb_func
sub_8189AA0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	ldr	r4, .L44
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB242
	b	.L25	@long jump
.LCB242:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L27	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L26	@cond_branch
	ldr	r0, .L44+0x4
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L26	@cond_branch
.L27:
	ldr	r2, .L44+0x8
	ldr	r1, .L44+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L44+0x10
	cmp	r1, r0
	bne	.L29	@cond_branch
	b	.L41
.L45:
	.align	2, 0
.L44:
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	SpriteCallbackDummy
.L26:
	ldr	r2, .L46
	ldr	r5, .L46+0x4
	ldr	r0, .L46+0x8
	ldrb	r3, [r0]
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r4, [r0]
	ldr	r0, .L46+0xc
	cmp	r4, r0
	bne	.L29	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r4
	bne	.L29	@cond_branch
	mov	r6, #0x1
.L29:
	cmp	r6, #0
	bne	.LCB325
	b	.L33	@long jump
.LCB325:
.L41:
	ldr	r0, .L46+0x10
	mov	r9, r0
	ldr	r0, [r0]
	ldr	r5, .L46+0x8
	ldrb	r2, [r5]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r3
	ldrb	r1, [r4, #0x1]
	mov	r6, #0x1
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB344
	b	.L33	@long jump
.LCB344:
	mov	r1, #0x2
	mov	r8, r1
	mov	r1, r8
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB361
	b	.L33	@long jump
.LCB361:
	ldrb	r1, [r4]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r2, [r5]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	mov	r0, r9
	ldr	r2, [r0]
	ldrb	r0, [r5]
	mov	r1, r8
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	mov	r1, r9
	ldr	r2, [r1]
	ldrb	r0, [r5]
	mov	r1, r8
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L46+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r7, .L46+0x18
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r4, .L46+0x1c
	add	r0, r0, r4
	bl	HandleLowHpMusicChange
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L32	@cond_branch
	ldrb	r0, [r5]
	mov	r1, r8
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r4
	bl	HandleLowHpMusicChange
.L32:
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x9]
	ldr	r1, .L46+0x20
	ldrb	r0, [r5]
	b	.L42
.L47:
	.align	2, 0
.L46:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	0x27f9
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
.L25:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L35	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L34	@cond_branch
	ldr	r0, .L48
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L34	@cond_branch
.L35:
	ldr	r2, .L48+0x4
	ldr	r1, .L48+0x8
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L48+0xc
	cmp	r1, r0
	bne	.L37	@cond_branch
	b	.L43
.L49:
	.align	2, 0
.L48:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	SpriteCallbackDummy
.L34:
	ldr	r2, .L50
	ldr	r5, .L50+0x4
	ldr	r0, .L50+0x8
	ldrb	r3, [r0]
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r4, [r0]
	ldr	r0, .L50+0xc
	cmp	r4, r0
	bne	.L37	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r4
	bne	.L37	@cond_branch
.L43:
	mov	r6, #0x1
.L37:
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L39	@cond_branch
	mov	r6, #0x0
.L39:
	cmp	r6, #0
	beq	.L33	@cond_branch
	ldr	r0, .L50+0x10
	ldr	r0, [r0]
	ldr	r3, .L50+0x8
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x9]
	ldr	r1, .L50+0x14
	ldrb	r0, [r3]
.L42:
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L50+0x18
	str	r1, [r0]
.L33:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_8189A58
.Lfe7:
	.size	 sub_8189AA0,.Lfe7-sub_8189AA0
	.align	2, 0
	.type	 sub_8189D40,function
	.thumb_func
sub_8189D40:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	mov	sl, r0
	ldr	r4, .L66
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L53	@cond_branch
	ldr	r5, .L66+0x4
	ldr	r0, [r5]
	ldrb	r2, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r6, #0x88
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L54	@cond_branch
	ldr	r0, .L66+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L66+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L54:
	ldr	r2, [r5]
	ldrb	r1, [r4]
	mov	r0, #0x2
	add	r3, r0, #0
	eor	r3, r3, r1
	ldr	r1, [r2, #0x4]
	lsl	r2, r3, #0x1
	add	r0, r2, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L53	@cond_branch
	ldr	r0, .L66+0x8
	add	r0, r2, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L66+0xc
	add	r1, r1, r0
	add	r0, r3, #0
	bl	TryShinyAnimation
.L53:
	ldr	r3, .L66+0x4
	ldr	r0, [r3]
	ldr	r2, .L66
	ldrb	r5, [r2]
	ldr	r4, [r0, #0x4]
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r6, r0, r4
	ldrb	r1, [r6]
	mov	r0, #0x8
	mov	ip, r0
	and	r0, r0, r1
	mov	r9, r2
	mov	r8, r3
	cmp	r0, #0
	bne	.L56	@cond_branch
	mov	r7, #0x2
	add	r1, r7, #0
	eor	r1, r1, r5
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, ip
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L56	@cond_branch
	ldrb	r1, [r6, #0x1]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L57	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L58	@cond_branch
	ldr	r0, .L66+0x10
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L58	@cond_branch
	ldr	r4, .L66+0x14
	mov	r1, r9
	ldrb	r0, [r1]
	add	r1, r7, #0
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L66+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L66+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	mov	r1, r9
	ldrb	r0, [r1]
	eor	r0, r0, r7
	bl	sub_8076918
	mov	r1, r9
	ldrb	r0, [r1]
	eor	r0, r0, r7
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L58:
	ldr	r5, .L66+0x14
	ldr	r4, .L66
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L66+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L66+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r4]
	bl	sub_8076918
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L57:
	ldr	r4, .L66+0x4
	ldr	r0, [r4]
	ldr	r3, .L66
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r9, r3
	mov	r8, r4
.L56:
	mov	r1, r8
	ldr	r0, [r1]
	mov	r1, r9
	ldrb	r2, [r1]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x80
	bne	.L59	@cond_branch
	mov	r1, #0x2
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L59	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L59	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	mov	r1, r9
	ldrb	r2, [r1]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L60	@cond_branch
	ldr	r0, .L66+0x10
	ldr	r0, [r0]
	mov	r1, #0x42
	and	r0, r0, r1
	cmp	r0, #0x42
	bne	.L61	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L60	@cond_branch
	ldr	r0, .L66+0x18
	bl	m4aMPlayContinue
	b	.L60
.L67:
	.align	2, 0
.L66:
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gHealthboxSpriteIds
	.word	gMPlayInfo_BGM
.L61:
	ldr	r0, .L68
	ldr	r1, .L68+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L60:
	ldr	r0, .L68+0x8
	ldr	r2, [r0]
	ldr	r0, .L68+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r0, #0x1
	mov	sl, r0
.L59:
	mov	r1, sl
	cmp	r1, #0
	beq	.L64	@cond_branch
	ldr	r7, .L68+0x10
	ldr	r6, .L68+0x14
	ldr	r5, .L68+0xc
	ldrb	r3, [r5]
	add	r0, r3, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r7, #0
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r2, [r0]
	ldr	r0, .L68+0x18
	cmp	r2, r0
	bne	.L64	@cond_branch
	ldr	r0, .L68+0x1c
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	cmp	r0, r2
	bne	.L64	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L65	@cond_branch
	ldr	r0, .L68+0x20
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L65	@cond_branch
	ldrb	r1, [r5]
	mov	r0, #0x2
	eor	r0, r0, r1
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	bl	DestroySprite
.L65:
	ldr	r1, .L68+0x14
	ldr	r4, .L68+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L68+0x10
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r3, .L68+0x8
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r0, [r3]
	ldrb	r2, [r4]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r0, [r3]
	ldrb	r2, [r4]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r1, .L68+0x24
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L68+0x28
	str	r1, [r0]
.L64:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L69:
	.align	2, 0
.L68:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
	.word	gBattleTypeFlags
	.word	gBattlerControllerFuncs
	.word	sub_8189AA0
.Lfe8:
	.size	 sub_8189D40,.Lfe8-sub_8189D40
	.align	2, 0
	.type	 sub_818A064,function
	.thumb_func
sub_818A064:
	push	{lr}
	ldr	r2, .L72
	ldr	r1, .L72+0x4
	ldr	r0, .L72+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L71	@cond_branch
	mov	r2, #0x24
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L71	@cond_branch
	bl	RecordedPlayerBufferExecCompleted
.L71:
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.Lfe9:
	.size	 sub_818A064,.Lfe9-sub_818A064
	.align	2, 0
	.type	 CompleteOnHealthbarDone,function
	.thumb_func
CompleteOnHealthbarDone:
	push	{r4, r5, r6, lr}
	ldr	r5, .L77
	ldrb	r0, [r5]
	ldr	r6, .L77+0x4
	add	r1, r0, r6
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L75	@cond_branch
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
	b	.L76
.L78:
	.align	2, 0
.L77:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.L75:
	ldr	r2, .L79
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L79+0x4
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	bl	RecordedPlayerBufferExecCompleted
.L76:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe10:
	.size	 CompleteOnHealthbarDone,.Lfe10-CompleteOnHealthbarDone
	.align	2, 0
	.type	 sub_818A114,function
	.thumb_func
sub_818A114:
	push	{r4, r5, r6, lr}
	ldr	r6, .L83
	ldr	r5, .L83+0x4
	ldr	r4, .L83+0x8
	ldrb	r2, [r4]
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r3, #0x22
	ldrsh	r1, [r0, r3]
	mov	r3, #0x26
	ldrsh	r0, [r0, r3]
	add	r1, r1, r0
	cmp	r1, #0xa0
	ble	.L82	@cond_branch
	ldr	r1, .L83+0xc
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L83+0x10
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	nullsub_24
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	ldr	r1, .L83+0x14
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	RecordedPlayerBufferExecCompleted
.L82:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L84:
	.align	2, 0
.L83:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
.Lfe11:
	.size	 sub_818A114,.Lfe11-sub_818A114
	.align	2, 0
	.type	 sub_818A1B0,function
	.thumb_func
sub_818A1B0:
	push	{r4, r5, r6, lr}
	ldr	r0, .L87
	ldr	r0, [r0]
	ldr	r6, .L87+0x4
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L86	@cond_branch
	ldr	r5, .L87+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L87+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L87+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	RecordedPlayerBufferExecCompleted
.L86:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe12:
	.size	 sub_818A1B0,.Lfe12-sub_818A1B0
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter,function
	.thumb_func
CompleteOnInactiveTextPrinter:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L90	@cond_branch
	bl	RecordedPlayerBufferExecCompleted
.L90:
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 CompleteOnInactiveTextPrinter,.Lfe13-CompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 DoHitAnimBlinkSpriteEffect,function
	.thumb_func
DoHitAnimBlinkSpriteEffect:
	push	{r4, lr}
	ldr	r1, .L95
	ldr	r0, .L95+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L95+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L92	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L95+0xc
	strb	r3, [r0]
	bl	RecordedPlayerBufferExecCompleted
	b	.L93
.L96:
	.align	2, 0
.L95:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	gDoingBattleAnim
.L92:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L94	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L94:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L93:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 DoHitAnimBlinkSpriteEffect,.Lfe14-DoHitAnimBlinkSpriteEffect
	.align	2, 0
	.type	 sub_818A2B4,function
	.thumb_func
sub_818A2B4:
	push	{r4, lr}
	ldr	r2, .L100
	ldr	r0, .L100+0x4
	ldr	r4, .L100+0x8
	ldrb	r3, [r4]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L100+0xc
	cmp	r1, r0
	bne	.L98	@cond_branch
	add	r0, r3, #0
	bl	CopyBattleSpriteInvisibility
	ldr	r0, .L100+0x10
	ldr	r0, [r0]
	ldrb	r2, [r4]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L99	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
.L99:
	ldr	r0, .L100+0x14
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L100+0x18
	str	r0, [r1]
.L98:
	pop	{r4}
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_818A328
.Lfe15:
	.size	 sub_818A2B4,.Lfe15-sub_818A2B4
	.align	2, 0
	.type	 sub_818A328,function
	.thumb_func
sub_818A328:
	push	{lr}
	ldr	r0, .L104
	ldr	r1, [r0]
	ldr	r0, .L104+0x4
	ldrb	r3, [r0]
	ldr	r1, [r1, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L103	@cond_branch
	ldr	r2, .L104+0x8
	ldr	r0, .L104+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L104+0x10
	cmp	r1, r0
	bne	.L103	@cond_branch
	bl	RecordedPlayerBufferExecCompleted
.L103:
	pop	{r0}
	bx	r0
.L105:
	.align	2, 0
.L104:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCallbackDummy
.Lfe16:
	.size	 sub_818A328,.Lfe16-sub_818A328
	.align	2, 0
	.type	 sub_818A37C,function
	.thumb_func
sub_818A37C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r3, .L108
	ldr	r0, [r3]
	ldr	r7, .L108+0x4
	ldrb	r1, [r7]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L107	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r3]
	ldrb	r2, [r7]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L108+0x8
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r0, .L108+0xc
	mov	r1, #0xa
	bl	CreateTask
	ldr	r0, .L108+0x10
	mov	r8, r0
	ldrb	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L108+0x14
	add	r0, r0, r5
	bl	HandleLowHpMusicChange
	ldr	r1, .L108+0x18
	ldrb	r0, [r7]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L108+0x1c
	add	r0, r0, r1
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r4, .L108+0x20
	ldrb	r1, [r7]
	add	r0, r1, r4
	ldrb	r0, [r0]
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	ldrh	r1, [r1]
	mul	r1, r1, r6
	add	r1, r1, r5
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r7]
	bl	sub_8076918
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldr	r1, .L108+0x24
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L108+0x28
	str	r1, [r0]
.L107:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L109:
	.align	2, 0
.L108:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	0x27f9
	.word	c3_0802FDF4
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	sub_818A2B4
.Lfe17:
	.size	 sub_818A37C,.Lfe17-sub_818A37C
	.align	2, 0
	.type	 sub_818A470,function
	.thumb_func
sub_818A470:
	push	{r4, r5, r6, lr}
	ldr	r6, .L113
	ldr	r0, [r6]
	ldr	r4, .L113+0x4
	ldrb	r2, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L111	@cond_branch
	ldr	r0, .L113+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L113+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L111:
	ldr	r5, .L113+0x10
	ldr	r0, .L113+0x14
	ldrb	r2, [r4]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r0, r5, #0
	add	r0, r0, #0x1c
	add	r0, r3, r0
	ldr	r1, [r0]
	ldr	r0, .L113+0x18
	cmp	r1, r0
	bne	.L112	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L112	@cond_branch
	add	r0, r3, r5
	bl	DestroySprite
	ldr	r1, .L113+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L113+0x20
	str	r1, [r0]
.L112:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	sub_818A37C
.Lfe18:
	.size	 sub_818A470,.Lfe18-sub_818A470
	.align	2, 0
	.type	 RecordedPlayerBufferExecCompleted,function
	.thumb_func
RecordedPlayerBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L118
	ldr	r4, .L118+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L118+0x8
	str	r1, [r0]
	ldr	r0, .L118+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L116	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r0, .L118+0x10
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x20
	add	r1, r1, r0
	mov	r0, #0x39
	strb	r0, [r1]
	b	.L117
.L119:
	.align	2, 0
.L118:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	RecordedPlayerBufferRunCommand
	.word	gBattleTypeFlags
	.word	gBattleResources
.L116:
	ldr	r2, .L120
	ldr	r1, .L120+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L117:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L121:
	.align	2, 0
.L120:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe19:
	.size	 RecordedPlayerBufferExecCompleted,.Lfe19-RecordedPlayerBufferExecCompleted
	.align	2, 0
	.type	 CompleteOnFinishedStatusAnimation,function
	.thumb_func
CompleteOnFinishedStatusAnimation:
	push	{lr}
	ldr	r0, .L124
	ldr	r2, [r0]
	ldr	r0, .L124+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L123	@cond_branch
	bl	RecordedPlayerBufferExecCompleted
.L123:
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe20:
	.size	 CompleteOnFinishedStatusAnimation,.Lfe20-CompleteOnFinishedStatusAnimation
	.align	2, 0
	.type	 CompleteOnFinishedBattleAnimation,function
	.thumb_func
CompleteOnFinishedBattleAnimation:
	push	{lr}
	ldr	r0, .L128
	ldr	r2, [r0]
	ldr	r0, .L128+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L127	@cond_branch
	bl	RecordedPlayerBufferExecCompleted
.L127:
	pop	{r0}
	bx	r0
.L129:
	.align	2, 0
.L128:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe21:
	.size	 CompleteOnFinishedBattleAnimation,.Lfe21-CompleteOnFinishedBattleAnimation
	.align	2, 0
	.type	 RecordedPlayerHandleGetMonData,function
	.thumb_func
RecordedPlayerHandleGetMonData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x100
	mov	r6, #0x0
	ldr	r0, .L139
	ldr	r1, [r0]
	ldr	r0, .L139+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L131	@cond_branch
	ldr	r0, .L139+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	CopyRecordedPlayerMonData
	add	r6, r0, #0
	b	.L132
.L140:
	.align	2, 0
.L139:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L131:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L136:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L137	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	CopyRecordedPlayerMonData
	add	r6, r6, r0
.L137:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L136	@cond_branch
.L132:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	BtlController_EmitDataTransfer
	bl	RecordedPlayerBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 RecordedPlayerHandleGetMonData,.Lfe22-RecordedPlayerHandleGetMonData
	.align	2, 0
	.type	 CopyRecordedPlayerMonData,function
	.thumb_func
CopyRecordedPlayerMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x94
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r3, .L230
	ldr	r1, [r3]
	ldr	r2, .L230+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r4, r2, #0
	cmp	r0, #0x3b
	bls	.LCB2032
	bl	.L142	@far jump
.LCB2032:
	lsl	r0, r0, #0x2
	ldr	r1, .L230+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L231:
	.align	2, 0
.L230:
	.word	gBattleResources
	.word	gActiveBattler
	.word	.L224
	.align	2, 0
	.align	2, 0
.L224:
	.word	.L143
	.word	.L154
	.word	.L155
	.word	.L156
	.word	.L170
	.word	.L170
	.word	.L170
	.word	.L170
	.word	.L171
	.word	.L180
	.word	.L180
	.word	.L180
	.word	.L180
	.word	.L142
	.word	.L142
	.word	.L142
	.word	.L142
	.word	.L181
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L186
	.word	.L187
	.word	.L188
	.word	.L189
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L193
	.word	.L194
	.word	.L195
	.word	.L196
	.word	.L197
	.word	.L198
	.word	.L199
	.word	.L200
	.word	.L201
	.word	.L202
	.word	.L203
	.word	.L204
	.word	.L205
	.word	.L206
	.word	.L207
	.word	.L208
	.word	.L209
	.word	.L210
	.word	.L211
	.word	.L212
	.word	.L213
	.word	.L214
	.word	.L215
	.word	.L216
	.word	.L217
	.word	.L218
	.word	.L219
	.word	.L220
	.word	.L221
	.word	.L222
	.word	.L223
.L143:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L232
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r3, sp
	ldr	r2, .L232+0x4
	add	r1, r2, #0
	and	r0, r0, r1
	ldrh	r2, [r3]
	ldr	r1, .L232+0x8
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3]
	add	r0, r4, #0
	mov	r1, #0x59
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x3
	ldrb	r2, [r3, #0x1]
	mov	r1, #0x7
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x30]
	mov	r6, #0x0
	mov	r0, #0x25
	add	r0, r0, sp
	mov	r9, r0
	mov	r1, #0x3d
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2d
	str	r2, [sp, #0x84]
	mov	r0, sp
	add	r0, r0, #0x2c
	str	r0, [sp, #0x80]
	mov	r1, sp
	add	r1, r1, #0x6c
	str	r1, [sp, #0x90]
	add	r2, r2, #0x5
	str	r2, [sp, #0x88]
	add	r0, r0, #0x12
	str	r0, [sp, #0x8c]
	mov	r8, r4
	add	r4, sp, #0xc
.L147:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L147	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L232
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x84]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L232+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L232+0x10
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L232+0x14
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x50]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x80]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2a]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x58]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x90]
	bl	GetMonData
	ldr	r0, [sp, #0x88]
	ldr	r1, [sp, #0x90]
	bl	StringCopy10
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L152:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x5b
	bls	.L152	@cond_branch
	b	.L142
.L233:
	.align	2, 0
.L232:
	.word	gPlayerParty
	.word	0x7ff
	.word	-0x800
	.word	-0x3e1
	.word	-0xf8001
	.word	-0x1f1
.L154:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L234
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L226
.L235:
	.align	2, 0
.L234:
	.word	gPlayerParty
.L155:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L236
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L226
.L237:
	.align	2, 0
.L236:
	.word	gPlayerParty
.L156:
	mov	r6, #0x0
	add	r2, sp, #0x5c
	mov	r9, r2
	add	r0, sp, #0x64
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L238
	add	r4, r1, r0
	mov	r8, r9
.L160:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L160	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L238
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L165:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L165	@cond_branch
	b	.L142
.L239:
	.align	2, 0
.L238:
	.word	gPlayerParty
.L170:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L240
	add	r0, r0, r1
	ldr	r2, [r3]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x21
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0x9
	b	.L226
.L241:
	.align	2, 0
.L240:
	.word	gPlayerParty
.L171:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L242
	mov	r8, r2
.L175:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L175	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L242
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L142
.L243:
	.align	2, 0
.L242:
	.word	gPlayerParty
.L180:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L244
	add	r0, r0, r1
	ldr	r2, [r3]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x21
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0x8
	b	.L227
.L245:
	.align	2, 0
.L244:
	.word	gPlayerParty
.L181:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L246
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L228
.L247:
	.align	2, 0
.L246:
	.word	gPlayerParty
.L182:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L248
	add	r0, r0, r1
	mov	r1, #0x19
.L228:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L142
.L249:
	.align	2, 0
.L248:
	.word	gPlayerParty
.L183:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L250
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L227
.L251:
	.align	2, 0
.L250:
	.word	gPlayerParty
.L184:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L252
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L227
.L253:
	.align	2, 0
.L252:
	.word	gPlayerParty
.L185:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L254
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L227
.L255:
	.align	2, 0
.L254:
	.word	gPlayerParty
.L186:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L256
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L227
.L257:
	.align	2, 0
.L256:
	.word	gPlayerParty
.L187:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L258
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L227
.L259:
	.align	2, 0
.L258:
	.word	gPlayerParty
.L188:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L260
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L227
.L261:
	.align	2, 0
.L260:
	.word	gPlayerParty
.L189:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L262
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L227
.L263:
	.align	2, 0
.L262:
	.word	gPlayerParty
.L190:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L264
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L227
.L265:
	.align	2, 0
.L264:
	.word	gPlayerParty
.L191:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L266
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L227
.L267:
	.align	2, 0
.L266:
	.word	gPlayerParty
.L192:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L268
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L227
.L269:
	.align	2, 0
.L268:
	.word	gPlayerParty
.L193:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L270
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L227
.L271:
	.align	2, 0
.L270:
	.word	gPlayerParty
.L194:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L272
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L227
.L273:
	.align	2, 0
.L272:
	.word	gPlayerParty
.L195:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L274
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L142
.L275:
	.align	2, 0
.L274:
	.word	gPlayerParty
.L196:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L276
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L227
.L277:
	.align	2, 0
.L276:
	.word	gPlayerParty
.L197:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L278
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L227
.L279:
	.align	2, 0
.L278:
	.word	gPlayerParty
.L198:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L280
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L227
.L281:
	.align	2, 0
.L280:
	.word	gPlayerParty
.L199:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L282
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L227
.L283:
	.align	2, 0
.L282:
	.word	gPlayerParty
.L200:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L284
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L227
.L285:
	.align	2, 0
.L284:
	.word	gPlayerParty
.L201:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L286
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L227
.L287:
	.align	2, 0
.L286:
	.word	gPlayerParty
.L202:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L288
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L229
.L289:
	.align	2, 0
.L288:
	.word	gPlayerParty
.L203:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L290
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L226
.L291:
	.align	2, 0
.L290:
	.word	gPlayerParty
.L204:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L292
	add	r0, r0, r1
	mov	r1, #0x37
.L229:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L142
.L293:
	.align	2, 0
.L292:
	.word	gPlayerParty
.L205:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L294
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L227
.L295:
	.align	2, 0
.L294:
	.word	gPlayerParty
.L206:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L296
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L226
.L297:
	.align	2, 0
.L296:
	.word	gPlayerParty
.L207:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L298
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L226
.L299:
	.align	2, 0
.L298:
	.word	gPlayerParty
.L208:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L300
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L226
.L301:
	.align	2, 0
.L300:
	.word	gPlayerParty
.L209:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L302
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L226
.L303:
	.align	2, 0
.L302:
	.word	gPlayerParty
.L210:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L304
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L226
.L305:
	.align	2, 0
.L304:
	.word	gPlayerParty
.L211:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L306
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L226
.L307:
	.align	2, 0
.L306:
	.word	gPlayerParty
.L212:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L308
	add	r0, r0, r1
	mov	r1, #0x3f
.L226:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L142
.L309:
	.align	2, 0
.L308:
	.word	gPlayerParty
.L213:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L310
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L227
.L311:
	.align	2, 0
.L310:
	.word	gPlayerParty
.L214:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L312
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L227
.L313:
	.align	2, 0
.L312:
	.word	gPlayerParty
.L215:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L314
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L227
.L315:
	.align	2, 0
.L314:
	.word	gPlayerParty
.L216:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L316
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L227
.L317:
	.align	2, 0
.L316:
	.word	gPlayerParty
.L217:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L318
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L227
.L319:
	.align	2, 0
.L318:
	.word	gPlayerParty
.L218:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L320
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L227
.L321:
	.align	2, 0
.L320:
	.word	gPlayerParty
.L219:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L322
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L227
.L323:
	.align	2, 0
.L322:
	.word	gPlayerParty
.L220:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L324
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L227
.L325:
	.align	2, 0
.L324:
	.word	gPlayerParty
.L221:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L326
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L227
.L327:
	.align	2, 0
.L326:
	.word	gPlayerParty
.L222:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L328
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L227
.L329:
	.align	2, 0
.L328:
	.word	gPlayerParty
.L223:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L330
	add	r0, r0, r1
	mov	r1, #0x36
.L227:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L142:
	add	r0, r6, #0
	add	sp, sp, #0x94
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L331:
	.align	2, 0
.L330:
	.word	gPlayerParty
.Lfe23:
	.size	 CopyRecordedPlayerMonData,.Lfe23-CopyRecordedPlayerMonData
	.align	2, 0
	.type	 RecordedPlayerHandleGetRawMonData,function
	.thumb_func
RecordedPlayerHandleGetRawMonData:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 RecordedPlayerHandleGetRawMonData,.Lfe24-RecordedPlayerHandleGetRawMonData
	.align	2, 0
	.type	 RecordedPlayerHandleSetMonData,function
	.thumb_func
RecordedPlayerHandleSetMonData:
	push	{r4, r5, lr}
	ldr	r0, .L342
	ldr	r1, [r0]
	ldr	r0, .L342+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L334	@cond_branch
	ldr	r0, .L342+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	SetRecordedPlayerMonData
	b	.L335
.L343:
	.align	2, 0
.L342:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L334:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L339:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L340	@cond_branch
	add	r0, r5, #0
	bl	SetRecordedPlayerMonData
.L340:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L339	@cond_branch
.L335:
	bl	RecordedPlayerBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 RecordedPlayerHandleSetMonData,.Lfe25-RecordedPlayerHandleSetMonData
	.align	2, 0
	.type	 SetRecordedPlayerMonData,function
	.thumb_func
SetRecordedPlayerMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L416
	ldr	r0, .L416+0x4
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x20
	ldr	r1, [r3]
	add	r0, r1, r0
	add	r4, r0, #0x3
	mov	r8, r4
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r7, r3, #0
	cmp	r0, #0x3b
	bls	.LCB3463
	bl	.L345	@far jump
.LCB3463:
	lsl	r0, r0, #0x2
	ldr	r1, .L416+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L417:
	.align	2, 0
.L416:
	.word	gBattleResources
	.word	gActiveBattler
	.word	.L412
	.align	2, 0
	.align	2, 0
.L412:
	.word	.L346
	.word	.L352
	.word	.L353
	.word	.L354
	.word	.L363
	.word	.L363
	.word	.L363
	.word	.L363
	.word	.L364
	.word	.L368
	.word	.L368
	.word	.L368
	.word	.L368
	.word	.L345
	.word	.L345
	.word	.L345
	.word	.L345
	.word	.L369
	.word	.L370
	.word	.L371
	.word	.L372
	.word	.L373
	.word	.L374
	.word	.L375
	.word	.L376
	.word	.L377
	.word	.L378
	.word	.L379
	.word	.L380
	.word	.L381
	.word	.L382
	.word	.L383
	.word	.L384
	.word	.L385
	.word	.L386
	.word	.L387
	.word	.L388
	.word	.L389
	.word	.L390
	.word	.L391
	.word	.L392
	.word	.L393
	.word	.L394
	.word	.L395
	.word	.L396
	.word	.L397
	.word	.L398
	.word	.L399
	.word	.L400
	.word	.L401
	.word	.L402
	.word	.L403
	.word	.L404
	.word	.L405
	.word	.L406
	.word	.L407
	.word	.L408
	.word	.L409
	.word	.L410
	.word	.L411
.L346:
	mov	r1, r8
	ldrh	r0, [r1]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	mov	r1, sp
	strh	r0, [r1]
	mov	r1, r8
	ldrb	r0, [r1, #0x1]
	lsr	r0, r0, #0x3
	mov	r5, sp
	add	r5, r5, #0x2
	strb	r0, [r5]
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L418
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x59
	add	r2, r5, #0
	bl	SetMonData
	mov	r2, r8
	add	r2, r2, #0x30
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r7, #0x0
	mov	r0, r8
	add	r0, r0, #0x3d
	str	r0, [sp, #0x28]
	mov	r1, r8
	add	r1, r1, #0x2d
	str	r1, [sp, #0x20]
	add	r0, r0, #0xb
	str	r0, [sp, #0x2c]
	mov	r1, #0x3
	add	r1, r1, sp
	mov	sl, r1
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	mov	r1, r8
	add	r1, r1, #0x50
	str	r1, [sp, #0x34]
	sub	r0, r0, #0x20
	str	r0, [sp, #0x1c]
	sub	r1, r1, #0x26
	str	r1, [sp, #0x18]
	add	r0, r0, #0x2
	str	r0, [sp, #0x24]
	sub	r1, r1, #0x28
	str	r1, [sp, #0x4]
	sub	r0, r0, #0x2a
	str	r0, [sp, #0x8]
	add	r1, r1, #0x4
	str	r1, [sp, #0xc]
	add	r0, r0, #0x4
	str	r0, [sp, #0x10]
	add	r1, r1, #0x4
	str	r1, [sp, #0x14]
	mov	r9, r4
	mov	r4, r8
	add	r4, r4, #0x25
	mov	r5, r8
	add	r5, r5, #0xc
.L350:
	add	r1, r7, #0
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r5, #0
	bl	SetMonData
	add	r1, r7, #0
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	add	r4, r4, #0x1
	add	r5, r5, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L350	@cond_branch
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L418
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrh	r0, [r1, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldr	r0, [r1, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrh	r0, [r1, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x34]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	bl	.L345	@ far jump
.L419:
	.align	2, 0
.L418:
	.word	gPlayerParty
.L352:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L420
	add	r0, r0, r1
	ldr	r1, .L420+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0xb
	bl	SetMonData
	bl	.L345	@ far jump
.L421:
	.align	2, 0
.L420:
	.word	gPlayerParty
	.word	gActiveBattler
.L353:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L422
	add	r0, r0, r1
	ldr	r1, .L422+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0xc
	bl	SetMonData
	bl	.L345	@ far jump
.L423:
	.align	2, 0
.L422:
	.word	gPlayerParty
	.word	gActiveBattler
.L354:
	mov	r7, #0x0
	mov	r0, #0xc
	add	r0, r0, r4
	mov	r9, r0
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, .L424
	add	r1, r1, r0
	mov	r8, r1
	add	r5, r4, #0
	add	r5, r5, #0x8
.L358:
	add	r1, r7, #0
	add	r1, r1, #0xd
	mov	r0, r8
	add	r2, r4, #0
	bl	SetMonData
	add	r1, r7, #0
	add	r1, r1, #0x11
	mov	r0, r8
	add	r2, r5, #0
	bl	SetMonData
	add	r5, r5, #0x1
	add	r4, r4, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L358	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L424
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	bl	.L345	@ far jump
.L425:
	.align	2, 0
.L424:
	.word	gPlayerParty
.L363:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L426
	add	r0, r0, r1
	ldr	r2, [r7]
	ldr	r1, .L426+0x4
	ldrb	r3, [r1]
	lsl	r3, r3, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L414
.L427:
	.align	2, 0
.L426:
	.word	gPlayerParty
	.word	gActiveBattler
.L364:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L428
	add	r4, r4, r0
	ldr	r5, .L428+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x3
	add	r0, r4, #0
	mov	r1, #0x11
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x4
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x5
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x6
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x7
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L345
.L429:
	.align	2, 0
.L428:
	.word	gPlayerParty
	.word	gActiveBattler
.L368:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L430
	add	r0, r0, r1
	ldr	r2, [r7]
	ldr	r1, .L430+0x4
	ldrb	r3, [r1]
	lsl	r3, r3, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L414:
	add	r3, r3, #0x20
	add	r2, r2, r3
	add	r2, r2, #0x3
	bl	SetMonData
	b	.L345
.L431:
	.align	2, 0
.L430:
	.word	gPlayerParty
	.word	gActiveBattler
.L369:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L432
	add	r0, r0, r1
	ldr	r1, .L432+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1
	bl	SetMonData
	b	.L345
.L433:
	.align	2, 0
.L432:
	.word	gPlayerParty
	.word	gActiveBattler
.L370:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L434
	add	r0, r0, r1
	ldr	r1, .L434+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x19
	bl	SetMonData
	b	.L345
.L435:
	.align	2, 0
.L434:
	.word	gPlayerParty
	.word	gActiveBattler
.L371:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L436
	add	r0, r0, r1
	ldr	r1, .L436+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1a
	bl	SetMonData
	b	.L345
.L437:
	.align	2, 0
.L436:
	.word	gPlayerParty
	.word	gActiveBattler
.L372:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L438
	add	r0, r0, r1
	ldr	r1, .L438+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1b
	bl	SetMonData
	b	.L345
.L439:
	.align	2, 0
.L438:
	.word	gPlayerParty
	.word	gActiveBattler
.L373:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L440
	add	r0, r0, r1
	ldr	r1, .L440+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1c
	bl	SetMonData
	b	.L345
.L441:
	.align	2, 0
.L440:
	.word	gPlayerParty
	.word	gActiveBattler
.L374:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L442
	add	r0, r0, r1
	ldr	r1, .L442+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1d
	bl	SetMonData
	b	.L345
.L443:
	.align	2, 0
.L442:
	.word	gPlayerParty
	.word	gActiveBattler
.L375:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L444
	add	r0, r0, r1
	ldr	r1, .L444+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1e
	bl	SetMonData
	b	.L345
.L445:
	.align	2, 0
.L444:
	.word	gPlayerParty
	.word	gActiveBattler
.L376:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L446
	add	r0, r0, r1
	ldr	r1, .L446+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1f
	bl	SetMonData
	b	.L345
.L447:
	.align	2, 0
.L446:
	.word	gPlayerParty
	.word	gActiveBattler
.L377:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L448
	add	r0, r0, r1
	ldr	r1, .L448+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x20
	bl	SetMonData
	b	.L345
.L449:
	.align	2, 0
.L448:
	.word	gPlayerParty
	.word	gActiveBattler
.L378:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L450
	add	r0, r0, r1
	ldr	r1, .L450+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x22
	bl	SetMonData
	b	.L345
.L451:
	.align	2, 0
.L450:
	.word	gPlayerParty
	.word	gActiveBattler
.L379:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L452
	add	r0, r0, r1
	ldr	r1, .L452+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x23
	bl	SetMonData
	b	.L345
.L453:
	.align	2, 0
.L452:
	.word	gPlayerParty
	.word	gActiveBattler
.L380:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L454
	add	r0, r0, r1
	ldr	r1, .L454+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x24
	bl	SetMonData
	b	.L345
.L455:
	.align	2, 0
.L454:
	.word	gPlayerParty
	.word	gActiveBattler
.L381:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L456
	add	r0, r0, r1
	ldr	r1, .L456+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x25
	bl	SetMonData
	b	.L345
.L457:
	.align	2, 0
.L456:
	.word	gPlayerParty
	.word	gActiveBattler
.L382:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L458
	add	r0, r0, r1
	ldr	r1, .L458+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x26
	bl	SetMonData
	b	.L345
.L459:
	.align	2, 0
.L458:
	.word	gPlayerParty
	.word	gActiveBattler
.L383:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L460
	add	r4, r4, r0
	ldr	r5, .L460+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x3
	add	r0, r4, #0
	mov	r1, #0x27
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x4
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x5
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x6
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x7
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x8
	add	r0, r4, #0
	b	.L415
.L461:
	.align	2, 0
.L460:
	.word	gPlayerParty
	.word	gActiveBattler
.L384:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L462
	add	r0, r0, r1
	ldr	r1, .L462+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x27
	bl	SetMonData
	b	.L345
.L463:
	.align	2, 0
.L462:
	.word	gPlayerParty
	.word	gActiveBattler
.L385:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L464
	add	r0, r0, r1
	ldr	r1, .L464+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x28
	bl	SetMonData
	b	.L345
.L465:
	.align	2, 0
.L464:
	.word	gPlayerParty
	.word	gActiveBattler
.L386:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L466
	add	r0, r0, r1
	ldr	r1, .L466+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x29
	bl	SetMonData
	b	.L345
.L467:
	.align	2, 0
.L466:
	.word	gPlayerParty
	.word	gActiveBattler
.L387:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L468
	add	r0, r0, r1
	ldr	r1, .L468+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2a
	bl	SetMonData
	b	.L345
.L469:
	.align	2, 0
.L468:
	.word	gPlayerParty
	.word	gActiveBattler
.L388:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L470
	add	r0, r0, r1
	ldr	r1, .L470+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2b
	bl	SetMonData
	b	.L345
.L471:
	.align	2, 0
.L470:
	.word	gPlayerParty
	.word	gActiveBattler
.L389:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L472
	add	r0, r0, r1
	ldr	r1, .L472+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
.L415:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L345
.L473:
	.align	2, 0
.L472:
	.word	gPlayerParty
	.word	gActiveBattler
.L390:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L474
	add	r0, r0, r1
	ldr	r1, .L474+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x0
	bl	SetMonData
	b	.L345
.L475:
	.align	2, 0
.L474:
	.word	gPlayerParty
	.word	gActiveBattler
.L391:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L476
	add	r0, r0, r1
	ldr	r1, .L476+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x9
	bl	SetMonData
	b	.L345
.L477:
	.align	2, 0
.L476:
	.word	gPlayerParty
	.word	gActiveBattler
.L392:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L478
	add	r0, r0, r1
	ldr	r1, .L478+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x37
	bl	SetMonData
	b	.L345
.L479:
	.align	2, 0
.L478:
	.word	gPlayerParty
	.word	gActiveBattler
.L393:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L480
	add	r0, r0, r1
	ldr	r1, .L480+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x38
	bl	SetMonData
	b	.L345
.L481:
	.align	2, 0
.L480:
	.word	gPlayerParty
	.word	gActiveBattler
.L394:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L482
	add	r0, r0, r1
	ldr	r1, .L482+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x39
	bl	SetMonData
	b	.L345
.L483:
	.align	2, 0
.L482:
	.word	gPlayerParty
	.word	gActiveBattler
.L395:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L484
	add	r0, r0, r1
	ldr	r1, .L484+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3a
	bl	SetMonData
	b	.L345
.L485:
	.align	2, 0
.L484:
	.word	gPlayerParty
	.word	gActiveBattler
.L396:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L486
	add	r0, r0, r1
	ldr	r1, .L486+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3b
	bl	SetMonData
	b	.L345
.L487:
	.align	2, 0
.L486:
	.word	gPlayerParty
	.word	gActiveBattler
.L397:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L488
	add	r0, r0, r1
	ldr	r1, .L488+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3c
	bl	SetMonData
	b	.L345
.L489:
	.align	2, 0
.L488:
	.word	gPlayerParty
	.word	gActiveBattler
.L398:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L490
	add	r0, r0, r1
	ldr	r1, .L490+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3d
	bl	SetMonData
	b	.L345
.L491:
	.align	2, 0
.L490:
	.word	gPlayerParty
	.word	gActiveBattler
.L399:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L492
	add	r0, r0, r1
	ldr	r1, .L492+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3e
	bl	SetMonData
	b	.L345
.L493:
	.align	2, 0
.L492:
	.word	gPlayerParty
	.word	gActiveBattler
.L400:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L494
	add	r0, r0, r1
	ldr	r1, .L494+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3f
	bl	SetMonData
	b	.L345
.L495:
	.align	2, 0
.L494:
	.word	gPlayerParty
	.word	gActiveBattler
.L401:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L496
	add	r0, r0, r1
	ldr	r1, .L496+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x16
	bl	SetMonData
	b	.L345
.L497:
	.align	2, 0
.L496:
	.word	gPlayerParty
	.word	gActiveBattler
.L402:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L498
	add	r0, r0, r1
	ldr	r1, .L498+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x17
	bl	SetMonData
	b	.L345
.L499:
	.align	2, 0
.L498:
	.word	gPlayerParty
	.word	gActiveBattler
.L403:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L500
	add	r0, r0, r1
	ldr	r1, .L500+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x18
	bl	SetMonData
	b	.L345
.L501:
	.align	2, 0
.L500:
	.word	gPlayerParty
	.word	gActiveBattler
.L404:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L502
	add	r0, r0, r1
	ldr	r1, .L502+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x21
	bl	SetMonData
	b	.L345
.L503:
	.align	2, 0
.L502:
	.word	gPlayerParty
	.word	gActiveBattler
.L405:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L504
	add	r0, r0, r1
	ldr	r1, .L504+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2f
	bl	SetMonData
	b	.L345
.L505:
	.align	2, 0
.L504:
	.word	gPlayerParty
	.word	gActiveBattler
.L406:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L506
	add	r0, r0, r1
	ldr	r1, .L506+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x30
	bl	SetMonData
	b	.L345
.L507:
	.align	2, 0
.L506:
	.word	gPlayerParty
	.word	gActiveBattler
.L407:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L508
	add	r0, r0, r1
	ldr	r1, .L508+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x32
	bl	SetMonData
	b	.L345
.L509:
	.align	2, 0
.L508:
	.word	gPlayerParty
	.word	gActiveBattler
.L408:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L510
	add	r0, r0, r1
	ldr	r1, .L510+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x33
	bl	SetMonData
	b	.L345
.L511:
	.align	2, 0
.L510:
	.word	gPlayerParty
	.word	gActiveBattler
.L409:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L512
	add	r0, r0, r1
	ldr	r1, .L512+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x34
	bl	SetMonData
	b	.L345
.L513:
	.align	2, 0
.L512:
	.word	gPlayerParty
	.word	gActiveBattler
.L410:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L514
	add	r0, r0, r1
	ldr	r1, .L514+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x35
	bl	SetMonData
	b	.L345
.L515:
	.align	2, 0
.L514:
	.word	gPlayerParty
	.word	gActiveBattler
.L411:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L516
	add	r0, r0, r1
	ldr	r1, .L516+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x36
	bl	SetMonData
.L345:
	ldr	r2, .L516+0x8
	ldr	r0, .L516+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L516
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L517:
	.align	2, 0
.L516:
	.word	gPlayerParty
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.Lfe26:
	.size	 SetRecordedPlayerMonData,.Lfe26-SetRecordedPlayerMonData
	.align	2, 0
	.type	 RecordedPlayerHandleSetRawMonData,function
	.thumb_func
RecordedPlayerHandleSetRawMonData:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L524
	ldr	r7, .L524+0x4
	ldrb	r3, [r7]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r5, .L524+0x8
	ldr	r2, [r5]
	lsl	r3, r3, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x21
	add	r0, r0, r3
	ldrb	r0, [r0]
	ldr	r1, .L524+0xc
	add	r0, r0, r1
	add	r6, r4, r0
	mov	r4, #0x0
	add	r2, r2, #0x22
	add	r2, r2, r3
	ldrb	r2, [r2]
	cmp	r4, r2
	bcs	.L520	@cond_branch
	add	r3, r7, #0
.L522:
	add	r2, r6, r4
	ldr	r1, [r5]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x3
	add	r0, r4, r0
	add	r1, r1, #0x20
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, [r5]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r1, [r1]
	cmp	r4, r1
	bcc	.L522	@cond_branch
.L520:
	bl	RecordedPlayerBufferExecCompleted
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L525:
	.align	2, 0
.L524:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleResources
	.word	gPlayerParty
.Lfe27:
	.size	 RecordedPlayerHandleSetRawMonData,.Lfe27-RecordedPlayerHandleSetRawMonData
	.align	2, 0
	.type	 RecordedPlayerHandleLoadMonSprite,function
	.thumb_func
RecordedPlayerHandleLoadMonSprite:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r0, .L527
	mov	r9, r0
	ldr	r1, .L527+0x4
	mov	r8, r1
	ldrb	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r4, .L527+0x8
	add	r0, r0, r4
	bl	BattleLoadPlayerMonSpriteGfx
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r4
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r4
	mov	r1, #0x59
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r2, r8
	ldrb	r0, [r2]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	add	r2, r4, #0
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r6, .L527+0xc
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r2, r8
	ldrb	r0, [r2]
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L527+0x10
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r5, .L527+0x14
	ldrb	r0, [r2]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L527+0x18
	strh	r1, [r0, #0x24]
	ldrb	r2, [r2]
	add	r0, r2, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x2e]
	mov	r0, r8
	ldrb	r3, [r0]
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	mov	r1, r8
	ldrb	r2, [r1]
	add	r4, r2, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L527+0x1c
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	StartSpriteAnim
	ldr	r1, .L527+0x20
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L527+0x24
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L528:
	.align	2, 0
.L527:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gPlayerParty
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gBattleMonForms
	.word	gBattlerControllerFuncs
	.word	sub_818A064
.Lfe28:
	.size	 RecordedPlayerHandleLoadMonSprite,.Lfe28-RecordedPlayerHandleLoadMonSprite
	.align	2, 0
	.type	 RecordedPlayerHandleSwitchInAnim,function
	.thumb_func
RecordedPlayerHandleSwitchInAnim:
	push	{r4, r5, lr}
	ldr	r4, .L530
	ldrb	r0, [r4]
	ldr	r5, .L530+0x4
	ldr	r1, [r5]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	ClearTemporarySpeciesSpriteData
	ldr	r3, .L530+0x8
	ldrb	r1, [r4]
	lsl	r2, r1, #0x1
	add	r2, r2, r3
	ldr	r0, [r5]
	lsl	r1, r1, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r2]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L530+0xc
	add	r0, r0, r2
	bl	BattleLoadPlayerMonSpriteGfx
	ldrb	r0, [r4]
	ldr	r1, [r5]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	sub_818BA6C
	ldr	r1, .L530+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L530+0x14
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L531:
	.align	2, 0
.L530:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	sub_818A470
.Lfe29:
	.size	 RecordedPlayerHandleSwitchInAnim,.Lfe29-RecordedPlayerHandleSwitchInAnim
	.align	2, 0
	.type	 sub_818BA6C,function
	.thumb_func
sub_818BA6C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	ClearTemporarySpeciesSpriteData
	ldr	r0, .L533
	lsl	r4, r6, #0x1
	add	r4, r4, r0
	ldr	r0, .L533+0x4
	ldr	r0, [r0]
	lsl	r1, r6, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r5, .L533+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	mov	r9, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldrh	r0, [r4]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r5
	mov	r1, #0x59
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L533+0xc
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L533+0x10
	mov	sl, r1
	add	sl, sl, r6
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r6, #0
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r9
	mov	r2, r8
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r7, .L533+0x14
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r7, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L533+0x18
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L533+0x1c
	mov	r0, sl
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	mov	r0, sl
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x32]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	mov	r0, r9
	mov	r1, r8
	bl	GetFormSpeciesId
	ldrb	r2, [r4]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	strh	r0, [r1, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L533+0x20
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L533+0x24
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xff
	bl	DoPokeballSendOutAnimation
	mov	r1, sl
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	gBattlerPartyIndexes
	.word	gBattleResources
	.word	gPlayerParty
	.word	sub_805D714
	.word	gUnknown_03005D7C
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe30:
	.size	 sub_818BA6C,.Lfe30-sub_818BA6C
	.align	2, 0
	.type	 RecordedPlayerHandleReturnMonToBall,function
	.thumb_func
RecordedPlayerHandleReturnMonToBall:
	push	{r4, r5, r6, lr}
	ldr	r0, .L538
	ldr	r0, [r0]
	ldr	r6, .L538+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L536	@cond_branch
	ldr	r0, .L538+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r3, [r0, #0x4]
	ldr	r1, .L538+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L538+0x10
	str	r1, [r0]
	b	.L537
.L539:
	.align	2, 0
.L538:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	DoSwitchOutAnimation
.L536:
	ldr	r5, .L540
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L540+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L540+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	RecordedPlayerBufferExecCompleted
.L537:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L541:
	.align	2, 0
.L540:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe31:
	.size	 RecordedPlayerHandleReturnMonToBall,.Lfe31-RecordedPlayerHandleReturnMonToBall
	.align	2, 0
	.type	 DoSwitchOutAnimation,function
	.thumb_func
DoSwitchOutAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L550
	ldr	r4, [r6]
	ldr	r5, .L550+0x4
	ldrb	r2, [r5]
	ldr	r1, [r4, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	beq	.L544	@cond_branch
	cmp	r0, #0x1
	beq	.L546	@cond_branch
	b	.L543
.L551:
	.align	2, 0
.L550:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L544:
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L545	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L545:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L543
.L546:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L543	@cond_branch
	strb	r0, [r3, #0x4]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x1
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L552
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L552+0x4
	str	r1, [r0]
.L543:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L553:
	.align	2, 0
.L552:
	.word	gBattlerControllerFuncs
	.word	sub_818A1B0
.Lfe32:
	.size	 DoSwitchOutAnimation,.Lfe32-DoSwitchOutAnimation
	.align	2, 0
	.type	 RecordedPlayerHandleDrawTrainerPic,function
	.thumb_func
RecordedPlayerHandleDrawTrainerPic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L570
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L555	@cond_branch
	mov	r0, #0x40
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L556	@cond_branch
	bl	GetActiveBattlerLinkPlayerGender
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	b	.L558
.L571:
	.align	2, 0
.L570:
	.word	gBattleTypeFlags
.L556:
	ldr	r2, .L572
	ldr	r0, .L572+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	b	.L567
.L573:
	.align	2, 0
.L572:
	.word	gLinkPlayers
	.word	gUnknown_0203C7B4
.L555:
	ldr	r0, .L574
.L567:
	ldrb	r4, [r0, #0x13]
.L558:
	ldr	r0, .L574+0x4
	ldr	r1, [r0]
	mov	r2, #0x40
	and	r1, r1, r2
	add	r5, r0, #0
	cmp	r1, #0
	beq	.L559	@cond_branch
	ldr	r0, .L574+0x8
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x2
	and	r1, r1, r0
	mov	r0, #0x20
	mov	r9, r0
	cmp	r1, #0
	beq	.L560	@cond_branch
	mov	r1, #0x5a
	mov	r9, r1
.L560:
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L569	@cond_branch
	mov	r0, #0x5a
	mov	r9, r0
	ldr	r1, .L574+0xc
	b	.L568
.L575:
	.align	2, 0
.L574:
	.word	gLinkPlayers
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gTrainerFrontPicCoords
.L559:
	mov	r0, #0x50
	mov	r9, r0
.L569:
	ldr	r1, .L576
.L568:
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x8
	sub	r0, r0, r1
	lsl	r0, r0, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r0, r0, r1
	lsr	r7, r0, #0x10
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB5982
	b	.L565	@long jump
.LCB5982:
	ldr	r0, .L576+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	bl	PlayerGenderToFrontTrainerPicId
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r5, r4, #0
	ldr	r6, .L576+0x8
	ldrb	r1, [r6]
	add	r0, r5, #0
	bl	DecompressTrainerFrontPic
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	SetMultiuseSpriteTemplateToTrainerFront
	ldr	r0, .L576+0xc
	mov	r8, r0
	lsl	r4, r7, #0x10
	asr	r4, r4, #0x10
	ldrb	r0, [r6]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	mov	r1, r9
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L576+0x10
	ldrb	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r0, .L576+0x14
	lsl	r5, r5, #0x3
	add	r5, r5, r0
	ldrh	r0, [r5, #0x4]
	bl	IndexOfSpritePaletteTag
	ldr	r5, .L576+0x18
	ldrb	r1, [r6]
	add	r1, r1, r4
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0xf0
	strh	r1, [r0, #0x24]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x30
	strh	r1, [r0, #0x26]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L576+0x1c
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L576+0x20
	str	r1, [r0]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L566
.L577:
	.align	2, 0
.L576:
	.word	gTrainerBackPicCoords
	.word	gSaveBlock2Ptr
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gTrainerFrontPicPaletteTable
	.word	gSprites
	.word	0xfffe
	.word	sub_805D7AC
.L565:
	ldr	r5, .L578
	ldrb	r1, [r5]
	add	r0, r4, #0
	bl	DecompressTrainerBackPic
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r6, .L578+0x4
	mov	r8, r9
	lsl	r4, r7, #0x10
	asr	r4, r4, #0x10
	ldrb	r0, [r5]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r6, #0
	mov	r1, r8
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r6, .L578+0x8
	ldrb	r1, [r5]
	add	r1, r1, r6
	strb	r0, [r1]
	ldr	r4, .L578+0xc
	ldrb	r3, [r5]
	add	r0, r3, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0xf0
	strh	r1, [r0, #0x24]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L578+0x10
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L578+0x14
	str	r1, [r0]
.L566:
	ldr	r1, .L578+0x18
	ldr	r0, .L578
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L578+0x1c
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L579:
	.align	2, 0
.L578:
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xfffe
	.word	sub_805D7AC
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy
.Lfe33:
	.size	 RecordedPlayerHandleDrawTrainerPic,.Lfe33-RecordedPlayerHandleDrawTrainerPic
	.align	2, 0
	.type	 RecordedPlayerHandleTrainerSlide,function
	.thumb_func
RecordedPlayerHandleTrainerSlide:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 RecordedPlayerHandleTrainerSlide,.Lfe34-RecordedPlayerHandleTrainerSlide
	.align	2, 0
	.type	 RecordedPlayerHandleTrainerSlideBack,function
	.thumb_func
RecordedPlayerHandleTrainerSlideBack:
	push	{r4, r5, r6, lr}
	ldr	r6, .L582
	ldr	r4, .L582+0x4
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L582+0x8
	add	r0, r0, r5
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L582+0xc
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L582+0x10
	str	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L582+0x14
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L582+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L582+0x1c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L583:
	.align	2, 0
.L582:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	0xffd8
	.word	StartAnimLinearTranslation
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	sub_81899F0
.Lfe35:
	.size	 RecordedPlayerHandleTrainerSlideBack,.Lfe35-RecordedPlayerHandleTrainerSlideBack
	.align	2, 0
	.type	 RecordedPlayerHandleFaintAnimation,function
	.thumb_func
RecordedPlayerHandleFaintAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L589
	ldr	r4, [r6]
	ldr	r5, .L589+0x4
	ldrb	r2, [r5]
	ldr	r0, [r4, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L585	@cond_branch
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L586	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L586:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x4]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L587
.L590:
	.align	2, 0
.L589:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L585:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L587	@cond_branch
	strb	r4, [r3, #0x4]
	ldr	r2, .L591
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L591+0x4
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	mov	r1, #0x40
	neg	r1, r1
	mov	r0, #0x10
	bl	PlaySE12WithPanning
	ldr	r2, .L591+0x8
	ldr	r3, .L591+0xc
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x30]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x5
	strh	r1, [r0, #0x32]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L591+0x10
	str	r1, [r0]
	ldr	r1, .L591+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L591+0x18
	str	r1, [r0]
.L587:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L592:
	.align	2, 0
.L591:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	sub_8039C00
	.word	gBattlerControllerFuncs
	.word	sub_818A114
.Lfe36:
	.size	 RecordedPlayerHandleFaintAnimation,.Lfe36-RecordedPlayerHandleFaintAnimation
	.align	2, 0
	.type	 RecordedPlayerHandlePaletteFade,function
	.thumb_func
RecordedPlayerHandlePaletteFade:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 RecordedPlayerHandlePaletteFade,.Lfe37-RecordedPlayerHandlePaletteFade
	.align	2, 0
	.type	 RecordedPlayerHandleSuccessBallThrowAnim,function
	.thumb_func
RecordedPlayerHandleSuccessBallThrowAnim:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 RecordedPlayerHandleSuccessBallThrowAnim,.Lfe38-RecordedPlayerHandleSuccessBallThrowAnim
	.align	2, 0
	.type	 RecordedPlayerHandleBallThrowAnim,function
	.thumb_func
RecordedPlayerHandleBallThrowAnim:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 RecordedPlayerHandleBallThrowAnim,.Lfe39-RecordedPlayerHandleBallThrowAnim
	.align	2, 0
	.type	 RecordedPlayerHandlePause,function
	.thumb_func
RecordedPlayerHandlePause:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 RecordedPlayerHandlePause,.Lfe40-RecordedPlayerHandlePause
	.align	2, 0
	.type	 RecordedPlayerHandleMoveAnimation,function
	.thumb_func
RecordedPlayerHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L601
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB6537
	b	.L598	@long jump
.LCB6537:
	ldr	r0, .L601+0x4
	ldr	r0, [r0]
	mov	ip, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L601+0x8
	mov	r1, ip
	add	r1, r1, #0x23
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r5]
	ldr	r4, .L601+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x24
	add	r1, r1, r2
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x25
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L601+0x10
	ldrb	r3, [r6]
	lsl	r3, r3, #0x9
	mov	r1, ip
	add	r1, r1, #0x26
	add	r1, r1, r3
	ldrb	r2, [r1]
	mov	r1, ip
	add	r1, r1, #0x27
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r2, r2, r1
	mov	r1, ip
	add	r1, r1, #0x28
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	mov	r1, ip
	add	r1, r1, #0x29
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x18
	orr	r2, r2, r1
	str	r2, [r4]
	ldr	r3, .L601+0x14
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x2a
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L601+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x2c
	add	r1, r1, r2
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x2d
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L601+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, #0x20
	add	r2, r2, ip
	add	r1, r2, #0
	add	r1, r1, #0x10
	str	r1, [r3]
	ldr	r3, .L601+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2, #0x10]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	IsMoveWithoutAnimation
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L599	@cond_branch
	bl	RecordedPlayerBufferExecCompleted
	b	.L598
.L602:
	.align	2, 0
.L601:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gAnimMoveTurn
	.word	gAnimMovePower
	.word	gAnimMoveDmg
	.word	gAnimFriendship
	.word	gWeatherMoveAnim
	.word	gAnimDisableStructPtr
	.word	gTransformedPersonalities
.L599:
	ldr	r0, .L603
	ldr	r0, [r0]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x4]
	ldr	r1, .L603+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L603+0x8
	str	r1, [r0]
.L598:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L604:
	.align	2, 0
.L603:
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	RecordedPlayerDoMoveAnimation
.Lfe41:
	.size	 RecordedPlayerHandleMoveAnimation,.Lfe41-RecordedPlayerHandleMoveAnimation
	.align	2, 0
	.type	 RecordedPlayerDoMoveAnimation,function
	.thumb_func
RecordedPlayerDoMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L619
	mov	r9, r0
	ldr	r1, [r0]
	ldr	r6, .L619+0x4
	ldrb	r3, [r6]
	lsl	r2, r3, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r4, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x22
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	add	r1, r1, #0x2b
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r8, r1
	ldr	r7, .L619+0x8
	ldr	r5, [r7]
	ldr	r1, [r5, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L609	@cond_branch
	cmp	r2, #0x1
	bgt	.L618	@cond_branch
	cmp	r2, #0
	beq	.L607	@cond_branch
	b	.L606
.L620:
	.align	2, 0
.L619:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
.L618:
	cmp	r2, #0x2
	beq	.L611	@cond_branch
	cmp	r2, #0x3
	beq	.L614	@cond_branch
	b	.L606
.L607:
	ldr	r1, [r5]
	lsl	r0, r3, #0x2
	add	r1, r0, r1
	ldrb	r3, [r1]
	mov	r0, #0xc
	and	r0, r0, r3
	cmp	r0, #0x4
	bne	.L608	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r3
	strb	r0, [r1]
	ldrb	r2, [r6]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L608:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L606
.L609:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L606	@cond_branch
	mov	r0, #0x0
	bl	sub_805EB9C
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x4]
	b	.L606
.L611:
	ldr	r0, .L621
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L621+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L606	@cond_branch
	mov	r0, #0x1
	bl	sub_805EB9C
	ldr	r0, [r7]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L613	@cond_branch
	mov	r1, r8
	cmp	r1, #0x1
	bhi	.L613	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L613:
	ldr	r0, .L621+0x8
	ldr	r2, [r0]
	ldr	r0, .L621+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L606
.L622:
	.align	2, 0
.L621:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L614:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L606	@cond_branch
	bl	CopyAllBattleSpritesInvisibilities
	ldrb	r0, [r6]
	mov	r1, r9
	ldr	r2, [r1]
	lsl	r3, r0, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r2, r2, #0x22
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	TrySetBehindSubstituteSpriteBit
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r4, [r0, #0x4]
	bl	RecordedPlayerBufferExecCompleted
.L606:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 RecordedPlayerDoMoveAnimation,.Lfe42-RecordedPlayerDoMoveAnimation
	.align	2, 0
	.type	 RecordedPlayerHandlePrintString,function
	.thumb_func
RecordedPlayerHandlePrintString:
	push	{r4, lr}
	ldr	r0, .L624
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L624+0x4
	strh	r1, [r0]
	ldr	r0, .L624+0x8
	ldr	r4, .L624+0xc
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	bl	BufferStringBattle
	ldr	r0, .L624+0x10
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
	ldr	r1, .L624+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L624+0x18
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L625:
	.align	2, 0
.L624:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleResources
	.word	gActiveBattler
	.word	gDisplayedStringBattle
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter
.Lfe43:
	.size	 RecordedPlayerHandlePrintString,.Lfe43-RecordedPlayerHandlePrintString
	.align	2, 0
	.type	 RecordedPlayerHandlePrintSelectionString,function
	.thumb_func
RecordedPlayerHandlePrintSelectionString:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 RecordedPlayerHandlePrintSelectionString,.Lfe44-RecordedPlayerHandlePrintSelectionString
	.align	2, 0
	.type	 ChooseActionInBattlePalace,function
	.thumb_func
ChooseActionInBattlePalace:
	push	{lr}
	ldr	r1, .L629
	ldr	r0, .L629+0x4
	ldrb	r0, [r0]
	ldrb	r1, [r1, #0x4]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bcc	.L628	@cond_branch
	ldr	r0, .L629+0x8
	ldrb	r0, [r0]
	bl	RecordedBattle_GetBattlerAction
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	bl	RecordedPlayerBufferExecCompleted
.L628:
	pop	{r0}
	bx	r0
.L630:
	.align	2, 0
.L629:
	.word	gBattleCommunication
	.word	gBattlersCount
	.word	gActiveBattler
.Lfe45:
	.size	 ChooseActionInBattlePalace,.Lfe45-ChooseActionInBattlePalace
	.align	2, 0
	.type	 RecordedPlayerHandleChooseAction,function
	.thumb_func
RecordedPlayerHandleChooseAction:
	push	{lr}
	ldr	r0, .L634
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L632	@cond_branch
	ldr	r1, .L634+0x4
	ldr	r0, .L634+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L634+0xc
	str	r1, [r0]
	b	.L633
.L635:
	.align	2, 0
.L634:
	.word	gBattleTypeFlags
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	ChooseActionInBattlePalace
.L632:
	ldr	r0, .L636
	ldrb	r0, [r0]
	bl	RecordedBattle_GetBattlerAction
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	bl	RecordedPlayerBufferExecCompleted
.L633:
	pop	{r0}
	bx	r0
.L637:
	.align	2, 0
.L636:
	.word	gActiveBattler
.Lfe46:
	.size	 RecordedPlayerHandleChooseAction,.Lfe46-RecordedPlayerHandleChooseAction
	.align	2, 0
	.type	 RecordedPlayerHandleUnknownYesNoBox,function
	.thumb_func
RecordedPlayerHandleUnknownYesNoBox:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 RecordedPlayerHandleUnknownYesNoBox,.Lfe47-RecordedPlayerHandleUnknownYesNoBox
	.align	2, 0
	.type	 RecordedPlayerHandleChooseMove,function
	.thumb_func
RecordedPlayerHandleChooseMove:
	push	{r4, r5, lr}
	ldr	r0, .L642
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L640	@cond_branch
	bl	ChooseMoveAndTargetInBattlePalace
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
	b	.L641
.L643:
	.align	2, 0
.L642:
	.word	gBattleTypeFlags
.L640:
	ldr	r5, .L644
	ldrb	r0, [r5]
	bl	RecordedBattle_GetBattlerAction
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r5]
	bl	RecordedBattle_GetBattlerAction
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x10
	orr	r2, r2, r4
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
.L641:
	bl	RecordedPlayerBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L645:
	.align	2, 0
.L644:
	.word	gActiveBattler
.Lfe48:
	.size	 RecordedPlayerHandleChooseMove,.Lfe48-RecordedPlayerHandleChooseMove
	.align	2, 0
	.type	 RecordedPlayerHandleChooseItem,function
	.thumb_func
RecordedPlayerHandleChooseItem:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 RecordedPlayerHandleChooseItem,.Lfe49-RecordedPlayerHandleChooseItem
	.align	2, 0
	.type	 RecordedPlayerHandleChoosePokemon,function
	.thumb_func
RecordedPlayerHandleChoosePokemon:
	push	{r4, lr}
	ldr	r4, .L648
	ldrb	r0, [r4]
	bl	RecordedBattle_GetBattlerAction
	ldrb	r1, [r4]
	ldr	r3, .L648+0x4
	ldr	r2, [r3]
	add	r1, r1, r2
	add	r1, r1, #0x5c
	strb	r0, [r1]
	ldrb	r0, [r4]
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	ldrb	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitChosenMonReturnValue
	bl	RecordedPlayerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L649:
	.align	2, 0
.L648:
	.word	gActiveBattler
	.word	gBattleStruct
.Lfe50:
	.size	 RecordedPlayerHandleChoosePokemon,.Lfe50-RecordedPlayerHandleChoosePokemon
	.align	2, 0
	.type	 RecordedPlayerHandleCmd23,function
	.thumb_func
RecordedPlayerHandleCmd23:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 RecordedPlayerHandleCmd23,.Lfe51-RecordedPlayerHandleCmd23
	.align	2, 0
	.type	 RecordedPlayerHandleHealthBarUpdate,function
	.thumb_func
RecordedPlayerHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	ldr	r0, .L654
	ldr	r2, [r0]
	ldr	r0, .L654+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r3, r4, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x22
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r2, r2, #0x23
	add	r2, r2, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r7, r1, #0x10
	ldr	r0, .L654+0x8
	cmp	r7, r0
	beq	.L652	@cond_branch
	ldr	r6, .L654+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L654+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L654+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	SetBattleBarStruct
	b	.L653
.L655:
	.align	2, 0
.L654:
	.word	gBattleResources
	.word	gActiveBattler
	.word	0x7fff
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
.L652:
	ldr	r1, .L656
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L656+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r4, .L656+0x8
	add	r1, r0, r4
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	SetBattleBarStruct
	mov	r1, r9
	ldrb	r0, [r1]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
.L653:
	ldr	r1, .L656+0xc
	ldr	r0, .L656+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L656+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L657:
	.align	2, 0
.L656:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnHealthbarDone
.Lfe52:
	.size	 RecordedPlayerHandleHealthBarUpdate,.Lfe52-RecordedPlayerHandleHealthBarUpdate
	.align	2, 0
	.type	 RecordedPlayerHandleExpUpdate,function
	.thumb_func
RecordedPlayerHandleExpUpdate:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 RecordedPlayerHandleExpUpdate,.Lfe53-RecordedPlayerHandleExpUpdate
	.align	2, 0
	.type	 RecordedPlayerHandleStatusIconUpdate,function
	.thumb_func
RecordedPlayerHandleStatusIconUpdate:
	push	{r4, lr}
	ldr	r4, .L661
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L660	@cond_branch
	ldr	r0, .L661+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L661+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L661+0xc
	add	r1, r1, r2
	mov	r2, #0x9
	bl	UpdateHealthboxAttribute
	ldrb	r2, [r4]
	ldr	r0, .L661+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L661+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L661+0x18
	str	r1, [r0]
.L660:
	pop	{r4}
	pop	{r0}
	bx	r0
.L662:
	.align	2, 0
.L661:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe54:
	.size	 RecordedPlayerHandleStatusIconUpdate,.Lfe54-RecordedPlayerHandleStatusIconUpdate
	.align	2, 0
	.type	 RecordedPlayerHandleStatusAnimation,function
	.thumb_func
RecordedPlayerHandleStatusAnimation:
	push	{r4, lr}
	ldr	r4, .L665
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L664	@cond_branch
	ldr	r0, .L665+0x4
	ldr	r0, [r0]
	mov	ip, r0
	ldrb	r3, [r4]
	lsl	r3, r3, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r3
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x22
	add	r1, r1, r3
	ldrb	r1, [r1]
	mov	r2, ip
	add	r2, r2, #0x23
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	mov	r2, ip
	add	r2, r2, #0x24
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x10
	orr	r1, r1, r2
	mov	r2, ip
	add	r2, r2, #0x25
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	bl	InitAndLaunchChosenStatusAnimation
	ldr	r1, .L665+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L665+0xc
	str	r1, [r0]
.L664:
	pop	{r4}
	pop	{r0}
	bx	r0
.L666:
	.align	2, 0
.L665:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe55:
	.size	 RecordedPlayerHandleStatusAnimation,.Lfe55-RecordedPlayerHandleStatusAnimation
	.align	2, 0
	.type	 RecordedPlayerHandleStatusXor,function
	.thumb_func
RecordedPlayerHandleStatusXor:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 RecordedPlayerHandleStatusXor,.Lfe56-RecordedPlayerHandleStatusXor
	.align	2, 0
	.type	 RecordedPlayerHandleDataTransfer,function
	.thumb_func
RecordedPlayerHandleDataTransfer:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 RecordedPlayerHandleDataTransfer,.Lfe57-RecordedPlayerHandleDataTransfer
	.align	2, 0
	.type	 RecordedPlayerHandleDMA3Transfer,function
	.thumb_func
RecordedPlayerHandleDMA3Transfer:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 RecordedPlayerHandleDMA3Transfer,.Lfe58-RecordedPlayerHandleDMA3Transfer
	.align	2, 0
	.type	 RecordedPlayerHandlePlayBGM,function
	.thumb_func
RecordedPlayerHandlePlayBGM:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 RecordedPlayerHandlePlayBGM,.Lfe59-RecordedPlayerHandlePlayBGM
	.align	2, 0
	.type	 RecordedPlayerHandleCmd32,function
	.thumb_func
RecordedPlayerHandleCmd32:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 RecordedPlayerHandleCmd32,.Lfe60-RecordedPlayerHandleCmd32
	.align	2, 0
	.type	 RecordedPlayerHandleTwoReturnValues,function
	.thumb_func
RecordedPlayerHandleTwoReturnValues:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 RecordedPlayerHandleTwoReturnValues,.Lfe61-RecordedPlayerHandleTwoReturnValues
	.align	2, 0
	.type	 RecordedPlayerHandleChosenMonReturnValue,function
	.thumb_func
RecordedPlayerHandleChosenMonReturnValue:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 RecordedPlayerHandleChosenMonReturnValue,.Lfe62-RecordedPlayerHandleChosenMonReturnValue
	.align	2, 0
	.type	 RecordedPlayerHandleOneReturnValue,function
	.thumb_func
RecordedPlayerHandleOneReturnValue:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 RecordedPlayerHandleOneReturnValue,.Lfe63-RecordedPlayerHandleOneReturnValue
	.align	2, 0
	.type	 RecordedPlayerHandleOneReturnValue_Duplicate,function
	.thumb_func
RecordedPlayerHandleOneReturnValue_Duplicate:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 RecordedPlayerHandleOneReturnValue_Duplicate,.Lfe64-RecordedPlayerHandleOneReturnValue_Duplicate
	.align	2, 0
	.type	 RecordedPlayerHandleCmd37,function
	.thumb_func
RecordedPlayerHandleCmd37:
	push	{lr}
	ldr	r2, .L677
	ldrb	r1, [r2]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L678:
	.align	2, 0
.L677:
	.word	gUnknown_02022D0C
.Lfe65:
	.size	 RecordedPlayerHandleCmd37,.Lfe65-RecordedPlayerHandleCmd37
	.align	2, 0
	.type	 RecordedPlayerHandleCmd38,function
	.thumb_func
RecordedPlayerHandleCmd38:
	push	{lr}
	ldr	r3, .L680
	ldr	r0, .L680+0x4
	ldr	r1, [r0]
	ldr	r0, .L680+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, #0x7f
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L681:
	.align	2, 0
.L680:
	.word	gUnknown_02022D0C
	.word	gBattleResources
	.word	gActiveBattler
.Lfe66:
	.size	 RecordedPlayerHandleCmd38,.Lfe66-RecordedPlayerHandleCmd38
	.align	2, 0
	.type	 RecordedPlayerHandleCmd39,function
	.thumb_func
RecordedPlayerHandleCmd39:
	push	{lr}
	ldr	r2, .L683
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L684:
	.align	2, 0
.L683:
	.word	gUnknown_02022D0C
.Lfe67:
	.size	 RecordedPlayerHandleCmd39,.Lfe67-RecordedPlayerHandleCmd39
	.align	2, 0
	.type	 RecordedPlayerHandleCmd40,function
	.thumb_func
RecordedPlayerHandleCmd40:
	push	{lr}
	ldr	r3, .L686
	ldr	r1, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrb	r2, [r3]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L687:
	.align	2, 0
.L686:
	.word	gUnknown_02022D0C
.Lfe68:
	.size	 RecordedPlayerHandleCmd40,.Lfe68-RecordedPlayerHandleCmd40
	.align	2, 0
	.type	 RecordedPlayerHandleHitAnimation,function
	.thumb_func
RecordedPlayerHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L691
	ldr	r2, .L691+0x4
	ldr	r4, .L691+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L689	@cond_branch
	bl	RecordedPlayerBufferExecCompleted
	b	.L690
.L692:
	.align	2, 0
.L691:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.L689:
	ldr	r1, .L693
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	DoHitAnimHealthboxEffect
	ldr	r1, .L693+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L693+0x8
	str	r1, [r0]
.L690:
	pop	{r4}
	pop	{r0}
	bx	r0
.L694:
	.align	2, 0
.L693:
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	DoHitAnimBlinkSpriteEffect
.Lfe69:
	.size	 RecordedPlayerHandleHitAnimation,.Lfe69-RecordedPlayerHandleHitAnimation
	.align	2, 0
	.type	 RecordedPlayerHandleCmd42,function
	.thumb_func
RecordedPlayerHandleCmd42:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 RecordedPlayerHandleCmd42,.Lfe70-RecordedPlayerHandleCmd42
	.align	2, 0
	.type	 RecordedPlayerHandlePlaySE,function
	.thumb_func
RecordedPlayerHandlePlaySE:
	push	{r4, lr}
	ldr	r4, .L699
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r3, #0x3f
	cmp	r0, #0
	bne	.L697	@cond_branch
	mov	r3, #0xc0
.L697:
	ldr	r0, .L699+0x4
	ldr	r1, [r0]
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	bl	RecordedPlayerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L700:
	.align	2, 0
.L699:
	.word	gActiveBattler
	.word	gBattleResources
.Lfe71:
	.size	 RecordedPlayerHandlePlaySE,.Lfe71-RecordedPlayerHandlePlaySE
	.align	2, 0
	.type	 RecordedPlayerHandlePlayFanfareOrBGM,function
	.thumb_func
RecordedPlayerHandlePlayFanfareOrBGM:
	push	{r4, r5, lr}
	ldr	r5, .L704
	ldr	r1, [r5]
	ldr	r4, .L704+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x23
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L702	@cond_branch
	bl	BattleStopLowHpSound
	ldr	r1, [r5]
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayBGM
	b	.L703
.L705:
	.align	2, 0
.L704:
	.word	gBattleResources
	.word	gActiveBattler
.L702:
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
.L703:
	bl	RecordedPlayerBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe72:
	.size	 RecordedPlayerHandlePlayFanfareOrBGM,.Lfe72-RecordedPlayerHandlePlayFanfareOrBGM
	.align	2, 0
	.type	 RecordedPlayerHandleFaintingCry,function
	.thumb_func
RecordedPlayerHandleFaintingCry:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r0, .L707
	mov	r9, r0
	ldr	r1, .L707+0x4
	mov	r8, r1
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L707+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x59
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	GetFormSpeciesId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	neg	r1, r1
	mov	r2, #0x5
	bl	PlayCry3
	bl	RecordedPlayerBufferExecCompleted
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L708:
	.align	2, 0
.L707:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gPlayerParty
.Lfe73:
	.size	 RecordedPlayerHandleFaintingCry,.Lfe73-RecordedPlayerHandleFaintingCry
	.align	2, 0
	.type	 RecordedPlayerHandleIntroSlide,function
	.thumb_func
RecordedPlayerHandleIntroSlide:
	push	{lr}
	ldr	r0, .L710
	ldr	r1, [r0]
	ldr	r0, .L710+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	HandleIntroSlide
	ldr	r2, .L710+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L711:
	.align	2, 0
.L710:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gIntroSlideFlags
.Lfe74:
	.size	 RecordedPlayerHandleIntroSlide,.Lfe74-RecordedPlayerHandleIntroSlide
	.align	2, 0
	.type	 RecordedPlayerHandleIntroTrainerBallThrow,function
	.thumb_func
RecordedPlayerHandleIntroTrainerBallThrow:
	push	{r4, r5, r6, lr}
	ldr	r5, .L716
	ldr	r6, .L716+0x4
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L716+0x8
	add	r0, r0, r4
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x32
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L716+0xc
	strh	r1, [r0, #0x32]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L716+0x10
	str	r1, [r0]
	ldrb	r2, [r6]
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r2, [r0, #0x38]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L716+0x14
	bl	StoreSpriteCallbackInData6
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r0, .L716+0x18
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L716+0x1c
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L713	@cond_branch
	ldr	r4, .L716+0x20
	ldrb	r0, [r6]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1, #0x13]
	b	.L714
.L717:
	.align	2, 0
.L716:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	0xffd8
	.word	StartAnimLinearTranslation
	.word	sub_805CC00
	.word	0xd6f9
	.word	gBattleTypeFlags
	.word	gLinkPlayers
.L713:
	ldr	r0, .L718
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
.L714:
	ldr	r1, .L718+0x4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r4, r5, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r2, .L718+0x8
	ldr	r1, .L718+0xc
	ldr	r5, .L718+0x10
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r1, #0x5]
	ldr	r0, .L718+0x14
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L718+0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r5]
	strh	r0, [r1, #0x8]
	ldr	r3, .L718+0x1c
	ldr	r0, [r3]
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L715	@cond_branch
	ldr	r0, .L718+0x20
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L718+0x24
	str	r1, [r0]
.L715:
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L718+0x28
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L718+0x2c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L719:
	.align	2, 0
.L718:
	.word	gSaveBlock2Ptr
	.word	gTrainerBackPicPaletteTable
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	sub_818CC24
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
	.word	gBattlerControllerFuncs
	.word	nullsub_120
.Lfe75:
	.size	 RecordedPlayerHandleIntroTrainerBallThrow,.Lfe75-RecordedPlayerHandleIntroTrainerBallThrow
	.align	2, 0
	.type	 sub_818CC24,function
	.thumb_func
sub_818CC24:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L726
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x17
	bgt	.L721	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0xa]
	b	.L722
.L727:
	.align	2, 0
.L726:
	.word	gTasks
.L721:
	ldr	r7, .L728
	ldrb	r0, [r7]
	mov	r9, r0
	ldrh	r0, [r1, #0x8]
	strb	r0, [r7]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L724	@cond_branch
	ldr	r0, .L728+0x4
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L723	@cond_branch
.L724:
	ldr	r0, .L728+0x8
	ldr	r1, [r0]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldr	r2, .L728+0xc
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_818BA6C
	b	.L725
.L729:
	.align	2, 0
.L728:
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattleResources
	.word	gBattlerPartyIndexes
.L723:
	ldr	r5, .L730
	ldr	r1, [r5]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldr	r4, .L730+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_818BA6C
	ldrb	r0, [r7]
	mov	r6, #0x2
	eor	r0, r0, r6
	strb	r0, [r7]
	ldr	r1, [r5]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r4
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L730+0x8
	add	r0, r0, r2
	bl	BattleLoadPlayerMonSpriteGfx
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_818BA6C
	ldrb	r0, [r7]
	eor	r0, r0, r6
	strb	r0, [r7]
.L725:
	ldr	r1, .L730+0xc
	ldr	r2, .L730+0x10
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L730+0x14
	str	r1, [r0]
	mov	r3, r9
	strb	r3, [r2]
	mov	r0, r8
	bl	DestroyTask
.L722:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L731:
	.align	2, 0
.L730:
	.word	gBattleResources
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	sub_8189D40
.Lfe76:
	.size	 sub_818CC24,.Lfe76-sub_818CC24
	.align	2, 0
	.type	 RecordedPlayerHandleDrawPartyStatusSummary,function
	.thumb_func
RecordedPlayerHandleDrawPartyStatusSummary:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L736
	ldr	r0, [r0]
	ldr	r1, .L736+0x4
	ldrb	r2, [r1]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L733	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L733	@cond_branch
	bl	RecordedPlayerBufferExecCompleted
	b	.L734
.L737:
	.align	2, 0
.L736:
	.word	gBattleResources
	.word	gActiveBattler
.L733:
	ldr	r7, .L738
	ldr	r0, [r7]
	ldr	r6, .L738+0x4
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r6]
	ldr	r5, .L738+0x8
	lsl	r4, r0, #0x9
	add	r1, r4, #0
	add	r1, r1, #0x20
	ldr	r3, [r5]
	add	r1, r3, r1
	add	r1, r1, #0x4
	add	r2, r3, #0
	add	r2, r2, #0x21
	add	r2, r2, r4
	ldrb	r2, [r2]
	add	r3, r3, #0x22
	add	r3, r3, r4
	ldrb	r3, [r3]
	bl	CreatePartyStatusSummarySprites
	ldr	r2, .L738+0xc
	ldrb	r1, [r6]
	add	r1, r1, r2
	mov	r3, #0x0
	strb	r0, [r1]
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x5]
	ldr	r0, [r5]
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x22
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L735	@cond_branch
	ldr	r0, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x5d
	strb	r1, [r0, #0x5]
.L735:
	ldr	r0, .L738+0x10
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L738+0x14
	str	r0, [r1]
.L734:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L739:
	.align	2, 0
.L738:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlerStatusSummaryTaskId
	.word	gBattlerControllerFuncs
	.word	sub_818CDF4
.Lfe77:
	.size	 RecordedPlayerHandleDrawPartyStatusSummary,.Lfe77-RecordedPlayerHandleDrawPartyStatusSummary
	.align	2, 0
	.type	 sub_818CDF4,function
	.thumb_func
sub_818CDF4:
	push	{r4, lr}
	ldr	r4, .L742
	ldr	r0, [r4]
	ldr	r3, .L742+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x5]
	add	r2, r1, #0x1
	strb	r2, [r0, #0x5]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x5c
	bls	.L741	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x5]
	bl	RecordedPlayerBufferExecCompleted
.L741:
	pop	{r4}
	pop	{r0}
	bx	r0
.L743:
	.align	2, 0
.L742:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe78:
	.size	 sub_818CDF4,.Lfe78-sub_818CDF4
	.align	2, 0
	.type	 RecordedPlayerHandleHidePartyStatusSummary,function
	.thumb_func
RecordedPlayerHandleHidePartyStatusSummary:
	push	{lr}
	ldr	r0, .L746
	ldr	r1, [r0]
	ldr	r0, .L746+0x4
	ldrb	r3, [r0]
	ldr	r1, [r1, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L745	@cond_branch
	ldr	r2, .L746+0x8
	ldr	r0, .L746+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L746+0x10
	str	r1, [r0]
.L745:
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L747:
	.align	2, 0
.L746:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gTasks
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
.Lfe79:
	.size	 RecordedPlayerHandleHidePartyStatusSummary,.Lfe79-RecordedPlayerHandleHidePartyStatusSummary
	.align	2, 0
	.type	 RecordedPlayerHandleEndBounceEffect,function
	.thumb_func
RecordedPlayerHandleEndBounceEffect:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 RecordedPlayerHandleEndBounceEffect,.Lfe80-RecordedPlayerHandleEndBounceEffect
	.align	2, 0
	.type	 RecordedPlayerHandleSpriteInvisibility,function
	.thumb_func
RecordedPlayerHandleSpriteInvisibility:
	push	{r4, lr}
	ldr	r4, .L751
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L750	@cond_branch
	ldr	r3, .L751+0x4
	ldr	r0, .L751+0x8
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r0, .L751+0xc
	ldr	r0, [r0]
	lsl	r1, r1, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	add	r2, r2, #0x3e
	mov	r3, #0x1
	ldrb	r1, [r0]
	and	r1, r1, r3
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	CopyBattleSpriteInvisibility
.L750:
	bl	RecordedPlayerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L752:
	.align	2, 0
.L751:
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleResources
.Lfe81:
	.size	 RecordedPlayerHandleSpriteInvisibility,.Lfe81-RecordedPlayerHandleSpriteInvisibility
	.align	2, 0
	.type	 RecordedPlayerHandleBattleAnimation,function
	.thumb_func
RecordedPlayerHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r6, .L757
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L754	@cond_branch
	ldr	r0, .L757+0x4
	ldr	r1, [r0]
	ldrb	r2, [r6]
	lsl	r5, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r5
	ldrb	r3, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x22
	add	r0, r0, r5
	ldrb	r4, [r0]
	add	r1, r1, #0x23
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	TryHandleLaunchBattleTableAnimation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L755	@cond_branch
	bl	RecordedPlayerBufferExecCompleted
	b	.L754
.L758:
	.align	2, 0
.L757:
	.word	gActiveBattler
	.word	gBattleResources
.L755:
	ldr	r0, .L759
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L759+0x4
	str	r0, [r1]
.L754:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L760:
	.align	2, 0
.L759:
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedBattleAnimation
.Lfe82:
	.size	 RecordedPlayerHandleBattleAnimation,.Lfe82-RecordedPlayerHandleBattleAnimation
	.align	2, 0
	.type	 RecordedPlayerHandleLinkStandbyMsg,function
	.thumb_func
RecordedPlayerHandleLinkStandbyMsg:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 RecordedPlayerHandleLinkStandbyMsg,.Lfe83-RecordedPlayerHandleLinkStandbyMsg
	.align	2, 0
	.type	 RecordedPlayerHandleResetActionMoveSelection,function
	.thumb_func
RecordedPlayerHandleResetActionMoveSelection:
	push	{lr}
	bl	RecordedPlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 RecordedPlayerHandleResetActionMoveSelection,.Lfe84-RecordedPlayerHandleResetActionMoveSelection
	.align	2, 0
	.type	 RecordedPlayerHandleCmd55,function
	.thumb_func
RecordedPlayerHandleCmd55:
	push	{r4, lr}
	ldr	r2, .L764
	ldr	r0, .L764+0x4
	ldr	r1, [r0]
	ldr	r4, .L764+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	mov	r0, #0x5
	bl	FadeOutMapMusic
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	bl	RecordedPlayerBufferExecCompleted
	ldr	r1, .L764+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L764+0x10
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L765:
	.align	2, 0
.L764:
	.word	gBattleOutcome
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	sub_80587B0
.Lfe85:
	.size	 RecordedPlayerHandleCmd55,.Lfe85-RecordedPlayerHandleCmd55
	.align	2, 0
	.type	 RecordedPlayerCmdEnd,function
	.thumb_func
RecordedPlayerCmdEnd:
	bx	lr
.Lfe86:
	.size	 RecordedPlayerCmdEnd,.Lfe86-RecordedPlayerCmdEnd
.text
	.align	2, 0

