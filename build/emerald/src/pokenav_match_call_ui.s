@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	1, 0
	.type	 sMatchcallArrowPaletteData,object
sMatchcallArrowPaletteData:
	.short	0x0
	.short	0x426b
	.short	0x2506
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sMatchcallArrowPaletteData,32
	.align	2, 0
	.type	 sMatchcallArrowSpriteSheetData,object
sMatchcallArrowSpriteSheetData:
	.word	0xc010
	.word	0x7000002e
	.word	0x3501101
	.word	0x3300400
	.word	0x3108411
	.word	0x22111102
	.word	0x20300
	.word	0x600a6
	.word	0x20000600
	.word	0x1a00300
	.word	0x2800f310
	.word	0x4000310
	.word	0x10000330
	.word	0x57300340
	.word	0x11120
	.word	0x11002103
	.word	0x952221
	.word	0x3
	.word	0x6000006
	.word	-0xafa0000
	.word	0x3304160
	.word	0x4f603f40
	.word	0x1222022
	.word	0xe80340
	.word	0x40033046
	.word	0x1e00224f
	.size	 sMatchcallArrowSpriteSheetData,104
	.globl	gUnknown_0203CF44
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gUnknown_0203CF44,object
	.size	 gUnknown_0203CF44,4
gUnknown_0203CF44:
	.word	0x0
.text
	.align	2, 0
	.globl	sub_81C81D4
	.type	 sub_81C81D4,function
	.thumb_func
sub_81C81D4:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	add	r7, r2, #0
	ldr	r1, .L6
	mov	r0, #0x11
	bl	AllocSubstruct
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L4	@cond_branch
	ldr	r1, .L6+0x4
	add	r0, r4, r1
	add	r1, r5, #0
	bl	InitMatchCallWindowState
	add	r0, r4, #0
	add	r1, r6, #0
	add	r2, r5, #0
	add	r3, r7, #0
	bl	CopyPokenavListMenuTemplate
	cmp	r0, #0
	beq	.L4	@cond_branch
	ldr	r0, .L6+0x8
	mov	r1, #0x6
	bl	CreateLoopedTask
	mov	r0, #0x1
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	0x8a4
	.word	0x888
	.word	LoopedTask_sub_81C8254
.L4:
	mov	r0, #0x0
.L5:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 sub_81C81D4,.Lfe1-sub_81C81D4
	.align	2, 0
	.globl	sub_81C8224
	.type	 sub_81C8224,function
	.thumb_func
sub_81C8224:
	push	{lr}
	ldr	r0, .L9
	bl	FuncIsActiveLoopedTask
	pop	{r1}
	bx	r1
.L10:
	.align	2, 0
.L9:
	.word	LoopedTask_sub_81C8254
.Lfe2:
	.size	 sub_81C8224,.Lfe2-sub_81C8224
	.align	2, 0
	.globl	sub_81C8234
	.type	 sub_81C8234,function
	.thumb_func
sub_81C8234:
	push	{r4, lr}
	mov	r0, #0x11
	bl	GetSubstructPtr
	add	r4, r0, #0
	bl	DestroyMatchCallListArrows
	ldrb	r0, [r4, #0x8]
	bl	RemoveWindow
	mov	r0, #0x11
	bl	FreePokenavSubstruct
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 sub_81C8234,.Lfe3-sub_81C8234
	.align	2, 0
	.globl	LoopedTask_sub_81C8254
	.type	 LoopedTask_sub_81C8254,function
	.thumb_func
LoopedTask_sub_81C8254:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L25	@cond_branch
	mov	r0, #0x11
	bl	GetSubstructPtr
	add	r2, r0, #0
	cmp	r4, #0x4
	bhi	.L22	@cond_branch
	lsl	r0, r4, #0x2
	ldr	r1, .L26
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L27:
	.align	2, 0
.L26:
	.word	.L23
	.align	2, 0
	.align	2, 0
.L23:
	.word	.L15
	.word	.L16
	.word	.L17
	.word	.L18
	.word	.L21
.L15:
	add	r0, r2, #0
	bl	sub_81C82E4
	mov	r0, #0x0
	b	.L24
.L16:
	add	r0, r2, #0
	bl	sub_81C835C
	mov	r0, #0x0
	b	.L24
.L17:
	ldr	r1, .L28
	add	r0, r2, r1
	add	r1, r2, #0
	bl	sub_81C837C
	mov	r0, #0x0
	b	.L24
.L29:
	.align	2, 0
.L28:
	.word	0x888
.L18:
	bl	sub_81C83E0
	cmp	r0, #0
	beq	.L19	@cond_branch
.L25:
	mov	r0, #0x2
	b	.L24
.L19:
	bl	sub_81C8ED0
	mov	r0, #0x1
	b	.L24
.L21:
	ldr	r1, .L30
	add	r0, r2, r1
	add	r1, r2, #0
	bl	CreateMatchCallArrowSprites
.L22:
	mov	r0, #0x4
.L24:
	pop	{r4}
	pop	{r1}
	bx	r1
.L31:
	.align	2, 0
.L30:
	.word	0x888
.Lfe4:
	.size	 LoopedTask_sub_81C8254,.Lfe4-LoopedTask_sub_81C8254
	.align	2, 0
	.globl	sub_81C82E4
	.type	 sub_81C82E4,function
	.thumb_func
sub_81C82E4:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	ldrb	r4, [r5, #0x1]
	lsl	r4, r4, #0xc
	ldrh	r0, [r5, #0x6]
	orr	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	ldrh	r2, [r5, #0x6]
	mov	r1, #0x11
	mov	r3, #0x1
	bl	sub_8199DF0
	ldrb	r0, [r5]
	ldrh	r2, [r5, #0x6]
	add	r2, r2, #0x1
	mov	r1, #0x44
	mov	r3, #0x1
	bl	sub_8199DF0
	ldrb	r0, [r5]
	add	r1, r5, #0
	add	r1, r1, #0x88
	bl	SetBgTilemapBuffer
	ldrb	r0, [r5]
	mov	r1, #0x20
	str	r1, [sp]
	str	r1, [sp, #0x4]
	add	r1, r4, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	ldrb	r0, [r5]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	ldrb	r0, [r5]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	ldrb	r0, [r5]
	ldrb	r1, [r5, #0x3]
	lsl	r1, r1, #0xb
	mov	r2, #0x2
	bl	ChangeBgY
	ldrb	r0, [r5]
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 sub_81C82E4,.Lfe5-sub_81C82E4
	.align	2, 0
	.globl	sub_81C835C
	.type	 sub_81C835C,function
	.thumb_func
sub_81C835C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4, #0x8]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x1
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_81C835C,.Lfe6-sub_81C835C
	.align	2, 0
	.globl	sub_81C837C
	.type	 sub_81C837C,function
	.thumb_func
sub_81C837C:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r3, r0, #0
	add	r5, r1, #0
	ldrh	r0, [r3, #0x2]
	ldrh	r4, [r3]
	sub	r2, r0, r4
	ldrh	r0, [r3, #0x8]
	cmp	r2, r0
	ble	.L35	@cond_branch
	add	r2, r0, #0
.L35:
	ldr	r0, [r3, #0x10]
	ldr	r3, [r3, #0xc]
	mov	r1, #0x0
	str	r1, [sp]
	str	r5, [sp, #0x4]
	add	r1, r4, #0
	bl	sub_81C83AC
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 sub_81C837C,.Lfe7-sub_81C837C
	.align	2, 0
	.globl	sub_81C83AC
	.type	 sub_81C83AC,function
	.thumb_func
sub_81C83AC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r1, [sp, #0x10]
	cmp	r2, #0
	beq	.L36	@cond_branch
	mov	r0, r5
	mul	r0, r0, r3
	add	r0, r4, r0
	str	r0, [r1, #0x1c]
	str	r3, [r1, #0x18]
	mov	r0, #0x0
	strh	r0, [r1, #0xc]
	strh	r2, [r1, #0xe]
	str	r5, [r1, #0x14]
	ldr	r0, [sp, #0xc]
	str	r0, [r1, #0x10]
	ldr	r0, .L38
	mov	r1, #0x5
	bl	CreateLoopedTask
.L36:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	LoopedTask_sub_81C83F0
.Lfe8:
	.size	 sub_81C83AC,.Lfe8-sub_81C83AC
	.align	2, 0
	.globl	sub_81C83E0
	.type	 sub_81C83E0,function
	.thumb_func
sub_81C83E0:
	push	{lr}
	ldr	r0, .L41
	bl	FuncIsActiveLoopedTask
	pop	{r1}
	bx	r1
.L42:
	.align	2, 0
.L41:
	.word	LoopedTask_sub_81C83F0
.Lfe9:
	.size	 sub_81C83E0,.Lfe9-sub_81C83E0
	.align	2, 0
	.globl	LoopedTask_sub_81C83F0
	.type	 LoopedTask_sub_81C83F0,function
	.thumb_func
LoopedTask_sub_81C83F0:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	mov	r0, #0x11
	bl	GetSubstructPtr
	add	r4, r0, #0
	cmp	r6, #0
	beq	.L45	@cond_branch
	cmp	r6, #0x1
	beq	.L51	@cond_branch
	b	.L52
.L45:
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0xc]
	add	r0, r0, r1
	ldr	r1, [r4, #0x10]
	add	r5, r0, r1
	mov	r0, #0xf
	and	r5, r5, r0
	ldr	r0, [r4, #0x1c]
	add	r7, r4, #0
	add	r7, r7, #0x48
	ldr	r2, [r4, #0x34]
	add	r1, r7, #0
	bl	_call_via_r2
	ldr	r3, [r4, #0x38]
	cmp	r3, #0
	beq	.L46	@cond_branch
	ldrh	r0, [r4, #0x8]
	ldr	r1, [r4, #0x14]
	add	r2, r5, #0
	bl	_call_via_r3
.L46:
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r4, #0x5]
	lsl	r2, r5, #0x4
	mov	r3, #0x1
	orr	r2, r2, r3
	str	r2, [sp]
	mov	r2, #0xff
	str	r2, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r2, r7, #0
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r4, #0xe]
	cmp	r0, r1
	bcc	.L47	@cond_branch
	ldr	r0, [r4, #0x38]
	cmp	r0, #0
	beq	.L48	@cond_branch
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L49
.L48:
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x2
	bl	CopyWindowToVram
.L49:
	mov	r0, #0x0
	b	.L55
.L47:
	ldr	r0, [r4, #0x1c]
	ldr	r1, [r4, #0x18]
	add	r0, r0, r1
	str	r0, [r4, #0x1c]
	ldr	r0, [r4, #0x14]
	add	r0, r0, #0x1
	str	r0, [r4, #0x14]
	mov	r0, #0x3
	b	.L55
.L51:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L52	@cond_branch
	mov	r0, #0x2
	b	.L55
.L52:
	mov	r0, #0x4
.L55:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 LoopedTask_sub_81C83F0,.Lfe10-LoopedTask_sub_81C83F0
	.align	2, 0
	.globl	ShouldShowUpArrow
	.type	 ShouldShowUpArrow,function
	.thumb_func
ShouldShowUpArrow:
	push	{lr}
	mov	r0, #0x11
	bl	GetSubstructPtr
	ldr	r1, .L58
	add	r0, r0, r1
	ldrh	r1, [r0]
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	pop	{r1}
	bx	r1
.L59:
	.align	2, 0
.L58:
	.word	0x888
.Lfe11:
	.size	 ShouldShowUpArrow,.Lfe11-ShouldShowUpArrow
	.align	2, 0
	.globl	ShouldShowDownArrow
	.type	 ShouldShowDownArrow,function
	.thumb_func
ShouldShowDownArrow:
	push	{lr}
	mov	r0, #0x11
	bl	GetSubstructPtr
	ldr	r1, .L62
	add	r0, r0, r1
	mov	r3, #0x0
	ldrh	r1, [r0]
	ldrh	r2, [r0, #0x8]
	add	r1, r1, r2
	ldrh	r0, [r0, #0x2]
	cmp	r1, r0
	bge	.L61	@cond_branch
	mov	r3, #0x1
.L61:
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.L63:
	.align	2, 0
.L62:
	.word	0x888
.Lfe12:
	.size	 ShouldShowDownArrow,.Lfe12-ShouldShowDownArrow
	.align	2, 0
	.globl	MatchCall_MoveWindow
	.type	 MatchCall_MoveWindow,function
	.thumb_func
MatchCall_MoveWindow:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	add	r4, r1, #0
	mov	r0, #0x11
	bl	GetSubstructPtr
	add	r7, r0, #0
	ldr	r0, .L71
	add	r5, r7, r0
	cmp	r6, #0
	bge	.L65	@cond_branch
	ldrh	r1, [r5]
	add	r0, r1, r6
	cmp	r0, #0
	bge	.L66	@cond_branch
	neg	r6, r1
.L66:
	cmp	r4, #0
	beq	.L68	@cond_branch
	ldr	r0, [r5, #0x10]
	add	r1, r1, r6
	neg	r2, r6
	ldr	r3, [r5, #0xc]
	str	r6, [sp]
	str	r7, [sp, #0x4]
	bl	sub_81C83AC
	b	.L68
.L72:
	.align	2, 0
.L71:
	.word	0x888
.L65:
	cmp	r4, #0
	beq	.L68	@cond_branch
	ldr	r2, .L73
	ldrh	r1, [r5]
	ldrh	r0, [r5, #0x8]
	add	r4, r1, r0
	str	r4, [r2]
	add	r0, r4, r6
	ldrh	r1, [r5, #0x2]
	cmp	r0, r1
	blt	.L70	@cond_branch
	sub	r6, r1, r4
.L70:
	ldr	r0, [r5, #0x10]
	ldr	r3, [r5, #0xc]
	ldrh	r1, [r5, #0x8]
	str	r1, [sp]
	str	r7, [sp, #0x4]
	add	r1, r4, #0
	add	r2, r6, #0
	bl	sub_81C83AC
.L68:
	add	r0, r6, #0
	add	r1, r7, #0
	bl	sub_81C8568
	ldrh	r0, [r5]
	add	r0, r0, r6
	strh	r0, [r5]
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	gUnknown_0203CF44
.Lfe13:
	.size	 MatchCall_MoveWindow,.Lfe13-MatchCall_MoveWindow
	.align	2, 0
	.globl	sub_81C8568
	.type	 sub_81C8568,function
	.thumb_func
sub_81C8568:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	ldrb	r0, [r4]
	bl	GetBgY
	str	r0, [r4, #0x20]
	lsl	r1, r5, #0xc
	add	r0, r0, r1
	str	r0, [r4, #0x24]
	cmp	r5, #0
	ble	.L76	@cond_branch
	mov	r0, #0x1
	b	.L78
.L76:
	mov	r0, #0x2
.L78:
	str	r0, [r4, #0x30]
	str	r5, [r4, #0x2c]
	ldr	r0, .L79
	mov	r1, #0x6
	bl	CreateLoopedTask
	str	r0, [r4, #0x28]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	LoopedTask_sub_81C85A0
.Lfe14:
	.size	 sub_81C8568,.Lfe14-sub_81C8568
	.align	2, 0
	.globl	LoopedTask_sub_81C85A0
	.type	 LoopedTask_sub_81C85A0,function
	.thumb_func
LoopedTask_sub_81C85A0:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r0, #0x11
	bl	GetSubstructPtr
	add	r4, r0, #0
	cmp	r5, #0
	beq	.L83	@cond_branch
	cmp	r5, #0x1
	beq	.L85	@cond_branch
	mov	r0, #0x4
	b	.L95
.L83:
	bl	sub_81C83E0
	cmp	r0, #0
	bne	.L92	@cond_branch
	mov	r0, #0x1
	b	.L95
.L85:
	mov	r6, #0x0
	ldrb	r0, [r4]
	bl	GetBgY
	add	r5, r0, #0
	ldrb	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	ldr	r2, [r4, #0x30]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	bl	ChangeBgY
	add	r1, r0, #0
	ldr	r0, [r4, #0x30]
	cmp	r0, #0x2
	bne	.L86	@cond_branch
	ldr	r2, [r4, #0x24]
	cmp	r5, r2
	bgt	.L88	@cond_branch
	ldr	r0, [r4, #0x20]
	cmp	r5, r0
	bgt	.L89	@cond_branch
.L88:
	cmp	r1, r2
	bgt	.L89	@cond_branch
	b	.L96
.L86:
	ldr	r2, [r4, #0x24]
	cmp	r5, r2
	blt	.L91	@cond_branch
	ldr	r0, [r4, #0x20]
	cmp	r5, r0
	blt	.L89	@cond_branch
.L91:
	cmp	r1, r2
	blt	.L89	@cond_branch
	mov	r6, #0x1
.L89:
	cmp	r6, #0
	beq	.L92	@cond_branch
.L96:
	ldr	r1, [r4, #0x2c]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, r1
	mov	r1, #0xf
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrb	r0, [r4]
	add	r1, r2, #0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x4
	b	.L95
.L92:
	mov	r0, #0x2
.L95:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 LoopedTask_sub_81C85A0,.Lfe15-LoopedTask_sub_81C85A0
	.align	2, 0
	.globl	IsMonListLoopedTaskActive
	.type	 IsMonListLoopedTaskActive,function
	.thumb_func
IsMonListLoopedTaskActive:
	push	{lr}
	mov	r0, #0x11
	bl	GetSubstructPtr
	ldr	r0, [r0, #0x28]
	bl	IsLoopedTaskActive
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 IsMonListLoopedTaskActive,.Lfe16-IsMonListLoopedTaskActive
	.align	2, 0
	.globl	GetMatchCallWindowStruct
	.type	 GetMatchCallWindowStruct,function
	.thumb_func
GetMatchCallWindowStruct:
	push	{lr}
	mov	r0, #0x11
	bl	GetSubstructPtr
	ldr	r1, .L99
	add	r0, r0, r1
	pop	{r1}
	bx	r1
.L100:
	.align	2, 0
.L99:
	.word	0x888
.Lfe17:
	.size	 GetMatchCallWindowStruct,.Lfe17-GetMatchCallWindowStruct
	.align	2, 0
	.globl	MatchCall_MoveCursorUp
	.type	 MatchCall_MoveCursorUp,function
	.thumb_func
MatchCall_MoveCursorUp:
	push	{lr}
	bl	GetMatchCallWindowStruct
	add	r1, r0, #0
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0
	beq	.L102	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	mov	r0, #0x1
	b	.L104
.L102:
	bl	ShouldShowUpArrow
	cmp	r0, #0
	bne	.L103	@cond_branch
	mov	r0, #0x0
	b	.L104
.L103:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x1
	bl	MatchCall_MoveWindow
	mov	r0, #0x2
.L104:
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 MatchCall_MoveCursorUp,.Lfe18-MatchCall_MoveCursorUp
	.align	2, 0
	.globl	MatchCall_MoveCursorDown
	.type	 MatchCall_MoveCursorDown,function
	.thumb_func
MatchCall_MoveCursorDown:
	push	{lr}
	bl	GetMatchCallWindowStruct
	add	r2, r0, #0
	ldrh	r1, [r2]
	ldrh	r3, [r2, #0x6]
	add	r1, r1, r3
	ldrh	r0, [r2, #0x2]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bge	.L110	@cond_branch
	ldrh	r0, [r2, #0x8]
	sub	r0, r0, #0x1
	cmp	r3, r0
	bge	.L107	@cond_branch
	add	r0, r3, #0x1
	strh	r0, [r2, #0x6]
	mov	r0, #0x1
	b	.L109
.L107:
	bl	ShouldShowDownArrow
	cmp	r0, #0
	bne	.L108	@cond_branch
.L110:
	mov	r0, #0x0
	b	.L109
.L108:
	mov	r0, #0x1
	mov	r1, #0x1
	bl	MatchCall_MoveWindow
	mov	r0, #0x2
.L109:
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 MatchCall_MoveCursorDown,.Lfe19-MatchCall_MoveCursorDown
	.align	2, 0
	.globl	MatchCall_PageUp
	.type	 MatchCall_PageUp,function
	.thumb_func
MatchCall_PageUp:
	push	{r4, lr}
	bl	GetMatchCallWindowStruct
	add	r4, r0, #0
	bl	ShouldShowUpArrow
	add	r1, r0, #0
	cmp	r1, #0
	beq	.L112	@cond_branch
	ldrh	r0, [r4]
	ldrh	r1, [r4, #0x8]
	cmp	r0, r1
	bcc	.L113	@cond_branch
	ldrh	r0, [r4, #0x8]
	b	.L114
.L113:
	ldrh	r0, [r4]
.L114:
	neg	r0, r0
	mov	r1, #0x1
	bl	MatchCall_MoveWindow
	mov	r0, #0x2
	b	.L117
.L112:
	ldrh	r0, [r4, #0x6]
	cmp	r0, #0
	bne	.L115	@cond_branch
	mov	r0, #0x0
	b	.L117
.L115:
	strh	r1, [r4, #0x6]
	mov	r0, #0x1
.L117:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 MatchCall_PageUp,.Lfe20-MatchCall_PageUp
	.align	2, 0
	.globl	MatchCall_PageDown
	.type	 MatchCall_PageDown,function
	.thumb_func
MatchCall_PageDown:
	push	{r4, lr}
	bl	GetMatchCallWindowStruct
	add	r4, r0, #0
	bl	ShouldShowDownArrow
	cmp	r0, #0
	beq	.L119	@cond_branch
	ldrh	r0, [r4]
	ldrh	r3, [r4, #0x8]
	add	r2, r0, r3
	ldrh	r1, [r4, #0x4]
	sub	r0, r1, r0
	cmp	r2, r1
	bgt	.L120	@cond_branch
	add	r0, r3, #0
.L120:
	mov	r1, #0x1
	bl	MatchCall_MoveWindow
	mov	r0, #0x2
	b	.L125
.L119:
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r4, #0x8]
	cmp	r0, r1
	bcc	.L122	@cond_branch
	ldrh	r1, [r4, #0x6]
	ldrh	r0, [r4, #0x8]
	b	.L123
.L122:
	ldrh	r1, [r4, #0x6]
	ldrh	r0, [r4, #0x2]
.L123:
	sub	r0, r0, #0x1
	cmp	r1, r0
	bge	.L124	@cond_branch
	strh	r0, [r4, #0x6]
	mov	r0, #0x1
	b	.L125
.L124:
	mov	r0, #0x0
.L125:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 MatchCall_PageDown,.Lfe21-MatchCall_PageDown
	.align	2, 0
	.globl	GetSelectedPokenavListIndex
	.type	 GetSelectedPokenavListIndex,function
	.thumb_func
GetSelectedPokenavListIndex:
	push	{lr}
	bl	GetMatchCallWindowStruct
	add	r1, r0, #0
	ldrh	r0, [r1]
	ldrh	r1, [r1, #0x6]
	add	r0, r0, r1
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 GetSelectedPokenavListIndex,.Lfe22-GetSelectedPokenavListIndex
	.align	2, 0
	.globl	GetMatchCallListTopIndex
	.type	 GetMatchCallListTopIndex,function
	.thumb_func
GetMatchCallListTopIndex:
	push	{lr}
	bl	GetMatchCallWindowStruct
	ldrh	r0, [r0]
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 GetMatchCallListTopIndex,.Lfe23-GetMatchCallListTopIndex
	.align	2, 0
	.globl	sub_81C877C
	.type	 sub_81C877C,function
	.thumb_func
sub_81C877C:
	push	{r4, lr}
	mov	r0, #0x11
	bl	GetSubstructPtr
	add	r4, r0, #0
	ldr	r0, .L129
	add	r1, r4, r0
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r0, .L129+0x4
	mov	r1, #0x6
	bl	CreateLoopedTask
	mov	r1, #0x8a
	lsl	r1, r1, #0x4
	add	r4, r4, r1
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	0x89c
	.word	LoopedTask_sub_81C8870
.Lfe24:
	.size	 sub_81C877C,.Lfe24-sub_81C877C
	.align	2, 0
	.globl	PrintCheckPageInfo
	.type	 PrintCheckPageInfo,function
	.thumb_func
PrintCheckPageInfo:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x11
	bl	GetSubstructPtr
	add	r5, r0, #0
	ldr	r0, .L132
	add	r1, r5, r0
	ldrh	r0, [r1]
	add	r0, r0, r4
	mov	r2, #0x0
	strh	r0, [r1]
	ldr	r1, .L132+0x4
	add	r0, r5, r1
	str	r2, [r0]
	ldr	r0, .L132+0x8
	mov	r1, #0x6
	bl	CreateLoopedTask
	mov	r1, #0x8a
	lsl	r1, r1, #0x4
	add	r5, r5, r1
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L133:
	.align	2, 0
.L132:
	.word	0x888
	.word	0x89c
	.word	LoopedTask_PrintCheckPageInfo
.Lfe25:
	.size	 PrintCheckPageInfo,.Lfe25-PrintCheckPageInfo
	.align	2, 0
	.globl	sub_81C87F0
	.type	 sub_81C87F0,function
	.thumb_func
sub_81C87F0:
	push	{r4, lr}
	mov	r0, #0x11
	bl	GetSubstructPtr
	add	r4, r0, #0
	ldr	r0, .L135
	add	r1, r4, r0
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r0, .L135+0x4
	mov	r1, #0x6
	bl	CreateLoopedTask
	mov	r1, #0x8a
	lsl	r1, r1, #0x4
	add	r4, r4, r1
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	0x89c
	.word	LoopedTask_sub_81C8A28
.Lfe26:
	.size	 sub_81C87F0,.Lfe26-sub_81C87F0
	.align	2, 0
	.globl	IsMatchCallListTaskActive
	.type	 IsMatchCallListTaskActive,function
	.thumb_func
IsMatchCallListTaskActive:
	push	{lr}
	mov	r0, #0x11
	bl	GetSubstructPtr
	mov	r1, #0x8a
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	IsLoopedTaskActive
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 IsMatchCallListTaskActive,.Lfe27-IsMatchCallListTaskActive
	.align	2, 0
	.globl	sub_81C8838
	.type	 sub_81C8838,function
	.thumb_func
sub_81C8838:
	push	{r4, lr}
	mov	r0, #0x11
	bl	GetSubstructPtr
	add	r4, r0, #0
	ldr	r0, .L139
	add	r2, r4, r0
	ldrh	r0, [r4, #0x8]
	ldrh	r1, [r2]
	ldrh	r3, [r2, #0x6]
	add	r1, r1, r3
	ldrh	r2, [r4, #0xa]
	add	r2, r2, r3
	mov	r3, #0xf
	and	r2, r2, r3
	ldr	r3, [r4, #0x38]
	bl	_call_via_r3
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x1
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L140:
	.align	2, 0
.L139:
	.word	0x888
.Lfe28:
	.size	 sub_81C8838,.Lfe28-sub_81C8838
	.align	2, 0
	.globl	LoopedTask_sub_81C8870
	.type	 LoopedTask_sub_81C8870,function
	.thumb_func
LoopedTask_sub_81C8870:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r0, #0x11
	bl	GetSubstructPtr
	add	r4, r0, #0
	cmp	r5, #0x4
	bhi	.L142	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L161
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L162:
	.align	2, 0
.L161:
	.word	.L155
	.align	2, 0
	.align	2, 0
.L155:
	.word	.L143
	.word	.L144
	.word	.L146
	.word	.L150
	.word	.L153
.L143:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ToggleMatchCallArrows
.L144:
	ldr	r0, .L163
	add	r5, r4, r0
	ldr	r1, .L163+0x4
	add	r0, r4, r1
	ldr	r1, [r5]
	ldrh	r0, [r0]
	cmp	r1, r0
	beq	.L145	@cond_branch
	add	r0, r4, #0
	mov	r2, #0x1
	bl	sub_81C8B70
.L145:
	ldr	r0, [r5]
	add	r0, r0, #0x1
	str	r0, [r5]
.L160:
	mov	r0, #0x0
	b	.L157
.L164:
	.align	2, 0
.L163:
	.word	0x89c
	.word	0x88e
.L146:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L159	@cond_branch
	ldr	r2, .L165
	add	r0, r4, r2
	sub	r2, r2, #0xc
	add	r1, r4, r2
	ldr	r3, [r0]
	ldrh	r1, [r1]
	cmp	r3, r1
	beq	.L148	@cond_branch
	mov	r0, #0x6
	b	.L157
.L166:
	.align	2, 0
.L165:
	.word	0x89c
.L148:
	ldr	r0, .L167
	add	r1, r4, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L160	@cond_branch
	add	r2, r0, #0
	add	r0, r4, #0
	add	r1, r3, #0
	bl	sub_81C8B70
	b	.L160
.L168:
	.align	2, 0
.L167:
	.word	0x88e
.L150:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L159	@cond_branch
	ldr	r2, .L169
	add	r1, r4, r2
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L142	@cond_branch
	mov	r1, #0x0
	bl	MatchCall_MoveWindow
	b	.L160
.L170:
	.align	2, 0
.L169:
	.word	0x88e
.L153:
	bl	IsMonListLoopedTaskActive
	add	r1, r0, #0
	cmp	r1, #0
	beq	.L154	@cond_branch
.L159:
	mov	r0, #0x2
	b	.L157
.L154:
	ldr	r2, .L171
	add	r0, r4, r2
	strh	r1, [r0]
.L142:
	mov	r0, #0x4
.L157:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L172:
	.align	2, 0
.L171:
	.word	0x88e
.Lfe29:
	.size	 LoopedTask_sub_81C8870,.Lfe29-LoopedTask_sub_81C8870
	.align	2, 0
	.globl	LoopedTask_PrintCheckPageInfo
	.type	 LoopedTask_PrintCheckPageInfo,function
	.thumb_func
LoopedTask_PrintCheckPageInfo:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r0, #0x11
	bl	GetSubstructPtr
	add	r4, r0, #0
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L174	@cond_branch
	mov	r0, #0x2
	b	.L186
.L174:
	cmp	r5, #0x7
	bhi	.L184	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L187
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L188:
	.align	2, 0
.L187:
	.word	.L185
	.align	2, 0
	.align	2, 0
.L185:
	.word	.L176
	.word	.L177
	.word	.L178
	.word	.L179
	.word	.L180
	.word	.L181
	.word	.L182
	.word	.L183
.L176:
	ldr	r1, .L189
	add	r0, r4, r1
	add	r1, r4, #0
	bl	sub_81C8CB4
	b	.L175
.L190:
	.align	2, 0
.L189:
	.word	0x888
.L177:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	PrintMatchCallFieldNames
	b	.L175
.L178:
	ldr	r1, .L191
	add	r0, r4, r1
	add	r1, r4, #0
	mov	r2, #0x0
	bl	PrintMatchCallFlavorText
	b	.L175
.L192:
	.align	2, 0
.L191:
	.word	0x888
.L179:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	PrintMatchCallFieldNames
	b	.L175
.L180:
	ldr	r1, .L193
	add	r0, r4, r1
	add	r1, r4, #0
	mov	r2, #0x1
	bl	PrintMatchCallFlavorText
	b	.L175
.L194:
	.align	2, 0
.L193:
	.word	0x888
.L181:
	add	r0, r4, #0
	mov	r1, #0x2
	bl	PrintMatchCallFieldNames
	b	.L175
.L182:
	ldr	r1, .L195
	add	r0, r4, r1
	add	r1, r4, #0
	mov	r2, #0x2
	bl	PrintMatchCallFlavorText
	b	.L175
.L196:
	.align	2, 0
.L195:
	.word	0x888
.L183:
	ldr	r1, .L197
	add	r0, r4, r1
	add	r1, r4, #0
	mov	r2, #0x3
	bl	PrintMatchCallFlavorText
	b	.L175
.L198:
	.align	2, 0
.L197:
	.word	0x888
.L184:
	mov	r0, #0x4
	b	.L186
.L175:
	mov	r0, #0x0
.L186:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 LoopedTask_PrintCheckPageInfo,.Lfe30-LoopedTask_PrintCheckPageInfo
	.align	2, 0
	.globl	LoopedTask_sub_81C8A28
	.type	 LoopedTask_sub_81C8A28,function
	.thumb_func
LoopedTask_sub_81C8A28:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L223	@cond_branch
	mov	r0, #0x11
	bl	GetSubstructPtr
	add	r4, r0, #0
	ldr	r0, .L225
	add	r6, r4, r0
	add	r2, r4, #0
	cmp	r5, #0x6
	bls	.LCB1653
	b	.L201	@long jump
.LCB1653:
	lsl	r0, r5, #0x2
	ldr	r1, .L225+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L226:
	.align	2, 0
.L225:
	.word	0x888
	.word	.L218
	.align	2, 0
	.align	2, 0
.L218:
	.word	.L202
	.word	.L203
	.word	.L209
	.word	.L210
	.word	.L212
	.word	.L213
	.word	.L217
.L202:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_81C8D4C
	mov	r0, #0x0
	b	.L220
.L203:
	ldr	r1, .L227
	add	r7, r4, r1
	ldr	r0, [r7]
	add	r1, r0, #0x1
	str	r1, [r7]
	mov	r3, #0x89
	lsl	r3, r3, #0x4
	add	r0, r4, r3
	ldrh	r0, [r0]
	cmp	r1, r0
	bge	.L204	@cond_branch
	add	r0, r2, #0
	mov	r2, #0x1
	bl	sub_81C8B70
.L223:
	mov	r0, #0x2
	b	.L220
.L228:
	.align	2, 0
.L227:
	.word	0x89c
.L204:
	mov	r0, #0x0
	str	r0, [r7]
	ldrh	r0, [r6, #0x2]
	ldrh	r1, [r6, #0x8]
	cmp	r0, r1
	bhi	.L205	@cond_branch
	ldrh	r0, [r6]
	cmp	r0, #0
	beq	.L215	@cond_branch
	add	r4, r0, #0
	b	.L222
.L205:
	ldrh	r1, [r6]
	ldrh	r0, [r6, #0x8]
	add	r4, r1, r0
	ldrh	r1, [r6, #0x2]
	cmp	r4, r1
	ble	.L215	@cond_branch
	sub	r4, r4, r1
.L222:
	neg	r5, r4
	add	r0, r2, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	sub_81C8B70
	strh	r4, [r6, #0x6]
	str	r5, [r7]
	mov	r0, #0x0
	b	.L220
.L209:
	ldr	r2, .L229
	add	r0, r4, r2
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	MatchCall_MoveWindow
	mov	r0, #0x0
	b	.L220
.L230:
	.align	2, 0
.L229:
	.word	0x89c
.L210:
	bl	IsMonListLoopedTaskActive
	add	r1, r0, #0
	cmp	r1, #0
	bne	.L223	@cond_branch
	ldr	r3, .L231
	add	r0, r4, r3
	str	r1, [r0]
.L224:
	mov	r0, #0x1
	b	.L220
.L232:
	.align	2, 0
.L231:
	.word	0x89c
.L212:
	ldr	r0, [r6, #0x10]
	ldrh	r1, [r6]
	ldr	r3, .L233
	add	r2, r4, r3
	ldr	r2, [r2]
	add	r1, r1, r2
	ldr	r3, [r6, #0xc]
	str	r2, [sp]
	str	r4, [sp, #0x4]
	mov	r2, #0x1
	bl	sub_81C83AC
	mov	r0, #0x0
	b	.L220
.L234:
	.align	2, 0
.L233:
	.word	0x89c
.L213:
	bl	sub_81C83E0
	cmp	r0, #0
	bne	.L223	@cond_branch
	ldr	r0, .L235
	add	r1, r4, r0
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldrh	r1, [r6, #0x2]
	cmp	r0, r1
	bge	.L224	@cond_branch
	ldrh	r6, [r6, #0x8]
	cmp	r0, r6
	bge	.L224	@cond_branch
.L215:
	mov	r0, #0x9
	b	.L220
.L236:
	.align	2, 0
.L235:
	.word	0x89c
.L217:
	add	r0, r2, #0
	mov	r1, #0x0
	bl	ToggleMatchCallArrows
.L201:
	mov	r0, #0x4
.L220:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe31:
	.size	 LoopedTask_sub_81C8A28,.Lfe31-LoopedTask_sub_81C8A28
	.align	2, 0
	.globl	sub_81C8B70
	.type	 sub_81C8B70,function
	.thumb_func
sub_81C8B70:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	mov	r9, r0
	add	r7, r1, #0
	add	r6, r2, #0
	ldrb	r0, [r0, #0x8]
	mov	r1, #0x7
	bl	GetWindowAttribute
	mov	sl, r0
	mov	r1, r9
	ldrb	r0, [r1, #0x4]
	lsl	r3, r0, #0x6
	ldrh	r0, [r1, #0xa]
	add	r7, r0, r7
	mov	r0, #0xf
	and	r7, r7, r0
	add	r0, r7, r6
	cmp	r0, #0x10
	bgt	.L238	@cond_branch
	ldr	r0, .L245
	str	r0, [sp]
	mov	r1, r7
	mul	r1, r1, r3
	add	r1, r1, sl
	mov	r2, r6
	mul	r2, r2, r3
	lsr	r2, r2, #0x2
	ldr	r0, .L245+0x4
	and	r2, r2, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	orr	r2, r2, r0
	mov	r0, sp
	bl	CpuFastSet
	mov	r1, r9
	ldrb	r0, [r1, #0x8]
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L239
.L246:
	.align	2, 0
.L245:
	.word	0x11111111
	.word	0x1fffff
.L238:
	mov	r2, #0x10
	sub	r2, r2, r7
	sub	r0, r6, r2
	mov	r8, r0
	ldr	r1, .L247
	str	r1, [sp, #0x4]
	add	r0, sp, #0x4
	mov	r1, r7
	mul	r1, r1, r3
	add	r1, r1, sl
	mul	r2, r2, r3
	lsr	r2, r2, #0x2
	ldr	r5, .L247+0x4
	and	r2, r2, r5
	mov	r4, #0x80
	lsl	r4, r4, #0x11
	orr	r2, r2, r4
	str	r3, [sp, #0xc]
	bl	CpuFastSet
	ldr	r0, .L247
	str	r0, [sp, #0x8]
	add	r0, sp, #0x8
	ldr	r3, [sp, #0xc]
	mov	r2, r8
	mul	r2, r2, r3
	lsr	r2, r2, #0x2
	and	r2, r2, r5
	orr	r2, r2, r4
	mov	r1, sl
	bl	CpuFastSet
	mov	r1, r9
	ldrb	r0, [r1, #0x8]
	mov	r1, #0x2
	bl	CopyWindowToVram
.L239:
	sub	r6, r6, #0x1
	mov	r0, #0x1
	neg	r0, r0
	cmp	r6, r0
	beq	.L241	@cond_branch
	mov	r5, #0xf
	add	r4, r0, #0
.L243:
	mov	r1, r9
	ldrh	r0, [r1, #0x8]
	add	r1, r7, #0
	bl	ClearRematchPokeballIcon
	add	r7, r7, #0x1
	and	r7, r7, r5
	sub	r6, r6, #0x1
	cmp	r6, r4
	bne	.L243	@cond_branch
.L241:
	mov	r1, r9
	ldrb	r0, [r1, #0x8]
	mov	r1, #0x1
	bl	CopyWindowToVram
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L248:
	.align	2, 0
.L247:
	.word	0x11111111
	.word	0x1fffff
.Lfe32:
	.size	 sub_81C8B70,.Lfe32-sub_81C8B70
	.align	2, 0
	.globl	sub_81C8C64
	.type	 sub_81C8C64,function
	.thumb_func
sub_81C8C64:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	ldrb	r0, [r5, #0x8]
	mov	r1, #0x0
	bl	GetWindowAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBgTilemapBuffer
	add	r2, r0, #0
	ldrh	r0, [r5, #0xa]
	lsl	r0, r0, #0x6
	ldrb	r1, [r5, #0x2]
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	sub	r0, r0, #0x2
	add	r2, r2, r0
	cmp	r4, #0
	beq	.L250	@cond_branch
	ldrb	r0, [r5, #0x1]
	lsl	r0, r0, #0xc
	ldrh	r1, [r5, #0x6]
	add	r1, r1, #0x1
	b	.L252
.L250:
	ldrb	r0, [r5, #0x1]
	lsl	r0, r0, #0xc
	ldrh	r1, [r5, #0x6]
.L252:
	orr	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	strh	r1, [r2]
	add	r0, r2, #0
	add	r0, r0, #0x40
	strh	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 sub_81C8C64,.Lfe33-sub_81C8C64
	.section .rodata
.LC13:
	.byte	0x0
	.byte	0x2
	.byte	0x5
.text
	.align	2, 0
	.globl	sub_81C8CB4
	.type	 sub_81C8CB4,function
	.thumb_func
sub_81C8CB4:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	add	r4, r1, #0
	ldr	r1, .L254
	add	r0, sp, #0xc
	mov	r2, #0x3
	bl	memcpy
	ldrh	r1, [r5]
	ldr	r0, [r5, #0xc]
	mul	r1, r1, r0
	ldr	r0, [r5, #0x10]
	add	r0, r0, r1
	add	r6, r4, #0
	add	r6, r6, #0x48
	ldr	r2, [r4, #0x34]
	add	r1, r6, #0
	bl	_call_via_r2
	ldrh	r0, [r4, #0x8]
	ldrh	r1, [r5]
	ldrh	r2, [r4, #0xa]
	ldr	r3, [r4, #0x38]
	bl	_call_via_r3
	ldrb	r0, [r4, #0x8]
	ldrh	r3, [r4, #0xa]
	lsl	r3, r3, #0x14
	lsr	r3, r3, #0x10
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x3
	str	r1, [sp]
	mov	r1, #0x10
	str	r1, [sp, #0x4]
	mov	r1, #0x44
	mov	r2, #0x0
	bl	FillWindowPixelRect
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r4, #0x5]
	ldrh	r3, [r4, #0xa]
	lsl	r3, r3, #0x4
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r2, sp, #0xc
	str	r2, [sp]
	mov	r2, #0x1
	neg	r2, r2
	str	r2, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r2, #0x8
	bl	AddTextPrinterParameterized3
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_81C8C64
	ldrh	r0, [r4, #0x8]
	ldrh	r3, [r4, #0xa]
	lsl	r3, r3, #0x1
	ldrb	r1, [r4, #0x4]
	str	r1, [sp]
	mov	r1, #0x2
	str	r1, [sp, #0x4]
	mov	r1, #0x3
	mov	r2, #0x0
	bl	CopyWindowRectToVram
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L255:
	.align	2, 0
.L254:
	.word	.LC13
.Lfe34:
	.size	 sub_81C8CB4,.Lfe34-sub_81C8CB4
	.align	2, 0
	.globl	sub_81C8D4C
	.type	 sub_81C8D4C,function
	.thumb_func
sub_81C8D4C:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r1, #0
	ldrh	r2, [r0]
	ldr	r1, [r0, #0xc]
	mul	r1, r1, r2
	ldr	r0, [r0, #0x10]
	add	r0, r0, r1
	add	r5, r4, #0
	add	r5, r5, #0x48
	ldr	r2, [r4, #0x34]
	add	r1, r5, #0
	bl	_call_via_r2
	ldrb	r0, [r4, #0x8]
	ldrh	r3, [r4, #0xa]
	lsl	r3, r3, #0x14
	lsr	r3, r3, #0x10
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x3
	str	r1, [sp]
	mov	r1, #0x10
	str	r1, [sp, #0x4]
	mov	r1, #0x11
	mov	r2, #0x0
	bl	FillWindowPixelRect
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r4, #0x5]
	ldrh	r2, [r4, #0xa]
	lsl	r2, r2, #0x4
	add	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp]
	mov	r2, #0xff
	str	r2, [sp, #0x4]
	mov	r2, #0x0
	str	r2, [sp, #0x8]
	add	r2, r5, #0
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	add	r0, r4, #0
	mov	r1, #0x0
	bl	sub_81C8C64
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 sub_81C8D4C,.Lfe35-sub_81C8D4C
	.section .rodata
	.align	2, 0
.LC15:
	.word	gText_PokenavMatchCall_Strategy
	.word	gText_PokenavMatchCall_TrainerPokemon
	.word	gText_PokenavMatchCall_SelfIntroduction
.LC17:
	.byte	0x1
	.byte	0x4
	.byte	0x5
.text
	.align	2, 0
	.globl	PrintMatchCallFieldNames
	.type	 PrintMatchCallFieldNames,function
	.thumb_func
PrintMatchCallFieldNames:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x1c
	add	r6, r0, #0
	mov	r8, r1
	add	r1, sp, #0xc
	ldr	r0, .L258
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	add	r0, sp, #0x18
	mov	r9, r0
	ldr	r1, .L258+0x4
	mov	r2, #0x3
	bl	memcpy
	ldrh	r4, [r6, #0xa]
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, #0x1
	add	r4, r4, r0
	mov	r0, #0xf
	and	r4, r4, r0
	ldrb	r0, [r6, #0x8]
	lsl	r5, r4, #0x4
	add	r3, r5, #0
	ldrb	r1, [r6, #0x4]
	str	r1, [sp]
	mov	r1, #0x10
	str	r1, [sp, #0x4]
	mov	r1, #0x11
	mov	r2, #0x0
	bl	FillWindowPixelRect
	ldrb	r0, [r6, #0x8]
	mov	r1, #0x1
	orr	r5, r5, r1
	mov	r2, r9
	str	r2, [sp]
	sub	r1, r1, #0x2
	str	r1, [sp, #0x4]
	mov	r3, r8
	lsl	r3, r3, #0x2
	mov	r8, r3
	mov	r1, sp
	add	r1, r1, r8
	add	r1, r1, #0xc
	ldr	r1, [r1]
	str	r1, [sp, #0x8]
	mov	r1, #0x7
	mov	r2, #0x2
	add	r3, r5, #0
	bl	AddTextPrinterParameterized3
	ldrh	r0, [r6, #0x8]
	lsl	r4, r4, #0x1
	ldrb	r1, [r6, #0x4]
	str	r1, [sp]
	mov	r1, #0x2
	str	r1, [sp, #0x4]
	mov	r2, #0x0
	add	r3, r4, #0
	bl	CopyWindowRectToVram
	add	sp, sp, #0x1c
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L259:
	.align	2, 0
.L258:
	.word	.LC15
	.word	.LC17
.Lfe36:
	.size	 PrintMatchCallFieldNames,.Lfe36-PrintMatchCallFieldNames
	.section .rodata
	.type	 lineOffsets.111,object
	.size	 lineOffsets.111,4
lineOffsets.111:
	.byte	0x2
	.byte	0x4
	.byte	0x6
	.byte	0x7
.text
	.align	2, 0
	.type	 PrintMatchCallFlavorText,function
	.thumb_func
PrintMatchCallFlavorText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	add	r7, r1, #0
	add	r1, r2, #0
	ldrh	r3, [r7, #0xa]
	ldr	r2, .L262
	add	r2, r1, r2
	ldrb	r2, [r2]
	add	r6, r3, r2
	mov	r2, #0xf
	and	r6, r6, r2
	ldrh	r0, [r0]
	bl	GetMatchCallFlavorText
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L261	@cond_branch
	ldrh	r0, [r7, #0x8]
	lsl	r4, r6, #0x1
	ldrb	r3, [r7, #0x4]
	sub	r3, r3, #0x1
	mov	r1, #0x2
	mov	r8, r1
	str	r1, [sp]
	mov	r1, #0x1
	add	r2, r4, #0
	bl	sub_81DB620
	ldrb	r0, [r7, #0x8]
	lsl	r1, r6, #0x4
	mov	r2, #0x1
	orr	r1, r1, r2
	str	r1, [sp]
	mov	r1, #0xff
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x7
	add	r2, r5, #0
	mov	r3, #0x2
	bl	AddTextPrinterParameterized
	ldrh	r0, [r7, #0x8]
	ldrb	r1, [r7, #0x4]
	str	r1, [sp]
	mov	r1, r8
	str	r1, [sp, #0x4]
	mov	r1, #0x2
	mov	r2, #0x0
	add	r3, r4, #0
	bl	CopyWindowRectToVram
.L261:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L263:
	.align	2, 0
.L262:
	.word	lineOffsets.111
.Lfe37:
	.size	 PrintMatchCallFlavorText,.Lfe37-PrintMatchCallFlavorText
	.section .rodata
	.align	2, 0
	.type	 sMatchcallArrowSpriteSheets,object
sMatchcallArrowSpriteSheets:
	.word	sMatchcallArrowSpriteSheetData
	.short	0xc0
	.short	0xa
	.size	 sMatchcallArrowSpriteSheets,8
	.align	2, 0
	.type	 sMatchcallArrowPalettes,object
sMatchcallArrowPalettes:
	.word	sMatchcallArrowPaletteData
	.short	0x14
	.space	2
	.space	8
	.size	 sMatchcallArrowPalettes,16
	.align	2, 0
	.type	 sMatchCallRightArrowSpriteOam,object
	.size	 sMatchCallRightArrowSpriteOam,8
sMatchCallRightArrowSpriteOam:
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.align	2, 0
	.type	 sMatchCallRightArrowSprite,object
	.size	 sMatchCallRightArrowSprite,24
sMatchCallRightArrowSprite:
	.short	0xa
	.short	0x14
	.word	sMatchCallRightArrowSpriteOam
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_MatchCallRightArrow
	.align	2, 0
	.type	 sMatchCallUpDownArrowSpriteOam,object
	.size	 sMatchCallUpDownArrowSpriteOam,8
sMatchCallUpDownArrowSpriteOam:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.space	2
	.align	2, 0
	.type	 sMatchCallUpDownArrowSprite,object
	.size	 sMatchCallUpDownArrowSprite,24
sMatchCallUpDownArrowSprite:
	.short	0xa
	.short	0x14
	.word	sMatchCallUpDownArrowSpriteOam
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
.text
	.align	2, 0
	.globl	sub_81C8ED0
	.type	 sub_81C8ED0,function
	.thumb_func
sub_81C8ED0:
	push	{r4, r5, lr}
	mov	r5, #0x0
	ldr	r4, .L270
.L268:
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheet
	add	r4, r4, #0x8
	add	r5, r5, #0x1
	cmp	r5, #0
	beq	.L268	@cond_branch
	ldr	r0, .L270+0x4
	bl	Pokenav_AllocAndLoadPalettes
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L271:
	.align	2, 0
.L270:
	.word	sMatchcallArrowSpriteSheets
	.word	sMatchcallArrowPalettes
.Lfe38:
	.size	 sub_81C8ED0,.Lfe38-sub_81C8ED0
	.align	2, 0
	.globl	CreateMatchCallArrowSprites
	.type	 CreateMatchCallArrowSprites,function
	.thumb_func
CreateMatchCallArrowSprites:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r0, .L273
	ldrb	r1, [r5, #0x2]
	lsl	r1, r1, #0x3
	add	r1, r1, #0x3
	ldrb	r2, [r5, #0x3]
	add	r2, r2, #0x1
	lsl	r2, r2, #0x3
	mov	r3, #0x7
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r1, .L273+0x4
	mov	r8, r1
	add	r0, r0, r8
	str	r0, [r5, #0x3c]
	ldrb	r6, [r5, #0x2]
	lsl	r6, r6, #0x3
	ldrb	r0, [r5, #0x4]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x2
	ldr	r3, .L273+0x8
	mov	sl, r3
	add	r6, r6, r0
	ldrb	r2, [r5, #0x3]
	lsl	r2, r2, #0x3
	ldrh	r0, [r4, #0x8]
	lsl	r0, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r0, sl
	add	r1, r6, #0
	mov	r3, #0x7
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r2, r3, #0x4
	add	r2, r2, r3
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	str	r2, [r5, #0x44]
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x2
	ldr	r0, .L273+0xc
	mov	r9, r0
	mov	r0, r9
	and	r1, r1, r0
	ldr	r4, .L273+0x10
	add	r0, r4, #0
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldr	r1, [r5, #0x44]
	ldr	r0, .L273+0x14
	str	r0, [r1, #0x1c]
	ldrb	r2, [r5, #0x3]
	lsl	r2, r2, #0x3
	mov	r0, sl
	add	r1, r6, #0
	mov	r3, #0x7
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	str	r1, [r5, #0x40]
	ldrh	r2, [r1, #0x4]
	lsl	r0, r2, #0x16
	lsr	r0, r0, #0x16
	add	r0, r0, #0x4
	mov	r3, r9
	and	r0, r0, r3
	and	r4, r4, r2
	orr	r4, r4, r0
	strh	r4, [r1, #0x4]
	ldr	r1, [r5, #0x40]
	ldr	r0, .L273+0x18
	str	r0, [r1, #0x1c]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L274:
	.align	2, 0
.L273:
	.word	sMatchCallRightArrowSprite
	.word	gSprites
	.word	sMatchCallUpDownArrowSprite
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_MatchCallDownArrow
	.word	SpriteCB_MatchCallUpArrow
.Lfe39:
	.size	 CreateMatchCallArrowSprites,.Lfe39-CreateMatchCallArrowSprites
	.align	2, 0
	.globl	DestroyMatchCallListArrows
	.type	 DestroyMatchCallListArrows,function
	.thumb_func
DestroyMatchCallListArrows:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x3c]
	bl	DestroySprite
	ldr	r0, [r4, #0x40]
	bl	DestroySprite
	ldr	r0, [r4, #0x44]
	bl	DestroySprite
	mov	r0, #0xa
	bl	FreeSpriteTilesByTag
	mov	r0, #0x14
	bl	FreeSpritePaletteByTag
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 DestroyMatchCallListArrows,.Lfe40-DestroyMatchCallListArrows
	.align	2, 0
	.globl	ToggleMatchCallArrows
	.type	 ToggleMatchCallArrows,function
	.thumb_func
ToggleMatchCallArrows:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	cmp	r4, #0
	beq	.L277	@cond_branch
	ldr	r2, [r5, #0x3c]
	ldr	r1, .L279
	str	r1, [r2, #0x1c]
	ldr	r0, [r5, #0x40]
	str	r1, [r0, #0x1c]
	ldr	r0, [r5, #0x44]
	str	r1, [r0, #0x1c]
	b	.L278
.L280:
	.align	2, 0
.L279:
	.word	SpriteCallbackDummy
.L277:
	ldr	r2, [r5, #0x3c]
	ldr	r0, .L281
	str	r0, [r2, #0x1c]
	ldr	r1, [r5, #0x40]
	ldr	r0, .L281+0x4
	str	r0, [r1, #0x1c]
	ldr	r1, [r5, #0x44]
	ldr	r0, .L281+0x8
	str	r0, [r1, #0x1c]
.L278:
	add	r3, r2, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r4, r4, r0
	lsl	r4, r4, #0x2
	ldrb	r2, [r3]
	mov	r1, #0x5
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r3]
	ldr	r2, [r5, #0x40]
	add	r2, r2, #0x3e
	ldrb	r3, [r2]
	add	r0, r1, #0
	and	r0, r0, r3
	orr	r0, r0, r4
	strb	r0, [r2]
	ldr	r0, [r5, #0x44]
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	and	r1, r1, r2
	orr	r1, r1, r4
	strb	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L282:
	.align	2, 0
.L281:
	.word	SpriteCB_MatchCallRightArrow
	.word	SpriteCB_MatchCallUpArrow
	.word	SpriteCB_MatchCallDownArrow
.Lfe41:
	.size	 ToggleMatchCallArrows,.Lfe41-ToggleMatchCallArrows
	.align	2, 0
	.globl	SpriteCB_MatchCallRightArrow
	.type	 SpriteCB_MatchCallRightArrow,function
	.thumb_func
SpriteCB_MatchCallRightArrow:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x11
	bl	GetSubstructPtr
	ldr	r1, .L284
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x26]
	pop	{r4}
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	0x88e
.Lfe42:
	.size	 SpriteCB_MatchCallRightArrow,.Lfe42-SpriteCB_MatchCallRightArrow
	.align	2, 0
	.globl	SpriteCB_MatchCallDownArrow
	.type	 SpriteCB_MatchCallDownArrow,function
	.thumb_func
SpriteCB_MatchCallDownArrow:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L287	@cond_branch
	bl	ShouldShowDownArrow
	cmp	r0, #0
	beq	.L287	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	b	.L290
.L287:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
.L290:
	strb	r0, [r2]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L289	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	mov	r1, #0x7
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x26]
.L289:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 SpriteCB_MatchCallDownArrow,.Lfe43-SpriteCB_MatchCallDownArrow
	.align	2, 0
	.globl	SpriteCB_MatchCallUpArrow
	.type	 SpriteCB_MatchCallUpArrow,function
	.thumb_func
SpriteCB_MatchCallUpArrow:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L292	@cond_branch
	bl	ShouldShowUpArrow
	cmp	r0, #0
	beq	.L292	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	b	.L295
.L292:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
.L295:
	strb	r0, [r2]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L294	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	mov	r1, #0x7
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	neg	r0, r0
	strh	r0, [r4, #0x26]
.L294:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 SpriteCB_MatchCallUpArrow,.Lfe44-SpriteCB_MatchCallUpArrow
	.align	2, 0
	.globl	ToggleMatchCallVerticalArrows
	.type	 ToggleMatchCallVerticalArrows,function
	.thumb_func
ToggleMatchCallVerticalArrows:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x11
	bl	GetSubstructPtr
	ldr	r1, [r0, #0x40]
	strh	r4, [r1, #0x3c]
	ldr	r0, [r0, #0x44]
	strh	r4, [r0, #0x3c]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 ToggleMatchCallVerticalArrows,.Lfe45-ToggleMatchCallVerticalArrows
	.align	2, 0
	.globl	InitMatchCallWindowState
	.type	 InitMatchCallWindowState,function
	.thumb_func
InitMatchCallWindowState:
	push	{r4, r5, lr}
	add	r2, r0, #0
	ldr	r0, [r1]
	str	r0, [r2, #0x10]
	ldrh	r4, [r1, #0x6]
	mov	r5, #0x0
	strh	r4, [r2]
	ldrh	r3, [r1, #0x4]
	strh	r3, [r2, #0x2]
	ldrb	r0, [r1, #0x8]
	str	r0, [r2, #0xc]
	ldrb	r1, [r1, #0xc]
	strh	r1, [r2, #0x8]
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bcc	.L298	@cond_branch
	strh	r5, [r2]
	strh	r5, [r2, #0x4]
	strh	r4, [r2, #0x6]
	b	.L299
.L298:
	sub	r0, r3, r1
	strh	r0, [r2, #0x4]
	ldrh	r1, [r2]
	ldrh	r0, [r2, #0x8]
	add	r1, r1, r0
	ldrh	r0, [r2, #0x2]
	cmp	r1, r0
	ble	.L300	@cond_branch
	sub	r0, r1, r0
	strh	r0, [r2, #0x6]
	sub	r0, r4, r0
	strh	r0, [r2]
	b	.L299
.L300:
	strh	r5, [r2, #0x6]
.L299:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 InitMatchCallWindowState,.Lfe46-InitMatchCallWindowState
	.align	2, 0
	.globl	CopyPokenavListMenuTemplate
	.type	 CopyPokenavListMenuTemplate,function
	.thumb_func
CopyPokenavListMenuTemplate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	add	r7, r0, #0
	ldr	r4, [r1]
	lsl	r4, r4, #0x1e
	lsr	r0, r4, #0x1e
	mov	r1, #0x0
	mov	r9, r1
	strb	r0, [r7]
	strh	r3, [r7, #0x6]
	ldr	r0, [r2, #0x10]
	str	r0, [r7, #0x34]
	ldr	r0, [r2, #0x14]
	str	r0, [r7, #0x38]
	ldrb	r6, [r2, #0xd]
	strb	r6, [r7, #0x1]
	ldrb	r1, [r2, #0x9]
	strb	r1, [r7, #0x2]
	ldrb	r0, [r2, #0xb]
	strb	r0, [r7, #0x3]
	ldrb	r5, [r2, #0xa]
	strb	r5, [r7, #0x4]
	ldrb	r0, [r2, #0xe]
	strb	r0, [r7, #0x5]
	lsr	r4, r4, #0x1e
	ldr	r2, .L305
	mov	r8, r2
	ldr	r0, [sp]
	and	r0, r0, r2
	orr	r0, r0, r4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x10
	ldr	r2, .L305+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	ldr	r1, .L305+0x8
	and	r0, r0, r1
	lsl	r5, r5, #0x18
	ldr	r1, .L305+0xc
	and	r0, r0, r1
	orr	r0, r0, r5
	str	r0, [sp]
	ldr	r0, [sp, #0x4]
	mov	r1, r8
	and	r0, r0, r1
	mov	r1, #0x20
	orr	r0, r0, r1
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x10
	and	r0, r0, r2
	orr	r0, r0, r6
	add	r3, r3, #0x2
	lsl	r3, r3, #0x10
	ldr	r1, .L305+0x10
	and	r0, r0, r1
	orr	r0, r0, r3
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	AddWindow
	strh	r0, [r7, #0x8]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xff
	beq	.L303	@cond_branch
	mov	r2, r9
	strh	r2, [r7, #0xa]
	mov	r0, r9
	str	r0, [r7, #0x3c]
	str	r0, [r7, #0x40]
	str	r0, [r7, #0x44]
	mov	r0, #0x1
	b	.L304
.L306:
	.align	2, 0
.L305:
	.word	-0x100
	.word	-0xff01
	.word	-0xff0001
	.word	0xffffff
	.word	0xffff
.L303:
	mov	r0, #0x0
.L304:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 CopyPokenavListMenuTemplate,.Lfe47-CopyPokenavListMenuTemplate
.text
	.align	2, 0

