@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sTransitionTypes,object
sTransitionTypes:
	.byte	0x1
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	DoEnterCaveTransition
	.byte	0x2
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	DoEnterCaveTransition
	.byte	0x3
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	DoEnterCaveTransition
	.byte	0x5
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	DoEnterCaveTransition
	.byte	0x6
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	DoEnterCaveTransition
	.byte	0x7
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	DoEnterCaveTransition
	.byte	0x8
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	DoEnterCaveTransition
	.byte	0x9
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.word	DoEnterCaveTransition
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.word	DoExitCaveTransition
	.byte	0x4
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.word	DoExitCaveTransition
	.byte	0x4
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.word	DoExitCaveTransition
	.byte	0x4
	.byte	0x5
	.byte	0x0
	.byte	0x1
	.word	DoExitCaveTransition
	.byte	0x4
	.byte	0x6
	.byte	0x0
	.byte	0x1
	.word	DoExitCaveTransition
	.byte	0x4
	.byte	0x7
	.byte	0x0
	.byte	0x1
	.word	DoExitCaveTransition
	.byte	0x4
	.byte	0x8
	.byte	0x0
	.byte	0x1
	.word	DoExitCaveTransition
	.byte	0x4
	.byte	0x9
	.byte	0x0
	.byte	0x1
	.word	DoExitCaveTransition
	.space	8
	.size	 sTransitionTypes,136
	.align	1, 0
	.type	 gCaveTransitionPalette_White,object
gCaveTransitionPalette_White:
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.short	0x7fff
	.size	 gCaveTransitionPalette_White,32
	.align	1, 0
	.type	 gCaveTransitionPalette_Black,object
gCaveTransitionPalette_Black:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gCaveTransitionPalette_Black,32
	.align	1, 0
	.type	 gUnknown_085B2890,object
gUnknown_085B2890:
	.short	0x5712
	.short	0x842
	.short	0x1084
	.short	0x18c6
	.short	0x2108
	.short	0x294a
	.short	0x318c
	.short	0x39ce
	.size	 gUnknown_085B2890,16
	.align	1, 0
	.type	 gUnknown_085B28A0,object
gUnknown_085B28A0:
	.short	0x4210
	.short	0x4a52
	.short	0x5294
	.short	0x5ad6
	.short	0x6318
	.short	0x6b5a
	.short	0x739c
	.short	0x7fff
	.size	 gUnknown_085B28A0,16
	.align	2, 0
	.type	 gCaveTransitionTilemap,object
gCaveTransitionTilemap:
	.word	0x80010
	.word	-0xf1ffec4
	.word	-0xffe0fff
	.word	0x11001
	.word	0x100
	.word	-0x1fee1fff
	.word	-0x4ffe0fee
	.word	-0xf1bfeb0
	.word	0x11013001
	.word	-0x7c1bfe1c
	.word	-0x1ffdc0d0
	.word	-0xfec1ffd
	.word	0x62013001
	.word	0x1001f0e4
	.word	0x2e40301
	.word	0x8043fa0
	.word	0x15e014e0
	.word	0x15e001f0
	.word	0x1f088e4
	.word	-0xffb1bec
	.word	-0x1ffa1fc1
	.word	0x16e00614
	.word	-0x2f1bfe10
	.word	0x60e40601
	.word	0x403ff005
	.word	0x8e0073f
	.word	-0x4f5ce820
	.word	0x190e401
	.word	-0xff81bf8
	.word	0x53fc03f
	.word	-0x1fe71ff7
	.word	-0x1bfe8fe7
	.word	0x181c0150
	.word	0x3ff009e4
	.word	0x3f003ff0
	.word	0xb14e00a
	.word	0x1501ae0
	.word	0xb0130e4
	.word	-0xff58f1c
	.word	0x603ff03f
	.word	0x1be00c3f
	.word	0x101c40e0
	.word	-0x1be31bff
	.word	-0x1ff31be5
	.word	0x3ff03ff0
	.word	-0x1ff2c040
	.word	0x30fe00e
	.word	0xee40fe0
	.word	0x3ff00de4
	.word	-0x17ffc070
	.word	-0x17fc17fe
	.word	0x5e804
	.word	0x7e806e8
	.word	0x9e808e8
	.word	-0x17f51800
	.word	-0x17f317f5
	.word	0xee8000d
	.word	0xfe80fe8
	.word	-0x13fff114
	.word	-0x13f313f3
	.word	0xaec0b
	.word	0x8ec09ec
	.word	0x6ec07ec
	.word	-0x13fa1400
	.word	-0x13fc13fc
	.word	0x1ec1802
	.word	0x703ff0ec
	.word	0x1ce81b3f
	.word	-0x13feef79
	.word	-0xfe413e4
	.word	-0x3fc00fc1
	.word	0x501a5e3f
	.word	0x130ec01
	.word	0x3ff03ff0
	.word	0x2b183f50
	.word	0x17019e8
	.word	0x180150ec
	.word	0x3ff03ff0
	.word	0x173f00ae
	.word	-0x6f13fe50
	.word	-0x4fc00fff
	.word	-0xf47e9c1
	.word	0x1d0ec01
	.word	0x3f303ff0
	.word	-0x75ea17ec
	.word	0x15e801f0
	.word	0x1401f0ec
	.word	0x6ee83ff0
	.word	0x3001f013
	.word	0x1f0ec01
	.word	0x3f900110
	.word	0x12e83611
	.word	0x15001f0
	.word	0x3001f0ec
	.word	0x50ff1101
	.word	-0xf680bc1
	.word	0x6401f001
	.word	-0xffe0f41
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x19001f0
	.size	 gCaveTransitionTilemap,480
	.align	2, 0
	.type	 gCaveTransitionTiles,object
gCaveTransitionTiles:
	.word	0x40010
	.word	-0xfffffcd
	.word	0x11019001
	.word	-0x6ffe0fef
	.word	0x22223301
	.word	0x19001f0
	.word	0x1f03333
	.word	0x44330190
	.word	-0x6ffe0fbc
	.word	-0xfaaaaff
	.word	0x33019001
	.word	0x1f06666
	.word	0x77770190
	.word	0x19001f0
	.word	-0xf7777cd
	.word	-0x66fe6fff
	.word	-0x6ffe0f67
	.word	-0x5555ccff
	.word	0x19001f0
	.word	0x1f0bbbb
	.word	-0x33ccfe70
	.word	-0x6ffe0f34
	.word	-0xf2222ff
	.word	0x39019001
	.word	0x1f0eeee
	.word	0x13001f0
	.word	0x1f0ffff
	.word	-0x4e2e0e01
	.word	-0x4fec0f2d
	.word	-0xee00fff
	.word	-0xe100e05
	.word	0x1f0ffe3
	.word	0x1ff00130
	.word	-0x140e080f
	.word	-0x2c0e200f
	.word	-0xf60380f
	.word	-0xf5555ff
	.word	-0xe240ee1
	.word	-0xf3c0e31
	.word	0x130ff01
	.word	-0x284ee010
	.word	0x1f091f3
	.word	0x1f001f0
	.word	0x308001f0
	.word	0x1
	.size	 gCaveTransitionTiles,180
.text
	.align	2, 0
	.globl	SetUpFieldMove_Flash
	.type	 SetUpFieldMove_Flash,function
	.thumb_func
SetUpFieldMove_Flash:
	push	{r4, lr}
	bl	ShouldDoBrailleRegisteelEffect
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r4, .L8
	bl	GetCursorSelectionMonId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	ldr	r1, .L8+0x4
	ldr	r0, .L8+0x8
	str	r0, [r1]
	ldr	r1, .L8+0xc
	ldr	r0, .L8+0x10
	b	.L7
.L9:
	.align	2, 0
.L8:
	.word	gSpecialVar_Result
	.word	gFieldCallback2
	.word	FieldCallback_PrepareFadeInFromMenu
	.word	gPostMenuFieldCallback
	.word	SetUpPuzzleEffectRegisteel
.L3:
	ldr	r0, .L10
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0x1
	bne	.L4	@cond_branch
	ldr	r0, .L10+0x4
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L4	@cond_branch
	ldr	r1, .L10+0x8
	ldr	r0, .L10+0xc
	str	r0, [r1]
	ldr	r1, .L10+0x10
	ldr	r0, .L10+0x14
.L7:
	str	r0, [r1]
	mov	r0, #0x1
	b	.L6
.L11:
	.align	2, 0
.L10:
	.word	gMapHeader
	.word	0x888
	.word	gFieldCallback2
	.word	FieldCallback_PrepareFadeInFromMenu
	.word	gPostMenuFieldCallback
	.word	FieldCallback_Flash
.L4:
	mov	r0, #0x0
.L6:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 SetUpFieldMove_Flash,.Lfe1-SetUpFieldMove_Flash
	.align	2, 0
	.type	 FieldCallback_Flash,function
	.thumb_func
FieldCallback_Flash:
	push	{r4, lr}
	bl	CreateFieldMoveTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	GetCursorSelectionMonId
	ldr	r1, .L13
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1]
	ldr	r1, .L13+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r2, .L13+0x8
	lsr	r1, r2, #0x10
	strh	r1, [r0, #0x18]
	strh	r2, [r0, #0x1a]
	pop	{r4}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gFieldEffectArguments
	.word	gTasks
	.word	FldEff_UseFlash
.Lfe2:
	.size	 FieldCallback_Flash,.Lfe2-FieldCallback_Flash
	.align	2, 0
	.type	 FldEff_UseFlash,function
	.thumb_func
FldEff_UseFlash:
	push	{lr}
	mov	r0, #0xcf
	bl	PlaySE
	ldr	r0, .L16
	bl	FlagSet
	ldr	r0, .L16+0x4
	bl	ScriptContext1_SetupScript
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	0x888
	.word	EventScript_UseFlash
.Lfe3:
	.size	 FldEff_UseFlash,.Lfe3-FldEff_UseFlash
	.align	2, 0
	.type	 CB2_ChangeMapMain,function
	.thumb_func
CB2_ChangeMapMain:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 CB2_ChangeMapMain,.Lfe4-CB2_ChangeMapMain
	.align	2, 0
	.type	 VBC_ChangeMapVBlank,function
	.thumb_func
VBC_ChangeMapVBlank:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 VBC_ChangeMapVBlank,.Lfe5-VBC_ChangeMapVBlank
	.align	2, 0
	.globl	CB2_DoChangeMap
	.type	 CB2_DoChangeMap,function
	.thumb_func
CB2_DoChangeMap:
	push	{r4, lr}
	add	sp, sp, #-0x8
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xc
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xa
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x8
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x18
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x16
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x10
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L22
	mov	r0, sp
	str	r0, [r1]
	mov	r0, #0xc0
	lsl	r0, r0, #0x13
	str	r0, [r1, #0x4]
	ldr	r0, .L22+0x4
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	add	r0, sp, #0x4
	str	r0, [r1]
	mov	r0, #0xe0
	lsl	r0, r0, #0x13
	str	r0, [r1, #0x4]
	ldr	r0, .L22+0x8
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, sp
	strh	r4, [r0]
	str	r0, [r1]
	ldr	r0, .L22+0xc
	str	r0, [r1, #0x4]
	ldr	r0, .L22+0x10
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	bl	ResetPaletteFade
	bl	ResetTasks
	bl	ResetSpriteData
	ldr	r3, .L22+0x14
	ldrh	r2, [r3]
	strh	r4, [r3]
	ldr	r4, .L22+0x18
	ldrh	r0, [r4]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r4]
	strh	r2, [r3]
	ldr	r0, .L22+0x1c
	bl	SetVBlankCallback
	ldr	r0, .L22+0x20
	bl	SetMainCallback2
	bl	TryDoMapTransition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L21	@cond_branch
	ldr	r0, .L22+0x24
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
.L21:
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	0x40000d4
	.word	-0x7eff4000
	.word	-0x7affff00
	.word	0x5000002
	.word	-0x7efffe01
	.word	0x4000208
	.word	0x4000200
	.word	VBC_ChangeMapVBlank
	.word	CB2_ChangeMapMain
	.word	gMain
.Lfe6:
	.size	 CB2_DoChangeMap,.Lfe6-CB2_DoChangeMap
	.align	2, 0
	.type	 TryDoMapTransition,function
	.thumb_func
TryDoMapTransition:
	push	{r4, r5, r6, r7, lr}
	bl	GetLastUsedWarpMapType
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	GetCurrentMapType
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r3, #0x0
	ldr	r4, .L32
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L26	@cond_branch
	add	r7, r4, #0
	add	r0, r4, #0x4
	mov	ip, r0
.L28:
	lsl	r2, r3, #0x3
	add	r1, r2, r7
	ldrb	r0, [r1]
	cmp	r0, r6
	bne	.L27	@cond_branch
	ldrb	r0, [r1, #0x1]
	cmp	r0, r5
	bne	.L27	@cond_branch
	mov	r1, ip
	add	r0, r2, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	mov	r0, #0x1
	b	.L31
.L33:
	.align	2, 0
.L32:
	.word	sTransitionTypes
.L27:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x3
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L28	@cond_branch
.L26:
	mov	r0, #0x0
.L31:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 TryDoMapTransition,.Lfe7-TryDoMapTransition
	.align	2, 0
	.globl	GetMapPairFadeToType
	.type	 GetMapPairFadeToType,function
	.thumb_func
GetMapPairFadeToType:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r0, #0x18
	lsr	r4, r1, #0x18
	mov	r3, #0x0
	ldr	r1, .L42
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L36	@cond_branch
	add	r6, r1, #0
.L38:
	lsl	r0, r3, #0x3
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, r5
	bne	.L37	@cond_branch
	ldrb	r0, [r2, #0x1]
	cmp	r0, r4
	bne	.L37	@cond_branch
	ldrb	r0, [r2, #0x2]
	b	.L41
.L43:
	.align	2, 0
.L42:
	.word	sTransitionTypes
.L37:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L38	@cond_branch
.L36:
	mov	r0, #0x0
.L41:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 GetMapPairFadeToType,.Lfe8-GetMapPairFadeToType
	.align	2, 0
	.globl	GetMapPairFadeFromType
	.type	 GetMapPairFadeFromType,function
	.thumb_func
GetMapPairFadeFromType:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r0, #0x18
	lsr	r4, r1, #0x18
	mov	r3, #0x0
	ldr	r1, .L52
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L46	@cond_branch
	add	r6, r1, #0
.L48:
	lsl	r0, r3, #0x3
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, r5
	bne	.L47	@cond_branch
	ldrb	r0, [r2, #0x1]
	cmp	r0, r4
	bne	.L47	@cond_branch
	ldrb	r0, [r2, #0x3]
	b	.L51
.L53:
	.align	2, 0
.L52:
	.word	sTransitionTypes
.L47:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L48	@cond_branch
.L46:
	mov	r0, #0x0
.L51:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 GetMapPairFadeFromType,.Lfe9-GetMapPairFadeFromType
	.align	2, 0
	.type	 DoExitCaveTransition,function
	.thumb_func
DoExitCaveTransition:
	push	{lr}
	ldr	r0, .L55
	mov	r1, #0x0
	bl	CreateTask
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	Task_ExitCaveTransition1
.Lfe10:
	.size	 DoExitCaveTransition,.Lfe10-DoExitCaveTransition
	.align	2, 0
	.type	 Task_ExitCaveTransition1,function
	.thumb_func
Task_ExitCaveTransition1:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L58
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L58+0x4
	str	r0, [r1]
	bx	lr
.L59:
	.align	2, 0
.L58:
	.word	gTasks
	.word	Task_ExitCaveTransition2
.Lfe11:
	.size	 Task_ExitCaveTransition1,.Lfe11-Task_ExitCaveTransition1
	.align	2, 0
	.type	 Task_ExitCaveTransition2,function
	.thumb_func
Task_ExitCaveTransition2:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L61
	ldr	r1, .L61+0x4
	bl	LZ77UnCompVram
	ldr	r0, .L61+0x8
	ldr	r1, .L61+0xc
	bl	LZ77UnCompVram
	ldr	r0, .L61+0x10
	mov	r1, #0xe0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L61+0x14
	mov	r1, #0xe0
	mov	r2, #0x10
	bl	LoadPalette
	ldr	r1, .L61+0x18
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L61+0x1c
	mov	r0, #0x8
	bl	SetGpuReg
	mov	r1, #0x8a
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	ldr	r1, .L61+0x20
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L61+0x24
	str	r1, [r0]
	mov	r2, #0x0
	mov	r1, #0x10
	strh	r1, [r0, #0x8]
	strh	r2, [r0, #0xa]
	pop	{r4}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	gCaveTransitionTiles
	.word	0x600c000
	.word	gCaveTransitionTilemap
	.word	0x600f800
	.word	gCaveTransitionPalette_White
	.word	gUnknown_085B28A0
	.word	0x3e41
	.word	0x1f0c
	.word	gTasks
	.word	Task_ExitCaveTransition3
.Lfe12:
	.size	 Task_ExitCaveTransition2,.Lfe12-Task_ExitCaveTransition2
	.align	2, 0
	.type	 Task_ExitCaveTransition3,function
	.thumb_func
Task_ExitCaveTransition3:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L66
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r5, r1, r2
	ldrh	r4, [r5, #0xa]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	add	r1, r4, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	cmp	r4, #0x10
	bhi	.L64	@cond_branch
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	b	.L65
.L67:
	.align	2, 0
.L66:
	.word	gTasks
.L64:
	mov	r0, #0x0
	strh	r0, [r5, #0xc]
	ldr	r0, .L68
	str	r0, [r5]
.L65:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L69:
	.align	2, 0
.L68:
	.word	Task_ExitCaveTransition4
.Lfe13:
	.size	 Task_ExitCaveTransition3,.Lfe13-Task_ExitCaveTransition3
	.align	2, 0
	.type	 Task_ExitCaveTransition4,function
	.thumb_func
Task_ExitCaveTransition4:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L73
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r1, .L73+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0xc]
	cmp	r1, #0x7
	bhi	.L71	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0xc]
	lsl	r1, r1, #0x1
	ldr	r0, .L73+0x8
	add	r0, r1, r0
	mov	r2, #0x10
	sub	r2, r2, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r1, #0xe0
	bl	LoadPalette
	b	.L72
.L74:
	.align	2, 0
.L73:
	.word	0x1010
	.word	gTasks
	.word	gUnknown_085B28A0
.L71:
	ldr	r0, .L75
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L75+0x4
	str	r0, [r4]
	mov	r0, #0x8
	strh	r0, [r4, #0xc]
.L72:
	pop	{r4}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gCaveTransitionPalette_White
	.word	Task_ExitCaveTransition5
.Lfe14:
	.size	 Task_ExitCaveTransition4,.Lfe14-Task_ExitCaveTransition4
	.align	2, 0
	.type	 Task_ExitCaveTransition5,function
	.thumb_func
Task_ExitCaveTransition5:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L80
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r2, [r1, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L78	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0xc]
	b	.L79
.L81:
	.align	2, 0
.L80:
	.word	gTasks
.L78:
	ldr	r0, .L82
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
.L79:
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gMain
.Lfe15:
	.size	 Task_ExitCaveTransition5,.Lfe15-Task_ExitCaveTransition5
	.align	2, 0
	.type	 DoEnterCaveTransition,function
	.thumb_func
DoEnterCaveTransition:
	push	{lr}
	ldr	r0, .L85
	mov	r1, #0x0
	bl	CreateTask
	pop	{r0}
	bx	r0
.L86:
	.align	2, 0
.L85:
	.word	Task_EnterCaveTransition1
.Lfe16:
	.size	 DoEnterCaveTransition,.Lfe16-DoEnterCaveTransition
	.align	2, 0
	.type	 Task_EnterCaveTransition1,function
	.thumb_func
Task_EnterCaveTransition1:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L88
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L88+0x4
	str	r0, [r1]
	bx	lr
.L89:
	.align	2, 0
.L88:
	.word	gTasks
	.word	Task_EnterCaveTransition2
.Lfe17:
	.size	 Task_EnterCaveTransition1,.Lfe17-Task_EnterCaveTransition1
	.align	2, 0
	.type	 Task_EnterCaveTransition2,function
	.thumb_func
Task_EnterCaveTransition2:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L91
	ldr	r1, .L91+0x4
	bl	LZ77UnCompVram
	ldr	r0, .L91+0x8
	ldr	r1, .L91+0xc
	bl	LZ77UnCompVram
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L91+0x10
	mov	r0, #0x8
	bl	SetGpuReg
	mov	r1, #0x8a
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	ldr	r0, .L91+0x14
	mov	r1, #0xe0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L91+0x18
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L91+0x1c
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L91+0x20
	str	r1, [r0]
	mov	r2, #0x0
	mov	r1, #0x10
	strh	r1, [r0, #0x8]
	strh	r2, [r0, #0xa]
	strh	r2, [r0, #0xc]
	pop	{r4}
	pop	{r0}
	bx	r0
.L92:
	.align	2, 0
.L91:
	.word	gCaveTransitionTiles
	.word	0x600c000
	.word	gCaveTransitionTilemap
	.word	0x600f800
	.word	0x1f0c
	.word	gCaveTransitionPalette_White
	.word	gCaveTransitionPalette_Black
	.word	gTasks
	.word	Task_EnterCaveTransition3
.Lfe18:
	.size	 Task_EnterCaveTransition2,.Lfe18-Task_EnterCaveTransition2
	.align	2, 0
	.type	 Task_EnterCaveTransition3,function
	.thumb_func
Task_EnterCaveTransition3:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L96
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r1, [r4, #0xc]
	cmp	r1, #0xf
	bhi	.L94	@cond_branch
	add	r2, r1, #0x1
	add	r0, r2, #0x1
	strh	r0, [r4, #0xc]
	mov	r0, #0xf
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	ldr	r1, .L96+0x4
	add	r0, r0, r1
	lsl	r2, r2, #0x11
	lsr	r2, r2, #0x10
	mov	r1, #0xe0
	bl	LoadPalette
	b	.L95
.L97:
	.align	2, 0
.L96:
	.word	gTasks
	.word	gUnknown_085B2890
.L94:
	ldr	r1, .L98
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r1, .L98+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, .L98+0x8
	str	r0, [r4]
.L95:
	pop	{r4}
	pop	{r0}
	bx	r0
.L99:
	.align	2, 0
.L98:
	.word	0x1010
	.word	0x3e41
	.word	Task_EnterCaveTransition4
.Lfe19:
	.size	 Task_EnterCaveTransition3,.Lfe19-Task_EnterCaveTransition3
	.align	2, 0
	.type	 Task_EnterCaveTransition4,function
	.thumb_func
Task_EnterCaveTransition4:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L103
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r5, r1, r2
	ldrh	r0, [r5, #0xa]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x15
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	cmp	r4, #0
	beq	.L101	@cond_branch
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	b	.L102
.L104:
	.align	2, 0
.L103:
	.word	gTasks
.L101:
	ldr	r0, .L105
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L105+0x4
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
.L102:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L106:
	.align	2, 0
.L105:
	.word	gCaveTransitionPalette_Black
	.word	gMain
.Lfe20:
	.size	 Task_EnterCaveTransition4,.Lfe20-Task_EnterCaveTransition4
.text
	.align	2, 0

