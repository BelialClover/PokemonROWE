@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sRecordedOpponentBufferCommands,object
	.size	 sRecordedOpponentBufferCommands,232
sRecordedOpponentBufferCommands:
	.word	RecordedOpponentHandleGetMonData
	.word	RecordedOpponentHandleGetRawMonData
	.word	RecordedOpponentHandleSetMonData
	.word	RecordedOpponentHandleSetRawMonData
	.word	RecordedOpponentHandleLoadMonSprite
	.word	RecordedOpponentHandleSwitchInAnim
	.word	RecordedOpponentHandleReturnMonToBall
	.word	RecordedOpponentHandleDrawTrainerPic
	.word	RecordedOpponentHandleTrainerSlide
	.word	RecordedOpponentHandleTrainerSlideBack
	.word	RecordedOpponentHandleFaintAnimation
	.word	RecordedOpponentHandlePaletteFade
	.word	RecordedOpponentHandleSuccessBallThrowAnim
	.word	RecordedOpponentHandleBallThrowAnim
	.word	RecordedOpponentHandlePause
	.word	RecordedOpponentHandleMoveAnimation
	.word	RecordedOpponentHandlePrintString
	.word	RecordedOpponentHandlePrintSelectionString
	.word	RecordedOpponentHandleChooseAction
	.word	RecordedOpponentHandleUnknownYesNoBox
	.word	RecordedOpponentHandleChooseMove
	.word	RecordedOpponentHandleChooseItem
	.word	RecordedOpponentHandleChoosePokemon
	.word	RecordedOpponentHandleCmd23
	.word	RecordedOpponentHandleHealthBarUpdate
	.word	RecordedOpponentHandleExpUpdate
	.word	RecordedOpponentHandleStatusIconUpdate
	.word	RecordedOpponentHandleStatusAnimation
	.word	RecordedOpponentHandleStatusXor
	.word	RecordedOpponentHandleDataTransfer
	.word	RecordedOpponentHandleDMA3Transfer
	.word	RecordedOpponentHandlePlayBGM
	.word	RecordedOpponentHandleCmd32
	.word	RecordedOpponentHandleTwoReturnValues
	.word	RecordedOpponentHandleChosenMonReturnValue
	.word	RecordedOpponentHandleOneReturnValue
	.word	RecordedOpponentHandleOneReturnValue_Duplicate
	.word	RecordedOpponentHandleCmd37
	.word	RecordedOpponentHandleCmd38
	.word	RecordedOpponentHandleCmd39
	.word	RecordedOpponentHandleCmd40
	.word	RecordedOpponentHandleHitAnimation
	.word	RecordedOpponentHandleCmd42
	.word	RecordedOpponentHandlePlaySE
	.word	RecordedOpponentHandlePlayFanfareOrBGM
	.word	RecordedOpponentHandleFaintingCry
	.word	RecordedOpponentHandleIntroSlide
	.word	RecordedOpponentHandleIntroTrainerBallThrow
	.word	RecordedOpponentHandleDrawPartyStatusSummary
	.word	RecordedOpponentHandleHidePartyStatusSummary
	.word	RecordedOpponentHandleEndBounceEffect
	.word	RecordedOpponentHandleSpriteInvisibility
	.word	RecordedOpponentHandleBattleAnimation
	.word	RecordedOpponentHandleLinkStandbyMsg
	.word	RecordedOpponentHandleResetActionMoveSelection
	.word	RecordedOpponentHandleCmd55
	.word	RecordedOpponentHandleBattleDebug
	.word	RecordedOpponentCmdEnd
.text
	.align	2, 0
	.type	 nullsub_70,function
	.thumb_func
nullsub_70:
	bx	lr
.Lfe1:
	.size	 nullsub_70,.Lfe1-nullsub_70
	.align	2, 0
	.globl	SetControllerToRecordedOpponent
	.type	 SetControllerToRecordedOpponent,function
	.thumb_func
SetControllerToRecordedOpponent:
	ldr	r1, .L4
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L4+0x8
	str	r1, [r0]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	RecordedOpponentBufferRunCommand
.Lfe2:
	.size	 SetControllerToRecordedOpponent,.Lfe2-SetControllerToRecordedOpponent
	.align	2, 0
	.type	 RecordedOpponentBufferRunCommand,function
	.thumb_func
RecordedOpponentBufferRunCommand:
	push	{lr}
	ldr	r2, .L10
	ldr	r1, .L10+0x4
	ldr	r0, .L10+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L7	@cond_branch
	ldr	r0, .L10+0xc
	ldr	r0, [r0]
	lsl	r1, r3, #0x9
	add	r0, r0, #0x20
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0x39
	bhi	.L8	@cond_branch
	ldr	r0, .L10+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L7
.L11:
	.align	2, 0
.L10:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleResources
	.word	sRecordedOpponentBufferCommands
.L8:
	bl	RecordedOpponentBufferExecCompleted
.L7:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 RecordedOpponentBufferRunCommand,.Lfe3-RecordedOpponentBufferRunCommand
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy:
	push	{lr}
	ldr	r2, .L14
	ldr	r1, .L14+0x4
	ldr	r0, .L14+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L14+0xc
	cmp	r1, r0
	bne	.L13	@cond_branch
	bl	RecordedOpponentBufferExecCompleted
.L13:
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe4:
	.size	 CompleteOnBattlerSpriteCallbackDummy,.Lfe4-CompleteOnBattlerSpriteCallbackDummy
	.align	2, 0
	.type	 CompleteOnBankSpriteCallbackDummy2,function
	.thumb_func
CompleteOnBankSpriteCallbackDummy2:
	push	{lr}
	ldr	r2, .L18
	ldr	r1, .L18+0x4
	ldr	r0, .L18+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L18+0xc
	cmp	r1, r0
	bne	.L17	@cond_branch
	bl	RecordedOpponentBufferExecCompleted
.L17:
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe5:
	.size	 CompleteOnBankSpriteCallbackDummy2,.Lfe5-CompleteOnBankSpriteCallbackDummy2
	.align	2, 0
	.type	 sub_81865C8,function
	.thumb_func
sub_81865C8:
	push	{r4, r5, r6, lr}
	ldr	r5, .L22
	ldr	r6, .L22+0x4
	ldr	r4, .L22+0x8
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r2, r0, #0x2
	add	r0, r5, #0
	add	r0, r0, #0x1c
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r0, .L22+0xc
	cmp	r1, r0
	bne	.L21	@cond_branch
	add	r0, r2, r5
	ldrh	r0, [r0, #0x6]
	bl	FreeTrainerFrontPicPalette
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	bl	RecordedOpponentBufferExecCompleted
.L21:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe6:
	.size	 sub_81865C8,.Lfe6-sub_81865C8
	.align	2, 0
	.type	 sub_8186630,function
	.thumb_func
sub_8186630:
	push	{r4, lr}
	ldr	r4, .L26
	ldr	r1, [r4]
	ldr	r3, .L26+0x4
	ldrb	r0, [r3]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L25	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	bl	RecordedOpponentBufferExecCompleted
.L25:
	pop	{r4}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe7:
	.size	 sub_8186630,.Lfe7-sub_8186630
	.align	2, 0
	.type	 sub_8186678,function
	.thumb_func
sub_8186678:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r0, #0x0
	mov	r9, r0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L30	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L29	@cond_branch
	ldr	r0, .L39
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L29	@cond_branch
.L30:
	ldr	r4, .L39+0x4
	ldr	r0, .L39+0x8
	ldr	r2, .L39+0xc
	ldrb	r3, [r2]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L39+0x10
	mov	r8, r2
	cmp	r1, r0
	bne	.L32	@cond_branch
	ldr	r0, .L39+0x14
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L32	@cond_branch
	b	.L38
.L40:
	.align	2, 0
.L39:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
.L29:
	ldr	r6, .L41
	ldr	r7, .L41+0x4
	ldr	r2, .L41+0x8
	ldrb	r3, [r2]
	add	r0, r3, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r6, #0
	add	r5, r5, #0x1c
	add	r0, r0, r5
	ldr	r4, [r0]
	ldr	r0, .L41+0xc
	mov	r8, r2
	cmp	r4, r0
	bne	.L32	@cond_branch
	mov	r0, #0x2
	add	r2, r3, #0
	eor	r2, r2, r0
	add	r0, r2, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	cmp	r0, r4
	bne	.L32	@cond_branch
	ldr	r4, .L41+0x10
	add	r0, r3, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L32	@cond_branch
	add	r0, r2, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L32	@cond_branch
	mov	r1, #0x1
	mov	r9, r1
.L32:
	mov	r2, r9
	cmp	r2, #0
	beq	.L28	@cond_branch
.L38:
	mov	r6, r8
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x1
	bne	.L35	@cond_branch
	ldr	r0, .L41+0x14
	mov	ip, r0
	ldr	r0, [r0]
	ldrb	r2, [r6]
	ldr	r5, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r5
	ldrb	r1, [r4, #0x1]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L28	@cond_branch
	mov	r7, #0x2
	add	r1, r7, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L28	@cond_branch
	ldrb	r1, [r4]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r1, ip
	ldr	r0, [r1]
	ldrb	r2, [r6]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	mov	r0, ip
	ldr	r2, [r0]
	ldrb	r0, [r6]
	add	r1, r7, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	mov	r1, ip
	ldr	r2, [r1]
	ldrb	r0, [r6]
	add	r1, r7, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L41+0x18
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
.L35:
	ldr	r0, .L41+0x14
	ldr	r0, [r0]
	mov	r2, r8
	ldrb	r1, [r2]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x9]
	ldr	r1, .L41+0x1c
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L41+0x20
	str	r1, [r0]
.L28:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L42:
	.align	2, 0
.L41:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
	.word	gBattleSpritesDataPtr
	.word	0x27f9
	.word	gBattlerControllerFuncs
	.word	sub_8186630
.Lfe8:
	.size	 sub_8186678,.Lfe8-sub_8186678
	.align	2, 0
	.type	 sub_818686C,function
	.thumb_func
sub_818686C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r0, #0x0
	mov	r9, r0
	mov	r8, r0
	ldr	r4, .L61
	ldr	r0, [r4]
	ldr	r7, .L61+0x4
	ldrb	r2, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r5, #0x88
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L44	@cond_branch
	ldr	r0, .L61+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L61+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L44:
	ldr	r1, [r4]
	ldrb	r0, [r7]
	mov	r6, #0x2
	add	r2, r6, #0
	eor	r2, r2, r0
	ldr	r1, [r1, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L45	@cond_branch
	ldr	r0, .L61+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L61+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L45:
	ldr	r0, [r4]
	ldrb	r2, [r7]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r3
	ldrb	r1, [r4]
	mov	r5, #0x8
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L46	@cond_branch
	add	r1, r6, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L46	@cond_branch
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L47	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L48	@cond_branch
	ldr	r0, .L61+0x10
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L48	@cond_branch
	ldr	r4, .L61+0x14
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L61+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L61+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r7]
	eor	r0, r0, r6
	bl	sub_8076918
	ldrb	r0, [r7]
	eor	r0, r0, r6
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L48:
	ldr	r5, .L61+0x14
	ldr	r4, .L61+0x4
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L61+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L61+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r4]
	bl	sub_8076918
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L47:
	ldr	r0, .L61
	ldr	r2, [r0]
	ldr	r0, .L61+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
.L46:
	ldr	r5, .L61
	ldr	r0, [r5]
	ldr	r4, .L61+0x4
	ldrb	r2, [r4]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x80
	bne	.L49	@cond_branch
	mov	r1, #0x2
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L49	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L49	@cond_branch
	ldr	r0, [r5]
	ldrb	r2, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L50	@cond_branch
	ldr	r0, .L61+0x10
	ldr	r0, [r0]
	mov	r1, #0x42
	and	r0, r0, r1
	cmp	r0, #0x42
	bne	.L51	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L50	@cond_branch
	ldr	r0, .L61+0x18
	bl	m4aMPlayContinue
	b	.L50
.L62:
	.align	2, 0
.L61:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gHealthboxSpriteIds
	.word	gMPlayInfo_BGM
.L51:
	ldr	r0, .L63
	ldr	r1, .L63+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L50:
	ldr	r0, .L63+0x8
	ldr	r2, [r0]
	ldr	r0, .L63+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r0, #0x1
	mov	r9, r0
.L49:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L54	@cond_branch
	ldr	r2, .L63+0x10
	ldr	r0, .L63+0x14
	ldr	r1, .L63+0xc
	ldrb	r4, [r1]
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r3, [r0]
	ldr	r0, .L63+0x18
	cmp	r3, r0
	bne	.L56	@cond_branch
	ldr	r0, .L63+0x1c
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r3
	bne	.L56	@cond_branch
	b	.L60
.L64:
	.align	2, 0
.L63:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
.L54:
	ldr	r2, .L65
	ldr	r7, .L65+0x4
	ldr	r0, .L65+0x8
	ldrb	r3, [r0]
	add	r0, r3, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r4, [r0]
	ldr	r0, .L65+0xc
	cmp	r4, r0
	bne	.L56	@cond_branch
	ldr	r6, .L65+0x10
	add	r0, r3, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r5, [r0]
	cmp	r5, r4
	bne	.L56	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	add	r0, r3, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r4, [r0]
	cmp	r4, r5
	bne	.L56	@cond_branch
	add	r0, r3, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r4
	bne	.L56	@cond_branch
.L60:
	mov	r0, #0x1
	mov	r8, r0
.L56:
	mov	r0, r9
	cmp	r0, #0
	beq	.L58	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	beq	.L58	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L59	@cond_branch
	ldr	r0, .L65+0x14
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L59	@cond_branch
	ldr	r1, .L65+0x4
	ldr	r5, .L65+0x8
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L65
	add	r0, r0, r1
	bl	DestroySprite
	ldrb	r0, [r5]
	eor	r4, r4, r0
	ldr	r1, .L65+0x18
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L65+0x1c
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
.L59:
	ldr	r1, .L65+0x4
	ldr	r4, .L65+0x8
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L65
	add	r0, r0, r1
	bl	DestroySprite
	ldrb	r5, [r4]
	ldr	r1, .L65+0x18
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L65+0x1c
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r3, .L65+0x20
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r0, [r3]
	ldrb	r2, [r4]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r0, [r3]
	ldrb	r2, [r4]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r1, .L65+0x24
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L65+0x28
	str	r1, [r0]
.L58:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_8186678
.Lfe9:
	.size	 sub_818686C,.Lfe9-sub_818686C
	.align	2, 0
	.type	 sub_8186C48,function
	.thumb_func
sub_8186C48:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L72
	ldr	r0, .L72+0x4
	ldr	r7, .L72+0x8
	ldrb	r3, [r7]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r2, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r0, .L72+0xc
	cmp	r1, r0
	bne	.L68	@cond_branch
	add	r0, r2, r4
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L68	@cond_branch
	ldr	r6, .L72+0x10
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r4, r3, #0x1
	add	r0, r4, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r5, [r2]
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L69	@cond_branch
	ldr	r0, .L72+0x14
	add	r0, r4, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L72+0x18
	add	r1, r1, r0
	add	r0, r3, #0
	bl	TryShinyAnimation
	b	.L68
.L73:
	.align	2, 0
.L72:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L69:
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L68	@cond_branch
	mov	r0, #0x7f
	and	r0, r0, r5
	strb	r0, [r2]
	ldr	r0, [r6]
	ldrb	r2, [r7]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L74
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	bl	RecordedOpponentBufferExecCompleted
.L68:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	0x27f9
.Lfe10:
	.size	 sub_8186C48,.Lfe10-sub_8186C48
	.align	2, 0
	.type	 CompleteOnHealthbarDone,function
	.thumb_func
CompleteOnHealthbarDone:
	push	{r4, r5, r6, lr}
	ldr	r6, .L79
	ldrb	r0, [r6]
	ldr	r5, .L79+0x4
	add	r1, r0, r5
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L77	@cond_branch
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
	b	.L78
.L80:
	.align	2, 0
.L79:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.L77:
	bl	RecordedOpponentBufferExecCompleted
.L78:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 CompleteOnHealthbarDone,.Lfe11-CompleteOnHealthbarDone
	.align	2, 0
	.type	 sub_8186D58,function
	.thumb_func
sub_8186D58:
	push	{lr}
	ldr	r2, .L83
	ldr	r0, .L83+0x4
	ldr	r1, .L83+0x8
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L82	@cond_branch
	ldr	r0, .L83+0xc
	add	r0, r3, r0
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	RecordedOpponentBufferExecCompleted
.L82:
	pop	{r0}
	bx	r0
.L84:
	.align	2, 0
.L83:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.Lfe12:
	.size	 sub_8186D58,.Lfe12-sub_8186D58
	.align	2, 0
	.type	 sub_8186D9C,function
	.thumb_func
sub_8186D9C:
	push	{r4, r5, r6, lr}
	ldr	r0, .L87
	ldr	r0, [r0]
	ldr	r6, .L87+0x4
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L86	@cond_branch
	ldr	r5, .L87+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L87+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	HideBattlerShadowSprite
	ldr	r1, .L87+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	RecordedOpponentBufferExecCompleted
.L86:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe13:
	.size	 sub_8186D9C,.Lfe13-sub_8186D9C
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter,function
	.thumb_func
CompleteOnInactiveTextPrinter:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L90	@cond_branch
	bl	RecordedOpponentBufferExecCompleted
.L90:
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 CompleteOnInactiveTextPrinter,.Lfe14-CompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 DoHitAnimBlinkSpriteEffect,function
	.thumb_func
DoHitAnimBlinkSpriteEffect:
	push	{r4, lr}
	ldr	r1, .L95
	ldr	r0, .L95+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L95+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L92	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L95+0xc
	strb	r3, [r0]
	bl	RecordedOpponentBufferExecCompleted
	b	.L93
.L96:
	.align	2, 0
.L95:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	gDoingBattleAnim
.L92:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L94	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L94:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L93:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 DoHitAnimBlinkSpriteEffect,.Lfe15-DoHitAnimBlinkSpriteEffect
	.align	2, 0
	.type	 sub_8186EA4,function
	.thumb_func
sub_8186EA4:
	push	{r4, lr}
	ldr	r2, .L100
	ldr	r0, .L100+0x4
	ldr	r4, .L100+0x8
	ldrb	r3, [r4]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L100+0xc
	cmp	r1, r0
	bne	.L98	@cond_branch
	ldr	r0, .L100+0x10
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L99	@cond_branch
	add	r0, r3, #0
	add	r1, r3, #0
	add	r2, r3, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
.L99:
	ldr	r0, .L100+0x14
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L100+0x18
	str	r0, [r1]
.L98:
	pop	{r4}
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_8186F14
.Lfe16:
	.size	 sub_8186EA4,.Lfe16-sub_8186EA4
	.align	2, 0
	.type	 sub_8186F14,function
	.thumb_func
sub_8186F14:
	push	{r4, lr}
	ldr	r0, .L106
	ldr	r0, [r0]
	ldr	r4, .L106+0x4
	ldrb	r1, [r4]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L103	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L103	@cond_branch
	ldr	r2, .L106+0x8
	ldr	r1, .L106+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L106+0x10
	cmp	r1, r0
	beq	.L105	@cond_branch
	ldr	r0, .L106+0x14
	cmp	r1, r0
	bne	.L103	@cond_branch
.L105:
	ldr	r0, .L106+0x18
	ldr	r1, .L106+0x1c
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	bl	RecordedOpponentBufferExecCompleted
.L103:
	pop	{r4}
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCallbackDummy
	.word	SpriteCallbackDummy_2
	.word	gMPlayInfo_BGM
	.word	0xffff
.Lfe17:
	.size	 sub_8186F14,.Lfe17-sub_8186F14
	.align	2, 0
	.type	 sub_8186F94,function
	.thumb_func
sub_8186F94:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L110
	ldr	r0, [r4]
	ldr	r5, .L110+0x4
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r1, [r3, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L109	@cond_branch
	ldr	r7, .L110+0x8
	ldr	r6, .L110+0xc
	add	r0, r2, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r7, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L110+0x10
	cmp	r1, r0
	bne	.L109	@cond_branch
	ldrb	r1, [r3]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, [r4]
	ldrb	r2, [r5]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L110+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r4, .L110+0x18
	ldrb	r1, [r5]
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L110+0x1c
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L110+0x20
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r5]
	bl	sub_8076918
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldrb	r0, [r5]
	bl	CopyBattleSpriteInvisibility
	ldr	r1, .L110+0x24
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L110+0x28
	str	r1, [r0]
.L109:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L111:
	.align	2, 0
.L110:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCallbackDummy
	.word	0x27f9
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerControllerFuncs
	.word	sub_8186EA4
.Lfe18:
	.size	 sub_8186F94,.Lfe18-sub_8186F94
	.align	2, 0
	.type	 sub_8187084,function
	.thumb_func
sub_8187084:
	push	{r4, r5, r6, lr}
	ldr	r6, .L115
	ldr	r0, [r6]
	ldr	r5, .L115+0x4
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L113	@cond_branch
	ldr	r0, .L115+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L115+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L113:
	ldr	r4, .L115+0x10
	ldr	r0, .L115+0x14
	ldrb	r2, [r5]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r3, r0
	ldr	r1, [r0]
	ldr	r0, .L115+0x18
	cmp	r1, r0
	bne	.L114	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L114	@cond_branch
	add	r0, r3, r4
	bl	DestroySprite
	ldrb	r4, [r5]
	ldr	r1, .L115+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L115+0xc
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r1, .L115+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L115+0x20
	str	r1, [r0]
.L114:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L116:
	.align	2, 0
.L115:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	sub_8186F94
.Lfe19:
	.size	 sub_8187084,.Lfe19-sub_8187084
	.align	2, 0
	.type	 CompleteOnFinishedStatusAnimation,function
	.thumb_func
CompleteOnFinishedStatusAnimation:
	push	{lr}
	ldr	r0, .L119
	ldr	r2, [r0]
	ldr	r0, .L119+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L118	@cond_branch
	bl	RecordedOpponentBufferExecCompleted
.L118:
	pop	{r0}
	bx	r0
.L120:
	.align	2, 0
.L119:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe20:
	.size	 CompleteOnFinishedStatusAnimation,.Lfe20-CompleteOnFinishedStatusAnimation
	.align	2, 0
	.type	 CompleteOnFinishedBattleAnimation,function
	.thumb_func
CompleteOnFinishedBattleAnimation:
	push	{lr}
	ldr	r0, .L123
	ldr	r2, [r0]
	ldr	r0, .L123+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L122	@cond_branch
	bl	RecordedOpponentBufferExecCompleted
.L122:
	pop	{r0}
	bx	r0
.L124:
	.align	2, 0
.L123:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe21:
	.size	 CompleteOnFinishedBattleAnimation,.Lfe21-CompleteOnFinishedBattleAnimation
	.align	2, 0
	.type	 RecordedOpponentBufferExecCompleted,function
	.thumb_func
RecordedOpponentBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L128
	ldr	r4, .L128+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L128+0x8
	str	r1, [r0]
	ldr	r0, .L128+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L126	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r0, .L128+0x10
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x20
	add	r1, r1, r0
	mov	r0, #0x39
	strb	r0, [r1]
	b	.L127
.L129:
	.align	2, 0
.L128:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	RecordedOpponentBufferRunCommand
	.word	gBattleTypeFlags
	.word	gBattleResources
.L126:
	ldr	r2, .L130
	ldr	r1, .L130+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L127:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L131:
	.align	2, 0
.L130:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe22:
	.size	 RecordedOpponentBufferExecCompleted,.Lfe22-RecordedOpponentBufferExecCompleted
	.align	2, 0
	.type	 RecordedOpponentHandleGetMonData,function
	.thumb_func
RecordedOpponentHandleGetMonData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x100
	mov	r6, #0x0
	ldr	r0, .L141
	ldr	r1, [r0]
	ldr	r0, .L141+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L133	@cond_branch
	ldr	r0, .L141+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	CopyRecordedOpponentMonData
	add	r6, r0, #0
	b	.L134
.L142:
	.align	2, 0
.L141:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L133:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L138:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L139	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	CopyRecordedOpponentMonData
	add	r6, r6, r0
.L139:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L138	@cond_branch
.L134:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	BtlController_EmitDataTransfer
	bl	RecordedOpponentBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 RecordedOpponentHandleGetMonData,.Lfe23-RecordedOpponentHandleGetMonData
	.align	2, 0
	.type	 CopyRecordedOpponentMonData,function
	.thumb_func
CopyRecordedOpponentMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x94
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r3, .L232
	ldr	r1, [r3]
	ldr	r2, .L232+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r4, r2, #0
	cmp	r0, #0x3b
	bls	.LCB2119
	bl	.L144	@far jump
.LCB2119:
	lsl	r0, r0, #0x2
	ldr	r1, .L232+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L233:
	.align	2, 0
.L232:
	.word	gBattleResources
	.word	gActiveBattler
	.word	.L226
	.align	2, 0
	.align	2, 0
.L226:
	.word	.L145
	.word	.L156
	.word	.L157
	.word	.L158
	.word	.L172
	.word	.L172
	.word	.L172
	.word	.L172
	.word	.L173
	.word	.L182
	.word	.L182
	.word	.L182
	.word	.L182
	.word	.L144
	.word	.L144
	.word	.L144
	.word	.L144
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L186
	.word	.L187
	.word	.L188
	.word	.L189
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L193
	.word	.L194
	.word	.L195
	.word	.L196
	.word	.L197
	.word	.L198
	.word	.L199
	.word	.L200
	.word	.L201
	.word	.L202
	.word	.L203
	.word	.L204
	.word	.L205
	.word	.L206
	.word	.L207
	.word	.L208
	.word	.L209
	.word	.L210
	.word	.L211
	.word	.L212
	.word	.L213
	.word	.L214
	.word	.L215
	.word	.L216
	.word	.L217
	.word	.L218
	.word	.L219
	.word	.L220
	.word	.L221
	.word	.L222
	.word	.L223
	.word	.L224
	.word	.L225
.L145:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L234
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r3, sp
	ldr	r2, .L234+0x4
	add	r1, r2, #0
	and	r0, r0, r1
	ldrh	r2, [r3]
	ldr	r1, .L234+0x8
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3]
	add	r0, r4, #0
	mov	r1, #0x59
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x3
	ldrb	r2, [r3, #0x1]
	mov	r1, #0x7
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x30]
	mov	r6, #0x0
	mov	r0, #0x25
	add	r0, r0, sp
	mov	r9, r0
	mov	r1, #0x3d
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2d
	str	r2, [sp, #0x84]
	mov	r0, sp
	add	r0, r0, #0x2c
	str	r0, [sp, #0x80]
	mov	r1, sp
	add	r1, r1, #0x6c
	str	r1, [sp, #0x90]
	add	r2, r2, #0x5
	str	r2, [sp, #0x88]
	add	r0, r0, #0x12
	str	r0, [sp, #0x8c]
	mov	r8, r4
	add	r4, sp, #0xc
.L149:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L149	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L234
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x84]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L234+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L234+0x10
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L234+0x14
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x50]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x80]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2a]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x58]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x90]
	bl	GetMonData
	ldr	r0, [sp, #0x88]
	ldr	r1, [sp, #0x90]
	bl	StringCopy10
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L154:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x5b
	bls	.L154	@cond_branch
	b	.L144
.L235:
	.align	2, 0
.L234:
	.word	gEnemyParty
	.word	0x7ff
	.word	-0x800
	.word	-0x3e1
	.word	-0xf8001
	.word	-0x1f1
.L156:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L236
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L228
.L237:
	.align	2, 0
.L236:
	.word	gEnemyParty
.L157:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L238
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L228
.L239:
	.align	2, 0
.L238:
	.word	gEnemyParty
.L158:
	mov	r6, #0x0
	add	r2, sp, #0x5c
	mov	r9, r2
	add	r0, sp, #0x64
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L240
	add	r4, r1, r0
	mov	r8, r9
.L162:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L162	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L240
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L167:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L167	@cond_branch
	b	.L144
.L241:
	.align	2, 0
.L240:
	.word	gEnemyParty
.L172:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L242
	add	r0, r0, r1
	ldr	r2, [r3]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x21
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0x9
	b	.L228
.L243:
	.align	2, 0
.L242:
	.word	gEnemyParty
.L173:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L244
	mov	r8, r2
.L177:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L177	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L244
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L144
.L245:
	.align	2, 0
.L244:
	.word	gEnemyParty
.L182:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L246
	add	r0, r0, r1
	ldr	r2, [r3]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x21
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0x8
	b	.L229
.L247:
	.align	2, 0
.L246:
	.word	gEnemyParty
.L183:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L248
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L230
.L249:
	.align	2, 0
.L248:
	.word	gEnemyParty
.L184:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L250
	add	r0, r0, r1
	mov	r1, #0x19
.L230:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L144
.L251:
	.align	2, 0
.L250:
	.word	gEnemyParty
.L185:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L252
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L229
.L253:
	.align	2, 0
.L252:
	.word	gEnemyParty
.L186:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L254
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L229
.L255:
	.align	2, 0
.L254:
	.word	gEnemyParty
.L187:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L256
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L229
.L257:
	.align	2, 0
.L256:
	.word	gEnemyParty
.L188:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L258
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L229
.L259:
	.align	2, 0
.L258:
	.word	gEnemyParty
.L189:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L260
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L229
.L261:
	.align	2, 0
.L260:
	.word	gEnemyParty
.L190:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L262
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L229
.L263:
	.align	2, 0
.L262:
	.word	gEnemyParty
.L191:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L264
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L229
.L265:
	.align	2, 0
.L264:
	.word	gEnemyParty
.L192:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L266
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L229
.L267:
	.align	2, 0
.L266:
	.word	gEnemyParty
.L193:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L268
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L229
.L269:
	.align	2, 0
.L268:
	.word	gEnemyParty
.L194:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L270
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L229
.L271:
	.align	2, 0
.L270:
	.word	gEnemyParty
.L195:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L272
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L229
.L273:
	.align	2, 0
.L272:
	.word	gEnemyParty
.L196:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L274
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L229
.L275:
	.align	2, 0
.L274:
	.word	gEnemyParty
.L197:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L276
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L144
.L277:
	.align	2, 0
.L276:
	.word	gEnemyParty
.L198:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L278
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L229
.L279:
	.align	2, 0
.L278:
	.word	gEnemyParty
.L199:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L280
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L229
.L281:
	.align	2, 0
.L280:
	.word	gEnemyParty
.L200:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L282
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L229
.L283:
	.align	2, 0
.L282:
	.word	gEnemyParty
.L201:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L284
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L229
.L285:
	.align	2, 0
.L284:
	.word	gEnemyParty
.L202:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L286
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L229
.L287:
	.align	2, 0
.L286:
	.word	gEnemyParty
.L203:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L288
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L229
.L289:
	.align	2, 0
.L288:
	.word	gEnemyParty
.L204:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L290
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L231
.L291:
	.align	2, 0
.L290:
	.word	gEnemyParty
.L205:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L292
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L228
.L293:
	.align	2, 0
.L292:
	.word	gEnemyParty
.L206:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L294
	add	r0, r0, r1
	mov	r1, #0x37
.L231:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L144
.L295:
	.align	2, 0
.L294:
	.word	gEnemyParty
.L207:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L296
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L229
.L297:
	.align	2, 0
.L296:
	.word	gEnemyParty
.L208:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L298
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L228
.L299:
	.align	2, 0
.L298:
	.word	gEnemyParty
.L209:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L300
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L228
.L301:
	.align	2, 0
.L300:
	.word	gEnemyParty
.L210:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L302
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L228
.L303:
	.align	2, 0
.L302:
	.word	gEnemyParty
.L211:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L304
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L228
.L305:
	.align	2, 0
.L304:
	.word	gEnemyParty
.L212:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L306
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L228
.L307:
	.align	2, 0
.L306:
	.word	gEnemyParty
.L213:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L308
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L228
.L309:
	.align	2, 0
.L308:
	.word	gEnemyParty
.L214:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L310
	add	r0, r0, r1
	mov	r1, #0x3f
.L228:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L144
.L311:
	.align	2, 0
.L310:
	.word	gEnemyParty
.L215:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L312
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L229
.L313:
	.align	2, 0
.L312:
	.word	gEnemyParty
.L216:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L314
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L229
.L315:
	.align	2, 0
.L314:
	.word	gEnemyParty
.L217:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L316
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L229
.L317:
	.align	2, 0
.L316:
	.word	gEnemyParty
.L218:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L318
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L229
.L319:
	.align	2, 0
.L318:
	.word	gEnemyParty
.L219:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L320
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L229
.L321:
	.align	2, 0
.L320:
	.word	gEnemyParty
.L220:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L322
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L229
.L323:
	.align	2, 0
.L322:
	.word	gEnemyParty
.L221:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L324
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L229
.L325:
	.align	2, 0
.L324:
	.word	gEnemyParty
.L222:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L326
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L229
.L327:
	.align	2, 0
.L326:
	.word	gEnemyParty
.L223:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L328
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L229
.L329:
	.align	2, 0
.L328:
	.word	gEnemyParty
.L224:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L330
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L229
.L331:
	.align	2, 0
.L330:
	.word	gEnemyParty
.L225:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L332
	add	r0, r0, r1
	mov	r1, #0x36
.L229:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L144:
	add	r0, r6, #0
	add	sp, sp, #0x94
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L333:
	.align	2, 0
.L332:
	.word	gEnemyParty
.Lfe24:
	.size	 CopyRecordedOpponentMonData,.Lfe24-CopyRecordedOpponentMonData
	.align	2, 0
	.type	 RecordedOpponentHandleGetRawMonData,function
	.thumb_func
RecordedOpponentHandleGetRawMonData:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 RecordedOpponentHandleGetRawMonData,.Lfe25-RecordedOpponentHandleGetRawMonData
	.align	2, 0
	.type	 RecordedOpponentHandleSetMonData,function
	.thumb_func
RecordedOpponentHandleSetMonData:
	push	{r4, r5, lr}
	ldr	r0, .L344
	ldr	r1, [r0]
	ldr	r0, .L344+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L336	@cond_branch
	ldr	r0, .L344+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	SetRecordedOpponentMonData
	b	.L337
.L345:
	.align	2, 0
.L344:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L336:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L341:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L342	@cond_branch
	add	r0, r5, #0
	bl	SetRecordedOpponentMonData
.L342:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L341	@cond_branch
.L337:
	bl	RecordedOpponentBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 RecordedOpponentHandleSetMonData,.Lfe26-RecordedOpponentHandleSetMonData
	.align	2, 0
	.type	 SetRecordedOpponentMonData,function
	.thumb_func
SetRecordedOpponentMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L418
	ldr	r4, .L418+0x4
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x20
	ldr	r1, [r3]
	add	r0, r1, r0
	add	r0, r0, #0x3
	mov	r9, r0
	mov	r8, r9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r7, r3, #0
	add	r5, r4, #0
	cmp	r0, #0x3b
	bls	.LCB3552
	bl	.L347	@far jump
.LCB3552:
	lsl	r0, r0, #0x2
	ldr	r1, .L418+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L419:
	.align	2, 0
.L418:
	.word	gBattleResources
	.word	gActiveBattler
	.word	.L414
	.align	2, 0
	.align	2, 0
.L414:
	.word	.L348
	.word	.L354
	.word	.L355
	.word	.L356
	.word	.L365
	.word	.L365
	.word	.L365
	.word	.L365
	.word	.L366
	.word	.L370
	.word	.L370
	.word	.L370
	.word	.L370
	.word	.L347
	.word	.L347
	.word	.L347
	.word	.L347
	.word	.L371
	.word	.L372
	.word	.L373
	.word	.L374
	.word	.L375
	.word	.L376
	.word	.L377
	.word	.L378
	.word	.L379
	.word	.L380
	.word	.L381
	.word	.L382
	.word	.L383
	.word	.L384
	.word	.L385
	.word	.L386
	.word	.L387
	.word	.L388
	.word	.L389
	.word	.L390
	.word	.L391
	.word	.L392
	.word	.L393
	.word	.L394
	.word	.L395
	.word	.L396
	.word	.L397
	.word	.L398
	.word	.L399
	.word	.L400
	.word	.L401
	.word	.L402
	.word	.L403
	.word	.L404
	.word	.L405
	.word	.L406
	.word	.L407
	.word	.L408
	.word	.L409
	.word	.L410
	.word	.L411
	.word	.L412
	.word	.L413
.L348:
	mov	r1, r8
	ldrh	r0, [r1]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	mov	r1, sp
	strh	r0, [r1]
	mov	r1, r8
	ldrb	r0, [r1, #0x1]
	lsr	r0, r0, #0x3
	mov	r5, sp
	add	r5, r5, #0x2
	strb	r0, [r5]
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L420
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x59
	add	r2, r5, #0
	bl	SetMonData
	mov	r2, r8
	add	r2, r2, #0x30
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r7, #0x0
	mov	r0, r8
	add	r0, r0, #0x3d
	str	r0, [sp, #0x28]
	mov	r1, r8
	add	r1, r1, #0x2d
	str	r1, [sp, #0x20]
	add	r0, r0, #0xb
	str	r0, [sp, #0x2c]
	mov	r1, #0x3
	add	r1, r1, sp
	mov	sl, r1
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	mov	r1, r8
	add	r1, r1, #0x50
	str	r1, [sp, #0x34]
	sub	r0, r0, #0x20
	str	r0, [sp, #0x1c]
	sub	r1, r1, #0x26
	str	r1, [sp, #0x18]
	add	r0, r0, #0x2
	str	r0, [sp, #0x24]
	sub	r1, r1, #0x28
	str	r1, [sp, #0x4]
	sub	r0, r0, #0x2a
	str	r0, [sp, #0x8]
	add	r1, r1, #0x4
	str	r1, [sp, #0xc]
	add	r0, r0, #0x4
	str	r0, [sp, #0x10]
	add	r1, r1, #0x4
	str	r1, [sp, #0x14]
	mov	r9, r4
	mov	r4, r8
	add	r4, r4, #0x25
	mov	r5, r8
	add	r5, r5, #0xc
.L352:
	add	r1, r7, #0
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r5, #0
	bl	SetMonData
	add	r1, r7, #0
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	add	r4, r4, #0x1
	add	r5, r5, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L352	@cond_branch
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L420
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrh	r0, [r1, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldr	r0, [r1, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrh	r0, [r1, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x34]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	b	.L347
.L421:
	.align	2, 0
.L420:
	.word	gEnemyParty
.L354:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L422
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0xb
	bl	SetMonData
	b	.L347
.L423:
	.align	2, 0
.L422:
	.word	gEnemyParty
.L355:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L424
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0xc
	bl	SetMonData
	b	.L347
.L425:
	.align	2, 0
.L424:
	.word	gEnemyParty
.L356:
	mov	r7, #0x0
	mov	r0, #0xc
	add	r0, r0, r9
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, .L426
	add	r1, r1, r0
	mov	r8, r1
	mov	r5, r9
	add	r5, r5, #0x8
	mov	r4, r9
.L360:
	add	r1, r7, #0
	add	r1, r1, #0xd
	mov	r0, r8
	add	r2, r4, #0
	bl	SetMonData
	add	r1, r7, #0
	add	r1, r1, #0x11
	mov	r0, r8
	add	r2, r5, #0
	bl	SetMonData
	add	r5, r5, #0x1
	add	r4, r4, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L360	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L426
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, sl
	bl	SetMonData
	b	.L347
.L427:
	.align	2, 0
.L426:
	.word	gEnemyParty
.L365:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L428
	add	r0, r0, r1
	ldr	r2, [r7]
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L416
.L429:
	.align	2, 0
.L428:
	.word	gEnemyParty
.L366:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L430
	add	r4, r4, r0
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x3
	add	r0, r4, #0
	mov	r1, #0x11
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x4
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x5
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x6
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x7
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L347
.L431:
	.align	2, 0
.L430:
	.word	gEnemyParty
.L370:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L432
	add	r0, r0, r1
	ldr	r2, [r7]
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L416:
	add	r3, r3, #0x20
	add	r2, r2, r3
	add	r2, r2, #0x3
	bl	SetMonData
	b	.L347
.L433:
	.align	2, 0
.L432:
	.word	gEnemyParty
.L371:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L434
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1
	bl	SetMonData
	b	.L347
.L435:
	.align	2, 0
.L434:
	.word	gEnemyParty
.L372:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L436
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x19
	bl	SetMonData
	b	.L347
.L437:
	.align	2, 0
.L436:
	.word	gEnemyParty
.L373:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L438
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1a
	bl	SetMonData
	b	.L347
.L439:
	.align	2, 0
.L438:
	.word	gEnemyParty
.L374:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L440
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1b
	bl	SetMonData
	b	.L347
.L441:
	.align	2, 0
.L440:
	.word	gEnemyParty
.L375:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L442
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1c
	bl	SetMonData
	b	.L347
.L443:
	.align	2, 0
.L442:
	.word	gEnemyParty
.L376:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L444
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1d
	bl	SetMonData
	b	.L347
.L445:
	.align	2, 0
.L444:
	.word	gEnemyParty
.L377:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L446
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1e
	bl	SetMonData
	b	.L347
.L447:
	.align	2, 0
.L446:
	.word	gEnemyParty
.L378:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L448
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1f
	bl	SetMonData
	b	.L347
.L449:
	.align	2, 0
.L448:
	.word	gEnemyParty
.L379:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L450
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x20
	bl	SetMonData
	b	.L347
.L451:
	.align	2, 0
.L450:
	.word	gEnemyParty
.L380:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L452
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x22
	bl	SetMonData
	b	.L347
.L453:
	.align	2, 0
.L452:
	.word	gEnemyParty
.L381:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L454
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x23
	bl	SetMonData
	b	.L347
.L455:
	.align	2, 0
.L454:
	.word	gEnemyParty
.L382:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L456
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x24
	bl	SetMonData
	b	.L347
.L457:
	.align	2, 0
.L456:
	.word	gEnemyParty
.L383:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L458
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x25
	bl	SetMonData
	b	.L347
.L459:
	.align	2, 0
.L458:
	.word	gEnemyParty
.L384:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L460
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x26
	bl	SetMonData
	b	.L347
.L461:
	.align	2, 0
.L460:
	.word	gEnemyParty
.L385:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L462
	add	r4, r4, r0
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x3
	add	r0, r4, #0
	mov	r1, #0x27
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x4
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x5
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x6
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x7
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x8
	add	r0, r4, #0
	b	.L417
.L463:
	.align	2, 0
.L462:
	.word	gEnemyParty
.L386:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L464
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x27
	bl	SetMonData
	b	.L347
.L465:
	.align	2, 0
.L464:
	.word	gEnemyParty
.L387:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L466
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x28
	bl	SetMonData
	b	.L347
.L467:
	.align	2, 0
.L466:
	.word	gEnemyParty
.L388:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L468
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x29
	bl	SetMonData
	b	.L347
.L469:
	.align	2, 0
.L468:
	.word	gEnemyParty
.L389:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L470
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2a
	bl	SetMonData
	b	.L347
.L471:
	.align	2, 0
.L470:
	.word	gEnemyParty
.L390:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L472
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2b
	bl	SetMonData
	b	.L347
.L473:
	.align	2, 0
.L472:
	.word	gEnemyParty
.L391:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L474
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
.L417:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L347
.L475:
	.align	2, 0
.L474:
	.word	gEnemyParty
.L392:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L476
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x0
	bl	SetMonData
	b	.L347
.L477:
	.align	2, 0
.L476:
	.word	gEnemyParty
.L393:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L478
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x9
	bl	SetMonData
	b	.L347
.L479:
	.align	2, 0
.L478:
	.word	gEnemyParty
.L394:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L480
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x37
	bl	SetMonData
	b	.L347
.L481:
	.align	2, 0
.L480:
	.word	gEnemyParty
.L395:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L482
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x38
	bl	SetMonData
	b	.L347
.L483:
	.align	2, 0
.L482:
	.word	gEnemyParty
.L396:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L484
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x39
	bl	SetMonData
	b	.L347
.L485:
	.align	2, 0
.L484:
	.word	gEnemyParty
.L397:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L486
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3a
	bl	SetMonData
	b	.L347
.L487:
	.align	2, 0
.L486:
	.word	gEnemyParty
.L398:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L488
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3b
	bl	SetMonData
	b	.L347
.L489:
	.align	2, 0
.L488:
	.word	gEnemyParty
.L399:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L490
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3c
	bl	SetMonData
	b	.L347
.L491:
	.align	2, 0
.L490:
	.word	gEnemyParty
.L400:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L492
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3d
	bl	SetMonData
	b	.L347
.L493:
	.align	2, 0
.L492:
	.word	gEnemyParty
.L401:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L494
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3e
	bl	SetMonData
	b	.L347
.L495:
	.align	2, 0
.L494:
	.word	gEnemyParty
.L402:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L496
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3f
	bl	SetMonData
	b	.L347
.L497:
	.align	2, 0
.L496:
	.word	gEnemyParty
.L403:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L498
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x16
	bl	SetMonData
	b	.L347
.L499:
	.align	2, 0
.L498:
	.word	gEnemyParty
.L404:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L500
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x17
	bl	SetMonData
	b	.L347
.L501:
	.align	2, 0
.L500:
	.word	gEnemyParty
.L405:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L502
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x18
	bl	SetMonData
	b	.L347
.L503:
	.align	2, 0
.L502:
	.word	gEnemyParty
.L406:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L504
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x21
	bl	SetMonData
	b	.L347
.L505:
	.align	2, 0
.L504:
	.word	gEnemyParty
.L407:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L506
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2f
	bl	SetMonData
	b	.L347
.L507:
	.align	2, 0
.L506:
	.word	gEnemyParty
.L408:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L508
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x30
	bl	SetMonData
	b	.L347
.L509:
	.align	2, 0
.L508:
	.word	gEnemyParty
.L409:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L510
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x32
	bl	SetMonData
	b	.L347
.L511:
	.align	2, 0
.L510:
	.word	gEnemyParty
.L410:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L512
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x33
	bl	SetMonData
	b	.L347
.L513:
	.align	2, 0
.L512:
	.word	gEnemyParty
.L411:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L514
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x34
	bl	SetMonData
	b	.L347
.L515:
	.align	2, 0
.L514:
	.word	gEnemyParty
.L412:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L516
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x35
	bl	SetMonData
	b	.L347
.L517:
	.align	2, 0
.L516:
	.word	gEnemyParty
.L413:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L518
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x36
	bl	SetMonData
.L347:
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L519:
	.align	2, 0
.L518:
	.word	gEnemyParty
.Lfe27:
	.size	 SetRecordedOpponentMonData,.Lfe27-SetRecordedOpponentMonData
	.align	2, 0
	.type	 RecordedOpponentHandleSetRawMonData,function
	.thumb_func
RecordedOpponentHandleSetRawMonData:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L526
	ldr	r7, .L526+0x4
	ldrb	r3, [r7]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r5, .L526+0x8
	ldr	r2, [r5]
	lsl	r3, r3, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x21
	add	r0, r0, r3
	ldrb	r0, [r0]
	ldr	r1, .L526+0xc
	add	r0, r0, r1
	add	r6, r4, r0
	mov	r4, #0x0
	add	r2, r2, #0x22
	add	r2, r2, r3
	ldrb	r2, [r2]
	cmp	r4, r2
	bcs	.L522	@cond_branch
	add	r3, r7, #0
.L524:
	add	r2, r6, r4
	ldr	r1, [r5]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x3
	add	r0, r4, r0
	add	r1, r1, #0x20
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, [r5]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r1, [r1]
	cmp	r4, r1
	bcc	.L524	@cond_branch
.L522:
	bl	RecordedOpponentBufferExecCompleted
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L527:
	.align	2, 0
.L526:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleResources
	.word	gEnemyParty
.Lfe28:
	.size	 RecordedOpponentHandleSetRawMonData,.Lfe28-RecordedOpponentHandleSetRawMonData
	.align	2, 0
	.type	 RecordedOpponentHandleLoadMonSprite,function
	.thumb_func
RecordedOpponentHandleLoadMonSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r7, .L529
	ldr	r6, .L529+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, #0x64
	mov	sl, r1
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	ldr	r1, .L529+0x8
	mov	r9, r1
	add	r0, r0, r9
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r9
	mov	r1, #0x59
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r9
	bl	BattleLoadOpponentMonSpriteGfx
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	add	r2, r4, #0
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L529+0xc
	mov	r8, r0
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L529+0x10
	ldrb	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r5, .L529+0x14
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L529+0x18
	strh	r1, [r0, #0x24]
	ldrb	r2, [r6]
	add	r0, r2, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x2e]
	ldrb	r3, [r6]
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r2, [r6]
	add	r4, r2, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L529+0x1c
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	StartSpriteAnim
	ldrb	r4, [r6]
	lsl	r0, r4, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r9
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r1, .L529+0x20
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L529+0x24
	str	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L530:
	.align	2, 0
.L529:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gBattleMonForms
	.word	gBattlerControllerFuncs
	.word	sub_8186C48
.Lfe29:
	.size	 RecordedOpponentHandleLoadMonSprite,.Lfe29-RecordedOpponentHandleLoadMonSprite
	.align	2, 0
	.type	 RecordedOpponentHandleSwitchInAnim,function
	.thumb_func
RecordedOpponentHandleSwitchInAnim:
	push	{r4, lr}
	ldr	r0, .L532
	ldr	r4, .L532+0x4
	ldrb	r1, [r4]
	lsl	r3, r1, #0x1
	add	r3, r3, r0
	ldr	r0, .L532+0x8
	ldr	r2, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r3]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x9
	add	r2, r2, #0x22
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	sub_81885D8
	ldr	r1, .L532+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L532+0x10
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L533:
	.align	2, 0
.L532:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlerControllerFuncs
	.word	sub_8187084
.Lfe30:
	.size	 RecordedOpponentHandleSwitchInAnim,.Lfe30-RecordedOpponentHandleSwitchInAnim
	.align	2, 0
	.type	 sub_81885D8,function
	.thumb_func
sub_81885D8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	ClearTemporarySpeciesSpriteData
	ldr	r0, .L535
	lsl	r4, r6, #0x1
	add	r4, r4, r0
	ldr	r0, .L535+0x4
	ldr	r0, [r0]
	lsl	r1, r6, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r5, .L535+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	mov	sl, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	ldrh	r0, [r4]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r5
	mov	r1, #0x59
	bl	GetMonData
	mov	r9, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L535+0xc
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L535+0x10
	add	r7, r6, r1
	strb	r0, [r7]
	ldrh	r0, [r4]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r5
	add	r1, r6, #0
	bl	BattleLoadOpponentMonSpriteGfx
	add	r0, r6, #0
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, sl
	mov	r2, r9
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L535+0x14
	mov	r8, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L535+0x18
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L535+0x1c
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x32]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	mov	r0, sl
	mov	r1, r9
	bl	GetFormSpeciesId
	ldrb	r2, [r4]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	strh	r0, [r1, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L535+0x20
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L535+0x24
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xfe
	bl	DoPokeballSendOutAnimation
	ldrb	r2, [r7]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L536:
	.align	2, 0
.L535:
	.word	gBattlerPartyIndexes
	.word	gBattleResources
	.word	gEnemyParty
	.word	sub_805D714
	.word	gUnknown_03005D7C
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe31:
	.size	 sub_81885D8,.Lfe31-sub_81885D8
	.align	2, 0
	.type	 RecordedOpponentHandleReturnMonToBall,function
	.thumb_func
RecordedOpponentHandleReturnMonToBall:
	push	{r4, r5, r6, lr}
	ldr	r0, .L540
	ldr	r0, [r0]
	ldr	r6, .L540+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L538	@cond_branch
	ldr	r0, .L540+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r3, [r0, #0x4]
	ldr	r1, .L540+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L540+0x10
	str	r1, [r0]
	b	.L539
.L541:
	.align	2, 0
.L540:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	DoSwitchOutAnimation
.L538:
	ldr	r5, .L542
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L542+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	HideBattlerShadowSprite
	ldr	r1, .L542+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	RecordedOpponentBufferExecCompleted
.L539:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L543:
	.align	2, 0
.L542:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe32:
	.size	 RecordedOpponentHandleReturnMonToBall,.Lfe32-RecordedOpponentHandleReturnMonToBall
	.align	2, 0
	.type	 DoSwitchOutAnimation,function
	.thumb_func
DoSwitchOutAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L552
	ldr	r4, [r6]
	ldr	r5, .L552+0x4
	ldrb	r2, [r5]
	ldr	r1, [r4, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	beq	.L546	@cond_branch
	cmp	r0, #0x1
	beq	.L548	@cond_branch
	b	.L545
.L553:
	.align	2, 0
.L552:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L546:
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L547	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L547:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L545
.L548:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L545	@cond_branch
	strb	r0, [r3, #0x4]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x2
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L554
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L554+0x4
	str	r1, [r0]
.L545:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L555:
	.align	2, 0
.L554:
	.word	gBattlerControllerFuncs
	.word	sub_8186D9C
.Lfe33:
	.size	 DoSwitchOutAnimation,.Lfe33-DoSwitchOutAnimation
	.align	2, 0
	.type	 RecordedOpponentHandleDrawTrainerPic,function
	.thumb_func
RecordedOpponentHandleDrawTrainerPic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r5, .L570
	ldr	r0, [r5]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L557	@cond_branch
	ldr	r4, .L570+0x4
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	mov	r1, #0x2
	and	r1, r1, r0
	mov	r7, #0xc8
	cmp	r1, #0
	beq	.L558	@cond_branch
	mov	r7, #0x98
.L558:
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L560	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0x1
	bne	.L561	@cond_branch
	ldr	r0, .L570+0x8
	b	.L567
.L571:
	.align	2, 0
.L570:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gTrainerBattleOpponent_A
.L561:
	ldr	r0, .L572
.L567:
	ldrh	r0, [r0]
	bl	GetFrontierTrainerFrontSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L564
.L573:
	.align	2, 0
.L572:
	.word	gTrainerBattleOpponent_B
.L560:
	bl	GetActiveBattlerLinkPlayerGender
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L568
.L557:
	mov	r7, #0xb0
	ldr	r0, .L574
	ldrh	r1, [r0]
	mov	r0, #0xc0
	lsl	r0, r0, #0x4
	cmp	r1, r0
	bne	.L565	@cond_branch
	bl	GetUnionRoomTrainerPic
	b	.L569
.L575:
	.align	2, 0
.L574:
	.word	gTrainerBattleOpponent_A
.L565:
	ldr	r2, .L576
	ldr	r0, .L576+0x4
	ldrb	r0, [r0]
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x13]
.L568:
	bl	PlayerGenderToFrontTrainerPicId
.L569:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L564:
	mov	r8, r0
	ldr	r5, .L576+0x8
	ldrb	r1, [r5]
	bl	DecompressTrainerFrontPic
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r6, .L576+0xc
	mov	r9, r7
	ldr	r1, .L576+0x10
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x8
	sub	r4, r4, r0
	lsl	r4, r4, #0x12
	mov	r0, #0xa0
	lsl	r0, r0, #0xe
	add	r4, r4, r0
	asr	r4, r4, #0x10
	ldrb	r0, [r5]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r6, #0
	mov	r1, r9
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r6, .L576+0x14
	ldrb	r1, [r5]
	add	r1, r1, r6
	strb	r0, [r1]
	ldr	r4, .L576+0x18
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L576+0x1c
	strh	r1, [r0, #0x24]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldr	r1, .L576+0x20
	mov	r2, r8
	lsl	r0, r2, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	ldrb	r1, [r5]
	add	r1, r1, r6
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, r8
	strh	r1, [r0, #0x6]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L576+0x24
	str	r1, [r0]
	ldr	r1, .L576+0x28
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L576+0x2c
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L577:
	.align	2, 0
.L576:
	.word	gLinkPlayers
	.word	gUnknown_0203C7B4
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerFrontPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gTrainerFrontPicPaletteTable
	.word	sub_805D7AC
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy
.Lfe34:
	.size	 RecordedOpponentHandleDrawTrainerPic,.Lfe34-RecordedOpponentHandleDrawTrainerPic
	.align	2, 0
	.type	 RecordedOpponentHandleTrainerSlide,function
	.thumb_func
RecordedOpponentHandleTrainerSlide:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 RecordedOpponentHandleTrainerSlide,.Lfe35-RecordedOpponentHandleTrainerSlide
	.align	2, 0
	.type	 RecordedOpponentHandleTrainerSlideBack,function
	.thumb_func
RecordedOpponentHandleTrainerSlideBack:
	push	{r4, r5, r6, lr}
	ldr	r6, .L580
	ldr	r4, .L580+0x4
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L580+0x8
	add	r0, r0, r5
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L580+0xc
	str	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L580+0x10
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L580+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L580+0x18
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L581:
	.align	2, 0
.L580:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	StartAnimLinearTranslation
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	sub_81865C8
.Lfe36:
	.size	 RecordedOpponentHandleTrainerSlideBack,.Lfe36-RecordedOpponentHandleTrainerSlideBack
	.align	2, 0
	.type	 RecordedOpponentHandleFaintAnimation,function
	.thumb_func
RecordedOpponentHandleFaintAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L587
	ldr	r4, [r6]
	ldr	r5, .L587+0x4
	ldrb	r2, [r5]
	ldr	r0, [r4, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L583	@cond_branch
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L584	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L584:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x4]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L585
.L588:
	.align	2, 0
.L587:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L583:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L585	@cond_branch
	strb	r0, [r3, #0x4]
	mov	r0, #0x10
	mov	r1, #0x3f
	bl	PlaySE12WithPanning
	ldr	r2, .L589
	ldr	r1, .L589+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L589+0x8
	str	r1, [r0]
	ldr	r1, .L589+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L589+0x10
	str	r1, [r0]
.L585:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L590:
	.align	2, 0
.L589:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCB_FaintOpponentMon
	.word	gBattlerControllerFuncs
	.word	sub_8186D58
.Lfe37:
	.size	 RecordedOpponentHandleFaintAnimation,.Lfe37-RecordedOpponentHandleFaintAnimation
	.align	2, 0
	.type	 RecordedOpponentHandlePaletteFade,function
	.thumb_func
RecordedOpponentHandlePaletteFade:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 RecordedOpponentHandlePaletteFade,.Lfe38-RecordedOpponentHandlePaletteFade
	.align	2, 0
	.type	 RecordedOpponentHandleSuccessBallThrowAnim,function
	.thumb_func
RecordedOpponentHandleSuccessBallThrowAnim:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 RecordedOpponentHandleSuccessBallThrowAnim,.Lfe39-RecordedOpponentHandleSuccessBallThrowAnim
	.align	2, 0
	.type	 RecordedOpponentHandleBallThrowAnim,function
	.thumb_func
RecordedOpponentHandleBallThrowAnim:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 RecordedOpponentHandleBallThrowAnim,.Lfe40-RecordedOpponentHandleBallThrowAnim
	.align	2, 0
	.type	 RecordedOpponentHandlePause,function
	.thumb_func
RecordedOpponentHandlePause:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 RecordedOpponentHandlePause,.Lfe41-RecordedOpponentHandlePause
	.align	2, 0
	.type	 RecordedOpponentHandleMoveAnimation,function
	.thumb_func
RecordedOpponentHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L599
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB6397
	b	.L596	@long jump
.LCB6397:
	ldr	r0, .L599+0x4
	ldr	r0, [r0]
	mov	ip, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L599+0x8
	mov	r1, ip
	add	r1, r1, #0x23
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r5]
	ldr	r4, .L599+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x24
	add	r1, r1, r2
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x25
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L599+0x10
	ldrb	r3, [r6]
	lsl	r3, r3, #0x9
	mov	r1, ip
	add	r1, r1, #0x26
	add	r1, r1, r3
	ldrb	r2, [r1]
	mov	r1, ip
	add	r1, r1, #0x27
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r2, r2, r1
	mov	r1, ip
	add	r1, r1, #0x28
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	mov	r1, ip
	add	r1, r1, #0x29
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x18
	orr	r2, r2, r1
	str	r2, [r4]
	ldr	r3, .L599+0x14
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x2a
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L599+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x2c
	add	r1, r1, r2
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x2d
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L599+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, #0x20
	add	r2, r2, ip
	add	r1, r2, #0
	add	r1, r1, #0x10
	str	r1, [r3]
	ldr	r3, .L599+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2, #0x10]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	IsMoveWithoutAnimation
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L597	@cond_branch
	bl	RecordedOpponentBufferExecCompleted
	b	.L596
.L600:
	.align	2, 0
.L599:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gAnimMoveTurn
	.word	gAnimMovePower
	.word	gAnimMoveDmg
	.word	gAnimFriendship
	.word	gWeatherMoveAnim
	.word	gAnimDisableStructPtr
	.word	gTransformedPersonalities
.L597:
	ldr	r0, .L601
	ldr	r0, [r0]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x4]
	ldr	r1, .L601+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L601+0x8
	str	r1, [r0]
.L596:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L602:
	.align	2, 0
.L601:
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	RecordedOpponentDoMoveAnimation
.Lfe42:
	.size	 RecordedOpponentHandleMoveAnimation,.Lfe42-RecordedOpponentHandleMoveAnimation
	.align	2, 0
	.type	 RecordedOpponentDoMoveAnimation,function
	.thumb_func
RecordedOpponentDoMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L617
	mov	r9, r0
	ldr	r1, [r0]
	ldr	r6, .L617+0x4
	ldrb	r3, [r6]
	lsl	r2, r3, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r4, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x22
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	add	r1, r1, #0x2b
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r8, r1
	ldr	r7, .L617+0x8
	ldr	r5, [r7]
	ldr	r1, [r5, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L607	@cond_branch
	cmp	r2, #0x1
	bgt	.L616	@cond_branch
	cmp	r2, #0
	beq	.L605	@cond_branch
	b	.L604
.L618:
	.align	2, 0
.L617:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
.L616:
	cmp	r2, #0x2
	beq	.L609	@cond_branch
	cmp	r2, #0x3
	beq	.L612	@cond_branch
	b	.L604
.L605:
	ldr	r1, [r5]
	lsl	r0, r3, #0x2
	add	r1, r0, r1
	ldrb	r3, [r1]
	mov	r0, #0xc
	and	r0, r0, r3
	cmp	r0, #0x4
	bne	.L606	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r3
	strb	r0, [r1]
	ldrb	r2, [r6]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L606:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L604
.L607:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L604	@cond_branch
	mov	r0, #0x0
	bl	sub_805EB9C
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x4]
	b	.L604
.L609:
	ldr	r0, .L619
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L619+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L604	@cond_branch
	mov	r0, #0x1
	bl	sub_805EB9C
	ldr	r0, [r7]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L611	@cond_branch
	mov	r1, r8
	cmp	r1, #0x1
	bhi	.L611	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L611:
	ldr	r0, .L619+0x8
	ldr	r2, [r0]
	ldr	r0, .L619+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L604
.L620:
	.align	2, 0
.L619:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L612:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L604	@cond_branch
	bl	CopyAllBattleSpritesInvisibilities
	ldrb	r0, [r6]
	mov	r1, r9
	ldr	r2, [r1]
	lsl	r3, r0, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r2, r2, #0x22
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	TrySetBehindSubstituteSpriteBit
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r4, [r0, #0x4]
	bl	RecordedOpponentBufferExecCompleted
.L604:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 RecordedOpponentDoMoveAnimation,.Lfe43-RecordedOpponentDoMoveAnimation
	.align	2, 0
	.type	 RecordedOpponentHandlePrintString,function
	.thumb_func
RecordedOpponentHandlePrintString:
	push	{r4, lr}
	ldr	r0, .L622
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L622+0x4
	strh	r1, [r0]
	ldr	r0, .L622+0x8
	ldr	r4, .L622+0xc
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	bl	BufferStringBattle
	ldr	r0, .L622+0x10
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
	ldr	r1, .L622+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L622+0x18
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L623:
	.align	2, 0
.L622:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleResources
	.word	gActiveBattler
	.word	gDisplayedStringBattle
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter
.Lfe44:
	.size	 RecordedOpponentHandlePrintString,.Lfe44-RecordedOpponentHandlePrintString
	.align	2, 0
	.type	 RecordedOpponentHandlePrintSelectionString,function
	.thumb_func
RecordedOpponentHandlePrintSelectionString:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 RecordedOpponentHandlePrintSelectionString,.Lfe45-RecordedOpponentHandlePrintSelectionString
	.align	2, 0
	.type	 RecordedOpponentHandleChooseAction,function
	.thumb_func
RecordedOpponentHandleChooseAction:
	push	{lr}
	ldr	r0, .L626
	ldrb	r0, [r0]
	bl	RecordedBattle_GetBattlerAction
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L627:
	.align	2, 0
.L626:
	.word	gActiveBattler
.Lfe46:
	.size	 RecordedOpponentHandleChooseAction,.Lfe46-RecordedOpponentHandleChooseAction
	.align	2, 0
	.type	 RecordedOpponentHandleUnknownYesNoBox,function
	.thumb_func
RecordedOpponentHandleUnknownYesNoBox:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 RecordedOpponentHandleUnknownYesNoBox,.Lfe47-RecordedOpponentHandleUnknownYesNoBox
	.align	2, 0
	.type	 RecordedOpponentHandleChooseMove,function
	.thumb_func
RecordedOpponentHandleChooseMove:
	push	{r4, r5, lr}
	ldr	r0, .L632
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L630	@cond_branch
	bl	ChooseMoveAndTargetInBattlePalace
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
	b	.L631
.L633:
	.align	2, 0
.L632:
	.word	gBattleTypeFlags
.L630:
	ldr	r5, .L634
	ldrb	r0, [r5]
	bl	RecordedBattle_GetBattlerAction
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r5]
	bl	RecordedBattle_GetBattlerAction
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x10
	orr	r2, r2, r4
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
.L631:
	bl	RecordedOpponentBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L635:
	.align	2, 0
.L634:
	.word	gActiveBattler
.Lfe48:
	.size	 RecordedOpponentHandleChooseMove,.Lfe48-RecordedOpponentHandleChooseMove
	.align	2, 0
	.type	 RecordedOpponentHandleChooseItem,function
	.thumb_func
RecordedOpponentHandleChooseItem:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 RecordedOpponentHandleChooseItem,.Lfe49-RecordedOpponentHandleChooseItem
	.align	2, 0
	.type	 RecordedOpponentHandleChoosePokemon,function
	.thumb_func
RecordedOpponentHandleChoosePokemon:
	push	{r4, lr}
	ldr	r4, .L638
	ldrb	r0, [r4]
	bl	RecordedBattle_GetBattlerAction
	ldrb	r1, [r4]
	ldr	r3, .L638+0x4
	ldr	r2, [r3]
	add	r1, r1, r2
	add	r1, r1, #0x5c
	strb	r0, [r1]
	ldrb	r0, [r4]
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	ldrb	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitChosenMonReturnValue
	bl	RecordedOpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L639:
	.align	2, 0
.L638:
	.word	gActiveBattler
	.word	gBattleStruct
.Lfe50:
	.size	 RecordedOpponentHandleChoosePokemon,.Lfe50-RecordedOpponentHandleChoosePokemon
	.align	2, 0
	.type	 RecordedOpponentHandleCmd23,function
	.thumb_func
RecordedOpponentHandleCmd23:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 RecordedOpponentHandleCmd23,.Lfe51-RecordedOpponentHandleCmd23
	.align	2, 0
	.type	 RecordedOpponentHandleHealthBarUpdate,function
	.thumb_func
RecordedOpponentHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	ldr	r0, .L644
	ldr	r2, [r0]
	ldr	r0, .L644+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r3, r4, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x22
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r2, r2, #0x23
	add	r2, r2, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r7, r1, #0x10
	ldr	r0, .L644+0x8
	cmp	r7, r0
	beq	.L642	@cond_branch
	ldr	r6, .L644+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L644+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L644+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	SetBattleBarStruct
	b	.L643
.L645:
	.align	2, 0
.L644:
	.word	gBattleResources
	.word	gActiveBattler
	.word	0x7fff
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHealthboxSpriteIds
.L642:
	ldr	r1, .L646
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L646+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L646+0x8
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	SetBattleBarStruct
.L643:
	ldr	r1, .L646+0xc
	ldr	r0, .L646+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L646+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L647:
	.align	2, 0
.L646:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnHealthbarDone
.Lfe52:
	.size	 RecordedOpponentHandleHealthBarUpdate,.Lfe52-RecordedOpponentHandleHealthBarUpdate
	.align	2, 0
	.type	 RecordedOpponentHandleExpUpdate,function
	.thumb_func
RecordedOpponentHandleExpUpdate:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 RecordedOpponentHandleExpUpdate,.Lfe53-RecordedOpponentHandleExpUpdate
	.align	2, 0
	.type	 RecordedOpponentHandleStatusIconUpdate,function
	.thumb_func
RecordedOpponentHandleStatusIconUpdate:
	push	{r4, lr}
	ldr	r4, .L651
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L650	@cond_branch
	ldr	r0, .L651+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L651+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L651+0xc
	add	r1, r1, r2
	mov	r2, #0x9
	bl	UpdateHealthboxAttribute
	ldrb	r2, [r4]
	ldr	r0, .L651+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L651+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L651+0x18
	str	r1, [r0]
.L650:
	pop	{r4}
	pop	{r0}
	bx	r0
.L652:
	.align	2, 0
.L651:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe54:
	.size	 RecordedOpponentHandleStatusIconUpdate,.Lfe54-RecordedOpponentHandleStatusIconUpdate
	.align	2, 0
	.type	 RecordedOpponentHandleStatusAnimation,function
	.thumb_func
RecordedOpponentHandleStatusAnimation:
	push	{r4, lr}
	ldr	r4, .L655
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L654	@cond_branch
	ldr	r0, .L655+0x4
	ldr	r0, [r0]
	mov	ip, r0
	ldrb	r3, [r4]
	lsl	r3, r3, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r3
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x22
	add	r1, r1, r3
	ldrb	r1, [r1]
	mov	r2, ip
	add	r2, r2, #0x23
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	mov	r2, ip
	add	r2, r2, #0x24
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x10
	orr	r1, r1, r2
	mov	r2, ip
	add	r2, r2, #0x25
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	bl	InitAndLaunchChosenStatusAnimation
	ldr	r1, .L655+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L655+0xc
	str	r1, [r0]
.L654:
	pop	{r4}
	pop	{r0}
	bx	r0
.L656:
	.align	2, 0
.L655:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe55:
	.size	 RecordedOpponentHandleStatusAnimation,.Lfe55-RecordedOpponentHandleStatusAnimation
	.align	2, 0
	.type	 RecordedOpponentHandleStatusXor,function
	.thumb_func
RecordedOpponentHandleStatusXor:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 RecordedOpponentHandleStatusXor,.Lfe56-RecordedOpponentHandleStatusXor
	.align	2, 0
	.type	 RecordedOpponentHandleDataTransfer,function
	.thumb_func
RecordedOpponentHandleDataTransfer:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 RecordedOpponentHandleDataTransfer,.Lfe57-RecordedOpponentHandleDataTransfer
	.align	2, 0
	.type	 RecordedOpponentHandleDMA3Transfer,function
	.thumb_func
RecordedOpponentHandleDMA3Transfer:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 RecordedOpponentHandleDMA3Transfer,.Lfe58-RecordedOpponentHandleDMA3Transfer
	.align	2, 0
	.type	 RecordedOpponentHandlePlayBGM,function
	.thumb_func
RecordedOpponentHandlePlayBGM:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 RecordedOpponentHandlePlayBGM,.Lfe59-RecordedOpponentHandlePlayBGM
	.align	2, 0
	.type	 RecordedOpponentHandleCmd32,function
	.thumb_func
RecordedOpponentHandleCmd32:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 RecordedOpponentHandleCmd32,.Lfe60-RecordedOpponentHandleCmd32
	.align	2, 0
	.type	 RecordedOpponentHandleTwoReturnValues,function
	.thumb_func
RecordedOpponentHandleTwoReturnValues:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 RecordedOpponentHandleTwoReturnValues,.Lfe61-RecordedOpponentHandleTwoReturnValues
	.align	2, 0
	.type	 RecordedOpponentHandleChosenMonReturnValue,function
	.thumb_func
RecordedOpponentHandleChosenMonReturnValue:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 RecordedOpponentHandleChosenMonReturnValue,.Lfe62-RecordedOpponentHandleChosenMonReturnValue
	.align	2, 0
	.type	 RecordedOpponentHandleOneReturnValue,function
	.thumb_func
RecordedOpponentHandleOneReturnValue:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 RecordedOpponentHandleOneReturnValue,.Lfe63-RecordedOpponentHandleOneReturnValue
	.align	2, 0
	.type	 RecordedOpponentHandleOneReturnValue_Duplicate,function
	.thumb_func
RecordedOpponentHandleOneReturnValue_Duplicate:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 RecordedOpponentHandleOneReturnValue_Duplicate,.Lfe64-RecordedOpponentHandleOneReturnValue_Duplicate
	.align	2, 0
	.type	 RecordedOpponentHandleCmd37,function
	.thumb_func
RecordedOpponentHandleCmd37:
	push	{lr}
	ldr	r2, .L667
	ldrb	r1, [r2]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L668:
	.align	2, 0
.L667:
	.word	gUnknown_02022D0C
.Lfe65:
	.size	 RecordedOpponentHandleCmd37,.Lfe65-RecordedOpponentHandleCmd37
	.align	2, 0
	.type	 RecordedOpponentHandleCmd38,function
	.thumb_func
RecordedOpponentHandleCmd38:
	push	{lr}
	ldr	r3, .L670
	ldr	r0, .L670+0x4
	ldr	r1, [r0]
	ldr	r0, .L670+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, #0x7f
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L671:
	.align	2, 0
.L670:
	.word	gUnknown_02022D0C
	.word	gBattleResources
	.word	gActiveBattler
.Lfe66:
	.size	 RecordedOpponentHandleCmd38,.Lfe66-RecordedOpponentHandleCmd38
	.align	2, 0
	.type	 RecordedOpponentHandleCmd39,function
	.thumb_func
RecordedOpponentHandleCmd39:
	push	{lr}
	ldr	r2, .L673
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L674:
	.align	2, 0
.L673:
	.word	gUnknown_02022D0C
.Lfe67:
	.size	 RecordedOpponentHandleCmd39,.Lfe67-RecordedOpponentHandleCmd39
	.align	2, 0
	.type	 RecordedOpponentHandleCmd40,function
	.thumb_func
RecordedOpponentHandleCmd40:
	push	{lr}
	ldr	r3, .L676
	ldr	r1, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrb	r2, [r3]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L677:
	.align	2, 0
.L676:
	.word	gUnknown_02022D0C
.Lfe68:
	.size	 RecordedOpponentHandleCmd40,.Lfe68-RecordedOpponentHandleCmd40
	.align	2, 0
	.type	 RecordedOpponentHandleHitAnimation,function
	.thumb_func
RecordedOpponentHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L681
	ldr	r2, .L681+0x4
	ldr	r4, .L681+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L679	@cond_branch
	bl	RecordedOpponentBufferExecCompleted
	b	.L680
.L682:
	.align	2, 0
.L681:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.L679:
	ldr	r1, .L683
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	DoHitAnimHealthboxEffect
	ldr	r1, .L683+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L683+0x8
	str	r1, [r0]
.L680:
	pop	{r4}
	pop	{r0}
	bx	r0
.L684:
	.align	2, 0
.L683:
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	DoHitAnimBlinkSpriteEffect
.Lfe69:
	.size	 RecordedOpponentHandleHitAnimation,.Lfe69-RecordedOpponentHandleHitAnimation
	.align	2, 0
	.type	 RecordedOpponentHandleCmd42,function
	.thumb_func
RecordedOpponentHandleCmd42:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 RecordedOpponentHandleCmd42,.Lfe70-RecordedOpponentHandleCmd42
	.align	2, 0
	.type	 RecordedOpponentHandlePlaySE,function
	.thumb_func
RecordedOpponentHandlePlaySE:
	push	{r4, lr}
	ldr	r4, .L689
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r3, #0x3f
	cmp	r0, #0
	bne	.L687	@cond_branch
	mov	r3, #0xc0
.L687:
	ldr	r0, .L689+0x4
	ldr	r1, [r0]
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	bl	RecordedOpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L690:
	.align	2, 0
.L689:
	.word	gActiveBattler
	.word	gBattleResources
.Lfe71:
	.size	 RecordedOpponentHandlePlaySE,.Lfe71-RecordedOpponentHandlePlaySE
	.align	2, 0
	.type	 RecordedOpponentHandlePlayFanfareOrBGM,function
	.thumb_func
RecordedOpponentHandlePlayFanfareOrBGM:
	push	{r4, r5, lr}
	ldr	r5, .L694
	ldr	r1, [r5]
	ldr	r4, .L694+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x23
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L692	@cond_branch
	bl	BattleStopLowHpSound
	ldr	r1, [r5]
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayBGM
	b	.L693
.L695:
	.align	2, 0
.L694:
	.word	gBattleResources
	.word	gActiveBattler
.L692:
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
.L693:
	bl	RecordedOpponentBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe72:
	.size	 RecordedOpponentHandlePlayFanfareOrBGM,.Lfe72-RecordedOpponentHandlePlayFanfareOrBGM
	.align	2, 0
	.type	 RecordedOpponentHandleFaintingCry,function
	.thumb_func
RecordedOpponentHandleFaintingCry:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r0, .L697
	mov	r9, r0
	ldr	r1, .L697+0x4
	mov	r8, r1
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L697+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x59
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	GetFormSpeciesId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	mov	r2, #0x5
	bl	PlayCry3
	bl	RecordedOpponentBufferExecCompleted
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L698:
	.align	2, 0
.L697:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gEnemyParty
.Lfe73:
	.size	 RecordedOpponentHandleFaintingCry,.Lfe73-RecordedOpponentHandleFaintingCry
	.align	2, 0
	.type	 RecordedOpponentHandleIntroSlide,function
	.thumb_func
RecordedOpponentHandleIntroSlide:
	push	{lr}
	ldr	r0, .L700
	ldr	r1, [r0]
	ldr	r0, .L700+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	HandleIntroSlide
	ldr	r2, .L700+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L701:
	.align	2, 0
.L700:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gIntroSlideFlags
.Lfe74:
	.size	 RecordedOpponentHandleIntroSlide,.Lfe74-RecordedOpponentHandleIntroSlide
	.align	2, 0
	.type	 RecordedOpponentHandleIntroTrainerBallThrow,function
	.thumb_func
RecordedOpponentHandleIntroTrainerBallThrow:
	push	{r4, r5, r6, lr}
	ldr	r5, .L704
	ldr	r6, .L704+0x4
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L704+0x8
	add	r0, r0, r4
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L704+0xc
	str	r1, [r0]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L704+0x10
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L704+0x14
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L704+0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r6]
	strh	r0, [r1, #0x8]
	ldr	r3, .L704+0x1c
	ldr	r0, [r3]
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L703	@cond_branch
	ldr	r0, .L704+0x20
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L704+0x24
	str	r1, [r0]
.L703:
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L704+0x28
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L704+0x2c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L705:
	.align	2, 0
.L704:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	StartAnimLinearTranslation
	.word	sub_818962C
	.word	sub_8189548
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
	.word	gBattlerControllerFuncs
	.word	nullsub_70
.Lfe75:
	.size	 RecordedOpponentHandleIntroTrainerBallThrow,.Lfe75-RecordedOpponentHandleIntroTrainerBallThrow
	.align	2, 0
	.type	 sub_8189548,function
	.thumb_func
sub_8189548:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r7, .L710
	ldrb	r0, [r7]
	mov	r9, r0
	ldr	r1, .L710+0x4
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	strb	r0, [r7]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L708	@cond_branch
	ldr	r0, .L710+0x8
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L707	@cond_branch
.L708:
	ldr	r0, .L710+0xc
	ldr	r1, [r0]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldr	r2, .L710+0x10
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_81885D8
	b	.L709
.L711:
	.align	2, 0
.L710:
	.word	gActiveBattler
	.word	gTasks
	.word	gBattleTypeFlags
	.word	gBattleResources
	.word	gBattlerPartyIndexes
.L707:
	ldr	r5, .L712
	ldr	r1, [r5]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldr	r6, .L712+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_81885D8
	ldrb	r0, [r7]
	mov	r4, #0x2
	eor	r0, r0, r4
	strb	r0, [r7]
	ldr	r1, [r5]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_81885D8
	ldrb	r0, [r7]
	eor	r0, r0, r4
	strb	r0, [r7]
.L709:
	ldr	r1, .L712+0x8
	ldr	r2, .L712+0xc
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L712+0x10
	str	r1, [r0]
	mov	r0, r9
	strb	r0, [r2]
	mov	r0, r8
	bl	DestroyTask
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L713:
	.align	2, 0
.L712:
	.word	gBattleResources
	.word	gBattlerPartyIndexes
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	sub_818686C
.Lfe76:
	.size	 sub_8189548,.Lfe76-sub_8189548
	.align	2, 0
	.type	 sub_818962C,function
	.thumb_func
sub_818962C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x6]
	bl	FreeTrainerFrontPicPalette
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe77:
	.size	 sub_818962C,.Lfe77-sub_818962C
	.align	2, 0
	.type	 RecordedOpponentHandleDrawPartyStatusSummary,function
	.thumb_func
RecordedOpponentHandleDrawPartyStatusSummary:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L722
	ldr	r0, [r0]
	ldr	r1, .L722+0x4
	ldrb	r2, [r1]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L716	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L716	@cond_branch
	bl	RecordedOpponentBufferExecCompleted
	b	.L715
.L723:
	.align	2, 0
.L722:
	.word	gBattleResources
	.word	gActiveBattler
.L716:
	ldr	r5, .L724
	ldr	r0, [r5]
	ldr	r3, .L724+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r2, .L724+0x8
	ldr	r0, [r2]
	ldrb	r4, [r3]
	lsl	r1, r4, #0x9
	add	r0, r0, #0x22
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r7, r2, #0
	mov	r8, r3
	cmp	r0, #0
	beq	.L718	@cond_branch
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r2, [r3, #0x1]
	lsl	r1, r2, #0x1b
	lsr	r0, r1, #0x1c
	cmp	r0, #0x1
	bhi	.L719	@cond_branch
	add	r0, r0, #0x1
	mov	r1, #0xf
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, #0x1f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
	b	.L715
.L725:
	.align	2, 0
.L724:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleResources
.L719:
	mov	r0, #0x1f
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r3, #0x1]
.L718:
	mov	r5, r8
	ldrb	r0, [r5]
	lsl	r4, r0, #0x9
	add	r1, r4, #0
	add	r1, r1, #0x20
	ldr	r3, [r7]
	add	r1, r3, r1
	add	r1, r1, #0x4
	add	r2, r3, #0
	add	r2, r2, #0x21
	add	r2, r2, r4
	ldrb	r2, [r2]
	add	r3, r3, #0x22
	add	r3, r3, r4
	ldrb	r3, [r3]
	bl	CreatePartyStatusSummarySprites
	ldr	r2, .L726
	ldrb	r1, [r5]
	add	r1, r1, r2
	mov	r3, #0x0
	strb	r0, [r1]
	ldr	r6, .L726+0x4
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x5]
	ldr	r0, [r7]
	ldrb	r4, [r5]
	lsl	r1, r4, #0x9
	add	r0, r0, #0x22
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L721	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x5d
	strb	r1, [r0, #0x5]
.L721:
	ldr	r0, .L726+0x8
	mov	r2, r8
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L726+0xc
	str	r0, [r1]
.L715:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L727:
	.align	2, 0
.L726:
	.word	gBattlerStatusSummaryTaskId
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_818975C
.Lfe78:
	.size	 RecordedOpponentHandleDrawPartyStatusSummary,.Lfe78-RecordedOpponentHandleDrawPartyStatusSummary
	.align	2, 0
	.type	 sub_818975C,function
	.thumb_func
sub_818975C:
	push	{r4, lr}
	ldr	r4, .L730
	ldr	r0, [r4]
	ldr	r3, .L730+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x5]
	add	r2, r1, #0x1
	strb	r2, [r0, #0x5]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x5c
	bls	.L729	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x5]
	bl	RecordedOpponentBufferExecCompleted
.L729:
	pop	{r4}
	pop	{r0}
	bx	r0
.L731:
	.align	2, 0
.L730:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe79:
	.size	 sub_818975C,.Lfe79-sub_818975C
	.align	2, 0
	.type	 RecordedOpponentHandleHidePartyStatusSummary,function
	.thumb_func
RecordedOpponentHandleHidePartyStatusSummary:
	push	{lr}
	ldr	r0, .L734
	ldr	r1, [r0]
	ldr	r0, .L734+0x4
	ldrb	r3, [r0]
	ldr	r1, [r1, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L733	@cond_branch
	ldr	r2, .L734+0x8
	ldr	r0, .L734+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L734+0x10
	str	r1, [r0]
.L733:
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L735:
	.align	2, 0
.L734:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gTasks
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
.Lfe80:
	.size	 RecordedOpponentHandleHidePartyStatusSummary,.Lfe80-RecordedOpponentHandleHidePartyStatusSummary
	.align	2, 0
	.type	 RecordedOpponentHandleEndBounceEffect,function
	.thumb_func
RecordedOpponentHandleEndBounceEffect:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 RecordedOpponentHandleEndBounceEffect,.Lfe81-RecordedOpponentHandleEndBounceEffect
	.align	2, 0
	.type	 RecordedOpponentHandleSpriteInvisibility,function
	.thumb_func
RecordedOpponentHandleSpriteInvisibility:
	push	{r4, lr}
	ldr	r4, .L739
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L738	@cond_branch
	ldr	r3, .L739+0x4
	ldr	r0, .L739+0x8
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r0, .L739+0xc
	ldr	r0, [r0]
	lsl	r1, r1, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	add	r2, r2, #0x3e
	mov	r3, #0x1
	ldrb	r1, [r0]
	and	r1, r1, r3
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	CopyBattleSpriteInvisibility
.L738:
	bl	RecordedOpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L740:
	.align	2, 0
.L739:
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleResources
.Lfe82:
	.size	 RecordedOpponentHandleSpriteInvisibility,.Lfe82-RecordedOpponentHandleSpriteInvisibility
	.align	2, 0
	.type	 RecordedOpponentHandleBattleAnimation,function
	.thumb_func
RecordedOpponentHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r6, .L745
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L742	@cond_branch
	ldr	r0, .L745+0x4
	ldr	r1, [r0]
	ldrb	r2, [r6]
	lsl	r5, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r5
	ldrb	r3, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x22
	add	r0, r0, r5
	ldrb	r4, [r0]
	add	r1, r1, #0x23
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	TryHandleLaunchBattleTableAnimation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L743	@cond_branch
	bl	RecordedOpponentBufferExecCompleted
	b	.L742
.L746:
	.align	2, 0
.L745:
	.word	gActiveBattler
	.word	gBattleResources
.L743:
	ldr	r0, .L747
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L747+0x4
	str	r0, [r1]
.L742:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L748:
	.align	2, 0
.L747:
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedBattleAnimation
.Lfe83:
	.size	 RecordedOpponentHandleBattleAnimation,.Lfe83-RecordedOpponentHandleBattleAnimation
	.align	2, 0
	.type	 RecordedOpponentHandleLinkStandbyMsg,function
	.thumb_func
RecordedOpponentHandleLinkStandbyMsg:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 RecordedOpponentHandleLinkStandbyMsg,.Lfe84-RecordedOpponentHandleLinkStandbyMsg
	.align	2, 0
	.type	 RecordedOpponentHandleResetActionMoveSelection,function
	.thumb_func
RecordedOpponentHandleResetActionMoveSelection:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe85:
	.size	 RecordedOpponentHandleResetActionMoveSelection,.Lfe85-RecordedOpponentHandleResetActionMoveSelection
	.align	2, 0
	.type	 RecordedOpponentHandleCmd55,function
	.thumb_func
RecordedOpponentHandleCmd55:
	push	{lr}
	ldr	r0, .L754
	ldr	r1, [r0]
	ldr	r0, .L754+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r2, [r1]
	cmp	r2, #0x3
	bne	.L752	@cond_branch
	ldr	r0, .L754+0x8
	strb	r2, [r0]
	b	.L753
.L755:
	.align	2, 0
.L754:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleOutcome
.L752:
	ldr	r0, .L756
	mov	r1, #0x3
	eor	r1, r1, r2
	strb	r1, [r0]
.L753:
	mov	r0, #0x5
	bl	FadeOutMapMusic
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	bl	RecordedOpponentBufferExecCompleted
	ldr	r1, .L756+0x4
	ldr	r0, .L756+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L756+0xc
	str	r1, [r0]
	pop	{r0}
	bx	r0
.L757:
	.align	2, 0
.L756:
	.word	gBattleOutcome
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	sub_80587B0
.Lfe86:
	.size	 RecordedOpponentHandleCmd55,.Lfe86-RecordedOpponentHandleCmd55
	.align	2, 0
	.type	 RecordedOpponentHandleBattleDebug,function
	.thumb_func
RecordedOpponentHandleBattleDebug:
	push	{lr}
	bl	RecordedOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 RecordedOpponentHandleBattleDebug,.Lfe87-RecordedOpponentHandleBattleDebug
	.align	2, 0
	.type	 RecordedOpponentCmdEnd,function
	.thumb_func
RecordedOpponentCmdEnd:
	bx	lr
.Lfe88:
	.size	 RecordedOpponentCmdEnd,.Lfe88-RecordedOpponentCmdEnd
.text
	.align	2, 0

