@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	PokenavCallback_Init_PartyCondition
	.type	 PokenavCallback_Init_PartyCondition,function
	.thumb_func
PokenavCallback_Init_PartyCondition:
	push	{r4, lr}
	ldr	r1, .L5
	mov	r0, #0xb
	bl	AllocSubstruct
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L3	@cond_branch
	ldr	r1, .L5+0x4
	add	r0, r4, r1
	bl	InitConditionGraphData
	bl	InitPartyConditionListParameters
	ldr	r1, .L5+0x8
	mov	r0, #0x14
	strh	r0, [r1]
	ldr	r0, .L5+0xc
	add	r1, r4, r0
	ldr	r0, .L5+0x10
	str	r0, [r1]
	mov	r0, #0x1
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	0x678c
	.word	0x6428
	.word	gKeyRepeatStartDelay
	.word	0x6304
	.word	HandlePartyConditionInput
.L3:
	mov	r0, #0x0
.L4:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 PokenavCallback_Init_PartyCondition,.Lfe1-PokenavCallback_Init_PartyCondition
	.align	2, 0
	.globl	PokenavCallback_Init_ConditionGraphFromSearch
	.type	 PokenavCallback_Init_ConditionGraphFromSearch,function
	.thumb_func
PokenavCallback_Init_ConditionGraphFromSearch:
	push	{r4, lr}
	ldr	r1, .L10
	mov	r0, #0xb
	bl	AllocSubstruct
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L8	@cond_branch
	ldr	r1, .L10+0x4
	add	r0, r4, r1
	bl	InitConditionGraphData
	bl	sub_81CD9F8
	ldr	r1, .L10+0x8
	mov	r0, #0x14
	strh	r0, [r1]
	ldr	r0, .L10+0xc
	add	r1, r4, r0
	ldr	r0, .L10+0x10
	str	r0, [r1]
	mov	r0, #0x1
	b	.L9
.L11:
	.align	2, 0
.L10:
	.word	0x678c
	.word	0x6428
	.word	gKeyRepeatStartDelay
	.word	0x6304
	.word	HandlePartyConditionInput
.L8:
	mov	r0, #0x0
.L9:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 PokenavCallback_Init_ConditionGraphFromSearch,.Lfe2-PokenavCallback_Init_ConditionGraphFromSearch
	.align	2, 0
	.globl	GetPartyConditionCallback
	.type	 GetPartyConditionCallback,function
	.thumb_func
GetPartyConditionCallback:
	push	{lr}
	mov	r0, #0xb
	bl	GetSubstructPtr
	ldr	r2, .L13
	add	r1, r0, r2
	ldr	r1, [r1]
	bl	_call_via_r1
	pop	{r1}
	bx	r1
.L14:
	.align	2, 0
.L13:
	.word	0x6304
.Lfe3:
	.size	 GetPartyConditionCallback,.Lfe3-GetPartyConditionCallback
	.align	2, 0
	.globl	HandlePartyConditionInput
	.type	 HandlePartyConditionInput,function
	.thumb_func
HandlePartyConditionInput:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x12
	bl	GetSubstructPtr
	add	r5, r0, #0
	add	r0, r4, #0
	bl	ConditionGraphHandleDpadInput
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L16	@cond_branch
	ldr	r0, .L24
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L23	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L16	@cond_branch
	mov	r1, #0xc6
	lsl	r1, r1, #0x7
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L20	@cond_branch
	ldrh	r1, [r5, #0x2]
	ldrh	r0, [r5]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L16	@cond_branch
.L23:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L24+0x4
	add	r1, r4, r0
	ldr	r0, .L24+0x8
	str	r0, [r1]
	mov	r2, #0x2
	b	.L16
.L25:
	.align	2, 0
.L24:
	.word	gMain
	.word	0x6304
	.word	GetConditionReturnCallback
.L20:
	mov	r0, #0x5
	bl	PlaySE
	mov	r2, #0x5
	ldr	r0, .L26
	add	r1, r4, r0
	ldr	r0, .L26+0x4
	str	r0, [r1]
.L16:
	add	r0, r2, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L27:
	.align	2, 0
.L26:
	.word	0x6304
	.word	ConditionMenu_OpenMarkingsMenu
.Lfe4:
	.size	 HandlePartyConditionInput,.Lfe4-HandlePartyConditionInput
	.align	2, 0
	.globl	ConditionMenu_OpenMarkingsMenu
	.type	 ConditionMenu_OpenMarkingsMenu,function
	.thumb_func
ConditionMenu_OpenMarkingsMenu:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	mov	r4, #0x0
	bl	MonMarkingsMenuHandleInput
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L29	@cond_branch
	bl	GetMonMarkingsData
	ldr	r1, .L32
	add	r5, r6, r1
	mov	r1, #0x0
	ldrsb	r1, [r5, r1]
	ldr	r2, .L32+0x4
	add	r4, r6, r2
	add	r1, r4, r1
	strb	r0, [r1]
	mov	r0, #0x12
	bl	GetSubstructPtr
	ldrh	r1, [r0, #0x2]
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x4]
	ldrb	r3, [r0, #0x5]
	mov	r0, #0x0
	ldrsb	r0, [r5, r0]
	add	r4, r4, r0
	ldrb	r1, [r4]
	mov	r0, sp
	strb	r1, [r0]
	cmp	r2, #0xe
	bne	.L30	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r3
	ldr	r1, .L32+0x8
	add	r0, r0, r1
	mov	r1, #0x8
	mov	r2, sp
	bl	SetMonData
	b	.L31
.L33:
	.align	2, 0
.L32:
	.word	0x6786
	.word	0x6783
	.word	gPlayerParty
.L30:
	add	r0, r2, #0
	add	r1, r3, #0
	mov	r2, #0x8
	mov	r3, sp
	bl	SetBoxMonDataAt
.L31:
	ldr	r0, .L34
	add	r1, r6, r0
	ldr	r0, .L34+0x4
	str	r0, [r1]
	mov	r4, #0x6
.L29:
	add	r0, r4, #0
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L35:
	.align	2, 0
.L34:
	.word	0x6304
	.word	HandlePartyConditionInput
.Lfe5:
	.size	 ConditionMenu_OpenMarkingsMenu,.Lfe5-ConditionMenu_OpenMarkingsMenu
	.align	2, 0
	.globl	GetConditionReturnCallback
	.type	 GetConditionReturnCallback,function
	.thumb_func
GetConditionReturnCallback:
	push	{lr}
	mov	r1, #0xc6
	lsl	r1, r1, #0x7
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L37	@cond_branch
	ldr	r0, .L40
	b	.L39
.L41:
	.align	2, 0
.L40:
	.word	0x186aa
.L37:
	ldr	r0, .L42
.L39:
	pop	{r1}
	bx	r1
.L43:
	.align	2, 0
.L42:
	.word	0x186a2
.Lfe6:
	.size	 GetConditionReturnCallback,.Lfe6-GetConditionReturnCallback
	.align	2, 0
	.globl	FreePartyConditionSubstruct1
	.type	 FreePartyConditionSubstruct1,function
	.thumb_func
FreePartyConditionSubstruct1:
	push	{lr}
	mov	r0, #0xb
	bl	GetSubstructPtr
	mov	r1, #0xc6
	lsl	r1, r1, #0x7
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L45	@cond_branch
	mov	r0, #0x12
	bl	FreePokenavSubstruct
.L45:
	mov	r0, #0xb
	bl	FreePokenavSubstruct
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 FreePartyConditionSubstruct1,.Lfe7-FreePartyConditionSubstruct1
	.align	2, 0
	.globl	ConditionGraphHandleDpadInput
	.type	 ConditionGraphHandleDpadInput,function
	.thumb_func
ConditionGraphHandleDpadInput:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x12
	bl	GetSubstructPtr
	add	r2, r0, #0
	mov	r3, #0x0
	ldr	r0, .L55
	ldrh	r1, [r0, #0x2c]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L47	@cond_branch
	mov	r1, #0xc6
	lsl	r1, r1, #0x7
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L49	@cond_branch
	ldrh	r0, [r2, #0x2]
	cmp	r0, #0
	beq	.L50	@cond_branch
.L49:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	b	.L54
.L56:
	.align	2, 0
.L55:
	.word	gMain
.L47:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L50	@cond_branch
	mov	r1, #0xc6
	lsl	r1, r1, #0x7
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L53	@cond_branch
	ldrh	r1, [r2, #0x2]
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bge	.L50	@cond_branch
.L53:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
.L54:
	bl	SwitchConditionSummaryIndex
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L50:
	add	r0, r3, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 ConditionGraphHandleDpadInput,.Lfe8-ConditionGraphHandleDpadInput
	.align	2, 0
	.globl	SwitchConditionSummaryIndex
	.type	 SwitchConditionSummaryIndex,function
	.thumb_func
SwitchConditionSummaryIndex:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, #0xb
	bl	GetSubstructPtr
	add	r4, r0, #0
	mov	r0, #0x12
	bl	GetSubstructPtr
	add	r5, r0, #0
	mov	r0, r8
	cmp	r0, #0
	beq	.L58	@cond_branch
	ldr	r1, .L86
	add	r0, r4, r1
	b	.L83
.L87:
	.align	2, 0
.L86:
	.word	0x6788
.L58:
	ldr	r2, .L88
	add	r0, r4, r2
.L83:
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r7, r0, #0
	ldr	r1, .L88+0x4
	add	r0, r4, r1
	ldr	r2, .L88+0x8
	add	r1, r4, r2
	mov	r2, #0x0
	ldrsb	r2, [r1, r2]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r3, .L88+0xc
	add	r1, r1, r3
	add	r1, r4, r1
	lsl	r2, r7, #0x2
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	add	r2, r4, r2
	bl	sub_81D1F84
	ldrh	r6, [r5, #0x2]
	bl	IsConditionMenuSearchMode
	cmp	r0, #0
	beq	.L60	@cond_branch
	ldrh	r1, [r5]
	b	.L84
.L89:
	.align	2, 0
.L88:
	.word	0x6787
	.word	0x6428
	.word	0x6786
	.word	0x643c
.L60:
	ldrh	r1, [r5]
	sub	r1, r1, #0x1
.L84:
	eor	r1, r1, r6
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	add	r6, r0, #0
	mov	r0, r8
	cmp	r0, #0
	beq	.L64	@cond_branch
	ldr	r1, .L90
	add	r2, r4, r1
	ldrb	r0, [r2]
	add	r1, r1, #0x1
	add	r3, r4, r1
	strb	r0, [r3]
	ldr	r0, .L90+0x4
	add	r1, r4, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r7, [r1]
	ldrb	r1, [r3]
	ldr	r2, .L90+0x8
	add	r0, r4, r2
	strb	r1, [r0]
	ldrh	r0, [r5, #0x2]
	cmp	r0, #0
	bne	.L65	@cond_branch
	ldrh	r0, [r5]
.L65:
	sub	r1, r0, #0x1
	strh	r1, [r5, #0x2]
	lsl	r0, r1, #0x10
	cmp	r0, #0
	beq	.L67	@cond_branch
	sub	r1, r1, #0x1
	b	.L73
.L91:
	.align	2, 0
.L90:
	.word	0x6787
	.word	0x6786
	.word	0x6789
.L67:
	ldrh	r0, [r5]
	sub	r1, r0, #0x1
	b	.L73
.L64:
	ldr	r0, .L92
	add	r2, r4, r0
	ldrb	r0, [r2]
	ldr	r1, .L92+0x4
	add	r3, r4, r1
	strb	r0, [r3]
	ldr	r0, .L92+0x8
	add	r1, r4, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r7, [r1]
	ldrb	r1, [r3]
	ldr	r2, .L92+0xc
	add	r0, r4, r2
	strb	r1, [r0]
	ldrh	r1, [r5, #0x2]
	ldrh	r0, [r5]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bge	.L70	@cond_branch
	add	r0, r1, #0x1
	b	.L71
.L93:
	.align	2, 0
.L92:
	.word	0x6788
	.word	0x6787
	.word	0x6786
	.word	0x6789
.L70:
	mov	r0, #0x0
.L71:
	strh	r0, [r5, #0x2]
	ldrh	r1, [r5, #0x2]
	ldrh	r0, [r5]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bge	.L72	@cond_branch
	add	r1, r1, #0x1
	b	.L73
.L72:
	mov	r1, #0x0
.L73:
	ldr	r2, .L94
	add	r0, r4, r2
	strh	r1, [r0]
	ldrh	r4, [r5, #0x2]
	bl	IsConditionMenuSearchMode
	cmp	r0, #0
	beq	.L74	@cond_branch
	ldrh	r1, [r5]
	b	.L85
.L95:
	.align	2, 0
.L94:
	.word	0x6302
.L74:
	ldrh	r1, [r5]
	sub	r1, r1, #0x1
.L85:
	eor	r1, r1, r4
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	cmp	r6, #0
	bne	.L78	@cond_branch
	mov	r0, #0x3
	b	.L82
.L78:
	cmp	r0, #0
	beq	.L80	@cond_branch
	mov	r0, #0x1
	b	.L82
.L80:
	mov	r0, #0x4
.L82:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 SwitchConditionSummaryIndex,.Lfe9-SwitchConditionSummaryIndex
	.align	2, 0
	.globl	LoadPartyConditionMenuGfx
	.type	 LoadPartyConditionMenuGfx,function
	.thumb_func
LoadPartyConditionMenuGfx:
	push	{r4, lr}
	mov	r0, #0xb
	bl	GetSubstructPtr
	add	r4, r0, #0
	mov	r0, #0x12
	bl	GetSubstructPtr
	add	r2, r0, #0
	ldr	r1, .L125
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0x9
	bls	.LCB757
	b	.L97	@long jump
.LCB757:
	lsl	r0, r0, #0x2
	ldr	r1, .L125+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L126:
	.align	2, 0
.L125:
	.word	0x678a
	.word	.L119
	.align	2, 0
	.align	2, 0
.L119:
	.word	.L98
	.word	.L99
	.word	.L100
	.word	.L101
	.word	.L104
	.word	.L106
	.word	.L108
	.word	.L110
	.word	.L113
	.word	.L116
.L98:
	mov	r1, #0x2
	ldrsh	r0, [r2, r1]
	mov	r1, #0x0
	bl	CopyMonNameGenderLocation
	b	.L97
.L99:
	mov	r1, #0x2
	ldrsh	r0, [r2, r1]
	mov	r1, #0x0
	bl	GetMonConditionGraphData
	b	.L97
.L100:
	mov	r1, #0x2
	ldrsh	r0, [r2, r1]
	mov	r1, #0x0
	bl	ConditionGraphDrawMonPic
	b	.L97
.L101:
	ldrh	r0, [r2]
	cmp	r0, #0x1
	bne	.L102	@cond_branch
	ldr	r2, .L127
	add	r0, r4, r2
	mov	r1, #0x0
	strb	r1, [r0]
	add	r2, r2, #0x1
	add	r0, r4, r2
	strb	r1, [r0]
	add	r2, r2, #0x1
	add	r0, r4, r2
	strb	r1, [r0]
	add	r2, r2, #0x2
	add	r0, r4, r2
	strb	r1, [r0]
	mov	r0, #0x1
	b	.L121
.L128:
	.align	2, 0
.L127:
	.word	0x6786
.L102:
	ldr	r0, .L129
	add	r1, r4, r0
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r2, .L129+0x4
	add	r1, r4, r2
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L129+0x8
	add	r1, r4, r0
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L97
.L130:
	.align	2, 0
.L129:
	.word	0x6786
	.word	0x6787
	.word	0x6788
.L104:
	ldrh	r0, [r2, #0x2]
	add	r0, r0, #0x1
	ldrh	r2, [r2]
	cmp	r0, r2
	blt	.L105	@cond_branch
	mov	r0, #0x0
.L105:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	bl	CopyMonNameGenderLocation
	b	.L97
.L106:
	ldrh	r0, [r2, #0x2]
	add	r0, r0, #0x1
	ldrh	r2, [r2]
	cmp	r0, r2
	blt	.L107	@cond_branch
	mov	r0, #0x0
.L107:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetMonConditionGraphData
	b	.L97
.L108:
	ldrh	r0, [r2, #0x2]
	add	r0, r0, #0x1
	ldrh	r2, [r2]
	cmp	r0, r2
	blt	.L109	@cond_branch
	mov	r0, #0x0
.L109:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	bl	ConditionGraphDrawMonPic
	b	.L97
.L110:
	ldrh	r0, [r2, #0x2]
	sub	r0, r0, #0x1
	cmp	r0, #0
	bge	.L122	@cond_branch
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
.L122:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x2
	bl	CopyMonNameGenderLocation
	b	.L97
.L113:
	ldrh	r0, [r2, #0x2]
	sub	r0, r0, #0x1
	cmp	r0, #0
	bge	.L123	@cond_branch
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
.L123:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x2
	bl	GetMonConditionGraphData
	b	.L97
.L116:
	ldrh	r0, [r2, #0x2]
	sub	r0, r0, #0x1
	cmp	r0, #0
	bge	.L124	@cond_branch
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
.L124:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x2
	bl	ConditionGraphDrawMonPic
	ldr	r2, .L131
	add	r1, r4, r2
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0x1
	b	.L121
.L132:
	.align	2, 0
.L131:
	.word	0x678a
.L97:
	ldr	r0, .L133
	add	r1, r4, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x0
.L121:
	pop	{r4}
	pop	{r1}
	bx	r1
.L134:
	.align	2, 0
.L133:
	.word	0x678a
.Lfe10:
	.size	 LoadPartyConditionMenuGfx,.Lfe10-LoadPartyConditionMenuGfx
	.align	2, 0
	.globl	SetConditionGraphData
	.type	 SetConditionGraphData,function
	.thumb_func
SetConditionGraphData:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	mov	r0, #0xb
	bl	GetSubstructPtr
	add	r1, r0, #0
	cmp	r4, #0x1
	beq	.L138	@cond_branch
	cmp	r4, #0x1
	bgt	.L142	@cond_branch
	cmp	r4, #0
	beq	.L137	@cond_branch
	b	.L136
.L142:
	cmp	r5, #0x2
	beq	.L139	@cond_branch
	b	.L136
.L137:
	ldr	r2, .L144
	add	r0, r1, r2
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	ldr	r2, .L144+0x4
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	CopyMonNameGenderLocation
	b	.L136
.L145:
	.align	2, 0
.L144:
	.word	0x6302
	.word	0x6789
.L138:
	ldr	r2, .L146
	add	r0, r1, r2
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	ldr	r2, .L146+0x4
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	GetMonConditionGraphData
	b	.L136
.L147:
	.align	2, 0
.L146:
	.word	0x6302
	.word	0x6789
.L139:
	ldr	r2, .L148
	add	r0, r1, r2
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	ldr	r2, .L148+0x4
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	ConditionGraphDrawMonPic
	mov	r0, #0x1
	b	.L143
.L149:
	.align	2, 0
.L148:
	.word	0x6302
	.word	0x6789
.L136:
	mov	r0, #0x0
.L143:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 SetConditionGraphData,.Lfe11-SetConditionGraphData
	.align	2, 0
	.globl	CopyStringLeftAlignedToConditionData
	.type	 CopyStringLeftAlignedToConditionData,function
	.thumb_func
CopyStringLeftAlignedToConditionData:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	b	.L160
.L153:
	strb	r3, [r4]
	add	r1, r1, #0x1
	add	r4, r4, #0x1
	lsl	r0, r2, #0x10
	ldr	r2, .L161
	add	r0, r0, r2
	lsr	r2, r0, #0x10
.L160:
	ldrb	r3, [r1]
	add	r0, r3, #0
	cmp	r0, #0xff
	bne	.L153	@cond_branch
	add	r1, r2, #0
	lsl	r0, r1, #0x10
	ldr	r2, .L161
	add	r0, r0, r2
	lsr	r2, r0, #0x10
	lsl	r1, r1, #0x10
	cmp	r1, #0
	ble	.L159	@cond_branch
	mov	r3, #0x0
.L157:
	strb	r3, [r4]
	add	r4, r4, #0x1
	add	r1, r2, #0
	lsl	r0, r1, #0x10
	ldr	r2, .L161
	add	r0, r0, r2
	lsr	r2, r0, #0x10
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bgt	.L157	@cond_branch
.L159:
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L162:
	.align	2, 0
.L161:
	.word	-0x10000
.Lfe12:
	.size	 CopyStringLeftAlignedToConditionData,.Lfe12-CopyStringLeftAlignedToConditionData
	.align	2, 0
	.globl	CopyMonConditionNameGender
	.type	 CopyMonConditionNameGender,function
	.thumb_func
CopyMonConditionNameGender:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r5, r0, #0
	add	r4, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	mov	r0, #0x12
	bl	GetSubstructPtr
	lsl	r4, r4, #0x2
	add	r0, r0, r4
	ldrb	r4, [r0, #0x4]
	mov	r8, r4
	ldrb	r6, [r0, #0x5]
	mov	r9, r6
	mov	r0, #0xfc
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0x4
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0x8
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0x0
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0x9
	strb	r0, [r5]
	add	r5, r5, #0x1
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x2d
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	cmp	r0, #0
	beq	.L164	@cond_branch
	ldr	r1, .L186
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0xc
	bl	StringCopyPadded
	b	.L183
.L187:
	.align	2, 0
.L186:
	.word	gText_EggNickname
.L164:
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x2
	add	r3, r5, #0
	bl	GetBoxOrPartyMonData
	add	r0, r5, #0
	bl	StringGetEnd10
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0xb
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r4, #0xe
	bne	.L165	@cond_branch
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L188
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	add	r0, r4, #0
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L166
.L189:
	.align	2, 0
.L188:
	.word	gPlayerParty
.L165:
	mov	r0, r8
	mov	r1, r9
	bl	GetBoxedMonPtr
	add	r4, r0, #0
	bl	GetBoxMonGender
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	bl	GetLevelFromBoxMonExp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L166:
	cmp	r7, #0x1d
	beq	.L168	@cond_branch
	cmp	r7, #0x20
	bne	.L167	@cond_branch
.L168:
	mov	r0, #0xb
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L190
	add	r1, r1, r0
	add	r0, r5, #0
	bl	StringCompare
	cmp	r0, #0
	bne	.L167	@cond_branch
	mov	r6, #0xff
.L167:
	add	r3, r5, #0
	b	.L184
.L191:
	.align	2, 0
.L190:
	.word	gSpeciesNames
.L171:
	add	r3, r3, #0x1
.L184:
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L171	@cond_branch
	mov	r1, #0xfc
	strb	r1, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x12
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x3c
	strb	r0, [r3]
	add	r3, r3, #0x1
	cmp	r6, #0
	beq	.L175	@cond_branch
	cmp	r6, #0xfe
	beq	.L176	@cond_branch
	mov	r0, #0x77
	b	.L185
.L175:
	strb	r1, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x1
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x4
	strb	r0, [r3]
	add	r3, r3, #0x1
	strb	r1, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x3
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x5
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0xb5
	b	.L185
.L176:
	strb	r1, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x1
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x6
	strb	r0, [r3]
	add	r3, r3, #0x1
	strb	r1, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x3
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x7
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0xb6
.L185:
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0xfc
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x4
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x8
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r5, #0x0
	strb	r5, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x9
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0xba
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0xf9
	strb	r0, [r3]
	add	r3, r3, #0x1
	mov	r0, #0x5
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r4, r3, #0
	add	r0, r4, #0
	mov	r1, r8
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r3, r0, #0
	sub	r4, r3, r4
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	strb	r5, [r3]
	add	r3, r3, #0x1
	mov	r0, sl
	cmp	r0, #0
	bne	.L178	@cond_branch
	mov	r0, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x10
	ldr	r1, .L192
	add	r0, r0, r1
	lsr	r4, r0, #0x10
	ldr	r0, .L192+0x4
	cmp	r4, r0
	beq	.L178	@cond_branch
	mov	r2, #0x0
	add	r1, r0, #0
.L181:
	strb	r2, [r3]
	add	r3, r3, #0x1
	sub	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r1
	bne	.L181	@cond_branch
.L178:
	mov	r0, #0xff
	strb	r0, [r3]
	add	r0, r3, #0
.L183:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L193:
	.align	2, 0
.L192:
	.word	-0x10000
	.word	0xffff
.Lfe13:
	.size	 CopyMonConditionNameGender,.Lfe13-CopyMonConditionNameGender
	.align	2, 0
	.globl	CopyMonNameGenderLocation
	.type	 CopyMonNameGenderLocation,function
	.thumb_func
CopyMonNameGenderLocation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r0, #0xb
	bl	GetSubstructPtr
	add	r5, r0, #0
	mov	r0, #0x12
	bl	GetSubstructPtr
	add	r7, r0, #0
	mov	r1, r8
	lsl	r0, r1, #0x10
	asr	r4, r0, #0x10
	bl	IsConditionMenuSearchMode
	cmp	r0, #0
	beq	.L196	@cond_branch
	ldrh	r2, [r7]
	cmp	r4, r2
	bne	.L197	@cond_branch
	b	.L195
.L196:
	ldrh	r0, [r7]
	sub	r0, r0, #0x1
	cmp	r4, r0
	beq	.L195	@cond_branch
.L197:
	lsl	r0, r6, #0x6
	ldr	r1, .L212
	add	r0, r0, r1
	add	r0, r5, r0
	mov	r2, r8
	lsl	r4, r2, #0x10
	lsr	r1, r4, #0x10
	mov	r2, #0x0
	bl	CopyMonConditionNameGender
	asr	r4, r4, #0xe
	add	r4, r7, r4
	ldrb	r3, [r4, #0x4]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r4, r0, #0x3
	ldr	r1, .L212+0x4
	add	r0, r5, r1
	add	r0, r0, r4
	mov	r2, #0x0
	mov	r1, #0xfc
	strb	r1, [r0]
	ldr	r1, .L212+0x8
	add	r0, r5, r1
	add	r0, r0, r4
	mov	r1, #0x4
	strb	r1, [r0]
	ldr	r1, .L212+0xc
	add	r0, r5, r1
	add	r0, r0, r4
	mov	r1, #0x8
	strb	r1, [r0]
	ldr	r1, .L212+0x10
	add	r0, r5, r1
	add	r0, r0, r4
	strb	r2, [r0]
	ldr	r2, .L212+0x14
	add	r0, r5, r2
	add	r0, r0, r4
	mov	r1, #0x9
	strb	r1, [r0]
	cmp	r3, #0xe
	bne	.L198	@cond_branch
	add	r0, r4, r5
	ldr	r1, .L212+0x18
	add	r0, r0, r1
	ldr	r1, .L212+0x1c
	b	.L211
.L213:
	.align	2, 0
.L212:
	.word	0x6368
	.word	0x6320
	.word	0x6321
	.word	0x6322
	.word	0x6323
	.word	0x6324
	.word	0x6325
	.word	gText_InParty
.L198:
	add	r4, r4, r5
	ldr	r2, .L214
	add	r4, r4, r2
	add	r0, r3, #0
	bl	GetBoxNamePtr
	add	r1, r0, #0
	add	r0, r4, #0
.L211:
	mov	r2, #0x8
	bl	CopyStringLeftAlignedToConditionData
	b	.L200
.L215:
	.align	2, 0
.L214:
	.word	0x6325
.L195:
	mov	r1, #0x0
	lsl	r4, r6, #0x6
	lsl	r0, r6, #0x1
	mov	r8, r0
	add	r3, r4, #0
	ldr	r0, .L216
	add	r2, r5, r0
	mov	r7, #0x0
.L204:
	add	r0, r1, r3
	add	r0, r2, r0
	strb	r7, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xb
	bls	.L204	@cond_branch
	add	r1, r1, r4
	ldr	r2, .L216
	add	r0, r5, r2
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	mov	r1, #0x0
	mov	r2, r8
	add	r0, r2, r6
	lsl	r3, r0, #0x3
	ldr	r0, .L216+0x4
	add	r2, r5, r0
	mov	r4, #0x0
.L209:
	add	r0, r1, r3
	add	r0, r2, r0
	strb	r4, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x7
	bls	.L209	@cond_branch
	mov	r2, r8
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r0, r1, r0
	ldr	r2, .L216+0x4
	add	r1, r5, r2
	add	r1, r1, r0
	mov	r0, #0xff
	strb	r0, [r1]
.L200:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L217:
	.align	2, 0
.L216:
	.word	0x6368
	.word	0x6320
.Lfe14:
	.size	 CopyMonNameGenderLocation,.Lfe14-CopyMonNameGenderLocation
	.align	2, 0
	.globl	InitPartyConditionListParameters
	.type	 InitPartyConditionListParameters,function
	.thumb_func
InitPartyConditionListParameters:
	push	{r4, r5, r6, r7, lr}
	mov	r0, #0xb
	bl	GetSubstructPtr
	add	r7, r0, #0
	ldr	r1, .L225
	mov	r0, #0x12
	bl	AllocSubstruct
	add	r6, r0, #0
	mov	r0, #0xc6
	lsl	r0, r0, #0x7
	add	r1, r7, r0
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r4, #0x0
	mov	r5, #0x0
	b	.L219
.L226:
	.align	2, 0
.L225:
	.word	0x6ac
.L222:
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L227
	add	r0, r0, r1
	mov	r1, #0x2d
	bl	GetMonData
	add	r2, r0, #0
	cmp	r2, #0
	bne	.L221	@cond_branch
	lsl	r1, r5, #0x2
	add	r1, r6, r1
	mov	r0, #0xe
	strb	r0, [r1, #0x4]
	strb	r4, [r1, #0x5]
	strh	r2, [r1, #0x6]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L221:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L219:
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcc	.L222	@cond_branch
	lsl	r0, r5, #0x2
	add	r0, r6, r0
	mov	r1, #0x0
	strb	r1, [r0, #0x4]
	strb	r1, [r0, #0x5]
	mov	r2, #0x0
	strh	r1, [r0, #0x6]
	strh	r1, [r6, #0x2]
	add	r0, r5, #0x1
	strh	r0, [r6]
	ldr	r1, .L227+0x4
	add	r0, r7, r1
	strb	r2, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L228:
	.align	2, 0
.L227:
	.word	gPlayerParty
	.word	0x678a
.Lfe15:
	.size	 InitPartyConditionListParameters,.Lfe15-InitPartyConditionListParameters
	.align	2, 0
	.globl	sub_81CD9F8
	.type	 sub_81CD9F8,function
	.thumb_func
sub_81CD9F8:
	push	{lr}
	mov	r0, #0xb
	bl	GetSubstructPtr
	mov	r1, #0xc6
	lsl	r1, r1, #0x7
	add	r2, r0, r1
	mov	r3, #0x0
	mov	r1, #0x1
	strb	r1, [r2]
	ldr	r1, .L230
	add	r0, r0, r1
	strb	r3, [r0]
	pop	{r0}
	bx	r0
.L231:
	.align	2, 0
.L230:
	.word	0x678a
.Lfe16:
	.size	 sub_81CD9F8,.Lfe16-sub_81CD9F8
	.align	2, 0
	.globl	GetMonConditionGraphData
	.type	 GetMonConditionGraphData,function
	.thumb_func
GetMonConditionGraphData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r0, #0xb
	bl	GetSubstructPtr
	mov	r8, r0
	mov	r0, #0x12
	bl	GetSubstructPtr
	add	r4, r0, #0
	lsl	r0, r6, #0x10
	asr	r5, r0, #0x10
	bl	IsConditionMenuSearchMode
	cmp	r0, #0
	beq	.L234	@cond_branch
	ldrh	r0, [r4]
	cmp	r5, r0
	bne	.L235	@cond_branch
	b	.L233
.L234:
	ldrh	r0, [r4]
	sub	r0, r0, #0x1
	cmp	r5, r0
	beq	.L233	@cond_branch
.L235:
	lsl	r0, r6, #0x10
	asr	r0, r0, #0xe
	add	r0, r4, r0
	ldrb	r6, [r0, #0x4]
	ldrb	r7, [r0, #0x5]
	add	r0, r6, #0
	add	r1, r7, #0
	mov	r2, #0x16
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	mov	r1, r9
	lsl	r5, r1, #0x2
	add	r4, r5, r1
	ldr	r1, .L244
	add	r1, r1, r8
	add	r1, r1, r4
	strb	r0, [r1]
	add	r0, r6, #0
	add	r1, r7, #0
	mov	r2, #0x2f
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	ldr	r1, .L244+0x4
	add	r1, r1, r8
	add	r1, r1, r4
	strb	r0, [r1]
	add	r0, r6, #0
	add	r1, r7, #0
	mov	r2, #0x21
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	ldr	r1, .L244+0x8
	add	r1, r1, r8
	add	r1, r1, r4
	strb	r0, [r1]
	add	r0, r6, #0
	add	r1, r7, #0
	mov	r2, #0x18
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	ldr	r1, .L244+0xc
	add	r1, r1, r8
	add	r1, r1, r4
	strb	r0, [r1]
	add	r0, r6, #0
	add	r1, r7, #0
	mov	r2, #0x17
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	ldr	r1, .L244+0x10
	add	r1, r1, r8
	add	r1, r1, r4
	strb	r0, [r1]
	mov	r0, #0xcf
	lsl	r0, r0, #0x7
	add	r0, r0, r8
	mov	r2, r9
	add	r4, r0, r2
	add	r0, r6, #0
	add	r1, r7, #0
	mov	r2, #0x30
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	cmp	r0, #0xff
	beq	.L236	@cond_branch
	add	r0, r6, #0
	add	r1, r7, #0
	mov	r2, #0x30
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	mov	r1, #0x1d
	bl	__udivsi3
	b	.L237
.L245:
	.align	2, 0
.L244:
	.word	0x6428
	.word	0x6429
	.word	0x642a
	.word	0x642b
	.word	0x642c
.L236:
	mov	r0, #0x9
.L237:
	strb	r0, [r4]
	add	r0, r6, #0
	add	r1, r7, #0
	mov	r2, #0x8
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	ldr	r1, .L246
	add	r1, r1, r8
	add	r1, r1, r9
	strb	r0, [r1]
	mov	r0, r9
	add	r1, r5, r0
	ldr	r2, .L246+0x4
	add	r0, r1, r2
	add	r0, r0, r8
	lsl	r1, r1, #0x2
	add	r2, r2, #0x14
	add	r1, r1, r2
	add	r1, r1, r8
	bl	sub_81D2754
	b	.L238
.L247:
	.align	2, 0
.L246:
	.word	0x6783
	.word	0x6428
.L233:
	mov	r2, #0x0
	mov	r0, r9
	lsl	r5, r0, #0x2
	add	r5, r5, r9
	ldr	r4, .L248
	add	r4, r4, r8
	lsl	r3, r5, #0x2
	mov	r9, r2
	ldr	r7, .L248+0x4
	mov	r6, #0x9b
.L242:
	add	r0, r2, r5
	add	r0, r4, r0
	mov	r1, r9
	strb	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r3
	add	r0, r0, r8
	add	r1, r0, r7
	strh	r6, [r1]
	ldr	r1, .L248+0x8
	add	r0, r0, r1
	mov	r1, #0x5b
	strh	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x4
	bls	.L242	@cond_branch
.L238:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L249:
	.align	2, 0
.L248:
	.word	0x6428
	.word	0x643c
	.word	0x643e
.Lfe17:
	.size	 GetMonConditionGraphData,.Lfe17-GetMonConditionGraphData
	.align	2, 0
	.globl	ConditionGraphDrawMonPic
	.type	 ConditionGraphDrawMonPic,function
	.thumb_func
ConditionGraphDrawMonPic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r0, #0xb
	bl	GetSubstructPtr
	add	r7, r0, #0
	mov	r0, #0x12
	bl	GetSubstructPtr
	add	r4, r0, #0
	lsl	r0, r6, #0x10
	asr	r5, r0, #0x10
	bl	IsConditionMenuSearchMode
	cmp	r0, #0
	beq	.L252	@cond_branch
	ldrh	r0, [r4]
	b	.L254
.L252:
	ldrh	r0, [r4]
	sub	r0, r0, #0x1
.L254:
	cmp	r5, r0
	beq	.L250	@cond_branch
	lsl	r0, r6, #0x10
	asr	r0, r0, #0xe
	add	r0, r4, r0
	ldrb	r5, [r0, #0x4]
	ldrb	r6, [r0, #0x5]
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0x41
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	mov	r8, r0
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	GetBoxOrPartyMonData
	add	r5, r0, #0
	lsl	r0, r4, #0x3
	ldr	r1, .L255
	add	r0, r0, r1
	mov	r2, r9
	lsl	r1, r2, #0xd
	mov	r2, #0xc0
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	add	r1, r7, r1
	mov	r2, #0x1
	str	r2, [sp]
	add	r2, r4, #0
	add	r3, r5, #0
	bl	LoadSpecialPokePic
	add	r0, r4, #0
	mov	r1, r8
	add	r2, r5, #0
	bl	GetMonSpritePalFromSpeciesAndPersonality
	mov	r2, r9
	lsl	r1, r2, #0x7
	add	r1, r7, r1
	bl	LZ77UnCompWram
.L250:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L256:
	.align	2, 0
.L255:
	.word	gMonFrontPicTable
.Lfe18:
	.size	 ConditionGraphDrawMonPic,.Lfe18-ConditionGraphDrawMonPic
	.align	2, 0
	.globl	GetMonListCount
	.type	 GetMonListCount,function
	.thumb_func
GetMonListCount:
	push	{lr}
	mov	r0, #0x12
	bl	GetSubstructPtr
	ldrh	r0, [r0]
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 GetMonListCount,.Lfe19-GetMonListCount
	.align	2, 0
	.globl	GetConditionGraphCurrentMonIndex
	.type	 GetConditionGraphCurrentMonIndex,function
	.thumb_func
GetConditionGraphCurrentMonIndex:
	push	{lr}
	mov	r0, #0x12
	bl	GetSubstructPtr
	ldrh	r0, [r0, #0x2]
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 GetConditionGraphCurrentMonIndex,.Lfe20-GetConditionGraphCurrentMonIndex
	.align	2, 0
	.globl	GetConditionGraphDataPtr
	.type	 GetConditionGraphDataPtr,function
	.thumb_func
GetConditionGraphDataPtr:
	push	{lr}
	mov	r0, #0xb
	bl	GetSubstructPtr
	ldr	r1, .L260
	add	r0, r0, r1
	pop	{r1}
	bx	r1
.L261:
	.align	2, 0
.L260:
	.word	0x6428
.Lfe21:
	.size	 GetConditionGraphDataPtr,.Lfe21-GetConditionGraphDataPtr
	.align	2, 0
	.globl	GetMonMarkIndex
	.type	 GetMonMarkIndex,function
	.thumb_func
GetMonMarkIndex:
	push	{lr}
	mov	r0, #0xb
	bl	GetSubstructPtr
	ldr	r1, .L263
	add	r0, r0, r1
	ldrb	r0, [r0]
	pop	{r1}
	bx	r1
.L264:
	.align	2, 0
.L263:
	.word	0x6786
.Lfe22:
	.size	 GetMonMarkIndex,.Lfe22-GetMonMarkIndex
	.align	2, 0
	.globl	sub_81CDC9C
	.type	 sub_81CDC9C,function
	.thumb_func
sub_81CDC9C:
	push	{lr}
	mov	r0, #0xb
	bl	GetSubstructPtr
	ldr	r1, .L266
	add	r0, r0, r1
	ldrb	r0, [r0]
	pop	{r1}
	bx	r1
.L267:
	.align	2, 0
.L266:
	.word	0x6302
.Lfe23:
	.size	 sub_81CDC9C,.Lfe23-sub_81CDC9C
	.align	2, 0
	.globl	GetConditionMonPicGfx
	.type	 GetConditionMonPicGfx,function
	.thumb_func
GetConditionMonPicGfx:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0xb
	bl	GetSubstructPtr
	lsl	r4, r4, #0xd
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	add	r4, r4, r1
	add	r0, r0, r4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 GetConditionMonPicGfx,.Lfe24-GetConditionMonPicGfx
	.align	2, 0
	.globl	GetConditionMonPal
	.type	 GetConditionMonPal,function
	.thumb_func
GetConditionMonPal:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0xb
	bl	GetSubstructPtr
	lsl	r4, r4, #0x7
	add	r0, r0, r4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 GetConditionMonPal,.Lfe25-GetConditionMonPal
	.align	2, 0
	.globl	sub_81CDCEC
	.type	 sub_81CDCEC,function
	.thumb_func
sub_81CDCEC:
	push	{lr}
	mov	r0, #0xb
	bl	GetSubstructPtr
	ldr	r1, .L271
	add	r0, r0, r1
	ldrb	r0, [r0]
	pop	{r1}
	bx	r1
.L272:
	.align	2, 0
.L271:
	.word	0x6789
.Lfe26:
	.size	 sub_81CDCEC,.Lfe26-sub_81CDCEC
	.align	2, 0
	.globl	GetConditionMonNameBuffer
	.type	 GetConditionMonNameBuffer,function
	.thumb_func
GetConditionMonNameBuffer:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0xb
	bl	GetSubstructPtr
	lsl	r4, r4, #0x6
	ldr	r1, .L274
	add	r4, r4, r1
	add	r0, r0, r4
	pop	{r4}
	pop	{r1}
	bx	r1
.L275:
	.align	2, 0
.L274:
	.word	0x6368
.Lfe27:
	.size	 GetConditionMonNameBuffer,.Lfe27-GetConditionMonNameBuffer
	.align	2, 0
	.globl	GetConditionMonLocationBuffer
	.type	 GetConditionMonLocationBuffer,function
	.thumb_func
GetConditionMonLocationBuffer:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0xb
	bl	GetSubstructPtr
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	ldr	r2, .L277
	add	r1, r1, r2
	add	r0, r0, r1
	pop	{r4}
	pop	{r1}
	bx	r1
.L278:
	.align	2, 0
.L277:
	.word	0x6320
.Lfe28:
	.size	 GetConditionMonLocationBuffer,.Lfe28-GetConditionMonLocationBuffer
	.align	2, 0
	.globl	GetConditionMonDataBuffer
	.type	 GetConditionMonDataBuffer,function
	.thumb_func
GetConditionMonDataBuffer:
	push	{lr}
	mov	r0, #0x12
	bl	GetSubstructPtr
	ldrh	r1, [r0, #0x2]
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x6]
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 GetConditionMonDataBuffer,.Lfe29-GetConditionMonDataBuffer
	.align	2, 0
	.globl	IsConditionMenuSearchMode
	.type	 IsConditionMenuSearchMode,function
	.thumb_func
IsConditionMenuSearchMode:
	push	{lr}
	mov	r0, #0xb
	bl	GetSubstructPtr
	mov	r1, #0xc6
	lsl	r1, r1, #0x7
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L281	@cond_branch
	mov	r0, #0x0
	b	.L283
.L281:
	mov	r0, #0x1
.L283:
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 IsConditionMenuSearchMode,.Lfe30-IsConditionMenuSearchMode
	.align	2, 0
	.globl	TryGetMonMarkId
	.type	 TryGetMonMarkId,function
	.thumb_func
TryGetMonMarkId:
	push	{lr}
	mov	r0, #0xb
	bl	GetSubstructPtr
	add	r2, r0, #0
	mov	r1, #0xc6
	lsl	r1, r1, #0x7
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L285	@cond_branch
	mov	r0, #0x0
	b	.L287
.L285:
	ldr	r3, .L288
	add	r0, r2, r3
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	sub	r3, r3, #0x3
	add	r0, r2, r3
	add	r0, r0, r1
	ldrb	r0, [r0]
.L287:
	pop	{r1}
	bx	r1
.L289:
	.align	2, 0
.L288:
	.word	0x6786
.Lfe31:
	.size	 TryGetMonMarkId,.Lfe31-TryGetMonMarkId
	.align	2, 0
	.globl	GetMonSheen
	.type	 GetMonSheen,function
	.thumb_func
GetMonSheen:
	push	{lr}
	mov	r0, #0xb
	bl	GetSubstructPtr
	ldr	r2, .L291
	add	r1, r0, r2
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	sub	r2, r2, #0x6
	add	r0, r0, r2
	add	r0, r0, r1
	ldrb	r0, [r0]
	pop	{r1}
	bx	r1
.L292:
	.align	2, 0
.L291:
	.word	0x6786
.Lfe32:
	.size	 GetMonSheen,.Lfe32-GetMonSheen
.text
	.align	2, 0

