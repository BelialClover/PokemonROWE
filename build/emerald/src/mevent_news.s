@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	GenerateRandomNews
	.type	 GenerateRandomNews,function
	.thumb_func
GenerateRandomNews:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	sub_801B044
	add	r5, r0, #0
	mov	r0, #0x3
	add	r1, r4, #0
	and	r1, r1, r0
	ldrb	r2, [r5]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5]
	cmp	r4, #0x2
	bhi	.L10	@cond_branch
	cmp	r4, #0x1
	bcs	.L6	@cond_branch
	b	.L3
.L10:
	cmp	r4, #0x3
	beq	.L7	@cond_branch
	b	.L3
.L6:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	bl	__umodsi3
	add	r0, r0, #0x10
	b	.L11
.L7:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	bl	__umodsi3
	add	r0, r0, #0x1
.L11:
	strb	r0, [r5, #0x1]
.L3:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 GenerateRandomNews,.Lfe1-GenerateRandomNews
	.align	2, 0
	.globl	sub_801DBC0
	.type	 sub_801DBC0,function
	.thumb_func
sub_801DBC0:
	push	{lr}
	bl	sub_801B044
	mov	r1, #0x0
	strb	r1, [r0]
	strb	r1, [r0, #0x1]
	ldr	r0, .L13
	bl	VarSet
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	0x402e
.Lfe2:
	.size	 sub_801DBC0,.Lfe2-sub_801DBC0
	.align	2, 0
	.globl	sub_801DBDC
	.type	 sub_801DBDC,function
	.thumb_func
sub_801DBDC:
	push	{r4, lr}
	ldr	r0, .L17
	bl	GetVarPointer
	add	r4, r0, #0
	bl	sub_801B044
	add	r2, r0, #0
	ldr	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x1d
	cmp	r0, #0x4
	bls	.L16	@cond_branch
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	ldr	r1, .L17+0x4
	cmp	r0, r1
	bls	.L16	@cond_branch
	ldrb	r0, [r2]
	mov	r1, #0x1f
	and	r1, r1, r0
	strb	r1, [r2]
	mov	r0, #0x0
	strh	r0, [r4]
.L16:
	pop	{r4}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	0x402e
	.word	0x1f30000
.Lfe3:
	.size	 sub_801DBDC,.Lfe3-sub_801DBDC
	.align	2, 0
	.globl	sub_801DC20
	.type	 sub_801DC20,function
	.thumb_func
sub_801DC20:
	push	{r4, r5, r6, lr}
	ldr	r6, .L33
	bl	sub_801B044
	add	r4, r0, #0
	bl	IsMysteryEventEnabled
	cmp	r0, #0
	beq	.L21	@cond_branch
	bl	ValidateReceivedWonderNews
	cmp	r0, #0
	bne	.L20	@cond_branch
.L21:
	mov	r0, #0x0
	b	.L32
.L34:
	.align	2, 0
.L33:
	.word	gSpecialVar_Result
.L20:
	add	r0, r4, #0
	bl	sub_801DD44
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x6
	bhi	.L22	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L35
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L36:
	.align	2, 0
.L35:
	.word	.L30
	.align	2, 0
	.align	2, 0
.L30:
	.word	.L22
	.word	.L24
	.word	.L25
	.word	.L22
	.word	.L27
	.word	.L28
	.word	.L22
.L24:
.L25:
	add	r0, r4, #0
	bl	sub_801DCAC
	strh	r0, [r6]
	b	.L22
.L27:
	add	r0, r4, #0
	bl	sub_801DCAC
	strh	r0, [r6]
	add	r0, r4, #0
	bl	sub_801DCD8
	b	.L22
.L28:
	add	r0, r4, #0
	bl	sub_801DCAC
	strh	r0, [r6]
	add	r0, r4, #0
	bl	sub_801DCCC
.L22:
	add	r0, r5, #0
.L32:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 sub_801DC20,.Lfe4-sub_801DC20
	.align	2, 0
	.type	 sub_801DCAC,function
	.thumb_func
sub_801DCAC:
	push	{r4, lr}
	ldrb	r2, [r0]
	mov	r1, #0x4
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldrb	r4, [r0, #0x1]
	add	r4, r4, #0x84
	mov	r1, #0x0
	strb	r1, [r0, #0x1]
	bl	sub_801DD10
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 sub_801DCAC,.Lfe5-sub_801DCAC
	.align	2, 0
	.type	 sub_801DCCC,function
	.thumb_func
sub_801DCCC:
	ldrb	r2, [r0]
	mov	r1, #0x1d
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.Lfe6:
	.size	 sub_801DCCC,.Lfe6-sub_801DCCC
	.align	2, 0
	.type	 sub_801DCD8,function
	.thumb_func
sub_801DCD8:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r0, [r3]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1d
	add	r0, r0, #0x1
	mov	r1, #0x7
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r1, [r3]
	mov	r4, #0x1d
	neg	r4, r4
	add	r2, r4, #0
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r3]
	ldr	r0, [r3]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1d
	cmp	r0, #0x4
	bls	.L40	@cond_branch
	and	r2, r2, r4
	mov	r0, #0x10
	orr	r2, r2, r0
	strb	r2, [r3]
.L40:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 sub_801DCD8,.Lfe7-sub_801DCD8
	.align	2, 0
	.type	 sub_801DD10,function
	.thumb_func
sub_801DD10:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x1d
	add	r0, r0, #0x1
	lsl	r0, r0, #0x5
	ldrb	r1, [r3]
	mov	r4, #0x1f
	add	r2, r4, #0
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r3]
	ldr	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x1d
	cmp	r0, #0x5
	bls	.L42	@cond_branch
	and	r2, r2, r4
	mov	r0, #0xa0
	orr	r2, r2, r0
	strb	r2, [r3]
.L42:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 sub_801DD10,.Lfe8-sub_801DD10
	.align	2, 0
	.type	 sub_801DD44,function
	.thumb_func
sub_801DD44:
	push	{lr}
	add	r2, r0, #0
	ldrb	r1, [r2]
	mov	r0, #0xe0
	and	r0, r0, r1
	cmp	r0, #0xa0
	bne	.L44	@cond_branch
	mov	r0, #0x6
	b	.L54
.L44:
	ldr	r1, [r2]
	lsl	r0, r1, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r0, #0x1
	beq	.L47	@cond_branch
	cmp	r0, #0x1
	bgt	.L53	@cond_branch
	cmp	r0, #0
	beq	.L46	@cond_branch
	b	.L51
.L53:
	cmp	r0, #0x2
	beq	.L48	@cond_branch
	cmp	r0, #0x3
	beq	.L49	@cond_branch
	b	.L51
.L46:
	mov	r0, #0x3
	b	.L54
.L47:
	mov	r0, #0x1
	b	.L54
.L48:
	mov	r0, #0x2
	b	.L54
.L49:
	lsl	r0, r1, #0x1b
	lsr	r0, r0, #0x1d
	cmp	r0, #0x2
	bhi	.L50	@cond_branch
	mov	r0, #0x4
	b	.L54
.L50:
	mov	r0, #0x5
	b	.L54
.L51:
	mov	r0, #0x0
.L54:
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 sub_801DD44,.Lfe9-sub_801DD44
.text
	.align	2, 0

