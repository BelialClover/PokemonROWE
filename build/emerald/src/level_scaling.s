@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	normalnumMonsBadge
.data
	.type	 normalnumMonsBadge,object
normalnumMonsBadge:
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x6
	.size	 normalnumMonsBadge,10
	.globl	normalnumMonsGym
	.type	 normalnumMonsGym,object
normalnumMonsGym:
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.size	 normalnumMonsGym,10
	.globl	normalminTrainerLevel
	.type	 normalminTrainerLevel,object
normalminTrainerLevel:
	.byte	0x6
	.byte	0xa
	.byte	0xf
	.byte	0x14
	.byte	0x19
	.byte	0x1e
	.byte	0x23
	.byte	0x28
	.byte	0x2d
	.byte	0x37
	.size	 normalminTrainerLevel,10
	.globl	normalminGymLevel
	.type	 normalminGymLevel,object
normalminGymLevel:
	.byte	0xc
	.byte	0x11
	.byte	0x16
	.byte	0x1b
	.byte	0x20
	.byte	0x25
	.byte	0x2a
	.byte	0x32
	.byte	0x37
	.byte	0x41
	.size	 normalminGymLevel,10
	.globl	normalnumMonsDouble
	.type	 normalnumMonsDouble,object
normalnumMonsDouble:
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.size	 normalnumMonsDouble,10
	.globl	hardnumMonsBadge
	.type	 hardnumMonsBadge,object
hardnumMonsBadge:
	.byte	0x3
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.size	 hardnumMonsBadge,10
	.globl	hardnumMonsGym
	.type	 hardnumMonsGym,object
hardnumMonsGym:
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x5
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.size	 hardnumMonsGym,10
	.globl	hardminTrainerLevel
	.type	 hardminTrainerLevel,object
hardminTrainerLevel:
	.byte	0x7
	.byte	0xc
	.byte	0x12
	.byte	0x18
	.byte	0x1e
	.byte	0x24
	.byte	0x2a
	.byte	0x30
	.byte	0x37
	.byte	0x41
	.size	 hardminTrainerLevel,10
	.globl	hardminGymLevel
	.type	 hardminGymLevel,object
hardminGymLevel:
	.byte	0xd
	.byte	0x13
	.byte	0x19
	.byte	0x1f
	.byte	0x25
	.byte	0x2b
	.byte	0x31
	.byte	0x3c
	.byte	0x44
	.byte	0x4c
	.size	 hardminGymLevel,10
	.globl	hardnumMonsDouble
	.type	 hardnumMonsDouble,object
hardnumMonsDouble:
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.size	 hardnumMonsDouble,10
	.globl	WildLevel
	.type	 WildLevel,object
WildLevel:
	.byte	0x3
	.byte	0xa
	.byte	0xf
	.byte	0x14
	.byte	0x19
	.byte	0x1e
	.byte	0x23
	.byte	0x28
	.byte	0x2d
	.byte	0x37
	.size	 WildLevel,10
.text
	.align	2, 0
	.globl	IsHardMode
	.type	 IsHardMode,function
	.thumb_func
IsHardMode:
	push	{lr}
	ldr	r0, .L6
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3	@cond_branch
	mov	r0, #0x0
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	gSaveBlock2Ptr
.L3:
	mov	r0, #0x1
.L5:
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 IsHardMode,.Lfe1-IsHardMode
	.align	2, 0
	.globl	GetFirstEvolution
	.type	 GetFirstEvolution,function
	.thumb_func
GetFirstEvolution:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L27
	mov	ip, r0
.L12:
	mov	r7, #0x0
	mov	r6, #0x1
	mov	r4, #0x80
	lsl	r4, r4, #0x9
	mov	r5, #0x50
	mov	r3, ip
	add	r3, r3, #0x50
.L16:
	mov	r1, #0x0
	ldrh	r0, [r3, #0x4]
	cmp	r0, r2
	bne	.L19	@cond_branch
	lsr	r2, r4, #0x10
	b	.L14
.L28:
	.align	2, 0
.L27:
	.word	gEvolutionTable
.L19:
	add	r1, r1, #0x1
	cmp	r1, #0x9
	bgt	.L18	@cond_branch
	lsl	r0, r1, #0x3
	add	r0, r0, r5
	add	r0, r0, ip
	ldrh	r0, [r0, #0x4]
	cmp	r0, r2
	bne	.L19	@cond_branch
	lsr	r2, r4, #0x10
	mov	r7, #0x1
.L18:
	cmp	r7, #0
	bne	.L14	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	add	r4, r4, r0
	add	r5, r5, #0x50
	add	r3, r3, #0x50
	add	r6, r6, #0x1
	ldr	r0, .L29
	cmp	r6, r0
	ble	.L16	@cond_branch
.L14:
	ldr	r0, .L29+0x4
	cmp	r6, r0
	beq	.L10	@cond_branch
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x9
	ble	.L12	@cond_branch
.L10:
	add	r0, r2, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L30:
	.align	2, 0
.L29:
	.word	0x4b6
	.word	0x4b7
.Lfe2:
	.size	 GetFirstEvolution,.Lfe2-GetFirstEvolution
	.align	2, 0
	.globl	GetNumBadges
	.type	 GetNumBadges,function
	.thumb_func
GetNumBadges:
	push	{lr}
	ldr	r0, .L50
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L32	@cond_branch
	mov	r0, #0x9
	b	.L49
.L51:
	.align	2, 0
.L50:
	.word	0x864
.L32:
	mov	r0, #0xac
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L34	@cond_branch
	mov	r0, #0x8
	b	.L49
.L34:
	mov	r0, #0xab
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L36	@cond_branch
	mov	r0, #0x7
	b	.L49
.L36:
	mov	r0, #0xaa
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L38	@cond_branch
	mov	r0, #0x6
	b	.L49
.L38:
	mov	r0, #0xa9
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L40	@cond_branch
	mov	r0, #0x5
	b	.L49
.L40:
	mov	r0, #0xa8
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L42	@cond_branch
	mov	r0, #0x4
	b	.L49
.L42:
	mov	r0, #0xa7
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L44	@cond_branch
	mov	r0, #0x3
	b	.L49
.L44:
	mov	r0, #0xa6
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L46	@cond_branch
	mov	r0, #0x2
	b	.L49
.L46:
	mov	r0, #0xa5
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L33	@cond_branch
	mov	r0, #0x0
	b	.L49
.L33:
	mov	r0, #0x1
.L49:
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 GetNumBadges,.Lfe3-GetNumBadges
	.align	2, 0
	.globl	GetBaseSpecie
	.type	 GetBaseSpecie,function
	.thumb_func
GetBaseSpecie:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L56
	ldr	r0, [r0]
	ldrb	r1, [r0, #0xb]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0, #0xa]
	orr	r0, r0, r1
	mul	r0, r0, r5
	ldr	r1, .L56+0x4
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	CheckforLegendary
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetFirstEvolution
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L56+0x8
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L53	@cond_branch
	add	r0, r5, #0
	b	.L55
.L57:
	.align	2, 0
.L56:
	.word	gSaveBlock2Ptr
	.word	0x377
	.word	0x88f
.L53:
	add	r0, r4, #0
.L55:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 GetBaseSpecie,.Lfe4-GetBaseSpecie
	.align	2, 0
	.globl	getTrainerLevel
	.type	 getTrainerLevel,function
	.thumb_func
getTrainerLevel:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r9, r4
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r8, r6
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r5, #0
	bl	IsHardMode
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L59	@cond_branch
	cmp	r4, #0
	bne	.L60	@cond_branch
	ldr	r0, .L77
	add	r0, r5, r0
	b	.L75
.L78:
	.align	2, 0
.L77:
	.word	normalminTrainerLevel
.L60:
	cmp	r4, #0x1
	bne	.L62	@cond_branch
	ldr	r0, .L79
	add	r0, r5, r0
	ldrb	r0, [r0]
	add	r0, r6, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L76
.L80:
	.align	2, 0
.L79:
	.word	normalminTrainerLevel
.L62:
	sub	r0, r4, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L64	@cond_branch
	ldr	r0, .L81
	add	r0, r5, r0
	b	.L75
.L82:
	.align	2, 0
.L81:
	.word	normalminGymLevel
.L64:
	add	r0, r4, #0
	b	.L73
.L59:
	cmp	r4, #0
	bne	.L67	@cond_branch
	ldr	r0, .L83
	add	r0, r5, r0
	ldrb	r0, [r0]
	add	r0, r6, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L76
.L84:
	.align	2, 0
.L83:
	.word	hardminTrainerLevel
.L67:
	cmp	r4, #0x1
	bne	.L69	@cond_branch
	ldr	r0, .L85
	add	r0, r5, r0
	ldrb	r0, [r0]
	add	r0, r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L76
.L86:
	.align	2, 0
.L85:
	.word	hardminTrainerLevel
.L69:
	mov	r0, r9
	sub	r0, r0, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L71	@cond_branch
	bl	GetNumBadges
	add	r0, r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L76
.L71:
	ldr	r0, .L87
	add	r0, r7, r0
.L75:
	ldrb	r0, [r0]
.L76:
.L73:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L88:
	.align	2, 0
.L87:
	.word	hardminGymLevel
.Lfe5:
	.size	 getTrainerLevel,.Lfe5-getTrainerLevel
	.align	2, 0
	.globl	getWildLevel
	.type	 getWildLevel,function
	.thumb_func
getWildLevel:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r4, #0x2e
	beq	.L91	@cond_branch
	cmp	r4, #0x37
	beq	.L91	@cond_branch
	cmp	r4, #0x48
	beq	.L91	@cond_branch
	cmp	r4, #0x16
	bne	.L90	@cond_branch
.L91:
	bl	GetNumBadges
	ldr	r1, .L99
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r0, #0x6
	b	.L97
.L100:
	.align	2, 0
.L99:
	.word	WildLevel
.L90:
	cmp	r5, #0xc1
	beq	.L94	@cond_branch
	cmp	r5, #0x32
	beq	.L94	@cond_branch
	cmp	r5, #0x9b
	bne	.L92	@cond_branch
.L94:
	ldr	r4, .L101
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r0, [r0]
	b	.L98
.L102:
	.align	2, 0
.L101:
	.word	WildLevel
.L92:
	bl	GetNumBadges
	ldr	r1, .L103
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r6, r0
.L97:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L98:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L104:
	.align	2, 0
.L103:
	.word	WildLevel
.Lfe6:
	.size	 getWildLevel,.Lfe6-getWildLevel
	.align	2, 0
	.globl	getTrainerPokemonNum
	.type	 getTrainerPokemonNum,function
	.thumb_func
getTrainerPokemonNum:
	push	{r4, lr}
	bl	IsHardMode
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L106	@cond_branch
	ldr	r4, .L111
	b	.L110
.L112:
	.align	2, 0
.L111:
	.word	hardnumMonsBadge
.L106:
	ldr	r4, .L113
.L110:
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r0, [r0]
	pop	{r4}
	pop	{r1}
	bx	r1
.L114:
	.align	2, 0
.L113:
	.word	normalnumMonsBadge
.Lfe7:
	.size	 getTrainerPokemonNum,.Lfe7-getTrainerPokemonNum
	.align	2, 0
	.globl	getLeaderPokemonNum
	.type	 getLeaderPokemonNum,function
	.thumb_func
getLeaderPokemonNum:
	push	{r4, lr}
	bl	IsHardMode
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L116	@cond_branch
	ldr	r4, .L121
	b	.L120
.L122:
	.align	2, 0
.L121:
	.word	hardnumMonsGym
.L116:
	ldr	r4, .L123
.L120:
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r0, [r0]
	pop	{r4}
	pop	{r1}
	bx	r1
.L124:
	.align	2, 0
.L123:
	.word	normalnumMonsGym
.Lfe8:
	.size	 getLeaderPokemonNum,.Lfe8-getLeaderPokemonNum
	.align	2, 0
	.globl	getDoubleTrainerPokemonNum
	.type	 getDoubleTrainerPokemonNum,function
	.thumb_func
getDoubleTrainerPokemonNum:
	push	{r4, lr}
	bl	IsHardMode
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L126	@cond_branch
	ldr	r4, .L131
	b	.L130
.L132:
	.align	2, 0
.L131:
	.word	hardnumMonsDouble
.L126:
	ldr	r4, .L133
.L130:
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r0, [r0]
	pop	{r4}
	pop	{r1}
	bx	r1
.L134:
	.align	2, 0
.L133:
	.word	normalnumMonsDouble
.Lfe9:
	.size	 getDoubleTrainerPokemonNum,.Lfe9-getDoubleTrainerPokemonNum
	.align	2, 0
	.globl	GetWildPokemon
	.type	 GetWildPokemon,function
	.thumb_func
GetWildPokemon:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r6, r2, #0x10
	bl	GetBaseSpecie
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r7, r0, #0
	add	r1, r5, #0
	bl	SplitEvolutions
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	cmp	r6, #0xe0
	beq	.L137	@cond_branch
	ldr	r0, .L170
	cmp	r6, r0
	bne	.L136	@cond_branch
.L137:
	add	r0, r7, #0
	b	.L166
.L171:
	.align	2, 0
.L170:
	.word	0x123
.L136:
	ldr	r1, .L172
	lsl	r2, r4, #0x2
	add	r0, r2, r4
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	add	r3, r1, #0
	cmp	r0, #0x1d
	bhi	.L138	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L172+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L173:
	.align	2, 0
.L172:
	.word	gEvolutionTable
	.word	.L164
	.align	2, 0
	.align	2, 0
.L164:
	.word	.L139
	.word	.L138
	.word	.L138
	.word	.L145
	.word	.L162
	.word	.L162
	.word	.L162
	.word	.L138
	.word	.L138
	.word	.L138
	.word	.L138
	.word	.L138
	.word	.L138
	.word	.L138
	.word	.L153
	.word	.L145
	.word	.L145
	.word	.L145
	.word	.L145
	.word	.L153
	.word	.L138
	.word	.L153
	.word	.L162
	.word	.L138
	.word	.L162
	.word	.L162
	.word	.L162
	.word	.L162
	.word	.L153
	.word	.L153
.L139:
	cmp	r5, #0x18
	bcc	.L138	@cond_branch
	b	.L167
.L145:
	add	r0, r2, r4
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldrh	r3, [r0, #0x2]
	cmp	r3, #0
	beq	.L138	@cond_branch
	cmp	r3, r5
	bhi	.L138	@cond_branch
	ldrh	r4, [r0, #0x4]
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	GetWildPokemon
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L138	@cond_branch
	add	r0, r4, #0
	b	.L168
.L153:
	mov	r0, #0x5
	b	.L169
.L162:
	mov	r0, #0x7
.L169:
	cmp	r0, ip
	bhi	.L138	@cond_branch
.L167:
	add	r0, r2, r4
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldrh	r0, [r0, #0x4]
.L168:
	add	r1, r5, #0
	add	r2, r6, #0
	bl	GetWildPokemon
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L166
.L138:
	add	r0, r4, #0
.L166:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 GetWildPokemon,.Lfe10-GetWildPokemon
	.align	2, 0
	.globl	GetTrainerPokemon
	.type	 GetTrainerPokemon,function
	.thumb_func
GetTrainerPokemon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	bl	GetBaseSpecie
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	bl	SplitEvolutions
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L207
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r0, #0x1d
	bhi	.L175	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L207+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L208:
	.align	2, 0
.L207:
	.word	gEvolutionTable
	.word	.L201
	.align	2, 0
	.align	2, 0
.L201:
	.word	.L176
	.word	.L175
	.word	.L175
	.word	.L182
	.word	.L199
	.word	.L199
	.word	.L199
	.word	.L175
	.word	.L175
	.word	.L175
	.word	.L175
	.word	.L175
	.word	.L175
	.word	.L175
	.word	.L190
	.word	.L182
	.word	.L182
	.word	.L182
	.word	.L182
	.word	.L190
	.word	.L175
	.word	.L190
	.word	.L199
	.word	.L175
	.word	.L199
	.word	.L199
	.word	.L199
	.word	.L199
	.word	.L190
	.word	.L190
.L176:
	cmp	r5, #0xc
	bcc	.L175	@cond_branch
	b	.L204
.L182:
	ldr	r1, .L209
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2]
	cmp	r1, #0
	beq	.L175	@cond_branch
	cmp	r1, r5
	bhi	.L175	@cond_branch
	ldrh	r4, [r0, #0x4]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	GetTrainerPokemon
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L175	@cond_branch
	add	r0, r4, #0
	b	.L205
.L210:
	.align	2, 0
.L209:
	.word	gEvolutionTable
.L190:
	mov	r0, #0x4
	b	.L206
.L199:
	mov	r0, #0x6
.L206:
	cmp	r0, r2
	bhi	.L175	@cond_branch
.L204:
	ldr	r1, .L211
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
.L205:
	add	r1, r5, #0
	bl	GetTrainerPokemon
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L203
.L212:
	.align	2, 0
.L211:
	.word	gEvolutionTable
.L175:
	add	r0, r4, #0
.L203:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 GetTrainerPokemon,.Lfe11-GetTrainerPokemon
	.section .rodata
	.align	1, 0
.LC18:
	.short	0x10a
	.short	0x10c
	.align	1, 0
.LC20:
	.short	0x86
	.short	0x87
	.short	0x88
	.short	0xc4
	.short	0xc5
	.short	0x1d6
	.short	0x1d7
	.short	0x2bc
	.align	1, 0
.LC22:
	.short	0x3e
	.short	0xba
	.align	1, 0
.LC24:
	.short	0xed
	.short	0x6a
	.short	0x6b
	.align	1, 0
.LC26:
	.short	0x50
	.short	0xc7
	.align	1, 0
.LC28:
	.short	0x2d
	.short	0xb6
	.align	1, 0
.LC30:
	.short	0x11a
	.short	0x1db
	.align	1, 0
.LC32:
	.short	0x124
	.short	0x124
	.align	1, 0
.LC34:
	.short	0x349
	.short	0x34a
.text
	.align	2, 0
	.globl	SplitEvolutions
	.type	 SplitEvolutions,function
	.thumb_func
SplitEvolutions:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L226
	cmp	r4, r0
	bne	.L214	@cond_branch
	cmp	r5, #0x6
	bls	.L214	@cond_branch
	ldr	r1, .L226+0x4
	b	.L224
.L227:
	.align	2, 0
.L226:
	.word	0x109
	.word	.LC18
.L214:
	cmp	r4, #0x85
	bne	.L215	@cond_branch
	cmp	r5, #0x14
	bls	.L215	@cond_branch
	add	r4, sp, #0x4
	ldr	r1, .L228
	add	r0, r4, #0
	mov	r2, #0x10
	bl	memcpy
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xe0
	lsl	r1, r1, #0xb
	and	r1, r1, r0
	lsr	r1, r1, #0xf
	add	r4, r4, r1
	ldrh	r0, [r4]
	b	.L223
.L229:
	.align	2, 0
.L228:
	.word	.LC20
.L215:
	cmp	r4, #0x3d
	bne	.L216	@cond_branch
	cmp	r1, #0x4
	bls	.L216	@cond_branch
	ldr	r1, .L230
	b	.L224
.L231:
	.align	2, 0
.L230:
	.word	.LC22
.L216:
	cmp	r4, #0xec
	bne	.L217	@cond_branch
	cmp	r5, #0x13
	bls	.L217	@cond_branch
	ldr	r1, .L232
	mov	r0, sp
	mov	r2, #0x6
	bl	memcpy
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	b	.L225
.L233:
	.align	2, 0
.L232:
	.word	.LC24
.L217:
	cmp	r4, #0x4f
	bne	.L218	@cond_branch
	cmp	r5, #0x24
	bls	.L218	@cond_branch
	ldr	r1, .L234
	b	.L224
.L235:
	.align	2, 0
.L234:
	.word	.LC26
.L218:
	cmp	r4, #0x2c
	bne	.L219	@cond_branch
	cmp	r5, #0x22
	bls	.L219	@cond_branch
	ldr	r1, .L236
	b	.L224
.L237:
	.align	2, 0
.L236:
	.word	.LC28
.L219:
	ldr	r0, .L238
	cmp	r4, r0
	bne	.L220	@cond_branch
	cmp	r5, #0x1d
	bls	.L220	@cond_branch
	ldr	r1, .L238+0x4
	b	.L224
.L239:
	.align	2, 0
.L238:
	.word	0x119
	.word	.LC30
.L220:
	mov	r0, #0x91
	lsl	r0, r0, #0x1
	cmp	r4, r0
	bne	.L221	@cond_branch
	cmp	r5, #0x13
	bls	.L221	@cond_branch
	ldr	r1, .L240
	b	.L224
.L241:
	.align	2, 0
.L240:
	.word	.LC32
.L221:
	mov	r0, #0xd2
	lsl	r0, r0, #0x2
	cmp	r4, r0
	bne	.L222	@cond_branch
	cmp	r1, #0x3
	bls	.L222	@cond_branch
	ldr	r1, .L242
.L224:
	mov	r0, sp
	mov	r2, #0x4
	bl	memcpy
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x1
.L225:
	add	r0, r0, sp
	ldrh	r0, [r0]
	b	.L223
.L243:
	.align	2, 0
.L242:
	.word	.LC34
.L222:
	add	r0, r4, #0
.L223:
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 SplitEvolutions,.Lfe12-SplitEvolutions
	.align	2, 0
	.globl	CheckforLegendary
	.type	 CheckforLegendary,function
	.thumb_func
CheckforLegendary:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r3, r2, #0
	ldr	r0, .L248
	ldr	r1, [r0]
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x8
	ldrb	r1, [r1, #0xa]
	orr	r1, r1, r0
	add	r0, r2, #0
	sub	r0, r0, #0x90
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bls	.L246	@cond_branch
	cmp	r2, #0x96
	beq	.L246	@cond_branch
	cmp	r2, #0x97
	beq	.L246	@cond_branch
	add	r0, r2, #0
	sub	r0, r0, #0xf3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bls	.L246	@cond_branch
	add	r0, r2, #0
	sub	r0, r0, #0xf9
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bls	.L246	@cond_branch
	ldr	r4, .L248+0x4
	add	r0, r2, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x9
	bls	.L246	@cond_branch
	sub	r4, r4, #0x67
	add	r0, r2, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xe
	bls	.L246	@cond_branch
	sub	r4, r4, #0x9e
	add	r0, r2, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xb
	bls	.L246	@cond_branch
	sub	r4, r4, #0x4e
	add	r0, r2, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5
	bls	.L246	@cond_branch
	sub	r4, r4, #0x45
	add	r0, r2, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x18
	bls	.L246	@cond_branch
	sub	r4, r4, #0x67
	add	r0, r2, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xa
	bhi	.L245	@cond_branch
.L246:
	mov	r0, r3
	mul	r0, r0, r1
	ldr	r1, .L248+0x8
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	CheckforLegendary
	b	.L247
.L249:
	.align	2, 0
.L248:
	.word	gSaveBlock2Ptr
	.word	-0x179
	.word	0x377
.L245:
	add	r0, r3, #0
.L247:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 CheckforLegendary,.Lfe13-CheckforLegendary
	.align	2, 0
	.globl	GetHeldItem
	.type	 GetHeldItem,function
	.thumb_func
GetHeldItem:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r5, #0
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsHardMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L251	@cond_branch
	add	r4, r4, #0x1
.L251:
	cmp	r6, #0x82
	beq	.L252	@cond_branch
	cmp	r4, #0x6
	bhi	.L270	@cond_branch
	b	.L275
.L252:
	cmp	r5, #0x96
	bne	.L255	@cond_branch
	cmp	r4, #0x5
	bls	.L256	@cond_branch
.L275:
	mov	r0, #0x99
	b	.L274
.L256:
	cmp	r4, #0x2
	bls	.L257	@cond_branch
	mov	r0, #0x3b
	b	.L274
.L257:
	mov	r0, #0x96
	b	.L274
.L255:
	cmp	r5, #0x98
	bne	.L258	@cond_branch
	cmp	r4, #0x7
	bls	.L259	@cond_branch
	mov	r0, #0x9a
	b	.L274
.L259:
	cmp	r4, #0x5
	bls	.L260	@cond_branch
	mov	r0, #0xe5
	b	.L274
.L260:
	cmp	r4, #0x3
	bhi	.L276	@cond_branch
.L258:
	cmp	r5, #0xab
	bne	.L262	@cond_branch
	cmp	r4, #0x6
	bls	.L263	@cond_branch
	mov	r0, #0x8d
	lsl	r0, r0, #0x1
	b	.L274
.L263:
	cmp	r4, #0x4
	bls	.L264	@cond_branch
	mov	r0, #0x86
	lsl	r0, r0, #0x1
	b	.L274
.L264:
	cmp	r4, #0x2
	bhi	.L277	@cond_branch
.L262:
	cmp	r5, #0xac
	bne	.L266	@cond_branch
	cmp	r4, #0x6
	bls	.L267	@cond_branch
	mov	r0, #0xd7
	b	.L274
.L267:
	cmp	r4, #0x4
	bls	.L268	@cond_branch
	mov	r0, #0xce
	b	.L274
.L268:
	cmp	r4, #0x2
	bls	.L266	@cond_branch
	mov	r0, #0xc7
	b	.L274
.L266:
	cmp	r5, #0xad
	bne	.L270	@cond_branch
	cmp	r4, #0x6
	bls	.L271	@cond_branch
.L277:
	ldr	r0, .L278
	b	.L274
.L279:
	.align	2, 0
.L278:
	.word	0x15f
.L271:
	cmp	r4, #0x4
	bls	.L272	@cond_branch
	mov	r0, #0xb8
	b	.L274
.L272:
	cmp	r4, #0x2
	bls	.L270	@cond_branch
.L276:
	mov	r0, #0x98
	b	.L274
.L270:
	add	r0, r5, #0
.L274:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 GetHeldItem,.Lfe14-GetHeldItem
.text
	.align	2, 0

