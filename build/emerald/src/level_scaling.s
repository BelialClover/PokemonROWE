@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	normalnumMonsBadge
.data
	.type	 normalnumMonsBadge,object
normalnumMonsBadge:
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x6
	.byte	0x6
	.size	 normalnumMonsBadge,11
	.globl	normalnumMonsGym
	.type	 normalnumMonsGym,object
normalnumMonsGym:
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.size	 normalnumMonsGym,11
	.globl	normalminTrainerLevel
	.type	 normalminTrainerLevel,object
normalminTrainerLevel:
	.byte	0x6
	.byte	0xa
	.byte	0xf
	.byte	0x14
	.byte	0x19
	.byte	0x1e
	.byte	0x23
	.byte	0x28
	.byte	0x2d
	.byte	0x37
	.byte	0x3c
	.size	 normalminTrainerLevel,11
	.globl	normalminGymLevel
	.type	 normalminGymLevel,object
normalminGymLevel:
	.byte	0xc
	.byte	0x11
	.byte	0x16
	.byte	0x1b
	.byte	0x20
	.byte	0x25
	.byte	0x2a
	.byte	0x32
	.byte	0x37
	.byte	0x41
	.byte	0x46
	.size	 normalminGymLevel,11
	.globl	normalnumMonsDouble
	.type	 normalnumMonsDouble,object
normalnumMonsDouble:
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.size	 normalnumMonsDouble,11
	.globl	hardnumMonsBadge
	.type	 hardnumMonsBadge,object
hardnumMonsBadge:
	.byte	0x3
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x5
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.size	 hardnumMonsBadge,11
	.globl	hardnumMonsGym
	.type	 hardnumMonsGym,object
hardnumMonsGym:
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x5
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.byte	0x6
	.size	 hardnumMonsGym,11
	.globl	hardminTrainerLevel
	.type	 hardminTrainerLevel,object
hardminTrainerLevel:
	.byte	0x7
	.byte	0xc
	.byte	0x12
	.byte	0x18
	.byte	0x1e
	.byte	0x24
	.byte	0x2a
	.byte	0x30
	.byte	0x37
	.byte	0x41
	.byte	0x46
	.size	 hardminTrainerLevel,11
	.globl	hardminGymLevel
	.type	 hardminGymLevel,object
hardminGymLevel:
	.byte	0xd
	.byte	0x13
	.byte	0x19
	.byte	0x1f
	.byte	0x25
	.byte	0x2b
	.byte	0x31
	.byte	0x3c
	.byte	0x44
	.byte	0x4c
	.byte	0x52
	.size	 hardminGymLevel,11
	.globl	hardnumMonsDouble
	.type	 hardnumMonsDouble,object
hardnumMonsDouble:
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.size	 hardnumMonsDouble,11
	.globl	WildLevel
	.type	 WildLevel,object
WildLevel:
	.byte	0x4
	.byte	0xa
	.byte	0xf
	.byte	0x14
	.byte	0x19
	.byte	0x1e
	.byte	0x23
	.byte	0x28
	.byte	0x2d
	.byte	0x37
	.byte	0x3c
	.size	 WildLevel,11
	.globl	MovePowerLimit
	.type	 MovePowerLimit,object
MovePowerLimit:
	.byte	0x3c
	.byte	0x3c
	.byte	0x46
	.byte	0x46
	.byte	0x50
	.byte	0x5a
	.byte	0x64
	.byte	0xfa
	.byte	0xfa
	.byte	0xfa
	.byte	0xfa
	.size	 MovePowerLimit,11
.text
	.align	2, 0
	.globl	IsHardMode
	.type	 IsHardMode,function
	.thumb_func
IsHardMode:
	push	{lr}
	ldr	r0, .L6
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3	@cond_branch
	mov	r0, #0x0
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	gSaveBlock2Ptr
.L3:
	mov	r0, #0x1
.L5:
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 IsHardMode,.Lfe1-IsHardMode
	.align	2, 0
	.globl	GetFirstEvolution
	.type	 GetFirstEvolution,function
	.thumb_func
GetFirstEvolution:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L27
	mov	ip, r0
.L12:
	mov	r7, #0x0
	mov	r6, #0x1
	mov	r4, #0x80
	lsl	r4, r4, #0x9
	mov	r5, #0x50
	mov	r3, ip
	add	r3, r3, #0x50
.L16:
	mov	r1, #0x0
	ldrh	r0, [r3, #0x4]
	cmp	r0, r2
	bne	.L19	@cond_branch
	lsr	r2, r4, #0x10
	b	.L14
.L28:
	.align	2, 0
.L27:
	.word	gEvolutionTable
.L19:
	add	r1, r1, #0x1
	cmp	r1, #0x9
	bgt	.L18	@cond_branch
	lsl	r0, r1, #0x3
	add	r0, r0, r5
	add	r0, r0, ip
	ldrh	r0, [r0, #0x4]
	cmp	r0, r2
	bne	.L19	@cond_branch
	lsr	r2, r4, #0x10
	mov	r7, #0x1
.L18:
	cmp	r7, #0
	bne	.L14	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	add	r4, r4, r0
	add	r5, r5, #0x50
	add	r3, r3, #0x50
	add	r6, r6, #0x1
	ldr	r0, .L29
	cmp	r6, r0
	ble	.L16	@cond_branch
.L14:
	ldr	r0, .L29+0x4
	cmp	r6, r0
	beq	.L10	@cond_branch
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x9
	ble	.L12	@cond_branch
.L10:
	add	r0, r2, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L30:
	.align	2, 0
.L29:
	.word	0x4b6
	.word	0x4b7
.Lfe2:
	.size	 GetFirstEvolution,.Lfe2-GetFirstEvolution
	.align	2, 0
	.globl	GetNumBadges
	.type	 GetNumBadges,function
	.thumb_func
GetNumBadges:
	push	{lr}
	mov	r0, #0xe0
	lsl	r0, r0, #0x1
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L32	@cond_branch
	mov	r0, #0xa
	b	.L50
.L32:
	ldr	r0, .L51
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L33	@cond_branch
	mov	r0, #0x9
	b	.L50
.L52:
	.align	2, 0
.L51:
	.word	0x864
.L33:
	mov	r0, #0xac
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L35	@cond_branch
	mov	r0, #0x8
	b	.L50
.L35:
	mov	r0, #0xab
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L37	@cond_branch
	mov	r0, #0x7
	b	.L50
.L37:
	mov	r0, #0xaa
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L39	@cond_branch
	mov	r0, #0x6
	b	.L50
.L39:
	mov	r0, #0xa9
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L41	@cond_branch
	mov	r0, #0x5
	b	.L50
.L41:
	mov	r0, #0xa8
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L43	@cond_branch
	mov	r0, #0x4
	b	.L50
.L43:
	mov	r0, #0xa7
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L45	@cond_branch
	mov	r0, #0x3
	b	.L50
.L45:
	mov	r0, #0xa6
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L47	@cond_branch
	mov	r0, #0x2
	b	.L50
.L47:
	mov	r0, #0xa5
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L34	@cond_branch
	mov	r0, #0x0
	b	.L50
.L34:
	mov	r0, #0x1
.L50:
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 GetNumBadges,.Lfe3-GetNumBadges
	.align	2, 0
	.globl	getLevelBoost
	.type	 getLevelBoost,function
	.thumb_func
getLevelBoost:
	push	{r4, lr}
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L60
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L54	@cond_branch
	bl	IsHardMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L54	@cond_branch
	lsl	r0, r4, #0x19
	lsr	r0, r0, #0x18
	b	.L59
.L61:
	.align	2, 0
.L60:
	.word	0x864
.L54:
	bl	IsHardMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L57	@cond_branch
	ldr	r0, .L62
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L56	@cond_branch
.L57:
	add	r0, r4, #0
	b	.L59
.L63:
	.align	2, 0
.L62:
	.word	0x864
.L56:
	mov	r0, #0x0
.L59:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 getLevelBoost,.Lfe4-getLevelBoost
	.align	2, 0
	.globl	GetBaseSpecie
	.type	 GetBaseSpecie,function
	.thumb_func
GetBaseSpecie:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L68
	ldr	r0, [r0]
	ldrb	r5, [r0, #0xb]
	ldr	r0, .L68+0x4
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L65	@cond_branch
	add	r0, r4, #0
	b	.L67
.L69:
	.align	2, 0
.L68:
	.word	gSaveBlock2Ptr
	.word	0x88f
.L65:
	mov	r0, r4
	mul	r0, r0, r5
	mov	r1, #0xdd
	lsl	r1, r1, #0x2
	bl	__modsi3
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	CheckforLegendary
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L67:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 GetBaseSpecie,.Lfe5-GetBaseSpecie
	.align	2, 0
	.globl	getTrainerLevel
	.type	 getTrainerLevel,function
	.thumb_func
getTrainerLevel:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r8, r4
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r9, r5
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0x2
	bl	__modsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r7, r6, #0
	bl	IsHardMode
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L71	@cond_branch
	cmp	r4, #0
	bne	.L72	@cond_branch
	ldr	r0, .L88
	add	r0, r5, r0
	b	.L86
.L89:
	.align	2, 0
.L88:
	.word	normalminTrainerLevel
.L72:
	cmp	r4, #0x1
	bne	.L74	@cond_branch
	ldr	r0, .L90
	add	r0, r5, r0
	ldrb	r0, [r0]
	add	r0, r6, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L87
.L91:
	.align	2, 0
.L90:
	.word	normalminTrainerLevel
.L74:
	sub	r0, r4, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L76	@cond_branch
	ldr	r0, .L92
	add	r0, r5, r0
	b	.L86
.L93:
	.align	2, 0
.L92:
	.word	normalminGymLevel
.L76:
	add	r0, r4, #0
	b	.L84
.L71:
	cmp	r4, #0
	bne	.L79	@cond_branch
	ldr	r0, .L94
	add	r0, r5, r0
	ldrb	r0, [r0]
	add	r0, r6, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L87
.L95:
	.align	2, 0
.L94:
	.word	hardminTrainerLevel
.L79:
	cmp	r4, #0x1
	bne	.L81	@cond_branch
	ldr	r0, .L96
	add	r0, r5, r0
	ldrb	r0, [r0]
	add	r0, r7, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L87
.L97:
	.align	2, 0
.L96:
	.word	hardminTrainerLevel
.L81:
	mov	r0, r8
	sub	r0, r0, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L78	@cond_branch
	mov	r0, r8
	b	.L84
.L78:
	ldr	r0, .L98
	add	r0, r0, r9
.L86:
	ldrb	r0, [r0]
.L87:
.L84:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L99:
	.align	2, 0
.L98:
	.word	hardminGymLevel
.Lfe6:
	.size	 getTrainerLevel,.Lfe6-getTrainerLevel
	.align	2, 0
	.globl	getWildLevel
	.type	 getWildLevel,function
	.thumb_func
getWildLevel:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r7, r6, #0
	bl	Random
	add	r4, r0, #0
	bl	IsHardMode
	add	r5, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r4, #0
	mov	r1, #0x5
	bl	__umodsi3
	add	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r6, #0x2e
	beq	.L102	@cond_branch
	cmp	r6, #0x37
	beq	.L102	@cond_branch
	cmp	r6, #0x48
	beq	.L102	@cond_branch
	cmp	r6, #0x16
	bne	.L101	@cond_branch
.L102:
	bl	GetNumBadges
	ldr	r1, .L110
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r0, #0x6
	b	.L108
.L111:
	.align	2, 0
.L110:
	.word	WildLevel
.L101:
	cmp	r7, #0xc1
	beq	.L105	@cond_branch
	cmp	r7, #0x32
	beq	.L105	@cond_branch
	cmp	r7, #0x9b
	bne	.L103	@cond_branch
.L105:
	ldr	r4, .L112
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r0, [r0]
	b	.L109
.L113:
	.align	2, 0
.L112:
	.word	WildLevel
.L103:
	bl	GetNumBadges
	ldr	r1, .L114
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r4, r0
.L108:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L109:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L115:
	.align	2, 0
.L114:
	.word	WildLevel
.Lfe7:
	.size	 getWildLevel,.Lfe7-getWildLevel
	.align	2, 0
	.globl	getTrainerPokemonNum
	.type	 getTrainerPokemonNum,function
	.thumb_func
getTrainerPokemonNum:
	push	{r4, lr}
	bl	IsHardMode
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L117	@cond_branch
	ldr	r4, .L122
	b	.L121
.L123:
	.align	2, 0
.L122:
	.word	hardnumMonsBadge
.L117:
	ldr	r4, .L124
.L121:
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r0, [r0]
	pop	{r4}
	pop	{r1}
	bx	r1
.L125:
	.align	2, 0
.L124:
	.word	normalnumMonsBadge
.Lfe8:
	.size	 getTrainerPokemonNum,.Lfe8-getTrainerPokemonNum
	.align	2, 0
	.globl	getLeaderPokemonNum
	.type	 getLeaderPokemonNum,function
	.thumb_func
getLeaderPokemonNum:
	push	{r4, lr}
	bl	IsHardMode
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L127	@cond_branch
	ldr	r4, .L132
	b	.L131
.L133:
	.align	2, 0
.L132:
	.word	hardnumMonsGym
.L127:
	ldr	r4, .L134
.L131:
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r0, [r0]
	pop	{r4}
	pop	{r1}
	bx	r1
.L135:
	.align	2, 0
.L134:
	.word	normalnumMonsGym
.Lfe9:
	.size	 getLeaderPokemonNum,.Lfe9-getLeaderPokemonNum
	.align	2, 0
	.globl	getDoubleTrainerPokemonNum
	.type	 getDoubleTrainerPokemonNum,function
	.thumb_func
getDoubleTrainerPokemonNum:
	push	{r4, lr}
	bl	IsHardMode
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L137	@cond_branch
	ldr	r4, .L142
	b	.L141
.L143:
	.align	2, 0
.L142:
	.word	hardnumMonsDouble
.L137:
	ldr	r4, .L144
.L141:
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r0, [r0]
	pop	{r4}
	pop	{r1}
	bx	r1
.L145:
	.align	2, 0
.L144:
	.word	normalnumMonsDouble
.Lfe10:
	.size	 getDoubleTrainerPokemonNum,.Lfe10-getDoubleTrainerPokemonNum
	.align	2, 0
	.globl	GetWildPokemon
	.type	 GetWildPokemon,function
	.thumb_func
GetWildPokemon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r6, r2, #0x10
	bl	GetBaseSpecie
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	add	r0, r7, #0
	add	r1, r5, #0
	bl	SplitEvolutions
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r6, #0xe0
	beq	.L148	@cond_branch
	ldr	r0, .L182
	cmp	r6, r0
	beq	.L148	@cond_branch
	add	r0, r7, #0
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x0
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L148	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bls	.L147	@cond_branch
.L148:
	add	r0, r7, #0
	b	.L178
.L183:
	.align	2, 0
.L182:
	.word	0x123
.L147:
	ldr	r1, .L184
	lsl	r2, r4, #0x2
	add	r0, r2, r4
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	add	r3, r1, #0
	cmp	r0, #0x1d
	bhi	.L149	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L184+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L185:
	.align	2, 0
.L184:
	.word	gEvolutionTable
	.word	.L176
	.align	2, 0
	.align	2, 0
.L176:
	.word	.L151
	.word	.L149
	.word	.L149
	.word	.L157
	.word	.L174
	.word	.L174
	.word	.L174
	.word	.L149
	.word	.L149
	.word	.L149
	.word	.L149
	.word	.L149
	.word	.L149
	.word	.L149
	.word	.L165
	.word	.L157
	.word	.L157
	.word	.L157
	.word	.L157
	.word	.L165
	.word	.L151
	.word	.L165
	.word	.L174
	.word	.L149
	.word	.L174
	.word	.L174
	.word	.L174
	.word	.L174
	.word	.L165
	.word	.L165
.L151:
	cmp	r5, #0x18
	bcc	.L149	@cond_branch
	b	.L179
.L157:
	add	r0, r2, r4
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldrh	r3, [r0, #0x2]
	cmp	r3, #0
	beq	.L149	@cond_branch
	cmp	r3, r5
	bhi	.L149	@cond_branch
	ldrh	r4, [r0, #0x4]
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	GetWildPokemon
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L149	@cond_branch
	add	r0, r4, #0
	b	.L180
.L165:
	mov	r0, #0x5
	b	.L181
.L174:
	mov	r0, #0x7
.L181:
	cmp	r0, r8
	bhi	.L149	@cond_branch
.L179:
	add	r0, r2, r4
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldrh	r0, [r0, #0x4]
.L180:
	add	r1, r5, #0
	add	r2, r6, #0
	bl	GetWildPokemon
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L178
.L149:
	add	r0, r4, #0
.L178:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 GetWildPokemon,.Lfe11-GetWildPokemon
	.align	2, 0
	.globl	GetTrainerPokemon
	.type	 GetTrainerPokemon,function
	.thumb_func
GetTrainerPokemon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	bl	GetBaseSpecie
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	bl	SplitEvolutions
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L222
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r0, #0x1e
	bhi	.L187	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L222+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L223:
	.align	2, 0
.L222:
	.word	gEvolutionTable
	.word	.L216
	.align	2, 0
	.align	2, 0
.L216:
	.word	.L190
	.word	.L190
	.word	.L187
	.word	.L196
	.word	.L214
	.word	.L214
	.word	.L214
	.word	.L187
	.word	.L187
	.word	.L187
	.word	.L187
	.word	.L187
	.word	.L187
	.word	.L187
	.word	.L205
	.word	.L196
	.word	.L196
	.word	.L196
	.word	.L196
	.word	.L205
	.word	.L190
	.word	.L205
	.word	.L214
	.word	.L187
	.word	.L214
	.word	.L214
	.word	.L214
	.word	.L214
	.word	.L205
	.word	.L205
	.word	.L205
.L190:
	cmp	r5, #0xc
	bcc	.L187	@cond_branch
	b	.L219
.L196:
	ldr	r1, .L224
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2]
	cmp	r1, #0
	beq	.L187	@cond_branch
	cmp	r1, r5
	bhi	.L187	@cond_branch
	ldrh	r4, [r0, #0x4]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	GetTrainerPokemon
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L187	@cond_branch
	add	r0, r4, #0
	b	.L220
.L225:
	.align	2, 0
.L224:
	.word	gEvolutionTable
.L205:
	mov	r0, #0x4
	b	.L221
.L214:
	mov	r0, #0x6
.L221:
	cmp	r0, r2
	bhi	.L187	@cond_branch
.L219:
	ldr	r1, .L226
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
.L220:
	add	r1, r5, #0
	bl	GetTrainerPokemon
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L218
.L227:
	.align	2, 0
.L226:
	.word	gEvolutionTable
.L187:
	add	r0, r4, #0
.L218:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 GetTrainerPokemon,.Lfe12-GetTrainerPokemon
	.section .rodata
	.align	1, 0
.LC18:
	.short	0x10a
	.short	0x10c
	.align	1, 0
.LC20:
	.short	0x86
	.short	0x87
	.short	0x88
	.short	0xc4
	.short	0xc5
	.short	0x1d6
	.short	0x1d7
	.short	0x2bc
	.align	1, 0
.LC22:
	.short	0x3e
	.short	0xba
	.align	1, 0
.LC24:
	.short	0xed
	.short	0x6a
	.short	0x6b
	.align	1, 0
.LC26:
	.short	0x50
	.short	0xc7
	.align	1, 0
.LC28:
	.short	0x2d
	.short	0xb6
	.align	1, 0
.LC30:
	.short	0x11a
	.short	0x1db
	.align	1, 0
.LC32:
	.short	0x124
	.short	0x124
	.align	1, 0
.LC34:
	.short	0x349
	.short	0x34a
.text
	.align	2, 0
	.globl	SplitEvolutions
	.type	 SplitEvolutions,function
	.thumb_func
SplitEvolutions:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	sub	r0, r4, #0x1
	lsl	r0, r0, #0x10
	ldr	r1, .L242
	cmp	r0, r1
	bls	.L229	@cond_branch
	mov	r4, #0x83
.L229:
	ldr	r0, .L242+0x4
	cmp	r4, r0
	bne	.L230	@cond_branch
	cmp	r5, #0x6
	bls	.L230	@cond_branch
	ldr	r1, .L242+0x8
	b	.L240
.L243:
	.align	2, 0
.L242:
	.word	0x4b60000
	.word	0x109
	.word	.LC18
.L230:
	cmp	r4, #0x85
	bne	.L231	@cond_branch
	cmp	r5, #0x14
	bls	.L231	@cond_branch
	add	r4, sp, #0x4
	ldr	r1, .L244
	add	r0, r4, #0
	mov	r2, #0x10
	bl	memcpy
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xe0
	lsl	r1, r1, #0xb
	and	r1, r1, r0
	lsr	r1, r1, #0xf
	add	r4, r4, r1
	ldrh	r0, [r4]
	b	.L239
.L245:
	.align	2, 0
.L244:
	.word	.LC20
.L231:
	cmp	r4, #0x3d
	bne	.L232	@cond_branch
	cmp	r2, #0x4
	bls	.L232	@cond_branch
	ldr	r1, .L246
	b	.L240
.L247:
	.align	2, 0
.L246:
	.word	.LC22
.L232:
	cmp	r4, #0xec
	bne	.L233	@cond_branch
	cmp	r5, #0x13
	bls	.L233	@cond_branch
	ldr	r1, .L248
	mov	r0, sp
	mov	r2, #0x6
	bl	memcpy
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	b	.L241
.L249:
	.align	2, 0
.L248:
	.word	.LC24
.L233:
	cmp	r4, #0x4f
	bne	.L234	@cond_branch
	cmp	r5, #0x24
	bls	.L234	@cond_branch
	ldr	r1, .L250
	b	.L240
.L251:
	.align	2, 0
.L250:
	.word	.LC26
.L234:
	cmp	r4, #0x2c
	bne	.L235	@cond_branch
	cmp	r5, #0x22
	bls	.L235	@cond_branch
	ldr	r1, .L252
	b	.L240
.L253:
	.align	2, 0
.L252:
	.word	.LC28
.L235:
	ldr	r0, .L254
	cmp	r4, r0
	bne	.L236	@cond_branch
	cmp	r5, #0x1d
	bls	.L236	@cond_branch
	ldr	r1, .L254+0x4
	b	.L240
.L255:
	.align	2, 0
.L254:
	.word	0x119
	.word	.LC30
.L236:
	mov	r0, #0x91
	lsl	r0, r0, #0x1
	cmp	r4, r0
	bne	.L237	@cond_branch
	cmp	r5, #0x13
	bls	.L237	@cond_branch
	ldr	r1, .L256
	b	.L240
.L257:
	.align	2, 0
.L256:
	.word	.LC32
.L237:
	mov	r0, #0xd2
	lsl	r0, r0, #0x2
	cmp	r4, r0
	bne	.L238	@cond_branch
	cmp	r2, #0x3
	bls	.L238	@cond_branch
	ldr	r1, .L258
.L240:
	mov	r0, sp
	mov	r2, #0x4
	bl	memcpy
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x1
.L241:
	add	r0, r0, sp
	ldrh	r0, [r0]
	b	.L239
.L259:
	.align	2, 0
.L258:
	.word	.LC34
.L238:
	add	r0, r4, #0
.L239:
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 SplitEvolutions,.Lfe13-SplitEvolutions
	.section .rodata
	.align	1, 0
.LC36:
	.short	0x90
	.short	0x96
	.short	0xf3
	.short	0xf9
	.short	0x179
	.short	0x1e0
	.short	0x27e
	.short	0x2cc
	.short	0x311
	.align	1, 0
.LC38:
	.short	0x93
	.short	0x98
	.short	0xf6
	.short	0xfc
	.short	0x183
	.short	0x1ef
	.short	0x28a
	.short	0x2d2
	.short	0x32a
.text
	.align	2, 0
	.globl	CheckforLegendary
	.type	 CheckforLegendary,function
	.thumb_func
CheckforLegendary:
	push	{r4, r5, lr}
	add	sp, sp, #-0x28
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r1, .L271
	mov	r0, sp
	mov	r2, #0x12
	bl	memcpy
	add	r4, sp, #0x14
	ldr	r1, .L271+0x4
	add	r0, r4, #0
	mov	r2, #0x12
	bl	memcpy
	mov	r2, #0x0
.L264:
	lsl	r1, r2, #0x1
	mov	r3, sp
	add	r0, r3, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	bcc	.L270	@cond_branch
	add	r0, r4, r1
	ldrh	r1, [r0]
	cmp	r5, r1
	bcs	.L263	@cond_branch
	ldrh	r0, [r0]
	b	.L269
.L272:
	.align	2, 0
.L271:
	.word	.LC36
	.word	.LC38
.L263:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x8
	bls	.L264	@cond_branch
.L270:
	add	r0, r5, #0
.L269:
	add	sp, sp, #0x28
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 CheckforLegendary,.Lfe14-CheckforLegendary
	.align	2, 0
	.globl	GetHeldItem
	.type	 GetHeldItem,function
	.thumb_func
GetHeldItem:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r5, #0
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsHardMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L274	@cond_branch
	add	r4, r4, #0x1
.L274:
	cmp	r6, #0x82
	beq	.L275	@cond_branch
	cmp	r4, #0x6
	bhi	.L293	@cond_branch
	b	.L298
.L275:
	cmp	r5, #0x96
	bne	.L278	@cond_branch
	cmp	r4, #0x5
	bls	.L279	@cond_branch
.L298:
	mov	r0, #0x99
	b	.L297
.L279:
	cmp	r4, #0x2
	bls	.L280	@cond_branch
	mov	r0, #0x3b
	b	.L297
.L280:
	mov	r0, #0x96
	b	.L297
.L278:
	cmp	r5, #0x98
	bne	.L281	@cond_branch
	cmp	r4, #0x7
	bls	.L282	@cond_branch
	mov	r0, #0x9a
	b	.L297
.L282:
	cmp	r4, #0x5
	bls	.L283	@cond_branch
	mov	r0, #0xe5
	b	.L297
.L283:
	cmp	r4, #0x3
	bhi	.L299	@cond_branch
.L281:
	cmp	r5, #0xab
	bne	.L285	@cond_branch
	cmp	r4, #0x6
	bls	.L286	@cond_branch
	mov	r0, #0x8d
	lsl	r0, r0, #0x1
	b	.L297
.L286:
	cmp	r4, #0x4
	bls	.L287	@cond_branch
	mov	r0, #0x86
	lsl	r0, r0, #0x1
	b	.L297
.L287:
	cmp	r4, #0x2
	bhi	.L300	@cond_branch
.L285:
	cmp	r5, #0xac
	bne	.L289	@cond_branch
	cmp	r4, #0x6
	bls	.L290	@cond_branch
	mov	r0, #0xd7
	b	.L297
.L290:
	cmp	r4, #0x4
	bls	.L291	@cond_branch
	mov	r0, #0xce
	b	.L297
.L291:
	cmp	r4, #0x2
	bls	.L289	@cond_branch
	mov	r0, #0xc7
	b	.L297
.L289:
	cmp	r5, #0xad
	bne	.L293	@cond_branch
	cmp	r4, #0x6
	bls	.L294	@cond_branch
.L300:
	ldr	r0, .L301
	b	.L297
.L302:
	.align	2, 0
.L301:
	.word	0x15f
.L294:
	cmp	r4, #0x4
	bls	.L295	@cond_branch
	mov	r0, #0xb8
	b	.L297
.L295:
	cmp	r4, #0x2
	bls	.L293	@cond_branch
.L299:
	mov	r0, #0x98
	b	.L297
.L293:
	add	r0, r5, #0
.L297:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 GetHeldItem,.Lfe15-GetHeldItem
	.align	2, 0
	.globl	GetEvsfromPokemon
	.type	 GetEvsfromPokemon,function
	.thumb_func
GetEvsfromPokemon:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0xa
	bl	__udivsi3
	mov	r5, r6
	mul	r5, r5, r0
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	bl	IsHardMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L304	@cond_branch
	cmp	r6, #0xa
	beq	.L304	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L304:
	add	r0, r4, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 GetEvsfromPokemon,.Lfe16-GetEvsfromPokemon
	.align	2, 0
	.type	 IsMonValidSpecies,function
	.thumb_func
IsMonValidSpecies:
	push	{lr}
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L307	@cond_branch
	ldr	r0, .L309
	cmp	r1, r0
	bne	.L306	@cond_branch
.L307:
	mov	r0, #0x0
	b	.L308
.L310:
	.align	2, 0
.L309:
	.word	0x4b7
.L306:
	mov	r0, #0x1
.L308:
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 IsMonValidSpecies,.Lfe17-IsMonValidSpecies
	.align	2, 0
	.globl	GetPlayerUsableMons
	.type	 GetPlayerUsableMons,function
	.thumb_func
GetPlayerUsableMons:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	ldr	r4, .L318
	mov	r5, #0x5
.L315:
	add	r0, r4, #0
	bl	IsMonValidSpecies
	cmp	r0, #0
	beq	.L314	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L314	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L314:
	sub	r5, r5, #0x1
	add	r4, r4, #0x64
	cmp	r5, #0
	bge	.L315	@cond_branch
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L319:
	.align	2, 0
.L318:
	.word	gPlayerParty
.Lfe18:
	.size	 GetPlayerUsableMons,.Lfe18-GetPlayerUsableMons
	.align	2, 0
	.globl	IsMoveUsable
	.type	 IsMoveUsable,function
	.thumb_func
IsMoveUsable:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L324
	bl	GetNumBadges
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r4, r0
	bls	.L321	@cond_branch
	mov	r0, #0x0
	b	.L323
.L325:
	.align	2, 0
.L324:
	.word	MovePowerLimit
.L321:
	mov	r0, #0x1
.L323:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 IsMoveUsable,.Lfe19-IsMoveUsable
	.align	2, 0
	.globl	IsPokemonValid
	.type	 IsPokemonValid,function
	.thumb_func
IsPokemonValid:
	push	{lr}
	lsl	r0, r0, #0x10
	ldr	r1, .L330
	add	r0, r0, r1
	ldr	r1, .L330+0x4
	cmp	r0, r1
	bhi	.L327	@cond_branch
	mov	r0, #0x1
	b	.L329
.L331:
	.align	2, 0
.L330:
	.word	-0x10000
	.word	0x4b60000
.L327:
	mov	r0, #0x0
.L329:
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 IsPokemonValid,.Lfe20-IsPokemonValid
	.align	2, 0
	.globl	GetMapRandomPokemon
	.type	 GetMapRandomPokemon,function
	.thumb_func
GetMapRandomPokemon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x30
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xc
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x18
	bl	memset
	add	r4, sp, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x18
	bl	memset
	mov	r5, #0x0
	mov	r8, r4
.L336:
	add	r1, r5, r7
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	bl	GetCurrentMapWildPokemon
	lsl	r1, r5, #0x1
	add	r1, r1, sp
	strh	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xb
	bls	.L336	@cond_branch
	mov	r4, #0x0
.L341:
	add	r1, r4, r7
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	GetCurrentMapWildPokemon
	lsl	r1, r4, #0x1
	add	r1, r1, r8
	strh	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xb
	bls	.L341	@cond_branch
	cmp	r7, #0x6
	bhi	.LCB1906
	b	.L477	@long jump
.LCB1906:
	mov	r0, r9
	sub	r0, r0, #0x2
	cmp	r0, #0x34
	bls	.LCB1911
	b	.L477	@long jump
.LCB1911:
	lsl	r0, r0, #0x2
	ldr	r1, .L493
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L494:
	.align	2, 0
.L493:
	.word	.L478
	.align	2, 0
	.align	2, 0
.L478:
	.word	.L367
	.word	.L477
	.word	.L477
	.word	.L477
	.word	.L450
	.word	.L477
	.word	.L474
	.word	.L477
	.word	.L346
	.word	.L477
	.word	.L429
	.word	.L477
	.word	.L377
	.word	.L387
	.word	.L367
	.word	.L477
	.word	.L477
	.word	.L477
	.word	.L356
	.word	.L477
	.word	.L477
	.word	.L346
	.word	.L397
	.word	.L477
	.word	.L477
	.word	.L477
	.word	.L408
	.word	.L439
	.word	.L477
	.word	.L477
	.word	.L477
	.word	.L462
	.word	.L477
	.word	.L477
	.word	.L477
	.word	.L462
	.word	.L477
	.word	.L474
	.word	.L450
	.word	.L418
	.word	.L477
	.word	.L429
	.word	.L477
	.word	.L474
	.word	.L477
	.word	.L477
	.word	.L477
	.word	.L477
	.word	.L477
	.word	.L408
	.word	.L477
	.word	.L477
	.word	.L462
.L346:
	mov	r4, #0x0
	ldr	r7, .L495
.L350:
	lsl	r0, r4, #0x1
	mov	r1, sp
	add	r5, r1, r0
	ldrh	r1, [r5]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0x5
	bne	.LCB1950
	b	.L468	@long jump
.LCB1950:
	cmp	r0, #0x3
	bne	.LCB1952
	b	.L468	@long jump
.LCB1952:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xb
	bls	.L350	@cond_branch
	b	.L477
.L496:
	.align	2, 0
.L495:
	.word	gBaseStats
.L356:
	mov	r4, #0x0
	ldr	r7, .L497
.L360:
	lsl	r2, r4, #0x1
	mov	r1, sp
	add	r0, r1, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x12
	bne	.LCB1994
	b	.L456	@long jump
.LCB1994:
	ldrb	r3, [r1, #0x7]
	cmp	r3, #0x12
	bne	.LCB1999
	b	.L456	@long jump
.LCB1999:
	cmp	r0, #0xc
	bne	.LCB2001
	b	.L456	@long jump
.LCB2001:
	cmp	r3, #0xc
	bne	.LCB2003
	b	.L456	@long jump
.LCB2003:
	ldrb	r0, [r1, #0x1f]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x19
	cmp	r0, #0x9
	bne	.LCB2010
	b	.L456	@long jump
.LCB2010:
	ldrb	r0, [r1, #0x16]
	cmp	r0, #0xf
	bne	.LCB2015
	b	.L456	@long jump
.LCB2015:
	cmp	r3, #0
	bne	.LCB2017
	b	.L456	@long jump
.LCB2017:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xb
	bls	.L360	@cond_branch
	b	.L477
.L498:
	.align	2, 0
.L497:
	.word	gBaseStats
.L367:
	mov	r4, #0x0
	ldr	r7, .L499
.L371:
	lsl	r2, r4, #0x1
	mov	r1, sp
	add	r0, r1, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r1, [r0, #0x6]
	cmp	r1, #0x4
	bne	.LCB2061
	b	.L456	@long jump
.LCB2061:
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0x4
	bne	.LCB2066
	b	.L456	@long jump
.LCB2066:
	cmp	r1, #0x5
	bne	.LCB2068
	b	.L456	@long jump
.LCB2068:
	cmp	r0, #0x5
	bne	.LCB2070
	b	.L456	@long jump
.LCB2070:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xb
	bls	.L371	@cond_branch
	b	.L477
.L500:
	.align	2, 0
.L499:
	.word	gBaseStats
.L377:
	mov	r4, #0x0
	ldr	r7, .L501
.L381:
	lsl	r2, r4, #0x1
	mov	r1, sp
	add	r0, r1, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r1, [r0, #0x6]
	cmp	r1, #0x7
	bne	.LCB2114
	b	.L456	@long jump
.LCB2114:
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0x7
	bne	.LCB2119
	b	.L456	@long jump
.LCB2119:
	cmp	r1, #0xe
	bne	.LCB2121
	b	.L456	@long jump
.LCB2121:
	cmp	r0, #0xe
	bne	.LCB2123
	b	.L456	@long jump
.LCB2123:
	cmp	r1, #0x11
	bne	.LCB2125
	b	.L456	@long jump
.LCB2125:
	cmp	r0, #0x11
	bne	.LCB2127
	b	.L456	@long jump
.LCB2127:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xb
	bls	.L381	@cond_branch
	b	.L477
.L502:
	.align	2, 0
.L501:
	.word	gBaseStats
.L387:
	mov	r4, #0x0
	ldr	r7, .L503
.L391:
	lsl	r2, r4, #0x1
	mov	r1, sp
	add	r0, r1, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0xc
	bne	.LCB2171
	b	.L456	@long jump
.LCB2171:
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0xc
	bne	.LCB2176
	b	.L456	@long jump
.LCB2176:
	ldrb	r3, [r1, #0x16]
	cmp	r3, #0x7
	bne	.LCB2181
	b	.L456	@long jump
.LCB2181:
	ldrb	r0, [r1, #0x17]
	cmp	r0, #0x7
	bne	.LCB2186
	b	.L456	@long jump
.LCB2186:
	cmp	r3, #0x6
	bne	.LCB2188
	b	.L456	@long jump
.LCB2188:
	cmp	r0, #0x6
	bne	.LCB2190
	b	.L456	@long jump
.LCB2190:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xb
	bls	.L391	@cond_branch
	b	.L477
.L504:
	.align	2, 0
.L503:
	.word	gBaseStats
.L397:
	mov	r4, #0x0
	ldr	r7, .L505
.L401:
	lsl	r2, r4, #0x1
	mov	r1, sp
	add	r0, r1, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0xd
	bne	.LCB2234
	b	.L456	@long jump
.LCB2234:
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0xd
	bne	.LCB2239
	b	.L456	@long jump
.LCB2239:
	ldrh	r0, [r1, #0x18]
	cmp	r0, #0x2b
	bne	.LCB2244
	b	.L456	@long jump
.LCB2244:
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0x2b
	bne	.LCB2249
	b	.L456	@long jump
.LCB2249:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xb
	bls	.L401	@cond_branch
	b	.L477
.L506:
	.align	2, 0
.L505:
	.word	gBaseStats
.L408:
	mov	r4, #0x0
	ldr	r7, .L507
.L412:
	lsl	r0, r4, #0x1
	mov	r1, sp
	add	r5, r1, r0
	ldrh	r2, [r5]
	lsl	r0, r2, #0x3
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x6
	beq	.L414	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0x6
	bne	.L411	@cond_branch
.L414:
	add	r0, r2, #0
	b	.L492
.L508:
	.align	2, 0
.L507:
	.word	gBaseStats
.L411:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xb
	bls	.L412	@cond_branch
	b	.L477
.L418:
	mov	r4, #0x0
	ldr	r7, .L509
.L422:
	lsl	r0, r4, #0x1
	mov	r1, sp
	add	r5, r1, r0
	ldrh	r2, [r5]
	lsl	r0, r2, #0x3
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x10
	beq	.L424	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0x10
	bne	.L421	@cond_branch
.L424:
	add	r0, r2, #0
	b	.L492
.L510:
	.align	2, 0
.L509:
	.word	gBaseStats
.L421:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xb
	bls	.L422	@cond_branch
	b	.L477
.L429:
	mov	r4, #0x0
	ldr	r7, .L511
.L433:
	lsl	r2, r4, #0x1
	mov	r1, sp
	add	r0, r1, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x1
	beq	.L456	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0x1
	beq	.L456	@cond_branch
	ldrb	r0, [r1, #0x16]
	cmp	r0, #0x8
	bne	.L432	@cond_branch
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L456	@cond_branch
.L432:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xb
	bls	.L433	@cond_branch
	b	.L477
.L512:
	.align	2, 0
.L511:
	.word	gBaseStats
.L439:
	mov	r4, #0x0
	ldr	r7, .L513
.L443:
	lsl	r0, r4, #0x1
	mov	r1, sp
	add	r5, r1, r0
	ldrh	r2, [r5]
	lsl	r0, r2, #0x3
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0xe
	beq	.L445	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0xe
	bne	.L442	@cond_branch
.L445:
	add	r0, r2, #0
	b	.L492
.L514:
	.align	2, 0
.L513:
	.word	gBaseStats
.L442:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xb
	bls	.L443	@cond_branch
	b	.L477
.L450:
	mov	r4, #0x0
	ldr	r7, .L515
.L454:
	lsl	r2, r4, #0x1
	mov	r1, sp
	add	r0, r1, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x2
	beq	.L456	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0x2
	beq	.L456	@cond_branch
	ldrb	r0, [r1, #0x16]
	cmp	r0, #0x4
	bne	.L453	@cond_branch
.L456:
	mov	r0, sp
	add	r4, r0, r2
	ldrh	r0, [r4]
	bl	IsPokemonValid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L490	@cond_branch
	b	.L477
.L516:
	.align	2, 0
.L515:
	.word	gBaseStats
.L453:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xb
	bls	.L454	@cond_branch
	b	.L477
.L462:
	mov	r4, #0x0
	ldr	r7, .L517
.L466:
	lsl	r0, r4, #0x1
	mov	r1, sp
	add	r5, r1, r0
	ldrh	r1, [r5]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0x4
	beq	.L468	@cond_branch
	cmp	r0, #0
	bne	.L465	@cond_branch
.L468:
	add	r0, r1, #0
.L492:
	bl	IsPokemonValid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L491	@cond_branch
	b	.L477
.L518:
	.align	2, 0
.L517:
	.word	gBaseStats
.L465:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xb
	bls	.L466	@cond_branch
	b	.L477
.L474:
	mov	r1, r8
	ldrh	r0, [r1]
	bl	IsPokemonValid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L477	@cond_branch
	mov	r1, r8
	ldrh	r0, [r1]
	b	.L479
.L490:
	ldrh	r0, [r4]
	b	.L479
.L491:
	ldrh	r0, [r5]
	b	.L479
.L477:
	add	r0, r6, #0
.L479:
	add	sp, sp, #0x30
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 GetMapRandomPokemon,.Lfe21-GetMapRandomPokemon
	.align	2, 0
	.globl	GetCurrentMapWildPokemon
	.type	 GetCurrentMapWildPokemon,function
	.thumb_func
GetCurrentMapWildPokemon:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	add	r4, r6, #0
	bl	GetCurrentMapWildMonHeaderId
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L529
	cmp	r2, r0
	beq	.L525	@cond_branch
	ldr	r0, .L529+0x4
	lsl	r2, r2, #0x5
	add	r1, r0, #0x4
	add	r1, r2, r1
	ldr	r5, [r1]
	add	r0, r0, #0xc
	add	r2, r2, r0
	ldr	r2, [r2]
	cmp	r7, #0
	bne	.L521	@cond_branch
	cmp	r5, #0
	beq	.L525	@cond_branch
	add	r0, r6, #0
	mov	r1, #0xb
	bl	__umodsi3
	lsl	r0, r0, #0x18
	ldr	r1, [r5, #0x4]
	lsr	r0, r0, #0x16
	b	.L528
.L530:
	.align	2, 0
.L529:
	.word	0xffff
	.word	gWildMonHeaders
.L521:
	cmp	r2, #0
	beq	.L525	@cond_branch
	mov	r0, #0x3
	and	r4, r4, r0
	ldr	r1, [r2, #0x4]
	lsl	r0, r4, #0x2
.L528:
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	b	.L527
.L525:
	mov	r0, #0x0
.L527:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 GetCurrentMapWildPokemon,.Lfe22-GetCurrentMapWildPokemon
.text
	.align	2, 0

