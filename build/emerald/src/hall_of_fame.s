@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sHofFadePalettes,object
	.size	 sHofFadePalettes,4
sHofFadePalettes:
	.word	0x0
	.align	2, 0
	.type	 sHofMonPtr,object
	.size	 sHofMonPtr,4
sHofMonPtr:
	.word	0x0
	.align	2, 0
	.type	 sHofGfxPtr,object
	.size	 sHofGfxPtr,4
sHofGfxPtr:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sHof_BgTemplates,object
	.size	 sHof_BgTemplates,12
sHof_BgTemplates:
	.byte	0xf8
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xe1
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xd3
	.byte	0x31
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sHof_WindowTemplate,object
	.size	 sHof_WindowTemplate,8
sHof_WindowTemplate:
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0xe
	.byte	0x6
	.byte	0xe
	.short	0x1
	.type	 sMonInfoTextColors,object
	.size	 sMonInfoTextColors,4
sMonInfoTextColors:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.space	1
	.type	 sPlayerInfoTextColors,object
	.size	 sPlayerInfoTextColors,4
sPlayerInfoTextColors:
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.space	1
	.type	 sUnused_085E538C,object
sUnused_085E538C:
	.byte	0x4
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.size	 sUnused_085E538C,4
	.align	2, 0
	.type	 sSpriteSheet_Confetti,object
sSpriteSheet_Confetti:
	.word	gConfetti_Gfx
	.short	0x220
	.short	0x3e9
	.space	8
	.size	 sSpriteSheet_Confetti,16
	.align	2, 0
	.type	 sSpritePalette_Confetti,object
sSpritePalette_Confetti:
	.word	gConfetti_Pal
	.short	0x3e9
	.space	2
	.space	8
	.size	 sSpritePalette_Confetti,16
	.align	1, 0
	.type	 sHallOfFame_MonFullTeamPositions,object
	.size	 sHallOfFame_MonFullTeamPositions,48
sHallOfFame_MonFullTeamPositions:
	.short	0x78
	.short	0xd2
	.short	0x78
	.short	0x28
	.short	0x146
	.short	0xdc
	.short	0x38
	.short	0x28
	.short	-0x56
	.short	0xdc
	.short	0xb8
	.short	0x28
	.short	0x78
	.short	-0x3e
	.short	0x78
	.short	0x58
	.short	-0x46
	.short	-0x5c
	.short	0xc8
	.short	0x58
	.short	0x136
	.short	-0x5c
	.short	0x28
	.short	0x58
	.align	1, 0
	.type	 sHallOfFame_MonHalfTeamPositions,object
	.size	 sHallOfFame_MonHalfTeamPositions,24
sHallOfFame_MonHalfTeamPositions:
	.short	0x78
	.short	0xea
	.short	0x78
	.short	0x40
	.short	0x146
	.short	0xf4
	.short	0x38
	.short	0x40
	.short	-0x56
	.short	0xf4
	.short	0xb8
	.short	0x40
	.align	2, 0
	.type	 sOamData_Confetti,object
	.size	 sOamData_Confetti,8
sOamData_Confetti:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sAnim_PinkConfettiA,object
sAnim_PinkConfettiA:
	.short	0x0
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_PinkConfettiA,8
	.align	2, 0
	.type	 sAnim_RedConfettiA,object
sAnim_RedConfettiA:
	.short	0x1
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_RedConfettiA,8
	.align	2, 0
	.type	 sAnim_BlueConfettiA,object
sAnim_BlueConfettiA:
	.short	0x2
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_BlueConfettiA,8
	.align	2, 0
	.type	 sAnim_RedConfettiB,object
sAnim_RedConfettiB:
	.short	0x3
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_RedConfettiB,8
	.align	2, 0
	.type	 sAnim_BlueConfettiB,object
sAnim_BlueConfettiB:
	.short	0x4
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_BlueConfettiB,8
	.align	2, 0
	.type	 sAnim_YellowConfettiA,object
sAnim_YellowConfettiA:
	.short	0x5
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_YellowConfettiA,8
	.align	2, 0
	.type	 sAnim_WhiteConfettiA,object
sAnim_WhiteConfettiA:
	.short	0x6
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_WhiteConfettiA,8
	.align	2, 0
	.type	 sAnim_GreenConfettiA,object
sAnim_GreenConfettiA:
	.short	0x7
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_GreenConfettiA,8
	.align	2, 0
	.type	 sAnim_PinkConfettiB,object
sAnim_PinkConfettiB:
	.short	0x8
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_PinkConfettiB,8
	.align	2, 0
	.type	 sAnim_BlueConfettiC,object
sAnim_BlueConfettiC:
	.short	0x9
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_BlueConfettiC,8
	.align	2, 0
	.type	 sAnim_YellowConfettiB,object
sAnim_YellowConfettiB:
	.short	0xa
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_YellowConfettiB,8
	.align	2, 0
	.type	 sAnim_WhiteConfettiB,object
sAnim_WhiteConfettiB:
	.short	0xb
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_WhiteConfettiB,8
	.align	2, 0
	.type	 sAnim_GreenConfettiB,object
sAnim_GreenConfettiB:
	.short	0xc
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_GreenConfettiB,8
	.align	2, 0
	.type	 sAnim_PinkConfettiC,object
sAnim_PinkConfettiC:
	.short	0xd
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_PinkConfettiC,8
	.align	2, 0
	.type	 sAnim_RedConfettiC,object
sAnim_RedConfettiC:
	.short	0xe
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_RedConfettiC,8
	.align	2, 0
	.type	 sAnim_YellowConfettiC,object
sAnim_YellowConfettiC:
	.short	0xf
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_YellowConfettiC,8
	.align	2, 0
	.type	 sAnim_WhiteConfettiC,object
sAnim_WhiteConfettiC:
	.short	0x10
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_WhiteConfettiC,8
	.align	2, 0
	.type	 sAnims_Confetti,object
sAnims_Confetti:
	.word	sAnim_PinkConfettiA
	.word	sAnim_RedConfettiA
	.word	sAnim_BlueConfettiA
	.word	sAnim_RedConfettiB
	.word	sAnim_BlueConfettiB
	.word	sAnim_YellowConfettiA
	.word	sAnim_WhiteConfettiA
	.word	sAnim_GreenConfettiA
	.word	sAnim_PinkConfettiB
	.word	sAnim_BlueConfettiC
	.word	sAnim_YellowConfettiB
	.word	sAnim_WhiteConfettiB
	.word	sAnim_GreenConfettiB
	.word	sAnim_PinkConfettiC
	.word	sAnim_RedConfettiC
	.word	sAnim_YellowConfettiC
	.word	sAnim_WhiteConfettiC
	.size	 sAnims_Confetti,68
	.align	2, 0
	.type	 sSpriteTemplate_HofConfetti,object
	.size	 sSpriteTemplate_HofConfetti,24
sSpriteTemplate_HofConfetti:
	.short	0x3e9
	.short	0x3e9
	.word	sOamData_Confetti
	.word	sAnims_Confetti
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HofConfetti
	.align	1, 0
	.type	 sHallOfFame_Pal,object
sHallOfFame_Pal:
	.short	0x0
	.short	0x0
	.short	0x63b0
	.short	0x109f
	.short	0x5b6e
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x2108
	.short	0x7fff
	.size	 sHallOfFame_Pal,32
	.align	2, 0
	.type	 sHallOfFame_Gfx,object
sHallOfFame_Gfx:
	.word	0x3a010
	.word	-0xfffffcd
	.word	0x11019001
	.word	-0x6ffe0fef
	.word	0x22220001
	.word	0x44442222
	.word	-0xf1fbbbc
	.word	0x70073007
	.word	0x11113329
	.word	0x13033331
	.word	0x33333311
	.word	-0xffcffcf
	.word	0x1108049
	.word	0x1111ffff
	.word	0x4913eeee
	.word	-0x1ef8ff0f
	.word	0x110b00ee
	.word	0x1d90ef
	.word	0x1efff11e
	.word	0x1eeee11e
	.word	0x1500ef4a
	.word	0xb00efee
	.word	-0xee06f01
	.word	-0xe01ff
	.word	-0x111e111f
	.word	-0xedeee00
	.word	0x1e0300ee
	.word	0x10e1ef11
	.word	0x3b40d029
	.word	0x1e7c00
	.word	-0xcccee88
	.word	0x331100ef
	.word	0x3331feef
	.word	0x10e8f3ef
	.word	0x105f9003
	.word	0x7c003394
	.word	0x3ae1133e
	.word	0xc003eee
	.word	0x1800310
	.word	-0x1070ef0f
	.word	-0x15cff7f
	.word	-0x1e0111e2
	.word	0x33a300ef
	.word	0x6800eeef
	.word	0x1efe0130
	.word	0x3009300
	.word	-0xee100f6
	.word	-0x5eefe2
	.word	0x17ef0300
	.word	-0x7f011102
	.word	0x11313f
	.word	-0x28ff9f00
	.word	0xef332f
	.word	-0x70ff00f6
	.word	0x7b209f60
	.word	-0x10bbfc00
	.word	0x3efe2201
	.word	0x33070013
	.word	-0x3f01af0f
	.word	0x110ef80
	.word	-0x10e110f
	.word	-0xe100100
	.word	-0xe011101
	.word	0x921ebf1
	.word	0x111120a0
	.word	-0xed9fe12
	.word	0x1107d00
	.word	-0x7e6eff15
	.word	-0x1d2ffa3
	.word	0x10ffb100
	.word	-0x1c6ef55
	.word	-0x67ef4bf0
	.word	0x3108f11
	.word	-0x76df60ef
	.word	-0x5f100960
	.word	0x1fe8d00
	.word	-0x1eee0ead
	.word	-0xe501ee2
	.word	0x641011b3
	.word	0x19110ef
	.word	0x406fa07c
	.word	-0x5bff344d
	.word	-0x1100fd00
	.word	0x611e2d01
	.word	0x6314612f
	.word	0x11470133
	.word	-0x1c11cc79
	.word	0x23318810
	.word	0x210170f7
	.word	0x950087
	.word	0xa00ff03
	.word	0x1123fe0
	.word	-0x33ff0ebf
	.word	-0x1e111
	.word	-0x70cbfd12
	.word	-0xe11e130
	.word	0x10b7201e
	.word	0x23cf0ee
	.word	-0x7cfe10e9
	.word	0x1a011002
	.word	0x20cc0133
	.word	0x70a7017b
	.word	0xf35701
	.word	0x7c00ef80
	.word	-0xe45dd12
	.word	-0x2312fee3
	.word	0x1009621
	.word	-0x1e9fff02
	.word	-0xe06ffe1
	.word	0xb42a5fe
	.word	0x113ff1ee
	.word	-0x158fd01
	.word	0xe04101
	.word	-0x2fc0dd44
	.word	0x1
	.size	 sHallOfFame_Gfx,460
	.align	2, 0
	.type	 sDummyFameMon,object
	.size	 sDummyFameMon,24
sDummyFameMon:
	.word	0x3ea03ea
	.word	0x0
	.short	0x0
	.byte	0x0
	.byte	0x0
	.space	9
	.space	3
	.type	 sHallOfFame_SlotOrder,object
sHallOfFame_SlotOrder:
	.byte	0x2
	.byte	0x1
	.byte	0x3
	.byte	0x6
	.byte	0x4
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.size	 sHallOfFame_SlotOrder,8
.text
	.align	2, 0
	.type	 VBlankCB_HallOfFame,function
	.thumb_func
VBlankCB_HallOfFame:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 VBlankCB_HallOfFame,.Lfe1-VBlankCB_HallOfFame
	.align	2, 0
	.type	 CB2_HallOfFame,function
	.thumb_func
CB2_HallOfFame:
	push	{lr}
	bl	RunTasks
	bl	RunTextPrinters
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 CB2_HallOfFame,.Lfe2-CB2_HallOfFame
	.align	2, 0
	.type	 InitHallOfFameScreen,function
	.thumb_func
InitHallOfFameScreen:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L17
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bls	.LCB40
	b	.L5	@long jump
.LCB40:
	lsl	r0, r0, #0x2
	ldr	r1, .L17+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L18:
	.align	2, 0
.L17:
	.word	gMain
	.word	.L13
	.align	2, 0
	.align	2, 0
.L13:
	.word	.L6
	.word	.L7
	.word	.L8
	.word	.L9
	.word	.L11
.L6:
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	ClearVramOamPltt_LoadHofPal
	ldr	r4, .L19
	ldr	r0, .L19+0x4
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r0, .L19+0x8
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L5
.L20:
	.align	2, 0
.L19:
	.word	sHofGfxPtr
	.word	0x2014
	.word	gMain
.L7:
	bl	LoadHofGfx
	b	.L16
.L8:
	ldr	r1, .L21
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0xe2
	lsl	r1, r1, #0x3
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	bl	InitHofBgs
	ldr	r0, .L21+0x4
	ldr	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L16
.L22:
	.align	2, 0
.L21:
	.word	0x3f42
	.word	sHofGfxPtr
.L9:
	bl	sub_8175024
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L5	@cond_branch
	ldr	r0, .L23
	bl	SetVBlankCallback
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L16:
	ldr	r1, .L23+0x4
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L5
.L24:
	.align	2, 0
.L23:
	.word	VBlankCB_HallOfFame
	.word	gMain
.L11:
	bl	UpdatePaletteFade
	ldr	r0, .L25
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L5	@cond_branch
	ldr	r0, .L25+0x4
	bl	SetMainCallback2
	mov	r0, #0xda
	lsl	r0, r0, #0x1
	bl	PlayBGM
	mov	r0, #0x0
	b	.L15
.L26:
	.align	2, 0
.L25:
	.word	gPaletteFade
	.word	CB2_HallOfFame
.L5:
	mov	r0, #0x1
.L15:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 InitHallOfFameScreen,.Lfe3-InitHallOfFameScreen
	.align	2, 0
	.globl	CB2_DoHallOfFameScreen
	.type	 CB2_DoHallOfFameScreen,function
	.thumb_func
CB2_DoHallOfFameScreen:
	push	{r4, lr}
	bl	InitHallOfFameScreen
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L28	@cond_branch
	ldr	r0, .L29
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L29+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	ldr	r4, .L29+0x8
	mov	r0, #0x90
	bl	AllocZeroed
	str	r0, [r4]
.L28:
	pop	{r4}
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	Task_Hof_InitMonData
	.word	gTasks
	.word	sHofMonPtr
.Lfe4:
	.size	 CB2_DoHallOfFameScreen,.Lfe4-CB2_DoHallOfFameScreen
	.align	2, 0
	.globl	CB2_DoHallOfFameScreenDontSaveData
	.type	 CB2_DoHallOfFameScreenDontSaveData,function
	.thumb_func
CB2_DoHallOfFameScreenDontSaveData:
	push	{r4, lr}
	bl	InitHallOfFameScreen
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L32	@cond_branch
	ldr	r0, .L33
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L33+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x1
	strh	r0, [r1, #0x8]
	ldr	r4, .L33+0x8
	mov	r0, #0x90
	bl	AllocZeroed
	str	r0, [r4]
.L32:
	pop	{r4}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	Task_Hof_InitMonData
	.word	gTasks
	.word	sHofMonPtr
.Lfe5:
	.size	 CB2_DoHallOfFameScreenDontSaveData,.Lfe5-CB2_DoHallOfFameScreenDontSaveData
	.align	2, 0
	.type	 Task_Hof_InitMonData,function
	.thumb_func
Task_Hof_InitMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L56
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0xc]
	mov	r6, #0x0
	ldr	r0, .L56+0x4
	mov	r8, r0
.L39:
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, .L56+0x8
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L40	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r2, r8
	ldr	r1, [r2]
	lsl	r4, r6, #0x1
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	add	r1, r1, r4
	strh	r0, [r1, #0x8]
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetMonData
	mov	r2, r8
	ldr	r1, [r2]
	add	r1, r1, r4
	str	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetMonData
	mov	r2, r8
	ldr	r1, [r2]
	add	r1, r1, #0x4
	add	r1, r1, r4
	str	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x38
	bl	GetMonData
	mov	r2, r8
	ldr	r1, [r2]
	add	r1, r1, r4
	strb	r0, [r1, #0xa]
	add	r0, r5, #0
	mov	r1, #0x2
	mov	r2, sp
	bl	GetMonData
	mov	r2, #0x0
	lsl	r5, r7, #0x2
	ldr	r3, .L56+0x4
	mov	ip, r4
.L44:
	ldr	r0, [r3]
	mov	r4, ip
	add	r1, r2, r4
	add	r0, r0, #0xb
	add	r0, r0, r1
	mov	r4, sp
	add	r1, r4, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x9
	bls	.L44	@cond_branch
	ldr	r0, .L56
	add	r1, r5, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	b	.L38
.L57:
	.align	2, 0
.L56:
	.word	gTasks
	.word	sHofMonPtr
	.word	gPlayerParty
.L40:
	mov	r1, r8
	ldr	r0, [r1]
	lsl	r1, r6, #0x1
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r2, r0, r1
	mov	r3, #0x0
	strh	r4, [r2, #0x8]
	str	r4, [r2]
	add	r0, r0, #0x4
	add	r0, r0, r1
	str	r4, [r0]
	strb	r3, [r2, #0xa]
	mov	r2, r8
	ldr	r0, [r2]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0, #0xb]
	lsl	r5, r7, #0x2
.L38:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x5
	bls	.L39	@cond_branch
	ldr	r0, .L58
	mov	r3, #0x0
	str	r3, [r0]
	ldr	r4, .L58+0x4
	add	r1, r5, r7
	lsl	r1, r1, #0x3
	add	r2, r1, r4
	strh	r3, [r2, #0xa]
	mov	r0, #0xff
	strh	r0, [r2, #0x10]
	mov	r6, #0x0
	add	r3, r4, #0
	add	r3, r3, #0x8
	mov	r2, #0xff
.L51:
	add	r0, r6, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x5
	bls	.L51	@cond_branch
	add	r0, r5, r7
	lsl	r0, r0, #0x3
	add	r1, r0, r4
	mov	r4, #0x8
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	beq	.L53	@cond_branch
	ldr	r0, .L58+0x8
	b	.L55
.L59:
	.align	2, 0
.L58:
	.word	sHofFadePalettes
	.word	gTasks
	.word	Task_Hof_SetMonDisplayTask
.L53:
	ldr	r0, .L60
.L55:
	str	r0, [r1]
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	Task_Hof_InitTeamSaveData
.Lfe6:
	.size	 Task_Hof_InitMonData,.Lfe6-Task_Hof_InitMonData
	.align	2, 0
	.type	 Task_Hof_InitTeamSaveData,function
	.thumb_func
Task_Hof_InitTeamSaveData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r7, .L79
	ldr	r0, .L79+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L63	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	add	r0, r7, #0
	mov	r1, #0x0
	bl	memset
	b	.L64
.L80:
	.align	2, 0
.L79:
	.word	gDecompressionBuffer
	.word	gHasHallOfFameRecords
.L63:
	mov	r0, #0x3
	bl	Save_LoadGameData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L64	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	add	r0, r7, #0
	mov	r1, #0x0
	bl	memset
.L64:
	mov	r5, #0x0
	ldrh	r0, [r7, #0x8]
	mov	r1, r9
	lsl	r1, r1, #0x2
	mov	r8, r1
	cmp	r0, #0
	beq	.L67	@cond_branch
.L68:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r7, r7, #0x90
	cmp	r5, #0x1d
	bhi	.L78	@cond_branch
	ldrh	r0, [r7, #0x8]
	cmp	r0, #0
	bne	.L68	@cond_branch
.L67:
	cmp	r5, #0x1d
	bls	.L72	@cond_branch
.L78:
	ldr	r4, .L81
	add	r6, r4, #0
	add	r4, r4, #0x90
	mov	r5, #0x0
	sub	r7, r7, #0x90
.L76:
	add	r0, r6, #0
	add	r1, r4, #0
	mov	r2, #0x90
	bl	memcpy
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r6, r6, #0x90
	add	r4, r4, #0x90
	cmp	r5, #0x1c
	bls	.L76	@cond_branch
.L72:
	ldr	r0, .L81+0x4
	ldr	r1, [r0]
	add	r0, r7, #0
	mov	r2, #0x90
	bl	memcpy
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldr	r2, .L81+0x8
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized2
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r1, .L81+0xc
	mov	r0, r8
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L81+0x10
	str	r1, [r0]
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gDecompressionBuffer
	.word	sHofMonPtr
	.word	gText_SavingDontTurnOffPower
	.word	gTasks
	.word	Task_Hof_TrySaveData
.Lfe7:
	.size	 Task_Hof_InitTeamSaveData,.Lfe7-Task_Hof_InitTeamSaveData
	.align	2, 0
	.type	 Task_Hof_TrySaveData,function
	.thumb_func
Task_Hof_TrySaveData:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L88
	ldr	r0, .L88+0x4
	str	r0, [r1]
	mov	r0, #0x3
	bl	TrySavingData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L84	@cond_branch
	ldr	r0, .L88+0x8
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L84	@cond_branch
	mov	r0, #0x1
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x3
	bl	UnsetBgTilemapBuffer
	bl	FreeAllWindowBuffers
	ldr	r5, .L88+0xc
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L85	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r5]
.L85:
	ldr	r5, .L88+0x10
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L86	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r5]
.L86:
	add	r0, r4, #0
	bl	DestroyTask
	b	.L87
.L89:
	.align	2, 0
.L88:
	.word	gGameContinueCallback
	.word	CB2_DoHallOfFameScreenDontSaveData
	.word	gDamagedSaveSectors
	.word	sHofGfxPtr
	.word	sHofMonPtr
.L84:
	mov	r0, #0x37
	bl	PlaySE
	ldr	r1, .L90
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L90+0x4
	str	r1, [r0]
	mov	r1, #0x20
	strh	r1, [r0, #0xe]
.L87:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gTasks
	.word	Task_Hof_WaitToDisplayMon
.Lfe8:
	.size	 Task_Hof_TrySaveData,.Lfe8-Task_Hof_TrySaveData
	.align	2, 0
	.type	 Task_Hof_WaitToDisplayMon,function
	.thumb_func
Task_Hof_WaitToDisplayMon:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L95
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r2, [r1, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L93	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0xe]
	b	.L94
.L96:
	.align	2, 0
.L95:
	.word	gTasks
.L93:
	ldr	r0, .L97
	str	r0, [r1]
.L94:
	pop	{r0}
	bx	r0
.L98:
	.align	2, 0
.L97:
	.word	Task_Hof_SetMonDisplayTask
.Lfe9:
	.size	 Task_Hof_WaitToDisplayMon,.Lfe9-Task_Hof_WaitToDisplayMon
	.align	2, 0
	.type	 Task_Hof_SetMonDisplayTask,function
	.thumb_func
Task_Hof_SetMonDisplayTask:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L100
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L100+0x4
	str	r0, [r1]
	bx	lr
.L101:
	.align	2, 0
.L100:
	.word	gTasks
	.word	Task_Hof_DisplayMon
.Lfe10:
	.size	 Task_Hof_SetMonDisplayTask,.Lfe10-Task_Hof_SetMonDisplayTask
	.align	2, 0
	.type	 Task_Hof_DisplayMon,function
	.thumb_func
Task_Hof_DisplayMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L107
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r7, [r1, #0xa]
	ldr	r2, .L107+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r2, [r2]
	add	r2, r2, r0
	mov	r8, r2
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x3
	ble	.L103	@cond_branch
	ldr	r1, .L107+0x8
	b	.L106
.L108:
	.align	2, 0
.L107:
	.word	gTasks
	.word	sHofMonPtr
	.word	sHallOfFame_MonFullTeamPositions
.L103:
	ldr	r1, .L109
.L106:
	lsl	r2, r7, #0x3
	add	r0, r2, r1
	ldrh	r3, [r0]
	add	r0, r1, #0x2
	add	r0, r2, r0
	ldrh	r4, [r0]
	add	r0, r1, #0x4
	add	r0, r2, r0
	ldrh	r0, [r0]
	mov	sl, r0
	add	r1, r1, #0x6
	add	r2, r2, r1
	ldrh	r6, [r2]
	mov	r5, r8
	ldrh	r1, [r5, #0x8]
	ldr	r0, .L109+0x4
	cmp	r1, r0
	bne	.L105	@cond_branch
	lsl	r0, r6, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0xc
	add	r0, r0, r1
	lsr	r6, r0, #0x10
.L105:
	mov	r2, r8
	ldrh	r0, [r2, #0x8]
	ldr	r1, [r2]
	ldr	r2, [r2, #0x4]
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	str	r3, [sp]
	lsl	r3, r4, #0x10
	asr	r3, r3, #0x10
	str	r3, [sp, #0x4]
	lsl	r3, r7, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x8]
	ldr	r3, .L109+0x8
	str	r3, [sp, #0xc]
	mov	r5, #0x0
	str	r5, [sp, #0x10]
	mov	r3, #0x1
	bl	CreatePicSprite2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L109+0xc
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r4
	mov	r3, sl
	strh	r3, [r2, #0x30]
	strh	r6, [r2, #0x32]
	strh	r5, [r2, #0x2e]
	mov	r5, r8
	ldrh	r3, [r5, #0x8]
	strh	r3, [r2, #0x3c]
	add	r4, r4, #0x1c
	add	r1, r1, r4
	ldr	r2, .L109+0x10
	str	r2, [r1]
	ldr	r5, .L109+0x14
	add	r1, r7, #0x5
	lsl	r1, r1, #0x1
	mov	r2, r9
	lsl	r4, r2, #0x2
	add	r4, r4, r9
	lsl	r4, r4, #0x3
	add	r1, r1, r4
	add	r2, r5, #0
	add	r2, r2, #0x8
	add	r1, r1, r2
	strh	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	add	r4, r4, r5
	ldr	r0, .L109+0x18
	str	r0, [r4]
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L110:
	.align	2, 0
.L109:
	.word	sHallOfFame_MonHalfTeamPositions
	.word	0x4b7
	.word	0xffff
	.word	gSprites
	.word	SpriteCB_GetOnScreenAndAnimate
	.word	gTasks
	.word	Task_Hof_PrintMonInfoAfterAnimating
.Lfe11:
	.size	 Task_Hof_DisplayMon,.Lfe11-Task_Hof_DisplayMon
	.align	2, 0
	.type	 Task_Hof_PrintMonInfoAfterAnimating,function
	.thumb_func
Task_Hof_PrintMonInfoAfterAnimating:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L113
	lsl	r3, r0, #0x2
	add	r3, r3, r0
	lsl	r3, r3, #0x3
	add	r5, r3, r4
	ldrh	r0, [r5, #0xa]
	ldr	r2, .L113+0x4
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r2, [r2]
	add	r2, r2, r1
	add	r0, r0, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	add	r4, r4, #0x8
	add	r0, r0, r4
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L113+0x8
	add	r3, r0, r1
	ldr	r1, [r3, #0x1c]
	ldr	r0, .L113+0xc
	cmp	r1, r0
	bne	.L112	@cond_branch
	ldrb	r1, [r3, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3, #0x1]
	add	r0, r2, #0
	mov	r1, #0x0
	mov	r2, #0xe
	bl	HallOfFame_PrintMonInfo
	mov	r0, #0x78
	strh	r0, [r5, #0xe]
	ldr	r0, .L113+0x10
	str	r0, [r5]
.L112:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	gTasks
	.word	sHofMonPtr
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	Task_Hof_TryDisplayAnotherMon
.Lfe12:
	.size	 Task_Hof_PrintMonInfoAfterAnimating,.Lfe12-Task_Hof_PrintMonInfoAfterAnimating
	.align	2, 0
	.type	 Task_Hof_TryDisplayAnotherMon,function
	.thumb_func
Task_Hof_TryDisplayAnotherMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L120
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r6, r0, #0x3
	add	r4, r6, r2
	ldrh	r3, [r4, #0xa]
	ldr	r1, .L120+0x4
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	ldr	r1, [r1]
	add	r1, r1, r0
	mov	r9, r1
	ldrh	r1, [r4, #0xe]
	mov	r7, #0xe
	ldrsh	r0, [r4, r7]
	mov	ip, r2
	cmp	r0, #0
	beq	.L116	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	b	.L117
.L121:
	.align	2, 0
.L120:
	.word	gTasks
	.word	sHofMonPtr
.L116:
	ldr	r2, .L122
	ldr	r0, .L122+0x4
	mov	r8, r0
	add	r0, r3, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	mov	r1, ip
	add	r1, r1, #0x8
	add	r6, r0, r1
	mov	r7, #0x0
	ldrsh	r1, [r6, r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	lsl	r1, r1, r0
	ldr	r3, [r2]
	orr	r3, r3, r1
	str	r3, [r2]
	ldrh	r1, [r4, #0xa]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x4
	bgt	.L118	@cond_branch
	mov	r7, r9
	ldrh	r0, [r7, #0x20]
	cmp	r0, #0
	beq	.L118	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0xa]
	ldr	r0, .L122+0x8
	str	r0, [sp]
	add	r0, r3, #0
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0xc
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	ldr	r0, .L122+0xc
	str	r0, [r4]
	b	.L117
.L123:
	.align	2, 0
.L122:
	.word	sHofFadePalettes
	.word	gSprites
	.word	0x63b0
	.word	Task_Hof_DisplayMon
.L118:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	ldr	r1, .L124
	str	r1, [r0]
.L117:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	Task_Hof_PaletteFadeAndPrintWelcomeText
.Lfe13:
	.size	 Task_Hof_TryDisplayAnotherMon,.Lfe13-Task_Hof_TryDisplayAnotherMon
	.align	2, 0
	.type	 Task_Hof_PaletteFadeAndPrintWelcomeText,function
	.thumb_func
Task_Hof_PaletteFadeAndPrintWelcomeText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L133
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r3, #0x0
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r5, r0, #0x3
	ldr	r0, .L133+0x4
	mov	ip, r0
	mov	r8, r1
	ldr	r6, .L133+0x8
	mov	r7, #0xd
	neg	r7, r7
.L130:
	add	r0, r3, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	mov	r2, ip
	add	r1, r0, r2
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0xff
	beq	.L129	@cond_branch
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r2, [r1, #0x5]
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
.L129:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x5
	bls	.L130	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xf
	bl	HallOfFame_PrintWelcomeText
	mov	r0, #0x69
	bl	PlaySE
	ldr	r1, .L133+0xc
	mov	r2, r8
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0xe]
	ldr	r1, .L133+0x10
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L134:
	.align	2, 0
.L133:
	.word	-0x10000
	.word	gTasks+0x8
	.word	gSprites
	.word	gTasks
	.word	Task_Hof_DoConfetti
.Lfe14:
	.size	 Task_Hof_PaletteFadeAndPrintWelcomeText,.Lfe14-Task_Hof_PaletteFadeAndPrintWelcomeText
	.align	2, 0
	.type	 Task_Hof_DoConfetti,function
	.thumb_func
Task_Hof_DoConfetti:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r7, .L145
	lsl	r4, r6, #0x2
	add	r0, r4, r6
	lsl	r5, r0, #0x3
	add	r1, r5, r7
	ldrh	r2, [r1, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L136	@cond_branch
	sub	r2, r2, #0x1
	strh	r2, [r1, #0xe]
	mov	r0, #0x3
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L138	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6e
	ble	.L138	@cond_branch
	bl	CreateHofConfettiSprite
	b	.L138
.L146:
	.align	2, 0
.L145:
	.word	gTasks
.L136:
	mov	r3, #0x0
	mov	r9, r4
	ldr	r0, .L147
	mov	sl, r0
	add	r4, r5, #0
	add	r7, r7, #0x8
	mov	r8, r7
	ldr	r7, .L147+0x4
	mov	r1, #0xd
	neg	r1, r1
	mov	ip, r1
	mov	r5, #0x4
.L142:
	add	r0, r3, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r2, r8
	add	r1, r0, r2
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0xff
	beq	.L141	@cond_branch
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0x5]
	mov	r0, ip
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
.L141:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x5
	bls	.L142	@cond_branch
	mov	r3, sl
	ldr	r0, [r3]
	ldr	r1, .L147+0x8
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0xc
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r1, .L147+0xc
	mov	r2, r9
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x7
	strh	r1, [r0, #0xe]
	ldr	r1, .L147+0x10
	str	r1, [r0]
.L138:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	sHofFadePalettes
	.word	gSprites
	.word	0x63b0
	.word	gTasks
	.word	Task_Hof_WaitToDisplayPlayer
.Lfe15:
	.size	 Task_Hof_DoConfetti,.Lfe15-Task_Hof_DoConfetti
	.align	2, 0
	.type	 Task_Hof_WaitToDisplayPlayer,function
	.thumb_func
Task_Hof_WaitToDisplayPlayer:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L152
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r2, [r1, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r1, r3]
	cmp	r0, #0xf
	ble	.L150	@cond_branch
	ldr	r0, .L152+0x4
	str	r0, [r1]
	b	.L151
.L153:
	.align	2, 0
.L152:
	.word	gTasks
	.word	Task_Hof_DisplayPlayer
.L150:
	add	r0, r2, #0x1
	strh	r0, [r1, #0xe]
	mov	r0, #0xe
	ldrsh	r1, [r1, r0]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
.L151:
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 Task_Hof_WaitToDisplayPlayer,.Lfe16-Task_Hof_WaitToDisplayPlayer
	.align	2, 0
	.type	 Task_Hof_DisplayPlayer,function
	.thumb_func
Task_Hof_DisplayPlayer:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	ldr	r6, .L155
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x8]
	mov	r1, #0x1
	bl	PlayerGenderToFrontTrainerPicId_Debug
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x6
	str	r1, [sp]
	ldr	r1, .L155+0x4
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	mov	r2, #0x78
	mov	r3, #0x48
	bl	CreateTrainerPicSprite
	ldr	r1, .L155+0x8
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	strh	r0, [r4, #0x10]
	ldr	r0, .L155+0xc
	bl	AddWindow
	ldr	r0, [r6]
	ldrb	r1, [r0, #0x14]
	lsr	r1, r1, #0x3
	ldr	r2, .L155+0x10
	mov	r0, #0x1
	mov	r3, #0xd0
	bl	LoadWindowGfx
	mov	r0, #0x1
	bl	GetTextWindowPalette
	mov	r1, #0xe0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x78
	strh	r0, [r4, #0xe]
	ldr	r0, .L155+0x14
	str	r0, [r4]
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L156:
	.align	2, 0
.L155:
	.word	gSaveBlock2Ptr
	.word	0xffff
	.word	gTasks
	.word	sHof_WindowTemplate
	.word	0x21d
	.word	Task_Hof_WaitAndPrintPlayerInfo
.Lfe17:
	.size	 Task_Hof_DisplayPlayer,.Lfe17-Task_Hof_DisplayPlayer
	.align	2, 0
	.type	 Task_Hof_WaitAndPrintPlayerInfo,function
	.thumb_func
Task_Hof_WaitAndPrintPlayerInfo:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L162
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0xe]
	mov	r1, #0xe
	ldrsh	r5, [r4, r1]
	cmp	r5, #0
	beq	.L158	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L159
.L163:
	.align	2, 0
.L162:
	.word	gTasks
.L158:
	ldr	r2, .L164
	mov	r3, #0x10
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	ldrh	r2, [r1, #0x20]
	mov	r3, #0x20
	ldrsh	r0, [r1, r3]
	cmp	r0, #0xc0
	beq	.L160	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x20]
	b	.L159
.L165:
	.align	2, 0
.L164:
	.word	gSprites
.L160:
	mov	r0, #0x20
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x1
	mov	r1, #0x2
	bl	HallOfFame_PrintPlayerInfo
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldr	r2, .L166
	str	r5, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized2
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r0, .L166+0x4
	str	r0, [r4]
.L159:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L167:
	.align	2, 0
.L166:
	.word	gText_LeagueChamp
	.word	Task_Hof_ExitOnKeyPressed
.Lfe18:
	.size	 Task_Hof_WaitAndPrintPlayerInfo,.Lfe18-Task_Hof_WaitAndPrintPlayerInfo
	.align	2, 0
	.type	 Task_Hof_ExitOnKeyPressed,function
	.thumb_func
Task_Hof_ExitOnKeyPressed:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L170
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L169	@cond_branch
	mov	r0, #0x4
	bl	FadeOutBGM
	ldr	r0, .L170+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L170+0x8
	str	r0, [r1]
.L169:
	pop	{r4}
	pop	{r0}
	bx	r0
.L171:
	.align	2, 0
.L170:
	.word	gMain
	.word	gTasks
	.word	Task_Hof_HandlePaletteOnExit
.Lfe19:
	.size	 Task_Hof_ExitOnKeyPressed,.Lfe19-Task_Hof_ExitOnKeyPressed
	.align	2, 0
	.type	 Task_Hof_HandlePaletteOnExit,function
	.thumb_func
Task_Hof_HandlePaletteOnExit:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L173
	ldr	r1, .L173+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	bl	CpuSet
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x8
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L173+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L173+0xc
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L174:
	.align	2, 0
.L173:
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	gTasks
	.word	Task_Hof_HandleExit
.Lfe20:
	.size	 Task_Hof_HandlePaletteOnExit,.Lfe20-Task_Hof_HandlePaletteOnExit
	.align	2, 0
	.type	 Task_Hof_HandleExit,function
	.thumb_func
Task_Hof_HandleExit:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L185
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L176	@cond_branch
	lsl	r0, r7, #0x2
	mov	r8, r0
	ldr	r1, .L185+0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r1, r1, #0x12
	add	r5, r0, r1
	ldr	r2, .L185+0x8
	mov	r9, r2
	mov	r6, #0x5
.L180:
	ldrb	r4, [r5]
	cmp	r4, #0xff
	beq	.L179	@cond_branch
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	add	r0, r4, #0
	bl	FreeAndDestroyMonPicSprite
.L179:
	add	r5, r5, #0x2
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L180	@cond_branch
	ldr	r0, .L185+0x4
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x10]
	bl	FreeAndDestroyTrainerPicSprite
	mov	r0, #0x0
	bl	HideBg
	mov	r0, #0x1
	bl	HideBg
	mov	r0, #0x3
	bl	HideBg
	bl	FreeAllWindowBuffers
	mov	r0, #0x1
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x3
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	add	r0, r7, #0
	bl	DestroyTask
	ldr	r4, .L185+0xc
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L183	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L183:
	ldr	r4, .L185+0x10
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L184	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L184:
	bl	SetCallback2AfterHallOfFameDisplay
.L176:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L186:
	.align	2, 0
.L185:
	.word	gPaletteFade
	.word	gTasks
	.word	gSprites
	.word	sHofGfxPtr
	.word	sHofMonPtr
.Lfe21:
	.size	 Task_Hof_HandleExit,.Lfe21-Task_Hof_HandleExit
	.align	2, 0
	.type	 SetCallback2AfterHallOfFameDisplay,function
	.thumb_func
SetCallback2AfterHallOfFameDisplay:
	push	{lr}
	ldr	r0, .L188
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L189:
	.align	2, 0
.L188:
	.word	CB2_StartCreditsSequence
.Lfe22:
	.size	 SetCallback2AfterHallOfFameDisplay,.Lfe22-SetCallback2AfterHallOfFameDisplay
	.align	2, 0
	.globl	CB2_DoHallOfFamePC
	.type	 CB2_DoHallOfFamePC,function
	.thumb_func
CB2_DoHallOfFamePC:
	push	{r4, lr}
	ldr	r0, .L208
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bhi	.L193	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L208+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L209:
	.align	2, 0
.L208:
	.word	gMain
	.word	.L206
	.align	2, 0
	.align	2, 0
.L206:
	.word	.L193
	.word	.L194
	.word	.L195
	.word	.L196
	.word	.L198
	.word	.L200
.L193:
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	ClearVramOamPltt_LoadHofPal
	ldr	r4, .L210
	ldr	r0, .L210+0x4
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r0, .L210+0x8
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L191
.L211:
	.align	2, 0
.L210:
	.word	sHofGfxPtr
	.word	0x2014
	.word	gMain
.L194:
	bl	LoadHofGfx
	ldr	r1, .L212
	mov	r3, #0x87
	lsl	r3, r3, #0x3
	add	r1, r1, r3
	b	.L207
.L213:
	.align	2, 0
.L212:
	.word	gMain
.L195:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	bl	InitHofBgs
	ldr	r1, .L214
	mov	r4, #0x87
	lsl	r4, r4, #0x3
	add	r1, r1, r4
	b	.L207
.L215:
	.align	2, 0
.L214:
	.word	gMain
.L196:
	bl	sub_8175024
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L191	@cond_branch
	ldr	r1, .L216
	ldr	r0, .L216+0x4
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ComputerScreenOpenEffect
	ldr	r0, .L216+0x8
	bl	SetVBlankCallback
	ldr	r1, .L216+0xc
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	b	.L207
.L217:
	.align	2, 0
.L216:
	.word	gDecompressionBuffer
	.word	sDummyFameMon
	.word	VBlankCB_HallOfFame
	.word	gMain
.L198:
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	bl	IsComputerScreenOpenEffectActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L191	@cond_branch
	ldr	r1, .L218
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
.L207:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L191
.L219:
	.align	2, 0
.L218:
	.word	gMain
.L200:
	ldr	r1, .L220
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0xe2
	lsl	r1, r1, #0x3
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L220+0x4
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r4, .L220+0x8
	mov	r3, #0xff
.L204:
	add	r0, r2, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, r4
	strh	r3, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x5
	bls	.L204	@cond_branch
	ldr	r4, .L220+0xc
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r0, .L220+0x10
	bl	SetMainCallback2
.L191:
	pop	{r4}
	pop	{r0}
	bx	r0
.L221:
	.align	2, 0
.L220:
	.word	0x3f42
	.word	Task_HofPC_CopySaveData
	.word	gTasks+0x8
	.word	sHofMonPtr
	.word	CB2_HallOfFame
.Lfe23:
	.size	 CB2_DoHallOfFamePC,.Lfe23-CB2_DoHallOfFamePC
	.align	2, 0
	.type	 Task_HofPC_CopySaveData,function
	.thumb_func
Task_HofPC_CopySaveData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L235
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x1e
	mov	r2, #0x0
	mov	r3, #0xc
	bl	sub_81980F0
	mov	r0, #0x3
	bl	Save_LoadGameData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L223	@cond_branch
	ldr	r0, .L235+0x4
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L235+0x8
	b	.L233
.L236:
	.align	2, 0
.L235:
	.word	0x226
	.word	gTasks
	.word	Task_HofPC_PrintDataIsCorrupted
.L223:
	ldr	r0, .L237
	ldr	r4, .L237+0x4
	ldr	r1, [r4]
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	bl	CpuSet
	ldr	r4, [r4]
	mov	r2, #0x0
	ldrh	r0, [r4, #0x8]
	lsl	r5, r6, #0x2
	cmp	r0, #0
	beq	.L226	@cond_branch
.L227:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r4, r4, #0x90
	cmp	r2, #0x1d
	bhi	.L231	@cond_branch
	ldrh	r0, [r4, #0x8]
	cmp	r0, #0
	bne	.L227	@cond_branch
.L226:
	cmp	r2, #0x1d
	bhi	.L231	@cond_branch
	ldr	r0, .L237+0x8
	add	r1, r5, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	sub	r0, r2, #0x1
	b	.L234
.L238:
	.align	2, 0
.L237:
	.word	gDecompressionBuffer
	.word	sHofMonPtr
	.word	gTasks
.L231:
	ldr	r0, .L239
	add	r1, r5, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x1d
.L234:
	strh	r0, [r1, #0x8]
	mov	r0, #0xa
	bl	GetGameStat
	ldr	r2, .L239
	add	r1, r5, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r0, [r1, #0xa]
	ldr	r0, .L239+0x4
.L233:
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L240:
	.align	2, 0
.L239:
	.word	gTasks
	.word	Task_HofPC_DrawSpritesPrintText
.Lfe24:
	.size	 Task_HofPC_CopySaveData,.Lfe24-Task_HofPC_CopySaveData
	.align	2, 0
	.type	 Task_HofPC_DrawSpritesPrintText,function
	.thumb_func
Task_HofPC_DrawSpritesPrintText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L265
	ldr	r3, [r0]
	mov	r6, #0x0
	ldr	r1, .L265+0x4
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, #0x8
	ldrsh	r0, [r0, r4]
	add	r4, r1, #0
	ldr	r2, .L265+0x8
	cmp	r6, r0
	bge	.L243	@cond_branch
	add	r1, r0, #0
.L245:
	add	r3, r3, #0x90
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, r1
	blt	.L245	@cond_branch
.L243:
	add	r5, r3, #0
	mov	r0, #0x0
	str	r0, [r2]
	mov	r6, r9
	lsl	r2, r6, #0x2
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	strh	r0, [r1, #0xc]
	strh	r0, [r1, #0x10]
	mov	r6, #0x0
	str	r2, [sp, #0x14]
.L250:
	ldrh	r0, [r5, #0x8]
	cmp	r0, #0
	beq	.L249	@cond_branch
	ldrh	r0, [r1, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x10]
.L249:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r5, r5, #0x18
	cmp	r6, #0x5
	bls	.L250	@cond_branch
	add	r5, r3, #0
	mov	r6, #0x0
	ldr	r1, .L265+0x4
	ldr	r0, [sp, #0x14]
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	mov	r8, r0
	add	r0, r0, r1
	str	r0, [sp, #0x10]
	add	r1, r1, #0x8
	mov	sl, r1
.L256:
	ldrh	r0, [r5, #0x8]
	add	r7, r0, #0
	cmp	r7, #0
	beq	.L257	@cond_branch
	ldr	r1, [sp, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x3
	ble	.L258	@cond_branch
	lsl	r1, r6, #0x3
	ldr	r0, .L265+0xc
	add	r0, r0, #0x4
	add	r0, r1, r0
	ldrh	r3, [r0]
	ldr	r4, .L265+0x10
	add	r1, r1, r4
	ldrh	r4, [r1]
	b	.L259
.L266:
	.align	2, 0
.L265:
	.word	sHofMonPtr
	.word	gTasks
	.word	sHofFadePalettes
	.word	sHallOfFame_MonFullTeamPositions
	.word	sHallOfFame_MonFullTeamPositions+0x6
.L258:
	ldr	r0, .L267
	lsl	r2, r6, #0x3
	add	r1, r0, #0x4
	add	r1, r2, r1
	ldrh	r3, [r1]
	add	r0, r0, #0x6
	add	r2, r2, r0
	ldrh	r4, [r2]
.L259:
	ldr	r0, .L267+0x4
	cmp	r7, r0
	bne	.L260	@cond_branch
	lsl	r0, r4, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0xc
	add	r0, r0, r1
	lsr	r4, r0, #0x10
.L260:
	ldrh	r0, [r5, #0x8]
	ldr	r1, [r5]
	ldr	r2, [r5, #0x4]
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	str	r3, [sp]
	lsl	r3, r4, #0x10
	asr	r3, r3, #0x10
	str	r3, [sp, #0x4]
	lsl	r3, r6, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x8]
	ldr	r3, .L267+0x8
	str	r3, [sp, #0xc]
	mov	r3, #0x1
	bl	CreateMonPicSprite_HandleDeoxys
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L267+0xc
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r3, [r1, #0x5]
	mov	r4, #0xd
	neg	r4, r4
	add	r2, r4, #0
	and	r3, r3, r2
	mov	r2, #0x4
	orr	r3, r3, r2
	strb	r3, [r1, #0x5]
	add	r1, r6, #0x5
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	add	r1, r1, sl
	strh	r0, [r1]
	b	.L255
.L268:
	.align	2, 0
.L267:
	.word	sHallOfFame_MonHalfTeamPositions
	.word	0x4b7
	.word	0xffff
	.word	gSprites
.L257:
	add	r0, r6, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	add	r0, r0, sl
	mov	r1, #0xff
	strh	r1, [r0]
.L255:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r5, r5, #0x18
	cmp	r6, #0x5
	bls	.L256	@cond_branch
	ldr	r0, .L269
	ldr	r2, .L269+0x4
	mov	r1, #0xc
	bl	BlendPalettes
	ldr	r0, .L269+0x8
	ldr	r1, .L269+0xc
	ldr	r4, [sp, #0x14]
	add	r4, r4, r9
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r6, #0xa
	ldrsh	r1, [r4, r6]
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r5, .L269+0x10
	ldr	r1, .L269+0x14
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bgt	.L263	@cond_branch
	ldr	r1, .L269+0x18
	mov	r0, #0x1
	str	r0, [sp]
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_8198204
	b	.L264
.L270:
	.align	2, 0
.L269:
	.word	-0x10000
	.word	0x63b0
	.word	gStringVar1
	.word	gTasks
	.word	gStringVar4
	.word	gText_HOFNumber
	.word	gText_PickCancel
.L263:
	ldr	r1, .L271
	mov	r0, #0x1
	str	r0, [sp]
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_8198204
.L264:
	ldr	r0, .L271+0x4
	ldr	r1, [sp, #0x14]
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L271+0x8
	str	r0, [r1]
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L272:
	.align	2, 0
.L271:
	.word	gText_PickNextCancel
	.word	gTasks
	.word	Task_HofPC_PrintMonInfo
.Lfe25:
	.size	 Task_HofPC_DrawSpritesPrintText,.Lfe25-Task_HofPC_DrawSpritesPrintText
	.align	2, 0
	.type	 Task_HofPC_PrintMonInfo,function
	.thumb_func
Task_HofPC_PrintMonInfo:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L286
	ldr	r6, [r0]
	mov	r3, #0x0
	ldr	r1, .L286+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	cmp	r3, r0
	bge	.L275	@cond_branch
	add	r1, r0, #0
.L277:
	add	r6, r6, #0x90
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r1
	blt	.L277	@cond_branch
.L275:
	mov	r3, #0x0
	lsl	r7, r4, #0x2
	add	r0, r7, r4
	lsl	r5, r0, #0x3
	ldr	r0, .L286+0x8
	mov	sl, r0
	ldr	r1, .L286+0xc
	mov	r8, r1
	mov	r2, #0xd
	neg	r2, r2
	mov	r9, r2
	mov	r0, #0x4
	mov	ip, r0
.L282:
	add	r0, r3, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	add	r0, r0, sl
	ldrh	r1, [r0]
	cmp	r1, #0xff
	beq	.L281	@cond_branch
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r2, [r0, #0x5]
	mov	r1, r9
	and	r1, r1, r2
	mov	r2, ip
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
.L281:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x5
	bls	.L282	@cond_branch
	add	r1, r7, r4
	lsl	r1, r1, #0x3
	ldr	r0, .L286+0x4
	add	r5, r1, r0
	mov	r2, #0xc
	ldrsh	r0, [r5, r2]
	add	r0, r0, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L286+0x4
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L286+0xc
	add	r0, r0, r1
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0, #0x5]
	lsr	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r0, r0, r1
	ldr	r1, .L286+0x10
	eor	r0, r0, r1
	ldr	r2, .L286+0x14
	str	r0, [r2]
	ldr	r2, .L286+0x18
	mov	r1, #0xc
	bl	BlendPalettesUnfaded
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r4, r6, r0
	ldrh	r1, [r4, #0x8]
	ldr	r0, .L286+0x1c
	cmp	r1, r0
	beq	.L285	@cond_branch
	bl	StopCryAndClearCrySongs
	ldrh	r0, [r4, #0x8]
	mov	r1, #0x0
	bl	PlayCry1
.L285:
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0xe
	bl	HallOfFame_PrintMonInfo
	ldr	r0, .L286+0x20
	str	r0, [r5]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L287:
	.align	2, 0
.L286:
	.word	sHofMonPtr
	.word	gTasks
	.word	gTasks+0x8
	.word	gSprites
	.word	-0x10000
	.word	sHofFadePalettes
	.word	0x63b0
	.word	0x4b7
	.word	Task_HofPC_HandleInput
.Lfe26:
	.size	 Task_HofPC_PrintMonInfo,.Lfe26-Task_HofPC_PrintMonInfo
	.align	2, 0
	.type	 Task_HofPC_HandleInput,function
	.thumb_func
Task_HofPC_HandleInput:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L307
	ldrh	r2, [r1, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r2
	add	r3, r1, #0
	cmp	r0, #0
	beq	.L289	@cond_branch
	ldr	r0, .L307+0x4
	mov	ip, r0
	lsl	r0, r6, #0x2
	add	r1, r0, r6
	lsl	r3, r1, #0x3
	mov	r1, ip
	add	r4, r3, r1
	ldrh	r2, [r4, #0x8]
	mov	r5, #0x8
	ldrsh	r1, [r4, r5]
	mov	r9, r0
	cmp	r1, #0
	beq	.L290	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r4, #0x8]
	mov	r5, #0x0
	add	r7, r3, #0
	mov	r0, #0x8
	add	r0, r0, ip
	mov	r8, r0
.L294:
	add	r0, r5, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	mov	r1, r8
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L293	@cond_branch
	bl	FreeAndDestroyMonPicSprite
	mov	r0, #0xff
	strh	r0, [r4]
.L293:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x5
	bls	.L294	@cond_branch
	ldr	r0, .L307+0x4
	mov	r2, r9
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L297	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0xa]
.L297:
	ldr	r0, .L307+0x8
	str	r0, [r1]
	b	.L300
.L308:
	.align	2, 0
.L307:
	.word	gMain
	.word	gTasks
	.word	Task_HofPC_DrawSpritesPrintText
.L290:
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L299	@cond_branch
	bl	StopCryAndClearCrySongs
	ldr	r0, .L309
	ldr	r1, .L309+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L299:
	ldr	r0, .L309+0x8
	str	r0, [r4]
	b	.L300
.L310:
	.align	2, 0
.L309:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	Task_HofPC_HandlePaletteOnExit
.L289:
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L301	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L302	@cond_branch
	bl	StopCryAndClearCrySongs
	ldr	r0, .L311
	ldr	r1, .L311+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L302:
	ldr	r0, .L311+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L311+0xc
	str	r0, [r1]
	b	.L300
.L312:
	.align	2, 0
.L311:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gTasks
	.word	Task_HofPC_HandlePaletteOnExit
.L301:
	mov	r0, #0x40
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L304	@cond_branch
	ldr	r0, .L313
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0xc]
	mov	r4, #0xc
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	beq	.L304	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0xc]
	ldr	r0, .L313+0x4
	str	r0, [r1]
	b	.L300
.L314:
	.align	2, 0
.L313:
	.word	gTasks
	.word	Task_HofPC_PrintMonInfo
.L304:
	ldrh	r1, [r3, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L300	@cond_branch
	ldr	r1, .L315
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r5, #0xc
	ldrsh	r1, [r2, r5]
	mov	r3, #0x10
	ldrsh	r0, [r2, r3]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bge	.L300	@cond_branch
	ldrh	r0, [r2, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xc]
	ldr	r0, .L315+0x4
	str	r0, [r2]
.L300:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L316:
	.align	2, 0
.L315:
	.word	gTasks
	.word	Task_HofPC_PrintMonInfo
.Lfe27:
	.size	 Task_HofPC_HandleInput,.Lfe27-Task_HofPC_HandleInput
	.align	2, 0
	.type	 Task_HofPC_HandlePaletteOnExit,function
	.thumb_func
Task_HofPC_HandlePaletteOnExit:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L318
	ldr	r1, .L318+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	bl	CpuSet
	ldr	r1, .L318+0x8
	ldr	r0, .L318+0xc
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ComputerScreenCloseEffect
	ldr	r1, .L318+0x10
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L318+0x14
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L319:
	.align	2, 0
.L318:
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	gDecompressionBuffer
	.word	sDummyFameMon
	.word	gTasks
	.word	Task_HofPC_HandleExit
.Lfe28:
	.size	 Task_HofPC_HandlePaletteOnExit,.Lfe28-Task_HofPC_HandlePaletteOnExit
	.align	2, 0
	.type	 Task_HofPC_HandleExit,function
	.thumb_func
Task_HofPC_HandleExit:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	IsComputerScreenCloseEffectActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L321	@cond_branch
	mov	r5, #0x0
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r7, r0, #0x3
	ldr	r0, .L330
	mov	r8, r0
.L325:
	add	r0, r5, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	mov	r1, r8
	add	r4, r0, r1
	ldrh	r0, [r4]
	cmp	r0, #0xff
	beq	.L324	@cond_branch
	bl	FreeAndDestroyMonPicSprite
	mov	r0, #0xff
	strh	r0, [r4]
.L324:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L325	@cond_branch
	mov	r0, #0x0
	bl	HideBg
	mov	r0, #0x1
	bl	HideBg
	mov	r0, #0x3
	bl	HideBg
	bl	sub_8198314
	bl	FreeAllWindowBuffers
	mov	r0, #0x1
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x3
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r4, .L330+0x4
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L328	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L328:
	ldr	r4, .L330+0x8
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L329	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L329:
	bl	ReturnFromHallOfFamePC
.L321:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L331:
	.align	2, 0
.L330:
	.word	gTasks+0x8
	.word	sHofGfxPtr
	.word	sHofMonPtr
.Lfe29:
	.size	 Task_HofPC_HandleExit,.Lfe29-Task_HofPC_HandleExit
	.align	2, 0
	.type	 Task_HofPC_PrintDataIsCorrupted,function
	.thumb_func
Task_HofPC_PrintDataIsCorrupted:
	push	{r4, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L333
	mov	r1, #0x8
	mov	r2, #0x1
	bl	sub_8198180
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldr	r2, .L333+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized2
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r1, .L333+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L333+0xc
	str	r1, [r0]
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L334:
	.align	2, 0
.L333:
	.word	gText_AButtonExit
	.word	gText_HOFCorrupted
	.word	gTasks
	.word	Task_HofPC_ExitOnButtonPress
.Lfe30:
	.size	 Task_HofPC_PrintDataIsCorrupted,.Lfe30-Task_HofPC_PrintDataIsCorrupted
	.align	2, 0
	.type	 Task_HofPC_ExitOnButtonPress,function
	.thumb_func
Task_HofPC_ExitOnButtonPress:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L337
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L336	@cond_branch
	ldr	r0, .L337+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L337+0x8
	str	r0, [r1]
.L336:
	pop	{r0}
	bx	r0
.L338:
	.align	2, 0
.L337:
	.word	gMain
	.word	gTasks
	.word	Task_HofPC_HandlePaletteOnExit
.Lfe31:
	.size	 Task_HofPC_ExitOnButtonPress,.Lfe31-Task_HofPC_ExitOnButtonPress
	.align	2, 0
	.type	 HallOfFame_PrintWelcomeText,function
	.thumb_func
HallOfFame_PrintWelcomeText:
	push	{r4, lr}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	bl	PutWindowTilemap
	ldr	r4, .L340
	mov	r0, #0x1
	add	r1, r4, #0
	mov	r2, #0xd0
	bl	GetStringCenterAlignXOffset
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L340+0x4
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L341:
	.align	2, 0
.L340:
	.word	gText_WelcomeToHOF
	.word	sMonInfoTextColors
.Lfe32:
	.size	 HallOfFame_PrintWelcomeText,.Lfe32-HallOfFame_PrintWelcomeText
	.align	2, 0
	.type	 HallOfFame_PrintMonInfo,function
	.thumb_func
HallOfFame_PrintMonInfo:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x2c
	add	r7, r0, #0
	mov	r0, #0x0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	bl	PutWindowTilemap
	ldrh	r1, [r7, #0x8]
	ldr	r0, .L356
	cmp	r1, r0
	beq	.L343	@cond_branch
	ldr	r1, .L356+0x4
	add	r0, sp, #0xc
	bl	StringCopy
	add	r6, r0, #0
	ldrh	r0, [r7, #0x8]
	bl	SpeciesToPokedexNum
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L356+0x8
	cmp	r4, r0
	beq	.L344	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x64
	bl	__divsi3
	sub	r0, r0, #0x5f
	strb	r0, [r6]
	add	r6, r6, #0x1
	add	r0, r4, #0
	mov	r1, #0x64
	bl	__modsi3
	add	r4, r0, #0
	mov	r1, #0xa
	bl	__divsi3
	sub	r0, r0, #0x5f
	strb	r0, [r6]
	add	r6, r6, #0x1
	add	r0, r4, #0
	mov	r1, #0xa
	bl	__modsi3
	sub	r0, r0, #0x5f
	b	.L354
.L357:
	.align	2, 0
.L356:
	.word	0x4b7
	.word	gText_Number
	.word	0xffff
.L344:
	mov	r0, #0xac
	strb	r0, [r6]
	add	r6, r6, #0x1
	strb	r0, [r6]
	add	r6, r6, #0x1
.L354:
	strb	r0, [r6]
	add	r6, r6, #0x1
	mov	r0, #0xff
	strb	r0, [r6]
	ldr	r0, .L358
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0x10
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
.L343:
	add	r1, r7, #0
	add	r1, r1, #0xb
	add	r0, sp, #0xc
	mov	r2, #0xa
	bl	memcpy
	add	r1, sp, #0xc
	mov	r0, #0xff
	strb	r0, [r1, #0xa]
	ldrh	r1, [r7, #0x8]
	ldr	r0, .L358+0x4
	cmp	r1, r0
	bne	.L346	@cond_branch
	mov	r0, #0x1
	add	r1, sp, #0xc
	mov	r2, #0xd0
	bl	GetStringCenterAlignXOffset
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L358
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L347
.L359:
	.align	2, 0
.L358:
	.word	sMonInfoTextColors
	.word	0x4b7
.L346:
	mov	r0, #0x1
	add	r1, sp, #0xc
	mov	r2, #0x80
	bl	GetStringRightAlignXOffset
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L360
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	add	r1, sp, #0xc
	mov	r0, #0xba
	strb	r0, [r1]
	mov	r0, sp
	add	r0, r0, #0xd
	ldrh	r2, [r7, #0x8]
	mov	r1, #0xb
	mul	r1, r1, r2
	ldr	r2, .L360+0x4
	add	r1, r1, r2
	bl	StringCopy
	add	r6, r0, #0
	ldrh	r0, [r7, #0x8]
	cmp	r0, #0x20
	beq	.L348	@cond_branch
	cmp	r0, #0x1d
	beq	.L348	@cond_branch
	ldr	r1, [r7, #0x4]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L350	@cond_branch
	cmp	r0, #0xfe
	beq	.L351	@cond_branch
	b	.L348
.L361:
	.align	2, 0
.L360:
	.word	sMonInfoTextColors
	.word	gSpeciesNames
.L350:
	mov	r0, #0xb5
	b	.L355
.L351:
	mov	r0, #0xb6
.L355:
	strb	r0, [r6]
	add	r6, r6, #0x1
.L348:
	mov	r0, #0xff
	strb	r0, [r6]
	ldr	r5, .L362
	str	r5, [sp]
	mov	r4, #0x1
	neg	r4, r4
	str	r4, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0x80
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	ldr	r1, .L362+0x4
	add	r0, sp, #0xc
	bl	StringCopy
	add	r6, r0, #0
	ldrb	r1, [r7, #0xa]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	str	r5, [sp]
	str	r4, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0x24
	mov	r3, #0x11
	bl	AddTextPrinterParameterized3
	ldr	r1, .L362+0x8
	add	r0, sp, #0xc
	bl	StringCopy
	add	r6, r0, #0
	ldrh	r1, [r7]
	mov	r2, #0x2
	mov	r3, #0x5
	bl	ConvertIntToDecimalStringN
	str	r5, [sp]
	str	r4, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0x68
	mov	r3, #0x11
	bl	AddTextPrinterParameterized3
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L347:
	add	sp, sp, #0x2c
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L363:
	.align	2, 0
.L362:
	.word	sMonInfoTextColors
	.word	gText_Level
	.word	gText_IDNumber
.Lfe33:
	.size	 HallOfFame_PrintMonInfo,.Lfe33-HallOfFame_PrintMonInfo
	.align	2, 0
	.type	 HallOfFame_PrintPlayerInfo,function
	.thumb_func
HallOfFame_PrintPlayerInfo:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	mov	r0, #0x1
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	bl	PutWindowTilemap
	ldr	r2, .L367
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r3, #0xd
	bl	DrawStdFrameWithCustomTileAndPalette
	ldr	r0, .L367+0x4
	mov	r8, r0
	str	r0, [sp]
	mov	r1, #0x1
	neg	r1, r1
	mov	r9, r1
	str	r1, [sp, #0x4]
	ldr	r0, .L367+0x8
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	ldr	r0, .L367+0xc
	mov	sl, r0
	ldr	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0x70
	bl	GetStringRightAlignXOffset
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	mov	r1, r8
	str	r1, [sp]
	mov	r0, r9
	str	r0, [sp, #0x4]
	mov	r1, sl
	ldr	r0, [r1]
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	mov	r1, sl
	ldr	r0, [r1]
	ldrb	r4, [r0, #0xa]
	ldrb	r0, [r0, #0xb]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	mov	r0, r8
	str	r0, [sp]
	mov	r7, #0x0
	str	r7, [sp, #0x4]
	ldr	r0, .L367+0x10
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x11
	bl	AddTextPrinterParameterized3
	add	r6, sp, #0xc
	ldr	r1, .L367+0x14
	add	r0, r4, #0
	bl	__modsi3
	ldr	r5, .L367+0x18
	add	r1, r5, #0
	bl	__divsi3
	sub	r0, r0, #0x5f
	strb	r0, [r6]
	add	r6, sp, #0xc
	add	r0, r4, #0
	add	r1, r5, #0
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r5, #0xfa
	lsl	r5, r5, #0x2
	add	r1, r5, #0
	bl	__udivsi3
	add	r0, r0, #0xa1
	strb	r0, [r6, #0x1]
	add	r6, sp, #0xc
	add	r0, r4, #0
	add	r1, r5, #0
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__udivsi3
	add	r0, r0, #0xa1
	strb	r0, [r6, #0x2]
	add	r5, sp, #0xc
	add	r0, r4, #0
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__udivsi3
	add	r0, r0, #0xa1
	strb	r0, [r5, #0x3]
	add	r5, sp, #0xc
	add	r0, r4, #0
	mov	r1, #0xa
	bl	__umodsi3
	add	r0, r0, #0xa1
	strb	r0, [r5, #0x4]
	add	r1, sp, #0xc
	mov	r0, #0xff
	strb	r0, [r1, #0x5]
	mov	r0, #0x1
	mov	r2, #0x70
	bl	GetStringRightAlignXOffset
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	mov	r1, r8
	str	r1, [sp]
	mov	r0, r9
	str	r0, [sp, #0x4]
	add	r1, sp, #0xc
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r3, #0x11
	bl	AddTextPrinterParameterized3
	mov	r0, r8
	str	r0, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	ldr	r0, .L367+0x1c
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x21
	bl	AddTextPrinterParameterized3
	add	r5, sp, #0xc
	mov	r0, sl
	ldr	r4, [r0]
	ldrh	r0, [r4, #0xe]
	mov	r1, #0x64
	bl	__udivsi3
	add	r0, r0, #0xa1
	strb	r0, [r5]
	add	r5, sp, #0xc
	ldrh	r0, [r4, #0xe]
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__udivsi3
	add	r0, r0, #0xa1
	strb	r0, [r5, #0x1]
	add	r5, sp, #0xc
	ldrh	r0, [r4, #0xe]
	mov	r1, #0xa
	bl	__umodsi3
	add	r0, r0, #0xa1
	strb	r0, [r5, #0x2]
	add	r0, sp, #0xc
	ldrb	r0, [r0]
	cmp	r0, #0xa1
	bne	.L365	@cond_branch
	add	r0, sp, #0xc
	strb	r7, [r0]
.L365:
	add	r0, sp, #0xc
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L366	@cond_branch
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0xa1
	bne	.L366	@cond_branch
	add	r0, sp, #0xc
	strb	r1, [r0, #0x8]
.L366:
	add	r1, sp, #0xc
	mov	r0, #0xf0
	strb	r0, [r1, #0x3]
	add	r4, r1, #0
	ldr	r0, .L367+0xc
	ldr	r5, [r0]
	ldrb	r0, [r5, #0x10]
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0xa
	bl	__udivsi3
	add	r0, r0, #0xa1
	strb	r0, [r4, #0x4]
	add	r4, sp, #0xc
	ldrb	r0, [r5, #0x10]
	mov	r1, #0xa
	bl	__umodsi3
	add	r0, r0, #0xa1
	strb	r0, [r4, #0x5]
	add	r1, sp, #0xc
	mov	r0, #0xff
	strb	r0, [r1, #0x6]
	mov	r0, #0x1
	mov	r2, #0x70
	bl	GetStringRightAlignXOffset
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L367+0x4
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	add	r1, sp, #0xc
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r3, #0x21
	bl	AddTextPrinterParameterized3
	mov	r0, #0x1
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L368:
	.align	2, 0
.L367:
	.word	0x21d
	.word	sPlayerInfoTextColors
	.word	gText_Name
	.word	gSaveBlock2Ptr
	.word	gText_IDNumber
	.word	0x186a0
	.word	0x2710
	.word	gText_Time
.Lfe34:
	.size	 HallOfFame_PrintPlayerInfo,.Lfe34-HallOfFame_PrintPlayerInfo
	.align	2, 0
	.type	 ClearVramOamPltt_LoadHofPal,function
	.thumb_func
ClearVramOamPltt_LoadHofPal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r3, #0xc0
	lsl	r3, r3, #0x13
	mov	r4, #0xc0
	lsl	r4, r4, #0x9
	add	r0, sp, #0x4
	mov	r8, r0
	mov	r2, sp
	mov	r6, #0x0
	ldr	r1, .L375
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	ldr	r7, .L375+0x4
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	mov	ip, r0
.L372:
	strh	r6, [r2]
	mov	r0, sp
	str	r0, [r1]
	str	r3, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r3, r3, r5
	sub	r4, r4, r5
	cmp	r4, r5
	bhi	.L372	@cond_branch
	strh	r6, [r2]
	mov	r2, sp
	str	r2, [r1]
	str	r3, [r1, #0x4]
	lsr	r0, r4, #0x1
	mov	r2, ip
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, #0xe0
	lsl	r0, r0, #0x13
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r2, .L375
	mov	r1, r8
	str	r1, [r2]
	str	r0, [r2, #0x4]
	lsr	r0, r3, #0x2
	mov	r1, #0x85
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	mov	r0, sp
	strh	r4, [r0]
	str	r0, [r2]
	str	r1, [r2, #0x4]
	lsr	r3, r3, #0x1
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	str	r3, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	bl	ResetPaletteFade
	ldr	r0, .L375+0x8
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L376:
	.align	2, 0
.L375:
	.word	0x40000d4
	.word	-0x7efff800
	.word	sHallOfFame_Pal
.Lfe35:
	.size	 ClearVramOamPltt_LoadHofPal,.Lfe35-ClearVramOamPltt_LoadHofPal
	.align	2, 0
	.type	 LoadHofGfx,function
	.thumb_func
LoadHofGfx:
	push	{lr}
	bl	ScanlineEffect_Stop
	bl	ResetTasks
	bl	ResetSpriteData
	bl	ResetTempTileDataBuffers
	bl	ResetAllPicSprites
	bl	FreeAllSpritePalettes
	ldr	r1, .L378
	mov	r0, #0x8
	strb	r0, [r1]
	ldr	r0, .L378+0x4
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L378+0x8
	bl	LoadCompressedSpritePalette
	pop	{r0}
	bx	r0
.L379:
	.align	2, 0
.L378:
	.word	gReservedSpritePaletteCount
	.word	sSpriteSheet_Confetti
	.word	sSpritePalette_Confetti
.Lfe36:
	.size	 LoadHofGfx,.Lfe36-LoadHofGfx
	.align	2, 0
	.type	 InitHofBgs,function
	.thumb_func
InitHofBgs:
	push	{r4, lr}
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L381
	mov	r0, #0x0
	mov	r2, #0x3
	bl	InitBgsFromTemplates
	ldr	r4, .L381+0x4
	ldr	r1, [r4]
	add	r1, r1, #0x12
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L381+0x8
	add	r1, r1, r0
	mov	r0, #0x3
	bl	SetBgTilemapBuffer
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	pop	{r4}
	pop	{r0}
	bx	r0
.L382:
	.align	2, 0
.L381:
	.word	sHof_BgTemplates
	.word	sHofGfxPtr
	.word	0x1012
.Lfe37:
	.size	 InitHofBgs,.Lfe37-InitHofBgs
	.align	2, 0
	.type	 sub_8175024,function
	.thumb_func
sub_8175024:
	push	{r4, lr}
	add	sp, sp, #-0x8
	ldr	r0, .L395
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L384	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L395+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L396:
	.align	2, 0
.L395:
	.word	sHofGfxPtr
	.word	.L391
	.align	2, 0
	.align	2, 0
.L391:
	.word	.L385
	.word	.L386
	.word	.L388
	.word	.L389
	.word	.L390
.L385:
	ldr	r1, .L397
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	b	.L384
.L398:
	.align	2, 0
.L397:
	.word	sHallOfFame_Gfx
.L386:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L384	@cond_branch
	b	.L394
.L388:
	mov	r4, #0x20
	str	r4, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	mov	r0, #0xb
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x3
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	mov	r0, #0x6
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x3
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	b	.L384
.L389:
	bl	InitStandardTextBoxWindows
	bl	InitTextBoxGfxAndPrinters
	b	.L384
.L390:
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	ldr	r0, .L399
	ldr	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L393
.L400:
	.align	2, 0
.L399:
	.word	sHofGfxPtr
.L384:
	ldr	r0, .L401
	ldr	r1, [r0]
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L394:
	mov	r0, #0x1
.L393:
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r1}
	bx	r1
.L402:
	.align	2, 0
.L401:
	.word	sHofGfxPtr
.Lfe38:
	.size	 sub_8175024,.Lfe38-sub_8175024
	.align	2, 0
	.type	 SpriteCB_GetOnScreenAndAnimate,function
	.thumb_func
SpriteCB_GetOnScreenAndAnimate:
	push	{r4, lr}
	add	r2, r0, #0
	ldr	r1, [r2, #0x20]
	ldr	r0, [r2, #0x30]
	cmp	r1, r0
	beq	.L404	@cond_branch
	ldrh	r3, [r2, #0x20]
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	mov	r4, #0x30
	ldrsh	r1, [r2, r4]
	cmp	r0, r1
	bge	.L405	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xf
	strh	r0, [r2, #0x20]
.L405:
	ldrh	r3, [r2, #0x20]
	mov	r4, #0x20
	ldrsh	r0, [r2, r4]
	cmp	r0, r1
	ble	.L406	@cond_branch
	add	r0, r3, #0
	sub	r0, r0, #0xf
	strh	r0, [r2, #0x20]
.L406:
	ldrh	r3, [r2, #0x22]
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	mov	r4, #0x32
	ldrsh	r1, [r2, r4]
	cmp	r0, r1
	bge	.L407	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xa
	strh	r0, [r2, #0x22]
.L407:
	ldrh	r3, [r2, #0x22]
	mov	r4, #0x22
	ldrsh	r0, [r2, r4]
	cmp	r0, r1
	ble	.L409	@cond_branch
	add	r0, r3, #0
	sub	r0, r0, #0xa
	strh	r0, [r2, #0x22]
	b	.L409
.L404:
	ldrh	r0, [r2, #0x3c]
	lsl	r1, r0, #0x10
	ldr	r0, .L412
	cmp	r1, r0
	bne	.L410	@cond_branch
	lsr	r1, r1, #0x10
	add	r0, r2, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	DoMonFrontSpriteAnimation
	b	.L409
.L413:
	.align	2, 0
.L412:
	.word	0x4b70000
.L410:
	lsr	r1, r1, #0x10
	add	r0, r2, #0
	mov	r2, #0x0
	mov	r3, #0x3
	bl	DoMonFrontSpriteAnimation
.L409:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 SpriteCB_GetOnScreenAndAnimate,.Lfe39-SpriteCB_GetOnScreenAndAnimate
	.align	2, 0
	.type	 SpriteCB_HofConfetti,function
	.thumb_func
SpriteCB_HofConfetti:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x26]
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x78
	ble	.L415	@cond_branch
	add	r0, r5, #0
	bl	DestroySprite
	b	.L416
.L415:
	add	r0, r1, #0x1
	ldrh	r1, [r5, #0x30]
	add	r0, r0, r1
	strh	r0, [r5, #0x26]
	ldrh	r4, [r5, #0x2e]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	and	r0, r0, r1
	add	r0, r0, #0x8
	ldr	r1, .L418
	lsl	r4, r4, #0x1
	add	r4, r4, r1
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	mul	r0, r0, r1
	cmp	r0, #0
	bge	.L417	@cond_branch
	add	r0, r0, #0xff
.L417:
	asr	r0, r0, #0x8
	strh	r0, [r5, #0x24]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x4
	strh	r0, [r5, #0x2e]
.L416:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L419:
	.align	2, 0
.L418:
	.word	gSineTable
.Lfe40:
	.size	 SpriteCB_HofConfetti,.Lfe40-SpriteCB_HofConfetti
	.align	2, 0
	.type	 CreateHofConfettiSprite,function
	.thumb_func
CreateHofConfettiSprite:
	push	{r4, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf0
	bl	__umodsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	Random
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x7
	and	r2, r2, r0
	neg	r2, r2
	ldr	r0, .L424
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	add	r1, r4, #0
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L424+0x4
	add	r4, r1, r0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x11
	bl	__umodsi3
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	bl	Random
	mov	r1, #0x3
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L421	@cond_branch
	mov	r0, #0x0
	b	.L423
.L425:
	.align	2, 0
.L424:
	.word	sSpriteTemplate_HofConfetti
	.word	gSprites
.L421:
	mov	r0, #0x1
.L423:
	strh	r0, [r4, #0x30]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 CreateHofConfettiSprite,.Lfe41-CreateHofConfettiSprite
	.align	2, 0
	.globl	DoDomeConfetti
	.type	 DoDomeConfetti,function
	.thumb_func
DoDomeConfetti:
	push	{r4, lr}
	ldr	r4, .L428
	mov	r0, #0xb4
	strh	r0, [r4]
	ldr	r0, .L428+0x4
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L427	@cond_branch
	ldr	r1, .L428+0x8
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r4]
	strh	r1, [r0, #0xa]
	ldr	r0, .L428+0xc
	strh	r2, [r0]
.L427:
	pop	{r4}
	pop	{r0}
	bx	r0
.L429:
	.align	2, 0
.L428:
	.word	gSpecialVar_0x8004
	.word	Task_DoDomeConfetti
	.word	gTasks
	.word	gSpecialVar_0x8005
.Lfe42:
	.size	 DoDomeConfetti,.Lfe42-DoDomeConfetti
	.align	2, 0
	.type	 StopDomeConfetti,function
	.thumb_func
StopDomeConfetti:
	push	{r4, lr}
	ldr	r0, .L432
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L431	@cond_branch
	bl	DestroyTask
.L431:
	bl	ConfettiUtil_Free
	ldr	r4, .L432+0x4
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	pop	{r4}
	pop	{r0}
	bx	r0
.L433:
	.align	2, 0
.L432:
	.word	Task_DoDomeConfetti
	.word	0x3e9
.Lfe43:
	.size	 StopDomeConfetti,.Lfe43-StopDomeConfetti
	.align	2, 0
	.type	 UpdateDomeConfetti,function
	.thumb_func
UpdateDomeConfetti:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x6e
	ble	.L435	@cond_branch
	ldr	r2, .L438
	mov	r0, #0x28
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x26]
	ldrb	r0, [r5, #0x16]
	bl	ConfettiUtil_Remove
	b	.L436
.L439:
	.align	2, 0
.L438:
	.word	gTasks
.L435:
	add	r0, r1, #0x1
	ldrh	r1, [r5, #0x1c]
	add	r0, r0, r1
	strh	r0, [r5, #0xe]
	ldrb	r4, [r5, #0x1a]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	and	r0, r0, r1
	add	r0, r0, #0x8
	ldr	r1, .L440
	lsl	r4, r4, #0x1
	add	r4, r4, r1
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	mul	r0, r0, r1
	cmp	r0, #0
	bge	.L437	@cond_branch
	add	r0, r0, #0xff
.L437:
	asr	r0, r0, #0x8
	strh	r0, [r5, #0xc]
	ldrh	r0, [r5, #0x1a]
	add	r0, r0, #0x4
	strh	r0, [r5, #0x1a]
.L436:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L441:
	.align	2, 0
.L440:
	.word	gSineTable
.Lfe44:
	.size	 UpdateDomeConfetti,.Lfe44-UpdateDomeConfetti
	.align	2, 0
	.type	 Task_DoDomeConfetti,function
	.thumb_func
Task_DoDomeConfetti:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r8, r4
	mov	r7, #0x0
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L457
	add	r6, r0, r1
	ldrh	r0, [r6]
	cmp	r0, #0x1
	beq	.L446	@cond_branch
	cmp	r0, #0x1
	bgt	.L456	@cond_branch
	cmp	r0, #0
	beq	.L444	@cond_branch
	b	.L443
.L458:
	.align	2, 0
.L457:
	.word	gTasks+0x8
.L456:
	cmp	r0, #0xff
	bne	.LCB4703
	b	.L453	@long jump
.LCB4703:
	b	.L443
.L444:
	mov	r0, #0x40
	bl	ConfettiUtil_Init
	cmp	r0, #0
	bne	.L445	@cond_branch
	add	r0, r4, #0
	bl	DestroyTask
	ldr	r0, .L459
	strh	r7, [r0]
	ldr	r1, .L459+0x4
	ldr	r2, .L459+0x8
	add	r0, r2, #0
	strh	r0, [r1]
.L445:
	ldr	r0, .L459+0xc
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L459+0x10
	bl	LoadCompressedSpritePalette
	ldrh	r0, [r6]
	add	r0, r0, #0x1
	strh	r0, [r6]
	b	.L443
.L460:
	.align	2, 0
.L459:
	.word	gSpecialVar_0x8004
	.word	gSpecialVar_0x8005
	.word	0xffff
	.word	sSpriteSheet_Confetti
	.word	sSpritePalette_Confetti
.L446:
	ldrh	r0, [r6, #0x2]
	cmp	r0, #0
	beq	.L447	@cond_branch
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L447	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf0
	bl	__umodsi3
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	bl	Random
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x7
	and	r4, r4, r0
	neg	r4, r4
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x11
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L461
	ldr	r2, .L461+0x4
	str	r4, [sp]
	str	r0, [sp, #0x4]
	str	r7, [sp, #0x8]
	add	r0, r1, #0
	add	r1, r2, #0
	add	r3, r5, #0
	bl	ConfettiUtil_AddNew
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0xff
	beq	.L447	@cond_branch
	add	r4, r7, #0
	ldr	r1, .L461+0x8
	add	r0, r4, #0
	bl	ConfettiUtil_SetCallback
	bl	Random
	mov	r1, #0x3
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L449	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0x1
	bl	ConfettiUtil_SetData
.L449:
	add	r0, r4, #0
	mov	r1, #0x7
	mov	r2, r8
	bl	ConfettiUtil_SetData
	ldrh	r0, [r6, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x1e]
.L447:
	bl	ConfettiUtil_Update
	ldrh	r0, [r6, #0x2]
	cmp	r0, #0
	beq	.L450	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r6, #0x2]
	b	.L443
.L462:
	.align	2, 0
.L461:
	.word	sOamData_Confetti
	.word	0x3e9
	.word	UpdateDomeConfetti
.L450:
	ldrh	r0, [r6, #0x1e]
	cmp	r0, #0
	bne	.L443	@cond_branch
	mov	r0, #0xff
	strh	r0, [r6]
	b	.L443
.L453:
	bl	StopDomeConfetti
	ldr	r0, .L463
	strh	r7, [r0]
	ldr	r1, .L463+0x4
	ldr	r2, .L463+0x8
	add	r0, r2, #0
	strh	r0, [r1]
.L443:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L464:
	.align	2, 0
.L463:
	.word	gSpecialVar_0x8004
	.word	gSpecialVar_0x8005
	.word	0xffff
.Lfe45:
	.size	 Task_DoDomeConfetti,.Lfe45-Task_DoDomeConfetti
.text
	.align	2, 0

