@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sBraillePuzzleCallbackFlag,object
	.size	 sBraillePuzzleCallbackFlag,1
sBraillePuzzleCallbackFlag:
	.byte	0x0
	.section .rodata
	.type	 gRegicePathCoords,object
gRegicePathCoords:
	.byte	0x4
	.byte	0x15
	.byte	0x5
	.byte	0x15
	.byte	0x6
	.byte	0x15
	.byte	0x7
	.byte	0x15
	.byte	0x8
	.byte	0x15
	.byte	0x9
	.byte	0x15
	.byte	0xa
	.byte	0x15
	.byte	0xb
	.byte	0x15
	.byte	0xc
	.byte	0x15
	.byte	0xc
	.byte	0x16
	.byte	0xc
	.byte	0x17
	.byte	0xd
	.byte	0x17
	.byte	0xd
	.byte	0x18
	.byte	0xd
	.byte	0x19
	.byte	0xd
	.byte	0x1a
	.byte	0xd
	.byte	0x1b
	.byte	0xc
	.byte	0x1b
	.byte	0xc
	.byte	0x1c
	.byte	0x4
	.byte	0x1d
	.byte	0x5
	.byte	0x1d
	.byte	0x6
	.byte	0x1d
	.byte	0x7
	.byte	0x1d
	.byte	0x8
	.byte	0x1d
	.byte	0x9
	.byte	0x1d
	.byte	0xa
	.byte	0x1d
	.byte	0xb
	.byte	0x1d
	.byte	0xc
	.byte	0x1d
	.byte	0x4
	.byte	0x1c
	.byte	0x4
	.byte	0x1b
	.byte	0x3
	.byte	0x1b
	.byte	0x3
	.byte	0x1a
	.byte	0x3
	.byte	0x19
	.byte	0x3
	.byte	0x18
	.byte	0x3
	.byte	0x17
	.byte	0x4
	.byte	0x17
	.byte	0x4
	.byte	0x16
	.size	 gRegicePathCoords,72
.text
	.align	2, 0
	.globl	ShouldDoBrailleDigEffect
	.type	 ShouldDoBrailleDigEffect,function
	.thumb_func
ShouldDoBrailleDigEffect:
	push	{lr}
	ldr	r0, .L9
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3	@cond_branch
	ldr	r0, .L9+0x4
	ldr	r2, [r0]
	ldrh	r1, [r2, #0x4]
	ldr	r0, .L9+0x8
	cmp	r1, r0
	bne	.L3	@cond_branch
	ldr	r1, [r2]
	ldr	r0, .L9+0xc
	cmp	r1, r0
	beq	.L8	@cond_branch
	ldr	r0, .L9+0x10
	cmp	r1, r0
	beq	.L8	@cond_branch
	ldr	r0, .L9+0x14
	cmp	r1, r0
	bne	.L3	@cond_branch
.L8:
	mov	r0, #0x1
	b	.L7
.L10:
	.align	2, 0
.L9:
	.word	0x8af
	.word	gSaveBlock1Ptr
	.word	0x4718
	.word	0x3000a
	.word	0x30009
	.word	0x3000b
.L3:
	mov	r0, #0x0
.L7:
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 ShouldDoBrailleDigEffect,.Lfe1-ShouldDoBrailleDigEffect
	.align	2, 0
	.globl	DoBrailleDigEffect
	.type	 DoBrailleDigEffect,function
	.thumb_func
DoBrailleDigEffect:
	push	{lr}
	ldr	r2, .L12
	mov	r0, #0x10
	mov	r1, #0x8
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L12+0x4
	mov	r0, #0x11
	mov	r1, #0x8
	bl	MapGridSetMetatileIdAt
	mov	r2, #0x8b
	lsl	r2, r2, #0x2
	mov	r0, #0x12
	mov	r1, #0x8
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L12+0x8
	mov	r0, #0x10
	mov	r1, #0x9
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L12+0xc
	mov	r0, #0x11
	mov	r1, #0x9
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L12+0x10
	mov	r0, #0x12
	mov	r1, #0x9
	bl	MapGridSetMetatileIdAt
	bl	DrawWholeMapView
	mov	r0, #0x14
	bl	PlaySE
	ldr	r0, .L12+0x14
	bl	FlagSet
	bl	ScriptContext2_Disable
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	0x22a
	.word	0x22b
	.word	0xe32
	.word	0x233
	.word	0xe34
	.word	0x8af
.Lfe2:
	.size	 DoBrailleDigEffect,.Lfe2-DoBrailleDigEffect
	.align	2, 0
	.globl	CheckRelicanthWailord
	.type	 CheckRelicanthWailord,function
	.thumb_func
CheckRelicanthWailord:
	push	{r4, lr}
	ldr	r4, .L18
	add	r0, r4, #0
	mov	r1, #0x41
	mov	r2, #0x0
	bl	GetMonData
	ldr	r1, .L18+0x4
	cmp	r0, r1
	bne	.L15	@cond_branch
	bl	CalculatePlayerPartyCount
	ldr	r0, .L18+0x8
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	add	r1, r4, #0
	sub	r1, r1, #0x64
	add	r0, r0, r1
	mov	r1, #0x41
	mov	r2, #0x0
	bl	GetMonData
	ldr	r1, .L18+0xc
	cmp	r0, r1
	bne	.L15	@cond_branch
	mov	r0, #0x1
	b	.L17
.L19:
	.align	2, 0
.L18:
	.word	gPlayerParty
	.word	0x141
	.word	gPlayerPartyCount
	.word	0x171
.L15:
	mov	r0, #0x0
.L17:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 CheckRelicanthWailord,.Lfe3-CheckRelicanthWailord
	.align	2, 0
	.globl	ShouldDoBrailleRegirockEffectOld
	.type	 ShouldDoBrailleRegirockEffectOld,function
	.thumb_func
ShouldDoBrailleRegirockEffectOld:
	bx	lr
.Lfe4:
	.size	 ShouldDoBrailleRegirockEffectOld,.Lfe4-ShouldDoBrailleRegirockEffectOld
	.align	2, 0
	.globl	DoSealedChamberShakingEffect1
	.type	 DoSealedChamberShakingEffect1,function
	.thumb_func
DoSealedChamberShakingEffect1:
	push	{lr}
	ldr	r0, .L22
	mov	r1, #0x9
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L22+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0xa]
	strh	r0, [r1, #0xc]
	mov	r0, #0x2
	strh	r0, [r1, #0x10]
	mov	r0, #0x5
	strh	r0, [r1, #0x12]
	mov	r0, #0x32
	strh	r0, [r1, #0x14]
	mov	r0, #0x0
	bl	SetCameraPanningCallback
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	SealedChamberShakingEffect
	.word	gTasks
.Lfe5:
	.size	 DoSealedChamberShakingEffect1,.Lfe5-DoSealedChamberShakingEffect1
	.align	2, 0
	.globl	DoSealedChamberShakingEffect2
	.type	 DoSealedChamberShakingEffect2,function
	.thumb_func
DoSealedChamberShakingEffect2:
	push	{lr}
	ldr	r0, .L25
	mov	r1, #0x9
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L25+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0xa]
	strh	r0, [r1, #0xc]
	mov	r0, #0x3
	strh	r0, [r1, #0x10]
	mov	r0, #0x5
	strh	r0, [r1, #0x12]
	mov	r0, #0x2
	strh	r0, [r1, #0x14]
	mov	r0, #0x0
	bl	SetCameraPanningCallback
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	SealedChamberShakingEffect
	.word	gTasks
.Lfe6:
	.size	 DoSealedChamberShakingEffect2,.Lfe6-DoSealedChamberShakingEffect2
	.align	2, 0
	.globl	SealedChamberShakingEffect
	.type	 SealedChamberShakingEffect,function
	.thumb_func
SealedChamberShakingEffect:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L30
	add	r4, r0, r1
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r2, #0x12
	ldrsh	r1, [r4, r2]
	bl	__modsi3
	cmp	r0, #0
	bne	.L28	@cond_branch
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x10]
	neg	r0, r0
	strh	r0, [r4, #0x10]
	mov	r0, #0x10
	ldrsh	r1, [r4, r0]
	mov	r0, #0x0
	bl	SetCameraPanning
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L28	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
	bl	EnableBothScriptContexts
	bl	InstallCameraPanAheadCallback
.L28:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	gTasks
.Lfe7:
	.size	 SealedChamberShakingEffect,.Lfe7-SealedChamberShakingEffect
	.align	2, 0
	.globl	ShouldDoBrailleRegirockEffect
	.type	 ShouldDoBrailleRegirockEffect,function
	.thumb_func
ShouldDoBrailleRegirockEffect:
	push	{lr}
	mov	r0, #0x8b
	lsl	r0, r0, #0x4
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L33	@cond_branch
	ldr	r0, .L41
	ldr	r3, [r0]
	ldrh	r1, [r3, #0x4]
	mov	r0, #0xc3
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L33	@cond_branch
	ldr	r1, [r3]
	ldr	r0, .L41+0x4
	cmp	r1, r0
	beq	.L40	@cond_branch
	ldr	r0, .L41+0x8
	cmp	r1, r0
	beq	.L40	@cond_branch
	ldr	r0, .L41+0xc
	cmp	r1, r0
	bne	.L33	@cond_branch
.L40:
	ldr	r0, .L41+0x10
	strb	r2, [r0]
	mov	r0, #0x1
	b	.L39
.L42:
	.align	2, 0
.L41:
	.word	gSaveBlock1Ptr
	.word	0x170006
	.word	0x170005
	.word	0x170007
	.word	sBraillePuzzleCallbackFlag
.L33:
	mov	r0, #0x0
.L39:
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 ShouldDoBrailleRegirockEffect,.Lfe8-ShouldDoBrailleRegirockEffect
	.align	2, 0
	.globl	SetUpPuzzleEffectRegirock
	.type	 SetUpPuzzleEffectRegirock,function
	.thumb_func
SetUpPuzzleEffectRegirock:
	push	{lr}
	bl	GetCursorSelectionMonId
	ldr	r1, .L44
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1]
	mov	r0, #0x3c
	bl	FieldEffectStart
	pop	{r0}
	bx	r0
.L45:
	.align	2, 0
.L44:
	.word	gFieldEffectArguments
.Lfe9:
	.size	 SetUpPuzzleEffectRegirock,.Lfe9-SetUpPuzzleEffectRegirock
	.align	2, 0
	.globl	UseRegirockHm_Callback
	.type	 UseRegirockHm_Callback,function
	.thumb_func
UseRegirockHm_Callback:
	push	{lr}
	mov	r0, #0x3c
	bl	FieldEffectActiveListRemove
	bl	DoBrailleRegirockEffect
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 UseRegirockHm_Callback,.Lfe10-UseRegirockHm_Callback
	.align	2, 0
	.globl	DoBrailleRegirockEffect
	.type	 DoBrailleRegirockEffect,function
	.thumb_func
DoBrailleRegirockEffect:
	push	{lr}
	ldr	r2, .L48
	mov	r0, #0xe
	mov	r1, #0x1a
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L48+0x4
	mov	r0, #0xf
	mov	r1, #0x1a
	bl	MapGridSetMetatileIdAt
	mov	r2, #0x8b
	lsl	r2, r2, #0x2
	mov	r0, #0x10
	mov	r1, #0x1a
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L48+0x8
	mov	r0, #0xe
	mov	r1, #0x1b
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L48+0xc
	mov	r0, #0xf
	mov	r1, #0x1b
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L48+0x10
	mov	r0, #0x10
	mov	r1, #0x1b
	bl	MapGridSetMetatileIdAt
	bl	DrawWholeMapView
	mov	r0, #0x14
	bl	PlaySE
	mov	r0, #0x8b
	lsl	r0, r0, #0x4
	bl	FlagSet
	bl	ScriptContext2_Disable
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	0x22a
	.word	0x22b
	.word	0xe32
	.word	0x233
	.word	0xe34
.Lfe11:
	.size	 DoBrailleRegirockEffect,.Lfe11-DoBrailleRegirockEffect
	.align	2, 0
	.globl	ShouldDoBrailleRegisteelEffect
	.type	 ShouldDoBrailleRegisteelEffect,function
	.thumb_func
ShouldDoBrailleRegisteelEffect:
	push	{lr}
	ldr	r0, .L54
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L51	@cond_branch
	ldr	r0, .L54+0x4
	ldr	r2, [r0]
	ldrh	r1, [r2, #0x4]
	ldr	r0, .L54+0x8
	cmp	r1, r0
	bne	.L51	@cond_branch
	ldr	r1, [r2]
	ldr	r0, .L54+0xc
	cmp	r1, r0
	bne	.L51	@cond_branch
	ldr	r1, .L54+0x10
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x1
	b	.L53
.L55:
	.align	2, 0
.L54:
	.word	0x8b2
	.word	gSaveBlock1Ptr
	.word	0x4418
	.word	0x190008
	.word	sBraillePuzzleCallbackFlag
.L51:
	mov	r0, #0x0
.L53:
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 ShouldDoBrailleRegisteelEffect,.Lfe12-ShouldDoBrailleRegisteelEffect
	.align	2, 0
	.globl	SetUpPuzzleEffectRegisteel
	.type	 SetUpPuzzleEffectRegisteel,function
	.thumb_func
SetUpPuzzleEffectRegisteel:
	push	{lr}
	bl	GetCursorSelectionMonId
	ldr	r1, .L57
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1]
	mov	r0, #0x3c
	bl	FieldEffectStart
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	gFieldEffectArguments
.Lfe13:
	.size	 SetUpPuzzleEffectRegisteel,.Lfe13-SetUpPuzzleEffectRegisteel
	.align	2, 0
	.globl	UseRegisteelHm_Callback
	.type	 UseRegisteelHm_Callback,function
	.thumb_func
UseRegisteelHm_Callback:
	push	{lr}
	mov	r0, #0x3c
	bl	FieldEffectActiveListRemove
	bl	DoBrailleRegisteelEffect
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 UseRegisteelHm_Callback,.Lfe14-UseRegisteelHm_Callback
	.align	2, 0
	.globl	DoBrailleRegisteelEffect
	.type	 DoBrailleRegisteelEffect,function
	.thumb_func
DoBrailleRegisteelEffect:
	push	{lr}
	ldr	r2, .L61
	mov	r0, #0xe
	mov	r1, #0x1a
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L61+0x4
	mov	r0, #0xf
	mov	r1, #0x1a
	bl	MapGridSetMetatileIdAt
	mov	r2, #0x8b
	lsl	r2, r2, #0x2
	mov	r0, #0x10
	mov	r1, #0x1a
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L61+0x8
	mov	r0, #0xe
	mov	r1, #0x1b
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L61+0xc
	mov	r0, #0xf
	mov	r1, #0x1b
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L61+0x10
	mov	r0, #0x10
	mov	r1, #0x1b
	bl	MapGridSetMetatileIdAt
	bl	DrawWholeMapView
	mov	r0, #0x14
	bl	PlaySE
	ldr	r0, .L61+0x14
	bl	FlagSet
	bl	ScriptContext2_Disable
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	0x22a
	.word	0x22b
	.word	0xe32
	.word	0x233
	.word	0xe34
	.word	0x8b2
.Lfe15:
	.size	 DoBrailleRegisteelEffect,.Lfe15-DoBrailleRegisteelEffect
	.align	2, 0
	.globl	DoBrailleWait
	.type	 DoBrailleWait,function
	.thumb_func
DoBrailleWait:
	bx	lr
.Lfe16:
	.size	 DoBrailleWait,.Lfe16-DoBrailleWait
	.align	2, 0
	.globl	FldEff_UsePuzzleEffect
	.type	 FldEff_UsePuzzleEffect,function
	.thumb_func
FldEff_UsePuzzleEffect:
	push	{lr}
	bl	CreateFieldMoveTask
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L68
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L65	@cond_branch
	ldr	r1, .L68+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r2, .L68+0x8
	b	.L67
.L69:
	.align	2, 0
.L68:
	.word	sBraillePuzzleCallbackFlag
	.word	gTasks
	.word	UseRegisteelHm_Callback
.L65:
	ldr	r1, .L70
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r2, .L70+0x4
.L67:
	lsr	r1, r2, #0x10
	strh	r1, [r0, #0x18]
	strh	r2, [r0, #0x1a]
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L71:
	.align	2, 0
.L70:
	.word	gTasks
	.word	UseRegirockHm_Callback
.Lfe17:
	.size	 FldEff_UsePuzzleEffect,.Lfe17-FldEff_UsePuzzleEffect
	.align	2, 0
	.globl	ShouldDoBrailleRegicePuzzle
	.type	 ShouldDoBrailleRegicePuzzle,function
	.thumb_func
ShouldDoBrailleRegicePuzzle:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r4, .L93
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	ldr	r0, .L93+0x4
	cmp	r1, r0
	beq	.LCB717
	b	.L73	@long jump
.LCB717:
	ldr	r0, .L93+0x8
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB726
	b	.L73	@long jump
.LCB726:
	mov	r0, #0x2
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB733
	b	.L73	@long jump
.LCB733:
	mov	r0, #0x3
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L76	@cond_branch
	b	.L73
.L94:
	.align	2, 0
.L93:
	.word	gSaveBlock1Ptr
	.word	0x4318
	.word	0x8b1
.L92:
	mov	r0, #0x1
	b	.L91
.L76:
	mov	r5, #0x0
	mov	r8, r4
	ldr	r4, .L95
	add	r0, r4, #0x1
	mov	ip, r0
	ldr	r6, .L95+0x4
	ldr	r1, .L95+0x8
	mov	r9, r1
.L80:
	lsl	r0, r5, #0x1
	add	r1, r0, r4
	add	r0, r0, ip
	ldrb	r3, [r0]
	mov	r7, r8
	ldr	r2, [r7]
	mov	r7, #0x0
	ldrsh	r0, [r2, r7]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L79	@cond_branch
	mov	r1, #0x2
	ldrsh	r0, [r2, r1]
	cmp	r0, r3
	bne	.L79	@cond_branch
	cmp	r5, #0xf
	bhi	.L82	@cond_branch
	add	r0, r6, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	lsl	r1, r1, r5
	orr	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r6, #0
	bl	VarSet
	b	.L83
.L96:
	.align	2, 0
.L95:
	.word	gRegicePathCoords
	.word	0x403b
	.word	0x403c
.L82:
	cmp	r5, #0x1f
	bhi	.L84	@cond_branch
	mov	r0, r9
	bl	VarGet
	lsl	r0, r0, #0x10
	add	r2, r5, #0
	sub	r2, r2, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	lsl	r1, r1, r2
	orr	r1, r1, r0
	lsr	r1, r1, #0x10
	mov	r0, r9
	bl	VarSet
	b	.L83
.L84:
	ldr	r4, .L97
	add	r0, r4, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	add	r2, r5, #0
	sub	r2, r2, #0x20
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	lsl	r1, r1, r2
	orr	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	VarSet
.L83:
	ldr	r0, .L97+0x4
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L97+0x8
	cmp	r4, r0
	bne	.L73	@cond_branch
	ldr	r0, .L97+0xc
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r4
	bne	.L73	@cond_branch
	ldr	r0, .L97
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xf
	bne	.L73	@cond_branch
	ldr	r0, .L97+0x10
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldr	r0, .L97+0x14
	cmp	r1, r0
	beq	.L92	@cond_branch
	b	.L73
.L98:
	.align	2, 0
.L97:
	.word	0x403d
	.word	0x403b
	.word	0xffff
	.word	0x403c
	.word	gSaveBlock1Ptr
	.word	0x150008
.L79:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x23
	bls	.L80	@cond_branch
	mov	r0, #0x3
	bl	FlagSet
	mov	r0, #0x2
	bl	FlagClear
.L73:
	mov	r0, #0x0
.L91:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 ShouldDoBrailleRegicePuzzle,.Lfe18-ShouldDoBrailleRegicePuzzle
.text
	.align	2, 0

