@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	rfu_LMAN_REQBN_softReset_and_checkID
	.type	 rfu_LMAN_REQBN_softReset_and_checkID,function
	.thumb_func
rfu_LMAN_REQBN_softReset_and_checkID:
	push	{r4, lr}
	bl	rfu_REQBN_softReset_and_checkID
	add	r4, r0, #0
	ldr	r0, .L5
	cmp	r4, r0
	bne	.L3	@cond_branch
	ldr	r1, .L5+0x4
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
.L3:
	ldr	r0, .L5+0x4
	ldrb	r2, [r0, #0x4]
	add	r1, r0, #0
	cmp	r2, #0x17
	beq	.L4	@cond_branch
	cmp	r2, #0x1
	beq	.L4	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	strb	r0, [r1, #0x4]
.L4:
	mov	r0, #0x0
	strb	r0, [r1, #0x7]
	strb	r0, [r1, #0xd]
	strb	r0, [r1, #0x1]
	strb	r0, [r1]
	mov	r0, #0xff
	strb	r0, [r1, #0x6]
	bl	rfu_LMAN_managerChangeAgbClockMaster
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L6:
	.align	2, 0
.L5:
	.word	0x8001
	.word	lman
.Lfe1:
	.size	 rfu_LMAN_REQBN_softReset_and_checkID,.Lfe1-rfu_LMAN_REQBN_softReset_and_checkID
	.align	2, 0
	.globl	rfu_LMAN_REQ_sendData
	.type	 rfu_LMAN_REQ_sendData,function
	.thumb_func
rfu_LMAN_REQ_sendData:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L12
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L8	@cond_branch
	ldr	r0, .L12+0x4
	ldrb	r0, [r0, #0x2]
	mov	r2, #0x0
	cmp	r0, #0x1
	bne	.L11	@cond_branch
	mov	r2, #0x1
	b	.L11
.L13:
	.align	2, 0
.L12:
	.word	gRfuLinkStatus
	.word	lman
.L8:
	ldr	r0, .L14
	ldrb	r1, [r0, #0x3]
	mov	r1, #0x0
	strb	r1, [r0, #0x3]
.L11:
	add	r0, r2, #0
	bl	rfu_REQ_sendData
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	lman
.Lfe2:
	.size	 rfu_LMAN_REQ_sendData,.Lfe2-rfu_LMAN_REQ_sendData
	.align	2, 0
	.globl	rfu_LMAN_initializeManager
	.type	 rfu_LMAN_initializeManager,function
	.thumb_func
rfu_LMAN_initializeManager:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r6, r1, #0
	cmp	r5, #0
	beq	.L17	@cond_branch
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r4, .L19
	ldr	r2, .L19+0x4
	mov	r0, sp
	add	r1, r4, #0
	bl	CpuSet
	mov	r0, #0xff
	strb	r0, [r4, #0x6]
	str	r5, [r4, #0x40]
	str	r6, [r4, #0x44]
	ldr	r0, .L19+0x8
	bl	rfu_setMSCCallback
	ldr	r0, .L19+0xc
	bl	rfu_setREQCallback
	mov	r0, #0x0
	b	.L18
.L20:
	.align	2, 0
.L19:
	.word	lman
	.word	0x1000024
	.word	rfu_LMAN_MSC_callback
	.word	rfu_LMAN_REQ_callback
.L17:
	mov	r0, #0x4
.L18:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 rfu_LMAN_initializeManager,.Lfe3-rfu_LMAN_initializeManager
	.align	2, 0
	.type	 rfu_LMAN_endManager,function
	.thumb_func
rfu_LMAN_endManager:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r4, .L22
	ldr	r2, .L22+0x4
	mov	r0, sp
	add	r1, r4, #0
	bl	CpuSet
	mov	r0, #0xff
	strb	r0, [r4, #0x6]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	lman
	.word	0x1000020
.Lfe4:
	.size	 rfu_LMAN_endManager,.Lfe4-rfu_LMAN_endManager
	.align	2, 0
	.globl	rfu_LMAN_initializeRFU
	.type	 rfu_LMAN_initializeRFU,function
	.thumb_func
rfu_LMAN_initializeRFU:
	push	{r4, lr}
	add	r4, r0, #0
	bl	rfu_LMAN_clearVariables
	ldr	r1, .L26
	mov	r2, #0x1
	strb	r2, [r1, #0x4]
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	str	r4, [r1, #0x3c]
	ldrb	r0, [r4, #0x11]
	strb	r0, [r1, #0x9]
	ldrh	r0, [r4, #0x12]
	strh	r0, [r1, #0x32]
	ldrh	r0, [r4, #0x14]
	strh	r0, [r1, #0x18]
	ldrb	r0, [r4, #0x10]
	cmp	r0, #0
	beq	.L25	@cond_branch
	strb	r2, [r1, #0xb]
.L25:
	pop	{r4}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	lman
.Lfe5:
	.size	 rfu_LMAN_initializeRFU,.Lfe5-rfu_LMAN_initializeRFU
	.align	2, 0
	.type	 rfu_LMAN_clearVariables,function
	.thumb_func
rfu_LMAN_clearVariables:
	push	{r4, r5, lr}
	ldr	r2, .L34
	mov	r0, #0x0
	strb	r0, [r2, #0x5]
	strb	r0, [r2, #0x4]
	mov	r1, #0xff
	strb	r1, [r2, #0x6]
	strb	r0, [r2, #0x7]
	strb	r0, [r2, #0x10]
	strb	r0, [r2, #0xc]
	add	r1, r2, #0
	add	r1, r1, #0x24
	strb	r0, [r1]
	add	r1, r1, #0xc
	strb	r0, [r1]
	mov	r3, #0x0
	add	r5, r2, #0
	add	r5, r5, #0x28
	mov	r4, #0x0
	add	r2, r2, #0x34
.L32:
	lsl	r1, r3, #0x1
	add	r0, r1, r5
	strh	r4, [r0]
	add	r1, r1, r2
	strh	r4, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L32	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L35:
	.align	2, 0
.L34:
	.word	lman
.Lfe6:
	.size	 rfu_LMAN_clearVariables,.Lfe6-rfu_LMAN_clearVariables
	.align	2, 0
	.globl	rfu_LMAN_powerDownRFU
	.type	 rfu_LMAN_powerDownRFU,function
	.thumb_func
rfu_LMAN_powerDownRFU:
	ldr	r1, .L37
	mov	r0, #0x15
	strb	r0, [r1, #0x4]
	bx	lr
.L38:
	.align	2, 0
.L37:
	.word	lman
.Lfe7:
	.size	 rfu_LMAN_powerDownRFU,.Lfe7-rfu_LMAN_powerDownRFU
	.align	2, 0
	.globl	rfu_LMAN_establishConnection
	.type	 rfu_LMAN_establishConnection,function
	.thumb_func
rfu_LMAN_establishConnection:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r3, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r8, r2
	ldr	r1, .L56
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L40	@cond_branch
	cmp	r0, #0x8
	bne	.L41	@cond_branch
	cmp	r5, #0x1
	beq	.L40	@cond_branch
.L41:
	mov	r0, #0x1
	strh	r0, [r1, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	mov	r0, #0x1
	b	.L55
.L57:
	.align	2, 0
.L56:
	.word	lman
.L40:
	bl	rfu_getMasterSlave
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L42	@cond_branch
	ldr	r1, .L58
	mov	r0, #0x2
	strh	r0, [r1, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	mov	r0, #0x2
	b	.L55
.L59:
	.align	2, 0
.L58:
	.word	lman
.L42:
	mov	r2, #0x0
	ldrh	r0, [r6]
	ldr	r4, .L60
	add	r1, r6, #0x2
	ldr	r3, .L60+0x4
	cmp	r0, r4
	beq	.L44	@cond_branch
.L45:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xf
	bhi	.L44	@cond_branch
	ldrh	r0, [r1]
	add	r1, r1, #0x2
	cmp	r0, r4
	bne	.L45	@cond_branch
.L44:
	cmp	r2, #0x10
	bne	.L49	@cond_branch
	mov	r0, #0x4
	strh	r0, [r3, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	mov	r0, #0x4
	b	.L55
.L61:
	.align	2, 0
.L60:
	.word	0xffff
	.word	lman
.L49:
	cmp	r5, #0x1
	bls	.L50	@cond_branch
	mov	r0, #0x1
	strb	r0, [r3, #0x7]
	mov	r5, #0x1
	mov	r7, #0x0
	b	.L51
.L50:
	mov	r0, #0x0
	strb	r0, [r3, #0x7]
.L51:
	cmp	r5, #0
	beq	.L52	@cond_branch
	mov	r0, #0x5
	strb	r0, [r3, #0x4]
	b	.L53
.L52:
	mov	r0, #0x9
	strb	r0, [r3, #0x4]
	ldrb	r0, [r3, #0xb]
	cmp	r0, #0
	beq	.L53	@cond_branch
	mov	r0, #0x2
	strb	r0, [r3, #0xb]
.L53:
	strb	r5, [r3, #0x6]
	strh	r7, [r3, #0x1a]
	mov	r0, r8
	strh	r0, [r3, #0x26]
	str	r6, [r3, #0x20]
	mov	r0, #0x0
.L55:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 rfu_LMAN_establishConnection,.Lfe8-rfu_LMAN_establishConnection
	.align	2, 0
	.globl	rfu_LMAN_CHILD_connectParent
	.type	 rfu_LMAN_CHILD_connectParent,function
	.thumb_func
rfu_LMAN_CHILD_connectParent:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	ldr	r1, .L79
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L63	@cond_branch
	sub	r0, r0, #0x9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bls	.L63	@cond_branch
	mov	r0, #0x1
	strh	r0, [r1, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	mov	r0, #0x1
	b	.L77
.L80:
	.align	2, 0
.L79:
	.word	lman
.L63:
	bl	rfu_getMasterSlave
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L64	@cond_branch
	ldr	r1, .L81
	mov	r0, #0x2
	strh	r0, [r1, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	mov	r0, #0x2
	b	.L77
.L82:
	.align	2, 0
.L81:
	.word	lman
.L64:
	mov	r2, #0x0
	ldr	r0, .L83
	ldr	r1, [r0]
	ldrb	r3, [r1, #0x8]
	ldr	r5, .L83+0x4
	add	r7, r0, #0
	cmp	r2, r3
	bcs	.L66	@cond_branch
	ldrh	r0, [r1, #0x14]
	cmp	r0, r6
	beq	.L66	@cond_branch
	add	r4, r1, #0
	add	r1, r3, #0
.L67:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r1
	bcs	.L66	@cond_branch
	lsl	r0, r2, #0x5
	add	r0, r4, r0
	ldrh	r0, [r0, #0x14]
	cmp	r0, r6
	bne	.L67	@cond_branch
.L66:
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	beq	.L72	@cond_branch
	cmp	r2, r0
	bne	.L71	@cond_branch
.L72:
	mov	r0, #0x3
	strh	r0, [r5, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	mov	r0, #0x3
	b	.L77
.L84:
	.align	2, 0
.L83:
	.word	gRfuLinkStatus
	.word	lman
.L71:
	ldrb	r0, [r5, #0x4]
	cmp	r0, #0
	beq	.L74	@cond_branch
	cmp	r0, #0x9
	bne	.L73	@cond_branch
.L74:
	mov	r0, #0xc
	strb	r0, [r5, #0x4]
	mov	r0, #0xd
	b	.L78
.L73:
	mov	r0, #0xb
	strb	r0, [r5, #0x4]
	mov	r0, #0xc
.L78:
	strb	r0, [r5, #0x5]
	strh	r6, [r5, #0x1e]
	mov	r0, r8
	strh	r0, [r5, #0x1a]
	ldrb	r0, [r5, #0x7]
	cmp	r0, #0
	beq	.L76	@cond_branch
	mov	r0, #0x7
	strb	r0, [r5, #0x7]
.L76:
	mov	r0, #0x0
.L77:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 rfu_LMAN_CHILD_connectParent,.Lfe9-rfu_LMAN_CHILD_connectParent
	.align	2, 0
	.type	 rfu_LMAN_PARENT_stopWaitLinkRecoveryAndDisconnect,function
	.thumb_func
rfu_LMAN_PARENT_stopWaitLinkRecoveryAndDisconnect:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r6, .L94
	add	r3, r6, #0
	add	r3, r3, #0x30
	ldrb	r2, [r3]
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L85	@cond_branch
	add	r0, r2, #0
	bic	r0, r0, r1
	strb	r0, [r3]
	mov	r4, #0x0
	ldr	r7, .L94+0x4
	mov	r5, #0x1
	add	r3, r3, #0x4
	mov	r2, #0x0
.L90:
	add	r0, r1, #0
	asr	r0, r0, r4
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L89	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
.L89:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L90	@cond_branch
	ldr	r0, [r7]
	ldrb	r4, [r0, #0x3]
	and	r4, r4, r1
	cmp	r4, #0
	beq	.L93	@cond_branch
	add	r0, r4, #0
	bl	rfu_LMAN_disconnect
.L93:
	ldr	r0, .L94
	strh	r4, [r0, #0x14]
	mov	r0, #0x33
	add	r1, r4, #0
	bl	rfu_LMAN_occureCallback
.L85:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	lman
	.word	gRfuLinkStatus
.Lfe10:
	.size	 rfu_LMAN_PARENT_stopWaitLinkRecoveryAndDisconnect,.Lfe10-rfu_LMAN_PARENT_stopWaitLinkRecoveryAndDisconnect
	.align	2, 0
	.globl	rfu_LMAN_stopManager
	.type	 rfu_LMAN_stopManager,function
	.thumb_func
rfu_LMAN_stopManager:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	mov	r2, #0x0
	ldr	r1, .L116
	strb	r2, [r1, #0x7]
	add	r5, r1, #0
	cmp	r0, #0
	beq	.L97	@cond_branch
	bl	rfu_LMAN_clearVariables
	mov	r0, #0x17
	strb	r0, [r5, #0x4]
	b	.L96
.L117:
	.align	2, 0
.L116:
	.word	lman
.L97:
	ldrb	r0, [r5, #0x4]
	sub	r0, r0, #0x5
	cmp	r0, #0xd
	bhi	.L113	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L118
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L119:
	.align	2, 0
.L118:
	.word	.L114
	.align	2, 0
	.align	2, 0
.L114:
	.word	.L99
	.word	.L100
	.word	.L101
	.word	.L98
	.word	.L103
	.word	.L104
	.word	.L105
	.word	.L106
	.word	.L107
	.word	.L108
	.word	.L98
	.word	.L110
	.word	.L111
	.word	.L112
.L99:
	mov	r1, #0x0
	mov	r0, #0x8
	strb	r0, [r5, #0x4]
	strb	r1, [r5, #0x5]
	mov	r2, #0x13
	b	.L98
.L100:
.L101:
	mov	r0, #0x7
	strb	r0, [r5, #0x4]
	mov	r0, #0x8
	strb	r0, [r5, #0x5]
	b	.L98
.L103:
	mov	r0, #0x0
	strb	r0, [r5, #0x5]
	strb	r0, [r5, #0x4]
	mov	r2, #0x21
	b	.L98
.L104:
.L105:
	mov	r1, #0x0
	mov	r0, #0xb
	strb	r0, [r5, #0x4]
	strb	r1, [r5, #0x5]
	b	.L98
.L106:
	mov	r0, #0x0
	strb	r0, [r5, #0x5]
	strb	r0, [r5, #0x4]
	mov	r2, #0x23
	b	.L98
.L107:
.L108:
	mov	r0, #0xe
	strb	r0, [r5, #0x4]
	b	.L98
.L110:
	ldrb	r0, [r5, #0x11]
	strb	r0, [r5, #0x4]
	ldrb	r0, [r5, #0x12]
	strb	r0, [r5, #0x5]
	ldr	r4, .L120
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x3]
	bl	rfu_LMAN_disconnect
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x3]
	strh	r0, [r5, #0x14]
	mov	r0, #0x33
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	b	.L96
.L121:
	.align	2, 0
.L120:
	.word	gRfuLinkStatus
.L111:
.L112:
	mov	r0, #0x12
	strb	r0, [r5, #0x4]
	b	.L98
.L113:
	strb	r2, [r5, #0x5]
	strb	r2, [r5, #0x4]
	mov	r2, #0x43
.L98:
	ldrb	r0, [r5, #0x4]
	cmp	r0, #0
	bne	.L96	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x0
	bl	rfu_LMAN_occureCallback
.L96:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 rfu_LMAN_stopManager,.Lfe11-rfu_LMAN_stopManager
	.align	2, 0
	.type	 rfu_LMAN_linkWatcher,function
	.thumb_func
rfu_LMAN_linkWatcher:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x0
	mov	r8, r1
	mov	r5, sp
	add	r5, r5, #0x1
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r1, sp
	add	r2, r5, #0
	add	r3, r4, #0
	bl	rfu_REQBN_watchLink
	mov	r0, sp
	ldrb	r0, [r0]
	add	r7, r4, #0
	cmp	r0, #0
	beq	.L123	@cond_branch
	ldr	r1, .L154
	mov	r0, sp
	ldrb	r0, [r0]
	strh	r0, [r1, #0x14]
	ldrb	r0, [r5]
	strh	r0, [r1, #0x16]
	ldrb	r0, [r1, #0x9]
	add	r6, r1, #0
	cmp	r0, #0
	beq	.L124	@cond_branch
	mov	r0, #0x1
	strb	r0, [r6, #0xa]
	ldrb	r0, [r6, #0x6]
	cmp	r0, #0
	bne	.L125	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L125	@cond_branch
	mov	r0, #0x4
	strb	r0, [r6, #0xa]
.L125:
	ldrb	r0, [r6, #0xa]
	cmp	r0, #0x1
	bne	.L126	@cond_branch
	mov	r2, #0x0
	mov	r4, sp
	mov	r5, #0x1
	mov	ip, r6
	mov	r3, ip
	add	r3, r3, #0x30
	mov	r6, #0x34
	add	r6, r6, ip
	mov	r9, r6
.L130:
	ldrb	r0, [r4]
	asr	r0, r0, r2
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L129	@cond_branch
	add	r0, r5, #0
	lsl	r0, r0, r2
	ldrb	r1, [r3]
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r2, #0x1
	add	r0, r0, r9
	mov	r6, ip
	ldrh	r1, [r6, #0x32]
	strh	r1, [r0]
.L129:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L130	@cond_branch
	mov	r0, #0x31
	b	.L153
.L155:
	.align	2, 0
.L154:
	.word	lman
.L126:
	mov	r0, #0x0
	strb	r0, [r6, #0xa]
	mov	r0, sp
	ldrb	r0, [r0]
	bl	rfu_LMAN_disconnect
	mov	r0, #0x1
	mov	r8, r0
	mov	r0, #0x33
.L153:
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	b	.L134
.L124:
	mov	r0, sp
	ldrb	r0, [r0]
	bl	rfu_LMAN_disconnect
	mov	r1, #0x1
	mov	r8, r1
	mov	r0, #0x30
	mov	r1, #0x2
	bl	rfu_LMAN_occureCallback
.L134:
	bl	rfu_LMAN_managerChangeAgbClockMaster
.L123:
	ldr	r0, .L156
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L135	@cond_branch
	ldrb	r0, [r7]
	cmp	r0, #0
	beq	.L136	@cond_branch
	mov	r2, #0x0
	ldr	r6, .L156+0x4
	mov	r3, #0x1
	add	r4, r6, #0
	add	r4, r4, #0x34
	add	r6, r6, #0x30
	add	r5, r7, #0
.L140:
	ldrb	r0, [r6]
	asr	r0, r0, r2
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L139	@cond_branch
	ldrb	r0, [r5]
	asr	r0, r0, r2
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L139	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0]
.L139:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L140	@cond_branch
	ldr	r3, .L156+0x4
	add	r2, r3, #0
	add	r2, r2, #0x30
	ldrb	r1, [r7]
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r7]
	strh	r0, [r3, #0x14]
	mov	r0, #0x32
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
.L136:
	ldr	r0, .L156+0x4
	add	r3, r0, #0
	add	r3, r3, #0x30
	ldrb	r1, [r3]
	add	r6, r0, #0
	cmp	r1, #0
	beq	.L152	@cond_branch
	mov	r4, #0x0
	mov	r2, #0x0
	mov	r5, #0x1
.L147:
	ldrb	r0, [r3]
	asr	r0, r0, r2
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L146	@cond_branch
	lsl	r1, r2, #0x1
	add	r0, r6, #0
	add	r0, r0, #0x34
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L146	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L146	@cond_branch
	add	r0, r5, #0
	lsl	r0, r0, r2
	ldrb	r1, [r3]
	bic	r1, r1, r0
	strb	r1, [r3]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L146:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L147	@cond_branch
	cmp	r4, #0
	beq	.L143	@cond_branch
	add	r0, r4, #0
	bl	rfu_LMAN_disconnect
	mov	r6, #0x1
	mov	r8, r6
	ldr	r0, .L156+0x4
	strh	r4, [r0, #0x14]
	mov	r0, #0x33
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
.L143:
	ldr	r0, .L156+0x4
	add	r1, r0, #0
	add	r1, r1, #0x30
	ldrb	r1, [r1]
	add	r6, r0, #0
	cmp	r1, #0
	bne	.L135	@cond_branch
.L152:
	mov	r0, #0x0
	strb	r0, [r6, #0xa]
.L135:
	mov	r0, r8
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L157:
	.align	2, 0
.L156:
	.word	gRfuLinkStatus
	.word	lman
.Lfe12:
	.size	 rfu_LMAN_linkWatcher,.Lfe12-rfu_LMAN_linkWatcher
	.align	2, 0
	.globl	rfu_LMAN_syncVBlank
	.type	 rfu_LMAN_syncVBlank,function
	.thumb_func
rfu_LMAN_syncVBlank:
	push	{lr}
	bl	rfu_syncVBlank
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L159	@cond_branch
	mov	r0, #0xf1
	mov	r1, #0x0
	bl	rfu_LMAN_occureCallback
	bl	rfu_LMAN_managerChangeAgbClockMaster
.L159:
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 rfu_LMAN_syncVBlank,.Lfe13-rfu_LMAN_syncVBlank
	.align	2, 0
	.globl	rfu_LMAN_manager_entity
	.type	 rfu_LMAN_manager_entity,function
	.thumb_func
rfu_LMAN_manager_entity:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r1, .L203
	ldr	r2, [r1, #0x40]
	cmp	r2, #0
	bne	.L161	@cond_branch
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L161	@cond_branch
	strb	r2, [r1, #0x4]
	b	.L160
.L204:
	.align	2, 0
.L203:
	.word	lman
.L161:
	ldr	r0, .L205
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	beq	.L165	@cond_branch
	add	r0, r3, #0
	bl	rfu_LMAN_settingPCSWITCH
.L165:
	ldr	r4, .L205
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0
	bne	.LCB1285
	b	.L166	@long jump
.LCB1285:
	bl	rfu_waitREQComplete
	mov	r0, #0x1
	strb	r0, [r4, #0xe]
	ldrb	r0, [r4, #0x4]
	sub	r0, r0, #0x1
	cmp	r0, #0x16
	bls	.LCB1294
	b	.L167	@long jump
.LCB1294:
	lsl	r0, r0, #0x2
	ldr	r1, .L205+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L206:
	.align	2, 0
.L205:
	.word	lman
	.word	.L196
	.align	2, 0
	.align	2, 0
.L196:
	.word	.L171
	.word	.L174
	.word	.L175
	.word	.L176
	.word	.L177
	.word	.L178
	.word	.L179
	.word	.L167
	.word	.L181
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L186
	.word	.L167
	.word	.L188
	.word	.L189
	.word	.L190
	.word	.L191
	.word	.L167
	.word	.L193
	.word	.L167
	.word	.L168
.L168:
	bl	rfu_LMAN_REQBN_softReset_and_checkID
	ldr	r1, .L207
	mov	r2, #0xff
	cmp	r0, r1
	bne	.L169	@cond_branch
	mov	r2, #0x44
.L169:
	ldr	r1, .L207+0x4
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	strb	r0, [r1, #0x4]
	add	r0, r2, #0
	b	.L202
.L208:
	.align	2, 0
.L207:
	.word	0x8001
	.word	lman
.L171:
	bl	rfu_LMAN_REQBN_softReset_and_checkID
	ldr	r1, .L209
	cmp	r0, r1
	bne	.L172	@cond_branch
	ldr	r0, .L209+0x4
	ldrb	r1, [r0, #0x5]
	strb	r1, [r0, #0x4]
	mov	r1, #0x3
	strb	r1, [r0, #0x5]
	b	.L167
.L210:
	.align	2, 0
.L209:
	.word	0x8001
	.word	lman
.L172:
	ldr	r1, .L211
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	strb	r0, [r1, #0x4]
	mov	r0, #0xff
.L202:
	mov	r1, #0x0
	bl	rfu_LMAN_occureCallback
	b	.L167
.L212:
	.align	2, 0
.L211:
	.word	lman
.L174:
	bl	rfu_REQ_reset
	b	.L167
.L175:
	ldr	r0, .L213
	ldr	r2, [r0, #0x3c]
	ldrh	r0, [r2, #0x2]
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	bl	rfu_REQ_configSystem
	b	.L167
.L214:
	.align	2, 0
.L213:
	.word	lman
.L176:
	ldr	r0, .L215
	ldr	r3, [r0, #0x3c]
	ldrb	r0, [r3, #0x4]
	ldrh	r1, [r3, #0x6]
	ldr	r2, [r3, #0x8]
	ldr	r3, [r3, #0xc]
	bl	rfu_REQ_configGameData
	b	.L167
.L216:
	.align	2, 0
.L215:
	.word	lman
.L177:
	bl	rfu_REQ_startSearchChild
	b	.L167
.L178:
	bl	rfu_REQ_pollSearchChild
	b	.L167
.L179:
	bl	rfu_REQ_endSearchChild
	b	.L167
.L181:
	bl	rfu_REQ_startSearchParent
	b	.L167
.L182:
	bl	rfu_REQ_pollSearchParent
	b	.L167
.L183:
	bl	rfu_REQ_endSearchParent
	b	.L167
.L184:
	ldr	r0, .L217
	ldrh	r0, [r0, #0x1e]
	bl	rfu_REQ_startConnectParent
	b	.L167
.L218:
	.align	2, 0
.L217:
	.word	lman
.L185:
	bl	rfu_REQ_pollConnectParent
	b	.L167
.L186:
	bl	rfu_REQ_endConnectParent
	b	.L167
.L188:
	ldr	r0, .L219
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x3]
	bl	rfu_REQ_CHILD_startConnectRecovery
	b	.L167
.L220:
	.align	2, 0
.L219:
	.word	gRfuLinkStatus
.L189:
	bl	rfu_REQ_CHILD_pollConnectRecovery
	b	.L167
.L190:
	bl	rfu_REQ_CHILD_endConnectRecovery
	b	.L167
.L191:
	bl	rfu_REQ_changeMasterSlave
	b	.L167
.L193:
	bl	rfu_REQ_stopMode
.L167:
	bl	rfu_waitREQComplete
	ldr	r1, .L221
	mov	r0, #0x0
	strb	r0, [r1, #0xe]
.L166:
	ldr	r0, .L221
	ldrb	r0, [r0, #0x4]
	sub	r0, r0, #0x12
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.LCB1505
	b	.L165	@long jump
.LCB1505:
	ldr	r0, .L221+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L200	@cond_branch
	mov	r0, #0x0
	bl	rfu_LMAN_linkWatcher
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L160	@cond_branch
.L200:
	bl	rfu_LMAN_PARENT_checkRecvChildName
	bl	rfu_LMAN_CHILD_checkSendChildName
	bl	rfu_LMAN_CHILD_linkRecoveryProcess
	bl	rfu_LMAN_checkNICommunicateStatus
.L160:
	pop	{r4}
	pop	{r0}
	bx	r0
.L222:
	.align	2, 0
.L221:
	.word	lman
	.word	gRfuLinkStatus
.Lfe14:
	.size	 rfu_LMAN_manager_entity,.Lfe14-rfu_LMAN_manager_entity
	.align	2, 0
	.type	 rfu_LMAN_settingPCSWITCH,function
	.thumb_func
rfu_LMAN_settingPCSWITCH:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r0, .L232
	ldrb	r1, [r0, #0x7]
	add	r4, r0, #0
	cmp	r1, #0x5
	bne	.L224	@cond_branch
	mov	r2, #0x1
	strb	r2, [r4, #0x6]
	strb	r1, [r4, #0x4]
	ldrh	r0, [r4, #0x1c]
	strh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L225	@cond_branch
	mov	r0, #0x6
	strb	r0, [r4, #0x7]
	b	.L224
.L233:
	.align	2, 0
.L232:
	.word	lman
.L225:
	strb	r2, [r4, #0x7]
.L224:
	ldrb	r0, [r4, #0x7]
	cmp	r0, #0x1
	bne	.L227	@cond_branch
	strb	r0, [r4, #0x6]
	mov	r0, #0x5
	strb	r0, [r4, #0x4]
	add	r0, r3, #0
	mov	r1, #0x8c
	bl	__umodsi3
	strh	r0, [r4, #0x1a]
	mov	r1, #0x8c
	sub	r1, r1, r0
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L228	@cond_branch
	mov	r0, #0x2
	b	.L231
.L228:
	mov	r0, #0x3
.L231:
	strb	r0, [r4, #0x7]
.L227:
	ldrb	r0, [r4, #0x7]
	cmp	r0, #0x3
	bne	.L230	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4, #0x6]
	mov	r0, #0x28
	strh	r0, [r4, #0x1a]
	mov	r0, #0x4
	strb	r0, [r4, #0x7]
	mov	r0, #0x9
	strb	r0, [r4, #0x4]
.L230:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 rfu_LMAN_settingPCSWITCH,.Lfe15-rfu_LMAN_settingPCSWITCH
	.align	2, 0
	.type	 rfu_LMAN_REQ_callback,function
	.thumb_func
rfu_LMAN_REQ_callback:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	ldr	r0, .L348
	ldrb	r1, [r0, #0xe]
	add	r7, r0, #0
	cmp	r1, #0
	bne	.LCB1653
	b	.L235	@long jump
.LCB1653:
	mov	r0, #0x0
	strb	r0, [r7, #0xe]
	mov	r0, r8
	sub	r0, r0, #0x10
	cmp	r0, #0x2d
	bls	.LCB1661
	b	.L236	@long jump
.LCB1661:
	lsl	r0, r0, #0x2
	ldr	r1, .L348+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L349:
	.align	2, 0
.L348:
	.word	lman
	.word	.L298
	.align	2, 0
	.align	2, 0
.L298:
	.word	.L237
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L241
	.word	.L239
	.word	.L236
	.word	.L243
	.word	.L245
	.word	.L247
	.word	.L250
	.word	.L254
	.word	.L259
	.word	.L265
	.word	.L267
	.word	.L270
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L290
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L275
	.word	.L283
	.word	.L286
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L296
.L237:
	cmp	r6, #0
	beq	.LCB1682
	b	.L236	@long jump
.LCB1682:
	ldr	r0, .L350
	ldrb	r1, [r0, #0x5]
	strb	r1, [r0, #0x4]
	mov	r1, #0x4
	strb	r1, [r0, #0x5]
	b	.L236
.L351:
	.align	2, 0
.L350:
	.word	lman
.L239:
	cmp	r6, #0
	beq	.LCB1699
	b	.L236	@long jump
.LCB1699:
	ldr	r0, .L352
	ldrb	r1, [r0, #0x5]
	strb	r1, [r0, #0x4]
	strb	r6, [r0, #0x5]
	b	.L236
.L353:
	.align	2, 0
.L352:
	.word	lman
.L241:
	cmp	r6, #0
	beq	.LCB1715
	b	.L236	@long jump
.LCB1715:
	ldr	r0, .L354
	strb	r6, [r0, #0x5]
	strb	r6, [r0, #0x4]
	mov	r0, #0x0
	b	.L345
.L355:
	.align	2, 0
.L354:
	.word	lman
.L243:
	cmp	r6, #0
	beq	.LCB1731
	b	.L236	@long jump
.LCB1731:
	ldr	r1, .L356
	mov	r0, #0x6
	b	.L346
.L357:
	.align	2, 0
.L356:
	.word	lman
.L245:
	ldr	r1, .L358
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0
	bne	.LCB1749
	b	.L236	@long jump
.LCB1749:
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1757
	b	.L236	@long jump
.LCB1757:
	mov	r0, #0x7
	strb	r0, [r1, #0x4]
	mov	r0, #0x8
	strb	r0, [r1, #0x5]
	b	.L236
.L359:
	.align	2, 0
.L358:
	.word	lman
.L247:
	cmp	r6, #0
	beq	.LCB1773
	b	.L236	@long jump
.LCB1773:
	ldr	r0, .L360
	ldrb	r1, [r0, #0x5]
	strb	r1, [r0, #0x4]
	strb	r6, [r0, #0x5]
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	beq	.LCB1783
	b	.L236	@long jump
.LCB1783:
	mov	r0, #0x13
	b	.L345
.L361:
	.align	2, 0
.L360:
	.word	lman
.L250:
	cmp	r6, #0
	beq	.LCB1796
	b	.L236	@long jump
.LCB1796:
	ldrb	r0, [r7, #0xb]
	cmp	r0, #0x1
	bne	.L252	@cond_branch
	ldrh	r0, [r7, #0x1a]
	cmp	r0, #0x1
	bls	.L252	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r7, #0x1a]
.L252:
	ldr	r1, .L362
	mov	r0, #0xa
	b	.L346
.L363:
	.align	2, 0
.L362:
	.word	lman
.L254:
	cmp	r6, #0
	bne	.L255	@cond_branch
	bl	rfu_LMAN_CHILD_checkEnableParentCandidate
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	strb	r0, [r1]
	ldr	r4, .L364
	strh	r0, [r4, #0x14]
	cmp	r0, #0
	beq	.L256	@cond_branch
	mov	r0, #0x20
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
.L256:
	ldrb	r0, [r4, #0xb]
	cmp	r0, #0
	beq	.L255	@cond_branch
	ldrh	r0, [r4, #0x1a]
	cmp	r0, #0x1
	beq	.L255	@cond_branch
	ldr	r0, .L364+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0x4
	bne	.L255	@cond_branch
	bl	rfu_REQ_endSearchParent
	bl	rfu_waitREQComplete
	mov	r0, #0x9
	strb	r0, [r4, #0x4]
	mov	r0, #0x1
	strb	r0, [r4, #0xb]
.L255:
	ldr	r1, .L364
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0
	bne	.LCB1878
	b	.L236	@long jump
.LCB1878:
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1887
	b	.L236	@long jump
.LCB1887:
	mov	r0, #0xb
	strb	r0, [r1, #0x4]
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	b	.L236
.L365:
	.align	2, 0
.L364:
	.word	lman
	.word	gRfuLinkStatus
.L259:
	cmp	r6, #0
	beq	.LCB1904
	b	.L236	@long jump
.LCB1904:
	ldr	r2, .L366
	ldrb	r0, [r2, #0x5]
	strb	r0, [r2, #0x4]
	ldrb	r1, [r2, #0x7]
	cmp	r1, #0
	bne	.L261	@cond_branch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1918
	b	.L236	@long jump
.LCB1918:
	mov	r0, #0x21
	b	.L345
.L367:
	.align	2, 0
.L366:
	.word	lman
.L261:
	cmp	r1, #0x7
	bne	.LCB1931
	b	.L236	@long jump
.LCB1931:
	mov	r0, #0x5
	strb	r0, [r2, #0x4]
	strb	r0, [r2, #0x7]
	b	.L236
.L265:
	cmp	r6, #0
	beq	.LCB1940
	b	.L236	@long jump
.LCB1940:
	ldr	r1, .L368
	mov	r0, #0xd
.L346:
	strb	r0, [r1, #0x5]
	strb	r0, [r1, #0x4]
	b	.L236
.L369:
	.align	2, 0
.L368:
	.word	lman
.L267:
	cmp	r6, #0
	bne	.L268	@cond_branch
	ldr	r4, .L370
	mov	r0, sp
	add	r1, r4, #0
	bl	rfu_getConnectParentStatus
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L268	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L268	@cond_branch
	add	r1, r4, #0
	sub	r1, r1, #0x10
	mov	r0, #0xe
	strb	r0, [r1, #0x4]
.L268:
	ldr	r1, .L370+0x4
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0
	bne	.LCB1984
	b	.L236	@long jump
.LCB1984:
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1992
	b	.L236	@long jump
.LCB1992:
	mov	r0, #0xe
	strb	r0, [r1, #0x4]
	b	.L236
.L371:
	.align	2, 0
.L370:
	.word	lman+0x10
	.word	lman
.L270:
	cmp	r6, #0
	beq	.LCB2007
	b	.L236	@long jump
.LCB2007:
	ldr	r4, .L372
	mov	r0, sp
	add	r1, r4, #0
	bl	rfu_getConnectParentStatus
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB2016
	b	.L236	@long jump
.LCB2016:
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L272	@cond_branch
	add	r1, r4, #0
	sub	r1, r1, #0x10
	mov	r0, #0x13
	strb	r0, [r1, #0x4]
	mov	r0, #0xf
	strb	r0, [r1, #0x5]
	mov	r0, #0x22
	strh	r0, [r1, #0x1e]
	ldrb	r0, [r1, #0x10]
	strh	r0, [r1, #0x14]
	b	.L273
.L373:
	.align	2, 0
.L372:
	.word	lman+0x10
.L272:
	add	r1, r4, #0
	sub	r1, r1, #0x10
	strb	r6, [r1, #0x5]
	strb	r6, [r1, #0x4]
	mov	r0, #0x23
	strh	r0, [r1, #0x1e]
	mov	r0, sp
	ldrb	r0, [r0]
	strh	r0, [r1, #0x14]
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0
	beq	.L273	@cond_branch
	mov	r0, #0x3
	strb	r0, [r1, #0x7]
	mov	r0, #0x9
	strb	r0, [r1, #0x4]
.L273:
	ldr	r4, .L374
	ldrb	r0, [r4, #0x1e]
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	mov	r0, #0x0
	strh	r0, [r4, #0x1e]
	b	.L236
.L375:
	.align	2, 0
.L374:
	.word	lman
.L275:
	cmp	r6, #0
	beq	.LCB2085
	b	.L236	@long jump
.LCB2085:
	ldr	r2, .L376
	ldr	r3, [r2]
	ldrb	r0, [r3, #0x3]
	mov	r1, #0x0
	strh	r0, [r7, #0x14]
	mov	r0, #0x11
	strb	r0, [r7, #0x5]
	strb	r0, [r7, #0x4]
	strb	r1, [r7, #0x10]
	ldrb	r0, [r3, #0x3]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB2109
	b	.L236	@long jump
.LCB2109:
	add	r1, r7, #0
	mov	r3, #0x1
.L279:
	ldrb	r0, [r1, #0x10]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x10]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.LCB2124
	b	.L236	@long jump
.LCB2124:
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x3]
	ldrb	r4, [r7, #0x10]
	asr	r0, r0, r4
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L279	@cond_branch
	b	.L236
.L377:
	.align	2, 0
.L376:
	.word	gRfuLinkStatus
.L283:
	cmp	r6, #0
	bne	.L284	@cond_branch
	mov	r0, sp
	bl	rfu_CHILD_getConnectRecoveryStatus
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L284	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L284	@cond_branch
	ldr	r1, .L378
	mov	r0, #0x12
	strb	r0, [r1, #0x4]
.L284:
	ldr	r2, .L378
	ldrb	r0, [r2, #0x10]
	lsl	r0, r0, #0x1
	add	r1, r2, #0
	add	r1, r1, #0x34
	add	r1, r0, r1
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.LCB2175
	b	.L236	@long jump
.LCB2175:
	sub	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB2183
	b	.L236	@long jump
.LCB2183:
	mov	r0, #0x12
	strb	r0, [r2, #0x4]
	b	.L236
.L379:
	.align	2, 0
.L378:
	.word	lman
.L286:
	cmp	r6, #0
	beq	.LCB2197
	b	.L236	@long jump
.LCB2197:
	mov	r0, sp
	bl	rfu_CHILD_getConnectRecoveryStatus
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB2204
	b	.L236	@long jump
.LCB2204:
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L288	@cond_branch
	ldr	r1, .L380
	mov	r0, #0x13
	strb	r0, [r1, #0x4]
	mov	r0, #0x16
	strb	r0, [r1, #0x5]
	mov	r0, #0x32
	strh	r0, [r1, #0x1e]
	b	.L289
.L381:
	.align	2, 0
.L380:
	.word	lman
.L288:
	ldr	r4, .L382
	strb	r6, [r4, #0x5]
	strb	r6, [r4, #0x4]
	ldr	r0, .L382+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x3]
	bl	rfu_LMAN_disconnect
	mov	r0, #0x33
	strh	r0, [r4, #0x1e]
.L289:
	ldr	r5, .L382
	ldrb	r0, [r5, #0x10]
	lsl	r0, r0, #0x1
	add	r1, r5, #0
	add	r1, r1, #0x34
	add	r0, r0, r1
	mov	r1, #0x0
	mov	r4, #0x0
	strh	r4, [r0]
	add	r0, r5, #0
	add	r0, r0, #0x30
	strb	r1, [r0]
	strb	r1, [r5, #0xa]
	ldrb	r0, [r5, #0x1e]
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	strh	r4, [r5, #0x1e]
	b	.L236
.L383:
	.align	2, 0
.L382:
	.word	lman
	.word	gRfuLinkStatus
.L290:
	cmp	r6, #0
	bne	.L236	@cond_branch
	ldr	r5, .L384
	ldrb	r1, [r5, #0x5]
	add	r0, r1, #0
	cmp	r0, #0x16
	bne	.L292	@cond_branch
	ldrb	r0, [r5, #0x11]
	strb	r0, [r5, #0x4]
	ldrb	r0, [r5, #0x12]
	strb	r0, [r5, #0x5]
	ldrb	r0, [r5, #0x2]
	mov	r0, #0x1
	strb	r0, [r5, #0x2]
	mov	r0, #0x41
.L345:
	mov	r1, #0x0
	bl	rfu_LMAN_occureCallback
	b	.L236
.L385:
	.align	2, 0
.L384:
	.word	lman
.L292:
	cmp	r0, #0xf
	bne	.L236	@cond_branch
	strb	r1, [r5, #0x4]
	ldrb	r0, [r5, #0x2]
	mov	r4, #0x1
	strb	r4, [r5, #0x2]
	mov	r0, #0x41
	mov	r1, #0x0
	bl	rfu_LMAN_occureCallback
	add	r1, r5, #0
	add	r1, r1, #0x24
	ldrb	r0, [r5, #0x10]
	lsl	r4, r4, r0
	ldrb	r0, [r1]
	orr	r4, r4, r0
	strb	r4, [r1]
	ldrb	r0, [r5, #0x10]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x4
	add	r0, r0, r1
	ldrh	r1, [r5, #0x26]
	mov	r7, #0x0
	strh	r1, [r0]
	ldrb	r1, [r5, #0x10]
	mov	r0, #0x4
	bl	rfu_clearSlot
	mov	r4, sp
	ldrb	r0, [r5, #0x10]
	mov	r1, #0xe
	bl	rfu_NI_CHILD_setSendGameName
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L236	@cond_branch
	strb	r7, [r5, #0x5]
	strb	r7, [r5, #0x4]
	bl	rfu_LMAN_managerChangeAgbClockMaster
	ldr	r0, .L386
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	orr	r0, r0, r1
	bl	rfu_LMAN_disconnect
	mov	r0, sp
	ldrb	r0, [r0]
	strh	r0, [r5, #0x14]
	mov	r0, #0x25
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	b	.L236
.L387:
	.align	2, 0
.L386:
	.word	gRfuLinkStatus
.L296:
	cmp	r6, #0
	bne	.L236	@cond_branch
	ldr	r0, .L388
	strb	r6, [r0, #0x5]
	strb	r6, [r0, #0x4]
	mov	r0, #0x42
	mov	r1, #0x0
	bl	rfu_LMAN_occureCallback
.L236:
	ldr	r1, .L388
	mov	r0, #0x1
	strb	r0, [r1, #0xe]
	b	.L300
.L389:
	.align	2, 0
.L388:
	.word	lman
.L235:
	cmp	r6, #0x3
	bne	.L300	@cond_branch
	ldrb	r0, [r7, #0xf]
	cmp	r0, #0
	beq	.L300	@cond_branch
	mov	r3, r8
	cmp	r3, #0x24
	beq	.L302	@cond_branch
	cmp	r3, #0x26
	beq	.L302	@cond_branch
	cmp	r3, #0x27
	bne	.L300	@cond_branch
.L302:
	bl	rfu_REQ_RFUStatus
	bl	rfu_waitREQComplete
	mov	r0, sp
	bl	rfu_getRFUStatus
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L300	@cond_branch
	ldr	r4, .L390
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L300	@cond_branch
	bl	rfu_getSTWIRecvBuffer
	ldr	r1, [r4]
	ldrb	r1, [r1, #0x2]
	strb	r1, [r0, #0x4]
	mov	r1, #0x1
	strb	r1, [r0, #0x5]
	mov	r0, #0x29
	bl	rfu_LMAN_linkWatcher
	mov	r6, #0x0
.L300:
	mov	r4, r8
	cmp	r4, #0x26
	bne	.LCB2445
	b	.L329	@long jump
.LCB2445:
	cmp	r4, #0x26
	bgt	.L337	@cond_branch
	cmp	r4, #0x10
	bne	.LCB2449
	b	.L332	@long jump
.LCB2449:
	b	.L304
.L391:
	.align	2, 0
.L390:
	.word	gRfuLinkStatus
.L337:
	mov	r0, r8
	cmp	r0, #0x30
	beq	.L305	@cond_branch
	cmp	r0, #0x3d
	bne	.LCB2463
	b	.L332	@long jump
.LCB2463:
	b	.L304
.L305:
	cmp	r6, #0
	beq	.LCB2470
	b	.L344	@long jump
.LCB2470:
	bl	rfu_getSTWIRecvBuffer
	ldr	r4, .L392
	ldrb	r0, [r0, #0x8]
	strh	r0, [r4, #0x14]
	bl	rfu_LMAN_reflectCommunicationStatus
	add	r2, r4, #0
	add	r2, r2, #0x30
	ldrb	r1, [r2]
	cmp	r1, #0
	beq	.L307	@cond_branch
	ldrb	r0, [r4, #0x14]
	add	r3, r1, #0
	bic	r3, r3, r0
	add	r0, r3, #0
	strb	r0, [r2]
	mov	r3, #0x0
	add	r7, r4, #0
	add	r1, r7, #0
	mov	r5, #0x1
	add	r4, r1, #0
	add	r4, r4, #0x34
	mov	r2, #0x0
.L311:
	ldrh	r0, [r1, #0x14]
	asr	r0, r0, r3
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L310	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, r4
	strh	r2, [r0]
.L310:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L311	@cond_branch
	ldr	r1, .L392
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0
	bne	.L307	@cond_branch
	strb	r0, [r1, #0x5]
	strb	r0, [r1, #0x4]
.L307:
	mov	r3, sp
	ldr	r1, .L392
	ldrb	r2, [r1]
	ldrb	r0, [r1, #0x14]
	and	r0, r0, r2
	strb	r0, [r3]
	mov	r3, #0x0
	add	r7, r1, #0
	ldr	r2, .L392+0x4
	mov	r1, sp
	mov	r5, #0x1
	add	r4, r7, #0
.L318:
	ldrb	r0, [r1]
	asr	r0, r0, r3
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L317	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L317	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r7, #0x1]
.L317:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L318	@cond_branch
	ldrb	r1, [r7, #0x14]
	ldrb	r0, [r7]
	bic	r0, r0, r1
	strb	r0, [r7]
	ldrb	r1, [r7, #0x7]
	cmp	r1, #0
	beq	.L321	@cond_branch
	ldr	r0, [r2]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L326	@cond_branch
	cmp	r1, #0x8
	bne	.L323	@cond_branch
	ldrh	r0, [r7, #0x1c]
	strh	r0, [r7, #0x1a]
	mov	r0, #0x6
	strb	r0, [r7, #0x7]
	b	.L347
.L393:
	.align	2, 0
.L392:
	.word	lman
	.word	gRfuLinkStatus
.L323:
	ldrb	r0, [r7, #0x4]
	sub	r0, r0, #0x6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L321	@cond_branch
	mov	r0, #0x1
	strb	r0, [r7, #0x7]
	mov	r0, #0x5
.L347:
	strb	r0, [r7, #0x4]
.L321:
	ldr	r0, [r2]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L326	@cond_branch
	ldrb	r0, [r7, #0x4]
	cmp	r0, #0
	bne	.L326	@cond_branch
	mov	r0, #0xff
	strb	r0, [r7, #0x6]
.L326:
	ldrb	r0, [r7, #0xe]
	cmp	r0, #0
	bne	.L304	@cond_branch
	mov	r0, #0x40
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	b	.L304
.L329:
	bl	rfu_LMAN_CHILD_checkSendChildName2
	ldr	r0, .L394
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L304	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	rfu_LMAN_occureCallback
	b	.L304
.L395:
	.align	2, 0
.L394:
	.word	gRfuLinkStatus
.L332:
	cmp	r6, #0
	bne	.L344	@cond_branch
	ldr	r0, .L396
	strb	r6, [r0, #0xd]
	strb	r6, [r0, #0x1]
	strb	r6, [r0]
	mov	r1, #0xff
	strb	r1, [r0, #0x6]
	bl	rfu_LMAN_managerChangeAgbClockMaster
	mov	r4, r8
	cmp	r4, #0x3d
	bne	.L304	@cond_branch
	bl	rfu_LMAN_endManager
.L304:
	cmp	r6, #0
	beq	.L338	@cond_branch
.L344:
	ldr	r7, .L396
	mov	r0, r8
	cmp	r0, #0x1c
	bne	.L339	@cond_branch
	cmp	r6, #0
	beq	.L339	@cond_branch
	ldrb	r0, [r7, #0x7]
	cmp	r0, #0x4
	bne	.L339	@cond_branch
	ldr	r2, .L396+0x4
	ldr	r1, [r2]
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r1, [r2]
	mov	r0, #0xf
	strb	r0, [r1, #0x2]
	bl	rfu_LMAN_disconnect
	bl	rfu_waitREQComplete
	b	.L234
.L397:
	.align	2, 0
.L396:
	.word	lman
	.word	gRfuLinkStatus
.L339:
	mov	r1, #0x0
	mov	r3, r8
	strh	r3, [r7, #0x14]
	strh	r6, [r7, #0x16]
	ldrb	r0, [r7, #0xe]
	cmp	r0, #0
	beq	.L341	@cond_branch
	strb	r1, [r7, #0x5]
	strb	r1, [r7, #0x4]
.L341:
	mov	r0, #0xf0
	mov	r1, #0x2
	bl	rfu_LMAN_occureCallback
	bl	rfu_LMAN_managerChangeAgbClockMaster
.L338:
	mov	r4, r8
	cmp	r4, #0xff
	bne	.L234	@cond_branch
	mov	r0, #0xf2
	mov	r1, #0x0
	bl	rfu_LMAN_occureCallback
	bl	rfu_LMAN_managerChangeAgbClockMaster
.L234:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 rfu_LMAN_REQ_callback,.Lfe16-rfu_LMAN_REQ_callback
	.align	2, 0
	.type	 rfu_LMAN_MSC_callback,function
	.thumb_func
rfu_LMAN_MSC_callback:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r4, .L405
	ldrb	r7, [r4, #0xe]
	mov	r0, #0x0
	strb	r0, [r4, #0xe]
	mov	r0, #0x1
	strb	r0, [r4, #0xf]
	ldr	r0, .L405+0x4
	ldr	r0, [r0]
	ldrb	r5, [r0]
	cmp	r5, #0
	bne	.L399	@cond_branch
	add	r0, r6, #0
	bl	rfu_LMAN_linkWatcher
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0x1
	beq	.L401	@cond_branch
	bl	rfu_LMAN_managerChangeAgbClockMaster
	strb	r5, [r4, #0xf]
	strb	r7, [r4, #0xe]
	b	.L398
.L406:
	.align	2, 0
.L405:
	.word	lman
	.word	gRfuLinkStatus
.L399:
	mov	r0, sp
	bl	rfu_UNI_PARENT_getDRAC_ACK
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L401	@cond_branch
	mov	r1, sp
	ldrb	r0, [r4, #0x3]
	ldrb	r1, [r1]
	orr	r0, r0, r1
	ldrb	r1, [r4, #0x3]
	strb	r0, [r4, #0x3]
.L401:
	ldr	r4, .L407
	ldr	r1, [r4, #0x44]
	cmp	r1, #0
	beq	.L403	@cond_branch
	add	r0, r6, #0
	bl	_call_via_r1
	bl	rfu_waitREQComplete
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0x2
	bne	.L403	@cond_branch
	bl	rfu_LMAN_managerChangeAgbClockMaster
.L403:
	ldr	r1, .L407
	mov	r0, #0x0
	strb	r0, [r1, #0xf]
	strb	r7, [r1, #0xe]
.L398:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L408:
	.align	2, 0
.L407:
	.word	lman
.Lfe17:
	.size	 rfu_LMAN_MSC_callback,.Lfe17-rfu_LMAN_MSC_callback
	.align	2, 0
	.type	 rfu_LMAN_PARENT_checkRecvChildName,function
	.thumb_func
rfu_LMAN_PARENT_checkRecvChildName:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r1, .L446
	ldrb	r0, [r1, #0x4]
	sub	r0, r0, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r1, #0
	cmp	r0, #0x3
	bls	.LCB2892
	b	.L410	@long jump
.LCB2892:
	ldr	r0, .L446+0x4
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r3, #0xc]
	add	r4, r1, #0
	eor	r4, r4, r0
	and	r4, r4, r1
	ldrb	r0, [r2, #0x7]
	bic	r4, r4, r0
	mov	r8, r4
	strb	r1, [r3, #0xc]
	cmp	r4, #0
	beq	.L411	@cond_branch
	strh	r4, [r3, #0x14]
	mov	r0, #0x10
	mov	r1, #0x1
	str	r3, [sp, #0x4]
	bl	rfu_LMAN_occureCallback
	ldr	r3, [sp, #0x4]
.L411:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r6, #0x0
	add	r7, r3, #0
	mov	r1, #0x24
	add	r1, r1, r3
	mov	r9, r1
.L415:
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r6
	lsr	r4, r0, #0x18
	mov	r5, #0x0
	mov	r0, r8
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L416	@cond_branch
	lsl	r1, r6, #0x1
	add	r0, r7, #0
	add	r0, r0, #0x28
	add	r1, r1, r0
	ldrh	r0, [r7, #0x26]
	strh	r0, [r1]
	mov	r2, r9
	ldrb	r1, [r2]
	add	r0, r4, #0
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r6, r6, #0x1
	mov	sl, r6
	b	.L414
.L447:
	.align	2, 0
.L446:
	.word	lman
	.word	gRfuLinkStatus
.L444:
	ldrb	r1, [r7]
	add	r0, r4, #0
	orr	r0, r0, r1
	strb	r0, [r7]
	ldrb	r0, [r7, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r7, #0x1]
	ldr	r0, [sp]
	orr	r0, r0, r4
	str	r0, [sp]
	mov	r0, #0x1
	orr	r5, r5, r0
	b	.L422
.L416:
	mov	r1, r9
	ldrb	r0, [r1]
	and	r0, r0, r4
	add	r2, r6, #0x1
	mov	sl, r2
	cmp	r0, #0
	beq	.L414	@cond_branch
	ldr	r0, .L448
	lsl	r1, r6, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	ldrh	r0, [r1, #0x34]
	cmp	r0, #0x46
	bne	.L419	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x61
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L428	@cond_branch
	mov	r5, #0x2
	ldr	r3, [r3, #0x20]
	ldrh	r2, [r3]
	ldr	r0, .L448+0x4
	cmp	r2, r0
	beq	.L422	@cond_branch
	ldr	r0, .L448+0x8
	ldr	r0, [r0]
	lsl	r1, r6, #0x5
	add	r0, r0, r1
	ldrh	r0, [r0, #0x18]
	ldr	r1, .L448+0x4
.L424:
	cmp	r0, r2
	beq	.L444	@cond_branch
	add	r3, r3, #0x2
	ldrh	r2, [r3]
	cmp	r2, r1
	bne	.L424	@cond_branch
.L422:
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L428	@cond_branch
	mov	r0, #0x4
	orr	r5, r5, r0
	b	.L428
.L449:
	.align	2, 0
.L448:
	.word	gRfuSlotStatusNI
	.word	0xffff
	.word	gRfuLinkStatus
.L419:
	lsl	r1, r6, #0x1
	add	r0, r3, #0
	add	r0, r0, #0x28
	add	r1, r1, r0
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	ldr	r1, .L450
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L428	@cond_branch
	mov	r5, #0x6
.L428:
	mov	r0, #0x2
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L430	@cond_branch
	mov	r2, r9
	ldrb	r0, [r2]
	bic	r0, r0, r4
	mov	r2, #0x0
	mov	r1, r9
	strb	r0, [r1]
	lsl	r0, r6, #0x1
	add	r1, r7, #0
	add	r1, r1, #0x28
	add	r0, r0, r1
	strh	r2, [r0]
	mov	r0, #0x8
	add	r1, r6, #0
	bl	rfu_clearSlot
.L430:
	mov	r0, #0x4
	and	r5, r5, r0
	ldr	r3, .L450+0x4
	cmp	r5, #0
	beq	.L414	@cond_branch
	ldrb	r1, [r7, #0xd]
	add	r0, r4, #0
	orr	r0, r0, r1
	strb	r0, [r7, #0xd]
.L414:
	mov	r2, sl
	lsl	r0, r2, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bhi	.LCB3144
	b	.L415	@long jump
.LCB3144:
	ldr	r4, [sp]
	cmp	r4, #0
	beq	.L433	@cond_branch
	ldr	r0, .L450+0x4
	strh	r4, [r0, #0x14]
	mov	r0, #0x11
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
.L433:
	ldr	r1, .L450+0x4
	ldrb	r0, [r1, #0xd]
	cmp	r0, #0
	beq	.L434	@cond_branch
	mov	r5, #0x1
	ldr	r0, .L450+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	beq	.L435	@cond_branch
	ldrb	r0, [r1, #0x3]
	ldrb	r1, [r1]
	and	r0, r0, r1
	cmp	r0, r1
	beq	.L435	@cond_branch
	mov	r5, #0x0
.L435:
	cmp	r5, #0
	beq	.L434	@cond_branch
	ldr	r4, .L450+0x4
	ldrb	r0, [r4, #0xd]
	bl	rfu_LMAN_disconnect
	ldrb	r0, [r4, #0xd]
	mov	r1, #0x0
	strh	r0, [r4, #0x14]
	strb	r1, [r4, #0xd]
	mov	r0, #0x12
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
.L434:
	ldr	r0, .L450+0x4
	add	r1, r0, #0
	add	r1, r1, #0x24
	ldrb	r1, [r1]
	add	r3, r0, #0
	cmp	r1, #0
	bne	.L410	@cond_branch
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0x8
	bne	.L410	@cond_branch
	ldrb	r0, [r3, #0x7]
	cmp	r0, #0
	bne	.L439	@cond_branch
	strb	r0, [r3, #0x5]
	strb	r0, [r3, #0x4]
	mov	r0, #0x14
	mov	r1, #0x0
	bl	rfu_LMAN_occureCallback
	b	.L410
.L451:
	.align	2, 0
.L450:
	.word	0xffff
	.word	lman
	.word	gRfuLinkStatus
.L439:
	cmp	r0, #0x2
	bne	.L441	@cond_branch
	mov	r0, #0x3
	strb	r0, [r3, #0x7]
	mov	r0, #0x9
	b	.L445
.L441:
	mov	r0, #0x1
	strb	r0, [r3, #0x7]
	mov	r0, #0x5
.L445:
	strb	r0, [r3, #0x4]
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L410	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x1a]
	mov	r0, #0x8
	strb	r0, [r3, #0x7]
	mov	r0, #0x5
	strb	r0, [r3, #0x4]
.L410:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 rfu_LMAN_PARENT_checkRecvChildName,.Lfe18-rfu_LMAN_PARENT_checkRecvChildName
	.align	2, 0
	.type	 rfu_LMAN_CHILD_checkSendChildName,function
	.thumb_func
rfu_LMAN_CHILD_checkSendChildName:
	push	{r4, r5, r6, lr}
	ldr	r1, .L459
	ldrh	r0, [r1]
	add	r6, r0, #0
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r4, .L459+0x4
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0xf
	bne	.L453	@cond_branch
	ldrb	r1, [r4, #0x10]
	lsl	r1, r1, #0x1
	add	r5, r4, #0
	add	r5, r5, #0x28
	add	r1, r1, r5
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L455	@cond_branch
	ldr	r1, .L459+0x8
	ldrb	r0, [r4, #0x10]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0x27
	bne	.L453	@cond_branch
.L455:
	bl	rfu_LMAN_requestChangeAgbClockMaster
	mov	r0, #0x18
	strb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x10]
	mov	r0, #0x4
	bl	rfu_clearSlot
	add	r2, r4, #0
	add	r2, r2, #0x24
	mov	r1, #0x1
	ldrb	r0, [r4, #0x10]
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4, #0x10]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	mov	r1, #0x0
	strh	r1, [r0]
.L453:
	ldr	r0, .L459
	strh	r6, [r0]
	ldr	r5, .L459+0x4
	ldrb	r0, [r5, #0x4]
	cmp	r0, #0x18
	bne	.L456	@cond_branch
	ldrb	r0, [r5, #0x2]
	cmp	r0, #0x1
	bne	.L457	@cond_branch
	bl	rfu_LMAN_requestChangeAgbClockMaster
.L457:
	ldrb	r0, [r5, #0x2]
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L456	@cond_branch
	strb	r4, [r5, #0x5]
	strb	r4, [r5, #0x4]
	ldr	r0, .L459+0xc
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	orr	r0, r0, r1
	bl	rfu_LMAN_disconnect
	strh	r4, [r5, #0x14]
	mov	r0, #0x25
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
.L456:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L460:
	.align	2, 0
.L459:
	.word	0x4000208
	.word	lman
	.word	gRfuSlotStatusNI
	.word	gRfuLinkStatus
.Lfe19:
	.size	 rfu_LMAN_CHILD_checkSendChildName,.Lfe19-rfu_LMAN_CHILD_checkSendChildName
	.align	2, 0
	.type	 rfu_LMAN_CHILD_checkSendChildName2,function
	.thumb_func
rfu_LMAN_CHILD_checkSendChildName2:
	push	{r4, r5, lr}
	ldr	r5, .L463
	ldrb	r0, [r5, #0x4]
	cmp	r0, #0xf
	bne	.L462	@cond_branch
	ldr	r1, .L463+0x4
	ldrb	r2, [r5, #0x10]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0x26
	bne	.L462	@cond_branch
	mov	r4, #0x0
	strb	r4, [r5, #0x5]
	strb	r4, [r5, #0x4]
	mov	r0, #0x4
	add	r1, r2, #0
	bl	rfu_clearSlot
	add	r2, r5, #0
	add	r2, r2, #0x24
	mov	r1, #0x1
	ldrb	r0, [r5, #0x10]
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r5, #0x10]
	lsl	r0, r0, #0x1
	add	r1, r5, #0
	add	r1, r1, #0x28
	add	r0, r0, r1
	strh	r4, [r0]
	mov	r0, #0x24
	mov	r1, #0x0
	bl	rfu_LMAN_occureCallback
.L462:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L464:
	.align	2, 0
.L463:
	.word	lman
	.word	gRfuSlotStatusNI
.Lfe20:
	.size	 rfu_LMAN_CHILD_checkSendChildName2,.Lfe20-rfu_LMAN_CHILD_checkSendChildName2
	.align	2, 0
	.type	 rfu_LMAN_CHILD_linkRecoveryProcess,function
	.thumb_func
rfu_LMAN_CHILD_linkRecoveryProcess:
	push	{lr}
	ldr	r1, .L467
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0
	bne	.L466	@cond_branch
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0x1
	bne	.L466	@cond_branch
	ldrb	r0, [r1, #0x4]
	strb	r0, [r1, #0x11]
	ldrb	r0, [r1, #0x5]
	strb	r0, [r1, #0x12]
	mov	r0, #0x10
	strb	r0, [r1, #0x4]
	mov	r0, #0x11
	strb	r0, [r1, #0x5]
	mov	r0, #0x2
	strb	r0, [r1, #0xa]
.L466:
	pop	{r0}
	bx	r0
.L468:
	.align	2, 0
.L467:
	.word	lman
.Lfe21:
	.size	 rfu_LMAN_CHILD_linkRecoveryProcess,.Lfe21-rfu_LMAN_CHILD_linkRecoveryProcess
	.align	2, 0
	.type	 rfu_LMAN_CHILD_checkEnableParentCandidate,function
	.thumb_func
rfu_LMAN_CHILD_checkEnableParentCandidate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r1, .L481
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x8]
	cmp	r6, r0
	bcs	.L471	@cond_branch
	mov	r8, r0
	ldr	r0, .L481+0x4
	mov	sl, r0
	mov	r9, r1
.L473:
	mov	r1, sl
	ldr	r3, [r1, #0x20]
	ldrh	r2, [r3]
	add	r0, r5, #0x1
	mov	ip, r0
	ldr	r1, .L481+0x8
	cmp	r2, r1
	beq	.L472	@cond_branch
	mov	r1, r9
	ldr	r0, [r1]
	lsl	r1, r5, #0x5
	add	r0, r0, r1
	ldrh	r4, [r0, #0x18]
	ldr	r7, .L481+0x8
	mov	r1, #0x1
	lsl	r1, r1, r5
.L477:
	cmp	r4, r2
	bne	.L476	@cond_branch
	orr	r6, r6, r1
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L476:
	add	r3, r3, #0x2
	ldrh	r2, [r3]
	cmp	r2, r7
	bne	.L477	@cond_branch
.L472:
	mov	r1, ip
	lsl	r0, r1, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r8
	bcc	.L473	@cond_branch
.L471:
	add	r0, r6, #0
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L482:
	.align	2, 0
.L481:
	.word	gRfuLinkStatus
	.word	lman
	.word	0xffff
.Lfe22:
	.size	 rfu_LMAN_CHILD_checkEnableParentCandidate,.Lfe22-rfu_LMAN_CHILD_checkEnableParentCandidate
	.align	2, 0
	.type	 rfu_LMAN_occureCallback,function
	.thumb_func
rfu_LMAN_occureCallback:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r4, .L485
	ldr	r2, [r4, #0x40]
	cmp	r2, #0
	beq	.L484	@cond_branch
	bl	_call_via_r2
.L484:
	mov	r0, #0x0
	strh	r0, [r4, #0x16]
	strh	r0, [r4, #0x14]
	pop	{r4}
	pop	{r0}
	bx	r0
.L486:
	.align	2, 0
.L485:
	.word	lman
.Lfe23:
	.size	 rfu_LMAN_occureCallback,.Lfe23-rfu_LMAN_occureCallback
	.align	2, 0
	.type	 rfu_LMAN_disconnect,function
	.thumb_func
rfu_LMAN_disconnect:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L488
	ldrb	r5, [r4, #0xe]
	mov	r1, #0x1
	strb	r1, [r4, #0xe]
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	strb	r5, [r4, #0xe]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L489:
	.align	2, 0
.L488:
	.word	lman
.Lfe24:
	.size	 rfu_LMAN_disconnect,.Lfe24-rfu_LMAN_disconnect
	.align	2, 0
	.type	 rfu_LMAN_reflectCommunicationStatus,function
	.thumb_func
rfu_LMAN_reflectCommunicationStatus:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L512
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L491	@cond_branch
	mov	r4, #0x0
.L495:
	ldr	r1, .L512+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	ldrh	r0, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x8
	add	r1, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L494	@cond_branch
	ldrb	r1, [r2, #0x1a]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L494	@cond_branch
	add	r2, r1, #0
	bic	r2, r2, r5
	mov	r0, #0x20
	add	r1, r4, #0
	bl	rfu_changeSendTarget
.L494:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L495	@cond_branch
.L491:
	ldr	r0, .L512
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0
	beq	.L498	@cond_branch
	mov	r4, #0x0
.L502:
	ldr	r1, .L512+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	ldrh	r0, [r2, #0x34]
	mov	r3, #0x80
	lsl	r3, r3, #0x8
	add	r1, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L501	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x4e
	ldrb	r0, [r0]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L501	@cond_branch
	add	r0, r4, #0
	bl	rfu_NI_stopReceivingData
.L501:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L502	@cond_branch
.L498:
	ldr	r0, .L512
	ldr	r3, [r0]
	ldrb	r2, [r3, #0x6]
	cmp	r2, #0
	beq	.L505	@cond_branch
	mvn	r1, r5
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0x6]
	mov	r4, #0x0
	ldr	r7, .L512+0x8
	ldr	r6, .L512+0xc
.L509:
	lsl	r0, r4, #0x2
	add	r0, r0, r7
	ldr	r2, [r0]
	ldrh	r0, [r2]
	cmp	r0, r6
	bne	.L508	@cond_branch
	ldrb	r3, [r2, #0x3]
	add	r0, r5, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L508	@cond_branch
	add	r0, r1, #0
	and	r0, r0, r3
	strb	r0, [r2, #0x3]
.L508:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L509	@cond_branch
.L505:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L513:
	.align	2, 0
.L512:
	.word	gRfuLinkStatus
	.word	gRfuSlotStatusNI
	.word	gRfuSlotStatusUNI
	.word	0x8024
.Lfe25:
	.size	 rfu_LMAN_reflectCommunicationStatus,.Lfe25-rfu_LMAN_reflectCommunicationStatus
	.align	2, 0
	.type	 rfu_LMAN_checkNICommunicateStatus,function
	.thumb_func
rfu_LMAN_checkNICommunicateStatus:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L537
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0
	beq	.L515	@cond_branch
	ldr	r0, .L537+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L516	@cond_branch
	mov	r6, #0x0
.L520:
	ldr	r3, .L537+0x8
	lsl	r2, r6, #0x2
	add	r0, r2, r3
	ldr	r0, [r0]
	ldrh	r1, [r0]
	mov	r4, #0x80
	lsl	r4, r4, #0x8
	add	r0, r4, #0
	and	r1, r1, r0
	add	r7, r2, #0
	add	r0, r6, #0x1
	mov	r9, r0
	cmp	r1, #0
	beq	.L519	@cond_branch
	mov	r5, #0x0
	mov	r4, #0x0
	mov	r1, #0x1
	mov	r8, r1
	mov	sl, r3
.L525:
	add	r0, r7, r3
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1a]
	asr	r0, r0, r4
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L526	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldr	r1, .L537
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r1, #0x18]
	cmp	r0, r1
	bls	.L526	@cond_branch
	mov	r0, r8
	lsl	r0, r0, r4
	orr	r5, r5, r0
	lsl	r0, r5, #0x18
	lsr	r5, r0, #0x18
.L526:
	cmp	r5, #0
	beq	.L524	@cond_branch
	mov	r1, sl
	add	r0, r7, r1
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1a]
	add	r2, r5, #0
	eor	r2, r2, r0
	mov	r0, #0x20
	add	r1, r6, #0
	str	r3, [sp]
	bl	rfu_changeSendTarget
	ldr	r3, [sp]
.L524:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L525	@cond_branch
.L519:
	mov	r3, r9
	lsl	r0, r3, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L520	@cond_branch
.L516:
	ldr	r0, .L537+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0
	beq	.L515	@cond_branch
	mov	r6, #0x0
.L534:
	ldr	r1, .L537+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	ldrh	r0, [r2, #0x34]
	mov	r4, #0x80
	lsl	r4, r4, #0x8
	add	r1, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L533	@cond_branch
	ldr	r1, .L537
	ldrh	r0, [r2, #0x36]
	ldrh	r1, [r1, #0x18]
	cmp	r0, r1
	bls	.L533	@cond_branch
	add	r0, r6, #0
	bl	rfu_NI_stopReceivingData
.L533:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L534	@cond_branch
.L515:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L538:
	.align	2, 0
.L537:
	.word	lman
	.word	gRfuLinkStatus
	.word	gRfuSlotStatusNI
.Lfe26:
	.size	 rfu_LMAN_checkNICommunicateStatus,.Lfe26-rfu_LMAN_checkNICommunicateStatus
	.align	2, 0
	.globl	rfu_LMAN_setMSCCallback
	.type	 rfu_LMAN_setMSCCallback,function
	.thumb_func
rfu_LMAN_setMSCCallback:
	push	{lr}
	ldr	r1, .L540
	str	r0, [r1, #0x44]
	ldr	r0, .L540+0x4
	bl	rfu_setMSCCallback
	pop	{r0}
	bx	r0
.L541:
	.align	2, 0
.L540:
	.word	lman
	.word	rfu_LMAN_MSC_callback
.Lfe27:
	.size	 rfu_LMAN_setMSCCallback,.Lfe27-rfu_LMAN_setMSCCallback
	.align	2, 0
	.type	 rfu_LMAN_setLMANCallback,function
	.thumb_func
rfu_LMAN_setLMANCallback:
	ldr	r1, .L543
	str	r0, [r1, #0x40]
	bx	lr
.L544:
	.align	2, 0
.L543:
	.word	lman
.Lfe28:
	.size	 rfu_LMAN_setLMANCallback,.Lfe28-rfu_LMAN_setLMANCallback
	.align	2, 0
	.globl	rfu_LMAN_setLinkRecovery
	.type	 rfu_LMAN_setLinkRecovery,function
	.thumb_func
rfu_LMAN_setLinkRecovery:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	ldr	r0, .L548
	ldrb	r1, [r0, #0x9]
	add	r3, r0, #0
	cmp	r1, #0
	beq	.L546	@cond_branch
	cmp	r4, #0
	bne	.L546	@cond_branch
	add	r0, r0, #0x30
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L546	@cond_branch
	mov	r0, #0x5
	b	.L547
.L549:
	.align	2, 0
.L548:
	.word	lman
.L546:
	ldr	r2, .L550
	ldrh	r1, [r2]
	mov	r0, #0x0
	strh	r0, [r2]
	strb	r4, [r3, #0x9]
	strh	r5, [r3, #0x32]
	strh	r1, [r2]
	mov	r0, #0x0
.L547:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L551:
	.align	2, 0
.L550:
	.word	0x4000208
.Lfe29:
	.size	 rfu_LMAN_setLinkRecovery,.Lfe29-rfu_LMAN_setLinkRecovery
	.align	2, 0
	.type	 rfu_LMAN_setNIFailCounterLimit,function
	.thumb_func
rfu_LMAN_setNIFailCounterLimit:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L555
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x4]
	ldrb	r0, [r0, #0x5]
	orr	r0, r0, r1
	cmp	r0, #0
	bne	.L553	@cond_branch
	ldr	r0, .L555+0x4
	strh	r2, [r0, #0x18]
	mov	r0, #0x0
	b	.L554
.L556:
	.align	2, 0
.L555:
	.word	gRfuLinkStatus
	.word	lman
.L553:
	ldr	r1, .L557
	mov	r0, #0x6
	strh	r0, [r1, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	mov	r0, #0x6
.L554:
	pop	{r1}
	bx	r1
.L558:
	.align	2, 0
.L557:
	.word	lman
.Lfe30:
	.size	 rfu_LMAN_setNIFailCounterLimit,.Lfe30-rfu_LMAN_setNIFailCounterLimit
	.align	2, 0
	.type	 rfu_LMAN_setFastSearchParent,function
	.thumb_func
rfu_LMAN_setFastSearchParent:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r2, #0
	ldr	r1, .L564
	ldrb	r0, [r1, #0x4]
	sub	r0, r0, #0x9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bhi	.L560	@cond_branch
	mov	r0, #0x7
	strh	r0, [r1, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	rfu_LMAN_occureCallback
	mov	r0, #0x7
	b	.L563
.L565:
	.align	2, 0
.L564:
	.word	lman
.L560:
	cmp	r2, #0
	beq	.L561	@cond_branch
	mov	r0, #0x1
	strb	r0, [r1, #0xb]
	b	.L562
.L561:
	strb	r3, [r1, #0xb]
.L562:
	mov	r0, #0x0
.L563:
	pop	{r1}
	bx	r1
.Lfe31:
	.size	 rfu_LMAN_setFastSearchParent,.Lfe31-rfu_LMAN_setFastSearchParent
	.align	2, 0
	.type	 rfu_LMAN_managerChangeAgbClockMaster,function
	.thumb_func
rfu_LMAN_managerChangeAgbClockMaster:
	push	{lr}
	ldr	r1, .L568
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L567	@cond_branch
	ldrb	r0, [r1, #0x2]
	mov	r0, #0x0
	strb	r0, [r1, #0x2]
	mov	r0, #0x45
	mov	r1, #0x0
	bl	rfu_LMAN_occureCallback
.L567:
	pop	{r0}
	bx	r0
.L569:
	.align	2, 0
.L568:
	.word	lman
.Lfe32:
	.size	 rfu_LMAN_managerChangeAgbClockMaster,.Lfe32-rfu_LMAN_managerChangeAgbClockMaster
	.align	2, 0
	.globl	rfu_LMAN_requestChangeAgbClockMaster
	.type	 rfu_LMAN_requestChangeAgbClockMaster,function
	.thumb_func
rfu_LMAN_requestChangeAgbClockMaster:
	push	{lr}
	ldr	r1, .L574
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L571	@cond_branch
	mov	r0, #0x45
	mov	r1, #0x0
	bl	rfu_LMAN_occureCallback
	b	.L572
.L575:
	.align	2, 0
.L574:
	.word	lman
.L571:
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0x1
	bne	.L572	@cond_branch
	ldrb	r0, [r1, #0x2]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
.L572:
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 rfu_LMAN_requestChangeAgbClockMaster,.Lfe33-rfu_LMAN_requestChangeAgbClockMaster
	.align	2, 0
	.globl	rfu_LMAN_forceChangeSP
	.type	 rfu_LMAN_forceChangeSP,function
	.thumb_func
rfu_LMAN_forceChangeSP:
	push	{lr}
	ldr	r0, .L589
	ldrb	r1, [r0, #0x7]
	add	r2, r0, #0
	cmp	r1, #0
	beq	.L577	@cond_branch
	ldrb	r0, [r2, #0x4]
	sub	r0, r0, #0x5
	cmp	r0, #0x6
	bhi	.L577	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L589+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L590:
	.align	2, 0
.L589:
	.word	lman
	.word	.L586
	.align	2, 0
	.align	2, 0
.L586:
	.word	.L579
	.word	.L580
	.word	.L582
	.word	.L582
	.word	.L584
	.word	.L584
	.word	.L585
.L579:
	mov	r0, #0x3
	strb	r0, [r2, #0x7]
	mov	r0, #0x9
	b	.L588
.L580:
	mov	r0, #0x2
	strb	r0, [r2, #0x7]
	mov	r0, #0x1
	strh	r0, [r2, #0x1a]
	b	.L577
.L582:
	mov	r0, #0x2
	strb	r0, [r2, #0x7]
	b	.L577
.L584:
	mov	r0, #0x28
	strh	r0, [r2, #0x1a]
	b	.L577
.L585:
	mov	r0, #0x28
	strh	r0, [r2, #0x1a]
	mov	r0, #0xa
.L588:
	strb	r0, [r2, #0x4]
.L577:
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 rfu_LMAN_forceChangeSP,.Lfe34-rfu_LMAN_forceChangeSP
	.comm	lman, 72	@ 72
.text
	.align	2, 0

