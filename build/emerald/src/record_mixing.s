@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gUnknown_02039F9C,object
	.size	 gUnknown_02039F9C,120
gUnknown_02039F9C:
	.short	0x0
	.space	16
	.space	18
	.space	20
	.space	56
	.space	8
	.align	2, 0
	.type	 sReceivedRecords,object
	.size	 sReceivedRecords,4
sReceivedRecords:
	.word	0x0
	.align	2, 0
	.type	 sSentRecord,object
	.size	 sSentRecord,4
sSentRecord:
	.word	0x0
	.section .rodata
	.type	 gUnknown_0858CF8C,object
gUnknown_0858CF8C:
	.byte	0x1
	.byte	0x0
	.size	 gUnknown_0858CF8C,2
	.type	 gUnknown_0858CF8E,object
gUnknown_0858CF8E:
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.size	 gUnknown_0858CF8E,6
	.type	 gUnknown_0858CF94,object
gUnknown_0858CF94:
	.byte	0x1
	.byte	0x0
	.byte	0x3
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x1
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.byte	0x1
	.byte	0x0
	.byte	0x3
	.byte	0x2
	.byte	0x1
	.byte	0x0
	.size	 gUnknown_0858CF94,36
	.type	 gUnknown_0858CFB8,object
	.size	 gUnknown_0858CFB8,6
gUnknown_0858CFB8:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.type	 gUnknown_0858CFBE,object
	.size	 gUnknown_0858CFBE,12
gUnknown_0858CFBE:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x2
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0x3
	.byte	0x2
	.byte	0x1
.text
	.align	2, 0
	.globl	RecordMixingPlayerSpotTriggered
	.type	 RecordMixingPlayerSpotTriggered,function
	.thumb_func
RecordMixingPlayerSpotTriggered:
	push	{lr}
	ldr	r0, .L3
	bl	CreateTask_EnterCableClubSeat
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	Task_RecordMixing_Main
.Lfe1:
	.size	 RecordMixingPlayerSpotTriggered,.Lfe1-RecordMixingPlayerSpotTriggered
	.align	2, 0
	.type	 SetSrcLookupPointers,function
	.thumb_func
SetSrcLookupPointers:
	push	{r4, lr}
	ldr	r2, .L6
	ldr	r0, .L6+0x4
	ldr	r1, [r0]
	ldr	r3, .L6+0x8
	add	r0, r1, r3
	str	r0, [r2]
	ldr	r2, .L6+0xc
	ldr	r4, .L6+0x10
	add	r0, r1, r4
	str	r0, [r2]
	ldr	r2, .L6+0x14
	ldr	r3, .L6+0x18
	add	r0, r1, r3
	str	r0, [r2]
	ldr	r2, .L6+0x1c
	ldr	r4, .L6+0x20
	add	r0, r1, r4
	str	r0, [r2]
	ldr	r2, .L6+0x24
	ldr	r3, .L6+0x28
	add	r0, r1, r3
	str	r0, [r2]
	ldr	r2, .L6+0x2c
	ldr	r0, .L6+0x30
	str	r0, [r2]
	ldr	r2, .L6+0x34
	ldr	r0, .L6+0x38
	ldr	r0, [r0]
	ldr	r4, .L6+0x3c
	add	r3, r0, r4
	str	r3, [r2]
	ldr	r2, .L6+0x40
	ldr	r4, .L6+0x44
	add	r1, r1, r4
	str	r1, [r2]
	ldr	r1, .L6+0x48
	add	r0, r0, #0x74
	str	r0, [r1]
	ldr	r0, .L6+0x4c
	str	r3, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	sSecretBasesSave
	.word	gSaveBlock1Ptr
	.word	0x207c
	.word	sTvShowsSave
	.word	0x244c
	.word	sPokeNewsSave
	.word	0x27d0
	.word	sOldManSave
	.word	0x2aa8
	.word	sEasyChatPairsSave
	.word	0x2ae8
	.word	gUnknown_03001148
	.word	gUnknown_02039F9C
	.word	sBattleTowerSave
	.word	gSaveBlock2Ptr
	.word	0x5d4
	.word	sLilycoveLadySave
	.word	0x3010
	.word	sApprenticesSave
	.word	sBattleTowerSave_Duplicate
.Lfe2:
	.size	 SetSrcLookupPointers,.Lfe2-SetSrcLookupPointers
	.align	2, 0
	.type	 PrepareUnknownExchangePacket,function
	.thumb_func
PrepareUnknownExchangePacket:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L10
	ldr	r1, [r0]
	mov	r4, #0xc8
	lsl	r4, r4, #0x2
	add	r0, r5, #0
	add	r2, r4, #0
	bl	memcpy
	add	r4, r5, r4
	ldr	r0, .L10+0x4
	ldr	r1, [r0]
	mov	r2, #0xe1
	lsl	r2, r2, #0x2
	add	r0, r4, #0
	bl	memcpy
	add	r0, r4, #0
	bl	sub_80F14F8
	ldr	r1, .L10+0x8
	add	r0, r5, r1
	ldr	r1, .L10+0xc
	ldr	r1, [r1]
	mov	r2, #0x40
	bl	memcpy
	ldr	r2, .L10+0x10
	add	r0, r5, r2
	ldr	r1, .L10+0x14
	ldr	r1, [r1]
	mov	r2, #0x40
	bl	memcpy
	ldr	r1, .L10+0x18
	add	r0, r5, r1
	ldr	r1, .L10+0x1c
	ldr	r1, [r1]
	mov	r2, #0x28
	bl	memcpy
	ldr	r2, .L10+0x20
	add	r0, r5, r2
	bl	sub_80E89F8
	ldr	r0, .L10+0x24
	ldr	r0, [r0]
	ldr	r2, .L10+0x28
	add	r1, r5, r2
	bl	EmeraldBattleTowerRecordToRuby
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L9	@cond_branch
	bl	GetRecordMixingGift
	ldr	r2, .L10+0x2c
	add	r1, r5, r2
	strh	r0, [r1]
.L9:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L11:
	.align	2, 0
.L10:
	.word	sSecretBasesSave
	.word	sTvShowsSave
	.word	0x6a4
	.word	sPokeNewsSave
	.word	0x6e4
	.word	sOldManSave
	.word	0x724
	.word	sEasyChatPairsSave
	.word	0x74c
	.word	sBattleTowerSave
	.word	0x7c4
	.word	0x868
.Lfe3:
	.size	 PrepareUnknownExchangePacket,.Lfe3-PrepareUnknownExchangePacket
	.align	2, 0
	.type	 PrepareExchangePacketForRubySapphire,function
	.thumb_func
PrepareExchangePacketForRubySapphire:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L14
	ldr	r1, [r0]
	mov	r4, #0xc8
	lsl	r4, r4, #0x2
	add	r0, r5, #0
	add	r2, r4, #0
	bl	memcpy
	add	r0, r5, #0
	bl	ClearJapaneseSecretBases
	add	r4, r5, r4
	ldr	r0, .L14+0x4
	ldr	r1, [r0]
	mov	r2, #0xe1
	lsl	r2, r2, #0x2
	add	r0, r4, #0
	bl	memcpy
	add	r0, r4, #0
	bl	sub_80F1208
	ldr	r1, .L14+0x8
	add	r0, r5, r1
	ldr	r1, .L14+0xc
	ldr	r1, [r1]
	mov	r2, #0x40
	bl	memcpy
	ldr	r2, .L14+0x10
	add	r4, r5, r2
	ldr	r0, .L14+0x14
	ldr	r1, [r0]
	add	r0, r4, #0
	mov	r2, #0x40
	bl	memcpy
	add	r0, r4, #0
	bl	sub_8120B70
	ldr	r1, .L14+0x18
	add	r0, r5, r1
	ldr	r1, .L14+0x1c
	ldr	r1, [r1]
	mov	r2, #0x28
	bl	memcpy
	ldr	r2, .L14+0x20
	add	r4, r5, r2
	add	r0, r4, #0
	bl	sub_80E89F8
	add	r0, r4, #0
	bl	SanitizeDayCareMailForRuby
	ldr	r0, .L14+0x24
	ldr	r0, [r0]
	ldr	r1, .L14+0x28
	add	r4, r5, r1
	add	r1, r4, #0
	bl	EmeraldBattleTowerRecordToRuby
	add	r0, r4, #0
	bl	SanitizeRubyBattleTowerRecord
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L13	@cond_branch
	bl	GetRecordMixingGift
	ldr	r2, .L14+0x2c
	add	r1, r5, r2
	strh	r0, [r1]
.L13:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	sSecretBasesSave
	.word	sTvShowsSave
	.word	0x6a4
	.word	sPokeNewsSave
	.word	0x6e4
	.word	sOldManSave
	.word	0x724
	.word	sEasyChatPairsSave
	.word	0x74c
	.word	sBattleTowerSave
	.word	0x7c4
	.word	0x868
.Lfe4:
	.size	 PrepareExchangePacketForRubySapphire,.Lfe4-PrepareExchangePacketForRubySapphire
	.align	2, 0
	.type	 PrepareExchangePacket,function
	.thumb_func
PrepareExchangePacket:
	push	{r4, r5, lr}
	bl	SetPlayerSecretBaseParty
	bl	sub_80F0BB8
	bl	SetSrcLookupPointers
	bl	Link_AnyPartnersPlayingRubyOrSapphire
	cmp	r0, #0
	beq	.L17	@cond_branch
	bl	LinkDummy_Return2
	cmp	r0, #0
	bne	.L18	@cond_branch
	ldr	r0, .L22
	ldr	r0, [r0]
	bl	PrepareUnknownExchangePacket
	b	.L20
.L23:
	.align	2, 0
.L22:
	.word	sSentRecord
.L18:
	ldr	r0, .L24
	ldr	r0, [r0]
	bl	PrepareExchangePacketForRubySapphire
	b	.L20
.L25:
	.align	2, 0
.L24:
	.word	sSentRecord
.L17:
	ldr	r5, .L26
	ldr	r0, [r5]
	ldr	r1, .L26+0x4
	ldr	r1, [r1]
	mov	r4, #0xc8
	lsl	r4, r4, #0x2
	add	r2, r4, #0
	bl	memcpy
	ldr	r0, [r5]
	add	r0, r0, r4
	ldr	r1, .L26+0x8
	ldr	r1, [r1]
	mov	r2, #0xe1
	lsl	r2, r2, #0x2
	bl	memcpy
	ldr	r0, [r5]
	ldr	r1, .L26+0xc
	add	r0, r0, r1
	ldr	r1, .L26+0x10
	ldr	r1, [r1]
	mov	r2, #0x40
	bl	memcpy
	ldr	r0, [r5]
	ldr	r2, .L26+0x14
	add	r0, r0, r2
	ldr	r1, .L26+0x18
	ldr	r1, [r1]
	mov	r2, #0x40
	bl	memcpy
	ldr	r0, [r5]
	ldr	r1, .L26+0x1c
	add	r0, r0, r1
	ldr	r1, .L26+0x20
	ldr	r1, [r1]
	mov	r2, #0x40
	bl	memcpy
	ldr	r0, [r5]
	ldr	r2, .L26+0x24
	add	r0, r0, r2
	ldr	r1, .L26+0x28
	ldr	r1, [r1]
	mov	r2, #0x28
	bl	memcpy
	ldr	r0, [r5]
	ldr	r1, .L26+0x2c
	add	r0, r0, r1
	bl	sub_80E89F8
	ldr	r0, [r5]
	ldr	r4, .L26+0x30
	add	r0, r0, r4
	ldr	r1, .L26+0x34
	ldr	r1, [r1]
	mov	r2, #0xec
	bl	memcpy
	ldr	r0, [r5]
	add	r0, r0, r4
	bl	SanitizeEmeraldBattleTowerRecord
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L21	@cond_branch
	bl	GetRecordMixingGift
	ldr	r1, [r5]
	mov	r2, #0x8b
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	strh	r0, [r1]
.L21:
	ldr	r0, [r5]
	ldr	r1, .L26+0x38
	add	r0, r0, r1
	ldr	r1, .L26+0x3c
	ldr	r1, [r1]
	bl	GetSavedApprentices
	ldr	r0, [r5]
	ldr	r2, .L26+0x40
	add	r0, r0, r2
	bl	GetPlayerHallRecords
.L20:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	sSentRecord
	.word	sSecretBasesSave
	.word	sTvShowsSave
	.word	0x6a4
	.word	sPokeNewsSave
	.word	0x6e4
	.word	sOldManSave
	.word	0x8b4
	.word	sLilycoveLadySave
	.word	0x724
	.word	sEasyChatPairsSave
	.word	0x74c
	.word	0x7c4
	.word	sBattleTowerSave
	.word	0x8f4
	.word	sApprenticesSave
	.word	0x97c
.Lfe5:
	.size	 PrepareExchangePacket,.Lfe5-PrepareExchangePacket
	.align	2, 0
	.type	 ReceiveExchangePacket,function
	.thumb_func
ReceiveExchangePacket:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r4, r0, #0
	bl	Link_AnyPartnersPlayingRubyOrSapphire
	cmp	r0, #0
	beq	.L29	@cond_branch
	ldr	r5, .L31
	ldr	r0, [r5]
	mov	r1, #0xc8
	lsl	r1, r1, #0x2
	mov	r8, r1
	add	r0, r0, r8
	bl	sub_80E7B2C
	ldr	r0, [r5]
	mov	r6, #0x8d
	lsl	r6, r6, #0x4
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveSecretBasesData
	ldr	r3, [r5]
	ldr	r1, .L31+0x4
	add	r0, r3, r1
	add	r3, r3, r8
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveDaycareMailData
	ldr	r0, [r5]
	ldr	r1, .L31+0x8
	add	r0, r0, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveBattleTowerData
	ldr	r0, [r5]
	add	r0, r0, r8
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveTvShowsData
	ldr	r0, [r5]
	ldr	r1, .L31+0xc
	add	r0, r0, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceivePokeNewsData
	ldr	r0, [r5]
	ldr	r1, .L31+0x10
	add	r0, r0, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveOldManData
	ldr	r0, [r5]
	ldr	r1, .L31+0x14
	add	r0, r0, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveEasyChatPairsData
	ldr	r0, [r5]
	ldr	r1, .L31+0x18
	add	r0, r0, r1
	add	r1, r4, #0
	bl	ReceiveGiftItem
	b	.L30
.L32:
	.align	2, 0
.L31:
	.word	sReceivedRecords
	.word	0x74c
	.word	0x7c4
	.word	0x6a4
	.word	0x6e4
	.word	0x724
	.word	0x868
.L29:
	ldr	r5, .L33
	ldr	r0, [r5]
	mov	r1, #0xc8
	lsl	r1, r1, #0x2
	mov	r8, r1
	add	r0, r0, r8
	bl	sub_80E7B2C
	ldr	r0, [r5]
	ldr	r6, .L33+0x4
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveSecretBasesData
	ldr	r0, [r5]
	add	r0, r0, r8
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveTvShowsData
	ldr	r0, [r5]
	ldr	r1, .L33+0x8
	add	r0, r0, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceivePokeNewsData
	ldr	r0, [r5]
	ldr	r1, .L33+0xc
	add	r0, r0, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveOldManData
	ldr	r0, [r5]
	ldr	r1, .L33+0x10
	add	r0, r0, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveEasyChatPairsData
	ldr	r3, [r5]
	ldr	r1, .L33+0x14
	add	r0, r3, r1
	add	r3, r3, r8
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveDaycareMailData
	ldr	r0, [r5]
	ldr	r1, .L33+0x18
	add	r0, r0, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveBattleTowerData
	ldr	r0, [r5]
	mov	r1, #0x8b
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r1, r4, #0
	bl	ReceiveGiftItem
	ldr	r0, [r5]
	ldr	r1, .L33+0x1c
	add	r0, r0, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveLilycoveLadyData
	ldr	r0, [r5]
	ldr	r1, .L33+0x20
	add	r0, r0, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveApprenticeData
	ldr	r0, [r5]
	ldr	r1, .L33+0x24
	add	r0, r0, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	ReceiveRankingHallRecords
.L30:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	sReceivedRecords
	.word	0xae4
	.word	0x6a4
	.word	0x6e4
	.word	0x724
	.word	0x74c
	.word	0x7c4
	.word	0x8b4
	.word	0x8f4
	.word	0x97c
.Lfe6:
	.size	 ReceiveExchangePacket,.Lfe6-ReceiveExchangePacket
	.align	2, 0
	.type	 PrintTextOnRecordMixing,function
	.thumb_func
PrintTextOnRecordMixing:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 PrintTextOnRecordMixing,.Lfe7-PrintTextOnRecordMixing
	.align	2, 0
	.type	 Task_RecordMixing_SoundEffect,function
	.thumb_func
Task_RecordMixing_SoundEffect:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L38
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x32
	bne	.L37	@cond_branch
	mov	r0, #0xe2
	bl	PlaySE
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
.L37:
	pop	{r4}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	gTasks
.Lfe8:
	.size	 Task_RecordMixing_SoundEffect,.Lfe8-Task_RecordMixing_SoundEffect
	.align	2, 0
	.type	 Task_RecordMixing_Main,function
	.thumb_func
Task_RecordMixing_Main:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L56
	add	r5, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x5
	bls	.LCB785
	b	.L41	@long jump
.LCB785:
	lsl	r0, r0, #0x2
	ldr	r1, .L56+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L57:
	.align	2, 0
.L56:
	.word	gTasks+0x8
	.word	.L54
	.align	2, 0
	.align	2, 0
.L54:
	.word	.L42
	.word	.L43
	.word	.L45
	.word	.L46
	.word	.L49
	.word	.L51
.L42:
	ldr	r4, .L58
	ldr	r0, .L58+0x4
	bl	Alloc
	str	r0, [r4]
	ldr	r4, .L58+0x8
	ldr	r0, .L58+0xc
	bl	Alloc
	str	r0, [r4]
	ldr	r0, .L58+0x10
	ldrb	r0, [r0]
	bl	SetLocalLinkPlayerId
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	mov	r1, #0x1
	bl	VarSet
	ldr	r1, .L58+0x14
	mov	r0, #0x0
	strb	r0, [r1]
	bl	PrepareExchangePacket
	bl	CreateRecordMixingLights
	mov	r0, #0x1
	strh	r0, [r5]
	ldr	r0, .L58+0x18
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	ldr	r0, .L58+0x1c
	mov	r1, #0x51
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x1e]
	b	.L41
.L59:
	.align	2, 0
.L58:
	.word	sSentRecord
	.word	0xae4
	.word	sReceivedRecords
	.word	0x2b90
	.word	gSpecialVar_0x8005
	.word	gUnknown_03001130
	.word	Task_MixingRecordsRecv
	.word	Task_RecordMixing_SoundEffect
.L43:
	ldr	r2, .L60
	mov	r0, #0x14
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L41	@cond_branch
	mov	r0, #0x2
	strh	r0, [r5]
	ldr	r0, .L60+0x4
	bl	FlagSet
	bl	DestroyRecordMixingLights
	ldrb	r0, [r5, #0x1e]
	bl	DestroyTask
	b	.L41
.L61:
	.align	2, 0
.L60:
	.word	gTasks
	.word	0x894
.L45:
	ldr	r0, .L62
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	mov	r0, #0x3
	strh	r0, [r5]
	mov	r0, #0xe0
	bl	PlaySE
	b	.L41
.L63:
	.align	2, 0
.L62:
	.word	Task_DoRecordMixing
.L46:
	ldr	r2, .L64
	mov	r0, #0x14
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r4, [r0, #0x4]
	cmp	r4, #0
	bne	.L41	@cond_branch
	mov	r0, #0x4
	strh	r0, [r5]
	ldr	r0, .L64+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L48	@cond_branch
	bl	CreateTask_ReestablishCableClubLink
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
.L48:
	ldr	r0, .L64+0x8
	bl	PrintTextOnRecordMixing
	strh	r4, [r5, #0x10]
	b	.L41
.L65:
	.align	2, 0
.L64:
	.word	gTasks
	.word	gWirelessCommType
	.word	gText_RecordMixingComplete
.L49:
	ldrh	r0, [r5, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3c
	ble	.L41	@cond_branch
	mov	r0, #0x5
	strh	r0, [r5]
	b	.L41
.L51:
	ldr	r2, .L66
	mov	r0, #0x14
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L41	@cond_branch
	ldr	r0, .L66+0x4
	ldr	r0, [r0]
	bl	Free
	ldr	r0, .L66+0x8
	ldr	r0, [r0]
	bl	Free
	bl	sub_808729C
	ldr	r0, .L66+0xc
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L53	@cond_branch
	ldr	r0, .L66+0x10
	mov	r1, #0xa
	bl	CreateTask
.L53:
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	add	r0, r4, #0
	bl	DestroyTask
	bl	EnableBothScriptContexts
.L41:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L67:
	.align	2, 0
.L66:
	.word	gTasks
	.word	sReceivedRecords
	.word	sSentRecord
	.word	gWirelessCommType
	.word	Task_ReturnToFieldRecordMixing
.Lfe9:
	.size	 Task_RecordMixing_Main,.Lfe9-Task_RecordMixing_Main
	.align	2, 0
	.type	 Task_MixingRecordsRecv,function
	.thumb_func
Task_MixingRecordsRecv:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r6, .L96
	add	r5, r0, r6
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	cmp	r1, #0x64
	beq	.L71	@cond_branch
	cmp	r1, #0x64
	bgt	.L92	@cond_branch
	cmp	r1, #0x1
	bne	.LCB1054
	b	.L83	@long jump
.LCB1054:
	cmp	r1, #0x1
	bgt	.L93	@cond_branch
	cmp	r1, #0
	beq	.L70	@cond_branch
	b	.L69
.L97:
	.align	2, 0
.L96:
	.word	gTasks
.L93:
	cmp	r1, #0x2
	bne	.LCB1069
	b	.L85	@long jump
.LCB1069:
	cmp	r1, #0x5
	bne	.LCB1071
	b	.L88	@long jump
.LCB1071:
	b	.L69
.L92:
	cmp	r1, #0xc9
	beq	.L77	@cond_branch
	cmp	r1, #0xc9
	bgt	.L94	@cond_branch
	cmp	r1, #0x65
	beq	.L73	@cond_branch
	b	.L69
.L94:
	ldr	r0, .L98
	cmp	r1, r0
	beq	.L79	@cond_branch
	add	r0, r0, #0x63
	cmp	r1, r0
	beq	.L81	@cond_branch
	b	.L69
.L99:
	.align	2, 0
.L98:
	.word	0x12d
.L70:
	ldr	r0, .L100
	bl	PrintTextOnRecordMixing
	mov	r0, #0xe1
	lsl	r0, r0, #0x3
	strh	r0, [r5, #0x18]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	bl	ClearLinkCallback_2
	b	.L69
.L101:
	.align	2, 0
.L100:
	.word	gText_MixingRecords
.L71:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bgt	.LCB1127
	b	.L69	@long jump
.LCB1127:
	mov	r0, #0x0
	strh	r0, [r5, #0x20]
	mov	r0, #0x65
	b	.L95
.L73:
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsLinkMaster
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L74	@cond_branch
	bl	GetSavedPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	beq	.LCB1152
	b	.L69	@long jump
.LCB1152:
	mov	r0, #0x15
	bl	PlaySE
	mov	r1, #0x0
	mov	r0, #0xc9
	strh	r0, [r5, #0x8]
	strh	r1, [r5, #0x20]
	b	.L69
.L74:
	mov	r0, #0x16
	bl	PlaySE
	ldr	r0, .L102
	b	.L95
.L103:
	.align	2, 0
.L102:
	.word	0x12d
.L77:
	bl	GetSavedPlayerCount
	add	r4, r0, #0
	bl	GetLinkPlayerCount_2
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.LCB1188
	b	.L69	@long jump
.LCB1188:
	ldrh	r4, [r5, #0x20]
	add	r4, r4, #0x1
	strh	r4, [r5, #0x20]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	lsl	r1, r1, #0x1
	cmp	r4, r1
	bgt	.LCB1202
	b	.L69	@long jump
.LCB1202:
	bl	CheckShouldAdvanceLinkState
	mov	r0, #0x1
	b	.L95
.L79:
	bl	GetSavedPlayerCount
	add	r4, r0, #0
	bl	GetLinkPlayerCount_2
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.LCB1218
	b	.L69	@long jump
.LCB1218:
	mov	r0, #0x1
	b	.L95
.L81:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bgt	.LCB1230
	b	.L69	@long jump
.LCB1230:
	mov	r0, #0x1
	strh	r0, [r5, #0x8]
	mov	r0, #0x0
	strh	r0, [r5, #0x20]
	b	.L69
.L83:
	ldr	r0, .L104
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB1244
	b	.L69	@long jump
.LCB1244:
	ldr	r4, .L104+0x4
	bl	GetMultiplayerId_
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x5
	b	.L95
.L105:
	.align	2, 0
.L104:
	.word	gReceivedRemoteLinkPlayers
	.word	gStringVar1
.L85:
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	strh	r0, [r5, #0x14]
	strh	r1, [r5, #0x8]
	bl	GetMultiplayerId_
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x12]
	ldr	r0, .L106
	str	r0, [r5]
	bl	Link_AnyPartnersPlayingRubyOrSapphire
	cmp	r0, #0
	beq	.L86	@cond_branch
	ldr	r0, .L106+0x4
	ldr	r0, [r0]
	add	r1, r5, #0
	add	r1, r1, #0xc
	bl	StorePtrInTaskData
	ldr	r0, .L106+0x8
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x1c]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r0, r1, r6
	strh	r4, [r0, #0x8]
	ldr	r0, .L106+0xc
	ldr	r0, [r0]
	add	r1, r6, r1
	add	r1, r1, #0x12
	bl	StorePtrInTaskData
	ldr	r1, .L106+0x10
	mov	r0, #0x8d
	lsl	r0, r0, #0x4
	str	r0, [r1]
	b	.L69
.L107:
	.align	2, 0
.L106:
	.word	Task_SendPacket
	.word	sSentRecord
	.word	Task_CopyReceiveBuffer
	.word	sReceivedRecords
	.word	sRecordStructSize
.L86:
	ldr	r0, .L108
	ldr	r0, [r0]
	add	r1, r5, #0
	add	r1, r1, #0xc
	bl	StorePtrInTaskData
	ldr	r0, .L108+0x4
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x1c]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r0, r1, r6
	strh	r4, [r0, #0x8]
	ldr	r0, .L108+0x8
	ldr	r0, [r0]
	add	r1, r6, r1
	add	r1, r1, #0x12
	bl	StorePtrInTaskData
	ldr	r1, .L108+0xc
	ldr	r0, .L108+0x10
	str	r0, [r1]
	b	.L69
.L109:
	.align	2, 0
.L108:
	.word	sSentRecord
	.word	Task_CopyReceiveBuffer
	.word	sReceivedRecords
	.word	sRecordStructSize
	.word	0xae4
.L88:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3c
	ble	.L69	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x1c]
	mov	r0, #0x2
.L95:
	strh	r0, [r5, #0x8]
.L69:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 Task_MixingRecordsRecv,.Lfe10-Task_MixingRecordsRecv
	.align	2, 0
	.type	 Task_SendPacket,function
	.thumb_func
Task_SendPacket:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L124
	add	r5, r1, r0
	mov	r2, #0x8
	ldrsh	r1, [r5, r2]
	add	r2, r0, #0
	cmp	r1, #0x4
	bhi	.L111	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L124+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L125:
	.align	2, 0
.L124:
	.word	gTasks
	.word	.L121
	.align	2, 0
	.align	2, 0
.L121:
	.word	.L112
	.word	.L113
	.word	.L111
	.word	.L116
	.word	.L119
.L112:
	add	r0, r5, #0
	add	r0, r0, #0xc
	bl	LoadPtrFromTaskData
	add	r1, r0, #0
	mov	r0, #0x10
	ldrsh	r2, [r5, r0]
	mov	r0, #0xc8
	mul	r0, r0, r2
	add	r1, r1, r0
	ldr	r0, .L126
	mov	r2, #0xc8
	bl	memcpy
	b	.L123
.L127:
	.align	2, 0
.L126:
	.word	gBlockSendBuffer
.L113:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L123	@cond_branch
	mov	r0, #0x1
	bl	SendBlockRequest
	b	.L123
.L116:
	ldrh	r0, [r5, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x10]
	mov	r1, #0x10
	ldrsh	r4, [r5, r1]
	ldr	r0, .L128
	ldr	r0, [r0]
	mov	r1, #0xc8
	bl	__udivsi3
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L117	@cond_branch
.L123:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L111
.L129:
	.align	2, 0
.L128:
	.word	sRecordStructSize
.L117:
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	b	.L111
.L119:
	mov	r1, #0x1c
	ldrsh	r0, [r5, r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.L111	@cond_branch
	ldr	r0, .L130
	str	r0, [r5]
.L111:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L131:
	.align	2, 0
.L130:
	.word	Task_SendPacket_SwitchToReceive
.Lfe11:
	.size	 Task_SendPacket,.Lfe11-Task_SendPacket
	.align	2, 0
	.type	 Task_CopyReceiveBuffer,function
	.thumb_func
Task_CopyReceiveBuffer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	lsl	r0, r0, #0x2
	ldr	r1, [sp]
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L144
	add	r0, r0, r1
	mov	sl, r0
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r2, #0x0
	str	r2, [sp, #0x8]
	bl	GetLinkPlayerCountAsBitFlags
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, [sp, #0x4]
	cmp	r3, r0
	bne	.L133	@cond_branch
	mov	r4, #0x0
	mov	r8, r4
	b	.L134
.L145:
	.align	2, 0
.L144:
	.word	gTasks
.L137:
	ldr	r1, [sp, #0x4]
	mov	r0, r8
	asr	r1, r1, r0
	mov	r0, #0x1
	and	r1, r1, r0
	mov	r2, #0x1
	add	r2, r2, r8
	mov	r9, r2
	cmp	r1, #0
	beq	.L136	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x12
	bl	LoadPtrFromTaskData
	mov	r3, r9
	lsl	r4, r3, #0x1
	mov	r5, sl
	add	r5, r5, #0x8
	add	r4, r5, r4
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	mov	r7, #0xc8
	mul	r1, r1, r7
	add	r0, r0, r1
	ldr	r3, .L146
	ldr	r1, [r3]
	mov	r2, r8
	mul	r2, r2, r1
	add	r1, r2, #0
	add	r6, r0, r1
	mov	r0, r8
	bl	GetPlayerRecvBuffer
	add	r1, r0, #0
	mov	r3, #0x0
	ldrsh	r2, [r4, r3]
	add	r0, r2, #0x1
	mul	r0, r0, r7
	ldr	r4, .L146
	ldr	r3, [r4]
	cmp	r0, r3
	bls	.L139	@cond_branch
	mul	r2, r2, r7
	sub	r2, r3, r2
	add	r0, r6, #0
	bl	memcpy
	b	.L140
.L147:
	.align	2, 0
.L146:
	.word	sRecordStructSize
.L139:
	add	r0, r6, #0
	mov	r2, #0xc8
	bl	memcpy
.L140:
	mov	r0, r8
	bl	ResetBlockReceivedFlag
	mov	r0, r9
	lsl	r1, r0, #0x1
	add	r1, r5, r1
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	mov	r2, #0x0
	ldrsh	r4, [r1, r2]
	ldr	r3, .L148
	ldr	r0, [r3]
	mov	r1, #0xc8
	bl	__udivsi3
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L136	@cond_branch
	ldr	r0, [sp, #0x8]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
.L136:
	mov	r4, r9
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L134:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r8, r0
	bcc	.L137	@cond_branch
	ldr	r2, .L148+0x4
	mov	r0, sl
	mov	r3, #0x8
	ldrsh	r1, [r0, r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
.L133:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, [sp, #0x8]
	cmp	r4, r0
	bne	.L143	@cond_branch
	ldr	r0, [sp]
	bl	DestroyTask
.L143:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L149:
	.align	2, 0
.L148:
	.word	sRecordStructSize
	.word	gTasks
.Lfe12:
	.size	 Task_CopyReceiveBuffer,.Lfe12-Task_CopyReceiveBuffer
	.align	2, 0
	.type	 sub_80E776C,function
	.thumb_func
sub_80E776C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	ldr	r2, .L152
	add	r0, r0, r2
	mov	r4, #0x1c
	ldrsh	r1, [r0, r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L151	@cond_branch
	add	r0, r3, #0
	bl	DestroyTask
.L151:
	pop	{r4}
	pop	{r0}
	bx	r0
.L153:
	.align	2, 0
.L152:
	.word	gTasks
.Lfe13:
	.size	 sub_80E776C,.Lfe13-sub_80E776C
	.align	2, 0
	.type	 Task_ReceivePacket,function
	.thumb_func
Task_ReceivePacket:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L156
	add	r1, r1, r0
	ldr	r0, .L156+0x4
	str	r0, [r1]
	ldr	r0, .L156+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L155	@cond_branch
	mov	r2, #0x12
	ldrsh	r0, [r1, r2]
	bl	ReceiveExchangePacket
.L155:
	pop	{r0}
	bx	r0
.L157:
	.align	2, 0
.L156:
	.word	gTasks
	.word	sub_80E776C
	.word	gUnknown_03001130
.Lfe14:
	.size	 Task_ReceivePacket,.Lfe14-Task_ReceivePacket
	.align	2, 0
	.type	 Task_SendPacket_SwitchToReceive,function
	.thumb_func
Task_SendPacket_SwitchToReceive:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L159
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L159+0x4
	str	r0, [r1]
	ldr	r1, .L159+0x8
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L160:
	.align	2, 0
.L159:
	.word	gTasks
	.word	Task_ReceivePacket
	.word	gUnknown_03001130
.Lfe15:
	.size	 Task_SendPacket_SwitchToReceive,.Lfe15-Task_SendPacket_SwitchToReceive
	.align	2, 0
	.type	 LoadPtrFromTaskData,function
	.thumb_func
LoadPtrFromTaskData:
	add	r1, r0, #0
	ldrh	r0, [r1]
	ldrh	r1, [r1, #0x2]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	bx	lr
.Lfe16:
	.size	 LoadPtrFromTaskData,.Lfe16-LoadPtrFromTaskData
	.align	2, 0
	.type	 StorePtrInTaskData,function
	.thumb_func
StorePtrInTaskData:
	strh	r0, [r1]
	lsr	r0, r0, #0x10
	strh	r0, [r1, #0x2]
	bx	lr
.Lfe17:
	.size	 StorePtrInTaskData,.Lfe17-StorePtrInTaskData
	.align	2, 0
	.type	 GetMultiplayerId_,function
	.thumb_func
GetMultiplayerId_:
	push	{lr}
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 GetMultiplayerId_,.Lfe18-GetMultiplayerId_
	.align	2, 0
	.type	 GetPlayerRecvBuffer,function
	.thumb_func
GetPlayerRecvBuffer:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x10
	ldr	r1, .L165
	add	r0, r0, r1
	bx	lr
.L166:
	.align	2, 0
.L165:
	.word	gBlockRecvBuffer
.Lfe19:
	.size	 GetPlayerRecvBuffer,.Lfe19-GetPlayerRecvBuffer
	.align	2, 0
	.type	 ShufflePlayerIndices,function
	.thumb_func
ShufflePlayerIndices:
	push	{r4, lr}
	add	r4, r0, #0
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L175	@cond_branch
	cmp	r0, #0x3
	bhi	.L189	@cond_branch
	cmp	r0, #0x2
	beq	.L169	@cond_branch
	b	.L168
.L189:
	cmp	r0, #0x4
	beq	.L181	@cond_branch
	b	.L168
.L169:
	mov	r3, #0x0
	ldr	r2, .L190
	add	r1, r4, #0
.L173:
	add	r0, r3, r2
	ldrb	r0, [r0]
	stmia	r1!, {r0}
	add	r3, r3, #0x1
	cmp	r3, #0x1
	bls	.L173	@cond_branch
	b	.L168
.L191:
	.align	2, 0
.L190:
	.word	gUnknown_0858CF8C
.L175:
	mov	r0, #0x0
	bl	GetLinkPlayerTrainerId
	add	r2, r0, #0
	mov	r0, #0x1
	and	r2, r2, r0
	mov	r3, #0x0
	ldr	r1, .L192
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	add	r1, r0, r1
	add	r2, r4, #0
.L179:
	ldrb	r0, [r1]
	stmia	r2!, {r0}
	add	r1, r1, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x2
	bls	.L179	@cond_branch
	b	.L168
.L193:
	.align	2, 0
.L192:
	.word	gUnknown_0858CF8E
.L181:
	mov	r0, #0x0
	bl	GetLinkPlayerTrainerId
	mov	r1, #0x9
	bl	__umodsi3
	add	r2, r0, #0
	mov	r3, #0x0
	ldr	r1, .L194
	lsl	r0, r2, #0x2
	add	r1, r0, r1
	add	r2, r4, #0
.L185:
	ldrb	r0, [r1]
	stmia	r2!, {r0}
	add	r1, r1, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bls	.L185	@cond_branch
.L168:
	pop	{r4}
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	gUnknown_0858CF94
.Lfe20:
	.size	 ShufflePlayerIndices,.Lfe20-ShufflePlayerIndices
	.align	2, 0
	.type	 ReceiveOldManData,function
	.thumb_func
ReceiveOldManData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	mov	r9, r0
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	mov	r0, sp
	bl	ShufflePlayerIndices
	lsl	r0, r7, #0x2
	add	r0, r0, sp
	ldr	r1, [r0]
	mov	r0, r8
	mul	r0, r0, r1
	mov	r2, r9
	add	r6, r2, r0
	ldr	r2, .L199
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r4, [r0]
	ldrh	r5, [r0, #0x1a]
	bl	Link_AnyPartnersPlayingRubyOrSapphire
	cmp	r0, #0
	beq	.L197	@cond_branch
	add	r0, r6, #0
	add	r1, r4, #0
	add	r2, r5, #0
	bl	SanitizeReceivedRubyOldMan
	b	.L198
.L200:
	.align	2, 0
.L199:
	.word	gLinkPlayers
.L197:
	add	r0, r6, #0
	add	r1, r4, #0
	add	r2, r5, #0
	bl	SanitizeReceivedEmeraldOldMan
.L198:
	ldr	r0, .L201
	ldr	r0, [r0]
	lsl	r1, r7, #0x2
	add	r1, r1, sp
	ldr	r1, [r1]
	mov	r2, r8
	mul	r2, r2, r1
	add	r1, r2, #0
	add	r1, r1, r9
	mov	r2, #0x40
	bl	memcpy
	bl	ResetMauvilleOldManFlag
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L202:
	.align	2, 0
.L201:
	.word	sOldManSave
.Lfe21:
	.size	 ReceiveOldManData,.Lfe21-ReceiveOldManData
	.align	2, 0
	.type	 ReceiveBattleTowerData,function
	.thumb_func
ReceiveBattleTowerData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	mov	r8, r0
	add	r7, r1, #0
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	mov	r0, sp
	bl	ShufflePlayerIndices
	bl	Link_AnyPartnersPlayingRubyOrSapphire
	cmp	r0, #0
	beq	.L204	@cond_branch
	lsl	r0, r6, #0x2
	mov	r1, sp
	add	r5, r1, r0
	ldr	r0, [r5]
	mul	r0, r0, r7
	add	r0, r0, r8
	mov	r4, r7
	mul	r4, r4, r6
	mov	r1, r8
	add	r6, r1, r4
	add	r1, r6, #0
	bl	RubyBattleTowerRecordToEmerald
	mov	r9, r4
	cmp	r0, #0x1
	bne	.L206	@cond_branch
	add	r7, r6, #0
	ldr	r2, .L213
	ldr	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x1a]
	add	r0, r7, #0
	add	r0, r0, #0xe4
	strb	r1, [r0]
	add	r0, r7, #0
	bl	CalcEmeraldBattleTowerChecksum
	b	.L206
.L214:
	.align	2, 0
.L213:
	.word	gLinkPlayers
.L204:
	mov	r5, r7
	mul	r5, r5, r6
	mov	r0, r8
	add	r4, r0, r5
	lsl	r0, r6, #0x2
	add	r0, r0, sp
	ldr	r0, [r0]
	mov	r1, r7
	mul	r1, r1, r0
	add	r1, r1, r8
	add	r0, r4, #0
	mov	r2, #0xec
	bl	memcpy
	add	r7, r4, #0
	mov	r6, #0x0
	mov	r9, r5
.L210:
	mov	r0, #0x2c
	mul	r0, r0, r6
	add	r0, r0, #0x34
	add	r1, r7, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L209	@cond_branch
	add	r4, r1, #0
	add	r4, r4, #0x20
	add	r0, r4, #0
	bl	IsStringJapanese
	cmp	r0, #0
	beq	.L209	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ConvertInternationalString
.L209:
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L210	@cond_branch
	add	r0, r7, #0
	bl	CalcEmeraldBattleTowerChecksum
.L206:
	mov	r0, r8
	add	r0, r0, r9
	bl	PutNewBattleTowerRecord
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 ReceiveBattleTowerData,.Lfe22-ReceiveBattleTowerData
	.align	2, 0
	.type	 ReceiveLilycoveLadyData,function
	.thumb_func
ReceiveLilycoveLadyData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	mov	r8, r0
	add	r7, r1, #0
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	mov	r0, sp
	bl	ShufflePlayerIndices
	mov	r0, r7
	mul	r0, r0, r5
	add	r0, r0, r8
	ldr	r6, .L220
	ldr	r1, [r6]
	mov	r2, #0x40
	bl	memcpy
	bl	GetLilycoveLadyId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L216	@cond_branch
	mov	r0, #0x40
	bl	Alloc
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L215	@cond_branch
	ldr	r1, [r6]
	mov	r2, #0x40
	bl	memcpy
	b	.L218
.L221:
	.align	2, 0
.L220:
	.word	sLilycoveLadySave
.L216:
	mov	r4, #0x0
.L218:
	ldr	r0, .L222
	ldr	r0, [r0]
	lsl	r1, r5, #0x2
	add	r1, r1, sp
	ldr	r1, [r1]
	mul	r1, r1, r7
	add	r1, r1, r8
	mov	r2, #0x40
	bl	memcpy
	bl	ResetLilycoveLadyForRecordMix
	cmp	r4, #0
	beq	.L215	@cond_branch
	add	r0, r4, #0
	bl	QuizLadyClearQuestionForRecordMix
	add	r0, r4, #0
	bl	Free
.L215:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L223:
	.align	2, 0
.L222:
	.word	sLilycoveLadySave
.Lfe23:
	.size	 ReceiveLilycoveLadyData,.Lfe23-ReceiveLilycoveLadyData
	.align	2, 0
	.type	 sub_80E7A9C,function
	.thumb_func
sub_80E7A9C:
	ldrh	r0, [r0, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.Lfe24:
	.size	 sub_80E7A9C,.Lfe24-sub_80E7A9C
	.align	2, 0
	.type	 sub_80E7AA4,function
	.thumb_func
sub_80E7AA4:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x38
	mov	r8, r0
	mov	sl, r1
	mov	r9, r2
	add	r4, r3, #0
	ldr	r5, [sp, #0x54]
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsr	r4, r4, #0x17
	add	r4, r4, r9
	ldrb	r0, [r4]
	mov	r6, sl
	mul	r6, r6, r0
	add	r6, r6, r8
	ldrb	r0, [r4, #0x1]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r6, r1
	mov	r0, sp
	mov	r2, #0x38
	bl	memcpy
	lsl	r5, r5, #0x1
	add	r5, r5, r9
	ldrb	r0, [r5]
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r8, r8, r0
	ldrb	r1, [r4, #0x1]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r6, r6, r0
	ldrb	r0, [r5, #0x1]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r8
	add	r0, r6, #0
	mov	r2, #0x38
	bl	memcpy
	ldrb	r1, [r5, #0x1]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r8, r8, r0
	mov	r0, r8
	mov	r1, sp
	mov	r2, #0x38
	bl	memcpy
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 sub_80E7AA4,.Lfe25-sub_80E7AA4
	.align	2, 0
	.type	 sub_80E7B2C,function
	.thumb_func
sub_80E7B2C:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	mov	r1, #0x0
	ldr	r4, .L232
.L230:
	add	r0, r3, r1
	ldrb	r0, [r0]
	add	r0, r2, r0
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r1, r1, #0x1
	cmp	r1, #0xff
	ble	.L230	@cond_branch
	strb	r2, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L233:
	.align	2, 0
.L232:
	.word	gUnknown_03001160
.Lfe26:
	.size	 sub_80E7B2C,.Lfe26-sub_80E7B2C
	.align	2, 0
	.type	 sub_80E7B54,function
	.thumb_func
sub_80E7B54:
	ldr	r0, .L235
	ldrb	r0, [r0]
	bx	lr
.L236:
	.align	2, 0
.L235:
	.word	gUnknown_03001160
.Lfe27:
	.size	 sub_80E7B54,.Lfe27-sub_80E7B54
	.align	2, 0
	.type	 ReceiveDaycareMailData,function
	.thumb_func
ReceiveDaycareMailData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x58
	str	r0, [sp, #0x2c]
	str	r1, [sp, #0x30]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x38]
	ldr	r0, .L315
	ldrh	r0, [r0, #0x4]
	bl	SeedRng2
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x0
	mov	r8, r0
	mov	r1, sp
	add	r1, r1, #0x1c
	str	r1, [sp, #0x4c]
	mov	r2, sp
	add	r2, r2, #0x1d
	str	r2, [sp, #0x50]
	mov	r3, sp
	add	r3, r3, #0xc
	str	r3, [sp, #0x48]
	mov	r7, #0xff
	add	r3, sp, #0x8
	mov	r2, #0x0
	add	r6, r1, #0
	ldr	r5, [sp, #0x50]
.L241:
	mov	r1, sp
	add	r1, r1, r8
	add	r1, r1, #0x4
	ldrb	r0, [r1]
	orr	r0, r0, r7
	strb	r0, [r1]
	mov	r1, r8
	add	r0, r3, r1
	strb	r2, [r0]
	lsl	r1, r1, #0x1
	add	r0, r6, r1
	strb	r2, [r0]
	add	r1, r5, r1
	strb	r2, [r1]
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	cmp	r0, #0x3
	bls	.L241	@cond_branch
	bl	Link_AnyPartnersPlayingRubyOrSapphire
	str	r0, [sp, #0x3c]
	mov	r2, #0x0
	mov	r8, r2
	lsl	r4, r4, #0x10
	str	r4, [sp, #0x54]
	ldr	r0, [sp, #0x30]
	mov	r3, r9
	mul	r3, r3, r0
	str	r3, [sp, #0x44]
	b	.L243
.L316:
	.align	2, 0
.L315:
	.word	gLinkPlayers
.L246:
	ldr	r1, [sp, #0x30]
	mov	r0, r8
	mul	r0, r0, r1
	ldr	r2, [sp, #0x2c]
	add	r7, r2, r0
	ldr	r1, .L317
	mov	r3, r8
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x1a]
	mov	r9, r1
	ldrb	r0, [r0]
	str	r0, [sp, #0x40]
	mov	r6, #0x0
	ldr	r0, [r7, #0x70]
	cmp	r6, r0
	bcs	.L245	@cond_branch
	mov	r2, #0x10
	neg	r2, r2
	mov	sl, r2
.L250:
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r7, r0
	ldrh	r0, [r5, #0x20]
	cmp	r0, #0
	beq	.L249	@cond_branch
	ldr	r3, [sp, #0x3c]
	cmp	r3, #0
	beq	.L252	@cond_branch
	add	r4, r5, #0
	add	r4, r4, #0x24
	add	r0, r4, #0
	bl	StringLength
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5
	bhi	.L253	@cond_branch
	mov	r4, #0x1
	b	.L254
.L318:
	.align	2, 0
.L317:
	.word	gLinkPlayers
.L253:
	add	r0, r4, #0
	bl	StripExtCtrlCodes
	mov	r4, r9
.L254:
	ldrh	r1, [r5, #0x2c]
	ldr	r0, .L319
	cmp	r1, r0
	bne	.L255	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x2c
	bl	StripExtCtrlCodes
	mov	r1, #0x1
	b	.L256
.L320:
	.align	2, 0
.L319:
	.word	0x15fc
.L255:
	mov	r1, r9
.L256:
	ldr	r0, [sp, #0x40]
	sub	r0, r0, #0x1
	cmp	r0, #0x1
	bhi	.L249	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x37
	mov	r0, #0xf
	and	r4, r4, r0
	ldrb	r0, [r2]
	mov	r3, sl
	and	r0, r0, r3
	orr	r0, r0, r4
	lsl	r1, r1, #0x4
	mov	r3, #0xf
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L249
.L252:
	mov	r0, r9
	cmp	r0, #0x1
	bne	.L249	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x24
	bl	IsStringJapanese
	cmp	r0, #0
	beq	.L260	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x37
	ldrb	r1, [r0]
	mov	r2, sl
	and	r1, r1, r2
	mov	r2, #0x1
	b	.L312
.L260:
	add	r0, r5, #0
	add	r0, r0, #0x37
	ldrb	r1, [r0]
	mov	r3, sl
	and	r1, r1, r3
	mov	r2, #0x2
.L312:
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r4, r0, #0
	add	r0, r5, #0
	add	r0, r0, #0x2c
	bl	IsStringJapanese
	cmp	r0, #0
	beq	.L262	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	b	.L313
.L262:
	ldrb	r0, [r4]
	mov	r1, #0xf
	and	r1, r1, r0
	mov	r0, #0x20
.L313:
	orr	r1, r1, r0
	strb	r1, [r4]
.L249:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, [r7, #0x70]
	cmp	r6, r0
	bcc	.L250	@cond_branch
.L245:
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
.L243:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r8, r0
	bcs	.LCB2741
	b	.L246	@long jump
.LCB2741:
	mov	r0, #0x0
	str	r0, [sp, #0x34]
	mov	r8, r0
	ldr	r1, [sp, #0x54]
	lsr	r0, r1, #0x10
	ldr	r2, [sp, #0x34]
	cmp	r2, r0
	bcs	.L267	@cond_branch
	add	r5, r0, #0
.L269:
	ldr	r3, [sp, #0x30]
	mov	r0, r8
	mul	r0, r0, r3
	ldr	r1, [sp, #0x2c]
	add	r7, r1, r0
	ldr	r0, [r7, #0x70]
	cmp	r0, #0
	beq	.L268	@cond_branch
	mov	r6, #0x0
	cmp	r6, r0
	bcs	.L268	@cond_branch
	add	r3, r7, #0
	add	r3, r3, #0x74
	ldr	r2, [sp, #0x4c]
	mov	r0, r8
	lsl	r1, r0, #0x1
	mov	r4, #0x1
.L274:
	lsl	r0, r6, #0x1
	add	r0, r3, r0
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L273	@cond_branch
	add	r0, r6, r1
	add	r0, r2, r0
	strb	r4, [r0]
.L273:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, [r7, #0x70]
	cmp	r6, r0
	bcc	.L274	@cond_branch
.L268:
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	cmp	r8, r5
	bcc	.L269	@cond_branch
.L267:
	mov	r6, #0x0
	mov	r8, r6
	ldr	r1, [sp, #0x54]
	cmp	r1, #0
	beq	.L279	@cond_branch
	add	r2, sp, #0x24
	mov	sl, r2
	mov	r3, #0x25
	add	r3, r3, sp
	mov	r9, r3
.L281:
	ldr	r1, [sp, #0x30]
	mov	r0, r8
	mul	r0, r0, r1
	ldr	r2, [sp, #0x2c]
	add	r7, r2, r0
	mov	r3, r8
	lsl	r1, r3, #0x1
	ldr	r2, [sp, #0x4c]
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L283	@cond_branch
	ldr	r3, [sp, #0x50]
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L282	@cond_branch
.L283:
	ldr	r0, [sp, #0x34]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x34]
.L282:
	ldr	r2, [sp, #0x4c]
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L284	@cond_branch
	ldr	r3, [sp, #0x50]
	add	r0, r3, r1
	ldrb	r2, [r0]
	cmp	r2, #0
	bne	.L284	@cond_branch
.L314:
	lsl	r1, r6, #0x1
	mov	r3, sl
	add	r0, r3, r1
	mov	r3, r8
	strb	r3, [r0]
	add	r1, r1, r9
	strb	r2, [r1]
	b	.L292
.L284:
	ldr	r2, [sp, #0x4c]
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L286	@cond_branch
	ldr	r3, [sp, #0x50]
	add	r0, r3, r1
	ldrb	r2, [r0]
	cmp	r2, #0x1
	beq	.L314	@cond_branch
.L286:
	ldr	r2, [sp, #0x4c]
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L280	@cond_branch
	ldr	r3, [sp, #0x50]
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L280	@cond_branch
	lsl	r5, r6, #0x1
	mov	r1, sl
	add	r0, r1, r5
	mov	r2, r8
	strb	r2, [r0]
	add	r0, r7, #0
	bl	sub_80E7A9C
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r7, #0
	add	r0, r0, #0x38
	bl	sub_80E7A9C
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r4, #0
	bne	.L309	@cond_branch
	cmp	r1, #0
	beq	.L290	@cond_branch
	mov	r3, r9
	add	r1, r3, r5
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L292
.L309:
	cmp	r1, #0
	beq	.L289	@cond_branch
.L290:
	bl	Random2
	mov	r1, r9
	add	r2, r1, r5
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	strb	r0, [r2]
	b	.L292
.L289:
	mov	r2, r9
	add	r0, r2, r5
	strb	r1, [r0]
.L292:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L280:
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r8, r3
	ldr	r1, [sp, #0x54]
	cmp	r0, r1
	bcc	.L281	@cond_branch
.L279:
	mov	r2, #0x0
	mov	r8, r2
	ldr	r3, [sp, #0x44]
	lsl	r0, r3, #0x4
	sub	r0, r0, r3
	lsl	r0, r0, #0x3
	ldr	r1, [sp, #0x2c]
	add	r7, r1, r0
	ldr	r1, [sp, #0x48]
.L300:
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r1, r0
	str	r7, [r0]
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	cmp	r0, #0x3
	bls	.L300	@cond_branch
	bl	sub_80E7B54
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r3, [sp, #0x34]
	cmp	r3, #0x3
	beq	.L304	@cond_branch
	cmp	r3, #0x3
	bgt	.L308	@cond_branch
	cmp	r3, #0x2
	beq	.L303	@cond_branch
	b	.L302
.L308:
	ldr	r0, [sp, #0x34]
	cmp	r0, #0x4
	beq	.L305	@cond_branch
	b	.L302
.L303:
	add	r2, sp, #0x24
	mov	r0, #0x1
	str	r0, [sp]
	ldr	r0, [sp, #0x2c]
	ldr	r1, [sp, #0x30]
	mov	r3, #0x0
	bl	sub_80E7AA4
	b	.L302
.L304:
	ldr	r0, .L321
	lsl	r1, r1, #0x1
	add	r2, r1, r0
	ldrb	r3, [r2]
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r2, sp, #0x24
	str	r0, [sp]
	ldr	r0, [sp, #0x2c]
	ldr	r1, [sp, #0x30]
	bl	sub_80E7AA4
	b	.L302
.L322:
	.align	2, 0
.L321:
	.word	gUnknown_0858CFB8
.L305:
	add	r6, sp, #0x24
	ldr	r4, .L323
	lsl	r5, r1, #0x2
	add	r0, r5, r4
	ldrb	r3, [r0]
	add	r0, r4, #0x1
	add	r0, r5, r0
	ldrb	r0, [r0]
	str	r0, [sp]
	ldr	r0, [sp, #0x2c]
	ldr	r1, [sp, #0x30]
	add	r2, r6, #0
	bl	sub_80E7AA4
	add	r0, r4, #0x2
	add	r0, r5, r0
	ldrb	r3, [r0]
	add	r4, r4, #0x3
	add	r5, r5, r4
	ldrb	r0, [r5]
	str	r0, [sp]
	ldr	r0, [sp, #0x2c]
	ldr	r1, [sp, #0x30]
	add	r2, r6, #0
	bl	sub_80E7AA4
.L302:
	ldr	r1, [sp, #0x2c]
	ldr	r2, [sp, #0x44]
	add	r7, r1, r2
	ldr	r4, .L323+0x4
	ldr	r0, [r4]
	mov	r3, #0xb4
	lsl	r3, r3, #0x6
	add	r0, r0, r3
	add	r1, r7, #0
	mov	r2, #0x38
	bl	memcpy
	ldr	r0, [r4]
	ldr	r1, .L323+0x8
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #0x38
	mov	r2, #0x38
	bl	memcpy
	ldr	r0, [sp, #0x38]
	bl	SeedRng
	add	sp, sp, #0x58
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L324:
	.align	2, 0
.L323:
	.word	gUnknown_0858CFBE
	.word	gSaveBlock1Ptr
	.word	0x2d8c
.Lfe28:
	.size	 ReceiveDaycareMailData,.Lfe28-ReceiveDaycareMailData
	.align	2, 0
	.type	 ReceiveGiftItem,function
	.thumb_func
ReceiveGiftItem:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	beq	.L326	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L326	@cond_branch
	bl	GetPocketByItemId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xa
	bne	.L326	@cond_branch
	ldrh	r0, [r4]
	mov	r1, #0x1
	bl	CheckBagHasItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L327	@cond_branch
	ldrh	r0, [r4]
	mov	r1, #0x1
	bl	CheckPCHasItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L327	@cond_branch
	ldrh	r0, [r4]
	mov	r1, #0x1
	bl	AddBagItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L327	@cond_branch
	ldr	r0, .L330
	ldrh	r1, [r4]
	bl	VarSet
	ldr	r0, .L330+0x4
	ldr	r1, .L330+0x8
	bl	StringCopy
	ldrh	r1, [r4]
	mov	r0, #0xeb
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L326	@cond_branch
	ldr	r0, .L330+0xc
	bl	FlagSet
	b	.L326
.L331:
	.align	2, 0
.L330:
	.word	0x4001
	.word	gStringVar1
	.word	gLinkPlayers+0x8
	.word	0x8b3
.L327:
	ldr	r0, .L332
	mov	r1, #0x0
	bl	VarSet
.L326:
	pop	{r4}
	pop	{r0}
	bx	r0
.L333:
	.align	2, 0
.L332:
	.word	0x4001
.Lfe29:
	.size	 ReceiveGiftItem,.Lfe29-ReceiveGiftItem
	.align	2, 0
	.type	 Task_DoRecordMixing,function
	.thumb_func
Task_DoRecordMixing:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L359
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x9
	bls	.LCB3281
	b	.L335	@long jump
.LCB3281:
	lsl	r0, r0, #0x2
	ldr	r1, .L359+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L360:
	.align	2, 0
.L359:
	.word	gTasks
	.word	.L356
	.align	2, 0
	.align	2, 0
.L356:
	.word	.L358
	.word	.L337
	.word	.L340
	.word	.L341
	.word	.L343
	.word	.L345
	.word	.L347
	.word	.L349
	.word	.L353
	.word	.L354
.L337:
	bl	Link_AnyPartnersPlayingRubyOrSapphire
	cmp	r0, #0
	bne	.L358	@cond_branch
	mov	r0, #0x6
	strh	r0, [r4, #0x8]
	b	.L335
.L340:
	bl	SetContinueGameWarpStatusToDynamicWarp
	bl	FullSaveGame
	b	.L358
.L341:
	bl	CheckSaveFile
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L335	@cond_branch
	bl	ClearContinueGameWarpStatus2
	mov	r1, #0x0
	mov	r0, #0x4
	strh	r0, [r4, #0x8]
	strh	r1, [r4, #0xa]
	b	.L335
.L343:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	ble	.L335	@cond_branch
	bl	SetCloseLinkCallback
	b	.L358
.L345:
	ldr	r0, .L361
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L335	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
	b	.L335
.L362:
	.align	2, 0
.L361:
	.word	gReceivedRemoteLinkPlayers
.L347:
	mov	r0, #0x0
	bl	sub_801048C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L335	@cond_branch
	ldr	r0, .L363
	mov	r1, #0x5
	bl	CreateTask
	b	.L358
.L364:
	.align	2, 0
.L363:
	.word	Task_LinkSave
.L349:
	ldr	r0, .L365
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L335	@cond_branch
	ldr	r0, .L365+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L351	@cond_branch
	mov	r0, #0x1
	bl	sub_801048C
	mov	r0, #0x8
	strh	r0, [r4, #0x8]
	b	.L335
.L366:
	.align	2, 0
.L365:
	.word	Task_LinkSave
	.word	gWirelessCommType
.L351:
	mov	r0, #0x4
	strh	r0, [r4, #0x8]
	b	.L335
.L353:
	bl	SetLinkStandbyCallback
.L358:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L335
.L354:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L335	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
.L335:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 Task_DoRecordMixing,.Lfe30-Task_DoRecordMixing
	.align	2, 0
	.type	 GetSavedApprentices,function
	.thumb_func
GetSavedApprentices:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	str	r0, [sp]
	mov	sl, r1
	add	r1, r0, #0
	add	r1, r1, #0x38
	mov	r0, #0xff
	strb	r0, [r1]
	ldr	r1, [sp]
	add	r1, r1, #0x7c
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1]
	ldr	r0, [sp]
	mov	r1, sl
	mov	r2, #0x44
	bl	memcpy
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r1, #0x0
	str	r1, [sp, #0xc]
	mov	r2, #0x0
	str	r2, [sp, #0x4]
	mov	r8, r2
	mov	r7, #0x0
	ldr	r0, .L385
	mov	r9, r0
.L371:
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, #0x4a
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1e
	add	r0, r7, r0
	mov	r1, #0x3
	bl	__modsi3
	add	r6, r0, #0x1
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	mov	r2, sl
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x38
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L370	@cond_branch
	add	r5, r1, #0
	add	r5, r5, #0x34
	add	r0, r5, #0
	bl	GetTrainerId
	add	r4, r0, #0
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, #0xa
	bl	GetTrainerId
	cmp	r4, r0
	beq	.L373	@cond_branch
	mov	r2, #0x1
	add	r8, r8, r2
	str	r6, [sp, #0x4]
.L373:
	add	r0, r5, #0
	bl	GetTrainerId
	add	r4, r0, #0
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, #0xa
	bl	GetTrainerId
	cmp	r4, r0
	bne	.L370	@cond_branch
	ldr	r2, [sp, #0xc]
	add	r2, r2, #0x1
	str	r2, [sp, #0xc]
	str	r6, [sp, #0x8]
.L370:
	add	r7, r7, #0x1
	cmp	r7, #0x1
	ble	.L371	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	bne	.L376	@cond_branch
	ldr	r1, [sp, #0xc]
	cmp	r1, #0
	beq	.L376	@cond_branch
	mov	r8, r1
	ldr	r2, [sp, #0x8]
	str	r2, [sp, #0x4]
.L376:
	mov	r0, r8
	cmp	r0, #0x1
	beq	.L378	@cond_branch
	cmp	r0, #0x2
	beq	.L379	@cond_branch
	b	.L377
.L386:
	.align	2, 0
.L385:
	.word	gSaveBlock2Ptr
.L378:
	ldr	r2, [sp, #0x4]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, sl
	b	.L384
.L379:
	bl	Random2
	lsl	r0, r0, #0x10
	ldr	r1, .L387
	cmp	r0, r1
	bls	.L380	@cond_branch
	ldr	r0, .L387+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x4a
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1e
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, sl
	add	r1, r1, #0x44
.L384:
	ldr	r0, [sp]
	add	r0, r0, #0x44
	mov	r2, #0x44
	bl	memcpy
	b	.L377
.L388:
	.align	2, 0
.L387:
	.word	0x33330000
	.word	gSaveBlock2Ptr
.L380:
	ldr	r0, .L389
	ldr	r0, [r0]
	add	r0, r0, #0x4a
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1e
	add	r0, r0, #0x1
	mov	r1, #0x3
	bl	__modsi3
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, sl
	add	r1, r1, #0x44
	ldr	r0, [sp]
	add	r0, r0, #0x44
	mov	r2, #0x44
	bl	memcpy
.L377:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L390:
	.align	2, 0
.L389:
	.word	gSaveBlock2Ptr
.Lfe31:
	.size	 GetSavedApprentices,.Lfe31-GetSavedApprentices
	.align	2, 0
	.globl	GetPlayerHallRecords
	.type	 GetPlayerHallRecords,function
	.thumb_func
GetPlayerHallRecords:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r8, r0
	mov	r6, #0x0
	ldr	r0, .L412
	mov	sl, r0
.L395:
	mov	r7, #0x0
	lsl	r0, r6, #0x5
	add	r6, r6, #0x1
	mov	r9, r6
	mov	r1, r8
	add	r4, r0, r1
	add	r0, r0, #0x6
	add	r6, r1, r0
	add	r5, r4, #0
.L399:
	mov	r2, sl
	ldr	r1, [r2]
	add	r1, r1, #0xa
	add	r0, r5, #0
	bl	CopyTrainerId
	mov	r0, #0x2
	strb	r0, [r4, #0xe]
	mov	r0, sl
	ldr	r1, [r0]
	add	r0, r6, #0
	bl	StringCopy
	add	r4, r4, #0x10
	add	r6, r6, #0x10
	add	r5, r5, #0x10
	add	r7, r7, #0x1
	cmp	r7, #0x1
	ble	.L399	@cond_branch
	mov	r6, r9
	cmp	r6, #0x8
	ble	.L395	@cond_branch
	ldr	r1, .L412
	mov	sl, r1
	ldr	r2, .L412+0x4
	str	r2, [sp, #0x4]
	mov	r4, #0x99
	lsl	r4, r4, #0x1
	add	r4, r4, r8
	mov	r0, #0x95
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r9, r0
	ldr	r1, .L412+0x8
	str	r1, [sp, #0x8]
	mov	r6, #0x92
	lsl	r6, r6, #0x1
	add	r6, r6, r8
	mov	r5, #0x90
	lsl	r5, r5, #0x1
	add	r5, r5, r8
	mov	r7, #0x1
.L405:
	mov	r0, #0x2
	strb	r0, [r4, #0x8]
	mov	r2, sl
	ldr	r1, [r2]
	add	r1, r1, #0xa
	add	r0, r5, #0
	bl	CopyTrainerId
	mov	r0, sl
	ldr	r1, [r0]
	ldr	r2, [sp, #0x8]
	add	r1, r1, r2
	add	r0, r6, #0
	bl	CopyTrainerId
	mov	r0, sl
	ldr	r1, [r0]
	mov	r0, r9
	bl	StringCopy
	mov	r2, sl
	ldr	r1, [r2]
	ldr	r0, [sp, #0x4]
	add	r1, r1, r0
	add	r0, r4, #0
	bl	StringCopy
	ldr	r1, [sp, #0x4]
	add	r1, r1, #0x8
	str	r1, [sp, #0x4]
	add	r4, r4, #0x1c
	mov	r2, #0x1c
	add	r9, r9, r2
	ldr	r0, [sp, #0x8]
	add	r0, r0, #0x4
	str	r0, [sp, #0x8]
	add	r6, r6, #0x1c
	add	r5, r5, #0x1c
	sub	r7, r7, #0x1
	cmp	r7, #0
	bge	.L405	@cond_branch
	mov	r6, #0x0
	ldr	r0, .L412
	ldr	r3, [r0]
	mov	r4, r8
	mov	r1, #0xc4
	add	r1, r1, r4
	mov	r9, r1
	mov	r2, #0x84
	add	r2, r2, r4
	mov	r8, r2
	mov	r0, #0x44
	add	r0, r0, r4
	mov	ip, r0
	add	r7, r4, #0x4
	ldr	r1, .L412+0xc
	add	r1, r3, r1
	str	r1, [sp]
	mov	sl, r4
	ldr	r2, .L412+0x10
	add	r5, r3, r2
.L410:
	lsl	r2, r6, #0x1
	ldr	r1, [sp]
	ldrh	r0, [r1]
	strh	r0, [r7]
	ldrh	r0, [r5]
	strh	r0, [r7, #0x20]
	ldrh	r0, [r5, #0x4]
	mov	r1, ip
	strh	r0, [r1]
	ldr	r1, .L412+0x14
	add	r0, r3, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	mov	r1, ip
	strh	r0, [r1, #0x20]
	ldr	r1, .L412+0x18
	add	r0, r3, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	mov	r1, r8
	strh	r0, [r1]
	ldr	r1, .L412+0x1c
	add	r0, r3, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	mov	r1, r8
	strh	r0, [r1, #0x20]
	ldr	r1, .L412+0x20
	add	r0, r3, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	mov	r1, r9
	strh	r0, [r1]
	mov	r1, #0xd9
	lsl	r1, r1, #0x4
	add	r0, r3, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	mov	r1, r9
	strh	r0, [r1, #0x20]
	ldr	r1, .L412+0x24
	add	r0, r3, r1
	add	r0, r0, r2
	ldrh	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	strh	r1, [r0]
	ldr	r1, .L412+0x28
	add	r0, r3, r1
	add	r0, r0, r2
	ldrh	r1, [r0]
	mov	r2, #0x94
	lsl	r2, r2, #0x1
	add	r0, r4, r2
	strh	r1, [r0]
	add	r4, r4, #0x1c
	mov	r0, #0x10
	add	r9, r9, r0
	add	r8, r8, r0
	add	ip, ip, r0
	add	r7, r7, #0x10
	ldr	r1, [sp]
	add	r1, r1, #0x2
	str	r1, [sp]
	add	sl, sl, r0
	add	r5, r5, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x1
	ble	.L410	@cond_branch
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L413:
	.align	2, 0
.L412:
	.word	gSaveBlock2Ptr
	.word	0xe69
	.word	0xe79
	.word	0xc78
	.word	0xc7c
	.word	0xc9c
	.word	0xd58
	.word	0xd66
	.word	0xd72
	.word	0xda6
	.word	0xc84
.Lfe32:
	.size	 GetPlayerHallRecords,.Lfe32-GetPlayerHallRecords
	.align	2, 0
	.type	 IsApprenticeAlreadySaved,function
	.thumb_func
IsApprenticeAlreadySaved:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	mov	r0, #0x0
	mov	r8, r0
	add	r6, r1, #0
	add	r6, r6, #0x34
	add	r5, r1, #0
.L418:
	add	r0, r7, #0
	add	r0, r0, #0x34
	bl	GetTrainerId
	add	r4, r0, #0
	add	r0, r6, #0
	bl	GetTrainerId
	cmp	r4, r0
	bne	.L417	@cond_branch
	ldrb	r0, [r7, #0x2]
	ldrb	r1, [r5, #0x2]
	cmp	r0, r1
	bne	.L417	@cond_branch
	mov	r0, #0x1
	b	.L421
.L417:
	add	r6, r6, #0x44
	add	r5, r5, #0x44
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x3
	ble	.L418	@cond_branch
	mov	r0, #0x0
.L421:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 IsApprenticeAlreadySaved,.Lfe33-IsApprenticeAlreadySaved
	.align	2, 0
	.type	 ReceiveApprenticeData,function
	.thumb_func
ReceiveApprenticeData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	add	r6, r0, #0
	add	r5, r1, #0
	add	r4, r2, #0
	mov	r0, sp
	bl	ShufflePlayerIndices
	lsl	r4, r4, #0x2
	mov	r1, sp
	add	r0, r1, r4
	ldr	r0, [r0]
	mul	r0, r0, r5
	add	r3, r6, r0
	mov	r7, #0x0
	mov	r2, #0x0
	mov	r8, r2
	mov	r5, #0x0
	add	r6, r3, #0
	add	r6, r6, #0x38
	add	r4, r3, #0
.L426:
	ldrb	r0, [r6]
	cmp	r0, #0xff
	beq	.L425	@cond_branch
	ldr	r0, .L440
	ldr	r1, [r0]
	add	r1, r1, #0x74
	add	r0, r4, #0
	str	r3, [sp, #0x10]
	bl	IsApprenticeAlreadySaved
	ldr	r3, [sp, #0x10]
	cmp	r0, #0
	bne	.L425	@cond_branch
	add	r7, r7, #0x1
	mov	r8, r5
.L425:
	add	r6, r6, #0x44
	add	r4, r4, #0x44
	add	r5, r5, #0x1
	cmp	r5, #0x1
	ble	.L426	@cond_branch
	cmp	r7, #0x1
	beq	.L430	@cond_branch
	cmp	r7, #0x2
	beq	.L431	@cond_branch
	b	.L429
.L441:
	.align	2, 0
.L440:
	.word	gSaveBlock2Ptr
.L430:
	ldr	r4, .L442
	ldr	r0, [r4]
	add	r1, r0, #0
	add	r1, r1, #0x4a
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1b
	lsr	r1, r1, #0x1e
	add	r2, r1, #0x1
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r2, r8
	lsl	r1, r2, #0x4
	add	r1, r1, r8
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	add	r0, r0, #0x74
	mov	r2, #0x44
	bl	memcpy
	ldr	r4, [r4]
	add	r4, r4, #0x4a
	ldrb	r5, [r4]
	lsl	r0, r5, #0x1b
	lsr	r0, r0, #0x1e
	add	r0, r0, #0x1
	b	.L439
.L443:
	.align	2, 0
.L442:
	.word	gSaveBlock2Ptr
.L431:
	mov	r5, #0x0
	add	r6, r3, #0
.L435:
	mov	r0, #0x1
	eor	r0, r0, r5
	ldr	r7, .L444
	ldr	r4, [r7]
	add	r1, r4, #0
	add	r1, r1, #0x4a
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1b
	lsr	r1, r1, #0x1e
	add	r0, r0, r1
	mov	r1, #0x3
	bl	__modsi3
	add	r2, r0, #0x1
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r4, r0
	add	r4, r4, #0x74
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x44
	bl	memcpy
	add	r6, r6, #0x44
	add	r5, r5, #0x1
	cmp	r5, #0x1
	ble	.L435	@cond_branch
	ldr	r4, [r7]
	add	r4, r4, #0x4a
	ldrb	r5, [r4]
	lsl	r0, r5, #0x1b
	lsr	r0, r0, #0x1e
	add	r0, r0, #0x2
.L439:
	mov	r1, #0x3
	bl	__modsi3
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x3
	mov	r1, #0x19
	neg	r1, r1
	and	r1, r1, r5
	orr	r1, r1, r0
	strb	r1, [r4]
.L429:
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L445:
	.align	2, 0
.L444:
	.word	gSaveBlock2Ptr
.Lfe34:
	.size	 ReceiveApprenticeData,.Lfe34-ReceiveApprenticeData
	.align	2, 0
	.type	 sub_80E8578,function
	.thumb_func
sub_80E8578:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x54
	str	r0, [sp]
	ldr	r0, [sp, #0x74]
	mov	r4, #0x0
	mov	r8, r4
	mov	r5, #0x0
	str	r5, [sp, #0x4]
	ldr	r4, .L505
	b	.L449
.L506:
	.align	2, 0
.L505:
	.word	gUnknown_03001168
.L452:
	add	r1, r1, r2
	ldr	r6, [sp, #0x4]
	add	r6, r6, #0x1
	str	r6, [sp, #0x4]
.L449:
	ldr	r5, [sp, #0x4]
	cmp	r5, r0
	bge	.L448	@cond_branch
	cmp	r5, r3
	beq	.L451	@cond_branch
	stmia	r4!, {r1}
	mov	r6, #0x1
	add	r8, r8, r6
.L451:
	mov	r5, r8
	cmp	r5, #0x3
	bne	.L452	@cond_branch
.L448:
	mov	r6, #0x0
	str	r6, [sp, #0x4]
	sub	r0, r0, #0x1
	str	r0, [sp, #0x24]
.L457:
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	ldr	r1, [sp, #0x4]
	add	r1, r1, #0x1
	str	r1, [sp, #0x28]
	ldr	r2, [sp, #0x4]
	lsl	r2, r2, #0x1
	str	r2, [sp, #0x34]
	ldr	r3, [sp, #0x4]
	add	r3, r2, r3
	str	r3, [sp, #0x10]
	mov	r4, #0x0
	str	r4, [sp, #0x44]
	mov	r5, #0x0
	str	r5, [sp, #0x48]
.L461:
	mov	r6, #0x0
	mov	r8, r6
	ldr	r0, .L507
	ldr	r1, [r0]
	ldr	r2, [sp, #0x10]
	lsl	r0, r2, #0x5
	ldr	r3, [sp, #0x48]
	add	r0, r3, r0
	add	r3, r0, r1
	lsl	r0, r2, #0x6
	ldr	r4, [sp, #0x44]
	add	r0, r4, r0
	ldr	r5, [sp]
	add	r2, r0, r5
.L465:
	add	r0, r2, #0
	mov	r6, #0xd2
	lsl	r6, r6, #0x1
	add	r1, r3, r6
	ldmia	r1!, {r4, r5, r6}
	stmia	r0!, {r4, r5, r6}
	ldr	r1, [r1]
	str	r1, [r0]
	add	r3, r3, #0x10
	add	r2, r2, #0x10
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x2
	ble	.L465	@cond_branch
	mov	r2, #0x0
	mov	r8, r2
	ldr	r3, [sp, #0x24]
	cmp	r8, r3
	bge	.L460	@cond_branch
	ldr	r4, [sp, #0x4]
	lsl	r4, r4, #0x5
	mov	r9, r4
	ldr	r5, [sp, #0x8]
	lsl	r7, r5, #0x4
	ldr	r6, [sp, #0x34]
	ldr	r1, [sp, #0x4]
	add	r0, r6, r1
	lsl	r0, r0, #0x6
	str	r0, [sp, #0x14]
	ldr	r2, [sp]
	add	r0, r2, r0
	ldr	r3, [sp, #0x44]
	str	r3, [sp, #0x18]
	add	r0, r0, r3
	str	r0, [sp, #0x1c]
	ldr	r4, [sp, #0x14]
	add	r0, r3, r4
	add	r0, r0, r2
	add	r0, r0, #0x30
	mov	sl, r0
.L470:
	mov	r5, #0x0
	str	r5, [sp, #0xc]
	mov	r3, #0x0
	mov	r6, r8
	lsl	r6, r6, #0x2
	str	r6, [sp, #0x38]
	ldr	r1, [sp, #0x18]
	ldr	r2, [sp, #0x14]
	add	r0, r1, r2
	ldr	r4, [sp]
	add	r5, r0, r4
	ldr	r0, .L507+0x4
	add	r0, r6, r0
	str	r0, [sp, #0x50]
.L474:
	lsl	r0, r3, #0x4
	ldr	r6, [sp, #0x1c]
	add	r0, r6, r0
	str	r3, [sp, #0x4c]
	bl	GetTrainerId
	add	r4, r0, #0
	ldr	r1, [sp, #0x50]
	ldr	r0, [r1]
	add	r0, r0, r9
	add	r0, r0, r7
	bl	GetTrainerId
	ldr	r3, [sp, #0x4c]
	cmp	r4, r0
	bne	.L473	@cond_branch
	ldr	r2, [sp, #0xc]
	add	r2, r2, #0x1
	str	r2, [sp, #0xc]
	ldr	r4, [sp, #0x50]
	ldr	r0, [r4]
	mov	r6, r9
	add	r1, r7, r6
	add	r1, r0, r1
	ldrh	r0, [r5, #0x4]
	ldrh	r2, [r1, #0x4]
	cmp	r0, r2
	bcs	.L473	@cond_branch
	add	r0, r5, #0
	ldmia	r1!, {r2, r4, r6}
	stmia	r0!, {r2, r4, r6}
	ldr	r1, [r1]
	str	r1, [r0]
.L473:
	add	r5, r5, #0x10
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L474	@cond_branch
	ldr	r3, [sp, #0xc]
	cmp	r3, #0
	bne	.L469	@cond_branch
	ldr	r0, .L507+0x4
	ldr	r4, [sp, #0x38]
	add	r0, r4, r0
	ldr	r0, [r0]
	mov	r5, r9
	add	r2, r7, r5
	mov	r1, sl
	add	r0, r0, r2
	ldmia	r0!, {r2, r3, r6}
	stmia	r1!, {r2, r3, r6}
	ldr	r0, [r0]
	str	r0, [r1]
.L469:
	mov	r4, #0x10
	add	sl, sl, r4
	mov	r5, #0x1
	add	r8, r8, r5
	ldr	r6, [sp, #0x24]
	cmp	r8, r6
	blt	.L470	@cond_branch
.L460:
	ldr	r0, [sp, #0x44]
	add	r0, r0, #0x60
	str	r0, [sp, #0x44]
	ldr	r1, [sp, #0x48]
	add	r1, r1, #0x30
	str	r1, [sp, #0x48]
	ldr	r2, [sp, #0x8]
	add	r2, r2, #0x1
	str	r2, [sp, #0x8]
	cmp	r2, #0x1
	bgt	.LCB4500
	b	.L461	@long jump
.LCB4500:
	ldr	r3, [sp, #0x28]
	str	r3, [sp, #0x4]
	cmp	r3, #0x8
	bgt	.LCB4548
	b	.L457	@long jump
.LCB4548:
	mov	r4, #0x0
	str	r4, [sp, #0x8]
.L485:
	ldr	r5, [sp, #0x8]
	add	r5, r5, #0x1
	str	r5, [sp, #0x2c]
	ldr	r0, .L507
	ldr	r1, [r0]
	mov	r0, #0x54
	ldr	r6, [sp, #0x8]
	mul	r0, r0, r6
	add	r3, r0, r1
	mov	r0, #0xa8
	mul	r0, r0, r6
	ldr	r1, [sp]
	add	r2, r0, r1
	mov	r4, #0x2
	mov	r8, r4
.L489:
	mov	r5, #0xd8
	lsl	r5, r5, #0x3
	add	r0, r2, r5
	ldr	r6, .L507+0x8
	add	r1, r3, r6
	ldmia	r1!, {r4, r5, r6}
	stmia	r0!, {r4, r5, r6}
	ldmia	r1!, {r4, r5, r6}
	stmia	r0!, {r4, r5, r6}
	ldr	r1, [r1]
	str	r1, [r0]
	add	r3, r3, #0x1c
	add	r2, r2, #0x1c
	mov	r0, #0x1
	neg	r0, r0
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0
	bge	.L489	@cond_branch
	mov	r2, #0x0
	mov	r8, r2
	ldr	r3, [sp, #0x24]
	cmp	r8, r3
	blt	.LCB4611
	b	.L484	@long jump
.LCB4611:
	ldr	r4, [sp, #0x8]
	lsl	r1, r4, #0x3
	mov	r0, #0xa8
	mov	r5, r4
	mul	r5, r5, r0
	str	r5, [sp, #0x20]
	str	r5, [sp, #0x3c]
	sub	r1, r1, r4
	lsl	r1, r1, #0x2
	mov	sl, r1
.L494:
	mov	r6, #0x0
	str	r6, [sp, #0xc]
	mov	r0, r8
	lsl	r0, r0, #0x2
	str	r0, [sp, #0x38]
	mov	r1, r8
	add	r1, r1, #0x1
	str	r1, [sp, #0x30]
	ldr	r0, .L507+0x4
	ldr	r2, [sp, #0x38]
	add	r2, r2, r0
	mov	r9, r2
	ldr	r3, [sp]
	mov	r4, #0xd8
	lsl	r4, r4, #0x3
	add	r0, r3, r4
	ldr	r5, [sp, #0x3c]
	add	r7, r5, r0
	str	r6, [sp, #0x40]
	mov	r3, #0x2
.L498:
	ldr	r1, [sp, #0x20]
	mov	r2, #0xd8
	lsl	r2, r2, #0x3
	add	r0, r1, r2
	ldr	r4, [sp]
	add	r0, r4, r0
	ldr	r6, [sp, #0x40]
	add	r5, r0, r6
	add	r0, r5, #0
	str	r3, [sp, #0x4c]
	bl	GetTrainerId
	add	r4, r0, #0
	mov	r6, #0x90
	lsl	r6, r6, #0x1
	add	r6, r6, sl
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, r6
	bl	GetTrainerId
	ldr	r3, [sp, #0x4c]
	cmp	r4, r0
	bne	.L497	@cond_branch
	add	r0, r5, #0x4
	bl	GetTrainerId
	add	r4, r0, #0
	mov	r2, r9
	ldr	r0, [r2]
	add	r0, r0, r6
	add	r0, r0, #0x4
	bl	GetTrainerId
	ldr	r3, [sp, #0x4c]
	cmp	r4, r0
	bne	.L497	@cond_branch
	ldr	r4, [sp, #0xc]
	add	r4, r4, #0x1
	str	r4, [sp, #0xc]
	mov	r5, r9
	ldr	r0, [r5]
	mov	r6, sl
	add	r2, r0, r6
	mov	r0, #0x94
	lsl	r0, r0, #0x1
	add	r1, r2, r0
	ldrh	r0, [r7, #0x8]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L497	@cond_branch
	add	r0, r7, #0
	mov	r4, #0x90
	lsl	r4, r4, #0x1
	add	r1, r2, r4
	ldmia	r1!, {r2, r5, r6}
	stmia	r0!, {r2, r5, r6}
	ldmia	r1!, {r4, r5, r6}
	stmia	r0!, {r4, r5, r6}
	ldr	r1, [r1]
	str	r1, [r0]
.L497:
	add	r7, r7, #0x1c
	ldr	r0, [sp, #0x40]
	add	r0, r0, #0x1c
	str	r0, [sp, #0x40]
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L498	@cond_branch
	ldr	r1, [sp, #0xc]
	cmp	r1, #0
	bne	.L493	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x3
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, [sp, #0x20]
	add	r1, r1, r2
	ldr	r3, [sp]
	add	r1, r3, r1
	ldr	r0, .L507+0x4
	ldr	r4, [sp, #0x38]
	add	r0, r4, r0
	ldr	r0, [r0]
	add	r0, r0, sl
	mov	r5, #0xd8
	lsl	r5, r5, #0x3
	add	r1, r1, r5
	mov	r6, #0x90
	lsl	r6, r6, #0x1
	add	r0, r0, r6
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	ldmia	r0!, {r2, r5, r6}
	stmia	r1!, {r2, r5, r6}
	ldr	r0, [r0]
	str	r0, [r1]
.L493:
	ldr	r3, [sp, #0x30]
	mov	r8, r3
	ldr	r4, [sp, #0x24]
	cmp	r8, r4
	blt	.L494	@cond_branch
.L484:
	ldr	r5, [sp, #0x2c]
	str	r5, [sp, #0x8]
	cmp	r5, #0x1
	bgt	.LCB4799
	b	.L485	@long jump
.LCB4799:
	add	sp, sp, #0x54
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L508:
	.align	2, 0
.L507:
	.word	gSaveBlock2Ptr
	.word	gUnknown_03001168
	.word	0x504
.Lfe35:
	.size	 sub_80E8578,.Lfe35-sub_80E8578
	.align	2, 0
	.type	 sub_80E8880,function
	.thumb_func
sub_80E8880:
	push	{r4, r5, r6, r7, lr}
	mov	ip, r0
	add	r7, r1, #0
	mov	r5, #0x0
.L513:
	mov	r2, #0x0
	mov	r4, #0x1
	neg	r4, r4
	mov	r1, #0x0
	add	r6, r5, #0x1
	add	r3, r7, #0
.L517:
	ldrh	r0, [r3, #0x4]
	cmp	r0, r2
	ble	.L516	@cond_branch
	add	r4, r1, #0
	add	r2, r0, #0
.L516:
	add	r3, r3, #0x10
	add	r1, r1, #0x1
	cmp	r1, #0x5
	ble	.L517	@cond_branch
	cmp	r4, #0
	blt	.L512	@cond_branch
	lsl	r1, r5, #0x4
	lsl	r2, r4, #0x4
	add	r2, r2, r7
	add	r1, r1, ip
	add	r0, r2, #0
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldr	r0, [r0]
	str	r0, [r1]
	mov	r0, #0x0
	strh	r0, [r2, #0x4]
.L512:
	add	r5, r6, #0
	cmp	r5, #0x2
	ble	.L513	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 sub_80E8880,.Lfe36-sub_80E8880
	.align	2, 0
	.type	 sub_80E88CC,function
	.thumb_func
sub_80E88CC:
	push	{r4, r5, r6, r7, lr}
	mov	ip, r0
	add	r6, r1, #0
	mov	r5, #0x0
.L526:
	mov	r3, #0x0
	mov	r4, #0x1
	neg	r4, r4
	mov	r2, #0x0
	add	r7, r5, #0x1
	add	r1, r6, #0
.L530:
	ldrh	r0, [r1, #0x8]
	cmp	r0, r3
	ble	.L529	@cond_branch
	add	r4, r2, #0
	add	r3, r0, #0
.L529:
	add	r1, r1, #0x1c
	add	r2, r2, #0x1
	cmp	r2, #0x5
	ble	.L530	@cond_branch
	cmp	r4, #0
	blt	.L525	@cond_branch
	lsl	r1, r5, #0x3
	sub	r1, r1, r5
	lsl	r1, r1, #0x2
	lsl	r2, r4, #0x3
	sub	r2, r2, r4
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	add	r1, r1, ip
	add	r0, r2, #0
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldr	r0, [r0]
	str	r0, [r1]
	mov	r0, #0x0
	strh	r0, [r2, #0x8]
.L525:
	add	r5, r7, #0
	cmp	r5, #0x2
	ble	.L526	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 sub_80E88CC,.Lfe37-sub_80E88CC
	.align	2, 0
	.type	 sub_80E8924,function
	.thumb_func
sub_80E8924:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r0
	mov	r0, #0x0
	ldr	r1, .L551
	mov	sl, r1
.L539:
	lsl	r1, r0, #0x1
	add	r2, r0, #0x1
	mov	r8, r2
	add	r1, r1, r0
	lsl	r0, r1, #0x5
	mov	r2, #0xd2
	lsl	r2, r2, #0x1
	add	r7, r0, r2
	lsl	r1, r1, #0x6
	mov	r0, r9
	add	r4, r0, r1
	mov	r6, #0x0
	mov	r5, #0x1
.L543:
	mov	r1, sl
	ldr	r0, [r1]
	add	r0, r0, r7
	add	r0, r0, r6
	add	r1, r4, #0
	bl	sub_80E8880
	add	r4, r4, #0x60
	add	r6, r6, #0x30
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L543	@cond_branch
	mov	r0, r8
	cmp	r0, #0x8
	ble	.L539	@cond_branch
	mov	r5, #0x0
	ldr	r4, .L551
.L549:
	mov	r0, #0x54
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r2, .L551+0x4
	add	r1, r1, r2
	ldr	r0, [r4]
	add	r0, r0, r1
	mov	r1, #0xa8
	mul	r1, r1, r5
	mov	r2, #0xd8
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	add	r1, r1, r9
	bl	sub_80E88CC
	add	r5, r5, #0x1
	cmp	r5, #0x1
	ble	.L549	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L552:
	.align	2, 0
.L551:
	.word	gSaveBlock2Ptr
	.word	0x504
.Lfe38:
	.size	 sub_80E8924,.Lfe38-sub_80E8924
	.align	2, 0
	.type	 ReceiveRankingHallRecords,function
	.thumb_func
ReceiveRankingHallRecords:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	mov	r8, r1
	mov	r9, r2
	bl	GetLinkPlayerCount
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x81
	lsl	r0, r0, #0x4
	bl	AllocZeroed
	add	r5, r0, #0
	str	r4, [sp]
	add	r1, r6, #0
	mov	r2, r8
	mov	r3, r9
	bl	sub_80E8578
	add	r0, r5, #0
	bl	sub_80E8924
	add	r0, r5, #0
	bl	Free
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 ReceiveRankingHallRecords,.Lfe39-ReceiveRankingHallRecords
	.align	2, 0
	.type	 sub_80E89F8,function
	.thumb_func
sub_80E89F8:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r5, .L555
	ldr	r4, .L555+0x4
	ldr	r1, [r4]
	mov	r0, #0xb4
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r0, r5, #0
	mov	r2, #0x38
	bl	memcpy
	ldr	r1, [r4]
	ldr	r0, .L555+0x8
	add	r1, r1, r0
	add	r0, r5, #0
	add	r0, r0, #0x38
	mov	r2, #0x38
	bl	memcpy
	ldr	r0, [r4]
	ldr	r1, .L555+0xc
	add	r0, r0, r1
	add	r1, r5, #0
	bl	InitDaycareMailRecordMixing
	ldr	r0, .L555+0x10
	ldr	r1, [r0]
	add	r0, r6, #0
	mov	r2, #0x78
	bl	memcpy
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L556:
	.align	2, 0
.L555:
	.word	gUnknown_02039F9C
	.word	gSaveBlock1Ptr
	.word	0x2d8c
	.word	0x2cb0
	.word	gUnknown_03001148
.Lfe40:
	.size	 sub_80E89F8,.Lfe40-sub_80E89F8
	.align	2, 0
	.type	 SanitizeDayCareMailForRuby,function
	.thumb_func
SanitizeDayCareMailForRuby:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r5, r0, #0
	mov	r0, #0x0
	mov	r9, r0
	ldr	r0, [r5, #0x70]
	cmp	r9, r0
	bcs	.L559	@cond_branch
	add	r4, r5, #0
	add	r4, r4, #0x2c
	mov	r0, #0x24
	add	r0, r0, r5
	mov	r8, r0
	add	r7, r5, #0
	add	r7, r7, #0x37
	add	r6, r5, #0
.L561:
	ldrh	r0, [r6, #0x20]
	cmp	r0, #0
	beq	.L560	@cond_branch
	ldrb	r1, [r4, #0xb]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	beq	.L563	@cond_branch
	mov	r0, r8
	mov	r1, #0xfc
	bl	PadNameString
.L563:
	ldrb	r1, [r7]
	lsr	r1, r1, #0x4
	add	r0, r4, #0
	bl	ConvertInternationalString
.L560:
	add	r4, r4, #0x38
	mov	r0, #0x38
	add	r8, r8, r0
	add	r7, r7, #0x38
	add	r6, r6, #0x38
	mov	r0, #0x1
	add	r9, r9, r0
	ldr	r0, [r5, #0x70]
	cmp	r9, r0
	bcc	.L561	@cond_branch
.L559:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 SanitizeDayCareMailForRuby,.Lfe41-SanitizeDayCareMailForRuby
	.align	2, 0
	.type	 SanitizeRubyBattleTowerRecord,function
	.thumb_func
SanitizeRubyBattleTowerRecord:
	bx	lr
.Lfe42:
	.size	 SanitizeRubyBattleTowerRecord,.Lfe42-SanitizeRubyBattleTowerRecord
	.align	2, 0
	.type	 SanitizeEmeraldBattleTowerRecord,function
	.thumb_func
SanitizeEmeraldBattleTowerRecord:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r4, #0x0
.L570:
	mov	r0, #0x2c
	mul	r0, r0, r4
	add	r0, r0, #0x34
	add	r1, r5, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L569	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x20
	bl	StripExtCtrlCodes
.L569:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L570	@cond_branch
	add	r0, r5, #0
	bl	CalcEmeraldBattleTowerChecksum
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 SanitizeEmeraldBattleTowerRecord,.Lfe43-SanitizeEmeraldBattleTowerRecord

	.lcomm	gUnknown_03001130,1

	.lcomm	sSecretBasesSave,4

	.lcomm	sTvShowsSave,4

	.lcomm	sPokeNewsSave,4

	.lcomm	sOldManSave,4

	.lcomm	sEasyChatPairsSave,4

	.lcomm	gUnknown_03001148,4

	.lcomm	sBattleTowerSave,4

	.lcomm	sLilycoveLadySave,4

	.lcomm	sApprenticesSave,4

	.lcomm	sBattleTowerSave_Duplicate,4

	.lcomm	sRecordStructSize,4

	.lcomm	gUnknown_03001160,1

	.lcomm	filler_03001164,4

	.lcomm	gUnknown_03001168,12
.text
	.align	2, 0

