@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sMoveRelearnerStruct,object
	.size	 sMoveRelearnerStruct,4
sMoveRelearnerStruct:
	.word	0x0
	.align	2, 0
	.type	 sMoveRelearnerMenuSate,object
	.size	 sMoveRelearnerMenuSate,8
sMoveRelearnerMenuSate:
	.short	0x0
	.space	6
	.section .rodata
	.align	1, 0
	.type	 sMoveRelearnerPaletteData,object
sMoveRelearnerPaletteData:
	.short	0x3e0
	.short	0x1f
	.short	0x1c
	.short	0x1a
	.short	0x18
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x6318
	.short	0x0
	.short	0x7fff
	.size	 sMoveRelearnerPaletteData,32
	.type	 sMoveRelearnerSpriteSheetData,object
sMoveRelearnerSpriteSheetData:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0xe2
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0xe
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0xe2
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0x22
	.byte	0xe
	.byte	0xe0
	.byte	0x22
	.byte	0x22
	.byte	0xde
	.byte	0xe0
	.byte	0x22
	.byte	0xe2
	.byte	0xd
	.byte	0xe0
	.byte	0x22
	.byte	0xde
	.byte	0x0
	.byte	0xe0
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0xe0
	.byte	0xde
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xee
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0x2e
	.byte	0xe2
	.byte	0xd
	.byte	0xe0
	.byte	0x22
	.byte	0xe2
	.byte	0xd
	.byte	0x2e
	.byte	0x22
	.byte	0xe2
	.byte	0xd
	.byte	0x2e
	.byte	0x22
	.byte	0xe2
	.byte	0xd
	.byte	0xe0
	.byte	0x22
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0x2e
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0xe0
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xee
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xd0
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0xee
	.byte	0xee
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x2e
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2e
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xee
	.byte	0xee
	.byte	0xe
	.byte	0x0
	.byte	0x22
	.byte	0x22
	.byte	0xde
	.byte	0x0
	.byte	0x22
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0x22
	.byte	0xde
	.byte	0x0
	.byte	0x0
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xde
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2e
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x2e
	.byte	0x22
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0xe0
	.byte	0xee
	.byte	0xee
	.byte	0x0
	.byte	0x0
	.byte	0xdd
	.byte	0xdd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0xe2
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x22
	.byte	0xe
	.byte	0x0
	.byte	0xee
	.byte	0xee
	.byte	0xde
	.byte	0x0
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0x2
	.byte	0x22
	.byte	0x0
	.byte	0xd2
	.byte	0x2d
	.byte	0xd
	.byte	0x2
	.byte	0xd2
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0xd2
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x20
	.byte	0x0
	.byte	0x20
	.byte	0xd
	.byte	0x0
	.byte	0x2
	.byte	0xd2
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0x2
	.byte	0x22
	.byte	0x0
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x2
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x2
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x2
	.byte	0x20
	.byte	0x22
	.byte	0x22
	.byte	0xd
	.byte	0x0
	.byte	0x22
	.byte	0xd2
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0xc
	.byte	0xcc
	.byte	0x0
	.byte	0xdc
	.byte	0xcd
	.byte	0xd
	.byte	0xc
	.byte	0xdc
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0xdc
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0xc0
	.byte	0x0
	.byte	0xc0
	.byte	0xd
	.byte	0x0
	.byte	0xc
	.byte	0xdc
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0xc
	.byte	0xcc
	.byte	0x0
	.byte	0xcc
	.byte	0xcc
	.byte	0xcc
	.byte	0xc
	.byte	0xcc
	.byte	0xcc
	.byte	0xcc
	.byte	0xc
	.byte	0xcc
	.byte	0xcc
	.byte	0xcc
	.byte	0xc
	.byte	0xc0
	.byte	0xcc
	.byte	0xcc
	.byte	0xd
	.byte	0x0
	.byte	0xcc
	.byte	0xdc
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0xd
	.byte	0x0
	.size	 sMoveRelearnerSpriteSheetData,384
	.align	2, 0
	.type	 sHeartSpriteOamData,object
	.size	 sHeartSpriteOamData,8
sHeartSpriteOamData:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sUnusedOam1,object
	.size	 sUnusedOam1,8
sUnusedOam1:
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sUnusedOam2,object
	.size	 sUnusedOam2,8
sUnusedOam2:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sMoveRelearnerSpriteSheet,object
	.size	 sMoveRelearnerSpriteSheet,8
sMoveRelearnerSpriteSheet:
	.word	sMoveRelearnerSpriteSheetData
	.short	0x180
	.short	0x1595
	.align	2, 0
	.type	 sMoveRelearnerPalette,object
	.size	 sMoveRelearnerPalette,8
sMoveRelearnerPalette:
	.word	sMoveRelearnerPaletteData
	.short	0x1596
	.space	2
	.align	2, 0
	.type	 sDisplayModeArrowsTemplate,object
	.size	 sDisplayModeArrowsTemplate,16
sDisplayModeArrowsTemplate:
	.byte	0x0
	.byte	0x1b
	.byte	0x10
	.byte	0x1
	.byte	0x75
	.byte	0x10
	.short	0xffff
	.short	0xffff
	.short	0x14cd
	.short	0x14cd
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sMoveListScrollArrowsTemplate,object
	.size	 sMoveListScrollArrowsTemplate,16
sMoveListScrollArrowsTemplate:
	.byte	0x2
	.byte	0xc0
	.byte	0x8
	.byte	0x3
	.byte	0xc0
	.byte	0x68
	.short	0x0
	.short	0x0
	.short	0x1531
	.short	0x1531
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sHeartSprite_AppealEmptyFrame,object
sHeartSprite_AppealEmptyFrame:
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sHeartSprite_AppealEmptyFrame,8
	.align	2, 0
	.type	 sHeartSprite_AppealFullFrame,object
sHeartSprite_AppealFullFrame:
	.short	0x9
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sHeartSprite_AppealFullFrame,8
	.align	2, 0
	.type	 sHeartSprite_JamEmptyFrame,object
sHeartSprite_JamEmptyFrame:
	.short	0xa
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sHeartSprite_JamEmptyFrame,8
	.align	2, 0
	.type	 sHeartSprite_JamFullFrame,object
sHeartSprite_JamFullFrame:
	.short	0xb
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sHeartSprite_JamFullFrame,8
	.align	2, 0
	.type	 sHeartSpriteAnimationCommands,object
sHeartSpriteAnimationCommands:
	.word	sHeartSprite_AppealEmptyFrame
	.word	sHeartSprite_AppealFullFrame
	.word	sHeartSprite_JamEmptyFrame
	.word	sHeartSprite_JamFullFrame
	.size	 sHeartSpriteAnimationCommands,16
	.align	2, 0
	.type	 sConstestMoveHeartSprite,object
	.size	 sConstestMoveHeartSprite,24
sConstestMoveHeartSprite:
	.short	0x1595
	.short	0x1596
	.word	sHeartSpriteOamData
	.word	sHeartSpriteAnimationCommands
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sMoveRelearnerMenuBackgroundTemplates,object
	.size	 sMoveRelearnerMenuBackgroundTemplates,8
sMoveRelearnerMenuBackgroundTemplates:
	.byte	0xf0
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xe1
	.byte	0x11
	.byte	0x0
	.space	1
.text
	.align	2, 0
	.type	 VBlankCB_MoveRelearner,function
	.thumb_func
VBlankCB_MoveRelearner:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 VBlankCB_MoveRelearner,.Lfe1-VBlankCB_MoveRelearner
	.align	2, 0
	.globl	TeachMoveRelearnerMove
	.type	 TeachMoveRelearnerMove,function
	.thumb_func
TeachMoveRelearnerMove:
	push	{lr}
	add	sp, sp, #-0x4
	bl	ScriptContext2_Enable
	ldr	r0, .L4
	mov	r1, #0xa
	bl	CreateTask
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	Task_WaitForFadeOut
.Lfe2:
	.size	 TeachMoveRelearnerMove,.Lfe2-TeachMoveRelearnerMove
	.align	2, 0
	.type	 Task_WaitForFadeOut,function
	.thumb_func
Task_WaitForFadeOut:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L7	@cond_branch
	ldr	r0, .L8+0x4
	bl	SetMainCallback2
	ldr	r1, .L8+0x8
	ldr	r0, .L8+0xc
	str	r0, [r1]
	add	r0, r4, #0
	bl	DestroyTask
.L7:
	pop	{r4}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gPaletteFade
	.word	CB2_InitLearnMove
	.word	gFieldCallback
	.word	FieldCB_ContinueScriptHandleMusic
.Lfe3:
	.size	 Task_WaitForFadeOut,.Lfe3-Task_WaitForFadeOut
	.align	2, 0
	.type	 CB2_InitLearnMove,function
	.thumb_func
CB2_InitLearnMove:
	push	{r4, r5, r6, lr}
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	bl	ClearScheduledBgCopiesToVram
	ldr	r6, .L11
	mov	r0, #0x84
	lsl	r0, r0, #0x2
	bl	AllocZeroed
	str	r0, [r6]
	ldr	r1, .L11+0x4
	ldrh	r1, [r1]
	add	r0, r0, #0x76
	mov	r5, #0x0
	strb	r1, [r0]
	ldr	r0, .L11+0x8
	bl	SetVBlankCallback
	bl	InitMoveRelearnerBackgroundLayers
	mov	r0, #0x0
	bl	InitMoveRelearnerWindows
	ldr	r4, .L11+0xc
	mov	r0, #0x0
	strh	r5, [r4]
	strh	r5, [r4, #0x2]
	strb	r0, [r4, #0x4]
	bl	CreateLearnableMovesList
	ldr	r0, .L11+0x10
	bl	LoadSpriteSheet
	ldr	r0, .L11+0x14
	bl	LoadSpritePalette
	bl	CreateUISprites
	ldr	r0, .L11+0x18
	ldrh	r1, [r4]
	ldrh	r2, [r4, #0x2]
	bl	ListMenuInit
	ldr	r1, [r6]
	ldr	r2, .L11+0x1c
	add	r1, r1, r2
	strb	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x2
	bl	FillPalette
	ldr	r0, .L11+0x20
	bl	SetMainCallback2
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	sMoveRelearnerStruct
	.word	gSpecialVar_0x8004
	.word	VBlankCB_MoveRelearner
	.word	sMoveRelearnerMenuSate
	.word	sMoveRelearnerSpriteSheet
	.word	sMoveRelearnerPalette
	.word	gMultiuseListMenuTemplate
	.word	0x20a
	.word	CB2_MoveRelearnerMain
.Lfe4:
	.size	 CB2_InitLearnMove,.Lfe4-CB2_InitLearnMove
	.align	2, 0
	.type	 CB2_InitLearnMoveReturnFromSelectMove,function
	.thumb_func
CB2_InitLearnMoveReturnFromSelectMove:
	push	{r4, r5, lr}
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	bl	ClearScheduledBgCopiesToVram
	ldr	r5, .L14
	mov	r0, #0x84
	lsl	r0, r0, #0x2
	bl	AllocZeroed
	str	r0, [r5]
	mov	r1, #0x1c
	strb	r1, [r0]
	ldr	r0, [r5]
	ldr	r1, .L14+0x4
	ldrh	r1, [r1]
	add	r0, r0, #0x76
	strb	r1, [r0]
	ldr	r0, [r5]
	ldr	r1, .L14+0x8
	ldrh	r1, [r1]
	add	r0, r0, #0x77
	strb	r1, [r0]
	ldr	r0, .L14+0xc
	bl	SetVBlankCallback
	bl	InitMoveRelearnerBackgroundLayers
	ldr	r4, .L14+0x10
	ldrb	r0, [r4, #0x4]
	bl	InitMoveRelearnerWindows
	bl	CreateLearnableMovesList
	ldr	r0, .L14+0x14
	bl	LoadSpriteSheet
	ldr	r0, .L14+0x18
	bl	LoadSpritePalette
	bl	CreateUISprites
	ldr	r0, .L14+0x1c
	ldrh	r1, [r4]
	ldrh	r2, [r4, #0x2]
	bl	ListMenuInit
	ldr	r1, [r5]
	ldr	r2, .L14+0x20
	add	r1, r1, r2
	strb	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x2
	bl	FillPalette
	ldr	r0, .L14+0x24
	bl	SetMainCallback2
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	sMoveRelearnerStruct
	.word	gSpecialVar_0x8004
	.word	gSpecialVar_0x8005
	.word	VBlankCB_MoveRelearner
	.word	sMoveRelearnerMenuSate
	.word	sMoveRelearnerSpriteSheet
	.word	sMoveRelearnerPalette
	.word	gMultiuseListMenuTemplate
	.word	0x20a
	.word	CB2_MoveRelearnerMain
.Lfe5:
	.size	 CB2_InitLearnMoveReturnFromSelectMove,.Lfe5-CB2_InitLearnMoveReturnFromSelectMove
	.align	2, 0
	.type	 InitMoveRelearnerBackgroundLayers,function
	.thumb_func
InitMoveRelearnerBackgroundLayers:
	push	{lr}
	bl	ResetVramOamAndBgCntRegs
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L17
	mov	r0, #0x0
	mov	r2, #0x2
	bl	InitBgsFromTemplates
	bl	ResetAllBgsCoordinates
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	sMoveRelearnerMenuBackgroundTemplates
.Lfe6:
	.size	 InitMoveRelearnerBackgroundLayers,.Lfe6-InitMoveRelearnerBackgroundLayers
	.align	2, 0
	.type	 CB2_MoveRelearnerMain,function
	.thumb_func
CB2_MoveRelearnerMain:
	push	{lr}
	bl	DoMoveRelearnerMain
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	DoScheduledBgTilemapCopiesToVram
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 CB2_MoveRelearnerMain,.Lfe7-CB2_MoveRelearnerMain
	.align	2, 0
	.type	 FormatAndPrintText,function
	.thumb_func
FormatAndPrintText:
	push	{r4, lr}
	add	r1, r0, #0
	ldr	r4, .L21
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	bl	MoveRelearnerPrintText
	pop	{r4}
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	gStringVar4
.Lfe8:
	.size	 FormatAndPrintText,.Lfe8-FormatAndPrintText
	.align	2, 0
	.type	 DoMoveRelearnerMain,function
	.thumb_func
DoMoveRelearnerMain:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L111
	ldr	r0, [r1]
	ldrb	r0, [r0]
	add	r7, r1, #0
	cmp	r0, #0x21
	bls	.LCB330
	b	.L24	@long jump
.LCB330:
	lsl	r0, r0, #0x2
	ldr	r1, .L111+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L112:
	.align	2, 0
.L111:
	.word	sMoveRelearnerStruct
	.word	.L105
	.align	2, 0
	.align	2, 0
.L105:
	.word	.L25
	.word	.L26
	.word	.L28
	.word	.L29
	.word	.L30
	.word	.L31
	.word	.L32
	.word	.L24
	.word	.L33
	.word	.L35
	.word	.L24
	.word	.L24
	.word	.L45
	.word	.L47
	.word	.L86
	.word	.L87
	.word	.L55
	.word	.L56
	.word	.L58
	.word	.L79
	.word	.L81
	.word	.L83
	.word	.L85
	.word	.L24
	.word	.L63
	.word	.L64
	.word	.L66
	.word	.L74
	.word	.L89
	.word	.L93
	.word	.L97
	.word	.L99
	.word	.L101
	.word	.L103
.L25:
	ldr	r1, [r7]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	mov	r4, #0x0
	strb	r0, [r1]
	mov	r0, #0x0
	bl	HideHeartSpritesAndShowTeachMoveText
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x0
	b	.L107
.L26:
	ldr	r0, .L113
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB373
	b	.L24	@long jump
.LCB373:
	ldr	r1, [r7]
	mov	r0, #0x4
	b	.L108
.L114:
	.align	2, 0
.L113:
	.word	gPaletteFade
.L28:
	ldr	r1, [r7]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L108
.L29:
	mov	r0, #0x0
	bl	HideHeartSpritesAndShowTeachMoveText
	b	.L109
.L30:
	mov	r0, #0x0
	bl	HandleInput
	b	.L24
.L31:
	mov	r0, #0x0
	bl	ShowTeachMoveText
.L109:
	ldr	r0, .L115
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	bl	AddScrollArrows
	b	.L24
.L116:
	.align	2, 0
.L115:
	.word	sMoveRelearnerStruct
.L32:
	mov	r0, #0x1
	bl	HandleInput
	b	.L24
.L33:
	bl	MoveRelearnerRunTextPrinters
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB432
	b	.L24	@long jump
.LCB432:
	bl	MoveRelearnerCreateYesNoMenu
	ldr	r0, .L117
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L108
.L118:
	.align	2, 0
.L117:
	.word	sMoveRelearnerStruct
.L35:
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L36	@cond_branch
	ldr	r5, .L119
	ldr	r0, [r5]
	add	r0, r0, #0x76
	ldrb	r1, [r0]
	mov	r0, #0x64
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r0, .L119+0x4
	add	r4, r4, r0
	bl	GetCurrentSelectedMove
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	GiveMoveToMon
	lsl	r0, r0, #0x10
	ldr	r1, .L119+0x8
	cmp	r0, r1
	beq	.L37	@cond_branch
	ldr	r0, .L119+0xc
	bl	FormatAndPrintText
	ldr	r1, .L119+0x10
	mov	r0, #0x1
	strh	r0, [r1]
	ldr	r1, [r5]
	mov	r0, #0x1f
	b	.L108
.L120:
	.align	2, 0
.L119:
	.word	sMoveRelearnerStruct
	.word	gPlayerParty
	.word	-0x10000
	.word	gText_MoveRelearnerPkmnLearnedMove
	.word	gSpecialVar_0x8004
.L37:
	ldr	r1, [r5]
	mov	r0, #0x10
	b	.L108
.L36:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L41	@cond_branch
	cmp	r1, #0x1
	beq	.LCB516
	b	.L24	@long jump
.LCB516:
.L41:
	ldr	r0, .L121
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L42	@cond_branch
	ldr	r0, .L121+0x4
	ldr	r1, [r0]
	mov	r0, #0x3
	b	.L108
.L122:
	.align	2, 0
.L121:
	.word	sMoveRelearnerMenuSate
	.word	sMoveRelearnerStruct
.L42:
	cmp	r0, #0x1
	beq	.LCB540
	b	.L24	@long jump
.LCB540:
	ldr	r0, .L123
	ldr	r1, [r0]
	mov	r0, #0x5
	b	.L108
.L124:
	.align	2, 0
.L123:
	.word	sMoveRelearnerStruct
.L45:
	bl	MoveRelearnerRunTextPrinters
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB560
	b	.L24	@long jump
.LCB560:
	bl	MoveRelearnerCreateYesNoMenu
	ldr	r0, .L125
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L108
.L126:
	.align	2, 0
.L125:
	.word	sMoveRelearnerStruct
.L47:
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L48	@cond_branch
	ldr	r0, .L127
	strh	r1, [r0]
	b	.L110
.L128:
	.align	2, 0
.L127:
	.word	gSpecialVar_0x8004
.L48:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L51	@cond_branch
	cmp	r1, #0x1
	beq	.LCB604
	b	.L24	@long jump
.LCB604:
.L51:
	ldr	r0, .L129
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L52	@cond_branch
	ldr	r0, .L129+0x4
	ldr	r1, [r0]
	mov	r0, #0x3
	b	.L108
.L130:
	.align	2, 0
.L129:
	.word	sMoveRelearnerMenuSate
	.word	sMoveRelearnerStruct
.L52:
	cmp	r0, #0x1
	beq	.LCB628
	b	.L24	@long jump
.LCB628:
	ldr	r0, .L131
	ldr	r1, [r0]
	mov	r0, #0x5
	b	.L108
.L132:
	.align	2, 0
.L131:
	.word	sMoveRelearnerStruct
.L55:
	ldr	r0, .L133
	bl	FormatAndPrintText
	ldr	r0, .L133+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L108
.L134:
	.align	2, 0
.L133:
	.word	gText_MoveRelearnerPkmnTryingToLearnMove
	.word	sMoveRelearnerStruct
.L56:
	bl	MoveRelearnerRunTextPrinters
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB665
	b	.L24	@long jump
.LCB665:
	bl	MoveRelearnerCreateYesNoMenu
	ldr	r0, .L135
	ldr	r1, [r0]
	mov	r0, #0x12
	b	.L108
.L136:
	.align	2, 0
.L135:
	.word	sMoveRelearnerStruct
.L58:
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L59	@cond_branch
	ldr	r0, .L137
	bl	FormatAndPrintText
	ldr	r0, .L137+0x4
	ldr	r1, [r0]
	mov	r0, #0x13
	b	.L108
.L138:
	.align	2, 0
.L137:
	.word	gText_MoveRelearnerWhichMoveToForget
	.word	sMoveRelearnerStruct
.L59:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L62	@cond_branch
	cmp	r1, #0x1
	beq	.LCB713
	b	.L24	@long jump
.LCB713:
.L62:
	ldr	r0, .L139
	ldr	r1, [r0]
	mov	r0, #0x18
	b	.L108
.L140:
	.align	2, 0
.L139:
	.word	sMoveRelearnerStruct
.L63:
	ldr	r4, .L141
	bl	GetCurrentSelectedMove
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	ldr	r0, .L141+0x4
	add	r1, r1, r0
	add	r0, r4, #0
	bl	StringCopy
	ldr	r0, .L141+0x8
	bl	FormatAndPrintText
	ldr	r0, .L141+0xc
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L108
.L142:
	.align	2, 0
.L141:
	.word	gStringVar2
	.word	gMoveNames
	.word	gText_MoveRelearnerStopTryingToTeachMove
	.word	sMoveRelearnerStruct
.L64:
	bl	MoveRelearnerRunTextPrinters
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB763
	b	.L24	@long jump
.LCB763:
	bl	MoveRelearnerCreateYesNoMenu
	ldr	r0, .L143
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L108
.L144:
	.align	2, 0
.L143:
	.word	sMoveRelearnerStruct
.L66:
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L67	@cond_branch
	ldr	r0, .L145
	ldr	r1, [r0]
	mov	r0, #0x1b
	b	.L108
.L146:
	.align	2, 0
.L145:
	.word	sMoveRelearnerStruct
.L67:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L70	@cond_branch
	cmp	r1, #0x1
	beq	.LCB808
	b	.L24	@long jump
.LCB808:
.L70:
	ldr	r0, .L147
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L71	@cond_branch
	ldr	r2, .L147+0x4
	ldr	r1, [r2]
	mov	r0, #0x3
	strb	r0, [r1]
	add	r7, r2, #0
	b	.L72
.L148:
	.align	2, 0
.L147:
	.word	sMoveRelearnerMenuSate
	.word	sMoveRelearnerStruct
.L71:
	ldr	r7, .L149
	cmp	r0, #0x1
	bne	.L72	@cond_branch
	ldr	r1, [r7]
	mov	r0, #0x5
	strb	r0, [r1]
.L72:
	ldr	r1, [r7]
	mov	r0, #0x10
	b	.L108
.L150:
	.align	2, 0
.L149:
	.word	sMoveRelearnerStruct
.L74:
	bl	MoveRelearnerRunTextPrinters
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB861
	b	.L24	@long jump
.LCB861:
	mov	r0, #0x3
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r0, .L151
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L76	@cond_branch
	ldr	r0, .L151+0x4
	ldr	r1, [r0]
	mov	r0, #0x3
	b	.L108
.L152:
	.align	2, 0
.L151:
	.word	sMoveRelearnerMenuSate
	.word	sMoveRelearnerStruct
.L76:
	cmp	r0, #0x1
	beq	.LCB887
	b	.L24	@long jump
.LCB887:
	ldr	r0, .L153
	ldr	r1, [r0]
	mov	r0, #0x5
	b	.L108
.L154:
	.align	2, 0
.L153:
	.word	sMoveRelearnerStruct
.L79:
	bl	MoveRelearnerRunTextPrinters
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0
	beq	.LCB906
	b	.L24	@long jump
.LCB906:
	ldr	r0, .L155
	ldr	r1, [r0]
	mov	r0, #0x14
	strb	r0, [r1]
	sub	r0, r0, #0x15
	str	r2, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L24
.L156:
	.align	2, 0
.L155:
	.word	sMoveRelearnerStruct
.L81:
	ldr	r0, .L157
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB935
	b	.L24	@long jump
.LCB935:
	bl	GetCurrentSelectedMove
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L157+0x4
	ldr	r1, .L157+0x8
	ldr	r1, [r1]
	add	r1, r1, #0x76
	ldrb	r1, [r1]
	ldr	r2, .L157+0xc
	ldrb	r2, [r2]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L157+0x10
	str	r0, [sp]
	add	r0, r4, #0
	bl	ShowSelectMovePokemonSummaryScreen
	bl	FreeMoveRelearnerResources
	b	.L24
.L158:
	.align	2, 0
.L157:
	.word	gPaletteFade
	.word	gPlayerParty
	.word	sMoveRelearnerStruct
	.word	gPlayerPartyCount
	.word	CB2_InitLearnMoveReturnFromSelectMove
.L83:
	bl	MoveRelearnerRunTextPrinters
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB977
	b	.L24	@long jump
.LCB977:
	b	.L110
.L85:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
.L107:
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	b	.L24
.L86:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L159
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L108
.L160:
	.align	2, 0
.L159:
	.word	sMoveRelearnerStruct
.L87:
	ldr	r0, .L161
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1024
	b	.L24	@long jump
.LCB1024:
	bl	FreeMoveRelearnerResources
	ldr	r0, .L161+0x4
	bl	SetMainCallback2
	b	.L24
.L162:
	.align	2, 0
.L161:
	.word	gPaletteFade
	.word	CB2_ReturnToField
.L89:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L163
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L163+0x4
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L90	@cond_branch
	mov	r0, #0x1
	bl	HideHeartSpritesAndShowTeachMoveText
	b	.L91
.L164:
	.align	2, 0
.L163:
	.word	sMoveRelearnerStruct
	.word	sMoveRelearnerMenuSate
.L90:
	cmp	r0, #0x1
	bne	.L91	@cond_branch
	mov	r0, #0x1
	bl	ShowTeachMoveText
.L91:
	bl	RemoveScrollArrows
	mov	r0, #0x3
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L24
.L93:
	ldr	r0, .L165
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1094
	b	.L24	@long jump
.LCB1094:
	ldr	r1, [r7]
	add	r2, r1, #0
	add	r2, r2, #0x77
	ldrb	r0, [r2]
	cmp	r0, #0x4
	bne	.L95	@cond_branch
	mov	r0, #0x18
	b	.L108
.L166:
	.align	2, 0
.L165:
	.word	gPaletteFade
.L95:
	add	r0, r1, #0
	add	r0, r0, #0x76
	ldrb	r0, [r0]
	mov	r4, #0x64
	mul	r0, r0, r4
	ldr	r5, .L167
	add	r0, r0, r5
	ldrb	r1, [r2]
	add	r1, r1, #0xd
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L167+0x4
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	ldr	r6, .L167+0x8
	add	r1, r1, r6
	add	r0, r2, #0
	bl	StringCopy
	ldr	r1, [r7]
	add	r0, r1, #0
	add	r0, r0, #0x76
	ldrb	r0, [r0]
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r1, r1, #0x77
	ldrb	r1, [r1]
	bl	RemoveMonPPBonus
	ldr	r0, [r7]
	add	r0, r0, #0x76
	ldrb	r0, [r0]
	mul	r4, r4, r0
	add	r4, r4, r5
	bl	GetCurrentSelectedMove
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [r7]
	add	r0, r0, #0x77
	ldrb	r2, [r0]
	add	r0, r4, #0
	bl	SetMonMoveSlot
	ldr	r4, .L167+0xc
	bl	GetCurrentSelectedMove
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	add	r1, r1, r6
	add	r0, r4, #0
	bl	StringCopy
	ldr	r0, .L167+0x10
	bl	FormatAndPrintText
	ldr	r1, [r7]
	mov	r0, #0x1e
	strb	r0, [r1]
	ldr	r1, .L167+0x14
	mov	r0, #0x1
	strh	r0, [r1]
	b	.L24
.L168:
	.align	2, 0
.L167:
	.word	gPlayerParty
	.word	gStringVar3
	.word	gMoveNames
	.word	gStringVar2
	.word	gText_MoveRelearnerAndPoof
	.word	gSpecialVar_0x8004
.L97:
	bl	MoveRelearnerRunTextPrinters
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L24	@cond_branch
	ldr	r0, .L169
	bl	FormatAndPrintText
	ldr	r0, .L169+0x4
	ldr	r1, [r0]
	mov	r0, #0x1f
	strb	r0, [r1]
	ldr	r0, .L169+0x8
	bl	PlayFanfare
	b	.L24
.L170:
	.align	2, 0
.L169:
	.word	gText_MoveRelearnerPkmnForgotMoveAndLearnedNew
	.word	sMoveRelearnerStruct
	.word	0x16f
.L99:
	bl	MoveRelearnerRunTextPrinters
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L24	@cond_branch
	ldr	r0, .L171
	bl	PlayFanfare
	ldr	r0, .L171+0x4
	ldr	r1, [r0]
	mov	r0, #0x20
	b	.L108
.L172:
	.align	2, 0
.L171:
	.word	0x16f
	.word	sMoveRelearnerStruct
.L101:
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L24	@cond_branch
	ldr	r0, .L173
	ldr	r1, [r0]
	mov	r0, #0x21
	b	.L108
.L174:
	.align	2, 0
.L173:
	.word	sMoveRelearnerStruct
.L103:
	ldr	r0, .L175
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L24	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L110:
	ldr	r0, .L175+0x4
	ldr	r1, [r0]
	mov	r0, #0xe
.L108:
	strb	r0, [r1]
.L24:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L176:
	.align	2, 0
.L175:
	.word	gMain
	.word	sMoveRelearnerStruct
.Lfe9:
	.size	 DoMoveRelearnerMain,.Lfe9-DoMoveRelearnerMain
	.align	2, 0
	.type	 FreeMoveRelearnerResources,function
	.thumb_func
FreeMoveRelearnerResources:
	push	{r4, lr}
	bl	RemoveScrollArrows
	ldr	r4, .L178
	ldr	r0, [r4]
	ldr	r1, .L178+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldr	r1, .L178+0x8
	add	r2, r1, #0x2
	bl	DestroyListMenuTask
	bl	FreeAllWindowBuffers
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	pop	{r4}
	pop	{r0}
	bx	r0
.L179:
	.align	2, 0
.L178:
	.word	sMoveRelearnerStruct
	.word	0x20a
	.word	sMoveRelearnerMenuSate
.Lfe10:
	.size	 FreeMoveRelearnerResources,.Lfe10-FreeMoveRelearnerResources
	.align	2, 0
	.type	 HideHeartSpritesAndShowTeachMoveText,function
	.thumb_func
HideHeartSpritesAndShowTeachMoveText:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r2, #0x0
	ldr	r6, .L187
	ldr	r4, .L187+0x4
	mov	r3, #0x4
.L184:
	ldr	r0, [r4]
	add	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0xf
	ble	.L184	@cond_branch
	cmp	r5, #0
	bne	.L186	@cond_branch
	ldr	r4, .L187+0x8
	ldr	r1, .L187+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x3
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
.L186:
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L188:
	.align	2, 0
.L187:
	.word	gSprites
	.word	sMoveRelearnerStruct
	.word	gStringVar4
	.word	gText_TeachWhichMoveToPkmn
.Lfe11:
	.size	 HideHeartSpritesAndShowTeachMoveText,.Lfe11-HideHeartSpritesAndShowTeachMoveText
	.align	2, 0
	.type	 HandleInput,function
	.thumb_func
HandleInput:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r6, .L198
	ldr	r0, [r6]
	ldr	r4, .L198+0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	ListMenu_ProcessInput
	add	r5, r0, #0
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r0, [r0]
	ldr	r4, .L198+0x8
	add	r2, r4, #0x2
	add	r1, r4, #0
	bl	ListMenuGetScrollAndRow
	mov	r0, #0x2
	neg	r0, r0
	cmp	r5, r0
	beq	.L195	@cond_branch
	add	r0, r0, #0x1
	cmp	r5, r0
	bne	.L196	@cond_branch
	ldr	r0, .L198+0xc
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L192	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L190	@cond_branch
.L192:
	mov	r0, #0x5
	bl	PlaySE
	cmp	r7, #0
	bne	.L193	@cond_branch
	mov	r0, #0x1
	bl	PutWindowTilemap
	ldr	r0, [r6]
	mov	r1, #0x5
	strb	r1, [r0]
	mov	r0, #0x1
	strb	r0, [r4, #0x4]
	b	.L194
.L199:
	.align	2, 0
.L198:
	.word	sMoveRelearnerStruct
	.word	0x20a
	.word	sMoveRelearnerMenuSate
	.word	gMain
.L193:
	mov	r0, #0x0
	bl	PutWindowTilemap
	ldr	r0, [r6]
	mov	r2, #0x0
	mov	r1, #0x3
	strb	r1, [r0]
	strb	r2, [r4, #0x4]
.L194:
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	bl	GetCurrentSelectedMove
	bl	MoveRelearnerShowHideHearts
	b	.L190
.L195:
	mov	r0, #0x5
	bl	PlaySE
	bl	RemoveScrollArrows
	ldr	r1, [r6]
	mov	r0, #0xc
	strb	r0, [r1]
	ldr	r4, .L200
	ldr	r1, .L200+0x4
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	bl	MoveRelearnerPrintText
	b	.L190
.L201:
	.align	2, 0
.L200:
	.word	gStringVar4
	.word	gText_MoveRelearnerGiveUp
.L196:
	mov	r0, #0x5
	bl	PlaySE
	bl	RemoveScrollArrows
	ldr	r1, [r6]
	mov	r0, #0x8
	strb	r0, [r1]
	ldr	r0, .L202
	lsl	r1, r5, #0x4
	add	r1, r1, r5
	ldr	r2, .L202+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L202+0x8
	ldr	r1, .L202+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	bl	MoveRelearnerPrintText
.L190:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L203:
	.align	2, 0
.L202:
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar4
	.word	gText_MoveRelearnerTeachMoveConfirm
.Lfe12:
	.size	 HandleInput,.Lfe12-HandleInput
	.align	2, 0
	.type	 GetCurrentSelectedMove,function
	.thumb_func
GetCurrentSelectedMove:
	ldr	r0, .L205
	ldr	r2, [r0]
	ldr	r1, .L205+0x4
	ldrh	r0, [r1, #0x2]
	ldrh	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, #0x7c
	add	r2, r2, r0
	ldr	r0, [r2]
	bx	lr
.L206:
	.align	2, 0
.L205:
	.word	sMoveRelearnerStruct
	.word	sMoveRelearnerMenuSate
.Lfe13:
	.size	 GetCurrentSelectedMove,.Lfe13-GetCurrentSelectedMove
	.align	2, 0
	.type	 ShowTeachMoveText,function
	.thumb_func
ShowTeachMoveText:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L208	@cond_branch
	ldr	r4, .L209
	ldr	r1, .L209+0x4
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x3
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
.L208:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L210:
	.align	2, 0
.L209:
	.word	gStringVar4
	.word	gText_TeachWhichMoveToPkmn
.Lfe14:
	.size	 ShowTeachMoveText,.Lfe14-ShowTeachMoveText
	.align	2, 0
	.type	 CreateUISprites,function
	.thumb_func
CreateUISprites:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L231
	ldr	r0, [r2]
	mov	r1, #0x83
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r1, .L231+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0]
	bl	AddScrollArrows
	mov	r4, #0x0
	ldr	r5, .L231+0x8
.L215:
	add	r2, r4, #0
	cmp	r4, #0
	bge	.L216	@cond_branch
	add	r2, r4, #0x3
.L216:
	asr	r2, r2, #0x2
	lsl	r1, r2, #0x2
	sub	r1, r4, r1
	lsl	r1, r1, #0x13
	mov	r0, #0xd0
	lsl	r0, r0, #0xf
	add	r1, r1, r0
	asr	r1, r1, #0x10
	lsl	r2, r2, #0x13
	mov	r0, #0x90
	lsl	r0, r0, #0xe
	add	r2, r2, r0
	asr	r2, r2, #0x10
	add	r0, r5, #0
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r2, .L231
	ldr	r1, [r2]
	add	r1, r1, #0x1
	add	r1, r1, r4
	strb	r0, [r1]
	add	r4, r4, #0x1
	cmp	r4, #0x7
	ble	.L215	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L231+0x8
	add	r6, r2, #0
.L222:
	add	r2, r4, #0
	cmp	r4, #0
	bge	.L223	@cond_branch
	add	r2, r4, #0x3
.L223:
	asr	r2, r2, #0x2
	lsl	r1, r2, #0x2
	sub	r1, r4, r1
	lsl	r1, r1, #0x13
	mov	r0, #0xd0
	lsl	r0, r0, #0xf
	add	r1, r1, r0
	asr	r1, r1, #0x10
	lsl	r2, r2, #0x13
	mov	r0, #0xd0
	lsl	r0, r0, #0xe
	add	r2, r2, r0
	asr	r2, r2, #0x10
	add	r0, r7, #0
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r1, [r6]
	add	r2, r4, #0
	add	r2, r2, #0x8
	add	r1, r1, #0x1
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L231+0xc
	add	r0, r0, r5
	mov	r1, #0x2
	bl	StartSpriteAnim
	add	r4, r4, #0x1
	cmp	r4, #0x7
	ble	.L222	@cond_branch
	mov	r4, #0x0
	ldr	r3, .L231
	mov	r2, #0x4
.L229:
	ldr	r0, [r3]
	add	r0, r0, #0x1
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0xf
	ble	.L229	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L232:
	.align	2, 0
.L231:
	.word	sMoveRelearnerStruct
	.word	0x20b
	.word	sConstestMoveHeartSprite
	.word	gSprites
.Lfe15:
	.size	 CreateUISprites,.Lfe15-CreateUISprites
	.align	2, 0
	.type	 AddScrollArrows,function
	.thumb_func
AddScrollArrows:
	push	{r4, r5, r6, lr}
	ldr	r4, .L236
	ldr	r1, [r4]
	mov	r2, #0x83
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L234	@cond_branch
	ldr	r0, .L236+0x4
	ldr	r3, .L236+0x8
	add	r1, r1, r3
	bl	AddScrollIndicatorArrowPair
	ldr	r1, [r4]
	mov	r5, #0x83
	lsl	r5, r5, #0x2
	add	r1, r1, r5
	strb	r0, [r1]
.L234:
	ldr	r0, [r4]
	ldr	r6, .L236+0xc
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L235	@cond_branch
	ldr	r0, .L236+0x10
	add	r2, r0, #0
	ldr	r1, .L236+0x14
	ldmia	r1!, {r3, r5, r6}
	stmia	r2!, {r3, r5, r6}
	ldr	r1, [r1]
	str	r1, [r2]
	ldr	r1, [r4]
	mov	r3, #0x82
	lsl	r3, r3, #0x2
	add	r2, r1, r3
	ldrb	r2, [r2]
	ldr	r5, .L236+0x18
	add	r1, r1, r5
	ldrb	r1, [r1]
	sub	r2, r2, r1
	strh	r2, [r0, #0x8]
	ldr	r1, .L236+0x1c
	bl	AddScrollIndicatorArrowPair
	ldr	r1, [r4]
	ldr	r6, .L236+0xc
	add	r1, r1, r6
	strb	r0, [r1]
.L235:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L237:
	.align	2, 0
.L236:
	.word	sMoveRelearnerStruct
	.word	sDisplayModeArrowsTemplate
	.word	0x20e
	.word	0x20b
	.word	gTempScrollArrowTemplate
	.word	sMoveListScrollArrowsTemplate
	.word	0x209
	.word	sMoveRelearnerMenuSate
.Lfe16:
	.size	 AddScrollArrows,.Lfe16-AddScrollArrows
	.align	2, 0
	.type	 RemoveScrollArrows,function
	.thumb_func
RemoveScrollArrows:
	push	{r4, lr}
	ldr	r4, .L241
	ldr	r0, [r4]
	mov	r2, #0x83
	lsl	r2, r2, #0x2
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L239	@cond_branch
	bl	RemoveScrollIndicatorArrowPair
	ldr	r0, [r4]
	mov	r1, #0x83
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
.L239:
	ldr	r0, [r4]
	ldr	r2, .L241+0x4
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L240	@cond_branch
	bl	RemoveScrollIndicatorArrowPair
	ldr	r0, [r4]
	ldr	r1, .L241+0x4
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
.L240:
	pop	{r4}
	pop	{r0}
	bx	r0
.L242:
	.align	2, 0
.L241:
	.word	sMoveRelearnerStruct
	.word	0x20b
.Lfe17:
	.size	 RemoveScrollArrows,.Lfe17-RemoveScrollArrows
	.align	2, 0
	.type	 CreateLearnableMovesList,function
	.thumb_func
CreateLearnableMovesList:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	ldr	r4, .L249
	ldr	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x76
	ldrb	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L249+0x4
	add	r0, r0, r2
	add	r1, r1, #0x12
	bl	GetMoveRelearnerMoves
	ldr	r1, [r4]
	mov	r7, #0x82
	lsl	r7, r7, #0x2
	add	r1, r1, r7
	strb	r0, [r1]
	mov	r6, #0x0
	ldr	r0, [r4]
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r6, r0
	bge	.L245	@cond_branch
	mov	r8, r4
	ldr	r0, .L249+0x8
	mov	ip, r0
.L247:
	mov	r2, r8
	ldr	r5, [r2]
	lsl	r4, r6, #0x3
	add	r3, r5, #0
	add	r3, r3, #0x78
	add	r3, r3, r4
	lsl	r0, r6, #0x1
	add	r2, r5, #0
	add	r2, r2, #0x12
	add	r2, r2, r0
	ldrh	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, ip
	str	r0, [r3]
	add	r0, r5, #0
	add	r0, r0, #0x7c
	add	r0, r0, r4
	ldrh	r1, [r2]
	str	r1, [r0]
	add	r6, r6, #0x1
	add	r0, r5, r7
	ldrb	r0, [r0]
	cmp	r6, r0
	blt	.L247	@cond_branch
.L245:
	ldr	r4, .L249
	ldr	r0, [r4]
	add	r0, r0, #0x76
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L249+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	mov	r2, sp
	bl	GetMonData
	ldr	r0, .L249+0xc
	mov	r1, sp
	bl	StringCopy10
	ldr	r2, [r4]
	mov	r5, #0x82
	lsl	r5, r5, #0x2
	add	r3, r2, r5
	ldrb	r0, [r3]
	lsl	r0, r0, #0x3
	add	r1, r2, #0
	add	r1, r1, #0x78
	add	r1, r1, r0
	ldr	r0, .L249+0x10
	str	r0, [r1]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x3
	add	r2, r2, #0x7c
	add	r2, r2, r0
	mov	r0, #0x2
	neg	r0, r0
	str	r0, [r2]
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	ldr	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x78
	add	r1, r1, r5
	ldrb	r1, [r1]
	bl	LoadMoveRelearnerMovesList
	ldr	r1, [r4]
	ldr	r2, .L249+0x14
	add	r1, r1, r2
	strb	r0, [r1]
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L250:
	.align	2, 0
.L249:
	.word	sMoveRelearnerStruct
	.word	gPlayerParty
	.word	gMoveNames
	.word	gStringVar1
	.word	gText_Cancel
	.word	0x209
.Lfe18:
	.size	 CreateLearnableMovesList,.Lfe18-CreateLearnableMovesList
	.align	2, 0
	.globl	MoveRelearnerShowHideHearts
	.type	 MoveRelearnerShowHideHearts,function
	.thumb_func
MoveRelearnerShowHideHearts:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	ldr	r0, .L276
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L253	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	bne	.L252	@cond_branch
.L253:
	mov	r5, #0x0
	ldr	r4, .L276+0x4
	ldr	r3, .L276+0x8
	mov	r2, #0x4
.L257:
	ldr	r0, [r3]
	add	r0, r0, #0x1
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xf
	bls	.L257	@cond_branch
	b	.L259
.L277:
	.align	2, 0
.L276:
	.word	sMoveRelearnerMenuSate
	.word	gSprites
	.word	sMoveRelearnerStruct
.L252:
	ldr	r1, .L278
	ldr	r0, .L278+0x4
	lsl	r4, r4, #0x3
	add	r0, r4, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r8, r4
	cmp	r6, #0xff
	bne	.L260	@cond_branch
	mov	r6, #0x0
.L260:
	mov	r5, #0x0
	ldr	r7, .L278+0x8
	ldr	r4, .L278+0xc
.L264:
	cmp	r5, r6
	bcs	.L265	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, #0x1
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L266
.L279:
	.align	2, 0
.L278:
	.word	gContestEffects
	.word	gContestMoves
	.word	sMoveRelearnerStruct
	.word	gSprites
.L265:
	ldr	r0, [r7]
	add	r0, r0, #0x1
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x0
	bl	StartSpriteAnim
.L266:
	ldr	r0, [r7]
	add	r0, r0, #0x1
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r3, #0x5
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x7
	bls	.L264	@cond_branch
	ldr	r1, .L280
	ldr	r0, .L280+0x4
	add	r0, r0, r8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0xff
	bne	.L268	@cond_branch
	mov	r6, #0x0
.L268:
	mov	r5, #0x0
	ldr	r0, .L280+0x8
	mov	r8, r0
	ldr	r7, .L280+0xc
.L272:
	cmp	r5, r6
	bcs	.L273	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	add	r4, r5, #0
	add	r4, r4, #0x8
	add	r0, r0, #0x1
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, #0x3
	bl	StartSpriteAnim
	b	.L274
.L281:
	.align	2, 0
.L280:
	.word	gContestEffects
	.word	gContestMoves
	.word	sMoveRelearnerStruct
	.word	gSprites
.L273:
	mov	r3, r8
	ldr	r0, [r3]
	add	r4, r5, #0
	add	r4, r4, #0x8
	add	r0, r0, #0x1
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, #0x2
	bl	StartSpriteAnim
.L274:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r3, #0x5
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x7
	bls	.L272	@cond_branch
.L259:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 MoveRelearnerShowHideHearts,.Lfe19-MoveRelearnerShowHideHearts
.text
	.align	2, 0

