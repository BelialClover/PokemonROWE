@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sMenuGfx,object
	.size	 sMenuGfx,4
sMenuGfx:
	.word	0x0
	.align	2, 0
	.type	 sSelectedPikaPowerTile,object
	.size	 sSelectedPikaPowerTile,4
sSelectedPikaPowerTile:
	.word	0x0
	.align	2, 0
	.type	 sReelOverlay_Tilemap,object
	.size	 sReelOverlay_Tilemap,4
sReelOverlay_Tilemap:
	.word	0x0
	.align	2, 0
	.type	 sDigitalDisplayGfxPtr,object
	.size	 sDigitalDisplayGfxPtr,4
sDigitalDisplayGfxPtr:
	.word	0x0
	.align	2, 0
	.type	 sReelTimeGfxPtr,object
	.size	 sReelTimeGfxPtr,4
sReelTimeGfxPtr:
	.word	0x0
	.align	2, 0
	.type	 sReelButtonPress_Tilemap,object
	.size	 sReelButtonPress_Tilemap,4
sReelButtonPress_Tilemap:
	.word	0x0
	.align	2, 0
	.type	 sReelBackground_Gfx,object
	.size	 sReelBackground_Gfx,4
sReelBackground_Gfx:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_ReelTimePikachu,object
	.size	 sImageTable_ReelTimePikachu,4
sImageTable_ReelTimePikachu:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_ReelTimeMachineAntennae,object
	.size	 sImageTable_ReelTimeMachineAntennae,4
sImageTable_ReelTimeMachineAntennae:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_ReelTimeMachine,object
	.size	 sImageTable_ReelTimeMachine,4
sImageTable_ReelTimeMachine:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_BrokenReelTimeMachine,object
	.size	 sImageTable_BrokenReelTimeMachine,4
sImageTable_BrokenReelTimeMachine:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_Reel,object
	.size	 sImageTable_DigitalDisplay_Reel,4
sImageTable_DigitalDisplay_Reel:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_Time,object
	.size	 sImageTable_DigitalDisplay_Time,4
sImageTable_DigitalDisplay_Time:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_Insert,object
	.size	 sImageTable_DigitalDisplay_Insert,4
sImageTable_DigitalDisplay_Insert:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_Stop,object
	.size	 sImageTable_DigitalDisplay_Stop,4
sImageTable_DigitalDisplay_Stop:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_Win,object
	.size	 sImageTable_DigitalDisplay_Win,4
sImageTable_DigitalDisplay_Win:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_Lose,object
	.size	 sImageTable_DigitalDisplay_Lose,4
sImageTable_DigitalDisplay_Lose:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_Bonus,object
	.size	 sImageTable_DigitalDisplay_Bonus,4
sImageTable_DigitalDisplay_Bonus:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_Big,object
	.size	 sImageTable_DigitalDisplay_Big,4
sImageTable_DigitalDisplay_Big:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_Reg,object
	.size	 sImageTable_DigitalDisplay_Reg,4
sImageTable_DigitalDisplay_Reg:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_AButton,object
	.size	 sImageTable_DigitalDisplay_AButton,4
sImageTable_DigitalDisplay_AButton:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_Smoke,object
	.size	 sImageTable_DigitalDisplay_Smoke,4
sImageTable_DigitalDisplay_Smoke:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_Number,object
	.size	 sImageTable_DigitalDisplay_Number,4
sImageTable_DigitalDisplay_Number:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_Pokeball,object
	.size	 sImageTable_DigitalDisplay_Pokeball,4
sImageTable_DigitalDisplay_Pokeball:
	.word	0x0
	.align	2, 0
	.type	 sImageTable_DigitalDisplay_DPad,object
	.size	 sImageTable_DigitalDisplay_DPad,4
sImageTable_DigitalDisplay_DPad:
	.word	0x0
	.align	2, 0
	.type	 sReelBackgroundSpriteSheet,object
	.size	 sReelBackgroundSpriteSheet,4
sReelBackgroundSpriteSheet:
	.word	0x0
	.align	2, 0
	.type	 sSlotMachineSpritesheetsPtr,object
	.size	 sSlotMachineSpritesheetsPtr,4
sSlotMachineSpritesheetsPtr:
	.word	0x0
	.align	2, 0
	.type	 sSlotMachine,object
	.size	 sSlotMachine,4
sSlotMachine:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sBgTemplates,object
	.size	 sBgTemplates,16
sBgTemplates:
	.byte	0xf8
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xc5
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xd6
	.byte	0x21
	.byte	0x0
	.space	1
	.byte	0xe7
	.byte	0x11
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sWindowTemplates,object
sWindowTemplates:
	.byte	0x0
	.byte	0x2
	.byte	0xf
	.byte	0x1b
	.byte	0x4
	.byte	0xf
	.short	0x194
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sWindowTemplates,16
	.align	2, 0
	.type	 sWindowTemplate_InfoBox,object
	.size	 sWindowTemplate_InfoBox,8
sWindowTemplate_InfoBox:
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x14
	.byte	0xd
	.byte	0xd
	.short	0x1
	.type	 sColors_ReeltimeHelp,object
sColors_ReeltimeHelp:
	.byte	0x3
	.byte	0x1
	.byte	0x2
	.size	 sColors_ReeltimeHelp,3
	.align	2, 0
	.type	 sSlotActions,object
sSlotActions:
	.word	SlotAction_UnfadeScreen
	.word	SlotAction_WaitForUnfade
	.word	SlotAction_ReadyNewSpin
	.word	SlotAction_ReadyNewReelTimeSpin
	.word	SlotAction_AskInsertBet
	.word	SlotAction_HandleBetInput
	.word	SlotAction_PrintMsg_Need3Coins
	.word	SlotAction_WaitMsg_Need3Coins
	.word	SlotAction_WaitForInfoBox
	.word	SlotAction_StartSpin
	.word	SlotAction_StartReelTimeSpin
	.word	SlotAction_SetLuckySpins
	.word	SlotAction_AwaitReelStop
	.word	SlotAction_WaitForAllReelsToStop
	.word	SlotAction_CheckMatches
	.word	SlotAction_WaitForPayoutToBeAwarded
	.word	SlotAction_EndPayout
	.word	SlotAction_MatchedPower
	.word	SlotAction_WaitReelTimeAnim
	.word	SlotAction_ResetBetTiles
	.word	SlotAction_NoMatches
	.word	SlotAction_AskQuit
	.word	SlotAction_HandleQuitInput
	.word	SlotAction_PrintMsg_9999Coins
	.word	SlotAction_WaitMsg_9999Coins
	.word	SlotAction_PrintMsg_NoMoreCoins
	.word	SlotAction_WaitMsg_NoMoreCoins
	.word	SlotAction_EndGame
	.word	SlotAction_FreeDataStructures
	.size	 sSlotActions,116
	.align	2, 0
	.type	 sAwardPayoutActions,object
sAwardPayoutActions:
	.word	AwardPayoutAction0
	.word	AwardPayoutAction_GivePayoutToPlayer
	.word	AwardPayoutAction_FreeTask
	.size	 sAwardPayoutActions,12
	.align	2, 0
	.type	 sSlotReelActions,object
sSlotReelActions:
	.word	SlotReelAction_StayStill
	.word	SlotReelAction_Spin
	.word	SlotReelAction_DecideWhereToStop
	.word	SlotReelAction_MoveToStop
	.word	SlotReelAction_OscillatingStop
	.size	 sSlotReelActions,20
	.align	2, 0
	.type	 sDecideReelTurns_BiasTag,object
	.size	 sDecideReelTurns_BiasTag,12
sDecideReelTurns_BiasTag:
	.word	DecideReelTurns_BiasTag_Reel1
	.word	DecideReelTurns_BiasTag_Reel2
	.word	DecideReelTurns_BiasTag_Reel3
	.align	2, 0
	.type	 sDecideReelTurns_NoBiasTag,object
	.size	 sDecideReelTurns_NoBiasTag,12
sDecideReelTurns_NoBiasTag:
	.word	DecideReelTurns_NoBiasTag_Reel1
	.word	DecideReelTurns_NoBiasTag_Reel2
	.word	DecideReelTurns_NoBiasTag_Reel3
	.align	1, 0
	.type	 sReelStopShocks,object
sReelStopShocks:
	.short	0x2
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x8
	.size	 sReelStopShocks,10
	.align	2, 0
	.type	 sDecideReelTurns_BiasTag_Reel1_Bets,object
	.size	 sDecideReelTurns_BiasTag_Reel1_Bets,12
sDecideReelTurns_BiasTag_Reel1_Bets:
	.word	DecideReelTurns_BiasTag_Reel1_Bet1
	.word	DecideReelTurns_BiasTag_Reel1_Bet2or3
	.word	DecideReelTurns_BiasTag_Reel1_Bet2or3
	.align	2, 0
	.type	 sDecideReelTurns_BiasTag_Reel2_Bets,object
	.size	 sDecideReelTurns_BiasTag_Reel2_Bets,12
sDecideReelTurns_BiasTag_Reel2_Bets:
	.word	DecideReelTurns_BiasTag_Reel2_Bet1or2
	.word	DecideReelTurns_BiasTag_Reel2_Bet1or2
	.word	DecideReelTurns_BiasTag_Reel2_Bet3
	.align	2, 0
	.type	 sDecideReelTurns_BiasTag_Reel3_Bets,object
	.size	 sDecideReelTurns_BiasTag_Reel3_Bets,12
sDecideReelTurns_BiasTag_Reel3_Bets:
	.word	DecideReelTurns_BiasTag_Reel3_Bet1or2
	.word	DecideReelTurns_BiasTag_Reel3_Bet1or2
	.word	DecideReelTurns_BiasTag_Reel3_Bet3
	.align	2, 0
	.type	 sDecideReelTurns_NoBiasTag_Reel2_Bets,object
	.size	 sDecideReelTurns_NoBiasTag_Reel2_Bets,12
sDecideReelTurns_NoBiasTag_Reel2_Bets:
	.word	DecideReelTurns_NoBiasTag_Reel2_Bet1
	.word	DecideReelTurns_NoBiasTag_Reel2_Bet2
	.word	DecideReelTurns_NoBiasTag_Reel2_Bet3
	.align	2, 0
	.type	 sDecideReelTurns_NoBiasTag_Reel3_Bets,object
	.size	 sDecideReelTurns_NoBiasTag_Reel3_Bets,12
sDecideReelTurns_NoBiasTag_Reel3_Bets:
	.word	DecideReelTurns_NoBiasTag_Reel3_Bet1
	.word	DecideReelTurns_NoBiasTag_Reel3_Bet2
	.word	DecideReelTurns_NoBiasTag_Reel3_Bet3
	.align	2, 0
	.type	 sReelStopButtonFuncs,object
sReelStopButtonFuncs:
	.word	StopReelButton_Press
	.word	StopReelButton_Wait
	.word	StopReelButton_Unpress
	.size	 sReelStopButtonFuncs,12
	.align	1, 0
	.type	 sReelButtonOffsets,object
	.size	 sReelButtonOffsets,6
sReelButtonOffsets:
	.short	0x5
	.short	0xa
	.short	0xf
	.align	2, 0
	.type	 sPikaPowerBoltFuncs,object
sPikaPowerBoltFuncs:
	.word	PikaPowerBolt_Idle
	.word	PikaPowerBolt_AddBolt
	.word	PikaPowerBolt_WaitAnim
	.word	PikaPowerBolt_ClearAll
	.size	 sPikaPowerBoltFuncs,16
	.align	1, 0
	.type	 sPikaPowerTileTable,object
sPikaPowerTileTable:
	.short	0x9e
	.short	0x6e
	.short	0x9f
	.short	0x6f
	.short	0xaf
	.short	0x7f
	.size	 sPikaPowerTileTable,12
	.align	2, 0
	.type	 sReelTimeActions,object
sReelTimeActions:
	.word	ReelTime_Init
	.word	ReelTime_WindowEnter
	.word	ReelTime_WaitStartPikachu
	.word	ReelTime_PikachuSpeedUp1
	.word	ReelTime_PikachuSpeedUp2
	.word	ReelTime_WaitReel
	.word	ReelTime_CheckExplode
	.word	ReelTime_LandOnOutcome
	.word	ReelTime_PikachuReact
	.word	ReelTime_WaitClearPikaPower
	.word	ReelTime_CloseWindow
	.word	ReelTime_DestroySprites
	.word	ReelTime_SetReelIncrement
	.word	ReelTime_EndSuccess
	.word	ReelTime_ExplodeMachine
	.word	ReelTime_WaitExplode
	.word	ReelTime_WaitSmoke
	.word	ReelTime_CloseWindow
	.word	ReelTime_EndFailure
	.size	 sReelTimeActions,76
	.type	 sReelTimePikachuAnimIds,object
sReelTimePikachuAnimIds:
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.size	 sReelTimePikachuAnimIds,4
	.align	1, 0
	.type	 sReelTimeBoltDelays,object
sReelTimeBoltDelays:
	.short	0x40
	.short	0x30
	.short	0x18
	.short	0x8
	.size	 sReelTimeBoltDelays,8
	.align	1, 0
	.type	 sPikachuAuraFlashDelays,object
sPikachuAuraFlashDelays:
	.short	0xa
	.short	0x8
	.short	0x6
	.short	0x4
	.size	 sPikachuAuraFlashDelays,8
	.align	2, 0
	.type	 sInfoBoxActions,object
sInfoBoxActions:
	.word	InfoBox_FadeIn
	.word	InfoBox_WaitForFade
	.word	InfoBox_DrawWindow
	.word	InfoBox_WaitForFade
	.word	InfoBox_AddText
	.word	InfoBox_WaitForFade
	.word	InfoBox_AwaitPlayerInput
	.word	InfoBox_WaitForFade
	.word	InfoBox_LoadSlotMachineTilemap
	.word	InfoBox_WaitForFade
	.word	InfoBox_CreateDigitalDisplay
	.word	InfoBox_WaitForFade
	.word	InfoBox_LoadPikaPowerMeter
	.word	InfoBox_WaitForFade
	.word	InfoBox_FreeTask
	.size	 sInfoBoxActions,60
	.align	2, 0
	.type	 sDigitalDisplayActions,object
sDigitalDisplayActions:
	.word	DigitalDisplay_Idle
	.size	 sDigitalDisplayActions,4
.text
	.align	2, 0
	.type	 Task_FadeToSlotMachine,function
	.thumb_func
Task_FadeToSlotMachine:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L9
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	beq	.L4	@cond_branch
	cmp	r1, #0x1
	beq	.L5	@cond_branch
	b	.L3
.L10:
	.align	2, 0
.L9:
	.word	gTasks
.L4:
	mov	r0, #0x1
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L3
.L5:
	ldr	r0, .L11
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3	@cond_branch
	ldr	r0, .L11+0x4
	bl	SetMainCallback2
	add	r0, r5, #0
	bl	DestroyTask
.L3:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	gPaletteFade
	.word	CB2_SlotMachineSetup
.Lfe1:
	.size	 Task_FadeToSlotMachine,.Lfe1-Task_FadeToSlotMachine
	.align	2, 0
	.globl	PlaySlotMachine
	.type	 PlaySlotMachine,function
	.thumb_func
PlaySlotMachine:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L14
	mov	r0, #0x68
	bl	AllocZeroed
	str	r0, [r5]
	add	r0, r4, #0
	add	r1, r6, #0
	bl	PlaySlotMachine_Internal
	ldr	r0, .L14+0x4
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L14+0x8
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	sSlotMachine
	.word	Task_FadeToSlotMachine
	.word	gTasks
.Lfe2:
	.size	 PlaySlotMachine,.Lfe2-PlaySlotMachine
	.align	2, 0
	.type	 CB2_SlotMachineSetup,function
	.thumb_func
CB2_SlotMachineSetup:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r0, .L33
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0xb
	bhi	.L17	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L33+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L34:
	.align	2, 0
.L33:
	.word	gMain
	.word	.L30
	.align	2, 0
	.align	2, 0
.L30:
	.word	.L18
	.word	.L19
	.word	.L20
	.word	.L21
	.word	.L22
	.word	.L23
	.word	.L24
	.word	.L25
	.word	.L26
	.word	.L27
	.word	.L28
	.word	.L29
.L18:
	bl	SlotMachineSetup_InitBgsWindows
	bl	SlotMachineSetup_InitSlotMachineStruct
	b	.L32
.L19:
	bl	SlotMachineSetup_InitVRAM
	b	.L32
.L20:
	bl	SlotMachineSetup_InitOAM
	bl	SlotMachineSetup_InitGpuRegs
	b	.L32
.L21:
	bl	SlotMachineSetup_InitPalsSpritesTasks
	b	.L32
.L22:
	bl	SlotMachineSetup_InitTilemaps
	b	.L32
.L23:
	bl	SlotMachineSetup_LoadGfxAndTilemaps
	b	.L32
.L24:
	bl	SlotMachineSetup_InitVBlank
	b	.L32
.L25:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	b	.L32
.L26:
	bl	AllocDigitalDisplayGfx
	b	.L32
.L27:
	bl	SetDigitalDisplayImagePtrs
	b	.L32
.L28:
	bl	CreateSlotMachineSprites
	bl	CreateGameplayTasks
.L32:
	ldr	r1, .L35
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L17
.L36:
	.align	2, 0
.L35:
	.word	gMain
.L29:
	ldr	r0, .L37
	bl	SetMainCallback2
.L17:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	CB2_SlotMachine
.Lfe3:
	.size	 CB2_SlotMachineSetup,.Lfe3-CB2_SlotMachineSetup
	.align	2, 0
	.type	 CB2_SlotMachine,function
	.thumb_func
CB2_SlotMachine:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 CB2_SlotMachine,.Lfe4-CB2_SlotMachine
	.align	2, 0
	.type	 SlotMachine_VBlankCB,function
	.thumb_func
SlotMachine_VBlankCB:
	push	{r4, lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	ldr	r4, .L41
	ldr	r0, [r4]
	add	r0, r0, #0x58
	ldrh	r1, [r0]
	mov	r0, #0x40
	bl	SetGpuReg
	ldr	r0, [r4]
	add	r0, r0, #0x5a
	ldrh	r1, [r0]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, [r4]
	add	r0, r0, #0x5c
	ldrh	r1, [r0]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	add	r0, r0, #0x5e
	ldrh	r1, [r0]
	mov	r0, #0x4a
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L42:
	.align	2, 0
.L41:
	.word	sSlotMachine
.Lfe5:
	.size	 SlotMachine_VBlankCB,.Lfe5-SlotMachine_VBlankCB
	.align	2, 0
	.type	 PlaySlotMachine_Internal,function
	.thumb_func
PlaySlotMachine_Internal:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L44
	mov	r1, #0xff
	bl	CreateTask
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L44+0x4
	add	r0, r0, r1
	strh	r4, [r0, #0x8]
	add	r0, r0, #0xa
	add	r1, r5, #0
	bl	StoreWordInTwoHalfwords
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L45:
	.align	2, 0
.L44:
	.word	SlotMachineDummyTask
	.word	gTasks
.Lfe6:
	.size	 PlaySlotMachine_Internal,.Lfe6-PlaySlotMachine_Internal
	.align	2, 0
	.type	 SlotMachineInitDummyTask,function
	.thumb_func
SlotMachineInitDummyTask:
	push	{lr}
	ldr	r0, .L47
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	ldr	r0, .L47+0x4
	add	r2, r2, r0
	ldr	r3, .L47+0x8
	ldr	r1, [r3]
	ldrh	r0, [r2, #0x8]
	strb	r0, [r1, #0x1]
	add	r2, r2, #0xa
	ldr	r1, [r3]
	add	r1, r1, #0x64
	add	r0, r2, #0
	bl	LoadWordFromTwoHalfwords
	pop	{r0}
	bx	r0
.L48:
	.align	2, 0
.L47:
	.word	SlotMachineDummyTask
	.word	gTasks
	.word	sSlotMachine
.Lfe7:
	.size	 SlotMachineInitDummyTask,.Lfe7-SlotMachineInitDummyTask
	.align	2, 0
	.type	 SlotMachineDummyTask,function
	.thumb_func
SlotMachineDummyTask:
	bx	lr
.Lfe8:
	.size	 SlotMachineDummyTask,.Lfe8-SlotMachineDummyTask
	.align	2, 0
	.type	 SlotMachineSetup_InitBgsWindows,function
	.thumb_func
SlotMachineSetup_InitBgsWindows:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	str	r0, [sp]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L51
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L51+0x4
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	ldr	r0, .L51+0x8
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	0x5006000
	.word	sBgTemplates
	.word	sWindowTemplates
.Lfe9:
	.size	 SlotMachineSetup_InitBgsWindows,.Lfe9-SlotMachineSetup_InitBgsWindows
	.align	2, 0
	.type	 SlotMachineSetup_InitVBlank,function
	.thumb_func
SlotMachineSetup_InitVBlank:
	push	{lr}
	ldr	r0, .L54
	bl	SetVBlankCallback
	mov	r0, #0x1
	bl	EnableInterrupts
	mov	r1, #0xc1
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L55:
	.align	2, 0
.L54:
	.word	SlotMachine_VBlankCB
.Lfe10:
	.size	 SlotMachineSetup_InitVBlank,.Lfe10-SlotMachineSetup_InitVBlank
	.align	2, 0
	.type	 SlotMachineSetup_InitVRAM,function
	.thumb_func
SlotMachineSetup_InitVRAM:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	mov	r2, #0xc0
	lsl	r2, r2, #0x13
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	mov	r4, sp
	mov	r6, #0x0
	ldr	r1, .L62
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	ldr	r7, .L62+0x4
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	mov	ip, r0
.L59:
	strh	r6, [r4]
	mov	r0, sp
	str	r0, [r1]
	str	r2, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r2, r2, r5
	sub	r3, r3, r5
	cmp	r3, r5
	bhi	.L59	@cond_branch
	strh	r6, [r4]
	mov	r0, sp
	str	r0, [r1]
	str	r2, [r1, #0x4]
	lsr	r0, r3, #0x1
	mov	r2, ip
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	0x40000d4
	.word	-0x7efff800
.Lfe11:
	.size	 SlotMachineSetup_InitVRAM,.Lfe11-SlotMachineSetup_InitVRAM
	.align	2, 0
	.type	 SlotMachineSetup_InitOAM,function
	.thumb_func
SlotMachineSetup_InitOAM:
	add	sp, sp, #-0x4
	mov	r2, #0xe0
	lsl	r2, r2, #0x13
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L65
	str	r1, [r0]
	str	r2, [r0, #0x4]
	ldr	r1, .L65+0x4
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	add	sp, sp, #0x4
	bx	lr
.L66:
	.align	2, 0
.L65:
	.word	0x40000d4
	.word	-0x7efffe00
.Lfe12:
	.size	 SlotMachineSetup_InitOAM,.Lfe12-SlotMachineSetup_InitOAM
	.align	2, 0
	.type	 SlotMachineSetup_InitGpuRegs,function
	.thumb_func
SlotMachineSetup_InitGpuRegs:
	push	{lr}
	mov	r0, #0x8
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xa
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xc
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xe
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x10
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x16
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x18
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1c
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1e
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x3f
	bl	SetGpuReg
	ldr	r1, .L68
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L68+0x4
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L69:
	.align	2, 0
.L68:
	.word	0x1048
	.word	0x809
.Lfe13:
	.size	 SlotMachineSetup_InitGpuRegs,.Lfe13-SlotMachineSetup_InitGpuRegs
	.align	2, 0
	.type	 SlotMachineSetup_InitSlotMachineStruct,function
	.thumb_func
SlotMachineSetup_InitSlotMachineStruct:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	SlotMachineInitDummyTask
	ldr	r5, .L76
	ldr	r0, [r5]
	mov	r4, #0x0
	strb	r4, [r0]
	ldr	r0, [r5]
	strb	r4, [r0, #0x2]
	bl	Random
	ldr	r2, [r5]
	mov	r1, #0x1
	and	r1, r1, r0
	strb	r1, [r2, #0x3]
	ldr	r0, [r5]
	strb	r4, [r0, #0x4]
	ldr	r0, [r5]
	mov	r1, #0x0
	strh	r4, [r0, #0x8]
	strb	r1, [r0, #0xa]
	ldr	r0, [r5]
	strb	r1, [r0, #0xb]
	bl	GetCoins
	ldr	r2, [r5]
	strh	r0, [r2, #0xc]
	strh	r4, [r2, #0xe]
	strh	r4, [r2, #0x10]
	strh	r4, [r2, #0x12]
	strh	r4, [r2, #0x18]
	mov	r0, #0x8
	strh	r0, [r2, #0x1a]
	add	r1, r2, #0
	add	r1, r1, #0x58
	mov	r0, #0xf0
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r0, #0xa0
	strh	r0, [r1]
	add	r0, r2, #0
	add	r0, r0, #0x5c
	mov	r1, #0x3f
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	bl	GetCurrentMapMusic
	ldr	r1, [r5]
	add	r1, r1, #0x60
	strh	r0, [r1]
	mov	r7, #0x0
	ldr	r0, .L76+0x4
	mov	r8, r0
.L74:
	ldr	r0, .L76
	ldr	r4, [r0]
	lsl	r6, r7, #0x1
	add	r0, r4, #0
	add	r0, r0, #0x22
	add	r0, r0, r6
	mov	r1, #0x0
	strh	r1, [r0]
	add	r5, r4, #0
	add	r5, r5, #0x28
	add	r5, r5, r6
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1
	lsl	r1, r7, #0x2
	add	r0, r0, r1
	add	r0, r0, r8
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x15
	bl	__modsi3
	strh	r0, [r5]
	add	r4, r4, #0x1c
	add	r4, r4, r6
	mov	r2, #0x0
	ldrsh	r0, [r5, r2]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	mov	r2, #0xfc
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	sub	r0, r0, r1
	strh	r0, [r4]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	add	r1, r2, #0
	bl	__modsi3
	strh	r0, [r4]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x2
	bls	.L74	@cond_branch
	bl	GetCoins
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	AlertTVThatPlayerPlayedSlotMachine
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	sSlotMachine
	.word	sInitialReelPositions
.Lfe14:
	.size	 SlotMachineSetup_InitSlotMachineStruct,.Lfe14-SlotMachineSetup_InitSlotMachineStruct
	.align	2, 0
	.type	 SlotMachineSetup_InitPalsSpritesTasks,function
	.thumb_func
SlotMachineSetup_InitPalsSpritesTasks:
	push	{lr}
	bl	ResetPaletteFade
	bl	ResetSpriteData
	ldr	r1, .L79
	mov	r0, #0x80
	strb	r0, [r1]
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gOamLimit
.Lfe15:
	.size	 SlotMachineSetup_InitPalsSpritesTasks,.Lfe15-SlotMachineSetup_InitPalsSpritesTasks
	.align	2, 0
	.type	 SlotMachineSetup_InitTilemaps,function
	.thumb_func
SlotMachineSetup_InitTilemaps:
	push	{r4, r5, lr}
	ldr	r4, .L82
	mov	r0, #0x8
	bl	Alloc
	str	r0, [r4]
	ldr	r4, .L82+0x4
	mov	r0, #0xe
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r5, .L82+0x8
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r5]
	ldr	r1, [r4]
	ldr	r2, .L82+0xc
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, [r4]
	ldr	r2, .L82+0x10
	add	r0, r2, #0
	strh	r0, [r1, #0x2]
	ldr	r2, .L82+0x14
	add	r0, r2, #0
	strh	r0, [r1, #0x4]
	ldr	r2, .L82+0x18
	add	r0, r2, #0
	strh	r0, [r1, #0x6]
	ldr	r2, .L82+0x1c
	add	r0, r2, #0
	strh	r0, [r1, #0x8]
	ldr	r2, .L82+0x20
	add	r0, r2, #0
	strh	r0, [r1, #0xa]
	ldr	r2, .L82+0x24
	add	r0, r2, #0
	strh	r0, [r1, #0xc]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	sSelectedPikaPowerTile
	.word	sReelOverlay_Tilemap
	.word	sReelButtonPress_Tilemap
	.word	0x2051
	.word	0x2851
	.word	0x2061
	.word	0x2861
	.word	0x20be
	.word	0x28be
	.word	0x20bf
.Lfe16:
	.size	 SlotMachineSetup_InitTilemaps,.Lfe16-SlotMachineSetup_InitTilemaps
	.align	2, 0
	.type	 SlotMachineSetup_LoadGfxAndTilemaps,function
	.thumb_func
SlotMachineSetup_LoadGfxAndTilemaps:
	push	{lr}
	bl	LoadMenuGfx
	bl	LoadMenuAndReelOverlayTilemaps
	bl	LoadSlotMachineGfx
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	mov	r2, #0xf0
	bl	LoadMessageBoxGfx
	mov	r1, #0x85
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	mov	r2, #0xe0
	bl	LoadUserWindowBorderGfx
	mov	r0, #0x0
	bl	PutWindowTilemap
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 SlotMachineSetup_LoadGfxAndTilemaps,.Lfe17-SlotMachineSetup_LoadGfxAndTilemaps
	.align	2, 0
	.type	 CreateSlotMachineSprites,function
	.thumb_func
CreateSlotMachineSprites:
	push	{lr}
	bl	CreateReelSymbolSprites
	bl	CreateCreditPayoutNumberSprites
	bl	CreateInvisibleFlashMatchLineSprites
	bl	CreateReelBackgroundSprite
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 CreateSlotMachineSprites,.Lfe18-CreateSlotMachineSprites
	.align	2, 0
	.type	 CreateGameplayTasks,function
	.thumb_func
CreateGameplayTasks:
	push	{lr}
	bl	CreatePikaPowerBoltTask
	bl	CreateSlotReelTasks
	bl	CreateDigitalDisplayTask
	bl	CreateSlotMachineTask
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 CreateGameplayTasks,.Lfe19-CreateGameplayTasks
	.align	2, 0
	.type	 CreateSlotMachineTask,function
	.thumb_func
CreateSlotMachineTask:
	push	{r4, lr}
	ldr	r4, .L88
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	_call_via_r4
	pop	{r4}
	pop	{r0}
	bx	r0
.L89:
	.align	2, 0
.L88:
	.word	Task_SlotMachine
.Lfe20:
	.size	 CreateSlotMachineTask,.Lfe20-CreateSlotMachineTask
	.align	2, 0
	.type	 Task_SlotMachine,function
	.thumb_func
Task_SlotMachine:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r6, .L95
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r4, r1, #0x3
	ldr	r5, .L95+0x4
.L91:
	ldr	r0, .L95+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	add	r0, r4, r5
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L91	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L96:
	.align	2, 0
.L95:
	.word	sSlotActions
	.word	gTasks
	.word	sSlotMachine
.Lfe21:
	.size	 Task_SlotMachine,.Lfe21-Task_SlotMachine
	.align	2, 0
	.type	 SlotAction_UnfadeScreen,function
	.thumb_func
SlotAction_UnfadeScreen:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r4, .L98
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	bl	LoadPikaPowerMeter
	ldr	r1, [r4]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.L99:
	.align	2, 0
.L98:
	.word	sSlotMachine
.Lfe22:
	.size	 SlotAction_UnfadeScreen,.Lfe22-SlotAction_UnfadeScreen
	.align	2, 0
	.type	 SlotAction_WaitForUnfade,function
	.thumb_func
SlotAction_WaitForUnfade:
	push	{lr}
	ldr	r0, .L102
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L101	@cond_branch
	ldr	r0, .L102+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L101:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L103:
	.align	2, 0
.L102:
	.word	gPaletteFade
	.word	sSlotMachine
.Lfe23:
	.size	 SlotAction_WaitForUnfade,.Lfe23-SlotAction_WaitForUnfade
	.align	2, 0
	.type	 SlotAction_ReadyNewSpin,function
	.thumb_func
SlotAction_ReadyNewSpin:
	push	{lr}
	ldr	r3, .L108
	ldr	r1, [r3]
	mov	r0, #0x0
	strh	r0, [r1, #0xe]
	strh	r0, [r1, #0x12]
	strh	r0, [r1, #0x18]
	ldrb	r2, [r1, #0x4]
	mov	r0, #0xc0
	and	r0, r0, r2
	strb	r0, [r1, #0x4]
	ldr	r1, [r3]
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r3, [r3]
	mov	r1, #0xc
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bgt	.L105	@cond_branch
	mov	r0, #0x19
	strb	r0, [r3]
	b	.L106
.L109:
	.align	2, 0
.L108:
	.word	sSlotMachine
.L105:
	ldrb	r0, [r3, #0xa]
	cmp	r0, #0
	beq	.L106	@cond_branch
	mov	r0, #0x3
	strb	r0, [r3]
	mov	r0, #0x4
	bl	CreateDigitalDisplayScene
.L106:
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 SlotAction_ReadyNewSpin,.Lfe24-SlotAction_ReadyNewSpin
	.align	2, 0
	.type	 SlotAction_ReadyNewReelTimeSpin,function
	.thumb_func
SlotAction_ReadyNewReelTimeSpin:
	push	{lr}
	bl	IsDigitalDisplayAnimFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L111	@cond_branch
	ldr	r0, .L112
	ldr	r1, [r0]
	mov	r0, #0x4
	strb	r0, [r1]
.L111:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L113:
	.align	2, 0
.L112:
	.word	sSlotMachine
.Lfe25:
	.size	 SlotAction_ReadyNewReelTimeSpin,.Lfe25-SlotAction_ReadyNewReelTimeSpin
	.align	2, 0
	.type	 SlotAction_AskInsertBet,function
	.thumb_func
SlotAction_AskInsertBet:
	push	{lr}
	mov	r0, #0x0
	bl	CreateDigitalDisplayScene
	ldr	r2, .L116
	ldr	r1, [r2]
	mov	r0, #0x5
	strb	r0, [r1]
	ldr	r2, [r2]
	mov	r0, #0xc
	ldrsh	r1, [r2, r0]
	ldr	r0, .L116+0x4
	cmp	r1, r0
	ble	.L115	@cond_branch
	mov	r0, #0x17
	strb	r0, [r2]
.L115:
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L117:
	.align	2, 0
.L116:
	.word	sSlotMachine
	.word	0x270e
.Lfe26:
	.size	 SlotAction_AskInsertBet,.Lfe26-SlotAction_AskInsertBet
	.align	2, 0
	.type	 SlotAction_HandleBetInput,function
	.thumb_func
SlotAction_HandleBetInput:
	push	{r4, r5, lr}
	ldr	r0, .L135
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L119	@cond_branch
	mov	r0, #0x0
	bl	OpenInfoBox
	ldr	r0, .L135+0x4
	ldr	r1, [r0]
	mov	r0, #0x8
	b	.L134
.L136:
	.align	2, 0
.L135:
	.word	gMain
	.word	sSlotMachine
.L119:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L121	@cond_branch
	ldr	r0, .L137
	ldr	r2, [r0]
	mov	r1, #0xc
	ldrsh	r0, [r2, r1]
	sub	r0, r0, #0x3
	mov	r3, #0x12
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	cmp	r0, #0
	blt	.L122	@cond_branch
	ldrh	r4, [r2, #0x12]
	add	r0, r1, #0
	cmp	r0, #0x2
	bgt	.L124	@cond_branch
.L126:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	LightenBetTiles
	lsl	r0, r4, #0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r0, r0, r2
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L126	@cond_branch
.L124:
	ldr	r0, .L137
	ldr	r1, [r0]
	ldrh	r0, [r1, #0xc]
	sub	r0, r0, #0x3
	ldrh	r3, [r1, #0x12]
	add	r0, r0, r3
	strh	r0, [r1, #0xc]
	mov	r0, #0x3
	strh	r0, [r1, #0x12]
	mov	r0, #0x9
	strb	r0, [r1]
	mov	r0, #0x5f
	bl	PlaySE
	b	.L120
.L138:
	.align	2, 0
.L137:
	.word	sSlotMachine
.L122:
	mov	r0, #0x6
	strb	r0, [r2]
	b	.L120
.L121:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L130	@cond_branch
	ldr	r4, .L139
	ldr	r0, [r4]
	mov	r1, #0xc
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L130	@cond_branch
	mov	r0, #0x5f
	bl	PlaySE
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x12]
	bl	LightenBetTiles
	ldr	r1, [r4]
	ldrh	r0, [r1, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
.L130:
	ldr	r0, .L139
	ldr	r3, [r0]
	mov	r1, #0x12
	ldrsh	r2, [r3, r1]
	ldr	r4, .L139+0x4
	add	r5, r0, #0
	cmp	r2, #0x2
	bgt	.L132	@cond_branch
	cmp	r2, #0
	beq	.L131	@cond_branch
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L131	@cond_branch
.L132:
	mov	r0, #0x9
	strb	r0, [r3]
.L131:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L120	@cond_branch
	ldr	r1, [r5]
	mov	r0, #0x15
.L134:
	strb	r0, [r1]
.L120:
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L140:
	.align	2, 0
.L139:
	.word	sSlotMachine
	.word	gMain
.Lfe27:
	.size	 SlotAction_HandleBetInput,.Lfe27-SlotAction_HandleBetInput
	.align	2, 0
	.type	 SlotAction_PrintMsg_Need3Coins,function
	.thumb_func
SlotAction_PrintMsg_Need3Coins:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldr	r2, .L142
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r0, .L142+0x4
	ldr	r1, [r0]
	mov	r0, #0x7
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r1}
	bx	r1
.L143:
	.align	2, 0
.L142:
	.word	gText_YouDontHaveThreeCoins
	.word	sSlotMachine
.Lfe28:
	.size	 SlotAction_PrintMsg_Need3Coins,.Lfe28-SlotAction_PrintMsg_Need3Coins
	.align	2, 0
	.type	 SlotAction_WaitMsg_Need3Coins,function
	.thumb_func
SlotAction_WaitMsg_Need3Coins:
	push	{lr}
	ldr	r0, .L146
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L145	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	ldr	r0, .L146+0x4
	ldr	r1, [r0]
	mov	r0, #0x5
	strb	r0, [r1]
.L145:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L147:
	.align	2, 0
.L146:
	.word	gMain
	.word	sSlotMachine
.Lfe29:
	.size	 SlotAction_WaitMsg_Need3Coins,.Lfe29-SlotAction_WaitMsg_Need3Coins
	.align	2, 0
	.type	 SlotAction_WaitForInfoBox,function
	.thumb_func
SlotAction_WaitForInfoBox:
	push	{lr}
	bl	IsInfoBoxClosed
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L149	@cond_branch
	ldr	r0, .L150
	ldr	r1, [r0]
	mov	r0, #0x5
	strb	r0, [r1]
.L149:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L151:
	.align	2, 0
.L150:
	.word	sSlotMachine
.Lfe30:
	.size	 SlotAction_WaitForInfoBox,.Lfe30-SlotAction_WaitForInfoBox
	.align	2, 0
	.type	 SlotAction_StartSpin,function
	.thumb_func
SlotAction_StartSpin:
	push	{r4, lr}
	add	r4, r0, #0
	bl	DrawLuckyFlags
	bl	DestroyDigitalDisplayScene
	mov	r0, #0x0
	bl	SpinSlotReel
	mov	r0, #0x1
	bl	SpinSlotReel
	mov	r0, #0x2
	bl	SpinSlotReel
	bl	IncrementDailySlotsUses
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r4, .L157
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x4]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L153	@cond_branch
	bl	BeginReelTime
	ldr	r1, [r4]
	mov	r0, #0xa
	b	.L156
.L158:
	.align	2, 0
.L157:
	.word	sSlotMachine
.L153:
	mov	r0, #0x1
	bl	CreateDigitalDisplayScene
	ldr	r1, [r4]
	mov	r0, #0xb
.L156:
	strb	r0, [r1]
	ldr	r4, .L159
	ldr	r0, [r4]
	mov	r1, #0x8
	strh	r1, [r0, #0x1a]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	beq	.L155	@cond_branch
	bl	SlowReelSpeed
	ldr	r1, [r4]
	strh	r0, [r1, #0x1a]
.L155:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L160:
	.align	2, 0
.L159:
	.word	sSlotMachine
.Lfe31:
	.size	 SlotAction_StartSpin,.Lfe31-SlotAction_StartSpin
	.align	2, 0
	.type	 SlotAction_StartReelTimeSpin,function
	.thumb_func
SlotAction_StartReelTimeSpin:
	push	{lr}
	bl	IsReelTimeTaskDone
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L162	@cond_branch
	mov	r0, #0x1
	bl	CreateDigitalDisplayScene
	ldr	r3, .L163
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x4]
	mov	r0, #0xdf
	and	r0, r0, r1
	strb	r0, [r2, #0x4]
	ldr	r1, [r3]
	mov	r0, #0xb
	strb	r0, [r1]
.L162:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L164:
	.align	2, 0
.L163:
	.word	sSlotMachine
.Lfe32:
	.size	 SlotAction_StartReelTimeSpin,.Lfe32-SlotAction_StartReelTimeSpin
	.align	2, 0
	.type	 SlotAction_SetLuckySpins,function
	.thumb_func
SlotAction_SetLuckySpins:
	push	{lr}
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x1d
	ble	.L166	@cond_branch
	bl	SetLuckySpins
	ldr	r0, .L167
	ldr	r1, [r0]
	mov	r0, #0xc
	strb	r0, [r1]
.L166:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L168:
	.align	2, 0
.L167:
	.word	sSlotMachine
.Lfe33:
	.size	 SlotAction_SetLuckySpins,.Lfe33-SlotAction_SetLuckySpins
	.align	2, 0
	.type	 SlotAction_AwaitReelStop,function
	.thumb_func
SlotAction_AwaitReelStop:
	push	{r4, lr}
	ldr	r0, .L171
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L170	@cond_branch
	mov	r0, #0x18
	bl	PlaySE
	ldr	r4, .L171+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x18]
	bl	StopSlotReel
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x18]
	bl	PressStopReelButton
	ldr	r1, [r4]
	mov	r0, #0xd
	strb	r0, [r1]
.L170:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L172:
	.align	2, 0
.L171:
	.word	gMain
	.word	sSlotMachine
.Lfe34:
	.size	 SlotAction_AwaitReelStop,.Lfe34-SlotAction_AwaitReelStop
	.align	2, 0
	.type	 SlotAction_WaitForAllReelsToStop,function
	.thumb_func
SlotAction_WaitForAllReelsToStop:
	push	{r4, lr}
	ldr	r4, .L177
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x18]
	bl	IsSlotReelMoving
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L174	@cond_branch
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x18]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x18]
	mov	r0, #0xc
	strb	r0, [r1]
	ldr	r1, [r4]
	mov	r2, #0x18
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x2
	ble	.L175	@cond_branch
	mov	r0, #0xe
	strb	r0, [r1]
.L175:
	mov	r0, #0x1
	b	.L176
.L178:
	.align	2, 0
.L177:
	.word	sSlotMachine
.L174:
	mov	r0, #0x0
.L176:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 SlotAction_WaitForAllReelsToStop,.Lfe35-SlotAction_WaitForAllReelsToStop
	.align	2, 0
	.type	 SlotAction_CheckMatches,function
	.thumb_func
SlotAction_CheckMatches:
	push	{r4, lr}
	ldr	r4, .L193
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x4]
	mov	r0, #0xc0
	and	r0, r0, r1
	strb	r0, [r2, #0x4]
	bl	CheckMatch
	ldr	r1, [r4]
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	beq	.L180	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0xa]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0xb]
	add	r0, r0, #0x1
	strb	r0, [r1, #0xb]
.L180:
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L181	@cond_branch
	mov	r0, #0xf
	strb	r0, [r1]
	bl	AwardPayout
	bl	FlashSlotMachineLights
	ldr	r2, [r4]
	ldrh	r0, [r2, #0x10]
	ldrh	r1, [r2, #0xe]
	sub	r0, r0, r1
	strh	r0, [r2, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L182	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x10]
.L182:
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L183	@cond_branch
	ldr	r0, .L193+0x4
	bl	PlayFanfare
	mov	r0, #0x6
	bl	CreateDigitalDisplayScene
	b	.L184
.L194:
	.align	2, 0
.L193:
	.word	sSlotMachine
	.word	0x185
.L183:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L185	@cond_branch
	ldr	r0, .L195
	bl	PlayFanfare
	mov	r0, #0x5
	bl	CreateDigitalDisplayScene
	b	.L184
.L196:
	.align	2, 0
.L195:
	.word	0x185
.L185:
	mov	r0, #0xc3
	lsl	r0, r0, #0x1
	bl	PlayFanfare
	mov	r0, #0x2
	bl	CreateDigitalDisplayScene
.L184:
	ldr	r2, .L197
	ldr	r3, [r2]
	ldrh	r1, [r3, #0x8]
	mov	r0, #0xe0
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L187	@cond_branch
	ldrb	r1, [r3, #0x4]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r4, #0x0
	strb	r0, [r3, #0x4]
	ldr	r3, [r2]
	ldrh	r1, [r3, #0x8]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L187	@cond_branch
	strb	r4, [r3, #0xa]
	ldr	r0, [r2]
	strb	r4, [r0, #0xb]
	ldr	r0, [r2]
	strb	r4, [r0, #0x3]
	ldr	r3, [r2]
	ldrh	r1, [r3, #0x8]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L187	@cond_branch
	mov	r0, #0x1
	strb	r0, [r3, #0x3]
.L187:
	ldr	r3, [r2]
	ldrh	r1, [r3, #0x8]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L191	@cond_branch
	ldrb	r0, [r3, #0x2]
	cmp	r0, #0xf
	bhi	.L191	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r3, #0x2]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x2]
	bl	AddPikaPowerBolt
	b	.L191
.L198:
	.align	2, 0
.L197:
	.word	sSlotMachine
.L181:
	mov	r0, #0x3
	bl	CreateDigitalDisplayScene
	ldr	r1, [r4]
	mov	r0, #0x14
	strb	r0, [r1]
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x12]
	ldrh	r2, [r1, #0x10]
	add	r0, r0, r2
	strh	r0, [r1, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r2, .L199
	cmp	r0, r2
	ble	.L191	@cond_branch
	strh	r2, [r1, #0x10]
.L191:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L200:
	.align	2, 0
.L199:
	.word	0x270f
.Lfe36:
	.size	 SlotAction_CheckMatches,.Lfe36-SlotAction_CheckMatches
	.align	2, 0
	.type	 SlotAction_WaitForPayoutToBeAwarded,function
	.thumb_func
SlotAction_WaitForPayoutToBeAwarded:
	push	{lr}
	bl	IsFinalTask_RunAwardPayoutActions
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L202	@cond_branch
	ldr	r0, .L203
	ldr	r1, [r0]
	mov	r0, #0x10
	strb	r0, [r1]
.L202:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L204:
	.align	2, 0
.L203:
	.word	sSlotMachine
.Lfe37:
	.size	 SlotAction_WaitForPayoutToBeAwarded,.Lfe37-SlotAction_WaitForPayoutToBeAwarded
	.align	2, 0
	.type	 SlotAction_EndPayout,function
	.thumb_func
SlotAction_EndPayout:
	push	{r4, lr}
	bl	TryStopSlotMachineLights
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L206	@cond_branch
	ldr	r4, .L211
	ldr	r1, [r4]
	mov	r0, #0x13
	strb	r0, [r1]
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L207	@cond_branch
	mov	r0, #0x1c
	bl	IncrementGameStat
.L207:
	ldr	r2, [r4]
	ldrh	r1, [r2, #0x8]
	mov	r3, #0x4
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L208	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x18]
	mov	r0, #0x9
	strb	r0, [r2]
.L208:
	ldr	r2, [r4]
	ldrh	r1, [r2, #0x8]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L209	@cond_branch
	mov	r0, #0x11
	strb	r0, [r2]
.L209:
	ldr	r1, [r4]
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	beq	.L206	@cond_branch
	ldrh	r1, [r1, #0x8]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L206	@cond_branch
	mov	r0, #0x4
	bl	CreateDigitalDisplayScene
	ldr	r1, [r4]
	mov	r0, #0x12
	strb	r0, [r1]
.L206:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L212:
	.align	2, 0
.L211:
	.word	sSlotMachine
.Lfe38:
	.size	 SlotAction_EndPayout,.Lfe38-SlotAction_EndPayout
	.align	2, 0
	.type	 SlotAction_MatchedPower,function
	.thumb_func
SlotAction_MatchedPower:
	push	{r4, lr}
	bl	IsPikaPowerBoltAnimating
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L214	@cond_branch
	ldr	r4, .L217
	ldr	r1, [r4]
	mov	r0, #0x13
	strb	r0, [r1]
	ldr	r2, [r4]
	ldrh	r1, [r2, #0x8]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L214	@cond_branch
	mov	r0, #0x9
	strb	r0, [r2]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	beq	.L214	@cond_branch
	mov	r0, #0x4
	bl	CreateDigitalDisplayScene
	ldr	r1, [r4]
	mov	r0, #0x12
	strb	r0, [r1]
.L214:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L218:
	.align	2, 0
.L217:
	.word	sSlotMachine
.Lfe39:
	.size	 SlotAction_MatchedPower,.Lfe39-SlotAction_MatchedPower
	.align	2, 0
	.type	 SlotAction_WaitReelTimeAnim,function
	.thumb_func
SlotAction_WaitReelTimeAnim:
	push	{lr}
	bl	IsDigitalDisplayAnimFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L220	@cond_branch
	ldr	r2, .L222
	ldr	r1, [r2]
	mov	r0, #0x13
	strb	r0, [r1]
	ldr	r2, [r2]
	ldrh	r1, [r2, #0x8]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L220	@cond_branch
	mov	r0, #0x9
	strb	r0, [r2]
.L220:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L223:
	.align	2, 0
.L222:
	.word	sSlotMachine
.Lfe40:
	.size	 SlotAction_WaitReelTimeAnim,.Lfe40-SlotAction_WaitReelTimeAnim
	.align	2, 0
	.type	 SlotAction_ResetBetTiles,function
	.thumb_func
SlotAction_ResetBetTiles:
	push	{lr}
	mov	r0, #0x0
	bl	DarkenBetTiles
	mov	r0, #0x1
	bl	DarkenBetTiles
	mov	r0, #0x2
	bl	DarkenBetTiles
	ldr	r0, .L225
	ldr	r1, [r0]
	mov	r0, #0x2
	strb	r0, [r1]
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L226:
	.align	2, 0
.L225:
	.word	sSlotMachine
.Lfe41:
	.size	 SlotAction_ResetBetTiles,.Lfe41-SlotAction_ResetBetTiles
	.align	2, 0
	.type	 SlotAction_NoMatches,function
	.thumb_func
SlotAction_NoMatches:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	ble	.L228	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0xa]
	ldr	r0, .L229
	ldr	r1, [r0]
	mov	r0, #0x13
	strb	r0, [r1]
.L228:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L230:
	.align	2, 0
.L229:
	.word	sSlotMachine
.Lfe42:
	.size	 SlotAction_NoMatches,.Lfe42-SlotAction_NoMatches
	.align	2, 0
	.type	 SlotAction_AskQuit,function
	.thumb_func
SlotAction_AskQuit:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldr	r2, .L232
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	mov	r2, #0x85
	lsl	r2, r2, #0x2
	mov	r3, #0xc0
	lsl	r3, r3, #0x1
	mov	r0, #0xe
	str	r0, [sp]
	mov	r0, #0xf
	str	r0, [sp, #0x4]
	mov	r0, #0x15
	mov	r1, #0x7
	bl	CreateYesNoMenuParameterized
	ldr	r0, .L232+0x4
	ldr	r1, [r0]
	mov	r0, #0x16
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r1}
	bx	r1
.L233:
	.align	2, 0
.L232:
	.word	gText_QuitTheGame
	.word	sSlotMachine
.Lfe43:
	.size	 SlotAction_AskQuit,.Lfe43-SlotAction_AskQuit
	.align	2, 0
	.type	 SlotAction_HandleQuitInput,function
	.thumb_func
SlotAction_HandleQuitInput:
	push	{lr}
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L235	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	mov	r0, #0x0
	bl	DarkenBetTiles
	mov	r0, #0x1
	bl	DarkenBetTiles
	mov	r0, #0x2
	bl	DarkenBetTiles
	ldr	r0, .L240
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x12]
	ldrh	r2, [r1, #0xc]
	add	r0, r0, r2
	strh	r0, [r1, #0xc]
	mov	r0, #0x1b
	b	.L239
.L241:
	.align	2, 0
.L240:
	.word	sSlotMachine
.L235:
	cmp	r1, #0x1
	beq	.L238	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L236	@cond_branch
.L238:
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	ldr	r0, .L242
	ldr	r1, [r0]
	mov	r0, #0x5
.L239:
	strb	r0, [r1]
.L236:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L243:
	.align	2, 0
.L242:
	.word	sSlotMachine
.Lfe44:
	.size	 SlotAction_HandleQuitInput,.Lfe44-SlotAction_HandleQuitInput
	.align	2, 0
	.type	 SlotAction_PrintMsg_9999Coins,function
	.thumb_func
SlotAction_PrintMsg_9999Coins:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldr	r2, .L245
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r0, .L245+0x4
	ldr	r1, [r0]
	mov	r0, #0x18
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r1}
	bx	r1
.L246:
	.align	2, 0
.L245:
	.word	gText_YouveGot9999Coins
	.word	sSlotMachine
.Lfe45:
	.size	 SlotAction_PrintMsg_9999Coins,.Lfe45-SlotAction_PrintMsg_9999Coins
	.align	2, 0
	.type	 SlotAction_WaitMsg_9999Coins,function
	.thumb_func
SlotAction_WaitMsg_9999Coins:
	push	{lr}
	ldr	r0, .L249
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L248	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	ldr	r0, .L249+0x4
	ldr	r1, [r0]
	mov	r0, #0x5
	strb	r0, [r1]
.L248:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L250:
	.align	2, 0
.L249:
	.word	gMain
	.word	sSlotMachine
.Lfe46:
	.size	 SlotAction_WaitMsg_9999Coins,.Lfe46-SlotAction_WaitMsg_9999Coins
	.align	2, 0
	.type	 SlotAction_PrintMsg_NoMoreCoins,function
	.thumb_func
SlotAction_PrintMsg_NoMoreCoins:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldr	r2, .L252
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r0, .L252+0x4
	ldr	r1, [r0]
	mov	r0, #0x1a
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r1}
	bx	r1
.L253:
	.align	2, 0
.L252:
	.word	gText_YouveRunOutOfCoins
	.word	sSlotMachine
.Lfe47:
	.size	 SlotAction_PrintMsg_NoMoreCoins,.Lfe47-SlotAction_PrintMsg_NoMoreCoins
	.align	2, 0
	.type	 SlotAction_WaitMsg_NoMoreCoins,function
	.thumb_func
SlotAction_WaitMsg_NoMoreCoins:
	push	{lr}
	ldr	r0, .L256
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L255	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	ldr	r0, .L256+0x4
	ldr	r1, [r0]
	mov	r0, #0x1b
	strb	r0, [r1]
.L255:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L257:
	.align	2, 0
.L256:
	.word	gMain
	.word	sSlotMachine
.Lfe48:
	.size	 SlotAction_WaitMsg_NoMoreCoins,.Lfe48-SlotAction_WaitMsg_NoMoreCoins
	.align	2, 0
	.type	 SlotAction_EndGame,function
	.thumb_func
SlotAction_EndGame:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L259
	ldr	r0, [r4]
	ldrh	r0, [r0, #0xc]
	bl	SetCoins
	bl	GetCoins
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	AlertTVOfNewCoinTotal
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, [r4]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.L260:
	.align	2, 0
.L259:
	.word	sSlotMachine
.Lfe49:
	.size	 SlotAction_EndGame,.Lfe49-SlotAction_EndGame
	.align	2, 0
	.type	 SlotAction_FreeDataStructures,function
	.thumb_func
SlotAction_FreeDataStructures:
	push	{r4, r5, r6, lr}
	ldr	r0, .L267
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	beq	.LCB2585
	b	.L262	@long jump
.LCB2585:
	ldr	r6, .L267+0x4
	ldr	r0, [r6]
	ldr	r0, [r0, #0x64]
	bl	SetMainCallback2
	ldr	r4, .L267+0x8
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0xc
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x10
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x14
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x18
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x1c
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x20
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x24
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x28
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x2c
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x30
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x34
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x38
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x3c
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x40
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L263	@cond_branch
	bl	Free
	str	r5, [r4]
.L263:
	ldr	r4, .L267+0x44
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L264	@cond_branch
	bl	Free
	str	r5, [r4]
.L264:
	ldr	r4, .L267+0x48
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L265	@cond_branch
	bl	Free
	str	r5, [r4]
.L265:
	ldr	r4, .L267+0x4c
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L266	@cond_branch
	bl	Free
	str	r5, [r4]
.L266:
	ldr	r4, .L267+0x50
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x54
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x58
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x5c
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x60
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x64
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x68
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x6c
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r4, .L267+0x70
	ldr	r0, [r4]
	bl	Free
	str	r5, [r4]
	ldr	r0, [r6]
	bl	Free
	str	r5, [r6]
.L262:
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L268:
	.align	2, 0
.L267:
	.word	gPaletteFade
	.word	sSlotMachine
	.word	sImageTable_DigitalDisplay_Reel
	.word	sImageTable_DigitalDisplay_Time
	.word	sImageTable_DigitalDisplay_Insert
	.word	sImageTable_DigitalDisplay_Stop
	.word	sImageTable_DigitalDisplay_Win
	.word	sImageTable_DigitalDisplay_Lose
	.word	sImageTable_DigitalDisplay_Bonus
	.word	sImageTable_DigitalDisplay_Big
	.word	sImageTable_DigitalDisplay_Reg
	.word	sImageTable_DigitalDisplay_AButton
	.word	sImageTable_DigitalDisplay_Smoke
	.word	sImageTable_DigitalDisplay_Number
	.word	sImageTable_DigitalDisplay_Pokeball
	.word	sImageTable_DigitalDisplay_DPad
	.word	sImageTable_ReelTimePikachu
	.word	sImageTable_ReelTimeMachineAntennae
	.word	sImageTable_ReelTimeMachine
	.word	sImageTable_BrokenReelTimeMachine
	.word	sMenuGfx
	.word	sSelectedPikaPowerTile
	.word	sReelOverlay_Tilemap
	.word	sDigitalDisplayGfxPtr
	.word	sReelTimeGfxPtr
	.word	sReelButtonPress_Tilemap
	.word	sReelBackground_Gfx
	.word	sReelBackgroundSpriteSheet
	.word	sSlotMachineSpritesheetsPtr
.Lfe50:
	.size	 SlotAction_FreeDataStructures,.Lfe50-SlotAction_FreeDataStructures
	.align	2, 0
	.type	 DrawLuckyFlags,function
	.thumb_func
DrawLuckyFlags:
	push	{r4, lr}
	ldr	r4, .L276
	ldr	r1, [r4]
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L269	@cond_branch
	ldrb	r1, [r1, #0x4]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L269	@cond_branch
	bl	IsThisRoundLucky
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L272	@cond_branch
	bl	AttemptsAtLuckyFlags_Top3
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	beq	.L272	@cond_branch
	ldr	r2, [r4]
	ldr	r1, .L276+0x4
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldrb	r0, [r2, #0x4]
	orr	r0, r0, r1
	strb	r0, [r2, #0x4]
	cmp	r3, #0x1
	bne	.L269	@cond_branch
.L272:
	bl	AttemptsAtLuckyFlags_NotTop3
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x5
	beq	.L269	@cond_branch
	ldr	r0, .L276
	ldr	r2, [r0]
	ldr	r1, .L276+0x8
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldrb	r0, [r2, #0x4]
	orr	r0, r0, r1
	strb	r0, [r2, #0x4]
.L269:
	pop	{r4}
	pop	{r0}
	bx	r0
.L277:
	.align	2, 0
.L276:
	.word	sSlotMachine
	.word	sLuckyFlagSettings_Top3
	.word	sLuckyFlagSettings_NotTop3
.Lfe51:
	.size	 DrawLuckyFlags,.Lfe51-DrawLuckyFlags
	.align	2, 0
	.type	 SetLuckySpins,function
	.thumb_func
SetLuckySpins:
	push	{lr}
	ldr	r2, .L280
	ldr	r1, [r2]
	mov	r0, #0x0
	strb	r0, [r1, #0x6]
	ldr	r2, [r2]
	ldrb	r0, [r2, #0x4]
	cmp	r0, #0
	beq	.L279	@cond_branch
	mov	r0, #0x1
	strb	r0, [r2, #0x6]
.L279:
	pop	{r0}
	bx	r0
.L281:
	.align	2, 0
.L280:
	.word	sSlotMachine
.Lfe52:
	.size	 SetLuckySpins,.Lfe52-SetLuckySpins
	.align	2, 0
	.type	 GetBiasTag,function
	.thumb_func
GetBiasTag:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0x0
	mov	r3, #0x1
	ldr	r4, .L290
.L286:
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L287	@cond_branch
	add	r0, r2, r4
	ldrb	r0, [r0]
	b	.L289
.L291:
	.align	2, 0
.L290:
	.word	sBiasTags
.L287:
	lsr	r1, r1, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L286	@cond_branch
	mov	r0, #0x0
.L289:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 GetBiasTag,.Lfe53-GetBiasTag
	.align	2, 0
	.type	 IsThisRoundLucky,function
	.thumb_func
IsThisRoundLucky:
	push	{r4, lr}
	bl	Random
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L295
	ldr	r1, .L295+0x4
	ldr	r1, [r1]
	mov	r3, #0x12
	ldrsh	r2, [r1, r3]
	ldrb	r3, [r1, #0x1]
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	sub	r1, r1, #0x1
	add	r2, r2, r1
	add	r2, r2, r4
	ldrb	r1, [r2]
	cmp	r1, r0
	bhi	.L293	@cond_branch
	mov	r0, #0x0
	b	.L294
.L296:
	.align	2, 0
.L295:
	.word	sLuckyRoundProbabilities
	.word	sSlotMachine
.L293:
	mov	r0, #0x1
.L294:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe54:
	.size	 IsThisRoundLucky,.Lfe54-IsThisRoundLucky
	.align	2, 0
	.type	 AttemptsAtLuckyFlags_Top3,function
	.thumb_func
AttemptsAtLuckyFlags_Top3:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	ldr	r6, .L304
.L301:
	bl	Random
	mov	r2, #0xff
	ldr	r1, .L304+0x4
	ldr	r3, [r1]
	lsl	r1, r5, #0x10
	asr	r4, r1, #0x10
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x1
	ldrb	r3, [r3, #0x1]
	add	r1, r1, r3
	add	r1, r1, r6
	ldrb	r1, [r1]
	and	r2, r2, r0
	cmp	r1, r2
	bgt	.L299	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L301	@cond_branch
.L299:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L305:
	.align	2, 0
.L304:
	.word	sLuckyFlagProbabilities_Top3
	.word	sSlotMachine
.Lfe55:
	.size	 AttemptsAtLuckyFlags_Top3,.Lfe55-AttemptsAtLuckyFlags_Top3
	.align	2, 0
	.type	 AttemptsAtLuckyFlags_NotTop3,function
	.thumb_func
AttemptsAtLuckyFlags_NotTop3:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r6, #0x0
	ldr	r0, .L318
	mov	r8, r0
	mov	r7, #0x80
	lsl	r7, r7, #0x11
.L310:
	bl	Random
	mov	r5, #0xff
	and	r5, r5, r0
	ldr	r0, .L318+0x4
	ldr	r4, [r0]
	lsl	r2, r6, #0x10
	asr	r1, r2, #0x10
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	ldrb	r3, [r4, #0x1]
	add	r0, r0, r3
	add	r0, r0, r8
	ldrb	r3, [r0]
	cmp	r1, #0
	bne	.L311	@cond_branch
	ldrb	r0, [r4, #0x3]
	cmp	r0, #0x1
	bne	.L311	@cond_branch
	add	r3, r3, #0xa
	asr	r0, r7, #0x10
	cmp	r3, r0
	ble	.L313	@cond_branch
	add	r3, r0, #0
	b	.L313
.L319:
	.align	2, 0
.L318:
	.word	sLuckyFlagProbabilities_NotTop3
	.word	sSlotMachine
.L311:
	asr	r0, r2, #0x10
	cmp	r0, #0x4
	bne	.L313	@cond_branch
	ldr	r0, .L320
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0x1
	bne	.L313	@cond_branch
	lsl	r0, r3, #0x10
	ldr	r1, .L320+0x4
	add	r0, r0, r1
	lsr	r3, r0, #0x10
	cmp	r0, #0
	bge	.L313	@cond_branch
	mov	r3, #0x0
.L313:
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r5
	bgt	.L308	@cond_branch
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r2, r3
	lsr	r6, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L310	@cond_branch
.L308:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L321:
	.align	2, 0
.L320:
	.word	sSlotMachine
	.word	-0xa0000
.Lfe56:
	.size	 AttemptsAtLuckyFlags_NotTop3,.Lfe56-AttemptsAtLuckyFlags_NotTop3
	.align	2, 0
	.type	 GetReelTimeProbability,function
	.thumb_func
GetReelTimeProbability:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L328
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x3]
	cmp	r0, #0
	beq	.L323	@cond_branch
	ldr	r0, .L328+0x4
	b	.L327
.L329:
	.align	2, 0
.L328:
	.word	sSlotMachine
	.word	sReelTimeProbabilities_LuckyGame
.L323:
	ldr	r0, .L330
.L327:
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	ldrb	r2, [r2, #0x2]
	add	r1, r1, r2
	add	r1, r1, r0
	ldrb	r0, [r1]
	pop	{r1}
	bx	r1
.L331:
	.align	2, 0
.L330:
	.word	sReeltimeProbabilities_UnluckyGame
.Lfe57:
	.size	 GetReelTimeProbability,.Lfe57-GetReelTimeProbability
	.align	2, 0
	.type	 GetReeltimeDraw,function
	.thumb_func
GetReeltimeDraw:
	push	{r4, r5, r6, lr}
	ldr	r0, .L340
	ldr	r1, [r0]
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	bl	Random
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x0
	bl	GetReelTimeProbability
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcc	.L332	@cond_branch
	mov	r6, #0x5
	b	.L334
.L341:
	.align	2, 0
.L340:
	.word	sSlotMachine
.L336:
	sub	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L334:
	lsl	r0, r6, #0x10
	asr	r5, r0, #0x10
	cmp	r5, #0
	ble	.L335	@cond_branch
	bl	Random
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	GetReelTimeProbability
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcs	.L336	@cond_branch
.L335:
	ldr	r0, .L342
	ldr	r0, [r0]
	strb	r6, [r0, #0x5]
.L332:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L343:
	.align	2, 0
.L342:
	.word	sSlotMachine
.Lfe58:
	.size	 GetReeltimeDraw,.Lfe58-GetReeltimeDraw
	.align	2, 0
	.type	 ShouldReelTimeMachineExplode,function
	.thumb_func
ShouldReelTimeMachineExplode:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	ldr	r0, .L348
	lsl	r4, r4, #0x1
	add	r4, r4, r0
	ldrh	r4, [r4]
	cmp	r1, r4
	bcc	.L345	@cond_branch
	mov	r0, #0x0
	b	.L347
.L349:
	.align	2, 0
.L348:
	.word	sReelTimeExplodeProbability
.L345:
	mov	r0, #0x1
.L347:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe59:
	.size	 ShouldReelTimeMachineExplode,.Lfe59-ShouldReelTimeMachineExplode
	.align	2, 0
	.type	 SlowReelSpeed,function
	.thumb_func
SlowReelSpeed:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r0, .L361
	ldr	r0, [r0]
	mov	r2, #0x10
	ldrsh	r1, [r0, r2]
	ldr	r0, .L361+0x4
	cmp	r1, r0
	ble	.L351	@cond_branch
	mov	r4, #0x4
	b	.L352
.L362:
	.align	2, 0
.L361:
	.word	sSlotMachine
	.word	0x12b
.L351:
	cmp	r1, #0xf9
	ble	.L353	@cond_branch
	mov	r4, #0x3
	b	.L352
.L353:
	cmp	r1, #0xc7
	ble	.L355	@cond_branch
	mov	r4, #0x2
	b	.L352
.L355:
	cmp	r1, #0x95
	ble	.L352	@cond_branch
	mov	r4, #0x1
.L352:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r5, .L363
	lsl	r4, r4, #0x2
	add	r0, r4, r5
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L358	@cond_branch
	mov	r0, #0x4
	b	.L360
.L364:
	.align	2, 0
.L363:
	.word	sReelIncrementTable
.L358:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x18
	add	r2, r5, #0x2
	add	r2, r4, r2
	ldr	r3, .L365
	ldr	r1, .L365+0x4
	ldr	r1, [r1]
	ldrb	r1, [r1, #0xb]
	lsl	r1, r1, #0x1
	add	r1, r1, r3
	ldrb	r1, [r1]
	ldrb	r2, [r2]
	add	r1, r1, r2
	lsl	r1, r1, #0x18
	cmp	r0, r1
	bcc	.L359	@cond_branch
	mov	r0, #0x8
	b	.L360
.L366:
	.align	2, 0
.L365:
	.word	sReelTimeBonusIncrementTable
	.word	sSlotMachine
.L359:
	mov	r0, #0x2
.L360:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe60:
	.size	 SlowReelSpeed,.Lfe60-SlowReelSpeed
	.align	2, 0
	.type	 CheckMatch,function
	.thumb_func
CheckMatch:
	push	{r4, lr}
	ldr	r4, .L370
	ldr	r1, [r4]
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	bl	CheckMatch_CenterRow
	ldr	r0, [r4]
	mov	r1, #0x12
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	ble	.L368	@cond_branch
	bl	CheckMatch_TopAndBottom
.L368:
	ldr	r0, [r4]
	mov	r1, #0x12
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x2
	ble	.L369	@cond_branch
	bl	CheckMatch_Diagonals
.L369:
	pop	{r4}
	pop	{r0}
	bx	r0
.L371:
	.align	2, 0
.L370:
	.word	sSlotMachine
.Lfe61:
	.size	 CheckMatch,.Lfe61-CheckMatch
	.align	2, 0
	.type	 CheckMatch_CenterRow,function
	.thumb_func
CheckMatch_CenterRow:
	push	{r4, r5, lr}
	mov	r0, #0x0
	mov	r1, #0x2
	bl	GetTagAtRest
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x1
	mov	r1, #0x2
	bl	GetTagAtRest
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x2
	mov	r1, #0x2
	bl	GetTagAtRest
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetMatchFromSymbols
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x9
	beq	.L373	@cond_branch
	ldr	r0, .L374
	ldr	r2, [r0]
	ldr	r0, .L374+0x4
	lsl	r1, r1, #0x1
	add	r0, r1, r0
	ldrh	r0, [r0]
	ldrh	r3, [r2, #0xe]
	add	r0, r0, r3
	strh	r0, [r2, #0xe]
	ldr	r0, .L374+0x8
	add	r1, r1, r0
	ldrh	r0, [r2, #0x8]
	ldrh	r1, [r1]
	orr	r0, r0, r1
	strh	r0, [r2, #0x8]
	mov	r0, #0x0
	bl	FlashMatchLine
.L373:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L375:
	.align	2, 0
.L374:
	.word	sSlotMachine
	.word	sSlotPayouts
	.word	sSlotMatchFlags
.Lfe62:
	.size	 CheckMatch_CenterRow,.Lfe62-CheckMatch_CenterRow
	.align	2, 0
	.type	 CheckMatch_TopAndBottom,function
	.thumb_func
CheckMatch_TopAndBottom:
	push	{r4, r5, lr}
	mov	r0, #0x0
	mov	r1, #0x1
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x1
	mov	r1, #0x1
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetMatchFromSymbols
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x9
	beq	.L377	@cond_branch
	cmp	r1, #0
	bne	.L378	@cond_branch
	mov	r1, #0x1
.L378:
	ldr	r0, .L381
	ldr	r2, [r0]
	ldr	r0, .L381+0x4
	lsl	r1, r1, #0x1
	add	r0, r1, r0
	ldrh	r0, [r0]
	ldrh	r3, [r2, #0xe]
	add	r0, r0, r3
	strh	r0, [r2, #0xe]
	ldr	r0, .L381+0x8
	add	r1, r1, r0
	ldrh	r0, [r2, #0x8]
	ldrh	r1, [r1]
	orr	r0, r0, r1
	strh	r0, [r2, #0x8]
	mov	r0, #0x1
	bl	FlashMatchLine
.L377:
	mov	r0, #0x0
	mov	r1, #0x3
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x1
	mov	r1, #0x3
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x2
	mov	r1, #0x3
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetMatchFromSymbols
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x9
	beq	.L379	@cond_branch
	cmp	r1, #0
	bne	.L380	@cond_branch
	mov	r1, #0x1
.L380:
	ldr	r0, .L381
	ldr	r2, [r0]
	ldr	r0, .L381+0x4
	lsl	r1, r1, #0x1
	add	r0, r1, r0
	ldrh	r0, [r0]
	ldrh	r3, [r2, #0xe]
	add	r0, r0, r3
	strh	r0, [r2, #0xe]
	ldr	r0, .L381+0x8
	add	r1, r1, r0
	ldrh	r0, [r2, #0x8]
	ldrh	r1, [r1]
	orr	r0, r0, r1
	strh	r0, [r2, #0x8]
	mov	r0, #0x2
	bl	FlashMatchLine
.L379:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L382:
	.align	2, 0
.L381:
	.word	sSlotMachine
	.word	sSlotPayouts
	.word	sSlotMatchFlags
.Lfe63:
	.size	 CheckMatch_TopAndBottom,.Lfe63-CheckMatch_TopAndBottom
	.align	2, 0
	.type	 CheckMatch_Diagonals,function
	.thumb_func
CheckMatch_Diagonals:
	push	{r4, r5, lr}
	mov	r0, #0x0
	mov	r1, #0x1
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x1
	mov	r1, #0x2
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x2
	mov	r1, #0x3
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetMatchFromSymbols
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x9
	beq	.L384	@cond_branch
	cmp	r1, #0
	beq	.L385	@cond_branch
	ldr	r0, .L388
	ldr	r2, [r0]
	ldr	r0, .L388+0x4
	lsl	r1, r1, #0x1
	add	r0, r1, r0
	ldrh	r0, [r0]
	ldrh	r3, [r2, #0xe]
	add	r0, r0, r3
	strh	r0, [r2, #0xe]
	ldr	r0, .L388+0x8
	add	r1, r1, r0
	ldrh	r0, [r2, #0x8]
	ldrh	r1, [r1]
	orr	r0, r0, r1
	strh	r0, [r2, #0x8]
.L385:
	mov	r0, #0x3
	bl	FlashMatchLine
.L384:
	mov	r0, #0x0
	mov	r1, #0x3
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x1
	mov	r1, #0x2
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetMatchFromSymbols
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x9
	beq	.L386	@cond_branch
	cmp	r1, #0
	beq	.L387	@cond_branch
	ldr	r0, .L388
	ldr	r2, [r0]
	ldr	r0, .L388+0x4
	lsl	r1, r1, #0x1
	add	r0, r1, r0
	ldrh	r0, [r0]
	ldrh	r3, [r2, #0xe]
	add	r0, r0, r3
	strh	r0, [r2, #0xe]
	ldr	r0, .L388+0x8
	add	r1, r1, r0
	ldrh	r0, [r2, #0x8]
	ldrh	r1, [r1]
	orr	r0, r0, r1
	strh	r0, [r2, #0x8]
.L387:
	mov	r0, #0x4
	bl	FlashMatchLine
.L386:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L389:
	.align	2, 0
.L388:
	.word	sSlotMachine
	.word	sSlotPayouts
	.word	sSlotMatchFlags
.Lfe64:
	.size	 CheckMatch_Diagonals,.Lfe64-CheckMatch_Diagonals
	.align	2, 0
	.type	 GetMatchFromSymbols,function
	.thumb_func
GetMatchFromSymbols:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r3, r1
	bne	.L391	@cond_branch
	cmp	r3, r2
	bne	.L391	@cond_branch
	ldr	r0, .L397
	add	r0, r3, r0
	ldrb	r0, [r0]
	b	.L395
.L398:
	.align	2, 0
.L397:
	.word	sSymToMatch
.L391:
	cmp	r3, #0
	bne	.L392	@cond_branch
	cmp	r1, #0
	bne	.L392	@cond_branch
	cmp	r2, #0x1
	beq	.L396	@cond_branch
.L392:
	cmp	r3, #0x1
	bne	.L393	@cond_branch
	cmp	r1, #0x1
	bne	.L393	@cond_branch
	cmp	r2, #0
	bne	.L393	@cond_branch
.L396:
	mov	r0, #0x6
	b	.L395
.L393:
	cmp	r3, #0x4
	beq	.L394	@cond_branch
	mov	r0, #0x9
	b	.L395
.L394:
	mov	r0, #0x0
.L395:
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 GetMatchFromSymbols,.Lfe65-GetMatchFromSymbols
	.align	2, 0
	.type	 AwardPayout,function
	.thumb_func
AwardPayout:
	push	{r4, lr}
	ldr	r4, .L400
	add	r0, r4, #0
	mov	r1, #0x4
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	_call_via_r4
	pop	{r4}
	pop	{r0}
	bx	r0
.L401:
	.align	2, 0
.L400:
	.word	RunAwardPayoutActions
.Lfe66:
	.size	 AwardPayout,.Lfe66-AwardPayout
	.align	2, 0
	.type	 IsFinalTask_RunAwardPayoutActions,function
	.thumb_func
IsFinalTask_RunAwardPayoutActions:
	push	{lr}
	ldr	r0, .L406
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L403	@cond_branch
	mov	r0, #0x0
	b	.L405
.L407:
	.align	2, 0
.L406:
	.word	RunAwardPayoutActions
.L403:
	mov	r0, #0x1
.L405:
	pop	{r1}
	bx	r1
.Lfe67:
	.size	 IsFinalTask_RunAwardPayoutActions,.Lfe67-IsFinalTask_RunAwardPayoutActions
	.align	2, 0
	.type	 RunAwardPayoutActions,function
	.thumb_func
RunAwardPayoutActions:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L413
	ldr	r2, .L413+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L409:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L409	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L414:
	.align	2, 0
.L413:
	.word	sAwardPayoutActions
	.word	gTasks
.Lfe68:
	.size	 RunAwardPayoutActions,.Lfe68-RunAwardPayoutActions
	.align	2, 0
	.type	 AwardPayoutAction0,function
	.thumb_func
AwardPayoutAction0:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsMatchLineDoneFlashingBeforePayout
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L416	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	ldr	r0, .L419
	ldr	r0, [r0]
	mov	r1, #0xe
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L416	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
	b	.L418
.L420:
	.align	2, 0
.L419:
	.word	sSlotMachine
.L416:
	mov	r0, #0x0
.L418:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe69:
	.size	 AwardPayoutAction0,.Lfe69-AwardPayoutAction0
	.align	2, 0
	.type	 AwardPayoutAction_GivePayoutToPlayer,function
	.thumb_func
AwardPayoutAction_GivePayoutToPlayer:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L422	@cond_branch
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L423	@cond_branch
	mov	r0, #0x15
	bl	PlaySE
.L423:
	ldr	r0, .L429
	ldr	r2, [r0]
	ldrh	r0, [r2, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0xe]
	ldrh	r3, [r2, #0xc]
	mov	r0, #0xc
	ldrsh	r1, [r2, r0]
	ldr	r0, .L429+0x4
	cmp	r1, r0
	bgt	.L424	@cond_branch
	add	r0, r3, #0x1
	strh	r0, [r2, #0xc]
.L424:
	mov	r0, #0x8
	strh	r0, [r4, #0xa]
	ldr	r0, .L429+0x8
	ldrh	r1, [r0, #0x2c]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L422	@cond_branch
	mov	r0, #0x4
	strh	r0, [r4, #0xa]
.L422:
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L426	@cond_branch
	ldr	r0, .L429+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L426	@cond_branch
	mov	r0, #0x15
	bl	PlaySE
	ldr	r1, .L429
	ldr	r2, [r1]
	ldrh	r0, [r2, #0xe]
	ldrh	r3, [r2, #0xc]
	add	r0, r0, r3
	strh	r0, [r2, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r3, .L429+0xc
	cmp	r0, r3
	ble	.L427	@cond_branch
	strh	r3, [r2, #0xc]
.L427:
	ldr	r1, [r1]
	mov	r0, #0x0
	strh	r0, [r1, #0xe]
.L426:
	ldr	r0, .L429
	ldr	r0, [r0]
	mov	r1, #0xe
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L428	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L428:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L430:
	.align	2, 0
.L429:
	.word	sSlotMachine
	.word	0x270e
	.word	gMain
	.word	0x270f
.Lfe70:
	.size	 AwardPayoutAction_GivePayoutToPlayer,.Lfe70-AwardPayoutAction_GivePayoutToPlayer
	.align	2, 0
	.type	 AwardPayoutAction_FreeTask,function
	.thumb_func
AwardPayoutAction_FreeTask:
	push	{lr}
	bl	TryStopMatchLinesFlashing
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L432	@cond_branch
	ldr	r0, .L433
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L432:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L434:
	.align	2, 0
.L433:
	.word	RunAwardPayoutActions
.Lfe71:
	.size	 AwardPayoutAction_FreeTask,.Lfe71-AwardPayoutAction_FreeTask
	.align	2, 0
	.type	 GetTagAtRest,function
	.thumb_func
GetTagAtRest:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	ldr	r0, .L437
	ldr	r0, [r0]
	lsl	r2, r4, #0x1
	add	r0, r0, #0x28
	add	r0, r0, r2
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r0, r1
	mov	r1, #0x15
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L436	@cond_branch
	add	r0, r0, #0x15
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L436:
	ldr	r2, .L437+0x4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1]
	pop	{r4}
	pop	{r1}
	bx	r1
.L438:
	.align	2, 0
.L437:
	.word	sSlotMachine
	.word	sReelSymbolTileTags
.Lfe72:
	.size	 GetTagAtRest,.Lfe72-GetTagAtRest
	.align	2, 0
	.type	 GetTag,function
	.thumb_func
GetTag:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r6, #0x0
	ldr	r0, .L441
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	add	r0, r0, #0x1c
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x18
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L440	@cond_branch
	ldr	r6, .L441+0x4
.L440:
	lsl	r1, r5, #0x10
	asr	r1, r1, #0x10
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L442:
	.align	2, 0
.L441:
	.word	sSlotMachine
	.word	0xffff
.Lfe73:
	.size	 GetTag,.Lfe73-GetTag
	.align	2, 0
	.type	 GetNearbyReelTimeTag,function
	.thumb_func
GetNearbyReelTimeTag:
	push	{lr}
	ldr	r1, .L445
	ldr	r1, [r1]
	mov	r2, #0x16
	ldrsh	r1, [r1, r2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r1, r1, r0
	add	r0, r1, #0
	mov	r1, #0x6
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L444	@cond_branch
	add	r0, r0, #0x6
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L444:
	ldr	r0, .L445+0x4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r1, r1, r0
	ldrb	r0, [r1]
	pop	{r1}
	bx	r1
.L446:
	.align	2, 0
.L445:
	.word	sSlotMachine
	.word	sReelTimeTags
.Lfe74:
	.size	 GetNearbyReelTimeTag,.Lfe74-GetNearbyReelTimeTag
	.align	2, 0
	.type	 AdvanceSlotReel,function
	.thumb_func
AdvanceSlotReel:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	ldr	r0, .L448
	ldr	r6, [r0]
	lsr	r5, r5, #0x17
	add	r4, r6, #0
	add	r4, r4, #0x1c
	add	r4, r4, r5
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldrh	r0, [r4]
	add	r1, r1, r0
	strh	r1, [r4]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0xfc
	lsl	r1, r1, #0x1
	bl	__modsi3
	strh	r0, [r4]
	add	r6, r6, #0x28
	add	r6, r6, r5
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0x18
	bl	__divsi3
	mov	r1, #0x15
	sub	r1, r1, r0
	strh	r1, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L449:
	.align	2, 0
.L448:
	.word	sSlotMachine
.Lfe75:
	.size	 AdvanceSlotReel,.Lfe75-AdvanceSlotReel
	.align	2, 0
	.globl	AdvanceSlotReelToNextTag
	.type	 AdvanceSlotReelToNextTag,function
	.thumb_func
AdvanceSlotReelToNextTag:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r7, .L453
	ldr	r0, [r7]
	lsl	r6, r5, #0x1
	add	r0, r0, #0x1c
	add	r0, r0, r6
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x18
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r2, r0, #0x10
	asr	r1, r2, #0x10
	cmp	r1, #0
	beq	.L451	@cond_branch
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	cmp	r1, r0
	bge	.L452	@cond_branch
	lsr	r4, r2, #0x10
.L452:
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	add	r0, r5, #0
	bl	AdvanceSlotReel
	ldr	r0, [r7]
	add	r0, r0, #0x1c
	add	r0, r0, r6
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x18
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L451:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L454:
	.align	2, 0
.L453:
	.word	sSlotMachine
.Lfe76:
	.size	 AdvanceSlotReelToNextTag,.Lfe76-AdvanceSlotReelToNextTag
	.align	2, 0
	.type	 AdvanceReeltimeReel,function
	.thumb_func
AdvanceReeltimeReel:
	push	{r4, lr}
	ldr	r1, .L456
	ldr	r4, [r1]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x14]
	add	r0, r0, r1
	strh	r0, [r4, #0x14]
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	mov	r1, #0x78
	bl	__modsi3
	strh	r0, [r4, #0x14]
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	mov	r1, #0x14
	bl	__divsi3
	mov	r1, #0x6
	sub	r1, r1, r0
	strh	r1, [r4, #0x16]
	pop	{r4}
	pop	{r0}
	bx	r0
.L457:
	.align	2, 0
.L456:
	.word	sSlotMachine
.Lfe77:
	.size	 AdvanceReeltimeReel,.Lfe77-AdvanceReeltimeReel
	.align	2, 0
	.globl	AdvanceReeltimeReelToNextTag
	.type	 AdvanceReeltimeReelToNextTag,function
	.thumb_func
AdvanceReeltimeReelToNextTag:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r5, .L461
	ldr	r0, [r5]
	mov	r1, #0x14
	ldrsh	r0, [r0, r1]
	mov	r1, #0x14
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r2, r0, #0x10
	asr	r1, r2, #0x10
	cmp	r1, #0
	beq	.L459	@cond_branch
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	cmp	r1, r0
	bge	.L460	@cond_branch
	lsr	r4, r2, #0x10
.L460:
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	bl	AdvanceReeltimeReel
	ldr	r0, [r5]
	mov	r1, #0x14
	ldrsh	r0, [r0, r1]
	mov	r1, #0x14
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L459:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L462:
	.align	2, 0
.L461:
	.word	sSlotMachine
.Lfe78:
	.size	 AdvanceReeltimeReelToNextTag,.Lfe78-AdvanceReeltimeReelToNextTag
	.align	2, 0
	.type	 CreateSlotReelTasks,function
	.thumb_func
CreateSlotReelTasks:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	ldr	r5, .L469
	ldr	r6, .L469+0x4
.L467:
	add	r0, r5, #0
	mov	r1, #0x2
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	strh	r4, [r1, #0x26]
	ldr	r1, .L469+0x8
	ldr	r1, [r1]
	add	r1, r1, #0x3a
	add	r1, r1, r4
	strb	r0, [r1]
	bl	_call_via_r5
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L467	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L470:
	.align	2, 0
.L469:
	.word	Task_RunSlotReelActions
	.word	gTasks
	.word	sSlotMachine
.Lfe79:
	.size	 CreateSlotReelTasks,.Lfe79-CreateSlotReelTasks
	.align	2, 0
	.type	 SpinSlotReel,function
	.thumb_func
SpinSlotReel:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L472
	ldr	r1, .L472+0x4
	ldr	r2, [r1]
	add	r2, r2, #0x3a
	add	r2, r2, r0
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r3, #0x1
	strh	r3, [r0, #0x8]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strh	r3, [r0, #0x24]
	pop	{r4}
	pop	{r0}
	bx	r0
.L473:
	.align	2, 0
.L472:
	.word	gTasks
	.word	sSlotMachine
.Lfe80:
	.size	 SpinSlotReel,.Lfe80-SpinSlotReel
	.align	2, 0
	.type	 StopSlotReel,function
	.thumb_func
StopSlotReel:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L475
	ldr	r1, .L475+0x4
	ldr	r1, [r1]
	add	r1, r1, #0x3a
	add	r1, r1, r0
	ldrb	r1, [r1]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x2
	strh	r1, [r0, #0x8]
	bx	lr
.L476:
	.align	2, 0
.L475:
	.word	gTasks
	.word	sSlotMachine
.Lfe81:
	.size	 StopSlotReel,.Lfe81-StopSlotReel
	.align	2, 0
	.type	 IsSlotReelMoving,function
	.thumb_func
IsSlotReelMoving:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L478
	ldr	r1, .L478+0x4
	ldr	r1, [r1]
	add	r1, r1, #0x3a
	add	r1, r1, r0
	ldrb	r1, [r1]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.L479:
	.align	2, 0
.L478:
	.word	gTasks
	.word	sSlotMachine
.Lfe82:
	.size	 IsSlotReelMoving,.Lfe82-IsSlotReelMoving
	.align	2, 0
	.type	 Task_RunSlotReelActions,function
	.thumb_func
Task_RunSlotReelActions:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L485
	ldr	r2, .L485+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L481:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L481	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L486:
	.align	2, 0
.L485:
	.word	sSlotReelActions
	.word	gTasks
.Lfe83:
	.size	 Task_RunSlotReelActions,.Lfe83-Task_RunSlotReelActions
	.align	2, 0
	.type	 SlotReelAction_StayStill,function
	.thumb_func
SlotReelAction_StayStill:
	mov	r0, #0x0
	bx	lr
.Lfe84:
	.size	 SlotReelAction_StayStill,.Lfe84-SlotReelAction_StayStill
	.align	2, 0
	.type	 SlotReelAction_Spin,function
	.thumb_func
SlotReelAction_Spin:
	push	{lr}
	ldrh	r0, [r0, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L489
	ldr	r1, [r1]
	mov	r2, #0x1a
	ldrsh	r1, [r1, r2]
	bl	AdvanceSlotReel
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L490:
	.align	2, 0
.L489:
	.word	sSlotMachine
.Lfe85:
	.size	 SlotReelAction_Spin,.Lfe85-SlotReelAction_Spin
	.align	2, 0
	.type	 SlotReelAction_DecideWhereToStop,function
	.thumb_func
SlotReelAction_DecideWhereToStop:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L494
	ldr	r3, [r0]
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	add	r0, r3, #0
	add	r0, r0, #0x34
	add	r0, r0, r1
	strh	r2, [r0]
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	add	r0, r3, #0
	add	r0, r0, #0x2e
	add	r0, r0, r1
	strh	r2, [r0]
	ldrb	r0, [r3, #0xa]
	cmp	r0, #0
	bne	.L492	@cond_branch
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	beq	.L493	@cond_branch
	ldrb	r0, [r3, #0x6]
	cmp	r0, #0
	beq	.L493	@cond_branch
	ldr	r1, .L494+0x4
	mov	r2, #0x26
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L492	@cond_branch
.L493:
	ldr	r0, .L494
	ldr	r1, [r0]
	mov	r0, #0x0
	strb	r0, [r1, #0x6]
	ldr	r1, .L494+0x8
	mov	r2, #0x26
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
.L492:
	ldr	r0, .L494
	ldr	r1, [r0]
	mov	r2, #0x26
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x2e
	add	r1, r1, r0
	ldrh	r0, [r1]
	strh	r0, [r4, #0xa]
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L495:
	.align	2, 0
.L494:
	.word	sSlotMachine
	.word	sDecideReelTurns_BiasTag
	.word	sDecideReelTurns_NoBiasTag
.Lfe86:
	.size	 SlotReelAction_DecideWhereToStop,.Lfe86-SlotReelAction_DecideWhereToStop
	.align	2, 0
	.type	 SlotReelAction_MoveToStop,function
	.thumb_func
SlotReelAction_MoveToStop:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	ldr	r1, .L502
	mov	r0, sp
	mov	r2, #0xa
	bl	memcpy
	ldr	r7, .L502+0x4
	ldr	r5, [r7]
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r6, r0, #0x1
	add	r0, r5, #0
	add	r0, r0, #0x1c
	add	r0, r0, r6
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r1, #0x18
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r0, #0
	beq	.L497	@cond_branch
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x1a
	ldrsh	r1, [r5, r6]
	bl	AdvanceSlotReelToNextTag
	b	.L501
.L503:
	.align	2, 0
.L502:
	.word	sReelStopShocks
	.word	sSlotMachine
.L497:
	add	r0, r5, #0
	add	r0, r0, #0x2e
	add	r1, r0, r6
	ldrh	r3, [r1]
	mov	r6, #0x0
	ldrsh	r0, [r1, r6]
	cmp	r0, #0
	beq	.L498	@cond_branch
	sub	r0, r3, #0x1
	strh	r0, [r1]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x1a
	ldrsh	r1, [r5, r2]
	bl	AdvanceSlotReel
	ldr	r1, [r7]
	mov	r6, #0x26
	ldrsh	r0, [r4, r6]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1c
	add	r1, r1, r0
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	mov	r1, #0x18
	bl	__modsi3
.L501:
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L498:
	cmp	r2, #0
	bne	.L500	@cond_branch
	ldr	r0, .L504
	ldr	r1, [r0]
	mov	r6, #0x26
	ldrsh	r0, [r4, r6]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x2e
	add	r1, r1, r0
	mov	r0, #0x0
	ldrsh	r1, [r1, r0]
	cmp	r1, #0
	bne	.L500	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4, #0xa]
	strh	r1, [r4, #0xc]
.L500:
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L505:
	.align	2, 0
.L504:
	.word	sSlotMachine
.Lfe87:
	.size	 SlotReelAction_MoveToStop,.Lfe87-SlotReelAction_MoveToStop
	.align	2, 0
	.type	 SlotReelAction_OscillatingStop,function
	.thumb_func
SlotReelAction_OscillatingStop:
	push	{r4, lr}
	add	r2, r0, #0
	ldr	r4, .L509
	ldr	r1, [r4]
	mov	r3, #0x26
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrh	r0, [r2, #0xa]
	strh	r0, [r1]
	ldrh	r0, [r2, #0xa]
	neg	r3, r0
	strh	r3, [r2, #0xa]
	ldrh	r0, [r2, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xc]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L507	@cond_branch
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x11
	strh	r0, [r2, #0xa]
.L507:
	mov	r0, #0xa
	ldrsh	r3, [r2, r0]
	cmp	r3, #0
	bne	.L508	@cond_branch
	strh	r3, [r2, #0x8]
	strh	r3, [r2, #0x24]
	ldr	r1, [r4]
	mov	r4, #0x26
	ldrsh	r0, [r2, r4]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x22
	add	r1, r1, r0
	strh	r3, [r1]
.L508:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L510:
	.align	2, 0
.L509:
	.word	sSlotMachine
.Lfe88:
	.size	 SlotReelAction_OscillatingStop,.Lfe88-SlotReelAction_OscillatingStop
	.align	2, 0
	.type	 DecideReelTurns_BiasTag_Reel1,function
	.thumb_func
DecideReelTurns_BiasTag_Reel1:
	push	{r4, r5, lr}
	ldr	r4, .L513
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x4]
	bl	GetBiasTag
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r5, r3, #0
	ldr	r4, [r4]
	ldrb	r1, [r4, #0x4]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L512	@cond_branch
	mov	r5, #0x0
	mov	r3, #0x1
.L512:
	ldr	r1, .L513+0x4
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	add	r0, r5, #0
	add	r1, r3, #0
	bl	_call_via_r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L514:
	.align	2, 0
.L513:
	.word	sSlotMachine
	.word	sDecideReelTurns_BiasTag_Reel1_Bets
.Lfe89:
	.size	 DecideReelTurns_BiasTag_Reel1,.Lfe89-DecideReelTurns_BiasTag_Reel1
	.align	2, 0
	.type	 AreTagsAtPosition_Reel1,function
	.thumb_func
AreTagsAtPosition_Reel1:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	mov	r0, #0x0
	add	r1, r3, #0
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, r4
	beq	.L517	@cond_branch
	cmp	r0, r5
	bne	.L516	@cond_branch
.L517:
	ldr	r0, .L519
	ldr	r0, [r0]
	strb	r1, [r0, #0x7]
	mov	r0, #0x1
	b	.L518
.L520:
	.align	2, 0
.L519:
	.word	sSlotMachine
.L516:
	mov	r0, #0x0
.L518:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe90:
	.size	 AreTagsAtPosition_Reel1,.Lfe90-AreTagsAtPosition_Reel1
	.align	2, 0
	.type	 AreCherriesOnScreen_Reel1,function
	.thumb_func
AreCherriesOnScreen_Reel1:
	push	{r4, lr}
	mov	r1, #0x1
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	sub	r1, r1, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x0
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	beq	.L523	@cond_branch
	mov	r1, #0x2
	sub	r1, r1, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x0
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	beq	.L523	@cond_branch
	mov	r1, #0x3
	sub	r1, r1, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x0
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L522	@cond_branch
.L523:
	mov	r0, #0x1
	b	.L525
.L522:
	mov	r0, #0x0
.L525:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe91:
	.size	 AreCherriesOnScreen_Reel1,.Lfe91-AreCherriesOnScreen_Reel1
	.align	2, 0
	.type	 IsBiasTowardsCherryOr7s,function
	.thumb_func
IsBiasTowardsCherryOr7s:
	push	{lr}
	ldr	r0, .L530
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x4]
	mov	r0, #0xc2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L527	@cond_branch
	mov	r0, #0x0
	b	.L529
.L531:
	.align	2, 0
.L530:
	.word	sSlotMachine
.L527:
	mov	r0, #0x1
.L529:
	pop	{r1}
	bx	r1
.Lfe92:
	.size	 IsBiasTowardsCherryOr7s,.Lfe92-IsBiasTowardsCherryOr7s
	.align	2, 0
	.type	 DecideReelTurns_BiasTag_Reel1_Bet1,function
	.thumb_func
DecideReelTurns_BiasTag_Reel1_Bet1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r5, #0x0
	mov	r0, #0x2
	mov	r8, r0
.L536:
	lsl	r0, r5, #0x10
	asr	r4, r0, #0x10
	mov	r1, r8
	sub	r0, r1, r4
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r1, r7, #0
	add	r2, r6, #0
	bl	AreTagsAtPosition_Reel1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L535	@cond_branch
	ldr	r0, .L540
	ldr	r1, [r0]
	mov	r0, #0x2
	strh	r0, [r1, #0x34]
	strh	r5, [r1, #0x2e]
	mov	r0, #0x1
	b	.L539
.L541:
	.align	2, 0
.L540:
	.word	sSlotMachine
.L535:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L536	@cond_branch
	mov	r0, #0x0
.L539:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe93:
	.size	 DecideReelTurns_BiasTag_Reel1_Bet1,.Lfe93-DecideReelTurns_BiasTag_Reel1_Bet1
	.align	2, 0
	.type	 DecideReelTurns_BiasTag_Reel1_Bet2or3,function
	.thumb_func
DecideReelTurns_BiasTag_Reel1_Bet2or3:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	bl	IsBiasTowardsCherryOr7s
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L544	@cond_branch
	mov	r0, #0x0
	bl	AreCherriesOnScreen_Reel1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L543	@cond_branch
.L544:
	mov	r7, #0x1
	mov	r6, #0x0
.L548:
	lsl	r0, r7, #0x10
	asr	r4, r0, #0x10
	add	r0, r4, #0
	mov	r1, r9
	mov	r2, r8
	bl	AreTagsAtPosition_Reel1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L547	@cond_branch
	ldr	r0, .L564
	ldr	r0, [r0]
	strh	r7, [r0, #0x34]
	strh	r6, [r0, #0x2e]
	mov	r0, #0x1
	b	.L563
.L565:
	.align	2, 0
.L564:
	.word	sSlotMachine
.L547:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L548	@cond_branch
.L543:
	mov	r7, #0x1
	add	r6, r5, #0
	ldr	r0, .L566
	mov	sl, r0
.L554:
	lsl	r5, r7, #0x10
	cmp	r6, #0
	bne	.L556	@cond_branch
	asr	r0, r5, #0x10
	bl	AreCherriesOnScreen_Reel1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L553	@cond_branch
.L556:
	mov	r0, #0x1
	asr	r4, r5, #0x10
	sub	r0, r0, r4
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, r9
	mov	r2, r8
	bl	AreTagsAtPosition_Reel1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L553	@cond_branch
	cmp	r4, #0x1
	bne	.L558	@cond_branch
	cmp	r6, #0
	bne	.L559	@cond_branch
	mov	r0, #0x3
	bl	AreCherriesOnScreen_Reel1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L558	@cond_branch
.L559:
	mov	r0, sl
	ldr	r1, [r0]
	mov	r0, #0x3
	strh	r0, [r1, #0x34]
	strh	r0, [r1, #0x2e]
	mov	r0, #0x1
	b	.L563
.L567:
	.align	2, 0
.L566:
	.word	sSlotMachine
.L558:
	asr	r0, r5, #0x10
	cmp	r0, #0x3
	bgt	.L560	@cond_branch
	add	r4, r0, #0x1
	cmp	r6, #0
	bne	.L561	@cond_branch
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	bl	AreCherriesOnScreen_Reel1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L560	@cond_branch
.L561:
	mov	r0, sl
	ldr	r1, [r0]
	mov	r0, #0x2
	strh	r0, [r1, #0x34]
	strh	r4, [r1, #0x2e]
	mov	r0, #0x1
	b	.L563
.L560:
	mov	r0, sl
	ldr	r1, [r0]
	mov	r0, #0x1
	strh	r0, [r1, #0x34]
	strh	r7, [r1, #0x2e]
	b	.L563
.L553:
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r5, r1
	lsr	r7, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L554	@cond_branch
	mov	r0, #0x0
.L563:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe94:
	.size	 DecideReelTurns_BiasTag_Reel1_Bet2or3,.Lfe94-DecideReelTurns_BiasTag_Reel1_Bet2or3
	.align	2, 0
	.type	 DecideReelTurns_BiasTag_Reel2,function
	.thumb_func
DecideReelTurns_BiasTag_Reel2:
	push	{lr}
	ldr	r1, .L569
	ldr	r0, .L569+0x4
	ldr	r0, [r0]
	mov	r2, #0x12
	ldrsh	r0, [r0, r2]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L570:
	.align	2, 0
.L569:
	.word	sDecideReelTurns_BiasTag_Reel2_Bets
	.word	sSlotMachine
.Lfe95:
	.size	 DecideReelTurns_BiasTag_Reel2,.Lfe95-DecideReelTurns_BiasTag_Reel2
	.align	2, 0
	.type	 DecideReelTurns_BiasTag_Reel2_Bet1or2,function
	.thumb_func
DecideReelTurns_BiasTag_Reel2_Bet1or2:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L579
	ldr	r0, [r0]
	mov	r5, #0x0
	ldrh	r7, [r0, #0x34]
	mov	r1, #0x34
	ldrsh	r6, [r0, r1]
.L575:
	lsl	r0, r5, #0x10
	asr	r4, r0, #0x10
	sub	r1, r6, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	bl	GetTag
	ldr	r1, .L579
	ldr	r1, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r1, #0x7]
	cmp	r0, r2
	bne	.L574	@cond_branch
	strh	r7, [r1, #0x36]
	strh	r5, [r1, #0x30]
	mov	r0, #0x1
	b	.L578
.L580:
	.align	2, 0
.L579:
	.word	sSlotMachine
.L574:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L575	@cond_branch
	mov	r0, #0x0
.L578:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe96:
	.size	 DecideReelTurns_BiasTag_Reel2_Bet1or2,.Lfe96-DecideReelTurns_BiasTag_Reel2_Bet1or2
	.align	2, 0
	.type	 DecideReelTurns_BiasTag_Reel2_Bet3,function
	.thumb_func
DecideReelTurns_BiasTag_Reel2_Bet3:
	push	{r4, r5, r6, lr}
	bl	DecideReelTurns_BiasTag_Reel2_Bet1or2
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L582	@cond_branch
	ldr	r0, .L601
	ldr	r1, [r0]
	mov	r2, #0x34
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x2
	beq	.L600	@cond_branch
	mov	r2, #0x30
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	ble	.L600	@cond_branch
	cmp	r0, #0x4
	beq	.L600	@cond_branch
	mov	r5, #0x0
	mov	r6, #0x2
.L587:
	lsl	r0, r5, #0x10
	asr	r4, r0, #0x10
	sub	r1, r6, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	bl	GetTag
	ldr	r1, .L601
	ldr	r1, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r1, #0x7]
	cmp	r0, r2
	beq	.L598	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L587	@cond_branch
	b	.L600
.L602:
	.align	2, 0
.L601:
	.word	sSlotMachine
.L598:
.L599:
	mov	r0, #0x2
	strh	r0, [r1, #0x36]
	strh	r5, [r1, #0x30]
.L600:
	mov	r0, #0x1
	b	.L597
.L582:
	ldr	r0, .L603
	ldr	r0, [r0]
	mov	r1, #0x34
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x2
	beq	.L590	@cond_branch
	mov	r5, #0x0
	mov	r6, #0x2
.L594:
	lsl	r0, r5, #0x10
	asr	r4, r0, #0x10
	sub	r1, r6, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	bl	GetTag
	ldr	r1, .L603
	ldr	r1, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r1, #0x7]
	cmp	r0, r2
	beq	.L599	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L594	@cond_branch
.L590:
	mov	r0, #0x0
.L597:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L604:
	.align	2, 0
.L603:
	.word	sSlotMachine
.Lfe97:
	.size	 DecideReelTurns_BiasTag_Reel2_Bet3,.Lfe97-DecideReelTurns_BiasTag_Reel2_Bet3
	.align	2, 0
	.type	 DecideReelTurns_BiasTag_Reel3,function
	.thumb_func
DecideReelTurns_BiasTag_Reel3:
	push	{r4, lr}
	ldr	r2, .L608
	ldr	r0, [r2]
	ldrb	r3, [r0, #0x7]
	add	r4, r3, #0
	ldrb	r1, [r0, #0x4]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L606	@cond_branch
	mov	r3, #0x0
	cmp	r4, #0
	bne	.L606	@cond_branch
	mov	r3, #0x1
.L606:
	ldr	r1, .L608+0x4
	ldr	r0, [r2]
	mov	r2, #0x12
	ldrsh	r0, [r0, r2]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r3, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.L609:
	.align	2, 0
.L608:
	.word	sSlotMachine
	.word	sDecideReelTurns_BiasTag_Reel3_Bets
.Lfe98:
	.size	 DecideReelTurns_BiasTag_Reel3,.Lfe98-DecideReelTurns_BiasTag_Reel3
	.align	2, 0
	.type	 DecideReelTurns_BiasTag_Reel3_Bet1or2,function
	.thumb_func
DecideReelTurns_BiasTag_Reel3_Bet1or2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L618
	ldr	r0, [r0]
	mov	r5, #0x0
	ldrh	r1, [r0, #0x36]
	mov	r8, r1
	mov	r1, #0x36
	ldrsh	r6, [r0, r1]
.L614:
	lsl	r0, r5, #0x10
	asr	r4, r0, #0x10
	sub	r1, r6, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x2
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r7
	bne	.L613	@cond_branch
	ldr	r0, .L618
	ldr	r0, [r0]
	mov	r1, r8
	strh	r1, [r0, #0x38]
	strh	r5, [r0, #0x32]
	mov	r0, #0x1
	b	.L617
.L619:
	.align	2, 0
.L618:
	.word	sSlotMachine
.L613:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L614	@cond_branch
	mov	r0, #0x0
.L617:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe99:
	.size	 DecideReelTurns_BiasTag_Reel3_Bet1or2,.Lfe99-DecideReelTurns_BiasTag_Reel3_Bet1or2
	.align	2, 0
	.type	 DecideReelTurns_BiasTag_Reel3_Bet3,function
	.thumb_func
DecideReelTurns_BiasTag_Reel3_Bet3:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L632
	ldr	r0, [r0]
	mov	r2, #0x34
	ldrsh	r1, [r0, r2]
	mov	r2, #0x36
	ldrsh	r0, [r0, r2]
	cmp	r1, r0
	bne	.L621	@cond_branch
	add	r0, r6, #0
	bl	DecideReelTurns_BiasTag_Reel3_Bet1or2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L630
.L633:
	.align	2, 0
.L632:
	.word	sSlotMachine
.L631:
	ldr	r0, .L634
	ldr	r0, [r0]
	strh	r5, [r0, #0x32]
	mov	r1, r8
	strh	r1, [r0, #0x38]
	mov	r0, #0x1
	b	.L630
.L635:
	.align	2, 0
.L634:
	.word	sSlotMachine
.L621:
	mov	r2, #0x1
	mov	r8, r2
	cmp	r1, #0x1
	bne	.L622	@cond_branch
	mov	r0, #0x3
	mov	r8, r0
.L622:
	mov	r5, #0x0
	mov	r7, r8
.L627:
	lsl	r0, r5, #0x10
	asr	r4, r0, #0x10
	sub	r1, r7, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x2
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r6
	beq	.L631	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L627	@cond_branch
	mov	r0, #0x0
.L630:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe100:
	.size	 DecideReelTurns_BiasTag_Reel3_Bet3,.Lfe100-DecideReelTurns_BiasTag_Reel3_Bet3
	.align	2, 0
	.type	 DecideReelTurns_NoBiasTag_Reel1,function
	.thumb_func
DecideReelTurns_NoBiasTag_Reel1:
	push	{r4, r5, lr}
	mov	r5, #0x0
	b	.L637
.L639:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L637:
	lsl	r0, r5, #0x10
	asr	r4, r0, #0x10
	add	r0, r4, #0
	bl	AreCherriesOnScreen_Reel1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L639	@cond_branch
	ldr	r0, .L641
	ldr	r0, [r0]
	strh	r5, [r0, #0x2e]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L642:
	.align	2, 0
.L641:
	.word	sSlotMachine
.Lfe101:
	.size	 DecideReelTurns_NoBiasTag_Reel1,.Lfe101-DecideReelTurns_NoBiasTag_Reel1
	.align	2, 0
	.type	 IsBiasTag777_SwitchColor,function
	.thumb_func
IsBiasTag777_SwitchColor:
	push	{lr}
	add	r1, r0, #0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L644	@cond_branch
	mov	r0, #0x1
	b	.L647
.L644:
	cmp	r0, #0x1
	beq	.L645	@cond_branch
	mov	r0, #0x0
	b	.L646
.L645:
	mov	r0, #0x0
.L647:
	strb	r0, [r1]
	mov	r0, #0x1
.L646:
	pop	{r1}
	bx	r1
.Lfe102:
	.size	 IsBiasTag777_SwitchColor,.Lfe102-IsBiasTag777_SwitchColor
	.align	2, 0
	.type	 DecideReelTurns_NoBiasTag_Reel2,function
	.thumb_func
DecideReelTurns_NoBiasTag_Reel2:
	push	{lr}
	ldr	r1, .L649
	ldr	r0, .L649+0x4
	ldr	r0, [r0]
	mov	r2, #0x12
	ldrsh	r0, [r0, r2]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r0}
	bx	r0
.L650:
	.align	2, 0
.L649:
	.word	sDecideReelTurns_NoBiasTag_Reel2_Bets
	.word	sSlotMachine
.Lfe103:
	.size	 DecideReelTurns_NoBiasTag_Reel2,.Lfe103-DecideReelTurns_NoBiasTag_Reel2
	.align	2, 0
	.type	 DecideReelTurns_NoBiasTag_Reel2_Bet1,function
	.thumb_func
DecideReelTurns_NoBiasTag_Reel2_Bet1:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L660
	ldr	r2, [r0]
	mov	r1, #0x34
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L652	@cond_branch
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L652	@cond_branch
	ldrh	r0, [r2, #0x2e]
	mov	r1, #0x2
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x0
	bl	GetTag
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, sp
	bl	IsBiasTag777_SwitchColor
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L652	@cond_branch
	mov	r5, #0x0
	mov	r6, sp
	mov	r7, #0x2
.L657:
	lsl	r0, r5, #0x10
	asr	r4, r0, #0x10
	sub	r1, r7, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	bl	GetTag
	ldrb	r1, [r6]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	bne	.L656	@cond_branch
	ldr	r0, .L660
	ldr	r1, [r0]
	mov	r0, #0x2
	strh	r0, [r1, #0x36]
	strh	r5, [r1, #0x30]
	b	.L652
.L661:
	.align	2, 0
.L660:
	.word	sSlotMachine
.L656:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L657	@cond_branch
.L652:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe104:
	.size	 DecideReelTurns_NoBiasTag_Reel2_Bet1,.Lfe104-DecideReelTurns_NoBiasTag_Reel2_Bet1
	.align	2, 0
	.type	 DecideReelTurns_NoBiasTag_Reel2_Bet2,function
	.thumb_func
DecideReelTurns_NoBiasTag_Reel2_Bet2:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L671
	ldr	r2, [r4]
	ldrh	r3, [r2, #0x34]
	mov	r1, #0x34
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L663	@cond_branch
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L663	@cond_branch
	ldrh	r1, [r2, #0x2e]
	sub	r1, r3, r1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x0
	bl	GetTag
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, sp
	bl	IsBiasTag777_SwitchColor
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L663	@cond_branch
	mov	r5, #0x0
	mov	r7, sp
	add	r6, r4, #0
.L668:
	ldr	r0, [r6]
	ldrh	r1, [r0, #0x34]
	lsl	r0, r5, #0x10
	asr	r4, r0, #0x10
	sub	r1, r1, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	bl	GetTag
	ldrb	r1, [r7]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	bne	.L667	@cond_branch
	ldr	r0, [r6]
	ldrh	r1, [r0, #0x34]
	strh	r1, [r0, #0x36]
	strh	r5, [r0, #0x30]
	b	.L663
.L672:
	.align	2, 0
.L671:
	.word	sSlotMachine
.L667:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L668	@cond_branch
.L663:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe105:
	.size	 DecideReelTurns_NoBiasTag_Reel2_Bet2,.Lfe105-DecideReelTurns_NoBiasTag_Reel2_Bet2
	.align	2, 0
	.type	 DecideReelTurns_NoBiasTag_Reel2_Bet3,function
	.thumb_func
DecideReelTurns_NoBiasTag_Reel2_Bet3:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r6, .L701
	ldr	r2, [r6]
	ldrh	r4, [r2, #0x34]
	mov	r0, #0x34
	ldrsh	r3, [r2, r0]
	cmp	r3, #0
	beq	.L673	@cond_branch
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L673	@cond_branch
	cmp	r3, #0x2
	bne	.L675	@cond_branch
	bl	DecideReelTurns_NoBiasTag_Reel2_Bet2
	b	.L673
.L702:
	.align	2, 0
.L701:
	.word	sSlotMachine
.L697:
	ldr	r0, .L703
	ldr	r0, [r0]
	mov	r1, #0x0
	strh	r5, [r0, #0x36]
	strh	r1, [r0, #0x30]
	b	.L673
.L704:
	.align	2, 0
.L703:
	.word	sSlotMachine
.L698:
	mov	r0, #0x2
	strh	r0, [r1, #0x36]
	add	r0, r4, #0x1
	strh	r0, [r1, #0x30]
	b	.L673
.L699:
	mov	r0, #0x3
	b	.L700
.L675:
	ldrh	r1, [r2, #0x2e]
	sub	r1, r4, r1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x0
	bl	GetTag
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, sp
	bl	IsBiasTag777_SwitchColor
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L673	@cond_branch
	mov	r5, #0x2
	ldr	r0, [r6]
	mov	r1, #0x34
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x3
	bne	.L678	@cond_branch
	mov	r5, #0x3
.L678:
	mov	r6, #0x0
	mov	r7, sp
.L682:
	lsl	r0, r5, #0x10
	asr	r4, r0, #0x10
	mov	r0, #0x1
	add	r1, r4, #0
	bl	GetTag
	ldrb	r1, [r7]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	beq	.L697	@cond_branch
	lsl	r1, r6, #0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r1, r1, r2
	sub	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsr	r6, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x1
	ble	.L682	@cond_branch
	mov	r5, #0x1
	mov	r7, sp
	ldr	r6, .L705
.L688:
	ldr	r0, [r6]
	ldrh	r1, [r0, #0x34]
	lsl	r0, r5, #0x10
	asr	r4, r0, #0x10
	sub	r1, r1, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	bl	GetTag
	ldrb	r1, [r7]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	bne	.L687	@cond_branch
	ldr	r1, [r6]
	mov	r2, #0x34
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	bne	.L690	@cond_branch
	cmp	r4, #0x2
	ble	.L698	@cond_branch
.L700:
	strh	r0, [r1, #0x36]
	strh	r5, [r1, #0x30]
	b	.L673
.L706:
	.align	2, 0
.L705:
	.word	sSlotMachine
.L690:
	cmp	r4, #0x2
	ble	.L699	@cond_branch
	mov	r0, #0x2
	strh	r0, [r1, #0x36]
	sub	r0, r4, #0x1
	strh	r0, [r1, #0x30]
	b	.L673
.L687:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L688	@cond_branch
.L673:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe106:
	.size	 DecideReelTurns_NoBiasTag_Reel2_Bet3,.Lfe106-DecideReelTurns_NoBiasTag_Reel2_Bet3
	.align	2, 0
	.type	 AreTagsMixed77,function
	.thumb_func
AreTagsMixed77:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r1, #0
	cmp	r0, #0
	bne	.L710	@cond_branch
	cmp	r1, #0x1
	beq	.L709	@cond_branch
.L710:
	cmp	r0, #0x1
	bne	.L708	@cond_branch
	cmp	r2, #0
	bne	.L708	@cond_branch
.L709:
	mov	r0, #0x1
	b	.L712
.L708:
	mov	r0, #0x0
.L712:
	pop	{r1}
	bx	r1
.Lfe107:
	.size	 AreTagsMixed77,.Lfe107-AreTagsMixed77
	.align	2, 0
	.type	 AreTagsMixed777,function
	.thumb_func
AreTagsMixed777:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r0, #0
	bne	.L716	@cond_branch
	cmp	r1, #0x1
	bne	.L716	@cond_branch
	cmp	r2, #0
	beq	.L715	@cond_branch
.L716:
	cmp	r0, #0x1
	bne	.L714	@cond_branch
	cmp	r1, #0
	bne	.L714	@cond_branch
	cmp	r2, #0x1
	bne	.L714	@cond_branch
.L715:
	mov	r0, #0x1
	b	.L718
.L714:
	mov	r0, #0x0
.L718:
	pop	{r1}
	bx	r1
.Lfe108:
	.size	 AreTagsMixed777,.Lfe108-AreTagsMixed777
	.align	2, 0
	.type	 TagsDontMatchOrHaveAny7s,function
	.thumb_func
TagsDontMatchOrHaveAny7s:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r0, #0
	bne	.L722	@cond_branch
	cmp	r1, #0x1
	bne	.L722	@cond_branch
	cmp	r2, #0
	beq	.L721	@cond_branch
.L722:
	cmp	r0, #0x1
	bne	.L723	@cond_branch
	cmp	r1, #0
	bne	.L723	@cond_branch
	cmp	r2, #0x1
	beq	.L721	@cond_branch
.L723:
	cmp	r0, #0
	bne	.L724	@cond_branch
	cmp	r1, #0
	bne	.L724	@cond_branch
	cmp	r2, #0x1
	beq	.L721	@cond_branch
.L724:
	cmp	r0, #0x1
	bne	.L725	@cond_branch
	cmp	r1, #0x1
	bne	.L725	@cond_branch
	cmp	r2, #0
	beq	.L721	@cond_branch
.L725:
	cmp	r0, r1
	bne	.L720	@cond_branch
	cmp	r0, r2
	bne	.L720	@cond_branch
.L721:
	mov	r0, #0x0
	b	.L726
.L720:
	mov	r0, #0x1
.L726:
	pop	{r1}
	bx	r1
.Lfe109:
	.size	 TagsDontMatchOrHaveAny7s,.Lfe109-TagsDontMatchOrHaveAny7s
	.align	2, 0
	.type	 DecideReelTurns_NoBiasTag_Reel3,function
	.thumb_func
DecideReelTurns_NoBiasTag_Reel3:
	push	{lr}
	ldr	r1, .L728
	ldr	r0, .L728+0x4
	ldr	r0, [r0]
	mov	r2, #0x12
	ldrsh	r0, [r0, r2]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r0}
	bx	r0
.L729:
	.align	2, 0
.L728:
	.word	sDecideReelTurns_NoBiasTag_Reel3_Bets
	.word	sSlotMachine
.Lfe110:
	.size	 DecideReelTurns_NoBiasTag_Reel3,.Lfe110-DecideReelTurns_NoBiasTag_Reel3
	.align	2, 0
	.type	 DecideReelTurns_NoBiasTag_Reel3_Bet1,function
	.thumb_func
DecideReelTurns_NoBiasTag_Reel3_Bet1:
	push	{r4, r5, r6, r7, lr}
	mov	r6, #0x0
	ldr	r7, .L754
	ldr	r0, [r7]
	ldrh	r1, [r0, #0x2e]
	mov	r4, #0x2
	sub	r1, r4, r1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x0
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, [r7]
	ldrh	r0, [r0, #0x30]
	sub	r4, r4, r0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x1
	add	r1, r4, #0
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r5, r1
	bne	.L731	@cond_branch
	mov	r4, #0x2
	b	.L734
.L755:
	.align	2, 0
.L754:
	.word	sSlotMachine
.L735:
	lsl	r0, r6, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	lsr	r6, r0, #0x10
.L734:
	lsl	r1, r6, #0x10
	asr	r1, r1, #0x10
	sub	r1, r4, r1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x2
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	beq	.L735	@cond_branch
	cmp	r5, #0
	bne	.L736	@cond_branch
	cmp	r0, #0x1
	beq	.L735	@cond_branch
.L736:
	cmp	r5, #0x1
	bne	.L739	@cond_branch
	cmp	r0, #0
	beq	.L735	@cond_branch
	b	.L739
.L731:
	add	r0, r5, #0
	bl	AreTagsMixed77
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L739	@cond_branch
	ldr	r0, [r7]
	ldrb	r1, [r0, #0x4]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L741	@cond_branch
	mov	r7, #0x2
.L745:
	lsl	r0, r6, #0x10
	asr	r4, r0, #0x10
	sub	r1, r7, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x2
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	beq	.L739	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L745	@cond_branch
.L741:
	mov	r6, #0x0
	mov	r7, #0x2
	b	.L750
.L751:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L750:
	lsl	r0, r6, #0x10
	asr	r4, r0, #0x10
	sub	r1, r7, r4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x2
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	beq	.L751	@cond_branch
.L739:
	ldr	r0, .L756
	ldr	r0, [r0]
	strh	r6, [r0, #0x32]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L757:
	.align	2, 0
.L756:
	.word	sSlotMachine
.Lfe111:
	.size	 DecideReelTurns_NoBiasTag_Reel3_Bet1,.Lfe111-DecideReelTurns_NoBiasTag_Reel3_Bet1
	.align	2, 0
	.type	 DecideReelTurns_NoBiasTag_Reel3_Bet2,function
	.thumb_func
DecideReelTurns_NoBiasTag_Reel3_Bet2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r4, .L779
	ldr	r2, [r4]
	mov	r5, #0x36
	ldrsh	r1, [r2, r5]
	cmp	r1, #0
	beq	.L759	@cond_branch
	ldrh	r3, [r2, #0x34]
	mov	r5, #0x34
	ldrsh	r0, [r2, r5]
	cmp	r0, r1
	bne	.L759	@cond_branch
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L759	@cond_branch
	ldrh	r1, [r2, #0x2e]
	sub	r1, r3, r1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x0
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x36]
	ldrh	r0, [r0, #0x30]
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r7, #0
	add	r1, r6, #0
	bl	AreTagsMixed77
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L759	@cond_branch
	mov	r5, #0x0
	b	.L761
.L780:
	.align	2, 0
.L779:
	.word	sSlotMachine
.L763:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L761:
	lsl	r6, r5, #0x10
	asr	r5, r6, #0x10
	cmp	r5, #0x4
	bgt	.L759	@cond_branch
	ldr	r0, .L781
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x36]
	sub	r1, r1, r5
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x2
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r7, r4
	bne	.L763	@cond_branch
	lsr	r6, r6, #0x10
	str	r6, [sp]
.L759:
	ldr	r0, .L781
	mov	r9, r0
.L769:
	mov	r5, #0x1
	mov	r1, #0x0
	mov	r8, r1
	ldr	r2, [sp]
	lsl	r2, r2, #0x10
	mov	sl, r2
.L773:
	mov	r1, r9
	ldr	r0, [r1]
	ldrh	r1, [r0, #0x2e]
	lsl	r5, r5, #0x10
	asr	r4, r5, #0x10
	sub	r1, r4, r1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x0
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r2, r9
	ldr	r0, [r2]
	ldrh	r1, [r0, #0x30]
	sub	r1, r4, r1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, sl
	asr	r0, r1, #0x10
	sub	r4, r4, r0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x2
	add	r1, r4, #0
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r7, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	TagsDontMatchOrHaveAny7s
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L772	@cond_branch
	add	r0, r7, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	AreTagsMixed777
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L775	@cond_branch
	mov	r2, r9
	ldr	r0, [r2]
	ldrb	r1, [r0, #0x4]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L772	@cond_branch
.L775:
	mov	r5, r8
	lsl	r0, r5, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	mov	r8, r0
	b	.L771
.L782:
	.align	2, 0
.L781:
	.word	sSlotMachine
.L772:
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r0, r5, r2
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L773	@cond_branch
.L771:
	mov	r5, r8
	cmp	r5, #0
	beq	.L768	@cond_branch
	ldr	r1, [sp]
	lsl	r0, r1, #0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	str	r0, [sp]
	b	.L769
.L768:
	ldr	r0, .L783
	ldr	r0, [r0]
	mov	r5, sp
	ldrh	r5, [r5]
	strh	r5, [r0, #0x32]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L784:
	.align	2, 0
.L783:
	.word	sSlotMachine
.Lfe112:
	.size	 DecideReelTurns_NoBiasTag_Reel3_Bet2,.Lfe112-DecideReelTurns_NoBiasTag_Reel3_Bet2
	.align	2, 0
	.type	 DecideReelTurns_NoBiasTag_Reel3_Bet3,function
	.thumb_func
DecideReelTurns_NoBiasTag_Reel3_Bet3:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	DecideReelTurns_NoBiasTag_Reel3_Bet2
	ldr	r4, .L807
	ldr	r2, [r4]
	mov	r0, #0x36
	ldrsh	r1, [r2, r0]
	cmp	r1, #0
	beq	.L786	@cond_branch
	ldrh	r3, [r2, #0x34]
	mov	r5, #0x34
	ldrsh	r0, [r2, r5]
	cmp	r0, r1
	beq	.L786	@cond_branch
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L786	@cond_branch
	ldrh	r1, [r2, #0x2e]
	sub	r1, r3, r1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x0
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x36]
	ldrh	r0, [r0, #0x30]
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	bl	AreTagsMixed77
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L786	@cond_branch
	mov	r1, #0x1
	ldr	r0, [r4]
	mov	r2, #0x34
	ldrsh	r0, [r0, r2]
	cmp	r0, #0x1
	bne	.L788	@cond_branch
	mov	r1, #0x3
.L788:
	mov	r3, #0x0
	lsl	r1, r1, #0x10
	mov	r8, r1
	add	r7, r4, #0
.L792:
	ldr	r0, [r7]
	ldrh	r2, [r0, #0x32]
	lsl	r0, r3, #0x10
	asr	r5, r0, #0x10
	add	r2, r5, r2
	mov	r0, r8
	asr	r1, r0, #0x10
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x2
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r6, r4
	bne	.L791	@cond_branch
	ldr	r1, [r7]
	ldrh	r0, [r1, #0x32]
	add	r0, r5, r0
	strh	r0, [r1, #0x32]
	b	.L786
.L808:
	.align	2, 0
.L807:
	.word	sSlotMachine
.L791:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L792	@cond_branch
.L786:
	ldr	r7, .L809
.L797:
	ldr	r0, [r7]
	ldrh	r0, [r0, #0x2e]
	mov	r1, #0x1
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x0
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, [r7]
	ldrh	r0, [r0, #0x30]
	mov	r1, #0x2
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, [r7]
	ldrh	r0, [r0, #0x32]
	mov	r1, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x2
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	TagsDontMatchOrHaveAny7s
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L796	@cond_branch
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	AreTagsMixed777
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L798	@cond_branch
	ldr	r0, [r7]
	ldrb	r1, [r0, #0x4]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L796	@cond_branch
.L798:
	ldr	r1, [r7]
	ldrh	r0, [r1, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x32]
	b	.L797
.L810:
	.align	2, 0
.L809:
	.word	sSlotMachine
.L796:
	ldr	r7, .L811
.L803:
	ldr	r0, [r7]
	ldrh	r0, [r0, #0x2e]
	mov	r1, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x0
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, [r7]
	ldrh	r0, [r0, #0x30]
	mov	r1, #0x2
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, [r7]
	ldrh	r0, [r0, #0x32]
	mov	r1, #0x1
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x2
	bl	GetTag
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	TagsDontMatchOrHaveAny7s
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L802	@cond_branch
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	AreTagsMixed777
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L804	@cond_branch
	ldr	r0, [r7]
	ldrb	r1, [r0, #0x4]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L802	@cond_branch
.L804:
	ldr	r1, [r7]
	ldrh	r0, [r1, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x32]
	b	.L803
.L812:
	.align	2, 0
.L811:
	.word	sSlotMachine
.L802:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe113:
	.size	 DecideReelTurns_NoBiasTag_Reel3_Bet3,.Lfe113-DecideReelTurns_NoBiasTag_Reel3_Bet3
	.align	2, 0
	.type	 PressStopReelButton,function
	.thumb_func
PressStopReelButton:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L814
	add	r0, r5, #0
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L814+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x26]
	bl	_call_via_r5
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L815:
	.align	2, 0
.L814:
	.word	Task_PressStopReelButton
	.word	gTasks
.Lfe114:
	.size	 PressStopReelButton,.Lfe114-PressStopReelButton
	.align	2, 0
	.type	 Task_PressStopReelButton,function
	.thumb_func
Task_PressStopReelButton:
	push	{r4, lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L817
	ldr	r2, .L817+0x4
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r4, #0x8
	ldrsh	r2, [r0, r4]
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r2, [r2]
	bl	_call_via_r2
	pop	{r4}
	pop	{r0}
	bx	r0
.L818:
	.align	2, 0
.L817:
	.word	sReelStopButtonFuncs
	.word	gTasks
.Lfe115:
	.size	 Task_PressStopReelButton,.Lfe115-Task_PressStopReelButton
	.align	2, 0
	.type	 StopReelButton_Press,function
	.thumb_func
StopReelButton_Press:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldr	r1, .L820
	mov	r2, #0x26
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x73
	str	r1, [sp]
	mov	r1, #0x62
	mov	r2, #0x63
	mov	r3, #0x72
	bl	SetReelButtonTilemap
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L821:
	.align	2, 0
.L820:
	.word	sReelButtonOffsets
.Lfe116:
	.size	 StopReelButton_Press,.Lfe116-StopReelButton_Press
	.align	2, 0
	.type	 StopReelButton_Wait,function
	.thumb_func
StopReelButton_Wait:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	ble	.L823	@cond_branch
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
.L823:
	pop	{r0}
	bx	r0
.Lfe117:
	.size	 StopReelButton_Wait,.Lfe117-StopReelButton_Wait
	.align	2, 0
	.type	 StopReelButton_Unpress,function
	.thumb_func
StopReelButton_Unpress:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L825
	mov	r2, #0x26
	ldrsh	r0, [r0, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x53
	str	r1, [sp]
	mov	r1, #0x42
	mov	r2, #0x43
	mov	r3, #0x52
	bl	SetReelButtonTilemap
	add	r0, r4, #0
	bl	DestroyTask
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L826:
	.align	2, 0
.L825:
	.word	sReelButtonOffsets
.Lfe118:
	.size	 StopReelButton_Unpress,.Lfe118-StopReelButton_Unpress
	.align	2, 0
	.type	 LightenMatchLine,function
	.thumb_func
LightenMatchLine:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L828
	lsl	r1, r0, #0x2
	add	r1, r1, r2
	ldr	r2, [r1]
	ldr	r1, .L828+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r2, #0
	mov	r2, #0x2
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L829:
	.align	2, 0
.L828:
	.word	sLitMatchLinePalTable
	.word	sMatchLinePalOffsets
.Lfe119:
	.size	 LightenMatchLine,.Lfe119-LightenMatchLine
	.align	2, 0
	.type	 DarkenMatchLine,function
	.thumb_func
DarkenMatchLine:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L831
	lsl	r1, r0, #0x2
	add	r1, r1, r2
	ldr	r2, [r1]
	ldr	r1, .L831+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r2, #0
	mov	r2, #0x2
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L832:
	.align	2, 0
.L831:
	.word	sDarkMatchLinePalTable
	.word	sMatchLinePalOffsets
.Lfe120:
	.size	 DarkenMatchLine,.Lfe120-DarkenMatchLine
	.align	2, 0
	.type	 LightenBetTiles,function
	.thumb_func
LightenBetTiles:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L839
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r4, r0
	bcs	.L835	@cond_branch
	ldr	r7, .L839+0x4
	add	r6, r0, #0
	lsl	r5, r1, #0x1
.L837:
	add	r0, r4, r5
	add	r0, r0, r7
	ldrb	r0, [r0]
	bl	LightenMatchLine
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r6
	bcc	.L837	@cond_branch
.L835:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L840:
	.align	2, 0
.L839:
	.word	sMatchLinesPerBet
	.word	sBetToMatchLineIds
.Lfe121:
	.size	 LightenBetTiles,.Lfe121-LightenBetTiles
	.align	2, 0
	.type	 DarkenBetTiles,function
	.thumb_func
DarkenBetTiles:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L847
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r4, r0
	bcs	.L843	@cond_branch
	ldr	r7, .L847+0x4
	add	r6, r0, #0
	lsl	r5, r1, #0x1
.L845:
	add	r0, r4, r5
	add	r0, r0, r7
	ldrb	r0, [r0]
	bl	DarkenMatchLine
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r6
	bcc	.L845	@cond_branch
.L843:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L848:
	.align	2, 0
.L847:
	.word	sMatchLinesPerBet
	.word	sBetToMatchLineIds
.Lfe122:
	.size	 DarkenBetTiles,.Lfe122-DarkenBetTiles
	.align	2, 0
	.type	 CreateInvisibleFlashMatchLineSprites,function
	.thumb_func
CreateInvisibleFlashMatchLineSprites:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r5, .L855
.L853:
	ldr	r0, .L855+0x4
	bl	CreateInvisibleSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	strh	r4, [r1, #0x2e]
	ldr	r1, .L855+0x8
	ldr	r1, [r1]
	add	r1, r1, #0x44
	add	r1, r1, r4
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x4
	bls	.L853	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L856:
	.align	2, 0
.L855:
	.word	gSprites
	.word	SpriteCB_FlashMatchingLines
	.word	sSlotMachine
.Lfe123:
	.size	 CreateInvisibleFlashMatchLineSprites,.Lfe123-CreateInvisibleFlashMatchLineSprites
	.align	2, 0
	.type	 FlashMatchLine,function
	.thumb_func
FlashMatchLine:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L858
	ldr	r1, [r1]
	add	r1, r1, #0x44
	add	r1, r1, r0
	ldrb	r1, [r1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L858+0x4
	add	r0, r0, r1
	mov	r2, #0x0
	mov	r1, #0x1
	strh	r1, [r0, #0x30]
	mov	r1, #0x4
	strh	r1, [r0, #0x32]
	strh	r2, [r0, #0x34]
	strh	r2, [r0, #0x36]
	mov	r1, #0x2
	strh	r1, [r0, #0x38]
	strh	r2, [r0, #0x3c]
	bx	lr
.L859:
	.align	2, 0
.L858:
	.word	sSlotMachine
	.word	gSprites
.Lfe124:
	.size	 FlashMatchLine,.Lfe124-FlashMatchLine
	.align	2, 0
	.type	 IsMatchLineDoneFlashingBeforePayout,function
	.thumb_func
IsMatchLineDoneFlashingBeforePayout:
	push	{r4, r5, lr}
	mov	r2, #0x0
	ldr	r0, .L868
	ldr	r0, [r0]
	add	r3, r0, #0
	add	r3, r3, #0x44
	ldr	r4, .L868+0x4
.L864:
	add	r0, r3, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r4
	mov	r5, #0x30
	ldrsh	r0, [r1, r5]
	cmp	r0, #0
	beq	.L863	@cond_branch
	mov	r5, #0x32
	ldrsh	r0, [r1, r5]
	cmp	r0, #0
	beq	.L863	@cond_branch
	mov	r0, #0x0
	b	.L867
.L869:
	.align	2, 0
.L868:
	.word	sSlotMachine
	.word	gSprites
.L863:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x4
	bls	.L864	@cond_branch
	mov	r0, #0x1
.L867:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe125:
	.size	 IsMatchLineDoneFlashingBeforePayout,.Lfe125-IsMatchLineDoneFlashingBeforePayout
	.align	2, 0
	.type	 TryStopMatchLinesFlashing,function
	.thumb_func
TryStopMatchLinesFlashing:
	push	{r4, lr}
	mov	r4, #0x0
.L874:
	ldr	r0, .L878
	ldr	r0, [r0]
	add	r0, r0, #0x44
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	TryStopMatchLineFlashing
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L873	@cond_branch
	mov	r0, #0x0
	b	.L877
.L879:
	.align	2, 0
.L878:
	.word	sSlotMachine
.L873:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x4
	bls	.L874	@cond_branch
	mov	r0, #0x1
.L877:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe126:
	.size	 TryStopMatchLinesFlashing,.Lfe126-TryStopMatchLinesFlashing
	.align	2, 0
	.type	 TryStopMatchLineFlashing,function
	.thumb_func
TryStopMatchLineFlashing:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L884
	add	r1, r1, r0
	mov	r2, #0x30
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L881	@cond_branch
	mov	r0, #0x1
	b	.L883
.L885:
	.align	2, 0
.L884:
	.word	gSprites
.L881:
	ldrh	r2, [r1, #0x3c]
	mov	r3, #0x3c
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L882	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
.L882:
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
.L883:
	pop	{r1}
	bx	r1
.Lfe127:
	.size	 TryStopMatchLineFlashing,.Lfe127-TryStopMatchLineFlashing
	.align	2, 0
	.type	 SpriteCB_FlashMatchingLines,function
	.thumb_func
SpriteCB_FlashMatchingLines:
	push	{r4, r5, r6, r7, lr}
	add	r2, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L887	@cond_branch
	ldrh	r0, [r2, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L888	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x3c]
	mov	r6, #0x1
	strh	r6, [r2, #0x34]
	ldrh	r1, [r2, #0x38]
	ldrh	r3, [r2, #0x36]
	add	r0, r1, r3
	strh	r0, [r2, #0x36]
	mov	r4, #0x4
	ldrh	r5, [r2, #0x32]
	mov	r7, #0x32
	ldrsh	r3, [r2, r7]
	cmp	r3, #0
	beq	.L889	@cond_branch
	mov	r4, #0x8
.L889:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L890	@cond_branch
	strh	r6, [r2, #0x3c]
	neg	r0, r1
	strh	r0, [r2, #0x38]
	cmp	r3, #0
	beq	.L888	@cond_branch
	sub	r0, r5, #0x1
	strh	r0, [r2, #0x32]
	b	.L892
.L890:
	cmp	r0, r4
	blt	.L892	@cond_branch
	neg	r0, r1
	strh	r0, [r2, #0x38]
.L892:
	mov	r1, #0x32
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L888	@cond_branch
	ldrh	r0, [r2, #0x34]
	lsl	r0, r0, #0x1
	strh	r0, [r2, #0x34]
.L888:
	ldr	r1, .L895
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldrh	r3, [r2, #0x36]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r1, r3, #0
	add	r2, r3, #0
	bl	MultiplyPaletteRGBComponents
.L887:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L896:
	.align	2, 0
.L895:
	.word	sMatchLinePalOffsets
.Lfe128:
	.size	 SpriteCB_FlashMatchingLines,.Lfe128-SpriteCB_FlashMatchingLines
	.align	2, 0
	.type	 FlashSlotMachineLights,function
	.thumb_func
FlashSlotMachineLights:
	push	{r4, lr}
	ldr	r4, .L898
	add	r0, r4, #0
	mov	r1, #0x6
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L898+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x1
	strh	r2, [r1, #0xe]
	bl	_call_via_r4
	pop	{r4}
	pop	{r0}
	bx	r0
.L899:
	.align	2, 0
.L898:
	.word	Task_FlashSlotMachineLights
	.word	gTasks
.Lfe129:
	.size	 FlashSlotMachineLights,.Lfe129-FlashSlotMachineLights
	.align	2, 0
	.type	 TryStopSlotMachineLights,function
	.thumb_func
TryStopSlotMachineLights:
	push	{lr}
	ldr	r0, .L903
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L903+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L901	@cond_branch
	mov	r0, #0x0
	b	.L902
.L904:
	.align	2, 0
.L903:
	.word	Task_FlashSlotMachineLights
	.word	gTasks
.L901:
	add	r0, r2, #0
	bl	DestroyTask
	ldr	r0, .L905
	ldr	r0, [r0]
	mov	r1, #0x10
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x1
.L902:
	pop	{r1}
	bx	r1
.L906:
	.align	2, 0
.L905:
	.word	sSlotMachineMenu_Pal
.Lfe130:
	.size	 TryStopSlotMachineLights,.Lfe130-TryStopSlotMachineLights
	.align	2, 0
	.type	 Task_FlashSlotMachineLights,function
	.thumb_func
Task_FlashSlotMachineLights:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L911
	add	r2, r1, r0
	ldrh	r0, [r2, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L908	@cond_branch
	mov	r0, #0x4
	strh	r0, [r2, #0xa]
	ldrh	r1, [r2, #0xe]
	ldrh	r3, [r2, #0xc]
	add	r0, r1, r3
	strh	r0, [r2, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L910	@cond_branch
	cmp	r0, #0x2
	bne	.L908	@cond_branch
.L910:
	neg	r0, r1
	strh	r0, [r2, #0xe]
.L908:
	ldr	r0, .L911+0x4
	mov	r3, #0xc
	ldrsh	r1, [r2, r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r1, #0x10
	mov	r2, #0x20
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L912:
	.align	2, 0
.L911:
	.word	gTasks
	.word	sFlashingLightsPalTable
.Lfe131:
	.size	 Task_FlashSlotMachineLights,.Lfe131-Task_FlashSlotMachineLights
	.align	2, 0
	.type	 CreatePikaPowerBoltTask,function
	.thumb_func
CreatePikaPowerBoltTask:
	push	{lr}
	ldr	r0, .L914
	mov	r1, #0x8
	bl	CreateTask
	ldr	r1, .L914+0x4
	ldr	r1, [r1]
	add	r1, r1, #0x3e
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L915:
	.align	2, 0
.L914:
	.word	Task_CreatePikaPowerBolt
	.word	sSlotMachine
.Lfe132:
	.size	 CreatePikaPowerBoltTask,.Lfe132-CreatePikaPowerBoltTask
	.align	2, 0
	.type	 AddPikaPowerBolt,function
	.thumb_func
AddPikaPowerBolt:
	push	{r4, lr}
	ldr	r0, .L917
	ldr	r0, [r0]
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L917+0x4
	add	r4, r4, r0
	add	r0, r4, #0
	bl	ResetPikaPowerBoltTask
	mov	r1, #0x1
	strh	r1, [r4, #0x8]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	strh	r1, [r4, #0x26]
	pop	{r4}
	pop	{r0}
	bx	r0
.L918:
	.align	2, 0
.L917:
	.word	sSlotMachine
	.word	gTasks
.Lfe133:
	.size	 AddPikaPowerBolt,.Lfe133-AddPikaPowerBolt
	.align	2, 0
	.type	 ResetPikaPowerBolts,function
	.thumb_func
ResetPikaPowerBolts:
	push	{r4, lr}
	ldr	r0, .L920
	ldr	r0, [r0]
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L920+0x4
	add	r4, r4, r0
	add	r0, r4, #0
	bl	ResetPikaPowerBoltTask
	mov	r0, #0x3
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
	strh	r0, [r4, #0x26]
	pop	{r4}
	pop	{r0}
	bx	r0
.L921:
	.align	2, 0
.L920:
	.word	sSlotMachine
	.word	gTasks
.Lfe134:
	.size	 ResetPikaPowerBolts,.Lfe134-ResetPikaPowerBolts
	.align	2, 0
	.type	 IsPikaPowerBoltAnimating,function
	.thumb_func
IsPikaPowerBoltAnimating:
	ldr	r2, .L923
	ldr	r0, .L923+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.L924:
	.align	2, 0
.L923:
	.word	gTasks
	.word	sSlotMachine
.Lfe135:
	.size	 IsPikaPowerBoltAnimating,.Lfe135-IsPikaPowerBoltAnimating
	.align	2, 0
	.type	 Task_CreatePikaPowerBolt,function
	.thumb_func
Task_CreatePikaPowerBolt:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L926
	ldr	r2, .L926+0x4
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r2, #0x8
	ldrsh	r1, [r0, r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r1, [r1]
	bl	_call_via_r1
	pop	{r0}
	bx	r0
.L927:
	.align	2, 0
.L926:
	.word	sPikaPowerBoltFuncs
	.word	gTasks
.Lfe136:
	.size	 Task_CreatePikaPowerBolt,.Lfe136-Task_CreatePikaPowerBolt
	.align	2, 0
	.type	 PikaPowerBolt_Idle,function
	.thumb_func
PikaPowerBolt_Idle:
	bx	lr
.Lfe137:
	.size	 PikaPowerBolt_Idle,.Lfe137-PikaPowerBolt_Idle
	.align	2, 0
	.type	 PikaPowerBolt_AddBolt,function
	.thumb_func
PikaPowerBolt_AddBolt:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0xa]
	lsl	r0, r0, #0x13
	mov	r1, #0xa0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	asr	r0, r0, #0x10
	mov	r1, #0x14
	bl	CreatePikaPowerBoltSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe138:
	.size	 PikaPowerBolt_AddBolt,.Lfe138-PikaPowerBolt_AddBolt
	.align	2, 0
	.type	 PikaPowerBolt_WaitAnim,function
	.thumb_func
PikaPowerBolt_WaitAnim:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r2, .L935
	mov	r0, #0xc
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3c
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L931	@cond_branch
	ldrh	r1, [r4, #0xa]
	add	r0, r1, #0x2
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r3, #0x0
	mov	r2, #0x0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x1
	bne	.L932	@cond_branch
	mov	r3, #0x1
	mov	r2, #0x1
	b	.L933
.L936:
	.align	2, 0
.L935:
	.word	gSprites
.L932:
	cmp	r1, #0x10
	bne	.L933	@cond_branch
	mov	r3, #0x2
	mov	r2, #0x2
.L933:
	ldr	r0, .L937
	ldr	r0, [r0]
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldr	r2, .L937+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	lsl	r3, r5, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	add	r3, r3, r0
	lsr	r3, r3, #0x10
	mov	r0, #0x2
	mov	r2, #0x2
	bl	LoadBgTilemap
	ldrb	r0, [r4, #0xc]
	bl	DestroyPikaPowerBoltSprite
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0x26]
.L931:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L938:
	.align	2, 0
.L937:
	.word	sSelectedPikaPowerTile
	.word	sPikaPowerTileTable
.Lfe139:
	.size	 PikaPowerBolt_WaitAnim,.Lfe139-PikaPowerBolt_WaitAnim
	.align	2, 0
	.type	 PikaPowerBolt_ClearAll,function
	.thumb_func
PikaPowerBolt_ClearAll:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0xa]
	add	r0, r1, #0x2
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r3, #0x0
	mov	r2, #0x3
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x1
	bne	.L940	@cond_branch
	mov	r3, #0x1
	mov	r2, #0x1
	b	.L941
.L940:
	cmp	r1, #0x10
	bne	.L941	@cond_branch
	mov	r3, #0x2
	mov	r2, #0x2
.L941:
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L943	@cond_branch
	ldr	r0, .L946
	ldr	r0, [r0]
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldr	r0, .L946+0x4
	lsl	r2, r3, #0x2
	add	r0, r0, #0x2
	add	r2, r2, r0
	ldrh	r0, [r2]
	strh	r0, [r1]
	lsl	r3, r5, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	add	r3, r3, r0
	lsr	r3, r3, #0x10
	mov	r0, #0x2
	mov	r2, #0x2
	bl	LoadBgTilemap
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
.L943:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L944	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xc]
.L944:
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L945	@cond_branch
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0x26]
.L945:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L947:
	.align	2, 0
.L946:
	.word	sSelectedPikaPowerTile
	.word	sPikaPowerTileTable
.Lfe140:
	.size	 PikaPowerBolt_ClearAll,.Lfe140-PikaPowerBolt_ClearAll
	.align	2, 0
	.type	 ResetPikaPowerBoltTask,function
	.thumb_func
ResetPikaPowerBoltTask:
	push	{lr}
	mov	r1, #0x2
	add	r2, r0, #0
	add	r2, r2, #0x8
	mov	r3, #0x0
.L952:
	lsl	r0, r1, #0x1
	add	r0, r2, r0
	strh	r3, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xf
	bls	.L952	@cond_branch
	pop	{r0}
	bx	r0
.Lfe141:
	.size	 ResetPikaPowerBoltTask,.Lfe141-ResetPikaPowerBoltTask
	.align	2, 0
	.type	 LoadPikaPowerMeter,function
	.thumb_func
LoadPikaPowerMeter:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x3
	mov	r5, #0x0
	cmp	r5, r6
	bge	.L956	@cond_branch
	ldr	r7, .L972
.L958:
	mov	r3, #0x0
	mov	r1, #0x0
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L959	@cond_branch
	mov	r3, #0x1
	mov	r1, #0x1
	b	.L960
.L973:
	.align	2, 0
.L972:
	.word	sPikaPowerTileTable
.L959:
	cmp	r0, #0xf
	bne	.L960	@cond_branch
	mov	r3, #0x2
	mov	r1, #0x2
.L960:
	ldr	r0, .L974
	ldr	r0, [r0]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	lsl	r0, r3, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	strh	r0, [r1]
	lsl	r3, r4, #0x10
	asr	r4, r3, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	add	r3, r3, r0
	lsr	r3, r3, #0x10
	mov	r0, #0x2
	mov	r2, #0x2
	bl	LoadBgTilemap
	lsl	r0, r5, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	add	r4, r4, #0x1
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r6
	blt	.L958	@cond_branch
.L956:
	lsl	r2, r5, #0x10
	asr	r0, r2, #0x10
	cmp	r0, #0xf
	bgt	.L971	@cond_branch
	ldr	r7, .L974+0x4
.L966:
	mov	r3, #0x0
	mov	r1, #0x3
	asr	r0, r2, #0x10
	cmp	r0, #0
	bne	.L967	@cond_branch
	mov	r3, #0x1
	mov	r1, #0x1
	b	.L968
.L975:
	.align	2, 0
.L974:
	.word	sSelectedPikaPowerTile
	.word	sPikaPowerTileTable+0x2
.L967:
	cmp	r0, #0xf
	bne	.L968	@cond_branch
	mov	r3, #0x2
	mov	r1, #0x2
.L968:
	ldr	r0, .L976
	ldr	r0, [r0]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	lsl	r0, r3, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	strh	r0, [r1]
	lsl	r3, r4, #0x10
	asr	r4, r3, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	add	r3, r3, r0
	lsr	r3, r3, #0x10
	mov	r0, #0x2
	mov	r2, #0x2
	bl	LoadBgTilemap
	lsl	r0, r5, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	lsr	r5, r0, #0x10
	add	r4, r4, #0x1
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r2, r5, #0x10
	asr	r0, r2, #0x10
	cmp	r0, #0xf
	ble	.L966	@cond_branch
.L971:
	ldr	r2, .L976+0x4
	ldr	r0, .L976+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	strh	r6, [r0, #0xa]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L977:
	.align	2, 0
.L976:
	.word	sSelectedPikaPowerTile
	.word	gTasks
	.word	sSlotMachine
.Lfe142:
	.size	 LoadPikaPowerMeter,.Lfe142-LoadPikaPowerMeter
	.align	2, 0
	.type	 BeginReelTime,function
	.thumb_func
BeginReelTime:
	push	{r4, lr}
	ldr	r4, .L979
	add	r0, r4, #0
	mov	r1, #0x7
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	_call_via_r4
	pop	{r4}
	pop	{r0}
	bx	r0
.L980:
	.align	2, 0
.L979:
	.word	Task_ReelTime
.Lfe143:
	.size	 BeginReelTime,.Lfe143-BeginReelTime
	.align	2, 0
	.type	 IsReelTimeTaskDone,function
	.thumb_func
IsReelTimeTaskDone:
	push	{lr}
	ldr	r0, .L984
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L982	@cond_branch
	mov	r0, #0x0
	b	.L983
.L985:
	.align	2, 0
.L984:
	.word	Task_ReelTime
.L982:
	mov	r0, #0x1
.L983:
	pop	{r1}
	bx	r1
.Lfe144:
	.size	 IsReelTimeTaskDone,.Lfe144-IsReelTimeTaskDone
	.align	2, 0
	.type	 Task_ReelTime,function
	.thumb_func
Task_ReelTime:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L987
	ldr	r2, .L987+0x4
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r2, #0x8
	ldrsh	r1, [r0, r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r1, [r1]
	bl	_call_via_r1
	pop	{r0}
	bx	r0
.L988:
	.align	2, 0
.L987:
	.word	sReelTimeActions
	.word	gTasks
.Lfe145:
	.size	 Task_ReelTime,.Lfe145-Task_ReelTime
	.align	2, 0
	.type	 ReelTime_Init,function
	.thumb_func
ReelTime_Init:
	push	{lr}
	ldr	r3, .L990
	ldr	r1, [r3]
	mov	r2, #0x0
	strb	r2, [r1, #0xa]
	ldr	r1, [r3]
	strh	r2, [r1, #0x14]
	strh	r2, [r1, #0x16]
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	strh	r2, [r0, #0xa]
	mov	r1, #0x1e
	strh	r1, [r0, #0xc]
	mov	r1, #0xa0
	lsl	r1, r1, #0x3
	strh	r1, [r0, #0x10]
	ldr	r0, .L990+0x4
	strh	r2, [r0]
	ldr	r0, .L990+0x8
	strh	r2, [r0]
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x16
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1e
	mov	r1, #0x0
	bl	LoadReelTimeWindowTilemap
	bl	CreateReelTimeMachineSprites
	bl	CreateReelTimePikachuSprite
	bl	CreateReelTimeNumberSprites
	bl	CreateReelTimeShadowSprites
	bl	CreateReelTimeNumberGapSprite
	bl	GetReeltimeDraw
	bl	StopMapMusic
	mov	r0, #0xc4
	lsl	r0, r0, #0x1
	bl	PlayNewMapMusic
	pop	{r0}
	bx	r0
.L991:
	.align	2, 0
.L990:
	.word	sSlotMachine
	.word	gSpriteCoordOffsetX
	.word	gSpriteCoordOffsetY
.Lfe146:
	.size	 ReelTime_Init,.Lfe146-ReelTime_Init
	.align	2, 0
	.type	 ReelTime_WindowEnter,function
	.thumb_func
ReelTime_WindowEnter:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r1, .L995
	ldrh	r0, [r1]
	sub	r0, r0, #0x8
	strh	r0, [r1]
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x8
	strh	r1, [r4, #0xa]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0xf0
	mov	r2, #0xff
	and	r0, r0, r2
	lsr	r5, r0, #0x3
	ldr	r0, .L995+0x4
	and	r1, r1, r0
	mov	r0, #0x14
	bl	SetGpuReg
	add	r2, r5, #0
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r2, r0
	beq	.L993	@cond_branch
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x12
	bgt	.L993	@cond_branch
	strh	r5, [r4, #0xc]
	ldrh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r4, #0xe]
	mov	r0, #0xe
	ldrsh	r1, [r4, r0]
	add	r0, r2, #0
	bl	LoadReelTimeWindowTilemap
.L993:
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xc7
	ble	.L994	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x8]
	strh	r1, [r4, #0xe]
.L994:
	ldrh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	bl	AdvanceReeltimeReel
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L996:
	.align	2, 0
.L995:
	.word	gSpriteCoordOffsetX
	.word	0x1ff
.Lfe147:
	.size	 ReelTime_WindowEnter,.Lfe147-ReelTime_WindowEnter
	.align	2, 0
	.type	 ReelTime_WaitStartPikachu,function
	.thumb_func
ReelTime_WaitStartPikachu:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	bl	AdvanceReeltimeReel
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3b
	ble	.L998	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	bl	CreateReelTimeBoltSprites
	bl	CreateReelTimePikachuAuraSprites
.L998:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe148:
	.size	 ReelTime_WaitStartPikachu,.Lfe148-ReelTime_WaitStartPikachu
	.align	2, 0
	.type	 ReelTime_PikachuSpeedUp1,function
	.thumb_func
ReelTime_PikachuSpeedUp1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	add	r7, r0, #0
	ldr	r1, .L1001
	mov	r0, sp
	mov	r2, #0x4
	bl	memcpy
	add	r0, sp, #0x4
	mov	r8, r0
	ldr	r1, .L1001+0x4
	mov	r2, #0x8
	bl	memcpy
	add	r6, sp, #0xc
	ldr	r1, .L1001+0x8
	add	r0, r6, #0
	mov	r2, #0x8
	bl	memcpy
	ldrh	r0, [r7, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	bl	AdvanceReeltimeReel
	ldrh	r0, [r7, #0x10]
	sub	r0, r0, #0x4
	strh	r0, [r7, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	mov	r5, #0x4
	sub	r5, r5, r0
	lsl	r4, r5, #0x1
	add	r8, r8, r4
	mov	r1, r8
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	bl	SetReelTimeBoltDelay
	add	r6, r6, r4
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	bl	SetReelTimePikachuAuraFlashDelay
	ldr	r0, .L1001+0xc
	ldr	r0, [r0]
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1001+0x10
	add	r0, r0, r1
	mov	r2, sp
	add	r1, r2, r5
	ldrb	r1, [r1]
	bl	StartSpriteAnimIfDifferent
	mov	r1, #0x10
	ldrsh	r0, [r7, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bgt	.L1000	@cond_branch
	ldrh	r0, [r7, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x8]
	strh	r1, [r7, #0x10]
	mov	r0, #0x0
	strh	r0, [r7, #0x12]
.L1000:
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1002:
	.align	2, 0
.L1001:
	.word	sReelTimePikachuAnimIds
	.word	sReelTimeBoltDelays
	.word	sPikachuAuraFlashDelays
	.word	sSlotMachine
	.word	gSprites
.Lfe149:
	.size	 ReelTime_PikachuSpeedUp1,.Lfe149-ReelTime_PikachuSpeedUp1
	.align	2, 0
	.type	 ReelTime_PikachuSpeedUp2,function
	.thumb_func
ReelTime_PikachuSpeedUp2:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	bl	AdvanceReeltimeReel
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4f
	ble	.L1004	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	strh	r0, [r4, #0x12]
	mov	r0, #0x2
	bl	SetReelTimePikachuAuraFlashDelay
	ldr	r0, .L1005
	ldr	r0, [r0]
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1005+0x4
	add	r0, r0, r1
	mov	r1, #0x3
	bl	StartSpriteAnimIfDifferent
.L1004:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1006:
	.align	2, 0
.L1005:
	.word	sSlotMachine
	.word	gSprites
.Lfe150:
	.size	 ReelTime_PikachuSpeedUp2,.Lfe150-ReelTime_PikachuSpeedUp2
	.align	2, 0
	.type	 ReelTime_WaitReel,function
	.thumb_func
ReelTime_WaitReel:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	bl	AdvanceReeltimeReel
	ldrb	r0, [r4, #0x10]
	add	r0, r0, #0x80
	strh	r0, [r4, #0x10]
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4f
	ble	.L1008	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	strh	r0, [r4, #0x12]
.L1008:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe151:
	.size	 ReelTime_WaitReel,.Lfe151-ReelTime_WaitReel
	.align	2, 0
	.type	 ReelTime_CheckExplode,function
	.thumb_func
ReelTime_CheckExplode:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	bl	AdvanceReeltimeReel
	ldrb	r0, [r4, #0x10]
	add	r0, r0, #0x40
	strh	r0, [r4, #0x10]
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x27
	ble	.L1010	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x12]
	ldr	r0, .L1018
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x5]
	cmp	r0, #0
	beq	.L1011	@cond_branch
	ldrb	r1, [r1, #0xa]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bgt	.L1013	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	b	.L1017
.L1019:
	.align	2, 0
.L1018:
	.word	sSlotMachine
.L1011:
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x3
	ble	.L1014	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	b	.L1017
.L1014:
	ldrh	r0, [r4, #0x14]
	bl	ShouldReelTimeMachineExplode
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1013	@cond_branch
	mov	r0, #0xe
.L1017:
	strh	r0, [r4, #0x8]
.L1013:
	ldrh	r0, [r4, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x14]
.L1010:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe152:
	.size	 ReelTime_CheckExplode,.Lfe152-ReelTime_CheckExplode
	.align	2, 0
	.type	 ReelTime_LandOnOutcome,function
	.thumb_func
ReelTime_LandOnOutcome:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L1026
	ldr	r0, [r6]
	mov	r1, #0x14
	ldrsh	r0, [r0, r1]
	mov	r1, #0x14
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r0, #0
	beq	.L1021	@cond_branch
	ldrh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	bl	AdvanceReeltimeReelToNextTag
	b	.L1025
.L1027:
	.align	2, 0
.L1026:
	.word	sSlotMachine
.L1021:
	mov	r0, #0x1
	bl	GetNearbyReelTimeTag
	ldr	r1, [r6]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1, #0x5]
	cmp	r0, r1
	beq	.L1022	@cond_branch
	ldrh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	bl	AdvanceReeltimeReel
	ldr	r0, [r6]
	mov	r1, #0x14
	ldrsh	r0, [r0, r1]
	mov	r1, #0x14
	bl	__modsi3
.L1025:
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrb	r0, [r4, #0x10]
	add	r0, r0, #0x40
	strh	r0, [r4, #0x10]
.L1022:
	lsl	r0, r5, #0x10
	asr	r5, r0, #0x10
	cmp	r5, #0
	bne	.L1024	@cond_branch
	mov	r0, #0x1
	bl	GetNearbyReelTimeTag
	ldr	r1, .L1028
	ldr	r1, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1, #0x5]
	cmp	r0, r1
	bne	.L1024	@cond_branch
	strh	r5, [r4, #0x10]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L1024:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1029:
	.align	2, 0
.L1028:
	.word	sSlotMachine
.Lfe153:
	.size	 ReelTime_LandOnOutcome,.Lfe153-ReelTime_LandOnOutcome
	.align	2, 0
	.type	 ReelTime_PikachuReact,function
	.thumb_func
ReelTime_PikachuReact:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	mov	r6, #0x0
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3b
	ble	.L1031	@cond_branch
	bl	StopMapMusic
	bl	DestroyReelTimeBoltSprites
	bl	DestroyReelTimePikachuAuraSprites
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	ldr	r5, .L1035
	ldr	r1, [r5]
	ldrb	r0, [r1, #0x5]
	cmp	r0, #0
	bne	.L1032	@cond_branch
	mov	r0, #0xa0
	strh	r0, [r4, #0x10]
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1035+0x4
	add	r0, r0, r1
	mov	r1, #0x5
	bl	StartSpriteAnimIfDifferent
	ldr	r0, .L1035+0x8
	bl	PlayFanfare
	b	.L1031
.L1036:
	.align	2, 0
.L1035:
	.word	sSlotMachine
	.word	gSprites
	.word	0x187
.L1032:
	mov	r0, #0xc0
	strh	r0, [r4, #0x10]
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L1037
	add	r0, r0, r4
	mov	r1, #0x4
	bl	StartSpriteAnimIfDifferent
	ldr	r0, [r5]
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x2b
	strb	r6, [r0]
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L1034	@cond_branch
	bl	ResetPikaPowerBolts
	ldr	r0, [r5]
	strb	r6, [r0, #0x2]
.L1034:
	mov	r0, #0xc3
	lsl	r0, r0, #0x1
	bl	PlayFanfare
.L1031:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1038:
	.align	2, 0
.L1037:
	.word	gSprites
.Lfe154:
	.size	 ReelTime_PikachuReact,.Lfe154-ReelTime_PikachuReact
	.align	2, 0
	.type	 ReelTime_WaitClearPikaPower,function
	.thumb_func
ReelTime_WaitClearPikaPower:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L1041	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1040	@cond_branch
.L1041:
	bl	IsPikaPowerBoltAnimating
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1040	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L1040:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe155:
	.size	 ReelTime_WaitClearPikaPower,.Lfe155-ReelTime_WaitClearPikaPower
	.align	2, 0
	.type	 ReelTime_CloseWindow,function
	.thumb_func
ReelTime_CloseWindow:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r1, .L1045
	ldrh	r0, [r1]
	sub	r0, r0, #0x8
	strh	r0, [r1]
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x8
	strh	r1, [r4, #0xa]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x8
	strh	r0, [r4, #0xe]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	sub	r0, r0, #0x8
	mov	r2, #0xff
	and	r0, r0, r2
	lsr	r5, r0, #0x3
	ldr	r0, .L1045+0x4
	and	r1, r1, r0
	mov	r0, #0x14
	bl	SetGpuReg
	ldrh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	cmp	r0, #0x19
	bgt	.L1043	@cond_branch
	add	r0, r5, #0
	bl	ClearReelTimeWindowTilemap
	b	.L1044
.L1046:
	.align	2, 0
.L1045:
	.word	gSpriteCoordOffsetX
	.word	0x1ff
.L1043:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L1044:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe156:
	.size	 ReelTime_CloseWindow,.Lfe156-ReelTime_CloseWindow
	.align	2, 0
	.type	 ReelTime_DestroySprites,function
	.thumb_func
ReelTime_DestroySprites:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r4, .L1050
	ldr	r0, [r4]
	mov	r6, #0x0
	strb	r6, [r0, #0xb]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x5]
	strb	r0, [r1, #0xa]
	ldr	r0, .L1050+0x4
	strh	r6, [r0]
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, [r4]
	mov	r0, #0x8
	strh	r0, [r1, #0x1a]
	bl	DestroyReelTimePikachuSprite
	bl	DestroyReelTimeMachineSprites
	bl	DestroyReelTimeShadowSprites
	ldr	r0, [r4]
	add	r0, r0, #0x60
	ldrh	r0, [r0]
	bl	PlayNewMapMusic
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	bne	.L1048	@cond_branch
	ldr	r0, .L1050+0x8
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	b	.L1049
.L1051:
	.align	2, 0
.L1050:
	.word	sSlotMachine
	.word	gSpriteCoordOffsetX
	.word	Task_ReelTime
.L1048:
	mov	r0, #0x4
	bl	CreateDigitalDisplayScene
	bl	SlowReelSpeed
	strh	r0, [r5, #0xa]
	strh	r6, [r5, #0xc]
	strh	r6, [r5, #0xe]
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
.L1049:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe157:
	.size	 ReelTime_DestroySprites,.Lfe157-ReelTime_DestroySprites
	.align	2, 0
	.type	 ReelTime_SetReelIncrement,function
	.thumb_func
ReelTime_SetReelIncrement:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, .L1056
	ldr	r5, [r0]
	mov	r0, #0x1a
	ldrsh	r1, [r5, r0]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L1053	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1054
.L1057:
	.align	2, 0
.L1056:
	.word	sSlotMachine
.L1053:
	mov	r1, #0x1c
	ldrsh	r0, [r5, r1]
	mov	r1, #0x18
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1054	@cond_branch
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1054	@cond_branch
	ldrh	r0, [r5, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x11
	strh	r0, [r5, #0x1a]
.L1054:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe158:
	.size	 ReelTime_SetReelIncrement,.Lfe158-ReelTime_SetReelIncrement
	.align	2, 0
	.type	 ReelTime_EndSuccess,function
	.thumb_func
ReelTime_EndSuccess:
	push	{lr}
	bl	IsDigitalDisplayAnimFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1059	@cond_branch
	ldr	r0, .L1060
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L1059:
	pop	{r0}
	bx	r0
.L1061:
	.align	2, 0
.L1060:
	.word	Task_ReelTime
.Lfe159:
	.size	 ReelTime_EndSuccess,.Lfe159-ReelTime_EndSuccess
	.align	2, 0
	.type	 ReelTime_ExplodeMachine,function
	.thumb_func
ReelTime_ExplodeMachine:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	DestroyReelTimeMachineSprites
	bl	DestroyReelTimeBoltSprites
	bl	DestroyReelTimePikachuAuraSprites
	bl	CreateReelTimeExplosionSprite
	ldr	r5, .L1063
	ldr	r3, .L1063+0x4
	ldr	r0, [r3]
	add	r0, r0, #0x4e
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, [r3]
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x5
	bl	StartSpriteAnimIfDifferent
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x8]
	mov	r0, #0x4
	strh	r0, [r4, #0x10]
	strh	r1, [r4, #0x12]
	bl	StopMapMusic
	ldr	r0, .L1063+0x8
	bl	PlayFanfare
	mov	r0, #0xb2
	bl	PlaySE
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1064:
	.align	2, 0
.L1063:
	.word	gSprites
	.word	sSlotMachine
	.word	0x187
.Lfe160:
	.size	 ReelTime_ExplodeMachine,.Lfe160-ReelTime_ExplodeMachine
	.align	2, 0
	.type	 ReelTime_WaitExplode,function
	.thumb_func
ReelTime_WaitExplode:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r1, .L1069
	ldrh	r0, [r4, #0x10]
	strh	r0, [r1]
	ldrh	r1, [r4, #0x10]
	mov	r0, #0x16
	bl	SetGpuReg
	ldrh	r1, [r4, #0x12]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1066	@cond_branch
	ldrh	r0, [r4, #0x10]
	neg	r0, r0
	strh	r0, [r4, #0x10]
.L1066:
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	mov	r1, #0x1f
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1067	@cond_branch
	ldrh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x11
	strh	r0, [r4, #0x10]
.L1067:
	mov	r0, #0x10
	ldrsh	r5, [r4, r0]
	cmp	r5, #0
	bne	.L1068	@cond_branch
	bl	DestroyReelTimeExplosionSprite
	bl	CreateReelTimeDuckSprites
	bl	CreateBrokenReelTimeMachineSprite
	bl	CreateReelTimeSmokeSprite
	ldr	r2, .L1069+0x4
	ldr	r0, .L1069+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x4e
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	strh	r5, [r4, #0x12]
.L1068:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1070:
	.align	2, 0
.L1069:
	.word	gSpriteCoordOffsetY
	.word	gSprites
	.word	sSlotMachine
.Lfe161:
	.size	 ReelTime_WaitExplode,.Lfe161-ReelTime_WaitExplode
	.align	2, 0
	.type	 ReelTime_WaitSmoke,function
	.thumb_func
ReelTime_WaitSmoke:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L1073
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r0, #0x16
	mov	r1, #0x0
	bl	SetGpuReg
	bl	IsReelTimeSmokeAnimFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1072	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	bl	DestroyReelTimeSmokeSprite
.L1072:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1074:
	.align	2, 0
.L1073:
	.word	gSpriteCoordOffsetY
.Lfe162:
	.size	 ReelTime_WaitSmoke,.Lfe162-ReelTime_WaitSmoke
	.align	2, 0
	.type	 ReelTime_EndFailure,function
	.thumb_func
ReelTime_EndFailure:
	push	{lr}
	ldr	r1, .L1076
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L1076+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x60
	ldrh	r0, [r0]
	bl	PlayNewMapMusic
	bl	DestroyReelTimePikachuSprite
	bl	DestroyBrokenReelTimeMachineSprite
	bl	DestroyReelTimeShadowSprites
	bl	DestroyReelTimeDuckSprites
	ldr	r0, .L1076+0x8
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	pop	{r0}
	bx	r0
.L1077:
	.align	2, 0
.L1076:
	.word	gSpriteCoordOffsetX
	.word	sSlotMachine
	.word	Task_ReelTime
.Lfe163:
	.size	 ReelTime_EndFailure,.Lfe163-ReelTime_EndFailure
	.align	2, 0
	.type	 LoadReelTimeWindowTilemap,function
	.thumb_func
LoadReelTimeWindowTilemap:
	push	{r4, r5, r6, lr}
	mov	r2, #0x4
	lsl	r1, r1, #0x10
	asr	r6, r1, #0x10
	lsl	r0, r0, #0x10
	asr	r5, r0, #0x10
.L1082:
	lsl	r4, r2, #0x10
	asr	r4, r4, #0x10
	sub	r0, r4, #0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r6, r1
	lsl	r1, r1, #0x1
	ldr	r0, .L1084
	add	r1, r1, r0
	lsl	r3, r4, #0x5
	add	r3, r5, r3
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x1
	mov	r2, #0x2
	bl	LoadBgTilemap
	add	r4, r4, #0x1
	lsl	r4, r4, #0x10
	lsr	r2, r4, #0x10
	asr	r4, r4, #0x10
	cmp	r4, #0xe
	ble	.L1082	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1085:
	.align	2, 0
.L1084:
	.word	sReelTimeWindow_Tilemap
.Lfe164:
	.size	 LoadReelTimeWindowTilemap,.Lfe164-LoadReelTimeWindowTilemap
	.align	2, 0
	.type	 ClearReelTimeWindowTilemap,function
	.thumb_func
ClearReelTimeWindowTilemap:
	push	{r4, r5, lr}
	mov	r4, #0x4
	lsl	r0, r0, #0x10
	asr	r5, r0, #0x10
.L1090:
	lsl	r3, r4, #0x5
	add	r3, r5, r3
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x1
	ldr	r1, .L1092
	mov	r2, #0x2
	bl	LoadBgTilemap
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xe
	bls	.L1090	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1093:
	.align	2, 0
.L1092:
	.word	sEmptyTilemap
.Lfe165:
	.size	 ClearReelTimeWindowTilemap,.Lfe165-ClearReelTimeWindowTilemap
	.align	2, 0
	.type	 OpenInfoBox,function
	.thumb_func
OpenInfoBox:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L1095
	add	r0, r5, #0
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1095+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0xa]
	bl	_call_via_r5
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1096:
	.align	2, 0
.L1095:
	.word	RunInfoBoxActions
	.word	gTasks
.Lfe166:
	.size	 OpenInfoBox,.Lfe166-OpenInfoBox
	.align	2, 0
	.type	 IsInfoBoxClosed,function
	.thumb_func
IsInfoBoxClosed:
	push	{lr}
	ldr	r0, .L1101
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1098	@cond_branch
	mov	r0, #0x0
	b	.L1100
.L1102:
	.align	2, 0
.L1101:
	.word	RunInfoBoxActions
.L1098:
	mov	r0, #0x1
.L1100:
	pop	{r1}
	bx	r1
.Lfe167:
	.size	 IsInfoBoxClosed,.Lfe167-IsInfoBoxClosed
	.align	2, 0
	.type	 RunInfoBoxActions,function
	.thumb_func
RunInfoBoxActions:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L1104
	ldr	r2, .L1104+0x4
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r2, #0x8
	ldrsh	r1, [r0, r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r1, [r1]
	bl	_call_via_r1
	pop	{r0}
	bx	r0
.L1105:
	.align	2, 0
.L1104:
	.word	sInfoBoxActions
	.word	gTasks
.Lfe168:
	.size	 RunInfoBoxActions,.Lfe168-RunInfoBoxActions
	.align	2, 0
	.type	 InfoBox_FadeIn,function
	.thumb_func
InfoBox_FadeIn:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe169:
	.size	 InfoBox_FadeIn,.Lfe169-InfoBox_FadeIn
	.align	2, 0
	.type	 InfoBox_WaitForFade,function
	.thumb_func
InfoBox_WaitForFade:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L1109
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1108	@cond_branch
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
.L1108:
	pop	{r0}
	bx	r0
.L1110:
	.align	2, 0
.L1109:
	.word	gPaletteFade
.Lfe170:
	.size	 InfoBox_WaitForFade,.Lfe170-InfoBox_WaitForFade
	.align	2, 0
	.type	 InfoBox_DrawWindow,function
	.thumb_func
InfoBox_DrawWindow:
	push	{r4, lr}
	add	r4, r0, #0
	bl	DestroyDigitalDisplayScene
	bl	LoadInfoBoxTilemap
	ldr	r0, .L1112
	bl	AddWindow
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1113:
	.align	2, 0
.L1112:
	.word	sWindowTemplate_InfoBox
.Lfe171:
	.size	 InfoBox_DrawWindow,.Lfe171-InfoBox_DrawWindow
	.align	2, 0
	.type	 InfoBox_AddText,function
	.thumb_func
InfoBox_AddText:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	ldr	r0, .L1115
	str	r0, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r0, .L1115+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x2
	mov	r3, #0x5
	bl	AddTextPrinterParameterized3
	mov	r0, #0x1
	mov	r1, #0x3
	bl	CopyWindowToVram
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1116:
	.align	2, 0
.L1115:
	.word	sColors_ReeltimeHelp
	.word	gText_ReelTimeHelp
.Lfe172:
	.size	 InfoBox_AddText,.Lfe172-InfoBox_AddText
	.align	2, 0
	.type	 InfoBox_AwaitPlayerInput,function
	.thumb_func
InfoBox_AwaitPlayerInput:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldr	r0, .L1119
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1118	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	bl	ClearWindowTilemap
	mov	r0, #0x1
	mov	r1, #0x1
	bl	CopyWindowToVram
	mov	r0, #0x1
	bl	RemoveWindow
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L1118:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1120:
	.align	2, 0
.L1119:
	.word	gMain
.Lfe173:
	.size	 InfoBox_AwaitPlayerInput,.Lfe173-InfoBox_AwaitPlayerInput
	.align	2, 0
	.type	 InfoBox_LoadSlotMachineTilemap,function
	.thumb_func
InfoBox_LoadSlotMachineTilemap:
	push	{r4, lr}
	add	r4, r0, #0
	bl	LoadSlotMachineMenuTilemap
	mov	r0, #0x3
	bl	ShowBg
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe174:
	.size	 InfoBox_LoadSlotMachineTilemap,.Lfe174-InfoBox_LoadSlotMachineTilemap
	.align	2, 0
	.type	 InfoBox_CreateDigitalDisplay,function
	.thumb_func
InfoBox_CreateDigitalDisplay:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0xa]
	bl	CreateDigitalDisplayScene
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe175:
	.size	 InfoBox_CreateDigitalDisplay,.Lfe175-InfoBox_CreateDigitalDisplay
	.align	2, 0
	.type	 InfoBox_LoadPikaPowerMeter,function
	.thumb_func
InfoBox_LoadPikaPowerMeter:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldr	r0, .L1124
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x2]
	bl	LoadPikaPowerMeter
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1125:
	.align	2, 0
.L1124:
	.word	sSlotMachine
.Lfe176:
	.size	 InfoBox_LoadPikaPowerMeter,.Lfe176-InfoBox_LoadPikaPowerMeter
	.align	2, 0
	.type	 InfoBox_FreeTask,function
	.thumb_func
InfoBox_FreeTask:
	push	{lr}
	ldr	r0, .L1127
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	pop	{r0}
	bx	r0
.L1128:
	.align	2, 0
.L1127:
	.word	RunInfoBoxActions
.Lfe177:
	.size	 InfoBox_FreeTask,.Lfe177-InfoBox_FreeTask
	.align	2, 0
	.type	 CreateDigitalDisplayTask,function
	.thumb_func
CreateDigitalDisplayTask:
	push	{lr}
	ldr	r0, .L1135
	mov	r1, #0x3
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L1135+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x3d
	strb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L1135+0x8
	add	r0, r0, r1
	ldr	r1, .L1135+0xc
	strh	r1, [r0, #0xa]
	mov	r1, #0x4
	add	r2, r0, #0
	add	r2, r2, #0x8
	mov	r3, #0x40
.L1133:
	lsl	r0, r1, #0x1
	add	r0, r2, r0
	strh	r3, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xf
	bls	.L1133	@cond_branch
	pop	{r0}
	bx	r0
.L1136:
	.align	2, 0
.L1135:
	.word	Task_DigitalDisplay
	.word	sSlotMachine
	.word	gTasks
	.word	0xffff
.Lfe178:
	.size	 CreateDigitalDisplayTask,.Lfe178-CreateDigitalDisplayTask
	.align	2, 0
	.type	 CreateDigitalDisplayScene,function
	.thumb_func
CreateDigitalDisplayScene:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	DestroyDigitalDisplayScene
	ldr	r0, .L1143
	ldr	r0, [r0]
	add	r0, r0, #0x3d
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L1143+0x4
	add	r7, r0, r1
	strh	r4, [r7, #0xa]
	mov	r6, #0x0
	ldr	r1, .L1143+0x8
	lsl	r5, r4, #0x2
	add	r0, r5, r1
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L1139	@cond_branch
	mov	r8, r1
.L1141:
	mov	r0, r8
	add	r4, r5, r0
	ldr	r0, [r4]
	lsl	r2, r6, #0x2
	add	r2, r2, r0
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	mov	r3, #0x2
	ldrsh	r2, [r2, r3]
	bl	CreateStdDigitalDisplaySprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r6, #0x4
	lsl	r2, r2, #0x1
	add	r1, r7, #0
	add	r1, r1, #0x8
	add	r1, r1, r2
	strh	r0, [r1]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, [r4]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L1141	@cond_branch
.L1139:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1144:
	.align	2, 0
.L1143:
	.word	sSlotMachine
	.word	gTasks
	.word	sDigitalDisplayScenes
.Lfe179:
	.size	 CreateDigitalDisplayScene,.Lfe179-CreateDigitalDisplayScene
	.align	2, 0
	.type	 AddDigitalDisplaySprite,function
	.thumb_func
AddDigitalDisplaySprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r8, r1
	ldr	r4, [sp, #0x1c]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1152
	ldr	r0, [r0]
	add	r0, r0, #0x3d
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L1152+0x4
	add	r0, r0, r1
	mov	ip, r0
	mov	r5, #0x4
	lsl	r4, r4, #0x10
	asr	r6, r4, #0x10
	lsl	r2, r2, #0x10
	lsl	r3, r3, #0x10
.L1149:
	lsl	r0, r5, #0x1
	mov	r1, ip
	add	r1, r1, #0x8
	add	r4, r1, r0
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x40
	bne	.L1148	@cond_branch
	str	r6, [sp]
	add	r0, r7, #0
	mov	r1, r8
	asr	r2, r2, #0x10
	asr	r3, r3, #0x10
	bl	CreateDigitalDisplaySprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	b	.L1147
.L1153:
	.align	2, 0
.L1152:
	.word	sSlotMachine
	.word	gTasks
.L1148:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xf
	bls	.L1149	@cond_branch
.L1147:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe180:
	.size	 AddDigitalDisplaySprite,.Lfe180-AddDigitalDisplaySprite
	.align	2, 0
	.type	 DestroyDigitalDisplayScene,function
	.thumb_func
DestroyDigitalDisplayScene:
	push	{r4, r5, r6, lr}
	ldr	r0, .L1162
	ldr	r0, [r0]
	add	r0, r0, #0x3d
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L1162+0x4
	add	r4, r0, r1
	ldrh	r1, [r4, #0xa]
	ldr	r0, .L1162+0x8
	cmp	r1, r0
	beq	.L1155	@cond_branch
	ldr	r0, .L1162+0xc
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
.L1155:
	mov	r5, #0x4
	add	r6, r4, #0
	add	r6, r6, #0x8
.L1159:
	lsl	r0, r5, #0x1
	add	r4, r6, r0
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x40
	beq	.L1158	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1162+0x10
	add	r0, r0, r1
	bl	DestroySprite
	mov	r0, #0x40
	strh	r0, [r4]
.L1158:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xf
	bls	.L1159	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1163:
	.align	2, 0
.L1162:
	.word	sSlotMachine
	.word	gTasks
	.word	0xffff
	.word	sDigitalDisplaySceneExitCallbacks
	.word	gSprites
.Lfe181:
	.size	 DestroyDigitalDisplayScene,.Lfe181-DestroyDigitalDisplayScene
	.align	2, 0
	.type	 IsDigitalDisplayAnimFinished,function
	.thumb_func
IsDigitalDisplayAnimFinished:
	push	{r4, r5, lr}
	ldr	r0, .L1173
	ldr	r0, [r0]
	add	r0, r0, #0x3d
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L1173+0x4
	add	r0, r0, r1
	mov	r2, #0x4
	add	r3, r0, #0
	add	r3, r3, #0x8
	ldr	r4, .L1173+0x8
.L1168:
	lsl	r0, r2, #0x1
	add	r1, r3, r0
	mov	r5, #0x0
	ldrsh	r0, [r1, r5]
	cmp	r0, #0x40
	beq	.L1167	@cond_branch
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r5, #0x3c
	ldrsh	r0, [r1, r5]
	cmp	r0, #0
	beq	.L1167	@cond_branch
	mov	r0, #0x0
	b	.L1172
.L1174:
	.align	2, 0
.L1173:
	.word	sSlotMachine
	.word	gTasks
	.word	gSprites
.L1167:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xf
	bls	.L1168	@cond_branch
	mov	r0, #0x1
.L1172:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe182:
	.size	 IsDigitalDisplayAnimFinished,.Lfe182-IsDigitalDisplayAnimFinished
	.align	2, 0
	.type	 Task_DigitalDisplay,function
	.thumb_func
Task_DigitalDisplay:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L1176
	ldr	r2, .L1176+0x4
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r2, #0x8
	ldrsh	r1, [r0, r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r1, [r1]
	bl	_call_via_r1
	pop	{r0}
	bx	r0
.L1177:
	.align	2, 0
.L1176:
	.word	sDigitalDisplayActions
	.word	gTasks
.Lfe183:
	.size	 Task_DigitalDisplay,.Lfe183-Task_DigitalDisplay
	.align	2, 0
	.type	 DigitalDisplay_Idle,function
	.thumb_func
DigitalDisplay_Idle:
	bx	lr
.Lfe184:
	.size	 DigitalDisplay_Idle,.Lfe184-DigitalDisplay_Idle
	.align	2, 0
	.type	 CreateReelSymbolSprites,function
	.thumb_func
CreateReelSymbolSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r6, #0x0
	mov	r0, #0x30
.L1183:
	mov	r4, #0x0
	lsl	r5, r0, #0x10
	lsl	r7, r6, #0x10
.L1187:
	ldr	r0, .L1190
	asr	r1, r5, #0x10
	mov	r2, #0x0
	mov	r3, #0xe
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L1190+0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x5]
	mov	r2, #0xc
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	strh	r6, [r1, #0x2e]
	strh	r4, [r1, #0x30]
	ldr	r0, .L1190+0x8
	strh	r0, [r1, #0x34]
	lsl	r0, r4, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x77
	ble	.L1187	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r1, r7, r2
	mov	r2, #0xa0
	lsl	r2, r2, #0xe
	add	r0, r5, r2
	lsr	r0, r0, #0x10
	lsr	r6, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x2
	ble	.L1183	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1191:
	.align	2, 0
.L1190:
	.word	sSpriteTemplate_ReelSymbol
	.word	gSprites
	.word	0xffff
.Lfe185:
	.size	 CreateReelSymbolSprites,.Lfe185-CreateReelSymbolSprites
	.align	2, 0
	.type	 SpriteCB_ReelSymbol,function
	.thumb_func
SpriteCB_ReelSymbol:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L1193
	ldr	r4, [r0]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r1, r1, r0
	ldrh	r0, [r5, #0x30]
	ldrh	r1, [r1]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	mov	r2, #0x32
	ldrsh	r0, [r5, r2]
	mov	r1, #0x78
	bl	__modsi3
	strh	r0, [r5, #0x32]
	mov	r2, #0x2e
	ldrsh	r1, [r5, r2]
	lsl	r1, r1, #0x1
	add	r4, r4, #0x22
	add	r4, r4, r1
	ldrh	r1, [r4]
	add	r1, r1, #0x1c
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	ldrh	r4, [r5, #0x2e]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	mov	r1, #0x18
	bl	__divsi3
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	GetTagAtRest
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetSpriteTileStartByTag
	add	r1, r5, #0
	add	r1, r1, #0x40
	strh	r0, [r1]
	add	r0, r5, #0
	bl	SetSpriteSheetFrameTileNum
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1194:
	.align	2, 0
.L1193:
	.word	sSlotMachine
.Lfe186:
	.size	 SpriteCB_ReelSymbol,.Lfe186-SpriteCB_ReelSymbol
	.align	2, 0
	.type	 CreateCreditPayoutNumberSprites,function
	.thumb_func
CreateCreditPayoutNumberSprites:
	push	{r4, r5, r6, lr}
	mov	r4, #0xcb
	mov	r5, #0x1
	ldr	r6, .L1206
.L1199:
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r0, r4, #0
	mov	r1, #0x17
	mov	r2, #0x0
	add	r3, r5, #0
	bl	CreateCoinNumberSprite
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x11
	sub	r4, r4, #0x7
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r6
	ble	.L1199	@cond_branch
	mov	r4, #0xeb
	mov	r5, #0x1
	ldr	r6, .L1206
.L1204:
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r0, r4, #0
	mov	r1, #0x17
	mov	r2, #0x1
	add	r3, r5, #0
	bl	CreateCoinNumberSprite
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x11
	sub	r4, r4, #0x7
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r6
	ble	.L1204	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1207:
	.align	2, 0
.L1206:
	.word	0x270f
.Lfe187:
	.size	 CreateCreditPayoutNumberSprites,.Lfe187-CreateCreditPayoutNumberSprites
	.align	2, 0
	.type	 CreateCoinNumberSprite,function
	.thumb_func
CreateCoinNumberSprite:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r8, r2
	add	r4, r3, #0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r0, .L1209
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	lsl	r6, r6, #0x10
	asr	r6, r6, #0x10
	add	r1, r5, #0
	add	r2, r6, #0
	mov	r3, #0xd
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	ldr	r0, .L1209+0x4
	add	r2, r2, r0
	ldrb	r1, [r2, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	mov	r0, r8
	strh	r0, [r2, #0x2e]
	strh	r4, [r2, #0x30]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	strh	r0, [r2, #0x32]
	ldr	r0, .L1209+0x8
	strh	r0, [r2, #0x34]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1210:
	.align	2, 0
.L1209:
	.word	sSpriteTemplate_CoinNumber
	.word	gSprites
	.word	0xffff
.Lfe188:
	.size	 CreateCoinNumberSprite,.Lfe188-CreateCoinNumberSprite
	.align	2, 0
	.type	 SpriteCB_CoinNumber,function
	.thumb_func
SpriteCB_CoinNumber:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1214
	ldr	r1, [r0]
	ldrh	r2, [r1, #0xc]
	mov	r3, #0x2e
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L1212	@cond_branch
	ldrh	r2, [r1, #0xe]
.L1212:
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, r2
	beq	.L1213	@cond_branch
	strh	r2, [r4, #0x34]
	ldrh	r1, [r4, #0x32]
	add	r0, r2, #0
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrh	r1, [r4, #0x30]
	add	r0, r2, #0
	bl	__udivsi3
	lsl	r0, r0, #0x10
	mov	r3, #0xe0
	lsl	r3, r3, #0xb
	add	r0, r0, r3
	lsr	r2, r0, #0x10
	add	r0, r2, #0
	bl	GetSpriteTileStartByTag
	add	r1, r4, #0
	add	r1, r1, #0x40
	strh	r0, [r1]
	add	r0, r4, #0
	bl	SetSpriteSheetFrameTileNum
.L1213:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1215:
	.align	2, 0
.L1214:
	.word	sSlotMachine
.Lfe189:
	.size	 SpriteCB_CoinNumber,.Lfe189-SpriteCB_CoinNumber
	.align	2, 0
	.type	 CreateReelBackgroundSprite,function
	.thumb_func
CreateReelBackgroundSprite:
	push	{lr}
	ldr	r0, .L1217
	mov	r1, #0x58
	mov	r2, #0x48
	mov	r3, #0xf
	bl	CreateSprite
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L1217+0x4
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xc
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	ldr	r1, .L1217+0x8
	bl	SetSubspriteTables
	pop	{r0}
	bx	r0
.L1218:
	.align	2, 0
.L1217:
	.word	sSpriteTemplate_ReelBackground
	.word	gSprites
	.word	sSubspriteTable_ReelBackground
.Lfe190:
	.size	 CreateReelBackgroundSprite,.Lfe190-CreateReelBackgroundSprite
	.align	2, 0
	.type	 CreateReelTimePikachuSprite,function
	.thumb_func
CreateReelTimePikachuSprite:
	push	{r4, r5, lr}
	add	sp, sp, #-0x18
	ldr	r4, .L1221
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L1220	@cond_branch
	mov	r0, #0x28
	bl	AllocZeroed
	str	r0, [r4]
.L1220:
	ldr	r2, [r4]
	ldr	r0, .L1221+0x4
	ldr	r1, [r0]
	str	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x4
	strh	r3, [r2, #0x4]
	add	r0, r1, r3
	str	r0, [r2, #0x8]
	strh	r3, [r2, #0xc]
	mov	r4, #0x80
	lsl	r4, r4, #0x5
	add	r0, r1, r4
	str	r0, [r2, #0x10]
	strh	r3, [r2, #0x14]
	mov	r5, #0xc0
	lsl	r5, r5, #0x5
	add	r0, r1, r5
	str	r0, [r2, #0x18]
	strh	r3, [r2, #0x1c]
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	str	r1, [r2, #0x20]
	strh	r3, [r2, #0x24]
	mov	r1, sp
	ldr	r0, .L1221+0x8
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	str	r2, [sp, #0xc]
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	mov	r0, sp
	mov	r2, #0x50
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1221+0xc
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r3
	mov	r3, #0x4
	orr	r1, r1, r3
	strb	r1, [r2, #0x5]
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r3, #0x2
	orr	r1, r1, r3
	strb	r1, [r2]
	ldr	r1, .L1221+0x10
	ldr	r1, [r1]
	add	r1, r1, #0x3f
	strb	r0, [r1]
	add	sp, sp, #0x18
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1222:
	.align	2, 0
.L1221:
	.word	sImageTable_ReelTimePikachu
	.word	sReelTimeGfxPtr
	.word	sSpriteTemplate_ReelTimePikachu
	.word	gSprites
	.word	sSlotMachine
.Lfe191:
	.size	 CreateReelTimePikachuSprite,.Lfe191-CreateReelTimePikachuSprite
	.align	2, 0
	.type	 DestroyReelTimePikachuSprite,function
	.thumb_func
DestroyReelTimePikachuSprite:
	push	{r4, lr}
	ldr	r0, .L1225
	ldr	r0, [r0]
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1225+0x4
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r4, .L1225+0x8
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L1224	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L1224:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1226:
	.align	2, 0
.L1225:
	.word	sSlotMachine
	.word	gSprites
	.word	sImageTable_ReelTimePikachu
.Lfe192:
	.size	 DestroyReelTimePikachuSprite,.Lfe192-DestroyReelTimePikachuSprite
	.align	2, 0
	.type	 SpriteCB_ReelTimePikachu,function
	.thumb_func
SpriteCB_ReelTimePikachu:
	push	{lr}
	add	r2, r0, #0
	mov	r0, #0x0
	strh	r0, [r2, #0x24]
	strh	r0, [r2, #0x26]
	add	r0, r2, #0
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bne	.L1228	@cond_branch
	mov	r0, #0x8
	strh	r0, [r2, #0x24]
	strh	r0, [r2, #0x26]
	add	r0, r2, #0
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1232	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r0, #0x3f
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1230	@cond_branch
	b	.L1228
.L1232:
	add	r0, r2, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r0, #0x3f
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1228	@cond_branch
.L1230:
	ldr	r0, .L1233
	strh	r0, [r2, #0x26]
.L1228:
	pop	{r0}
	bx	r0
.L1234:
	.align	2, 0
.L1233:
	.word	0xfff8
.Lfe193:
	.size	 SpriteCB_ReelTimePikachu,.Lfe193-SpriteCB_ReelTimePikachu
	.align	2, 0
	.type	 CreateReelTimeMachineSprites,function
	.thumb_func
CreateReelTimeMachineSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	ldr	r4, .L1238
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L1236	@cond_branch
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r4]
.L1236:
	ldr	r2, [r4]
	ldr	r0, .L1238+0x4
	mov	sl, r0
	ldr	r0, [r0]
	mov	r1, #0xa0
	lsl	r1, r1, #0x6
	add	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	strh	r0, [r2, #0x4]
	mov	r1, sp
	ldr	r0, .L1238+0x8
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r0!, {r3, r4, r7}
	stmia	r1!, {r3, r4, r7}
	str	r2, [sp, #0xc]
	mov	r0, sp
	mov	r1, #0xb8
	lsl	r1, r1, #0x1
	mov	r2, #0x34
	mov	r3, #0x7
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r5, .L1238+0xc
	mov	r9, r5
	add	r2, r0, r5
	ldrb	r1, [r2, #0x5]
	mov	r7, #0xd
	neg	r7, r7
	mov	r8, r7
	mov	r0, r8
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	add	r1, r2, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r6, #0x2
	orr	r0, r0, r6
	strb	r0, [r1]
	ldr	r1, .L1238+0x10
	add	r0, r2, #0
	bl	SetSubspriteTables
	ldr	r5, .L1238+0x14
	ldr	r0, [r5]
	add	r0, r0, #0x49
	strb	r4, [r0]
	ldr	r4, .L1238+0x18
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L1237	@cond_branch
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r4]
.L1237:
	ldr	r2, [r4]
	mov	r3, sl
	ldr	r0, [r3]
	mov	r4, #0xac
	lsl	r4, r4, #0x6
	add	r0, r0, r4
	str	r0, [r2]
	mov	r0, #0xa0
	lsl	r0, r0, #0x3
	strh	r0, [r2, #0x4]
	mov	r1, sp
	ldr	r0, .L1238+0x1c
	ldmia	r0!, {r3, r4, r7}
	stmia	r1!, {r3, r4, r7}
	ldmia	r0!, {r3, r4, r7}
	stmia	r1!, {r3, r4, r7}
	str	r2, [sp, #0xc]
	mov	r0, sp
	mov	r1, #0xb8
	lsl	r1, r1, #0x1
	mov	r2, #0x54
	mov	r3, #0x7
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	mov	r7, r9
	add	r2, r0, r7
	ldrb	r1, [r2, #0x5]
	mov	r0, r8
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	add	r1, r2, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	ldr	r1, .L1238+0x20
	add	r0, r2, #0
	bl	SetSubspriteTables
	ldr	r0, [r5]
	add	r0, r0, #0x4a
	strb	r4, [r0]
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1239:
	.align	2, 0
.L1238:
	.word	sImageTable_ReelTimeMachineAntennae
	.word	sReelTimeGfxPtr
	.word	sSpriteTemplate_ReelTimeMachineAntennae
	.word	gSprites
	.word	sSubspriteTable_ReelTimeMachineAntennae
	.word	sSlotMachine
	.word	sImageTable_ReelTimeMachine
	.word	sSpriteTemplate_ReelTimeMachine
	.word	sSubspriteTable_ReelTimeMachine
.Lfe194:
	.size	 CreateReelTimeMachineSprites,.Lfe194-CreateReelTimeMachineSprites
	.align	2, 0
	.type	 CreateBrokenReelTimeMachineSprite,function
	.thumb_func
CreateBrokenReelTimeMachineSprite:
	push	{r4, r5, lr}
	add	sp, sp, #-0x18
	ldr	r4, .L1242
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L1241	@cond_branch
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r4]
.L1241:
	ldr	r2, [r4]
	ldr	r0, .L1242+0x4
	ldr	r0, [r0]
	mov	r1, #0xc0
	lsl	r1, r1, #0x6
	add	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0xc0
	lsl	r0, r0, #0x3
	strh	r0, [r2, #0x4]
	mov	r1, sp
	ldr	r0, .L1242+0x8
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	str	r2, [sp, #0xc]
	ldr	r0, .L1242+0xc
	ldrh	r0, [r0]
	mov	r1, #0xa8
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, sp
	mov	r2, #0x50
	mov	r3, #0x7
	bl	CreateSprite
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L1242+0x10
	add	r0, r0, r1
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	add	r3, r0, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r3]
	ldr	r1, .L1242+0x14
	bl	SetSubspriteTables
	ldr	r0, .L1242+0x18
	ldr	r0, [r0]
	add	r0, r0, #0x42
	strb	r4, [r0]
	add	sp, sp, #0x18
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1243:
	.align	2, 0
.L1242:
	.word	sImageTable_BrokenReelTimeMachine
	.word	sReelTimeGfxPtr
	.word	sSpriteTemplate_BrokenReelTimeMachine
	.word	gSpriteCoordOffsetX
	.word	gSprites
	.word	sSubspriteTable_BrokenReelTimeMachine
	.word	sSlotMachine
.Lfe195:
	.size	 CreateBrokenReelTimeMachineSprite,.Lfe195-CreateBrokenReelTimeMachineSprite
	.align	2, 0
	.type	 CreateReelTimeNumberSprites,function
	.thumb_func
CreateReelTimeNumberSprites:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	mov	r5, #0x0
.L1248:
	ldr	r0, .L1250
	mov	r1, #0xb8
	lsl	r1, r1, #0x1
	mov	r2, #0x0
	mov	r3, #0xa
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r3, r0, #0x4
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	ldr	r1, .L1250+0x4
	add	r3, r3, r1
	ldrb	r2, [r3, #0x5]
	mov	r6, #0xd
	neg	r6, r6
	add	r1, r6, #0
	and	r2, r2, r1
	mov	r1, #0x4
	orr	r2, r2, r1
	strb	r2, [r3, #0x5]
	mov	r1, #0x3e
	add	r1, r1, r3
	mov	ip, r1
	ldrb	r1, [r1]
	mov	r2, #0x2
	orr	r1, r1, r2
	mov	r2, ip
	strb	r1, [r2]
	strh	r5, [r3, #0x3c]
	ldr	r1, .L1250+0x8
	ldr	r1, [r1]
	add	r1, r1, #0x4b
	add	r1, r1, r4
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r5, #0x10
	mov	r6, #0xa0
	lsl	r6, r6, #0xd
	add	r0, r0, r6
	lsr	r5, r0, #0x10
	cmp	r4, #0x2
	bls	.L1248	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1251:
	.align	2, 0
.L1250:
	.word	sSpriteTemplate_ReelTimeNumbers
	.word	gSprites
	.word	sSlotMachine
.Lfe196:
	.size	 CreateReelTimeNumberSprites,.Lfe196-CreateReelTimeNumberSprites
	.align	2, 0
	.type	 SpriteCB_ReelTimeNumbers,function
	.thumb_func
SpriteCB_ReelTimeNumbers:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1253
	ldr	r1, [r0]
	ldrh	r0, [r4, #0x3c]
	ldrh	r1, [r1, #0x14]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x28
	bl	__modsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r1, r0, #0
	add	r1, r1, #0x3b
	strh	r1, [r4, #0x22]
	mov	r1, #0x14
	bl	__divsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	bl	GetNearbyReelTimeTag
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnimIfDifferent
	pop	{r4}
	pop	{r0}
	bx	r0
.L1254:
	.align	2, 0
.L1253:
	.word	sSlotMachine
.Lfe197:
	.size	 SpriteCB_ReelTimeNumbers,.Lfe197-SpriteCB_ReelTimeNumbers
	.align	2, 0
	.type	 CreateReelTimeShadowSprites,function
	.thumb_func
CreateReelTimeShadowSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r1, #0xb8
	lsl	r1, r1, #0x1
	ldr	r0, .L1256
	mov	r2, #0x64
	mov	r3, #0x9
	bl	CreateSprite
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r7, .L1256+0x4
	add	r2, r0, r7
	add	r1, r2, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r3, #0x2
	mov	sl, r3
	mov	r3, sl
	orr	r0, r0, r3
	strb	r0, [r1]
	ldrb	r1, [r2, #0x5]
	mov	r5, #0xd
	neg	r5, r5
	add	r0, r5, #0
	and	r0, r0, r1
	mov	r1, #0x4
	mov	r8, r1
	mov	r3, r8
	orr	r0, r0, r3
	strb	r0, [r2, #0x5]
	ldr	r0, .L1256+0x8
	mov	r9, r0
	add	r0, r2, #0
	mov	r1, r9
	bl	SetSubspriteTables
	ldr	r6, .L1256+0xc
	ldr	r0, [r6]
	add	r0, r0, #0x4e
	strb	r4, [r0]
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	ldr	r0, .L1256
	mov	r2, #0x68
	mov	r3, #0x4
	bl	CreateSprite
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r7
	add	r1, r2, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r3, sl
	orr	r0, r0, r3
	strb	r0, [r1]
	ldrb	r0, [r2, #0x5]
	and	r5, r5, r0
	mov	r0, r8
	orr	r5, r5, r0
	strb	r5, [r2, #0x5]
	add	r0, r2, #0
	mov	r1, r9
	bl	SetSubspriteTables
	ldr	r0, [r6]
	add	r0, r0, #0x4f
	strb	r4, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1257:
	.align	2, 0
.L1256:
	.word	sSpriteTemplate_ReelTimeShadow
	.word	gSprites
	.word	sSubspriteTable_ReelTimeShadow
	.word	sSlotMachine
.Lfe198:
	.size	 CreateReelTimeShadowSprites,.Lfe198-CreateReelTimeShadowSprites
	.align	2, 0
	.type	 CreateReelTimeNumberGapSprite,function
	.thumb_func
CreateReelTimeNumberGapSprite:
	push	{r4, lr}
	ldr	r0, .L1259
	mov	r1, #0xb8
	lsl	r1, r1, #0x1
	mov	r2, #0x4c
	mov	r3, #0xb
	bl	CreateSprite
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L1259+0x4
	add	r0, r0, r1
	add	r3, r0, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r3]
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	ldr	r1, .L1259+0x8
	bl	SetSubspriteTables
	ldr	r0, .L1259+0xc
	ldr	r0, [r0]
	add	r0, r0, #0x40
	strb	r4, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1260:
	.align	2, 0
.L1259:
	.word	sSpriteTemplate_ReelTimeNumberGap
	.word	gSprites
	.word	sSubspriteTable_ReelTimeNumberGap
	.word	sSlotMachine
.Lfe199:
	.size	 CreateReelTimeNumberGapSprite,.Lfe199-CreateReelTimeNumberGapSprite
	.align	2, 0
	.type	 DestroyReelTimeMachineSprites,function
	.thumb_func
DestroyReelTimeMachineSprites:
	push	{r4, lr}
	ldr	r0, .L1274
	ldr	r0, [r0]
	add	r0, r0, #0x40
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1274+0x4
	add	r0, r0, r1
	bl	DestroySprite
	mov	r4, #0x0
.L1265:
	ldr	r0, .L1274
	ldr	r0, [r0]
	add	r0, r0, #0x49
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1274+0x4
	add	r0, r0, r1
	bl	DestroySprite
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bls	.L1265	@cond_branch
	ldr	r4, .L1274+0x8
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L1267	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L1267:
	ldr	r4, .L1274+0xc
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L1268	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L1268:
	mov	r4, #0x0
.L1272:
	ldr	r0, .L1274
	ldr	r0, [r0]
	add	r0, r0, #0x4b
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1274+0x4
	add	r0, r0, r1
	bl	DestroySprite
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L1272	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L1275:
	.align	2, 0
.L1274:
	.word	sSlotMachine
	.word	gSprites
	.word	sImageTable_ReelTimeMachineAntennae
	.word	sImageTable_ReelTimeMachine
.Lfe200:
	.size	 DestroyReelTimeMachineSprites,.Lfe200-DestroyReelTimeMachineSprites
	.align	2, 0
	.type	 DestroyReelTimeShadowSprites,function
	.thumb_func
DestroyReelTimeShadowSprites:
	push	{r4, lr}
	mov	r4, #0x0
.L1280:
	ldr	r0, .L1282
	ldr	r0, [r0]
	add	r0, r0, #0x4e
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1282+0x4
	add	r0, r0, r1
	bl	DestroySprite
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bls	.L1280	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L1283:
	.align	2, 0
.L1282:
	.word	sSlotMachine
	.word	gSprites
.Lfe201:
	.size	 DestroyReelTimeShadowSprites,.Lfe201-DestroyReelTimeShadowSprites
	.align	2, 0
	.type	 DestroyBrokenReelTimeMachineSprite,function
	.thumb_func
DestroyBrokenReelTimeMachineSprite:
	push	{r4, lr}
	ldr	r0, .L1286
	ldr	r0, [r0]
	add	r0, r0, #0x42
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1286+0x4
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r4, .L1286+0x8
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L1285	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L1285:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1287:
	.align	2, 0
.L1286:
	.word	sSlotMachine
	.word	gSprites
	.word	sImageTable_BrokenReelTimeMachine
.Lfe202:
	.size	 DestroyBrokenReelTimeMachineSprite,.Lfe202-DestroyBrokenReelTimeMachineSprite
	.align	2, 0
	.type	 CreateReelTimeBoltSprites,function
	.thumb_func
CreateReelTimeBoltSprites:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	ldr	r0, .L1289
	mov	sl, r0
	mov	r1, #0x98
	mov	r2, #0x20
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L1289+0x4
	mov	r9, r2
	add	r3, r1, r2
	ldrb	r2, [r3, #0x5]
	mov	r4, #0xd
	neg	r4, r4
	add	r1, r4, #0
	and	r1, r1, r2
	mov	r2, #0x4
	mov	r8, r2
	mov	r2, r8
	orr	r1, r1, r2
	strb	r1, [r3, #0x5]
	add	r5, r3, #0
	add	r5, r5, #0x3f
	ldrb	r1, [r5]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r5]
	ldr	r6, .L1289+0x8
	ldr	r1, [r6]
	add	r1, r1, #0x50
	strb	r0, [r1]
	mov	r0, #0x8
	strh	r0, [r3, #0x2e]
	ldr	r0, .L1289+0xc
	strh	r0, [r3, #0x30]
	mov	r0, #0x1
	neg	r0, r0
	strh	r0, [r3, #0x32]
	mov	r5, #0x20
	strh	r5, [r3, #0x3c]
	mov	r0, sl
	mov	r1, #0xb8
	mov	r2, #0x20
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r2, r9
	add	r3, r1, r2
	ldrb	r1, [r3, #0x5]
	and	r4, r4, r1
	mov	r1, r8
	orr	r4, r4, r1
	strb	r4, [r3, #0x5]
	ldr	r1, [r6]
	add	r1, r1, #0x51
	strb	r0, [r1]
	mov	r0, #0x1
	strh	r0, [r3, #0x30]
	sub	r0, r0, #0x2
	strh	r0, [r3, #0x32]
	strh	r5, [r3, #0x3c]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1290:
	.align	2, 0
.L1289:
	.word	sSpriteTemplate_ReelTimeBolt
	.word	gSprites
	.word	sSlotMachine
	.word	0xffff
.Lfe203:
	.size	 CreateReelTimeBoltSprites,.Lfe203-CreateReelTimeBoltSprites
	.align	2, 0
	.type	 SpriteCB_ReelTimeBolt,function
	.thumb_func
SpriteCB_ReelTimeBolt:
	push	{r4, lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	mov	r1, #0x2e
	ldrsh	r4, [r2, r1]
	cmp	r4, #0
	beq	.L1292	@cond_branch
	sub	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r2, #0x2e]
	strh	r1, [r2, #0x24]
	strh	r1, [r2, #0x26]
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L1293
.L1292:
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x26]
	add	r0, r0, r1
	strh	r0, [r2, #0x26]
	ldrh	r0, [r2, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	ble	.L1293	@cond_branch
	ldrh	r0, [r2, #0x3c]
	strh	r0, [r2, #0x2e]
	strh	r4, [r2, #0x34]
.L1293:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe204:
	.size	 SpriteCB_ReelTimeBolt,.Lfe204-SpriteCB_ReelTimeBolt
	.align	2, 0
	.type	 SetReelTimeBoltDelay,function
	.thumb_func
SetReelTimeBoltDelay:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L1296
	ldr	r1, .L1296+0x4
	ldr	r3, [r1]
	add	r1, r3, #0
	add	r1, r1, #0x50
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r0, [r1, #0x3c]
	add	r3, r3, #0x51
	ldrb	r2, [r3]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r0, [r1, #0x3c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1297:
	.align	2, 0
.L1296:
	.word	gSprites
	.word	sSlotMachine
.Lfe205:
	.size	 SetReelTimeBoltDelay,.Lfe205-SetReelTimeBoltDelay
	.align	2, 0
	.type	 DestroyReelTimeBoltSprites,function
	.thumb_func
DestroyReelTimeBoltSprites:
	push	{r4, lr}
	mov	r4, #0x0
.L1302:
	ldr	r0, .L1304
	ldr	r0, [r0]
	add	r0, r0, #0x50
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1304+0x4
	add	r0, r0, r1
	bl	DestroySprite
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bls	.L1302	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L1305:
	.align	2, 0
.L1304:
	.word	sSlotMachine
	.word	gSprites
.Lfe206:
	.size	 DestroyReelTimeBoltSprites,.Lfe206-DestroyReelTimeBoltSprites
	.align	2, 0
	.type	 CreateReelTimePikachuAuraSprites,function
	.thumb_func
CreateReelTimePikachuAuraSprites:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r0, .L1307
	mov	r8, r0
	mov	r1, #0x48
	mov	r2, #0x50
	mov	r3, #0x3
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1307+0x4
	mov	r9, r1
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r9
	ldrb	r3, [r2, #0x5]
	mov	r4, #0xd
	neg	r4, r4
	add	r1, r4, #0
	and	r1, r1, r3
	mov	r6, #0x4
	orr	r1, r1, r6
	strb	r1, [r2, #0x5]
	mov	r3, #0x0
	mov	r1, #0x1
	strh	r1, [r2, #0x2e]
	strh	r3, [r2, #0x38]
	mov	r1, #0x10
	strh	r1, [r2, #0x3a]
	mov	r1, #0x8
	strh	r1, [r2, #0x3c]
	ldr	r5, .L1307+0x8
	ldr	r1, [r5]
	add	r1, r1, #0x52
	strb	r0, [r1]
	mov	r0, r8
	mov	r1, #0x68
	mov	r2, #0x50
	mov	r3, #0x3
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrb	r2, [r1, #0x5]
	and	r4, r4, r2
	orr	r4, r4, r6
	strb	r4, [r1, #0x5]
	add	r1, r1, #0x3f
	ldrb	r2, [r1]
	mov	r3, #0x1
	orr	r2, r2, r3
	strb	r2, [r1]
	ldr	r1, [r5]
	add	r1, r1, #0x53
	strb	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1308:
	.align	2, 0
.L1307:
	.word	sSpriteTemplate_ReelTimePikachuAura
	.word	gSprites
	.word	sSlotMachine
.Lfe207:
	.size	 CreateReelTimePikachuAuraSprites,.Lfe207-CreateReelTimePikachuAuraSprites
	.section .rodata
.LC388:
	.byte	0x10
	.byte	0x0
.text
	.align	2, 0
	.type	 SpriteCB_ReelTimePikachuAura,function
	.thumb_func
SpriteCB_ReelTimePikachuAura:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldr	r1, .L1311
	mov	r0, sp
	mov	r2, #0x2
	bl	memcpy
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1310	@cond_branch
	ldrh	r0, [r4, #0x3a]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L1310	@cond_branch
	mov	r0, #0x7
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x4
	ldr	r2, .L1311+0x4
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	add	r1, r1, sp
	ldrb	r3, [r1]
	add	r1, r3, #0
	add	r2, r3, #0
	bl	MultiplyInvertedPaletteRGBComponents
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	mov	r1, #0x1
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x3c]
	strh	r0, [r4, #0x3a]
.L1310:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1312:
	.align	2, 0
.L1311:
	.word	.LC388
	.word	0x1030000
.Lfe208:
	.size	 SpriteCB_ReelTimePikachuAura,.Lfe208-SpriteCB_ReelTimePikachuAura
	.align	2, 0
	.type	 SetReelTimePikachuAuraFlashDelay,function
	.thumb_func
SetReelTimePikachuAuraFlashDelay:
	ldr	r3, .L1314
	ldr	r1, .L1314+0x4
	ldr	r1, [r1]
	add	r1, r1, #0x52
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	strh	r0, [r1, #0x3c]
	bx	lr
.L1315:
	.align	2, 0
.L1314:
	.word	gSprites
	.word	sSlotMachine
.Lfe209:
	.size	 SetReelTimePikachuAuraFlashDelay,.Lfe209-SetReelTimePikachuAuraFlashDelay
	.align	2, 0
	.type	 DestroyReelTimePikachuAuraSprites,function
	.thumb_func
DestroyReelTimePikachuAuraSprites:
	push	{r4, lr}
	mov	r0, #0x7
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x4
	ldr	r1, .L1322
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MultiplyInvertedPaletteRGBComponents
	mov	r4, #0x0
.L1320:
	ldr	r0, .L1322+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x52
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1322+0x8
	add	r0, r0, r1
	bl	DestroySprite
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bls	.L1320	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L1323:
	.align	2, 0
.L1322:
	.word	0x1030000
	.word	sSlotMachine
	.word	gSprites
.Lfe210:
	.size	 DestroyReelTimePikachuAuraSprites,.Lfe210-DestroyReelTimePikachuAuraSprites
	.align	2, 0
	.type	 CreateReelTimeExplosionSprite,function
	.thumb_func
CreateReelTimeExplosionSprite:
	push	{lr}
	ldr	r0, .L1325
	mov	r1, #0xa8
	mov	r2, #0x50
	mov	r3, #0x6
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1325+0x4
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r3, [r1, #0x5]
	mov	r2, #0xd
	neg	r2, r2
	and	r2, r2, r3
	mov	r3, #0x4
	orr	r2, r2, r3
	strb	r2, [r1, #0x5]
	ldr	r1, .L1325+0x8
	ldr	r1, [r1]
	add	r1, r1, #0x41
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L1326:
	.align	2, 0
.L1325:
	.word	sSpriteTemplate_ReelTimeExplosion
	.word	gSprites
	.word	sSlotMachine
.Lfe211:
	.size	 CreateReelTimeExplosionSprite,.Lfe211-CreateReelTimeExplosionSprite
	.align	2, 0
	.type	 SpriteCB_ReelTimeExplosion,function
	.thumb_func
SpriteCB_ReelTimeExplosion:
	ldr	r1, .L1328
	ldrh	r1, [r1]
	strh	r1, [r0, #0x26]
	bx	lr
.L1329:
	.align	2, 0
.L1328:
	.word	gSpriteCoordOffsetY
.Lfe212:
	.size	 SpriteCB_ReelTimeExplosion,.Lfe212-SpriteCB_ReelTimeExplosion
	.align	2, 0
	.type	 DestroyReelTimeExplosionSprite,function
	.thumb_func
DestroyReelTimeExplosionSprite:
	push	{lr}
	ldr	r0, .L1331
	ldr	r0, [r0]
	add	r0, r0, #0x41
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1331+0x4
	add	r0, r0, r1
	bl	DestroySprite
	pop	{r0}
	bx	r0
.L1332:
	.align	2, 0
.L1331:
	.word	sSlotMachine
	.word	gSprites
.Lfe213:
	.size	 DestroyReelTimeExplosionSprite,.Lfe213-DestroyReelTimeExplosionSprite
	.section .rodata
	.align	1, 0
.LC400:
	.short	0x0
	.short	0x40
	.short	0x80
	.short	0xc0
.text
	.align	2, 0
	.type	 CreateReelTimeDuckSprites,function
	.thumb_func
CreateReelTimeDuckSprites:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	ldr	r1, .L1339
	mov	r0, sp
	mov	r2, #0x8
	bl	memcpy
	mov	r4, #0x0
.L1337:
	ldr	r0, .L1339+0x4
	ldrh	r0, [r0]
	mov	r1, #0x50
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldr	r0, .L1339+0x8
	mov	r2, #0x44
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r3, r0, #0x4
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	ldr	r1, .L1339+0xc
	add	r3, r3, r1
	ldrb	r2, [r3, #0x5]
	mov	r5, #0xd
	neg	r5, r5
	add	r1, r5, #0
	and	r2, r2, r1
	mov	r1, #0x4
	orr	r2, r2, r1
	strb	r2, [r3, #0x5]
	mov	r1, #0x3e
	add	r1, r1, r3
	mov	ip, r1
	ldrb	r1, [r1]
	mov	r2, #0x2
	orr	r1, r1, r2
	mov	r2, ip
	strb	r1, [r2]
	lsl	r1, r4, #0x1
	add	r1, r1, sp
	ldrh	r1, [r1]
	strh	r1, [r3, #0x2e]
	ldr	r1, .L1339+0x10
	ldr	r1, [r1]
	add	r1, r1, #0x54
	add	r1, r1, r4
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L1337	@cond_branch
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1340:
	.align	2, 0
.L1339:
	.word	.LC400
	.word	gSpriteCoordOffsetX
	.word	sSpriteTemplate_ReelTimeDuck
	.word	gSprites
	.word	sSlotMachine
.Lfe214:
	.size	 CreateReelTimeDuckSprites,.Lfe214-CreateReelTimeDuckSprites
	.align	2, 0
	.type	 SpriteCB_ReelTimeDuck,function
	.thumb_func
SpriteCB_ReelTimeDuck:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x2e]
	sub	r0, r0, #0x2
	mov	r4, #0x0
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	mov	r1, #0x14
	bl	Cos
	strh	r0, [r5, #0x24]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	mov	r1, #0x6
	bl	Sin
	strh	r0, [r5, #0x26]
	add	r1, r5, #0
	add	r1, r1, #0x43
	strb	r4, [r1]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x7f
	ble	.L1342	@cond_branch
	mov	r0, #0x2
	strb	r0, [r1]
.L1342:
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	ble	.L1343	@cond_branch
	add	r3, r5, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1f
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r0, #0x0
	strh	r0, [r5, #0x30]
.L1343:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe215:
	.size	 SpriteCB_ReelTimeDuck,.Lfe215-SpriteCB_ReelTimeDuck
	.align	2, 0
	.type	 DestroyReelTimeDuckSprites,function
	.thumb_func
DestroyReelTimeDuckSprites:
	push	{r4, lr}
	mov	r4, #0x0
.L1348:
	ldr	r0, .L1350
	ldr	r0, [r0]
	add	r0, r0, #0x54
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1350+0x4
	add	r0, r0, r1
	bl	DestroySprite
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L1348	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L1351:
	.align	2, 0
.L1350:
	.word	sSlotMachine
	.word	gSprites
.Lfe216:
	.size	 DestroyReelTimeDuckSprites,.Lfe216-DestroyReelTimeDuckSprites
	.align	2, 0
	.type	 CreateReelTimeSmokeSprite,function
	.thumb_func
CreateReelTimeSmokeSprite:
	push	{r4, lr}
	ldr	r0, .L1353
	mov	r1, #0xa8
	mov	r2, #0x3c
	mov	r3, #0x8
	bl	CreateSprite
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L1353+0x4
	add	r0, r0, r1
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x3
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	bl	InitSpriteAffineAnim
	ldr	r0, .L1353+0x8
	ldr	r0, [r0]
	add	r0, r0, #0x43
	strb	r4, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1354:
	.align	2, 0
.L1353:
	.word	sSpriteTemplate_ReelTimeSmoke
	.word	gSprites
	.word	sSlotMachine
.Lfe217:
	.size	 CreateReelTimeSmokeSprite,.Lfe217-CreateReelTimeSmokeSprite
	.align	2, 0
	.type	 SpriteCB_ReelTimeSmoke,function
	.thumb_func
SpriteCB_ReelTimeSmoke:
	push	{lr}
	add	r3, r0, #0
	ldrh	r2, [r3, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L1356	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1358	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r3, #0x2e]
	b	.L1358
.L1356:
	cmp	r0, #0x1
	bne	.L1359	@cond_branch
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x17
	ble	.L1358	@cond_branch
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	mov	r0, #0x0
	strh	r0, [r3, #0x32]
	b	.L1358
.L1359:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	ble	.L1358	@cond_branch
	mov	r0, #0x1
	strh	r0, [r3, #0x3c]
.L1358:
	ldrh	r0, [r3, #0x30]
	mov	r1, #0xff
	and	r1, r1, r0
	add	r1, r1, #0x10
	strh	r1, [r3, #0x30]
	lsr	r1, r1, #0x8
	ldrh	r0, [r3, #0x26]
	sub	r0, r0, r1
	strh	r0, [r3, #0x26]
	pop	{r0}
	bx	r0
.Lfe218:
	.size	 SpriteCB_ReelTimeSmoke,.Lfe218-SpriteCB_ReelTimeSmoke
	.align	2, 0
	.type	 IsReelTimeSmokeAnimFinished,function
	.thumb_func
IsReelTimeSmokeAnimFinished:
	ldr	r2, .L1364
	ldr	r0, .L1364+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x43
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.L1365:
	.align	2, 0
.L1364:
	.word	gSprites
	.word	sSlotMachine
.Lfe219:
	.size	 IsReelTimeSmokeAnimFinished,.Lfe219-IsReelTimeSmokeAnimFinished
	.align	2, 0
	.type	 DestroyReelTimeSmokeSprite,function
	.thumb_func
DestroyReelTimeSmokeSprite:
	push	{r4, lr}
	ldr	r0, .L1367
	ldr	r0, [r0]
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L1367+0x4
	add	r4, r4, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	pop	{r4}
	pop	{r0}
	bx	r0
.L1368:
	.align	2, 0
.L1367:
	.word	sSlotMachine
	.word	gSprites
.Lfe220:
	.size	 DestroyReelTimeSmokeSprite,.Lfe220-DestroyReelTimeSmokeSprite
	.align	2, 0
	.type	 CreatePikaPowerBoltSprite,function
	.thumb_func
CreatePikaPowerBoltSprite:
	push	{r4, lr}
	add	r3, r0, #0
	add	r2, r1, #0
	ldr	r0, .L1370
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	add	r1, r3, #0
	mov	r3, #0xc
	bl	CreateSprite
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L1370+0x4
	add	r0, r0, r1
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x3
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	bl	InitSpriteAffineAnim
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L1371:
	.align	2, 0
.L1370:
	.word	sSpriteTemplate_PikaPowerBolt
	.word	gSprites
.Lfe221:
	.size	 CreatePikaPowerBoltSprite,.Lfe221-CreatePikaPowerBoltSprite
	.align	2, 0
	.type	 SpriteCB_PikaPowerBolt,function
	.thumb_func
SpriteCB_PikaPowerBolt:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1373	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2, #0x3c]
.L1373:
	pop	{r0}
	bx	r0
.Lfe222:
	.size	 SpriteCB_PikaPowerBolt,.Lfe222-SpriteCB_PikaPowerBolt
	.align	2, 0
	.type	 DestroyPikaPowerBoltSprite,function
	.thumb_func
DestroyPikaPowerBoltSprite:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L1375
	add	r4, r4, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	pop	{r4}
	pop	{r0}
	bx	r0
.L1376:
	.align	2, 0
.L1375:
	.word	gSprites
.Lfe223:
	.size	 DestroyPikaPowerBoltSprite,.Lfe223-DestroyPikaPowerBoltSprite
	.align	2, 0
	.type	 CreateStdDigitalDisplaySprite,function
	.thumb_func
CreateStdDigitalDisplaySprite:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	ldr	r3, .L1378
	lsr	r1, r1, #0x16
	add	r3, r1, r3
	ldr	r5, [r3]
	ldr	r3, .L1378+0x4
	add	r4, r1, r3
	mov	r6, #0x0
	ldrsh	r4, [r4, r6]
	add	r3, r3, #0x2
	add	r1, r1, r3
	mov	r6, #0x0
	ldrsh	r3, [r1, r6]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	str	r2, [sp]
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateDigitalDisplaySprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1379:
	.align	2, 0
.L1378:
	.word	sDigitalDisplay_SpriteCallbacks
	.word	sDigitalDisplay_SpriteCoords
.Lfe224:
	.size	 CreateStdDigitalDisplaySprite,.Lfe224-CreateStdDigitalDisplaySprite
	.align	2, 0
	.type	 CreateDigitalDisplaySprite,function
	.thumb_func
CreateDigitalDisplaySprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x18
	add	r4, r0, #0
	mov	r8, r1
	add	r1, r2, #0
	add	r2, r3, #0
	ldr	r5, [sp, #0x34]
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r9, r5
	ldr	r0, .L1382
	lsr	r4, r4, #0x16
	add	r0, r4, r0
	mov	r3, sp
	ldr	r0, [r0]
	ldmia	r0!, {r5, r6, r7}
	stmia	r3!, {r5, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r3!, {r5, r6, r7}
	ldr	r0, .L1382+0x4
	add	r0, r4, r0
	ldr	r0, [r0]
	str	r0, [sp, #0xc]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r0, sp
	mov	r3, #0x10
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r0, #0
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	ldr	r1, .L1382+0x8
	add	r2, r0, r1
	ldrb	r0, [r2, #0x5]
	mov	r1, #0xc
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	mov	r0, r8
	str	r0, [r2, #0x1c]
	mov	r5, r9
	strh	r5, [r2, #0x3a]
	mov	r0, #0x1
	strh	r0, [r2, #0x3c]
	ldr	r0, .L1382+0xc
	add	r4, r4, r0
	ldr	r1, [r4]
	cmp	r1, #0
	beq	.L1381	@cond_branch
	add	r0, r2, #0
	bl	SetSubspriteTables
.L1381:
	add	r0, r7, #0
	add	sp, sp, #0x18
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1383:
	.align	2, 0
.L1382:
	.word	sSpriteTemplates_DigitalDisplay
	.word	sImageTables_DigitalDisplay
	.word	gSprites
	.word	sSubspriteTables_DigitalDisplay
.Lfe225:
	.size	 CreateDigitalDisplaySprite,.Lfe225-CreateDigitalDisplaySprite
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_Static,function
	.thumb_func
SpriteCB_DigitalDisplay_Static:
	mov	r1, #0x0
	strh	r1, [r0, #0x3c]
	bx	lr
.Lfe226:
	.size	 SpriteCB_DigitalDisplay_Static,.Lfe226-SpriteCB_DigitalDisplay_Static
	.section .rodata
	.align	1, 0
.LC425:
	.short	0x4
	.short	-0x4
	.short	0x4
	.short	-0x4
	.align	1, 0
.LC427:
	.short	0x4
	.short	0x4
	.short	-0x4
	.short	-0x4
.text
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_Smoke,function
	.thumb_func
SpriteCB_DigitalDisplay_Smoke:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	ldr	r1, .L1388
	mov	r0, sp
	mov	r2, #0x8
	bl	memcpy
	add	r5, sp, #0x8
	ldr	r1, .L1388+0x4
	add	r0, r5, #0
	mov	r2, #0x8
	bl	memcpy
	ldrh	r0, [r4, #0x30]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	ble	.L1386	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x42
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1a
	lsr	r0, r0, #0x1a
	mov	r1, #0x1
	eor	r1, r1, r0
	mov	r0, #0x40
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
.L1386:
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	add	r0, r0, #0x42
	ldrb	r1, [r0]
	mov	r0, #0x3f
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1387	@cond_branch
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4, #0x24]
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	add	r0, r5, r0
	ldrh	r0, [r0]
	strh	r0, [r4, #0x26]
.L1387:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1389:
	.align	2, 0
.L1388:
	.word	.LC425
	.word	.LC427
.Lfe227:
	.size	 SpriteCB_DigitalDisplay_Smoke,.Lfe227-SpriteCB_DigitalDisplay_Smoke
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_SmokeNE,function
	.thumb_func
SpriteCB_DigitalDisplay_SmokeNE:
	push	{lr}
	add	r3, r0, #0
	add	r3, r3, #0x3f
	ldrb	r1, [r3]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r3]
	bl	SpriteCB_DigitalDisplay_Smoke
	pop	{r0}
	bx	r0
.Lfe228:
	.size	 SpriteCB_DigitalDisplay_SmokeNE,.Lfe228-SpriteCB_DigitalDisplay_SmokeNE
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_SmokeSW,function
	.thumb_func
SpriteCB_DigitalDisplay_SmokeSW:
	push	{lr}
	add	r3, r0, #0
	add	r3, r3, #0x3f
	ldrb	r1, [r3]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r3]
	bl	SpriteCB_DigitalDisplay_Smoke
	pop	{r0}
	bx	r0
.Lfe229:
	.size	 SpriteCB_DigitalDisplay_SmokeSW,.Lfe229-SpriteCB_DigitalDisplay_SmokeSW
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_SmokeSE,function
	.thumb_func
SpriteCB_DigitalDisplay_SmokeSE:
	push	{lr}
	add	r3, r0, #0
	add	r3, r3, #0x3f
	ldrb	r1, [r3]
	mov	r2, #0x1
	orr	r1, r1, r2
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r3]
	bl	SpriteCB_DigitalDisplay_Smoke
	pop	{r0}
	bx	r0
.Lfe230:
	.size	 SpriteCB_DigitalDisplay_SmokeSE,.Lfe230-SpriteCB_DigitalDisplay_SmokeSE
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_Reel,function
	.thumb_func
SpriteCB_DigitalDisplay_Reel:
	push	{lr}
	add	r2, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x1
	beq	.L1397	@cond_branch
	cmp	r0, #0x1
	bgt	.L1404	@cond_branch
	cmp	r0, #0
	beq	.L1395	@cond_branch
	b	.L1394
.L1404:
	cmp	r0, #0x2
	beq	.L1399	@cond_branch
	cmp	r0, #0x3
	beq	.L1401	@cond_branch
	b	.L1394
.L1395:
	ldrh	r0, [r2, #0x20]
	add	r0, r0, #0x4
	strh	r0, [r2, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xcf
	ble	.L1394	@cond_branch
	mov	r0, #0xd0
	strh	r0, [r2, #0x20]
	b	.L1405
.L1397:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5a
	ble	.L1394	@cond_branch
	b	.L1405
.L1399:
	ldrh	r0, [r2, #0x20]
	add	r0, r0, #0x4
	strh	r0, [r2, #0x20]
	lsl	r0, r0, #0x10
	ldr	r1, .L1406
	cmp	r0, r1
	ble	.L1394	@cond_branch
.L1405:
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	b	.L1394
.L1407:
	.align	2, 0
.L1406:
	.word	0x10f0000
.L1401:
	mov	r0, #0x0
	strh	r0, [r2, #0x3c]
.L1394:
	pop	{r0}
	bx	r0
.Lfe231:
	.size	 SpriteCB_DigitalDisplay_Reel,.Lfe231-SpriteCB_DigitalDisplay_Reel
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_Time,function
	.thumb_func
SpriteCB_DigitalDisplay_Time:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	beq	.L1412	@cond_branch
	cmp	r0, #0x1
	bgt	.L1419	@cond_branch
	cmp	r0, #0
	beq	.L1410	@cond_branch
	b	.L1409
.L1419:
	cmp	r0, #0x2
	beq	.L1414	@cond_branch
	cmp	r0, #0x3
	beq	.L1416	@cond_branch
	b	.L1409
.L1410:
	ldrh	r0, [r1, #0x20]
	sub	r0, r0, #0x4
	strh	r0, [r1, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xd0
	bgt	.L1409	@cond_branch
	mov	r0, #0xd0
	strh	r0, [r1, #0x20]
	b	.L1420
.L1412:
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5a
	ble	.L1409	@cond_branch
	b	.L1420
.L1414:
	ldrh	r0, [r1, #0x20]
	sub	r0, r0, #0x4
	strh	r0, [r1, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x90
	bgt	.L1409	@cond_branch
.L1420:
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	b	.L1409
.L1416:
	mov	r0, #0x0
	strh	r0, [r1, #0x3c]
.L1409:
	pop	{r0}
	bx	r0
.Lfe232:
	.size	 SpriteCB_DigitalDisplay_Time,.Lfe232-SpriteCB_DigitalDisplay_Time
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_ReelTimeNumber,function
	.thumb_func
SpriteCB_DigitalDisplay_ReelTimeNumber:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bhi	.L1422	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1436
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1437:
	.align	2, 0
.L1436:
	.word	.L1433
	.align	2, 0
	.align	2, 0
.L1433:
	.word	.L1423
	.word	.L1424
	.word	.L1426
	.word	.L1428
	.word	.L1430
	.word	.L1432
.L1423:
	ldr	r0, .L1438
	ldr	r0, [r0]
	ldrb	r1, [r0, #0xa]
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
.L1424:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L1422	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	b	.L1422
.L1439:
	.align	2, 0
.L1438:
	.word	sSlotMachine
.L1426:
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x4
	strh	r0, [r4, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xcf
	ble	.L1422	@cond_branch
	mov	r0, #0xd0
	strh	r0, [r4, #0x20]
	b	.L1435
.L1428:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5a
	ble	.L1422	@cond_branch
	b	.L1435
.L1430:
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x4
	strh	r0, [r4, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf7
	ble	.L1422	@cond_branch
.L1435:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L1422
.L1432:
	mov	r0, #0x0
	strh	r0, [r4, #0x3c]
.L1422:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe233:
	.size	 SpriteCB_DigitalDisplay_ReelTimeNumber,.Lfe233-SpriteCB_DigitalDisplay_ReelTimeNumber
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_PokeballRocking,function
	.thumb_func
SpriteCB_DigitalDisplay_PokeballRocking:
	push	{lr}
	add	r3, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x1
	beq	.L1443	@cond_branch
	cmp	r0, #0x1
	bgt	.L1451	@cond_branch
	cmp	r0, #0
	beq	.L1442	@cond_branch
	b	.L1441
.L1451:
	cmp	r0, #0x2
	beq	.L1445	@cond_branch
	b	.L1441
.L1442:
	add	r2, r3, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
.L1443:
	ldrh	r0, [r3, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r3, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6f
	ble	.L1441	@cond_branch
	mov	r0, #0x70
	strh	r0, [r3, #0x22]
	mov	r0, #0x10
	strh	r0, [r3, #0x30]
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	b	.L1441
.L1445:
	mov	r0, #0x32
	ldrsh	r2, [r3, r0]
	cmp	r2, #0
	bne	.L1446	@cond_branch
	ldrh	r0, [r3, #0x22]
	ldrh	r1, [r3, #0x30]
	sub	r0, r0, r1
	strh	r0, [r3, #0x22]
	neg	r1, r1
	strh	r1, [r3, #0x30]
	ldrh	r0, [r3, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1446	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x12
	strh	r0, [r3, #0x30]
	strh	r2, [r3, #0x34]
	add	r1, r0, #0
	cmp	r1, #0
	bne	.L1446	@cond_branch
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	strh	r1, [r3, #0x3c]
	add	r2, r3, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L1446:
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	mov	r1, #0x7
	and	r0, r0, r1
	strh	r0, [r3, #0x32]
.L1441:
	pop	{r0}
	bx	r0
.Lfe234:
	.size	 SpriteCB_DigitalDisplay_PokeballRocking,.Lfe234-SpriteCB_DigitalDisplay_PokeballRocking
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_Stop,function
	.thumb_func
SpriteCB_DigitalDisplay_Stop:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L1454	@cond_branch
	cmp	r0, #0x1
	beq	.L1456	@cond_branch
	b	.L1453
.L1454:
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L1453	@cond_branch
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	b	.L1453
.L1456:
	ldrh	r0, [r1, #0x22]
	add	r0, r0, #0x2
	strh	r0, [r1, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2f
	ble	.L1453	@cond_branch
	mov	r0, #0x30
	strh	r0, [r1, #0x22]
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	mov	r0, #0x0
	strh	r0, [r1, #0x3c]
.L1453:
	pop	{r0}
	bx	r0
.Lfe235:
	.size	 SpriteCB_DigitalDisplay_Stop,.Lfe235-SpriteCB_DigitalDisplay_Stop
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_AButtonStop,function
	.thumb_func
SpriteCB_DigitalDisplay_AButtonStop:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1462	@cond_branch
	cmp	r0, #0x1
	beq	.L1464	@cond_branch
	b	.L1461
.L1462:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x20
	ble	.L1461	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	mov	r0, #0x5
	strh	r0, [r4, #0x30]
	ldrb	r0, [r4, #0x1]
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x30]
	lsl	r1, r0, #0x4
	orr	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x10
	mov	r0, #0x4c
	bl	SetGpuReg
	b	.L1461
.L1464:
	ldrh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, r1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1465	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
.L1465:
	ldrh	r0, [r4, #0x30]
	lsl	r1, r0, #0x4
	orr	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x10
	mov	r0, #0x4c
	bl	SetGpuReg
	ldrh	r1, [r4, #0x32]
	mov	r0, #0xff
	and	r0, r0, r1
	add	r0, r0, #0x80
	strh	r0, [r4, #0x32]
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L1461	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x3c]
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
.L1461:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe236:
	.size	 SpriteCB_DigitalDisplay_AButtonStop,.Lfe236-SpriteCB_DigitalDisplay_AButtonStop
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_PokeballShining,function
	.thumb_func
SpriteCB_DigitalDisplay_PokeballShining:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x2
	bgt	.L1470	@cond_branch
	ldr	r1, .L1474
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r4, [r0]
	mov	r0, #0x6
	bl	IndexOfSpritePaletteTag
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x20
	bl	LoadPalette
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L1472	@cond_branch
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	mov	r0, #0x0
	strh	r0, [r5, #0x32]
	b	.L1472
.L1475:
	.align	2, 0
.L1474:
	.word	sPokeballShiningPalTable
.L1470:
	ldr	r1, .L1476
	mov	r2, #0x30
	ldrsh	r0, [r5, r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r4, [r0]
	mov	r0, #0x6
	bl	IndexOfSpritePaletteTag
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x20
	bl	LoadPalette
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r5, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x18
	ble	.L1472	@cond_branch
	strh	r1, [r5, #0x30]
	strh	r1, [r5, #0x32]
.L1472:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnimIfDifferent
	mov	r0, #0x0
	strh	r0, [r5, #0x3c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1477:
	.align	2, 0
.L1476:
	.word	sPokeballShiningPalTable
.Lfe237:
	.size	 SpriteCB_DigitalDisplay_PokeballShining,.Lfe237-SpriteCB_DigitalDisplay_PokeballShining
	.section .rodata
	.align	1, 0
.LC432:
	.short	0x0
	.short	-0x28
	.short	0x0
	.short	0x0
	.short	0x30
	.short	0x0
	.short	0x18
	.short	0x0
	.align	1, 0
.LC434:
	.short	-0x20
	.short	0x0
	.short	-0x20
	.short	-0x30
	.short	0x0
	.short	-0x30
	.short	0x0
	.short	-0x30
	.align	1, 0
.LC436:
	.short	0x10
	.short	0xc
	.short	0x10
	.short	0x0
	.short	0x0
	.short	0x4
	.short	0x8
	.short	0x8
.text
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_RegBonus,function
	.thumb_func
SpriteCB_DigitalDisplay_RegBonus:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x30
	add	r4, r0, #0
	ldr	r1, .L1497
	mov	r0, sp
	mov	r2, #0x10
	bl	memcpy
	add	r6, sp, #0x10
	ldr	r1, .L1497+0x4
	add	r0, r6, #0
	mov	r2, #0x10
	bl	memcpy
	add	r5, sp, #0x20
	ldr	r1, .L1497+0x8
	add	r0, r5, #0
	mov	r2, #0x10
	bl	memcpy
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L1481	@cond_branch
	cmp	r0, #0x1
	bgt	.L1493	@cond_branch
	cmp	r0, #0
	beq	.L1480	@cond_branch
	b	.L1479
.L1498:
	.align	2, 0
.L1497:
	.word	.LC432
	.word	.LC434
	.word	.LC436
.L1493:
	cmp	r0, #0x2
	beq	.L1483	@cond_branch
	b	.L1479
.L1480:
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4, #0x24]
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	add	r0, r6, r0
	ldrh	r0, [r0]
	strh	r0, [r4, #0x26]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r5, r0
	ldrh	r0, [r0]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
.L1481:
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L1479	@cond_branch
	b	.L1494
.L1483:
	ldrh	r0, [r4, #0x24]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	ble	.L1484	@cond_branch
	sub	r0, r0, #0x4
	b	.L1495
.L1484:
	cmp	r1, #0
	bge	.L1485	@cond_branch
	add	r0, r0, #0x4
.L1495:
	strh	r0, [r4, #0x24]
.L1485:
	ldrh	r0, [r4, #0x26]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	ble	.L1487	@cond_branch
	sub	r0, r0, #0x4
	b	.L1496
.L1487:
	cmp	r1, #0
	bge	.L1488	@cond_branch
	add	r0, r0, #0x4
.L1496:
	strh	r0, [r4, #0x26]
.L1488:
	ldr	r0, [r4, #0x24]
	cmp	r0, #0
	bne	.L1479	@cond_branch
.L1494:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
.L1479:
	add	sp, sp, #0x30
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe238:
	.size	 SpriteCB_DigitalDisplay_RegBonus,.Lfe238-SpriteCB_DigitalDisplay_RegBonus
	.section .rodata
	.align	1, 0
.LC438:
	.short	0xa0
	.short	0xc0
	.short	0xe0
	.short	0x68
	.short	0x50
	.short	0x40
	.short	0x30
	.short	0x18
.text
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_BigBonus,function
	.thumb_func
SpriteCB_DigitalDisplay_BigBonus:
	push	{r4, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	ldr	r1, .L1502
	mov	r0, sp
	mov	r2, #0x10
	bl	memcpy
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L1500	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	mov	r0, #0xc
	strh	r0, [r4, #0x30]
.L1500:
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L1501	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x30]
.L1501:
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L1503:
	.align	2, 0
.L1502:
	.word	.LC438
.Lfe239:
	.size	 SpriteCB_DigitalDisplay_BigBonus,.Lfe239-SpriteCB_DigitalDisplay_BigBonus
	.align	2, 0
	.type	 SpriteCB_DigitalDisplay_AButtonStart,function
	.thumb_func
SpriteCB_DigitalDisplay_AButtonStart:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L1507	@cond_branch
	cmp	r0, #0x1
	bgt	.L1519	@cond_branch
	cmp	r0, #0
	beq	.L1506	@cond_branch
	b	.L1505
.L1519:
	cmp	r0, #0x2
	beq	.L1511	@cond_branch
	cmp	r0, #0x3
	beq	.L1513	@cond_branch
	b	.L1505
.L1506:
	ldr	r0, .L1521
	ldr	r2, [r0]
	add	r1, r2, #0
	add	r1, r1, #0x5c
	mov	r0, #0x2f
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r0, #0x3f
	strh	r0, [r1]
	sub	r1, r1, #0x4
	ldr	r0, .L1521+0x4
	strh	r0, [r1]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
.L1507:
	ldrh	r0, [r5, #0x30]
	add	r2, r0, #0x2
	strh	r2, [r5, #0x30]
	add	r0, r0, #0xb2
	strh	r0, [r5, #0x32]
	mov	r1, #0xf0
	sub	r1, r1, r2
	strh	r1, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xd0
	ble	.L1508	@cond_branch
	mov	r0, #0xd0
	strh	r0, [r5, #0x32]
.L1508:
	mov	r1, #0x34
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xcf
	bgt	.L1509	@cond_branch
	mov	r0, #0xd0
	strh	r0, [r5, #0x34]
.L1509:
	ldr	r0, .L1521
	ldr	r2, [r0]
	ldrh	r0, [r5, #0x32]
	lsl	r0, r0, #0x8
	ldrh	r1, [r5, #0x34]
	orr	r0, r0, r1
	add	r1, r2, #0
	add	r1, r1, #0x58
	strh	r0, [r1]
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x33
	ble	.L1505	@cond_branch
	b	.L1520
.L1522:
	.align	2, 0
.L1521:
	.word	sSlotMachine
	.word	0x2088
.L1511:
	ldr	r6, .L1523
	ldr	r0, [r6]
	mov	r1, #0x12
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L1505	@cond_branch
	ldr	r1, .L1523+0x4
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x5
	mov	r2, #0xd0
	mov	r3, #0x74
	bl	AddDigitalDisplaySprite
	ldr	r2, [r6]
	add	r1, r2, #0
	add	r1, r1, #0x58
	ldr	r0, .L1523+0x8
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r0, #0xd1
	lsl	r0, r0, #0x7
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r0, #0x2f
	strh	r0, [r1]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	strh	r4, [r5, #0x30]
.L1513:
	ldrh	r0, [r5, #0x30]
	add	r2, r0, #0x2
	strh	r2, [r5, #0x30]
	add	r0, r0, #0xc2
	strh	r0, [r5, #0x32]
	mov	r1, #0xe0
	sub	r1, r1, r2
	strh	r1, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xd0
	ble	.L1514	@cond_branch
	mov	r0, #0xd0
	strh	r0, [r5, #0x32]
.L1514:
	mov	r1, #0x34
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xcf
	bgt	.L1515	@cond_branch
	mov	r0, #0xd0
	strh	r0, [r5, #0x34]
.L1515:
	ldr	r0, .L1523
	ldr	r2, [r0]
	ldrh	r0, [r5, #0x32]
	lsl	r0, r0, #0x8
	ldrh	r1, [r5, #0x34]
	orr	r0, r0, r1
	add	r1, r2, #0
	add	r1, r1, #0x58
	strh	r0, [r1]
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xf
	ble	.L1505	@cond_branch
.L1520:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	add	r1, r2, #0
	add	r1, r1, #0x5c
	mov	r0, #0x3f
	strh	r0, [r1]
.L1505:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1524:
	.align	2, 0
.L1523:
	.word	sSlotMachine
	.word	SpriteCallbackDummy
	.word	0xc0e0
.Lfe240:
	.size	 SpriteCB_DigitalDisplay_AButtonStart,.Lfe240-SpriteCB_DigitalDisplay_AButtonStart
	.align	2, 0
	.type	 EndDigitalDisplayScene_Dummy,function
	.thumb_func
EndDigitalDisplayScene_Dummy:
	bx	lr
.Lfe241:
	.size	 EndDigitalDisplayScene_Dummy,.Lfe241-EndDigitalDisplayScene_Dummy
	.align	2, 0
	.type	 EndDigitalDisplayScene_StopReel,function
	.thumb_func
EndDigitalDisplayScene_StopReel:
	push	{lr}
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.Lfe242:
	.size	 EndDigitalDisplayScene_StopReel,.Lfe242-EndDigitalDisplayScene_StopReel
	.align	2, 0
	.type	 EndDigitalDisplayScene_Win,function
	.thumb_func
EndDigitalDisplayScene_Win:
	push	{r4, lr}
	ldr	r0, .L1528
	ldr	r4, [r0]
	mov	r0, #0x6
	bl	IndexOfSpritePaletteTag
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x20
	bl	LoadPalette
	pop	{r4}
	pop	{r0}
	bx	r0
.L1529:
	.align	2, 0
.L1528:
	.word	sDigitalDisplay_Pal
.Lfe243:
	.size	 EndDigitalDisplayScene_Win,.Lfe243-EndDigitalDisplayScene_Win
	.align	2, 0
	.type	 EndDigitalDisplayScene_InsertBet,function
	.thumb_func
EndDigitalDisplayScene_InsertBet:
	ldr	r0, .L1531
	ldr	r2, [r0]
	add	r1, r2, #0
	add	r1, r1, #0x58
	mov	r0, #0xf0
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r0, #0xa0
	strh	r0, [r1]
	add	r0, r2, #0
	add	r0, r0, #0x5c
	mov	r1, #0x3f
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	bx	lr
.L1532:
	.align	2, 0
.L1531:
	.word	sSlotMachine
.Lfe244:
	.size	 EndDigitalDisplayScene_InsertBet,.Lfe244-EndDigitalDisplayScene_InsertBet
	.align	2, 0
	.type	 LoadSlotMachineGfx,function
	.thumb_func
LoadSlotMachineGfx:
	push	{r4, r5, r6, lr}
	bl	LoadReelBackground
	ldr	r4, .L1539
	mov	r0, #0xc8
	lsl	r0, r0, #0x6
	bl	Alloc
	add	r1, r0, #0
	str	r1, [r4]
	ldr	r0, .L1539+0x4
	bl	LZDecompressWram
	ldr	r4, .L1539+0x8
	mov	r0, #0xd8
	lsl	r0, r0, #0x6
	bl	Alloc
	add	r1, r0, #0
	str	r1, [r4]
	ldr	r0, .L1539+0xc
	bl	LZDecompressWram
	ldr	r4, .L1539+0x10
	mov	r0, #0xb0
	bl	AllocZeroed
	str	r0, [r4]
	mov	r3, #0x0
	ldr	r5, .L1539+0x14
	add	r6, r4, #0
.L1537:
	ldr	r2, [r4]
	lsl	r1, r3, #0x3
	add	r2, r1, r2
	add	r1, r1, r5
	ldr	r0, [r1]
	str	r0, [r2]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r2, #0x4]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r2, #0x6]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x15
	bls	.L1537	@cond_branch
	ldr	r3, [r6]
	add	r2, r3, #0
	add	r2, r2, #0x88
	ldr	r0, .L1539
	ldr	r1, [r0]
	mov	r4, #0xa0
	lsl	r4, r4, #0x4
	add	r0, r1, r4
	str	r0, [r2]
	add	r2, r2, #0x8
	mov	r4, #0xa0
	lsl	r4, r4, #0x5
	add	r0, r1, r4
	str	r0, [r2]
	add	r2, r2, #0x8
	mov	r4, #0xb0
	lsl	r4, r4, #0x5
	add	r0, r1, r4
	str	r0, [r2]
	add	r0, r3, #0
	add	r0, r0, #0xa0
	mov	r2, #0xc8
	lsl	r2, r2, #0x5
	add	r1, r1, r2
	str	r1, [r0]
	add	r0, r3, #0
	bl	LoadSpriteSheets
	ldr	r0, .L1539+0x18
	bl	LoadSpritePalettes
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1540:
	.align	2, 0
.L1539:
	.word	sDigitalDisplayGfxPtr
	.word	gSlotMachineDigitalDisplay_Gfx
	.word	sReelTimeGfxPtr
	.word	sReelTimeGfx
	.word	sSlotMachineSpritesheetsPtr
	.word	sSlotMachineSpriteSheets
	.word	sSlotMachineSpritePalettes
.Lfe245:
	.size	 LoadSlotMachineGfx,.Lfe245-LoadSlotMachineGfx
	.align	2, 0
	.type	 LoadReelBackground,function
	.thumb_func
LoadReelBackground:
	push	{r4, r5, r6, lr}
	ldr	r5, .L1552
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r5]
	ldr	r4, .L1552+0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	str	r0, [r4]
	add	r3, r0, #0
	mov	r1, #0x0
	add	r6, r4, #0
	ldr	r0, .L1552+0x8
	ldr	r4, [r0]
.L1545:
	mov	r2, #0x0
	add	r1, r1, #0x1
.L1549:
	add	r0, r4, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r3, #0x1
	cmp	r2, #0x1f
	bls	.L1549	@cond_branch
	lsl	r0, r1, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3f
	bls	.L1545	@cond_branch
	ldr	r0, [r5]
	ldr	r1, [r6]
	str	r1, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	strh	r1, [r0, #0x4]
	mov	r1, #0x11
	strh	r1, [r0, #0x6]
	bl	LoadSpriteSheet
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1553:
	.align	2, 0
.L1552:
	.word	sReelBackgroundSpriteSheet
	.word	sReelBackground_Gfx
	.word	sReelBackground_Tilemap
.Lfe246:
	.size	 LoadReelBackground,.Lfe246-LoadReelBackground
	.align	2, 0
	.type	 LoadMenuGfx,function
	.thumb_func
LoadMenuGfx:
	push	{r4, r5, lr}
	ldr	r4, .L1555
	mov	r5, #0x88
	lsl	r5, r5, #0x6
	add	r0, r5, #0
	bl	Alloc
	add	r1, r0, #0
	str	r1, [r4]
	ldr	r0, .L1555+0x4
	bl	LZDecompressWram
	ldr	r1, [r4]
	mov	r0, #0x2
	add	r2, r5, #0
	mov	r3, #0x0
	bl	LoadBgTiles
	ldr	r0, .L1555+0x8
	mov	r1, #0x0
	mov	r2, #0xa0
	bl	LoadPalette
	ldr	r0, .L1555+0xc
	mov	r1, #0xd0
	mov	r2, #0x20
	bl	LoadPalette
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1556:
	.align	2, 0
.L1555:
	.word	sMenuGfx
	.word	gSlotMachineMenu_Gfx
	.word	gSlotMachineMenu_Pal
	.word	sUnkPalette
.Lfe247:
	.size	 LoadMenuGfx,.Lfe247-LoadMenuGfx
	.align	2, 0
	.type	 LoadMenuAndReelOverlayTilemaps,function
	.thumb_func
LoadMenuAndReelOverlayTilemaps:
	push	{lr}
	bl	LoadSlotMachineMenuTilemap
	bl	LoadSlotMachineReelOverlay
	pop	{r0}
	bx	r0
.Lfe248:
	.size	 LoadMenuAndReelOverlayTilemaps,.Lfe248-LoadMenuAndReelOverlayTilemaps
	.align	2, 0
	.type	 LoadSlotMachineMenuTilemap,function
	.thumb_func
LoadSlotMachineMenuTilemap:
	push	{lr}
	ldr	r1, .L1559
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	mov	r0, #0x2
	mov	r3, #0x0
	bl	LoadBgTilemap
	pop	{r0}
	bx	r0
.L1560:
	.align	2, 0
.L1559:
	.word	gSlotMachineMenu_Tilemap
.Lfe249:
	.size	 LoadSlotMachineMenuTilemap,.Lfe249-LoadSlotMachineMenuTilemap
	.align	2, 0
	.type	 LoadSlotMachineReelOverlay,function
	.thumb_func
LoadSlotMachineReelOverlay:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r1, #0x4
	ldr	r0, .L1577
	mov	r8, r0
.L1565:
	mov	r0, #0x0
	lsl	r1, r1, #0x10
	mov	r9, r1
.L1569:
	mov	r2, r8
	ldr	r1, [r2]
	mov	r2, r9
	asr	r6, r2, #0x10
	lsl	r4, r0, #0x10
	asr	r4, r4, #0x10
	add	r5, r6, r4
	add	r3, r5, #0
	add	r3, r3, #0xa0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x3
	mov	r2, #0x2
	bl	LoadBgTilemap
	mov	r0, r8
	ldr	r1, [r0]
	add	r1, r1, #0x2
	mov	r2, #0xd0
	lsl	r2, r2, #0x1
	add	r3, r5, r2
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x3
	mov	r2, #0x2
	bl	LoadBgTilemap
	mov	r0, r8
	ldr	r1, [r0]
	add	r1, r1, #0x4
	add	r3, r5, #0
	add	r3, r3, #0xc0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x3
	mov	r2, #0x2
	bl	LoadBgTilemap
	mov	r2, r8
	ldr	r1, [r2]
	add	r1, r1, #0x6
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	add	r7, r0, #0
	add	r3, r5, r7
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x3
	mov	r2, #0x2
	bl	LoadBgTilemap
	add	r4, r4, #0x1
	lsl	r4, r4, #0x10
	lsr	r0, r4, #0x10
	asr	r4, r4, #0x10
	cmp	r4, #0x3
	ble	.L1569	@cond_branch
	mov	r2, r8
	ldr	r1, [r2]
	add	r1, r1, #0x8
	add	r3, r6, #0
	add	r3, r3, #0xc0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x3
	mov	r2, #0x2
	bl	LoadBgTilemap
	mov	r0, r8
	ldr	r1, [r0]
	add	r1, r1, #0xa
	add	r3, r6, r7
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x3
	mov	r2, #0x2
	bl	LoadBgTilemap
	mov	r0, #0x7
.L1574:
	mov	r2, r8
	ldr	r1, [r2]
	add	r1, r1, #0xc
	lsl	r4, r0, #0x10
	asr	r4, r4, #0x10
	lsl	r3, r4, #0x5
	mov	r0, r9
	asr	r5, r0, #0x10
	add	r3, r5, r3
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x3
	mov	r2, #0x2
	bl	LoadBgTilemap
	add	r4, r4, #0x1
	lsl	r4, r4, #0x10
	lsr	r0, r4, #0x10
	asr	r4, r4, #0x10
	cmp	r4, #0xb
	ble	.L1574	@cond_branch
	add	r0, r5, #0x5
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x11
	ble	.L1565	@cond_branch
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1578:
	.align	2, 0
.L1577:
	.word	sReelOverlay_Tilemap
.Lfe250:
	.size	 LoadSlotMachineReelOverlay,.Lfe250-LoadSlotMachineReelOverlay
	.align	2, 0
	.type	 SetReelButtonTilemap,function
	.thumb_func
SetReelButtonTilemap:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, [sp, #0x10]
	ldr	r6, .L1580
	ldr	r0, [r6]
	strh	r1, [r0]
	ldr	r1, [r6]
	strh	r2, [r1, #0x2]
	strh	r3, [r1, #0x4]
	strh	r5, [r1, #0x6]
	lsl	r4, r4, #0x10
	asr	r5, r4, #0x10
	mov	r0, #0xf0
	lsl	r0, r0, #0x11
	add	r4, r4, r0
	lsr	r4, r4, #0x10
	mov	r0, #0x2
	mov	r2, #0x2
	add	r3, r4, #0
	bl	LoadBgTilemap
	ldr	r1, [r6]
	add	r1, r1, #0x2
	ldr	r0, .L1580+0x4
	add	r3, r5, r0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x2
	mov	r2, #0x2
	bl	LoadBgTilemap
	ldr	r1, [r6]
	add	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	add	r3, r5, r0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x2
	mov	r2, #0x2
	bl	LoadBgTilemap
	ldr	r1, [r6]
	add	r1, r1, #0x6
	ldr	r0, .L1580+0x8
	add	r5, r5, r0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r0, #0x2
	mov	r2, #0x2
	add	r3, r5, #0
	bl	LoadBgTilemap
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1581:
	.align	2, 0
.L1580:
	.word	sReelButtonPress_Tilemap
	.word	0x1e1
	.word	0x201
.Lfe251:
	.size	 SetReelButtonTilemap,.Lfe251-SetReelButtonTilemap
	.align	2, 0
	.type	 LoadInfoBoxTilemap,function
	.thumb_func
LoadInfoBoxTilemap:
	push	{lr}
	ldr	r1, .L1583
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	mov	r0, #0x2
	mov	r3, #0x0
	bl	LoadBgTilemap
	mov	r0, #0x3
	bl	HideBg
	pop	{r0}
	bx	r0
.L1584:
	.align	2, 0
.L1583:
	.word	gSlotMachineInfoBox_Tilemap
.Lfe252:
	.size	 LoadInfoBoxTilemap,.Lfe252-LoadInfoBoxTilemap
	.align	2, 0
	.type	 SetDigitalDisplayImagePtrs,function
	.thumb_func
SetDigitalDisplayImagePtrs:
	ldr	r1, .L1586
	ldr	r0, .L1586+0x4
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r0, .L1586+0x8
	ldr	r0, [r0]
	str	r0, [r1, #0x4]
	ldr	r0, .L1586+0xc
	ldr	r0, [r0]
	str	r0, [r1, #0x8]
	ldr	r0, .L1586+0x10
	ldr	r0, [r0]
	str	r0, [r1, #0xc]
	ldr	r0, .L1586+0x14
	ldr	r0, [r0]
	str	r0, [r1, #0x10]
	ldr	r0, .L1586+0x18
	ldr	r0, [r0]
	str	r0, [r1, #0x14]
	ldr	r0, .L1586+0x1c
	ldr	r0, [r0]
	str	r0, [r1, #0x18]
	ldr	r0, .L1586+0x20
	ldr	r0, [r0]
	str	r0, [r1, #0x1c]
	ldr	r0, .L1586+0x24
	ldr	r0, [r0]
	str	r0, [r1, #0x20]
	ldr	r0, .L1586+0x28
	ldr	r0, [r0]
	str	r0, [r1, #0x24]
	ldr	r0, .L1586+0x2c
	ldr	r0, [r0]
	str	r0, [r1, #0x28]
	str	r0, [r1, #0x2c]
	str	r0, [r1, #0x30]
	str	r0, [r1, #0x34]
	ldr	r0, .L1586+0x30
	ldr	r0, [r0]
	str	r0, [r1, #0x38]
	str	r0, [r1, #0x3c]
	str	r0, [r1, #0x40]
	str	r0, [r1, #0x44]
	str	r0, [r1, #0x48]
	ldr	r0, .L1586+0x34
	ldr	r0, [r0]
	str	r0, [r1, #0x4c]
	str	r0, [r1, #0x50]
	str	r0, [r1, #0x54]
	ldr	r0, .L1586+0x38
	ldr	r0, [r0]
	str	r0, [r1, #0x58]
	str	r0, [r1, #0x5c]
	str	r0, [r1, #0x60]
	mov	r0, #0x0
	str	r0, [r1, #0x64]
	bx	lr
.L1587:
	.align	2, 0
.L1586:
	.word	sImageTables_DigitalDisplay
	.word	sImageTable_DigitalDisplay_Reel
	.word	sImageTable_DigitalDisplay_Time
	.word	sImageTable_DigitalDisplay_Insert
	.word	sImageTable_DigitalDisplay_Win
	.word	sImageTable_DigitalDisplay_Lose
	.word	sImageTable_DigitalDisplay_AButton
	.word	sImageTable_DigitalDisplay_Smoke
	.word	sImageTable_DigitalDisplay_Number
	.word	sImageTable_DigitalDisplay_Pokeball
	.word	sImageTable_DigitalDisplay_DPad
	.word	sImageTable_DigitalDisplay_Stop
	.word	sImageTable_DigitalDisplay_Bonus
	.word	sImageTable_DigitalDisplay_Big
	.word	sImageTable_DigitalDisplay_Reg
.Lfe253:
	.size	 SetDigitalDisplayImagePtrs,.Lfe253-SetDigitalDisplayImagePtrs
	.align	2, 0
	.type	 AllocDigitalDisplayGfx,function
	.thumb_func
AllocDigitalDisplayGfx:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r4, .L1589
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r6, .L1589+0x4
	ldr	r1, [r6]
	str	r1, [r0]
	mov	r5, #0xc0
	lsl	r5, r5, #0x3
	strh	r5, [r0, #0x4]
	ldr	r4, .L1589+0x8
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r1, [r6]
	add	r1, r1, r5
	str	r1, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r8, r1
	mov	r2, r8
	strh	r2, [r0, #0x4]
	ldr	r4, .L1589+0xc
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r1, [r6]
	mov	r3, #0x80
	lsl	r3, r3, #0x4
	add	r1, r1, r3
	str	r1, [r0]
	mov	r4, r8
	strh	r4, [r0, #0x4]
	ldr	r4, .L1589+0x10
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r1, [r6]
	mov	r2, #0xa0
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	str	r1, [r0]
	mov	r3, r8
	strh	r3, [r0, #0x4]
	ldr	r4, .L1589+0x14
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r1, [r6]
	mov	r4, #0xc0
	lsl	r4, r4, #0x4
	add	r1, r1, r4
	str	r1, [r0]
	mov	r5, #0xc0
	lsl	r5, r5, #0x2
	strh	r5, [r0, #0x4]
	ldr	r4, .L1589+0x18
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r1, [r6]
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r1, r1, r2
	str	r1, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	strh	r1, [r0, #0x4]
	ldr	r4, .L1589+0x1c
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r1, [r6]
	mov	r3, #0xa0
	lsl	r3, r3, #0x5
	add	r1, r1, r3
	str	r1, [r0]
	mov	r4, r8
	strh	r4, [r0, #0x4]
	ldr	r4, .L1589+0x20
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r1, [r6]
	mov	r2, #0xb0
	lsl	r2, r2, #0x5
	add	r1, r1, r2
	str	r1, [r0]
	strh	r5, [r0, #0x4]
	ldr	r4, .L1589+0x24
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r1, [r6]
	mov	r3, #0xc8
	lsl	r3, r3, #0x5
	add	r1, r1, r3
	str	r1, [r0]
	strh	r5, [r0, #0x4]
	ldr	r4, .L1589+0x28
	mov	r0, #0x10
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r1, [r6]
	mov	r4, #0xe0
	lsl	r4, r4, #0x5
	add	r2, r1, r4
	str	r2, [r0]
	mov	r2, r8
	strh	r2, [r0, #0x4]
	mov	r3, #0xf0
	lsl	r3, r3, #0x5
	add	r1, r1, r3
	str	r1, [r0, #0x8]
	strh	r2, [r0, #0xc]
	ldr	r4, .L1589+0x2c
	mov	r0, #0x8
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r1, [r6]
	mov	r4, #0x80
	lsl	r4, r4, #0x6
	add	r1, r1, r4
	str	r1, [r0]
	mov	r1, #0xa0
	lsl	r1, r1, #0x2
	strh	r1, [r0, #0x4]
	ldr	r4, .L1589+0x30
	mov	r0, #0x28
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r2, [r6]
	mov	r3, #0x8a
	lsl	r3, r3, #0x6
	add	r1, r2, r3
	str	r1, [r0]
	mov	r3, #0x80
	strh	r3, [r0, #0x4]
	mov	r4, #0x8c
	lsl	r4, r4, #0x6
	add	r1, r2, r4
	str	r1, [r0, #0x8]
	strh	r3, [r0, #0xc]
	add	r4, r4, #0x80
	add	r1, r2, r4
	str	r1, [r0, #0x10]
	strh	r3, [r0, #0x14]
	add	r4, r4, #0x80
	add	r1, r2, r4
	str	r1, [r0, #0x18]
	strh	r3, [r0, #0x1c]
	mov	r1, #0x92
	lsl	r1, r1, #0x6
	add	r2, r2, r1
	str	r2, [r0, #0x20]
	strh	r3, [r0, #0x24]
	ldr	r4, .L1589+0x34
	mov	r0, #0x10
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r2, [r6]
	mov	r3, #0x98
	lsl	r3, r3, #0x6
	add	r1, r2, r3
	str	r1, [r0]
	mov	r1, #0x90
	lsl	r1, r1, #0x3
	strh	r1, [r0, #0x4]
	mov	r4, #0xaa
	lsl	r4, r4, #0x6
	add	r2, r2, r4
	str	r2, [r0, #0x8]
	strh	r1, [r0, #0xc]
	ldr	r4, .L1589+0x38
	mov	r0, #0x10
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r2, [r6]
	mov	r3, #0xbc
	lsl	r3, r3, #0x6
	add	r1, r2, r3
	str	r1, [r0]
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x4]
	mov	r4, #0xc2
	lsl	r4, r4, #0x6
	add	r2, r2, r4
	str	r2, [r0, #0x8]
	strh	r1, [r0, #0xc]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1590:
	.align	2, 0
.L1589:
	.word	sImageTable_DigitalDisplay_Reel
	.word	sDigitalDisplayGfxPtr
	.word	sImageTable_DigitalDisplay_Time
	.word	sImageTable_DigitalDisplay_Insert
	.word	sImageTable_DigitalDisplay_Stop
	.word	sImageTable_DigitalDisplay_Win
	.word	sImageTable_DigitalDisplay_Lose
	.word	sImageTable_DigitalDisplay_Bonus
	.word	sImageTable_DigitalDisplay_Big
	.word	sImageTable_DigitalDisplay_Reg
	.word	sImageTable_DigitalDisplay_AButton
	.word	sImageTable_DigitalDisplay_Smoke
	.word	sImageTable_DigitalDisplay_Number
	.word	sImageTable_DigitalDisplay_Pokeball
	.word	sImageTable_DigitalDisplay_DPad
.Lfe254:
	.size	 AllocDigitalDisplayGfx,.Lfe254-AllocDigitalDisplayGfx
	.section .rodata
	.type	 sReelSymbolTileTags,object
	.size	 sReelSymbolTileTags,63
sReelSymbolTileTags:
	.byte	0x0
	.byte	0x4
	.byte	0x2
	.byte	0x6
	.byte	0x5
	.byte	0x3
	.byte	0x1
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x2
	.byte	0x0
	.byte	0x5
	.byte	0x3
	.byte	0x6
	.byte	0x2
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.byte	0x6
	.byte	0x0
	.byte	0x4
	.byte	0x6
	.byte	0x3
	.byte	0x2
	.byte	0x4
	.byte	0x6
	.byte	0x5
	.byte	0x5
	.byte	0x3
	.byte	0x1
	.byte	0x3
	.byte	0x6
	.byte	0x4
	.byte	0x2
	.byte	0x3
	.byte	0x6
	.byte	0x4
	.byte	0x3
	.byte	0x6
	.byte	0x4
	.byte	0x0
	.byte	0x5
	.byte	0x1
	.byte	0x6
	.byte	0x3
	.byte	0x2
	.byte	0x6
	.byte	0x3
	.byte	0x5
	.byte	0x2
	.byte	0x6
	.byte	0x3
	.byte	0x2
	.byte	0x5
	.byte	0x6
	.byte	0x3
	.byte	0x2
	.byte	0x5
	.byte	0x6
	.byte	0x3
	.byte	0x4
	.type	 sReelTimeTags,object
sReelTimeTags:
	.byte	0x1
	.byte	0x0
	.byte	0x5
	.byte	0x4
	.byte	0x3
	.byte	0x2
	.size	 sReelTimeTags,6
	.align	1, 0
	.type	 sInitialReelPositions,object
	.size	 sInitialReelPositions,12
sInitialReelPositions:
	.short	0x0
	.short	0x6
	.short	0x0
	.short	0xa
	.short	0x0
	.short	0x2
	.type	 sLuckyRoundProbabilities,object
sLuckyRoundProbabilities:
	.byte	0x1
	.byte	0x1
	.byte	0xc
	.byte	0x1
	.byte	0x1
	.byte	0xe
	.byte	0x2
	.byte	0x2
	.byte	0xe
	.byte	0x2
	.byte	0x2
	.byte	0xe
	.byte	0x2
	.byte	0x3
	.byte	0x10
	.byte	0x3
	.byte	0x3
	.byte	0x10
	.size	 sLuckyRoundProbabilities,18
	.type	 sLuckyFlagProbabilities_Top3,object
sLuckyFlagProbabilities_Top3:
	.byte	0x19
	.byte	0x19
	.byte	0x1e
	.byte	0x28
	.byte	0x28
	.byte	0x32
	.byte	0x19
	.byte	0x19
	.byte	0x1e
	.byte	0x1e
	.byte	0x23
	.byte	0x23
	.byte	0x19
	.byte	0x19
	.byte	0x1e
	.byte	0x19
	.byte	0x19
	.byte	0x1e
	.size	 sLuckyFlagProbabilities_Top3,18
	.type	 sLuckyFlagProbabilities_NotTop3,object
sLuckyFlagProbabilities_NotTop3:
	.byte	0x14
	.byte	0x19
	.byte	0x19
	.byte	0x14
	.byte	0x19
	.byte	0x19
	.byte	0xc
	.byte	0xf
	.byte	0xf
	.byte	0x12
	.byte	0x13
	.byte	0x16
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x1e
	.byte	0x1e
	.byte	0x28
	.byte	0x19
	.byte	0x19
	.byte	0x14
	.byte	0x14
	.byte	0xf
	.byte	0xf
	.byte	0x28
	.byte	0x28
	.byte	0x23
	.byte	0x23
	.byte	0x28
	.byte	0x28
	.size	 sLuckyFlagProbabilities_NotTop3,30
	.type	 sReeltimeProbabilities_UnluckyGame,object
sReeltimeProbabilities_UnluckyGame:
	.byte	0xf3
	.byte	0xf3
	.byte	0xf3
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0x28
	.byte	0x28
	.byte	0x28
	.byte	0x28
	.byte	0x28
	.byte	0x28
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x96
	.byte	0x96
	.byte	0x96
	.byte	0x96
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0x64
	.byte	0x64
	.byte	0x64
	.byte	0x5
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0x64
	.byte	0x64
	.byte	0x64
	.byte	0x28
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x2d
	.byte	0x2d
	.byte	0x2d
	.byte	0x64
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x64
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x6
	.size	 sReeltimeProbabilities_UnluckyGame,102
	.type	 sReelTimeProbabilities_LuckyGame,object
sReelTimeProbabilities_LuckyGame:
	.byte	0xf3
	.byte	0xf3
	.byte	0xf3
	.byte	0xc8
	.byte	0xc8
	.byte	0xc8
	.byte	0xc8
	.byte	0xa0
	.byte	0xa0
	.byte	0xa0
	.byte	0xa0
	.byte	0xa0
	.byte	0xa0
	.byte	0x46
	.byte	0x46
	.byte	0x46
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x5
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x6
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x19
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x28
	.byte	0x28
	.byte	0x28
	.byte	0x23
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x64
	.byte	0x64
	.byte	0x64
	.byte	0x32
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x1e
	.byte	0x28
	.byte	0x28
	.byte	0x28
	.byte	0x64
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x3c
	.size	 sReelTimeProbabilities_LuckyGame,102
	.align	1, 0
	.type	 sReelTimeExplodeProbability,object
sReelTimeExplodeProbability:
	.short	0x80
	.short	0xaf
	.short	0xc8
	.short	0xe1
	.short	0x100
	.size	 sReelTimeExplodeProbability,10
	.align	1, 0
	.type	 sReelIncrementTable,object
sReelIncrementTable:
	.short	0xa
	.short	0x5
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xf
	.short	0xa
	.short	0x19
	.short	0xa
	.short	0x23
	.size	 sReelIncrementTable,20
	.align	1, 0
	.type	 sReelTimeBonusIncrementTable,object
sReelTimeBonusIncrementTable:
	.short	0x0
	.short	0x5
	.short	0xa
	.short	0xf
	.short	0x14
	.size	 sReelTimeBonusIncrementTable,10
	.type	 sBiasTags,object
sBiasTags:
	.byte	0x6
	.byte	0x4
	.byte	0x3
	.byte	0x2
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sBiasTags,8
	.align	1, 0
	.type	 sLuckyFlagSettings_Top3,object
sLuckyFlagSettings_Top3:
	.short	0x80
	.short	0x20
	.short	0x40
	.size	 sLuckyFlagSettings_Top3,6
	.align	1, 0
	.type	 sLuckyFlagSettings_NotTop3,object
sLuckyFlagSettings_NotTop3:
	.short	0x10
	.short	0x8
	.short	0x4
	.short	0x2
	.short	0x1
	.size	 sLuckyFlagSettings_NotTop3,10
	.type	 sSymToMatch,object
sSymToMatch:
	.byte	0x7
	.byte	0x8
	.byte	0x4
	.byte	0x3
	.byte	0x0
	.byte	0x5
	.byte	0x2
	.size	 sSymToMatch,7
	.align	1, 0
	.type	 sSlotMatchFlags,object
sSlotMatchFlags:
	.short	0x1
	.short	0x2
	.short	0x4
	.short	0x8
	.short	0x10
	.short	0x20
	.short	0x40
	.short	0x80
	.short	0x100
	.size	 sSlotMatchFlags,18
	.align	1, 0
	.type	 sSlotPayouts,object
sSlotPayouts:
	.short	0x2
	.short	0x4
	.short	0x0
	.short	0x6
	.short	0xc
	.short	0x3
	.short	0x5a
	.short	0x12c
	.short	0x12c
	.size	 sSlotPayouts,18
	.align	1, 0
	.type	 sDigitalDisplay_SpriteCoords,object
sDigitalDisplay_SpriteCoords:
	.short	0xd0
	.short	0x38
	.short	0xb8
	.short	0x0
	.short	0xc8
	.short	0x8
	.short	0xd8
	.short	0x10
	.short	0xe8
	.short	0x18
	.short	0xd0
	.short	0x48
	.short	0xd0
	.short	0x8
	.short	0xd0
	.short	0x40
	.short	0xd0
	.short	0x38
	.short	0xc0
	.short	0x58
	.short	0xe0
	.short	0x58
	.short	0xc0
	.short	0x78
	.short	0xe0
	.short	0x78
	.short	0x90
	.short	0x38
	.short	0x110
	.short	0x58
	.short	0xa8
	.short	0x70
	.short	0xd0
	.short	0x54
	.short	0xd0
	.short	0x70
	.short	0xbc
	.short	0x34
	.short	0xd0
	.short	0x34
	.short	0xe4
	.short	0x34
	.short	0xb8
	.short	0x48
	.short	0xc4
	.short	0x48
	.short	0xd0
	.short	0x48
	.short	0xdc
	.short	0x48
	.short	0xe8
	.short	0x48
	.short	0xbc
	.short	0x34
	.short	0xd0
	.short	0x34
	.short	0xe4
	.short	0x34
	.short	0xb8
	.short	0x48
	.short	0xc4
	.short	0x48
	.short	0xd0
	.short	0x48
	.short	0xdc
	.short	0x48
	.short	0xe8
	.short	0x48
	.short	0x0
	.short	0x0
	.size	 sDigitalDisplay_SpriteCoords,140
	.align	2, 0
	.type	 sDigitalDisplay_SpriteCallbacks,object
sDigitalDisplay_SpriteCallbacks:
	.word	SpriteCB_DigitalDisplay_Static
	.word	SpriteCB_DigitalDisplay_Stop
	.word	SpriteCB_DigitalDisplay_Stop
	.word	SpriteCB_DigitalDisplay_Stop
	.word	SpriteCB_DigitalDisplay_Stop
	.word	SpriteCB_DigitalDisplay_AButtonStop
	.word	SpriteCB_DigitalDisplay_PokeballRocking
	.word	SpriteCB_DigitalDisplay_Static
	.word	SpriteCB_DigitalDisplay_Static
	.word	SpriteCB_DigitalDisplay_Smoke
	.word	SpriteCB_DigitalDisplay_SmokeNE
	.word	SpriteCB_DigitalDisplay_SmokeSW
	.word	SpriteCB_DigitalDisplay_SmokeSE
	.word	SpriteCB_DigitalDisplay_Reel
	.word	SpriteCB_DigitalDisplay_Time
	.word	SpriteCB_DigitalDisplay_ReelTimeNumber
	.word	SpriteCB_DigitalDisplay_Static
	.word	SpriteCB_DigitalDisplay_PokeballShining
	.word	SpriteCB_DigitalDisplay_RegBonus
	.word	SpriteCB_DigitalDisplay_RegBonus
	.word	SpriteCB_DigitalDisplay_RegBonus
	.word	SpriteCB_DigitalDisplay_RegBonus
	.word	SpriteCB_DigitalDisplay_RegBonus
	.word	SpriteCB_DigitalDisplay_RegBonus
	.word	SpriteCB_DigitalDisplay_RegBonus
	.word	SpriteCB_DigitalDisplay_RegBonus
	.word	SpriteCB_DigitalDisplay_BigBonus
	.word	SpriteCB_DigitalDisplay_BigBonus
	.word	SpriteCB_DigitalDisplay_BigBonus
	.word	SpriteCB_DigitalDisplay_BigBonus
	.word	SpriteCB_DigitalDisplay_BigBonus
	.word	SpriteCB_DigitalDisplay_BigBonus
	.word	SpriteCB_DigitalDisplay_BigBonus
	.word	SpriteCB_DigitalDisplay_BigBonus
	.word	SpriteCB_DigitalDisplay_AButtonStart
	.size	 sDigitalDisplay_SpriteCallbacks,140
	.align	2, 0
	.type	 sDigitalDisplay_InsertBet,object
sDigitalDisplay_InsertBet:
	.byte	0x19
	.byte	0x22
	.short	0x0
	.byte	0x2
	.byte	0x0
	.short	0x0
	.byte	0x9
	.byte	0x10
	.short	0x0
	.byte	0xff
	.byte	0x0
	.short	0x0
	.size	 sDigitalDisplay_InsertBet,16
	.align	2, 0
	.type	 sDigitalDisplay_StopReel,object
sDigitalDisplay_StopReel:
	.byte	0xa
	.byte	0x1
	.short	0x0
	.byte	0xb
	.byte	0x2
	.short	0x0
	.byte	0xc
	.byte	0x3
	.short	0x0
	.byte	0xd
	.byte	0x4
	.short	0x0
	.byte	0x5
	.byte	0x5
	.short	0x0
	.byte	0x8
	.byte	0x6
	.short	0x0
	.byte	0xff
	.byte	0x0
	.short	0x0
	.size	 sDigitalDisplay_StopReel,28
	.align	2, 0
	.type	 sDigitalDisplay_Win,object
sDigitalDisplay_Win:
	.byte	0x3
	.byte	0x7
	.short	0x0
	.byte	0x8
	.byte	0x11
	.short	0x0
	.byte	0xff
	.byte	0x0
	.short	0x0
	.size	 sDigitalDisplay_Win,12
	.align	2, 0
	.type	 sDigitalDisplay_Lose,object
sDigitalDisplay_Lose:
	.byte	0x4
	.byte	0x8
	.short	0x0
	.byte	0x6
	.byte	0x9
	.short	0x0
	.byte	0x6
	.byte	0xa
	.short	0x1
	.byte	0x6
	.byte	0xb
	.short	0x2
	.byte	0x6
	.byte	0xc
	.short	0x3
	.byte	0xff
	.byte	0x0
	.short	0x0
	.size	 sDigitalDisplay_Lose,24
	.align	2, 0
	.type	 sDigitalDisplay_ReelTime,object
sDigitalDisplay_ReelTime:
	.byte	0x0
	.byte	0xd
	.short	0x0
	.byte	0x1
	.byte	0xe
	.short	0x0
	.byte	0x7
	.byte	0xf
	.short	0x0
	.byte	0xff
	.byte	0x0
	.short	0x0
	.size	 sDigitalDisplay_ReelTime,16
	.align	2, 0
	.type	 sDigitalDisplay_BonusBig,object
sDigitalDisplay_BonusBig:
	.byte	0x13
	.byte	0x1a
	.short	0x0
	.byte	0x14
	.byte	0x1b
	.short	0x1
	.byte	0x15
	.byte	0x1c
	.short	0x2
	.byte	0xe
	.byte	0x1d
	.short	0x3
	.byte	0xf
	.byte	0x1e
	.short	0x4
	.byte	0x10
	.byte	0x1f
	.short	0x5
	.byte	0x11
	.byte	0x20
	.short	0x6
	.byte	0x12
	.byte	0x21
	.short	0x7
	.byte	0x8
	.byte	0x11
	.short	0x0
	.byte	0xff
	.byte	0x0
	.short	0x0
	.size	 sDigitalDisplay_BonusBig,40
	.align	2, 0
	.type	 sDigitalDisplay_BonusRegular,object
sDigitalDisplay_BonusRegular:
	.byte	0x16
	.byte	0x12
	.short	0x0
	.byte	0x17
	.byte	0x13
	.short	0x1
	.byte	0x18
	.byte	0x14
	.short	0x2
	.byte	0xe
	.byte	0x15
	.short	0x3
	.byte	0xf
	.byte	0x16
	.short	0x4
	.byte	0x10
	.byte	0x17
	.short	0x5
	.byte	0x11
	.byte	0x18
	.short	0x6
	.byte	0x12
	.byte	0x19
	.short	0x7
	.byte	0x8
	.byte	0x11
	.short	0x0
	.byte	0xff
	.byte	0x0
	.short	0x0
	.size	 sDigitalDisplay_BonusRegular,40
	.align	2, 0
	.type	 sDigitalDisplayScenes,object
sDigitalDisplayScenes:
	.word	sDigitalDisplay_InsertBet
	.word	sDigitalDisplay_StopReel
	.word	sDigitalDisplay_Win
	.word	sDigitalDisplay_Lose
	.word	sDigitalDisplay_ReelTime
	.word	sDigitalDisplay_BonusRegular
	.word	sDigitalDisplay_BonusBig
	.size	 sDigitalDisplayScenes,28
	.align	2, 0
	.type	 sDigitalDisplaySceneExitCallbacks,object
sDigitalDisplaySceneExitCallbacks:
	.word	EndDigitalDisplayScene_InsertBet
	.word	EndDigitalDisplayScene_StopReel
	.word	EndDigitalDisplayScene_Win
	.word	EndDigitalDisplayScene_Dummy
	.word	EndDigitalDisplayScene_Dummy
	.word	EndDigitalDisplayScene_Win
	.word	EndDigitalDisplayScene_Win
	.size	 sDigitalDisplaySceneExitCallbacks,28
	.align	2, 0
	.type	 sOam_8x8,object
	.size	 sOam_8x8,8
sOam_8x8:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sOam_8x16,object
	.size	 sOam_8x16,8
sOam_8x16:
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sOam_16x16,object
	.size	 sOam_16x16,8
sOam_16x16:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sOam_16x32,object
	.size	 sOam_16x32,8
sOam_16x32:
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sOam_32x32,object
	.size	 sOam_32x32,8
sOam_32x32:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sOam_32x64,object
	.size	 sOam_32x64,8
sOam_32x64:
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sOam_64x32,object
	.size	 sOam_64x32,8
sOam_64x32:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sOam_64x64,object
	.size	 sOam_64x64,8
sOam_64x64:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sImageTable_ReelTimeNumbers,object
sImageTable_ReelTimeNumbers:
	.word	gSlotMachineReelTimeNumber0
	.short	0x80
	.space	2
	.word	gSlotMachineReelTimeNumber1
	.short	0x80
	.space	2
	.word	gSlotMachineReelTimeNumber2
	.short	0x80
	.space	2
	.word	gSlotMachineReelTimeNumber3
	.short	0x80
	.space	2
	.word	gSlotMachineReelTimeNumber4
	.short	0x80
	.space	2
	.word	gSlotMachineReelTimeNumber5
	.short	0x80
	.space	2
	.size	 sImageTable_ReelTimeNumbers,48
	.align	2, 0
	.type	 sImageTable_ReelTimeShadow,object
sImageTable_ReelTimeShadow:
	.word	gSlotMachineReelTimeShadow
	.short	0x200
	.space	2
	.size	 sImageTable_ReelTimeShadow,8
	.align	2, 0
	.type	 sImageTable_ReelTimeNumberGap,object
sImageTable_ReelTimeNumberGap:
	.word	gSlotMachineReelTimeNumberGap_Gfx
	.short	0x40
	.space	2
	.size	 sImageTable_ReelTimeNumberGap,8
	.align	2, 0
	.type	 sImageTable_ReelTimeBolt,object
sImageTable_ReelTimeBolt:
	.word	gSlotMachineReelTimeBolt0
	.short	0x100
	.space	2
	.word	gSlotMachineReelTimeBolt1
	.short	0x100
	.space	2
	.size	 sImageTable_ReelTimeBolt,16
	.align	2, 0
	.type	 sImageTable_ReelTimePikachuAura,object
sImageTable_ReelTimePikachuAura:
	.word	gSlotMachineReelTimePikaAura
	.short	0x400
	.space	2
	.size	 sImageTable_ReelTimePikachuAura,8
	.align	2, 0
	.type	 sImageTable_ReelTimeExplosion,object
sImageTable_ReelTimeExplosion:
	.word	gSlotMachineReelTimeExplosion0
	.short	0x200
	.space	2
	.word	gSlotMachineReelTimeExplosion1
	.short	0x200
	.space	2
	.size	 sImageTable_ReelTimeExplosion,16
	.align	2, 0
	.type	 sImageTable_ReelTimeDuck,object
sImageTable_ReelTimeDuck:
	.word	gSlotMachineReelTimeDuck
	.short	0x20
	.space	2
	.size	 sImageTable_ReelTimeDuck,8
	.align	2, 0
	.type	 sImageTable_ReelTimeSmoke,object
sImageTable_ReelTimeSmoke:
	.word	gSlotMachineReelTimeSmoke
	.short	0x80
	.space	2
	.size	 sImageTable_ReelTimeSmoke,8
	.align	2, 0
	.type	 sImageTable_PikaPowerBolt,object
sImageTable_PikaPowerBolt:
	.word	gSlotMachinePikaPowerBolt
	.short	0x20
	.space	2
	.size	 sImageTable_PikaPowerBolt,8
	.align	2, 0
	.type	 sAnim_SingleFrame,object
sAnim_SingleFrame:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_SingleFrame,8
	.align	2, 0
	.type	 sAnim_ReelTimeDuck,object
sAnim_ReelTimeDuck:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_ReelTimeDuck,8
	.align	2, 0
	.type	 sAnim_ReelTimePikachu_Still,object
sAnim_ReelTimePikachu_Still:
	.short	0x0
	.byte	0x10
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ReelTimePikachu_Still,8
	.align	2, 0
	.type	 sAnim_ReelTimePikachu_ChargingSlow,object
sAnim_ReelTimePikachu_ChargingSlow:
	.short	0x1
	.byte	0x10
	.space	1
	.short	0x0
	.byte	0x10
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_ReelTimePikachu_ChargingSlow,12
	.align	2, 0
	.type	 sAnim_ReelTimePikachu_ChargingMedium,object
sAnim_ReelTimePikachu_ChargingMedium:
	.short	0x1
	.byte	0x8
	.space	1
	.short	0x0
	.byte	0x8
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_ReelTimePikachu_ChargingMedium,12
	.align	2, 0
	.type	 sAnim_ReelTimePikachu_ChargingFast,object
sAnim_ReelTimePikachu_ChargingFast:
	.short	0x1
	.byte	0x4
	.space	1
	.short	0x0
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_ReelTimePikachu_ChargingFast,12
	.align	2, 0
	.type	 sAnim_ReelTimePikachu_Cheering,object
sAnim_ReelTimePikachu_Cheering:
	.short	0x2
	.byte	0x20
	.space	1
	.short	0x3
	.byte	0x20
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_ReelTimePikachu_Cheering,12
	.align	2, 0
	.type	 sAnim_ReelTimePikachu_FellOver,object
sAnim_ReelTimePikachu_FellOver:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ReelTimePikachu_FellOver,8
	.align	2, 0
	.type	 sAnim_ReelTimeNumber_0,object
sAnim_ReelTimeNumber_0:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ReelTimeNumber_0,8
	.align	2, 0
	.type	 sAnim_ReelTimeNumber_1,object
sAnim_ReelTimeNumber_1:
	.short	0x1
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ReelTimeNumber_1,8
	.align	2, 0
	.type	 sAnim_ReelTimeNumber_2,object
sAnim_ReelTimeNumber_2:
	.short	0x2
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ReelTimeNumber_2,8
	.align	2, 0
	.type	 sAnim_ReelTimeNumber_3,object
sAnim_ReelTimeNumber_3:
	.short	0x3
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ReelTimeNumber_3,8
	.align	2, 0
	.type	 sAnim_ReelTimeNumber_4,object
sAnim_ReelTimeNumber_4:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ReelTimeNumber_4,8
	.align	2, 0
	.type	 sAnim_ReelTimeNumber_5,object
sAnim_ReelTimeNumber_5:
	.short	0x5
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ReelTimeNumber_5,8
	.align	2, 0
	.type	 sAnim_ReelTimeBolt,object
sAnim_ReelTimeBolt:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x1
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_ReelTimeBolt,12
	.align	2, 0
	.type	 sAnim_ReelTimeExplosion,object
sAnim_ReelTimeExplosion:
	.short	0x0
	.byte	0x10
	.space	1
	.short	0x1
	.byte	0x10
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_ReelTimeExplosion,12
	.align	2, 0
	.type	 sAnim_DigitalDisplay_AButton_Flashing,object
sAnim_DigitalDisplay_AButton_Flashing:
	.short	0x0
	.byte	0x1e
	.space	1
	.short	0x1
	.byte	0x1e
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_DigitalDisplay_AButton_Flashing,12
	.align	2, 0
	.type	 sAnim_DigitalDisplay_AButton_Static,object
sAnim_DigitalDisplay_AButton_Static:
	.short	0x1
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_DigitalDisplay_AButton_Static,8
	.align	2, 0
	.type	 sAnim_DigitalDisplay_DPad_Flashing,object
sAnim_DigitalDisplay_DPad_Flashing:
	.short	0x0
	.byte	0x1e
	.space	1
	.short	0x1
	.byte	0x1e
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_DigitalDisplay_DPad_Flashing,12
	.align	2, 0
	.type	 sAnim_DigitalDisplay_Pokeball_Rocking,object
sAnim_DigitalDisplay_Pokeball_Rocking:
	.short	0x0
	.byte	0x10
	.space	1
	.short	0x1
	.byte	0x10
	.space	1
	.short	0x0
	.byte	0x10
	.space	1
	.short	0x1
	.byte	0x50
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_DigitalDisplay_Pokeball_Rocking,20
	.align	2, 0
	.type	 sAnim_DigitalDisplay_Pokeball_Static,object
sAnim_DigitalDisplay_Pokeball_Static:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_DigitalDisplay_Pokeball_Static,8
	.align	2, 0
	.type	 sAnim_DigitalDisplay_Number_1,object
sAnim_DigitalDisplay_Number_1:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_DigitalDisplay_Number_1,8
	.align	2, 0
	.type	 sAnim_DigitalDisplay_Number_2,object
sAnim_DigitalDisplay_Number_2:
	.short	0x1
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_DigitalDisplay_Number_2,8
	.align	2, 0
	.type	 sAnim_DigitalDisplay_Number_3,object
sAnim_DigitalDisplay_Number_3:
	.short	0x2
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_DigitalDisplay_Number_3,8
	.align	2, 0
	.type	 sAnim_DigitalDisplay_Number_4,object
sAnim_DigitalDisplay_Number_4:
	.short	0x3
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_DigitalDisplay_Number_4,8
	.align	2, 0
	.type	 sAnim_DigitalDisplay_Number_5,object
sAnim_DigitalDisplay_Number_5:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_DigitalDisplay_Number_5,8
	.align	2, 0
	.type	 sAnims_SingleFrame,object
sAnims_SingleFrame:
	.word	sAnim_SingleFrame
	.size	 sAnims_SingleFrame,4
	.align	2, 0
	.type	 sAnims_ReelTimeDuck,object
sAnims_ReelTimeDuck:
	.word	sAnim_ReelTimeDuck
	.size	 sAnims_ReelTimeDuck,4
	.align	2, 0
	.type	 sAnims_ReelTimePikachu,object
sAnims_ReelTimePikachu:
	.word	sAnim_ReelTimePikachu_Still
	.word	sAnim_ReelTimePikachu_ChargingSlow
	.word	sAnim_ReelTimePikachu_ChargingMedium
	.word	sAnim_ReelTimePikachu_ChargingFast
	.word	sAnim_ReelTimePikachu_Cheering
	.word	sAnim_ReelTimePikachu_FellOver
	.size	 sAnims_ReelTimePikachu,24
	.align	2, 0
	.type	 sAnims_ReelTimeNumbers,object
sAnims_ReelTimeNumbers:
	.word	sAnim_ReelTimeNumber_0
	.word	sAnim_ReelTimeNumber_1
	.word	sAnim_ReelTimeNumber_2
	.word	sAnim_ReelTimeNumber_3
	.word	sAnim_ReelTimeNumber_4
	.word	sAnim_ReelTimeNumber_5
	.size	 sAnims_ReelTimeNumbers,24
	.align	2, 0
	.type	 sAnims_ReelTimeBolt,object
sAnims_ReelTimeBolt:
	.word	sAnim_ReelTimeBolt
	.size	 sAnims_ReelTimeBolt,4
	.align	2, 0
	.type	 sAnims_ReelTimeExplosion,object
sAnims_ReelTimeExplosion:
	.word	sAnim_ReelTimeExplosion
	.size	 sAnims_ReelTimeExplosion,4
	.align	2, 0
	.type	 sAnims_DigitalDisplay_AButton,object
sAnims_DigitalDisplay_AButton:
	.word	sAnim_DigitalDisplay_AButton_Flashing
	.word	sAnim_DigitalDisplay_AButton_Static
	.size	 sAnims_DigitalDisplay_AButton,8
	.align	2, 0
	.type	 sAnims_DigitalDisplay_DPad,object
sAnims_DigitalDisplay_DPad:
	.word	sAnim_DigitalDisplay_DPad_Flashing
	.size	 sAnims_DigitalDisplay_DPad,4
	.align	2, 0
	.type	 sAnims_DigitalDisplay_Pokeball,object
sAnims_DigitalDisplay_Pokeball:
	.word	sAnim_DigitalDisplay_Pokeball_Rocking
	.word	sAnim_DigitalDisplay_Pokeball_Static
	.size	 sAnims_DigitalDisplay_Pokeball,8
	.align	2, 0
	.type	 sAnims_DigitalDisplay_Number,object
sAnims_DigitalDisplay_Number:
	.word	sAnim_DigitalDisplay_Number_1
	.word	sAnim_DigitalDisplay_Number_2
	.word	sAnim_DigitalDisplay_Number_3
	.word	sAnim_DigitalDisplay_Number_4
	.word	sAnim_DigitalDisplay_Number_5
	.size	 sAnims_DigitalDisplay_Number,20
	.align	2, 0
	.type	 sAffineAnim_ReelTimeSmoke,object
sAffineAnim_ReelTimeSmoke:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	0x1
	.short	0x1
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffd
	.short	0xff
	.space	4
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ReelTimeSmoke,40
	.align	2, 0
	.type	 sAffineAnims_ReelTimeSmoke,object
sAffineAnims_ReelTimeSmoke:
	.word	sAffineAnim_ReelTimeSmoke
	.size	 sAffineAnims_ReelTimeSmoke,4
	.align	2, 0
	.type	 sAffineAnim_PikaPowerBolt,object
sAffineAnim_PikaPowerBolt:
	.short	0x0
	.short	0x0
	.byte	0x8
	.byte	0x20
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x6
	.byte	0x20
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x10
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xc
	.byte	0x2
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf4
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xc
	.byte	0x2
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xc
	.byte	0x2
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf4
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xc
	.byte	0x2
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_PikaPowerBolt,80
	.align	2, 0
	.type	 sAffineAnims_PikaPowerBolt,object
sAffineAnims_PikaPowerBolt:
	.word	sAffineAnim_PikaPowerBolt
	.size	 sAffineAnims_PikaPowerBolt,4
	.align	2, 0
	.type	 sSpriteTemplate_ReelSymbol,object
	.size	 sSpriteTemplate_ReelSymbol,24
sSpriteTemplate_ReelSymbol:
	.short	0x0
	.short	0x0
	.word	sOam_32x32
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_ReelSymbol
	.align	2, 0
	.type	 sSpriteTemplate_CoinNumber,object
	.size	 sSpriteTemplate_CoinNumber,24
sSpriteTemplate_CoinNumber:
	.short	0x7
	.short	0x4
	.word	sOam_8x16
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_CoinNumber
	.align	2, 0
	.type	 sSpriteTemplate_ReelBackground,object
	.size	 sSpriteTemplate_ReelBackground,24
sSpriteTemplate_ReelBackground:
	.short	0x11
	.short	0x0
	.word	sOam_64x64
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_ReelTimePikachu,object
	.size	 sSpriteTemplate_ReelTimePikachu,24
sSpriteTemplate_ReelTimePikachu:
	.short	0xffff
	.short	0x1
	.word	sOam_64x64
	.word	sAnims_ReelTimePikachu
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_ReelTimePikachu
	.align	2, 0
	.type	 sSpriteTemplate_ReelTimeMachineAntennae,object
	.size	 sSpriteTemplate_ReelTimeMachineAntennae,24
sSpriteTemplate_ReelTimeMachineAntennae:
	.short	0xffff
	.short	0x2
	.word	sOam_8x16
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_ReelTimeMachine,object
	.size	 sSpriteTemplate_ReelTimeMachine,24
sSpriteTemplate_ReelTimeMachine:
	.short	0xffff
	.short	0x3
	.word	sOam_8x16
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_BrokenReelTimeMachine,object
	.size	 sSpriteTemplate_BrokenReelTimeMachine,24
sSpriteTemplate_BrokenReelTimeMachine:
	.short	0xffff
	.short	0x3
	.word	sOam_8x16
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_ReelTimeNumbers,object
	.size	 sSpriteTemplate_ReelTimeNumbers,24
sSpriteTemplate_ReelTimeNumbers:
	.short	0xffff
	.short	0x4
	.word	sOam_16x16
	.word	sAnims_ReelTimeNumbers
	.word	sImageTable_ReelTimeNumbers
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_ReelTimeNumbers
	.align	2, 0
	.type	 sSpriteTemplate_ReelTimeShadow,object
	.size	 sSpriteTemplate_ReelTimeShadow,24
sSpriteTemplate_ReelTimeShadow:
	.short	0xffff
	.short	0x4
	.word	sOam_16x16
	.word	sAnims_SingleFrame
	.word	sImageTable_ReelTimeShadow
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_ReelTimeNumberGap,object
	.size	 sSpriteTemplate_ReelTimeNumberGap,24
sSpriteTemplate_ReelTimeNumberGap:
	.short	0xffff
	.short	0x4
	.word	sOam_16x16
	.word	sAnims_SingleFrame
	.word	sImageTable_ReelTimeNumberGap
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_ReelTimeBolt,object
	.size	 sSpriteTemplate_ReelTimeBolt,24
sSpriteTemplate_ReelTimeBolt:
	.short	0xffff
	.short	0x4
	.word	sOam_16x32
	.word	sAnims_ReelTimeBolt
	.word	sImageTable_ReelTimeBolt
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_ReelTimeBolt
	.align	2, 0
	.type	 sSpriteTemplate_ReelTimePikachuAura,object
	.size	 sSpriteTemplate_ReelTimePikachuAura,24
sSpriteTemplate_ReelTimePikachuAura:
	.short	0xffff
	.short	0x7
	.word	sOam_32x64
	.word	sAnims_SingleFrame
	.word	sImageTable_ReelTimePikachuAura
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_ReelTimePikachuAura
	.align	2, 0
	.type	 sSpriteTemplate_ReelTimeExplosion,object
	.size	 sSpriteTemplate_ReelTimeExplosion,24
sSpriteTemplate_ReelTimeExplosion:
	.short	0xffff
	.short	0x5
	.word	sOam_32x32
	.word	sAnims_ReelTimeExplosion
	.word	sImageTable_ReelTimeExplosion
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_ReelTimeExplosion
	.align	2, 0
	.type	 sSpriteTemplate_ReelTimeDuck,object
	.size	 sSpriteTemplate_ReelTimeDuck,24
sSpriteTemplate_ReelTimeDuck:
	.short	0xffff
	.short	0x4
	.word	sOam_8x8
	.word	sAnims_ReelTimeDuck
	.word	sImageTable_ReelTimeDuck
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_ReelTimeDuck
	.align	2, 0
	.type	 sSpriteTemplate_ReelTimeSmoke,object
	.size	 sSpriteTemplate_ReelTimeSmoke,24
sSpriteTemplate_ReelTimeSmoke:
	.short	0xffff
	.short	0x4
	.word	sOam_16x16
	.word	sAnims_SingleFrame
	.word	sImageTable_ReelTimeSmoke
	.word	sAffineAnims_ReelTimeSmoke
	.word	SpriteCB_ReelTimeSmoke
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_Reel,object
	.size	 sSpriteTemplate_DigitalDisplay_Reel,24
sSpriteTemplate_DigitalDisplay_Reel:
	.short	0xffff
	.short	0x6
	.word	sOam_8x8
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_Time,object
	.size	 sSpriteTemplate_DigitalDisplay_Time,24
sSpriteTemplate_DigitalDisplay_Time:
	.short	0xffff
	.short	0x6
	.word	sOam_8x8
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_Insert,object
	.size	 sSpriteTemplate_DigitalDisplay_Insert,24
sSpriteTemplate_DigitalDisplay_Insert:
	.short	0xffff
	.short	0x6
	.word	sOam_8x8
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_Stop,object
	.size	 sSpriteTemplate_DigitalDisplay_Stop,24
sSpriteTemplate_DigitalDisplay_Stop:
	.short	0x12
	.short	0x6
	.word	sOam_8x8
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_Win,object
	.size	 sSpriteTemplate_DigitalDisplay_Win,24
sSpriteTemplate_DigitalDisplay_Win:
	.short	0xffff
	.short	0x6
	.word	sOam_64x32
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_Lose,object
	.size	 sSpriteTemplate_DigitalDisplay_Lose,24
sSpriteTemplate_DigitalDisplay_Lose:
	.short	0xffff
	.short	0x6
	.word	sOam_64x32
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_Bonus,object
	.size	 sSpriteTemplate_DigitalDisplay_Bonus,24
sSpriteTemplate_DigitalDisplay_Bonus:
	.short	0x13
	.short	0x6
	.word	sOam_8x8
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_Big,object
	.size	 sSpriteTemplate_DigitalDisplay_Big,24
sSpriteTemplate_DigitalDisplay_Big:
	.short	0x14
	.short	0x6
	.word	sOam_8x8
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_Reg,object
	.size	 sSpriteTemplate_DigitalDisplay_Reg,24
sSpriteTemplate_DigitalDisplay_Reg:
	.short	0x15
	.short	0x6
	.word	sOam_8x8
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_AButton,object
	.size	 sSpriteTemplate_DigitalDisplay_AButton,24
sSpriteTemplate_DigitalDisplay_AButton:
	.short	0xffff
	.short	0x6
	.word	sOam_32x32
	.word	sAnims_DigitalDisplay_AButton
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_Smoke,object
	.size	 sSpriteTemplate_DigitalDisplay_Smoke,24
sSpriteTemplate_DigitalDisplay_Smoke:
	.short	0xffff
	.short	0x6
	.word	sOam_8x8
	.word	sAnims_SingleFrame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_Number,object
	.size	 sSpriteTemplate_DigitalDisplay_Number,24
sSpriteTemplate_DigitalDisplay_Number:
	.short	0xffff
	.short	0x6
	.word	sOam_16x16
	.word	sAnims_DigitalDisplay_Number
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_Pokeball,object
	.size	 sSpriteTemplate_DigitalDisplay_Pokeball,24
sSpriteTemplate_DigitalDisplay_Pokeball:
	.short	0xffff
	.short	0x6
	.word	sOam_8x8
	.word	sAnims_DigitalDisplay_Pokeball
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_DigitalDisplay_DPad,object
	.size	 sSpriteTemplate_DigitalDisplay_DPad,24
sSpriteTemplate_DigitalDisplay_DPad:
	.short	0xffff
	.short	0x6
	.word	sOam_8x8
	.word	sAnims_DigitalDisplay_DPad
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_PikaPowerBolt,object
	.size	 sSpriteTemplate_PikaPowerBolt,24
sSpriteTemplate_PikaPowerBolt:
	.short	0xffff
	.short	0x4
	.word	sOam_8x8
	.word	sAnims_SingleFrame
	.word	sImageTable_PikaPowerBolt
	.word	sAffineAnims_PikaPowerBolt
	.word	SpriteCB_PikaPowerBolt
	.align	2, 0
	.type	 sSubsprites_ReelBackground,object
	.size	 sSubsprites_ReelBackground,16
sSubsprites_ReelBackground:
	.byte	-0x40
	.byte	-0x40
	.byte	0xc
	.byte	0xc0
	.byte	0x0
	.byte	-0x40
	.byte	0xc
	.byte	0xc0
	.byte	-0x40
	.byte	0x0
	.byte	0xc
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_ReelBackground,object
sSubspriteTable_ReelBackground:
	.byte	0x4
	.space	3
	.word	sSubsprites_ReelBackground
	.size	 sSubspriteTable_ReelBackground,8
	.align	2, 0
	.type	 sSubsprites_ReelTimeMachineAntennae,object
	.size	 sSubsprites_ReelTimeMachineAntennae,24
sSubsprites_ReelTimeMachineAntennae:
	.byte	-0x20
	.byte	-0xc
	.byte	0x5
	.byte	0x40
	.byte	0x0
	.byte	-0xc
	.byte	0x45
	.byte	0x40
	.byte	-0x20
	.byte	-0x4
	.byte	0x85
	.byte	0x40
	.byte	0x0
	.byte	-0x4
	.byte	0xc5
	.byte	0x40
	.byte	-0x20
	.byte	0x4
	.byte	0x5
	.byte	0x41
	.byte	0x0
	.byte	0x4
	.byte	0x45
	.byte	0x41
	.align	2, 0
	.type	 sSubspriteTable_ReelTimeMachineAntennae,object
sSubspriteTable_ReelTimeMachineAntennae:
	.byte	0x6
	.space	3
	.word	sSubsprites_ReelTimeMachineAntennae
	.size	 sSubspriteTable_ReelTimeMachineAntennae,8
	.align	2, 0
	.type	 sSubsprites_ReelTimeMachine,object
	.size	 sSubsprites_ReelTimeMachine,12
sSubsprites_ReelTimeMachine:
	.byte	-0x20
	.byte	-0x14
	.byte	0xd
	.byte	0x40
	.byte	-0x20
	.byte	0xc
	.byte	0x5
	.byte	0x42
	.byte	0x0
	.byte	0xc
	.byte	0x45
	.byte	0x42
	.align	2, 0
	.type	 sSubspriteTable_ReelTimeMachine,object
sSubspriteTable_ReelTimeMachine:
	.byte	0x3
	.space	3
	.word	sSubsprites_ReelTimeMachine
	.size	 sSubspriteTable_ReelTimeMachine,8
	.align	2, 0
	.type	 sSubsprites_BrokenReelTimeMachine,object
	.size	 sSubsprites_BrokenReelTimeMachine,20
sSubsprites_BrokenReelTimeMachine:
	.byte	-0x20
	.byte	-0x18
	.byte	0xd
	.byte	0x40
	.byte	-0x20
	.byte	0x8
	.byte	0x5
	.byte	0x42
	.byte	0x0
	.byte	0x8
	.byte	0x45
	.byte	0x42
	.byte	-0x20
	.byte	0x10
	.byte	0x85
	.byte	0x42
	.byte	0x0
	.byte	0x10
	.byte	0xc5
	.byte	0x42
	.align	2, 0
	.type	 sSubspriteTable_BrokenReelTimeMachine,object
sSubspriteTable_BrokenReelTimeMachine:
	.byte	0x5
	.space	3
	.word	sSubsprites_BrokenReelTimeMachine
	.size	 sSubspriteTable_BrokenReelTimeMachine,8
	.align	2, 0
	.type	 sSubsprites_ReelTimeShadow,object
	.size	 sSubsprites_ReelTimeShadow,16
sSubsprites_ReelTimeShadow:
	.byte	-0x20
	.byte	-0x8
	.byte	0x5
	.byte	0x40
	.byte	0x0
	.byte	-0x8
	.byte	0x45
	.byte	0x40
	.byte	-0x20
	.byte	0x0
	.byte	0x85
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.byte	0xc5
	.byte	0x40
	.align	2, 0
	.type	 sSubspriteTable_ReelTimeShadow,object
sSubspriteTable_ReelTimeShadow:
	.byte	0x4
	.space	3
	.word	sSubsprites_ReelTimeShadow
	.size	 sSubspriteTable_ReelTimeShadow,8
	.align	2, 0
	.type	 sSubsprites_ReelTimeNumberGap,object
	.size	 sSubsprites_ReelTimeNumberGap,12
sSubsprites_ReelTimeNumberGap:
	.byte	-0x8
	.byte	-0xc
	.byte	0x1
	.byte	0x40
	.byte	-0x8
	.byte	-0x4
	.byte	0x1
	.byte	0x40
	.byte	-0x8
	.byte	0x4
	.byte	0x1
	.byte	0x40
	.align	2, 0
	.type	 sSubspriteTable_ReelTimeNumberGap,object
sSubspriteTable_ReelTimeNumberGap:
	.byte	0x3
	.space	3
	.word	sSubsprites_ReelTimeNumberGap
	.size	 sSubspriteTable_ReelTimeNumberGap,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_Reel,object
	.size	 sSubsprites_DigitalDisplay_Reel,20
sSubsprites_DigitalDisplay_Reel:
	.byte	-0x20
	.byte	-0x18
	.byte	0xd
	.byte	0xc0
	.byte	-0x20
	.byte	0x8
	.byte	0x5
	.byte	0xc2
	.byte	0x0
	.byte	0x8
	.byte	0x45
	.byte	0xc2
	.byte	-0x20
	.byte	0x10
	.byte	0x85
	.byte	0xc2
	.byte	0x0
	.byte	0x10
	.byte	0xc5
	.byte	0xc2
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_Reel,object
sSubspriteTable_DigitalDisplay_Reel:
	.byte	0x5
	.space	3
	.word	sSubsprites_DigitalDisplay_Reel
	.size	 sSubspriteTable_DigitalDisplay_Reel,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_Time,object
	.size	 sSubsprites_DigitalDisplay_Time,16
sSubsprites_DigitalDisplay_Time:
	.byte	-0x20
	.byte	-0x8
	.byte	0x5
	.byte	0xc0
	.byte	0x0
	.byte	-0x8
	.byte	0x45
	.byte	0xc0
	.byte	-0x20
	.byte	0x0
	.byte	0x85
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.byte	0xc5
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_Time,object
sSubspriteTable_DigitalDisplay_Time:
	.byte	0x4
	.space	3
	.word	sSubsprites_DigitalDisplay_Time
	.size	 sSubspriteTable_DigitalDisplay_Time,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_Insert,object
	.size	 sSubsprites_DigitalDisplay_Insert,16
sSubsprites_DigitalDisplay_Insert:
	.byte	-0x20
	.byte	-0x8
	.byte	0x5
	.byte	0xc0
	.byte	0x0
	.byte	-0x8
	.byte	0x45
	.byte	0xc0
	.byte	-0x20
	.byte	0x0
	.byte	0x85
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.byte	0xc5
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_Insert,object
sSubspriteTable_DigitalDisplay_Insert:
	.byte	0x4
	.space	3
	.word	sSubsprites_DigitalDisplay_Insert
	.size	 sSubspriteTable_DigitalDisplay_Insert,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_Unused1,object
	.size	 sSubsprites_DigitalDisplay_Unused1,16
sSubsprites_DigitalDisplay_Unused1:
	.byte	-0x20
	.byte	-0x8
	.byte	0x5
	.byte	0xc0
	.byte	0x0
	.byte	-0x8
	.byte	0x45
	.byte	0xc0
	.byte	-0x20
	.byte	0x0
	.byte	0x85
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.byte	0xc5
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_Unused1,object
sSubspriteTable_DigitalDisplay_Unused1:
	.byte	0x4
	.space	3
	.word	sSubsprites_DigitalDisplay_Unused1
	.size	 sSubspriteTable_DigitalDisplay_Unused1,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_Win,object
	.size	 sSubsprites_DigitalDisplay_Win,24
sSubsprites_DigitalDisplay_Win:
	.byte	-0x20
	.byte	-0xc
	.byte	0x5
	.byte	0xc0
	.byte	0x0
	.byte	-0xc
	.byte	0x45
	.byte	0xc0
	.byte	-0x20
	.byte	-0x4
	.byte	0x85
	.byte	0xc0
	.byte	0x0
	.byte	-0x4
	.byte	0xc5
	.byte	0xc0
	.byte	-0x20
	.byte	0x4
	.byte	0x5
	.byte	0xc1
	.byte	0x0
	.byte	0x4
	.byte	0x45
	.byte	0xc1
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_Win,object
sSubspriteTable_DigitalDisplay_Win:
	.byte	0x6
	.space	3
	.word	sSubsprites_DigitalDisplay_Win
	.size	 sSubspriteTable_DigitalDisplay_Win,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_Smoke,object
	.size	 sSubsprites_DigitalDisplay_Smoke,4
sSubsprites_DigitalDisplay_Smoke:
	.byte	-0x10
	.byte	-0x10
	.byte	0x8
	.byte	0xc0
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_Unused2,object
	.size	 sSubsprites_DigitalDisplay_Unused2,4
sSubsprites_DigitalDisplay_Unused2:
	.byte	-0x8
	.byte	-0x8
	.byte	0x4
	.byte	0xc1
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_Smoke,object
sSubspriteTable_DigitalDisplay_Smoke:
	.byte	0x1
	.space	3
	.word	sSubsprites_DigitalDisplay_Smoke
	.size	 sSubspriteTable_DigitalDisplay_Smoke,8
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_Unused2,object
sSubspriteTable_DigitalDisplay_Unused2:
	.byte	0x1
	.space	3
	.word	sSubsprites_DigitalDisplay_Unused2
	.size	 sSubspriteTable_DigitalDisplay_Unused2,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_Pokeball,object
	.size	 sSubsprites_DigitalDisplay_Pokeball,48
sSubsprites_DigitalDisplay_Pokeball:
	.byte	-0x18
	.byte	-0x18
	.byte	0x5
	.byte	0xc0
	.byte	0x8
	.byte	-0x18
	.byte	0x41
	.byte	0xc0
	.byte	-0x18
	.byte	-0x10
	.byte	0x65
	.byte	0xc0
	.byte	0x8
	.byte	-0x10
	.byte	0xa1
	.byte	0xc0
	.byte	-0x18
	.byte	-0x8
	.byte	0xc5
	.byte	0xc0
	.byte	0x8
	.byte	-0x8
	.byte	0x1
	.byte	0xc1
	.byte	-0x18
	.byte	0x0
	.byte	0x25
	.byte	0xc1
	.byte	0x8
	.byte	0x0
	.byte	0x61
	.byte	0xc1
	.byte	-0x18
	.byte	0x8
	.byte	0x85
	.byte	0xc1
	.byte	0x8
	.byte	0x8
	.byte	0xc1
	.byte	0xc1
	.byte	-0x18
	.byte	0x10
	.byte	0xe5
	.byte	0xc1
	.byte	0x8
	.byte	0x10
	.byte	0x21
	.byte	0xc2
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_Pokeball,object
sSubspriteTable_DigitalDisplay_Pokeball:
	.byte	0xc
	.space	3
	.word	sSubsprites_DigitalDisplay_Pokeball
	.size	 sSubspriteTable_DigitalDisplay_Pokeball,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_DPad,object
	.size	 sSubsprites_DigitalDisplay_DPad,12
sSubsprites_DigitalDisplay_DPad:
	.byte	-0x10
	.byte	-0xc
	.byte	0x9
	.byte	0xc0
	.byte	-0x10
	.byte	0x4
	.byte	0x81
	.byte	0xc0
	.byte	0x0
	.byte	0x4
	.byte	0xa1
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_DPad,object
sSubspriteTable_DigitalDisplay_DPad:
	.byte	0x3
	.space	3
	.word	sSubsprites_DigitalDisplay_DPad
	.size	 sSubspriteTable_DigitalDisplay_DPad,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_StopS,object
	.size	 sSubsprites_DigitalDisplay_StopS,8
sSubsprites_DigitalDisplay_StopS:
	.byte	-0x8
	.byte	-0x8
	.byte	0x1
	.byte	0xc0
	.byte	-0x8
	.byte	0x0
	.byte	0x81
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_StopS,object
sSubspriteTable_DigitalDisplay_StopS:
	.byte	0x2
	.space	3
	.word	sSubsprites_DigitalDisplay_StopS
	.size	 sSubspriteTable_DigitalDisplay_StopS,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_StopT,object
	.size	 sSubsprites_DigitalDisplay_StopT,8
sSubsprites_DigitalDisplay_StopT:
	.byte	-0x8
	.byte	-0x8
	.byte	0x21
	.byte	0xc0
	.byte	-0x8
	.byte	0x0
	.byte	0xa1
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_StopT,object
sSubspriteTable_DigitalDisplay_StopT:
	.byte	0x2
	.space	3
	.word	sSubsprites_DigitalDisplay_StopT
	.size	 sSubspriteTable_DigitalDisplay_StopT,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_StopO,object
	.size	 sSubsprites_DigitalDisplay_StopO,8
sSubsprites_DigitalDisplay_StopO:
	.byte	-0x8
	.byte	-0x8
	.byte	0x41
	.byte	0xc0
	.byte	-0x8
	.byte	0x0
	.byte	0xc1
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_StopO,object
sSubspriteTable_DigitalDisplay_StopO:
	.byte	0x2
	.space	3
	.word	sSubsprites_DigitalDisplay_StopO
	.size	 sSubspriteTable_DigitalDisplay_StopO,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_StopP,object
	.size	 sSubsprites_DigitalDisplay_StopP,8
sSubsprites_DigitalDisplay_StopP:
	.byte	-0x8
	.byte	-0x8
	.byte	0x61
	.byte	0xc0
	.byte	-0x8
	.byte	0x0
	.byte	0xe1
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_StopP,object
sSubspriteTable_DigitalDisplay_StopP:
	.byte	0x2
	.space	3
	.word	sSubsprites_DigitalDisplay_StopP
	.size	 sSubspriteTable_DigitalDisplay_StopP,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_BonusB,object
	.size	 sSubsprites_DigitalDisplay_BonusB,8
sSubsprites_DigitalDisplay_BonusB:
	.byte	-0x8
	.byte	-0x8
	.byte	0x1
	.byte	0xc0
	.byte	-0x8
	.byte	0x0
	.byte	0x81
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_BonusB,object
sSubspriteTable_DigitalDisplay_BonusB:
	.byte	0x2
	.space	3
	.word	sSubsprites_DigitalDisplay_BonusB
	.size	 sSubspriteTable_DigitalDisplay_BonusB,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_BonusO,object
	.size	 sSubsprites_DigitalDisplay_BonusO,8
sSubsprites_DigitalDisplay_BonusO:
	.byte	-0x4
	.byte	-0x8
	.byte	0x20
	.byte	0xc0
	.byte	-0x4
	.byte	0x0
	.byte	0xa0
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_BonusO,object
sSubspriteTable_DigitalDisplay_BonusO:
	.byte	0x2
	.space	3
	.word	sSubsprites_DigitalDisplay_BonusO
	.size	 sSubspriteTable_DigitalDisplay_BonusO,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_BonusN,object
	.size	 sSubsprites_DigitalDisplay_BonusN,8
sSubsprites_DigitalDisplay_BonusN:
	.byte	-0x8
	.byte	-0x8
	.byte	0x31
	.byte	0xc0
	.byte	-0x8
	.byte	0x0
	.byte	0xb1
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_BonusN,object
sSubspriteTable_DigitalDisplay_BonusN:
	.byte	0x2
	.space	3
	.word	sSubsprites_DigitalDisplay_BonusN
	.size	 sSubspriteTable_DigitalDisplay_BonusN,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_BonusU,object
	.size	 sSubsprites_DigitalDisplay_BonusU,8
sSubsprites_DigitalDisplay_BonusU:
	.byte	-0x4
	.byte	-0x8
	.byte	0x50
	.byte	0xc0
	.byte	-0x4
	.byte	0x0
	.byte	0xd0
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_BonusU,object
sSubspriteTable_DigitalDisplay_BonusU:
	.byte	0x2
	.space	3
	.word	sSubsprites_DigitalDisplay_BonusU
	.size	 sSubspriteTable_DigitalDisplay_BonusU,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_BonusS,object
	.size	 sSubsprites_DigitalDisplay_BonusS,8
sSubsprites_DigitalDisplay_BonusS:
	.byte	-0x8
	.byte	-0x8
	.byte	0x61
	.byte	0xc0
	.byte	-0x8
	.byte	0x0
	.byte	0xe1
	.byte	0xc0
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_BonusS,object
sSubspriteTable_DigitalDisplay_BonusS:
	.byte	0x2
	.space	3
	.word	sSubsprites_DigitalDisplay_BonusS
	.size	 sSubspriteTable_DigitalDisplay_BonusS,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_BigB,object
	.size	 sSubsprites_DigitalDisplay_BigB,24
sSubsprites_DigitalDisplay_BigB:
	.byte	-0xc
	.byte	-0xc
	.byte	0x1
	.byte	0xc0
	.byte	0x4
	.byte	-0xc
	.byte	0x20
	.byte	0xc0
	.byte	-0xc
	.byte	-0x4
	.byte	0x81
	.byte	0xc0
	.byte	0x4
	.byte	-0x4
	.byte	0xa0
	.byte	0xc0
	.byte	-0xc
	.byte	0x4
	.byte	0x1
	.byte	0xc1
	.byte	0x4
	.byte	0x4
	.byte	0x20
	.byte	0xc1
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_BigB,object
sSubspriteTable_DigitalDisplay_BigB:
	.byte	0x6
	.space	3
	.word	sSubsprites_DigitalDisplay_BigB
	.size	 sSubspriteTable_DigitalDisplay_BigB,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_BigI,object
	.size	 sSubsprites_DigitalDisplay_BigI,12
sSubsprites_DigitalDisplay_BigI:
	.byte	-0x8
	.byte	-0xc
	.byte	0x31
	.byte	0xc0
	.byte	-0x8
	.byte	-0x4
	.byte	0xb1
	.byte	0xc0
	.byte	-0x8
	.byte	0x4
	.byte	0x31
	.byte	0xc1
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_BigI,object
sSubspriteTable_DigitalDisplay_BigI:
	.byte	0x3
	.space	3
	.word	sSubsprites_DigitalDisplay_BigI
	.size	 sSubspriteTable_DigitalDisplay_BigI,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_BigG,object
	.size	 sSubsprites_DigitalDisplay_BigG,24
sSubsprites_DigitalDisplay_BigG:
	.byte	-0xc
	.byte	-0xc
	.byte	0x51
	.byte	0xc0
	.byte	0x4
	.byte	-0xc
	.byte	0x70
	.byte	0xc0
	.byte	-0xc
	.byte	-0x4
	.byte	0xd1
	.byte	0xc0
	.byte	0x4
	.byte	-0x4
	.byte	0xf0
	.byte	0xc0
	.byte	-0xc
	.byte	0x4
	.byte	0x51
	.byte	0xc1
	.byte	0x4
	.byte	0x4
	.byte	0x70
	.byte	0xc1
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_BigG,object
sSubspriteTable_DigitalDisplay_BigG:
	.byte	0x6
	.space	3
	.word	sSubsprites_DigitalDisplay_BigG
	.size	 sSubspriteTable_DigitalDisplay_BigG,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_RegR,object
	.size	 sSubsprites_DigitalDisplay_RegR,24
sSubsprites_DigitalDisplay_RegR:
	.byte	-0xc
	.byte	-0xc
	.byte	0x1
	.byte	0xc0
	.byte	0x4
	.byte	-0xc
	.byte	0x20
	.byte	0xc0
	.byte	-0xc
	.byte	-0x4
	.byte	0x81
	.byte	0xc0
	.byte	0x4
	.byte	-0x4
	.byte	0xa0
	.byte	0xc0
	.byte	-0xc
	.byte	0x4
	.byte	0x1
	.byte	0xc1
	.byte	0x4
	.byte	0x4
	.byte	0x20
	.byte	0xc1
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_RegR,object
sSubspriteTable_DigitalDisplay_RegR:
	.byte	0x6
	.space	3
	.word	sSubsprites_DigitalDisplay_RegR
	.size	 sSubspriteTable_DigitalDisplay_RegR,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_RegE,object
	.size	 sSubsprites_DigitalDisplay_RegE,12
sSubsprites_DigitalDisplay_RegE:
	.byte	-0x8
	.byte	-0xc
	.byte	0x31
	.byte	0xc0
	.byte	-0x8
	.byte	-0x4
	.byte	0xb1
	.byte	0xc0
	.byte	-0x8
	.byte	0x4
	.byte	0x31
	.byte	0xc1
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_RegE,object
sSubspriteTable_DigitalDisplay_RegE:
	.byte	0x3
	.space	3
	.word	sSubsprites_DigitalDisplay_RegE
	.size	 sSubspriteTable_DigitalDisplay_RegE,8
	.align	2, 0
	.type	 sSubsprites_DigitalDisplay_RegG,object
	.size	 sSubsprites_DigitalDisplay_RegG,24
sSubsprites_DigitalDisplay_RegG:
	.byte	-0xc
	.byte	-0xc
	.byte	0x51
	.byte	0xc0
	.byte	0x4
	.byte	-0xc
	.byte	0x70
	.byte	0xc0
	.byte	-0xc
	.byte	-0x4
	.byte	0xd1
	.byte	0xc0
	.byte	0x4
	.byte	-0x4
	.byte	0xf0
	.byte	0xc0
	.byte	-0xc
	.byte	0x4
	.byte	0x51
	.byte	0xc1
	.byte	0x4
	.byte	0x4
	.byte	0x70
	.byte	0xc1
	.align	2, 0
	.type	 sSubspriteTable_DigitalDisplay_RegG,object
sSubspriteTable_DigitalDisplay_RegG:
	.byte	0x6
	.space	3
	.word	sSubsprites_DigitalDisplay_RegG
	.size	 sSubspriteTable_DigitalDisplay_RegG,8
	.align	2, 0
	.type	 sSpriteTemplates_DigitalDisplay,object
	.size	 sSpriteTemplates_DigitalDisplay,104
sSpriteTemplates_DigitalDisplay:
	.word	sSpriteTemplate_DigitalDisplay_Reel
	.word	sSpriteTemplate_DigitalDisplay_Time
	.word	sSpriteTemplate_DigitalDisplay_Insert
	.word	sSpriteTemplate_DigitalDisplay_Win
	.word	sSpriteTemplate_DigitalDisplay_Lose
	.word	sSpriteTemplate_DigitalDisplay_AButton
	.word	sSpriteTemplate_DigitalDisplay_Smoke
	.word	sSpriteTemplate_DigitalDisplay_Number
	.word	sSpriteTemplate_DigitalDisplay_Pokeball
	.word	sSpriteTemplate_DigitalDisplay_DPad
	.word	sSpriteTemplate_DigitalDisplay_Stop
	.word	sSpriteTemplate_DigitalDisplay_Stop
	.word	sSpriteTemplate_DigitalDisplay_Stop
	.word	sSpriteTemplate_DigitalDisplay_Stop
	.word	sSpriteTemplate_DigitalDisplay_Bonus
	.word	sSpriteTemplate_DigitalDisplay_Bonus
	.word	sSpriteTemplate_DigitalDisplay_Bonus
	.word	sSpriteTemplate_DigitalDisplay_Bonus
	.word	sSpriteTemplate_DigitalDisplay_Bonus
	.word	sSpriteTemplate_DigitalDisplay_Big
	.word	sSpriteTemplate_DigitalDisplay_Big
	.word	sSpriteTemplate_DigitalDisplay_Big
	.word	sSpriteTemplate_DigitalDisplay_Reg
	.word	sSpriteTemplate_DigitalDisplay_Reg
	.word	sSpriteTemplate_DigitalDisplay_Reg
	.word	gDummySpriteTemplate
	.align	2, 0
	.type	 sSubspriteTables_DigitalDisplay,object
	.size	 sSubspriteTables_DigitalDisplay,104
sSubspriteTables_DigitalDisplay:
	.word	sSubspriteTable_DigitalDisplay_Reel
	.word	sSubspriteTable_DigitalDisplay_Time
	.word	sSubspriteTable_DigitalDisplay_Insert
	.word	sSubspriteTable_DigitalDisplay_Win
	.word	0x0
	.word	0x0
	.word	sSubspriteTable_DigitalDisplay_Smoke
	.word	0x0
	.word	sSubspriteTable_DigitalDisplay_Pokeball
	.word	sSubspriteTable_DigitalDisplay_DPad
	.word	sSubspriteTable_DigitalDisplay_StopS
	.word	sSubspriteTable_DigitalDisplay_StopT
	.word	sSubspriteTable_DigitalDisplay_StopO
	.word	sSubspriteTable_DigitalDisplay_StopP
	.word	sSubspriteTable_DigitalDisplay_BonusB
	.word	sSubspriteTable_DigitalDisplay_BonusO
	.word	sSubspriteTable_DigitalDisplay_BonusN
	.word	sSubspriteTable_DigitalDisplay_BonusU
	.word	sSubspriteTable_DigitalDisplay_BonusS
	.word	sSubspriteTable_DigitalDisplay_BigB
	.word	sSubspriteTable_DigitalDisplay_BigI
	.word	sSubspriteTable_DigitalDisplay_BigG
	.word	sSubspriteTable_DigitalDisplay_RegR
	.word	sSubspriteTable_DigitalDisplay_RegE
	.word	sSubspriteTable_DigitalDisplay_RegG
	.word	0x0
	.align	2, 0
	.type	 sSlotMachineSpriteSheets,object
	.size	 sSlotMachineSpriteSheets,176
sSlotMachineSpriteSheets:
	.word	gSlotMachineReelSymbol1Tiles
	.short	0x200
	.short	0x0
	.word	gSlotMachineReelSymbol2Tiles
	.short	0x200
	.short	0x1
	.word	gSlotMachineReelSymbol3Tiles
	.short	0x200
	.short	0x2
	.word	gSlotMachineReelSymbol4Tiles
	.short	0x200
	.short	0x3
	.word	gSlotMachineReelSymbol5Tiles
	.short	0x200
	.short	0x4
	.word	gSlotMachineReelSymbol6Tiles
	.short	0x200
	.short	0x5
	.word	gSlotMachineReelSymbol7Tiles
	.short	0x200
	.short	0x6
	.word	gSlotMachineNumber0Tiles
	.short	0x40
	.short	0x7
	.word	gSlotMachineNumber1Tiles
	.short	0x40
	.short	0x8
	.word	gSlotMachineNumber2Tiles
	.short	0x40
	.short	0x9
	.word	gSlotMachineNumber3Tiles
	.short	0x40
	.short	0xa
	.word	gSlotMachineNumber4Tiles
	.short	0x40
	.short	0xb
	.word	gSlotMachineNumber5Tiles
	.short	0x40
	.short	0xc
	.word	gSlotMachineNumber6Tiles
	.short	0x40
	.short	0xd
	.word	gSlotMachineNumber7Tiles
	.short	0x40
	.short	0xe
	.word	gSlotMachineNumber8Tiles
	.short	0x40
	.short	0xf
	.word	gSlotMachineNumber9Tiles
	.short	0x40
	.short	0x10
	.word	0x0
	.short	0x200
	.short	0x12
	.word	0x0
	.short	0x200
	.short	0x13
	.word	0x0
	.short	0x300
	.short	0x14
	.word	0x0
	.short	0x300
	.short	0x15
	.space	8
	.align	2, 0
	.type	 sReelBackground_Tilemap,object
	.size	 sReelBackground_Tilemap,4
sReelBackground_Tilemap:
	.word	gSlotMachineReelBackground_Tilemap
	.align	1, 0
	.type	 sUnused,object
sUnused:
	.short	0x6f7b
	.short	0x6968
	.short	0x36ab
	.short	0x7fff
	.short	0x5750
	.short	0x7ec0
	.short	0x2ba
	.short	0x2ba
	.short	0x1fd
	.short	0x1fd
	.size	 sUnused,20
	.align	1, 0
	.type	 sMiddleRowLit_Pal,object
sMiddleRowLit_Pal:
	.short	0x7f91
	.size	 sMiddleRowLit_Pal,2
	.align	1, 0
	.type	 sTopRowLit_Pal,object
sTopRowLit_Pal:
	.short	0x43bf
	.size	 sTopRowLit_Pal,2
	.align	1, 0
	.type	 sBottomRowt_Pal,object
sBottomRowt_Pal:
	.short	0x43bf
	.size	 sBottomRowt_Pal,2
	.align	1, 0
	.type	 sNWSEDiagLit_Pal,object
sNWSEDiagLit_Pal:
	.short	0x4abf
	.size	 sNWSEDiagLit_Pal,2
	.align	1, 0
	.type	 sNESWDiagLit_Pal,object
sNESWDiagLit_Pal:
	.short	0x4abf
	.size	 sNESWDiagLit_Pal,2
	.align	2, 0
	.type	 sLitMatchLinePalTable,object
	.size	 sLitMatchLinePalTable,20
sLitMatchLinePalTable:
	.word	sMiddleRowLit_Pal
	.word	sTopRowLit_Pal
	.word	sBottomRowt_Pal
	.word	sNWSEDiagLit_Pal
	.word	sNESWDiagLit_Pal
	.align	2, 0
	.type	 sDarkMatchLinePalTable,object
	.size	 sDarkMatchLinePalTable,20
sDarkMatchLinePalTable:
	.word	gSlotMachineMenu_Pal+0x94
	.word	gSlotMachineMenu_Pal+0x96
	.word	gSlotMachineMenu_Pal+0x98
	.word	gSlotMachineMenu_Pal+0x9a
	.word	gSlotMachineMenu_Pal+0x9c
	.type	 sMatchLinePalOffsets,object
	.size	 sMatchLinePalOffsets,5
sMatchLinePalOffsets:
	.byte	0x4a
	.byte	0x4b
	.byte	0x4c
	.byte	0x4e
	.byte	0x4d
	.type	 sBetToMatchLineIds,object
	.size	 sBetToMatchLineIds,6
sBetToMatchLineIds:
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x4
	.type	 sMatchLinesPerBet,object
	.size	 sMatchLinesPerBet,3
sMatchLinesPerBet:
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.align	1, 0
	.type	 sFlashingLightsInside_Pal,object
sFlashingLightsInside_Pal:
	.short	0x6f7b
	.short	0x7fff
	.short	0x5750
	.short	0x43ff
	.short	0x22df
	.short	0x7fff
	.short	0x43ff
	.short	0x43ff
	.short	0x22df
	.short	0x22df
	.short	0x17f
	.short	0x17f
	.short	0xbb
	.short	0x7c1f
	.short	0x13
	.short	0x0
	.size	 sFlashingLightsInside_Pal,32
	.align	1, 0
	.type	 sFlashingLightsMiddle_Pal,object
sFlashingLightsMiddle_Pal:
	.short	0x6f7b
	.short	0x7fff
	.short	0x5750
	.short	0x22df
	.short	0x17f
	.short	0x43ff
	.short	0x22df
	.short	0x7fff
	.short	0x43ff
	.short	0x43ff
	.short	0x22df
	.short	0x22df
	.short	0x17f
	.short	0x7c1f
	.short	0x13
	.short	0x0
	.size	 sFlashingLightsMiddle_Pal,32
	.align	1, 0
	.type	 sFlashingLightsOutside_Pal,object
sFlashingLightsOutside_Pal:
	.short	0x6f7b
	.short	0x7fff
	.short	0x5750
	.short	0x17f
	.short	0xbb
	.short	0x22df
	.short	0x17f
	.short	0x43ff
	.short	0x22df
	.short	0x7fff
	.short	0x43ff
	.short	0x43ff
	.short	0x22df
	.short	0x7c1f
	.short	0x13
	.short	0x0
	.size	 sFlashingLightsOutside_Pal,32
	.align	2, 0
	.type	 sFlashingLightsPalTable,object
sFlashingLightsPalTable:
	.word	sFlashingLightsInside_Pal
	.word	sFlashingLightsMiddle_Pal
	.word	sFlashingLightsOutside_Pal
	.size	 sFlashingLightsPalTable,12
	.align	2, 0
	.type	 sSlotMachineMenu_Pal,object
	.size	 sSlotMachineMenu_Pal,4
sSlotMachineMenu_Pal:
	.word	gSlotMachineMenu_Pal+0x20
	.align	1, 0
	.type	 sPokeballShining0_Pal,object
sPokeballShining0_Pal:
	.short	0x2d8c
	.short	0xaff
	.short	0x10
	.short	0xaff
	.short	0x918
	.short	0x918
	.short	0x918
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x0
	.size	 sPokeballShining0_Pal,32
	.align	1, 0
	.type	 sPokeballShining1_Pal,object
sPokeballShining1_Pal:
	.short	0x2d8c
	.short	0xaff
	.short	0x10
	.short	0x918
	.short	0xaff
	.short	0x918
	.short	0x918
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x0
	.size	 sPokeballShining1_Pal,32
	.align	1, 0
	.type	 sPokeballShining2_Pal,object
sPokeballShining2_Pal:
	.short	0x2d8c
	.short	0xaff
	.short	0x10
	.short	0x918
	.short	0x918
	.short	0xaff
	.short	0x918
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x0
	.size	 sPokeballShining2_Pal,32
	.align	2, 0
	.type	 sPokeballShiningPalTable,object
sPokeballShiningPalTable:
	.word	sPokeballShining0_Pal
	.word	sPokeballShining1_Pal
	.word	sPokeballShining2_Pal
	.word	gSlotMachineDigitalDisplay_Pal
	.size	 sPokeballShiningPalTable,16
	.align	2, 0
	.type	 sDigitalDisplay_Pal,object
	.size	 sDigitalDisplay_Pal,4
sDigitalDisplay_Pal:
	.word	gSlotMachineDigitalDisplay_Pal
	.align	1, 0
	.type	 sUnkPalette,object
sUnkPalette:
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0x2108
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sUnkPalette,32
	.align	2, 0
	.type	 sSlotMachineSpritePalettes,object
sSlotMachineSpritePalettes:
	.word	gSlotMachineReelSymbols_Pal
	.short	0x0
	.space	2
	.word	gSlotMachineReelTimePikachu_Pal
	.short	0x1
	.space	2
	.word	gSlotMachineReelTimeMisc_Pal
	.short	0x2
	.space	2
	.word	gSlotMachineReelTimeMachine_Pal
	.short	0x3
	.space	2
	.word	gSlotMachineMisc_Pal
	.short	0x4
	.space	2
	.word	gSlotMachineReelTimeExplosion_Pal
	.short	0x5
	.space	2
	.word	gSlotMachineDigitalDisplay_Pal
	.short	0x6
	.space	2
	.word	gSlotMachineMisc_Pal
	.short	0x7
	.space	2
	.space	8
	.size	 sSlotMachineSpritePalettes,72
	.align	2, 0
	.type	 sReelTimeGfx,object
sReelTimeGfx:
	.word	0x360010
	.word	-0xfffffc1
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0x1afe0fff
	.word	0x1f001f0
	.word	-0x111ffeb0
	.word	-0xf12fd00
	.word	0x170bf17
	.word	-0xfed0ff2
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0fe01
	.word	0x1f001f0
	.word	-0x180ffe10
	.word	0x320e300
	.word	0x380acdd
	.word	0x261800de
	.word	0x4010310
	.word	0xb5ee00
	.word	0x800eee8
	.word	0x200e0330
	.word	0xc00e303
	.word	0x6333331f
	.word	0x1f04ef0
	.word	0x1f001f0
	.word	-0xf35fe10
	.word	0x6001c001
	.word	0x62030006
	.word	0xeea931
	.word	-0x22221f12
	.word	-0x22111f13
	.word	-0x63ff22a5
	.word	0x101010ee
	.word	-0x3cdefa57
	.word	0x6e400130
	.word	0x622d2d00
	.word	0x222e0005
	.word	0x3e05621b
	.word	0x300b800
	.word	0x31033
	.word	0x10256a1a
	.word	0x5003004c
	.word	0x52b50
	.word	0x6303
	.word	0x66336666
	.word	0x12322222
	.word	0x63333
	.word	0x220e03
	.word	0xa02603
	.word	0x3002503
	.word	0xe433360
	.word	0x3008766
	.word	0x66433633
	.word	0x1f097f0
	.word	-0xf14fe10
	.word	0x6001f001
	.word	0x33032e7
	.word	0x20030050
	.word	-0x68de3455
	.word	0x63250340
	.word	0x33e400
	.word	0x5ad20004
	.word	0x63ce0005
	.word	0x1a00300
	.word	-0x191cef92
	.word	0x6eee28
	.word	0x201362b
	.word	0x64066336
	.word	0x250060
	.word	0x10663303
	.word	0xc36361e
	.word	0x23222222
	.word	0x600e600
	.word	0x10cf2333
	.word	0x4301e0ed
	.word	0x10040044
	.word	0x1f003
	.word	0x313a501
	.word	0x2f21e3
	.word	0x330c1000
	.word	0x12810c00
	.word	0x6ab3316
	.word	-0xc544d00
	.word	0x1f0f721
	.word	0xd101f0
	.word	-0x2f1ffc80
	.word	0x50b1101c
	.word	0x365b03
	.word	-0xfff1ffd
	.word	0x4036fb01
	.word	-0x5f17efd5
	.word	0x4313d1
	.word	0x333ee403
	.word	0x320d5e43
	.word	0x1055e433
	.word	-0x1bf8edf0
	.word	0x10870340
	.word	0x5555550b
	.word	0x20030045
	.word	-0x770e0fff
	.word	0x55433f20
	.word	0x33271034
	.word	-0x44f74ccd
	.word	0x1043000e
	.word	0xe403
	.word	-0x11ffbbac
	.word	0x66710264
	.word	0x33640801
	.word	0x33000607
	.word	-0x320f9bca
	.word	0x1f001f0
	.word	-0xffe0f06
	.word	0x2017001
	.word	0x261f1207
	.word	-0x1e1f0900
	.word	0x160f750
	.word	0x3355e600
	.word	-0x38ef99bd
	.word	0x11f031c0
	.word	0x44433623
	.word	0x7544460
	.word	0x555556e5
	.word	0xe6405e
	.word	0x7e2030cd
	.word	0x300e3
	.word	0x30ff6014
	.word	0x61016019
	.word	0x11a7454b
	.word	0xb013503
	.word	0x7b02e436
	.word	0x10300
	.word	0x1335b
	.word	0x11ff00e6
	.word	0xf114407
	.word	-0xf010110
	.word	-0xffe0fff
	.word	-0x2dfe0fff
	.word	0x4001f01f
	.word	0x55005501
	.word	0x56ee5ee5
	.word	0x46e555
	.word	0x4e5556e3
	.word	0x4e56e334
	.word	-0x1cbbbc00
	.word	0x44444460
	.word	0x30086e0
	.word	0x4456ee00
	.word	-0x10ff1df0
	.word	0x42657834
	.word	0x101f11e4
	.word	0x441e0001
	.word	-0x19c6abbc
	.word	0x42e700ee
	.word	0x440713ff
	.word	-0x2ef9ffbc
	.word	0x1101a20
	.word	0x6052045
	.word	-0xfffbc00
	.word	0x370e1
	.word	0x66fb200f
	.word	0x23366600
	.word	0x1f0fe1e
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x4447b60
	.word	-0xff0ea5d
	.word	0x66011001
	.word	0x16f02915
	.word	-0x11fe9f79
	.word	0x3566666e
	.word	0x1001f04f
	.word	0x44440301
	.word	-0x1111f11c
	.word	0x1f05904
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0x11fe0fff
	.word	-0x1997fe10
	.word	0x50de0b59
	.word	0xf0003
	.word	0x10ffe003
	.word	0x100fb907
	.word	0x40332803
	.word	-0xffe0ffd
	.word	-0x10fe0fff
	.word	-0x4a3dfe10
	.word	0x3456f614
	.word	0x18ab69f3
	.word	0x687a90b7
	.word	0x602000e0
	.word	-0x4eef1269
	.word	0x800eedd
	.word	0x6eeddeee
	.word	-0x11ddddf8
	.word	0x233e0eee
	.word	-0xd81112
	.word	-0xe8fe20
	.word	0x300a052
	.word	0x60081023
	.word	0x6000eee2
	.word	0x5e3222f
	.word	0x3703362
	.word	0x3403700
	.word	0xbf1b29
	.word	-0x4e91cfd
	.word	0xa030310
	.word	0x3000720
	.word	-0xf04f9fc
	.word	-0xffe0fff
	.word	0xdeb501
	.word	0x30025a3
	.word	0x58cbff17
	.word	0x260f680b
	.word	0x33e40033
	.word	-0x20aafc00
	.word	-0x1ffe2f53
	.word	0x4700d006
	.word	-0x1fcafeed
	.word	0x63459f20
	.word	0x63339b06
	.word	0x561e00e0
	.word	0x48aab07
	.word	0x332266fa
	.word	0x86e0808
	.word	0x906008
	.word	0x78333603
	.word	0x35666608
	.word	0x8327f43
	.word	0x10ff08e8
	.word	-0x6f98d8fd
	.word	0x11e31001
	.word	-0xcaa0073
	.word	-0x3ff00d9
	.word	0x1ffa4906
	.word	0x1f001f0
	.word	0x58f501f0
	.word	-0x1f3ce715
	.word	-0x11746fff
	.word	0x800bc05
	.word	-0xbe0700
	.word	-0x2db9e8d9
	.word	-0x1dc84cd9
	.word	0x6005e43
	.word	0x71307df
	.word	-0x20c81be9
	.word	-0x8e80ceb
	.word	-0xee9fef0
	.word	-0x8049914
	.word	0x33fb56ff
	.word	0x720fb06
	.word	-0x54e7cccd
	.word	-0x17f7ccf2
	.word	0x43330818
	.word	0x33062bbb
	.word	0x16430401
	.word	0x738e607
	.word	-0xf004e10
	.word	-0xffe0fff
	.word	-0x7dfe0fff
	.word	0x193121f
	.word	-0x3ddc7e1c
	.word	0x300fb28
	.word	0x56643356
	.word	-0x2d9c3d00
	.word	-0x44d81df0
	.word	0x46a0006e
	.word	-0x1a0de9bc
	.word	-0x1122ff42
	.word	-0x3adf15e8
	.word	-0xffcaf
	.word	-0x541cfe20
	.word	0x431208
	.word	0x7104318
	.word	0x18550a63
	.word	0x358ffe7
	.word	0x3280317
	.word	0x14120317
	.word	0x1f001f0
	.word	-0xf05fe10
	.word	0x6601f001
	.word	-0x15e4755e
	.word	-0x1bff91e1
	.word	0x4008433
	.word	0x456e3334
	.word	0x466ec007
	.word	0x3334441b
	.word	-0x78fcf8
	.word	-0x7704dfbb
	.word	-0x1e78401a
	.word	0x123e1be6
	.word	-0x7f00c8c9
	.word	0x17017019
	.word	0x17647bff
	.word	0x10034007
	.word	0x6607180b
	.word	0x6d130301
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0x8fe0fff
	.word	-0x80701
	.word	-0x8e310
	.word	0x3f4019f0
	.word	-0xf99bba
	.word	0x1f0fff7
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0fa01
	.word	0x1f001f0
	.word	-0x16c9fe10
	.word	-0x1116f9f2
	.word	-0x211ff9fb
	.word	-0x10f1ad23
	.word	-0x20de0fde
	.word	-0x6eeefed0
	.word	-0xf690eae
	.word	-0xffe0fff
	.word	0x6fe301
	.word	0x5600dde6
	.word	0x2256edd2
	.word	0x17e2d27f
	.word	0x20081010
	.word	0x1f0fff7
	.word	0x1f001f0
	.word	0x5ba12eb
	.word	0x340d3
	.word	0x14e00310
	.word	0x44e76ce7
	.word	0x33e40022
	.word	0x7f046222
	.word	0x330f0622
	.word	0x44e22333
	.word	0x2eef25e7
	.word	0x174b90fb
	.word	0x10666665
	.word	-0x21f9b1ed
	.word	-0x10f111fa
	.word	0x1f102268
	.word	0x1604107
	.word	0x5322647
	.word	0x3322600e
	.word	0x15201063
	.word	0x43083c08
	.word	-0x1ccdddff
	.word	-0x1ccccd12
	.word	0x20a42908
	.word	-0x18cbf1fd
	.word	-0x15fb9ff2
	.word	0xe106426
	.word	-0x1e8bcda0
	.word	0x56000555
	.word	0x62227
	.word	0x7250e42
	.word	0x780600
	.word	0xf6fc2b
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x33361f71
	.word	-0x8e9ff93
	.word	0x508f06
	.word	-0x1c6df790
	.word	0x36000300
	.word	0x333aa360
	.word	-0x44555a0
	.word	-0x25ef2c11
	.word	-0xfc9efe9
	.word	0x4ce60920
	.word	-0x2fccee06
	.word	0x15104407
	.word	-0x55e1efca
	.word	0x28a33333
	.word	0x5f060eba
	.word	0x65f0606
	.word	0x333b3326
	.word	0x5f4a0064
	.word	-0x14fcefd9
	.word	-0x18dfc8d0
	.word	0x440370af
	.word	0x26e60307
	.word	-0xffdff01
	.word	-0xffe0fff
	.word	0x1f001f0
	.word	0x15001f0
	.word	0x3bbbae
	.word	0x300e650
	.word	0x35ff0636
	.word	0x506643
	.word	0x60555333
	.word	0x60533633
	.word	0xc003375
	.word	-0x6d92cf0
	.word	0x561b2966
	.word	0x1582b145
	.word	0x33344eff
	.word	-0x19deb1bd
	.word	0x33bb04aa
	.word	0x5ebbb33
	.word	0x20544eb7
	.word	-0xcf2b99a
	.word	0x56444455
	.word	0x44461033
	.word	0x36de0736
	.word	0xd3e4333
	.word	0x36e64333
	.word	0x4600c708
	.word	0x38030006
	.word	0x4006463
	.word	0x3004418
	.word	-0xc91b1c
	.word	0x77f34809
	.word	-0x70e08d7
	.word	0x1f001f0
	.word	0x14001f0
	.word	-0x1cb9af87
	.word	0xf100350
	.word	0x36350120
	.word	0x631f8e00
	.word	-0x4de6b112
	.word	0x330eb11
	.word	-0x41403089
	.word	0x1601b0f7
	.word	0x1ec01ce
	.word	-0xafe193d
	.word	0x762df1e
	.word	0x34f326a0
	.word	0x564eef0e
	.word	0xc440e33
	.word	0x44e45564
	.word	0x3002b09
	.word	-0x1bc0bb12
	.word	0x6d72fee
	.word	-0x640cd60a
	.word	-0xffe0f05
	.word	0x1f0f801
	.word	0x1f001f0
	.word	0xf6501f0
	.word	-0x6fbbccca
	.word	0x60ee7008
	.word	0x46369201
	.word	-0x19bcf11a
	.word	0x64448bc6
	.word	-0x61099112
	.word	0x7efbf9e
	.word	0x7100ce5
	.word	0x4c134427
	.word	-0x495dee00
	.word	0x10cf0c10
	.word	0xf2003e
	.word	0x1b080046
	.word	-0xffe0f15
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x2601f0f0
	.word	-0x3a88e3a1
	.word	-0x11fff191
	.word	0xe0fdd
	.word	0x300eddd
	.word	0x1f00cf2
	.word	-0xf08fe10
	.word	0x2e64f001
	.word	-0x21f8ff53
	.word	-0x2cf5e410
	.word	0x2d01d109
	.word	-0x22999ade
	.word	-0x8ddde
	.word	-0xf116906
	.word	0x4657f412
	.word	0x330600fb
	.word	0x3a33520e
	.word	0x3002500
	.word	0x310eb05
	.word	-0x1c00fb9a
	.word	-0x1c1cff56
	.word	0x40338d00
	.word	0x3034303
	.word	-0x24b106bd
	.word	0x1f0fdf0
	.word	-0x3d80fe10
	.word	-0x44a01d9a
	.word	-0xf50c01d
	.word	0x33f11724
	.word	-0x37fb11de
	.word	0x8f70310
	.word	0x3071802
	.word	0x22a373a7
	.word	0x72064700
	.word	0x6442f206
	.word	0x2233b100
	.word	0x2f006444
	.word	0x4334536
	.word	0x50e1e30f
	.word	0xe00b307
	.word	0x10567ec0
	.word	0x7bb0618
	.word	0x330ee
	.word	0x3e1b150b
	.word	0x16ff36c0
	.word	0x3ee365ca
	.word	-0x26e19ccd
	.word	0x6e085f00
	.word	0xb0033
	.word	0x73ba312
	.word	-0x2a449ffe
	.word	0x56d10edb
	.word	0x22660063
	.word	0x320f434c
	.word	0x5f282e43
	.word	0x22563f08
	.word	0x330200ad
	.word	0x1f330200
	.word	0x22019023
	.word	0x1fff0f1f
	.word	0x51400417
	.word	0x3203b
	.word	-0xfe200f5
	.word	-0xffe0fff
	.word	-0x9f8fe50
	.word	-0x10fa09e2
	.word	-0x5cc9cc46
	.word	0x353bba00
	.word	0x603bbbb3
	.word	0x33bb2a33
	.word	0x5e00dc1f
	.word	-0x44f7c92c
	.word	-0x3331fa12
	.word	0x7cce333
	.word	0x300aed3
	.word	0x300e370
	.word	0x3710e917
	.word	0x333ebbbb
	.word	0x313bb33c
	.word	0x603200f
	.word	0x33ef4cf3
	.word	0x43640043
	.word	0x4363653e
	.word	0x3600363e
	.word	0x45363643
	.word	0x36363e4
	.word	0x6636e464
	.word	0x6376e46
	.word	-0x1b87ace9
	.word	0x6b267f00
	.word	0x32070300
	.word	-0x9b19bc
	.word	0x2206f807
	.word	-0x2e32fdf
	.word	0x3102712
	.word	0x1f00bfa
	.word	-0xffe0f09
	.word	0xd99c01
	.word	0xe0a3602
	.word	0x3098301
	.word	0x300604b
	.word	0x3093656
	.word	0x56010035
	.word	0x960fbe0
	.word	0x1f001f0
	.word	0x326901f0
	.word	0x10060844
	.word	0x60e428de
	.word	0x7360300
	.word	0x3363452e
	.word	0x365e4407
	.word	0x7b076466
	.word	-0x17ff1900
	.word	0x21174aef
	.word	0x551f53eb
	.word	0x1f077f6
	.word	-0x2020fe10
	.word	-0x39e0cd81
	.word	-0x10ef18d1
	.word	0x1602f33
	.word	0x3107511
	.word	0x502435b
	.word	0x200711e6
	.word	0x3603e03
	.word	-0xf1f3110
	.word	-0x7ffe0fff
	.word	-0x1b99c9ff
	.word	-0x1bfecacd
	.word	-0x1bbcacbc
	.word	0x3c06344
	.word	0x6443e304
	.word	0x64045564
	.word	0x5ffe55e
	.word	0x14f30013
	.word	-0xffcaff1
	.word	-0xffe0f06
	.word	-0x14fe0fff
	.word	0x1d001f0
	.word	0x5c60eb50
	.word	0x4b444e1b
	.word	-0x670dd4d7
	.word	0x18d312ee
	.word	-0x191af62d
	.word	0x43620563
	.word	0x10c008e1
	.word	0x64d66f17
	.word	-0x3b191112
	.word	-0x19bbf42c
	.word	0x1900e44e
	.word	0xf32000e
	.word	0x7df0ff0b
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x20ff01f0
	.word	0x10b31801
	.word	0x20090503
	.word	0x60f71003
	.word	-0x201cdfff
	.word	-0x68ed84fc
	.word	-0x6fcff9d
	.word	-0xffe0ff5
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0x4720fe10
	.word	-0x211bfd27
	.word	-0x6a0a9de8
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0x1dfe0fff
	.word	-0x5bf61580
	.word	-0x1f11fd00
	.word	0x600330ed
	.word	0x3102247
	.word	0x750e333
	.word	-0x7f18d758
	.word	-0x406b00d5
	.word	-0x45f864e9
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x70de01f0
	.word	-0x1f7bfe5f
	.word	0x769e709
	.word	-0x74eff457
	.word	0x110088ed
	.word	0xaeedddd
	.word	-0x119912f3
	.word	0x192eee2f
	.word	-0x26eaddf1
	.word	-0xc0623ec
	.word	0x5071309
	.word	0x62230000
	.word	-0x47e168ca
	.word	0x7c80320
	.word	0xd150a
	.word	0x432f2750
	.word	0x36036600
	.word	0x63335643
	.word	0x50e31033
	.word	-0x54a82cfd
	.word	0x464eb1c
	.word	-0xbcbbbb7
	.word	-0xfe0fd4
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0x21bafe10
	.word	-0x2ce90cf7
	.word	-0x5b91fc9
	.word	0x5e31023
	.word	-0x72f821f7
	.word	0x46288108
	.word	0x46230a64
	.word	0x56f728
	.word	-0x6cf64ec2
	.word	0xa8dc96e
	.word	0x362256d0
	.word	-0x77755cf7
	.word	0x66333ed
	.word	0x6aeb09
	.word	0xb8bb08
	.word	-0x714bfd
	.word	-0x7caefcd1
	.word	0x366006b
	.word	0x5360eb06
	.word	0x3f01e463
	.word	0x435c0108
	.word	0x1636a00
	.word	0x22e256
	.word	-0x78f19ad5
	.word	0x63508b26
	.word	-0x48eff19a
	.word	0x511101b0
	.word	0x51a415fc
	.word	-0x10fe0f95
	.word	0x1ceb48f7
	.word	-0x26cda975
	.word	-0x44ed98e6
	.word	0xa9c0025
	.word	0x6033c6
	.word	-0x4df402f8
	.word	0x1f00b20
	.word	0x3f0be48
	.word	0x330380
	.word	0x320fcca
	.word	-0x1fe6fe20
	.word	0x1f0b0601
	.word	0x4e44ee10
	.word	0x640330a9
	.word	0x6034171a
	.word	0x135e324
	.word	0x3e5527
	.word	0x300e303
	.word	0x331b0063
	.word	0x33678101
	.word	0x5f1a2700
	.word	-0x10eff1bd
	.word	0x1bf85793
	.word	-0x59fe0f01
	.word	0x12e752dc
	.word	0x28bf12c3
	.word	0x11e777df
	.word	0x6700caa3
	.word	0x63e46b00
	.word	0x66e6e00
	.word	0x9ac6ee7
	.word	0x5b01607f
	.word	0x6b0060
	.word	-0x69cc1e1
	.word	-0x32e33bf8
	.word	0x221c2201
	.word	0x53440b58
	.word	0x54003600
	.word	0x335333e2
	.word	0x115553e3
	.word	0x1055e333
	.word	0x63333503
	.word	0x56000300
	.word	0x5e333355
	.word	-0x17bbbbbb
	.word	0x11b10310
	.word	0x534403
	.word	0x444555ef
	.word	0x300545a
	.word	0x30055
	.word	0x3000e47
	.word	0x2201c506
	.word	0xe46b07
	.word	0x6032044
	.word	0xe3f0300
	.word	-0xff60000
	.word	-0xffe0f30
	.word	-0xffe0fff
	.word	-0x58411fff
	.word	0x1fb30390
	.word	0x4355e0e4
	.word	0x55e0030e
	.word	0x556000e4
	.word	-0xf1ae9ff
	.word	0x44445e00
	.word	0x46666e54
	.word	0x55551c55
	.word	0x1e5b0465
	.word	0x5501b077
	.word	0x444b55
	.word	0x6444e7
	.word	-0x107f9e4
	.word	0x49fe2704
	.word	-0xffe0f09
	.word	-0xffe0fff
	.word	-0x7d200cff
	.word	0x667f668f
	.word	0xff09232
	.word	0xff00ff0
	.word	0xff00ff0
	.word	-0xf00f010
	.word	-0xff00ff1
	.word	-0xff09ff1
	.word	-0xffe0f2f
	.word	-0x2f000fff
	.word	0xf505ff0
	.word	-0x6448fb4d
	.word	0xb333a9
	.word	-0x499966e7
	.word	-0x4ccc6667
	.word	0xb009a40
	.word	-0xccc5556
	.word	0x6604aaab
	.word	-0x44409a
	.word	0x3fba2700
	.word	-0x436f159
	.word	0x66660310
	.word	0x13000730
	.word	-0x44cffd00
	.word	-0x1fb00f91
	.word	0x3ffbbb0f
	.word	-0x5566ff4d
	.word	-0x566e6405
	.word	-0x66ff6446
	.word	-0x66544557
	.word	0xabbaaa
	.word	-0x40455556
	.word	-0x9445556
	.word	0xbbbb3a
	.word	0x13045
	.word	0x4e003362
	.word	0x710ff66
	.word	-0xffcb0
	.word	0x1f001f0
	.word	-0x706f0010
	.word	0x10d4aa5b
	.word	-0xc50cfff
	.word	0xdee210
	.word	0x1661102
	.word	0x44dee666
	.word	0x311de44
	.word	0x720f583
	.word	0x1c100f10
	.word	0xdd8b10
	.word	0x2f00ff04
	.word	0x444fdd07
	.word	0x3b00ff44
	.word	-0x100ff8e0
	.word	-0xa00f80
	.word	-0x1cccc001
	.word	-0x1cffcc03
	.word	0x66fdd11d
	.word	0x436ffdee
	.word	0x440700e4
	.word	0x104ffdee
	.word	-0xf0eff9
	.word	0x3fb03ff0
	.word	0x1f0d1f0
	.word	0x1f001f0
	.word	0x3900b46
	.word	-0x1e0dab0
	.word	0x25b90350
	.word	0x232222
	.word	0x32322222
	.word	-0xdde
	.word	-0x1100de00
	.word	-0x2110cd12
	.word	-0x10dcff23
	.word	-0x10bd1223
	.word	0xe1fedd
	.word	0x36cd041e
	.word	-0xe1
	.word	-0x430a901
	.word	0x1f30df73
	.word	0x1f500110
	.word	0x1155ffb3
	.word	0x25011042
	.word	0x3f0d5f44
	.word	0x3403fff
	.word	-0x38fcffcb
	.word	0x31104b0d
	.word	0x40f3333
	.word	0x1003f0ef
	.word	-0x390f02fd
	.word	0x1f001f0
	.word	-0x18dffe60
	.word	0x17500330
	.word	0x3a08457
	.word	-0x1210ad
	.word	-0x2fcd0
	.word	-0x110abfb
	.word	0x36055ff
	.word	-0x2fcdf01
	.word	0x1f04ef0
	.word	0x17001f0
	.word	0x340e320
	.word	0x7f03005f
	.word	0xe03103f
	.word	-0xffcafd0
	.word	-0xf000f0d
	.word	-0x35fe0fff
	.word	0x15001f0
	.word	0x3004335
	.word	0x5003a053
	.word	0x54332f
	.word	0x3105503
	.word	0x320e750
	.word	-0x2f0c40ff
	.word	-0xfb00ffd
	.word	0x67f201
	.word	0x1035030
	.word	0x1445fe6
	.word	-0x9ffbb0a
	.word	0x373f03e0
	.word	0x350f3f0
	.word	-0xfaa83
	.word	0x1f001f0
	.word	-0x18df7240
	.word	-0x7040d50c
	.word	0x22220320
	.word	0x50f30800
	.word	0x10e31003
	.word	-0x3cad70ff
	.word	-0x56ddddde
	.word	-0xfe1bf0c
	.word	0x781f701f
	.word	0x101e8035
	.word	0xf1a71f
	.word	0x444355e3
	.word	-0x14ffaba8
	.word	-0x1f14ffac
	.word	0x4f447403
	.word	-0x2f14ff3e
	.word	0xf8f03
	.word	0x77030074
	.word	-0xffcff03
	.word	-0xffe0f30
	.word	0xfd9201
	.word	0x470415e7
	.word	-0xffc6f41
	.word	0x7754d771
	.word	-0x386cfe70
	.word	0x1ff01ff0
	.word	0x701ff0c0
	.word	-0x78bbbbe1
	.word	-0x3f888889
	.word	0x4000320
	.word	0x7777f787
	.word	-0x6d50f001
	.word	-0x1cff78ab
	.word	0x31088
	.word	-0xf930ded
	.word	0x1f0f901
	.word	0x1f001f0
	.word	0x17001f0
	.word	0xf01faaf
	.word	-0x460fe
	.word	0x9b9fff
	.word	-0x66eb54fd
	.word	-0x64e94647
	.word	0x9b06f0
	.word	0x21ff7eff
	.word	-0x2ffbef80
	.word	-0xffe0ffd
	.word	-0x4ffe9fff
	.word	0xffbb00
	.word	-0x4f455665
	.word	-0x5566f7e7
	.word	0x30099b0
	.word	0xaaa99a
	.word	-0x55555550
	.word	-0x45555410
	.word	0x102250df
	.word	0x3f0fb53
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x59b93ca
	.word	0x22500f
	.word	-0x34e2ddfa
	.word	-0x78f97d20
	.word	0xffdee00
	.word	0x220700e5
	.word	0x2ffdee0e
	.word	0x520740e2
	.word	0xc785e7
	.word	0x551200be
	.word	0x1101710
	.word	-0x145ad0a4
	.word	0x2822370e
	.word	0x23105552
	.word	-0x21e1bf1e
	.word	-0x44df4100
	.word	-0x1190dd45
	.word	0x11de00fd
	.word	-0x1ff022fe
	.word	0x3000ffde
	.word	0x553f5f72
	.word	-0xeabf8ef
	.word	0x124b404b
	.word	-0xffbefa5
	.word	0x1f0f201
	.word	-0x17bfe10
	.word	0xf5f723
	.word	0xe006e0b
	.word	0x544450
	.word	-0xfff800
	.word	0x31000340
	.word	-0x1fac0ccb
	.word	-0x1111fee0
	.word	0x20f706f5
	.word	-0x4fb200b
	.word	0x53ddffdf
	.word	-0x200fd21
	.word	0x3eedffff
	.word	-0x7d11fd00
	.word	-0x1111fcf0
	.word	0xfeeedf
	.word	-0xfd00f8
	.word	-0x1122100e
	.word	-0xcefad1
	.word	-0x3ee310a5
	.word	0x1b08ee
	.word	0x1c103f20
	.word	-0x80f900
	.word	0x1600600
	.word	0x2b544028
	.word	0x300ff16
	.word	0x16f70717
	.word	0x1172507
	.word	-0xb0009ff
	.word	-0x2f0ffca0
	.word	-0xf00fe10
	.word	-0x4ffe4eff
	.word	0x11f71603
	.word	0x10705fb
	.word	-0x651cff01
	.word	0x53ff0310
	.word	0x300ab00
	.word	0x550310ef
	.word	-0x12200100
	.word	-0x220ab
	.word	-0xafeab
	.word	-0x22222d01
	.word	-0x1230ff13
	.word	-0x2c8feef9
	.word	0x10ef0b10
	.word	0x3f0130e8
	.word	0x33200f00
	.word	-0x2119f702
	.word	-0x1bccc03
	.word	-0x21fff49
	.word	0x1c010b00
	.word	0x3537253f
	.word	0x5c053ce7
	.word	0x540d1c54
	.word	0x3460f05
	.word	-0xaaaf7f0
	.word	0x55b02df
	.word	-0xcfe0a15
	.word	0x6000c02
	.word	0x37047603
	.word	-0xa05ff05
	.word	-0xffe0f01
	.word	0x33ffe501
	.word	-0x3a10da
	.word	-0x3ffdaf84
	.word	-0x1ceffcf0
	.word	-0x2cb24df3
	.word	-0xa08bbcd
	.word	0x19c320df
	.word	0x340600f2
	.word	-0x45e120fb
	.word	-0x3a24dc90
	.word	0x225100ff
	.word	0x4f101d50
	.word	0x15340034
	.word	0x3f00d5ff
	.word	0x403f0320
	.word	0x1310ff03
	.word	-0x4bfcffcd
	.word	0x12ff6214
	.word	0x43f78103
	.word	0x443f0300
	.word	0x4600ff0f
	.word	-0xf000f09
	.word	-0x5ffe0fff
	.word	-0x18ef7102
	.word	-0xa9eeeef
	.word	0xbff5ff
	.word	0x660d7701
	.word	-0xa88899a
	.word	0x670130df
	.word	-0xf1ffcc0
	.word	0x60fff51f
	.word	0x6f87441f
	.word	-0x78fd889a
	.word	-0x78888991
	.word	0xfff576
	.word	0x26e326f8
	.word	-0xf000afd
	.word	0x1f001
	.size	 sReelTimeGfx,4436
	.align	1, 0
	.type	 sReelTimeWindow_Tilemap,object
sReelTimeWindow_Tilemap:
	.short	0x30a0
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x30a1
	.short	0x34a0
	.short	0x30b0
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x34b0
	.short	0x30b0
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x30c3
	.short	0x34b0
	.short	0x30c0
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x30c4
	.short	0x34c0
	.short	0x30a2
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x30c5
	.short	0x34a2
	.short	0x30b2
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x34b2
	.short	0x30b2
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x34b2
	.short	0x30b2
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x34b2
	.short	0x30b2
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x34b2
	.short	0x30b2
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x30b1
	.short	0x34b2
	.short	0x30c2
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x30c1
	.short	0x34c2
	.size	 sReelTimeWindow_Tilemap,440
	.align	1, 0
	.type	 sEmptyTilemap,object
sEmptyTilemap:
	.short	0x0
	.size	 sEmptyTilemap,2

	.lcomm	sImageTables_DigitalDisplay,104
.text
	.align	2, 0

