@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gBallSpriteSheets
	.section .rodata
	.align	2, 0
	.type	 gBallSpriteSheets,object
	.size	 gBallSpriteSheets,216
gBallSpriteSheets:
	.word	gInterfaceGfx_PokeBall
	.short	0x180
	.short	0xd6d8
	.word	gInterfaceGfx_GreatBall
	.short	0x180
	.short	0xd6d9
	.word	gInterfaceGfx_SafariBall
	.short	0x180
	.short	0xd6da
	.word	gInterfaceGfx_UltraBall
	.short	0x180
	.short	0xd6db
	.word	gInterfaceGfx_MasterBall
	.short	0x180
	.short	0xd6dc
	.word	gInterfaceGfx_NetBall
	.short	0x180
	.short	0xd6dd
	.word	gInterfaceGfx_DiveBall
	.short	0x180
	.short	0xd6de
	.word	gInterfaceGfx_NestBall
	.short	0x180
	.short	0xd6df
	.word	gInterfaceGfx_RepeatBall
	.short	0x180
	.short	0xd6e0
	.word	gInterfaceGfx_TimerBall
	.short	0x180
	.short	0xd6e1
	.word	gInterfaceGfx_LuxuryBall
	.short	0x180
	.short	0xd6e2
	.word	gInterfaceGfx_PremierBall
	.short	0x180
	.short	0xd6e3
	.word	gInterfaceGfx_LevelBall
	.short	0x180
	.short	0xd6e4
	.word	gInterfaceGfx_LureBall
	.short	0x180
	.short	0xd6e5
	.word	gInterfaceGfx_MoonBall
	.short	0x180
	.short	0xd6e6
	.word	gInterfaceGfx_FriendBall
	.short	0x180
	.short	0xd6e7
	.word	gInterfaceGfx_LoveBall
	.short	0x180
	.short	0xd6e8
	.word	gInterfaceGfx_HeavyBall
	.short	0x180
	.short	0xd6e9
	.word	gInterfaceGfx_FastBall
	.short	0x180
	.short	0xd6ea
	.word	gInterfaceGfx_SportBall
	.short	0x180
	.short	0xd6eb
	.word	gInterfaceGfx_DuskBall
	.short	0x180
	.short	0xd6ec
	.word	gInterfaceGfx_QuickBall
	.short	0x180
	.short	0xd6ed
	.word	gInterfaceGfx_HealBall
	.short	0x180
	.short	0xd6ee
	.word	gInterfaceGfx_CherishBall
	.short	0x180
	.short	0xd6ef
	.word	gInterfaceGfx_ParkBall
	.short	0x180
	.short	0xd6f0
	.word	gInterfaceGfx_DreamBall
	.short	0x180
	.short	0xd6f1
	.word	gInterfaceGfx_BeastBall
	.short	0x180
	.short	0xd6f2
	.globl	gBallSpritePalettes
	.align	2, 0
	.type	 gBallSpritePalettes,object
	.size	 gBallSpritePalettes,216
gBallSpritePalettes:
	.word	gInterfacePal_PokeBall
	.short	0xd6d8
	.space	2
	.word	gInterfacePal_GreatBall
	.short	0xd6d9
	.space	2
	.word	gInterfacePal_SafariBall
	.short	0xd6da
	.space	2
	.word	gInterfacePal_UltraBall
	.short	0xd6db
	.space	2
	.word	gInterfacePal_MasterBall
	.short	0xd6dc
	.space	2
	.word	gInterfacePal_NetBall
	.short	0xd6dd
	.space	2
	.word	gInterfacePal_DiveBall
	.short	0xd6de
	.space	2
	.word	gInterfacePal_NestBall
	.short	0xd6df
	.space	2
	.word	gInterfacePal_RepeatBall
	.short	0xd6e0
	.space	2
	.word	gInterfacePal_TimerBall
	.short	0xd6e1
	.space	2
	.word	gInterfacePal_LuxuryBall
	.short	0xd6e2
	.space	2
	.word	gInterfacePal_PremierBall
	.short	0xd6e3
	.space	2
	.word	gInterfacePal_LevelBall
	.short	0xd6e4
	.space	2
	.word	gInterfacePal_LureBall
	.short	0xd6e5
	.space	2
	.word	gInterfacePal_MoonBall
	.short	0xd6e6
	.space	2
	.word	gInterfacePal_FriendBall
	.short	0xd6e7
	.space	2
	.word	gInterfacePal_LoveBall
	.short	0xd6e8
	.space	2
	.word	gInterfacePal_HeavyBall
	.short	0xd6e9
	.space	2
	.word	gInterfacePal_FastBall
	.short	0xd6ea
	.space	2
	.word	gInterfacePal_SportBall
	.short	0xd6eb
	.space	2
	.word	gInterfacePal_DuskBall
	.short	0xd6ec
	.space	2
	.word	gInterfacePal_QuickBall
	.short	0xd6ed
	.space	2
	.word	gInterfacePal_HealBall
	.short	0xd6ee
	.space	2
	.word	gInterfacePal_CherishBall
	.short	0xd6ef
	.space	2
	.word	gInterfacePal_ParkBall
	.short	0xd6f0
	.space	2
	.word	gInterfacePal_DreamBall
	.short	0xd6f1
	.space	2
	.word	gInterfacePal_BeastBall
	.short	0xd6f2
	.space	2
	.align	2, 0
	.type	 sBallOamData,object
	.size	 sBallOamData,8
sBallOamData:
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x8
	.short	0x0
	.align	2, 0
	.type	 sBallAnimSeq3,object
sBallAnimSeq3:
	.short	0x0
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sBallAnimSeq3,8
	.align	2, 0
	.type	 sBallAnimSeq5,object
sBallAnimSeq5:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sBallAnimSeq5,8
	.align	2, 0
	.type	 sBallAnimSeq4,object
sBallAnimSeq4:
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sBallAnimSeq4,8
	.align	2, 0
	.type	 sBallAnimSeq6,object
sBallAnimSeq6:
	.short	0xc
	.byte	0x1
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sBallAnimSeq6,8
	.align	2, 0
	.type	 sBallAnimSeq0,object
sBallAnimSeq0:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sBallAnimSeq0,8
	.align	2, 0
	.type	 sBallAnimSeq1,object
sBallAnimSeq1:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sBallAnimSeq1,12
	.align	2, 0
	.type	 sBallAnimSeq2,object
sBallAnimSeq2:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x0
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sBallAnimSeq2,12
	.align	2, 0
	.type	 sBallAnimSequences,object
sBallAnimSequences:
	.word	sBallAnimSeq0
	.word	sBallAnimSeq1
	.word	sBallAnimSeq2
	.word	sBallAnimSeq3
	.word	sBallAnimSeq4
	.word	sBallAnimSeq5
	.word	sBallAnimSeq6
	.size	 sBallAnimSequences,28
	.align	2, 0
	.type	 sAffineAnim_BallRotate_0,object
sAffineAnim_BallRotate_0:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sAffineAnim_BallRotate_0,16
	.align	2, 0
	.type	 sAffineAnim_BallRotate_Right,object
sAffineAnim_BallRotate_Right:
	.short	0x0
	.short	0x0
	.byte	0xfd
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sAffineAnim_BallRotate_Right,16
	.align	2, 0
	.type	 sAffineAnim_BallRotate_Left,object
sAffineAnim_BallRotate_Left:
	.short	0x0
	.short	0x0
	.byte	0x3
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sAffineAnim_BallRotate_Left,16
	.align	2, 0
	.type	 sAffineAnim_BallRotate_3,object
sAffineAnim_BallRotate_3:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_BallRotate_3,16
	.align	2, 0
	.type	 sAffineAnim_BallRotate_4,object
sAffineAnim_BallRotate_4:
	.short	0x0
	.short	0x0
	.byte	0x19
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sAffineAnim_BallRotate_4,16
	.align	2, 0
	.type	 sAffineAnim_BallRotate,object
sAffineAnim_BallRotate:
	.word	sAffineAnim_BallRotate_0
	.word	sAffineAnim_BallRotate_Right
	.word	sAffineAnim_BallRotate_Left
	.word	sAffineAnim_BallRotate_3
	.word	sAffineAnim_BallRotate_4
	.size	 sAffineAnim_BallRotate,20
	.globl	gBallSpriteTemplates
	.align	2, 0
	.type	 gBallSpriteTemplates,object
	.size	 gBallSpriteTemplates,648
gBallSpriteTemplates:
	.short	0xd6d8
	.short	0xd6d8
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6d9
	.short	0xd6d9
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6da
	.short	0xd6da
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6db
	.short	0xd6db
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6dc
	.short	0xd6dc
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6dd
	.short	0xd6dd
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6de
	.short	0xd6de
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6df
	.short	0xd6df
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6e0
	.short	0xd6e0
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6e1
	.short	0xd6e1
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6e2
	.short	0xd6e2
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6e3
	.short	0xd6e3
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6e4
	.short	0xd6e4
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6e5
	.short	0xd6e5
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6e6
	.short	0xd6e6
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6e7
	.short	0xd6e7
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6e8
	.short	0xd6e8
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6e9
	.short	0xd6e9
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6ea
	.short	0xd6ea
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6eb
	.short	0xd6eb
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6ec
	.short	0xd6ec
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6ed
	.short	0xd6ed
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6ee
	.short	0xd6ee
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6ef
	.short	0xd6ef
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6f0
	.short	0xd6f0
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6f1
	.short	0xd6f1
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
	.short	0xd6f2
	.short	0xd6f2
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sAffineAnim_BallRotate
	.word	SpriteCB_TestBallThrow
.text
	.align	2, 0
	.globl	DoPokeballSendOutAnimation
	.type	 DoPokeballSendOutAnimation,function
	.thumb_func
DoPokeballSendOutAnimation:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r1, .L3
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L3+0x4
	ldr	r0, [r0]
	ldr	r6, .L3+0x8
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, .L3+0xc
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L3+0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0xa]
	strh	r5, [r1, #0xc]
	ldrb	r0, [r6]
	strh	r0, [r1, #0xe]
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L4:
	.align	2, 0
.L3:
	.word	gDoingBattleAnim
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	Task_DoPokeballSendOutAnim
	.word	gTasks
.Lfe1:
	.size	 DoPokeballSendOutAnimation,.Lfe1-DoPokeballSendOutAnimation
	.align	2, 0
	.type	 Task_DoPokeballSendOutAnim,function
	.thumb_func
Task_DoPokeballSendOutAnim:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, .L13
	mov	r2, sl
	lsl	r0, r2, #0x2
	add	r0, r0, sl
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0x8]
	mov	r3, #0x8
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L6	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x8]
	b	.L5
.L14:
	.align	2, 0
.L13:
	.word	gTasks
.L6:
	mov	r0, #0xc
	ldrsh	r6, [r1, r0]
	mov	r3, #0xe
	ldrsh	r2, [r1, r3]
	mov	r9, r2
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	GetBattlerPokeballItemId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemIdToBallId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	LoadBallGfx
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L15
	add	r0, r0, r1
	mov	r1, #0x20
	mov	r2, #0x50
	mov	r3, #0x1d
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r5, r0, #0x2
	ldr	r0, .L15+0x4
	add	r4, r5, r0
	mov	r0, #0x80
	strh	r0, [r4, #0x2e]
	mov	r1, sp
	ldrh	r1, [r1]
	strh	r1, [r4, #0x30]
	strh	r6, [r4, #0x3c]
	cmp	r6, #0xfe
	beq	.L9	@cond_branch
	cmp	r6, #0xff
	bne	.L10	@cond_branch
	ldr	r0, .L15+0x8
	mov	r2, r9
	strb	r2, [r0]
	mov	r0, #0x18
	strh	r0, [r4, #0x20]
	mov	r0, #0x44
	strh	r0, [r4, #0x22]
	ldr	r0, .L15+0x4
	add	r0, r0, #0x1c
	add	r0, r5, r0
	ldr	r1, .L15+0xc
	str	r1, [r0]
	b	.L7
.L16:
	.align	2, 0
.L15:
	.word	gBallSpriteTemplates
	.word	gSprites
	.word	gBattlerTarget
	.word	SpriteCB_PlayerMonSendOut_1
.L9:
	mov	r0, r8
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	mov	r0, r8
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r0, .L17
	mov	r3, r9
	strb	r3, [r0]
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4, #0x2e]
	ldr	r0, .L17+0x4
	add	r0, r0, #0x1c
	add	r0, r5, r0
	ldr	r1, .L17+0x8
	str	r1, [r0]
	b	.L7
.L18:
	.align	2, 0
.L17:
	.word	gBattlerTarget
	.word	gSprites
	.word	SpriteCB_OpponentMonSendOut
.L10:
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	ldr	r1, .L19
	strb	r0, [r1]
	mov	r1, #0x1
	str	r1, [sp]
.L7:
	ldr	r0, .L19+0x4
	lsl	r1, r7, #0x4
	add	r1, r1, r7
	lsl	r1, r1, #0x2
	add	r4, r1, r0
	ldr	r5, .L19
	ldrb	r0, [r5]
	strh	r0, [r4, #0x3a]
	ldr	r2, [sp]
	cmp	r2, #0
	bne	.L12	@cond_branch
	mov	r0, sl
	bl	DestroyTask
	b	.L5
.L20:
	.align	2, 0
.L19:
	.word	gBattlerTarget
	.word	gSprites
.L12:
	mov	r0, #0x22
	strh	r0, [r4, #0x2e]
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x10
	strh	r0, [r4, #0x36]
	ldr	r0, .L21
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	mov	r3, sl
	strh	r3, [r4, #0x6]
	ldr	r1, .L21+0x4
	mov	r2, sl
	lsl	r0, r2, #0x2
	add	r0, r0, sl
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r5]
	strh	r1, [r0, #0x10]
	ldr	r1, .L21+0x8
	str	r1, [r0]
	mov	r0, #0x3d
	bl	PlaySE
.L5:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	0xffd8
	.word	gTasks
	.word	TaskDummy
.Lfe2:
	.size	 Task_DoPokeballSendOutAnim,.Lfe2-Task_DoPokeballSendOutAnim
	.align	2, 0
	.type	 SpriteCB_TestBallThrow,function
	.thumb_func
SpriteCB_TestBallThrow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r7, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L24	@cond_branch
	ldrb	r6, [r7, #0x6]
	ldr	r1, .L25
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r5, [r0, #0x10]
	ldrb	r0, [r0, #0xc]
	mov	r8, r0
	add	r0, r7, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	add	r2, r7, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r7, #0x24]
	ldrh	r1, [r7, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r7, #0x20]
	ldrh	r0, [r7, #0x26]
	ldrh	r2, [r7, #0x22]
	add	r0, r0, r2
	strh	r0, [r7, #0x22]
	strh	r1, [r7, #0x24]
	strh	r1, [r7, #0x26]
	strh	r1, [r7, #0x38]
	add	r0, r5, #0
	bl	GetBattlerPokeballItemId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemIdToBallId
	add	r4, r0, #0
	ldrh	r0, [r7, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r7, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp]
	mov	r2, #0x1
	mov	r3, #0x1c
	bl	AnimateBallOpenParticles
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r2, #0xe
	add	r3, r4, #0
	bl	LaunchBallFadeMonTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x2e]
	strh	r5, [r7, #0x3a]
	mov	r0, r8
	strh	r0, [r7, #0x3c]
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r0, .L25+0x4
	str	r0, [r7, #0x1c]
.L24:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	gTasks
	.word	sub_80756D4
.Lfe3:
	.size	 SpriteCB_TestBallThrow,.Lfe3-SpriteCB_TestBallThrow
	.align	2, 0
	.type	 sub_80756D4,function
	.thumb_func
sub_80756D4:
	ldr	r1, .L28
	str	r1, [r0, #0x1c]
	bx	lr
.L29:
	.align	2, 0
.L28:
	.word	sub_80756E0
.Lfe4:
	.size	 sub_80756D4,.Lfe4-sub_80756D4
	.align	2, 0
	.type	 sub_80756E0,function
	.thumb_func
sub_80756E0:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldrh	r0, [r6, #0x38]
	add	r0, r0, #0x1
	mov	r7, #0x0
	strh	r0, [r6, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L31	@cond_branch
	strh	r7, [r6, #0x38]
	ldr	r0, .L32
	str	r0, [r6, #0x1c]
	ldr	r5, .L32+0x4
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L32+0x8
	add	r0, r0, r4
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	AnimateSprite
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r7, [r0, #0x30]
.L31:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	sub_807574C
	.word	gBattlerSpriteIds
	.word	gSprites
.Lfe5:
	.size	 sub_80756E0,.Lfe5-sub_80756E0
	.align	2, 0
	.type	 sub_807574C,function
	.thumb_func
sub_807574C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	bne	.L35	@cond_branch
	mov	r0, #0x3c
	bl	PlaySE
.L35:
	ldr	r6, .L38
	ldr	r5, .L38+0x4
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r6
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L36	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAnim
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldr	r0, .L38+0x8
	str	r0, [r4, #0x1c]
	b	.L37
.L39:
	.align	2, 0
.L38:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	sub_80757E4
.L36:
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x60
	strh	r0, [r1, #0x30]
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r2, #0x30
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	asr	r0, r0, #0x8
	strh	r0, [r1, #0x26]
.L37:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_807574C,.Lfe6-sub_807574C
	.align	2, 0
	.type	 sub_80757E4,function
	.thumb_func
sub_80757E4:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L41	@cond_branch
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L41	@cond_branch
	strh	r1, [r4, #0x34]
	mov	r0, #0x20
	strh	r0, [r4, #0x36]
	strh	r1, [r4, #0x38]
	mov	r0, #0x0
	mov	r1, #0x20
	bl	Cos
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0x36
	ldrsh	r1, [r4, r0]
	mov	r0, #0x0
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldr	r0, .L43
	str	r0, [r4, #0x1c]
.L41:
	pop	{r4}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	sub_8075838
.Lfe7:
	.size	 sub_80757E4,.Lfe7-sub_80757E4
	.align	2, 0
	.type	 sub_8075838,function
	.thumb_func
sub_8075838:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	ldrh	r0, [r4, #0x34]
	mov	r1, #0xff
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L47	@cond_branch
	cmp	r1, #0x1
	beq	.L57	@cond_branch
	b	.L46
.L47:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x38]
	add	r1, r1, #0x4
	ldrh	r2, [r4, #0x34]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	add	r1, r1, r0
	strh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x3f
	ble	.L46	@cond_branch
	ldrh	r0, [r4, #0x36]
	sub	r0, r0, #0xa
	strh	r0, [r4, #0x36]
	ldr	r1, .L64
	add	r0, r2, r1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L49	@cond_branch
	mov	r5, #0x1
.L49:
	cmp	r0, #0x2
	beq	.L52	@cond_branch
	cmp	r0, #0x2
	bgt	.L56	@cond_branch
	cmp	r0, #0x1
	beq	.L51	@cond_branch
	b	.L54
.L65:
	.align	2, 0
.L64:
	.word	0x101
.L56:
	cmp	r0, #0x3
	beq	.L53	@cond_branch
	b	.L54
.L51:
	mov	r0, #0x38
	bl	PlaySE
	b	.L46
.L52:
	mov	r0, #0x39
	bl	PlaySE
	b	.L46
.L53:
	mov	r0, #0x3a
	bl	PlaySE
	b	.L46
.L54:
	mov	r0, #0x3b
	bl	PlaySE
	b	.L46
.L57:
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x38]
	sub	r1, r1, #0x4
	ldrh	r2, [r4, #0x34]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	sub	r1, r1, r0
	strh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bgt	.L46	@cond_branch
	strh	r5, [r4, #0x38]
	ldr	r0, .L66
	and	r0, r0, r2
	strh	r0, [r4, #0x34]
.L46:
	cmp	r5, #0
	beq	.L61	@cond_branch
	mov	r5, #0x0
	strh	r5, [r4, #0x34]
	mov	r0, #0x40
	mov	r1, #0x20
	bl	Cos
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x26]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L62	@cond_branch
	ldr	r0, .L66+0x4
	str	r0, [r4, #0x1c]
	b	.L61
.L67:
	.align	2, 0
.L66:
	.word	-0x100
	.word	SpriteCB_ReleaseMonFromBall
.L62:
	ldr	r0, .L68
	str	r0, [r4, #0x1c]
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	strh	r5, [r4, #0x38]
.L61:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L69:
	.align	2, 0
.L68:
	.word	sub_8075930
.Lfe8:
	.size	 sub_8075838,.Lfe8-sub_8075838
	.align	2, 0
	.type	 sub_8075930,function
	.thumb_func
sub_8075930:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L71	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r0, .L72
	str	r0, [r4, #0x1c]
	mov	r0, #0x17
	bl	PlaySE
.L71:
	pop	{r4}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	sub_8075970
.Lfe9:
	.size	 sub_8075930,.Lfe9-sub_8075930
	.align	2, 0
	.type	 sub_8075970,function
	.thumb_func
sub_8075970:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	mov	r1, #0xff
	and	r1, r1, r0
	cmp	r1, #0x4
	bhi	.L90	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L96
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L97:
	.align	2, 0
.L96:
	.word	.L94
	.align	2, 0
	.align	2, 0
.L94:
	.word	.L77
	.word	.L79
	.word	.L77
	.word	.L84
	.word	.L90
.L77:
	ldrh	r0, [r4, #0x36]
	ldrh	r2, [r4, #0x24]
	add	r1, r0, r2
	strh	r1, [r4, #0x24]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	strh	r0, [r4, #0x38]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x6
	bls	.L75	@cond_branch
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	b	.L75
.L79:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L80	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x36]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bge	.L81	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	ChangeSpriteAffineAnim
	b	.L75
.L81:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
	b	.L75
.L80:
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L75
.L84:
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r2, [r4, #0x34]
	add	r0, r0, r2
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	mov	r2, #0x3c
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L85	@cond_branch
	ldr	r0, .L98
	str	r0, [r4, #0x1c]
	b	.L75
.L99:
	.align	2, 0
.L98:
	.word	SpriteCB_ReleaseMonFromBall
.L85:
	cmp	r1, #0x4
	bne	.L87	@cond_branch
	cmp	r0, #0x3
	bne	.L87	@cond_branch
	ldr	r0, .L100
	str	r0, [r4, #0x1c]
	b	.L95
.L101:
	.align	2, 0
.L100:
	.word	sub_8075FB4
.L87:
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
.L95:
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L75
.L90:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L75	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r1, [r4, #0x34]
	ldr	r0, .L102
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	mov	r1, #0x3
	bl	StartSpriteAffineAnim
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L92	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	b	.L93
.L103:
	.align	2, 0
.L102:
	.word	-0x100
.L92:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L93:
	mov	r0, #0x17
	bl	PlaySE
.L75:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 sub_8075970,.Lfe10-sub_8075970
	.align	2, 0
	.type	 Task_PlayCryWhenReleasedFromBall,function
	.thumb_func
Task_PlayCryWhenReleasedFromBall:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r2, .L130
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0, #0xc]
	mov	ip, r1
	ldrb	r5, [r0, #0xa]
	ldrh	r6, [r0, #0x8]
	ldrb	r3, [r0, #0xe]
	mov	r8, r3
	ldrb	r7, [r0, #0x10]
	mov	r3, #0x12
	ldrsh	r1, [r0, r3]
	lsl	r3, r1, #0x10
	ldrh	r1, [r0, #0x14]
	orr	r3, r3, r1
	mov	r1, #0x26
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x20
	bhi	.L107	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L130+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L131:
	.align	2, 0
.L130:
	.word	gTasks
	.word	.L127
	.align	2, 0
	.align	2, 0
.L127:
	.word	.L107
	.word	.L109
	.word	.L112
	.word	.L118
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L113
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L119
	.word	.L121
	.word	.L123
.L107:
	ldr	r0, .L132
	lsl	r1, r7, #0x4
	add	r1, r1, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	add	r1, r1, #0x3f
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	blt	.LCB1153
	b	.L105	@long jump
.LCB1153:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, ip
	add	r1, r1, #0x1
	strh	r1, [r0, #0x26]
	b	.L105
.L133:
	.align	2, 0
.L132:
	.word	gSprites
.L109:
	add	r0, r3, #0
	bl	ShouldPlayNormalMonCry
	cmp	r0, #0x1
	bne	.L110	@cond_branch
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	add	r0, r6, #0
	mov	r2, #0x0
	bl	PlayCry3
	b	.L116
.L110:
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	add	r0, r6, #0
	mov	r2, #0xb
	bl	PlayCry3
	b	.L129
.L112:
	bl	StopCryAndClearCrySongs
	ldr	r1, .L134
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x3
	strh	r1, [r0, #0x1c]
	mov	r1, #0x14
	strh	r1, [r0, #0x26]
	b	.L105
.L135:
	.align	2, 0
.L134:
	.word	gTasks
.L113:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r2, [r1, #0x1c]
	mov	r7, #0x1c
	ldrsh	r0, [r1, r7]
	cmp	r0, #0
	bne	.L128	@cond_branch
	add	r0, r3, #0
	bl	ShouldPlayNormalMonCry
	cmp	r0, #0x1
	bne	.L115	@cond_branch
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	add	r0, r6, #0
	mov	r2, #0x1
	bl	PlayCry4
	b	.L116
.L115:
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	add	r0, r6, #0
	mov	r2, #0xc
	bl	PlayCry4
.L129:
.L116:
	ldr	r0, .L136
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	mov	r2, r8
	lsl	r1, r2, #0x1
	add	r1, r1, r8
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	add	r0, r4, #0
	bl	DestroyTask
	b	.L105
.L137:
	.align	2, 0
.L136:
	.word	gBattleSpritesDataPtr
.L118:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x6
	strh	r1, [r0, #0x1c]
	mov	r1, #0x1e
	strh	r1, [r0, #0x26]
	b	.L105
.L119:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r2, [r1, #0x1c]
	mov	r3, #0x1c
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L128	@cond_branch
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x26]
.L121:
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L105	@cond_branch
	bl	StopCryAndClearCrySongs
	ldr	r0, .L138
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x3
	strh	r0, [r1, #0x1c]
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x26]
	b	.L105
.L139:
	.align	2, 0
.L138:
	.word	gTasks
.L123:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r2, [r1, #0x1c]
	mov	r7, #0x1c
	ldrsh	r0, [r1, r7]
	cmp	r0, #0
	beq	.L124	@cond_branch
.L128:
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x1c]
	b	.L105
.L124:
	add	r0, r3, #0
	bl	ShouldPlayNormalMonCry
	cmp	r0, #0x1
	bne	.L125	@cond_branch
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	add	r0, r6, #0
	mov	r2, #0x0
	bl	PlayCry4
	b	.L126
.L125:
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	add	r0, r6, #0
	mov	r2, #0xb
	bl	PlayCry4
.L126:
	ldr	r0, .L140
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	mov	r2, r8
	lsl	r1, r2, #0x1
	add	r1, r1, r8
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	add	r0, r4, #0
	bl	DestroyTask
.L105:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L141:
	.align	2, 0
.L140:
	.word	gBattleSpritesDataPtr
.Lfe11:
	.size	 Task_PlayCryWhenReleasedFromBall,.Lfe11-Task_PlayCryWhenReleasedFromBall
	.align	2, 0
	.type	 SpriteCB_ReleaseMonFromBall,function
	.thumb_func
SpriteCB_ReleaseMonFromBall:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r8, r0
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, r8
	mov	r1, #0x1
	bl	StartSpriteAnim
	add	r0, r7, #0
	bl	GetBattlerPokeballItemId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemIdToBallId
	add	r4, r0, #0
	mov	r1, r8
	ldrh	r0, [r1, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r1, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp]
	mov	r2, #0x1
	mov	r3, #0x1c
	bl	AnimateBallOpenParticles
	mov	r2, r8
	ldrh	r1, [r2, #0x3a]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	mov	r2, #0xe
	add	r3, r4, #0
	bl	LaunchBallFadeMonTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, r8
	strh	r0, [r4, #0x2e]
	ldr	r0, .L163
	str	r0, [r4, #0x1c]
	ldr	r0, .L163+0x4
	ldr	r5, .L163+0x8
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB1465
	b	.L143	@long jump
.LCB1465:
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L144	@cond_branch
	ldr	r0, .L163+0xc
	lsl	r2, r7, #0x1
	add	r0, r2, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L163+0x10
	add	r1, r1, r0
	mov	r9, r1
	mov	r0, #0x19
	str	r0, [sp, #0x4]
	b	.L161
.L164:
	.align	2, 0
.L163:
	.word	HandleBallAnimEnd
	.word	gMain
	.word	0x439
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L144:
	ldr	r0, .L165
	lsl	r2, r7, #0x1
	add	r0, r2, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L165+0x4
	add	r1, r1, r0
	mov	r9, r1
	mov	r1, #0xe7
	str	r1, [sp, #0x4]
.L161:
	add	r5, r2, #0
	mov	r0, r9
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, r9
	mov	r1, #0x59
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	GetFormSpeciesId
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r7, r0
	beq	.L147	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r7, r0
	bne	.L146	@cond_branch
.L147:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L146	@cond_branch
	ldr	r0, .L165+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x9]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L146	@cond_branch
	ldr	r0, .L165+0xc
	ldr	r0, [r0]
	mov	r1, #0x42
	and	r0, r0, r1
	cmp	r0, #0x42
	bne	.L148	@cond_branch
	bl	IsBGMPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L146	@cond_branch
	ldr	r0, .L165+0x10
	bl	m4aMPlayStop
	b	.L146
.L166:
	.align	2, 0
.L165:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleSpritesDataPtr
	.word	gBattleTypeFlags
	.word	gMPlayInfo_BGM
.L148:
	ldr	r0, .L167
	ldr	r1, .L167+0x4
	mov	r2, #0x80
	bl	m4aMPlayVolumeControl
.L146:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L152	@cond_branch
	ldr	r0, .L167+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x9]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L151	@cond_branch
.L152:
	mov	r2, #0x0
	mov	sl, r2
	b	.L153
.L168:
	.align	2, 0
.L167:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gBattleSpritesDataPtr
.L151:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r7, r0
	beq	.L155	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r7, r0
	bne	.L154	@cond_branch
.L155:
	mov	r0, #0x1
	mov	sl, r0
	b	.L153
.L154:
	mov	r1, #0x2
	mov	sl, r1
.L153:
	ldr	r0, .L169
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	add	r1, r5, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r0, .L169+0x4
	mov	r1, #0x3
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r7, #0
	bl	GetIllusionMonPtr
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L157	@cond_branch
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x59
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	GetFormSpeciesId
	ldr	r3, .L169+0x8
	lsl	r2, r6, #0x2
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	strh	r0, [r1, #0x8]
	add	r1, r2, #0
	b	.L158
.L170:
	.align	2, 0
.L169:
	.word	gBattleSpritesDataPtr
	.word	Task_PlayCryWhenReleasedFromBall
	.word	gTasks
.L157:
	ldr	r2, .L171
	lsl	r1, r6, #0x2
	add	r0, r1, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	strh	r4, [r0, #0x8]
.L158:
	ldr	r0, .L171
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r2, [sp, #0x4]
	lsl	r0, r2, #0x18
	asr	r0, r0, #0x18
	mov	r3, #0x0
	strh	r0, [r1, #0xa]
	mov	r4, sl
	strh	r4, [r1, #0xc]
	strh	r7, [r1, #0xe]
	ldr	r2, .L171+0x4
	mov	r5, r8
	mov	r4, #0x3a
	ldrsh	r0, [r5, r4]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r1, #0x10]
	mov	r5, r9
	lsr	r0, r5, #0x10
	strh	r0, [r1, #0x12]
	strh	r5, [r1, #0x14]
	strh	r3, [r1, #0x26]
.L143:
	ldr	r4, .L171+0x4
	mov	r1, r8
	mov	r2, #0x3a
	ldrsh	r0, [r1, r2]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L171+0x8
	add	r0, r0, r5
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	mov	r1, r8
	ldrh	r0, [r1, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L159	@cond_branch
	mov	r2, r8
	mov	r1, #0x3a
	ldrsh	r0, [r2, r1]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L171+0xc
	b	.L162
.L172:
	.align	2, 0
.L171:
	.word	gTasks
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	SpriteCb_OpponentMonFromBall
.L159:
	mov	r2, r8
	mov	r1, #0x3a
	ldrsh	r0, [r2, r1]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L173
.L162:
	str	r1, [r0]
	ldr	r5, .L173+0x4
	mov	r2, r8
	mov	r4, #0x3a
	ldrsh	r0, [r2, r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L173+0x8
	add	r0, r0, r4
	bl	AnimateSprite
	mov	r1, r8
	mov	r2, #0x3a
	ldrsh	r0, [r1, r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	strh	r1, [r0, #0x30]
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L174:
	.align	2, 0
.L173:
	.word	SpriteCb_PlayerMonFromBall
	.word	gBattlerSpriteIds
	.word	gSprites
.Lfe12:
	.size	 SpriteCB_ReleaseMonFromBall,.Lfe12-SpriteCB_ReleaseMonFromBall
	.align	2, 0
	.type	 sub_8075FB4,function
	.thumb_func
sub_8075FB4:
	add	r3, r0, #0
	add	r3, r3, #0x2c
	ldrb	r1, [r3]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r3]
	ldr	r1, .L176
	str	r1, [r0, #0x1c]
	mov	r1, #0x0
	strh	r1, [r0, #0x34]
	strh	r1, [r0, #0x36]
	strh	r1, [r0, #0x38]
	bx	lr
.L177:
	.align	2, 0
.L176:
	.word	sub_80760F8
.Lfe13:
	.size	 sub_8075FB4,.Lfe13-sub_8075FB4
	.align	2, 0
	.type	 HandleBallAnimEnd,function
	.thumb_func
HandleBallAnimEnd:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	mov	r7, #0x0
	ldrh	r0, [r5, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L195
	ldr	r0, .L195+0x4
	add	r3, r6, r0
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L179	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L179:
	ldrb	r0, [r3]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L180	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	mov	r7, #0x1
	b	.L181
.L196:
	.align	2, 0
.L195:
	.word	gSprites
	.word	gBattlerSpriteIds
.L180:
	ldr	r2, .L197
	add	r0, r2, #0
	ldrh	r2, [r1, #0x30]
	add	r0, r0, r2
	strh	r0, [r1, #0x30]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x26]
.L181:
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L182	@cond_branch
	cmp	r7, #0
	beq	.L182	@cond_branch
	ldr	r2, .L197+0x4
	ldr	r0, .L197+0x8
	add	r0, r6, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r2, #0x0
	mov	r1, #0x0
	strh	r1, [r0, #0x26]
	ldr	r0, .L197+0xc
	strb	r2, [r0]
	ldr	r4, .L197+0x10
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	lsl	r1, r6, #0x1
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r5, #0
	bl	FreeSpriteOamMatrix
	add	r0, r5, #0
	bl	DestroySprite
	mov	r3, #0x0
	ldr	r0, [r4]
	ldr	r2, [r0, #0x4]
	mov	r5, #0x8
	mov	r4, #0x3
.L186:
	ldrb	r1, [r2]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L185	@cond_branch
	add	r3, r3, #0x1
.L185:
	add	r2, r2, #0xc
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L186	@cond_branch
	cmp	r3, #0x4
	bne	.L182	@cond_branch
	mov	r4, #0x0
.L193:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	FreeBallGfx
	add	r4, r4, #0x1
	cmp	r4, #0x1a
	ble	.L193	@cond_branch
.L182:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L198:
	.align	2, 0
.L197:
	.word	-0x120
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gDoingBattleAnim
	.word	gBattleSpritesDataPtr
.Lfe14:
	.size	 HandleBallAnimEnd,.Lfe14-HandleBallAnimEnd
	.align	2, 0
	.type	 sub_80760F8,function
	.thumb_func
sub_80760F8:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldrh	r0, [r6, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrh	r0, [r6, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x36]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0x28
	beq	.L199	@cond_branch
	cmp	r1, #0x5f
	bne	.L202	@cond_branch
	ldr	r0, .L206
	mov	r1, #0x0
	strb	r1, [r0]
	bl	m4aMPlayAllStop
	ldr	r0, .L206+0x4
	bl	PlaySE
	b	.L199
.L207:
	.align	2, 0
.L206:
	.word	gDoingBattleAnim
	.word	0x173
.L202:
	ldr	r0, .L208
	cmp	r1, r0
	bne	.L199	@cond_branch
	ldr	r5, .L208+0x4
	ldr	r4, .L208+0x8
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	add	r0, r6, #0
	bl	DestroySpriteAndFreeResources
	ldr	r0, .L208+0xc
	ldr	r1, .L208+0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L199	@cond_branch
	ldr	r0, .L208+0x14
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r7, #0x1
	add	r1, r1, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L199:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L209:
	.align	2, 0
.L208:
	.word	0x13b
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gMain
	.word	0x439
	.word	gBattleSpritesDataPtr
.Lfe15:
	.size	 sub_80760F8,.Lfe15-sub_80760F8
	.align	2, 0
	.type	 SpriteCB_PlayerMonSendOut_1,function
	.thumb_func
SpriteCB_PlayerMonSendOut_1:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x19
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L211
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x3a]
	strh	r0, [r4, #0x6]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L211+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L212:
	.align	2, 0
.L211:
	.word	0xffe2
	.word	SpriteCB_PlayerMonSendOut_2
.Lfe16:
	.size	 SpriteCB_PlayerMonSendOut_1,.Lfe16-SpriteCB_PlayerMonSendOut_1
	.align	2, 0
	.type	 SpriteCB_PlayerMonSendOut_2,function
	.thumb_func
SpriteCB_PlayerMonSendOut_2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x3c]
	mov	r1, #0xff
	mov	r8, r1
	lsr	r0, r0, #0x8
	sub	r0, r0, #0x23
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2c
	bhi	.L214	@cond_branch
	ldrh	r1, [r5, #0x6]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L215	@cond_branch
	ldrh	r0, [r5, #0x30]
	mov	r1, #0x1
	add	r6, r1, #0
	and	r6, r6, r0
	ldrh	r0, [r5, #0x32]
	add	r7, r1, #0
	and	r7, r7, r0
	mov	r2, #0x30
	ldrsh	r0, [r5, r2]
	mov	r1, #0x3
	bl	__divsi3
	mov	r1, #0x2
	neg	r1, r1
	add	r4, r1, #0
	and	r0, r0, r4
	orr	r6, r6, r0
	strh	r6, [r5, #0x30]
	mov	r2, #0x32
	ldrsh	r0, [r5, r2]
	mov	r1, #0x3
	bl	__divsi3
	and	r0, r0, r4
	orr	r7, r7, r0
	strh	r7, [r5, #0x32]
	add	r0, r5, #0
	mov	r1, #0x4
	bl	StartSpriteAffineAnim
.L215:
	ldrh	r4, [r5, #0x2e]
	add	r0, r5, #0
	bl	AnimTranslateLinear
	mov	r1, #0x3a
	ldrsh	r0, [r5, r1]
	mov	r1, #0x3
	bl	__divsi3
	add	r1, r0, #0
	ldrh	r0, [r5, #0x3c]
	add	r0, r0, r1
	strh	r0, [r5, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	mov	r2, r8
	and	r0, r0, r2
	mov	r2, #0x38
	ldrsh	r1, [r5, r2]
	bl	Sin
	ldrh	r1, [r5, #0x26]
	add	r0, r0, r1
	strh	r0, [r5, #0x26]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	ldrh	r1, [r5, #0x6]
	add	r0, r0, r1
	strh	r0, [r5, #0x6]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L216	@cond_branch
	strh	r4, [r5, #0x2e]
	b	.L217
.L216:
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
.L217:
	ldrh	r0, [r5, #0x3c]
	lsr	r0, r0, #0x8
	cmp	r0, #0x4f
	ble	.L219	@cond_branch
	ldrh	r0, [r5, #0x30]
	mov	r1, #0x1
	add	r6, r1, #0
	and	r6, r6, r0
	ldrh	r0, [r5, #0x32]
	add	r7, r1, #0
	and	r7, r7, r0
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	mov	r1, #0x2
	neg	r1, r1
	add	r2, r1, #0
	and	r0, r0, r2
	orr	r0, r0, r6
	strh	r0, [r5, #0x30]
	mov	r0, #0x32
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	and	r0, r0, r2
	orr	r0, r0, r7
	strh	r0, [r5, #0x32]
	b	.L219
.L214:
	add	r0, r5, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L219	@cond_branch
	ldrh	r0, [r5, #0x24]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x26]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	strh	r1, [r5, #0x26]
	strh	r1, [r5, #0x24]
	ldrb	r0, [r5, #0x6]
	strh	r0, [r5, #0x3a]
	strh	r1, [r5, #0x2e]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L221	@cond_branch
	ldr	r0, .L224
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x9]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L221	@cond_branch
	mov	r0, #0x3a
	ldrsh	r4, [r5, r0]
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bne	.L221	@cond_branch
	ldr	r0, .L224+0x4
	b	.L223
.L225:
	.align	2, 0
.L224:
	.word	gBattleSpritesDataPtr
	.word	SpriteCB_ReleaseMon2FromBall
.L221:
	ldr	r0, .L226
.L223:
	str	r0, [r5, #0x1c]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
.L219:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L227:
	.align	2, 0
.L226:
	.word	SpriteCB_ReleaseMonFromBall
.Lfe17:
	.size	 SpriteCB_PlayerMonSendOut_2,.Lfe17-SpriteCB_PlayerMonSendOut_2
	.align	2, 0
	.type	 SpriteCB_ReleaseMon2FromBall,function
	.thumb_func
SpriteCB_ReleaseMon2FromBall:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x18
	ble	.L229	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x2e]
	ldr	r0, .L230
	str	r0, [r2, #0x1c]
.L229:
	pop	{r0}
	bx	r0
.L231:
	.align	2, 0
.L230:
	.word	SpriteCB_ReleaseMonFromBall
.Lfe18:
	.size	 SpriteCB_ReleaseMon2FromBall,.Lfe18-SpriteCB_ReleaseMon2FromBall
	.align	2, 0
	.type	 SpriteCB_OpponentMonSendOut,function
	.thumb_func
SpriteCB_OpponentMonSendOut:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	ble	.L233	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L234	@cond_branch
	ldr	r0, .L237
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x9]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L234	@cond_branch
	mov	r0, #0x3a
	ldrsh	r4, [r5, r0]
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bne	.L234	@cond_branch
	ldr	r0, .L237+0x4
	b	.L236
.L238:
	.align	2, 0
.L237:
	.word	gBattleSpritesDataPtr
	.word	SpriteCB_ReleaseMon2FromBall
.L234:
	ldr	r0, .L239
.L236:
	str	r0, [r5, #0x1c]
.L233:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L240:
	.align	2, 0
.L239:
	.word	SpriteCB_ReleaseMonFromBall
.Lfe19:
	.size	 SpriteCB_OpponentMonSendOut,.Lfe19-SpriteCB_OpponentMonSendOut
	.align	2, 0
	.type	 AnimateBallOpenParticlesForPokeball,function
	.thumb_func
AnimateBallOpenParticlesForPokeball:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r4, #0x0
	str	r4, [sp]
	bl	AnimateBallOpenParticles
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 AnimateBallOpenParticlesForPokeball,.Lfe20-AnimateBallOpenParticlesForPokeball
	.align	2, 0
	.type	 LaunchBallFadeMonTaskForPokeball,function
	.thumb_func
LaunchBallFadeMonTaskForPokeball:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, #0x0
	bl	LaunchBallFadeMonTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 LaunchBallFadeMonTaskForPokeball,.Lfe21-LaunchBallFadeMonTaskForPokeball
	.align	2, 0
	.globl	CreatePokeballSpriteToReleaseMon
	.type	 CreatePokeballSpriteToReleaseMon,function
	.thumb_func
CreatePokeballSpriteToReleaseMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	mov	r9, r2
	mov	sl, r3
	ldr	r6, [sp, #0x28]
	ldr	r4, [sp, #0x2c]
	ldr	r0, [sp, #0x30]
	ldr	r2, [sp, #0x38]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	sl, r3
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	lsl	r0, r2, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, .L244
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L244+0x4
	bl	LoadCompressedSpritePaletteUsingHeap
	ldr	r0, .L244+0x8
	mov	r1, r9
	mov	r2, sl
	add	r3, r4, #0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L244+0xc
	mov	r8, r1
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r2, r4, r1
	strh	r5, [r2, #0x2e]
	lsl	r1, r5, #0x4
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrh	r0, [r1, #0x20]
	strh	r0, [r2, #0x38]
	ldrh	r0, [r1, #0x22]
	strh	r0, [r2, #0x3a]
	mov	r3, r9
	strh	r3, [r1, #0x20]
	mov	r0, sl
	strh	r0, [r1, #0x22]
	strh	r7, [r1, #0x3c]
	mov	r3, sp
	ldrh	r3, [r3, #0x4]
	strh	r3, [r2, #0x30]
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r2, #0x32]
	mov	r3, sp
	ldrh	r3, [r3, #0x34]
	strh	r3, [r2, #0x34]
	ldr	r3, [sp, #0x34]
	lsr	r0, r3, #0x10
	strh	r0, [r2, #0x36]
	mov	r0, #0x3
	and	r6, r6, r0
	lsl	r6, r6, #0x2
	ldrb	r3, [r2, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r6
	strb	r0, [r2, #0x5]
	mov	r0, #0x1c
	add	r8, r8, r0
	add	r4, r4, r8
	ldr	r0, .L244+0x10
	str	r0, [r4]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L245:
	.align	2, 0
.L244:
	.word	gBallSpriteSheets
	.word	gBallSpritePalettes
	.word	gBallSpriteTemplates
	.word	gSprites
	.word	sub_8076524
.Lfe22:
	.size	 CreatePokeballSpriteToReleaseMon,.Lfe22-CreatePokeballSpriteToReleaseMon
	.align	2, 0
	.type	 sub_8076524,function
	.thumb_func
sub_8076524:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	ldrh	r1, [r6, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r6, r2]
	cmp	r0, #0
	bne	.L247	@cond_branch
	ldrh	r0, [r6, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrh	r0, [r6, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrh	r4, [r6, #0x34]
	ldrh	r0, [r6, #0x36]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	add	r0, r6, #0
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L248	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L249
.L248:
	mov	r5, #0x0
.L249:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrh	r0, [r6, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r6, #0x5]
	lsl	r2, r2, #0x1c
	lsr	r2, r2, #0x1e
	add	r3, r5, #0
	bl	AnimateBallOpenParticlesForPokeball
	mov	r0, #0x1
	mov	r1, r8
	add	r2, r4, #0
	bl	LaunchBallFadeMonTaskForPokeball
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r6, #0x30]
	ldr	r0, .L251
	str	r0, [r6, #0x1c]
	ldr	r0, .L251+0x4
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	add	r0, r4, #0
	bl	AnimateSprite
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	strh	r0, [r4, #0x30]
	strh	r5, [r6, #0x3c]
	b	.L250
.L252:
	.align	2, 0
.L251:
	.word	sub_80765E0
	.word	gSprites
.L247:
	sub	r0, r1, #0x1
	strh	r0, [r6, #0x30]
.L250:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 sub_8076524,.Lfe23-sub_8076524
	.align	2, 0
	.type	 sub_80765E0,function
	.thumb_func
sub_80765E0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r4, r0, #0
	mov	r0, #0x0
	mov	ip, r0
	mov	r7, #0x0
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L254	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L254:
	ldr	r1, .L264
	lsl	r2, r6, #0x4
	add	r0, r2, r6
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	mov	r8, r2
	cmp	r0, #0
	bge	.L255	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	mov	r1, #0x1
	mov	ip, r1
.L255:
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	mov	r3, #0x20
	ldrsh	r1, [r4, r3]
	sub	r0, r0, r1
	mov	r1, #0x3c
	ldrsh	r2, [r4, r1]
	mul	r0, r0, r2
	cmp	r0, #0
	bge	.L256	@cond_branch
	add	r0, r0, #0x7f
.L256:
	asr	r0, r0, #0x7
	ldrh	r3, [r4, #0x20]
	add	r0, r0, r3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	mov	r3, #0x22
	ldrsh	r1, [r4, r3]
	sub	r0, r0, r1
	mul	r0, r0, r2
	cmp	r0, #0
	bge	.L257	@cond_branch
	add	r0, r0, #0x7f
.L257:
	asr	r0, r0, #0x7
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	mov	r2, r9
	strh	r2, [r5, #0x20]
	strh	r0, [r5, #0x22]
	ldrh	r2, [r4, #0x3c]
	mov	r3, #0x3c
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x7f
	bgt	.L258	@cond_branch
	ldr	r1, .L264+0x4
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bge	.L259	@cond_branch
	add	r0, r0, #0x7
.L259:
	asr	r0, r0, #0x3
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r2, #0x4
	strh	r1, [r4, #0x3c]
	strh	r0, [r5, #0x24]
	strh	r0, [r5, #0x26]
	b	.L260
.L265:
	.align	2, 0
.L264:
	.word	gSprites
	.word	gSineTable
.L258:
	ldrh	r0, [r4, #0x38]
	strh	r0, [r5, #0x20]
	ldrh	r0, [r4, #0x3a]
	strh	r0, [r5, #0x22]
	strh	r7, [r5, #0x24]
	strh	r7, [r5, #0x26]
	mov	r7, #0x1
.L260:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L261	@cond_branch
	mov	r2, ip
	cmp	r2, #0
	beq	.L261	@cond_branch
	cmp	r7, #0
	beq	.L261	@cond_branch
	ldr	r1, .L266
	mov	r3, r8
	add	r0, r3, r6
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	ldr	r0, .L266+0x4
	cmp	r1, r0
	bne	.L262	@cond_branch
	ldrh	r1, [r2, #0x3c]
	add	r0, r2, #0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	DoMonFrontSpriteAnimation
	b	.L263
.L267:
	.align	2, 0
.L266:
	.word	gSprites
	.word	0x4b7
.L262:
	ldrh	r1, [r2, #0x3c]
	add	r0, r2, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DoMonFrontSpriteAnimation
.L263:
	add	r0, r4, #0
	bl	DestroySpriteAndFreeResources
.L261:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 sub_80765E0,.Lfe24-sub_80765E0
	.align	2, 0
	.globl	CreateTradePokeballSprite
	.type	 CreateTradePokeballSprite,function
	.thumb_func
CreateTradePokeballSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r0
	add	r6, r2, #0
	mov	r8, r3
	ldr	r5, [sp, #0x20]
	ldr	r4, [sp, #0x24]
	ldr	r0, [sp, #0x28]
	mov	r9, r0
	mov	r0, sl
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r1, r8
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L269
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L269+0x4
	bl	LoadCompressedSpritePaletteUsingHeap
	ldr	r0, .L269+0x8
	add	r1, r6, #0
	mov	r2, r8
	add	r3, r4, #0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r6, .L269+0xc
	lsl	r3, r0, #0x4
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r2, r3, r6
	mov	r1, sl
	strh	r1, [r2, #0x2e]
	mov	r4, r9
	strh	r4, [r2, #0x30]
	strh	r7, [r2, #0x32]
	mov	r1, sp
	ldrh	r1, [r1, #0x2c]
	strh	r1, [r2, #0x34]
	ldr	r4, [sp, #0x2c]
	lsr	r1, r4, #0x10
	strh	r1, [r2, #0x36]
	mov	r1, #0x3
	and	r5, r5, r1
	lsl	r5, r5, #0x2
	ldrb	r4, [r2, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r4
	orr	r1, r1, r5
	strb	r1, [r2, #0x5]
	add	r6, r6, #0x1c
	add	r3, r3, r6
	ldr	r1, .L269+0x10
	str	r1, [r3]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L270:
	.align	2, 0
.L269:
	.word	gBallSpriteSheets
	.word	gBallSpritePalettes
	.word	gBallSpriteTemplates
	.word	gSprites
	.word	sub_80767D4
.Lfe25:
	.size	 CreateTradePokeballSprite,.Lfe25-CreateTradePokeballSprite
	.align	2, 0
	.type	 sub_80767D4,function
	.thumb_func
sub_80767D4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L272	@cond_branch
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrh	r5, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	orr	r5, r5, r0
	add	r0, r4, #0
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L273	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L274
.L273:
	mov	r6, #0x0
.L274:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r4, #0x5]
	lsl	r2, r2, #0x1c
	lsr	r2, r2, #0x1e
	add	r3, r6, #0
	bl	AnimateBallOpenParticlesForPokeball
	mov	r0, #0x1
	mov	r1, r8
	add	r2, r5, #0
	bl	LaunchBallFadeMonTaskForPokeball
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x30]
	ldr	r0, .L276
	str	r0, [r4, #0x1c]
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	ldr	r0, .L276+0x4
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	add	r0, r4, #0
	bl	AnimateSprite
	strh	r5, [r4, #0x30]
	b	.L275
.L277:
	.align	2, 0
.L276:
	.word	sub_807687C
	.word	gSprites
.L272:
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x30]
.L275:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 sub_80767D4,.Lfe26-sub_80767D4
	.align	2, 0
	.type	 sub_807687C,function
	.thumb_func
sub_807687C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	bne	.L279	@cond_branch
	mov	r0, #0x3c
	bl	PlaySE
.L279:
	ldrh	r1, [r5, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L282
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L280	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2
	bl	StartSpriteAnim
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x0
	strh	r0, [r5, #0x38]
	ldr	r0, .L282+0x4
	str	r0, [r5, #0x1c]
	b	.L281
.L283:
	.align	2, 0
.L282:
	.word	gSprites
	.word	sub_80768F0
.L280:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x60
	strh	r0, [r4, #0x30]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	asr	r0, r0, #0x8
	strh	r0, [r4, #0x26]
.L281:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 sub_807687C,.Lfe27-sub_807687C
	.align	2, 0
	.type	 sub_80768F0,function
	.thumb_func
sub_80768F0:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L285	@cond_branch
	ldr	r0, .L286
	str	r0, [r2, #0x1c]
.L285:
	pop	{r0}
	bx	r0
.L287:
	.align	2, 0
.L286:
	.word	SpriteCallbackDummy
.Lfe28:
	.size	 sub_80768F0,.Lfe28-sub_80768F0
	.align	2, 0
	.type	 Unref_DestroySpriteAndFreeResources,function
	.thumb_func
Unref_DestroySpriteAndFreeResources:
	push	{lr}
	bl	DestroySpriteAndFreeResources
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 Unref_DestroySpriteAndFreeResources,.Lfe29-Unref_DestroySpriteAndFreeResources
	.align	2, 0
	.globl	sub_8076918
	.type	 sub_8076918,function
	.thumb_func
sub_8076918:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r0, .L292
	add	r0, r5, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r6, .L292+0x4
	add	r4, r0, r6
	mov	r1, #0x0
	mov	r0, #0x5
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r0, #0x73
	strh	r0, [r4, #0x24]
	strh	r1, [r4, #0x26]
	ldr	r0, .L292+0x8
	str	r0, [r4, #0x1c]
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L290	@cond_branch
	ldrh	r0, [r4, #0x2e]
	neg	r0, r0
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	neg	r0, r0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x26]
	neg	r0, r0
	strh	r0, [r4, #0x26]
.L290:
	mov	r0, #0x38
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	add	r1, r1, #0x1c
	add	r1, r0, r1
	add	r0, r0, r6
	ldr	r1, [r1]
	bl	_call_via_r1
	add	r0, r5, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L291	@cond_branch
	ldr	r0, .L292+0xc
	str	r0, [r4, #0x1c]
.L291:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L293:
	.align	2, 0
.L292:
	.word	gHealthboxSpriteIds
	.word	gSprites
	.word	sub_80769CC
	.word	sub_80769A8
.Lfe30:
	.size	 sub_8076918,.Lfe30-sub_8076918
	.align	2, 0
	.type	 sub_80769A8,function
	.thumb_func
sub_80769A8:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bne	.L295	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
	ldr	r0, .L296
	str	r0, [r1, #0x1c]
.L295:
	pop	{r0}
	bx	r0
.L297:
	.align	2, 0
.L296:
	.word	sub_80769CC
.Lfe31:
	.size	 sub_80769A8,.Lfe31-sub_80769A8
	.align	2, 0
	.type	 sub_80769CC,function
	.thumb_func
sub_80769CC:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x24]
	ldrh	r1, [r2, #0x2e]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x26]
	ldrh	r1, [r2, #0x30]
	sub	r0, r0, r1
	strh	r0, [r2, #0x26]
	ldr	r0, [r2, #0x24]
	cmp	r0, #0
	bne	.L299	@cond_branch
	ldr	r0, .L300
	str	r0, [r2, #0x1c]
.L299:
	pop	{r0}
	bx	r0
.L301:
	.align	2, 0
.L300:
	.word	SpriteCallbackDummy
.Lfe32:
	.size	 sub_80769CC,.Lfe32-sub_80769CC
	.align	2, 0
	.globl	DoHitAnimHealthboxEffect
	.type	 DoHitAnimHealthboxEffect,function
	.thumb_func
DoHitAnimHealthboxEffect:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L303
	add	r0, r5, #0
	bl	CreateInvisibleSpriteWithCallback
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L303+0x4
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r3, r1, r2
	mov	r0, #0x1
	strh	r0, [r3, #0x2e]
	ldr	r0, .L303+0x8
	add	r4, r4, r0
	ldrb	r0, [r4]
	strh	r0, [r3, #0x30]
	add	r2, r2, #0x1c
	add	r1, r1, r2
	str	r5, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	SpriteCB_HitAnimHealthoxEffect
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe33:
	.size	 DoHitAnimHealthboxEffect,.Lfe33-DoHitAnimHealthboxEffect
	.align	2, 0
	.type	 SpriteCB_HitAnimHealthoxEffect,function
	.thumb_func
SpriteCB_HitAnimHealthoxEffect:
	push	{lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L307
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	ldrh	r0, [r3, #0x2e]
	mov	r2, #0x0
	strh	r0, [r1, #0x26]
	ldrh	r0, [r3, #0x2e]
	neg	r0, r0
	strh	r0, [r3, #0x2e]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x15
	bne	.L306	@cond_branch
	strh	r2, [r1, #0x24]
	strh	r2, [r1, #0x26]
	add	r0, r3, #0
	bl	DestroySprite
.L306:
	pop	{r0}
	bx	r0
.L308:
	.align	2, 0
.L307:
	.word	gSprites
.Lfe34:
	.size	 SpriteCB_HitAnimHealthoxEffect,.Lfe34-SpriteCB_HitAnimHealthoxEffect
	.align	2, 0
	.globl	LoadBallGfx
	.type	 LoadBallGfx,function
	.thumb_func
LoadBallGfx:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L318
	lsl	r6, r4, #0x3
	add	r5, r6, r0
	ldrh	r0, [r5, #0x6]
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	ldr	r1, .L318+0x4
	cmp	r0, r1
	bne	.L310	@cond_branch
	add	r0, r5, #0
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L318+0x8
	add	r0, r6, r0
	bl	LoadCompressedSpritePaletteUsingHeap
.L310:
	cmp	r4, #0x6
	beq	.L311	@cond_branch
	cmp	r4, #0x6
	blt	.L316	@cond_branch
	cmp	r4, #0x1b
	bgt	.L316	@cond_branch
	cmp	r4, #0xa
	bge	.L311	@cond_branch
.L316:
	ldr	r1, .L318
	lsl	r0, r4, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x6]
	bl	GetSpriteTileStartByTag
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	ldr	r0, .L318+0xc
	lsr	r1, r1, #0xb
	ldr	r2, .L318+0x10
	add	r1, r1, r2
	bl	LZDecompressVram
.L311:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L319:
	.align	2, 0
.L318:
	.word	gBallSpriteSheets
	.word	-0x10000
	.word	gBallSpritePalettes
	.word	gOpenPokeballGfx
	.word	0x6010100
.Lfe35:
	.size	 LoadBallGfx,.Lfe35-LoadBallGfx
	.align	2, 0
	.globl	FreeBallGfx
	.type	 FreeBallGfx,function
	.thumb_func
FreeBallGfx:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	ldr	r0, .L321
	lsr	r4, r4, #0x15
	add	r0, r4, r0
	ldrh	r0, [r0, #0x6]
	bl	FreeSpriteTilesByTag
	ldr	r0, .L321+0x4
	add	r4, r4, r0
	ldrh	r0, [r4, #0x4]
	bl	FreeSpritePaletteByTag
	pop	{r4}
	pop	{r0}
	bx	r0
.L322:
	.align	2, 0
.L321:
	.word	gBallSpriteSheets
	.word	gBallSpritePalettes
.Lfe36:
	.size	 FreeBallGfx,.Lfe36-FreeBallGfx
	.align	2, 0
	.type	 GetBattlerPokeballItemId,function
	.thumb_func
GetBattlerPokeballItemId:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L324	@cond_branch
	ldr	r1, .L328
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L328+0x4
	b	.L327
.L329:
	.align	2, 0
.L328:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L324:
	ldr	r1, .L330
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L330+0x4
.L327:
	add	r4, r1, r0
	add	r0, r5, #0
	bl	GetIllusionMonPtr
	cmp	r0, #0
	beq	.L326	@cond_branch
	add	r4, r0, #0
.L326:
	add	r0, r4, #0
	mov	r1, #0x26
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L331:
	.align	2, 0
.L330:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.Lfe37:
	.size	 GetBattlerPokeballItemId,.Lfe37-GetBattlerPokeballItemId
.text
	.align	2, 0

