@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.type	 _atoi,function
	.thumb_func
_atoi:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r4, #0x0
	b	.L19
.L21:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	sub	r0, r0, #0x30
	add	r4, r0, r1
	add	r0, r3, #0x1
	str	r0, [r5]
.L19:
	ldr	r3, [r5]
	ldrb	r1, [r3]
	mov	r2, #0x0
	add	r0, r1, #0
	sub	r0, r0, #0x30
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x9
	bhi	.L22	@cond_branch
	mov	r2, #0x1
.L22:
	cmp	r2, #0
	bne	.L21	@cond_branch
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 _atoi,.Lfe1-_atoi
	.align	2, 0
	.type	 _out_rev,function
	.thumb_func
_out_rev:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	sl, r0
	mov	r9, r1
	add	r4, r2, #0
	mov	r8, r3
	ldr	r5, [sp, #0x28]
	ldr	r7, [sp, #0x30]
	str	r4, [sp]
	mov	r0, #0x3
	and	r0, r0, r7
	cmp	r0, #0
	bne	.L42	@cond_branch
	add	r6, r5, #0
	ldr	r0, [sp, #0x2c]
	cmp	r5, r0
	bcs	.L42	@cond_branch
.L30:
	add	r2, r4, #0
	add	r4, r4, #0x1
	mov	r0, #0x20
	mov	r1, r9
	mov	r3, r8
	bl	_call_via_sl
	add	r6, r6, #0x1
	ldr	r1, [sp, #0x2c]
	cmp	r6, r1
	bcc	.L30	@cond_branch
	b	.L42
.L34:
	sub	r5, r5, #0x1
	ldr	r1, [sp, #0x24]
	add	r0, r1, r5
	ldrb	r0, [r0]
	add	r2, r4, #0
	add	r4, r4, #0x1
	mov	r1, r9
	mov	r3, r8
	bl	_call_via_sl
.L42:
	cmp	r5, #0
	bne	.L34	@cond_branch
	mov	r0, #0x2
	and	r7, r7, r0
	cmp	r7, #0
	beq	.L36	@cond_branch
	b	.L43
.L39:
	add	r2, r4, #0
	add	r4, r4, #0x1
	mov	r0, #0x20
	mov	r1, r9
	mov	r3, r8
	bl	_call_via_sl
.L43:
	ldr	r1, [sp]
	sub	r0, r4, r1
	ldr	r1, [sp, #0x2c]
	cmp	r0, r1
	bcc	.L39	@cond_branch
.L36:
	add	r0, r4, #0
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 _out_rev,.Lfe2-_out_rev
	.align	2, 0
	.type	 _ntoa_format,function
	.thumb_func
_ntoa_format:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	mov	ip, r0
	mov	r8, r1
	mov	r9, r2
	mov	sl, r3
	ldr	r4, [sp, #0x30]
	ldr	r2, [sp, #0x34]
	ldr	r7, [sp, #0x40]
	ldr	r3, [sp, #0x44]
	ldr	r6, [sp, #0x48]
	mov	r0, #0x2
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L45	@cond_branch
	cmp	r3, #0
	beq	.L46	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L46	@cond_branch
	ldr	r0, [sp, #0x38]
	cmp	r0, #0
	bne	.L47	@cond_branch
	mov	r0, #0xc
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L46	@cond_branch
.L47:
	sub	r3, r3, #0x1
.L46:
	cmp	r2, r7
	bcs	.L49	@cond_branch
	cmp	r2, #0x1f
	bhi	.L49	@cond_branch
	mov	r1, #0x30
.L50:
	add	r0, r4, r2
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r7
	bcs	.L49	@cond_branch
	cmp	r2, #0x1f
	bls	.L50	@cond_branch
.L49:
	mov	r0, #0x1
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L45	@cond_branch
	cmp	r2, r3
	bcs	.L45	@cond_branch
	cmp	r2, #0x1f
	bhi	.L45	@cond_branch
	mov	r5, #0x30
	add	r1, r0, #0
.L55:
	add	r0, r4, r2
	strb	r5, [r0]
	add	r2, r2, #0x1
	cmp	r1, #0
	beq	.L45	@cond_branch
	cmp	r2, r3
	bcs	.L45	@cond_branch
	cmp	r2, #0x1f
	bls	.L55	@cond_branch
.L45:
	mov	r0, #0x10
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L58	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L59	@cond_branch
	cmp	r2, #0
	beq	.L59	@cond_branch
	cmp	r2, r7
	beq	.L60	@cond_branch
	cmp	r2, r3
	bne	.L59	@cond_branch
.L60:
	sub	r2, r2, #0x1
	cmp	r2, #0
	beq	.L59	@cond_branch
	ldr	r0, [sp, #0x3c]
	cmp	r0, #0x10
	bne	.L64	@cond_branch
	sub	r2, r2, #0x1
.L59:
	ldr	r0, [sp, #0x3c]
	cmp	r0, #0x10
	bne	.L64	@cond_branch
	mov	r0, #0x20
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L62	@cond_branch
	cmp	r2, #0x1f
	bhi	.L62	@cond_branch
	add	r1, r4, r2
	mov	r0, #0x78
	b	.L74
.L62:
	ldr	r0, [sp, #0x3c]
	cmp	r0, #0x10
	bne	.L64	@cond_branch
	mov	r0, #0x20
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L64	@cond_branch
	cmp	r2, #0x1f
	bhi	.L64	@cond_branch
	add	r1, r4, r2
	mov	r0, #0x58
	b	.L74
.L64:
	ldr	r0, [sp, #0x3c]
	cmp	r0, #0x2
	bne	.L63	@cond_branch
	cmp	r2, #0x1f
	bhi	.L68	@cond_branch
	add	r1, r4, r2
	mov	r0, #0x62
.L74:
	strb	r0, [r1]
	add	r2, r2, #0x1
.L63:
	cmp	r2, #0x1f
	bhi	.L68	@cond_branch
	add	r1, r4, r2
	mov	r0, #0x30
	strb	r0, [r1]
	add	r2, r2, #0x1
.L58:
	cmp	r2, #0x1f
	bhi	.L68	@cond_branch
	ldr	r0, [sp, #0x38]
	cmp	r0, #0
	beq	.L69	@cond_branch
	add	r1, r4, r2
	mov	r0, #0x2d
	b	.L75
.L69:
	mov	r0, #0x4
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L71	@cond_branch
	add	r1, r4, r2
	mov	r0, #0x2b
	b	.L75
.L71:
	mov	r0, #0x8
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L68	@cond_branch
	add	r1, r4, r2
	mov	r0, #0x20
.L75:
	strb	r0, [r1]
	add	r2, r2, #0x1
.L68:
	str	r4, [sp]
	str	r2, [sp, #0x4]
	str	r3, [sp, #0x8]
	str	r6, [sp, #0xc]
	mov	r0, ip
	mov	r1, r8
	mov	r2, r9
	mov	r3, sl
	bl	_out_rev
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 _ntoa_format,.Lfe3-_ntoa_format
	.align	2, 0
	.type	 _ntoa_long,function
	.thumb_func
_ntoa_long:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x48
	mov	sl, r0
	str	r1, [sp, #0x3c]
	str	r2, [sp, #0x40]
	str	r3, [sp, #0x44]
	ldr	r4, [sp, #0x68]
	ldr	r0, [sp, #0x70]
	mov	r9, r0
	ldr	r7, [sp, #0x7c]
	mov	r6, #0x0
	cmp	r4, #0
	bne	.L77	@cond_branch
	mov	r0, #0x11
	neg	r0, r0
	and	r7, r7, r0
.L77:
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L79	@cond_branch
	cmp	r4, #0
	beq	.L78	@cond_branch
.L79:
	mov	r2, #0x20
	mov	r8, r2
	mov	r0, r8
	and	r0, r0, r7
	mov	r8, r0
	mov	r5, sp
	add	r5, r5, #0x1b
	b	.L80
.L89:
	cmp	r6, #0x1f
	bhi	.L78	@cond_branch
.L80:
	add	r0, r4, #0
	mov	r1, r9
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	add	r6, r6, #0x1
	cmp	r0, #0x9
	bhi	.L83	@cond_branch
	add	r0, r0, #0x30
	b	.L84
.L83:
	mov	r2, r8
	cmp	r2, #0
	beq	.L85	@cond_branch
	add	r0, r0, #0x37
	b	.L84
.L85:
	add	r0, r1, #0
	add	r0, r0, #0x57
.L84:
	add	r5, r5, #0x1
	strb	r0, [r5]
	add	r0, r4, #0
	mov	r1, r9
	bl	__udivsi3
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L89	@cond_branch
.L78:
	add	r0, sp, #0x1c
	str	r0, [sp]
	str	r6, [sp, #0x4]
	ldr	r0, [sp, #0x6c]
	str	r0, [sp, #0x8]
	mov	r2, r9
	str	r2, [sp, #0xc]
	ldr	r0, [sp, #0x74]
	str	r0, [sp, #0x10]
	ldr	r0, [sp, #0x78]
	str	r0, [sp, #0x14]
	str	r7, [sp, #0x18]
	mov	r0, sl
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x40]
	ldr	r3, [sp, #0x44]
	bl	_ntoa_format
	add	sp, sp, #0x48
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 _ntoa_long,.Lfe4-_ntoa_long
	.align	2, 0
	.type	 _vsnprintf,function
	.thumb_func
_vsnprintf:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	str	r0, [sp, #0x1c]
	mov	sl, r1
	mov	r9, r2
	str	r3, [sp, #0x18]
	ldr	r7, [sp, #0x4c]
	mov	r0, #0x0
	mov	r8, r0
	cmp	r1, #0
	beq	.LCB493
	b	.L92	@long jump
.LCB493:
	ldr	r1, .L228
	str	r1, [sp, #0x1c]
	b	.L92
.L229:
	.align	2, 0
.L228:
	.word	_out_null
.L94:
	ldrb	r0, [r1]
	cmp	r0, #0x25
	beq	.L95	@cond_branch
	mov	r2, r8
	mov	r4, #0x1
	add	r8, r8, r4
	mov	r1, sl
	mov	r3, r9
	ldr	r5, [sp, #0x1c]
	bl	_call_via_r5
	b	.L218
.L95:
	add	r0, r1, #0x1
	str	r0, [sp, #0x18]
	mov	r6, #0x0
.L97:
	ldr	r1, [sp, #0x18]
	ldrb	r0, [r1]
	sub	r0, r0, #0x20
	add	r2, r1, #0
	cmp	r0, #0x10
	bhi	.L106	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L230
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L231:
	.align	2, 0
.L230:
	.word	.L107
	.align	2, 0
	.align	2, 0
.L107:
	.word	.L104
	.word	.L106
	.word	.L106
	.word	.L105
	.word	.L106
	.word	.L106
	.word	.L106
	.word	.L106
	.word	.L106
	.word	.L106
	.word	.L106
	.word	.L103
	.word	.L106
	.word	.L102
	.word	.L106
	.word	.L106
	.word	.L101
.L101:
	mov	r0, #0x1
	b	.L219
.L102:
	mov	r0, #0x2
	b	.L219
.L103:
	mov	r0, #0x4
	b	.L219
.L104:
	mov	r0, #0x8
	b	.L219
.L105:
	mov	r0, #0x10
.L219:
	orr	r6, r6, r0
	ldr	r0, [sp, #0x18]
	add	r0, r0, #0x1
	str	r0, [sp, #0x18]
	b	.L97
.L106:
	mov	r0, #0x0
	str	r0, [sp, #0x20]
	ldrb	r1, [r2]
	mov	r2, #0x0
	add	r0, r1, #0
	sub	r0, r0, #0x30
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x9
	bhi	.L111	@cond_branch
	mov	r2, #0x1
.L111:
	cmp	r2, #0
	beq	.L110	@cond_branch
	add	r0, sp, #0x18
	bl	_atoi
	str	r0, [sp, #0x20]
	b	.L113
.L110:
	cmp	r1, #0x2a
	bne	.L113	@cond_branch
	add	r7, r7, #0x4
	sub	r0, r7, #0x4
	ldr	r1, [r0]
	cmp	r1, #0
	bge	.L115	@cond_branch
	mov	r0, #0x2
	orr	r6, r6, r0
	neg	r1, r1
.L115:
	str	r1, [sp, #0x20]
	ldr	r0, [sp, #0x18]
	add	r0, r0, #0x1
	str	r0, [sp, #0x18]
.L113:
	mov	r1, #0x0
	str	r1, [sp, #0x24]
	ldr	r1, [sp, #0x18]
	ldrb	r0, [r1]
	cmp	r0, #0x2e
	bne	.L117	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	orr	r6, r6, r0
	add	r3, r1, #0x1
	str	r3, [sp, #0x18]
	ldrb	r1, [r1, #0x1]
	mov	r2, #0x0
	add	r0, r1, #0
	sub	r0, r0, #0x30
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x9
	bhi	.L119	@cond_branch
	mov	r2, #0x1
.L119:
	cmp	r2, #0
	beq	.L118	@cond_branch
	add	r0, sp, #0x18
	bl	_atoi
	str	r0, [sp, #0x24]
	b	.L117
.L118:
	cmp	r1, #0x2a
	bne	.L117	@cond_branch
	add	r7, r7, #0x4
	sub	r0, r7, #0x4
	ldr	r0, [r0]
	cmp	r0, #0
	ble	.L123	@cond_branch
	str	r0, [sp, #0x24]
.L123:
	add	r0, r3, #0x1
	str	r0, [sp, #0x18]
.L117:
	ldr	r1, [sp, #0x18]
	ldrb	r0, [r1]
	cmp	r0, #0x6a
	beq	.L130	@cond_branch
	cmp	r0, #0x6a
	bgt	.L134	@cond_branch
	cmp	r0, #0x68
	beq	.L128	@cond_branch
	b	.L125
.L134:
	cmp	r0, #0x6c
	beq	.L126	@cond_branch
	cmp	r0, #0x7a
	beq	.L131	@cond_branch
	b	.L125
.L126:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	orr	r6, r6, r0
	add	r2, r1, #0x1
	str	r2, [sp, #0x18]
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x6c
	bne	.L125	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	orr	r6, r6, r0
	add	r0, r2, #0x1
	b	.L220
.L128:
	mov	r0, #0x80
	orr	r6, r6, r0
	add	r2, r1, #0x1
	str	r2, [sp, #0x18]
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x68
	bne	.L125	@cond_branch
	mov	r0, #0x40
	orr	r6, r6, r0
	add	r0, r2, #0x1
	b	.L220
.L130:
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	b	.L221
.L131:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
.L221:
	orr	r6, r6, r0
	add	r0, r1, #0x1
.L220:
	str	r0, [sp, #0x18]
.L125:
	ldr	r1, [sp, #0x18]
	ldrb	r0, [r1]
	sub	r0, r0, #0x25
	add	r2, r1, #0
	cmp	r0, #0x53
	bls	.LCB771
	b	.L213	@long jump
.LCB771:
	lsl	r0, r0, #0x2
	ldr	r1, .L232
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L233:
	.align	2, 0
.L232:
	.word	.L214
	.align	2, 0
	.align	2, 0
.L214:
	.word	.L212
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L142
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L142
	.word	.L174
	.word	.L142
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L142
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L213
	.word	.L142
	.word	.L211
	.word	.L213
	.word	.L213
	.word	.L185
	.word	.L213
	.word	.L142
	.word	.L213
	.word	.L213
	.word	.L142
.L142:
	ldrb	r0, [r2]
	cmp	r0, #0x78
	beq	.L144	@cond_branch
	cmp	r0, #0x58
	bne	.L143	@cond_branch
.L144:
	mov	r3, #0x10
	b	.L145
.L143:
	mov	r3, #0x8
	cmp	r0, #0x6f
	beq	.L145	@cond_branch
	mov	r3, #0x2
	cmp	r0, #0x62
	beq	.L145	@cond_branch
	mov	r3, #0xa
	mov	r0, #0x11
	neg	r0, r0
	and	r6, r6, r0
.L145:
	ldrb	r1, [r2]
	cmp	r1, #0x58
	bne	.L150	@cond_branch
	mov	r0, #0x20
	orr	r6, r6, r0
.L150:
	cmp	r1, #0x69
	beq	.L151	@cond_branch
	cmp	r1, #0x64
	beq	.L151	@cond_branch
	mov	r0, #0xd
	neg	r0, r0
	and	r6, r6, r0
.L151:
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L152	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	and	r6, r6, r0
.L152:
	ldr	r0, [sp, #0x18]
	ldrb	r0, [r0]
	cmp	r0, #0x69
	beq	.L154	@cond_branch
	cmp	r0, #0x64
	bne	.L153	@cond_branch
.L154:
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r6
	cmp	r0, #0
	beq	.LCB862
	b	.L218	@long jump
.LCB862:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L157	@cond_branch
	add	r7, r7, #0x4
	sub	r0, r7, #0x4
	ldr	r0, [r0]
	add	r1, r0, #0
	cmp	r0, #0
	bge	.L158	@cond_branch
	neg	r1, r0
.L158:
	str	r1, [sp]
	lsr	r0, r0, #0x1f
	b	.L222
.L157:
	mov	r0, #0x40
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L160	@cond_branch
	add	r7, r7, #0x4
	sub	r0, r7, #0x4
	ldrb	r0, [r0]
	b	.L161
.L160:
	mov	r0, #0x80
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L162	@cond_branch
	add	r7, r7, #0x4
	sub	r0, r7, #0x4
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	b	.L161
.L162:
	add	r7, r7, #0x4
	sub	r0, r7, #0x4
	ldr	r0, [r0]
.L161:
	add	r1, r0, #0
	cmp	r0, #0
	bge	.L164	@cond_branch
	neg	r1, r0
.L164:
	str	r1, [sp]
	lsr	r0, r0, #0x1f
	b	.L222
.L153:
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r1, r1, r6
	cmp	r1, #0
	beq	.LCB934
	b	.L218	@long jump
.LCB934:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L168	@cond_branch
	add	r7, r7, #0x4
	sub	r0, r7, #0x4
	ldr	r0, [r0]
	str	r0, [sp]
	str	r1, [sp, #0x4]
	str	r3, [sp, #0x8]
	ldr	r0, [sp, #0x24]
	str	r0, [sp, #0xc]
	ldr	r1, [sp, #0x20]
	str	r1, [sp, #0x10]
	b	.L223
.L168:
	mov	r0, #0x40
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L170	@cond_branch
	add	r7, r7, #0x4
	sub	r0, r7, #0x4
	ldrb	r0, [r0]
	b	.L171
.L170:
	mov	r0, #0x80
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L172	@cond_branch
	add	r7, r7, #0x4
	sub	r0, r7, #0x4
	ldrh	r0, [r0]
	b	.L171
.L172:
	add	r7, r7, #0x4
	sub	r0, r7, #0x4
	ldr	r0, [r0]
.L171:
	str	r0, [sp]
	mov	r0, #0x0
.L222:
	str	r0, [sp, #0x4]
	str	r3, [sp, #0x8]
	ldr	r4, [sp, #0x24]
	str	r4, [sp, #0xc]
	ldr	r5, [sp, #0x20]
	str	r5, [sp, #0x10]
.L223:
	str	r6, [sp, #0x14]
	ldr	r0, [sp, #0x1c]
	mov	r1, sl
	mov	r2, r8
	mov	r3, r9
	bl	_ntoa_long
	mov	r8, r0
	b	.L218
.L174:
	mov	r4, #0x1
	mov	r0, #0x2
	and	r0, r0, r6
	add	r5, r7, #0x4
	cmp	r0, #0
	bne	.L175	@cond_branch
	mov	r4, #0x2
	ldr	r7, [sp, #0x20]
	cmp	r7, #0x1
	bls	.L175	@cond_branch
.L178:
	mov	r2, r8
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, #0x20
	mov	r1, sl
	mov	r3, r9
	ldr	r7, [sp, #0x1c]
	bl	_call_via_r7
	add	r0, r4, #0
	add	r4, r4, #0x1
	ldr	r1, [sp, #0x20]
	cmp	r0, r1
	bcc	.L178	@cond_branch
.L175:
	add	r7, r5, #0
	sub	r0, r7, #0x4
	ldrb	r0, [r0]
	mov	r2, r8
	mov	r5, #0x1
	add	r8, r8, r5
	mov	r1, sl
	mov	r3, r9
	ldr	r5, [sp, #0x1c]
	bl	_call_via_r5
	mov	r0, #0x2
	and	r6, r6, r0
	cmp	r6, #0
	bne	.LCB1064
	b	.L218	@long jump
.LCB1064:
	b	.L224
.L183:
	mov	r2, r8
	mov	r5, #0x1
	add	r8, r8, r5
	mov	r0, #0x20
	mov	r1, sl
	mov	r3, r9
	ldr	r5, [sp, #0x1c]
	bl	_call_via_r5
.L224:
	add	r0, r4, #0
	add	r4, r4, #0x1
	ldr	r1, [sp, #0x20]
	cmp	r0, r1
	bcc	.L183	@cond_branch
	b	.L218
.L185:
	add	r7, r7, #0x4
	sub	r0, r7, #0x4
	ldr	r0, [r0]
	str	r0, [sp, #0x28]
	ldr	r3, [sp, #0x24]
	cmp	r3, #0
	bne	.L186	@cond_branch
	mov	r3, #0x1
	neg	r3, r3
.L186:
	add	r1, r3, #0
	ldr	r2, [sp, #0x28]
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L192	@cond_branch
	sub	r1, r1, #0x1
	cmp	r3, #0
	beq	.L192	@cond_branch
.L190:
	add	r2, r2, #0x1
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L192	@cond_branch
	add	r0, r1, #0
	sub	r1, r1, #0x1
	cmp	r0, #0
	bne	.L190	@cond_branch
.L192:
	ldr	r5, [sp, #0x28]
	sub	r4, r2, r5
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L194	@cond_branch
	ldr	r0, [sp, #0x24]
	cmp	r0, r4
	bls	.L195	@cond_branch
	add	r0, r4, #0
.L195:
	add	r4, r0, #0
.L194:
	mov	r0, #0x2
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L196	@cond_branch
	b	.L225
.L199:
	mov	r2, r8
	mov	r5, #0x1
	add	r8, r8, r5
	mov	r0, #0x20
	mov	r1, sl
	mov	r3, r9
	ldr	r5, [sp, #0x1c]
	bl	_call_via_r5
.L225:
	add	r0, r4, #0
	add	r4, r4, #0x1
	ldr	r1, [sp, #0x20]
	cmp	r0, r1
	bcc	.L199	@cond_branch
.L196:
	ldr	r5, [sp, #0x28]
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L202	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L203	@cond_branch
	ldr	r0, [sp, #0x24]
	sub	r0, r0, #0x1
	str	r0, [sp, #0x24]
	mov	r0, #0x1
	neg	r0, r0
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	beq	.L202	@cond_branch
.L203:
	ldr	r5, [sp, #0x28]
	ldrb	r0, [r5]
	add	r5, r5, #0x1
	str	r5, [sp, #0x28]
	mov	r2, r8
	mov	r1, #0x1
	add	r8, r8, r1
	mov	r1, sl
	mov	r3, r9
	ldr	r5, [sp, #0x1c]
	bl	_call_via_r5
	ldr	r1, [sp, #0x28]
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L202	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L203	@cond_branch
	ldr	r5, [sp, #0x24]
	sub	r5, r5, #0x1
	str	r5, [sp, #0x24]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	bne	.L203	@cond_branch
.L202:
	mov	r0, #0x2
	and	r6, r6, r0
	cmp	r6, #0
	beq	.L218	@cond_branch
	b	.L226
.L209:
	mov	r2, r8
	mov	r5, #0x1
	add	r8, r8, r5
	mov	r0, #0x20
	mov	r1, sl
	mov	r3, r9
	ldr	r5, [sp, #0x1c]
	bl	_call_via_r5
.L226:
	add	r0, r4, #0
	add	r4, r4, #0x1
	ldr	r1, [sp, #0x20]
	cmp	r0, r1
	bcc	.L209	@cond_branch
	b	.L218
.L211:
	mov	r4, #0x8
	mov	r0, #0x21
	orr	r6, r6, r0
	add	r7, r7, #0x4
	sub	r0, r7, #0x4
	ldr	r0, [r0]
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r0, #0x10
	str	r0, [sp, #0x8]
	ldr	r5, [sp, #0x24]
	str	r5, [sp, #0xc]
	str	r4, [sp, #0x10]
	str	r6, [sp, #0x14]
	ldr	r0, [sp, #0x1c]
	mov	r1, sl
	mov	r2, r8
	mov	r3, r9
	bl	_ntoa_long
	mov	r8, r0
	b	.L218
.L212:
	mov	r2, r8
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, #0x25
	b	.L227
.L213:
	ldr	r0, [sp, #0x18]
	ldrb	r0, [r0]
	mov	r2, r8
	mov	r5, #0x1
	add	r8, r8, r5
.L227:
	mov	r1, sl
	mov	r3, r9
	ldr	r4, [sp, #0x1c]
	bl	_call_via_r4
.L218:
	ldr	r0, [sp, #0x18]
	add	r0, r0, #0x1
	str	r0, [sp, #0x18]
.L92:
	ldr	r1, [sp, #0x18]
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.LCB1327
	b	.L94	@long jump
.LCB1327:
	mov	r2, r8
	cmp	r8, r9
	bcc	.L216	@cond_branch
	mov	r2, r9
	sub	r2, r2, #0x1
.L216:
	mov	r0, #0x0
	mov	r1, sl
	mov	r3, r9
	ldr	r5, [sp, #0x1c]
	bl	_call_via_r5
	mov	r0, r8
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 _vsnprintf,.Lfe5-_vsnprintf
	.align	2, 0
	.globl	printf_
	.type	 printf_,function
	.thumb_func
printf_:
	push	{r0, r1, r2, r3}
	push	{lr}
	add	sp, sp, #-0x8
	ldr	r3, [sp, #0xc]
	add	r1, sp, #0x10
	ldr	r0, .L235
	mov	r2, #0x1
	neg	r2, r2
	str	r1, [sp]
	add	r1, sp, #0x4
	bl	_vsnprintf
	add	sp, sp, #0x8
	pop	{r3}
	add	sp, sp, #0x10
	bx	r3
.L236:
	.align	2, 0
.L235:
	.word	_out_char
.Lfe6:
	.size	 printf_,.Lfe6-printf_
	.align	2, 0
	.globl	sprintf_
	.type	 sprintf_,function
	.thumb_func
sprintf_:
	push	{r1, r2, r3}
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r1, r0, #0
	ldr	r3, [sp, #0xc]
	add	r4, sp, #0x10
	ldr	r0, .L238
	mov	r2, #0x1
	neg	r2, r2
	str	r4, [sp]
	bl	_vsnprintf
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r3}
	add	sp, sp, #0xc
	bx	r3
.L239:
	.align	2, 0
.L238:
	.word	_out_buffer
.Lfe7:
	.size	 sprintf_,.Lfe7-sprintf_
	.align	2, 0
	.globl	snprintf_
	.type	 snprintf_,function
	.thumb_func
snprintf_:
	push	{r2, r3}
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r2, r1, #0
	ldr	r3, [sp, #0xc]
	add	r1, sp, #0x10
	ldr	r0, .L241
	str	r1, [sp]
	add	r1, r4, #0
	bl	_vsnprintf
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r3}
	add	sp, sp, #0x8
	bx	r3
.L242:
	.align	2, 0
.L241:
	.word	_out_buffer
.Lfe8:
	.size	 snprintf_,.Lfe8-snprintf_
	.align	2, 0
	.globl	vprintf_
	.type	 vprintf_,function
	.thumb_func
vprintf_:
	push	{lr}
	add	sp, sp, #-0x8
	add	r3, r0, #0
	ldr	r0, .L244
	mov	r2, #0x1
	neg	r2, r2
	str	r1, [sp]
	add	r1, sp, #0x4
	bl	_vsnprintf
	add	sp, sp, #0x8
	pop	{r1}
	bx	r1
.L245:
	.align	2, 0
.L244:
	.word	_out_char
.Lfe9:
	.size	 vprintf_,.Lfe9-vprintf_
	.align	2, 0
	.globl	vsnprintf_
	.type	 vsnprintf_,function
	.thumb_func
vsnprintf_:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	ldr	r0, .L247
	str	r3, [sp]
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	_vsnprintf
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L248:
	.align	2, 0
.L247:
	.word	_out_buffer
.Lfe10:
	.size	 vsnprintf_,.Lfe10-vsnprintf_
	.align	2, 0
	.globl	fctprintf
	.type	 fctprintf,function
	.thumb_func
fctprintf:
	push	{r2, r3}
	push	{lr}
	add	sp, sp, #-0xc
	ldr	r3, [sp, #0x10]
	str	r0, [sp, #0x4]
	str	r1, [sp, #0x8]
	add	r1, sp, #0x14
	ldr	r0, .L250
	mov	r2, #0x1
	neg	r2, r2
	str	r1, [sp]
	add	r1, sp, #0x4
	bl	_vsnprintf
	add	sp, sp, #0xc
	pop	{r3}
	add	sp, sp, #0x8
	bx	r3
.L251:
	.align	2, 0
.L250:
	.word	_out_fct
.Lfe11:
	.size	 fctprintf,.Lfe11-fctprintf
	.align	2, 0
	.type	 _out_buffer,function
	.thumb_func
_out_buffer:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r2, r3
	bcs	.L3	@cond_branch
	add	r0, r4, r2
	strb	r1, [r0]
.L3:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 _out_buffer,.Lfe12-_out_buffer
	.align	2, 0
	.type	 _out_null,function
	.thumb_func
_out_null:
	bx	lr
.Lfe13:
	.size	 _out_null,.Lfe13-_out_null
	.align	2, 0
	.type	 _out_char,function
	.thumb_func
_out_char:
	bx	lr
.Lfe14:
	.size	 _out_char,.Lfe14-_out_char
	.align	2, 0
	.type	 _out_fct,function
	.thumb_func
_out_fct:
	push	{lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L8	@cond_branch
	ldr	r1, [r2, #0x4]
	ldr	r2, [r2]
	bl	_call_via_r2
.L8:
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 _out_fct,.Lfe15-_out_fct
.text
	.align	2, 0

