@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	GetStringCenterAlignXOffset
	.type	 GetStringCenterAlignXOffset,function
	.thumb_func
GetStringCenterAlignXOffset:
	push	{lr}
	mov	r3, #0x0
	bl	GetStringCenterAlignXOffsetWithLetterSpacing
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 GetStringCenterAlignXOffset,.Lfe1-GetStringCenterAlignXOffset
	.align	2, 0
	.globl	GetStringRightAlignXOffset
	.type	 GetStringRightAlignXOffset,function
	.thumb_func
GetStringRightAlignXOffset:
	push	{lr}
	mov	r3, #0x0
	bl	GetStringWidthDifference
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 GetStringRightAlignXOffset,.Lfe2-GetStringRightAlignXOffset
	.align	2, 0
	.globl	GetStringCenterAlignXOffsetWithLetterSpacing
	.type	 GetStringCenterAlignXOffsetWithLetterSpacing,function
	.thumb_func
GetStringCenterAlignXOffsetWithLetterSpacing:
	push	{lr}
	bl	GetStringWidthDifference
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 GetStringCenterAlignXOffsetWithLetterSpacing,.Lfe3-GetStringCenterAlignXOffsetWithLetterSpacing
	.align	2, 0
	.globl	GetStringWidthDifference
	.type	 GetStringWidthDifference,function
	.thumb_func
GetStringWidthDifference:
	push	{r4, lr}
	add	r4, r2, #0
	add	r2, r3, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	bl	GetStringWidth
	cmp	r4, r0
	bgt	.L6	@cond_branch
	mov	r0, #0x0
	b	.L8
.L6:
	sub	r0, r4, r0
.L8:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 GetStringWidthDifference,.Lfe4-GetStringWidthDifference
	.align	2, 0
	.globl	GetMaxWidthInMenuTable
	.type	 GetMaxWidthInMenuTable,function
	.thumb_func
GetMaxWidthInMenuTable:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	cmp	r6, r1
	bge	.L11	@cond_branch
	add	r5, r0, #0
	add	r4, r1, #0
.L13:
	ldr	r1, [r5]
	mov	r0, #0x1
	mov	r2, #0x0
	bl	GetStringWidth
	cmp	r0, r6
	ble	.L12	@cond_branch
	add	r6, r0, #0
.L12:
	add	r5, r5, #0x8
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L13	@cond_branch
.L11:
	add	r0, r6, #0
	bl	ConvertPixelWidthToTileWidth
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 GetMaxWidthInMenuTable,.Lfe5-GetMaxWidthInMenuTable
	.align	2, 0
	.globl	sub_81DB3D8
	.type	 sub_81DB3D8,function
	.thumb_func
sub_81DB3D8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r0
	add	r7, r1, #0
	add	r5, r2, #0
	mov	r6, #0x0
	mov	r4, #0x0
	cmp	r6, r5
	bge	.L18	@cond_branch
.L20:
	add	r0, r7, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	ldr	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0x0
	bl	GetStringWidth
	cmp	r0, r6
	ble	.L19	@cond_branch
	add	r6, r0, #0
.L19:
	add	r4, r4, #0x1
	cmp	r4, r5
	blt	.L20	@cond_branch
.L18:
	add	r0, r6, #0
	bl	ConvertPixelWidthToTileWidth
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 sub_81DB3D8,.Lfe6-sub_81DB3D8
	.align	2, 0
	.globl	Intl_GetListMenuWidth
	.type	 Intl_GetListMenuWidth,function
	.thumb_func
Intl_GetListMenuWidth:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r1, [r4]
	mov	r7, #0x0
	mov	r6, #0x0
	ldrh	r0, [r4, #0xc]
	cmp	r7, r0
	bge	.L25	@cond_branch
	add	r5, r1, #0
.L27:
	ldrb	r0, [r4, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	ldr	r1, [r5]
	mov	r2, #0x0
	bl	GetStringWidth
	cmp	r0, r7
	ble	.L26	@cond_branch
	add	r7, r0, #0
.L26:
	add	r5, r5, #0x8
	add	r6, r6, #0x1
	ldrh	r0, [r4, #0xc]
	cmp	r6, r0
	blt	.L27	@cond_branch
.L25:
	ldrb	r0, [r4, #0x12]
	add	r1, r7, r0
	add	r0, r1, #0
	add	r0, r0, #0x9
	cmp	r0, #0
	bge	.L30	@cond_branch
	add	r0, r0, #0x7
.L30:
	asr	r0, r0, #0x3
	cmp	r0, #0x1c
	ble	.L31	@cond_branch
	mov	r0, #0x1c
.L31:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 Intl_GetListMenuWidth,.Lfe7-Intl_GetListMenuWidth
	.align	2, 0
	.globl	CopyMonCategoryText
	.type	 CopyMonCategoryText,function
	.thumb_func
CopyMonCategoryText:
	push	{lr}
	add	r2, r1, #0
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L33
	add	r1, r1, r0
	add	r0, r2, #0
	bl	StringCopy
	mov	r1, #0x0
	strb	r1, [r0]
	add	r0, r0, #0x1
	ldr	r1, .L33+0x4
	bl	StringCopy
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	gPokedexEntries
	.word	gText_Pokemon
.Lfe8:
	.size	 CopyMonCategoryText,.Lfe8-CopyMonCategoryText
	.align	2, 0
	.globl	sub_81DB494
	.type	 sub_81DB494,function
	.thumb_func
sub_81DB494:
	push	{r4, r5, r6, r7, lr}
	add	r6, r1, #0
	add	r5, r2, #0
	add	r7, r3, #0
	cmp	r5, #0
	beq	.L36	@cond_branch
	add	r1, r5, #0
	bl	StringCopy
	add	r4, r0, #0
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	add	r1, r5, #0
	mov	r2, #0x0
	bl	GetStringWidth
	b	.L37
.L36:
	add	r4, r0, #0
	mov	r0, #0x0
.L37:
	sub	r3, r7, r0
	cmp	r3, #0
	ble	.L38	@cond_branch
	mov	r0, #0xfc
	strb	r0, [r4]
	add	r4, r4, #0x1
	mov	r0, #0x11
	strb	r0, [r4]
	add	r4, r4, #0x1
	strb	r3, [r4]
	add	r4, r4, #0x1
	mov	r0, #0xff
	strb	r0, [r4]
.L38:
	add	r0, r4, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 sub_81DB494,.Lfe9-sub_81DB494
	.align	2, 0
	.globl	PadNameString
	.type	 PadNameString,function
	.thumb_func
PadNameString:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	bl	StripExtCtrlCodes
	add	r0, r4, #0
	bl	StringLength
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r5, #0xfc
	bne	.L50	@cond_branch
	cmp	r1, #0x5
	bhi	.L45	@cond_branch
	mov	r3, #0xfc
	mov	r2, #0x7
.L43:
	add	r0, r4, r1
	strb	r3, [r0]
	strb	r2, [r0, #0x1]
	add	r0, r1, #0x2
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x5
	bls	.L43	@cond_branch
	b	.L45
.L48:
	add	r0, r4, r1
	strb	r5, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
.L50:
	cmp	r1, #0x5
	bls	.L48	@cond_branch
.L45:
	add	r1, r4, r1
	mov	r0, #0xff
	strb	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 PadNameString,.Lfe10-PadNameString
	.align	2, 0
	.globl	sub_81DB52C
	.type	 sub_81DB52C,function
	.thumb_func
sub_81DB52C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	StringLength
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5
	bhi	.L52	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ConvertInternationalString
	b	.L53
.L52:
	add	r0, r4, #0
	bl	StripExtCtrlCodes
.L53:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 sub_81DB52C,.Lfe11-sub_81DB52C
	.align	2, 0
	.globl	sub_81DB554
	.type	 sub_81DB554,function
	.thumb_func
sub_81DB554:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	bl	StringLength
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5
	bhi	.L55	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ConvertInternationalString
	b	.L56
.L55:
	cmp	r5, #0xfc
	bne	.L57	@cond_branch
	add	r0, r4, #0
	bl	StripExtCtrlCodes
	b	.L56
.L57:
	add	r1, r4, #0
	b	.L68
.L61:
	add	r1, r1, #0x1
.L68:
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0xff
	bne	.L61	@cond_branch
	cmp	r1, r4
	bcc	.L56	@cond_branch
	ldrb	r0, [r1]
	cmp	r0, r5
	bne	.L56	@cond_branch
	mov	r2, #0xff
.L65:
	strb	r2, [r1]
	sub	r1, r1, #0x1
	cmp	r1, r4
	bcc	.L56	@cond_branch
	ldrb	r0, [r1]
	cmp	r0, r5
	beq	.L65	@cond_branch
.L56:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 sub_81DB554,.Lfe12-sub_81DB554
	.align	2, 0
	.globl	sub_81DB5AC
	.type	 sub_81DB5AC,function
	.thumb_func
sub_81DB5AC:
	push	{lr}
	add	r2, r0, #0
	ldrb	r0, [r2]
	add	r2, r2, #0x1
	cmp	r0, #0xfc
	bne	.L69	@cond_branch
	ldrb	r0, [r2]
	add	r2, r2, #0x1
	cmp	r0, #0x15
	bne	.L69	@cond_branch
	b	.L76
.L73:
	cmp	r1, #0xfc
	bne	.L74	@cond_branch
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x16
	beq	.L69	@cond_branch
.L74:
	add	r2, r2, #0x1
.L76:
	ldrb	r1, [r2]
	add	r0, r1, #0
	cmp	r0, #0xff
	bne	.L73	@cond_branch
	mov	r0, #0xfc
	strb	r0, [r2]
	add	r2, r2, #0x1
	mov	r0, #0x16
	strb	r0, [r2]
	mov	r0, #0xff
	strb	r0, [r2, #0x1]
.L69:
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 sub_81DB5AC,.Lfe13-sub_81DB5AC
	.align	2, 0
	.globl	TVShowConvertInternationalString
	.type	 TVShowConvertInternationalString,function
	.thumb_func
TVShowConvertInternationalString:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r2, #0
	bl	StringCopy
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	ConvertInternationalString
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 TVShowConvertInternationalString,.Lfe14-TVShowConvertInternationalString
	.align	2, 0
	.globl	sub_81DB604
	.type	 sub_81DB604,function
	.thumb_func
sub_81DB604:
	push	{lr}
	add	r1, r0, #0
	ldrb	r0, [r1]
	cmp	r0, #0xfc
	bne	.L79	@cond_branch
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x15
	bne	.L79	@cond_branch
	mov	r0, #0x1
	b	.L81
.L79:
	mov	r0, #0x2
.L81:
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 sub_81DB604,.Lfe15-sub_81DB604
	.align	2, 0
	.globl	sub_81DB620
	.type	 sub_81DB620,function
	.thumb_func
sub_81DB620:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L89
	add	r4, r4, r0
	lsl	r7, r3, #0x5
	ldrb	r0, [r4, #0x3]
	lsl	r6, r0, #0x5
	mul	r2, r2, r6
	ldr	r0, [r4, #0x8]
	add	r0, r0, r2
	lsl	r1, r1, #0x5
	add	r5, r0, r1
	ldr	r0, [sp, #0x18]
	cmp	r0, #0
	ble	.L83	@cond_branch
	add	r4, r0, #0
.L86:
	ldr	r0, .L89+0x4
	str	r0, [sp]
	add	r2, r7, #0
	cmp	r2, #0
	bge	.L87	@cond_branch
	add	r2, r2, #0x3
.L87:
	lsl	r2, r2, #0x9
	lsr	r2, r2, #0xb
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	orr	r2, r2, r0
	mov	r0, sp
	add	r1, r5, #0
	bl	CpuFastSet
	add	r5, r5, r6
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L86	@cond_branch
.L83:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L90:
	.align	2, 0
.L89:
	.word	gWindows
	.word	0x11111111
.Lfe16:
	.size	 sub_81DB620,.Lfe16-sub_81DB620
.text
	.align	2, 0

