@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gTrainerCards
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gTrainerCards,object
	.size	 gTrainerCards,400
gTrainerCards:
	.byte	0x0
	.space	99
	.space	300
	.align	2, 0
	.type	 sData,object
	.size	 sData,4
sData:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sTrainerCardStickers_Gfx,object
sTrainerCardStickers_Gfx:
	.word	0x20010
	.word	0x10000000
	.word	0x31100011
	.word	0x31000033
	.word	0x33102222
	.word	0x10001122
	.word	0x31211233
	.word	0x10121233
	.word	0x223331
	.word	0x11211203
	.word	0x1
	.word	0x33333
	.word	0x33002222
	.word	0x33221100
	.word	0x211204
	.word	0x22210333
	.word	0x21214333
	.word	0x433320
	.word	0x3331430b
	.word	0x31001123
	.word	0x33223233
	.word	0x2332223
	.word	0x32222230
	.word	0x28003330
	.word	0x33320034
	.word	0x33334000
	.word	0x40000000
	.word	0x33321144
	.word	0x232243
	.word	0x22334333
	.word	0x22234332
	.word	0x42220
	.word	0x2333041e
	.word	0x33000043
	.word	0x44000443
	.word	-0x55fffffc
	.word	0x337f70
	.word	-0x7cefdc81
	.word	0x220a0022
	.word	0x2c003178
	.word	0x7f600310
	.word	0x32224e00
	.word	0x45633
	.word	0x3000387
	.word	0x206a0043
	.word	0x13403103
	.word	0x2123a700
	.word	0x12233121
	.word	0x7b002260
	.word	0x22230300
	.word	0x40333400
	.word	0x217f5022
	.word	0x12433122
	.word	0x2b00ba12
	.word	0x2f1021
	.word	0x3343103f
	.word	0x16007ff0
	.word	0x332331
	.word	-0x7cefcd81
	.word	-0x15eef5ff
	.word	0x7214f00
	.word	0x337f50
	.word	0x3b1023d2
	.word	0x3330432
	.word	0x222211
	.word	-0x3bccd05
	.word	0x27210711
	.word	0x33002b10
	.word	0x3007b10
	.word	0x34330032
	.word	0x31ff6023
	.word	0x10433227
	.word	-0x6984efcd
	.word	0x32334310
	.word	-0x6fcc8100
	.word	0x312b007f
	.word	0x7f003372
	.word	-0x8df7cff
	.word	0x3203332
	.word	0x5c01f133
	.word	-0xef80b0
	.word	0x3222bf10
	.word	0x7b620003
	.word	0x20031043
	.word	0x502300ff
	.word	0x24003003
	.word	0x23590300
	.word	0x5023ff00
	.word	0x322b117f
	.word	-0x47fccfcd
	.word	0x41e00
	.word	0x70030007
	.word	0x7f
	.size	 sTrainerCardStickers_Gfx,372
	.align	1, 0
	.type	 sUnused_0856F18C,object
sUnused_0856F18C:
	.short	0x7fff
	.short	0x7fff
	.short	0x318c
	.short	0x675a
	.short	0x43c
	.short	0x3aff
	.short	0x664
	.short	0x4bd2
	.short	0x6546
	.short	0x7b14
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sUnused_0856F18C,32
	.align	1, 0
	.type	 sHoennTrainerCard1Star_Pal,object
sHoennTrainerCard1Star_Pal:
	.short	0x3991
	.short	0x7bfd
	.short	0x73ba
	.short	0x5294
	.short	0x3def
	.short	0x398c
	.short	0x20e5
	.short	0x45a7
	.short	0x6228
	.short	0x6757
	.short	0x52d2
	.short	0x3e4d
	.short	0x2dc8
	.short	0x7eed
	.short	0x6739
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x6acd
	.short	0x51e5
	.short	0x0
	.short	0x0
	.short	0x398c
	.short	0x7fff
	.short	0x779c
	.short	0x5294
	.short	0x3def
	.short	0x7fff
	.short	0x779c
	.short	0x5294
	.short	0x3def
	.short	0x7fff
	.short	0x779c
	.short	0x5294
	.short	0x3def
	.short	0x7eed
	.short	0x6739
	.short	0x0
	.size	 sHoennTrainerCard1Star_Pal,96
	.align	1, 0
	.type	 sKantoTrainerCard1Star_Pal,object
sKantoTrainerCard1Star_Pal:
	.short	0x3991
	.short	0x73fb
	.short	0x6fd9
	.short	0x6bb8
	.short	0x6797
	.short	0x4b3e
	.short	0x5294
	.short	0x398c
	.short	0x475e
	.short	0x4b36
	.short	0x56d0
	.short	0x4e6e
	.short	0x3e0a
	.short	0x5fdf
	.short	0x7fff
	.short	0x6333
	.short	0x3991
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0xa57
	.short	0x2b5f
	.short	0x5b2a
	.short	0x52a8
	.short	0x6318
	.short	0x2d6b
	.short	0x0
	.short	0x3d04
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sKantoTrainerCard1Star_Pal,96
	.align	1, 0
	.type	 sHoennTrainerCard2Star_Pal,object
sHoennTrainerCard2Star_Pal:
	.short	0x3991
	.short	0x73df
	.short	0x6b9e
	.short	0x2e79
	.short	0x2216
	.short	0x398c
	.short	0x20e5
	.short	0x45a7
	.short	0x6228
	.short	0x46fc
	.short	0x3a79
	.short	0x2a16
	.short	0x15b3
	.short	0x7eed
	.short	0x6739
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x6acd
	.short	0x51e5
	.short	0x0
	.short	0x0
	.short	0x398c
	.short	0x7fff
	.short	0x779c
	.short	0x5294
	.short	0x3def
	.short	0x7fff
	.short	0x779c
	.short	0x5294
	.short	0x3def
	.short	0x7fff
	.short	0x779c
	.short	0x5294
	.short	0x3def
	.short	0x7eed
	.short	0x6739
	.short	0x0
	.size	 sHoennTrainerCard2Star_Pal,96
	.align	1, 0
	.type	 sKantoTrainerCard2Star_Pal,object
sKantoTrainerCard2Star_Pal:
	.short	0x3991
	.short	0x67de
	.short	0x63be
	.short	0x5f9d
	.short	0x4f7c
	.short	0x4b3e
	.short	0x5294
	.short	0x398c
	.short	0x47be
	.short	0x471b
	.short	0x46fa
	.short	0x3ed8
	.short	0x29f4
	.short	0x67ff
	.short	0x7fff
	.short	0x4f3c
	.short	0x3991
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0xa57
	.short	0x2b5f
	.short	0x5b2a
	.short	0x52a8
	.short	0x6318
	.short	0x2d6b
	.short	0x0
	.short	0x3d04
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sKantoTrainerCard2Star_Pal,96
	.align	1, 0
	.type	 sHoennTrainerCard3Star_Pal,object
sHoennTrainerCard3Star_Pal:
	.short	0x3991
	.short	0x7fde
	.short	0x779c
	.short	0x62f7
	.short	0x4e73
	.short	0x15b3
	.short	0x20e5
	.short	0x45a7
	.short	0x6228
	.short	0x779c
	.short	0x62f7
	.short	0x4e73
	.short	0x3def
	.short	0x7eed
	.short	0x6739
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x6acd
	.short	0x51e5
	.short	0x0
	.short	0x0
	.short	0x398c
	.short	0x7fff
	.short	0x779c
	.short	0x5294
	.short	0x3def
	.short	0x7fff
	.short	0x779c
	.short	0x5294
	.short	0x3def
	.short	0x7fff
	.short	0x779c
	.short	0x5294
	.short	0x3def
	.short	0x7eed
	.short	0x6739
	.short	0x0
	.size	 sHoennTrainerCard3Star_Pal,96
	.align	1, 0
	.type	 sKantoTrainerCard3Star_Pal,object
sKantoTrainerCard3Star_Pal:
	.short	0x3991
	.short	0x7bdd
	.short	0x7bdd
	.short	0x77bd
	.short	0x739c
	.short	0x4b3e
	.short	0x5294
	.short	0x398c
	.short	0x43bf
	.short	0x5339
	.short	0x6738
	.short	0x56d5
	.short	0x4e30
	.short	0x63de
	.short	0x7fff
	.short	0x6f7a
	.short	0x3991
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0xa57
	.short	0x2b5f
	.short	0x5b2a
	.short	0x52a8
	.short	0x6318
	.short	0x2d6b
	.short	0x0
	.short	0x3d04
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sKantoTrainerCard3Star_Pal,96
	.align	1, 0
	.type	 sHoennTrainerCard4Star_Pal,object
sHoennTrainerCard4Star_Pal:
	.short	0x3991
	.short	0x6fde
	.short	0x57be
	.short	0x5294
	.short	0x3def
	.short	0x398c
	.short	0x20e5
	.short	0x45a7
	.short	0x6228
	.short	0x479e
	.short	0x1b5c
	.short	0x1f1a
	.short	0x1dd3
	.short	0x7eed
	.short	0x6739
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x6acd
	.short	0x51e5
	.short	0x0
	.short	0x0
	.short	0x398c
	.short	0x7fff
	.short	0x779c
	.short	0x5294
	.short	0x3def
	.short	0x7fff
	.short	0x779c
	.short	0x5294
	.short	0x3def
	.short	0x7fff
	.short	0x779c
	.short	0x5294
	.short	0x3def
	.short	0x7eed
	.short	0x6739
	.short	0x0
	.size	 sHoennTrainerCard4Star_Pal,96
	.align	1, 0
	.type	 sKantoTrainerCard4Star_Pal,object
sKantoTrainerCard4Star_Pal:
	.short	0x3991
	.short	0x73df
	.short	0x6bbe
	.short	0x63de
	.short	0x5bbe
	.short	0x377e
	.short	0x5294
	.short	0x398c
	.short	0x4bff
	.short	0x1b7e
	.short	0x73e
	.short	0x2fd
	.short	0x1e57
	.short	0x63ff
	.short	0x7fff
	.short	0x2b9e
	.short	0x3991
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0xa57
	.short	0x2b5f
	.short	0x5b2a
	.short	0x52a8
	.short	0x6318
	.short	0x2d6b
	.short	0x0
	.short	0x3d04
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sKantoTrainerCard4Star_Pal,96
	.align	1, 0
	.type	 sHoennTrainerCardFemaleBg_Pal,object
sHoennTrainerCardFemaleBg_Pal:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x45fc
	.short	0x38d4
	.short	0x0
	.short	0x0
	.size	 sHoennTrainerCardFemaleBg_Pal,32
	.align	1, 0
	.type	 sKantoTrainerCardFemaleBg_Pal,object
sKantoTrainerCardFemaleBg_Pal:
	.short	0x3991
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0xa57
	.short	0x2b5f
	.short	0x2a5c
	.short	0x159a
	.short	0x6318
	.short	0x2d6b
	.size	 sKantoTrainerCardFemaleBg_Pal,32
	.align	1, 0
	.type	 sHoennTrainerCardBadges_Pal,object
sHoennTrainerCardBadges_Pal:
	.short	0x3991
	.short	0x7fff
	.short	0x6b5a
	.short	0x5ad6
	.short	0x3def
	.short	0x1e3f
	.short	0x4fb
	.short	0x7eed
	.short	0x6228
	.short	0x335f
	.short	0x1edd
	.short	0x61f8
	.short	0x4d32
	.short	0x7eed
	.short	0x6739
	.short	0x0
	.size	 sHoennTrainerCardBadges_Pal,32
	.align	1, 0
	.type	 sKantoTrainerCardBadges_Pal,object
sKantoTrainerCardBadges_Pal:
	.short	0x3991
	.short	0x7fff
	.short	0x6b5a
	.short	0x5ad6
	.short	0x3def
	.short	0x1e3f
	.short	0x4fb
	.short	0x7eed
	.short	0x6228
	.short	0x335f
	.short	0x1edd
	.short	0x61f8
	.short	0x4d32
	.short	0x7eed
	.short	0x6739
	.short	0x0
	.size	 sKantoTrainerCardBadges_Pal,32
	.align	1, 0
	.type	 sTrainerCardGold_Pal,object
sTrainerCardGold_Pal:
	.short	0x3991
	.short	0x31e
	.short	0x299
	.short	0x31e
	.short	0x31e
	.short	0x31e
	.short	0x31e
	.short	0x31e
	.short	0x0
	.short	0x0
	.short	0xa57
	.short	0x2b5f
	.short	0x0
	.short	0x0
	.short	0xa57
	.short	0x31e
	.size	 sTrainerCardGold_Pal,32
	.align	1, 0
	.type	 sTrainerCardSticker1_Pal,object
sTrainerCardSticker1_Pal:
	.short	0x5fdf
	.short	0x7fff
	.short	0x531f
	.short	0x7bdd
	.short	0x737b
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sTrainerCardSticker1_Pal,32
	.align	1, 0
	.type	 sTrainerCardSticker2_Pal,object
sTrainerCardSticker2_Pal:
	.short	0x5fdf
	.short	0x7fff
	.short	0x770c
	.short	0x7bdd
	.short	0x737b
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sTrainerCardSticker2_Pal,32
	.align	1, 0
	.type	 sTrainerCardSticker3_Pal,object
sTrainerCardSticker3_Pal:
	.short	0x5fdf
	.short	0x7fff
	.short	0x279e
	.short	0x7bdd
	.short	0x737b
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sTrainerCardSticker3_Pal,32
	.align	1, 0
	.type	 sTrainerCardSticker4_Pal,object
sTrainerCardSticker4_Pal:
	.short	0x5fdf
	.short	0x7fff
	.short	0x4a0d
	.short	0x7bdd
	.short	0x737b
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sTrainerCardSticker4_Pal,32
	.align	2, 0
	.type	 sHoennTrainerCardBadges_Gfx,object
sHoennTrainerCardBadges_Gfx:
	.word	0x40010
	.word	-0x6fffffe0
	.word	0xfff001
	.word	0x34001f00
	.word	0x3411f000
	.word	0x5111f00
	.word	0x4111f034
	.word	0xf152033
	.word	-0xefffd00
	.word	0x11ff0000
	.word	0x43000f
	.word	0x3300f221
	.word	0x330f2224
	.word	-0xdddbcff
	.word	-0xccdbccd
	.word	0x3f003bb0
	.word	0x21f00011
	.word	0x81f0022
	.word	0x23f02222
	.word	0x22210300
	.word	0x1d50ca22
	.word	-0xbffbe00
	.word	0x320300
	.word	-0xcfdddf8
	.word	0x42220fff
	.word	0x22030033
	.word	0x501610e8
	.word	-0xc0ffff
	.word	0x22f03f30
	.word	0x1f000e44
	.word	0x3203342
	.word	0x1c005b30
	.word	0x110f022f
	.word	0x2200f2ff
	.word	-0x73bbc000
	.word	0x24333600
	.word	-0x4ffcdf0d
	.word	-0x56ee0fc1
	.word	0x210300
	.word	0x34302f0b
	.word	0x1710f00f
	.word	-0xff0100
	.word	0x22ff11f2
	.word	0x222200f2
	.word	0x22220f22
	.word	0xd000ff
	.word	-0xdfccffa
	.word	0x11f01d30
	.word	0x1f0c0f11
	.word	0xf32221
	.word	0x320340b6
	.word	0x33f017f3
	.word	-0xc9ffcd
	.word	0x1f04710
	.word	0x1091cf40
	.word	0xfff03e
	.word	-0xeeeee9c
	.word	-0xfe814f0
	.word	-0xcefbbbc
	.word	-0x6ff46fbc
	.word	-0x612efd5
	.word	0x7f307310
	.word	-0x7fdf3500
	.word	0xf117651
	.word	0x10812f00
	.word	0x221ff47f
	.word	0x1f0f42
	.word	0x310d41b
	.word	0xfd930
	.word	0xf00f1a3
	.word	0x4f400f32
	.word	0x24f09f00
	.word	0x2f00f322
	.word	0x100340fd
	.word	0x303d00e7
	.word	0x10fb10f3
	.word	0x77011f03
	.word	-0xffcff71
	.word	0x7b1023ff
	.word	0x7f20ba01
	.word	0x31d87b11
	.word	0x3203307f
	.word	-0x19fea900
	.word	0x1f222f33
	.word	0x1f03334
	.word	0x14f0090
	.word	0x12001fb
	.word	-0xace5f95
	.word	0x33630100
	.word	-0xccebcf1
	.word	0x3343001f
	.word	0x3300fb01
	.word	0x31b23200
	.word	0x2302ef10
	.word	0x2f002242
	.word	0x2f6f0024
	.word	-0x88ff46
	.word	0x4300f311
	.word	0x220130
	.word	0xaf2438
	.word	-0xcfebdfd
	.word	0x603b00f2
	.word	0x51015018
	.word	-0xcee3e19
	.word	-0xd004ef
	.word	0xf2f011
	.word	0x6740f626
	.word	-0xcee18af
	.word	0x1211fb11
	.word	0x117f9025
	.word	0x12ff12c
	.word	0x370122bb
	.word	0x44420300
	.word	0x24221f02
	.word	0x142f0f2
	.word	0x11ffff38
	.word	0x31eb516d
	.word	-0x2fedbf95
	.word	-0xed4cd7f
	.word	0x760120e2
	.word	-0xdc2ed0e
	.word	0xf1f121f
	.word	-0x14eec4de
	.word	-0x8ef0501
	.word	0x1f0c411
	.word	0x3307332
	.word	-0xffcffd1
	.word	0x2fd311b8
	.word	-0x74cffcf0
	.word	0xf3b01
	.word	-0xbddcac1
	.word	0x43000800
	.word	0x2347103f
	.word	0x3f4b3600
	.word	0x24f09350
	.word	0x20f3f311
	.word	-0x1a4cde05
	.word	-0xbeeca00
	.word	-0xee0799f
	.word	0xf21a03
	.word	0x2325987
	.word	0x3702323f
	.word	0x23f0a330
	.word	0x10b82900
	.word	-0x2fee045
	.word	0x1f601ff0
	.size	 sHoennTrainerCardBadges_Gfx,584
	.align	2, 0
	.type	 sKantoTrainerCardBadges_Gfx,object
sKantoTrainerCardBadges_Gfx:
	.word	0x40010
	.word	0x20000020
	.word	0xff01
	.word	0xa11f0
	.word	0x111f00
	.word	0x6001106
	.word	0x11f00c22
	.word	0x3101121
	.word	0x11001c40
	.word	0x3000f50
	.word	0x220300f2
	.word	0x122000f
	.word	0x1100f222
	.word	0x100f3333
	.word	0x3f40a903
	.word	0x1f0300f0
	.word	0x31f00330
	.word	0x1f020330
	.word	0x14f00033
	.word	0x1f4033
	.word	0x102810d9
	.word	0x340f303
	.word	-0xbccc6f0
	.word	0x40801d50
	.word	0x3ffff03f
	.word	-0xdd1000
	.word	-0xd010000
	.word	0x1f31f011
	.word	0x1f6822
	.word	-0xecceffd
	.word	-0xcc80c0
	.word	-0xffdbf1
	.word	0x2f111100
	.word	-0xc7d00
	.word	0x130300b8
	.word	0x3b101e10
	.word	0x33ff3700
	.word	0x144f0000
	.word	0x314f001f
	.word	0x1f0000f3
	.word	-0xb0fbeed
	.word	0x184f1413
	.word	0x50314f14
	.word	-0xec4ef8d
	.word	0xf441
	.word	0xf4133f
	.word	0x1f13114
	.word	0x4f314100
	.word	0xf4130f
	.word	-0x18f7df0
	.word	0x221f000f
	.word	0x120300f1
	.word	0x2221f00e
	.word	0x60035022
	.word	0x2f77001e
	.word	0xf44408
	.word	0x44030042
	.word	0xf694444
	.word	0x3f710350
	.word	0x213b01ff
	.word	0xf60033
	.word	0x432f0044
	.word	0x2431f022
	.word	0x510320d8
	.word	0x400213f
	.word	0x33442e11
	.word	0x220011f3
	.word	0x42030034
	.word	0x3100f43
	.word	0xfb60c0
	.word	-0xf0e0fa2
	.word	0x511f021
	.word	0x21f021ff
	.word	0x427b1021
	.word	0x42408b00
	.word	0xf3b71
	.word	0xf4f0f3
	.word	-0xbd00d00
	.word	-0xbdeee00
	.word	0x32222800
	.word	0x420300
	.word	0xfffff19
	.word	0x3f22f000
	.word	0x44442ff3
	.word	0x443f06f3
	.word	0xfff444
	.word	0x440b0003
	.word	0x44433f01
	.word	0x4ffff024
	.word	0x70bbbf30
	.word	-0x4eefff5c
	.word	0x58110310
	.word	0x41f62011
	.word	0x222f32e7
	.word	0x300af01
	.word	0x3002f00
	.word	-0x48ee1410
	.word	-0x189ed1f0
	.word	0x33f70033
	.word	-0x4ceec800
	.word	0x20bb11e0
	.word	0x31b9211c
	.word	0x431f0044
	.word	0x3001272
	.word	0x7003702
	.word	0x3b0034f0
	.word	0x504465ff
	.word	0xea003f
	.word	0x31300032
	.word	0x326eea00
	.word	0x3f100300
	.word	0x623f00f4
	.word	0xe30138
	.word	0x300ff4b
	.word	0x7f10f2f0
	.word	0x22c721ff
	.word	0x2f00308b
	.word	-0x1cfee1f0
	.word	0x23f322f2
	.word	0x2f330f1b
	.word	-0x4bffe9fe
	.word	0x2c701f3
	.word	0x3f60ff86
	.word	-0x14ee1cef
	.word	-0x4de0cef
	.word	0x43200312
	.word	0xff1302
	.word	0x11e3113f
	.word	0x11f311eb
	.word	0x120312fb
	.word	-0x56ecedf5
	.word	0x12f4320
	.word	0x3003fe3
	.word	0x2b0123f0
	.word	0x3003f4f
	.word	0x561024f0
	.word	-0x14fe68bf
	.word	0x10feef11
	.word	0xbb0103
	.word	0x123b11bb
	.word	0x1bf7034
	.word	0x19f32e7
	.word	0x433fe7
	.word	-0x3f04fefd
	.word	0x11e751ff
	.word	0x4456f3
	.word	0x30133fc
	.word	0x512d1244
	.word	0x22001f3f
	.word	0x4221f044
	.word	0x5d22f044
	.word	0x22370242
	.word	0x73123f00
	.word	0x1243f70
	.word	0x22443ee3
	.word	0x3007f00
	.word	0x6000b10
	.word	0x3e003fa1
	.word	0x730142f0
	.word	0x8027701
	.word	0x190b350
	.word	0xf1f0a12
	.word	-0x25eddf00
	.word	0x21370312
	.word	-0xc0fc4e
	.word	0x14004d13
	.word	0x810f000
	.word	0xff
	.size	 sKantoTrainerCardBadges_Gfx,672
	.align	2, 0
	.type	 sTrainerCardBgTemplates,object
	.size	 sTrainerCardBgTemplates,16
sTrainerCardBgTemplates:
	.byte	0xb0
	.byte	0x25
	.byte	0x0
	.space	1
	.byte	0xd9
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xe2
	.byte	0x31
	.byte	0x0
	.space	1
	.byte	0xf3
	.byte	0x11
	.byte	0x30
	.space	1
	.align	2, 0
	.type	 sTrainerCardWindowTemplates,object
sTrainerCardWindowTemplates:
	.byte	0x1
	.byte	0x2
	.byte	0xf
	.byte	0x1b
	.byte	0x4
	.byte	0xf
	.short	0x253
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1c
	.byte	0x12
	.byte	0xf
	.short	0x1
	.byte	0x3
	.byte	0x13
	.byte	0x5
	.byte	0x9
	.byte	0xa
	.byte	0x8
	.short	0x150
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sTrainerCardWindowTemplates,32
	.align	2, 0
	.type	 sHoennTrainerCardStarPals,object
sHoennTrainerCardStarPals:
	.word	gHoennTrainerCard0Star_Pal
	.word	sHoennTrainerCard1Star_Pal
	.word	sHoennTrainerCard2Star_Pal
	.word	sHoennTrainerCard3Star_Pal
	.word	sHoennTrainerCard4Star_Pal
	.size	 sHoennTrainerCardStarPals,20
	.align	2, 0
	.type	 sKantoTrainerCardStarPals,object
sKantoTrainerCardStarPals:
	.word	gKantoTrainerCard0Star_Pal
	.word	sKantoTrainerCard1Star_Pal
	.word	sKantoTrainerCard2Star_Pal
	.word	sKantoTrainerCard3Star_Pal
	.word	sKantoTrainerCard4Star_Pal
	.size	 sKantoTrainerCardStarPals,20
	.type	 sTrainerCardTextColors,object
sTrainerCardTextColors:
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.size	 sTrainerCardTextColors,3
	.type	 sTrainerCardStatColors,object
sTrainerCardStatColors:
	.byte	0x0
	.byte	0x4
	.byte	0x5
	.size	 sTrainerCardStatColors,3
	.type	 sTimeColonInvisibleTextColors,object
	.size	 sTimeColonInvisibleTextColors,6
sTimeColonInvisibleTextColors:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.type	 sTrainerPicOffset,object
	.size	 sTrainerPicOffset,8
sTrainerPicOffset:
	.byte	0xd
	.byte	0x4
	.byte	0xd
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.type	 sTrainerPicFacilityClass,object
sTrainerPicFacilityClass:
	.byte	0x4e
	.byte	0x4f
	.byte	0x50
	.byte	0x51
	.byte	0x3c
	.byte	0x3f
	.size	 sTrainerPicFacilityClass,6
	.align	2, 0
	.type	 sTrainerCardFlipTasks,object
sTrainerCardFlipTasks:
	.word	Task_BeginCardFlip
	.word	Task_AnimateCardFlipDown
	.word	Task_DrawFlippedCardSide
	.word	Task_SetCardFlipped
	.word	Task_AnimateCardFlipUp
	.word	Task_EndCardFlip
	.size	 sTrainerCardFlipTasks,24
.text
	.align	2, 0
	.type	 VblankCb_TrainerCard,function
	.thumb_func
VblankCb_TrainerCard:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	BlinkTimeColon
	ldr	r0, .L4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x9]
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r1, .L4+0x4
	ldr	r0, .L4+0x8
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L4+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L3:
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	sData
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
.Lfe1:
	.size	 VblankCb_TrainerCard,.Lfe1-VblankCb_TrainerCard
	.align	2, 0
	.type	 HblankCb_TrainerCard,function
	.thumb_func
HblankCb_TrainerCard:
	push	{r4, lr}
	ldr	r4, .L7
	ldrh	r3, [r4]
	mov	r0, #0x0
	strh	r0, [r4]
	ldr	r1, .L7+0x4
	ldr	r0, .L7+0x8
	ldrh	r2, [r0]
	mov	r0, #0xff
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L7+0xc
	strh	r1, [r0]
	strh	r3, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	0x4000208
	.word	gScanlineEffectRegBuffers
	.word	0x4000006
	.word	0x4000012
.Lfe2:
	.size	 HblankCb_TrainerCard,.Lfe2-HblankCb_TrainerCard
	.align	2, 0
	.type	 CB2_TrainerCard,function
	.thumb_func
CB2_TrainerCard:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 CB2_TrainerCard,.Lfe3-CB2_TrainerCard
	.align	2, 0
	.type	 CloseTrainerCard,function
	.thumb_func
CloseTrainerCard:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L11
	ldr	r0, [r5]
	mov	r1, #0xa6
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	SetMainCallback2
	bl	FreeAllWindowBuffers
	ldr	r0, [r5]
	bl	Free
	mov	r0, #0x0
	str	r0, [r5]
	add	r0, r4, #0
	bl	DestroyTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	sData
.Lfe4:
	.size	 CloseTrainerCard,.Lfe4-CloseTrainerCard
	.align	2, 0
	.type	 Task_TrainerCard,function
	.thumb_func
Task_TrainerCard:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L62
	ldr	r0, [r1]
	ldrb	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0x10
	bls	.LCB149
	b	.L14	@long jump
.LCB149:
	lsl	r0, r0, #0x2
	ldr	r1, .L62+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L63:
	.align	2, 0
.L62:
	.word	sData
	.word	.L56
	.align	2, 0
	.align	2, 0
.L56:
	.word	.L15
	.word	.L17
	.word	.L19
	.word	.L20
	.word	.L21
	.word	.L22
	.word	.L23
	.word	.L24
	.word	.L26
	.word	.L28
	.word	.L30
	.word	.L39
	.word	.L37
	.word	.L54
	.word	.L52
	.word	.L49
	.word	.L50
.L15:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB174
	b	.L14	@long jump
.LCB174:
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	b	.L58
.L17:
	bl	PrintAllOnCardFront
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB187
	b	.L14	@long jump
.LCB187:
	b	.L58
.L19:
	mov	r0, #0x1
	bl	DrawTrainerCardWindow
	b	.L58
.L20:
	mov	r0, #0x2
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	bl	CreateTrainerCardTrainerPic
	mov	r0, #0x2
	bl	DrawTrainerCardWindow
	b	.L58
.L21:
	ldr	r0, [r4]
	ldr	r1, .L64
	add	r0, r0, r1
	bl	DrawCardScreenBackground
	ldr	r1, [r4]
	b	.L59
.L65:
	.align	2, 0
.L64:
	.word	0xef8
.L22:
	ldr	r0, [r4]
	mov	r2, #0xb3
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	bl	DrawCardFrontOrBack
	ldr	r1, [r4]
	b	.L59
.L23:
	bl	DrawStarsAndBadgesOnCard
	b	.L58
.L24:
	ldr	r0, .L66
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L25	@cond_branch
	ldr	r0, .L66+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L25	@cond_branch
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0xe6
	mov	r1, #0x96
	bl	CreateWirelessStatusIndicatorSprite
.L25:
	mov	r6, #0x1
	neg	r6, r6
	ldr	r4, .L66+0x8
	ldr	r0, [r4]
	ldr	r5, .L66+0xc
	add	r0, r0, r5
	ldrh	r2, [r0]
	add	r0, r6, #0
	mov	r1, #0x10
	bl	BlendPalettes
	ldr	r0, [r4]
	add	r0, r0, r5
	ldrh	r0, [r0]
	str	r0, [sp]
	add	r0, r6, #0
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L66+0x10
	bl	SetVBlankCallback
	ldr	r1, [r4]
	b	.L59
.L67:
	.align	2, 0
.L66:
	.word	gWirelessCommType
	.word	gReceivedRemoteLinkPlayers
	.word	sData
	.word	0x52c
	.word	VblankCb_TrainerCard
.L26:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB299
	b	.L14	@long jump
.LCB299:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB305
	b	.L14	@long jump
.LCB305:
	mov	r0, #0xfb
	bl	PlaySE
	ldr	r0, .L68
	ldr	r1, [r0]
	mov	r0, #0xa
	strb	r0, [r1]
	b	.L14
.L69:
	.align	2, 0
.L68:
	.word	sData
.L28:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB327
	b	.L14	@long jump
.LCB327:
.L58:
	ldr	r0, .L70
	ldr	r1, [r0]
.L59:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L14
.L71:
	.align	2, 0
.L70:
	.word	sData
.L30:
	ldr	r0, .L72
	ldrb	r5, [r0]
	cmp	r5, #0
	bne	.L31	@cond_branch
	ldr	r0, [r4]
	ldr	r1, .L72+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L31	@cond_branch
	bl	PrintTimeOnCard
	mov	r0, #0x1
	bl	DrawTrainerCardWindow
	ldr	r0, [r4]
	ldr	r2, .L72+0x4
	add	r0, r0, r2
	strb	r5, [r0]
.L31:
	ldr	r0, .L72+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L32	@cond_branch
	bl	FlipTrainerCard
	mov	r0, #0xf9
	bl	PlaySE
	ldr	r0, .L72+0xc
	ldr	r1, [r0]
	mov	r0, #0xc
	strb	r0, [r1]
	b	.L14
.L73:
	.align	2, 0
.L72:
	.word	gReceivedRemoteLinkPlayers
	.word	0x529
	.word	gMain
	.word	sData
.L32:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB408
	b	.L14	@long jump
.LCB408:
	ldr	r0, .L74
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L35	@cond_branch
	ldr	r4, .L74+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0
	beq	.L35	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	beq	.L60	@cond_branch
.L35:
	mov	r0, #0x1
	neg	r0, r0
	ldr	r4, .L74+0x4
	b	.L61
.L75:
	.align	2, 0
.L74:
	.word	gReceivedRemoteLinkPlayers
	.word	sData
.L37:
	bl	IsCardFlipTaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB450
	b	.L14	@long jump
.LCB450:
	bl	sub_8087598
	cmp	r0, #0x1
	bne	.LCB454
	b	.L14	@long jump
.LCB454:
	mov	r0, #0xfb
	bl	PlaySE
	ldr	r0, .L76
	ldr	r1, [r0]
	mov	r0, #0xb
	strb	r0, [r1]
	b	.L14
.L77:
	.align	2, 0
.L76:
	.word	sData
.L39:
	ldr	r0, .L78
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L40	@cond_branch
	ldr	r0, .L78+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0
	beq	.L41	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	beq	.L60	@cond_branch
.L41:
	ldr	r0, .L78+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L43	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	ldr	r4, .L78+0x8
	b	.L61
.L79:
	.align	2, 0
.L78:
	.word	gMain
	.word	gReceivedRemoteLinkPlayers
	.word	sData
.L43:
	bl	FlipTrainerCard
	ldr	r0, .L80
	ldr	r1, [r0]
	mov	r0, #0xd
	strb	r0, [r1]
	mov	r0, #0xf9
	bl	PlaySE
	b	.L14
.L81:
	.align	2, 0
.L80:
	.word	sData
.L40:
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L14	@cond_branch
	ldr	r0, .L82
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L47	@cond_branch
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0
	beq	.L47	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	bne	.L47	@cond_branch
.L60:
	ldr	r1, [r4]
	mov	r0, #0xf
	strb	r0, [r1]
	b	.L14
.L83:
	.align	2, 0
.L82:
	.word	gReceivedRemoteLinkPlayers
.L47:
	mov	r0, #0x1
	neg	r0, r0
	ldr	r4, .L84
	b	.L61
.L85:
	.align	2, 0
.L84:
	.word	sData
.L49:
	bl	SetCloseLinkCallback
	mov	r0, #0x0
	mov	r1, #0x1
	bl	DrawDialogueFrame
	ldr	r2, .L86
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r0, .L86+0x4
	ldr	r1, [r0]
	mov	r0, #0x10
	strb	r0, [r1]
	b	.L14
.L87:
	.align	2, 0
.L86:
	.word	gText_WaitingTrainerFinishReading
	.word	sData
.L50:
	ldr	r0, .L88
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L14	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
.L61:
	ldr	r1, [r4]
	ldr	r2, .L88+0x4
	add	r1, r1, r2
	ldrh	r1, [r1]
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, [r4]
	mov	r0, #0xe
	strb	r0, [r1]
	b	.L14
.L89:
	.align	2, 0
.L88:
	.word	gReceivedRemoteLinkPlayers
	.word	0x52c
.L52:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L14	@cond_branch
	add	r0, r5, #0
	bl	CloseTrainerCard
	b	.L14
.L54:
	bl	IsCardFlipTaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L14	@cond_branch
	bl	sub_8087598
	cmp	r0, #0x1
	beq	.L14	@cond_branch
	ldr	r0, .L90
	ldr	r1, [r0]
	mov	r0, #0xa
	strb	r0, [r1]
	mov	r0, #0xfb
	bl	PlaySE
.L14:
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	sData
.Lfe5:
	.size	 Task_TrainerCard,.Lfe5-Task_TrainerCard
	.align	2, 0
	.type	 LoadCardGfx,function
	.thumb_func
LoadCardGfx:
	push	{lr}
	ldr	r0, .L119
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0x5
	bls	.LCB718
	b	.L115	@long jump
.LCB718:
	lsl	r0, r0, #0x2
	ldr	r1, .L119+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L120:
	.align	2, 0
.L119:
	.word	sData
	.word	.L116
	.align	2, 0
	.align	2, 0
.L116:
	.word	.L94
	.word	.L97
	.word	.L100
	.word	.L107
	.word	.L110
	.word	.L113
.L94:
	ldr	r0, .L121
	ldr	r1, [r0]
	ldr	r2, .L121+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L95	@cond_branch
	ldr	r0, .L121+0x8
	ldr	r2, .L121+0xc
	b	.L118
.L122:
	.align	2, 0
.L121:
	.word	sData
	.word	0x52a
	.word	gHoennTrainerCardBg_Tilemap
	.word	0xef8
.L95:
	ldr	r0, .L123
	ldr	r2, .L123+0x4
	b	.L118
.L124:
	.align	2, 0
.L123:
	.word	gKantoTrainerCardBg_Tilemap
	.word	0xef8
.L97:
	ldr	r0, .L125
	ldr	r1, [r0]
	ldr	r2, .L125+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L98	@cond_branch
	ldr	r0, .L125+0x8
	ldr	r2, .L125+0xc
	b	.L118
.L126:
	.align	2, 0
.L125:
	.word	sData
	.word	0x52a
	.word	gHoennTrainerCardBack_Tilemap
	.word	0xa48
.L98:
	ldr	r0, .L127
	ldr	r2, .L127+0x4
	b	.L118
.L128:
	.align	2, 0
.L127:
	.word	gKantoTrainerCardBack_Tilemap
	.word	0xa48
.L100:
	ldr	r0, .L129
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x5]
	cmp	r0, #0
	bne	.L101	@cond_branch
	ldr	r2, .L129+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L102	@cond_branch
	ldr	r0, .L129+0x8
	add	r2, r2, #0x6e
	b	.L118
.L130:
	.align	2, 0
.L129:
	.word	sData
	.word	0x52a
	.word	gHoennTrainerCardFront_Tilemap
.L102:
	ldr	r0, .L131
	mov	r2, #0xb3
	lsl	r2, r2, #0x3
	b	.L118
.L132:
	.align	2, 0
.L131:
	.word	gKantoTrainerCardFront_Tilemap
.L101:
	ldr	r2, .L133
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L105	@cond_branch
	ldr	r0, .L133+0x4
	add	r2, r2, #0x6e
	b	.L118
.L134:
	.align	2, 0
.L133:
	.word	0x52a
	.word	gHoennTrainerCardFrontLink_Tilemap
.L105:
	ldr	r0, .L135
	mov	r2, #0xb3
	lsl	r2, r2, #0x3
	b	.L118
.L136:
	.align	2, 0
.L135:
	.word	gKantoTrainerCardFrontLink_Tilemap
.L107:
	ldr	r0, .L137
	ldr	r1, [r0]
	ldr	r2, .L137+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L108	@cond_branch
	ldr	r0, .L137+0x8
	ldr	r2, .L137+0xc
	b	.L118
.L138:
	.align	2, 0
.L137:
	.word	sData
	.word	0x52a
	.word	sHoennTrainerCardBadges_Gfx
	.word	0x13a8
.L108:
	ldr	r0, .L139
	ldr	r2, .L139+0x4
	b	.L118
.L140:
	.align	2, 0
.L139:
	.word	sKantoTrainerCardBadges_Gfx
	.word	0x13a8
.L110:
	ldr	r0, .L141
	ldr	r1, [r0]
	ldr	r2, .L141+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L111	@cond_branch
	ldr	r0, .L141+0x8
	ldr	r2, .L141+0xc
	b	.L118
.L142:
	.align	2, 0
.L141:
	.word	sData
	.word	0x52a
	.word	gHoennTrainerCard_Gfx
	.word	0x19a8
.L111:
	ldr	r0, .L143
	ldr	r2, .L143+0x4
	b	.L118
.L144:
	.align	2, 0
.L143:
	.word	gKantoTrainerCard_Gfx
	.word	0x19a8
.L113:
	ldr	r0, .L145
	ldr	r1, [r0]
	ldr	r2, .L145+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L93	@cond_branch
	ldr	r0, .L145+0x8
	ldr	r2, .L145+0xc
.L118:
	add	r1, r1, r2
	bl	LZ77UnCompWram
	b	.L93
.L146:
	.align	2, 0
.L145:
	.word	sData
	.word	0x52a
	.word	sTrainerCardStickers_Gfx
	.word	0x17a8
.L115:
	mov	r0, #0x0
	strb	r0, [r1, #0x2]
	mov	r0, #0x1
	b	.L117
.L93:
	ldr	r0, .L147
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x2]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
	mov	r0, #0x0
.L117:
	pop	{r1}
	bx	r1
.L148:
	.align	2, 0
.L147:
	.word	sData
.Lfe6:
	.size	 LoadCardGfx,.Lfe6-LoadCardGfx
	.align	2, 0
	.type	 CB2_InitTrainerCard,function
	.thumb_func
CB2_InitTrainerCard:
	push	{lr}
	add	sp, sp, #-0x8
	ldr	r1, .L170
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r3, r1, #0
	cmp	r0, #0xa
	bls	.LCB1061
	b	.L165	@long jump
.LCB1061:
	lsl	r0, r0, #0x2
	ldr	r1, .L170+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L171:
	.align	2, 0
.L170:
	.word	gMain
	.word	.L166
	.align	2, 0
	.align	2, 0
.L166:
	.word	.L151
	.word	.L152
	.word	.L153
	.word	.L155
	.word	.L156
	.word	.L157
	.word	.L158
	.word	.L160
	.word	.L161
	.word	.L162
	.word	.L163
.L151:
	bl	ResetGpuRegs
	bl	SetUpTrainerCardTask
	ldr	r1, .L172
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	b	.L167
.L173:
	.align	2, 0
.L172:
	.word	gMain
.L152:
	mov	r1, #0xe0
	lsl	r1, r1, #0x13
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r0, .L174
	mov	r2, sp
	str	r2, [r0]
	str	r1, [r0, #0x4]
	ldr	r1, .L174+0x4
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r3, r0
	b	.L167
.L175:
	.align	2, 0
.L174:
	.word	0x40000d4
	.word	-0x7affff00
.L153:
	ldr	r0, .L176
	ldr	r0, [r0]
	ldr	r1, .L176+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L154	@cond_branch
	mov	r2, #0xa0
	lsl	r2, r2, #0x13
	add	r1, sp, #0x4
	strh	r0, [r1]
	ldr	r0, .L176+0x8
	str	r1, [r0]
	str	r2, [r0, #0x4]
	ldr	r1, .L176+0xc
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
.L154:
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r3, r2
	b	.L167
.L177:
	.align	2, 0
.L176:
	.word	sData
	.word	0x52c
	.word	0x40000d4
	.word	-0x7efffe00
.L155:
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetPaletteFade
	ldr	r1, .L178
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L156:
	bl	InitBgsAndWindows
	b	.L168
.L179:
	.align	2, 0
.L178:
	.word	gMain
.L157:
	bl	LoadMonIconGfx
	ldr	r1, .L180
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	b	.L167
.L181:
	.align	2, 0
.L180:
	.word	gMain
.L158:
	bl	LoadCardGfx
	b	.L169
.L160:
	bl	LoadStickerGfx
	ldr	r1, .L182
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	b	.L167
.L183:
	.align	2, 0
.L182:
	.word	gMain
.L161:
	bl	HandleGpuRegs
	b	.L168
.L162:
	bl	BufferTextsVarsForCardPage2
	ldr	r1, .L184
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	b	.L167
.L185:
	.align	2, 0
.L184:
	.word	gMain
.L163:
	bl	SetCardBgsAndPals
.L169:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L150	@cond_branch
.L168:
	ldr	r1, .L186
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
.L167:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L150
.L187:
	.align	2, 0
.L186:
	.word	gMain
.L165:
	bl	SetTrainerCardCb2
.L150:
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 CB2_InitTrainerCard,.Lfe7-CB2_InitTrainerCard
	.align	2, 0
	.type	 GetCappedGameStat,function
	.thumb_func
GetCappedGameStat:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetGameStat
	cmp	r0, r4
	bls	.L189	@cond_branch
	add	r0, r4, #0
.L189:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 GetCappedGameStat,.Lfe8-GetCappedGameStat
	.align	2, 0
	.type	 HasAllFrontierSymbols,function
	.thumb_func
HasAllFrontierSymbols:
	push	{r4, r5, lr}
	mov	r5, #0x0
.L194:
	lsl	r4, r5, #0x1
	ldr	r1, .L199
	add	r0, r4, r1
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L196	@cond_branch
	ldr	r1, .L199+0x4
	add	r0, r4, r1
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L193	@cond_branch
.L196:
	mov	r0, #0x0
	b	.L198
.L200:
	.align	2, 0
.L199:
	.word	0x8c4
	.word	0x8c5
.L193:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x6
	bls	.L194	@cond_branch
	mov	r0, #0x1
.L198:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 HasAllFrontierSymbols,.Lfe9-HasAllFrontierSymbols
	.align	2, 0
	.globl	CountPlayerTrainerStars
	.type	 CountPlayerTrainerStars,function
	.thumb_func
CountPlayerTrainerStars:
	push	{r4, lr}
	mov	r0, #0xa
	bl	GetGameStat
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r4, r1, #0x1f
	bl	HasAllHoennMons
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L203	@cond_branch
	add	r4, r4, #0x1
.L203:
	bl	CountPlayerContestPaintings
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L204	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L204:
	bl	HasAllFrontierSymbols
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L205	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L205:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 CountPlayerTrainerStars,.Lfe10-CountPlayerTrainerStars
	.align	2, 0
	.type	 GetRubyTrainerStars,function
	.thumb_func
GetRubyTrainerStars:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x0
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0
	bne	.L208	@cond_branch
	ldr	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L207	@cond_branch
.L208:
	mov	r2, #0x1
.L207:
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0
	beq	.L209	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L209:
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0x31
	bls	.L210	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L210:
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L211	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L211:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 GetRubyTrainerStars,.Lfe11-GetRubyTrainerStars
	.align	2, 0
	.type	 SetPlayerCardData,function
	.thumb_func
SetPlayerCardData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	ldr	r6, .L228
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x8]
	strb	r0, [r5]
	ldrh	r0, [r1, #0xe]
	strh	r0, [r5, #0x10]
	ldrb	r0, [r1, #0x10]
	strh	r0, [r5, #0x12]
	mov	r0, #0x1
	bl	GetGameStat
	add	r4, r0, #0
	mov	r0, #0xa
	bl	GetGameStat
	cmp	r0, #0
	bne	.L213	@cond_branch
	mov	r4, #0x0
.L213:
	lsr	r0, r4, #0x10
	strh	r0, [r5, #0x6]
	lsr	r1, r4, #0x8
	mov	r2, #0xff
	and	r1, r1, r2
	strh	r1, [r5, #0x8]
	and	r4, r4, r2
	strh	r4, [r5, #0xa]
	ldr	r1, .L228+0x4
	cmp	r0, r1
	bls	.L214	@cond_branch
	strh	r1, [r5, #0x6]
	mov	r0, #0x3b
	strh	r0, [r5, #0x8]
	strh	r0, [r5, #0xa]
.L214:
	ldr	r0, .L228+0x8
	bl	FlagGet
	strb	r0, [r5, #0x2]
	bl	HasAllHoennMons
	strb	r0, [r5, #0x3]
	bl	GetCaughtMonsCount
	strh	r0, [r5, #0xc]
	ldr	r0, [r6]
	ldrb	r1, [r0, #0xb]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0, #0xa]
	orr	r0, r0, r1
	strh	r0, [r5, #0xe]
	ldr	r4, .L228+0xc
	mov	r0, #0x17
	add	r1, r4, #0
	bl	GetCappedGameStat
	strh	r0, [r5, #0x14]
	mov	r0, #0x18
	add	r1, r4, #0
	bl	GetCappedGameStat
	strh	r0, [r5, #0x16]
	ldr	r1, .L228+0x10
	mov	r0, #0x15
	bl	GetCappedGameStat
	strh	r0, [r5, #0x20]
	ldr	r4, .L228+0x14
	ldr	r0, [r4]
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	bl	GetMoney
	str	r0, [r5, #0x24]
	mov	r2, #0x0
	add	r7, r5, #0
	add	r7, r7, #0x30
	add	r6, r5, #0
	add	r6, r6, #0x28
	ldr	r0, [r4]
	ldr	r1, .L228+0x18
	add	r3, r0, r1
.L218:
	lsl	r0, r2, #0x1
	add	r1, r6, r0
	add	r0, r3, r0
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L218	@cond_branch
	ldr	r0, .L228
	ldr	r1, [r0]
	add	r0, r7, #0
	bl	StringCopy
	mov	r0, r8
	cmp	r0, #0x1
	beq	.L224	@cond_branch
	cmp	r0, #0x1
	bgt	.L227	@cond_branch
	cmp	r0, #0
	beq	.L222	@cond_branch
	b	.L220
.L229:
	.align	2, 0
.L228:
	.word	gSaveBlock2Ptr
	.word	0x3e7
	.word	0x861
	.word	0x270f
	.word	0xffff
	.word	gSaveBlock1Ptr
	.word	0x2830
.L227:
	mov	r1, r8
	cmp	r1, #0x2
	bne	.L220	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x18]
	strh	r0, [r5, #0x1a]
.L222:
	ldr	r1, .L230
	mov	r0, #0x23
	bl	GetCappedGameStat
	strh	r0, [r5, #0x1c]
	ldr	r1, .L230+0x4
	mov	r0, #0x22
	bl	GetCappedGameStat
	strh	r0, [r5, #0x1e]
	bl	CountPlayerContestPaintings
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L223	@cond_branch
	mov	r0, #0x1
	strb	r0, [r5, #0x4]
.L223:
	add	r0, r5, #0
	bl	GetRubyTrainerStars
	strb	r0, [r5, #0x1]
	b	.L220
.L231:
	.align	2, 0
.L230:
	.word	0x3e7
	.word	0xffff
.L224:
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r5, #0x18]
	strh	r0, [r5, #0x1a]
	strh	r0, [r5, #0x1c]
	strh	r0, [r5, #0x1e]
	strb	r1, [r5, #0x4]
	strb	r1, [r5, #0x1]
.L220:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 SetPlayerCardData,.Lfe12-SetPlayerCardData
	.align	2, 0
	.type	 TrainerCard_GenerateCardForLinkPlayer,function
	.thumb_func
TrainerCard_GenerateCardForLinkPlayer:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	mov	r2, #0x64
	bl	memset
	add	r1, r4, #0
	add	r1, r1, #0x38
	mov	r0, #0x3
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2
	bl	SetPlayerCardData
	bl	HasAllFrontierSymbols
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	add	r1, r1, #0x60
	strh	r0, [r1]
	ldr	r0, .L237
	ldr	r0, [r0]
	ldr	r2, .L237+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	add	r2, r4, #0
	add	r2, r2, #0x62
	strh	r0, [r2]
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L233	@cond_branch
	ldrb	r0, [r4, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x1]
.L233:
	ldrb	r0, [r4]
	cmp	r0, #0x1
	bne	.L234	@cond_branch
	ldr	r2, .L237+0x8
	ldrh	r0, [r4, #0xe]
	mov	r1, #0x7
	and	r0, r0, r1
	add	r0, r0, #0x8
	b	.L236
.L238:
	.align	2, 0
.L237:
	.word	gSaveBlock2Ptr
	.word	0xe42
	.word	gLinkPlayerFacilityClasses
.L234:
	ldr	r2, .L239
	ldrh	r0, [r4, #0xe]
	mov	r1, #0x7
	and	r0, r0, r1
.L236:
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r1, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x4f
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L240:
	.align	2, 0
.L239:
	.word	gLinkPlayerFacilityClasses
.Lfe13:
	.size	 TrainerCard_GenerateCardForLinkPlayer,.Lfe13-TrainerCard_GenerateCardForLinkPlayer
	.align	2, 0
	.globl	TrainerCard_GenerateCardForPlayer
	.type	 TrainerCard_GenerateCardForPlayer,function
	.thumb_func
TrainerCard_GenerateCardForPlayer:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	mov	r2, #0x60
	bl	memset
	add	r1, r4, #0
	add	r1, r1, #0x38
	mov	r0, #0x3
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2
	bl	SetPlayerCardData
	bl	HasAllFrontierSymbols
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x3a]
	ldr	r1, .L246
	ldr	r1, [r1]
	ldr	r2, .L246+0x4
	add	r1, r1, r2
	ldrh	r1, [r1]
	strh	r1, [r4, #0x3c]
	cmp	r0, #0
	beq	.L242	@cond_branch
	ldrb	r0, [r4, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x1]
.L242:
	ldrb	r0, [r4]
	cmp	r0, #0x1
	bne	.L243	@cond_branch
	ldr	r2, .L246+0x8
	ldrh	r0, [r4, #0xe]
	mov	r1, #0x7
	and	r0, r0, r1
	add	r0, r0, #0x8
	b	.L245
.L247:
	.align	2, 0
.L246:
	.word	gSaveBlock2Ptr
	.word	0xe42
	.word	gLinkPlayerFacilityClasses
.L243:
	ldr	r2, .L248
	ldrh	r0, [r4, #0xe]
	mov	r1, #0x7
	and	r0, r0, r1
.L245:
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r1, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x4f
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L249:
	.align	2, 0
.L248:
	.word	gLinkPlayerFacilityClasses
.Lfe14:
	.size	 TrainerCard_GenerateCardForPlayer,.Lfe14-TrainerCard_GenerateCardForPlayer
	.align	2, 0
	.globl	CopyTrainerCardData
	.type	 CopyTrainerCardData,function
	.thumb_func
CopyTrainerCardData:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	lsl	r4, r2, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x0
	mov	r2, #0x64
	bl	memset
	add	r0, r5, #0
	add	r0, r0, #0x38
	strb	r4, [r0]
	add	r0, r4, #0
	bl	VersionToCardType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L253	@cond_branch
	cmp	r0, #0x1
	bgt	.L257	@cond_branch
	cmp	r0, #0
	beq	.L252	@cond_branch
	b	.L251
.L257:
	cmp	r0, #0x2
	beq	.L254	@cond_branch
	b	.L251
.L252:
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0x60
	bl	memcpy
	b	.L251
.L253:
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0x38
	bl	memcpy
	b	.L251
.L254:
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0x60
	bl	memcpy
	mov	r0, #0x0
	str	r0, [r5, #0x3c]
	ldrh	r1, [r6, #0x3a]
	add	r0, r5, #0
	add	r0, r0, #0x60
	strh	r1, [r0]
	ldrh	r1, [r6, #0x3c]
	add	r0, r0, #0x2
	strh	r1, [r0]
.L251:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 CopyTrainerCardData,.Lfe15-CopyTrainerCardData
	.align	2, 0
	.type	 SetDataFromTrainerCard,function
	.thumb_func
SetDataFromTrainerCard:
	push	{r4, r5, lr}
	ldr	r4, .L271
	ldr	r0, [r4]
	mov	r1, #0x0
	strb	r1, [r0, #0xa]
	ldr	r0, [r4]
	strb	r1, [r0, #0xb]
	ldr	r0, [r4]
	strb	r1, [r0, #0xc]
	ldr	r0, [r4]
	strb	r1, [r0, #0xd]
	ldr	r0, [r4]
	strb	r1, [r0, #0xe]
	ldr	r0, [r4]
	strb	r1, [r0, #0xf]
	ldr	r0, [r4]
	strb	r1, [r0, #0x10]
	ldr	r0, [r4]
	add	r0, r0, #0x11
	mov	r2, #0x8
	bl	memset
	ldr	r1, [r4]
	ldr	r2, .L271+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L259	@cond_branch
	ldrb	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strb	r0, [r1, #0xa]
.L259:
	ldr	r1, [r4]
	ldr	r3, .L271+0x8
	add	r0, r1, r3
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L261	@cond_branch
	ldr	r2, .L271+0xc
	add	r0, r1, r2
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L260	@cond_branch
.L261:
	ldrb	r0, [r1, #0xb]
	add	r0, r0, #0x1
	strb	r0, [r1, #0xb]
.L260:
	ldr	r2, .L271
	ldr	r1, [r2]
	mov	r3, #0xa9
	lsl	r3, r3, #0x3
	add	r0, r1, r3
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L262	@cond_branch
	ldrb	r0, [r1, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r1, #0xc]
.L262:
	ldr	r1, [r2]
	ldr	r3, .L271+0x10
	add	r0, r1, r3
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L263	@cond_branch
	ldrb	r0, [r1, #0x10]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x10]
.L263:
	ldr	r1, [r2]
	ldr	r2, .L271+0x14
	add	r0, r1, r2
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L264	@cond_branch
	ldrb	r0, [r1, #0xd]
	add	r0, r0, #0x1
	strb	r0, [r1, #0xd]
.L264:
	mov	r5, #0x0
	ldr	r4, .L271+0x18
.L268:
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L267	@cond_branch
	ldr	r0, .L271
	ldr	r1, [r0]
	add	r1, r1, #0x11
	add	r1, r1, r5
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L267:
	add	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L271+0x1c
	cmp	r4, r0
	bls	.L268	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L272:
	.align	2, 0
.L271:
	.word	sData
	.word	0x536
	.word	0x53a
	.word	0x53c
	.word	0x554
	.word	0x54c
	.word	0x867
	.word	0x86e
.Lfe16:
	.size	 SetDataFromTrainerCard,.Lfe16-SetDataFromTrainerCard
	.align	2, 0
	.type	 HandleGpuRegs,function
	.thumb_func
HandleGpuRegs:
	push	{lr}
	mov	r1, #0xc1
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	mov	r0, #0x50
	mov	r1, #0xc1
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x1e
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0xa0
	bl	SetGpuReg
	mov	r0, #0x40
	mov	r1, #0xf0
	bl	SetGpuReg
	ldr	r0, .L276
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L274	@cond_branch
	mov	r0, #0xc7
	bl	EnableInterrupts
	b	.L275
.L277:
	.align	2, 0
.L276:
	.word	gReceivedRemoteLinkPlayers
.L274:
	mov	r0, #0x3
	bl	EnableInterrupts
.L275:
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 HandleGpuRegs,.Lfe17-HandleGpuRegs
	.align	2, 0
	.type	 sub_80C32EC,function
	.thumb_func
sub_80C32EC:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, #0x28
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x4
	bgt	.L279	@cond_branch
	mov	r2, #0x0
.L279:
	ldr	r4, .L280
	ldr	r0, [r4]
	mov	r1, #0xa5
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	strb	r2, [r0]
	ldr	r0, [r4]
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x54
	bl	SetGpuReg
	ldr	r0, [r4]
	ldr	r1, .L280+0x4
	add	r0, r0, r1
	ldrh	r2, [r0]
	lsl	r1, r2, #0x8
	mov	r0, #0xa0
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x44
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L281:
	.align	2, 0
.L280:
	.word	sData
	.word	0x7ca8
.Lfe18:
	.size	 sub_80C32EC,.Lfe18-sub_80C32EC
	.align	2, 0
	.type	 ResetGpuRegs,function
	.thumb_func
ResetGpuRegs:
	push	{lr}
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x8
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xa
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xc
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xe
	mov	r1, #0x0
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 ResetGpuRegs,.Lfe19-ResetGpuRegs
	.align	2, 0
	.type	 InitBgsAndWindows,function
	.thumb_func
InitBgsAndWindows:
	push	{lr}
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L284
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	ldr	r0, .L284+0x4
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	bl	LoadMessageBoxAndBorderGfx
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	sTrainerCardBgTemplates
	.word	sTrainerCardWindowTemplates
.Lfe20:
	.size	 InitBgsAndWindows,.Lfe20-InitBgsAndWindows
	.align	2, 0
	.type	 SetTrainerCardCb2,function
	.thumb_func
SetTrainerCardCb2:
	push	{lr}
	ldr	r0, .L287
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L288:
	.align	2, 0
.L287:
	.word	CB2_TrainerCard
.Lfe21:
	.size	 SetTrainerCardCb2,.Lfe21-SetTrainerCardCb2
	.align	2, 0
	.type	 SetUpTrainerCardTask,function
	.thumb_func
SetUpTrainerCardTask:
	push	{lr}
	bl	ResetTasks
	bl	ScanlineEffect_Stop
	ldr	r0, .L290
	mov	r1, #0x0
	bl	CreateTask
	bl	InitTrainerCardData
	bl	SetDataFromTrainerCard
	pop	{r0}
	bx	r0
.L291:
	.align	2, 0
.L290:
	.word	Task_TrainerCard
.Lfe22:
	.size	 SetUpTrainerCardTask,.Lfe22-SetUpTrainerCardTask
	.align	2, 0
	.type	 PrintAllOnCardFront,function
	.thumb_func
PrintAllOnCardFront:
	push	{lr}
	ldr	r0, .L303
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x5
	bhi	.L300	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L303+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L304:
	.align	2, 0
.L303:
	.word	sData
	.word	.L301
	.align	2, 0
	.align	2, 0
.L301:
	.word	.L294
	.word	.L295
	.word	.L296
	.word	.L297
	.word	.L298
	.word	.L299
.L294:
	bl	PrintNameOnCardFront
	b	.L293
.L295:
	bl	PrintIdOnCard
	b	.L293
.L296:
	bl	PrintMoneyOnCard
	b	.L293
.L297:
	bl	PrintPokedexOnCard
	b	.L293
.L298:
	bl	PrintTimeOnCard
	b	.L293
.L299:
	bl	PrintProfilePhraseOnCard
	b	.L293
.L300:
	mov	r0, #0x0
	strb	r0, [r1, #0x1]
	mov	r0, #0x1
	b	.L302
.L293:
	ldr	r0, .L305
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r0, #0x0
.L302:
	pop	{r1}
	bx	r1
.L306:
	.align	2, 0
.L305:
	.word	sData
.Lfe23:
	.size	 PrintAllOnCardFront,.Lfe23-PrintAllOnCardFront
	.align	2, 0
	.type	 PrintAllOnCardBack,function
	.thumb_func
PrintAllOnCardBack:
	push	{lr}
	ldr	r0, .L320
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x7
	bhi	.L317	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L320+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L321:
	.align	2, 0
.L320:
	.word	sData
	.word	.L318
	.align	2, 0
	.align	2, 0
.L318:
	.word	.L309
	.word	.L310
	.word	.L311
	.word	.L312
	.word	.L313
	.word	.L314
	.word	.L315
	.word	.L316
.L309:
	bl	PrintNameOnCardBack
	b	.L308
.L310:
	bl	PrintHofDebutTimeOnCard
	b	.L308
.L311:
	bl	PrintLinkBattleResultsOnCard
	b	.L308
.L312:
	bl	PrintTradesStringOnCard
	b	.L308
.L313:
	bl	PrintBerryCrushStringOnCard
	bl	PrintPokeblockStringOnCard
	b	.L308
.L314:
	bl	PrintUnionStringOnCard
	bl	PrintContestStringOnCard
	b	.L308
.L315:
	bl	PrintPokemonIconsOnCard
	bl	PrintBattleFacilityStringOnCard
	b	.L308
.L316:
	bl	PrintStickersOnCard
	b	.L308
.L317:
	mov	r0, #0x0
	strb	r0, [r1, #0x1]
	mov	r0, #0x1
	b	.L319
.L308:
	ldr	r0, .L322
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r0, #0x0
.L319:
	pop	{r1}
	bx	r1
.L323:
	.align	2, 0
.L322:
	.word	sData
.Lfe24:
	.size	 PrintAllOnCardBack,.Lfe24-PrintAllOnCardBack
	.align	2, 0
	.type	 BufferTextsVarsForCardPage2,function
	.thumb_func
BufferTextsVarsForCardPage2:
	push	{lr}
	bl	BufferNameForCardBack
	bl	BufferHofDebutTime
	bl	BufferLinkBattleResults
	bl	BufferNumTrades
	bl	BufferBerryCrushPoints
	bl	BufferUnionRoomStats
	bl	BufferLinkPokeblocksNum
	bl	BufferLinkContestNum
	bl	BufferBattleFacilityStats
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 BufferTextsVarsForCardPage2,.Lfe25-BufferTextsVarsForCardPage2
	.align	2, 0
	.type	 PrintNameOnCardFront,function
	.thumb_func
PrintNameOnCardFront:
	push	{r4, r5, lr}
	add	sp, sp, #-0x2c
	ldr	r1, .L328
	add	r0, sp, #0xc
	bl	StringCopy
	add	r5, r0, #0
	ldr	r4, .L328+0x4
	ldr	r1, [r4]
	ldr	r0, .L328+0x8
	add	r1, r1, r0
	add	r0, r5, #0
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L328+0xc
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	ConvertInternationalString
	ldr	r0, [r4]
	ldr	r1, .L328+0x10
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L326	@cond_branch
	ldr	r0, .L328+0x14
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x14
	mov	r3, #0x1c
	bl	AddTextPrinterParameterized3
	b	.L327
.L329:
	.align	2, 0
.L328:
	.word	gText_TrainerCardName
	.word	sData
	.word	0x564
	.word	0x7caa
	.word	0x52a
	.word	sTrainerCardTextColors
.L326:
	ldr	r0, .L330
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	add	r1, sp, #0xc
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x10
	mov	r3, #0x21
	bl	AddTextPrinterParameterized3
.L327:
	add	sp, sp, #0x2c
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L331:
	.align	2, 0
.L330:
	.word	sTrainerCardTextColors
.Lfe26:
	.size	 PrintNameOnCardFront,.Lfe26-PrintNameOnCardFront
	.align	2, 0
	.type	 PrintIdOnCard,function
	.thumb_func
PrintIdOnCard:
	push	{r4, lr}
	add	sp, sp, #-0x2c
	ldr	r1, .L336
	add	r0, sp, #0xc
	bl	StringCopy
	ldr	r4, .L336+0x4
	ldr	r1, [r4]
	ldr	r2, .L336+0x8
	add	r1, r1, r2
	ldrh	r1, [r1]
	mov	r2, #0x2
	mov	r3, #0x5
	bl	ConvertIntToDecimalStringN
	ldr	r0, [r4]
	ldr	r1, .L336+0xc
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L333	@cond_branch
	mov	r0, #0x1
	add	r1, sp, #0xc
	mov	r2, #0x50
	bl	GetStringCenterAlignXOffset
	add	r0, r0, #0x84
	b	.L335
.L337:
	.align	2, 0
.L336:
	.word	gText_TrainerCardIDNo
	.word	sData
	.word	0x542
	.word	0x52a
.L333:
	mov	r0, #0x1
	add	r1, sp, #0xc
	mov	r2, #0x60
	bl	GetStringCenterAlignXOffset
	add	r0, r0, #0x78
.L335:
	mov	r3, #0x9
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L338
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0x2c
	pop	{r4}
	pop	{r0}
	bx	r0
.L339:
	.align	2, 0
.L338:
	.word	sTrainerCardTextColors
.Lfe27:
	.size	 PrintIdOnCard,.Lfe27-PrintIdOnCard
	.align	2, 0
	.type	 PrintMoneyOnCard,function
	.thumb_func
PrintMoneyOnCard:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	ldr	r0, .L345
	ldr	r0, [r0]
	ldr	r1, .L345+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L341	@cond_branch
	ldr	r0, .L345+0x8
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, .L345+0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x14
	mov	r3, #0x38
	bl	AddTextPrinterParameterized3
	b	.L342
.L346:
	.align	2, 0
.L345:
	.word	sData
	.word	0x52b
	.word	sTrainerCardTextColors
	.word	gText_TrainerCardMoney
.L341:
	ldr	r0, .L347
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, .L347+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x10
	mov	r3, #0x39
	bl	AddTextPrinterParameterized3
.L342:
	ldr	r0, .L347+0x8
	ldr	r4, .L347+0xc
	ldr	r1, [r4]
	mov	r2, #0xab
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	ldr	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x7
	bl	ConvertIntToDecimalStringN
	ldr	r5, .L347+0x10
	ldr	r1, .L347+0x14
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	ldr	r0, [r4]
	ldr	r1, .L347+0x18
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L343	@cond_branch
	mov	r0, #0x1
	add	r1, r5, #0
	mov	r2, #0x90
	bl	GetStringRightAlignXOffset
	mov	r3, #0x38
	b	.L344
.L348:
	.align	2, 0
.L347:
	.word	sTrainerCardTextColors
	.word	gText_TrainerCardMoney
	.word	gStringVar1
	.word	sData
	.word	gStringVar4
	.word	gText_PokedollarVar1
	.word	0x52b
.L343:
	mov	r0, #0x1
	add	r1, r5, #0
	mov	r2, #0x80
	bl	GetStringRightAlignXOffset
	mov	r3, #0x39
.L344:
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L349
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, .L349+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L350:
	.align	2, 0
.L349:
	.word	sTrainerCardTextColors
	.word	gStringVar4
.Lfe28:
	.size	 PrintMoneyOnCard,.Lfe28-PrintMoneyOnCard
	.align	2, 0
	.type	 GetCaughtMonsCount,function
	.thumb_func
GetCaughtMonsCount:
	push	{lr}
	bl	IsNationalPokedexEnabled
	cmp	r0, #0
	bne	.L352	@cond_branch
	mov	r0, #0x1
	bl	GetHoennPokedexCount
	b	.L356
.L352:
	mov	r0, #0x1
	bl	GetNationalPokedexCount
.L356:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 GetCaughtMonsCount,.Lfe29-GetCaughtMonsCount
	.align	2, 0
	.type	 PrintPokedexOnCard,function
	.thumb_func
PrintPokedexOnCard:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	ldr	r0, .L363
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L358	@cond_branch
	ldr	r0, .L363+0x4
	ldr	r0, [r0]
	ldr	r1, .L363+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L359	@cond_branch
	ldr	r0, .L363+0xc
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, .L363+0x10
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x14
	mov	r3, #0x48
	bl	AddTextPrinterParameterized3
	b	.L360
.L364:
	.align	2, 0
.L363:
	.word	0x861
	.word	sData
	.word	0x52b
	.word	sTrainerCardTextColors
	.word	gText_TrainerCardPokedex
.L359:
	ldr	r0, .L365
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, .L365+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x10
	mov	r3, #0x49
	bl	AddTextPrinterParameterized3
.L360:
	ldr	r5, .L365+0x8
	ldr	r4, .L365+0xc
	ldr	r0, [r4]
	mov	r1, #0xa8
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0]
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L365+0x10
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L365+0x14
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L361	@cond_branch
	mov	r0, #0x1
	add	r1, r5, #0
	mov	r2, #0x90
	bl	GetStringRightAlignXOffset
	mov	r3, #0x48
	b	.L362
.L366:
	.align	2, 0
.L365:
	.word	sTrainerCardTextColors
	.word	gText_TrainerCardPokedex
	.word	gStringVar4
	.word	sData
	.word	gText_EmptyString6
	.word	0x52b
.L361:
	mov	r0, #0x1
	add	r1, r5, #0
	mov	r2, #0x80
	bl	GetStringRightAlignXOffset
	mov	r3, #0x49
.L362:
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L367
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, .L367+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	bl	AddTextPrinterParameterized3
.L358:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L368:
	.align	2, 0
.L367:
	.word	sTrainerCardTextColors
	.word	gStringVar4
.Lfe30:
	.size	 PrintPokedexOnCard,.Lfe30-PrintPokedexOnCard
	.section .rodata
	.align	2, 0
	.type	 sTimeColonTextColors,object
sTimeColonTextColors:
	.word	sTrainerCardTextColors
	.word	sTimeColonInvisibleTextColors
	.size	 sTimeColonTextColors,8
.text
	.align	2, 0
	.type	 PrintTimeOnCard,function
	.thumb_func
PrintTimeOnCard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	ldr	r0, .L378
	ldr	r0, [r0]
	ldr	r1, .L378+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L370	@cond_branch
	ldr	r0, .L378+0x8
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, .L378+0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x14
	mov	r3, #0x58
	bl	AddTextPrinterParameterized3
	b	.L371
.L379:
	.align	2, 0
.L378:
	.word	sData
	.word	0x52b
	.word	sTrainerCardTextColors
	.word	gText_TrainerCardTime
.L370:
	ldr	r0, .L380
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, .L380+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x10
	mov	r3, #0x59
	bl	AddTextPrinterParameterized3
.L371:
	ldr	r0, .L380+0x8
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x5]
	cmp	r0, #0
	beq	.L372	@cond_branch
	ldr	r2, .L380+0xc
	add	r0, r1, r2
	ldrh	r5, [r0]
	add	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r6, [r0]
	b	.L373
.L381:
	.align	2, 0
.L380:
	.word	sTrainerCardTextColors
	.word	gText_TrainerCardTime
	.word	sData
	.word	0x544
.L372:
	ldr	r0, .L382
	ldr	r0, [r0]
	ldrh	r5, [r0, #0xe]
	ldrb	r6, [r0, #0x10]
.L373:
	ldr	r0, .L382+0x4
	cmp	r5, r0
	bls	.L374	@cond_branch
	add	r5, r0, #0
.L374:
	cmp	r6, #0x3b
	bls	.L375	@cond_branch
	mov	r6, #0x3b
.L375:
	ldr	r1, .L382+0x8
	mov	r0, #0x1
	mov	r2, #0x0
	bl	GetStringWidth
	mov	sl, r0
	ldr	r0, .L382+0xc
	ldr	r0, [r0]
	ldr	r1, .L382+0x10
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L376	@cond_branch
	mov	r7, #0x90
	mov	r4, #0x58
	b	.L377
.L383:
	.align	2, 0
.L382:
	.word	gSaveBlock2Ptr
	.word	0x3e7
	.word	gText_Colon2
	.word	sData
	.word	0x52b
.L376:
	mov	r7, #0x80
	mov	r4, #0x59
.L377:
	mov	r0, sl
	add	r0, r0, #0x1e
	sub	r7, r7, r0
	lsl	r2, r7, #0x10
	lsr	r2, r2, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp]
	mov	r0, #0xf
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x0
	add	r3, r4, #0
	bl	FillWindowPixelRect
	ldr	r2, .L384
	mov	r9, r2
	mov	r0, r9
	add	r1, r5, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	lsl	r2, r7, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L384+0x4
	mov	r8, r0
	str	r0, [sp]
	mov	r5, #0x1
	neg	r5, r5
	str	r5, [sp, #0x4]
	mov	r1, r9
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
	add	r7, r7, #0x12
	lsl	r2, r7, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, .L384+0x8
	ldr	r0, .L384+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [sp]
	str	r5, [sp, #0x4]
	ldr	r0, .L384+0x10
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
	add	r7, r7, sl
	mov	r0, r9
	add	r1, r6, #0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	lsl	r2, r7, #0x18
	lsr	r2, r2, #0x18
	mov	r0, r8
	str	r0, [sp]
	str	r5, [sp, #0x4]
	mov	r1, r9
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L385:
	.align	2, 0
.L384:
	.word	gStringVar4
	.word	sTrainerCardTextColors
	.word	sTimeColonTextColors
	.word	sData
	.word	gText_Colon2
.Lfe31:
	.size	 PrintTimeOnCard,.Lfe31-PrintTimeOnCard
	.section .rodata
	.type	 yOffsetsLine1.96,object
yOffsetsLine1.96:
	.byte	0x71
	.byte	0x68
	.type	 yOffsetsLine2.97,object
yOffsetsLine2.97:
	.byte	0x81
	.byte	0x78
.text
	.align	2, 0
	.type	 PrintProfilePhraseOnCard,function
	.thumb_func
PrintProfilePhraseOnCard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	ldr	r7, .L388
	ldr	r1, [r7]
	ldrb	r0, [r1, #0x5]
	cmp	r0, #0
	beq	.L387	@cond_branch
	ldr	r0, .L388+0x4
	mov	r8, r0
	ldr	r4, .L388+0x8
	add	r0, r1, r4
	ldrb	r0, [r0]
	add	r0, r0, r8
	ldrb	r3, [r0]
	ldr	r6, .L388+0xc
	str	r6, [sp]
	mov	r5, #0x1
	neg	r5, r5
	str	r5, [sp, #0x4]
	add	r0, r1, #0
	add	r0, r0, #0x19
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x8
	bl	AddTextPrinterParameterized3
	ldr	r1, [r7]
	add	r1, r1, #0x19
	mov	r0, #0x1
	mov	r2, #0x0
	bl	GetStringWidth
	add	r2, r0, #0
	add	r2, r2, #0xe
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, [r7]
	add	r0, r1, r4
	ldrb	r0, [r0]
	add	r0, r0, r8
	ldrb	r3, [r0]
	str	r6, [sp]
	str	r5, [sp, #0x4]
	add	r1, r1, #0x26
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	bl	AddTextPrinterParameterized3
	ldr	r0, .L388+0x10
	mov	r8, r0
	ldr	r1, [r7]
	add	r0, r1, r4
	ldrb	r0, [r0]
	add	r0, r0, r8
	ldrb	r3, [r0]
	str	r6, [sp]
	str	r5, [sp, #0x4]
	add	r1, r1, #0x33
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x8
	bl	AddTextPrinterParameterized3
	ldr	r1, [r7]
	add	r1, r1, #0x33
	mov	r0, #0x1
	mov	r2, #0x0
	bl	GetStringWidth
	add	r2, r0, #0
	add	r2, r2, #0xe
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, [r7]
	add	r4, r1, r4
	ldrb	r0, [r4]
	add	r0, r0, r8
	ldrb	r3, [r0]
	str	r6, [sp]
	str	r5, [sp, #0x4]
	add	r1, r1, #0x40
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	bl	AddTextPrinterParameterized3
.L387:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L389:
	.align	2, 0
.L388:
	.word	sData
	.word	yOffsetsLine1.96
	.word	0x52b
	.word	sTrainerCardTextColors
	.word	yOffsetsLine2.97
.Lfe32:
	.size	 PrintProfilePhraseOnCard,.Lfe32-PrintProfilePhraseOnCard
	.align	2, 0
	.type	 BufferNameForCardBack,function
	.thumb_func
BufferNameForCardBack:
	push	{r4, lr}
	ldr	r4, .L392
	ldr	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x4d
	ldr	r2, .L392+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x4d
	ldr	r2, .L392+0x8
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	ConvertInternationalString
	ldr	r1, [r4]
	ldr	r2, .L392+0xc
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L391	@cond_branch
	ldr	r0, .L392+0x10
	add	r1, r1, #0x4d
	bl	StringCopy
	ldr	r0, [r4]
	add	r0, r0, #0x4d
	ldr	r1, .L392+0x14
	bl	StringExpandPlaceholders
.L391:
	pop	{r4}
	pop	{r0}
	bx	r0
.L393:
	.align	2, 0
.L392:
	.word	sData
	.word	0x564
	.word	0x7caa
	.word	0x52a
	.word	gStringVar1
	.word	gText_Var1sTrainerCard
.Lfe33:
	.size	 BufferNameForCardBack,.Lfe33-BufferNameForCardBack
	.align	2, 0
	.type	 PrintNameOnCardBack,function
	.thumb_func
PrintNameOnCardBack:
	push	{r4, lr}
	add	sp, sp, #-0xc
	ldr	r4, .L397
	ldr	r1, [r4]
	ldr	r2, .L397+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L395	@cond_branch
	ldr	r0, .L397+0x8
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	add	r0, r1, #0
	add	r0, r0, #0x4d
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x88
	mov	r3, #0x9
	bl	AddTextPrinterParameterized3
	b	.L396
.L398:
	.align	2, 0
.L397:
	.word	sData
	.word	0x52b
	.word	sTrainerCardTextColors
.L395:
	add	r1, r1, #0x4d
	mov	r0, #0x1
	mov	r2, #0xd8
	bl	GetStringRightAlignXOffset
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L399
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, [r4]
	add	r0, r0, #0x4d
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r3, #0x9
	bl	AddTextPrinterParameterized3
.L396:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L400:
	.align	2, 0
.L399:
	.word	sTrainerCardTextColors
.Lfe34:
	.size	 PrintNameOnCardBack,.Lfe34-PrintNameOnCardBack
	.section .rodata
	.type	 sText_HofTime,object
sText_HofTime:
	.byte	0xfd
	.byte	0x2
	.byte	0xf0
	.byte	0xfd
	.byte	0x3
	.byte	0xf0
	.byte	0xfd
	.byte	0x4
	.byte	0xff
	.size	 sText_HofTime,9
.text
	.align	2, 0
	.type	 BufferHofDebutTime,function
	.thumb_func
BufferHofDebutTime:
	push	{r4, lr}
	ldr	r4, .L403
	ldr	r1, [r4]
	ldrb	r0, [r1, #0xb]
	cmp	r0, #0
	beq	.L402	@cond_branch
	ldr	r0, .L403+0x4
	ldr	r2, .L403+0x8
	add	r1, r1, r2
	ldrh	r1, [r1]
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L403+0xc
	ldr	r1, [r4]
	ldr	r2, .L403+0x10
	add	r1, r1, r2
	ldrh	r1, [r1]
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L403+0x14
	ldr	r1, [r4]
	ldr	r2, .L403+0x18
	add	r1, r1, r2
	ldrh	r1, [r1]
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r0, [r4]
	add	r0, r0, #0x93
	ldr	r1, .L403+0x1c
	bl	StringExpandPlaceholders
.L402:
	pop	{r4}
	pop	{r0}
	bx	r0
.L404:
	.align	2, 0
.L403:
	.word	sData
	.word	gStringVar1
	.word	0x53a
	.word	gStringVar2
	.word	0x53c
	.word	gStringVar3
	.word	0x53e
	.word	sText_HofTime
.Lfe35:
	.size	 BufferHofDebutTime,.Lfe35-BufferHofDebutTime
	.section .rodata
	.type	 xOffsets.110,object
xOffsets.110:
	.byte	0x8
	.byte	0x10
	.type	 widths.111,object
widths.111:
	.byte	0xd8
	.byte	0xd8
.text
	.align	2, 0
	.type	 PrintStatOnBackOfCard,function
	.thumb_func
PrintStatOnBackOfCard:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	mov	r9, r2
	mov	sl, r3
	ldr	r2, .L406
	ldr	r6, .L406+0x4
	ldr	r0, [r6]
	ldr	r5, .L406+0x8
	add	r0, r0, r5
	ldrb	r0, [r0]
	add	r0, r0, r2
	ldrb	r2, [r0]
	lsl	r4, r4, #0x1c
	mov	r0, #0x84
	lsl	r0, r0, #0x16
	add	r4, r4, r0
	lsr	r4, r4, #0x18
	ldr	r0, .L406+0xc
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	mov	r8, r0
	str	r0, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
	ldr	r1, .L406+0x10
	ldr	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	mov	r0, #0x1
	mov	r1, r9
	bl	GetStringRightAlignXOffset
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, sl
	str	r0, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	mov	r0, r9
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L407:
	.align	2, 0
.L406:
	.word	xOffsets.110
	.word	sData
	.word	0x52b
	.word	sTrainerCardTextColors
	.word	widths.111
.Lfe36:
	.size	 PrintStatOnBackOfCard,.Lfe36-PrintStatOnBackOfCard
	.align	2, 0
	.type	 PrintHofDebutTimeOnCard,function
	.thumb_func
PrintHofDebutTimeOnCard:
	push	{lr}
	ldr	r0, .L410
	ldr	r2, [r0]
	ldrb	r0, [r2, #0xb]
	cmp	r0, #0
	beq	.L409	@cond_branch
	ldr	r1, .L410+0x4
	add	r2, r2, #0x93
	ldr	r3, .L410+0x8
	mov	r0, #0x0
	bl	PrintStatOnBackOfCard
.L409:
	pop	{r0}
	bx	r0
.L411:
	.align	2, 0
.L410:
	.word	sData
	.word	gText_HallOfFameDebut
	.word	sTrainerCardStatColors
.Lfe37:
	.size	 PrintHofDebutTimeOnCard,.Lfe37-PrintHofDebutTimeOnCard
	.section .rodata
	.align	2, 0
	.type	 sLinkBattleTexts,object
sLinkBattleTexts:
	.word	gText_LinkBattles
	.word	gText_LinkCableBattles
	.word	gText_LinkBattles
	.size	 sLinkBattleTexts,12
.text
	.align	2, 0
	.type	 BufferLinkBattleResults,function
	.thumb_func
BufferLinkBattleResults:
	push	{r4, lr}
	ldr	r4, .L414
	ldr	r1, [r4]
	ldrb	r0, [r1, #0xc]
	cmp	r0, #0
	beq	.L413	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0xd9
	ldr	r2, .L414+0x4
	ldr	r3, .L414+0x8
	add	r1, r1, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r1, [r4]
	ldr	r2, .L414+0xc
	add	r0, r1, r2
	mov	r3, #0xa9
	lsl	r3, r3, #0x3
	add	r1, r1, r3
	ldrh	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r1, [r4]
	ldr	r2, .L414+0x10
	add	r0, r1, r2
	ldr	r3, .L414+0x14
	add	r1, r1, r3
	ldrh	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
.L413:
	pop	{r4}
	pop	{r0}
	bx	r0
.L415:
	.align	2, 0
.L414:
	.word	sData
	.word	sLinkBattleTexts
	.word	0x52a
	.word	0x165
	.word	0x1ab
	.word	0x54a
.Lfe38:
	.size	 BufferLinkBattleResults,.Lfe38-BufferLinkBattleResults
	.align	2, 0
	.type	 PrintLinkBattleResultsOnCard,function
	.thumb_func
PrintLinkBattleResultsOnCard:
	push	{r4, r5, lr}
	ldr	r5, .L418
	ldr	r1, [r5]
	ldrb	r0, [r1, #0xc]
	cmp	r0, #0
	beq	.L417	@cond_branch
	ldr	r0, .L418+0x4
	ldr	r2, .L418+0x8
	add	r1, r1, r2
	bl	StringCopy
	ldr	r0, .L418+0xc
	ldr	r1, [r5]
	ldr	r2, .L418+0x10
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L418+0x14
	ldr	r1, .L418+0x18
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r1, [r5]
	add	r1, r1, #0xd9
	ldr	r3, .L418+0x1c
	mov	r0, #0x1
	add	r2, r4, #0
	bl	PrintStatOnBackOfCard
.L417:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L419:
	.align	2, 0
.L418:
	.word	sData
	.word	gStringVar1
	.word	0x165
	.word	gStringVar2
	.word	0x1ab
	.word	gStringVar4
	.word	gText_WinsLosses
	.word	sTrainerCardTextColors
.Lfe39:
	.size	 PrintLinkBattleResultsOnCard,.Lfe39-PrintLinkBattleResultsOnCard
	.align	2, 0
	.type	 BufferNumTrades,function
	.thumb_func
BufferNumTrades:
	push	{lr}
	ldr	r0, .L422
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0
	beq	.L421	@cond_branch
	ldr	r2, .L422+0x4
	add	r0, r1, r2
	ldr	r2, .L422+0x8
	add	r1, r1, r2
	ldrh	r1, [r1]
	mov	r2, #0x1
	mov	r3, #0x5
	bl	ConvertIntToDecimalStringN
.L421:
	pop	{r0}
	bx	r0
.L423:
	.align	2, 0
.L422:
	.word	sData
	.word	0x237
	.word	0x554
.Lfe40:
	.size	 BufferNumTrades,.Lfe40-BufferNumTrades
	.align	2, 0
	.type	 PrintTradesStringOnCard,function
	.thumb_func
PrintTradesStringOnCard:
	push	{lr}
	ldr	r0, .L426
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x10]
	cmp	r0, #0
	beq	.L425	@cond_branch
	ldr	r1, .L426+0x4
	ldr	r0, .L426+0x8
	add	r2, r2, r0
	ldr	r3, .L426+0xc
	mov	r0, #0x2
	bl	PrintStatOnBackOfCard
.L425:
	pop	{r0}
	bx	r0
.L427:
	.align	2, 0
.L426:
	.word	sData
	.word	gText_PokemonTrades
	.word	0x237
	.word	sTrainerCardStatColors
.Lfe41:
	.size	 PrintTradesStringOnCard,.Lfe41-PrintTradesStringOnCard
	.align	2, 0
	.type	 BufferBerryCrushPoints,function
	.thumb_func
BufferBerryCrushPoints:
	push	{lr}
	ldr	r0, .L430
	ldr	r2, [r0]
	ldr	r1, .L430+0x4
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L429	@cond_branch
	mov	r3, #0xae
	lsl	r3, r3, #0x3
	add	r0, r2, r3
	ldr	r1, [r0]
	cmp	r1, #0
	beq	.L429	@cond_branch
	ldr	r3, .L430+0x8
	add	r0, r2, r3
	mov	r2, #0x1
	mov	r3, #0x5
	bl	ConvertIntToDecimalStringN
.L429:
	pop	{r0}
	bx	r0
.L431:
	.align	2, 0
.L430:
	.word	sData
	.word	0x52a
	.word	0x2c3
.Lfe42:
	.size	 BufferBerryCrushPoints,.Lfe42-BufferBerryCrushPoints
	.align	2, 0
	.type	 PrintBerryCrushStringOnCard,function
	.thumb_func
PrintBerryCrushStringOnCard:
	push	{lr}
	ldr	r0, .L434
	ldr	r2, [r0]
	ldr	r1, .L434+0x4
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L433	@cond_branch
	add	r1, r1, #0x46
	add	r0, r2, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L433	@cond_branch
	ldr	r1, .L434+0x8
	ldr	r0, .L434+0xc
	add	r2, r2, r0
	ldr	r3, .L434+0x10
	mov	r0, #0x4
	bl	PrintStatOnBackOfCard
.L433:
	pop	{r0}
	bx	r0
.L435:
	.align	2, 0
.L434:
	.word	sData
	.word	0x52a
	.word	gText_BerryCrush
	.word	0x2c3
	.word	sTrainerCardStatColors
.Lfe43:
	.size	 PrintBerryCrushStringOnCard,.Lfe43-PrintBerryCrushStringOnCard
	.align	2, 0
	.type	 BufferUnionRoomStats,function
	.thumb_func
BufferUnionRoomStats:
	push	{lr}
	ldr	r0, .L438
	ldr	r2, [r0]
	ldr	r1, .L438+0x4
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L437	@cond_branch
	ldr	r3, .L438+0x8
	add	r0, r2, r3
	ldr	r1, [r0]
	cmp	r1, #0
	beq	.L437	@cond_branch
	ldr	r3, .L438+0xc
	add	r0, r2, r3
	mov	r2, #0x1
	mov	r3, #0x5
	bl	ConvertIntToDecimalStringN
.L437:
	pop	{r0}
	bx	r0
.L439:
	.align	2, 0
.L438:
	.word	sData
	.word	0x52a
	.word	0x574
	.word	0x34f
.Lfe44:
	.size	 BufferUnionRoomStats,.Lfe44-BufferUnionRoomStats
	.align	2, 0
	.type	 PrintUnionStringOnCard,function
	.thumb_func
PrintUnionStringOnCard:
	push	{lr}
	ldr	r0, .L442
	ldr	r2, [r0]
	ldr	r1, .L442+0x4
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L441	@cond_branch
	add	r1, r1, #0x4a
	add	r0, r2, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L441	@cond_branch
	ldr	r1, .L442+0x8
	ldr	r0, .L442+0xc
	add	r2, r2, r0
	ldr	r3, .L442+0x10
	mov	r0, #0x3
	bl	PrintStatOnBackOfCard
.L441:
	pop	{r0}
	bx	r0
.L443:
	.align	2, 0
.L442:
	.word	sData
	.word	0x52a
	.word	gText_UnionTradesAndBattles
	.word	0x34f
	.word	sTrainerCardStatColors
.Lfe45:
	.size	 PrintUnionStringOnCard,.Lfe45-PrintUnionStringOnCard
	.align	2, 0
	.type	 BufferLinkPokeblocksNum,function
	.thumb_func
BufferLinkPokeblocksNum:
	push	{r4, lr}
	ldr	r4, .L446
	ldr	r1, [r4]
	ldr	r2, .L446+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L445	@cond_branch
	ldr	r0, .L446+0x8
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L445	@cond_branch
	ldr	r0, .L446+0xc
	ldrh	r1, [r1]
	mov	r2, #0x1
	mov	r3, #0x5
	bl	ConvertIntToDecimalStringN
	ldr	r0, [r4]
	ldr	r1, .L446+0x10
	add	r0, r0, r1
	ldr	r1, .L446+0x14
	bl	StringExpandPlaceholders
.L445:
	pop	{r4}
	pop	{r0}
	bx	r0
.L447:
	.align	2, 0
.L446:
	.word	sData
	.word	0x52a
	.word	0x552
	.word	gStringVar1
	.word	0x395
	.word	gText_NumPokeblocks
.Lfe46:
	.size	 BufferLinkPokeblocksNum,.Lfe46-BufferLinkPokeblocksNum
	.align	2, 0
	.type	 PrintPokeblockStringOnCard,function
	.thumb_func
PrintPokeblockStringOnCard:
	push	{lr}
	ldr	r0, .L450
	ldr	r2, [r0]
	ldr	r1, .L450+0x4
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L449	@cond_branch
	add	r1, r1, #0x28
	add	r0, r2, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L449	@cond_branch
	ldr	r1, .L450+0x8
	ldr	r0, .L450+0xc
	add	r2, r2, r0
	ldr	r3, .L450+0x10
	mov	r0, #0x3
	bl	PrintStatOnBackOfCard
.L449:
	pop	{r0}
	bx	r0
.L451:
	.align	2, 0
.L450:
	.word	sData
	.word	0x52a
	.word	gText_PokeblocksWithFriends
	.word	0x395
	.word	sTrainerCardStatColors
.Lfe47:
	.size	 PrintPokeblockStringOnCard,.Lfe47-PrintPokeblockStringOnCard
	.align	2, 0
	.type	 BufferLinkContestNum,function
	.thumb_func
BufferLinkContestNum:
	push	{lr}
	ldr	r0, .L454
	ldr	r1, [r0]
	ldr	r2, .L454+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L453	@cond_branch
	mov	r3, #0xaa
	lsl	r3, r3, #0x3
	add	r2, r1, r3
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L453	@cond_branch
	ldr	r3, .L454+0x8
	add	r0, r1, r3
	ldrh	r1, [r2]
	mov	r2, #0x1
	mov	r3, #0x5
	bl	ConvertIntToDecimalStringN
.L453:
	pop	{r0}
	bx	r0
.L455:
	.align	2, 0
.L454:
	.word	sData
	.word	0x52a
	.word	0x3db
.Lfe48:
	.size	 BufferLinkContestNum,.Lfe48-BufferLinkContestNum
	.align	2, 0
	.type	 PrintContestStringOnCard,function
	.thumb_func
PrintContestStringOnCard:
	push	{lr}
	ldr	r0, .L458
	ldr	r2, [r0]
	ldr	r1, .L458+0x4
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L457	@cond_branch
	add	r1, r1, #0x26
	add	r0, r2, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L457	@cond_branch
	ldr	r1, .L458+0x8
	ldr	r0, .L458+0xc
	add	r2, r2, r0
	ldr	r3, .L458+0x10
	mov	r0, #0x4
	bl	PrintStatOnBackOfCard
.L457:
	pop	{r0}
	bx	r0
.L459:
	.align	2, 0
.L458:
	.word	sData
	.word	0x52a
	.word	gText_WonContestsWFriends
	.word	0x3db
	.word	sTrainerCardStatColors
.Lfe49:
	.size	 PrintContestStringOnCard,.Lfe49-PrintContestStringOnCard
	.align	2, 0
	.type	 BufferBattleFacilityStats,function
	.thumb_func
BufferBattleFacilityStats:
	push	{r4, lr}
	ldr	r4, .L470
	ldr	r1, [r4]
	ldr	r2, .L470+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L462	@cond_branch
	cmp	r0, #0x1
	ble	.L461	@cond_branch
	cmp	r0, #0x2
	beq	.L464	@cond_branch
	b	.L461
.L471:
	.align	2, 0
.L470:
	.word	sData
	.word	0x52a
.L462:
	ldrb	r0, [r1, #0xd]
	cmp	r0, #0
	beq	.L461	@cond_branch
	ldr	r0, .L472
	ldr	r2, .L472+0x4
	add	r1, r1, r2
	ldrh	r1, [r1]
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L472+0x8
	ldr	r1, [r4]
	ldr	r2, .L472+0xc
	add	r1, r1, r2
	ldrh	r1, [r1]
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r0, [r4]
	ldr	r1, .L472+0x10
	add	r0, r0, r1
	ldr	r1, .L472+0x14
	bl	StringExpandPlaceholders
	b	.L461
.L473:
	.align	2, 0
.L472:
	.word	gStringVar1
	.word	0x54c
	.word	gStringVar2
	.word	0x54e
	.word	0x421
	.word	gText_WinsStraight
.L464:
	ldr	r2, .L474
	add	r1, r1, r2
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L461	@cond_branch
	ldr	r0, .L474+0x4
	ldrh	r1, [r1]
	mov	r2, #0x1
	mov	r3, #0x5
	bl	ConvertIntToDecimalStringN
	ldr	r0, [r4]
	ldr	r1, .L474+0x8
	add	r0, r0, r1
	ldr	r1, .L474+0xc
	bl	StringExpandPlaceholders
.L461:
	pop	{r4}
	pop	{r0}
	bx	r0
.L475:
	.align	2, 0
.L474:
	.word	0x596
	.word	gStringVar1
	.word	0x421
	.word	gText_NumBP
.Lfe50:
	.size	 BufferBattleFacilityStats,.Lfe50-BufferBattleFacilityStats
	.align	2, 0
	.type	 PrintBattleFacilityStringOnCard,function
	.thumb_func
PrintBattleFacilityStringOnCard:
	push	{lr}
	ldr	r0, .L486
	ldr	r2, [r0]
	ldr	r1, .L486+0x4
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L478	@cond_branch
	cmp	r0, #0x1
	ble	.L477	@cond_branch
	cmp	r0, #0x2
	beq	.L480	@cond_branch
	b	.L477
.L487:
	.align	2, 0
.L486:
	.word	sData
	.word	0x52a
.L478:
	ldrb	r0, [r2, #0xd]
	cmp	r0, #0
	beq	.L477	@cond_branch
	ldr	r1, .L488
	ldr	r0, .L488+0x4
	add	r2, r2, r0
	ldr	r3, .L488+0x8
	mov	r0, #0x5
	bl	PrintStatOnBackOfCard
	b	.L477
.L489:
	.align	2, 0
.L488:
	.word	gText_BattleTower
	.word	0x421
	.word	sTrainerCardTextColors
.L480:
	ldr	r1, .L490
	add	r0, r2, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L477	@cond_branch
	ldr	r1, .L490+0x4
	ldr	r0, .L490+0x8
	add	r2, r2, r0
	ldr	r3, .L490+0xc
	mov	r0, #0x5
	bl	PrintStatOnBackOfCard
.L477:
	pop	{r0}
	bx	r0
.L491:
	.align	2, 0
.L490:
	.word	0x596
	.word	gText_BattlePtsWon
	.word	0x421
	.word	sTrainerCardStatColors
.Lfe51:
	.size	 PrintBattleFacilityStringOnCard,.Lfe51-PrintBattleFacilityStringOnCard
	.section .rodata
.LC135:
	.byte	0x5
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x9
	.byte	0xa
.LC137:
	.byte	0x0
	.byte	0x4
	.byte	0x8
	.byte	0xc
	.byte	0x10
	.byte	0x14
.text
	.align	2, 0
	.type	 PrintPokemonIconsOnCard,function
	.thumb_func
PrintPokemonIconsOnCard:
	push	{r4, r5, lr}
	add	sp, sp, #-0x20
	ldr	r1, .L500
	add	r0, sp, #0x10
	mov	r2, #0x6
	bl	memcpy
	add	r4, sp, #0x18
	ldr	r1, .L500+0x4
	add	r0, r4, #0
	mov	r2, #0x6
	bl	memcpy
	ldr	r0, .L500+0x8
	ldr	r0, [r0]
	ldr	r1, .L500+0xc
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r5, r4, #0
	cmp	r0, #0
	bne	.L493	@cond_branch
	mov	r4, #0x0
.L497:
	ldr	r0, .L500+0x8
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	mov	r2, #0xb1
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	add	r1, r0, r1
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L496	@cond_branch
	bl	GetMonIconPaletteIndexFromSpecies
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r4, #0x14
	mov	r2, #0xe0
	lsl	r2, r2, #0x10
	add	r1, r1, r2
	lsr	r1, r1, #0x10
	add	r2, r5, r4
	ldrb	r2, [r2]
	add	r2, r2, #0x3
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r3, #0x4
	str	r3, [sp]
	str	r3, [sp, #0x4]
	add	r0, r0, sp
	add	r0, r0, #0x10
	ldrb	r0, [r0]
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	str	r0, [sp, #0xc]
	mov	r0, #0x3
	mov	r3, #0xf
	bl	WriteSequenceToBgTilemapBuffer
.L496:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	bls	.L497	@cond_branch
.L493:
	add	sp, sp, #0x20
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L501:
	.align	2, 0
.L500:
	.word	.LC135
	.word	.LC137
	.word	sData
	.word	0x52a
.Lfe52:
	.size	 PrintPokemonIconsOnCard,.Lfe52-PrintPokemonIconsOnCard
	.align	2, 0
	.type	 LoadMonIconGfx,function
	.thumb_func
LoadMonIconGfx:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L517
	ldr	r4, .L517+0x4
	ldr	r1, [r4]
	mov	r5, #0x8d
	lsl	r5, r5, #0x3
	add	r1, r1, r5
	mov	r2, #0x60
	bl	CpuSet
	ldr	r4, [r4]
	ldr	r1, .L517+0x8
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L505	@cond_branch
	cmp	r0, #0x1
	ble	.L503	@cond_branch
	cmp	r0, #0x2
	beq	.L506	@cond_branch
	cmp	r0, #0x3
	beq	.L507	@cond_branch
	b	.L503
.L518:
	.align	2, 0
.L517:
	.word	gMonIconPalettes
	.word	sData
	.word	0x582
.L505:
	mov	r2, #0x8d
	lsl	r2, r2, #0x3
	add	r0, r4, r2
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x60
	mov	r2, #0x0
	mov	r3, #0x0
	bl	TintPalette_CustomTone
	b	.L503
.L506:
	add	r0, r4, r5
	mov	r2, #0xfa
	lsl	r2, r2, #0x1
	mov	r3, #0xa5
	lsl	r3, r3, #0x1
	mov	r1, #0x9b
	lsl	r1, r1, #0x1
	str	r1, [sp]
	mov	r1, #0x60
	bl	TintPalette_CustomTone
	b	.L503
.L507:
	add	r0, r4, r5
	mov	r1, #0x60
	bl	TintPalette_SepiaTone
.L503:
	ldr	r0, .L519
	ldr	r0, [r0]
	mov	r1, #0x8d
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	mov	r1, #0x50
	mov	r2, #0xc0
	bl	LoadPalette
	mov	r4, #0x0
.L514:
	ldr	r0, .L519
	ldr	r0, [r0]
	lsl	r1, r4, #0x1
	mov	r2, #0xb1
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	add	r1, r0, r1
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L513	@cond_branch
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetMonIconTiles
	add	r1, r0, #0
	lsl	r3, r4, #0x14
	mov	r0, #0x80
	lsl	r0, r0, #0xe
	add	r3, r3, r0
	lsr	r3, r3, #0x10
	mov	r0, #0x3
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	bl	LoadBgTiles
.L513:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	bls	.L514	@cond_branch
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L520:
	.align	2, 0
.L519:
	.word	sData
.Lfe53:
	.size	 LoadMonIconGfx,.Lfe53-LoadMonIconGfx
	.section .rodata
.LC142:
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xe
.text
	.align	2, 0
	.type	 PrintStickersOnCard,function
	.thumb_func
PrintStickersOnCard:
	push	{r4, lr}
	add	sp, sp, #-0x14
	ldr	r1, .L529
	add	r0, sp, #0x10
	mov	r2, #0x4
	bl	memcpy
	ldr	r0, .L529+0x4
	ldr	r1, [r0]
	ldr	r2, .L529+0x8
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L522	@cond_branch
	add	r2, r2, #0x56
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L522	@cond_branch
	mov	r4, #0x0
.L526:
	ldr	r0, .L529+0x4
	ldr	r0, [r0]
	ldr	r1, .L529+0xc
	add	r0, r0, r1
	add	r0, r0, r4
	ldrb	r3, [r0]
	cmp	r3, #0
	beq	.L525	@cond_branch
	lsl	r1, r4, #0x12
	mov	r2, #0xa0
	lsl	r2, r2, #0x11
	add	r1, r1, r2
	lsr	r1, r1, #0x10
	lsl	r2, r4, #0x1
	add	r2, r2, r4
	add	r2, r2, #0x2
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x2
	str	r0, [sp]
	str	r0, [sp, #0x4]
	sub	r0, r3, #0x1
	add	r0, r0, sp
	add	r0, r0, #0x10
	ldrb	r0, [r0]
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	str	r0, [sp, #0xc]
	mov	r0, #0x3
	mov	r3, #0x2
	bl	WriteSequenceToBgTilemapBuffer
.L525:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L526	@cond_branch
.L522:
	add	sp, sp, #0x14
	pop	{r4}
	pop	{r0}
	bx	r0
.L530:
	.align	2, 0
.L529:
	.word	.LC142
	.word	sData
	.word	0x52a
	.word	0x584
.Lfe54:
	.size	 PrintStickersOnCard,.Lfe54-PrintStickersOnCard
	.align	2, 0
	.type	 LoadStickerGfx,function
	.thumb_func
LoadStickerGfx:
	push	{lr}
	ldr	r0, .L532
	mov	r1, #0xb0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L532+0x4
	mov	r1, #0xc0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L532+0x8
	mov	r1, #0xd0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L532+0xc
	mov	r1, #0xe0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L532+0x10
	ldr	r1, [r0]
	ldr	r0, .L532+0x14
	add	r1, r1, r0
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	mov	r0, #0x3
	mov	r3, #0x80
	bl	LoadBgTiles
	pop	{r0}
	bx	r0
.L533:
	.align	2, 0
.L532:
	.word	sTrainerCardSticker1_Pal
	.word	sTrainerCardSticker2_Pal
	.word	sTrainerCardSticker3_Pal
	.word	sTrainerCardSticker4_Pal
	.word	sData
	.word	0x17a8
.Lfe55:
	.size	 LoadStickerGfx,.Lfe55-LoadStickerGfx
	.align	2, 0
	.type	 DrawTrainerCardWindow,function
	.thumb_func
DrawTrainerCardWindow:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 DrawTrainerCardWindow,.Lfe56-DrawTrainerCardWindow
	.align	2, 0
	.type	 SetCardBgsAndPals,function
	.thumb_func
SetCardBgsAndPals:
	push	{r4, lr}
	add	sp, sp, #-0x8
	ldr	r0, .L550
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0x4
	bls	.LCB4916
	b	.L546	@long jump
.LCB4916:
	lsl	r0, r0, #0x2
	ldr	r1, .L550+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L551:
	.align	2, 0
.L550:
	.word	sData
	.word	.L547
	.align	2, 0
	.align	2, 0
.L547:
	.word	.L537
	.word	.L538
	.word	.L539
	.word	.L544
	.word	.L545
.L537:
	ldr	r0, .L552
	ldr	r1, [r0]
	ldr	r0, .L552+0x4
	add	r1, r1, r0
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	mov	r0, #0x3
	b	.L549
.L553:
	.align	2, 0
.L552:
	.word	sData
	.word	0x13a8
.L538:
	ldr	r0, .L554
	ldr	r1, [r0]
	ldr	r3, .L554+0x4
	add	r1, r1, r3
	mov	r2, #0xc0
	lsl	r2, r2, #0x5
	mov	r0, #0x0
.L549:
	mov	r3, #0x0
	bl	LoadBgTiles
	b	.L536
.L555:
	.align	2, 0
.L554:
	.word	sData
	.word	0x19a8
.L539:
	ldr	r4, .L556
	ldr	r2, [r4]
	ldr	r1, .L556+0x4
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L540	@cond_branch
	ldr	r1, .L556+0x8
	ldr	r3, .L556+0xc
	add	r0, r2, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x60
	bl	LoadPalette
	ldr	r0, .L556+0x10
	mov	r1, #0x30
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, [r4]
	ldr	r1, .L556+0x14
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L542	@cond_branch
	ldr	r0, .L556+0x18
	mov	r1, #0x10
	mov	r2, #0x20
	bl	LoadPalette
	b	.L542
.L557:
	.align	2, 0
.L556:
	.word	sData
	.word	0x52a
	.word	sHoennTrainerCardStarPals
	.word	0x535
	.word	sHoennTrainerCardBadges_Pal
	.word	0x534
	.word	sHoennTrainerCardFemaleBg_Pal
.L540:
	ldr	r1, .L558
	ldr	r3, .L558+0x4
	add	r0, r2, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x60
	bl	LoadPalette
	ldr	r0, .L558+0x8
	mov	r1, #0x30
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, [r4]
	ldr	r1, .L558+0xc
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L542	@cond_branch
	ldr	r0, .L558+0x10
	mov	r1, #0x10
	mov	r2, #0x20
	bl	LoadPalette
.L542:
	ldr	r0, .L558+0x14
	mov	r1, #0x40
	mov	r2, #0x20
	bl	LoadPalette
	b	.L536
.L559:
	.align	2, 0
.L558:
	.word	sKantoTrainerCardStarPals
	.word	0x535
	.word	sKantoTrainerCardBadges_Pal
	.word	0x534
	.word	sKantoTrainerCardFemaleBg_Pal
	.word	sTrainerCardGold_Pal
.L544:
	ldr	r4, .L560
	ldr	r1, [r4]
	ldr	r3, .L560+0x4
	add	r1, r1, r3
	mov	r0, #0x0
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L560+0x8
	add	r1, r1, r0
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	b	.L536
.L561:
	.align	2, 0
.L560:
	.word	sData
	.word	0x3ca8
	.word	0x5ca8
.L545:
	mov	r4, #0x20
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
.L546:
	mov	r0, #0x1
	b	.L548
.L536:
	ldr	r0, .L562
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x3]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x3]
	mov	r0, #0x0
.L548:
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r1}
	bx	r1
.L563:
	.align	2, 0
.L562:
	.word	sData
.Lfe57:
	.size	 SetCardBgsAndPals,.Lfe57-SetCardBgsAndPals
	.align	2, 0
	.type	 DrawCardScreenBackground,function
	.thumb_func
DrawCardScreenBackground:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	ldr	r0, .L578
	ldr	r0, [r0]
	ldr	r1, .L578+0x4
	add	r6, r0, r1
	mov	r1, #0x0
.L568:
	mov	r2, #0x0
	lsl	r5, r1, #0x10
	asr	r1, r5, #0x10
	lsl	r3, r1, #0x5
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r4, r0, #0x1
.L572:
	lsl	r0, r2, #0x10
	asr	r1, r0, #0x10
	add	r2, r0, #0
	cmp	r1, #0x1d
	bgt	.L573	@cond_branch
	add	r0, r3, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	add	r1, r4, r1
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	ldrh	r1, [r1]
	b	.L577
.L579:
	.align	2, 0
.L578:
	.word	sData
	.word	0x5ca8
.L573:
	add	r0, r3, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r1, [r7]
.L577:
	strh	r1, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r2, r1
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	ble	.L572	@cond_branch
	add	r0, r5, r1
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L568	@cond_branch
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 DrawCardScreenBackground,.Lfe58-DrawCardScreenBackground
	.align	2, 0
	.type	 DrawCardFrontOrBack,function
	.thumb_func
DrawCardFrontOrBack:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	ldr	r0, .L594
	ldr	r0, [r0]
	ldr	r1, .L594+0x4
	add	r6, r0, r1
	mov	r1, #0x0
.L584:
	mov	r2, #0x0
	lsl	r5, r1, #0x10
	asr	r1, r5, #0x10
	lsl	r3, r1, #0x5
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r4, r0, #0x1
.L588:
	lsl	r0, r2, #0x10
	asr	r1, r0, #0x10
	add	r2, r0, #0
	cmp	r1, #0x1d
	bgt	.L589	@cond_branch
	add	r0, r3, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	add	r1, r4, r1
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	ldrh	r1, [r1]
	b	.L593
.L595:
	.align	2, 0
.L594:
	.word	sData
	.word	0x3ca8
.L589:
	add	r0, r3, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r1, [r7]
.L593:
	strh	r1, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r2, r1
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	ble	.L588	@cond_branch
	add	r0, r5, r1
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L584	@cond_branch
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 DrawCardFrontOrBack,.Lfe59-DrawCardFrontOrBack
	.section .rodata
	.type	 yOffsets.184,object
yOffsets.184:
	.byte	0x7
	.byte	0x7
.text
	.align	2, 0
	.type	 DrawStarsAndBadgesOnCard,function
	.thumb_func
DrawStarsAndBadgesOnCard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r0, #0xc0
	mov	r8, r0
	mov	r2, #0x3
	mov	sl, r2
	ldr	r2, .L604
	ldr	r4, .L604+0x4
	ldr	r1, [r4]
	ldr	r3, .L604+0x8
	add	r0, r1, r3
	ldrb	r0, [r0]
	add	r0, r0, r2
	ldrb	r3, [r0]
	ldr	r0, .L604+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r0, #0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x8f
	mov	r2, #0xf
	bl	FillBgTilemapBufferRect
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0
	bne	.L597	@cond_branch
	mov	r2, #0x4
	mov	r9, r2
	mov	r2, #0x0
	mov	r6, #0x1
.L601:
	ldr	r0, .L604+0x4
	ldr	r1, [r0]
	lsl	r0, r2, #0x10
	asr	r7, r0, #0x10
	add	r1, r1, #0x11
	add	r1, r1, r7
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L600	@cond_branch
	mov	r3, r9
	lsl	r5, r3, #0x18
	lsr	r5, r5, #0x18
	str	r6, [sp]
	str	r6, [sp, #0x4]
	mov	r0, sl
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, r8
	add	r2, r5, #0
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	mov	r1, r8
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r4, r9
	add	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r6, [sp]
	str	r6, [sp, #0x4]
	mov	r2, sl
	str	r2, [sp, #0x8]
	mov	r0, #0x3
	add	r2, r4, #0
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	mov	r1, r8
	add	r1, r1, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r6, [sp]
	str	r6, [sp, #0x4]
	mov	r3, sl
	str	r3, [sp, #0x8]
	mov	r0, #0x3
	add	r2, r5, #0
	mov	r3, #0x10
	bl	FillBgTilemapBufferRect
	mov	r1, r8
	add	r1, r1, #0x11
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r6, [sp]
	str	r6, [sp, #0x4]
	mov	r0, sl
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	add	r2, r4, #0
	mov	r3, #0x10
	bl	FillBgTilemapBufferRect
.L600:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	mov	r1, r8
	add	r1, r1, #0x2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	mov	r2, r9
	lsl	r1, r2, #0x10
	mov	r3, #0xc0
	lsl	r3, r3, #0xa
	add	r1, r1, r3
	lsr	r1, r1, #0x10
	mov	r9, r1
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	ble	.L601	@cond_branch
.L597:
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L605:
	.align	2, 0
.L604:
	.word	yOffsets.184
	.word	sData
	.word	0x52b
	.word	0x535
.Lfe60:
	.size	 DrawStarsAndBadgesOnCard,.Lfe60-DrawStarsAndBadgesOnCard
	.align	2, 0
	.type	 DrawCardBackStats,function
	.thumb_func
DrawCardBackStats:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	ldr	r6, .L615
	ldr	r1, [r6]
	ldr	r2, .L615+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L607	@cond_branch
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0
	beq	.L608	@cond_branch
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x8d
	mov	r2, #0x1b
	mov	r3, #0x9
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x9d
	mov	r2, #0x1b
	mov	r3, #0xa
	bl	FillBgTilemapBufferRect
.L608:
	ldr	r0, [r6]
	mov	r1, #0xae
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L609	@cond_branch
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x8d
	mov	r2, #0x15
	mov	r3, #0xd
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x9d
	mov	r2, #0x15
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
.L609:
	ldr	r0, [r6]
	ldr	r2, .L615+0x8
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L611	@cond_branch
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x8d
	mov	r2, #0x1b
	mov	r3, #0xb
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x9d
	mov	r2, #0x1b
	mov	r3, #0xc
	bl	FillBgTilemapBufferRect
	b	.L611
.L616:
	.align	2, 0
.L615:
	.word	sData
	.word	0x52a
	.word	0x574
.L607:
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0
	beq	.L612	@cond_branch
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r5, #0x0
	str	r5, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x8d
	mov	r2, #0x1b
	mov	r3, #0x9
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x9d
	mov	r2, #0x1b
	mov	r3, #0xa
	bl	FillBgTilemapBufferRect
.L612:
	ldr	r0, [r6]
	mov	r1, #0xaa
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L613	@cond_branch
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r5, #0x0
	str	r5, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x8d
	mov	r2, #0x1b
	mov	r3, #0xd
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x9d
	mov	r2, #0x1b
	mov	r3, #0xe
	bl	FillBgTilemapBufferRect
.L613:
	ldr	r0, [r6]
	ldrb	r0, [r0, #0xd]
	cmp	r0, #0
	beq	.L611	@cond_branch
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r5, #0x0
	str	r5, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x8d
	mov	r2, #0x11
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x9d
	mov	r2, #0x11
	mov	r3, #0x10
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x8c
	mov	r2, #0x1b
	mov	r3, #0xf
	bl	FillBgTilemapBufferRect
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x9c
	mov	r2, #0x1b
	mov	r3, #0x10
	bl	FillBgTilemapBufferRect
.L611:
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 DrawCardBackStats,.Lfe61-DrawCardBackStats
	.align	2, 0
	.type	 BlinkTimeColon,function
	.thumb_func
BlinkTimeColon:
	push	{lr}
	ldr	r3, .L619
	ldr	r1, [r3]
	ldrb	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x6]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3c
	bls	.L618	@cond_branch
	ldr	r1, [r3]
	mov	r0, #0x0
	strb	r0, [r1, #0x6]
	ldr	r2, [r3]
	ldrb	r0, [r2, #0x7]
	mov	r1, #0x1
	eor	r0, r0, r1
	strb	r0, [r2, #0x7]
	ldr	r0, [r3]
	ldr	r1, .L619+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
.L618:
	pop	{r0}
	bx	r0
.L620:
	.align	2, 0
.L619:
	.word	sData
	.word	0x529
.Lfe62:
	.size	 BlinkTimeColon,.Lfe62-BlinkTimeColon
	.align	2, 0
	.globl	GetTrainerCardStars
	.type	 GetTrainerCardStars,function
	.thumb_func
GetTrainerCardStars:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L622
	mov	r1, #0x64
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	bx	lr
.L623:
	.align	2, 0
.L622:
	.word	gTrainerCards
.Lfe63:
	.size	 GetTrainerCardStars,.Lfe63-GetTrainerCardStars
	.align	2, 0
	.type	 FlipTrainerCard,function
	.thumb_func
FlipTrainerCard:
	push	{r4, lr}
	ldr	r4, .L625
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	_call_via_r4
	ldr	r0, .L625+0x4
	bl	SetHBlankCallback
	pop	{r4}
	pop	{r0}
	bx	r0
.L626:
	.align	2, 0
.L625:
	.word	Task_DoCardFlipTask
	.word	HblankCb_TrainerCard
.Lfe64:
	.size	 FlipTrainerCard,.Lfe64-FlipTrainerCard
	.align	2, 0
	.type	 IsCardFlipTaskActive,function
	.thumb_func
IsCardFlipTaskActive:
	push	{lr}
	ldr	r0, .L631
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L628	@cond_branch
	mov	r0, #0x0
	b	.L630
.L632:
	.align	2, 0
.L631:
	.word	Task_DoCardFlipTask
.L628:
	mov	r0, #0x1
.L630:
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 IsCardFlipTaskActive,.Lfe65-IsCardFlipTaskActive
	.align	2, 0
	.type	 Task_DoCardFlipTask,function
	.thumb_func
Task_DoCardFlipTask:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L638
	ldr	r2, .L638+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L634:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L634	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L639:
	.align	2, 0
.L638:
	.word	sTrainerCardFlipTasks
	.word	gTasks
.Lfe66:
	.size	 Task_DoCardFlipTask,.Lfe66-Task_DoCardFlipTask
	.align	2, 0
	.type	 Task_BeginCardFlip,function
	.thumb_func
Task_BeginCardFlip:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	bl	HideBg
	mov	r0, #0x3
	bl	HideBg
	bl	ScanlineEffect_Stop
	bl	ScanlineEffect_Clear
	mov	r1, #0x0
	ldr	r0, .L646
	mov	r2, #0x0
	mov	r3, #0xf0
	lsl	r3, r3, #0x3
	add	r0, r0, r3
.L644:
	strh	r2, [r0]
	add	r0, r0, #0x2
	add	r1, r1, #0x1
	cmp	r1, #0x9f
	bls	.L644	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L647:
	.align	2, 0
.L646:
	.word	gScanlineEffectRegBuffers
.Lfe67:
	.size	 Task_BeginCardFlip,.Lfe67-Task_BeginCardFlip
	.align	2, 0
	.type	 Task_AnimateCardFlipDown,function
	.thumb_func
Task_AnimateCardFlipDown:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r0
	ldr	r0, .L668
	ldr	r1, [r0]
	mov	r0, #0x0
	strb	r0, [r1, #0x9]
	mov	r0, r8
	ldrh	r1, [r0, #0xa]
	mov	r2, #0xa
	ldrsh	r0, [r0, r2]
	cmp	r0, #0x4c
	ble	.L649	@cond_branch
	mov	r0, #0x4d
	mov	r3, r8
	strh	r0, [r3, #0xa]
	b	.L650
.L669:
	.align	2, 0
.L668:
	.word	sData
.L649:
	add	r0, r1, #0x7
	mov	r4, r8
	strh	r0, [r4, #0xa]
.L650:
	ldr	r0, .L670
	ldr	r0, [r0]
	mov	r2, r8
	ldrh	r1, [r2, #0xa]
	ldr	r3, .L670+0x4
	add	r0, r0, r3
	strh	r1, [r0]
	ldrh	r0, [r2, #0xa]
	bl	sub_80C32EC
	mov	r4, r8
	mov	r0, #0xa
	ldrsh	r7, [r4, r0]
	mov	r0, #0xa0
	sub	r0, r0, r7
	mov	r9, r0
	sub	r4, r0, r7
	neg	r0, r7
	lsl	r6, r0, #0x10
	mov	r0, #0xa0
	lsl	r0, r0, #0x10
	add	r1, r4, #0
	bl	__udivsi3
	add	r5, r0, #0
	ldr	r1, .L670+0x8
	add	r5, r5, r1
	mov	r0, r5
	mul	r0, r0, r4
	add	r0, r6, r0
	str	r0, [sp]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__udivsi3
	mov	sl, r0
	lsl	r5, r5, #0x1
	mov	r2, #0x0
	cmp	r2, r7
	bcs	.L652	@cond_branch
	ldr	r3, .L670+0xc
.L654:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x1
	add	r1, r1, r3
	neg	r2, r0
	strh	r2, [r1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r7
	bcc	.L654	@cond_branch
.L652:
	lsl	r1, r2, #0x10
	mov	r3, r9
	lsl	r0, r3, #0x10
	asr	r3, r0, #0x10
	ldr	r4, .L670
	mov	r9, r4
	ldr	r4, [sp]
	lsr	r7, r4, #0x10
	cmp	r1, r0
	bge	.L667	@cond_branch
	ldr	r0, .L670+0xc
	mov	ip, r0
	add	r4, r3, #0
.L659:
	lsr	r3, r6, #0x10
	add	r6, r6, r5
	mov	r2, sl
	sub	r5, r5, r2
	asr	r0, r1, #0x10
	lsl	r1, r0, #0x1
	add	r1, r1, ip
	strh	r3, [r1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	lsl	r1, r2, #0x10
	asr	r0, r1, #0x10
	cmp	r0, r4
	blt	.L659	@cond_branch
.L667:
	add	r3, r7, #0
	lsl	r1, r2, #0x10
	asr	r0, r1, #0x10
	cmp	r0, #0x9f
	bgt	.L662	@cond_branch
	ldr	r2, .L670+0xc
.L664:
	asr	r0, r1, #0x10
	lsl	r1, r0, #0x1
	add	r1, r1, r2
	strh	r3, [r1]
	add	r0, r0, #0x1
	lsl	r1, r0, #0x10
	asr	r0, r1, #0x10
	cmp	r0, #0x9f
	ble	.L664	@cond_branch
.L662:
	mov	r3, r9
	ldr	r0, [r3]
	mov	r1, #0x1
	strb	r1, [r0, #0x9]
	mov	r4, r8
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4c
	ble	.L666	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L666:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L671:
	.align	2, 0
.L670:
	.word	sData
	.word	0x7ca8
	.word	-0x10000
	.word	gScanlineEffectRegBuffers
.Lfe68:
	.size	 Task_AnimateCardFlipDown,.Lfe68-Task_AnimateCardFlipDown
	.align	2, 0
	.type	 Task_DrawFlippedCardSide,function
	.thumb_func
Task_DrawFlippedCardSide:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	ldr	r4, .L698
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x9]
	bl	sub_8087598
	add	r2, r4, #0
	cmp	r0, #0x1
	beq	.L697	@cond_branch
.L674:
	ldr	r3, [r2]
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0x4
	bhi	.L692	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L698+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L699:
	.align	2, 0
.L698:
	.word	sData
	.word	.L693
	.align	2, 0
	.align	2, 0
.L693:
	.word	.L678
	.word	.L679
	.word	.L684
	.word	.L687
	.word	.L690
.L678:
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x20
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	b	.L677
.L679:
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L680	@cond_branch
	bl	PrintAllOnCardBack
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L677	@cond_branch
	b	.L697
.L680:
	bl	PrintAllOnCardFront
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L677	@cond_branch
	b	.L697
.L684:
	ldr	r0, .L700
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	bne	.L685	@cond_branch
	ldr	r2, .L700+0x4
	add	r0, r1, r2
	bl	DrawCardFrontOrBack
	b	.L677
.L701:
	.align	2, 0
.L700:
	.word	sData
	.word	0xa48
.L685:
	mov	r0, #0x1
	bl	DrawTrainerCardWindow
	b	.L677
.L687:
	ldr	r0, .L702
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L688	@cond_branch
	bl	DrawCardBackStats
	b	.L677
.L703:
	.align	2, 0
.L702:
	.word	sData
.L688:
	mov	r0, #0x2
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	b	.L677
.L690:
	ldr	r0, .L704
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	beq	.L677	@cond_branch
	bl	CreateTrainerCardTrainerPic
	b	.L677
.L705:
	.align	2, 0
.L704:
	.word	sData
.L692:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r5, #0x8]
	mov	r0, #0x1
	strb	r0, [r3, #0x9]
	ldr	r0, [r2]
	strb	r1, [r0, #0x4]
	b	.L697
.L677:
	ldr	r2, .L706
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x4]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x4]
	ldr	r0, .L706+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L674	@cond_branch
.L697:
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L707:
	.align	2, 0
.L706:
	.word	sData
	.word	gReceivedRemoteLinkPlayers
.Lfe69:
	.size	 Task_DrawFlippedCardSide,.Lfe69-Task_DrawFlippedCardSide
	.align	2, 0
	.type	 Task_SetCardFlipped,function
	.thumb_func
Task_SetCardFlipped:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L710
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x9]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	beq	.L709	@cond_branch
	mov	r0, #0x2
	bl	DrawTrainerCardWindow
	ldr	r0, [r4]
	ldr	r1, .L710+0x4
	add	r0, r0, r1
	bl	DrawCardScreenBackground
	ldr	r0, [r4]
	mov	r1, #0xb3
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	bl	DrawCardFrontOrBack
	bl	DrawStarsAndBadgesOnCard
.L709:
	mov	r0, #0x1
	bl	DrawTrainerCardWindow
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x1
	eor	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	ldr	r1, [r4]
	mov	r0, #0x1
	strb	r0, [r1, #0x9]
	mov	r0, #0xfa
	bl	PlaySE
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L711:
	.align	2, 0
.L710:
	.word	sData
	.word	0xef8
.Lfe70:
	.size	 Task_SetCardFlipped,.Lfe70-Task_SetCardFlipped
	.align	2, 0
	.type	 Task_AnimateCardFlipUp,function
	.thumb_func
Task_AnimateCardFlipUp:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r0
	ldr	r0, .L732
	ldr	r0, [r0]
	mov	r2, #0x0
	strb	r2, [r0, #0x9]
	mov	r0, r8
	ldrh	r1, [r0, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r0, r3]
	cmp	r0, #0x5
	bgt	.L713	@cond_branch
	mov	r4, r8
	strh	r2, [r4, #0xa]
	b	.L714
.L733:
	.align	2, 0
.L732:
	.word	sData
.L713:
	sub	r0, r1, #0x5
	mov	r1, r8
	strh	r0, [r1, #0xa]
.L714:
	ldr	r0, .L734
	ldr	r0, [r0]
	mov	r2, r8
	ldrh	r1, [r2, #0xa]
	ldr	r3, .L734+0x4
	add	r0, r0, r3
	strh	r1, [r0]
	ldrh	r0, [r2, #0xa]
	bl	sub_80C32EC
	mov	r4, r8
	mov	r0, #0xa
	ldrsh	r7, [r4, r0]
	mov	r0, #0xa0
	sub	r0, r0, r7
	mov	r9, r0
	sub	r4, r0, r7
	neg	r0, r7
	lsl	r6, r0, #0x10
	mov	r0, #0xa0
	lsl	r0, r0, #0x10
	add	r1, r4, #0
	bl	__udivsi3
	add	r5, r0, #0
	ldr	r1, .L734+0x8
	add	r5, r5, r1
	mov	r0, r5
	mul	r0, r0, r4
	add	r0, r6, r0
	str	r0, [sp]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__udivsi3
	mov	sl, r0
	lsr	r5, r5, #0x1
	mov	r2, #0x0
	cmp	r2, r7
	bcs	.L716	@cond_branch
	ldr	r3, .L734+0xc
.L718:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x1
	add	r1, r1, r3
	neg	r2, r0
	strh	r2, [r1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r7
	bcc	.L718	@cond_branch
.L716:
	lsl	r1, r2, #0x10
	mov	r3, r9
	lsl	r0, r3, #0x10
	asr	r3, r0, #0x10
	ldr	r4, .L734
	mov	r9, r4
	ldr	r4, [sp]
	lsr	r7, r4, #0x10
	cmp	r1, r0
	bge	.L731	@cond_branch
	ldr	r0, .L734+0xc
	mov	ip, r0
	add	r4, r3, #0
.L723:
	lsr	r3, r6, #0x10
	add	r6, r6, r5
	add	r5, r5, sl
	asr	r0, r1, #0x10
	lsl	r1, r0, #0x1
	add	r1, r1, ip
	strh	r3, [r1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	lsl	r1, r2, #0x10
	asr	r0, r1, #0x10
	cmp	r0, r4
	blt	.L723	@cond_branch
.L731:
	add	r3, r7, #0
	lsl	r1, r2, #0x10
	asr	r0, r1, #0x10
	cmp	r0, #0x9f
	bgt	.L726	@cond_branch
	ldr	r2, .L734+0xc
.L728:
	asr	r0, r1, #0x10
	lsl	r1, r0, #0x1
	add	r1, r1, r2
	strh	r3, [r1]
	add	r0, r0, #0x1
	lsl	r1, r0, #0x10
	asr	r0, r1, #0x10
	cmp	r0, #0x9f
	ble	.L728	@cond_branch
.L726:
	mov	r1, r9
	ldr	r0, [r1]
	mov	r1, #0x1
	strb	r1, [r0, #0x9]
	mov	r2, r8
	mov	r3, #0xa
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bgt	.L730	@cond_branch
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
.L730:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L735:
	.align	2, 0
.L734:
	.word	sData
	.word	0x7ca8
	.word	-0x10000
	.word	gScanlineEffectRegBuffers
.Lfe71:
	.size	 Task_AnimateCardFlipUp,.Lfe71-Task_AnimateCardFlipUp
	.align	2, 0
	.type	 Task_EndCardFlip,function
	.thumb_func
Task_EndCardFlip:
	push	{lr}
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	mov	r0, #0x0
	bl	SetHBlankCallback
	ldr	r0, .L737
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L738:
	.align	2, 0
.L737:
	.word	Task_DoCardFlipTask
.Lfe72:
	.size	 Task_EndCardFlip,.Lfe72-Task_EndCardFlip
	.align	2, 0
	.globl	ShowPlayerTrainerCard
	.type	 ShowPlayerTrainerCard,function
	.thumb_func
ShowPlayerTrainerCard:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L745
	ldr	r0, .L745+0x4
	bl	AllocZeroed
	add	r1, r0, #0
	str	r1, [r4]
	mov	r2, #0xa6
	lsl	r2, r2, #0x3
	add	r0, r1, r2
	str	r5, [r0]
	ldr	r0, .L745+0x8
	cmp	r5, r0
	bne	.L740	@cond_branch
	ldr	r0, .L745+0xc
	add	r1, r1, r0
	ldr	r0, .L745+0x10
	b	.L744
.L746:
	.align	2, 0
.L745:
	.word	sData
	.word	0x7cac
	.word	CB2_ReshowFrontierPass
	.word	0x52c
	.word	0x7fff
.L740:
	ldr	r2, .L747
	add	r1, r1, r2
	mov	r0, #0x0
.L744:
	strh	r0, [r1]
	bl	InUnionRoom
	add	r3, r0, #0
	cmp	r3, #0x1
	bne	.L742	@cond_branch
	ldr	r1, .L747+0x4
	ldr	r0, [r1]
	strb	r3, [r0, #0x5]
	add	r2, r1, #0
	b	.L743
.L748:
	.align	2, 0
.L747:
	.word	0x52c
	.word	sData
.L742:
	ldr	r2, .L749
	ldr	r1, [r2]
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
.L743:
	ldr	r0, [r2]
	ldr	r1, .L749+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r2, .L749+0x8
	add	r0, r0, r2
	bl	TrainerCard_GenerateCardForLinkPlayer
	ldr	r0, .L749+0xc
	bl	SetMainCallback2
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L750:
	.align	2, 0
.L749:
	.word	sData
	.word	0x7caa
	.word	0x534
	.word	CB2_InitTrainerCard
.Lfe73:
	.size	 ShowPlayerTrainerCard,.Lfe73-ShowPlayerTrainerCard
	.align	2, 0
	.globl	ShowTrainerCardInLink
	.type	 ShowTrainerCardInLink,function
	.thumb_func
ShowTrainerCardInLink:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L752
	ldr	r0, .L752+0x4
	bl	AllocZeroed
	str	r0, [r5]
	mov	r2, #0xa6
	lsl	r2, r2, #0x3
	add	r1, r0, r2
	str	r6, [r1]
	mov	r1, #0x1
	strb	r1, [r0, #0x5]
	ldr	r0, [r5]
	ldr	r1, .L752+0x8
	add	r0, r0, r1
	ldr	r2, .L752+0xc
	mov	r1, #0x64
	mul	r1, r1, r4
	add	r1, r1, r2
	mov	r2, #0x64
	bl	memcpy
	ldr	r1, [r5]
	ldr	r2, .L752+0x10
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x1a]
	ldr	r2, .L752+0x14
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r0, .L752+0x18
	bl	SetMainCallback2
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L753:
	.align	2, 0
.L752:
	.word	sData
	.word	0x7cac
	.word	0x534
	.word	gTrainerCards
	.word	gLinkPlayers
	.word	0x7caa
	.word	CB2_InitTrainerCard
.Lfe74:
	.size	 ShowTrainerCardInLink,.Lfe74-ShowTrainerCardInLink
	.align	2, 0
	.type	 InitTrainerCardData,function
	.thumb_func
InitTrainerCardData:
	push	{r4, r5, lr}
	ldr	r4, .L760
	ldr	r0, [r4]
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r2, [r4]
	ldr	r0, .L760+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	strb	r0, [r2, #0x6]
	ldr	r0, [r4]
	strb	r1, [r0, #0x7]
	ldr	r0, [r4]
	strb	r1, [r0, #0x8]
	ldr	r0, [r4]
	mov	r2, #0xa5
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	strb	r1, [r0]
	bl	GetSetCardType
	ldr	r1, [r4]
	ldr	r3, .L760+0x8
	add	r1, r1, r3
	strb	r0, [r1]
	mov	r5, #0x0
.L758:
	mov	r0, #0xd
	mul	r0, r0, r5
	add	r0, r0, #0x19
	ldr	r1, [r4]
	add	r0, r1, r0
	lsl	r2, r5, #0x1
	ldr	r3, .L760+0xc
	add	r1, r1, r3
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	CopyEasyChatWord
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L758	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L761:
	.align	2, 0
.L760:
	.word	sData
	.word	gSaveBlock2Ptr
	.word	0x52a
	.word	0x55c
.Lfe75:
	.size	 InitTrainerCardData,.Lfe75-InitTrainerCardData
	.align	2, 0
	.type	 GetSetCardType,function
	.thumb_func
GetSetCardType:
	push	{lr}
	ldr	r0, .L775
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.L763	@cond_branch
	ldr	r0, .L775+0x4
	ldrb	r1, [r0]
	sub	r0, r1, #0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L764	@cond_branch
	mov	r0, #0x0
	b	.L773
.L776:
	.align	2, 0
.L775:
	.word	sData
	.word	gGameVersion
.L764:
	cmp	r1, #0x3
	beq	.L774	@cond_branch
	mov	r0, #0x1
	b	.L773
.L763:
	ldr	r2, .L777
	add	r0, r1, r2
	ldrb	r2, [r0]
	sub	r0, r2, #0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L769	@cond_branch
	ldr	r0, .L777+0x4
	add	r1, r1, r0
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L773
.L778:
	.align	2, 0
.L777:
	.word	0x56c
	.word	0x52b
.L769:
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L771	@cond_branch
	ldr	r2, .L779
	add	r1, r1, r2
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L773
.L780:
	.align	2, 0
.L779:
	.word	0x52b
.L771:
	ldr	r0, .L781
	add	r1, r1, r0
	mov	r0, #0x1
	strb	r0, [r1]
.L774:
	mov	r0, #0x2
.L773:
	pop	{r1}
	bx	r1
.L782:
	.align	2, 0
.L781:
	.word	0x52b
.Lfe76:
	.size	 GetSetCardType,.Lfe76-GetSetCardType
	.align	2, 0
	.type	 VersionToCardType,function
	.thumb_func
VersionToCardType:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xfc
	lsl	r2, r2, #0x18
	add	r0, r0, r2
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L784	@cond_branch
	mov	r0, #0x0
	b	.L788
.L784:
	cmp	r1, #0x3
	beq	.L786	@cond_branch
	mov	r0, #0x1
	b	.L788
.L786:
	mov	r0, #0x2
.L788:
	pop	{r1}
	bx	r1
.Lfe77:
	.size	 VersionToCardType,.Lfe77-VersionToCardType
	.align	2, 0
	.type	 CreateTrainerCardTrainerPic,function
	.thumb_func
CreateTrainerCardTrainerPic:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	bl	InUnionRoom
	cmp	r0, #0x1
	bne	.L790	@cond_branch
	ldr	r0, .L792
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L790	@cond_branch
	ldr	r5, .L792+0x4
	ldr	r0, [r5]
	ldr	r1, .L792+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	FacilityClassToPicIndex
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L792+0xc
	ldr	r1, [r5]
	ldr	r3, .L792+0x10
	add	r2, r1, r3
	ldrb	r3, [r2]
	lsl	r3, r3, #0x1
	ldr	r2, .L792+0x14
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r3, r3, r1
	add	r1, r3, r4
	ldrb	r2, [r1]
	add	r4, r4, #0x1
	add	r3, r3, r4
	ldrb	r3, [r3]
	mov	r1, #0x8
	str	r1, [sp]
	mov	r1, #0x2
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	bl	CreateTrainerCardTrainerPicSprite
	b	.L791
.L793:
	.align	2, 0
.L792:
	.word	gReceivedRemoteLinkPlayers
	.word	sData
	.word	0x583
	.word	sTrainerPicOffset
	.word	0x534
	.word	0x52b
.L790:
	ldr	r2, .L794
	ldr	r6, .L794+0x4
	ldr	r0, [r6]
	ldr	r5, .L794+0x8
	add	r1, r0, r5
	ldr	r3, .L794+0xc
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	ldrb	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0]
	bl	FacilityClassToPicIndex
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L794+0x10
	ldr	r1, [r6]
	add	r5, r1, r5
	ldrb	r3, [r5]
	lsl	r3, r3, #0x1
	ldr	r2, .L794+0x14
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r3, r3, r1
	add	r1, r3, r4
	ldrb	r2, [r1]
	add	r4, r4, #0x1
	add	r3, r3, r4
	ldrb	r3, [r3]
	mov	r1, #0x8
	str	r1, [sp]
	mov	r1, #0x2
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	bl	CreateTrainerCardTrainerPicSprite
.L791:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L795:
	.align	2, 0
.L794:
	.word	sTrainerPicFacilityClass
	.word	sData
	.word	0x534
	.word	0x52a
	.word	sTrainerPicOffset
	.word	0x52b
.Lfe78:
	.size	 CreateTrainerCardTrainerPic,.Lfe78-CreateTrainerCardTrainerPic
.text
	.align	2, 0

