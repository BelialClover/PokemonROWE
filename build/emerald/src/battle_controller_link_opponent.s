@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sLinkOpponentBufferCommands,object
	.size	 sLinkOpponentBufferCommands,232
sLinkOpponentBufferCommands:
	.word	LinkOpponentHandleGetMonData
	.word	LinkOpponentHandleGetRawMonData
	.word	LinkOpponentHandleSetMonData
	.word	LinkOpponentHandleSetRawMonData
	.word	LinkOpponentHandleLoadMonSprite
	.word	LinkOpponentHandleSwitchInAnim
	.word	LinkOpponentHandleReturnMonToBall
	.word	LinkOpponentHandleDrawTrainerPic
	.word	LinkOpponentHandleTrainerSlide
	.word	LinkOpponentHandleTrainerSlideBack
	.word	LinkOpponentHandleFaintAnimation
	.word	LinkOpponentHandlePaletteFade
	.word	LinkOpponentHandleSuccessBallThrowAnim
	.word	LinkOpponentHandleBallThrowAnim
	.word	LinkOpponentHandlePause
	.word	LinkOpponentHandleMoveAnimation
	.word	LinkOpponentHandlePrintString
	.word	LinkOpponentHandlePrintSelectionString
	.word	LinkOpponentHandleChooseAction
	.word	LinkOpponentHandleUnknownYesNoBox
	.word	LinkOpponentHandleChooseMove
	.word	LinkOpponentHandleChooseItem
	.word	LinkOpponentHandleChoosePokemon
	.word	LinkOpponentHandleCmd23
	.word	LinkOpponentHandleHealthBarUpdate
	.word	LinkOpponentHandleExpUpdate
	.word	LinkOpponentHandleStatusIconUpdate
	.word	LinkOpponentHandleStatusAnimation
	.word	LinkOpponentHandleStatusXor
	.word	LinkOpponentHandleDataTransfer
	.word	LinkOpponentHandleDMA3Transfer
	.word	LinkOpponentHandlePlayBGM
	.word	LinkOpponentHandleCmd32
	.word	LinkOpponentHandleTwoReturnValues
	.word	LinkOpponentHandleChosenMonReturnValue
	.word	LinkOpponentHandleOneReturnValue
	.word	LinkOpponentHandleOneReturnValue_Duplicate
	.word	LinkOpponentHandleCmd37
	.word	LinkOpponentHandleCmd38
	.word	LinkOpponentHandleCmd39
	.word	LinkOpponentHandleCmd40
	.word	LinkOpponentHandleHitAnimation
	.word	LinkOpponentHandleCmd42
	.word	LinkOpponentHandlePlaySE
	.word	LinkOpponentHandlePlayFanfareOrBGM
	.word	LinkOpponentHandleFaintingCry
	.word	LinkOpponentHandleIntroSlide
	.word	LinkOpponentHandleIntroTrainerBallThrow
	.word	LinkOpponentHandleDrawPartyStatusSummary
	.word	LinkOpponentHandleHidePartyStatusSummary
	.word	LinkOpponentHandleEndBounceEffect
	.word	LinkOpponentHandleSpriteInvisibility
	.word	LinkOpponentHandleBattleAnimation
	.word	LinkOpponentHandleLinkStandbyMsg
	.word	LinkOpponentHandleResetActionMoveSelection
	.word	LinkOpponentHandleCmd55
	.word	LinkOpponentHandleBattleDebug
	.word	LinkOpponentCmdEnd
.text
	.align	2, 0
	.type	 nullsub_28,function
	.thumb_func
nullsub_28:
	bx	lr
.Lfe1:
	.size	 nullsub_28,.Lfe1-nullsub_28
	.align	2, 0
	.globl	SetControllerToLinkOpponent
	.type	 SetControllerToLinkOpponent,function
	.thumb_func
SetControllerToLinkOpponent:
	ldr	r1, .L4
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L4+0x8
	str	r1, [r0]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	LinkOpponentBufferRunCommand
.Lfe2:
	.size	 SetControllerToLinkOpponent,.Lfe2-SetControllerToLinkOpponent
	.align	2, 0
	.type	 LinkOpponentBufferRunCommand,function
	.thumb_func
LinkOpponentBufferRunCommand:
	push	{lr}
	ldr	r2, .L10
	ldr	r1, .L10+0x4
	ldr	r0, .L10+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L7	@cond_branch
	ldr	r0, .L10+0xc
	ldr	r0, [r0]
	lsl	r1, r3, #0x9
	add	r0, r0, #0x20
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0x39
	bhi	.L8	@cond_branch
	ldr	r0, .L10+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L7
.L11:
	.align	2, 0
.L10:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleResources
	.word	sLinkOpponentBufferCommands
.L8:
	bl	LinkOpponentBufferExecCompleted
.L7:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 LinkOpponentBufferRunCommand,.Lfe3-LinkOpponentBufferRunCommand
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy:
	push	{lr}
	ldr	r2, .L14
	ldr	r1, .L14+0x4
	ldr	r0, .L14+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L14+0xc
	cmp	r1, r0
	bne	.L13	@cond_branch
	bl	LinkOpponentBufferExecCompleted
.L13:
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe4:
	.size	 CompleteOnBattlerSpriteCallbackDummy,.Lfe4-CompleteOnBattlerSpriteCallbackDummy
	.align	2, 0
	.type	 CompleteOnBankSpriteCallbackDummy2,function
	.thumb_func
CompleteOnBankSpriteCallbackDummy2:
	push	{lr}
	ldr	r2, .L18
	ldr	r1, .L18+0x4
	ldr	r0, .L18+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L18+0xc
	cmp	r1, r0
	bne	.L17	@cond_branch
	bl	LinkOpponentBufferExecCompleted
.L17:
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe5:
	.size	 CompleteOnBankSpriteCallbackDummy2,.Lfe5-CompleteOnBankSpriteCallbackDummy2
	.align	2, 0
	.type	 sub_8064470,function
	.thumb_func
sub_8064470:
	push	{r4, r5, r6, lr}
	ldr	r5, .L22
	ldr	r6, .L22+0x4
	ldr	r4, .L22+0x8
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r2, r0, #0x2
	add	r0, r5, #0
	add	r0, r0, #0x1c
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r0, .L22+0xc
	cmp	r1, r0
	bne	.L21	@cond_branch
	add	r0, r2, r5
	ldrh	r0, [r0, #0x6]
	bl	FreeTrainerFrontPicPalette
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	bl	LinkOpponentBufferExecCompleted
.L21:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe6:
	.size	 sub_8064470,.Lfe6-sub_8064470
	.align	2, 0
	.type	 sub_80644D8,function
	.thumb_func
sub_80644D8:
	push	{r4, lr}
	ldr	r4, .L26
	ldr	r1, [r4]
	ldr	r3, .L26+0x4
	ldrb	r0, [r3]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L25	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	bl	LinkOpponentBufferExecCompleted
.L25:
	pop	{r4}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe7:
	.size	 sub_80644D8,.Lfe7-sub_80644D8
	.align	2, 0
	.type	 sub_8064520,function
	.thumb_func
sub_8064520:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r0, #0x0
	mov	r8, r0
	mov	r4, #0x0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L30	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L29	@cond_branch
	ldr	r0, .L43
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L29	@cond_branch
.L30:
	ldr	r2, .L43+0x4
	ldr	r1, .L43+0x8
	ldr	r3, .L43+0xc
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L43+0x10
	add	r7, r3, #0
	cmp	r1, r0
	bne	.L32	@cond_branch
	b	.L42
.L44:
	.align	2, 0
.L43:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.L29:
	ldr	r3, .L45
	ldr	r6, .L45+0x4
	ldr	r2, .L45+0x8
	ldrb	r4, [r2]
	add	r0, r4, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r3, #0
	add	r5, r5, #0x1c
	add	r0, r0, r5
	ldr	r3, [r0]
	ldr	r0, .L45+0xc
	add	r7, r2, #0
	cmp	r3, r0
	bne	.L33	@cond_branch
	mov	r0, #0x2
	eor	r4, r4, r0
	add	r0, r4, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	cmp	r0, r3
	bne	.L33	@cond_branch
	mov	r1, #0x1
	mov	r8, r1
.L33:
	mov	r4, #0x1
.L32:
	mov	r0, r8
	cmp	r0, #0
	bne	.LCB363
	b	.L28	@long jump
.LCB363:
.L42:
	cmp	r4, #0
	bne	.L36	@cond_branch
	ldrb	r1, [r7]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L35	@cond_branch
.L36:
	ldr	r1, .L45+0x10
	mov	ip, r1
	ldr	r0, [r1]
	ldr	r7, .L45+0x8
	ldrb	r2, [r7]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r3
	ldrb	r1, [r4, #0x1]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB400
	b	.L28	@long jump
.LCB400:
	mov	r6, #0x2
	add	r1, r6, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L28	@cond_branch
	ldrb	r1, [r4]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r1, ip
	ldr	r0, [r1]
	ldrb	r2, [r7]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	mov	r0, ip
	ldr	r2, [r0]
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	mov	r1, ip
	ldr	r2, [r1]
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L45+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	b	.L39
.L46:
	.align	2, 0
.L45:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	0x27f9
.L35:
	ldr	r3, .L47
	ldr	r0, [r3]
	ldrb	r1, [r7]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L28	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r3]
	ldrb	r2, [r7]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bne	.L39	@cond_branch
	ldr	r4, .L47+0x4
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
.L39:
	ldr	r0, .L47
	ldr	r0, [r0]
	ldr	r3, .L47+0x8
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x9]
	ldr	r1, .L47+0xc
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L47+0x10
	str	r1, [r0]
.L28:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L48:
	.align	2, 0
.L47:
	.word	gBattleSpritesDataPtr
	.word	0x27f9
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	sub_80644D8
.Lfe8:
	.size	 sub_8064520,.Lfe8-sub_8064520
	.align	2, 0
	.type	 sub_8064734,function
	.thumb_func
sub_8064734:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	mov	sl, r0
	ldr	r5, .L65
	ldr	r0, [r5]
	ldr	r4, .L65+0x4
	ldrb	r2, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r6, #0xc4
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L50	@cond_branch
	ldr	r0, .L65+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L65+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L50:
	ldr	r0, .L65+0x10
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L51	@cond_branch
	ldr	r2, [r5]
	ldrb	r1, [r4]
	mov	r0, #0x2
	add	r3, r0, #0
	eor	r3, r3, r1
	ldr	r1, [r2, #0x4]
	lsl	r2, r3, #0x1
	add	r0, r2, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L51	@cond_branch
	ldr	r0, .L65+0x8
	add	r0, r2, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L65+0xc
	add	r1, r1, r0
	add	r0, r3, #0
	bl	TryShinyAnimation
.L51:
	ldr	r3, .L65
	ldr	r0, [r3]
	ldr	r2, .L65+0x4
	ldrb	r5, [r2]
	ldr	r4, [r0, #0x4]
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r6, r0, r4
	ldrb	r1, [r6]
	mov	r0, #0x8
	mov	ip, r0
	and	r0, r0, r1
	mov	r8, r3
	mov	r9, r2
	cmp	r0, #0
	bne	.L52	@cond_branch
	mov	r7, #0x2
	add	r1, r7, #0
	eor	r1, r1, r5
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, ip
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L52	@cond_branch
	ldrb	r1, [r6, #0x1]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L53	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L54	@cond_branch
	ldr	r0, .L65+0x10
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L54	@cond_branch
	ldr	r4, .L65+0x14
	mov	r1, r9
	ldrb	r0, [r1]
	add	r1, r7, #0
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L65+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L65+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	mov	r1, r9
	ldrb	r0, [r1]
	eor	r0, r0, r7
	bl	sub_8076918
	mov	r1, r9
	ldrb	r0, [r1]
	eor	r0, r0, r7
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L54:
	ldr	r5, .L65+0x14
	ldr	r4, .L65+0x4
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L65+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L65+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r4]
	bl	sub_8076918
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L53:
	ldr	r4, .L65
	ldr	r0, [r4]
	ldr	r3, .L65+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r8, r4
	mov	r9, r3
.L52:
	mov	r1, r8
	ldr	r0, [r1]
	mov	r1, r9
	ldrb	r2, [r1]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x80
	bne	.L55	@cond_branch
	mov	r1, #0x2
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L55	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L55	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	mov	r1, r9
	ldrb	r2, [r1]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L56	@cond_branch
	ldr	r0, .L65+0x10
	ldr	r0, [r0]
	mov	r1, #0x42
	and	r0, r0, r1
	cmp	r0, #0x42
	bne	.L57	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L56	@cond_branch
	ldr	r0, .L65+0x18
	bl	m4aMPlayContinue
	b	.L56
.L66:
	.align	2, 0
.L65:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gHealthboxSpriteIds
	.word	gMPlayInfo_BGM
.L57:
	ldr	r0, .L67
	ldr	r1, .L67+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L56:
	ldr	r0, .L67+0x8
	ldr	r2, [r0]
	ldr	r0, .L67+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r0, #0x1
	mov	sl, r0
.L55:
	mov	r1, sl
	cmp	r1, #0
	bne	.LCB904
	b	.L49	@long jump
.LCB904:
	ldr	r2, .L67+0x10
	ldr	r0, .L67+0x14
	ldr	r5, .L67+0xc
	ldrb	r3, [r5]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r4, [r0]
	ldr	r0, .L67+0x18
	cmp	r4, r0
	beq	.LCB920
	b	.L49	@long jump
.LCB920:
	ldr	r0, .L67+0x1c
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r4
	beq	.LCB930
	b	.L49	@long jump
.LCB930:
	ldr	r0, .L67+0x20
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L62	@cond_branch
	add	r0, r3, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bne	.L62	@cond_branch
	ldr	r3, .L67+0x8
	ldr	r0, [r3]
	ldrb	r2, [r5]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x9]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L49	@cond_branch
	ldr	r0, [r3]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
.L62:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L64	@cond_branch
	ldr	r0, .L67+0x20
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L64	@cond_branch
	ldr	r1, .L67+0x14
	ldr	r5, .L67+0xc
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L67+0x10
	add	r0, r0, r1
	bl	DestroySprite
	ldrb	r0, [r5]
	eor	r4, r4, r0
	ldr	r1, .L67+0x24
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L67+0x28
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
.L64:
	ldr	r1, .L67+0x14
	ldr	r4, .L67+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L67+0x10
	add	r0, r0, r1
	bl	DestroySprite
	ldrb	r5, [r4]
	ldr	r1, .L67+0x24
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L67+0x28
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r3, .L67+0x8
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r0, [r3]
	ldrb	r2, [r4]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r0, [r3]
	ldrb	r2, [r4]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r1, .L67+0x2c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L67+0x30
	str	r1, [r0]
.L49:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerControllerFuncs
	.word	sub_8064520
.Lfe9:
	.size	 sub_8064734,.Lfe9-sub_8064734
	.align	2, 0
	.type	 sub_8064B04,function
	.thumb_func
sub_8064B04:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L74
	ldr	r0, .L74+0x4
	ldr	r7, .L74+0x8
	ldrb	r3, [r7]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r2, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r0, .L74+0xc
	cmp	r1, r0
	bne	.L70	@cond_branch
	add	r0, r2, r4
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L70	@cond_branch
	ldr	r6, .L74+0x10
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r4, r3, #0x1
	add	r0, r4, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r5, [r2]
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L71	@cond_branch
	ldr	r0, .L74+0x14
	add	r0, r4, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L74+0x18
	add	r1, r1, r0
	add	r0, r3, #0
	bl	TryShinyAnimation
	b	.L70
.L75:
	.align	2, 0
.L74:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L71:
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L70	@cond_branch
	mov	r0, #0x7f
	and	r0, r0, r5
	strb	r0, [r2]
	ldr	r0, [r6]
	ldrb	r2, [r7]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L76
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	bl	LinkOpponentBufferExecCompleted
.L70:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	0x27f9
.Lfe10:
	.size	 sub_8064B04,.Lfe10-sub_8064B04
	.align	2, 0
	.type	 CompleteOnHealthbarDone,function
	.thumb_func
CompleteOnHealthbarDone:
	push	{r4, r5, r6, lr}
	ldr	r6, .L81
	ldrb	r0, [r6]
	ldr	r5, .L81+0x4
	add	r1, r0, r5
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L79	@cond_branch
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
	b	.L80
.L82:
	.align	2, 0
.L81:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.L79:
	bl	LinkOpponentBufferExecCompleted
.L80:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 CompleteOnHealthbarDone,.Lfe11-CompleteOnHealthbarDone
	.align	2, 0
	.type	 sub_8064C14,function
	.thumb_func
sub_8064C14:
	push	{lr}
	ldr	r2, .L85
	ldr	r0, .L85+0x4
	ldr	r1, .L85+0x8
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L84	@cond_branch
	ldr	r0, .L85+0xc
	add	r0, r3, r0
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	LinkOpponentBufferExecCompleted
.L84:
	pop	{r0}
	bx	r0
.L86:
	.align	2, 0
.L85:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.Lfe12:
	.size	 sub_8064C14,.Lfe12-sub_8064C14
	.align	2, 0
	.type	 sub_8064C58,function
	.thumb_func
sub_8064C58:
	push	{r4, r5, r6, lr}
	ldr	r0, .L89
	ldr	r0, [r0]
	ldr	r6, .L89+0x4
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L88	@cond_branch
	ldr	r5, .L89+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L89+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	HideBattlerShadowSprite
	ldr	r1, .L89+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	LinkOpponentBufferExecCompleted
.L88:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L90:
	.align	2, 0
.L89:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe13:
	.size	 sub_8064C58,.Lfe13-sub_8064C58
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter,function
	.thumb_func
CompleteOnInactiveTextPrinter:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L92	@cond_branch
	bl	LinkOpponentBufferExecCompleted
.L92:
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 CompleteOnInactiveTextPrinter,.Lfe14-CompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 DoHitAnimBlinkSpriteEffect,function
	.thumb_func
DoHitAnimBlinkSpriteEffect:
	push	{r4, lr}
	ldr	r1, .L97
	ldr	r0, .L97+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L97+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L94	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L97+0xc
	strb	r3, [r0]
	bl	LinkOpponentBufferExecCompleted
	b	.L95
.L98:
	.align	2, 0
.L97:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	gDoingBattleAnim
.L94:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L96	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L96:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L95:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 DoHitAnimBlinkSpriteEffect,.Lfe15-DoHitAnimBlinkSpriteEffect
	.align	2, 0
	.type	 sub_8064D60,function
	.thumb_func
sub_8064D60:
	push	{r4, lr}
	ldr	r2, .L102
	ldr	r0, .L102+0x4
	ldr	r4, .L102+0x8
	ldrb	r3, [r4]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L102+0xc
	cmp	r1, r0
	bne	.L100	@cond_branch
	ldr	r0, .L102+0x10
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L101	@cond_branch
	add	r0, r3, #0
	add	r1, r3, #0
	add	r2, r3, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
.L101:
	ldr	r0, .L102+0x14
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L102+0x18
	str	r0, [r1]
.L100:
	pop	{r4}
	pop	{r0}
	bx	r0
.L103:
	.align	2, 0
.L102:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_8064DD0
.Lfe16:
	.size	 sub_8064D60,.Lfe16-sub_8064D60
	.align	2, 0
	.type	 sub_8064DD0,function
	.thumb_func
sub_8064DD0:
	push	{r4, lr}
	ldr	r0, .L108
	ldr	r0, [r0]
	ldr	r4, .L108+0x4
	ldrb	r1, [r4]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L105	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L105	@cond_branch
	ldr	r2, .L108+0x8
	ldr	r1, .L108+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L108+0x10
	cmp	r1, r0
	beq	.L107	@cond_branch
	ldr	r0, .L108+0x14
	cmp	r1, r0
	bne	.L105	@cond_branch
.L107:
	ldr	r0, .L108+0x18
	ldr	r1, .L108+0x1c
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	bl	LinkOpponentBufferExecCompleted
.L105:
	pop	{r4}
	pop	{r0}
	bx	r0
.L109:
	.align	2, 0
.L108:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCallbackDummy
	.word	SpriteCallbackDummy_2
	.word	gMPlayInfo_BGM
	.word	0xffff
.Lfe17:
	.size	 sub_8064DD0,.Lfe17-sub_8064DD0
	.align	2, 0
	.type	 sub_8064E50,function
	.thumb_func
sub_8064E50:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L112
	ldr	r0, [r4]
	ldr	r5, .L112+0x4
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r1, [r3, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L111	@cond_branch
	ldr	r7, .L112+0x8
	ldr	r6, .L112+0xc
	add	r0, r2, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r7, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L112+0x10
	cmp	r1, r0
	bne	.L111	@cond_branch
	ldrb	r1, [r3]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, [r4]
	ldrb	r2, [r5]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L112+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r4, .L112+0x18
	ldrb	r1, [r5]
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L112+0x1c
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L112+0x20
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r5]
	bl	sub_8076918
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldrb	r0, [r5]
	bl	CopyBattleSpriteInvisibility
	ldr	r1, .L112+0x24
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L112+0x28
	str	r1, [r0]
.L111:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCallbackDummy
	.word	0x27f9
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerControllerFuncs
	.word	sub_8064D60
.Lfe18:
	.size	 sub_8064E50,.Lfe18-sub_8064E50
	.align	2, 0
	.type	 sub_8064F40,function
	.thumb_func
sub_8064F40:
	push	{r4, r5, r6, lr}
	ldr	r6, .L117
	ldr	r0, [r6]
	ldr	r5, .L117+0x4
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L115	@cond_branch
	ldr	r0, .L117+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L117+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L115:
	ldr	r4, .L117+0x10
	ldr	r0, .L117+0x14
	ldrb	r2, [r5]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r3, r0
	ldr	r1, [r0]
	ldr	r0, .L117+0x18
	cmp	r1, r0
	bne	.L116	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L116	@cond_branch
	add	r0, r3, r4
	bl	DestroySprite
	ldrb	r4, [r5]
	ldr	r1, .L117+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L117+0xc
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r1, .L117+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L117+0x20
	str	r1, [r0]
.L116:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L118:
	.align	2, 0
.L117:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	sub_8064E50
.Lfe19:
	.size	 sub_8064F40,.Lfe19-sub_8064F40
	.align	2, 0
	.type	 CompleteOnFinishedStatusAnimation,function
	.thumb_func
CompleteOnFinishedStatusAnimation:
	push	{lr}
	ldr	r0, .L121
	ldr	r2, [r0]
	ldr	r0, .L121+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L120	@cond_branch
	bl	LinkOpponentBufferExecCompleted
.L120:
	pop	{r0}
	bx	r0
.L122:
	.align	2, 0
.L121:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe20:
	.size	 CompleteOnFinishedStatusAnimation,.Lfe20-CompleteOnFinishedStatusAnimation
	.align	2, 0
	.type	 CompleteOnFinishedBattleAnimation,function
	.thumb_func
CompleteOnFinishedBattleAnimation:
	push	{lr}
	ldr	r0, .L125
	ldr	r2, [r0]
	ldr	r0, .L125+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L124	@cond_branch
	bl	LinkOpponentBufferExecCompleted
.L124:
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe21:
	.size	 CompleteOnFinishedBattleAnimation,.Lfe21-CompleteOnFinishedBattleAnimation
	.align	2, 0
	.type	 LinkOpponentBufferExecCompleted,function
	.thumb_func
LinkOpponentBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L130
	ldr	r4, .L130+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L130+0x8
	str	r1, [r0]
	ldr	r0, .L130+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L128	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r0, .L130+0x10
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x20
	add	r1, r1, r0
	mov	r0, #0x39
	strb	r0, [r1]
	b	.L129
.L131:
	.align	2, 0
.L130:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	LinkOpponentBufferRunCommand
	.word	gBattleTypeFlags
	.word	gBattleResources
.L128:
	ldr	r2, .L132
	ldr	r1, .L132+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L129:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L133:
	.align	2, 0
.L132:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe22:
	.size	 LinkOpponentBufferExecCompleted,.Lfe22-LinkOpponentBufferExecCompleted
	.align	2, 0
	.type	 LinkOpponentHandleGetMonData,function
	.thumb_func
LinkOpponentHandleGetMonData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x100
	mov	r6, #0x0
	ldr	r0, .L143
	ldr	r1, [r0]
	ldr	r0, .L143+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L135	@cond_branch
	ldr	r0, .L143+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	CopyLinkOpponentMonData
	add	r6, r0, #0
	b	.L136
.L144:
	.align	2, 0
.L143:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L135:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L140:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L141	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	CopyLinkOpponentMonData
	add	r6, r6, r0
.L141:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L140	@cond_branch
.L136:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	BtlController_EmitDataTransfer
	bl	LinkOpponentBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 LinkOpponentHandleGetMonData,.Lfe23-LinkOpponentHandleGetMonData
	.align	2, 0
	.type	 CopyLinkOpponentMonData,function
	.thumb_func
CopyLinkOpponentMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x94
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r3, .L234
	ldr	r1, [r3]
	ldr	r2, .L234+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r4, r2, #0
	cmp	r0, #0x3b
	bls	.LCB2130
	bl	.L146	@far jump
.LCB2130:
	lsl	r0, r0, #0x2
	ldr	r1, .L234+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L235:
	.align	2, 0
.L234:
	.word	gBattleResources
	.word	gActiveBattler
	.word	.L228
	.align	2, 0
	.align	2, 0
.L228:
	.word	.L147
	.word	.L158
	.word	.L159
	.word	.L160
	.word	.L174
	.word	.L174
	.word	.L174
	.word	.L174
	.word	.L175
	.word	.L184
	.word	.L184
	.word	.L184
	.word	.L184
	.word	.L146
	.word	.L146
	.word	.L146
	.word	.L146
	.word	.L185
	.word	.L186
	.word	.L187
	.word	.L188
	.word	.L189
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L193
	.word	.L194
	.word	.L195
	.word	.L196
	.word	.L197
	.word	.L198
	.word	.L199
	.word	.L200
	.word	.L201
	.word	.L202
	.word	.L203
	.word	.L204
	.word	.L205
	.word	.L206
	.word	.L207
	.word	.L208
	.word	.L209
	.word	.L210
	.word	.L211
	.word	.L212
	.word	.L213
	.word	.L214
	.word	.L215
	.word	.L216
	.word	.L217
	.word	.L218
	.word	.L219
	.word	.L220
	.word	.L221
	.word	.L222
	.word	.L223
	.word	.L224
	.word	.L225
	.word	.L226
	.word	.L227
.L147:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L236
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r3, sp
	ldr	r2, .L236+0x4
	add	r1, r2, #0
	and	r0, r0, r1
	ldrh	r2, [r3]
	ldr	r1, .L236+0x8
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3]
	add	r0, r4, #0
	mov	r1, #0x59
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x3
	ldrb	r2, [r3, #0x1]
	mov	r1, #0x7
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x30]
	mov	r6, #0x0
	mov	r0, #0x25
	add	r0, r0, sp
	mov	r9, r0
	mov	r1, #0x3d
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2d
	str	r2, [sp, #0x84]
	mov	r0, sp
	add	r0, r0, #0x2c
	str	r0, [sp, #0x80]
	mov	r1, sp
	add	r1, r1, #0x6c
	str	r1, [sp, #0x90]
	add	r2, r2, #0x5
	str	r2, [sp, #0x88]
	add	r0, r0, #0x12
	str	r0, [sp, #0x8c]
	mov	r8, r4
	add	r4, sp, #0xc
.L151:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L151	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L236
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x84]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L236+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L236+0x10
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L236+0x14
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x50]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x80]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2a]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x58]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x90]
	bl	GetMonData
	ldr	r0, [sp, #0x88]
	ldr	r1, [sp, #0x90]
	bl	StringCopy10
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L156:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x5b
	bls	.L156	@cond_branch
	b	.L146
.L237:
	.align	2, 0
.L236:
	.word	gEnemyParty
	.word	0x7ff
	.word	-0x800
	.word	-0x3e1
	.word	-0xf8001
	.word	-0x1f1
.L158:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L238
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L230
.L239:
	.align	2, 0
.L238:
	.word	gEnemyParty
.L159:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L240
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L230
.L241:
	.align	2, 0
.L240:
	.word	gEnemyParty
.L160:
	mov	r6, #0x0
	add	r2, sp, #0x5c
	mov	r9, r2
	add	r0, sp, #0x64
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L242
	add	r4, r1, r0
	mov	r8, r9
.L164:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L164	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L242
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L169:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L169	@cond_branch
	b	.L146
.L243:
	.align	2, 0
.L242:
	.word	gEnemyParty
.L174:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L244
	add	r0, r0, r1
	ldr	r2, [r3]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x21
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0x9
	b	.L230
.L245:
	.align	2, 0
.L244:
	.word	gEnemyParty
.L175:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L246
	mov	r8, r2
.L179:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L179	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L246
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L146
.L247:
	.align	2, 0
.L246:
	.word	gEnemyParty
.L184:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L248
	add	r0, r0, r1
	ldr	r2, [r3]
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x21
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0x8
	b	.L231
.L249:
	.align	2, 0
.L248:
	.word	gEnemyParty
.L185:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L250
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L232
.L251:
	.align	2, 0
.L250:
	.word	gEnemyParty
.L186:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L252
	add	r0, r0, r1
	mov	r1, #0x19
.L232:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L146
.L253:
	.align	2, 0
.L252:
	.word	gEnemyParty
.L187:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L254
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L231
.L255:
	.align	2, 0
.L254:
	.word	gEnemyParty
.L188:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L256
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L231
.L257:
	.align	2, 0
.L256:
	.word	gEnemyParty
.L189:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L258
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L231
.L259:
	.align	2, 0
.L258:
	.word	gEnemyParty
.L190:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L260
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L231
.L261:
	.align	2, 0
.L260:
	.word	gEnemyParty
.L191:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L262
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L231
.L263:
	.align	2, 0
.L262:
	.word	gEnemyParty
.L192:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L264
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L231
.L265:
	.align	2, 0
.L264:
	.word	gEnemyParty
.L193:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L266
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L231
.L267:
	.align	2, 0
.L266:
	.word	gEnemyParty
.L194:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L268
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L231
.L269:
	.align	2, 0
.L268:
	.word	gEnemyParty
.L195:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L270
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L231
.L271:
	.align	2, 0
.L270:
	.word	gEnemyParty
.L196:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L272
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L231
.L273:
	.align	2, 0
.L272:
	.word	gEnemyParty
.L197:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L274
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L231
.L275:
	.align	2, 0
.L274:
	.word	gEnemyParty
.L198:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L276
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L231
.L277:
	.align	2, 0
.L276:
	.word	gEnemyParty
.L199:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L278
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L146
.L279:
	.align	2, 0
.L278:
	.word	gEnemyParty
.L200:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L280
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L231
.L281:
	.align	2, 0
.L280:
	.word	gEnemyParty
.L201:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L282
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L231
.L283:
	.align	2, 0
.L282:
	.word	gEnemyParty
.L202:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L284
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L231
.L285:
	.align	2, 0
.L284:
	.word	gEnemyParty
.L203:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L286
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L231
.L287:
	.align	2, 0
.L286:
	.word	gEnemyParty
.L204:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L288
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L231
.L289:
	.align	2, 0
.L288:
	.word	gEnemyParty
.L205:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L290
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L231
.L291:
	.align	2, 0
.L290:
	.word	gEnemyParty
.L206:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L292
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L233
.L293:
	.align	2, 0
.L292:
	.word	gEnemyParty
.L207:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L294
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L230
.L295:
	.align	2, 0
.L294:
	.word	gEnemyParty
.L208:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L296
	add	r0, r0, r1
	mov	r1, #0x37
.L233:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L146
.L297:
	.align	2, 0
.L296:
	.word	gEnemyParty
.L209:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L298
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L231
.L299:
	.align	2, 0
.L298:
	.word	gEnemyParty
.L210:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L300
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L230
.L301:
	.align	2, 0
.L300:
	.word	gEnemyParty
.L211:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L302
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L230
.L303:
	.align	2, 0
.L302:
	.word	gEnemyParty
.L212:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L304
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L230
.L305:
	.align	2, 0
.L304:
	.word	gEnemyParty
.L213:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L306
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L230
.L307:
	.align	2, 0
.L306:
	.word	gEnemyParty
.L214:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L308
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L230
.L309:
	.align	2, 0
.L308:
	.word	gEnemyParty
.L215:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L310
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L230
.L311:
	.align	2, 0
.L310:
	.word	gEnemyParty
.L216:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L312
	add	r0, r0, r1
	mov	r1, #0x3f
.L230:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L146
.L313:
	.align	2, 0
.L312:
	.word	gEnemyParty
.L217:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L314
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L231
.L315:
	.align	2, 0
.L314:
	.word	gEnemyParty
.L218:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L316
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L231
.L317:
	.align	2, 0
.L316:
	.word	gEnemyParty
.L219:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L318
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L231
.L319:
	.align	2, 0
.L318:
	.word	gEnemyParty
.L220:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L320
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L231
.L321:
	.align	2, 0
.L320:
	.word	gEnemyParty
.L221:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L322
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L231
.L323:
	.align	2, 0
.L322:
	.word	gEnemyParty
.L222:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L324
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L231
.L325:
	.align	2, 0
.L324:
	.word	gEnemyParty
.L223:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L326
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L231
.L327:
	.align	2, 0
.L326:
	.word	gEnemyParty
.L224:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L328
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L231
.L329:
	.align	2, 0
.L328:
	.word	gEnemyParty
.L225:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L330
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L231
.L331:
	.align	2, 0
.L330:
	.word	gEnemyParty
.L226:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L332
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L231
.L333:
	.align	2, 0
.L332:
	.word	gEnemyParty
.L227:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L334
	add	r0, r0, r1
	mov	r1, #0x36
.L231:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L146:
	add	r0, r6, #0
	add	sp, sp, #0x94
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L335:
	.align	2, 0
.L334:
	.word	gEnemyParty
.Lfe24:
	.size	 CopyLinkOpponentMonData,.Lfe24-CopyLinkOpponentMonData
	.align	2, 0
	.type	 LinkOpponentHandleGetRawMonData,function
	.thumb_func
LinkOpponentHandleGetRawMonData:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 LinkOpponentHandleGetRawMonData,.Lfe25-LinkOpponentHandleGetRawMonData
	.align	2, 0
	.type	 LinkOpponentHandleSetMonData,function
	.thumb_func
LinkOpponentHandleSetMonData:
	push	{r4, r5, lr}
	ldr	r0, .L346
	ldr	r1, [r0]
	ldr	r0, .L346+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L338	@cond_branch
	ldr	r0, .L346+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	SetLinkOpponentMonData
	b	.L339
.L347:
	.align	2, 0
.L346:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L338:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L343:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L344	@cond_branch
	add	r0, r5, #0
	bl	SetLinkOpponentMonData
.L344:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L343	@cond_branch
.L339:
	bl	LinkOpponentBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 LinkOpponentHandleSetMonData,.Lfe26-LinkOpponentHandleSetMonData
	.align	2, 0
	.type	 SetLinkOpponentMonData,function
	.thumb_func
SetLinkOpponentMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L420
	ldr	r4, .L420+0x4
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x20
	ldr	r1, [r3]
	add	r0, r1, r0
	add	r0, r0, #0x3
	mov	r9, r0
	mov	r8, r9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r7, r3, #0
	add	r5, r4, #0
	cmp	r0, #0x3b
	bls	.LCB3563
	bl	.L349	@far jump
.LCB3563:
	lsl	r0, r0, #0x2
	ldr	r1, .L420+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L421:
	.align	2, 0
.L420:
	.word	gBattleResources
	.word	gActiveBattler
	.word	.L416
	.align	2, 0
	.align	2, 0
.L416:
	.word	.L350
	.word	.L356
	.word	.L357
	.word	.L358
	.word	.L367
	.word	.L367
	.word	.L367
	.word	.L367
	.word	.L368
	.word	.L372
	.word	.L372
	.word	.L372
	.word	.L372
	.word	.L349
	.word	.L349
	.word	.L349
	.word	.L349
	.word	.L373
	.word	.L374
	.word	.L375
	.word	.L376
	.word	.L377
	.word	.L378
	.word	.L379
	.word	.L380
	.word	.L381
	.word	.L382
	.word	.L383
	.word	.L384
	.word	.L385
	.word	.L386
	.word	.L387
	.word	.L388
	.word	.L389
	.word	.L390
	.word	.L391
	.word	.L392
	.word	.L393
	.word	.L394
	.word	.L395
	.word	.L396
	.word	.L397
	.word	.L398
	.word	.L399
	.word	.L400
	.word	.L401
	.word	.L402
	.word	.L403
	.word	.L404
	.word	.L405
	.word	.L406
	.word	.L407
	.word	.L408
	.word	.L409
	.word	.L410
	.word	.L411
	.word	.L412
	.word	.L413
	.word	.L414
	.word	.L415
.L350:
	mov	r1, r8
	ldrh	r0, [r1]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	mov	r1, sp
	strh	r0, [r1]
	mov	r1, r8
	ldrb	r0, [r1, #0x1]
	lsr	r0, r0, #0x3
	mov	r5, sp
	add	r5, r5, #0x2
	strb	r0, [r5]
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L422
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x59
	add	r2, r5, #0
	bl	SetMonData
	mov	r2, r8
	add	r2, r2, #0x30
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r7, #0x0
	mov	r0, r8
	add	r0, r0, #0x3d
	str	r0, [sp, #0x28]
	mov	r1, r8
	add	r1, r1, #0x2d
	str	r1, [sp, #0x20]
	add	r0, r0, #0xb
	str	r0, [sp, #0x2c]
	mov	r1, #0x3
	add	r1, r1, sp
	mov	sl, r1
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	mov	r1, r8
	add	r1, r1, #0x50
	str	r1, [sp, #0x34]
	sub	r0, r0, #0x20
	str	r0, [sp, #0x1c]
	sub	r1, r1, #0x26
	str	r1, [sp, #0x18]
	add	r0, r0, #0x2
	str	r0, [sp, #0x24]
	sub	r1, r1, #0x28
	str	r1, [sp, #0x4]
	sub	r0, r0, #0x2a
	str	r0, [sp, #0x8]
	add	r1, r1, #0x4
	str	r1, [sp, #0xc]
	add	r0, r0, #0x4
	str	r0, [sp, #0x10]
	add	r1, r1, #0x4
	str	r1, [sp, #0x14]
	mov	r9, r4
	mov	r4, r8
	add	r4, r4, #0x25
	mov	r5, r8
	add	r5, r5, #0xc
.L354:
	add	r1, r7, #0
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r5, #0
	bl	SetMonData
	add	r1, r7, #0
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	add	r4, r4, #0x1
	add	r5, r5, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L354	@cond_branch
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L422
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrh	r0, [r1, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldr	r0, [r1, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrh	r0, [r1, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sl
	bl	SetMonData
	mov	r1, r8
	ldrb	r0, [r1, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x34]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	b	.L349
.L423:
	.align	2, 0
.L422:
	.word	gEnemyParty
.L356:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L424
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0xb
	bl	SetMonData
	b	.L349
.L425:
	.align	2, 0
.L424:
	.word	gEnemyParty
.L357:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L426
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0xc
	bl	SetMonData
	b	.L349
.L427:
	.align	2, 0
.L426:
	.word	gEnemyParty
.L358:
	mov	r7, #0x0
	mov	r0, #0xc
	add	r0, r0, r9
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, .L428
	add	r1, r1, r0
	mov	r8, r1
	mov	r5, r9
	add	r5, r5, #0x8
	mov	r4, r9
.L362:
	add	r1, r7, #0
	add	r1, r1, #0xd
	mov	r0, r8
	add	r2, r4, #0
	bl	SetMonData
	add	r1, r7, #0
	add	r1, r1, #0x11
	mov	r0, r8
	add	r2, r5, #0
	bl	SetMonData
	add	r5, r5, #0x1
	add	r4, r4, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L362	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L428
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, sl
	bl	SetMonData
	b	.L349
.L429:
	.align	2, 0
.L428:
	.word	gEnemyParty
.L367:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L430
	add	r0, r0, r1
	ldr	r2, [r7]
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L418
.L431:
	.align	2, 0
.L430:
	.word	gEnemyParty
.L368:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L432
	add	r4, r4, r0
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x3
	add	r0, r4, #0
	mov	r1, #0x11
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x4
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x5
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x6
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x7
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L349
.L433:
	.align	2, 0
.L432:
	.word	gEnemyParty
.L372:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L434
	add	r0, r0, r1
	ldr	r2, [r7]
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L418:
	add	r3, r3, #0x20
	add	r2, r2, r3
	add	r2, r2, #0x3
	bl	SetMonData
	b	.L349
.L435:
	.align	2, 0
.L434:
	.word	gEnemyParty
.L373:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L436
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1
	bl	SetMonData
	b	.L349
.L437:
	.align	2, 0
.L436:
	.word	gEnemyParty
.L374:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L438
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x19
	bl	SetMonData
	b	.L349
.L439:
	.align	2, 0
.L438:
	.word	gEnemyParty
.L375:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L440
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1a
	bl	SetMonData
	b	.L349
.L441:
	.align	2, 0
.L440:
	.word	gEnemyParty
.L376:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L442
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1b
	bl	SetMonData
	b	.L349
.L443:
	.align	2, 0
.L442:
	.word	gEnemyParty
.L377:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L444
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1c
	bl	SetMonData
	b	.L349
.L445:
	.align	2, 0
.L444:
	.word	gEnemyParty
.L378:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L446
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1d
	bl	SetMonData
	b	.L349
.L447:
	.align	2, 0
.L446:
	.word	gEnemyParty
.L379:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L448
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1e
	bl	SetMonData
	b	.L349
.L449:
	.align	2, 0
.L448:
	.word	gEnemyParty
.L380:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L450
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x1f
	bl	SetMonData
	b	.L349
.L451:
	.align	2, 0
.L450:
	.word	gEnemyParty
.L381:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L452
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x20
	bl	SetMonData
	b	.L349
.L453:
	.align	2, 0
.L452:
	.word	gEnemyParty
.L382:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L454
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x22
	bl	SetMonData
	b	.L349
.L455:
	.align	2, 0
.L454:
	.word	gEnemyParty
.L383:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L456
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x23
	bl	SetMonData
	b	.L349
.L457:
	.align	2, 0
.L456:
	.word	gEnemyParty
.L384:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L458
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x24
	bl	SetMonData
	b	.L349
.L459:
	.align	2, 0
.L458:
	.word	gEnemyParty
.L385:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L460
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x25
	bl	SetMonData
	b	.L349
.L461:
	.align	2, 0
.L460:
	.word	gEnemyParty
.L386:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L462
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x26
	bl	SetMonData
	b	.L349
.L463:
	.align	2, 0
.L462:
	.word	gEnemyParty
.L387:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L464
	add	r4, r4, r0
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x3
	add	r0, r4, #0
	mov	r1, #0x27
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x4
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x5
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x6
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x7
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r2, [r7]
	add	r2, r2, r0
	add	r2, r2, #0x8
	add	r0, r4, #0
	b	.L419
.L465:
	.align	2, 0
.L464:
	.word	gEnemyParty
.L388:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L466
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x27
	bl	SetMonData
	b	.L349
.L467:
	.align	2, 0
.L466:
	.word	gEnemyParty
.L389:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L468
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x28
	bl	SetMonData
	b	.L349
.L469:
	.align	2, 0
.L468:
	.word	gEnemyParty
.L390:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L470
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x29
	bl	SetMonData
	b	.L349
.L471:
	.align	2, 0
.L470:
	.word	gEnemyParty
.L391:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L472
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2a
	bl	SetMonData
	b	.L349
.L473:
	.align	2, 0
.L472:
	.word	gEnemyParty
.L392:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L474
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2b
	bl	SetMonData
	b	.L349
.L475:
	.align	2, 0
.L474:
	.word	gEnemyParty
.L393:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L476
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
.L419:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L349
.L477:
	.align	2, 0
.L476:
	.word	gEnemyParty
.L394:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L478
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x0
	bl	SetMonData
	b	.L349
.L479:
	.align	2, 0
.L478:
	.word	gEnemyParty
.L395:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L480
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x9
	bl	SetMonData
	b	.L349
.L481:
	.align	2, 0
.L480:
	.word	gEnemyParty
.L396:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L482
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x37
	bl	SetMonData
	b	.L349
.L483:
	.align	2, 0
.L482:
	.word	gEnemyParty
.L397:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L484
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x38
	bl	SetMonData
	b	.L349
.L485:
	.align	2, 0
.L484:
	.word	gEnemyParty
.L398:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L486
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x39
	bl	SetMonData
	b	.L349
.L487:
	.align	2, 0
.L486:
	.word	gEnemyParty
.L399:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L488
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3a
	bl	SetMonData
	b	.L349
.L489:
	.align	2, 0
.L488:
	.word	gEnemyParty
.L400:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L490
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3b
	bl	SetMonData
	b	.L349
.L491:
	.align	2, 0
.L490:
	.word	gEnemyParty
.L401:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L492
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3c
	bl	SetMonData
	b	.L349
.L493:
	.align	2, 0
.L492:
	.word	gEnemyParty
.L402:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L494
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3d
	bl	SetMonData
	b	.L349
.L495:
	.align	2, 0
.L494:
	.word	gEnemyParty
.L403:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L496
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3e
	bl	SetMonData
	b	.L349
.L497:
	.align	2, 0
.L496:
	.word	gEnemyParty
.L404:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L498
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x3f
	bl	SetMonData
	b	.L349
.L499:
	.align	2, 0
.L498:
	.word	gEnemyParty
.L405:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L500
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x16
	bl	SetMonData
	b	.L349
.L501:
	.align	2, 0
.L500:
	.word	gEnemyParty
.L406:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L502
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x17
	bl	SetMonData
	b	.L349
.L503:
	.align	2, 0
.L502:
	.word	gEnemyParty
.L407:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L504
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x18
	bl	SetMonData
	b	.L349
.L505:
	.align	2, 0
.L504:
	.word	gEnemyParty
.L408:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L506
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x21
	bl	SetMonData
	b	.L349
.L507:
	.align	2, 0
.L506:
	.word	gEnemyParty
.L409:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L508
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x2f
	bl	SetMonData
	b	.L349
.L509:
	.align	2, 0
.L508:
	.word	gEnemyParty
.L410:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L510
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x30
	bl	SetMonData
	b	.L349
.L511:
	.align	2, 0
.L510:
	.word	gEnemyParty
.L411:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L512
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x32
	bl	SetMonData
	b	.L349
.L513:
	.align	2, 0
.L512:
	.word	gEnemyParty
.L412:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L514
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x33
	bl	SetMonData
	b	.L349
.L515:
	.align	2, 0
.L514:
	.word	gEnemyParty
.L413:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L516
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x34
	bl	SetMonData
	b	.L349
.L517:
	.align	2, 0
.L516:
	.word	gEnemyParty
.L414:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L518
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x35
	bl	SetMonData
	b	.L349
.L519:
	.align	2, 0
.L518:
	.word	gEnemyParty
.L415:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L520
	add	r0, r0, r1
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r2, [r7]
	add	r2, r2, r1
	add	r2, r2, #0x3
	mov	r1, #0x36
	bl	SetMonData
.L349:
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L521:
	.align	2, 0
.L520:
	.word	gEnemyParty
.Lfe27:
	.size	 SetLinkOpponentMonData,.Lfe27-SetLinkOpponentMonData
	.align	2, 0
	.type	 LinkOpponentHandleSetRawMonData,function
	.thumb_func
LinkOpponentHandleSetRawMonData:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L528
	ldr	r7, .L528+0x4
	ldrb	r3, [r7]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r5, .L528+0x8
	ldr	r2, [r5]
	lsl	r3, r3, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x21
	add	r0, r0, r3
	ldrb	r0, [r0]
	ldr	r1, .L528+0xc
	add	r0, r0, r1
	add	r6, r4, r0
	mov	r4, #0x0
	add	r2, r2, #0x22
	add	r2, r2, r3
	ldrb	r2, [r2]
	cmp	r4, r2
	bcs	.L524	@cond_branch
	add	r3, r7, #0
.L526:
	add	r2, r6, r4
	ldr	r1, [r5]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x3
	add	r0, r4, r0
	add	r1, r1, #0x20
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, [r5]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r1, [r1]
	cmp	r4, r1
	bcc	.L526	@cond_branch
.L524:
	bl	LinkOpponentBufferExecCompleted
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L529:
	.align	2, 0
.L528:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleResources
	.word	gEnemyParty
.Lfe28:
	.size	 LinkOpponentHandleSetRawMonData,.Lfe28-LinkOpponentHandleSetRawMonData
	.align	2, 0
	.type	 LinkOpponentHandleLoadMonSprite,function
	.thumb_func
LinkOpponentHandleLoadMonSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r7, .L531
	ldr	r6, .L531+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, #0x64
	mov	sl, r1
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	ldr	r1, .L531+0x8
	mov	r9, r1
	add	r0, r0, r9
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r9
	mov	r1, #0x59
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r9
	bl	BattleLoadOpponentMonSpriteGfx
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	add	r2, r4, #0
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L531+0xc
	mov	r8, r0
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L531+0x10
	ldrb	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r5, .L531+0x14
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L531+0x18
	strh	r1, [r0, #0x24]
	ldrb	r2, [r6]
	add	r0, r2, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x2e]
	ldrb	r3, [r6]
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r2, [r6]
	add	r4, r2, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L531+0x1c
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	StartSpriteAnim
	ldrb	r4, [r6]
	lsl	r0, r4, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r9
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r1, .L531+0x20
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L531+0x24
	str	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L532:
	.align	2, 0
.L531:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gBattleMonForms
	.word	gBattlerControllerFuncs
	.word	sub_8064B04
.Lfe29:
	.size	 LinkOpponentHandleLoadMonSprite,.Lfe29-LinkOpponentHandleLoadMonSprite
	.align	2, 0
	.type	 LinkOpponentHandleSwitchInAnim,function
	.thumb_func
LinkOpponentHandleSwitchInAnim:
	push	{r4, lr}
	ldr	r0, .L534
	ldr	r4, .L534+0x4
	ldrb	r1, [r4]
	lsl	r3, r1, #0x1
	add	r3, r3, r0
	ldr	r0, .L534+0x8
	ldr	r2, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r3]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x9
	add	r2, r2, #0x22
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	sub_8066494
	ldr	r1, .L534+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L534+0x10
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L535:
	.align	2, 0
.L534:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlerControllerFuncs
	.word	sub_8064F40
.Lfe30:
	.size	 LinkOpponentHandleSwitchInAnim,.Lfe30-LinkOpponentHandleSwitchInAnim
	.align	2, 0
	.type	 sub_8066494,function
	.thumb_func
sub_8066494:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	ClearTemporarySpeciesSpriteData
	ldr	r0, .L537
	lsl	r4, r6, #0x1
	add	r4, r4, r0
	ldr	r0, .L537+0x4
	ldr	r0, [r0]
	lsl	r1, r6, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r5, .L537+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	mov	sl, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	ldrh	r0, [r4]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r5
	mov	r1, #0x59
	bl	GetMonData
	mov	r9, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L537+0xc
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L537+0x10
	add	r7, r6, r1
	strb	r0, [r7]
	ldrh	r0, [r4]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r5
	add	r1, r6, #0
	bl	BattleLoadOpponentMonSpriteGfx
	add	r0, r6, #0
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, sl
	mov	r2, r9
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L537+0x14
	mov	r8, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L537+0x18
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L537+0x1c
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x32]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	mov	r0, sl
	mov	r1, r9
	bl	GetFormSpeciesId
	ldrb	r2, [r4]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	strh	r0, [r1, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L537+0x20
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L537+0x24
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xfe
	bl	DoPokeballSendOutAnimation
	ldrb	r2, [r7]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L538:
	.align	2, 0
.L537:
	.word	gBattlerPartyIndexes
	.word	gBattleResources
	.word	gEnemyParty
	.word	sub_805D714
	.word	gUnknown_03005D7C
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe31:
	.size	 sub_8066494,.Lfe31-sub_8066494
	.align	2, 0
	.type	 LinkOpponentHandleReturnMonToBall,function
	.thumb_func
LinkOpponentHandleReturnMonToBall:
	push	{r4, r5, r6, lr}
	ldr	r0, .L542
	ldr	r0, [r0]
	ldr	r6, .L542+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L540	@cond_branch
	ldr	r0, .L542+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r3, [r0, #0x4]
	ldr	r1, .L542+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L542+0x10
	str	r1, [r0]
	b	.L541
.L543:
	.align	2, 0
.L542:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	DoSwitchOutAnimation
.L540:
	ldr	r5, .L544
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L544+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	HideBattlerShadowSprite
	ldr	r1, .L544+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	LinkOpponentBufferExecCompleted
.L541:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L545:
	.align	2, 0
.L544:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe32:
	.size	 LinkOpponentHandleReturnMonToBall,.Lfe32-LinkOpponentHandleReturnMonToBall
	.align	2, 0
	.type	 DoSwitchOutAnimation,function
	.thumb_func
DoSwitchOutAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L554
	ldr	r4, [r6]
	ldr	r5, .L554+0x4
	ldrb	r2, [r5]
	ldr	r1, [r4, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	beq	.L548	@cond_branch
	cmp	r0, #0x1
	beq	.L550	@cond_branch
	b	.L547
.L555:
	.align	2, 0
.L554:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L548:
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L549	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L549:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L547
.L550:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L547	@cond_branch
	strb	r0, [r3, #0x4]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x2
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L556
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L556+0x4
	str	r1, [r0]
.L547:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L557:
	.align	2, 0
.L556:
	.word	gBattlerControllerFuncs
	.word	sub_8064C58
.Lfe33:
	.size	 DoSwitchOutAnimation,.Lfe33-DoSwitchOutAnimation
	.align	2, 0
	.type	 LinkOpponentHandleDrawTrainerPic,function
	.thumb_func
LinkOpponentHandleDrawTrainerPic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r4, .L594
	ldr	r0, [r4]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L559	@cond_branch
	ldr	r5, .L594+0x4
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x2
	and	r1, r1, r0
	mov	r7, #0xc8
	cmp	r1, #0
	beq	.L560	@cond_branch
	mov	r7, #0x98
.L560:
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L562	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0x1
	bne	.L563	@cond_branch
	ldr	r0, .L594+0x8
	b	.L589
.L595:
	.align	2, 0
.L594:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gTrainerBattleOpponent_A
.L563:
	ldr	r0, .L596
.L589:
	ldrh	r0, [r0]
	bl	GetFrontierTrainerFrontSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L576
.L597:
	.align	2, 0
.L596:
	.word	gTrainerBattleOpponent_B
.L562:
	ldrb	r0, [r5]
	bl	GetBattlerMultiplayerId
	ldr	r6, .L598
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r4, #0xff
	ldrb	r0, [r1]
	cmp	r0, #0x4
	beq	.L567	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x5
	bne	.L566	@cond_branch
.L567:
	ldrb	r0, [r5]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L590	@cond_branch
	b	.L581
.L599:
	.align	2, 0
.L598:
	.word	gLinkPlayers
.L566:
	ldrb	r0, [r5]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x2
	beq	.L572	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r1]
	and	r4, r4, r0
	cmp	r4, #0x1
	bne	.L571	@cond_branch
.L572:
	ldrb	r0, [r5]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L591	@cond_branch
	b	.L586
.L571:
	ldrb	r0, [r5]
	bl	GetBattlerMultiplayerId
	b	.L592
.L559:
	mov	r7, #0xb0
	ldr	r0, .L600
	ldrh	r1, [r0]
	mov	r0, #0xc0
	lsl	r0, r0, #0x4
	cmp	r1, r0
	bne	.L577	@cond_branch
	bl	GetUnionRoomTrainerPic
	b	.L593
.L601:
	.align	2, 0
.L600:
	.word	gTrainerBattleOpponent_A
.L577:
	bl	GetMultiplayerId
	ldr	r6, .L602
	mov	r5, #0x1
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r4, #0xff
	ldrb	r0, [r1]
	cmp	r0, #0x4
	beq	.L580	@cond_branch
	bl	GetMultiplayerId
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x5
	bne	.L579	@cond_branch
.L580:
	bl	GetMultiplayerId
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	beq	.L581	@cond_branch
.L590:
	ldr	r0, .L602+0x4
	add	r0, r0, #0x4f
	ldrb	r0, [r0]
	b	.L576
.L603:
	.align	2, 0
.L602:
	.word	gLinkPlayers
	.word	gFacilityClassToPicIndex
.L581:
	ldr	r0, .L604
	add	r0, r0, #0x4e
	ldrb	r0, [r0]
	b	.L576
.L605:
	.align	2, 0
.L604:
	.word	gFacilityClassToPicIndex
.L579:
	bl	GetMultiplayerId
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x2
	beq	.L585	@cond_branch
	bl	GetMultiplayerId
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r1]
	and	r4, r4, r0
	cmp	r4, #0x1
	bne	.L584	@cond_branch
.L585:
	bl	GetMultiplayerId
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	beq	.L586	@cond_branch
.L591:
	ldr	r0, .L606
	add	r0, r0, #0x51
	ldrb	r0, [r0]
	b	.L576
.L607:
	.align	2, 0
.L606:
	.word	gFacilityClassToPicIndex
.L586:
	ldr	r0, .L608
	add	r0, r0, #0x50
	ldrb	r0, [r0]
	b	.L576
.L609:
	.align	2, 0
.L608:
	.word	gFacilityClassToPicIndex
.L584:
	bl	GetMultiplayerId
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L592:
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1, #0x13]
	bl	PlayerGenderToFrontTrainerPicId
.L593:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L576:
	mov	r8, r0
	ldr	r5, .L610
	ldrb	r1, [r5]
	bl	DecompressTrainerFrontPic
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r6, .L610+0x4
	mov	r9, r7
	ldr	r1, .L610+0x8
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x8
	sub	r4, r4, r0
	lsl	r4, r4, #0x12
	mov	r0, #0xa0
	lsl	r0, r0, #0xe
	add	r4, r4, r0
	asr	r4, r4, #0x10
	ldrb	r0, [r5]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r6, #0
	mov	r1, r9
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r6, .L610+0xc
	ldrb	r1, [r5]
	add	r1, r1, r6
	strb	r0, [r1]
	ldr	r4, .L610+0x10
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L610+0x14
	strh	r1, [r0, #0x24]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldr	r1, .L610+0x18
	mov	r2, r8
	lsl	r0, r2, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	ldrb	r1, [r5]
	add	r1, r1, r6
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, r8
	strh	r1, [r0, #0x6]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L610+0x1c
	str	r1, [r0]
	ldr	r1, .L610+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L610+0x24
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L611:
	.align	2, 0
.L610:
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerFrontPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gTrainerFrontPicPaletteTable
	.word	sub_805D7AC
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy
.Lfe34:
	.size	 LinkOpponentHandleDrawTrainerPic,.Lfe34-LinkOpponentHandleDrawTrainerPic
	.align	2, 0
	.type	 LinkOpponentHandleTrainerSlide,function
	.thumb_func
LinkOpponentHandleTrainerSlide:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r0, .L616
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L613	@cond_branch
	ldr	r0, .L616+0x4
	b	.L615
.L617:
	.align	2, 0
.L616:
	.word	gActiveBattler
	.word	gTrainerBattleOpponent_A
.L613:
	ldr	r0, .L618
.L615:
	ldrh	r0, [r0]
	bl	GetFrontierTrainerFrontSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r6, .L618+0x4
	ldrb	r1, [r6]
	bl	DecompressTrainerFrontPic
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r0, .L618+0x8
	ldr	r2, .L618+0xc
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xe
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0xb0
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r5, .L618+0x10
	ldrb	r1, [r6]
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r4, .L618+0x14
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x60
	strh	r1, [r0, #0x24]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x20
	strh	r1, [r0, #0x20]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L618+0x18
	strh	r1, [r0, #0x2e]
	ldr	r1, .L618+0x1c
	mov	r2, r8
	lsl	r0, r2, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	ldrb	r1, [r6]
	add	r1, r1, r5
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r3, r8
	strh	r3, [r0, #0x6]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L618+0x20
	str	r1, [r0]
	ldr	r1, .L618+0x24
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L618+0x28
	str	r1, [r0]
	bl	LinkOpponentBufferExecCompleted
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L619:
	.align	2, 0
.L618:
	.word	gTrainerBattleOpponent_B
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerFrontPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xfffe
	.word	gTrainerFrontPicPaletteTable
	.word	sub_805D7AC
	.word	gBattlerControllerFuncs
	.word	CompleteOnBankSpriteCallbackDummy2
.Lfe35:
	.size	 LinkOpponentHandleTrainerSlide,.Lfe35-LinkOpponentHandleTrainerSlide
	.align	2, 0
	.type	 LinkOpponentHandleTrainerSlideBack,function
	.thumb_func
LinkOpponentHandleTrainerSlideBack:
	push	{r4, r5, r6, lr}
	ldr	r6, .L621
	ldr	r4, .L621+0x4
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L621+0x8
	add	r0, r0, r5
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L621+0xc
	str	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L621+0x10
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L621+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L621+0x18
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L622:
	.align	2, 0
.L621:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	StartAnimLinearTranslation
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	sub_8064470
.Lfe36:
	.size	 LinkOpponentHandleTrainerSlideBack,.Lfe36-LinkOpponentHandleTrainerSlideBack
	.align	2, 0
	.type	 LinkOpponentHandleFaintAnimation,function
	.thumb_func
LinkOpponentHandleFaintAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L628
	ldr	r4, [r6]
	ldr	r5, .L628+0x4
	ldrb	r2, [r5]
	ldr	r0, [r4, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L624	@cond_branch
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L625	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L625:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x4]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L626
.L629:
	.align	2, 0
.L628:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L624:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L626	@cond_branch
	strb	r0, [r3, #0x4]
	mov	r0, #0x10
	mov	r1, #0x3f
	bl	PlaySE12WithPanning
	ldr	r2, .L630
	ldr	r1, .L630+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L630+0x8
	str	r1, [r0]
	ldr	r1, .L630+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L630+0x10
	str	r1, [r0]
.L626:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L631:
	.align	2, 0
.L630:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCB_FaintOpponentMon
	.word	gBattlerControllerFuncs
	.word	sub_8064C14
.Lfe37:
	.size	 LinkOpponentHandleFaintAnimation,.Lfe37-LinkOpponentHandleFaintAnimation
	.align	2, 0
	.type	 LinkOpponentHandlePaletteFade,function
	.thumb_func
LinkOpponentHandlePaletteFade:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 LinkOpponentHandlePaletteFade,.Lfe38-LinkOpponentHandlePaletteFade
	.align	2, 0
	.type	 LinkOpponentHandleSuccessBallThrowAnim,function
	.thumb_func
LinkOpponentHandleSuccessBallThrowAnim:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 LinkOpponentHandleSuccessBallThrowAnim,.Lfe39-LinkOpponentHandleSuccessBallThrowAnim
	.align	2, 0
	.type	 LinkOpponentHandleBallThrowAnim,function
	.thumb_func
LinkOpponentHandleBallThrowAnim:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 LinkOpponentHandleBallThrowAnim,.Lfe40-LinkOpponentHandleBallThrowAnim
	.align	2, 0
	.type	 LinkOpponentHandlePause,function
	.thumb_func
LinkOpponentHandlePause:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 LinkOpponentHandlePause,.Lfe41-LinkOpponentHandlePause
	.align	2, 0
	.type	 LinkOpponentHandleMoveAnimation,function
	.thumb_func
LinkOpponentHandleMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r5, .L640
	ldrb	r0, [r5]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB6819
	b	.L637	@long jump
.LCB6819:
	ldr	r0, .L640+0x4
	ldr	r0, [r0]
	mov	ip, r0
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r6, [r0]
	mov	r0, ip
	add	r0, r0, #0x22
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	ldr	r0, .L640+0x8
	mov	r8, r0
	mov	r0, ip
	add	r0, r0, #0x23
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, r8
	strb	r0, [r1]
	ldr	r3, .L640+0xc
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	mov	r0, ip
	add	r0, r0, #0x24
	add	r0, r0, r1
	ldrb	r2, [r0]
	mov	r0, ip
	add	r0, r0, #0x25
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	strh	r2, [r3]
	ldr	r3, .L640+0x10
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	mov	r0, ip
	add	r0, r0, #0x26
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, ip
	add	r0, r0, #0x27
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, ip
	add	r0, r0, #0x28
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	mov	r0, ip
	add	r0, r0, #0x29
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	ldr	r2, .L640+0x14
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	mov	r0, ip
	add	r0, r0, #0x2a
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r4, .L640+0x18
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	mov	r0, ip
	add	r0, r0, #0x2c
	add	r0, r0, r1
	ldrb	r2, [r0]
	mov	r0, ip
	add	r0, r0, #0x2d
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	strh	r2, [r4]
	ldr	r7, .L640+0x1c
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	add	r1, r1, ip
	add	r0, r1, #0
	add	r0, r0, #0x10
	str	r0, [r7]
	ldr	r2, .L640+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r1, #0x10]
	str	r1, [r0]
	mov	r0, r8
	ldrb	r1, [r0]
	add	r0, r6, #0
	bl	IsMoveWithoutAnimation
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L638	@cond_branch
	bl	LinkOpponentBufferExecCompleted
	b	.L637
.L641:
	.align	2, 0
.L640:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gAnimMoveTurn
	.word	gAnimMovePower
	.word	gAnimMoveDmg
	.word	gAnimFriendship
	.word	gWeatherMoveAnim
	.word	gAnimDisableStructPtr
	.word	gTransformedPersonalities
.L638:
	ldr	r0, .L642
	ldr	r0, [r0]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x4]
	ldr	r1, .L642+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L642+0x8
	str	r1, [r0]
	ldrh	r1, [r4]
	ldr	r2, [r7]
	add	r0, r6, #0
	bl	BattleTv_SetDataBasedOnMove
.L637:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L643:
	.align	2, 0
.L642:
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	LinkOpponentDoMoveAnimation
.Lfe42:
	.size	 LinkOpponentHandleMoveAnimation,.Lfe42-LinkOpponentHandleMoveAnimation
	.align	2, 0
	.type	 LinkOpponentDoMoveAnimation,function
	.thumb_func
LinkOpponentDoMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L658
	mov	r9, r0
	ldr	r1, [r0]
	ldr	r6, .L658+0x4
	ldrb	r3, [r6]
	lsl	r2, r3, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r4, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x22
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	add	r1, r1, #0x2b
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r8, r1
	ldr	r7, .L658+0x8
	ldr	r5, [r7]
	ldr	r1, [r5, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L648	@cond_branch
	cmp	r2, #0x1
	bgt	.L657	@cond_branch
	cmp	r2, #0
	beq	.L646	@cond_branch
	b	.L645
.L659:
	.align	2, 0
.L658:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
.L657:
	cmp	r2, #0x2
	beq	.L650	@cond_branch
	cmp	r2, #0x3
	beq	.L653	@cond_branch
	b	.L645
.L646:
	ldr	r1, [r5]
	lsl	r0, r3, #0x2
	add	r1, r0, r1
	ldrb	r3, [r1]
	mov	r0, #0xc
	and	r0, r0, r3
	cmp	r0, #0x4
	bne	.L647	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r3
	strb	r0, [r1]
	ldrb	r2, [r6]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L647:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L645
.L648:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L645	@cond_branch
	mov	r0, #0x0
	bl	sub_805EB9C
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x4]
	b	.L645
.L650:
	ldr	r0, .L660
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L660+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L645	@cond_branch
	mov	r0, #0x1
	bl	sub_805EB9C
	ldr	r0, [r7]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L652	@cond_branch
	mov	r1, r8
	cmp	r1, #0x1
	bhi	.L652	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L652:
	ldr	r0, .L660+0x8
	ldr	r2, [r0]
	ldr	r0, .L660+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L645
.L661:
	.align	2, 0
.L660:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L653:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L645	@cond_branch
	bl	CopyAllBattleSpritesInvisibilities
	ldrb	r0, [r6]
	mov	r1, r9
	ldr	r2, [r1]
	lsl	r3, r0, #0x9
	add	r1, r2, #0
	add	r1, r1, #0x21
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r2, r2, #0x22
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	TrySetBehindSubstituteSpriteBit
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r4, [r0, #0x4]
	bl	LinkOpponentBufferExecCompleted
.L645:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 LinkOpponentDoMoveAnimation,.Lfe43-LinkOpponentDoMoveAnimation
	.align	2, 0
	.type	 LinkOpponentHandlePrintString,function
	.thumb_func
LinkOpponentHandlePrintString:
	push	{r4, r5, lr}
	ldr	r0, .L663
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L663+0x4
	strh	r1, [r0]
	ldr	r1, .L663+0x8
	ldr	r5, .L663+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r4, [r1]
	add	r4, r4, r0
	ldrh	r0, [r4, #0x2]
	bl	BufferStringBattle
	ldr	r0, .L663+0x10
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
	ldr	r1, .L663+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L663+0x18
	str	r1, [r0]
	ldrh	r0, [r4, #0x2]
	bl	BattleTv_SetDataBasedOnString
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L664:
	.align	2, 0
.L663:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleResources
	.word	gActiveBattler
	.word	gDisplayedStringBattle
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter
.Lfe44:
	.size	 LinkOpponentHandlePrintString,.Lfe44-LinkOpponentHandlePrintString
	.align	2, 0
	.type	 LinkOpponentHandlePrintSelectionString,function
	.thumb_func
LinkOpponentHandlePrintSelectionString:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 LinkOpponentHandlePrintSelectionString,.Lfe45-LinkOpponentHandlePrintSelectionString
	.align	2, 0
	.type	 LinkOpponentHandleChooseAction,function
	.thumb_func
LinkOpponentHandleChooseAction:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 LinkOpponentHandleChooseAction,.Lfe46-LinkOpponentHandleChooseAction
	.align	2, 0
	.type	 LinkOpponentHandleUnknownYesNoBox,function
	.thumb_func
LinkOpponentHandleUnknownYesNoBox:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 LinkOpponentHandleUnknownYesNoBox,.Lfe47-LinkOpponentHandleUnknownYesNoBox
	.align	2, 0
	.type	 LinkOpponentHandleChooseMove,function
	.thumb_func
LinkOpponentHandleChooseMove:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 LinkOpponentHandleChooseMove,.Lfe48-LinkOpponentHandleChooseMove
	.align	2, 0
	.type	 LinkOpponentHandleChooseItem,function
	.thumb_func
LinkOpponentHandleChooseItem:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 LinkOpponentHandleChooseItem,.Lfe49-LinkOpponentHandleChooseItem
	.align	2, 0
	.type	 LinkOpponentHandleChoosePokemon,function
	.thumb_func
LinkOpponentHandleChoosePokemon:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 LinkOpponentHandleChoosePokemon,.Lfe50-LinkOpponentHandleChoosePokemon
	.align	2, 0
	.type	 LinkOpponentHandleCmd23,function
	.thumb_func
LinkOpponentHandleCmd23:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 LinkOpponentHandleCmd23,.Lfe51-LinkOpponentHandleCmd23
	.align	2, 0
	.type	 LinkOpponentHandleHealthBarUpdate,function
	.thumb_func
LinkOpponentHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	ldr	r0, .L675
	ldr	r2, [r0]
	ldr	r0, .L675+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r3, r4, #0x9
	add	r0, r2, #0
	add	r0, r0, #0x22
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r2, r2, #0x23
	add	r2, r2, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r7, r1, #0x10
	ldr	r0, .L675+0x8
	cmp	r7, r0
	beq	.L673	@cond_branch
	ldr	r6, .L675+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L675+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L675+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	SetBattleBarStruct
	b	.L674
.L676:
	.align	2, 0
.L675:
	.word	gBattleResources
	.word	gActiveBattler
	.word	0x7fff
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHealthboxSpriteIds
.L673:
	ldr	r1, .L677
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L677+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L677+0x8
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	SetBattleBarStruct
.L674:
	ldr	r1, .L677+0xc
	ldr	r0, .L677+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L677+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L678:
	.align	2, 0
.L677:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnHealthbarDone
.Lfe52:
	.size	 LinkOpponentHandleHealthBarUpdate,.Lfe52-LinkOpponentHandleHealthBarUpdate
	.align	2, 0
	.type	 LinkOpponentHandleExpUpdate,function
	.thumb_func
LinkOpponentHandleExpUpdate:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 LinkOpponentHandleExpUpdate,.Lfe53-LinkOpponentHandleExpUpdate
	.align	2, 0
	.type	 LinkOpponentHandleStatusIconUpdate,function
	.thumb_func
LinkOpponentHandleStatusIconUpdate:
	push	{r4, lr}
	ldr	r4, .L682
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L681	@cond_branch
	ldr	r0, .L682+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L682+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L682+0xc
	add	r1, r1, r2
	mov	r2, #0x9
	bl	UpdateHealthboxAttribute
	ldrb	r2, [r4]
	ldr	r0, .L682+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L682+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L682+0x18
	str	r1, [r0]
.L681:
	pop	{r4}
	pop	{r0}
	bx	r0
.L683:
	.align	2, 0
.L682:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe54:
	.size	 LinkOpponentHandleStatusIconUpdate,.Lfe54-LinkOpponentHandleStatusIconUpdate
	.align	2, 0
	.type	 LinkOpponentHandleStatusAnimation,function
	.thumb_func
LinkOpponentHandleStatusAnimation:
	push	{r4, lr}
	ldr	r4, .L686
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L685	@cond_branch
	ldr	r0, .L686+0x4
	ldr	r0, [r0]
	mov	ip, r0
	ldrb	r3, [r4]
	lsl	r3, r3, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r3
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x22
	add	r1, r1, r3
	ldrb	r1, [r1]
	mov	r2, ip
	add	r2, r2, #0x23
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	mov	r2, ip
	add	r2, r2, #0x24
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x10
	orr	r1, r1, r2
	mov	r2, ip
	add	r2, r2, #0x25
	add	r2, r2, r3
	ldrb	r2, [r2]
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	bl	InitAndLaunchChosenStatusAnimation
	ldr	r1, .L686+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L686+0xc
	str	r1, [r0]
.L685:
	pop	{r4}
	pop	{r0}
	bx	r0
.L687:
	.align	2, 0
.L686:
	.word	gActiveBattler
	.word	gBattleResources
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe55:
	.size	 LinkOpponentHandleStatusAnimation,.Lfe55-LinkOpponentHandleStatusAnimation
	.align	2, 0
	.type	 LinkOpponentHandleStatusXor,function
	.thumb_func
LinkOpponentHandleStatusXor:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 LinkOpponentHandleStatusXor,.Lfe56-LinkOpponentHandleStatusXor
	.align	2, 0
	.type	 LinkOpponentHandleDataTransfer,function
	.thumb_func
LinkOpponentHandleDataTransfer:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 LinkOpponentHandleDataTransfer,.Lfe57-LinkOpponentHandleDataTransfer
	.align	2, 0
	.type	 LinkOpponentHandleDMA3Transfer,function
	.thumb_func
LinkOpponentHandleDMA3Transfer:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 LinkOpponentHandleDMA3Transfer,.Lfe58-LinkOpponentHandleDMA3Transfer
	.align	2, 0
	.type	 LinkOpponentHandlePlayBGM,function
	.thumb_func
LinkOpponentHandlePlayBGM:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 LinkOpponentHandlePlayBGM,.Lfe59-LinkOpponentHandlePlayBGM
	.align	2, 0
	.type	 LinkOpponentHandleCmd32,function
	.thumb_func
LinkOpponentHandleCmd32:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 LinkOpponentHandleCmd32,.Lfe60-LinkOpponentHandleCmd32
	.align	2, 0
	.type	 LinkOpponentHandleTwoReturnValues,function
	.thumb_func
LinkOpponentHandleTwoReturnValues:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 LinkOpponentHandleTwoReturnValues,.Lfe61-LinkOpponentHandleTwoReturnValues
	.align	2, 0
	.type	 LinkOpponentHandleChosenMonReturnValue,function
	.thumb_func
LinkOpponentHandleChosenMonReturnValue:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 LinkOpponentHandleChosenMonReturnValue,.Lfe62-LinkOpponentHandleChosenMonReturnValue
	.align	2, 0
	.type	 LinkOpponentHandleOneReturnValue,function
	.thumb_func
LinkOpponentHandleOneReturnValue:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 LinkOpponentHandleOneReturnValue,.Lfe63-LinkOpponentHandleOneReturnValue
	.align	2, 0
	.type	 LinkOpponentHandleOneReturnValue_Duplicate,function
	.thumb_func
LinkOpponentHandleOneReturnValue_Duplicate:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 LinkOpponentHandleOneReturnValue_Duplicate,.Lfe64-LinkOpponentHandleOneReturnValue_Duplicate
	.align	2, 0
	.type	 LinkOpponentHandleCmd37,function
	.thumb_func
LinkOpponentHandleCmd37:
	push	{lr}
	ldr	r2, .L698
	ldrb	r1, [r2]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L699:
	.align	2, 0
.L698:
	.word	gUnknown_02022D0C
.Lfe65:
	.size	 LinkOpponentHandleCmd37,.Lfe65-LinkOpponentHandleCmd37
	.align	2, 0
	.type	 LinkOpponentHandleCmd38,function
	.thumb_func
LinkOpponentHandleCmd38:
	push	{lr}
	ldr	r3, .L701
	ldr	r0, .L701+0x4
	ldr	r1, [r0]
	ldr	r0, .L701+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, #0x7f
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L702:
	.align	2, 0
.L701:
	.word	gUnknown_02022D0C
	.word	gBattleResources
	.word	gActiveBattler
.Lfe66:
	.size	 LinkOpponentHandleCmd38,.Lfe66-LinkOpponentHandleCmd38
	.align	2, 0
	.type	 LinkOpponentHandleCmd39,function
	.thumb_func
LinkOpponentHandleCmd39:
	push	{lr}
	ldr	r2, .L704
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L705:
	.align	2, 0
.L704:
	.word	gUnknown_02022D0C
.Lfe67:
	.size	 LinkOpponentHandleCmd39,.Lfe67-LinkOpponentHandleCmd39
	.align	2, 0
	.type	 LinkOpponentHandleCmd40,function
	.thumb_func
LinkOpponentHandleCmd40:
	push	{lr}
	ldr	r3, .L707
	ldr	r1, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrb	r2, [r3]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L708:
	.align	2, 0
.L707:
	.word	gUnknown_02022D0C
.Lfe68:
	.size	 LinkOpponentHandleCmd40,.Lfe68-LinkOpponentHandleCmd40
	.align	2, 0
	.type	 LinkOpponentHandleHitAnimation,function
	.thumb_func
LinkOpponentHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L712
	ldr	r2, .L712+0x4
	ldr	r4, .L712+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L710	@cond_branch
	bl	LinkOpponentBufferExecCompleted
	b	.L711
.L713:
	.align	2, 0
.L712:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.L710:
	ldr	r1, .L714
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	DoHitAnimHealthboxEffect
	ldr	r1, .L714+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L714+0x8
	str	r1, [r0]
.L711:
	pop	{r4}
	pop	{r0}
	bx	r0
.L715:
	.align	2, 0
.L714:
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	DoHitAnimBlinkSpriteEffect
.Lfe69:
	.size	 LinkOpponentHandleHitAnimation,.Lfe69-LinkOpponentHandleHitAnimation
	.align	2, 0
	.type	 LinkOpponentHandleCmd42,function
	.thumb_func
LinkOpponentHandleCmd42:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 LinkOpponentHandleCmd42,.Lfe70-LinkOpponentHandleCmd42
	.align	2, 0
	.type	 LinkOpponentHandlePlaySE,function
	.thumb_func
LinkOpponentHandlePlaySE:
	push	{r4, lr}
	ldr	r4, .L720
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r3, #0x3f
	cmp	r0, #0
	bne	.L718	@cond_branch
	mov	r3, #0xc0
.L718:
	ldr	r0, .L720+0x4
	ldr	r1, [r0]
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	bl	LinkOpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L721:
	.align	2, 0
.L720:
	.word	gActiveBattler
	.word	gBattleResources
.Lfe71:
	.size	 LinkOpponentHandlePlaySE,.Lfe71-LinkOpponentHandlePlaySE
	.align	2, 0
	.type	 LinkOpponentHandlePlayFanfareOrBGM,function
	.thumb_func
LinkOpponentHandlePlayFanfareOrBGM:
	push	{r4, r5, lr}
	ldr	r5, .L725
	ldr	r1, [r5]
	ldr	r4, .L725+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x23
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L723	@cond_branch
	bl	BattleStopLowHpSound
	ldr	r1, [r5]
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayBGM
	b	.L724
.L726:
	.align	2, 0
.L725:
	.word	gBattleResources
	.word	gActiveBattler
.L723:
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
.L724:
	bl	LinkOpponentBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe72:
	.size	 LinkOpponentHandlePlayFanfareOrBGM,.Lfe72-LinkOpponentHandlePlayFanfareOrBGM
	.align	2, 0
	.type	 LinkOpponentHandleFaintingCry,function
	.thumb_func
LinkOpponentHandleFaintingCry:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r0, .L728
	mov	r9, r0
	ldr	r1, .L728+0x4
	mov	r8, r1
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L728+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x59
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	GetFormSpeciesId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	mov	r2, #0x5
	bl	PlayCry3
	bl	LinkOpponentBufferExecCompleted
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L729:
	.align	2, 0
.L728:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gEnemyParty
.Lfe73:
	.size	 LinkOpponentHandleFaintingCry,.Lfe73-LinkOpponentHandleFaintingCry
	.align	2, 0
	.type	 LinkOpponentHandleIntroSlide,function
	.thumb_func
LinkOpponentHandleIntroSlide:
	push	{lr}
	ldr	r0, .L731
	ldr	r1, [r0]
	ldr	r0, .L731+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	HandleIntroSlide
	ldr	r2, .L731+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L732:
	.align	2, 0
.L731:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gIntroSlideFlags
.Lfe74:
	.size	 LinkOpponentHandleIntroSlide,.Lfe74-LinkOpponentHandleIntroSlide
	.align	2, 0
	.type	 LinkOpponentHandleIntroTrainerBallThrow,function
	.thumb_func
LinkOpponentHandleIntroTrainerBallThrow:
	push	{r4, r5, r6, lr}
	ldr	r5, .L735
	ldr	r6, .L735+0x4
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L735+0x8
	add	r0, r0, r4
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L735+0xc
	str	r1, [r0]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L735+0x10
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L735+0x14
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L735+0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r6]
	strh	r0, [r1, #0x8]
	ldr	r3, .L735+0x1c
	ldr	r0, [r3]
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L734	@cond_branch
	ldr	r0, .L735+0x20
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L735+0x24
	str	r1, [r0]
.L734:
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L735+0x28
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L735+0x2c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L736:
	.align	2, 0
.L735:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	StartAnimLinearTranslation
	.word	sub_80676FC
	.word	sub_8067618
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
	.word	gBattlerControllerFuncs
	.word	nullsub_28
.Lfe75:
	.size	 LinkOpponentHandleIntroTrainerBallThrow,.Lfe75-LinkOpponentHandleIntroTrainerBallThrow
	.align	2, 0
	.type	 sub_8067618,function
	.thumb_func
sub_8067618:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r7, .L741
	ldrb	r0, [r7]
	mov	r9, r0
	ldr	r1, .L741+0x4
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	strb	r0, [r7]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L739	@cond_branch
	ldr	r0, .L741+0x8
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L738	@cond_branch
.L739:
	ldr	r0, .L741+0xc
	ldr	r1, [r0]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldr	r2, .L741+0x10
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_8066494
	b	.L740
.L742:
	.align	2, 0
.L741:
	.word	gActiveBattler
	.word	gTasks
	.word	gBattleTypeFlags
	.word	gBattleResources
	.word	gBattlerPartyIndexes
.L738:
	ldr	r5, .L743
	ldr	r1, [r5]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	ldr	r6, .L743+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_8066494
	ldrb	r0, [r7]
	mov	r4, #0x2
	eor	r0, r0, r4
	strb	r0, [r7]
	ldr	r1, [r5]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_8066494
	ldrb	r0, [r7]
	eor	r0, r0, r4
	strb	r0, [r7]
.L740:
	ldr	r1, .L743+0x8
	ldr	r2, .L743+0xc
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L743+0x10
	str	r1, [r0]
	mov	r0, r9
	strb	r0, [r2]
	mov	r0, r8
	bl	DestroyTask
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L744:
	.align	2, 0
.L743:
	.word	gBattleResources
	.word	gBattlerPartyIndexes
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	sub_8064734
.Lfe76:
	.size	 sub_8067618,.Lfe76-sub_8067618
	.align	2, 0
	.type	 sub_80676FC,function
	.thumb_func
sub_80676FC:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x6]
	bl	FreeTrainerFrontPicPalette
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe77:
	.size	 sub_80676FC,.Lfe77-sub_80676FC
	.align	2, 0
	.type	 LinkOpponentHandleDrawPartyStatusSummary,function
	.thumb_func
LinkOpponentHandleDrawPartyStatusSummary:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L753
	ldr	r0, [r0]
	ldr	r1, .L753+0x4
	ldrb	r2, [r1]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L747	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L747	@cond_branch
	bl	LinkOpponentBufferExecCompleted
	b	.L746
.L754:
	.align	2, 0
.L753:
	.word	gBattleResources
	.word	gActiveBattler
.L747:
	ldr	r5, .L755
	ldr	r0, [r5]
	ldr	r3, .L755+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r2, .L755+0x8
	ldr	r0, [r2]
	ldrb	r4, [r3]
	lsl	r1, r4, #0x9
	add	r0, r0, #0x22
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r7, r2, #0
	mov	r8, r3
	cmp	r0, #0
	beq	.L749	@cond_branch
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r2, [r3, #0x1]
	lsl	r1, r2, #0x1b
	lsr	r0, r1, #0x1c
	cmp	r0, #0x1
	bhi	.L750	@cond_branch
	add	r0, r0, #0x1
	mov	r1, #0xf
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, #0x1f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
	b	.L746
.L756:
	.align	2, 0
.L755:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleResources
.L750:
	mov	r0, #0x1f
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r3, #0x1]
.L749:
	mov	r5, r8
	ldrb	r0, [r5]
	lsl	r4, r0, #0x9
	add	r1, r4, #0
	add	r1, r1, #0x20
	ldr	r3, [r7]
	add	r1, r3, r1
	add	r1, r1, #0x4
	add	r2, r3, #0
	add	r2, r2, #0x21
	add	r2, r2, r4
	ldrb	r2, [r2]
	add	r3, r3, #0x22
	add	r3, r3, r4
	ldrb	r3, [r3]
	bl	CreatePartyStatusSummarySprites
	ldr	r2, .L757
	ldrb	r1, [r5]
	add	r1, r1, r2
	mov	r3, #0x0
	strb	r0, [r1]
	ldr	r6, .L757+0x4
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x5]
	ldr	r0, [r7]
	ldrb	r4, [r5]
	lsl	r1, r4, #0x9
	add	r0, r0, #0x22
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L752	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x5d
	strb	r1, [r0, #0x5]
.L752:
	ldr	r0, .L757+0x8
	mov	r2, r8
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L757+0xc
	str	r0, [r1]
.L746:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L758:
	.align	2, 0
.L757:
	.word	gBattlerStatusSummaryTaskId
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_806782C
.Lfe78:
	.size	 LinkOpponentHandleDrawPartyStatusSummary,.Lfe78-LinkOpponentHandleDrawPartyStatusSummary
	.align	2, 0
	.type	 sub_806782C,function
	.thumb_func
sub_806782C:
	push	{r4, lr}
	ldr	r4, .L761
	ldr	r0, [r4]
	ldr	r3, .L761+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x5]
	add	r2, r1, #0x1
	strb	r2, [r0, #0x5]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x5c
	bls	.L760	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x5]
	bl	LinkOpponentBufferExecCompleted
.L760:
	pop	{r4}
	pop	{r0}
	bx	r0
.L762:
	.align	2, 0
.L761:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe79:
	.size	 sub_806782C,.Lfe79-sub_806782C
	.align	2, 0
	.type	 LinkOpponentHandleHidePartyStatusSummary,function
	.thumb_func
LinkOpponentHandleHidePartyStatusSummary:
	push	{lr}
	ldr	r0, .L765
	ldr	r1, [r0]
	ldr	r0, .L765+0x4
	ldrb	r3, [r0]
	ldr	r1, [r1, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L764	@cond_branch
	ldr	r2, .L765+0x8
	ldr	r0, .L765+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L765+0x10
	str	r1, [r0]
.L764:
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L766:
	.align	2, 0
.L765:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gTasks
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
.Lfe80:
	.size	 LinkOpponentHandleHidePartyStatusSummary,.Lfe80-LinkOpponentHandleHidePartyStatusSummary
	.align	2, 0
	.type	 LinkOpponentHandleEndBounceEffect,function
	.thumb_func
LinkOpponentHandleEndBounceEffect:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 LinkOpponentHandleEndBounceEffect,.Lfe81-LinkOpponentHandleEndBounceEffect
	.align	2, 0
	.type	 LinkOpponentHandleSpriteInvisibility,function
	.thumb_func
LinkOpponentHandleSpriteInvisibility:
	push	{r4, lr}
	ldr	r4, .L770
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L769	@cond_branch
	ldr	r3, .L770+0x4
	ldr	r0, .L770+0x8
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r0, .L770+0xc
	ldr	r0, [r0]
	lsl	r1, r1, #0x9
	add	r0, r0, #0x21
	add	r0, r0, r1
	add	r2, r2, #0x3e
	mov	r3, #0x1
	ldrb	r1, [r0]
	and	r1, r1, r3
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	CopyBattleSpriteInvisibility
.L769:
	bl	LinkOpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L771:
	.align	2, 0
.L770:
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleResources
.Lfe82:
	.size	 LinkOpponentHandleSpriteInvisibility,.Lfe82-LinkOpponentHandleSpriteInvisibility
	.align	2, 0
	.type	 LinkOpponentHandleBattleAnimation,function
	.thumb_func
LinkOpponentHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L776
	ldrb	r0, [r5]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L773	@cond_branch
	ldr	r0, .L776+0x4
	ldr	r1, [r0]
	ldrb	r2, [r5]
	lsl	r4, r2, #0x9
	add	r0, r1, #0
	add	r0, r0, #0x21
	add	r0, r0, r4
	ldrb	r6, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x22
	add	r0, r0, r4
	ldrb	r3, [r0]
	add	r1, r1, #0x23
	add	r1, r1, r4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	str	r3, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	add	r3, r6, #0
	bl	TryHandleLaunchBattleTableAnimation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L774	@cond_branch
	bl	LinkOpponentBufferExecCompleted
	b	.L775
.L777:
	.align	2, 0
.L776:
	.word	gActiveBattler
	.word	gBattleResources
.L774:
	ldr	r0, .L778
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L778+0x4
	str	r0, [r1]
.L775:
	add	r0, r6, #0
	bl	BattleTv_SetDataBasedOnAnimation
.L773:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L779:
	.align	2, 0
.L778:
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedBattleAnimation
.Lfe83:
	.size	 LinkOpponentHandleBattleAnimation,.Lfe83-LinkOpponentHandleBattleAnimation
	.align	2, 0
	.type	 LinkOpponentHandleLinkStandbyMsg,function
	.thumb_func
LinkOpponentHandleLinkStandbyMsg:
	push	{lr}
	ldr	r2, .L781
	ldr	r0, .L781+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r0, [r2]
	add	r0, r0, r1
	add	r0, r0, #0x2
	bl	sub_81851A8
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L782:
	.align	2, 0
.L781:
	.word	gBattleResources
	.word	gActiveBattler
.Lfe84:
	.size	 LinkOpponentHandleLinkStandbyMsg,.Lfe84-LinkOpponentHandleLinkStandbyMsg
	.align	2, 0
	.type	 LinkOpponentHandleResetActionMoveSelection,function
	.thumb_func
LinkOpponentHandleResetActionMoveSelection:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe85:
	.size	 LinkOpponentHandleResetActionMoveSelection,.Lfe85-LinkOpponentHandleResetActionMoveSelection
	.align	2, 0
	.type	 LinkOpponentHandleCmd55,function
	.thumb_func
LinkOpponentHandleCmd55:
	push	{r4, r5, lr}
	ldr	r4, .L787
	ldr	r5, .L787+0x4
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x20
	ldr	r0, [r4]
	add	r0, r0, r1
	add	r0, r0, #0x4
	bl	sub_81851A8
	ldr	r1, [r4]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x21
	add	r1, r1, r0
	ldrb	r2, [r1]
	cmp	r2, #0x3
	bne	.L785	@cond_branch
	ldr	r0, .L787+0x8
	strb	r2, [r0]
	b	.L786
.L788:
	.align	2, 0
.L787:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleOutcome
.L785:
	ldr	r0, .L789
	mov	r1, #0x3
	eor	r1, r1, r2
	strb	r1, [r0]
.L786:
	ldr	r0, .L789+0x4
	ldr	r3, [r0]
	ldr	r0, .L789+0x8
	ldr	r1, [r0]
	ldr	r4, .L789+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x22
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldr	r1, .L789+0x10
	add	r3, r3, r1
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x3
	ldrb	r2, [r3]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r0, #0x5
	bl	FadeOutMapMusic
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	bl	LinkOpponentBufferExecCompleted
	ldr	r1, .L789+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L789+0x18
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L790:
	.align	2, 0
.L789:
	.word	gBattleOutcome
	.word	gSaveBlock2Ptr
	.word	gBattleResources
	.word	gActiveBattler
	.word	0xc31
	.word	gBattlerControllerFuncs
	.word	sub_80587B0
.Lfe86:
	.size	 LinkOpponentHandleCmd55,.Lfe86-LinkOpponentHandleCmd55
	.align	2, 0
	.type	 LinkOpponentHandleBattleDebug,function
	.thumb_func
LinkOpponentHandleBattleDebug:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 LinkOpponentHandleBattleDebug,.Lfe87-LinkOpponentHandleBattleDebug
	.align	2, 0
	.type	 LinkOpponentCmdEnd,function
	.thumb_func
LinkOpponentCmdEnd:
	bx	lr
.Lfe88:
	.size	 LinkOpponentCmdEnd,.Lfe88-LinkOpponentCmdEnd
.text
	.align	2, 0

