@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	SwitchFlashBank
	.type	 SwitchFlashBank,function
	.thumb_func
SwitchFlashBank:
	lsl	r0, r0, #24
	lsr	r0, r0, #24
	ldr	r3, .L3
	mov	r1, #170
	strb	r1, [r3]
	ldr	r2, .L3+4
	mov	r1, #85
	strb	r1, [r2]
	mov	r1, #176
	strb	r1, [r3]
	mov	r1, #224
	lsl	r1, r1, #20
	strb	r0, [r1]
	bx	lr
.L4:
	.align	2, 0
.L3:
	.word	234902869
	.word	234891946
.Lfe1:
	.size	 SwitchFlashBank,.Lfe1-SwitchFlashBank
	.align	2, 0
	.globl	ReadFlashId
	.type	 ReadFlashId,function
	.thumb_func
ReadFlashId:
	push	{r4, r5, lr}
	add	sp, sp, #-68
	mov	r0, sp
	bl	SetReadFlash1
	mov	r5, sp
	add	r5, r5, #1
	ldr	r2, .L26
	mov	r0, #170
	strb	r0, [r2]
	ldr	r1, .L26+4
	mov	r0, #85
	strb	r0, [r1]
	mov	r0, #144
	strb	r0, [r2]
	add	r1, sp, #64
	ldr	r2, .L26+8
	add	r0, r2, #0
	b	.L24
.L27:
	.align	2, 0
.L26:
	.word	234902869
	.word	234891946
	.word	20000
.L11:
	ldrh	r0, [r1]
	sub	r0, r0, #1
.L24:
	strh	r0, [r1]
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L11	@cond_branch
	ldr	r0, .L28
	bl	_call_via_r5
	lsl	r0, r0, #24
	lsr	r4, r0, #16
	mov	r0, #224
	lsl	r0, r0, #20
	bl	_call_via_r5
	lsl	r0, r0, #24
	lsr	r0, r0, #24
	orr	r4, r4, r0
	ldr	r1, .L28+4
	mov	r0, #170
	strb	r0, [r1]
	ldr	r2, .L28+8
	mov	r0, #85
	strb	r0, [r2]
	mov	r0, #240
	strb	r0, [r1]
	strb	r0, [r1]
	add	r1, sp, #64
	ldr	r2, .L28+12
	add	r0, r2, #0
	b	.L25
.L29:
	.align	2, 0
.L28:
	.word	234881025
	.word	234902869
	.word	234891946
	.word	20000
.L20:
	ldrh	r0, [r1]
	sub	r0, r0, #1
.L25:
	strh	r0, [r1]
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L20	@cond_branch
	add	r0, r4, #0
	add	sp, sp, #68
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 ReadFlashId,.Lfe2-ReadFlashId
	.section .rodata
	.align	2, 0
.LC0:
	.word	sTimerCount
	.align	2, 0
.LC1:
	.word	gFlashTimeoutFlag
.text
	.align	2, 0
	.globl	FlashTimerIntr
	.type	 FlashTimerIntr,function
	.thumb_func
FlashTimerIntr:
	push	{lr}
	ldr	r1, .L32
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L31	@cond_branch
	ldrh	r0, [r1]
	sub	r0, r0, #1
	strh	r0, [r1]
	lsl	r0, r0, #16
	cmp	r0, #0
	bne	.L31	@cond_branch
	ldr	r1, .L32+4
	mov	r0, #1
	strb	r0, [r1]
.L31:
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	sTimerCount
	.word	gFlashTimeoutFlag
.Lfe3:
	.size	 FlashTimerIntr,.Lfe3-FlashTimerIntr
	.section .rodata
	.align	2, 0
.LC2:
	.word	sTimerNum
	.align	2, 0
.LC3:
	.word	sTimerReg
	.align	2, 0
.LC4:
	.word	FlashTimerIntr
.text
	.align	2, 0
	.globl	SetFlashTimerIntr
	.type	 SetFlashTimerIntr,function
	.thumb_func
SetFlashTimerIntr:
	push	{lr}
	add	r2, r1, #0
	lsl	r0, r0, #24
	lsr	r1, r0, #24
	cmp	r1, #3
	bhi	.L35	@cond_branch
	ldr	r0, .L37
	strb	r1, [r0]
	ldr	r1, .L37+4
	ldrb	r0, [r0]
	lsl	r0, r0, #2
	ldr	r3, .L37+8
	add	r0, r0, r3
	str	r0, [r1]
	ldr	r0, .L37+12
	str	r0, [r2]
	mov	r0, #0
	b	.L36
.L38:
	.align	2, 0
.L37:
	.word	sTimerNum
	.word	sTimerReg
	.word	67109120
	.word	FlashTimerIntr
.L35:
	mov	r0, #1
.L36:
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 SetFlashTimerIntr,.Lfe4-SetFlashTimerIntr
	.section .rodata
	.align	2, 0
.LC5:
	.word	gFlashMaxTime
	.align	2, 0
.LC6:
	.word	sSavedIme
	.align	2, 0
.LC7:
	.word	sTimerReg
	.align	2, 0
.LC8:
	.word	sTimerNum
	.align	2, 0
.LC9:
	.word	gFlashTimeoutFlag
	.align	2, 0
.LC10:
	.word	sTimerCount
.text
	.align	2, 0
	.globl	StartFlashTimer
	.type	 StartFlashTimer,function
	.thumb_func
StartFlashTimer:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	lsl	r0, r0, #24
	lsr	r0, r0, #24
	ldr	r1, .L40
	lsl	r2, r0, #1
	add	r2, r2, r0
	lsl	r2, r2, #1
	ldr	r0, [r1]
	add	r2, r2, r0
	ldr	r1, .L40+4
	ldr	r0, .L40+8
	mov	r9, r0
	ldrh	r0, [r0]
	strh	r0, [r1]
	mov	r3, #0
	mov	r1, r9
	strh	r3, [r1]
	ldr	r0, .L40+12
	mov	r8, r0
	ldr	r4, [r0]
	strh	r3, [r4, #2]
	ldr	r6, .L40+16
	ldr	r1, .L40+20
	mov	sl, r1
	ldrb	r1, [r1]
	mov	r5, #8
	add	r0, r5, #0
	lsl	r0, r0, r1
	add	r1, r0, #0
	ldrh	r0, [r6]
	orr	r0, r0, r1
	strh	r0, [r6]
	ldr	r0, .L40+24
	strb	r3, [r0]
	ldr	r1, .L40+28
	ldrh	r0, [r2]
	strh	r0, [r1]
	add	r2, r2, #2
	ldrh	r0, [r2]
	strh	r0, [r4]
	add	r0, r4, #2
	mov	r1, r8
	str	r0, [r1]
	ldrh	r0, [r2, #2]
	strh	r0, [r4, #2]
	str	r4, [r1]
	ldr	r1, .L40+32
	mov	r2, sl
	ldrb	r0, [r2]
	lsl	r5, r5, r0
	strh	r5, [r1]
	mov	r0, #1
	mov	r3, r9
	strh	r0, [r3]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	gFlashMaxTime
	.word	sSavedIme
	.word	67109384
	.word	sTimerReg
	.word	67109376
	.word	sTimerNum
	.word	gFlashTimeoutFlag
	.word	sTimerCount
	.word	67109378
.Lfe5:
	.size	 StartFlashTimer,.Lfe5-StartFlashTimer
	.section .rodata
	.align	2, 0
.LC11:
	.word	sTimerReg
	.align	2, 0
.LC12:
	.word	sTimerNum
	.align	2, 0
.LC13:
	.word	sSavedIme
.text
	.align	2, 0
	.globl	StopFlashTimer
	.type	 StopFlashTimer,function
	.thumb_func
StopFlashTimer:
	ldr	r3, .L43
	mov	r1, #0
	strh	r1, [r3]
	ldr	r2, .L43+4
	ldr	r0, [r2]
	strh	r1, [r0]
	add	r0, r0, #2
	str	r0, [r2]
	strh	r1, [r0]
	sub	r0, r0, #2
	str	r0, [r2]
	ldr	r2, .L43+8
	ldr	r0, .L43+12
	ldrb	r0, [r0]
	mov	r1, #8
	lsl	r1, r1, r0
	ldrh	r0, [r2]
	bic	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L43+16
	ldrh	r0, [r0]
	strh	r0, [r3]
	bx	lr
.L44:
	.align	2, 0
.L43:
	.word	67109384
	.word	sTimerReg
	.word	67109376
	.word	sTimerNum
	.word	sSavedIme
.Lfe6:
	.size	 StopFlashTimer,.Lfe6-StopFlashTimer
	.align	2, 0
	.globl	ReadFlash1
	.type	 ReadFlash1,function
	.thumb_func
ReadFlash1:
	ldrb	r0, [r0]
	bx	lr
.Lfe7:
	.size	 ReadFlash1,.Lfe7-ReadFlash1
	.section .rodata
	.align	2, 0
.LC14:
	.word	PollFlashStatus
	.align	2, 0
.LC15:
	.word	ReadFlash1
	.align	2, 0
.LC16:
	.word	SetReadFlash1
.text
	.align	2, 0
	.globl	SetReadFlash1
	.type	 SetReadFlash1,function
	.thumb_func
SetReadFlash1:
	push	{lr}
	add	r2, r0, #0
	ldr	r1, .L52
	add	r0, r2, #1
	str	r0, [r1]
	ldr	r3, .L52+4
	mov	r0, #1
	eor	r3, r3, r0
	ldr	r0, .L52+8
	ldr	r1, .L52+4
	sub	r0, r0, r1
	lsl	r0, r0, #15
	b	.L51
.L53:
	.align	2, 0
.L52:
	.word	PollFlashStatus
	.word	ReadFlash1
	.word	SetReadFlash1
.L49:
	ldrh	r0, [r3]
	strh	r0, [r2]
	add	r3, r3, #2
	add	r2, r2, #2
	sub	r0, r1, #1
	lsl	r0, r0, #16
.L51:
	lsr	r1, r0, #16
	cmp	r1, #0
	bne	.L49	@cond_branch
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 SetReadFlash1,.Lfe8-SetReadFlash1
	.align	2, 0
	.globl	ReadFlash_Core
	.type	 ReadFlash_Core,function
	.thumb_func
ReadFlash_Core:
	push	{r4, lr}
	add	r4, r0, #0
	sub	r3, r2, #1
	cmp	r2, #0
	beq	.L56	@cond_branch
	mov	r2, #1
	neg	r2, r2
.L57:
	ldrb	r0, [r4]
	strb	r0, [r1]
	add	r4, r4, #1
	add	r1, r1, #1
	sub	r3, r3, #1
	cmp	r3, r2
	bne	.L57	@cond_branch
.L56:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 ReadFlash_Core,.Lfe9-ReadFlash_Core
	.section .rodata
	.align	2, 0
.LC17:
	.word	gFlash
	.align	2, 0
.LC18:
	.word	ReadFlash_Core
	.align	2, 0
.LC19:
	.word	ReadFlash
.text
	.align	2, 0
	.globl	ReadFlash
	.type	 ReadFlash,function
	.thumb_func
ReadFlash:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-128
	add	r5, r1, #0
	add	r6, r2, #0
	add	r7, r3, #0
	lsl	r3, r0, #16
	lsr	r4, r3, #16
	ldr	r2, .L66
	ldrh	r0, [r2]
	ldr	r1, .L66+4
	and	r0, r0, r1
	mov	r1, #3
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L66+8
	ldr	r0, [r0]
	ldr	r1, [r0]
	mov	r0, #128
	lsl	r0, r0, #10
	cmp	r1, r0
	bne	.L60	@cond_branch
	lsr	r0, r3, #20
	lsl	r0, r0, #24
	lsr	r0, r0, #24
	bl	SwitchFlashBank
	mov	r0, #15
	and	r4, r4, r0
.L60:
	ldr	r3, .L66+12
	mov	r0, #1
	eor	r3, r3, r0
	mov	r2, sp
	ldr	r0, .L66+16
	ldr	r1, .L66+12
	sub	r0, r0, r1
	lsl	r0, r0, #15
	b	.L65
.L67:
	.align	2, 0
.L66:
	.word	67109380
	.word	65532
	.word	gFlash
	.word	ReadFlash_Core
	.word	ReadFlash
.L63:
	ldrh	r0, [r3]
	strh	r0, [r2]
	add	r3, r3, #2
	add	r2, r2, #2
	sub	r0, r1, #1
	lsl	r0, r0, #16
.L65:
	lsr	r1, r0, #16
	cmp	r1, #0
	bne	.L63	@cond_branch
	mov	r3, sp
	add	r3, r3, #1
	ldr	r0, .L68
	ldr	r0, [r0]
	ldrb	r0, [r0, #8]
	lsl	r4, r4, r0
	add	r0, r4, #0
	mov	r2, #224
	lsl	r2, r2, #20
	add	r1, r5, r2
	add	r0, r0, r1
	add	r1, r6, #0
	add	r2, r7, #0
	bl	_call_via_r3
	add	sp, sp, #128
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L69:
	.align	2, 0
.L68:
	.word	gFlash
.Lfe10:
	.size	 ReadFlash,.Lfe10-ReadFlash
	.align	2, 0
	.globl	VerifyFlashSector_Core
	.type	 VerifyFlashSector_Core,function
	.thumb_func
VerifyFlashSector_Core:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r3, r1, #0
	sub	r4, r2, #1
	cmp	r2, #0
	beq	.L72	@cond_branch
	mov	r2, #1
	neg	r2, r2
.L73:
	ldrb	r1, [r3]
	ldrb	r0, [r5]
	add	r5, r5, #1
	add	r3, r3, #1
	cmp	r1, r0
	beq	.L71	@cond_branch
	sub	r0, r3, #1
	b	.L76
.L71:
	sub	r4, r4, #1
	cmp	r4, r2
	bne	.L73	@cond_branch
.L72:
	mov	r0, #0
.L76:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 VerifyFlashSector_Core,.Lfe11-VerifyFlashSector_Core
	.section .rodata
	.align	2, 0
.LC20:
	.word	gFlash
	.align	2, 0
.LC21:
	.word	VerifyFlashSector_Core
	.align	2, 0
.LC22:
	.word	VerifyFlashSector
.text
	.align	2, 0
	.globl	VerifyFlashSector
	.type	 VerifyFlashSector,function
	.thumb_func
VerifyFlashSector:
	push	{r4, r5, lr}
	add	sp, sp, #-256
	add	r5, r1, #0
	lsl	r3, r0, #16
	lsr	r4, r3, #16
	ldr	r2, .L84
	ldrh	r0, [r2]
	ldr	r1, .L84+4
	and	r0, r0, r1
	mov	r1, #3
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L84+8
	ldr	r0, [r0]
	ldr	r1, [r0]
	mov	r0, #128
	lsl	r0, r0, #10
	cmp	r1, r0
	bne	.L78	@cond_branch
	lsr	r0, r3, #20
	lsl	r0, r0, #24
	lsr	r0, r0, #24
	bl	SwitchFlashBank
	mov	r0, #15
	and	r4, r4, r0
.L78:
	ldr	r3, .L84+12
	mov	r0, #1
	eor	r3, r3, r0
	mov	r2, sp
	ldr	r0, .L84+16
	ldr	r1, .L84+12
	sub	r0, r0, r1
	lsl	r0, r0, #15
	b	.L83
.L85:
	.align	2, 0
.L84:
	.word	67109380
	.word	65532
	.word	gFlash
	.word	VerifyFlashSector_Core
	.word	VerifyFlashSector
.L81:
	ldrh	r0, [r3]
	strh	r0, [r2]
	add	r3, r3, #2
	add	r2, r2, #2
	sub	r0, r1, #1
	lsl	r0, r0, #16
.L83:
	lsr	r1, r0, #16
	cmp	r1, #0
	bne	.L81	@cond_branch
	mov	r3, sp
	add	r3, r3, #1
	ldr	r0, .L86
	ldr	r0, [r0]
	ldrb	r1, [r0, #8]
	lsl	r4, r4, r1
	add	r1, r4, #0
	mov	r2, #224
	lsl	r2, r2, #20
	add	r1, r1, r2
	ldrh	r2, [r0, #4]
	add	r0, r5, #0
	bl	_call_via_r3
	add	sp, sp, #256
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L87:
	.align	2, 0
.L86:
	.word	gFlash
.Lfe12:
	.size	 VerifyFlashSector,.Lfe12-VerifyFlashSector
	.section .rodata
	.align	2, 0
.LC23:
	.word	gFlash
	.align	2, 0
.LC24:
	.word	VerifyFlashSector_Core
	.align	2, 0
.LC25:
	.word	VerifyFlashSector
.text
	.align	2, 0
	.globl	VerifyFlashSectorNBytes
	.type	 VerifyFlashSectorNBytes,function
	.thumb_func
VerifyFlashSectorNBytes:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-256
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r2, r0, #16
	lsr	r4, r2, #16
	ldr	r0, .L95
	ldr	r0, [r0]
	ldr	r1, [r0]
	mov	r0, #128
	lsl	r0, r0, #10
	cmp	r1, r0
	bne	.L89	@cond_branch
	lsr	r0, r2, #20
	lsl	r0, r0, #24
	lsr	r0, r0, #24
	bl	SwitchFlashBank
	mov	r0, #15
	and	r4, r4, r0
.L89:
	ldr	r2, .L95+4
	ldrh	r0, [r2]
	ldr	r1, .L95+8
	and	r0, r0, r1
	mov	r1, #3
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r3, .L95+12
	mov	r0, #1
	eor	r3, r3, r0
	mov	r2, sp
	ldr	r0, .L95+16
	ldr	r1, .L95+12
	sub	r0, r0, r1
	lsl	r0, r0, #15
	b	.L94
.L96:
	.align	2, 0
.L95:
	.word	gFlash
	.word	67109380
	.word	65532
	.word	VerifyFlashSector_Core
	.word	VerifyFlashSector
.L92:
	ldrh	r0, [r3]
	strh	r0, [r2]
	add	r3, r3, #2
	add	r2, r2, #2
	sub	r0, r1, #1
	lsl	r0, r0, #16
.L94:
	lsr	r1, r0, #16
	cmp	r1, #0
	bne	.L92	@cond_branch
	mov	r3, sp
	add	r3, r3, #1
	ldr	r0, .L97
	ldr	r0, [r0]
	ldrb	r1, [r0, #8]
	lsl	r4, r4, r1
	add	r1, r4, #0
	mov	r0, #224
	lsl	r0, r0, #20
	add	r1, r1, r0
	add	r0, r5, #0
	add	r2, r6, #0
	bl	_call_via_r3
	add	sp, sp, #256
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L98:
	.align	2, 0
.L97:
	.word	gFlash
.Lfe13:
	.size	 VerifyFlashSectorNBytes,.Lfe13-VerifyFlashSectorNBytes
	.section .rodata
	.align	2, 0
.LC26:
	.word	ProgramFlashSector
.text
	.align	2, 0
	.globl	ProgramFlashSectorAndVerify
	.type	 ProgramFlashSectorAndVerify,function
	.thumb_func
ProgramFlashSectorAndVerify:
	push	{r4, r5, r6, lr}
	add	r5, r1, #0
	lsl	r0, r0, #16
	lsr	r4, r0, #16
	mov	r6, #0
	b	.L100
.L102:
	add	r0, r6, #1
	lsl	r0, r0, #24
	lsr	r6, r0, #24
.L100:
	cmp	r6, #2
	bhi	.L101	@cond_branch
	ldr	r0, .L107
	ldr	r2, [r0]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	_call_via_r2
	lsl	r0, r0, #16
	lsr	r2, r0, #16
	cmp	r2, #0
	bne	.L102	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	bl	VerifyFlashSector
	add	r2, r0, #0
	cmp	r2, #0
	bne	.L102	@cond_branch
.L101:
	add	r0, r2, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L108:
	.align	2, 0
.L107:
	.word	ProgramFlashSector
.Lfe14:
	.size	 ProgramFlashSectorAndVerify,.Lfe14-ProgramFlashSectorAndVerify
	.section .rodata
	.align	2, 0
.LC27:
	.word	ProgramFlashSector
.text
	.align	2, 0
	.globl	ProgramFlashSectorAndVerifyNBytes
	.type	 ProgramFlashSectorAndVerifyNBytes,function
	.thumb_func
ProgramFlashSectorAndVerifyNBytes:
	push	{r4, r5, r6, r7, lr}
	add	r5, r1, #0
	add	r7, r2, #0
	lsl	r0, r0, #16
	lsr	r4, r0, #16
	mov	r6, #0
	b	.L110
.L112:
	add	r0, r6, #1
	lsl	r0, r0, #24
	lsr	r6, r0, #24
.L110:
	cmp	r6, #2
	bhi	.L111	@cond_branch
	ldr	r0, .L117
	ldr	r2, [r0]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	_call_via_r2
	lsl	r0, r0, #16
	lsr	r3, r0, #16
	cmp	r3, #0
	bne	.L112	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r7, #0
	bl	VerifyFlashSectorNBytes
	add	r3, r0, #0
	cmp	r3, #0
	bne	.L112	@cond_branch
.L111:
	add	r0, r3, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L118:
	.align	2, 0
.L117:
	.word	ProgramFlashSector
.Lfe15:
	.size	 ProgramFlashSectorAndVerifyNBytes,.Lfe15-ProgramFlashSectorAndVerifyNBytes
	.comm	gFlashNumRemainingBytes, 4	@ 2
	.comm	ProgramFlashByte, 4	@ 4
	.comm	ProgramFlashSector, 4	@ 4
	.comm	EraseFlashChip, 4	@ 4
	.comm	EraseFlashSector, 4	@ 4
	.comm	WaitForFlashWrite, 4	@ 4
	.comm	gFlashMaxTime, 4	@ 4
	.comm	gFlash, 4	@ 4
	.comm	PollFlashStatus, 4	@ 4
	.comm	gFlashTimeoutFlag, 4	@ 1

	.lcomm	sTimerNum,1

	.lcomm	sTimerCount,2

	.lcomm	sTimerReg,4

	.lcomm	sSavedIme,2
.text
	.align	2, 0

