@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	SoundMainRAM_Buffer
	.section .bss.code,"aw",%nobits
	.align	2, 0
	.type	 SoundMainRAM_Buffer,object
	.size	 SoundMainRAM_Buffer,2048
SoundMainRAM_Buffer:
	.byte	0x0
	.space	2047
.text
	.align	2, 0
	.globl	MidiKeyToFreq
	.type	 MidiKeyToFreq,function
	.thumb_func
MidiKeyToFreq:
	push	{r4, r5, r6, r7, lr}
	mov	ip, r0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r7, r2, #0x18
	cmp	r6, #0xb2
	bls	.L3	@cond_branch
	mov	r6, #0xb2
	mov	r7, #0xff
	lsl	r7, r7, #0x18
.L3:
	ldr	r3, .L4
	add	r0, r6, r3
	ldrb	r5, [r0]
	ldr	r4, .L4+0x4
	mov	r2, #0xf
	add	r0, r5, #0
	and	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	lsr	r1, r5, #0x4
	ldr	r5, [r0]
	lsr	r5, r5, r1
	add	r0, r6, #0x1
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r0, r1, #0
	and	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	lsr	r1, r1, #0x4
	ldr	r0, [r0]
	lsr	r0, r0, r1
	mov	r1, ip
	ldr	r4, [r1, #0x4]
	sub	r0, r0, r5
	add	r1, r7, #0
	bl	umul3232H32
	add	r1, r0, #0
	add	r1, r5, r1
	add	r0, r4, #0
	bl	umul3232H32
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L5:
	.align	2, 0
.L4:
	.word	gScaleTable
	.word	gFreqTable
.Lfe1:
	.size	 MidiKeyToFreq,.Lfe1-MidiKeyToFreq
	.align	2, 0
	.globl	UnusedDummyFunc
	.type	 UnusedDummyFunc,function
	.thumb_func
UnusedDummyFunc:
	bx	lr
.Lfe2:
	.size	 UnusedDummyFunc,.Lfe2-UnusedDummyFunc
	.align	2, 0
	.globl	MPlayContinue
	.type	 MPlayContinue,function
	.thumb_func
MPlayContinue:
	add	r2, r0, #0
	ldr	r3, [r2, #0x34]
	ldr	r0, .L9
	cmp	r3, r0
	bne	.L8	@cond_branch
	ldr	r0, [r2, #0x4]
	ldr	r1, .L9+0x4
	and	r0, r0, r1
	str	r0, [r2, #0x4]
.L8:
	bx	lr
.L10:
	.align	2, 0
.L9:
	.word	0x68736d53
	.word	0x7fffffff
.Lfe3:
	.size	 MPlayContinue,.Lfe3-MPlayContinue
	.align	2, 0
	.globl	MPlayFadeOut
	.type	 MPlayFadeOut,function
	.thumb_func
MPlayFadeOut:
	add	r2, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, [r2, #0x34]
	ldr	r0, .L13
	cmp	r3, r0
	bne	.L12	@cond_branch
	strh	r1, [r2, #0x26]
	strh	r1, [r2, #0x24]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r2, #0x28]
.L12:
	bx	lr
.L14:
	.align	2, 0
.L13:
	.word	0x68736d53
.Lfe4:
	.size	 MPlayFadeOut,.Lfe4-MPlayFadeOut
	.align	2, 0
	.globl	m4aSoundInit
	.type	 m4aSoundInit,function
	.thumb_func
m4aSoundInit:
	push	{r4, r5, r6, lr}
	ldr	r0, .L26
	mov	r1, #0x2
	neg	r1, r1
	and	r0, r0, r1
	ldr	r1, .L26+0x4
	ldr	r2, .L26+0x8
	bl	CpuSet
	ldr	r0, .L26+0xc
	bl	SoundInit
	ldr	r0, .L26+0x10
	bl	MPlayExtender
	ldr	r0, .L26+0x14
	bl	m4aSoundMode
	ldr	r0, .L26+0x18
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L17	@cond_branch
	ldr	r6, .L26+0x1c
	add	r5, r0, #0
.L19:
	ldr	r4, [r6]
	ldr	r1, [r6, #0x4]
	ldrb	r2, [r6, #0x8]
	add	r0, r4, #0
	bl	MPlayOpen
	ldrh	r0, [r6, #0xa]
	strb	r0, [r4, #0xb]
	ldr	r0, .L26+0x20
	str	r0, [r4, #0x18]
	add	r6, r6, #0xc
	sub	r5, r5, #0x1
	cmp	r5, #0
	bne	.L19	@cond_branch
.L17:
	ldr	r0, .L26+0x24
	ldr	r1, .L26+0x28
	mov	r2, #0x34
	bl	memcpy
	mov	r5, #0x0
	mov	r6, #0x0
.L24:
	lsl	r0, r5, #0x6
	ldr	r1, .L26+0x2c
	add	r0, r0, r1
	ldr	r4, .L26+0x30
	add	r4, r6, r4
	add	r1, r4, #0
	mov	r2, #0x2
	bl	MPlayOpen
	mov	r0, #0x0
	str	r0, [r4, #0x20]
	add	r6, r6, #0xa0
	add	r5, r5, #0x1
	cmp	r5, #0x1
	ble	.L24	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	SoundMainRAM
	.word	SoundMainRAM_Buffer
	.word	0x4000200
	.word	gSoundInfo
	.word	gCgbChans
	.word	0x94c500
	.word	gNumMusicPlayers
	.word	gMPlayTable
	.word	gMPlayMemAccArea
	.word	gPokemonCrySong
	.word	gPokemonCrySongTemplate
	.word	gPokemonCryMusicPlayers
	.word	gPokemonCryTracks
.Lfe5:
	.size	 m4aSoundInit,.Lfe5-m4aSoundInit
	.align	2, 0
	.globl	m4aSoundMain
	.type	 m4aSoundMain,function
	.thumb_func
m4aSoundMain:
	push	{lr}
	bl	SoundMain
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 m4aSoundMain,.Lfe6-m4aSoundMain
	.align	2, 0
	.globl	m4aSongNumStart
	.type	 m4aSongNumStart,function
	.thumb_func
m4aSongNumStart:
	push	{lr}
	lsl	r0, r0, #0x10
	ldr	r2, .L30
	ldr	r1, .L30+0x4
	lsr	r0, r0, #0xd
	add	r0, r0, r1
	ldrh	r3, [r0, #0x4]
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r2, [r1]
	ldr	r1, [r0]
	add	r0, r2, #0
	bl	MPlayStart
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	gMPlayTable
	.word	gSongTable
.Lfe7:
	.size	 m4aSongNumStart,.Lfe7-m4aSongNumStart
	.align	2, 0
	.globl	m4aSongNumStartOrChange
	.type	 m4aSongNumStartOrChange,function
	.thumb_func
m4aSongNumStartOrChange:
	push	{lr}
	lsl	r0, r0, #0x10
	ldr	r2, .L37
	ldr	r1, .L37+0x4
	lsr	r0, r0, #0xd
	add	r0, r0, r1
	ldrh	r3, [r0, #0x4]
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	ldr	r3, [r1]
	ldr	r2, [r0]
	cmp	r3, r2
	beq	.L33	@cond_branch
	add	r0, r1, #0
	add	r1, r2, #0
	bl	MPlayStart
	b	.L34
.L38:
	.align	2, 0
.L37:
	.word	gMPlayTable
	.word	gSongTable
.L33:
	ldr	r2, [r1, #0x4]
	ldrh	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L36	@cond_branch
	cmp	r2, #0
	bge	.L34	@cond_branch
.L36:
	add	r0, r1, #0
	add	r1, r3, #0
	bl	MPlayStart
.L34:
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 m4aSongNumStartOrChange,.Lfe8-m4aSongNumStartOrChange
	.align	2, 0
	.globl	m4aSongNumStartOrContinue
	.type	 m4aSongNumStartOrContinue,function
	.thumb_func
m4aSongNumStartOrContinue:
	push	{lr}
	lsl	r0, r0, #0x10
	ldr	r2, .L45
	ldr	r1, .L45+0x4
	lsr	r0, r0, #0xd
	add	r0, r0, r1
	ldrh	r3, [r0, #0x4]
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	ldr	r3, [r1]
	ldr	r2, [r0]
	cmp	r3, r2
	beq	.L40	@cond_branch
	add	r0, r1, #0
	add	r1, r2, #0
	bl	MPlayStart
	b	.L41
.L46:
	.align	2, 0
.L45:
	.word	gMPlayTable
	.word	gSongTable
.L40:
	ldr	r2, [r1, #0x4]
	ldrh	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.L42	@cond_branch
	add	r0, r1, #0
	add	r1, r3, #0
	bl	MPlayStart
	b	.L41
.L42:
	cmp	r2, #0
	bge	.L41	@cond_branch
	add	r0, r1, #0
	bl	MPlayContinue
.L41:
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 m4aSongNumStartOrContinue,.Lfe9-m4aSongNumStartOrContinue
	.align	2, 0
	.globl	m4aSongNumStop
	.type	 m4aSongNumStop,function
	.thumb_func
m4aSongNumStop:
	push	{lr}
	lsl	r0, r0, #0x10
	ldr	r2, .L49
	ldr	r1, .L49+0x4
	lsr	r0, r0, #0xd
	add	r0, r0, r1
	ldrh	r3, [r0, #0x4]
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r2, [r1]
	ldr	r1, [r2]
	ldr	r0, [r0]
	cmp	r1, r0
	bne	.L48	@cond_branch
	add	r0, r2, #0
	bl	m4aMPlayStop
.L48:
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gMPlayTable
	.word	gSongTable
.Lfe10:
	.size	 m4aSongNumStop,.Lfe10-m4aSongNumStop
	.align	2, 0
	.globl	m4aSongNumContinue
	.type	 m4aSongNumContinue,function
	.thumb_func
m4aSongNumContinue:
	push	{lr}
	lsl	r0, r0, #0x10
	ldr	r2, .L53
	ldr	r1, .L53+0x4
	lsr	r0, r0, #0xd
	add	r0, r0, r1
	ldrh	r3, [r0, #0x4]
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r2, [r1]
	ldr	r1, [r2]
	ldr	r0, [r0]
	cmp	r1, r0
	bne	.L52	@cond_branch
	add	r0, r2, #0
	bl	MPlayContinue
.L52:
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gMPlayTable
	.word	gSongTable
.Lfe11:
	.size	 m4aSongNumContinue,.Lfe11-m4aSongNumContinue
	.align	2, 0
	.globl	m4aMPlayAllStop
	.type	 m4aMPlayAllStop,function
	.thumb_func
m4aMPlayAllStop:
	push	{r4, r5, lr}
	ldr	r0, .L66
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L57	@cond_branch
	ldr	r5, .L66+0x4
	add	r4, r0, #0
.L59:
	ldr	r0, [r5]
	bl	m4aMPlayStop
	add	r5, r5, #0xc
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L59	@cond_branch
.L57:
	ldr	r5, .L66+0x8
	mov	r4, #0x1
.L64:
	add	r0, r5, #0
	bl	m4aMPlayStop
	add	r5, r5, #0x40
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L64	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L67:
	.align	2, 0
.L66:
	.word	gNumMusicPlayers
	.word	gMPlayTable
	.word	gPokemonCryMusicPlayers
.Lfe12:
	.size	 m4aMPlayAllStop,.Lfe12-m4aMPlayAllStop
	.align	2, 0
	.globl	m4aMPlayContinue
	.type	 m4aMPlayContinue,function
	.thumb_func
m4aMPlayContinue:
	push	{lr}
	bl	MPlayContinue
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 m4aMPlayContinue,.Lfe13-m4aMPlayContinue
	.align	2, 0
	.globl	m4aMPlayAllContinue
	.type	 m4aMPlayAllContinue,function
	.thumb_func
m4aMPlayAllContinue:
	push	{r4, r5, lr}
	ldr	r0, .L80
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L71	@cond_branch
	ldr	r5, .L80+0x4
	add	r4, r0, #0
.L73:
	ldr	r0, [r5]
	bl	MPlayContinue
	add	r5, r5, #0xc
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L73	@cond_branch
.L71:
	ldr	r5, .L80+0x8
	mov	r4, #0x1
.L78:
	add	r0, r5, #0
	bl	MPlayContinue
	add	r5, r5, #0x40
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L78	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	gNumMusicPlayers
	.word	gMPlayTable
	.word	gPokemonCryMusicPlayers
.Lfe14:
	.size	 m4aMPlayAllContinue,.Lfe14-m4aMPlayAllContinue
	.align	2, 0
	.globl	m4aMPlayFadeOut
	.type	 m4aMPlayFadeOut,function
	.thumb_func
m4aMPlayFadeOut:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	MPlayFadeOut
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 m4aMPlayFadeOut,.Lfe15-m4aMPlayFadeOut
	.align	2, 0
	.globl	m4aMPlayFadeOutTemporarily
	.type	 m4aMPlayFadeOutTemporarily,function
	.thumb_func
m4aMPlayFadeOutTemporarily:
	add	r2, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, [r2, #0x34]
	ldr	r0, .L85
	cmp	r3, r0
	bne	.L84	@cond_branch
	strh	r1, [r2, #0x26]
	strh	r1, [r2, #0x24]
	ldr	r0, .L85+0x4
	strh	r0, [r2, #0x28]
.L84:
	bx	lr
.L86:
	.align	2, 0
.L85:
	.word	0x68736d53
	.word	0x101
.Lfe16:
	.size	 m4aMPlayFadeOutTemporarily,.Lfe16-m4aMPlayFadeOutTemporarily
	.align	2, 0
	.globl	m4aMPlayFadeIn
	.type	 m4aMPlayFadeIn,function
	.thumb_func
m4aMPlayFadeIn:
	add	r2, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, [r2, #0x34]
	ldr	r0, .L89
	cmp	r3, r0
	bne	.L88	@cond_branch
	strh	r1, [r2, #0x26]
	strh	r1, [r2, #0x24]
	mov	r0, #0x2
	strh	r0, [r2, #0x28]
	ldr	r0, [r2, #0x4]
	ldr	r1, .L89+0x4
	and	r0, r0, r1
	str	r0, [r2, #0x4]
.L88:
	bx	lr
.L90:
	.align	2, 0
.L89:
	.word	0x68736d53
	.word	0x7fffffff
.Lfe17:
	.size	 m4aMPlayFadeIn,.Lfe17-m4aMPlayFadeIn
	.align	2, 0
	.globl	m4aMPlayImmInit
	.type	 m4aMPlayImmInit,function
	.thumb_func
m4aMPlayImmInit:
	push	{r4, r5, r6, r7, lr}
	ldrb	r5, [r0, #0x8]
	ldr	r4, [r0, #0x2c]
	cmp	r5, #0
	ble	.L93	@cond_branch
	mov	r7, #0x80
.L94:
	ldrb	r1, [r4]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L95	@cond_branch
	mov	r6, #0x40
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L95	@cond_branch
	add	r0, r4, #0
	bl	Clear64byte
	strb	r7, [r4]
	mov	r0, #0x2
	strb	r0, [r4, #0xf]
	strb	r6, [r4, #0x13]
	mov	r0, #0x16
	strb	r0, [r4, #0x19]
	add	r1, r4, #0
	add	r1, r1, #0x24
	mov	r0, #0x1
	strb	r0, [r1]
.L95:
	sub	r5, r5, #0x1
	add	r4, r4, #0x50
	cmp	r5, #0
	bgt	.L94	@cond_branch
.L93:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 m4aMPlayImmInit,.Lfe18-m4aMPlayImmInit
	.align	2, 0
	.globl	MPlayExtender
	.type	 MPlayExtender,function
	.thumb_func
MPlayExtender:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	ldr	r1, .L100
	mov	r0, #0x8f
	strh	r0, [r1]
	ldr	r3, .L100+0x4
	mov	r2, #0x0
	strh	r2, [r3]
	ldr	r0, .L100+0x8
	mov	r1, #0x8
	strb	r1, [r0]
	add	r0, r0, #0x6
	strb	r1, [r0]
	add	r0, r0, #0x10
	strb	r1, [r0]
	sub	r0, r0, #0x14
	mov	r1, #0x80
	strb	r1, [r0]
	add	r0, r0, #0x8
	strb	r1, [r0]
	add	r0, r0, #0x10
	strb	r1, [r0]
	sub	r0, r0, #0xd
	strb	r2, [r0]
	mov	r0, #0x77
	strb	r0, [r3]
	ldr	r0, .L100+0xc
	ldr	r4, [r0]
	ldr	r6, [r4]
	ldr	r0, .L100+0x10
	cmp	r6, r0
	bne	.L98	@cond_branch
	add	r0, r6, #0x1
	str	r0, [r4]
	ldr	r1, .L100+0x14
	ldr	r0, .L100+0x18
	str	r0, [r1, #0x20]
	ldr	r0, .L100+0x1c
	str	r0, [r1, #0x44]
	ldr	r0, .L100+0x20
	str	r0, [r1, #0x4c]
	ldr	r0, .L100+0x24
	str	r0, [r1, #0x70]
	ldr	r0, .L100+0x28
	str	r0, [r1, #0x74]
	ldr	r0, .L100+0x2c
	str	r0, [r1, #0x78]
	ldr	r0, .L100+0x30
	str	r0, [r1, #0x7c]
	add	r2, r1, #0
	add	r2, r2, #0x80
	ldr	r0, .L100+0x34
	str	r0, [r2]
	add	r1, r1, #0x84
	ldr	r0, .L100+0x38
	str	r0, [r1]
	str	r5, [r4, #0x1c]
	ldr	r0, .L100+0x3c
	str	r0, [r4, #0x28]
	ldr	r0, .L100+0x40
	str	r0, [r4, #0x2c]
	ldr	r0, .L100+0x44
	str	r0, [r4, #0x30]
	ldr	r0, .L100+0x48
	mov	r1, #0x0
	strb	r0, [r4, #0xc]
	str	r1, [sp]
	ldr	r2, .L100+0x4c
	mov	r0, sp
	add	r1, r5, #0
	bl	CpuSet
	mov	r0, #0x1
	strb	r0, [r5, #0x1]
	mov	r0, #0x11
	strb	r0, [r5, #0x1c]
	add	r1, r5, #0
	add	r1, r1, #0x41
	mov	r0, #0x2
	strb	r0, [r1]
	add	r1, r1, #0x1b
	mov	r0, #0x22
	strb	r0, [r1]
	add	r1, r1, #0x25
	mov	r0, #0x3
	strb	r0, [r1]
	add	r1, r1, #0x1b
	mov	r0, #0x44
	strb	r0, [r1]
	add	r1, r1, #0x24
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	mov	r0, #0x88
	strb	r0, [r1, #0x1c]
	str	r6, [r4]
.L98:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	0x4000084
	.word	0x4000080
	.word	0x4000063
	.word	0x3007ff0
	.word	0x68736d53
	.word	gMPlayJumpTable
	.word	ply_memacc
	.word	ply_lfos
	.word	ply_mod
	.word	ply_xcmd
	.word	ply_endtie
	.word	SampleFreqSet
	.word	TrackStop
	.word	FadeOutBody
	.word	TrkVolPitSet
	.word	CgbSound
	.word	CgbOscOff
	.word	MidiKeyToCgbFreq
	.word	gMaxLines
	.word	0x5000040
.Lfe19:
	.size	 MPlayExtender,.Lfe19-MPlayExtender
	.align	2, 0
	.globl	MusicPlayerJumpTableCopy
	.type	 MusicPlayerJumpTableCopy,function
	.thumb_func
MusicPlayerJumpTableCopy:
	swi 0x2A
	.code	16
	bx	lr
.Lfe20:
	.size	 MusicPlayerJumpTableCopy,.Lfe20-MusicPlayerJumpTableCopy
	.align	2, 0
	.globl	ClearChain
	.type	 ClearChain,function
	.thumb_func
ClearChain:
	push	{lr}
	ldr	r1, .L104
	ldr	r1, [r1]
	bl	_call_via_r1
	pop	{r0}
	bx	r0
.L105:
	.align	2, 0
.L104:
	.word	gMPlayJumpTable+0x88
.Lfe21:
	.size	 ClearChain,.Lfe21-ClearChain
	.align	2, 0
	.globl	Clear64byte
	.type	 Clear64byte,function
	.thumb_func
Clear64byte:
	push	{lr}
	ldr	r1, .L107
	ldr	r1, [r1]
	bl	_call_via_r1
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	gMPlayJumpTable+0x8c
.Lfe22:
	.size	 Clear64byte,.Lfe22-Clear64byte
	.align	2, 0
	.globl	SoundInit
	.type	 SoundInit,function
	.thumb_func
SoundInit:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	mov	r3, #0x0
	str	r3, [r5]
	ldr	r1, .L112
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L110	@cond_branch
	ldr	r0, .L112+0x4
	str	r0, [r1]
.L110:
	ldr	r1, .L112+0x8
	ldr	r0, [r1]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L111	@cond_branch
	ldr	r0, .L112+0x4
	str	r0, [r1]
.L111:
	ldr	r0, .L112+0xc
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r1, r2, #0
	strh	r1, [r0]
	add	r0, r0, #0xc
	strh	r1, [r0]
	ldr	r1, .L112+0x10
	mov	r0, #0x8f
	strh	r0, [r1]
	sub	r1, r1, #0x2
	ldr	r2, .L112+0x14
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r2, .L112+0x18
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L112+0x1c
	mov	r2, #0xd4
	lsl	r2, r2, #0x2
	add	r0, r5, r2
	str	r0, [r1]
	add	r1, r1, #0x4
	ldr	r0, .L112+0x20
	str	r0, [r1]
	add	r1, r1, #0x8
	mov	r2, #0x98
	lsl	r2, r2, #0x4
	add	r0, r5, r2
	str	r0, [r1]
	add	r1, r1, #0x4
	ldr	r0, .L112+0x24
	str	r0, [r1]
	ldr	r0, .L112+0x28
	str	r5, [r0]
	str	r3, [sp]
	ldr	r2, .L112+0x2c
	mov	r0, sp
	add	r1, r5, #0
	bl	CpuSet
	mov	r0, #0x8
	strb	r0, [r5, #0x6]
	mov	r0, #0xf
	strb	r0, [r5, #0x7]
	ldr	r0, .L112+0x30
	str	r0, [r5, #0x38]
	ldr	r0, .L112+0x34
	str	r0, [r5, #0x28]
	str	r0, [r5, #0x2c]
	str	r0, [r5, #0x30]
	str	r0, [r5, #0x3c]
	ldr	r4, .L112+0x38
	add	r0, r4, #0
	bl	MPlayJumpTableCopy
	str	r4, [r5, #0x34]
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	bl	SampleFreqSet
	ldr	r0, .L112+0x3c
	str	r0, [r5]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	0x40000c4
	.word	-0x7bbffffc
	.word	0x40000d0
	.word	0x40000c6
	.word	0x4000084
	.word	0xa90e
	.word	0x4000089
	.word	0x40000bc
	.word	0x40000a0
	.word	0x40000a4
	.word	0x3007ff0
	.word	0x50003ec
	.word	ply_note
	.word	DummyFunc
	.word	gMPlayJumpTable
	.word	0x68736d53
.Lfe23:
	.size	 SoundInit,.Lfe23-SoundInit
	.align	2, 0
	.globl	SampleFreqSet
	.type	 SampleFreqSet,function
	.thumb_func
SampleFreqSet:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	ldr	r0, .L123
	ldr	r4, [r0]
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r0, r0, r2
	lsr	r2, r0, #0x10
	mov	r6, #0x0
	strb	r2, [r4, #0x8]
	ldr	r1, .L123+0x4
	sub	r0, r2, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r5, [r0]
	str	r5, [r4, #0x10]
	mov	r0, #0xc6
	lsl	r0, r0, #0x3
	add	r1, r5, #0
	bl	__divsi3
	strb	r0, [r4, #0xb]
	ldr	r0, .L123+0x8
	mul	r0, r0, r5
	ldr	r1, .L123+0xc
	add	r0, r0, r1
	ldr	r1, .L123+0x10
	bl	__divsi3
	add	r1, r0, #0
	str	r1, [r4, #0x14]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	bl	__divsi3
	add	r0, r0, #0x1
	asr	r0, r0, #0x1
	str	r0, [r4, #0x18]
	ldr	r0, .L123+0x14
	strh	r6, [r0]
	ldr	r4, .L123+0x18
	ldr	r0, .L123+0x1c
	add	r1, r5, #0
	bl	__divsi3
	neg	r0, r0
	strh	r0, [r4]
	bl	m4aSoundVSyncOn
	ldr	r1, .L123+0x20
.L115:
	ldrb	r0, [r1]
	cmp	r0, #0x9f
	beq	.L115	@cond_branch
	ldr	r1, .L123+0x20
.L119:
	ldrb	r0, [r1]
	cmp	r0, #0x9f
	bne	.L119	@cond_branch
	ldr	r1, .L123+0x14
	mov	r0, #0x80
	strh	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L124:
	.align	2, 0
.L123:
	.word	0x3007ff0
	.word	gPcmSamplesPerVBlankTable
	.word	0x91d1b
	.word	0x1388
	.word	0x2710
	.word	0x4000102
	.word	0x4000100
	.word	0x44940
	.word	0x4000006
.Lfe24:
	.size	 SampleFreqSet,.Lfe24-SampleFreqSet
	.align	2, 0
	.globl	m4aSoundMode
	.type	 m4aSoundMode,function
	.thumb_func
m4aSoundMode:
	push	{r4, r5, lr}
	add	r3, r0, #0
	ldr	r0, .L136
	ldr	r5, [r0]
	ldr	r1, [r5]
	ldr	r0, .L136+0x4
	cmp	r1, r0
	bne	.L125	@cond_branch
	add	r0, r1, #0x1
	str	r0, [r5]
	mov	r4, #0xff
	and	r4, r4, r3
	cmp	r4, #0
	beq	.L127	@cond_branch
	mov	r0, #0x7f
	and	r4, r4, r0
	strb	r4, [r5, #0x5]
.L127:
	mov	r4, #0xf0
	lsl	r4, r4, #0x4
	and	r4, r4, r3
	cmp	r4, #0
	beq	.L128	@cond_branch
	lsr	r0, r4, #0x8
	strb	r0, [r5, #0x6]
	mov	r4, #0xc
	add	r0, r5, #0
	add	r0, r0, #0x50
	mov	r1, #0x0
.L131:
	strb	r1, [r0]
	sub	r4, r4, #0x1
	add	r0, r0, #0x40
	cmp	r4, #0
	bne	.L131	@cond_branch
.L128:
	mov	r4, #0xf0
	lsl	r4, r4, #0x8
	and	r4, r4, r3
	cmp	r4, #0
	beq	.L133	@cond_branch
	lsr	r0, r4, #0xc
	strb	r0, [r5, #0x7]
.L133:
	mov	r4, #0xb0
	lsl	r4, r4, #0x10
	and	r4, r4, r3
	cmp	r4, #0
	beq	.L134	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0xe
	and	r0, r0, r4
	lsr	r4, r0, #0xe
	ldr	r2, .L136+0x8
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	orr	r0, r0, r4
	strb	r0, [r2]
.L134:
	mov	r4, #0xf0
	lsl	r4, r4, #0xc
	and	r4, r4, r3
	cmp	r4, #0
	beq	.L135	@cond_branch
	bl	m4aSoundVSyncOff
	add	r0, r4, #0
	bl	SampleFreqSet
.L135:
	ldr	r0, .L136+0x4
	str	r0, [r5]
.L125:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L137:
	.align	2, 0
.L136:
	.word	0x3007ff0
	.word	0x68736d53
	.word	0x4000089
.Lfe25:
	.size	 m4aSoundMode,.Lfe25-m4aSoundMode
	.align	2, 0
	.globl	SoundClear
	.type	 SoundClear,function
	.thumb_func
SoundClear:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L149
	ldr	r6, [r0]
	ldr	r1, [r6]
	ldr	r0, .L149+0x4
	cmp	r1, r0
	bne	.L138	@cond_branch
	add	r0, r1, #0x1
	str	r0, [r6]
	mov	r5, #0xc
	add	r4, r6, #0
	add	r4, r4, #0x50
	mov	r0, #0x0
.L142:
	strb	r0, [r4]
	sub	r5, r5, #0x1
	add	r4, r4, #0x40
	cmp	r5, #0
	bgt	.L142	@cond_branch
	ldr	r4, [r6, #0x1c]
	cmp	r4, #0
	beq	.L144	@cond_branch
	mov	r5, #0x1
	mov	r7, #0x0
.L147:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r6, #0x2c]
	bl	_call_via_r1
	strb	r7, [r4]
	add	r5, r5, #0x1
	add	r4, r4, #0x40
	cmp	r5, #0x4
	ble	.L147	@cond_branch
.L144:
	ldr	r0, .L149+0x4
	str	r0, [r6]
.L138:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	0x3007ff0
	.word	0x68736d53
.Lfe26:
	.size	 SoundClear,.Lfe26-SoundClear
	.align	2, 0
	.globl	m4aSoundVSyncOff
	.type	 m4aSoundVSyncOff,function
	.thumb_func
m4aSoundVSyncOff:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r0, .L155
	ldr	r2, [r0]
	ldr	r1, [r2]
	ldr	r3, .L155+0x4
	add	r0, r1, r3
	cmp	r0, #0x1
	bhi	.L152	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0xa
	str	r0, [r2]
	ldr	r1, .L155+0x8
	ldr	r0, [r1]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L153	@cond_branch
	ldr	r0, .L155+0xc
	str	r0, [r1]
.L153:
	ldr	r1, .L155+0x10
	ldr	r0, [r1]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L154	@cond_branch
	ldr	r0, .L155+0xc
	str	r0, [r1]
.L154:
	ldr	r0, .L155+0x14
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	add	r1, r3, #0
	strh	r1, [r0]
	add	r0, r0, #0xc
	strh	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xd4
	lsl	r0, r0, #0x2
	add	r1, r2, r0
	ldr	r2, .L155+0x18
	mov	r0, sp
	bl	CpuSet
.L152:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L156:
	.align	2, 0
.L155:
	.word	0x3007ff0
	.word	-0x68736d53
	.word	0x40000c4
	.word	-0x7bbffffc
	.word	0x40000d0
	.word	0x40000c6
	.word	0x5000318
.Lfe27:
	.size	 m4aSoundVSyncOff,.Lfe27-m4aSoundVSyncOff
	.align	2, 0
	.globl	m4aSoundVSyncOn
	.type	 m4aSoundVSyncOn,function
	.thumb_func
m4aSoundVSyncOn:
	push	{r4, lr}
	ldr	r0, .L159
	ldr	r2, [r0]
	ldr	r3, [r2]
	ldr	r0, .L159+0x4
	cmp	r3, r0
	beq	.L157	@cond_branch
	ldr	r0, .L159+0x8
	mov	r4, #0xb6
	lsl	r4, r4, #0x8
	add	r1, r4, #0
	strh	r1, [r0]
	add	r0, r0, #0xc
	strh	r1, [r0]
	ldrb	r0, [r2, #0x4]
	mov	r0, #0x0
	strb	r0, [r2, #0x4]
	add	r0, r3, #0
	sub	r0, r0, #0xa
	str	r0, [r2]
.L157:
	pop	{r4}
	pop	{r0}
	bx	r0
.L160:
	.align	2, 0
.L159:
	.word	0x3007ff0
	.word	0x68736d53
	.word	0x40000c6
.Lfe28:
	.size	 m4aSoundVSyncOn,.Lfe28-m4aSoundVSyncOn
	.align	2, 0
	.globl	MPlayOpen
	.type	 MPlayOpen,function
	.thumb_func
MPlayOpen:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	add	r6, r1, #0
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	cmp	r4, #0
	beq	.L161	@cond_branch
	cmp	r4, #0x10
	bls	.L163	@cond_branch
	mov	r4, #0x10
.L163:
	ldr	r0, .L170
	ldr	r5, [r0]
	ldr	r1, [r5]
	ldr	r0, .L170+0x4
	cmp	r1, r0
	bne	.L161	@cond_branch
	add	r0, r1, #0x1
	str	r0, [r5]
	add	r0, r7, #0
	bl	Clear64byte
	str	r6, [r7, #0x2c]
	strb	r4, [r7, #0x8]
	mov	r0, #0x80
	lsl	r0, r0, #0x18
	str	r0, [r7, #0x4]
	cmp	r4, #0
	beq	.L166	@cond_branch
	mov	r1, #0x0
.L167:
	strb	r1, [r6]
	sub	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r6, #0x50
	cmp	r4, #0
	bne	.L167	@cond_branch
.L166:
	ldr	r0, [r5, #0x20]
	cmp	r0, #0
	beq	.L169	@cond_branch
	str	r0, [r7, #0x38]
	ldr	r0, [r5, #0x24]
	str	r0, [r7, #0x3c]
	mov	r0, #0x0
	str	r0, [r5, #0x20]
.L169:
	str	r7, [r5, #0x24]
	ldr	r0, .L170+0x8
	str	r0, [r5, #0x20]
	ldr	r0, .L170+0x4
	str	r0, [r5]
	str	r0, [r7, #0x34]
.L161:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L171:
	.align	2, 0
.L170:
	.word	0x3007ff0
	.word	0x68736d53
	.word	MPlayMain
.Lfe29:
	.size	 MPlayOpen,.Lfe29-MPlayOpen
	.align	2, 0
	.globl	MPlayStart
	.type	 MPlayStart,function
	.thumb_func
MPlayStart:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	add	r7, r1, #0
	ldr	r1, [r5, #0x34]
	ldr	r0, .L189
	cmp	r1, r0
	bne	.L172	@cond_branch
	ldrb	r0, [r5, #0xb]
	ldrb	r2, [r7, #0x2]
	cmp	r0, #0
	beq	.L175	@cond_branch
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L177	@cond_branch
	ldr	r1, [r5, #0x2c]
	mov	r0, #0x40
	ldrb	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L176	@cond_branch
.L177:
	ldr	r1, [r5, #0x4]
	ldrh	r0, [r5, #0x4]
	cmp	r0, #0
	beq	.L175	@cond_branch
	cmp	r1, #0
	blt	.L175	@cond_branch
.L176:
	ldrb	r0, [r7, #0x2]
	add	r2, r0, #0
	ldrb	r0, [r5, #0x9]
	cmp	r0, r2
	bhi	.L172	@cond_branch
.L175:
	ldr	r0, [r5, #0x34]
	add	r0, r0, #0x1
	str	r0, [r5, #0x34]
	mov	r1, #0x0
	str	r1, [r5, #0x4]
	str	r7, [r5]
	ldr	r0, [r7, #0x4]
	str	r0, [r5, #0x30]
	strb	r2, [r5, #0x9]
	str	r1, [r5, #0xc]
	mov	r0, #0x96
	strh	r0, [r5, #0x1c]
	strh	r0, [r5, #0x20]
	add	r0, r0, #0x6a
	strh	r0, [r5, #0x1e]
	strh	r1, [r5, #0x22]
	strh	r1, [r5, #0x24]
	mov	r6, #0x0
	ldr	r4, [r5, #0x2c]
	ldrb	r1, [r7]
	cmp	r6, r1
	bge	.L179	@cond_branch
	ldrb	r0, [r5, #0x8]
	cmp	r6, r0
	bge	.L188	@cond_branch
	mov	r8, r6
.L180:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	TrackStop
	mov	r0, #0xc0
	strb	r0, [r4]
	mov	r1, r8
	str	r1, [r4, #0x20]
	lsl	r1, r6, #0x2
	add	r0, r7, #0
	add	r0, r0, #0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [r4, #0x40]
	add	r6, r6, #0x1
	add	r4, r4, #0x50
	ldrb	r0, [r7]
	cmp	r6, r0
	bge	.L179	@cond_branch
	ldrb	r1, [r5, #0x8]
	cmp	r6, r1
	blt	.L180	@cond_branch
.L179:
	ldrb	r0, [r5, #0x8]
	cmp	r6, r0
	bge	.L188	@cond_branch
	mov	r1, #0x0
	mov	r8, r1
.L185:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	TrackStop
	mov	r0, r8
	strb	r0, [r4]
	add	r6, r6, #0x1
	add	r4, r4, #0x50
	ldrb	r1, [r5, #0x8]
	cmp	r6, r1
	blt	.L185	@cond_branch
.L188:
	mov	r0, #0x80
	ldrb	r1, [r7, #0x3]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L187	@cond_branch
	ldrb	r0, [r7, #0x3]
	bl	m4aSoundMode
.L187:
	ldr	r0, .L189
	str	r0, [r5, #0x34]
.L172:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L190:
	.align	2, 0
.L189:
	.word	0x68736d53
.Lfe30:
	.size	 MPlayStart,.Lfe30-MPlayStart
	.align	2, 0
	.globl	m4aMPlayStop
	.type	 m4aMPlayStop,function
	.thumb_func
m4aMPlayStop:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r1, [r6, #0x34]
	ldr	r0, .L197
	cmp	r1, r0
	bne	.L191	@cond_branch
	add	r0, r1, #0x1
	str	r0, [r6, #0x34]
	ldr	r0, [r6, #0x4]
	mov	r1, #0x80
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	str	r0, [r6, #0x4]
	ldrb	r4, [r6, #0x8]
	ldr	r5, [r6, #0x2c]
	cmp	r4, #0
	ble	.L194	@cond_branch
.L195:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	TrackStop
	sub	r4, r4, #0x1
	add	r5, r5, #0x50
	cmp	r4, #0
	bgt	.L195	@cond_branch
.L194:
	ldr	r0, .L197
	str	r0, [r6, #0x34]
.L191:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L198:
	.align	2, 0
.L197:
	.word	0x68736d53
.Lfe31:
	.size	 m4aMPlayStop,.Lfe31-m4aMPlayStop
	.align	2, 0
	.globl	FadeOutBody
	.type	 FadeOutBody,function
	.thumb_func
FadeOutBody:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldrh	r1, [r6, #0x24]
	cmp	r1, #0
	beq	.L199	@cond_branch
	ldrh	r0, [r6, #0x26]
	sub	r0, r0, #0x1
	strh	r0, [r6, #0x26]
	ldr	r3, .L219
	add	r2, r3, #0
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0
	bne	.L199	@cond_branch
	strh	r1, [r6, #0x26]
	ldrh	r1, [r6, #0x28]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L202	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x10
	strh	r0, [r6, #0x28]
	and	r0, r0, r2
	cmp	r0, #0xff
	bls	.L204	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r6, #0x28]
	strh	r3, [r6, #0x24]
	b	.L204
.L220:
	.align	2, 0
.L219:
	.word	0xffff
.L202:
	add	r0, r1, #0
	sub	r0, r0, #0x10
	strh	r0, [r6, #0x28]
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L204	@cond_branch
	ldrb	r5, [r6, #0x8]
	ldr	r4, [r6, #0x2c]
	cmp	r5, #0
	ble	.L207	@cond_branch
.L208:
	add	r0, r6, #0
	add	r1, r4, #0
	bl	TrackStop
	mov	r0, #0x1
	ldrh	r7, [r6, #0x28]
	and	r0, r0, r7
	cmp	r0, #0
	bne	.L209	@cond_branch
	strb	r0, [r4]
.L209:
	sub	r5, r5, #0x1
	add	r4, r4, #0x50
	cmp	r5, #0
	bgt	.L208	@cond_branch
.L207:
	mov	r0, #0x1
	ldrh	r1, [r6, #0x28]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L211	@cond_branch
	ldr	r0, [r6, #0x4]
	mov	r1, #0x80
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	b	.L218
.L211:
	mov	r0, #0x80
	lsl	r0, r0, #0x18
.L218:
	str	r0, [r6, #0x4]
	mov	r0, #0x0
	strh	r0, [r6, #0x24]
	b	.L199
.L204:
	ldrb	r5, [r6, #0x8]
	ldr	r4, [r6, #0x2c]
	cmp	r5, #0
	ble	.L199	@cond_branch
	mov	r3, #0x80
	mov	r7, #0x0
	mov	r2, #0x3
.L215:
	ldrb	r1, [r4]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L216	@cond_branch
	ldrh	r7, [r6, #0x28]
	lsr	r0, r7, #0x2
	strb	r0, [r4, #0x13]
	add	r0, r1, #0
	orr	r0, r0, r2
	strb	r0, [r4]
.L216:
	sub	r5, r5, #0x1
	add	r4, r4, #0x50
	cmp	r5, #0
	bgt	.L215	@cond_branch
.L199:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 FadeOutBody,.Lfe32-FadeOutBody
	.align	2, 0
	.globl	TrkVolPitSet
	.type	 TrkVolPitSet,function
	.thumb_func
TrkVolPitSet:
	push	{r4, lr}
	add	r2, r1, #0
	mov	r0, #0x1
	ldrb	r1, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L222	@cond_branch
	ldrb	r3, [r2, #0x13]
	ldrb	r1, [r2, #0x12]
	mov	r0, r3
	mul	r0, r0, r1
	lsr	r3, r0, #0x5
	ldrb	r4, [r2, #0x18]
	cmp	r4, #0x1
	bne	.L223	@cond_branch
	mov	r0, #0x16
	ldrsb	r0, [r2, r0]
	add	r0, r0, #0x80
	mul	r0, r0, r3
	lsr	r3, r0, #0x7
.L223:
	mov	r0, #0x14
	ldrsb	r0, [r2, r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x15
	ldrsb	r1, [r2, r1]
	add	r1, r0, r1
	cmp	r4, #0x2
	bne	.L224	@cond_branch
	mov	r0, #0x16
	ldrsb	r0, [r2, r0]
	add	r1, r1, r0
.L224:
	mov	r0, #0x80
	neg	r0, r0
	cmp	r1, r0
	bge	.L225	@cond_branch
	add	r1, r0, #0
	b	.L226
.L225:
	cmp	r1, #0x7f
	ble	.L226	@cond_branch
	mov	r1, #0x7f
.L226:
	add	r0, r1, #0
	add	r0, r0, #0x80
	mul	r0, r0, r3
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x10]
	mov	r0, #0x7f
	sub	r0, r0, r1
	mul	r0, r0, r3
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x11]
.L222:
	ldrb	r1, [r2]
	mov	r0, #0x4
	and	r0, r0, r1
	add	r3, r1, #0
	cmp	r0, #0
	beq	.L228	@cond_branch
	mov	r0, #0xe
	ldrsb	r0, [r2, r0]
	ldrb	r1, [r2, #0xf]
	mul	r0, r0, r1
	mov	r1, #0xc
	ldrsb	r1, [r2, r1]
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xa
	ldrsb	r0, [r2, r0]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	mov	r0, #0xb
	ldrsb	r0, [r2, r0]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0xd]
	add	r1, r0, r1
	ldrb	r0, [r2, #0x18]
	cmp	r0, #0
	bne	.L229	@cond_branch
	mov	r0, #0x16
	ldrsb	r0, [r2, r0]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
.L229:
	asr	r0, r1, #0x8
	strb	r0, [r2, #0x8]
	strb	r1, [r2, #0x9]
.L228:
	mov	r0, #0xfa
	and	r0, r0, r3
	strb	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 TrkVolPitSet,.Lfe33-TrkVolPitSet
	.align	2, 0
	.globl	MidiKeyToCgbFreq
	.type	 MidiKeyToCgbFreq,function
	.thumb_func
MidiKeyToCgbFreq:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	ip, r2
	cmp	r0, #0x4
	bne	.L231	@cond_branch
	cmp	r5, #0x14
	bhi	.L232	@cond_branch
	mov	r5, #0x0
	b	.L233
.L232:
	add	r0, r5, #0
	sub	r0, r0, #0x15
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3b
	bls	.L233	@cond_branch
	mov	r5, #0x3b
.L233:
	ldr	r0, .L241
	add	r0, r5, r0
	ldrb	r0, [r0]
	b	.L240
.L242:
	.align	2, 0
.L241:
	.word	gNoiseTable
.L231:
	cmp	r5, #0x23
	bhi	.L236	@cond_branch
	mov	r0, #0x0
	mov	ip, r0
	mov	r5, #0x0
	b	.L237
.L236:
	add	r0, r5, #0
	sub	r0, r0, #0x24
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x82
	bls	.L237	@cond_branch
	mov	r5, #0x82
	mov	r1, #0xff
	mov	ip, r1
.L237:
	ldr	r3, .L243
	add	r0, r5, r3
	ldrb	r6, [r0]
	ldr	r4, .L243+0x4
	mov	r2, #0xf
	add	r0, r6, #0
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r7, #0x0
	ldrsh	r1, [r0, r7]
	asr	r0, r6, #0x4
	add	r6, r1, #0
	asr	r6, r6, r0
	add	r0, r5, #0x1
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r0, r1, #0
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	asr	r1, r1, #0x4
	asr	r0, r0, r1
	sub	r0, r0, r6
	mov	r7, ip
	mul	r7, r7, r0
	add	r0, r7, #0
	asr	r0, r0, #0x8
	add	r0, r6, r0
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	add	r0, r0, r1
.L240:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L244:
	.align	2, 0
.L243:
	.word	gCgbScaleTable
	.word	gCgbFreqTable
.Lfe34:
	.size	 MidiKeyToCgbFreq,.Lfe34-MidiKeyToCgbFreq
	.align	2, 0
	.globl	CgbOscOff
	.type	 CgbOscOff,function
	.thumb_func
CgbOscOff:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0x2
	beq	.L248	@cond_branch
	cmp	r0, #0x2
	bgt	.L252	@cond_branch
	cmp	r0, #0x1
	beq	.L247	@cond_branch
	b	.L250
.L252:
	cmp	r1, #0x3
	beq	.L249	@cond_branch
	b	.L250
.L247:
	ldr	r1, .L256
	mov	r0, #0x8
	strb	r0, [r1]
	add	r1, r1, #0x2
	b	.L253
.L257:
	.align	2, 0
.L256:
	.word	0x4000063
.L248:
	ldr	r1, .L258
	b	.L254
.L259:
	.align	2, 0
.L258:
	.word	0x4000069
.L249:
	ldr	r1, .L260
	mov	r0, #0x0
	b	.L255
.L261:
	.align	2, 0
.L260:
	.word	0x4000070
.L250:
	ldr	r1, .L262
.L254:
	mov	r0, #0x8
	strb	r0, [r1]
	add	r1, r1, #0x4
.L253:
	mov	r0, #0x80
.L255:
	strb	r0, [r1]
	bx	lr
.L263:
	.align	2, 0
.L262:
	.word	0x4000079
.Lfe35:
	.size	 CgbOscOff,.Lfe35-CgbOscOff
	.align	2, 0
	.globl	CgbModVol
	.type	 CgbModVol,function
	.thumb_func
CgbModVol:
	push	{r4, lr}
	add	r2, r0, #0
	ldr	r0, .L280
	ldr	r1, [r0]
	mov	r0, #0x1
	ldrb	r1, [r1, #0x9]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L271	@cond_branch
	ldrb	r0, [r2, #0x2]
	lsl	r1, r0, #0x18
	lsr	r4, r1, #0x18
	ldrb	r3, [r2, #0x3]
	lsl	r0, r3, #0x18
	lsr	r3, r0, #0x18
	cmp	r4, r3
	bcc	.L272	@cond_branch
	lsr	r0, r1, #0x19
	cmp	r0, r3
	bcc	.L271	@cond_branch
	mov	r0, #0xf
	strb	r0, [r2, #0x1b]
	b	.L270
.L281:
	.align	2, 0
.L280:
	.word	0x3007ff0
.L272:
	lsr	r0, r0, #0x19
	cmp	r0, r4
	bcc	.L271	@cond_branch
	mov	r0, #0xf0
	strb	r0, [r2, #0x1b]
	b	.L270
.L271:
	mov	r0, #0xff
	strb	r0, [r2, #0x1b]
	ldrb	r1, [r2, #0x3]
	ldrb	r3, [r2, #0x2]
	add	r0, r1, r3
	lsr	r0, r0, #0x4
	b	.L279
.L270:
	.code	16
	ldrb	r1, [r2, #0x3]
	ldrb	r3, [r2, #0x2]
	add	r0, r1, r3
	lsr	r0, r0, #0x4
	strb	r0, [r2, #0xa]
	cmp	r0, #0xf
	bls	.L277	@cond_branch
	mov	r0, #0xf
.L279:
	strb	r0, [r2, #0xa]
.L277:
	ldrb	r1, [r2, #0x6]
	ldrb	r3, [r2, #0xa]
	mov	r0, r1
	mul	r0, r0, r3
	add	r0, r0, #0xf
	asr	r0, r0, #0x4
	strb	r0, [r2, #0x19]
	ldrb	r0, [r2, #0x1c]
	ldrb	r1, [r2, #0x1b]
	and	r0, r0, r1
	strb	r0, [r2, #0x1b]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 CgbModVol,.Lfe36-CgbModVol
	.align	2, 0
	.globl	CgbSound
	.type	 CgbSound,function
	.thumb_func
CgbSound:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	ldr	r0, .L374
	ldr	r0, [r0]
	str	r0, [sp, #0x4]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	beq	.L283	@cond_branch
	sub	r0, r0, #0x1
	ldr	r1, [sp, #0x4]
	strb	r0, [r1, #0xa]
	b	.L284
.L375:
	.align	2, 0
.L374:
	.word	0x3007ff0
.L283:
	mov	r0, #0xe
	ldr	r2, [sp, #0x4]
	strb	r0, [r2, #0xa]
.L284:
	mov	r6, #0x1
	ldr	r0, [sp, #0x4]
	ldr	r4, [r0, #0x1c]
.L288:
	ldrb	r1, [r4]
	mov	r0, #0xc7
	and	r0, r0, r1
	add	r2, r6, #0x1
	mov	sl, r2
	mov	r2, #0x40
	add	r2, r2, r4
	mov	r9, r2
	cmp	r0, #0
	bne	.LCB2398
	b	.L287	@long jump
.LCB2398:
	cmp	r6, #0x2
	beq	.L292	@cond_branch
	cmp	r6, #0x2
	bgt	.L296	@cond_branch
	cmp	r6, #0x1
	beq	.L291	@cond_branch
	b	.L294
.L296:
	cmp	r6, #0x3
	beq	.L293	@cond_branch
	b	.L294
.L291:
	ldr	r0, .L376
	str	r0, [sp, #0x8]
	ldr	r7, .L376+0x4
	ldr	r2, .L376+0x8
	str	r2, [sp, #0xc]
	add	r0, r0, #0x4
	str	r0, [sp, #0x10]
	add	r2, r2, #0x2
	b	.L370
.L377:
	.align	2, 0
.L376:
	.word	0x4000060
	.word	0x4000062
	.word	0x4000063
.L292:
	ldr	r0, .L378
	str	r0, [sp, #0x8]
	ldr	r7, .L378+0x4
	ldr	r2, .L378+0x8
	b	.L371
.L379:
	.align	2, 0
.L378:
	.word	0x4000061
	.word	0x4000068
	.word	0x4000069
.L293:
	ldr	r0, .L380
	str	r0, [sp, #0x8]
	ldr	r7, .L380+0x4
	ldr	r2, .L380+0x8
	str	r2, [sp, #0xc]
	add	r0, r0, #0x4
	str	r0, [sp, #0x10]
	add	r2, r2, #0x2
	b	.L370
.L381:
	.align	2, 0
.L380:
	.word	0x4000070
	.word	0x4000072
	.word	0x4000073
.L294:
	ldr	r0, .L382
	str	r0, [sp, #0x8]
	ldr	r7, .L382+0x4
	ldr	r2, .L382+0x8
.L371:
	str	r2, [sp, #0xc]
	add	r0, r0, #0xb
	str	r0, [sp, #0x10]
	add	r2, r2, #0x4
.L370:
	str	r2, [sp, #0x14]
	ldr	r0, [sp, #0x4]
	ldrb	r0, [r0, #0xa]
	str	r0, [sp]
	ldr	r2, [sp, #0xc]
	ldrb	r0, [r2]
	mov	r8, r0
	add	r2, r1, #0
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L297	@cond_branch
	mov	r3, #0x40
	add	r0, r3, #0
	and	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r6, #0x1
	mov	sl, r0
	mov	r1, #0x40
	add	r1, r1, r4
	mov	r9, r1
	cmp	r5, #0
	bne	.L317	@cond_branch
	mov	r0, #0x3
	strb	r0, [r4]
	strb	r0, [r4, #0x1d]
	add	r0, r4, #0
	str	r3, [sp, #0x18]
	bl	CgbModVol
	ldr	r3, [sp, #0x18]
	cmp	r6, #0x2
	beq	.L301	@cond_branch
	cmp	r6, #0x2
	bgt	.L311	@cond_branch
	cmp	r6, #0x1
	beq	.L300	@cond_branch
	b	.L307
.L383:
	.align	2, 0
.L382:
	.word	0x4000071
	.word	0x4000078
	.word	0x4000079
.L311:
	cmp	r6, #0x3
	beq	.L303	@cond_branch
	b	.L307
.L300:
	ldrb	r0, [r4, #0x1f]
	ldr	r2, [sp, #0x8]
	strb	r0, [r2]
.L301:
	ldr	r0, [r4, #0x24]
	lsl	r0, r0, #0x6
	ldrb	r1, [r4, #0x1e]
	add	r0, r1, r0
	strb	r0, [r7]
	b	.L302
.L303:
	ldr	r1, [r4, #0x24]
	ldr	r0, [r4, #0x28]
	cmp	r1, r0
	beq	.L304	@cond_branch
	ldr	r2, [sp, #0x8]
	strb	r3, [r2]
	ldr	r1, .L384
	ldr	r2, [r4, #0x24]
	ldr	r0, [r2]
	str	r0, [r1]
	add	r1, r1, #0x4
	ldr	r0, [r2, #0x4]
	str	r0, [r1]
	add	r1, r1, #0x4
	ldr	r0, [r2, #0x8]
	str	r0, [r1]
	add	r1, r1, #0x4
	ldr	r0, [r2, #0xc]
	str	r0, [r1]
	str	r2, [r4, #0x28]
.L304:
	ldr	r0, [sp, #0x8]
	strb	r5, [r0]
	ldrb	r0, [r4, #0x1e]
	strb	r0, [r7]
	ldrb	r0, [r4, #0x1e]
	cmp	r0, #0
	beq	.L305	@cond_branch
	mov	r0, #0xc0
	b	.L308
.L385:
	.align	2, 0
.L384:
	.word	0x4000090
.L305:
	mov	r1, #0x80
	neg	r1, r1
	strb	r1, [r4, #0x1a]
	b	.L299
.L307:
	ldrb	r0, [r4, #0x1e]
	strb	r0, [r7]
	ldr	r0, [r4, #0x24]
	lsl	r0, r0, #0x3
	ldr	r2, [sp, #0x10]
	strb	r0, [r2]
.L302:
	ldrb	r0, [r4, #0x4]
	add	r0, r0, #0x8
	mov	r8, r0
	ldrb	r0, [r4, #0x1e]
	cmp	r0, #0
	beq	.L308	@cond_branch
	mov	r0, #0x40
.L308:
	strb	r0, [r4, #0x1a]
.L299:
	ldrb	r1, [r4, #0x4]
	mov	r2, #0x0
	strb	r1, [r4, #0xb]
	mov	r0, #0xff
	and	r0, r0, r1
	add	r1, r6, #0x1
	mov	sl, r1
	mov	r1, #0x40
	add	r1, r1, r4
	mov	r9, r1
	cmp	r0, #0
	bne	.LCB2634
	b	.L315	@long jump
.LCB2634:
	strb	r2, [r4, #0x9]
	b	.L313
.L297:
	mov	r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L319	@cond_branch
	ldrb	r0, [r4, #0xd]
	sub	r0, r0, #0x1
	strb	r0, [r4, #0xd]
	mov	r2, #0xff
	and	r0, r0, r2
	lsl	r0, r0, #0x18
	add	r1, r6, #0x1
	mov	sl, r1
	mov	r2, #0x40
	add	r2, r2, r4
	mov	r9, r2
	cmp	r0, #0
	ble	.LCB2665
	b	.L322	@long jump
.LCB2665:
.L317:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	CgbOscOff
	mov	r0, #0x0
	strb	r0, [r4]
	b	.L321
.L319:
	mov	r0, #0x40
	and	r0, r0, r1
	add	r2, r6, #0x1
	mov	sl, r2
	mov	r2, #0x40
	add	r2, r2, r4
	mov	r9, r2
	cmp	r0, #0
	beq	.L330	@cond_branch
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L330	@cond_branch
	mov	r0, #0xfc
	and	r0, r0, r1
	mov	r2, #0x0
	strb	r0, [r4]
	ldrb	r1, [r4, #0x7]
	strb	r1, [r4, #0xb]
	mov	r0, #0xff
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L328	@cond_branch
	mov	r0, #0x1
	ldrb	r1, [r4, #0x1d]
	orr	r0, r0, r1
	strb	r0, [r4, #0x1d]
	cmp	r6, #0x3
	beq	.L313	@cond_branch
	ldrb	r2, [r4, #0x7]
	mov	r8, r2
	b	.L313
.L330:
	ldrb	r0, [r4, #0xb]
	cmp	r0, #0
	bne	.L313	@cond_branch
	cmp	r6, #0x3
	bne	.L332	@cond_branch
	mov	r0, #0x1
	ldrb	r1, [r4, #0x1d]
	orr	r0, r0, r1
	strb	r0, [r4, #0x1d]
.L332:
	add	r0, r4, #0
	bl	CgbModVol
	mov	r0, #0x3
	ldrb	r2, [r4]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L333	@cond_branch
	ldrb	r0, [r4, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x9]
	mov	r1, #0xff
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bgt	.L334	@cond_branch
.L328:
	ldrb	r2, [r4, #0xc]
	ldrb	r1, [r4, #0xa]
	mov	r0, r2
	mul	r0, r0, r1
	add	r0, r0, #0xff
	asr	r0, r0, #0x8
	mov	r1, #0x0
	strb	r0, [r4, #0x9]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L317	@cond_branch
	mov	r0, #0x4
	ldrb	r2, [r4]
	orr	r0, r0, r2
	strb	r0, [r4]
	mov	r0, #0x1
	ldrb	r1, [r4, #0x1d]
	orr	r0, r0, r1
	strb	r0, [r4, #0x1d]
	cmp	r6, #0x3
	beq	.L322	@cond_branch
	mov	r2, #0x8
	mov	r8, r2
	b	.L322
.L334:
	ldrb	r0, [r4, #0x7]
	b	.L372
.L333:
	cmp	r0, #0x1
	bne	.L340	@cond_branch
.L341:
	ldrb	r0, [r4, #0x19]
	strb	r0, [r4, #0x9]
	mov	r0, #0x7
	b	.L372
.L340:
	cmp	r0, #0x2
	bne	.L343	@cond_branch
	ldrb	r0, [r4, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x9]
	mov	r1, #0xff
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	ldrb	r2, [r4, #0x19]
	lsl	r1, r2, #0x18
	cmp	r0, r1
	bgt	.L344	@cond_branch
.L345:
	ldrb	r0, [r4, #0x6]
	cmp	r0, #0
	bne	.L346	@cond_branch
	mov	r0, #0xfc
	ldrb	r1, [r4]
	and	r0, r0, r1
	strb	r0, [r4]
	b	.L328
.L346:
	ldrb	r0, [r4]
	sub	r0, r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
	ldrb	r2, [r4, #0x1d]
	orr	r0, r0, r2
	strb	r0, [r4, #0x1d]
	cmp	r6, #0x3
	beq	.L341	@cond_branch
	mov	r0, #0x8
	mov	r8, r0
	b	.L341
.L344:
	ldrb	r0, [r4, #0x5]
	b	.L372
.L343:
	ldrb	r0, [r4, #0x9]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x9]
	mov	r1, #0xff
	and	r0, r0, r1
	ldrb	r2, [r4, #0xa]
	cmp	r0, r2
	bcc	.L351	@cond_branch
.L315:
	ldrb	r0, [r4]
	sub	r0, r0, #0x1
	mov	r2, #0x0
	strb	r0, [r4]
	ldrb	r1, [r4, #0x5]
	strb	r1, [r4, #0xb]
	mov	r0, #0xff
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L345	@cond_branch
	mov	r0, #0x1
	ldrb	r1, [r4, #0x1d]
	orr	r0, r0, r1
	strb	r0, [r4, #0x1d]
	ldrb	r0, [r4, #0xa]
	strb	r0, [r4, #0x9]
	cmp	r6, #0x3
	beq	.L313	@cond_branch
	ldrb	r2, [r4, #0x5]
	mov	r8, r2
	b	.L313
.L351:
	ldrb	r0, [r4, #0x4]
.L372:
	strb	r0, [r4, #0xb]
.L313:
	ldrb	r0, [r4, #0xb]
	sub	r0, r0, #0x1
	strb	r0, [r4, #0xb]
	ldr	r0, [sp]
	cmp	r0, #0
	bne	.L322	@cond_branch
	sub	r0, r0, #0x1
	str	r0, [sp]
	b	.L330
.L322:
	mov	r0, #0x2
	ldrb	r1, [r4, #0x1d]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L357	@cond_branch
	cmp	r6, #0x3
	bgt	.L358	@cond_branch
	mov	r0, #0x8
	ldrb	r2, [r4, #0x1]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L358	@cond_branch
	ldr	r0, .L386
	ldrb	r0, [r0]
	cmp	r0, #0x3f
	bgt	.L359	@cond_branch
	ldr	r0, [r4, #0x20]
	add	r0, r0, #0x2
	ldr	r1, .L386+0x4
	b	.L373
.L387:
	.align	2, 0
.L386:
	.word	0x4000089
	.word	0x7fc
.L359:
	cmp	r0, #0x7f
	bgt	.L358	@cond_branch
	ldr	r0, [r4, #0x20]
	add	r0, r0, #0x1
	ldr	r1, .L388
.L373:
	and	r0, r0, r1
	str	r0, [r4, #0x20]
.L358:
	cmp	r6, #0x4
	beq	.L362	@cond_branch
	ldr	r0, [r4, #0x20]
	ldr	r1, [sp, #0x10]
	strb	r0, [r1]
	b	.L363
.L389:
	.align	2, 0
.L388:
	.word	0x7fe
.L362:
	ldr	r2, [sp, #0x10]
	ldrb	r0, [r2]
	mov	r1, #0x8
	and	r1, r1, r0
	ldr	r0, [r4, #0x20]
	orr	r0, r0, r1
	strb	r0, [r2]
.L363:
	mov	r0, #0xc0
	ldrb	r1, [r4, #0x1a]
	and	r0, r0, r1
	add	r1, r4, #0
	add	r1, r1, #0x21
	ldrb	r1, [r1]
	add	r0, r1, r0
	strb	r0, [r4, #0x1a]
	mov	r2, #0xff
	and	r0, r0, r2
	ldr	r1, [sp, #0x14]
	strb	r0, [r1]
.L357:
	mov	r0, #0x1
	ldrb	r2, [r4, #0x1d]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L321	@cond_branch
	ldr	r1, .L390
	ldrb	r0, [r1]
	ldrb	r2, [r4, #0x1c]
	bic	r0, r0, r2
	ldrb	r2, [r4, #0x1b]
	orr	r0, r0, r2
	strb	r0, [r1]
	cmp	r6, #0x3
	bne	.L365	@cond_branch
	ldr	r0, .L390+0x4
	ldrb	r1, [r4, #0x9]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, [sp, #0xc]
	strb	r0, [r2]
	mov	r1, #0x80
	add	r0, r1, #0
	ldrb	r2, [r4, #0x1a]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L321	@cond_branch
	ldr	r0, [sp, #0x8]
	strb	r1, [r0]
	ldrb	r0, [r4, #0x1a]
	ldr	r1, [sp, #0x14]
	strb	r0, [r1]
	mov	r0, #0x7f
	ldrb	r2, [r4, #0x1a]
	and	r0, r0, r2
	strb	r0, [r4, #0x1a]
	b	.L321
.L391:
	.align	2, 0
.L390:
	.word	0x4000081
	.word	gCgb3Vol
.L365:
	mov	r0, #0xf
	mov	r1, r8
	and	r1, r1, r0
	mov	r8, r1
	ldrb	r2, [r4, #0x9]
	lsl	r0, r2, #0x4
	add	r0, r0, r8
	ldr	r1, [sp, #0xc]
	strb	r0, [r1]
	mov	r2, #0x80
	ldrb	r0, [r4, #0x1a]
	orr	r0, r0, r2
	ldr	r1, [sp, #0x14]
	strb	r0, [r1]
	cmp	r6, #0x1
	bne	.L321	@cond_branch
	ldr	r0, [sp, #0x8]
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L321	@cond_branch
	ldrb	r0, [r4, #0x1a]
	orr	r0, r0, r2
	ldr	r1, [sp, #0x14]
	strb	r0, [r1]
.L321:
	mov	r0, #0x0
	strb	r0, [r4, #0x1d]
.L287:
	mov	r6, sl
	mov	r4, r9
	cmp	r6, #0x4
	bgt	.LCB3140
	b	.L288	@long jump
.LCB3140:
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 CgbSound,.Lfe37-CgbSound
	.align	2, 0
	.globl	m4aMPlayTempoControl
	.type	 m4aMPlayTempoControl,function
	.thumb_func
m4aMPlayTempoControl:
	push	{r4, lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, [r2, #0x34]
	ldr	r0, .L394
	cmp	r3, r0
	bne	.L393	@cond_branch
	strh	r1, [r2, #0x1e]
	ldrh	r4, [r2, #0x1c]
	mov	r0, r1
	mul	r0, r0, r4
	asr	r0, r0, #0x8
	strh	r0, [r2, #0x20]
.L393:
	pop	{r4}
	pop	{r0}
	bx	r0
.L395:
	.align	2, 0
.L394:
	.word	0x68736d53
.Lfe38:
	.size	 m4aMPlayTempoControl,.Lfe38-m4aMPlayTempoControl
	.align	2, 0
	.globl	m4aMPlayVolumeControl
	.type	 m4aMPlayVolumeControl,function
	.thumb_func
m4aMPlayVolumeControl:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r6, r2, #0x10
	ldr	r3, [r4, #0x34]
	ldr	r0, .L404
	cmp	r3, r0
	bne	.L396	@cond_branch
	add	r0, r3, #0x1
	str	r0, [r4, #0x34]
	ldrb	r2, [r4, #0x8]
	ldr	r1, [r4, #0x2c]
	mov	r5, #0x1
	cmp	r2, #0
	ble	.L399	@cond_branch
	mov	r0, #0x80
	mov	r8, r0
	lsr	r6, r6, #0x12
	mov	r0, #0x3
	mov	ip, r0
.L400:
	add	r0, r7, #0
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L401	@cond_branch
	ldrb	r3, [r1]
	mov	r0, r8
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L401	@cond_branch
	strb	r6, [r1, #0x13]
	mov	r0, ip
	orr	r0, r0, r3
	strb	r0, [r1]
.L401:
	sub	r2, r2, #0x1
	add	r1, r1, #0x50
	lsl	r5, r5, #0x1
	cmp	r2, #0
	bgt	.L400	@cond_branch
.L399:
	ldr	r0, .L404
	str	r0, [r4, #0x34]
.L396:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L405:
	.align	2, 0
.L404:
	.word	0x68736d53
.Lfe39:
	.size	 m4aMPlayVolumeControl,.Lfe39-m4aMPlayVolumeControl
	.align	2, 0
	.globl	m4aMPlayPitchControl
	.type	 m4aMPlayPitchControl,function
	.thumb_func
m4aMPlayPitchControl:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	ip, r1
	lsl	r2, r2, #0x10
	lsr	r6, r2, #0x10
	ldr	r3, [r4, #0x34]
	ldr	r0, .L414
	cmp	r3, r0
	bne	.L406	@cond_branch
	add	r0, r3, #0x1
	str	r0, [r4, #0x34]
	ldrb	r2, [r4, #0x8]
	ldr	r3, [r4, #0x2c]
	mov	r5, #0x1
	cmp	r2, #0
	ble	.L409	@cond_branch
	mov	r0, #0x80
	mov	r9, r0
	lsl	r0, r6, #0x10
	asr	r7, r0, #0x18
	mov	r0, #0xc
	mov	r8, r0
.L410:
	mov	r0, ip
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L411	@cond_branch
	ldrb	r1, [r3]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L411	@cond_branch
	strb	r7, [r3, #0xb]
	strb	r6, [r3, #0xd]
	mov	r0, r8
	orr	r0, r0, r1
	strb	r0, [r3]
.L411:
	sub	r2, r2, #0x1
	add	r3, r3, #0x50
	lsl	r5, r5, #0x1
	cmp	r2, #0
	bgt	.L410	@cond_branch
.L409:
	ldr	r0, .L414
	str	r0, [r4, #0x34]
.L406:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L415:
	.align	2, 0
.L414:
	.word	0x68736d53
.Lfe40:
	.size	 m4aMPlayPitchControl,.Lfe40-m4aMPlayPitchControl
	.align	2, 0
	.globl	m4aMPlayPanpotControl
	.type	 m4aMPlayPanpotControl,function
	.thumb_func
m4aMPlayPanpotControl:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	ldr	r3, [r4, #0x34]
	ldr	r0, .L424
	cmp	r3, r0
	bne	.L416	@cond_branch
	add	r0, r3, #0x1
	str	r0, [r4, #0x34]
	ldrb	r2, [r4, #0x8]
	ldr	r1, [r4, #0x2c]
	mov	r5, #0x1
	cmp	r2, #0
	ble	.L419	@cond_branch
	mov	r0, #0x80
	mov	r8, r0
	mov	r0, #0x3
	mov	ip, r0
.L420:
	add	r0, r7, #0
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L421	@cond_branch
	ldrb	r3, [r1]
	mov	r0, r8
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L421	@cond_branch
	strb	r6, [r1, #0x15]
	mov	r0, ip
	orr	r0, r0, r3
	strb	r0, [r1]
.L421:
	sub	r2, r2, #0x1
	add	r1, r1, #0x50
	lsl	r5, r5, #0x1
	cmp	r2, #0
	bgt	.L420	@cond_branch
.L419:
	ldr	r0, .L424
	str	r0, [r4, #0x34]
.L416:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L425:
	.align	2, 0
.L424:
	.word	0x68736d53
.Lfe41:
	.size	 m4aMPlayPanpotControl,.Lfe41-m4aMPlayPanpotControl
	.align	2, 0
	.globl	ClearModM
	.type	 ClearModM,function
	.thumb_func
ClearModM:
	add	r1, r0, #0
	mov	r2, #0x0
	mov	r0, #0x0
	strb	r0, [r1, #0x1a]
	strb	r0, [r1, #0x16]
	ldrb	r0, [r1, #0x18]
	cmp	r0, #0
	bne	.L427	@cond_branch
	mov	r0, #0xc
	b	.L429
.L427:
	mov	r0, #0x3
.L429:
	ldrb	r2, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	bx	lr
.Lfe42:
	.size	 ClearModM,.Lfe42-ClearModM
	.align	2, 0
	.globl	m4aMPlayModDepthSet
	.type	 m4aMPlayModDepthSet,function
	.thumb_func
m4aMPlayModDepthSet:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r1, [r6, #0x34]
	ldr	r0, .L439
	cmp	r1, r0
	bne	.L430	@cond_branch
	add	r0, r1, #0x1
	str	r0, [r6, #0x34]
	ldrb	r5, [r6, #0x8]
	ldr	r4, [r6, #0x2c]
	mov	r7, #0x1
	cmp	r5, #0
	ble	.L433	@cond_branch
	mov	r9, r8
.L434:
	mov	r0, sl
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L435	@cond_branch
	mov	r0, #0x80
	ldrb	r1, [r4]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L435	@cond_branch
	mov	r0, r8
	strb	r0, [r4, #0x17]
	mov	r1, r9
	cmp	r1, #0
	bne	.L435	@cond_branch
	add	r0, r4, #0
	bl	ClearModM
.L435:
	sub	r5, r5, #0x1
	add	r4, r4, #0x50
	lsl	r7, r7, #0x1
	cmp	r5, #0
	bgt	.L434	@cond_branch
.L433:
	ldr	r0, .L439
	str	r0, [r6, #0x34]
.L430:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L440:
	.align	2, 0
.L439:
	.word	0x68736d53
.Lfe43:
	.size	 m4aMPlayModDepthSet,.Lfe43-m4aMPlayModDepthSet
	.align	2, 0
	.globl	m4aMPlayLFOSpeedSet
	.type	 m4aMPlayLFOSpeedSet,function
	.thumb_func
m4aMPlayLFOSpeedSet:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r1, [r6, #0x34]
	ldr	r0, .L450
	cmp	r1, r0
	bne	.L441	@cond_branch
	add	r0, r1, #0x1
	str	r0, [r6, #0x34]
	ldrb	r5, [r6, #0x8]
	ldr	r4, [r6, #0x2c]
	mov	r7, #0x1
	cmp	r5, #0
	ble	.L444	@cond_branch
	mov	r9, r8
.L445:
	mov	r0, sl
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L446	@cond_branch
	mov	r0, #0x80
	ldrb	r1, [r4]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L446	@cond_branch
	mov	r0, r8
	strb	r0, [r4, #0x19]
	mov	r1, r9
	cmp	r1, #0
	bne	.L446	@cond_branch
	add	r0, r4, #0
	bl	ClearModM
.L446:
	sub	r5, r5, #0x1
	add	r4, r4, #0x50
	lsl	r7, r7, #0x1
	cmp	r5, #0
	bgt	.L445	@cond_branch
.L444:
	ldr	r0, .L450
	str	r0, [r6, #0x34]
.L441:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L451:
	.align	2, 0
.L450:
	.word	0x68736d53
.Lfe44:
	.size	 m4aMPlayLFOSpeedSet,.Lfe44-m4aMPlayLFOSpeedSet
	.align	2, 0
	.globl	ply_memacc
	.type	 ply_memacc,function
	.thumb_func
ply_memacc:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	ldr	r1, [r6, #0x40]
	ldrb	r5, [r1]
	add	r2, r1, #0x1
	str	r2, [r6, #0x40]
	ldr	r0, [r4, #0x18]
	ldrb	r1, [r1, #0x1]
	add	r3, r1, r0
	add	r0, r2, #0x1
	str	r0, [r6, #0x40]
	ldrb	r2, [r2, #0x1]
	add	r0, r0, #0x1
	str	r0, [r6, #0x40]
	cmp	r5, #0x11
	bls	.LCB3621
	b	.L452	@long jump
.LCB3621:
	lsl	r0, r5, #0x2
	ldr	r1, .L500
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L501:
	.align	2, 0
.L500:
	.word	.L499
	.align	2, 0
	.align	2, 0
.L499:
	.word	.L454
	.word	.L455
	.word	.L456
	.word	.L457
	.word	.L458
	.word	.L459
	.word	.L460
	.word	.L465
	.word	.L468
	.word	.L471
	.word	.L474
	.word	.L477
	.word	.L480
	.word	.L483
	.word	.L486
	.word	.L489
	.word	.L492
	.word	.L495
.L454:
	strb	r2, [r3]
	b	.L452
.L455:
	ldrb	r1, [r3]
	add	r0, r1, r2
	strb	r0, [r3]
	b	.L452
.L456:
	ldrb	r1, [r3]
	sub	r0, r1, r2
	strb	r0, [r3]
	b	.L452
.L457:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	b	.L452
.L458:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r1, [r3]
	ldrb	r0, [r0]
	add	r0, r1, r0
	strb	r0, [r3]
	b	.L452
.L459:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r1, [r3]
	ldrb	r0, [r0]
	sub	r0, r1, r0
	strb	r0, [r3]
	b	.L452
.L460:
	ldrb	r3, [r3]
	cmp	r3, r2
	beq	.L462	@cond_branch
	b	.L464
.L465:
	ldrb	r3, [r3]
	cmp	r3, r2
	bne	.L462	@cond_branch
	b	.L464
.L468:
	ldrb	r3, [r3]
	cmp	r3, r2
	bhi	.L462	@cond_branch
	b	.L464
.L471:
	ldrb	r3, [r3]
	cmp	r3, r2
	bcs	.L462	@cond_branch
	b	.L464
.L474:
	ldrb	r3, [r3]
	cmp	r3, r2
	bls	.L462	@cond_branch
	b	.L464
.L477:
	ldrb	r3, [r3]
	cmp	r3, r2
	bcc	.L462	@cond_branch
	b	.L464
.L480:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r3, [r3]
	ldrb	r0, [r0]
	cmp	r3, r0
	beq	.L462	@cond_branch
	b	.L464
.L483:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r3, [r3]
	ldrb	r0, [r0]
	cmp	r3, r0
	bne	.L462	@cond_branch
	b	.L464
.L486:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r3, [r3]
	ldrb	r0, [r0]
	cmp	r3, r0
	bhi	.L462	@cond_branch
	b	.L464
.L489:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r3, [r3]
	ldrb	r0, [r0]
	cmp	r3, r0
	bcs	.L462	@cond_branch
	b	.L464
.L492:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r3, [r3]
	ldrb	r0, [r0]
	cmp	r3, r0
	bls	.L462	@cond_branch
	b	.L464
.L495:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r3, [r3]
	ldrb	r0, [r0]
	cmp	r3, r0
	bcs	.L464	@cond_branch
.L462:
	ldr	r0, .L502
	ldr	r2, [r0]
	add	r0, r4, #0
	add	r1, r6, #0
	bl	_call_via_r2
	b	.L452
.L503:
	.align	2, 0
.L502:
	.word	gMPlayJumpTable+0x4
.L464:
	ldr	r0, [r6, #0x40]
	add	r0, r0, #0x4
	str	r0, [r6, #0x40]
.L452:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 ply_memacc,.Lfe45-ply_memacc
	.align	2, 0
	.globl	ply_xcmd
	.type	 ply_xcmd,function
	.thumb_func
ply_xcmd:
	push	{lr}
	ldr	r2, [r1, #0x40]
	ldrb	r3, [r2]
	add	r2, r2, #0x1
	str	r2, [r1, #0x40]
	ldr	r2, .L505
	lsl	r3, r3, #0x2
	add	r3, r3, r2
	ldr	r2, [r3]
	bl	_call_via_r2
	pop	{r0}
	bx	r0
.L506:
	.align	2, 0
.L505:
	.word	gXcmdTable
.Lfe46:
	.size	 ply_xcmd,.Lfe46-ply_xcmd
	.align	2, 0
	.globl	ply_xxx
	.type	 ply_xxx,function
	.thumb_func
ply_xxx:
	push	{lr}
	ldr	r2, .L508
	ldr	r2, [r2]
	bl	_call_via_r2
	pop	{r0}
	bx	r0
.L509:
	.align	2, 0
.L508:
	.word	gMPlayJumpTable
.Lfe47:
	.size	 ply_xxx,.Lfe47-ply_xxx
	.align	2, 0
	.globl	ply_xwave
	.type	 ply_xwave,function
	.thumb_func
ply_xwave:
	push	{r4, lr}
	ldr	r2, [r1, #0x40]
	ldr	r0, .L511
	and	r4, r4, r0
	ldrb	r0, [r2]
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x1]
	lsl	r3, r0, #0x8
	ldr	r0, .L511+0x4
	and	r4, r4, r0
	orr	r4, r4, r3
	ldrb	r0, [r2, #0x2]
	lsl	r3, r0, #0x10
	ldr	r0, .L511+0x8
	and	r4, r4, r0
	orr	r4, r4, r3
	ldrb	r0, [r2, #0x3]
	lsl	r3, r0, #0x18
	ldr	r0, .L511+0xc
	and	r4, r4, r0
	orr	r4, r4, r3
	str	r4, [r1, #0x28]
	add	r2, r2, #0x4
	str	r2, [r1, #0x40]
	pop	{r4}
	pop	{r0}
	bx	r0
.L512:
	.align	2, 0
.L511:
	.word	-0x100
	.word	-0xff01
	.word	-0xff0001
	.word	0xffffff
.Lfe48:
	.size	 ply_xwave,.Lfe48-ply_xwave
	.align	2, 0
	.globl	ply_xtype
	.type	 ply_xtype,function
	.thumb_func
ply_xtype:
	ldr	r0, [r1, #0x40]
	ldrb	r2, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x24
	strb	r2, [r0]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe49:
	.size	 ply_xtype,.Lfe49-ply_xtype
	.align	2, 0
	.globl	ply_xatta
	.type	 ply_xatta,function
	.thumb_func
ply_xatta:
	ldr	r0, [r1, #0x40]
	ldrb	r2, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x2c
	strb	r2, [r0]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe50:
	.size	 ply_xatta,.Lfe50-ply_xatta
	.align	2, 0
	.globl	ply_xdeca
	.type	 ply_xdeca,function
	.thumb_func
ply_xdeca:
	ldr	r0, [r1, #0x40]
	ldrb	r0, [r0]
	add	r2, r1, #0
	add	r2, r2, #0x2d
	strb	r0, [r2]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe51:
	.size	 ply_xdeca,.Lfe51-ply_xdeca
	.align	2, 0
	.globl	ply_xsust
	.type	 ply_xsust,function
	.thumb_func
ply_xsust:
	ldr	r0, [r1, #0x40]
	ldrb	r0, [r0]
	add	r2, r1, #0
	add	r2, r2, #0x2e
	strb	r0, [r2]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe52:
	.size	 ply_xsust,.Lfe52-ply_xsust
	.align	2, 0
	.globl	ply_xrele
	.type	 ply_xrele,function
	.thumb_func
ply_xrele:
	ldr	r0, [r1, #0x40]
	ldrb	r0, [r0]
	add	r2, r1, #0
	add	r2, r2, #0x2f
	strb	r0, [r2]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe53:
	.size	 ply_xrele,.Lfe53-ply_xrele
	.align	2, 0
	.globl	ply_xiecv
	.type	 ply_xiecv,function
	.thumb_func
ply_xiecv:
	ldr	r0, [r1, #0x40]
	ldrb	r2, [r0]
	strb	r2, [r1, #0x1e]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe54:
	.size	 ply_xiecv,.Lfe54-ply_xiecv
	.align	2, 0
	.globl	ply_xiecl
	.type	 ply_xiecl,function
	.thumb_func
ply_xiecl:
	ldr	r0, [r1, #0x40]
	ldrb	r2, [r0]
	strb	r2, [r1, #0x1f]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe55:
	.size	 ply_xiecl,.Lfe55-ply_xiecl
	.align	2, 0
	.globl	ply_xleng
	.type	 ply_xleng,function
	.thumb_func
ply_xleng:
	ldr	r0, [r1, #0x40]
	ldrb	r0, [r0]
	add	r2, r1, #0
	add	r2, r2, #0x26
	strb	r0, [r2]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe56:
	.size	 ply_xleng,.Lfe56-ply_xleng
	.align	2, 0
	.globl	ply_xswee
	.type	 ply_xswee,function
	.thumb_func
ply_xswee:
	ldr	r0, [r1, #0x40]
	ldrb	r0, [r0]
	add	r2, r1, #0
	add	r2, r2, #0x27
	strb	r0, [r2]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe57:
	.size	 ply_xswee,.Lfe57-ply_xswee
	.align	2, 0
	.globl	ply_xcmd_0C
	.type	 ply_xcmd_0C,function
	.thumb_func
ply_xcmd_0C:
	push	{r4, lr}
	add	r3, r1, #0
	ldr	r4, [r3, #0x40]
	ldr	r0, .L525
	and	r2, r2, r0
	ldrb	r0, [r4]
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x1]
	lsl	r1, r0, #0x8
	ldr	r0, .L525+0x4
	and	r2, r2, r0
	orr	r2, r2, r1
	ldrh	r1, [r3, #0x3a]
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bcs	.L523	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r3, #0x3a]
	sub	r0, r4, #0x2
	str	r0, [r3, #0x40]
	mov	r0, #0x1
	strb	r0, [r3, #0x1]
	b	.L524
.L526:
	.align	2, 0
.L525:
	.word	-0x100
	.word	-0xff01
.L523:
	mov	r0, #0x0
	strh	r0, [r3, #0x3a]
	add	r0, r4, #0x2
	str	r0, [r3, #0x40]
.L524:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 ply_xcmd_0C,.Lfe58-ply_xcmd_0C
	.align	2, 0
	.globl	ply_xcmd_0D
	.type	 ply_xcmd_0D,function
	.thumb_func
ply_xcmd_0D:
	push	{r4, lr}
	ldr	r2, [r1, #0x40]
	ldr	r0, .L528
	and	r4, r4, r0
	ldrb	r0, [r2]
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x1]
	lsl	r3, r0, #0x8
	ldr	r0, .L528+0x4
	and	r4, r4, r0
	orr	r4, r4, r3
	ldrb	r0, [r2, #0x2]
	lsl	r3, r0, #0x10
	ldr	r0, .L528+0x8
	and	r4, r4, r0
	orr	r4, r4, r3
	ldrb	r0, [r2, #0x3]
	lsl	r3, r0, #0x18
	ldr	r0, .L528+0xc
	and	r4, r4, r0
	orr	r4, r4, r3
	str	r4, [r1, #0x3c]
	add	r2, r2, #0x4
	str	r2, [r1, #0x40]
	pop	{r4}
	pop	{r0}
	bx	r0
.L529:
	.align	2, 0
.L528:
	.word	-0x100
	.word	-0xff01
	.word	-0xff0001
	.word	0xffffff
.Lfe59:
	.size	 ply_xcmd_0D,.Lfe59-ply_xcmd_0D
	.align	2, 0
	.globl	DummyFunc
	.type	 DummyFunc,function
	.thumb_func
DummyFunc:
	bx	lr
.Lfe60:
	.size	 DummyFunc,.Lfe60-DummyFunc
	.align	2, 0
	.globl	SetPokemonCryTone
	.type	 SetPokemonCryTone,function
	.thumb_func
SetPokemonCryTone:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r0
	mov	r6, #0x0
	mov	r1, #0x0
	mov	r4, #0x0
	ldr	r0, .L541
	mov	r8, r0
	ldr	r7, .L541+0x4
	ldr	r0, .L541+0x8
	mov	sl, r0
	mov	r5, r8
	add	r5, r5, #0xc
	mov	r3, #0x0
	ldr	r0, .L541+0xc
	mov	ip, r0
.L535:
	mov	r0, ip
	add	r2, r3, r0
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L536	@cond_branch
	ldr	r0, [r2, #0x20]
	cmp	r0, #0
	beq	.L538	@cond_branch
	ldr	r0, [r0, #0x2c]
	cmp	r0, r2
	bne	.L538	@cond_branch
.L536:
	ldr	r0, [r5]
	cmp	r6, r0
	bcs	.L534	@cond_branch
	add	r6, r0, #0
	add	r1, r4, #0
.L534:
	add	r5, r5, #0x40
	add	r3, r3, #0xa0
	add	r4, r4, #0x1
	cmp	r4, #0x1
	ble	.L535	@cond_branch
	add	r4, r1, #0
.L538:
	lsl	r5, r4, #0x6
	add	r5, r5, r8
	ldr	r0, [r5, #0x34]
	add	r0, r0, #0x1
	str	r0, [r5, #0x34]
	mov	r0, #0x34
	mul	r4, r4, r0
	add	r6, r4, r7
	add	r0, r6, #0
	mov	r1, sl
	mov	r2, #0x34
	bl	memcpy
	add	r0, r7, #0x4
	add	r0, r4, r0
	mov	r1, r9
	str	r1, [r0]
	add	r1, r7, #0
	add	r1, r1, #0x8
	add	r1, r4, r1
	add	r0, r7, #0
	add	r0, r0, #0x11
	add	r0, r4, r0
	str	r0, [r1]
	add	r1, r7, #0
	add	r1, r1, #0xc
	add	r1, r4, r1
	add	r0, r7, #0
	add	r0, r0, #0x18
	add	r0, r4, r0
	str	r0, [r1]
	add	r0, r7, #0
	add	r0, r0, #0x14
	add	r0, r4, r0
	add	r1, r7, #0
	add	r1, r1, #0x1a
	add	r4, r4, r1
	str	r4, [r0]
	ldr	r0, .L541+0x10
	str	r0, [r5, #0x34]
	add	r0, r5, #0
	add	r1, r6, #0
	bl	MPlayStart
	add	r0, r5, #0
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L542:
	.align	2, 0
.L541:
	.word	gPokemonCryMusicPlayers
	.word	gPokemonCrySongs
	.word	gPokemonCrySong
	.word	gPokemonCryTracks
	.word	0x68736d53
.Lfe61:
	.size	 SetPokemonCryTone,.Lfe61-SetPokemonCryTone
	.align	2, 0
	.globl	SetPokemonCryVolume
	.type	 SetPokemonCryVolume,function
	.thumb_func
SetPokemonCryVolume:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L544
	mov	r1, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x1d]
	bx	lr
.L545:
	.align	2, 0
.L544:
	.word	gPokemonCrySong
.Lfe62:
	.size	 SetPokemonCryVolume,.Lfe62-SetPokemonCryVolume
	.align	2, 0
	.globl	SetPokemonCryPanpot
	.type	 SetPokemonCryPanpot,function
	.thumb_func
SetPokemonCryPanpot:
	ldr	r2, .L547
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	add	r0, r0, #0x40
	mov	r1, #0x7f
	and	r0, r0, r1
	add	r2, r2, #0x28
	strb	r0, [r2]
	bx	lr
.L548:
	.align	2, 0
.L547:
	.word	gPokemonCrySong
.Lfe63:
	.size	 SetPokemonCryPanpot,.Lfe63-SetPokemonCryPanpot
	.align	2, 0
	.globl	SetPokemonCryPitch
	.type	 SetPokemonCryPitch,function
	.thumb_func
SetPokemonCryPitch:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	ldr	r3, .L550
	ldrb	r2, [r3, #0x19]
	ldrb	r4, [r3, #0x12]
	sub	r1, r2, r4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r6, #0x80
	lsl	r6, r6, #0x10
	add	r0, r0, r6
	asr	r2, r0, #0x18
	mov	r5, #0x7f
	mov	r4, #0x7f
	and	r2, r2, r4
	mov	r6, #0x2a
	strb	r2, [r6, r3]
	asr	r0, r0, #0x11
	and	r0, r0, r4
	strb	r0, [r3, #0x12]
	add	r1, r1, r0
	and	r1, r1, r5
	strb	r1, [r3, #0x19]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L551:
	.align	2, 0
.L550:
	.word	gPokemonCrySong
.Lfe64:
	.size	 SetPokemonCryPitch,.Lfe64-SetPokemonCryPitch
	.align	2, 0
	.globl	SetPokemonCryLength
	.type	 SetPokemonCryLength,function
	.thumb_func
SetPokemonCryLength:
	ldr	r1, .L553
	strh	r0, [r1, #0x2e]
	bx	lr
.L554:
	.align	2, 0
.L553:
	.word	gPokemonCrySong
.Lfe65:
	.size	 SetPokemonCryLength,.Lfe65-SetPokemonCryLength
	.align	2, 0
	.globl	SetPokemonCryRelease
	.type	 SetPokemonCryRelease,function
	.thumb_func
SetPokemonCryRelease:
	ldr	r1, .L556
	add	r1, r1, #0x26
	strb	r0, [r1]
	bx	lr
.L557:
	.align	2, 0
.L556:
	.word	gPokemonCrySong
.Lfe66:
	.size	 SetPokemonCryRelease,.Lfe66-SetPokemonCryRelease
	.align	2, 0
	.globl	SetPokemonCryProgress
	.type	 SetPokemonCryProgress,function
	.thumb_func
SetPokemonCryProgress:
	ldr	r1, .L559
	str	r0, [r1, #0x20]
	bx	lr
.L560:
	.align	2, 0
.L559:
	.word	gPokemonCrySong
.Lfe67:
	.size	 SetPokemonCryProgress,.Lfe67-SetPokemonCryProgress
	.align	2, 0
	.globl	IsPokemonCryPlaying
	.type	 IsPokemonCryPlaying,function
	.thumb_func
IsPokemonCryPlaying:
	ldr	r1, [r0, #0x2c]
	ldr	r0, [r1, #0x20]
	cmp	r0, #0
	beq	.L562	@cond_branch
	ldr	r0, [r0, #0x2c]
	cmp	r0, r1
	bne	.L562	@cond_branch
	mov	r0, #0x1
	b	.L564
.L562:
	mov	r0, #0x0
.L564:
	bx	lr
.Lfe68:
	.size	 IsPokemonCryPlaying,.Lfe68-IsPokemonCryPlaying
	.align	2, 0
	.globl	SetPokemonCryChorus
	.type	 SetPokemonCryChorus,function
	.thumb_func
SetPokemonCryChorus:
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r0, #0
	beq	.L566	@cond_branch
	ldr	r2, .L568
	mov	r0, #0x2
	strb	r0, [r2]
	ldrb	r3, [r2, #0x12]
	add	r0, r3, r1
	mov	r1, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x19]
	b	.L567
.L569:
	.align	2, 0
.L568:
	.word	gPokemonCrySong
.L566:
	ldr	r1, .L570
	mov	r0, #0x1
	strb	r0, [r1]
.L567:
	bx	lr
.L571:
	.align	2, 0
.L570:
	.word	gPokemonCrySong
.Lfe69:
	.size	 SetPokemonCryChorus,.Lfe69-SetPokemonCryChorus
	.align	2, 0
	.globl	SetPokemonCryStereo
	.type	 SetPokemonCryStereo,function
	.thumb_func
SetPokemonCryStereo:
	ldr	r1, .L576
	ldr	r2, [r1]
	cmp	r0, #0
	beq	.L573	@cond_branch
	ldr	r1, .L576+0x4
	ldr	r3, .L576+0x8
	add	r0, r3, #0
	strh	r0, [r1]
	mov	r0, #0xfe
	ldrb	r1, [r2, #0x9]
	and	r0, r0, r1
	b	.L575
.L577:
	.align	2, 0
.L576:
	.word	0x3007ff0
	.word	0x4000082
	.word	0x210e
.L573:
	ldr	r1, .L578
	ldr	r3, .L578+0x4
	add	r0, r3, #0
	strh	r0, [r1]
	mov	r0, #0x1
	ldrb	r1, [r2, #0x9]
	orr	r0, r0, r1
.L575:
	strb	r0, [r2, #0x9]
	bx	lr
.L579:
	.align	2, 0
.L578:
	.word	0x4000082
	.word	0x3302
.Lfe70:
	.size	 SetPokemonCryStereo,.Lfe70-SetPokemonCryStereo
	.align	2, 0
	.globl	SetPokemonCryPriority
	.type	 SetPokemonCryPriority,function
	.thumb_func
SetPokemonCryPriority:
	ldr	r1, .L581
	strb	r0, [r1, #0x2]
	bx	lr
.L582:
	.align	2, 0
.L581:
	.word	gPokemonCrySong
.Lfe71:
	.size	 SetPokemonCryPriority,.Lfe71-SetPokemonCryPriority
	.comm	gMPlayMemAccArea, 16	@ 16
	.comm	gPokemonCrySong, 52	@ 52
	.comm	gPokemonCrySongs, 104	@ 104
	.comm	gPokemonCryMusicPlayers, 128	@ 128
	.comm	gPokemonCryTracks, 320	@ 320
	.comm	gMPlayJumpTable, 144	@ 144
	.comm	gCgbChans, 256	@ 256
	.comm	gSoundInfo, 4016	@ 4016
	.comm	gMPlayInfo_BGM, 64	@ 64
	.comm	gMPlayInfo_SE1, 64	@ 64
	.comm	gMPlayInfo_SE2, 64	@ 64
	.comm	gMPlayInfo_SE3, 64	@ 64
.text
	.align	2, 0

