@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.type	 sPkblToEscapeFactor,object
sPkblToEscapeFactor:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x5
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.size	 sPkblToEscapeFactor,15
	.type	 sGoNearCounterToCatchFactor,object
sGoNearCounterToCatchFactor:
	.byte	0x4
	.byte	0x3
	.byte	0x2
	.byte	0x1
	.size	 sGoNearCounterToCatchFactor,4
	.type	 sGoNearCounterToEscapeFactor,object
sGoNearCounterToEscapeFactor:
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.size	 sGoNearCounterToEscapeFactor,4
.text
	.align	2, 0
	.globl	HandleAction_UseMove
	.type	 HandleAction_UseMove,function
	.thumb_func
HandleAction_UseMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x4
	str	r0, [sp]
	ldr	r6, .L106
	ldr	r1, .L106+0x4
	ldr	r0, .L106+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r6]
	ldr	r1, .L106+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x8a
	ldrb	r4, [r0]
	ldr	r1, .L106+0x10
	ldrb	r2, [r6]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r4, r4, r0
	cmp	r4, #0
	beq	.LCB28
	b	.L100	@long jump
.LCB28:
	add	r0, r2, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB33
	b	.L100	@long jump
.LCB33:
	ldr	r0, .L106+0x14
	strb	r4, [r0]
	ldr	r3, .L106+0xc
	ldr	r0, [r3]
	ldr	r5, .L106+0x18
	add	r0, r0, r5
	strb	r4, [r0]
	ldr	r0, .L106+0x1c
	strh	r4, [r0]
	ldr	r0, .L106+0x20
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L106+0x24
	strb	r1, [r0, #0x6]
	ldr	r0, .L106+0x28
	strh	r4, [r0, #0x2c]
	ldr	r2, .L106+0x2c
	ldr	r3, .L106+0x30
	mov	r9, r3
	ldrb	r0, [r6]
	ldr	r5, .L106+0xc
	ldr	r1, [r5]
	add	r0, r0, r1
	add	r0, r0, #0x7f
	ldrb	r0, [r0]
	strb	r0, [r3]
	strb	r0, [r2]
	ldr	r1, .L106+0x34
	ldrb	r4, [r6]
	lsl	r0, r4, #0x4
	add	r3, r0, r1
	ldrb	r1, [r3]
	lsl	r0, r1, #0x1a
	mov	r8, r2
	cmp	r0, #0
	bge	.L5	@cond_branch
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r2, .L106+0x38
	ldr	r1, .L106+0x3c
	mov	r0, #0xa5
	strh	r0, [r1]
	strh	r0, [r2]
	ldr	r2, .L106+0x40
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0xa5
	mov	r1, #0x0
	bl	GetMoveTarget
	ldrb	r1, [r6]
	ldr	r2, [r5]
	b	.L101
.L107:
	.align	2, 0
.L106:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattleStruct
	.word	gBitTable
	.word	gIsCriticalHit
	.word	0x19f
	.word	gMoveResultFlags
	.word	gMultiHitCounter
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gCurrMovePos
	.word	gChosenMovePos
	.word	gProtectStructs
	.word	gCurrentMove
	.word	gChosenMove
	.word	gHitMarker
.L5:
	ldr	r0, .L108
	mov	sl, r0
	mov	r1, #0x5c
	mov	r5, r4
	mul	r5, r5, r1
	add	r0, r0, #0x54
	add	r0, r5, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L8	@cond_branch
	mov	r7, #0x80
	lsl	r7, r7, #0xf
	and	r7, r7, r1
	cmp	r7, #0
	beq	.L7	@cond_branch
.L8:
	ldr	r3, .L108+0x4
	ldr	r2, .L108+0x8
	ldr	r1, .L108+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2]
	strh	r0, [r3]
	b	.L6
.L109:
	.align	2, 0
.L108:
	.word	gBattleMons
	.word	gCurrentMove
	.word	gChosenMove
	.word	gLockedMoves
.L7:
	ldr	r3, .L110
	mov	ip, r3
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	ldrh	r3, [r0, #0x6]
	add	r1, r3, #0
	cmp	r1, #0
	beq	.L12	@cond_branch
	ldrb	r2, [r0, #0x10]
	lsl	r0, r2, #0x1
	add	r0, r0, r5
	mov	r4, sl
	add	r4, r4, #0xc
	add	r0, r0, r4
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L10	@cond_branch
	ldr	r2, .L110+0x4
	ldr	r0, .L110+0x8
	strh	r3, [r0]
	strh	r3, [r2]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	ldrb	r0, [r0, #0x10]
	mov	r5, r9
	strb	r0, [r5]
	mov	r1, r8
	strb	r0, [r1]
	ldrh	r0, [r2]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldrb	r1, [r6]
	ldr	r3, .L110+0xc
	ldr	r2, [r3]
	b	.L101
.L111:
	.align	2, 0
.L110:
	.word	gDisableStructs
	.word	gCurrentMove
	.word	gChosenMove
	.word	gBattleStruct
.L10:
	cmp	r1, #0
	beq	.L12	@cond_branch
	cmp	r1, r0
	beq	.L12	@cond_branch
	mov	r5, r9
	strb	r2, [r5]
	mov	r0, r8
	strb	r2, [r0]
	ldr	r3, .L112
	ldr	r2, .L112+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	ldrb	r1, [r6]
	mov	r5, #0x5c
	mul	r1, r1, r5
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r2]
	strh	r0, [r3]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	strh	r7, [r0, #0x6]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	mov	r1, #0x0
	strb	r1, [r0, #0x10]
	ldrb	r0, [r6]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, ip
	ldrb	r2, [r1, #0x11]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
	ldrh	r0, [r3]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldrb	r1, [r6]
	ldr	r3, .L112+0x8
	ldr	r2, [r3]
	b	.L101
.L113:
	.align	2, 0
.L112:
	.word	gCurrentMove
	.word	gChosenMove
	.word	gBattleStruct
.L12:
	ldr	r3, .L114
	mov	r5, r8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	ldr	r4, .L114+0x4
	ldrb	r2, [r4]
	mov	r1, #0x5c
	mul	r1, r1, r2
	add	r0, r0, r1
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldr	r1, .L114+0x8
	lsl	r2, r2, #0x1
	add	r2, r2, r1
	ldrh	r3, [r0]
	ldrh	r2, [r2]
	cmp	r3, r2
	beq	.L14	@cond_branch
	ldr	r1, .L114+0xc
	ldr	r0, .L114+0x10
	strh	r3, [r0]
	strh	r3, [r1]
	ldrh	r0, [r1]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldrb	r1, [r4]
	ldr	r2, .L114+0x14
	ldr	r2, [r2]
.L101:
	add	r1, r1, r2
	strb	r0, [r1, #0xc]
	b	.L6
.L115:
	.align	2, 0
.L114:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gChosenMoveByBattler
	.word	gCurrentMove
	.word	gChosenMove
	.word	gBattleStruct
.L14:
	ldr	r1, .L116
	ldr	r0, .L116+0x4
	strh	r3, [r0]
	strh	r3, [r1]
.L6:
	ldr	r1, .L116+0x8
	ldr	r0, .L116+0xc
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L16	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L17	@cond_branch
	ldr	r0, .L116+0x10
	ldr	r1, .L116
	ldrh	r1, [r1]
	strh	r1, [r0, #0x22]
	b	.L16
.L117:
	.align	2, 0
.L116:
	.word	gCurrentMove
	.word	gChosenMove
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleResults
.L17:
	ldr	r0, .L118
	ldr	r1, .L118+0x4
	ldrh	r1, [r1]
	strh	r1, [r0, #0x24]
.L16:
	ldr	r4, .L118+0x8
	ldrh	r0, [r4]
	ldr	r1, .L118+0xc
	ldrb	r1, [r1]
	bl	SetTypeBeforeUsingMove
	ldr	r0, .L118+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L19	@cond_branch
	mov	r7, #0x3f
	and	r7, r7, r0
	b	.L20
.L119:
	.align	2, 0
.L118:
	.word	gBattleResults
	.word	gCurrentMove
	.word	gChosenMove
	.word	gBattlerAttacker
	.word	gBattleStruct
.L19:
	ldr	r2, .L120
	ldrh	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r7, [r0, #0x3]
.L20:
	ldr	r4, .L120+0x4
	ldrb	r0, [r4]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L120+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	ldrb	r0, [r5, #0x8]
	cmp	r0, #0
	beq	.L21	@cond_branch
	ldr	r2, .L120
	ldr	r0, .L120+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	bne	.L21	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r5, #0x9]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L21	@cond_branch
	ldr	r1, .L120+0x10
	ldrb	r2, [r5, #0x9]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L21	@cond_branch
	ldr	r0, .L120+0x14
	strb	r2, [r0]
	b	.L22
.L121:
	.align	2, 0
.L120:
	.word	gBattleMoves
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerTarget
.L21:
	ldr	r2, .L122
	ldr	r1, [r2]
	mov	r0, #0x1
	and	r1, r1, r0
	ldr	r5, .L122+0x4
	mov	r8, r2
	cmp	r1, #0
	bne	.LCB505
	b	.L62	@long jump
.LCB505:
	ldr	r0, .L122+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.LCB516
	b	.L23	@long jump
.LCB516:
	ldr	r0, .L122+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r5
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L24	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0x10
	bne	.LCB534
	b	.L23	@long jump
.LCB534:
.L24:
	ldr	r3, .L122+0x10
	ldr	r2, .L122+0x14
	ldrb	r0, [r2]
	ldr	r1, .L122+0x18
	ldr	r1, [r1]
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x1f
	beq	.L26	@cond_branch
	cmp	r7, #0xd
	beq	.L25	@cond_branch
.L26:
	cmp	r0, #0x72
	bne	.LCB556
	b	.L23	@long jump
.LCB556:
	cmp	r7, #0xb
	beq	.LCB558
	b	.L23	@long jump
.LCB558:
.L25:
	ldrb	r0, [r2]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L122+0x1c
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L122+0x20
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L28	@cond_branch
	add	r5, r1, #0
.L30:
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	beq	.L29	@cond_branch
	ldr	r0, .L122+0x14
	ldrb	r1, [r0]
	ldr	r0, .L122+0x18
	ldr	r0, [r0]
	add	r1, r1, r0
	ldrb	r0, [r1, #0xc]
	ldrb	r1, [r5]
	cmp	r0, r1
	beq	.L29	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerAbility
	cmp	r0, #0x1f
	bne	.L33	@cond_branch
	cmp	r7, #0xd
	beq	.L32	@cond_branch
.L33:
	ldrb	r0, [r5]
	bl	GetBattlerAbility
	cmp	r0, #0x72
	bne	.L29	@cond_branch
	cmp	r7, #0xb
	bne	.L29	@cond_branch
.L32:
	ldr	r4, .L122+0x1c
	ldrb	r0, [r4]
	bl	GetBattlerTurnOrderNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, [sp]
	cmp	r0, r3
	bcs	.L29	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerTurnOrderNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
.L29:
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	ldr	r1, .L122+0x20
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L30	@cond_branch
.L28:
	ldr	r5, [sp]
	cmp	r5, #0x4
	beq	.LCB660
	b	.L35	@long jump
.LCB660:
	ldr	r2, .L122+0x4
	ldr	r0, .L122+0x24
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x7]
	add	r2, r5, #0
	and	r2, r2, r1
	cmp	r2, #0
	beq	.L36	@cond_branch
	ldr	r0, .L122+0x14
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L37	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L38	@cond_branch
	mov	r0, #0x1
	b	.L102
.L123:
	.align	2, 0
.L122:
	.word	gBattleTypeFlags
	.word	gBattleMoves
	.word	gSideTimers
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gChosenMove
.L38:
	mov	r0, #0x3
	b	.L102
.L37:
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L41	@cond_branch
	mov	r0, #0x0
	b	.L102
.L41:
	mov	r0, #0x2
.L102:
	bl	GetBattlerAtPosition
	ldr	r1, .L124
	strb	r0, [r1]
	b	.L43
.L125:
	.align	2, 0
.L124:
	.word	gBattlerTarget
.L36:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L44	@cond_branch
	ldr	r0, .L126
	strb	r2, [r0]
	add	r4, r0, #0
	ldr	r5, .L126+0x4
	b	.L45
.L127:
	.align	2, 0
.L126:
	.word	gBattlerTarget
	.word	gBattlersCount
.L47:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L45:
	ldrb	r1, [r4]
	ldrb	r0, [r5]
	cmp	r1, r0
	bcs	.L43	@cond_branch
	ldr	r0, .L128
	ldrb	r0, [r0]
	cmp	r1, r0
	beq	.L47	@cond_branch
	add	r0, r1, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L47	@cond_branch
	b	.L43
.L129:
	.align	2, 0
.L128:
	.word	gBattlerAttacker
.L44:
	ldr	r2, .L130
	ldr	r0, .L130+0x4
	ldrb	r0, [r0]
	ldr	r1, .L130+0x8
	ldr	r1, [r1]
	add	r0, r0, r1
	ldrb	r0, [r0, #0xc]
	strb	r0, [r2]
.L43:
	ldr	r5, .L130
	ldrb	r0, [r5]
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.LCB825
	b	.L22	@long jump
.LCB825:
	ldr	r6, .L130+0x4
	b	.L105
.L131:
	.align	2, 0
.L130:
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleStruct
.L35:
	ldr	r4, .L132
	ldr	r0, .L132+0x4
	ldr	r1, [sp]
	add	r0, r1, r0
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldrb	r0, [r4]
	ldr	r6, .L132+0x8
	mov	r5, #0x5c
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r6
	ldrh	r1, [r1, #0x20]
	bl	RecordAbilityBattle
	ldrb	r2, [r4]
	mov	r0, r2
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x1f
	bne	.L58	@cond_branch
	ldr	r1, .L132+0xc
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L59
.L133:
	.align	2, 0
.L132:
	.word	gActiveBattler
	.word	gBattlerByTurnOrder
	.word	gBattleMons
	.word	gSpecialStatuses
.L58:
	cmp	r0, #0x72
	bne	.L59	@cond_branch
	ldr	r1, .L134
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
.L59:
	ldr	r0, .L134+0x4
	ldr	r1, .L134+0x8
	ldrb	r1, [r1]
	strb	r1, [r0]
	b	.L22
.L135:
	.align	2, 0
.L134:
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gActiveBattler
.L23:
	mov	r3, r8
	ldr	r0, [r3]
	mov	r4, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L62	@cond_branch
	ldr	r0, .L136
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L62	@cond_branch
	ldr	r0, .L136+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L63	@cond_branch
	bl	Random
	add	r1, r4, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L64	@cond_branch
	mov	r0, #0x1
	b	.L104
.L137:
	.align	2, 0
.L136:
	.word	gChosenMove
	.word	gBattlerAttacker
.L64:
	mov	r0, #0x3
	b	.L104
.L63:
	bl	Random
	add	r1, r4, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L67	@cond_branch
	mov	r0, #0x0
	b	.L104
.L67:
	mov	r0, #0x2
.L104:
	bl	GetBattlerAtPosition
	ldr	r1, .L138
	strb	r0, [r1]
	ldr	r0, .L138+0x4
	ldrb	r1, [r0]
	ldr	r2, .L138+0x8
	ldr	r5, .L138
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB1019
	b	.L22	@long jump
.LCB1019:
	ldr	r0, .L138+0xc
	ldrb	r0, [r0]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.LCB1034
	b	.L22	@long jump
.LCB1034:
	b	.L103
.L139:
	.align	2, 0
.L138:
	.word	gBattlerTarget
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlerAttacker
.L62:
	ldr	r0, .L140
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r2, [r0, #0x7]
	cmp	r2, #0x80
	bne	.L71	@cond_branch
	ldr	r4, .L140+0x4
	ldrb	r0, [r4]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L72	@cond_branch
	ldr	r1, .L140+0x8
	ldrb	r0, [r4]
	eor	r0, r0, r5
	strb	r0, [r1]
	b	.L22
.L141:
	.align	2, 0
.L140:
	.word	gChosenMove
	.word	gBattlerAttacker
	.word	gBattlerTarget
.L72:
	ldr	r1, .L142
	ldrb	r0, [r4]
	strb	r0, [r1]
	b	.L22
.L143:
	.align	2, 0
.L142:
	.word	gBattlerTarget
.L71:
	mov	r5, r8
	ldr	r0, [r5]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L75	@cond_branch
	cmp	r2, #0x20
	bne	.L75	@cond_branch
	ldr	r0, .L144
	mov	r1, #0x0
	strb	r1, [r0]
	add	r1, r0, #0
	b	.L76
.L145:
	.align	2, 0
.L144:
	.word	gBattlerTarget
.L78:
	ldr	r1, .L146
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L76:
	ldr	r0, .L146+0x4
	ldrb	r2, [r1]
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L22	@cond_branch
	ldr	r0, .L146+0x8
	ldrb	r0, [r0]
	cmp	r2, r0
	beq	.L78	@cond_branch
	add	r0, r2, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L78	@cond_branch
	b	.L22
.L147:
	.align	2, 0
.L146:
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattlerAttacker
.L75:
	ldr	r5, .L148
	ldr	r6, .L148+0x4
	ldrb	r0, [r6]
	ldr	r1, .L148+0x8
	ldr	r1, [r1]
	add	r0, r0, r1
	ldrb	r0, [r0, #0xc]
	strb	r0, [r5]
	ldrb	r0, [r5]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L22	@cond_branch
.L105:
	ldrb	r0, [r6]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L103	@cond_branch
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	strb	r0, [r5]
	ldrb	r0, [r5]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L22	@cond_branch
.L103:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	strb	r0, [r5]
.L22:
	ldr	r0, .L148+0xc
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0xa
	and	r1, r1, r2
	mov	r8, r0
	cmp	r1, #0
	beq	.L88	@cond_branch
	ldr	r0, .L148+0x10
	ldr	r4, .L148+0x4
	ldrb	r2, [r4]
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	bge	.L88	@cond_branch
	ldr	r1, .L148+0x14
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L89	@cond_branch
.L100:
	ldr	r1, .L148+0x18
	mov	r0, #0xc
	strb	r0, [r1]
	b	.L2
.L149:
	.align	2, 0
.L148:
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gBattleTypeFlags
	.word	gProtectStructs
	.word	gBattleMons
	.word	gCurrentActionFuncId
.L89:
	ldr	r3, .L150
	lsl	r0, r2, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L91	@cond_branch
	ldr	r1, .L150+0x4
	mov	r2, #0x0
	mov	r0, #0x4
	strb	r0, [r1, #0x5]
	ldr	r1, .L150+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [r1]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	str	r2, [r0]
	b	.L93
.L151:
	.align	2, 0
.L150:
	.word	gPalaceSelectionBattleScripts
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L91:
	ldr	r1, .L152
	mov	r0, #0x4
	strb	r0, [r1, #0x5]
	ldr	r1, .L152+0x4
	ldr	r0, .L152+0x8
	str	r0, [r1]
	b	.L93
.L153:
	.align	2, 0
.L152:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedLoafingAround
.L88:
	ldr	r4, .L154
	ldr	r3, .L154+0x4
	ldr	r2, .L154+0x8
	ldr	r0, .L154+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [r4]
.L93:
	mov	r1, r8
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L94	@cond_branch
	ldr	r0, .L154+0x10
	ldrb	r0, [r0]
	bl	BattleArena_AddMindPoints
.L94:
	mov	r2, #0x0
	ldr	r6, .L154+0x14
	ldr	r5, .L154+0x18
	ldr	r4, .L154+0x1c
	ldr	r3, .L154+0x20
.L98:
	ldr	r0, [r5]
	lsl	r1, r2, #0x1
	add	r0, r0, r4
	add	r0, r0, r1
	ldrh	r1, [r3, #0x2a]
	strh	r1, [r0]
	add	r3, r3, #0x5c
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bls	.L98	@cond_branch
	mov	r0, #0xa
	strb	r0, [r6]
.L2:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L155:
	.align	2, 0
.L154:
	.word	gBattlescriptCurrInstr
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	gCurrentActionFuncId
	.word	gBattleStruct
	.word	0x2d2
	.word	gBattleMons
.Lfe1:
	.size	 HandleAction_UseMove,.Lfe1-HandleAction_UseMove
	.align	2, 0
	.globl	HandleAction_Switch
	.type	 HandleAction_Switch,function
	.thumb_func
HandleAction_Switch:
	push	{r4, lr}
	ldr	r4, .L158
	ldr	r1, .L158+0x4
	ldr	r0, .L158+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r0, .L158+0xc
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r0, .L158+0x10
	strh	r2, [r0]
	ldr	r1, .L158+0x14
	ldrb	r0, [r4]
	add	r0, r0, r1
	strb	r2, [r0]
	ldr	r1, .L158+0x18
	ldrb	r0, [r4]
	add	r0, r0, r1
	strb	r2, [r0]
	ldr	r2, .L158+0x1c
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x7
	strb	r0, [r2, #0x1]
	ldrb	r3, [r4]
	strb	r3, [r2, #0x2]
	ldrb	r0, [r4]
	ldr	r1, .L158+0x20
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x58
	ldrb	r0, [r0]
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	ldr	r0, .L158+0x24
	strb	r3, [r0, #0x17]
	ldr	r1, .L158+0x28
	ldr	r0, .L158+0x2c
	str	r0, [r1]
	ldr	r1, .L158+0x30
	mov	r0, #0xa
	strb	r0, [r1]
	ldr	r1, .L158+0x34
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0xfe
	bhi	.L157	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
.L157:
	ldr	r2, .L158+0x38
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r2
	ldrh	r4, [r1]
	bl	GetBattlerSide
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	UndoFormChange
	pop	{r4}
	pop	{r0}
	bx	r0
.L159:
	.align	2, 0
.L158:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gActionSelectionCursor
	.word	gMoveSelectionCursor
	.word	gBattleTextBuff1
	.word	gBattleStruct
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ActionSwitch
	.word	gCurrentActionFuncId
	.word	gBattleResults
	.word	gBattlerPartyIndexes
.Lfe2:
	.size	 HandleAction_Switch,.Lfe2-HandleAction_Switch
	.align	2, 0
	.globl	HandleAction_UseItem
	.type	 HandleAction_UseItem,function
	.thumb_func
HandleAction_UseItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L192
	ldr	r2, .L192+0x4
	ldr	r1, .L192+0x8
	ldr	r0, .L192+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	strb	r0, [r4]
	ldr	r0, .L192+0x10
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L192+0x14
	strh	r1, [r0]
	ldrb	r0, [r4]
	bl	ClearFuryCutterDestinyBondGrudge
	ldr	r5, .L192+0x18
	ldr	r0, .L192+0x1c
	ldr	r1, [r0]
	ldrb	r2, [r4]
	lsl	r2, r2, #0x9
	ldr	r3, .L192+0x20
	add	r0, r1, r3
	add	r0, r0, r2
	ldrb	r3, [r0]
	ldr	r0, .L192+0x24
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	strh	r3, [r5]
	cmp	r3, #0x1b
	bhi	.L161	@cond_branch
	ldr	r2, .L192+0x28
	ldr	r1, .L192+0x2c
	ldrh	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r1, .L192+0x30
	mov	sl, r1
	b	.L162
.L193:
	.align	2, 0
.L192:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gLastUsedItem
	.word	gBattleResources
	.word	0x821
	.word	0x822
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForBallThrow
	.word	gCurrentActionFuncId
.L161:
	add	r0, r3, #0
	sub	r0, r0, #0x57
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L163	@cond_branch
	ldr	r0, .L194
	ldr	r1, .L194+0x4
	ldr	r1, [r1]
	str	r1, [r0]
	ldr	r2, .L194+0x8
	mov	sl, r2
	b	.L162
.L195:
	.align	2, 0
.L194:
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForRunningByItem
	.word	gCurrentActionFuncId
.L163:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L165	@cond_branch
	ldr	r0, .L196
	ldr	r1, .L196+0x4
	ldr	r1, [r1]
	str	r1, [r0]
	ldr	r3, .L196+0x8
	mov	sl, r3
	b	.L162
.L197:
	.align	2, 0
.L196:
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
.L165:
	ldr	r3, .L198
	ldrb	r0, [r4]
	strb	r0, [r3, #0x17]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r2, .L198+0x4
	ldr	r1, [r2]
	add	r0, r0, r1
	add	r0, r0, #0xc0
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	mov	r8, r4
	ldr	r6, .L198+0x8
	ldr	r1, .L198+0xc
	mov	r9, r1
	mov	ip, r3
	add	r7, r2, #0
	ldr	r2, .L198+0x10
	mov	sl, r2
	cmp	r0, #0x4
	bls	.LCB1666
	b	.L167	@long jump
.LCB1666:
	lsl	r0, r0, #0x2
	ldr	r1, .L198+0x14
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L199:
	.align	2, 0
.L198:
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
	.word	.L188
	.align	2, 0
	.align	2, 0
.L188:
	.word	.L167
	.word	.L167
	.word	.L170
	.word	.L178
	.word	.L185
.L170:
	ldr	r5, .L200
	mov	r0, #0x0
	strb	r0, [r5, #0x5]
	ldr	r2, .L200+0x4
	ldrb	r0, [r2]
	lsr	r0, r0, #0x1
	ldr	r1, [r7]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	mov	r8, r2
	cmp	r0, #0
	beq	.L190	@cond_branch
	mov	r0, #0x3e
	and	r0, r0, r1
	ldr	r6, .L200+0x8
	ldr	r3, .L200+0xc
	mov	r9, r3
	ldr	r1, .L200+0x10
	mov	sl, r1
	cmp	r0, #0
	bne	.LCB1725
	b	.L167	@long jump
.LCB1725:
	mov	r0, #0x5
	strb	r0, [r5, #0x5]
	b	.L167
.L201:
	.align	2, 0
.L200:
	.word	gBattleCommunication
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
.L190:
	ldr	r6, .L202
	ldr	r2, .L202+0x4
	mov	r9, r2
	ldr	r3, .L202+0x8
	mov	sl, r3
	mov	r4, r8
	add	r3, r7, #0
	add	r2, r5, #0
.L176:
	ldrb	r1, [r4]
	lsr	r1, r1, #0x1
	ldr	r0, [r3]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r2, #0x5]
	add	r0, r0, #0x1
	strb	r0, [r2, #0x5]
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L176	@cond_branch
	b	.L167
.L203:
	.align	2, 0
.L202:
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
.L178:
	ldr	r3, .L204
	mov	r0, #0x4
	strb	r0, [r3, #0x5]
	ldr	r2, .L204+0x4
	ldrb	r0, [r2]
	lsr	r0, r0, #0x1
	ldr	r1, [r7]
	add	r0, r0, r1
	add	r6, r0, #0
	add	r6, r6, #0xc2
	ldrb	r1, [r6]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r8, r2
	cmp	r5, #0
	beq	.L179	@cond_branch
	mov	r0, #0x5
	strb	r0, [r3, #0x5]
	b	.L191
.L205:
	.align	2, 0
.L204:
	.word	gBattleCommunication
	.word	gBattlerAttacker
.L179:
	ldr	r3, .L206
	mov	r4, #0xfd
	strb	r4, [r3]
	mov	r0, #0x5
	strb	r0, [r3, #0x1]
	mov	r2, #0x1
	strb	r2, [r3, #0x2]
	mov	r0, #0xff
	strb	r0, [r3, #0x3]
	ldr	r1, .L206+0x4
	strb	r4, [r1]
	strb	r5, [r1, #0x1]
	mov	r0, #0xd2
	strb	r0, [r1, #0x2]
	strb	r5, [r1, #0x3]
	sub	r0, r0, #0xd3
	strb	r0, [r1, #0x4]
	ldrb	r0, [r6]
	and	r2, r2, r0
	ldr	r6, .L206+0x8
	ldr	r0, .L206+0xc
	mov	r9, r0
	ldr	r1, .L206+0x10
	mov	sl, r1
	cmp	r2, #0
	bne	.L182	@cond_branch
	mov	r5, r8
	add	r4, r7, #0
	add	r2, r3, #0
.L183:
	ldrb	r1, [r5]
	lsr	r1, r1, #0x1
	ldr	r0, [r4]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r2, #0x2]
	add	r0, r0, #0x1
	strb	r0, [r2, #0x2]
	ldrb	r0, [r5]
	lsr	r0, r0, #0x1
	ldr	r1, [r4]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L183	@cond_branch
.L182:
	ldrb	r0, [r3, #0x2]
	add	r0, r0, #0xe
	mov	r1, #0x0
	mov	r2, ip
	strb	r0, [r2, #0x10]
	strb	r1, [r2, #0x11]
	b	.L167
.L207:
	.align	2, 0
.L206:
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
.L185:
	ldr	r0, .L208
	ldr	r1, [r0]
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L186	@cond_branch
	ldr	r1, .L208+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	ldr	r3, .L208+0x8
	mov	r8, r3
.L191:
	ldr	r6, .L208+0xc
	ldr	r0, .L208+0x10
	mov	r9, r0
	ldr	r1, .L208+0x14
	mov	sl, r1
	b	.L167
.L209:
	.align	2, 0
.L208:
	.word	gBattleTypeFlags
	.word	gBattleCommunication
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
.L186:
	ldr	r0, .L210
	strb	r1, [r0, #0x5]
	ldr	r2, .L210+0x4
	mov	r8, r2
	ldr	r6, .L210+0x8
	ldr	r3, .L210+0xc
	mov	r9, r3
	ldr	r0, .L210+0x10
	mov	sl, r0
.L167:
	mov	r1, r8
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	ldr	r1, [r7]
	add	r0, r0, r1
	add	r0, r0, #0xc0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldr	r0, [r0]
	str	r0, [r6]
.L162:
	mov	r0, #0xa
	mov	r2, sl
	strb	r0, [r2]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L211:
	.align	2, 0
.L210:
	.word	gBattleCommunication
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
.Lfe3:
	.size	 HandleAction_UseItem,.Lfe3-HandleAction_UseItem
	.align	2, 0
	.globl	TryRunFromBattle
	.type	 TryRunFromBattle,function
	.thumb_func
TryRunFromBattle:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x0
	mov	r8, r0
	ldr	r1, .L234
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r1, r0, r1
	ldrh	r0, [r1, #0x30]
	cmp	r0, #0xcd
	bne	.L213	@cond_branch
	ldr	r1, .L234+0x4
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x7]
	b	.L214
.L235:
	.align	2, 0
.L234:
	.word	gBattleMons
	.word	gEnigmaBerries
.L213:
	ldrh	r0, [r1, #0x30]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
.L214:
	ldr	r0, .L236
	strb	r5, [r0]
	cmp	r1, #0x25
	bne	.L215	@cond_branch
	ldr	r2, .L236+0x4
	ldr	r1, .L236+0x8
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0, #0x30]
	strh	r0, [r2]
	ldr	r0, .L236+0xc
	lsl	r2, r5, #0x4
	add	r2, r2, r0
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x61
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	b	.L232
.L237:
	.align	2, 0
.L236:
	.word	gPotentialItemEffectBattler
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gProtectStructs
.L215:
	ldr	r1, .L238
	mov	sl, r1
	mov	r2, #0x5c
	mov	r9, r2
	mov	r0, r9
	mul	r0, r0, r5
	add	r7, r0, r1
	ldrh	r6, [r7, #0x20]
	cmp	r6, #0x32
	bne	.L217	@cond_branch
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L218	@cond_branch
	ldr	r4, .L238+0x4
	ldr	r1, [r4]
	add	r1, r1, #0x6c
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	bl	GetPyramidRunMultiplier
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrh	r0, [r7, #0x6]
	mul	r0, r0, r3
	mov	r2, #0x1
	add	r1, r5, #0
	eor	r1, r1, r2
	mov	r2, r9
	mul	r2, r2, r1
	add	r1, r2, #0
	add	r1, r1, sl
	ldrh	r1, [r1, #0x6]
	bl	__divsi3
	ldr	r1, [r4]
	add	r1, r1, #0x6c
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	cmp	r4, r1
	bhi	.LCB2146
	b	.L216	@long jump
.LCB2146:
	ldr	r0, .L238+0x8
	strh	r6, [r0]
	ldr	r0, .L238+0xc
	lsl	r2, r5, #0x4
	add	r2, r2, r0
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x61
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	b	.L232
.L239:
	.align	2, 0
.L238:
	.word	gBattleMons
	.word	gBattleStruct
	.word	gLastUsedAbility
	.word	gProtectStructs
.L218:
	ldr	r0, .L240
	strh	r6, [r0]
	ldr	r0, .L240+0x4
	lsl	r2, r5, #0x4
	add	r2, r2, r0
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x61
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	b	.L232
.L241:
	.align	2, 0
.L240:
	.word	gLastUsedAbility
	.word	gProtectStructs
.L217:
	ldr	r0, .L242
	ldr	r1, [r0]
	ldr	r0, .L242+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L222	@cond_branch
	mov	r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L222	@cond_branch
.L232:
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	b	.L216
.L243:
	.align	2, 0
.L242:
	.word	gBattleTypeFlags
	.word	0x43f0100
.L222:
	mov	r0, #0x1
	add	r4, r5, #0
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L224	@cond_branch
	mov	r0, #0x2
	orr	r4, r4, r0
.L224:
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L225	@cond_branch
	bl	GetPyramidRunMultiplier
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L244
	mov	r1, #0x5c
	mov	r0, r5
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x6]
	mul	r0, r0, r3
	mul	r1, r1, r4
	add	r1, r1, r2
	b	.L233
.L245:
	.align	2, 0
.L244:
	.word	gBattleMons
.L225:
	ldr	r2, .L246
	mov	r1, #0x5c
	mov	r0, r5
	mul	r0, r0, r1
	add	r3, r0, r2
	mov	r0, r4
	mul	r0, r0, r1
	add	r1, r0, r2
	ldrh	r0, [r3, #0x6]
	ldrh	r2, [r1, #0x6]
	cmp	r0, r2
	bcs	.L228	@cond_branch
	lsl	r0, r0, #0x7
.L233:
	ldrh	r1, [r1, #0x6]
	bl	__divsi3
	ldr	r1, .L246+0x4
	ldr	r1, [r1]
	add	r1, r1, #0x6c
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	cmp	r4, r1
	bls	.L227	@cond_branch
.L228:
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L227:
	ldr	r0, .L246+0x4
	ldr	r1, [r0]
	add	r1, r1, #0x6c
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L216:
	mov	r0, r8
	cmp	r0, #0
	beq	.L231	@cond_branch
	ldr	r1, .L246+0x8
	ldr	r0, .L246+0xc
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L246+0x10
	mov	r0, #0x4
	strb	r0, [r1]
.L231:
	mov	r0, r8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L247:
	.align	2, 0
.L246:
	.word	gBattleMons
	.word	gBattleStruct
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	gBattleOutcome
.Lfe4:
	.size	 TryRunFromBattle,.Lfe4-TryRunFromBattle
	.align	2, 0
	.globl	HandleAction_Run
	.type	 HandleAction_Run,function
	.thumb_func
HandleAction_Run:
	push	{r4, r5, r6, lr}
	ldr	r4, .L267
	ldr	r1, .L267+0x4
	ldr	r5, .L267+0x8
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r0, .L267+0xc
	ldr	r0, [r0]
	ldr	r1, .L267+0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L249	@cond_branch
	ldr	r0, .L267+0x14
	ldrb	r1, [r0]
	strb	r1, [r5]
	ldr	r2, .L267+0x18
	mov	r0, #0x0
	strb	r0, [r2]
	lsl	r1, r1, #0x18
	cmp	r1, #0
	beq	.L251	@cond_branch
	add	r4, r2, #0
	ldr	r6, .L267+0x1c
	ldr	r5, .L267+0x20
.L253:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L254	@cond_branch
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.L252	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x2
	b	.L265
.L268:
	.align	2, 0
.L267:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattleTypeFlags
	.word	0x2000002
	.word	gBattlersCount
	.word	gActiveBattler
	.word	gChosenActionByBattler
	.word	gBattleOutcome
.L254:
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.L252	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x1
.L265:
	orr	r0, r0, r1
	strb	r0, [r5]
.L252:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L269
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L253	@cond_branch
.L251:
	ldr	r2, .L269+0x4
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L269+0x8
	ldr	r1, [r0]
	ldr	r0, .L269+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x8
	orr	r0, r0, r2
	b	.L266
.L270:
	.align	2, 0
.L269:
	.word	gBattlersCount
	.word	gBattleOutcome
	.word	gSaveBlock2Ptr
	.word	0xc31
.L249:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L260	@cond_branch
	ldrb	r0, [r4]
	bl	TryRunFromBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L259	@cond_branch
	ldrb	r0, [r4]
	bl	ClearFuryCutterDestinyBondGrudge
	ldr	r1, .L271
	mov	r0, #0x3
	strb	r0, [r1, #0x5]
	ldr	r1, .L271+0x4
	ldr	r0, .L271+0x8
	str	r0, [r1]
	ldr	r1, .L271+0xc
	mov	r0, #0xa
	b	.L266
.L272:
	.align	2, 0
.L271:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PrintFailedToRunString
	.word	gCurrentActionFuncId
.L260:
	ldrb	r0, [r4]
	bl	CanBattlerEscape
	cmp	r0, #0
	bne	.L263	@cond_branch
	ldr	r1, .L273
	mov	r0, #0x4
	strb	r0, [r1, #0x5]
	ldr	r1, .L273+0x4
	ldr	r0, .L273+0x8
	str	r0, [r1]
	ldr	r1, .L273+0xc
	mov	r0, #0xa
	b	.L266
.L274:
	.align	2, 0
.L273:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PrintFailedToRunString
	.word	gCurrentActionFuncId
.L263:
	ldr	r0, .L275
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r1, .L275+0x4
	mov	r0, #0x6
.L266:
	strb	r0, [r1]
.L259:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L276:
	.align	2, 0
.L275:
	.word	gBattlersCount
	.word	gBattleOutcome
.Lfe5:
	.size	 HandleAction_Run,.Lfe5-HandleAction_Run
	.align	2, 0
	.globl	HandleAction_WatchesCarefully
	.type	 HandleAction_WatchesCarefully,function
	.thumb_func
HandleAction_WatchesCarefully:
	ldr	r2, .L278
	ldr	r1, .L278+0x4
	ldr	r0, .L278+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r0, .L278+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L278+0x10
	strh	r1, [r0]
	ldr	r1, .L278+0x14
	ldr	r0, .L278+0x18
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r1, .L278+0x1c
	mov	r0, #0xa
	strb	r0, [r1]
	bx	lr
.L279:
	.align	2, 0
.L278:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForSafariActions
	.word	gCurrentActionFuncId
.Lfe6:
	.size	 HandleAction_WatchesCarefully,.Lfe6-HandleAction_WatchesCarefully
	.align	2, 0
	.globl	HandleAction_SafariZoneBallThrow
	.type	 HandleAction_SafariZoneBallThrow,function
	.thumb_func
HandleAction_SafariZoneBallThrow:
	ldr	r2, .L281
	ldr	r1, .L281+0x4
	ldr	r0, .L281+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r0, .L281+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L281+0x10
	strh	r1, [r0]
	ldr	r1, .L281+0x14
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L281+0x18
	mov	r0, #0x5
	strh	r0, [r1]
	ldr	r1, .L281+0x1c
	ldr	r0, .L281+0x20
	ldr	r0, [r0, #0x14]
	str	r0, [r1]
	ldr	r1, .L281+0x24
	mov	r0, #0xa
	strb	r0, [r1]
	bx	lr
.L282:
	.align	2, 0
.L281:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gNumSafariBalls
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForBallThrow
	.word	gCurrentActionFuncId
.Lfe7:
	.size	 HandleAction_SafariZoneBallThrow,.Lfe7-HandleAction_SafariZoneBallThrow
	.align	2, 0
	.globl	HandleAction_ThrowPokeblock
	.type	 HandleAction_ThrowPokeblock,function
	.thumb_func
HandleAction_ThrowPokeblock:
	push	{r4, r5, r6, lr}
	ldr	r3, .L290
	ldr	r1, .L290+0x4
	ldr	r0, .L290+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r3]
	ldr	r0, .L290+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L290+0x10
	strh	r1, [r0]
	ldr	r6, .L290+0x14
	ldr	r0, .L290+0x18
	ldr	r2, [r0]
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	ldr	r4, .L290+0x1c
	add	r0, r2, r4
	add	r0, r0, r1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	strb	r0, [r6, #0x5]
	ldr	r1, .L290+0x20
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	ldr	r3, .L290+0x24
	add	r2, r2, r3
	add	r2, r2, r0
	ldrb	r0, [r2]
	strh	r0, [r1]
	ldr	r1, .L290+0x28
	ldrb	r0, [r1, #0x1f]
	cmp	r0, #0xfe
	bhi	.L284	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1f]
.L284:
	ldr	r2, .L290+0x2c
	ldr	r0, [r2]
	add	r1, r0, #0
	add	r1, r1, #0x79
	ldrb	r0, [r1]
	cmp	r0, #0x2
	bhi	.L285	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
.L285:
	ldr	r0, [r2]
	add	r3, r0, #0
	add	r3, r3, #0x7a
	ldrb	r5, [r3]
	add	r4, r5, #0
	cmp	r4, #0x1
	bls	.L286	@cond_branch
	ldr	r2, .L290+0x30
	add	r0, r0, #0x79
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldrb	r6, [r6, #0x5]
	add	r0, r0, r6
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r4, r0
	bcs	.L287	@cond_branch
	mov	r0, #0x1
	b	.L289
.L291:
	.align	2, 0
.L290:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleCommunication
	.word	gBattleResources
	.word	0x821
	.word	gLastUsedItem
	.word	0x822
	.word	gBattleResults
	.word	gBattleStruct
	.word	sPkblToEscapeFactor
.L287:
	sub	r0, r5, r0
.L289:
	strb	r0, [r3]
.L286:
	ldr	r1, .L292
	ldr	r0, .L292+0x4
	ldr	r0, [r0, #0x8]
	str	r0, [r1]
	ldr	r1, .L292+0x8
	mov	r0, #0xa
	strb	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L293:
	.align	2, 0
.L292:
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForSafariActions
	.word	gCurrentActionFuncId
.Lfe8:
	.size	 HandleAction_ThrowPokeblock,.Lfe8-HandleAction_ThrowPokeblock
	.align	2, 0
	.globl	HandleAction_GoNear
	.type	 HandleAction_GoNear,function
	.thumb_func
HandleAction_GoNear:
	push	{r4, lr}
	ldr	r2, .L299
	ldr	r1, .L299+0x4
	ldr	r0, .L299+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r0, .L299+0xc
	mov	r4, #0x0
	strh	r4, [r0]
	ldr	r0, .L299+0x10
	strh	r4, [r0]
	ldr	r3, .L299+0x14
	ldr	r0, [r3]
	add	r2, r0, #0
	add	r2, r2, #0x7b
	ldr	r1, .L299+0x18
	add	r0, r0, #0x78
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldrb	r1, [r2]
	add	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r3]
	add	r1, r0, #0
	add	r1, r1, #0x7b
	ldrb	r0, [r1]
	cmp	r0, #0x14
	bls	.L295	@cond_branch
	mov	r0, #0x14
	strb	r0, [r1]
.L295:
	ldr	r0, [r3]
	add	r2, r0, #0
	add	r2, r2, #0x7a
	ldr	r1, .L299+0x1c
	add	r0, r0, #0x78
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldrb	r1, [r2]
	add	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r3]
	add	r1, r0, #0
	add	r1, r1, #0x7a
	ldrb	r0, [r1]
	cmp	r0, #0x14
	bls	.L296	@cond_branch
	mov	r0, #0x14
	strb	r0, [r1]
.L296:
	ldr	r0, [r3]
	add	r1, r0, #0
	add	r1, r1, #0x78
	ldrb	r0, [r1]
	cmp	r0, #0x2
	bhi	.L297	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L299+0x20
	strb	r4, [r0, #0x5]
	b	.L298
.L300:
	.align	2, 0
.L299:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleStruct
	.word	sGoNearCounterToCatchFactor
	.word	sGoNearCounterToEscapeFactor
	.word	gBattleCommunication
.L297:
	ldr	r1, .L301
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L298:
	ldr	r1, .L301+0x4
	ldr	r0, .L301+0x8
	ldr	r0, [r0, #0x4]
	str	r0, [r1]
	ldr	r1, .L301+0xc
	mov	r0, #0xa
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L302:
	.align	2, 0
.L301:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForSafariActions
	.word	gCurrentActionFuncId
.Lfe9:
	.size	 HandleAction_GoNear,.Lfe9-HandleAction_GoNear
	.align	2, 0
	.globl	HandleAction_SafariZoneRun
	.type	 HandleAction_SafariZoneRun,function
	.thumb_func
HandleAction_SafariZoneRun:
	push	{r4, lr}
	ldr	r2, .L304
	ldr	r1, .L304+0x4
	ldr	r4, .L304+0x8
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r0, #0x11
	bl	PlaySE
	ldr	r0, .L304+0xc
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r1, .L304+0x10
	mov	r0, #0x4
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L305:
	.align	2, 0
.L304:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	gBattleOutcome
.Lfe10:
	.size	 HandleAction_SafariZoneRun,.Lfe10-HandleAction_SafariZoneRun
	.align	2, 0
	.globl	HandleAction_WallyBallThrow
	.type	 HandleAction_WallyBallThrow,function
	.thumb_func
HandleAction_WallyBallThrow:
	ldr	r3, .L307
	ldr	r1, .L307+0x4
	ldr	r0, .L307+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	strb	r2, [r3]
	ldr	r0, .L307+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L307+0x10
	strh	r1, [r0]
	ldr	r1, .L307+0x14
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x7
	strb	r0, [r1, #0x1]
	strb	r2, [r1, #0x2]
	ldr	r2, .L307+0x18
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L307+0x1c
	ldr	r0, .L307+0x20
	ldr	r0, [r0, #0xc]
	str	r0, [r1]
	ldr	r1, .L307+0x24
	mov	r0, #0xa
	strb	r0, [r1]
	ldr	r1, .L307+0x28
	mov	r0, #0xc
	strb	r0, [r1, #0x1]
	bx	lr
.L308:
	.align	2, 0
.L307:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleTextBuff1
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForSafariActions
	.word	gCurrentActionFuncId
	.word	gActionsByTurnOrder
.Lfe11:
	.size	 HandleAction_WallyBallThrow,.Lfe11-HandleAction_WallyBallThrow
	.align	2, 0
	.globl	HandleAction_TryFinish
	.type	 HandleAction_TryFinish,function
	.thumb_func
HandleAction_TryFinish:
	push	{lr}
	bl	HandleFaintedMonActions
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L310	@cond_branch
	ldr	r0, .L311
	ldr	r0, [r0]
	add	r0, r0, #0x4d
	strb	r1, [r0]
	ldr	r1, .L311+0x4
	mov	r0, #0xc
	strb	r0, [r1]
.L310:
	pop	{r0}
	bx	r0
.L312:
	.align	2, 0
.L311:
	.word	gBattleStruct
	.word	gCurrentActionFuncId
.Lfe12:
	.size	 HandleAction_TryFinish,.Lfe12-HandleAction_TryFinish
	.align	2, 0
	.globl	HandleAction_NothingIsFainted
	.type	 HandleAction_NothingIsFainted,function
	.thumb_func
HandleAction_NothingIsFainted:
	ldr	r1, .L314
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r3, .L314+0x4
	ldr	r2, .L314+0x8
	ldrb	r0, [r1]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	ldr	r2, .L314+0xc
	ldr	r0, [r2]
	ldr	r1, .L314+0x10
	and	r0, r0, r1
	str	r0, [r2]
	bx	lr
.L315:
	.align	2, 0
.L314:
	.word	gCurrentTurnActionNumber
	.word	gCurrentActionFuncId
	.word	gActionsByTurnOrder
	.word	gHitMarker
	.word	-0xe106d51
.Lfe13:
	.size	 HandleAction_NothingIsFainted,.Lfe13-HandleAction_NothingIsFainted
	.align	2, 0
	.globl	HandleAction_ActionFinished
	.type	 HandleAction_ActionFinished,function
	.thumb_func
HandleAction_ActionFinished:
	push	{r4, r5, r6, lr}
	ldr	r1, .L317
	ldr	r2, .L317+0x4
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldr	r6, .L317+0x8
	ldr	r1, [r6]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	mov	r1, #0x6
	strb	r1, [r0]
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	ldr	r3, .L317+0xc
	ldr	r1, .L317+0x10
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r3]
	bl	SpecialStatusesClear
	ldr	r2, .L317+0x14
	ldr	r0, [r2]
	ldr	r1, .L317+0x18
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L317+0x1c
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L317+0x20
	mov	r3, #0x0
	str	r3, [r0]
	ldr	r0, .L317+0x24
	strh	r3, [r0]
	ldr	r4, .L317+0x28
	strb	r1, [r4, #0x18]
	strb	r1, [r4, #0x19]
	ldr	r2, .L317+0x2c
	ldr	r5, .L317+0x30
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	strh	r3, [r0]
	ldr	r2, .L317+0x34
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	strh	r3, [r0]
	ldr	r0, [r6]
	strb	r1, [r0, #0x12]
	strb	r1, [r4, #0x14]
	ldr	r0, .L317+0x38
	strb	r1, [r0, #0x3]
	strb	r1, [r0, #0x4]
	strh	r3, [r4, #0x30]
	ldr	r0, .L317+0x3c
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	add	r0, r0, #0x20
	strb	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L318:
	.align	2, 0
.L317:
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattleStruct
	.word	gCurrentActionFuncId
	.word	gActionsByTurnOrder
	.word	gHitMarker
	.word	-0xe106d51
	.word	gCurrentMove
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
	.word	gBattleScripting
	.word	gLastLandedMoves
	.word	gBattlerAttacker
	.word	gLastHitByType
	.word	gBattleCommunication
	.word	gBattleResources
.Lfe14:
	.size	 HandleAction_ActionFinished,.Lfe14-HandleAction_ActionFinished
	.section .rodata
	.type	 sAbilitiesAffectedByMoldBreaker,object
sAbilitiesAffectedByMoldBreaker:
	.space	4
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	3
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	1
	.byte	0x1
	.space	7
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	3
	.byte	0x1
	.space	3
	.byte	0x1
	.byte	0x1
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	8
	.byte	0x1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	3
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	14
	.byte	0x1
	.space	6
	.byte	0x1
	.space	1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	3
	.byte	0x1
	.space	5
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	3
	.byte	0x1
	.space	1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	1
	.byte	0x1
	.space	8
	.byte	0x1
	.byte	0x1
	.space	7
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	1
	.byte	0x1
	.space	3
	.byte	0x1
	.space	23
	.byte	0x1
	.space	9
	.byte	0x1
	.space	4
	.byte	0x1
	.space	3
	.byte	0x1
	.byte	0x1
	.size	 sAbilitiesAffectedByMoldBreaker,220
	.type	 sAbilitiesNotTraced,object
	.size	 sAbilitiesNotTraced,268
sAbilitiesNotTraced:
	.byte	0x1
	.space	35
	.byte	0x1
	.space	22
	.byte	0x1
	.space	61
	.byte	0x1
	.byte	0x1
	.space	26
	.byte	0x1
	.byte	0x1
	.space	10
	.byte	0x1
	.space	14
	.byte	0x1
	.space	20
	.byte	0x1
	.space	10
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	8
	.byte	0x1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	42
	.type	 sHoldEffectToType,object
sHoldEffectToType:
	.byte	0x1f
	.byte	0x6
	.byte	0x2a
	.byte	0x8
	.byte	0x2e
	.byte	0x4
	.byte	0x2f
	.byte	0x5
	.byte	0x30
	.byte	0xc
	.byte	0x31
	.byte	0x11
	.byte	0x32
	.byte	0x1
	.byte	0x33
	.byte	0xd
	.byte	0x34
	.byte	0xb
	.byte	0x35
	.byte	0x2
	.byte	0x36
	.byte	0x3
	.byte	0x37
	.byte	0xf
	.byte	0x38
	.byte	0x7
	.byte	0x39
	.byte	0xe
	.byte	0x3a
	.byte	0xa
	.byte	0x3b
	.byte	0x10
	.byte	0x3c
	.byte	0x0
	.byte	0x81
	.byte	0x12
	.size	 sHoldEffectToType,36
	.align	1, 0
	.type	 sPercentToModifier,object
sPercentToModifier:
	.short	0x0
	.short	0x28
	.short	0x51
	.short	0x7a
	.short	0xa3
	.short	0xcc
	.short	0xf5
	.short	0x11e
	.short	0x147
	.short	0x170
	.short	0x199
	.short	0x1c2
	.short	0x1eb
	.short	0x214
	.short	0x23d
	.short	0x266
	.short	0x28f
	.short	0x2b8
	.short	0x2e1
	.short	0x30a
	.short	0x333
	.short	0x35c
	.short	0x385
	.short	0x3ae
	.short	0x3d7
	.short	0x400
	.short	0x428
	.short	0x451
	.short	0x47a
	.short	0x4a3
	.short	0x4cc
	.short	0x4f5
	.short	0x51e
	.short	0x547
	.short	0x570
	.short	0x599
	.short	0x5c2
	.short	0x5eb
	.short	0x614
	.short	0x63d
	.short	0x666
	.short	0x68f
	.short	0x6b8
	.short	0x6e1
	.short	0x70a
	.short	0x733
	.short	0x75c
	.short	0x785
	.short	0x7ae
	.short	0x7d7
	.short	0x800
	.short	0x828
	.short	0x851
	.short	0x87a
	.short	0x8a3
	.short	0x8cc
	.short	0x8f5
	.short	0x91e
	.short	0x947
	.short	0x970
	.short	0x999
	.short	0x9c2
	.short	0x9eb
	.short	0xa14
	.short	0xa3d
	.short	0xa66
	.short	0xa8f
	.short	0xab8
	.short	0xae1
	.short	0xb0a
	.short	0xb33
	.short	0xb5c
	.short	0xb85
	.short	0xbae
	.short	0xbd7
	.short	0xc00
	.short	0xc28
	.short	0xc51
	.short	0xc7a
	.short	0xca3
	.short	0xccc
	.short	0xcf5
	.short	0xd1e
	.short	0xd47
	.short	0xd70
	.short	0xd99
	.short	0xdc2
	.short	0xdeb
	.short	0xe14
	.short	0xe3d
	.short	0xe66
	.short	0xe8f
	.short	0xeb8
	.short	0xee1
	.short	0xf0a
	.short	0xf33
	.short	0xf5c
	.short	0xf85
	.short	0xfae
	.short	0xfd7
	.short	0x1000
	.size	 sPercentToModifier,202
	.align	1, 0
	.type	 sTypeEffectivenessTable,object
	.size	 sTypeEffectivenessTable,722
sTypeEffectivenessTable:
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x0
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x0
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x800
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x0
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x0
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x800
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x0
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x800
	.short	0x2000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x0
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x0
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x0
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x2000
	.short	0x1000
	.align	1, 0
	.type	 sInverseTypeEffectivenessTable,object
	.size	 sInverseTypeEffectivenessTable,722
sInverseTypeEffectivenessTable:
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x2000
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x2000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x2000
	.short	0x800
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x2000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x2000
	.short	0x1000
	.short	0x800
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x2000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x1000
	.short	0x800
	.short	0x800
	.short	0x1000
.text
	.align	2, 0
	.globl	GetBattlerForBattleScript
	.type	 GetBattlerForBattleScript,function
	.thumb_func
GetBattlerForBattleScript:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x0
	cmp	r1, #0xf
	bhi	.L320	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L341
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L342:
	.align	2, 0
.L341:
	.word	.L337
	.align	2, 0
	.align	2, 0
.L337:
	.word	.L321
	.word	.L322
	.word	.L323
	.word	.L326
	.word	.L332
	.word	.L327
	.word	.L332
	.word	.L324
	.word	.L332
	.word	.L332
	.word	.L325
	.word	.L332
	.word	.L333
	.word	.L334
	.word	.L335
	.word	.L336
.L321:
	ldr	r0, .L343
	b	.L339
.L344:
	.align	2, 0
.L343:
	.word	gBattlerTarget
.L322:
	ldr	r0, .L345
	b	.L339
.L346:
	.align	2, 0
.L345:
	.word	gBattlerAttacker
.L323:
	ldr	r0, .L347
	b	.L339
.L348:
	.align	2, 0
.L347:
	.word	gEffectBattler
.L324:
	mov	r0, #0x0
	b	.L320
.L325:
	ldr	r0, .L349
	ldrb	r0, [r0, #0x17]
	b	.L320
.L350:
	.align	2, 0
.L349:
	.word	gBattleScripting
.L326:
	ldr	r0, .L351
	b	.L339
.L352:
	.align	2, 0
.L351:
	.word	gBattlerFainted
.L327:
	ldr	r0, .L353
	b	.L339
.L354:
	.align	2, 0
.L353:
	.word	gBattlerFainted
.L332:
	mov	r0, #0x0
	b	.L340
.L333:
	mov	r0, #0x1
	b	.L340
.L334:
	mov	r0, #0x2
	b	.L340
.L335:
	mov	r0, #0x3
.L340:
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L320
.L336:
	ldr	r0, .L355
.L339:
	ldrb	r0, [r0]
.L320:
	pop	{r1}
	bx	r1
.L356:
	.align	2, 0
.L355:
	.word	gBattlerAbility
.Lfe15:
	.size	 GetBattlerForBattleScript,.Lfe15-GetBattlerForBattleScript
	.align	2, 0
	.globl	PressurePPLose
	.type	 PressurePPLose,function
	.thumb_func
PressurePPLose:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L369
	mov	r4, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x20]
	add	r6, r1, #0
	cmp	r0, #0x2e
	bne	.L357	@cond_branch
	mov	r3, #0x0
	mov	r0, r5
	mul	r0, r0, r4
	add	r1, r1, #0xc
	add	r1, r0, r1
	b	.L368
.L370:
	.align	2, 0
.L369:
	.word	gBattleMons
.L361:
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L360	@cond_branch
.L368:
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L361	@cond_branch
.L360:
	cmp	r3, #0x4
	beq	.L357	@cond_branch
	mov	r0, #0x5c
	mov	ip, r0
	mov	r2, ip
	mul	r2, r2, r5
	add	r0, r3, r2
	add	r7, r6, #0
	add	r7, r7, #0x25
	add	r1, r0, r7
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L366	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L366:
	add	r0, r6, #0
	add	r0, r0, #0x54
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L357	@cond_branch
	ldr	r1, .L371
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1a]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1c
	ldr	r2, .L371+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L357	@cond_branch
	ldr	r4, .L371+0x8
	strb	r5, [r4]
	add	r1, r3, #0
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r4]
	mov	r2, ip
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	add	r0, r0, r3
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L357:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L372:
	.align	2, 0
.L371:
	.word	gDisableStructs
	.word	gBitTable
	.word	gActiveBattler
.Lfe16:
	.size	 PressurePPLose,.Lfe16-PressurePPLose
	.align	2, 0
	.globl	PressurePPLoseOnUsingImprison
	.type	 PressurePPLoseOnUsingImprison,function
	.thumb_func
PressurePPLoseOnUsingImprison:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x4
	mov	r8, r0
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r4, #0x0
	ldr	r0, .L389
	ldrb	r0, [r0]
	cmp	r4, r0
	bge	.L375	@cond_branch
	ldr	r1, .L389+0x4
	mov	r0, #0x5c
	mov	r7, r5
	mul	r7, r7, r0
	add	r1, r1, #0xc
	mov	sl, r1
.L377:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r4, #0x1
	cmp	r9, r0
	beq	.L376	@cond_branch
	ldr	r0, .L389+0x4
	mov	r3, #0x5c
	mov	r1, r4
	mul	r1, r1, r3
	add	r1, r1, r0
	ldrh	r1, [r1, #0x20]
	add	r4, r0, #0
	cmp	r1, #0x2e
	bne	.L376	@cond_branch
	mov	r2, #0x0
	mov	r0, r5
	mul	r0, r0, r3
	add	r1, r4, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0x8f
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L380	@cond_branch
	add	r3, r1, #0
	mov	r0, sl
	add	r1, r7, r0
.L381:
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L380	@cond_branch
	ldrh	r0, [r1]
	cmp	r0, r3
	bne	.L381	@cond_branch
.L380:
	cmp	r2, #0x4
	beq	.L376	@cond_branch
	mov	r8, r2
	add	r1, r2, r7
	add	r0, r4, #0
	add	r0, r0, #0x25
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L376	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L376:
	add	r4, r6, #0
	ldr	r0, .L389
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L377	@cond_branch
.L375:
	mov	r1, r8
	cmp	r1, #0x4
	beq	.L388	@cond_branch
	ldr	r6, .L389+0x4
	mov	r3, #0x5c
	mov	r0, r5
	mul	r0, r0, r3
	add	r1, r6, #0
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L388	@cond_branch
	ldr	r1, .L389+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1a]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1c
	ldr	r2, .L389+0xc
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L388	@cond_branch
	ldr	r4, .L389+0x10
	strb	r5, [r4]
	mov	r1, r8
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r2, r6, #0
	add	r2, r2, #0x25
	add	r0, r0, r2
	add	r0, r0, r8
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L388:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L390:
	.align	2, 0
.L389:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBitTable
	.word	gActiveBattler
.Lfe17:
	.size	 PressurePPLoseOnUsingImprison,.Lfe17-PressurePPLoseOnUsingImprison
	.align	2, 0
	.globl	PressurePPLoseOnUsingPerishSong
	.type	 PressurePPLoseOnUsingPerishSong,function
	.thumb_func
PressurePPLoseOnUsingPerishSong:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r6, #0x4
	mov	r1, #0x0
	ldr	r0, .L407
	mov	r8, r0
	ldrb	r0, [r0]
	cmp	r1, r0
	bge	.L393	@cond_branch
	ldr	r7, .L407+0x4
	mov	r2, #0x5c
	mov	ip, r2
	mov	r5, ip
	mul	r5, r5, r3
	add	r0, r7, #0
	add	r0, r0, #0xc
	add	r2, r5, r0
	mov	sl, r2
	mov	r9, r5
.L395:
	mov	r0, ip
	mul	r0, r0, r1
	add	r0, r0, r7
	ldrh	r0, [r0, #0x20]
	add	r4, r1, #0x1
	cmp	r0, #0x2e
	bne	.L394	@cond_branch
	cmp	r1, r3
	beq	.L394	@cond_branch
	mov	r2, #0x0
	mov	r1, sl
	ldrh	r0, [r1]
	cmp	r0, #0xc3
	beq	.L398	@cond_branch
	ldr	r1, .L407+0x8
	add	r1, r1, r9
.L399:
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L398	@cond_branch
	ldrh	r0, [r1]
	cmp	r0, #0xc3
	bne	.L399	@cond_branch
.L398:
	cmp	r2, #0x4
	beq	.L394	@cond_branch
	add	r6, r2, #0
	add	r0, r6, r5
	ldr	r2, .L407+0xc
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L394	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L394:
	add	r1, r4, #0
	mov	r0, r8
	ldrb	r0, [r0]
	cmp	r1, r0
	blt	.L395	@cond_branch
.L393:
	cmp	r6, #0x4
	beq	.L406	@cond_branch
	ldr	r7, .L407+0x4
	mov	r5, #0x5c
	mov	r0, r3
	mul	r0, r0, r5
	add	r1, r7, #0
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L406	@cond_branch
	ldr	r1, .L407+0x10
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1a]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1c
	ldr	r2, .L407+0x14
	lsl	r0, r6, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L406	@cond_branch
	ldr	r4, .L407+0x18
	strb	r3, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r2, r7, #0
	add	r2, r2, #0x25
	add	r0, r0, r2
	add	r0, r0, r6
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L406:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L408:
	.align	2, 0
.L407:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gBattleMons+0xc
	.word	gBattleMons+0x25
	.word	gDisableStructs
	.word	gBitTable
	.word	gActiveBattler
.Lfe18:
	.size	 PressurePPLoseOnUsingPerishSong,.Lfe18-PressurePPLoseOnUsingPerishSong
	.align	2, 0
	.globl	MarkAllBattlersForControllerExec
	.type	 MarkAllBattlersForControllerExec,function
	.thumb_func
MarkAllBattlersForControllerExec:
	push	{r4, r5, lr}
	ldr	r0, .L422
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L410	@cond_branch
	mov	r2, #0x0
	ldr	r4, .L422+0x4
	ldrb	r0, [r4]
	cmp	r2, r0
	bge	.L416	@cond_branch
	ldr	r3, .L422+0x8
	ldr	r5, .L422+0xc
.L414:
	ldmia	r5!, {r1}
	lsl	r1, r1, #0x1c
	ldr	r0, [r3]
	orr	r0, r0, r1
	str	r0, [r3]
	add	r2, r2, #0x1
	ldrb	r0, [r4]
	cmp	r2, r0
	blt	.L414	@cond_branch
	b	.L416
.L423:
	.align	2, 0
.L422:
	.word	gBattleTypeFlags
	.word	gBattlersCount
	.word	gBattleControllerExecFlags
	.word	gBitTable
.L410:
	mov	r2, #0x0
	ldr	r4, .L424
	ldrb	r0, [r4]
	cmp	r2, r0
	bge	.L416	@cond_branch
	ldr	r3, .L424+0x4
	ldr	r5, .L424+0x8
.L420:
	ldr	r0, [r3]
	ldmia	r5!, {r1}
	orr	r0, r0, r1
	str	r0, [r3]
	add	r2, r2, #0x1
	ldrb	r0, [r4]
	cmp	r2, r0
	blt	.L420	@cond_branch
.L416:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L425:
	.align	2, 0
.L424:
	.word	gBattlersCount
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe19:
	.size	 MarkAllBattlersForControllerExec,.Lfe19-MarkAllBattlersForControllerExec
	.align	2, 0
	.globl	IsBattlerMarkedForControllerExec
	.type	 IsBattlerMarkedForControllerExec,function
	.thumb_func
IsBattlerMarkedForControllerExec:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L433
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L427	@cond_branch
	ldr	r2, .L433+0x4
	ldr	r1, .L433+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0x1c
	ldr	r2, [r2]
	b	.L432
.L434:
	.align	2, 0
.L433:
	.word	gBattleTypeFlags
	.word	gBattleControllerExecFlags
	.word	gBitTable
.L427:
	ldr	r2, .L435
	ldr	r1, .L435+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r2, [r2]
	ldr	r0, [r0]
.L432:
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L430	@cond_branch
	mov	r2, #0x1
.L430:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L436:
	.align	2, 0
.L435:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe20:
	.size	 IsBattlerMarkedForControllerExec,.Lfe20-IsBattlerMarkedForControllerExec
	.align	2, 0
	.globl	MarkBattlerForControllerExec
	.type	 MarkBattlerForControllerExec,function
	.thumb_func
MarkBattlerForControllerExec:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L440
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L438	@cond_branch
	ldr	r2, .L440+0x4
	ldr	r1, .L440+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L439
.L441:
	.align	2, 0
.L440:
	.word	gBattleTypeFlags
	.word	gBattleControllerExecFlags
	.word	gBitTable
.L438:
	ldr	r2, .L442
	ldr	r1, .L442+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	orr	r1, r1, r0
	str	r1, [r2]
.L439:
	pop	{r0}
	bx	r0
.L443:
	.align	2, 0
.L442:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe21:
	.size	 MarkBattlerForControllerExec,.Lfe21-MarkBattlerForControllerExec
	.align	2, 0
	.globl	sub_803F850
	.type	 sub_803F850,function
	.thumb_func
sub_803F850:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0x0
	ldr	r5, .L450
	ldr	r1, .L450+0x4
	lsl	r0, r7, #0x2
	add	r6, r0, r1
	b	.L445
.L451:
	.align	2, 0
.L450:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.L448:
	lsl	r0, r4, #0x2
	ldr	r1, [r6]
	lsl	r1, r1, r0
	ldr	r0, [r5]
	orr	r0, r0, r1
	str	r0, [r5]
	add	r4, r4, #0x1
.L445:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	blt	.L448	@cond_branch
	ldr	r2, .L452
	mov	r1, #0x80
	lsl	r1, r1, #0x15
	lsl	r1, r1, r7
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L453:
	.align	2, 0
.L452:
	.word	gBattleControllerExecFlags
.Lfe22:
	.size	 sub_803F850,.Lfe22-sub_803F850
	.align	2, 0
	.globl	CancelMultiTurnMoves
	.type	 CancelMultiTurnMoves,function
	.thumb_func
CancelMultiTurnMoves:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L455
	mov	r2, #0x5c
	mov	r3, r0
	mul	r3, r3, r2
	add	r1, r1, #0x54
	add	r3, r3, r1
	ldr	r1, [r3]
	ldr	r2, .L455+0x4
	and	r1, r1, r2
	ldr	r2, .L455+0x8
	and	r1, r1, r2
	mov	r2, #0x71
	neg	r2, r2
	and	r1, r1, r2
	ldr	r2, .L455+0xc
	and	r1, r1, r2
	str	r1, [r3]
	ldr	r4, .L455+0x10
	lsl	r2, r0, #0x2
	add	r4, r2, r4
	ldr	r1, [r4]
	ldr	r3, .L455+0x14
	and	r1, r1, r3
	str	r1, [r4]
	ldr	r1, .L455+0x18
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	ldrb	r1, [r2, #0x14]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x14]
	mov	r0, #0x0
	strb	r0, [r2, #0x13]
	pop	{r4}
	pop	{r0}
	bx	r0
.L456:
	.align	2, 0
.L455:
	.word	gBattleMons
	.word	-0x1001
	.word	-0xc01
	.word	-0x301
	.word	gStatuses3
	.word	-0x10400c1
	.word	gDisableStructs
.Lfe23:
	.size	 CancelMultiTurnMoves,.Lfe23-CancelMultiTurnMoves
	.align	2, 0
	.globl	WasUnableToUseMove
	.type	 WasUnableToUseMove,function
	.thumb_func
WasUnableToUseMove:
	push	{lr}
	lsl	r0, r0, #0x18
	ldr	r1, .L462
	lsr	r0, r0, #0x14
	add	r2, r0, r1
	ldrb	r3, [r2, #0x1]
	lsl	r0, r3, #0x1e
	cmp	r0, #0
	blt	.L459	@cond_branch
	lsl	r0, r3, #0x1c
	cmp	r0, #0
	blt	.L459	@cond_branch
	lsr	r0, r3, #0x7
	cmp	r0, #0
	bne	.L459	@cond_branch
	ldrb	r1, [r2, #0x2]
	lsl	r0, r1, #0x1f
	cmp	r0, #0
	bne	.L459	@cond_branch
	lsl	r0, r1, #0x1e
	cmp	r0, #0
	blt	.L459	@cond_branch
	lsl	r0, r1, #0x1d
	cmp	r0, #0
	blt	.L459	@cond_branch
	ldrb	r2, [r2, #0x3]
	lsl	r0, r2, #0x1e
	cmp	r0, #0
	blt	.L459	@cond_branch
	lsl	r0, r2, #0x1f
	cmp	r0, #0
	bne	.L459	@cond_branch
	lsl	r0, r1, #0x1c
	cmp	r0, #0
	blt	.L459	@cond_branch
	lsl	r0, r1, #0x1b
	cmp	r0, #0
	blt	.L459	@cond_branch
	lsl	r0, r3, #0x1d
	cmp	r0, #0
	blt	.L459	@cond_branch
	lsl	r0, r2, #0x1d
	cmp	r0, #0
	blt	.L459	@cond_branch
	lsl	r0, r2, #0x1c
	cmp	r0, #0
	bge	.L458	@cond_branch
.L459:
	mov	r0, #0x1
	b	.L461
.L463:
	.align	2, 0
.L462:
	.word	gProtectStructs
.L458:
	mov	r0, #0x0
.L461:
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 WasUnableToUseMove,.Lfe24-WasUnableToUseMove
	.align	2, 0
	.globl	PrepareStringBattle
	.type	 PrepareStringBattle,function
	.thumb_func
PrepareStringBattle:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	cmp	r5, #0x3e
	bne	.L465	@cond_branch
	ldr	r0, .L480
	ldrb	r1, [r0, #0x1a]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L465	@cond_branch
	mov	r5, #0x3d
	b	.L466
.L481:
	.align	2, 0
.L480:
	.word	gBattleScripting
.L465:
	cmp	r5, #0x3d
	bne	.L467	@cond_branch
	ldr	r0, .L482
	ldrb	r1, [r0, #0x1a]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L467	@cond_branch
	mov	r5, #0x3e
	b	.L466
.L483:
	.align	2, 0
.L482:
	.word	gBattleScripting
.L467:
	ldr	r0, .L484
	cmp	r5, r0
	bne	.L469	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerAbility
	cmp	r0, #0x7e
	bne	.L469	@cond_branch
	mov	r5, #0x19
	b	.L466
.L485:
	.align	2, 0
.L484:
	.word	0x15d
.L469:
	cmp	r5, #0x19
	bne	.L471	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerAbility
	cmp	r0, #0x7e
	bne	.L471	@cond_branch
	ldr	r5, .L486
	b	.L466
.L487:
	.align	2, 0
.L486:
	.word	0x15d
.L471:
	cmp	r5, #0xd8
	beq	.L474	@cond_branch
	cmp	r5, #0xcd
	bne	.L466	@cond_branch
.L474:
	ldr	r4, .L488
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x80
	bne	.L476	@cond_branch
	ldr	r2, .L488+0x4
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0, #0x19]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	bne	.L475	@cond_branch
.L476:
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0xac
	bne	.L466	@cond_branch
	ldr	r2, .L488+0x4
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1c]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	beq	.L466	@cond_branch
.L475:
	ldr	r1, .L488+0x8
	ldr	r4, .L488
	ldrb	r2, [r4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x2
	ldrb	r3, [r0, #0x16]
	add	r0, r2, #0
	eor	r0, r0, r1
	cmp	r3, r0
	beq	.L466	@cond_branch
	cmp	r3, r2
	beq	.L466	@cond_branch
	ldr	r0, .L488+0xc
	strb	r2, [r0]
	bl	BattleScriptPushCursor
	ldr	r1, .L488+0x10
	ldr	r0, .L488+0x14
	str	r0, [r1]
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x80
	bne	.L477	@cond_branch
	ldr	r1, .L488+0x18
	mov	r0, #0x11
	b	.L479
.L489:
	.align	2, 0
.L488:
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gSpecialStatuses
	.word	gBattlerAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DefiantActivates
	.word	gBattleScripting
.L477:
	ldr	r1, .L490
	mov	r0, #0x14
.L479:
	strb	r0, [r1, #0x1a]
.L466:
	ldr	r4, .L490+0x4
	strb	r6, [r4]
	mov	r0, #0x0
	add	r1, r5, #0
	bl	BtlController_EmitPrintString
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L491:
	.align	2, 0
.L490:
	.word	gBattleScripting
	.word	gActiveBattler
.Lfe25:
	.size	 PrepareStringBattle,.Lfe25-PrepareStringBattle
	.align	2, 0
	.globl	ResetSentPokesToOpponentValue
	.type	 ResetSentPokesToOpponentValue,function
	.thumb_func
ResetSentPokesToOpponentValue:
	push	{r4, r5, r6, lr}
	mov	r3, #0x0
	ldr	r0, .L503
	strb	r3, [r0]
	strb	r3, [r0, #0x1]
	mov	r1, #0x0
	ldr	r0, .L503+0x4
	ldrb	r2, [r0]
	add	r6, r0, #0
	cmp	r1, r2
	bge	.L494	@cond_branch
	ldr	r5, .L503+0x8
	add	r4, r2, #0
	ldr	r2, .L503+0xc
.L496:
	ldrh	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	orr	r3, r3, r0
	add	r2, r2, #0x4
	add	r1, r1, #0x2
	cmp	r1, r4
	blt	.L496	@cond_branch
.L494:
	mov	r1, #0x1
	add	r2, r6, #0
	ldrb	r0, [r2]
	cmp	r1, r0
	bge	.L499	@cond_branch
	ldr	r5, .L503
	mov	r4, #0x2
.L501:
	add	r0, r1, #0
	and	r0, r0, r4
	asr	r0, r0, #0x1
	add	r0, r0, r5
	strb	r3, [r0]
	add	r1, r1, #0x2
	ldrb	r0, [r2]
	cmp	r1, r0
	blt	.L501	@cond_branch
.L499:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L504:
	.align	2, 0
.L503:
	.word	gSentPokesToOpponent
	.word	gBattlersCount
	.word	gBitTable
	.word	gBattlerPartyIndexes
.Lfe26:
	.size	 ResetSentPokesToOpponentValue,.Lfe26-ResetSentPokesToOpponentValue
	.align	2, 0
	.globl	OpponentSwitchInResetSentPokesToOpponentValue
	.type	 OpponentSwitchInResetSentPokesToOpponentValue,function
	.thumb_func
OpponentSwitchInResetSentPokesToOpponentValue:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L506	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	mov	ip, r0
	ldr	r1, .L513
	add	r0, r0, r1
	strb	r4, [r0]
	add	r5, r4, #0
	ldr	r0, .L513+0x4
	ldrb	r2, [r0]
	mov	r8, r1
	cmp	r4, r2
	bge	.L508	@cond_branch
	ldr	r0, .L513+0x8
	ldrb	r7, [r0]
	ldr	r1, .L513+0xc
	add	r6, r2, #0
	ldr	r3, .L513+0x10
	add	r2, r1, #0
.L510:
	ldr	r0, [r2]
	and	r0, r0, r7
	cmp	r0, #0
	bne	.L509	@cond_branch
	ldrh	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	orr	r4, r4, r0
.L509:
	add	r3, r3, #0x4
	add	r2, r2, #0x8
	add	r5, r5, #0x2
	cmp	r5, r6
	blt	.L510	@cond_branch
.L508:
	mov	r0, ip
	add	r0, r0, r8
	strb	r4, [r0]
.L506:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L514:
	.align	2, 0
.L513:
	.word	gSentPokesToOpponent
	.word	gBattlersCount
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlerPartyIndexes
.Lfe27:
	.size	 OpponentSwitchInResetSentPokesToOpponentValue,.Lfe27-OpponentSwitchInResetSentPokesToOpponentValue
	.align	2, 0
	.globl	UpdateSentPokesToOpponentValue
	.type	 UpdateSentPokesToOpponentValue,function
	.thumb_func
UpdateSentPokesToOpponentValue:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L516	@cond_branch
	add	r0, r4, #0
	bl	OpponentSwitchInResetSentPokesToOpponentValue
	b	.L517
.L516:
	mov	r3, #0x1
	ldr	r5, .L523
	ldrb	r0, [r5]
	cmp	r3, r0
	bge	.L517	@cond_branch
	ldr	r0, .L523+0x4
	mov	ip, r0
	mov	r7, #0x2
	ldr	r6, .L523+0x8
	ldr	r1, .L523+0xc
	lsl	r0, r4, #0x1
	add	r4, r0, r1
.L521:
	add	r2, r3, #0
	and	r2, r2, r7
	asr	r2, r2, #0x1
	add	r2, r2, ip
	ldrh	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r3, r3, #0x1
	ldrb	r0, [r5]
	cmp	r3, r0
	blt	.L521	@cond_branch
.L517:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L524:
	.align	2, 0
.L523:
	.word	gBattlersCount
	.word	gSentPokesToOpponent
	.word	gBitTable
	.word	gBattlerPartyIndexes
.Lfe28:
	.size	 UpdateSentPokesToOpponentValue,.Lfe28-UpdateSentPokesToOpponentValue
	.align	2, 0
	.globl	BattleScriptPush
	.type	 BattleScriptPush,function
	.thumb_func
BattleScriptPush:
	push	{r4, lr}
	ldr	r1, .L526
	ldr	r1, [r1]
	ldr	r3, [r1, #0x8]
	add	r4, r3, #0
	add	r4, r4, #0x20
	ldrb	r1, [r4]
	add	r2, r1, #0x1
	strb	r2, [r4]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x16
	add	r3, r3, r1
	str	r0, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L527:
	.align	2, 0
.L526:
	.word	gBattleResources
.Lfe29:
	.size	 BattleScriptPush,.Lfe29-BattleScriptPush
	.align	2, 0
	.globl	BattleScriptPushCursor
	.type	 BattleScriptPushCursor,function
	.thumb_func
BattleScriptPushCursor:
	ldr	r0, .L529
	ldr	r0, [r0]
	ldr	r2, [r0, #0x8]
	add	r3, r2, #0
	add	r3, r3, #0x20
	ldrb	r0, [r3]
	add	r1, r0, #0x1
	strb	r1, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r2, r2, r0
	ldr	r0, .L529+0x4
	ldr	r0, [r0]
	str	r0, [r2]
	bx	lr
.L530:
	.align	2, 0
.L529:
	.word	gBattleResources
	.word	gBattlescriptCurrInstr
.Lfe30:
	.size	 BattleScriptPushCursor,.Lfe30-BattleScriptPushCursor
	.align	2, 0
	.globl	BattleScriptPop
	.type	 BattleScriptPop,function
	.thumb_func
BattleScriptPop:
	ldr	r3, .L532
	ldr	r0, .L532+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x8]
	add	r2, r1, #0
	add	r2, r2, #0x20
	ldrb	r0, [r2]
	sub	r0, r0, #0x1
	strb	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r3]
	bx	lr
.L533:
	.align	2, 0
.L532:
	.word	gBattlescriptCurrInstr
	.word	gBattleResources
.Lfe31:
	.size	 BattleScriptPop,.Lfe31-BattleScriptPop
	.align	2, 0
	.type	 IsGravityPreventingMove,function
	.thumb_func
IsGravityPreventingMove:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L553
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L547	@cond_branch
	mov	r0, #0xaa
	lsl	r0, r0, #0x1
	cmp	r2, r0
	beq	.L546	@cond_branch
	cmp	r2, r0
	bhi	.L549	@cond_branch
	cmp	r2, #0x1a
	beq	.L546	@cond_branch
	cmp	r2, #0x1a
	bhi	.L550	@cond_branch
	cmp	r2, #0x13
	beq	.L546	@cond_branch
	b	.L547
.L554:
	.align	2, 0
.L553:
	.word	gFieldStatuses
.L550:
	cmp	r2, #0x88
	beq	.L546	@cond_branch
	cmp	r2, #0x96
	beq	.L546	@cond_branch
	b	.L547
.L549:
	ldr	r0, .L555
	cmp	r2, r0
	beq	.L546	@cond_branch
	cmp	r2, r0
	bhi	.L551	@cond_branch
	sub	r0, r0, #0x72
	cmp	r2, r0
	beq	.L546	@cond_branch
	add	r0, r0, #0x54
	cmp	r2, r0
	beq	.L546	@cond_branch
	b	.L547
.L556:
	.align	2, 0
.L555:
	.word	0x1fb
.L551:
	mov	r0, #0x8c
	lsl	r0, r0, #0x2
	cmp	r2, r0
	beq	.L546	@cond_branch
	add	r0, r0, #0x76
	cmp	r2, r0
	bne	.L547	@cond_branch
.L546:
	mov	r0, #0x1
	b	.L552
.L547:
	mov	r0, #0x0
.L552:
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 IsGravityPreventingMove,.Lfe32-IsGravityPreventingMove
	.align	2, 0
	.type	 IsHealBlockPreventingMove,function
	.thumb_func
IsHealBlockPreventingMove:
	push	{lr}
	add	r2, r1, #0
	ldr	r1, .L575
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L569	@cond_branch
	ldr	r1, .L575+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0x6e
	beq	.L568	@cond_branch
	cmp	r0, #0x6e
	bgt	.L571	@cond_branch
	cmp	r0, #0x8
	beq	.L568	@cond_branch
	cmp	r0, #0x8
	bgt	.L572	@cond_branch
	cmp	r0, #0x3
	beq	.L568	@cond_branch
	b	.L569
.L576:
	.align	2, 0
.L575:
	.word	gStatuses3
	.word	gBattleMoves
.L572:
	cmp	r0, #0x20
	beq	.L568	@cond_branch
	cmp	r0, #0x25
	beq	.L568	@cond_branch
	b	.L569
.L571:
	cmp	r0, #0x86
	beq	.L568	@cond_branch
	cmp	r0, #0x86
	bgt	.L573	@cond_branch
	cmp	r0, #0x84
	beq	.L568	@cond_branch
	b	.L569
.L573:
	cmp	r0, #0xb3
	beq	.L568	@cond_branch
	cmp	r0, #0xed
	bne	.L569	@cond_branch
.L568:
	mov	r0, #0x1
	b	.L574
.L569:
	mov	r0, #0x0
.L574:
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 IsHealBlockPreventingMove,.Lfe33-IsHealBlockPreventingMove
	.align	2, 0
	.type	 IsBelchPreventingMove,function
	.thumb_func
IsBelchPreventingMove:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r2, .L581
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0]
	ldr	r0, .L581+0x4
	cmp	r1, r0
	beq	.L578	@cond_branch
	mov	r0, #0x0
	b	.L580
.L582:
	.align	2, 0
.L581:
	.word	gBattleMoves
	.word	0x145
.L578:
	mov	r5, #0x0
	ldr	r0, .L583
	ldr	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r4
	ldr	r2, .L583+0x4
	add	r1, r1, r2
	add	r1, r1, r0
	ldrb	r2, [r1]
	ldr	r3, .L583+0x8
	ldr	r1, .L583+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L579	@cond_branch
	mov	r5, #0x1
.L579:
	add	r0, r5, #0
.L580:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L584:
	.align	2, 0
.L583:
	.word	gBattleStruct
	.word	0x2b6
	.word	gBitTable
	.word	gBattlerPartyIndexes
.Lfe34:
	.size	 IsBelchPreventingMove,.Lfe34-IsBelchPreventingMove
	.align	2, 0
	.globl	TrySetCantSelectMoveBattleScript
	.type	 TrySetCantSelectMoveBattleScript,function
	.thumb_func
TrySetCantSelectMoveBattleScript:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	ldr	r0, .L623
	ldr	r1, [r0]
	ldr	r5, .L623+0x4
	ldrb	r0, [r5]
	lsl	r2, r0, #0x9
	ldr	r3, .L623+0x8
	add	r1, r1, r3
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r2, #0x7f
	mov	r8, r2
	mov	r3, r8
	and	r3, r3, r1
	mov	r8, r3
	ldr	r3, .L623+0xc
	mov	r2, r8
	lsl	r1, r2, #0x1
	mov	r2, #0x5c
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r3, r3, #0xc
	add	r1, r1, r3
	ldrh	r4, [r1]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	add	r7, r0, #0
	ldr	r1, .L623+0x10
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, #0xc4
	ldr	r1, [r1]
	add	r1, r1, r0
	mov	r9, r1
	ldr	r1, .L623+0x14
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
	cmp	r0, r4
	bne	.L586	@cond_branch
	cmp	r4, #0
	beq	.L586	@cond_branch
	ldr	r0, .L623+0x18
	strb	r2, [r0, #0x17]
	ldr	r0, .L623+0x1c
	strh	r4, [r0]
	ldr	r0, .L623+0x20
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L587	@cond_branch
	ldr	r1, .L623+0x24
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L623+0x28
	str	r1, [r0]
	ldr	r0, .L623+0x2c
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	b	.L586
.L624:
	.align	2, 0
.L623:
	.word	gBattleResources
	.word	gActiveBattler
	.word	0x822
	.word	gBattleMons
	.word	gBattleStruct
	.word	gDisableStructs
	.word	gBattleScripting
	.word	gCurrentMove
	.word	gBattleTypeFlags
	.word	gPalaceSelectionBattleScripts
	.word	BattleScript_SelectingDisabledMoveInPalace
	.word	gProtectStructs
.L587:
	ldr	r0, .L625
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L625+0x4
	str	r0, [r1]
	mov	r6, #0x1
.L586:
	ldr	r2, .L625+0x8
	ldr	r1, .L625+0xc
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	add	r5, r1, #0
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L589	@cond_branch
	cmp	r4, #0xa5
	beq	.L589	@cond_branch
	ldr	r1, .L625+0x10
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	bge	.L589	@cond_branch
	add	r0, r3, #0
	bl	CancelMultiTurnMoves
	ldr	r0, .L625+0x14
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L590	@cond_branch
	ldr	r1, .L625+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L625+0x1c
	str	r1, [r0]
	ldr	r0, .L625+0x20
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	b	.L589
.L626:
	.align	2, 0
.L625:
	.word	gSelectionBattleScripts
	.word	BattleScript_SelectingDisabledMove
	.word	gLastMoves
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	gPalaceSelectionBattleScripts
	.word	BattleScript_SelectingTormentedMoveInPalace
	.word	gProtectStructs
.L590:
	ldr	r0, .L627
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L627+0x4
	str	r0, [r1]
	add	r6, r6, #0x1
.L589:
	ldr	r2, .L627+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x16]
	lsl	r0, r0, #0x1c
	add	r3, r2, #0
	cmp	r0, #0
	beq	.L592	@cond_branch
	ldr	r0, .L627+0xc
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L592	@cond_branch
	ldr	r0, .L627+0x10
	strh	r4, [r0]
	ldr	r0, .L627+0x14
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L593	@cond_branch
	ldr	r1, .L627+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L627+0x1c
	str	r1, [r0]
	ldr	r0, .L627+0x20
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	b	.L592
.L628:
	.align	2, 0
.L627:
	.word	gSelectionBattleScripts
	.word	BattleScript_SelectingTormentedMove
	.word	gDisableStructs
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleTypeFlags
	.word	gPalaceSelectionBattleScripts
	.word	BattleScript_SelectingNotAllowedMoveTauntInPalace
	.word	gProtectStructs
.L593:
	ldr	r0, .L629
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L629+0x4
	str	r0, [r1]
	add	r6, r6, #0x1
.L592:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	add	r1, r1, #0x23
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L595	@cond_branch
	ldr	r1, .L629+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L595	@cond_branch
	ldr	r0, .L629+0xc
	strh	r4, [r0]
	ldr	r0, .L629+0x10
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L596	@cond_branch
	ldr	r1, .L629+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L629+0x18
	str	r1, [r0]
	ldr	r0, .L629+0x1c
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	b	.L595
.L630:
	.align	2, 0
.L629:
	.word	gSelectionBattleScripts
	.word	BattleScript_SelectingNotAllowedMoveTaunt
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleTypeFlags
	.word	gPalaceSelectionBattleScripts
	.word	BattleScript_SelectingNotAllowedMoveThroatChopInPalace
	.word	gProtectStructs
.L596:
	ldr	r0, .L631
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L631+0x4
	str	r0, [r1]
	add	r6, r6, #0x1
.L595:
	ldr	r5, .L631+0x8
	ldrb	r0, [r5]
	add	r1, r4, #0
	bl	GetImprisonedMovesCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L598	@cond_branch
	ldr	r0, .L631+0xc
	strh	r4, [r0]
	ldr	r0, .L631+0x10
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L599	@cond_branch
	ldr	r1, .L631+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L631+0x18
	str	r1, [r0]
	ldr	r0, .L631+0x1c
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	b	.L598
.L632:
	.align	2, 0
.L631:
	.word	gSelectionBattleScripts
	.word	BattleScript_SelectingNotAllowedMoveThroatChop
	.word	gActiveBattler
	.word	gCurrentMove
	.word	gBattleTypeFlags
	.word	gPalaceSelectionBattleScripts
	.word	BattleScript_SelectingImprisonedMoveInPalace
	.word	gProtectStructs
.L599:
	ldr	r0, .L633
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L633+0x4
	str	r0, [r1]
	add	r6, r6, #0x1
.L598:
	add	r0, r4, #0
	bl	IsGravityPreventingMove
	cmp	r0, #0
	beq	.L601	@cond_branch
	ldr	r0, .L633+0x8
	strh	r4, [r0]
	ldr	r0, .L633+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L602	@cond_branch
	ldr	r1, .L633+0x10
	ldr	r2, .L633+0x14
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L633+0x18
	str	r1, [r0]
	ldr	r0, .L633+0x1c
	ldrb	r1, [r2]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	b	.L601
.L634:
	.align	2, 0
.L633:
	.word	gSelectionBattleScripts
	.word	BattleScript_SelectingImprisonedMove
	.word	gCurrentMove
	.word	gBattleTypeFlags
	.word	gPalaceSelectionBattleScripts
	.word	gActiveBattler
	.word	BattleScript_SelectingNotAllowedMoveGravityInPalace
	.word	gProtectStructs
.L602:
	ldr	r1, .L635
	ldr	r0, .L635+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L635+0x8
	str	r1, [r0]
	add	r6, r6, #0x1
.L601:
	ldr	r5, .L635+0x4
	ldrb	r0, [r5]
	add	r1, r4, #0
	bl	IsHealBlockPreventingMove
	cmp	r0, #0
	beq	.L604	@cond_branch
	ldr	r0, .L635+0xc
	strh	r4, [r0]
	ldr	r0, .L635+0x10
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L605	@cond_branch
	ldr	r1, .L635+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L635+0x18
	str	r1, [r0]
	ldr	r0, .L635+0x1c
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	b	.L604
.L636:
	.align	2, 0
.L635:
	.word	gSelectionBattleScripts
	.word	gActiveBattler
	.word	BattleScript_SelectingNotAllowedMoveGravity
	.word	gCurrentMove
	.word	gBattleTypeFlags
	.word	gPalaceSelectionBattleScripts
	.word	BattleScript_SelectingNotAllowedMoveHealBlockInPalace
	.word	gProtectStructs
.L605:
	ldr	r0, .L637
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L637+0x4
	str	r0, [r1]
	add	r6, r6, #0x1
.L604:
	ldr	r5, .L637+0x8
	ldrb	r0, [r5]
	add	r1, r4, #0
	bl	IsBelchPreventingMove
	cmp	r0, #0
	beq	.L607	@cond_branch
	ldr	r0, .L637+0xc
	strh	r4, [r0]
	ldr	r0, .L637+0x10
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L608	@cond_branch
	ldr	r1, .L637+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L637+0x18
	str	r1, [r0]
	ldr	r0, .L637+0x1c
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	b	.L607
.L638:
	.align	2, 0
.L637:
	.word	gSelectionBattleScripts
	.word	BattleScript_SelectingNotAllowedMoveHealBlock
	.word	gActiveBattler
	.word	gCurrentMove
	.word	gBattleTypeFlags
	.word	gPalaceSelectionBattleScripts
	.word	BattleScript_SelectingNotAllowedBelchInPalace
	.word	gProtectStructs
.L608:
	ldr	r0, .L639
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L639+0x4
	str	r0, [r1]
	add	r6, r6, #0x1
.L607:
	ldr	r2, .L639+0x8
	ldr	r1, .L639+0xc
	ldrb	r0, [r1]
	strb	r0, [r2]
	add	r5, r1, #0
	cmp	r7, #0x1d
	beq	.L611	@cond_branch
	cmp	r7, #0x43
	beq	.L611	@cond_branch
	cmp	r7, #0x44
	bne	.L610	@cond_branch
.L611:
	mov	r3, r9
	ldrh	r1, [r3]
	cmp	r1, #0
	beq	.L610	@cond_branch
	ldr	r0, .L639+0x10
	cmp	r1, r0
	beq	.L610	@cond_branch
	cmp	r1, r4
	beq	.L610	@cond_branch
	ldr	r0, .L639+0x14
	strh	r1, [r0]
	ldr	r2, .L639+0x18
	ldr	r3, .L639+0x1c
	ldrb	r1, [r5]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x30]
	strh	r0, [r2]
	ldr	r0, .L639+0x20
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L621	@cond_branch
	ldr	r0, .L639
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L639+0x24
	b	.L622
.L640:
	.align	2, 0
.L639:
	.word	gSelectionBattleScripts
	.word	BattleScript_SelectingNotAllowedBelch
	.word	gPotentialItemEffectBattler
	.word	gActiveBattler
	.word	0xffff
	.word	gCurrentMove
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	BattleScript_SelectingNotAllowedMoveChoiceItem
.L610:
	ldr	r3, .L641
	cmp	r7, #0x75
	bne	.L614	@cond_branch
	ldr	r0, .L641+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L614	@cond_branch
	ldr	r0, .L641+0x8
	strh	r4, [r0]
	ldr	r2, .L641+0xc
	ldrb	r1, [r5]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x30]
	strh	r0, [r2]
	ldr	r0, .L641+0x10
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L616	@cond_branch
.L621:
	ldr	r0, .L641+0x14
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	b	.L614
.L642:
	.align	2, 0
.L641:
	.word	gBattleMons
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gLastUsedItem
	.word	gBattleTypeFlags
	.word	gProtectStructs
.L616:
	ldr	r0, .L643
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L643+0x4
.L622:
	str	r0, [r1]
	add	r6, r6, #0x1
.L614:
	ldrb	r2, [r5]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r8
	add	r1, r3, #0
	add	r1, r1, #0x25
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L618	@cond_branch
	ldr	r0, .L643+0x8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L619	@cond_branch
	ldr	r0, .L643+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	b	.L618
.L644:
	.align	2, 0
.L643:
	.word	gSelectionBattleScripts
	.word	BattleScript_SelectingNotAllowedMoveAssaultVest
	.word	gBattleTypeFlags
	.word	gProtectStructs
.L619:
	ldr	r0, .L645
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r0, .L645+0x4
	str	r0, [r1]
	add	r6, r6, #0x1
.L618:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L646:
	.align	2, 0
.L645:
	.word	gSelectionBattleScripts
	.word	BattleScript_SelectingMoveWithNoPP
.Lfe35:
	.size	 TrySetCantSelectMoveBattleScript,.Lfe35-TrySetCantSelectMoveBattleScript
	.align	2, 0
	.globl	CheckMoveLimitations
	.type	 CheckMoveLimitations,function
	.thumb_func
CheckMoveLimitations:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	ldr	r1, .L680
	lsl	r0, r6, #0x1
	add	r0, r0, #0xc4
	ldr	r1, [r1]
	add	r1, r1, r0
	str	r1, [sp, #0x4]
	ldr	r0, .L680+0x4
	strb	r6, [r0]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r2, #0x5c
	mov	r1, r6
	mul	r1, r1, r2
	str	r1, [sp, #0xc]
	mov	r3, #0x0
	str	r3, [sp, #0x10]
	ldr	r0, .L680+0x8
	add	r5, r1, r0
	ldr	r7, .L680+0xc
.L651:
	ldrh	r0, [r5]
	ldr	r1, .L680+0x10
	mov	sl, r1
	cmp	r0, #0
	bne	.L652	@cond_branch
	mov	r0, #0x1
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	beq	.LCB5837
	b	.L679	@long jump
.LCB5837:
.L652:
	ldr	r3, [sp, #0x8]
	ldr	r1, [sp, #0xc]
	add	r0, r3, r1
	mov	r1, sl
	add	r1, r1, #0x25
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L654	@cond_branch
	mov	r0, #0x2
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	beq	.LCB5857
	b	.L679	@long jump
.LCB5857:
.L654:
	lsl	r0, r6, #0x2
	add	r1, r0, r6
	lsl	r1, r1, #0x3
	ldr	r3, .L680+0x14
	add	r1, r1, r3
	ldrh	r2, [r5]
	mov	ip, r3
	mov	r8, r0
	ldrh	r1, [r1, #0x4]
	cmp	r2, r1
	bne	.L656	@cond_branch
	mov	r0, #0x4
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5883
	b	.L679	@long jump
.LCB5883:
.L656:
	mov	r2, #0x5c
	mov	r3, r6
	mul	r3, r3, r2
	ldr	r0, [sp, #0x10]
	add	r1, r0, r3
	ldr	r2, .L680+0x8
	add	r1, r1, r2
	ldr	r2, .L680+0x18
	lsl	r0, r6, #0x1
	add	r0, r0, r2
	ldrh	r1, [r1]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L658	@cond_branch
	mov	r0, #0x8
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L658	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x54
	add	r0, r3, r0
	ldr	r0, [r0]
	cmp	r0, #0
	blt	.L679	@cond_branch
.L658:
	mov	r2, r8
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	ldrb	r0, [r0, #0x16]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L660	@cond_branch
	mov	r0, #0x10
	mov	r3, r9
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L660	@cond_branch
	ldr	r2, .L680+0x1c
	ldrh	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L679	@cond_branch
.L660:
	ldrh	r1, [r5]
	add	r0, r6, #0
	bl	GetImprisonedMovesCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L662	@cond_branch
	mov	r0, #0x20
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L679	@cond_branch
.L662:
	mov	r2, r8
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	ldr	r3, .L680+0x14
	add	r1, r0, r3
	ldrb	r0, [r1, #0x11]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L664	@cond_branch
	ldrh	r0, [r1, #0x6]
	ldrh	r1, [r5]
	cmp	r0, r1
	bne	.L679	@cond_branch
.L664:
	ldr	r2, [sp]
	cmp	r2, #0x1d
	beq	.L667	@cond_branch
	cmp	r2, #0x43
	beq	.L667	@cond_branch
	cmp	r2, #0x44
	bne	.L666	@cond_branch
.L667:
	ldr	r3, [sp, #0x4]
	ldrh	r1, [r3]
	cmp	r1, #0
	beq	.L666	@cond_branch
	ldr	r0, .L680+0x20
	cmp	r1, r0
	beq	.L666	@cond_branch
	ldrh	r0, [r5]
	cmp	r1, r0
	bne	.L679	@cond_branch
.L666:
	ldr	r1, [sp]
	cmp	r1, #0x75
	bne	.L669	@cond_branch
	ldr	r2, .L680+0x1c
	ldrh	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L679	@cond_branch
.L669:
	ldrh	r0, [r5]
	bl	IsGravityPreventingMove
	cmp	r0, #0
	bne	.L679	@cond_branch
	ldrh	r1, [r5]
	add	r0, r6, #0
	bl	IsHealBlockPreventingMove
	cmp	r0, #0
	bne	.L679	@cond_branch
	ldrh	r1, [r5]
	add	r0, r6, #0
	bl	IsBelchPreventingMove
	cmp	r0, #0
	bne	.L679	@cond_branch
	mov	r2, r8
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	ldr	r3, .L680+0x14
	add	r0, r0, r3
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L650	@cond_branch
	ldrh	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L680+0x24
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L650	@cond_branch
.L679:
	ldr	r0, [r7]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L650:
	add	r7, r7, #0x4
	ldr	r2, [sp, #0x10]
	add	r2, r2, #0x2
	str	r2, [sp, #0x10]
	add	r5, r5, #0x2
	ldr	r3, [sp, #0x8]
	add	r3, r3, #0x1
	str	r3, [sp, #0x8]
	cmp	r3, #0x3
	bgt	.LCB6105
	b	.L651	@long jump
.LCB6105:
	add	r0, r4, #0
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L681:
	.align	2, 0
.L680:
	.word	gBattleStruct
	.word	gPotentialItemEffectBattler
	.word	gBattleMons+0xc
	.word	gBitTable
	.word	gBattleMons
	.word	gDisableStructs
	.word	gLastMoves
	.word	gBattleMoves
	.word	0xffff
	.word	gBattleMoves+0xc
.Lfe36:
	.size	 CheckMoveLimitations,.Lfe36-CheckMoveLimitations
	.align	2, 0
	.globl	AreAllMovesUnusable
	.type	 AreAllMovesUnusable,function
	.thumb_func
AreAllMovesUnusable:
	push	{r4, lr}
	ldr	r4, .L686
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xf
	bne	.L683	@cond_branch
	ldr	r0, .L686+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x20
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L686+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L686+0xc
	str	r1, [r0]
	b	.L684
.L687:
	.align	2, 0
.L686:
	.word	gActiveBattler
	.word	gProtectStructs
	.word	gSelectionBattleScripts
	.word	BattleScript_NoMovesLeft
.L683:
	ldr	r0, .L688
	ldrb	r1, [r4]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L684:
	mov	r0, #0x0
	cmp	r3, #0xf
	bne	.L685	@cond_branch
	mov	r0, #0x1
.L685:
	pop	{r4}
	pop	{r1}
	bx	r1
.L689:
	.align	2, 0
.L688:
	.word	gProtectStructs
.Lfe37:
	.size	 AreAllMovesUnusable,.Lfe37-AreAllMovesUnusable
	.align	2, 0
	.globl	GetImprisonedMovesCount
	.type	 GetImprisonedMovesCount,function
	.thumb_func
GetImprisonedMovesCount:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r6, #0x0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r4, #0x0
	ldr	r0, .L704
	ldrb	r0, [r0]
	cmp	r6, r0
	bge	.L692	@cond_branch
	ldr	r7, .L704+0x4
	mov	r8, r7
.L694:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r4, #0x1
	cmp	r9, r0
	beq	.L693	@cond_branch
	ldr	r1, .L704+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L693	@cond_branch
	mov	r2, #0x0
	mov	r0, #0x5c
	mov	r1, r4
	mul	r1, r1, r0
	add	r0, r1, r7
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L697	@cond_branch
	mov	r4, r8
	add	r0, r1, r4
.L698:
	add	r0, r0, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L693	@cond_branch
	ldrh	r1, [r0]
	cmp	r5, r1
	bne	.L698	@cond_branch
.L697:
	cmp	r2, #0x3
	bgt	.L693	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L693:
	add	r4, r3, #0
	ldr	r0, .L704
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L694	@cond_branch
.L692:
	add	r0, r6, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L705:
	.align	2, 0
.L704:
	.word	gBattlersCount
	.word	gBattleMons+0xc
	.word	gStatuses3
.Lfe38:
	.size	 GetImprisonedMovesCount,.Lfe38-GetImprisonedMovesCount
	.align	2, 0
	.globl	DoFieldEndTurnEffects
	.type	 DoFieldEndTurnEffects,function
	.thumb_func
DoFieldEndTurnEffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, .L870
	mov	r2, r9
	strb	r2, [r1]
	ldr	r0, .L870+0x4
	ldrb	r4, [r0]
	add	r6, r1, #0
	mov	sl, r0
	ldr	r7, .L870+0x8
	cmp	r9, r4
	bcs	.L708	@cond_branch
	ldr	r2, .L870+0xc
	ldrb	r1, [r2]
	ldr	r5, .L870+0x10
	ldr	r0, [r5]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L708	@cond_branch
	add	r3, r6, #0
.L709:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcs	.L708	@cond_branch
	ldrb	r0, [r2]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L709	@cond_branch
.L708:
	mov	r0, #0x0
	strb	r0, [r7]
	mov	r3, sl
	ldrb	r4, [r3]
	cmp	r4, #0
	beq	.L719	@cond_branch
	ldr	r2, .L870+0xc
	ldrb	r1, [r2]
	ldr	r5, .L870+0x10
	ldr	r0, [r5]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L719	@cond_branch
	add	r3, r7, #0
.L715:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcs	.L719	@cond_branch
	ldrb	r0, [r2]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L715	@cond_branch
.L719:
	ldr	r5, .L870+0x14
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x19
	bls	.LCB6454
	bl	.L721	@far jump
.LCB6454:
	lsl	r0, r0, #0x2
	ldr	r1, .L870+0x18
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L871:
	.align	2, 0
.L870:
	.word	gBattlerAttacker
	.word	gBattlersCount
	.word	gBattlerTarget
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleStruct
	.word	.L858
	.align	2, 0
	.align	2, 0
.L858:
	.word	.L723
	.word	.L740
	.word	.L749
	.word	.L758
	.word	.L767
	.word	.L784
	.word	.L775
	.word	.L793
	.word	.L802
	.word	.L810
	.word	.L820
	.word	.L824
	.word	.L828
	.word	.L852
	.word	.L848
	.word	.L850
	.word	.L832
	.word	.L834
	.word	.L836
	.word	.L838
	.word	.L840
	.word	.L842
	.word	.L846
	.word	.L854
	.word	.L855
	.word	.L857
.L723:
	mov	r5, #0x0
	ldr	r1, .L872
	mov	sl, r1
	ldrb	r0, [r1]
	cmp	r5, r0
	bge	.L725	@cond_branch
	ldr	r2, .L872+0x4
.L727:
	add	r0, r5, r2
	strb	r5, [r0]
	add	r5, r5, #0x1
	ldrb	r3, [r1]
	cmp	r5, r3
	blt	.L727	@cond_branch
.L725:
	mov	r5, #0x0
	b	.L864
.L873:
	.align	2, 0
.L872:
	.word	gBattlersCount
	.word	gBattlerByTurnOrder
.L732:
	add	r4, r5, #0x1
	add	r6, r4, #0
	ldrb	r1, [r1]
	cmp	r6, r1
	bge	.L731	@cond_branch
	ldr	r7, .L874
	ldr	r0, .L874+0x4
	mov	sl, r0
	lsl	r1, r5, #0x18
	mov	r8, r1
.L736:
	add	r0, r5, r7
	ldrb	r0, [r0]
	add	r1, r4, r7
	ldrb	r1, [r1]
	mov	r2, #0x0
	bl	GetWhoStrikesFirst
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L735	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r2, r8
	lsr	r0, r2, #0x18
	bl	SwapTurnOrder
.L735:
	add	r4, r4, #0x1
	ldr	r0, .L874+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L736	@cond_branch
.L731:
	add	r5, r6, #0
.L864:
	mov	r1, sl
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	cmp	r5, r0
	blt	.L732	@cond_branch
	ldr	r2, .L874+0x8
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x2]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strb	r0, [r1, #0x2]
	ldr	r0, [r2]
	add	r0, r0, #0xd7
	strb	r3, [r0]
.L740:
	ldr	r1, .L874+0x8
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.LCB6591
	b	.L795	@long jump
.LCB6591:
	ldr	r3, .L874+0xc
	mov	r8, r3
	ldr	r7, .L874+0x10
	ldr	r5, .L874+0x14
.L743:
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r4, [r0]
	ldr	r2, .L874+0x18
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x1]
	strb	r0, [r7]
	mov	r3, r8
	strb	r0, [r3]
	ldr	r0, .L874+0x1c
	add	r3, r1, r0
	ldr	r0, [r3]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L744	@cond_branch
	ldrb	r0, [r2]
	sub	r0, r0, #0x1
	strb	r0, [r2]
	mov	r6, #0xff
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L744	@cond_branch
	ldr	r0, [r3]
	sub	r1, r1, #0x3
	and	r0, r0, r1
	str	r0, [r3]
	ldr	r0, .L874+0x20
	bl	BattleScriptExecute
	mov	r0, #0xfd
	strb	r0, [r5]
	mov	r0, #0x2
	strb	r0, [r5, #0x1]
	mov	r0, #0x73
	strb	r0, [r5, #0x2]
	strb	r4, [r5, #0x3]
	ldrb	r0, [r5, #0x4]
	orr	r0, r0, r6
	strb	r0, [r5, #0x4]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L744:
	ldr	r2, .L874+0x8
	ldr	r1, [r2]
	add	r1, r1, #0xd7
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, r9
	cmp	r0, #0
	beq	.LCB6663
	bl	.L863	@far jump
.LCB6663:
	add	r1, r2, #0
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L743	@cond_branch
	b	.L795
.L875:
	.align	2, 0
.L874:
	.word	gBattlerByTurnOrder
	.word	gBattlersCount
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleTextBuff1
	.word	gSideTimers
	.word	gSideStatuses
	.word	BattleScript_SideStatusWoreOff
.L749:
	ldr	r1, .L876
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L751	@cond_branch
	ldr	r5, .L876+0x4
	mov	sl, r5
	mov	r0, #0x2
	mov	r8, r0
	mov	r3, #0x3
	neg	r3, r3
	ldr	r6, .L876+0x8
.L752:
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r4, [r0]
	ldr	r2, .L876+0xc
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x3]
	mov	r5, sl
	strb	r0, [r5]
	ldr	r5, .L876+0x10
	strb	r0, [r5]
	ldr	r0, .L876+0x14
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r5, r8
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L753	@cond_branch
	ldrb	r0, [r2, #0x2]
	sub	r0, r0, #0x1
	strb	r0, [r2, #0x2]
	mov	r7, #0xff
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L753	@cond_branch
	ldr	r0, [r1]
	and	r0, r0, r3
	str	r0, [r1]
	ldr	r0, .L876+0x18
	str	r3, [sp]
	bl	BattleScriptExecute
	ldr	r0, .L876+0x1c
	strb	r4, [r0, #0x5]
	ldr	r3, [sp]
	strb	r3, [r6]
	mov	r0, r8
	strb	r0, [r6, #0x1]
	mov	r0, #0x71
	strb	r0, [r6, #0x2]
	strb	r5, [r6, #0x3]
	ldrb	r0, [r6, #0x4]
	orr	r0, r0, r7
	strb	r0, [r6, #0x4]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L753:
	ldr	r2, .L876
	ldr	r1, [r2]
	add	r1, r1, #0xd7
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r1, r9
	cmp	r1, #0
	beq	.LCB6781
	bl	.L863	@far jump
.LCB6781:
	add	r1, r2, #0
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L752	@cond_branch
.L751:
	mov	r2, r9
	cmp	r2, #0
	beq	.LCB6796
	bl	.L863	@far jump
.LCB6796:
	ldr	r3, .L876
	ldr	r0, [r3]
	ldrb	r1, [r0, #0x2]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x2]
	ldr	r0, [r3]
	add	r0, r0, #0xd7
	strb	r2, [r0]
	bl	.L721	@ far jump
.L877:
	.align	2, 0
.L876:
	.word	gBattleStruct
	.word	gBattlerAttacker
	.word	gBattleTextBuff1
	.word	gSideTimers
	.word	gActiveBattler
	.word	gSideStatuses
	.word	BattleScript_SideStatusWoreOff
	.word	gBattleCommunication
.L758:
	ldr	r1, .L878
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.LCB6831
	b	.L795	@long jump
.LCB6831:
	ldr	r5, .L878+0x4
	mov	r8, r5
	ldr	r7, .L878+0x8
	ldr	r5, .L878+0xc
.L761:
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r4, [r0]
	ldr	r2, .L878+0x10
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0xf]
	strb	r0, [r7]
	mov	r3, r8
	strb	r0, [r3]
	ldr	r0, .L878+0x14
	add	r3, r1, r0
	ldr	r0, [r3]
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L762	@cond_branch
	ldrb	r0, [r2, #0xe]
	sub	r0, r0, #0x1
	strb	r0, [r2, #0xe]
	mov	r6, #0xff
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L762	@cond_branch
	ldr	r0, [r3]
	ldr	r1, .L878+0x18
	and	r0, r0, r1
	str	r0, [r3]
	ldr	r0, .L878+0x1c
	bl	BattleScriptExecute
	ldr	r0, .L878+0x20
	strb	r4, [r0, #0x5]
	mov	r0, #0xfd
	strb	r0, [r5]
	mov	r1, #0x2
	strb	r1, [r5, #0x1]
	mov	r0, #0x91
	strb	r0, [r5, #0x2]
	strb	r1, [r5, #0x3]
	ldrb	r0, [r5, #0x4]
	orr	r0, r0, r6
	strb	r0, [r5, #0x4]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L762:
	ldr	r2, .L878
	ldr	r1, [r2]
	add	r1, r1, #0xd7
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, r9
	cmp	r0, #0
	beq	.LCB6906
	bl	.L863	@far jump
.LCB6906:
	add	r1, r2, #0
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L761	@cond_branch
	b	.L795
.L879:
	.align	2, 0
.L878:
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleTextBuff1
	.word	gSideTimers
	.word	gSideStatuses
	.word	-0x801
	.word	BattleScript_SideStatusWoreOff
	.word	gBattleCommunication
.L767:
	ldr	r1, .L880
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.LCB6945
	b	.L795	@long jump
.LCB6945:
	ldr	r5, .L880+0x4
	mov	sl, r5
	ldr	r0, .L880+0x8
	mov	r8, r0
	ldr	r6, .L880+0xc
.L770:
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r4, [r0]
	ldr	r1, .L880+0x10
	lsl	r3, r4, #0x2
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x5]
	mov	r2, r8
	strb	r0, [r2]
	mov	r5, sl
	strb	r0, [r5]
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L771	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x4]
	mov	r7, #0xff
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L771	@cond_branch
	ldr	r2, .L880+0x14
	add	r2, r3, r2
	ldr	r0, [r2]
	ldr	r1, .L880+0x18
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L880+0x1c
	bl	BattleScriptExecute
	ldr	r0, .L880+0x20
	strb	r4, [r0, #0x5]
	mov	r0, #0xfd
	strb	r0, [r6]
	mov	r0, #0x2
	strb	r0, [r6, #0x1]
	mov	r0, #0x36
	strb	r0, [r6, #0x2]
	strb	r5, [r6, #0x3]
	ldrb	r0, [r6, #0x4]
	orr	r0, r0, r7
	strb	r0, [r6, #0x4]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L771:
	ldr	r2, .L880
	ldr	r1, [r2]
	add	r1, r1, #0xd7
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, r9
	cmp	r0, #0
	beq	.LCB7019
	bl	.L863	@far jump
.LCB7019:
	add	r1, r2, #0
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L770	@cond_branch
	b	.L795
.L881:
	.align	2, 0
.L880:
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleTextBuff1
	.word	gSideTimers
	.word	gSideStatuses
	.word	-0x101
	.word	BattleScript_SideStatusWoreOff
	.word	gBattleCommunication
.L775:
	ldr	r1, .L882
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.LCB7058
	b	.L795	@long jump
.LCB7058:
	ldr	r6, .L882+0x4
	ldr	r5, .L882+0x8
.L778:
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r4, [r0]
	ldr	r2, .L882+0xc
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x7]
	strb	r0, [r5]
	strb	r0, [r6]
	ldr	r0, .L882+0x10
	add	r3, r1, r0
	ldr	r0, [r3]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L779	@cond_branch
	ldrb	r0, [r2, #0x6]
	sub	r0, r0, #0x1
	strb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L779	@cond_branch
	ldr	r0, [r3]
	sub	r1, r1, #0x41
	and	r0, r0, r1
	str	r0, [r3]
	ldr	r0, .L882+0x14
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L779:
	ldr	r2, .L882
	ldr	r1, [r2]
	add	r1, r1, #0xd7
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, r9
	cmp	r0, #0
	beq	.LCB7116
	b	.L863	@long jump
.LCB7116:
	add	r1, r2, #0
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L778	@cond_branch
	b	.L795
.L883:
	.align	2, 0
.L882:
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gSideStatuses
	.word	BattleScript_SafeguardEnds
.L784:
	ldr	r1, .L884
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.LCB7152
	b	.L795	@long jump
.LCB7152:
	ldr	r6, .L884+0x4
	ldr	r5, .L884+0x8
.L787:
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r4, [r0]
	ldr	r2, .L884+0xc
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x13]
	strb	r0, [r5]
	strb	r0, [r6]
	ldr	r0, .L884+0x10
	add	r3, r1, r0
	ldr	r0, [r3]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L788	@cond_branch
	ldrb	r0, [r2, #0x12]
	sub	r0, r0, #0x1
	strb	r0, [r2, #0x12]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L788	@cond_branch
	ldr	r0, [r3]
	ldr	r1, .L884+0x14
	and	r0, r0, r1
	str	r0, [r3]
	ldr	r0, .L884+0x18
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L788:
	ldr	r2, .L884
	ldr	r1, [r2]
	add	r1, r1, #0xd7
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, r9
	cmp	r0, #0
	beq	.LCB7211
	b	.L863	@long jump
.LCB7211:
	add	r1, r2, #0
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L787	@cond_branch
	b	.L795
.L885:
	.align	2, 0
.L884:
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gSideStatuses
	.word	-0x1001
	.word	BattleScript_LuckyChantEnds
.L793:
	ldr	r1, .L886
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L795	@cond_branch
	ldr	r6, .L886+0x4
	ldr	r5, .L886+0x8
.L796:
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r4, [r0]
	ldr	r2, .L886+0xc
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x11]
	strb	r0, [r5]
	strb	r0, [r6]
	ldr	r0, .L886+0x10
	add	r3, r1, r0
	ldr	r0, [r3]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L797	@cond_branch
	ldrb	r0, [r2, #0x10]
	sub	r0, r0, #0x1
	strb	r0, [r2, #0x10]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L797	@cond_branch
	ldr	r0, [r3]
	ldr	r1, .L886+0x14
	and	r0, r0, r1
	str	r0, [r3]
	ldr	r0, .L886+0x18
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L797:
	ldr	r2, .L886
	ldr	r1, [r2]
	add	r1, r1, #0xd7
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, r9
	cmp	r0, #0
	beq	.LCB7307
	b	.L863	@long jump
.LCB7307:
	add	r1, r2, #0
	ldr	r0, [r1]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L796	@cond_branch
.L795:
	mov	r1, r9
	cmp	r1, #0
	beq	.LCB7322
	b	.L863	@long jump
.LCB7322:
	ldr	r2, .L886
	ldr	r0, [r2]
	ldrb	r1, [r0, #0x2]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x2]
	ldr	r0, [r2]
	add	r0, r0, #0xd7
	mov	r3, r9
	strb	r3, [r0]
	b	.L721
.L887:
	.align	2, 0
.L886:
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gSideStatuses
	.word	-0x401
	.word	BattleScript_TailwindEnds
.L802:
	ldr	r2, .L888
	ldr	r0, [r2]
	add	r0, r0, #0xd7
	ldr	r1, .L888+0x4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L804	@cond_branch
	ldr	r4, .L888+0x8
	ldr	r5, .L888+0xc
.L805:
	ldr	r0, [r2]
	add	r0, r0, #0xd7
	ldrb	r0, [r0]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r0, .L888+0x10
	add	r0, r0, #0x10
	ldrb	r2, [r4]
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L806	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L806	@cond_branch
	ldr	r1, .L888+0x14
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L806	@cond_branch
	ldr	r0, .L888+0x18
	strb	r2, [r0]
	ldr	r0, .L888+0x1c
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L806:
	ldr	r2, .L888
	ldr	r1, [r2]
	add	r1, r1, #0xd7
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r3, r9
	cmp	r3, #0
	beq	.LCB7424
	b	.L863	@long jump
.LCB7424:
	ldr	r0, [r2]
	add	r0, r0, #0xd7
	ldr	r1, .L888+0x4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L805	@cond_branch
.L804:
	mov	r5, r9
	cmp	r5, #0
	beq	.LCB7444
	b	.L863	@long jump
.LCB7444:
	ldr	r0, .L888
	ldr	r1, [r0]
	b	.L865
.L889:
	.align	2, 0
.L888:
	.word	gBattleStruct
	.word	gBattlersCount
	.word	gActiveBattler
	.word	gBattlerByTurnOrder
	.word	gWishFutureKnock
	.word	gBattleMons
	.word	gBattlerTarget
	.word	BattleScript_WishComesTrue
.L810:
	ldr	r3, .L890
	ldrh	r2, [r3]
	mov	r0, #0x7
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L811	@cond_branch
	mov	r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L812	@cond_branch
	ldr	r1, .L890+0x4
	ldrb	r0, [r1, #0x18]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x18]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L813	@cond_branch
	ldr	r0, .L890+0x8
	and	r0, r0, r2
	ldr	r1, .L890+0xc
	and	r0, r0, r1
	strh	r0, [r3]
	ldr	r1, .L890+0x10
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L817
.L891:
	.align	2, 0
.L890:
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	0xfffe
	.word	0xfffd
	.word	gBattleCommunication
.L813:
	mov	r0, #0x2
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L866	@cond_branch
	b	.L818
.L812:
	mov	r0, #0x2
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L818	@cond_branch
.L866:
	ldr	r1, .L892
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L817
.L893:
	.align	2, 0
.L892:
	.word	gBattleCommunication
.L818:
	ldr	r0, .L894
	strb	r1, [r0, #0x5]
.L817:
	ldr	r0, .L894+0x4
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L811:
	ldr	r2, .L894+0x8
	ldr	r1, [r2]
	b	.L865
.L895:
	.align	2, 0
.L894:
	.word	gBattleCommunication
	.word	BattleScript_RainContinuesOrEnds
	.word	gBattleStruct
.L820:
	ldr	r3, .L896
	ldrh	r2, [r3]
	mov	r0, #0x18
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L821	@cond_branch
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L822	@cond_branch
	ldr	r1, .L896+0x4
	ldrb	r0, [r1, #0x18]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x18]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L822	@cond_branch
	ldr	r0, .L896+0x8
	and	r0, r0, r2
	strh	r0, [r3]
	ldr	r1, .L896+0xc
	ldr	r0, .L896+0x10
	b	.L867
.L897:
	.align	2, 0
.L896:
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	0xfff7
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SandStormHailEnds
.L822:
	ldr	r1, .L898
	ldr	r0, .L898+0x4
.L867:
	str	r0, [r1]
	add	r3, r1, #0
	ldr	r1, .L898+0x8
	mov	r2, #0x0
	mov	r0, #0xc
	strb	r0, [r1, #0x10]
	ldr	r0, .L898+0xc
	strb	r2, [r0, #0x5]
	ldr	r0, [r3]
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L821:
	ldr	r2, .L898+0x10
	ldr	r1, [r2]
	b	.L865
.L899:
	.align	2, 0
.L898:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DamagingWeatherContinues
	.word	gBattleScripting
	.word	gBattleCommunication
	.word	gBattleStruct
.L824:
	ldr	r3, .L900
	ldrh	r2, [r3]
	mov	r0, #0x60
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L825	@cond_branch
	mov	r0, #0x40
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L826	@cond_branch
	ldr	r1, .L900+0x4
	ldrb	r0, [r1, #0x18]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x18]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L826	@cond_branch
	ldr	r0, .L900+0x8
	and	r0, r0, r2
	strh	r0, [r3]
	ldr	r1, .L900+0xc
	ldr	r0, .L900+0x10
	b	.L868
.L901:
	.align	2, 0
.L900:
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	0xffdf
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SunlightFaded
.L826:
	ldr	r1, .L902
	ldr	r0, .L902+0x4
.L868:
	str	r0, [r1]
	add	r3, r1, #0
	ldr	r0, [r3]
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L825:
	ldr	r2, .L902+0x8
	ldr	r1, [r2]
	b	.L865
.L903:
	.align	2, 0
.L902:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SunlightContinues
	.word	gBattleStruct
.L828:
	ldr	r3, .L904
	ldrh	r2, [r3]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L829	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L830	@cond_branch
	ldr	r1, .L904+0x4
	ldrb	r0, [r1, #0x18]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x18]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L830	@cond_branch
	ldr	r0, .L904+0x8
	and	r0, r0, r2
	strh	r0, [r3]
	ldr	r1, .L904+0xc
	ldr	r0, .L904+0x10
	b	.L869
.L905:
	.align	2, 0
.L904:
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	0xff7f
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SandStormHailEnds
.L830:
	ldr	r1, .L906
	ldr	r0, .L906+0x4
.L869:
	str	r0, [r1]
	add	r3, r1, #0
	ldr	r1, .L906+0x8
	mov	r0, #0xd
	strb	r0, [r1, #0x10]
	ldr	r1, .L906+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	ldr	r0, [r3]
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L829:
	ldr	r2, .L906+0x10
	ldr	r1, [r2]
	b	.L865
.L907:
	.align	2, 0
.L906:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DamagingWeatherContinues
	.word	gBattleScripting
	.word	gBattleCommunication
	.word	gBattleStruct
.L832:
	ldr	r3, .L908
	ldr	r2, [r3]
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L833	@cond_branch
	ldr	r1, .L908+0x4
	ldrb	r0, [r1, #0x4]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L833	@cond_branch
	mov	r0, #0x3
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r3]
	ldr	r0, .L908+0x8
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L833:
	ldr	r2, .L908+0xc
	ldr	r1, [r2]
	b	.L865
.L909:
	.align	2, 0
.L908:
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	BattleScript_TrickRoomEnds
	.word	gBattleStruct
.L834:
	ldr	r3, .L910
	ldr	r2, [r3]
	mov	r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L835	@cond_branch
	ldr	r1, .L910+0x4
	ldrb	r0, [r1, #0x2]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x2]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L835	@cond_branch
	mov	r0, #0x5
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r3]
	ldr	r0, .L910+0x8
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L835:
	ldr	r2, .L910+0xc
	ldr	r1, [r2]
	b	.L865
.L911:
	.align	2, 0
.L910:
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	BattleScript_WonderRoomEnds
	.word	gBattleStruct
.L836:
	ldr	r3, .L912
	ldr	r2, [r3]
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L837	@cond_branch
	ldr	r1, .L912+0x4
	ldrb	r0, [r1, #0x3]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x3]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L837	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r3]
	ldr	r0, .L912+0x8
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L837:
	ldr	r2, .L912+0xc
	ldr	r1, [r2]
	b	.L865
.L913:
	.align	2, 0
.L912:
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	BattleScript_MagicRoomEnds
	.word	gBattleStruct
.L838:
	ldr	r3, .L914
	ldr	r2, [r3]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L839	@cond_branch
	ldr	r1, .L914+0x4
	ldrb	r0, [r1, #0x7]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x7]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L839	@cond_branch
	ldr	r0, .L914+0x8
	and	r2, r2, r0
	str	r2, [r3]
	ldr	r0, .L914+0xc
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L839:
	ldr	r2, .L914+0x10
	ldr	r1, [r2]
	b	.L865
.L915:
	.align	2, 0
.L914:
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	-0x101
	.word	BattleScript_ElectricTerrainEnds
	.word	gBattleStruct
.L840:
	ldr	r3, .L916
	ldr	r2, [r3]
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L841	@cond_branch
	ldr	r1, .L916+0x4
	ldrb	r0, [r1, #0x6]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x6]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L841	@cond_branch
	mov	r0, #0x81
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r3]
	ldr	r0, .L916+0x8
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L841:
	ldr	r2, .L916+0xc
	ldr	r1, [r2]
	b	.L865
.L917:
	.align	2, 0
.L916:
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	BattleScript_MistyTerrainEnds
	.word	gBattleStruct
.L842:
	ldr	r2, .L918
	ldr	r0, [r2]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L843	@cond_branch
	ldr	r1, .L918+0x4
	ldrb	r0, [r1, #0x5]
	cmp	r0, #0
	beq	.L845	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L844	@cond_branch
.L845:
	ldr	r0, [r2]
	mov	r1, #0x41
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
.L844:
	ldr	r0, .L918+0x8
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L843:
	ldr	r2, .L918+0xc
	ldr	r1, [r2]
	b	.L865
.L919:
	.align	2, 0
.L918:
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	BattleScript_GrassyTerrainHeals
	.word	gBattleStruct
.L846:
	ldr	r3, .L920
	ldr	r2, [r3]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L847	@cond_branch
	ldr	r1, .L920+0x4
	ldrb	r0, [r1, #0x8]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x8]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L847	@cond_branch
	ldr	r0, .L920+0x8
	and	r2, r2, r0
	str	r2, [r3]
	ldr	r0, .L920+0xc
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L847:
	ldr	r2, .L920+0x10
	ldr	r1, [r2]
	b	.L865
.L921:
	.align	2, 0
.L920:
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	-0x201
	.word	BattleScript_PsychicTerrainEnds
	.word	gBattleStruct
.L848:
	ldr	r3, .L922
	ldr	r2, [r3]
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L849	@cond_branch
	ldr	r1, .L922+0x4
	ldrb	r0, [r1, #0x1]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L849	@cond_branch
	mov	r0, #0x11
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r3]
	ldr	r0, .L922+0x8
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L849:
	ldr	r2, .L922+0xc
	ldr	r1, [r2]
	b	.L865
.L923:
	.align	2, 0
.L922:
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	BattleScript_WaterSportEnds
	.word	gBattleStruct
.L850:
	ldr	r3, .L924
	ldr	r2, [r3]
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L851	@cond_branch
	ldr	r1, .L924+0x4
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L851	@cond_branch
	mov	r0, #0x9
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r3]
	ldr	r0, .L924+0x8
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L851:
	ldr	r2, .L924+0xc
	ldr	r1, [r2]
	b	.L865
.L925:
	.align	2, 0
.L924:
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	BattleScript_MudSportEnds
	.word	gBattleStruct
.L852:
	ldr	r3, .L926
	ldr	r2, [r3]
	mov	r0, #0x20
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L853	@cond_branch
	ldr	r1, .L926+0x4
	ldrb	r0, [r1, #0xa]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0xa]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L853	@cond_branch
	mov	r0, #0x21
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r3]
	ldr	r0, .L926+0x8
	bl	BattleScriptExecute
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L853:
	ldr	r2, .L926+0xc
	ldr	r1, [r2]
	b	.L865
.L927:
	.align	2, 0
.L926:
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	BattleScript_GravityEnds
	.word	gBattleStruct
.L854:
	ldr	r2, .L928
	ldr	r0, [r2]
	ldr	r1, .L928+0x4
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L928+0x8
	ldr	r1, [r2]
	b	.L865
.L929:
	.align	2, 0
.L928:
	.word	gFieldStatuses
	.word	-0x401
	.word	gBattleStruct
.L855:
	ldr	r3, .L930
	ldr	r2, [r3]
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L856	@cond_branch
	ldr	r1, .L930+0x4
	ldrb	r0, [r1, #0xb]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0xb]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L856	@cond_branch
	ldr	r0, .L930+0x8
	and	r2, r2, r0
	str	r2, [r3]
.L856:
	ldr	r3, .L930+0xc
	ldr	r1, [r3]
.L865:
	ldrb	r0, [r1, #0x2]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
	b	.L721
.L931:
	.align	2, 0
.L930:
	.word	gFieldStatuses
	.word	gFieldTimers
	.word	-0x801
	.word	gBattleStruct
.L857:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L721:
	mov	r5, r9
	cmp	r5, #0
	bne	.LCB8345
	bl	.L719	@far jump
.LCB8345:
.L863:
	ldr	r0, .L932
	ldr	r1, [r0]
	ldr	r0, .L932+0x4
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L933:
	.align	2, 0
.L932:
	.word	gBattleMainFunc
	.word	BattleTurnPassed
.Lfe39:
	.size	 DoFieldEndTurnEffects,.Lfe39-DoFieldEndTurnEffects
	.align	2, 0
	.globl	GetDrainedBigRootHp
	.type	 GetDrainedBigRootHp,function
	.thumb_func
GetDrainedBigRootHp:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x4c
	bne	.L935	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r1, r0, #0x6
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, #0xfa
	lsl	r1, r1, #0x2
	bl	__divsi3
	add	r4, r0, #0
.L935:
	cmp	r4, #0
	bne	.L936	@cond_branch
	mov	r4, #0x1
.L936:
	neg	r0, r4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 GetDrainedBigRootHp,.Lfe40-GetDrainedBigRootHp
	.align	2, 0
	.globl	DoBattlerEndTurnEffects
	.type	 DoBattlerEndTurnEffects,function
	.thumb_func
DoBattlerEndTurnEffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r0, #0x0
	mov	r9, r0
	ldr	r2, .L1100
	ldr	r0, [r2]
	ldr	r1, .L1100+0x4
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L938	@ far jump
.L1101:
	.align	2, 0
.L1100:
	.word	gHitMarker
	.word	0x1000020
.L940:
	ldr	r3, .L1102
	ldr	r2, .L1102+0x4
	ldr	r1, .L1102+0x8
	ldr	r4, [r5]
	ldrb	r0, [r4, #0x1]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	strb	r0, [r3]
	ldr	r0, .L1102+0xc
	ldrb	r1, [r0]
	ldr	r2, .L1102+0x10
	ldrb	r3, [r3]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L942	@cond_branch
	ldrb	r0, [r4, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x1]
	bl	.L938	@ far jump
.L1103:
	.align	2, 0
.L1102:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L942:
	add	r0, r3, #0
	bl	GetBattlerAbility
	add	r7, r0, #0
	ldr	r0, [r5]
	ldrb	r0, [r0]
	cmp	r0, #0x20
	bls	.LCB8488
	bl	.L943	@far jump
.LCB8488:
	lsl	r0, r0, #0x2
	ldr	r1, .L1104
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1105:
	.align	2, 0
.L1104:
	.word	.L1083
	.align	2, 0
	.align	2, 0
.L1083:
	.word	.L944
	.word	.L946
	.word	.L948
	.word	.L950
	.word	.L956
	.word	.L960
	.word	.L968
	.word	.L977
	.word	.L983
	.word	.L989
	.word	.L993
	.word	.L1005
	.word	.L1020
	.word	.L1027
	.word	.L1028
	.word	.L1039
	.word	.L1062
	.word	.L1066
	.word	.L1070
	.word	.L1058
	.word	.L1045
	.word	.L1047
	.word	.L1054
	.word	.L1049
	.word	.L1051
	.word	.L952
	.word	.L954
	.word	.L1074
	.word	.L1076
	.word	.L1077
	.word	.L1078
	.word	.L1080
	.word	.L1082
.L944:
	ldr	r1, .L1106
	ldr	r0, .L1106+0x4
	ldrb	r4, [r0]
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB8517
	bl	.L1081	@far jump
.LCB8517:
	ldr	r0, .L1106+0x8
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r1, r1, r0
	ldrh	r3, [r1, #0x2a]
	ldrh	r6, [r1, #0x2e]
	cmp	r3, r6
	bne	.LCB8530
	bl	.L1081	@far jump
.LCB8530:
	mov	r0, #0x80
	lsl	r0, r0, #0x14
	and	r2, r2, r0
	cmp	r2, #0
	beq	.LCB8535
	bl	.L1081	@far jump
.LCB8535:
	cmp	r3, #0
	bne	.LCB8537
	bl	.L1081	@far jump
.LCB8537:
	ldrh	r1, [r1, #0x2e]
	lsr	r1, r1, #0x4
	add	r0, r4, #0
	bl	GetDrainedBigRootHp
	ldr	r1, .L1106+0xc
	str	r0, [r1]
	ldr	r0, .L1106+0x10
	bl	.L1092	@ far jump
.L1107:
	.align	2, 0
.L1106:
	.word	gStatuses3
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_IngrainTurnHeal
.L946:
	ldr	r1, .L1108
	ldr	r0, .L1108+0x4
	ldrb	r4, [r0]
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x15
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB8574
	bl	.L1081	@far jump
.LCB8574:
	ldr	r0, .L1108+0x8
	mov	r1, #0x5c
	mul	r1, r1, r4
	add	r1, r1, r0
	ldrh	r3, [r1, #0x2a]
	ldrh	r0, [r1, #0x2e]
	cmp	r3, r0
	bne	.LCB8587
	bl	.L1081	@far jump
.LCB8587:
	mov	r0, #0x80
	lsl	r0, r0, #0x14
	and	r2, r2, r0
	cmp	r2, #0
	beq	.LCB8592
	bl	.L1081	@far jump
.LCB8592:
	cmp	r3, #0
	bne	.LCB8594
	bl	.L1081	@far jump
.LCB8594:
	ldrh	r1, [r1, #0x2e]
	lsr	r1, r1, #0x4
	add	r0, r4, #0
	bl	GetDrainedBigRootHp
	ldr	r1, .L1108+0xc
	str	r0, [r1]
	ldr	r0, .L1108+0x10
	bl	BattleScriptExecute
	bl	.L1093	@ far jump
.L1109:
	.align	2, 0
.L1108:
	.word	gStatuses3
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_AquaRingHeal
.L948:
	ldr	r0, .L1110
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB8635
	bl	.L1081	@far jump
.LCB8635:
	bl	.L1094	@ far jump
.L1111:
	.align	2, 0
.L1110:
	.word	gActiveBattler
.L950:
	ldr	r0, .L1112
	ldrb	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0x0
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB8655
	bl	.L1081	@far jump
.LCB8655:
	bl	.L1095	@ far jump
.L1113:
	.align	2, 0
.L1112:
	.word	gActiveBattler
.L952:
	ldr	r0, .L1114
	ldrb	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0x1
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB8675
	bl	.L1081	@far jump
.LCB8675:
	b	.L1026
.L1115:
	.align	2, 0
.L1114:
	.word	gActiveBattler
.L954:
	ldr	r0, .L1116
	ldrb	r1, [r0]
	mov	r0, #0x6
	mov	r2, #0x0
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB8695
	bl	.L1081	@far jump
.LCB8695:
	bl	.L1096	@ far jump
.L1117:
	.align	2, 0
.L1116:
	.word	gActiveBattler
.L956:
	ldr	r0, .L1118
	ldr	r5, .L1118+0x4
	ldrb	r2, [r5]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB8714
	bl	.L1081	@far jump
.LCB8714:
	ldr	r4, .L1118+0x8
	mov	r3, #0x3
	and	r3, r3, r1
	mov	r1, #0x5c
	mov	r0, r3
	mul	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.LCB8725
	bl	.L1081	@far jump
.LCB8725:
	mov	r0, r2
	mul	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.LCB8732
	bl	.L1081	@far jump
.LCB8732:
	cmp	r7, #0x62
	bne	.L958	@cond_branch
	add	r0, r2, #0
.L1090:
	mov	r1, #0x62
	bl	RecordAbilityBattle
	bl	.L1081	@ far jump
.L1119:
	.align	2, 0
.L1118:
	.word	gStatuses3
	.word	gActiveBattler
	.word	gBattleMons
.L958:
	ldr	r0, .L1120
	strb	r3, [r0]
	ldr	r2, .L1120+0x4
	ldrb	r0, [r5]
	mul	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x3
	str	r0, [r2]
	cmp	r0, #0
	bne	.L959	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L959:
	ldr	r1, .L1120+0x8
	strb	r3, [r1, #0x10]
	ldr	r0, .L1120+0xc
	ldrb	r0, [r0]
	strb	r0, [r1, #0x11]
	ldr	r0, .L1120+0x10
	bl	.L1097	@ far jump
.L1121:
	.align	2, 0
.L1120:
	.word	gBattlerTarget
	.word	gBattleMoveDamage
	.word	gBattleScripting
	.word	gBattlerAttacker
	.word	BattleScript_LeechSeedTurnDrain
.L960:
	ldr	r4, .L1122
	ldr	r0, .L1122+0x4
	ldrb	r3, [r0]
	mov	r0, #0x5c
	mov	r2, r3
	mul	r2, r2, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB8800
	bl	.L1081	@far jump
.LCB8800:
	add	r2, r2, r4
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	bne	.LCB8806
	bl	.L1081	@far jump
.LCB8806:
	cmp	r7, #0x62
	bne	.L962	@cond_branch
	add	r0, r3, #0
	b	.L1090
.L1123:
	.align	2, 0
.L1122:
	.word	gBattleMons
	.word	gActiveBattler
.L962:
	cmp	r7, #0x5a
	bne	.L963	@cond_branch
	ldrh	r1, [r2, #0x2e]
	cmp	r0, r1
	bne	.LCB8830
	bl	.L1081	@far jump
.LCB8830:
	ldr	r1, .L1124
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8839
	bl	.L1081	@far jump
.LCB8839:
	ldr	r1, .L1124+0x4
	ldrh	r0, [r2, #0x2e]
	lsr	r0, r0, #0x3
	str	r0, [r1]
	cmp	r0, #0
	bne	.L965	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L965:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldr	r0, .L1124+0x8
	bl	.L1098	@ far jump
.L1125:
	.align	2, 0
.L1124:
	.word	gStatuses3
	.word	gBattleMoveDamage
	.word	BattleScript_PoisonHealActivates
.L963:
	ldr	r1, .L1126
	ldrh	r0, [r2, #0x2e]
	lsr	r0, r0, #0x3
	str	r0, [r1]
	cmp	r0, #0
	bne	.L967	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L967:
	ldr	r0, .L1126+0x4
	bl	BattleScriptExecute
	bl	.L1095	@ far jump
.L1127:
	.align	2, 0
.L1126:
	.word	gBattleMoveDamage
	.word	BattleScript_PoisonTurnDmg
.L968:
	ldr	r4, .L1128
	ldr	r6, .L1128+0x4
	mov	r8, r6
	ldrb	r3, [r6]
	mov	r6, #0x5c
	mov	r2, r3
	mul	r2, r2, r6
	add	r5, r4, #0
	add	r5, r5, #0x50
	add	r0, r2, r5
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB8906
	bl	.L1081	@far jump
.LCB8906:
	add	r2, r2, r4
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	bne	.LCB8912
	bl	.L1081	@far jump
.LCB8912:
	cmp	r7, #0x62
	bne	.L970	@cond_branch
	add	r0, r3, #0
	b	.L1090
.L1129:
	.align	2, 0
.L1128:
	.word	gBattleMons
	.word	gActiveBattler
.L970:
	cmp	r7, #0x5a
	bne	.L971	@cond_branch
	ldrh	r7, [r2, #0x2e]
	cmp	r0, r7
	bne	.LCB8936
	bl	.L1081	@far jump
.LCB8936:
	ldr	r1, .L1130
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8945
	bl	.L1081	@far jump
.LCB8945:
	ldr	r1, .L1130+0x4
	ldrh	r0, [r2, #0x2e]
	lsr	r0, r0, #0x3
	str	r0, [r1]
	cmp	r0, #0
	bne	.L973	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L973:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldr	r0, .L1130+0x8
	bl	.L1097	@ far jump
.L1131:
	.align	2, 0
.L1130:
	.word	gStatuses3
	.word	gBattleMoveDamage
	.word	BattleScript_PoisonHealActivates
.L971:
	ldr	r4, .L1132
	ldrh	r0, [r2, #0x2e]
	lsr	r0, r0, #0x4
	str	r0, [r4]
	cmp	r0, #0
	bne	.L975	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L975:
	mov	r1, r8
	ldrb	r0, [r1]
	mul	r0, r0, r6
	add	r2, r0, r5
	ldr	r1, [r2]
	mov	r3, #0xf0
	lsl	r3, r3, #0x4
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, r3
	beq	.L976	@cond_branch
	mov	r7, #0x80
	lsl	r7, r7, #0x1
	add	r0, r1, r7
	str	r0, [r2]
.L976:
	mov	r1, r8
	ldrb	r0, [r1]
	mul	r0, r0, r6
	add	r0, r0, r5
	ldr	r0, [r0]
	and	r0, r0, r3
	lsr	r0, r0, #0x8
	ldr	r1, [r4]
	mul	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L1132+0x4
	bl	.L1098	@ far jump
.L1133:
	.align	2, 0
.L1132:
	.word	gBattleMoveDamage
	.word	BattleScript_PoisonTurnDmg
.L977:
	ldr	r4, .L1134
	ldr	r5, .L1134+0x4
	ldrb	r3, [r5]
	mov	r0, #0x5c
	mov	r2, r3
	mul	r2, r2, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9037
	bl	.L1081	@far jump
.LCB9037:
	add	r2, r2, r4
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	bne	.LCB9043
	bl	.L1081	@far jump
.LCB9043:
	cmp	r7, #0x62
	bne	.L979	@cond_branch
	add	r0, r3, #0
	b	.L1090
.L1135:
	.align	2, 0
.L1134:
	.word	gBattleMons
	.word	gActiveBattler
.L979:
	ldr	r1, .L1136
	ldrh	r0, [r2, #0x2e]
	lsr	r2, r0, #0x4
	str	r2, [r1]
	add	r4, r1, #0
	cmp	r7, #0x55
	bne	.L980	@cond_branch
	lsr	r0, r2, #0x1
	add	r0, r0, #0x1
	cmp	r2, r0
	ble	.L981	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x55
	bl	RecordAbilityBattle
.L981:
	ldr	r0, [r4]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	str	r0, [r4]
.L980:
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L982	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L982:
	ldr	r0, .L1136+0x4
	bl	BattleScriptExecute
	bl	.L1095	@ far jump
.L1137:
	.align	2, 0
.L1136:
	.word	gBattleMoveDamage
	.word	BattleScript_BurnTurnDmg
.L983:
	ldr	r5, .L1138
	ldr	r0, .L1138+0x4
	ldrb	r4, [r0]
	mov	r0, #0x5c
	mov	r1, r4
	mul	r1, r1, r0
	add	r0, r5, #0
	add	r0, r0, #0x54
	add	r6, r1, r0
	ldr	r2, [r6]
	mov	r0, #0x80
	lsl	r0, r0, #0x14
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB9123
	bl	.L1081	@far jump
.LCB9123:
	add	r3, r1, r5
	ldrh	r0, [r3, #0x2a]
	cmp	r0, #0
	bne	.LCB9129
	bl	.L1081	@far jump
.LCB9129:
	cmp	r7, #0x62
	bne	.L985	@cond_branch
	add	r0, r4, #0
	b	.L1090
.L1139:
	.align	2, 0
.L1138:
	.word	gBattleMons
	.word	gActiveBattler
.L985:
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r0, r1, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L986	@cond_branch
	ldr	r1, .L1140
	ldrh	r0, [r3, #0x2e]
	lsr	r0, r0, #0x2
	str	r0, [r1]
	cmp	r0, #0
	bne	.L987	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L987:
	ldr	r0, .L1140+0x4
	bl	BattleScriptExecute
	b	.L1026
.L1141:
	.align	2, 0
.L1140:
	.word	gBattleMoveDamage
	.word	BattleScript_NightmareTurnDmg
.L986:
	ldr	r0, .L1142
	and	r2, r2, r0
	str	r2, [r6]
	bl	.L1081	@ far jump
.L1143:
	.align	2, 0
.L1142:
	.word	-0x8000001
.L989:
	ldr	r4, .L1144
	ldr	r0, .L1144+0x4
	ldrb	r3, [r0]
	mov	r0, #0x5c
	mov	r2, r3
	mul	r2, r2, r0
	add	r0, r4, #0
	add	r0, r0, #0x54
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x15
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9204
	bl	.L1081	@far jump
.LCB9204:
	add	r1, r2, r4
	ldrh	r0, [r1, #0x2a]
	cmp	r0, #0
	bne	.LCB9210
	bl	.L1081	@far jump
.LCB9210:
	cmp	r7, #0x62
	bne	.L991	@cond_branch
	add	r0, r3, #0
	b	.L1090
.L1145:
	.align	2, 0
.L1144:
	.word	gBattleMons
	.word	gActiveBattler
.L991:
	ldr	r2, .L1146
	ldrh	r0, [r1, #0x2e]
	lsr	r0, r0, #0x2
	str	r0, [r2]
	cmp	r0, #0
	bne	.L992	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L992:
	ldr	r0, .L1146+0x4
	bl	.L1092	@ far jump
.L1147:
	.align	2, 0
.L1146:
	.word	gBattleMoveDamage
	.word	BattleScript_CurseTurnDmg
.L993:
	ldr	r0, .L1148
	mov	r8, r0
	ldr	r4, .L1148+0x4
	ldrb	r3, [r4]
	mov	r6, #0x5c
	mov	r2, r3
	mul	r2, r2, r6
	mov	r5, r8
	add	r5, r5, #0x54
	add	r0, r2, r5
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9263
	bl	.L1081	@far jump
.LCB9263:
	mov	r1, r8
	add	r0, r2, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.LCB9270
	bl	.L1081	@far jump
.LCB9270:
	ldr	r0, .L1148+0x8
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	add	r1, r1, #0x25
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	mov	r2, #0xff
	mov	ip, r2
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L995	@cond_branch
	cmp	r7, #0x62
	bne	.L996	@cond_branch
	ldrb	r0, [r4]
	b	.L1090
.L1149:
	.align	2, 0
.L1148:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gDisableStructs
.L996:
	ldr	r1, .L1150
	ldr	r0, .L1150+0x4
	ldr	r3, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r2, r3, #0x4
	add	r0, r2, r0
	ldrh	r0, [r0]
	strb	r0, [r1, #0x10]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r2, r0
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x11]
	ldr	r1, .L1150+0x8
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r2, r0
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r2, r2, r0
	ldrh	r0, [r2]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	ldrb	r0, [r1, #0x4]
	mov	r7, ip
	orr	r0, r0, r7
	strb	r0, [r1, #0x4]
	ldr	r1, .L1150+0xc
	ldr	r0, .L1150+0x10
	str	r0, [r1]
	add	r3, r3, #0x13
	ldrb	r0, [r4]
	add	r3, r3, r0
	ldrb	r0, [r3]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x7c
	bne	.L997	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r8
	ldrh	r0, [r0, #0x2e]
	mov	r1, #0x8
	ldr	r4, .L1150+0x14
	cmp	r0, #0
	beq	.L1001	@cond_branch
	mov	r1, #0x6
	b	.L1001
.L1151:
	.align	2, 0
.L1150:
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WrapTurnDmg
	.word	gBattleMoveDamage
.L997:
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r8
	ldrh	r0, [r0, #0x2e]
	mov	r1, #0x10
	ldr	r4, .L1152
	cmp	r0, #0
	beq	.L1001	@cond_branch
	mov	r1, #0x8
.L1001:
	str	r1, [r4]
	ldr	r0, [r4]
	ldr	r1, .L1152+0x4
	cmp	r0, #0
	bne	.L1004	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
	b	.L1004
.L1153:
	.align	2, 0
.L1152:
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.L995:
	ldrb	r0, [r4]
	mov	r2, r0
	mul	r2, r2, r6
	add	r2, r2, r5
	ldr	r0, [r2]
	ldr	r1, .L1154
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L1154+0x4
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x2
	strb	r0, [r2, #0x1]
	ldr	r0, .L1154+0x8
	ldr	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x4
	add	r0, r1, r0
	ldrh	r0, [r0]
	strb	r0, [r2, #0x2]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	mov	r1, ip
	orr	r0, r0, r1
	strb	r0, [r2, #0x4]
	ldr	r1, .L1154+0xc
	ldr	r0, .L1154+0x10
	str	r0, [r1]
.L1004:
	ldr	r0, [r1]
	b	.L1098
.L1155:
	.align	2, 0
.L1154:
	.word	-0x2001
	.word	gBattleTextBuff1
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WrapEnds
.L1089:
	mov	r0, #0x8
	neg	r0, r0
	and	r3, r3, r0
	str	r3, [r5]
	ldrb	r0, [r7]
	mov	r2, r8
	mul	r2, r2, r0
	mov	r0, sl
	add	r0, r0, #0x54
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L1156
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L1156+0x4
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	ldr	r0, .L1156+0x8
	bl	BattleScriptExecute
	ldr	r4, .L1156+0xc
	ldrb	r0, [r7]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r9
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1008
.L1157:
	.align	2, 0
.L1156:
	.word	-0x8000001
	.word	gBattleCommunication
	.word	BattleScript_MonWokeUpInUproar
	.word	gActiveBattler
.L1005:
	ldr	r2, .L1158
	ldr	r0, .L1158+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r2, #0
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x70
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1006	@cond_branch
	ldr	r1, .L1158+0x8
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1158+0xc
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1008	@cond_branch
	mov	sl, r2
	add	r7, r1, #0
	mov	r6, #0x5c
	mov	r8, r6
	mov	r1, #0x50
	add	r1, r1, r2
	mov	r9, r1
	str	r0, [sp, #0x4]
	mov	r3, #0x7
	mov	ip, r3
.L1010:
	ldrb	r4, [r7]
	mov	r1, r8
	mul	r1, r1, r4
	mov	r6, r9
	add	r5, r1, r6
	ldr	r3, [r5]
	add	r0, r3, #0
	mov	r6, ip
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L1009	@cond_branch
	add	r0, r1, r2
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x2b
	bne	.L1089	@cond_branch
.L1009:
	add	r0, r4, #0x1
	strb	r0, [r7]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [sp, #0x4]
	cmp	r0, r1
	bcc	.L1010	@cond_branch
.L1008:
	ldr	r2, .L1158+0x8
	ldr	r1, .L1158+0xc
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L1013	@cond_branch
	mov	r2, #0x2
	mov	r9, r2
	bl	.L1087	@ far jump
.L1159:
	.align	2, 0
.L1158:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlersCount
.L1013:
	ldr	r5, .L1160
	ldrb	r0, [r5]
	strb	r0, [r2]
	ldr	r2, .L1160+0x4
	ldrb	r0, [r5]
	mov	r7, #0x5c
	mov	r1, r0
	mul	r1, r1, r7
	add	r6, r2, #0
	add	r6, r6, #0x54
	add	r1, r1, r6
	ldr	r0, [r1]
	sub	r0, r0, #0x10
	str	r0, [r1]
	ldrb	r0, [r5]
	bl	WasUnableToUseMove
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L1015	@cond_branch
	ldrb	r0, [r5]
	bl	CancelMultiTurnMoves
	ldr	r1, .L1160+0x8
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L1016
.L1161:
	.align	2, 0
.L1160:
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleCommunication
.L1015:
	ldrb	r3, [r5]
	mov	r0, r3
	mul	r0, r0, r7
	add	r2, r0, r6
	ldr	r0, [r2]
	mov	r1, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1017	@cond_branch
	ldr	r0, .L1162
	strb	r4, [r0, #0x5]
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L1016
.L1163:
	.align	2, 0
.L1162:
	.word	gBattleCommunication
.L1017:
	ldr	r1, .L1164
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	add	r0, r3, #0
	bl	CancelMultiTurnMoves
.L1016:
	ldr	r0, .L1164+0x4
	bl	BattleScriptExecute
	mov	r3, #0x1
	mov	r9, r3
.L1006:
	mov	r6, r9
	cmp	r6, #0x2
	bne	.LCB9706
	b	.L943	@long jump
.LCB9706:
	b	.L1081
.L1165:
	.align	2, 0
.L1164:
	.word	gBattleCommunication
	.word	BattleScript_PrintUproarOverTurns
.L1020:
	ldr	r1, .L1166
	ldr	r4, .L1166+0x4
	ldrb	r0, [r4]
	mov	r7, #0x5c
	mul	r0, r0, r7
	add	r6, r1, #0
	add	r6, r6, #0x54
	add	r2, r0, r6
	ldr	r1, [r2]
	mov	r5, #0xc0
	lsl	r5, r5, #0x4
	add	r0, r1, #0
	and	r0, r0, r5
	cmp	r0, #0
	bne	.LCB9731
	b	.L1081	@long jump
.LCB9731:
	ldr	r3, .L1166+0x8
	add	r0, r1, r3
	str	r0, [r2]
	ldrb	r0, [r4]
	bl	WasUnableToUseMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1022	@cond_branch
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
	b	.L1081
.L1167:
	.align	2, 0
.L1166:
	.word	gBattleMons
	.word	gActiveBattler
	.word	-0x400
.L1022:
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r2, r0, r6
	ldr	r1, [r2]
	add	r0, r1, #0
	and	r0, r0, r5
	cmp	r0, #0
	beq	.LCB9766
	b	.L1081	@long jump
.LCB9766:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9771
	b	.L1081	@long jump
.LCB9771:
	ldr	r0, .L1168
	and	r1, r1, r0
	str	r1, [r2]
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r5, #0x7
	and	r0, r0, r5
	cmp	r0, #0
	beq	.LCB9783
	b	.L1081	@long jump
.LCB9783:
	ldr	r1, .L1168+0x4
	ldr	r0, .L1168+0x8
	strh	r0, [r1, #0x2e]
	mov	r0, #0x1
	mov	r1, #0x0
	bl	SetMoveEffect
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1026	@cond_branch
	ldr	r0, .L1168+0xc
	bl	BattleScriptExecute
.L1026:
	mov	r6, #0x1
	add	r9, r9, r6
	b	.L1081
.L1169:
	.align	2, 0
.L1168:
	.word	-0x1001
	.word	gBattleScripting
	.word	0x4007
	.word	BattleScript_ThrashConfuses
.L1027:
	ldr	r1, .L1170
	ldr	r0, .L1170+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x9
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1170+0x8
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L1028:
	ldr	r2, .L1170+0xc
	ldr	r1, .L1170+0x4
	ldrb	r3, [r1]
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r5, r0, r2
	ldrb	r0, [r5, #0xf]
	lsl	r0, r0, #0x1c
	add	r6, r1, #0
	add	r7, r2, #0
	cmp	r0, #0
	bne	.LCB9852
	b	.L1081	@long jump
.LCB9852:
	mov	r4, #0x0
	ldr	r2, .L1170
	mov	r0, #0x5c
	mov	r1, r3
	mul	r1, r1, r0
	add	r2, r2, #0xc
	add	r1, r1, r2
	ldrh	r0, [r5, #0x4]
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L1031	@cond_branch
	mov	ip, r7
	mov	r8, r2
	add	r5, r6, #0
	mov	r3, #0x5c
.L1032:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bhi	.L1031	@cond_branch
	ldrb	r2, [r5]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, ip
	lsl	r0, r4, #0x1
	mul	r2, r2, r3
	add	r0, r0, r2
	add	r0, r0, r8
	ldrh	r1, [r1, #0x4]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L1032	@cond_branch
.L1031:
	cmp	r4, #0x4
	bne	.L1036	@cond_branch
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x0
	strh	r1, [r0, #0x4]
	ldrb	r0, [r6]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r7
	ldrb	r2, [r1, #0xf]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0xf]
	b	.L1081
.L1171:
	.align	2, 0
.L1170:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gDisableStructs
.L1036:
	ldrb	r0, [r6]
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r7
	ldrb	r3, [r2, #0xf]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0xf]
	add	r2, r1, #0
	cmp	r2, #0
	beq	.LCB9962
	b	.L1081	@long jump
.LCB9962:
	ldrb	r0, [r6]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r7
	strh	r2, [r1, #0x4]
	ldr	r0, .L1172
	b	.L1092
.L1173:
	.align	2, 0
.L1172:
	.word	BattleScript_DisabledNoMore
.L1039:
	ldr	r6, .L1174
	ldr	r5, .L1174+0x4
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r0, r6
	ldrb	r4, [r2, #0x11]
	lsl	r3, r4, #0x1c
	cmp	r3, #0
	bne	.LCB9994
	b	.L1081	@long jump
.LCB9994:
	ldr	r0, .L1174+0x8
	mov	r8, r0
	ldrb	r0, [r2, #0x10]
	lsl	r0, r0, #0x1
	mov	r7, #0x5c
	mul	r1, r1, r7
	add	r0, r0, r1
	mov	r1, r8
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldrh	r1, [r2, #0x6]
	cmp	r0, r1
	beq	.L1041	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x6]
	ldrb	r0, [r5]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r2, [r1, #0x11]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
	b	.L1081
.L1175:
	.align	2, 0
.L1174:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	gBattleMons
.L1041:
	lsr	r1, r3, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r3, #0x10
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r2, #0x11]
	cmp	r1, #0
	beq	.L1044	@cond_branch
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mul	r1, r1, r7
	ldrb	r0, [r0, #0x10]
	add	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x25
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.LCB10072
	b	.L1081	@long jump
.LCB10072:
.L1044:
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mov	r1, #0x0
	strh	r1, [r0, #0x6]
	ldrb	r0, [r5]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r2, [r1, #0x11]
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
	ldr	r0, .L1176
	b	.L1098
.L1177:
	.align	2, 0
.L1176:
	.word	BattleScript_EncoredNoMore
.L1045:
	ldr	r1, .L1178
	ldr	r0, .L1178+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB10111
	b	.L1081	@long jump
.LCB10111:
	add	r0, r1, #0
	sub	r0, r0, #0x8
	str	r0, [r2]
	b	.L1081
.L1179:
	.align	2, 0
.L1178:
	.word	gStatuses3
	.word	gActiveBattler
.L1047:
	ldr	r2, .L1180
	ldr	r4, .L1180+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrb	r2, [r3, #0x15]
	lsl	r1, r2, #0x1c
	cmp	r1, #0
	bne	.LCB10138
	b	.L1081	@long jump
.LCB10138:
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x15]
	cmp	r1, #0
	beq	.LCB10153
	b	.L1081	@long jump
.LCB10153:
	ldr	r0, .L1180+0x8
	ldrb	r2, [r4]
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L1180+0xc
	and	r0, r0, r1
	str	r0, [r2]
	b	.L1081
.L1181:
	.align	2, 0
.L1180:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	gStatuses3
	.word	-0x201
.L1049:
	ldr	r2, .L1182
	ldr	r0, .L1182+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrb	r2, [r3, #0x16]
	lsl	r1, r2, #0x1c
	cmp	r1, #0
	bne	.LCB10187
	b	.L1081	@long jump
.LCB10187:
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x16]
	cmp	r1, #0
	beq	.LCB10202
	b	.L1081	@long jump
.LCB10202:
	ldr	r0, .L1182+0x8
	bl	BattleScriptExecute
	ldr	r1, .L1182+0xc
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	mov	r0, #0xd
	b	.L1099
.L1183:
	.align	2, 0
.L1182:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	BattleScript_BufferEndTurn
	.word	gBattleTextBuff1
.L1051:
	ldr	r5, .L1184
	ldr	r4, .L1184+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r2, r0, r5
	ldr	r1, [r2]
	mov	r3, #0xc0
	lsl	r3, r3, #0x5
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.LCB10240
	b	.L1081	@long jump
.LCB10240:
	ldr	r6, .L1184+0x8
	add	r0, r1, r6
	str	r0, [r2]
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.LCB10252
	b	.L1081	@long jump
.LCB10252:
	ldr	r3, .L1184+0xc
	mov	r6, #0x5c
	mov	r1, r2
	mul	r1, r1, r6
	add	r5, r3, #0
	add	r5, r5, #0x50
	add	r0, r1, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB10263
	b	.L1081	@long jump
.LCB10263:
	add	r0, r1, r3
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x48
	bne	.LCB10269
	b	.L1081	@long jump
.LCB10269:
	cmp	r0, #0xf
	bne	.LCB10271
	b	.L1081	@long jump
.LCB10271:
	add	r0, r2, #0
	bl	UproarWakeUpCheck
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB10278
	b	.L1081	@long jump
.LCB10278:
	ldrb	r0, [r4]
	bl	IsLeafGuardProtected
	cmp	r0, #0
	beq	.LCB10284
	b	.L1081	@long jump
.LCB10284:
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
	bl	Random
	ldrb	r1, [r4]
	mov	r2, r1
	mul	r2, r2, r6
	add	r2, r2, r5
	mov	r1, #0x3
	and	r1, r1, r0
	add	r1, r1, #0x2
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L1184+0x10
	ldrb	r0, [r4]
	strb	r0, [r1]
	ldr	r0, .L1184+0x14
	b	.L1092
.L1185:
	.align	2, 0
.L1184:
	.word	gStatuses3
	.word	gActiveBattler
	.word	-0x800
	.word	gBattleMons
	.word	gEffectBattler
	.word	BattleScript_YawnMakesAsleep
.L1054:
	ldr	r5, .L1186
	ldr	r4, .L1186+0x4
	ldrb	r3, [r4]
	lsl	r2, r3, #0x2
	add	r0, r2, r5
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB10343
	b	.L1081	@long jump
.LCB10343:
	ldr	r1, .L1186+0x8
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1057	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB10363
	b	.L1081	@long jump
.LCB10363:
.L1057:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	ldr	r2, .L1186+0xc
	and	r1, r1, r2
	str	r1, [r0]
	b	.L1081
.L1187:
	.align	2, 0
.L1186:
	.word	gStatuses3
	.word	gActiveBattler
	.word	gDisableStructs
	.word	-0x20000001
.L1058:
	ldr	r5, .L1188
	ldr	r4, .L1188+0x4
	ldrb	r3, [r4]
	lsl	r2, r3, #0x2
	add	r0, r2, r5
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB10394
	b	.L1081	@long jump
.LCB10394:
	ldr	r1, .L1188+0x8
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrb	r0, [r1, #0x1e]
	cmp	r0, #0
	beq	.L1061	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x1e]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB10412
	b	.L1081	@long jump
.LCB10412:
.L1061:
	ldrb	r2, [r4]
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldr	r0, [r2]
	ldr	r1, .L1188+0xc
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1188+0x10
	b	.L1097
.L1189:
	.align	2, 0
.L1188:
	.word	gStatuses3
	.word	gActiveBattler
	.word	gDisableStructs
	.word	-0x20001
	.word	BattleScript_EmbargoEndTurn
.L1062:
	ldr	r5, .L1190
	ldr	r4, .L1190+0x4
	ldrb	r3, [r4]
	lsl	r2, r3, #0x2
	add	r0, r2, r5
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB10447
	b	.L1081	@long jump
.LCB10447:
	ldr	r1, .L1190+0x8
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrb	r0, [r1, #0x1f]
	cmp	r0, #0
	beq	.L1065	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x1f]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB10465
	b	.L1081	@long jump
.LCB10465:
.L1065:
	ldrb	r2, [r4]
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldr	r0, [r2]
	ldr	r1, .L1190+0xc
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1190+0x10
	bl	BattleScriptExecute
	ldr	r1, .L1190+0x14
	mov	r2, #0x0
	mov	r0, #0xfd
	strb	r0, [r1]
	strb	r2, [r1, #0x1]
	mov	r0, #0xb1
	strb	r0, [r1, #0x2]
	mov	r0, #0x1
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
.L1093:
	mov	r1, #0x1
	add	r9, r9, r1
	b	.L1081
.L1191:
	.align	2, 0
.L1190:
	.word	gStatuses3
	.word	gActiveBattler
	.word	gDisableStructs
	.word	-0x4000001
	.word	BattleScript_BufferEndTurn
	.word	gBattleTextBuff1
.L1066:
	ldr	r5, .L1192
	ldr	r4, .L1192+0x4
	ldrb	r3, [r4]
	lsl	r2, r3, #0x2
	add	r0, r2, r5
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB10520
	b	.L1081	@long jump
.LCB10520:
	ldr	r1, .L1192+0x8
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1069	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB10540
	b	.L1081	@long jump
.LCB10540:
.L1069:
	ldrb	r2, [r4]
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldr	r0, [r2]
	ldr	r1, .L1192+0xc
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1192+0x10
.L1098:
	bl	BattleScriptExecute
.L1094:
	mov	r2, #0x1
	add	r9, r9, r2
	b	.L1081
.L1193:
	.align	2, 0
.L1192:
	.word	gStatuses3
	.word	gActiveBattler
	.word	gDisableStructs
	.word	-0x800001
	.word	BattleScript_TelekinesisEndTurn
.L1070:
	ldr	r5, .L1194
	ldr	r4, .L1194+0x4
	ldrb	r3, [r4]
	lsl	r2, r3, #0x2
	add	r0, r2, r5
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB10580
	b	.L1081	@long jump
.LCB10580:
	ldr	r1, .L1194+0x8
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1073	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB10600
	b	.L1081	@long jump
.LCB10600:
.L1073:
	ldrb	r2, [r4]
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldr	r0, [r2]
	ldr	r1, .L1194+0xc
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1194+0x10
	bl	BattleScriptExecute
	ldr	r1, .L1194+0x14
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	mov	r0, #0x79
.L1099:
	strb	r0, [r1, #0x2]
	mov	r0, #0x1
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
.L1095:
	mov	r3, #0x1
	add	r9, r9, r3
	b	.L1081
.L1195:
	.align	2, 0
.L1194:
	.word	gStatuses3
	.word	gActiveBattler
	.word	gDisableStructs
	.word	-0x8000001
	.word	BattleScript_BufferEndTurn
	.word	gBattleTextBuff1
.L1074:
	ldr	r0, .L1196
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	ldr	r6, .L1196+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x2
	and	r0, r0, r2
	ldr	r7, .L1196+0x8
	cmp	r0, #0
	beq	.L1075	@cond_branch
	mov	r0, #0x3
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r5, .L1196+0xc
	ldrb	r2, [r6]
	mov	r4, #0x5c
	mov	r3, r2
	mul	r3, r3, r4
	add	r3, r3, r5
	ldr	r1, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	ldr	r2, .L1196+0x10
	add	r1, r1, r2
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r3, r3, #0x22
	strb	r0, [r3]
	ldrb	r2, [r6]
	mov	r3, r2
	mul	r3, r3, r4
	add	r3, r3, r5
	ldr	r1, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	ldr	r6, .L1196+0x14
	add	r1, r1, r6
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r3, r3, #0x23
	strb	r0, [r3]
.L1075:
	ldr	r1, [r7]
	b	.L1091
.L1197:
	.align	2, 0
.L1196:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleMons
	.word	0x27a
	.word	0x27b
.L1076:
	ldr	r1, .L1198
	ldr	r0, .L1198+0x4
	ldrb	r2, [r0]
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldr	r0, [r2]
	ldr	r1, .L1198+0x8
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1198+0xc
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L1077:
	ldr	r1, .L1198+0x10
	ldr	r0, .L1198+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r0, [r2]
	ldr	r1, .L1198+0x14
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1198+0xc
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L1078:
	ldr	r2, .L1198+0x18
	ldr	r0, .L1198+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0x23
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1081	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1081	@cond_branch
	ldr	r0, .L1198+0x1c
.L1092:
	bl	BattleScriptExecute
.L1096:
	mov	r7, #0x1
	add	r9, r9, r7
	b	.L1081
.L1199:
	.align	2, 0
.L1198:
	.word	gStatuses3
	.word	gActiveBattler
	.word	-0x40000001
	.word	gBattleStruct
	.word	gBattleMons
	.word	-0x4001
	.word	gDisableStructs
	.word	BattleScript_ThroatChopEndTurn
.L1080:
	ldr	r2, .L1200
	ldr	r0, .L1200+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrb	r0, [r1, #0x1d]
	cmp	r0, #0
	beq	.L1081	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x1d]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1081	@cond_branch
	cmp	r7, #0x70
	bne	.L1081	@cond_branch
	ldr	r0, .L1200+0x8
.L1097:
	bl	BattleScriptExecute
	mov	r0, #0x1
	add	r9, r9, r0
.L1081:
	ldr	r0, .L1200+0xc
	ldr	r1, [r0]
.L1091:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L943
.L1201:
	.align	2, 0
.L1200:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	BattleScript_SlowStartEnds
	.word	gBattleStruct
.L1082:
	ldr	r2, .L1202
	ldr	r1, [r2]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
.L943:
	mov	r1, r9
	cmp	r1, #0
	beq	.L938	@cond_branch
.L1087:
	mov	r2, r9
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	b	.L1088
.L1203:
	.align	2, 0
.L1202:
	.word	gBattleStruct
.L938:
	ldr	r5, .L1204
	ldr	r2, [r5]
	ldr	r1, .L1204+0x4
	ldrb	r0, [r2, #0x1]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L939	@cond_branch
	ldrb	r0, [r2]
	cmp	r0, #0x20
	bhi	.LCB10881
	bl	.L940	@far jump
.LCB10881:
.L939:
	ldr	r0, .L1204+0x8
	ldr	r1, [r0]
	ldr	r2, .L1204+0xc
	and	r1, r1, r2
	str	r1, [r0]
	mov	r0, #0x0
.L1088:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1205:
	.align	2, 0
.L1204:
	.word	gBattleStruct
	.word	gBattlersCount
	.word	gHitMarker
	.word	-0x1000021
.Lfe41:
	.size	 DoBattlerEndTurnEffects,.Lfe41-DoBattlerEndTurnEffects
	.align	2, 0
	.globl	HandleWishPerishSongOnTurnEnd
	.type	 HandleWishPerishSongOnTurnEnd,function
	.thumb_func
HandleWishPerishSongOnTurnEnd:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r2, .L1241
	ldr	r0, [r2]
	ldr	r1, .L1241+0x4
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L1241+0x8
	ldr	r3, [r1]
	mov	r4, #0xce
	lsl	r4, r4, #0x1
	add	r0, r3, r4
	ldrb	r0, [r0]
	add	r6, r1, #0
	cmp	r0, #0x1
	bne	.LCB10930
	b	.L1218	@long jump
.LCB10930:
	cmp	r0, #0x1
	bgt	.L1236	@cond_branch
	cmp	r0, #0
	beq	.L1208	@cond_branch
	b	.L1207
.L1242:
	.align	2, 0
.L1241:
	.word	gHitMarker
	.word	0x1000020
	.word	gBattleStruct
.L1236:
	cmp	r0, #0x2
	bne	.LCB10947
	b	.L1227	@long jump
.LCB10947:
	b	.L1207
.L1208:
	ldr	r2, .L1243
	add	r0, r3, r2
	ldr	r1, .L1243+0x4
	ldrb	r0, [r0]
	mov	r8, r1
	ldrb	r7, [r1]
	cmp	r0, r7
	bcc	.LCB10966
	b	.L1210	@long jump
.LCB10966:
	ldr	r4, .L1243+0x8
	ldr	r7, .L1243+0xc
	mov	r0, #0x8
	neg	r0, r0
	add	r0, r0, r7
	mov	sl, r0
	ldr	r5, .L1243+0x10
.L1211:
	ldr	r0, [r6]
	add	r3, r0, r2
	ldrb	r0, [r3]
	strb	r0, [r4]
	ldr	r0, .L1243+0x14
	ldrb	r1, [r0]
	ldr	r2, .L1243+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1212	@cond_branch
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	b	.L1209
.L1244:
	.align	2, 0
.L1243:
	.word	0x19d
	.word	gBattlersCount
	.word	gActiveBattler
	.word	gWishFutureKnock+0x8
	.word	gBattleTextBuff1
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L1212:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	ldr	r1, .L1245
	ldrb	r0, [r4]
	add	r2, r0, r1
	ldrb	r0, [r2]
	mov	r9, r1
	cmp	r0, #0
	bne	.LCB11023
	b	.L1209	@long jump
.LCB11023:
	sub	r0, r0, #0x1
	strb	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	bne	.L1209	@cond_branch
	ldr	r1, .L1245+0x4
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L1209	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0xf8
	bne	.L1214	@cond_branch
	ldr	r0, .L1245+0x8
	strb	r3, [r0, #0x5]
	b	.L1215
.L1246:
	.align	2, 0
.L1245:
	.word	gWishFutureKnock
	.word	gBattleMons
	.word	gBattleCommunication
.L1214:
	ldr	r1, .L1247
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L1215:
	mov	r0, #0xfd
	strb	r0, [r5]
	mov	r6, #0x2
	mov	r0, #0x2
	strb	r0, [r5, #0x1]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	strb	r0, [r5, #0x2]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r5, #0x3]
	mov	r0, #0xff
	strb	r0, [r5, #0x4]
	ldr	r5, .L1247+0x4
	ldrb	r0, [r4]
	strb	r0, [r5]
	ldr	r1, .L1247+0x8
	mov	r0, sl
	add	r0, r0, #0x4
	ldrb	r2, [r4]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r2, .L1247+0xc
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, #0x8
	add	r0, r0, r2
	ldr	r1, .L1247+0x10
	str	r1, [r0]
	ldr	r1, .L1247+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldrh	r0, [r1]
	ldrb	r1, [r4]
	bl	SetTypeBeforeUsingMove
	ldr	r0, .L1247+0x18
	bl	BattleScriptExecute
	ldrb	r1, [r4]
	mov	r3, sl
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB11134
	b	.L1240	@long jump
.LCB11134:
	eor	r1, r1, r6
	mov	r4, r9
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB11144
	b	.L1240	@long jump
.LCB11144:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	ldr	r2, .L1247+0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r0]
	mov	r2, #0x41
	neg	r2, r2
	and	r1, r1, r2
	str	r1, [r0]
	b	.L1240
.L1248:
	.align	2, 0
.L1247:
	.word	gBattleCommunication
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gSpecialStatuses
	.word	0xffff
	.word	gCurrentMove
	.word	BattleScript_MonTookFutureAttack
	.word	gSideStatuses
.L1209:
	ldr	r0, [r6]
	ldr	r2, .L1249
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r1, r8
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.LCB11196
	b	.L1211	@long jump
.LCB11196:
.L1210:
	ldr	r0, [r6]
	mov	r2, #0xce
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	mov	r2, #0x0
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, [r6]
	ldr	r3, .L1249
	add	r0, r0, r3
	strb	r2, [r0]
.L1218:
	add	r3, r6, #0
	ldr	r0, [r6]
	ldr	r2, .L1249
	add	r0, r0, r2
	ldr	r1, .L1249+0x4
	ldrb	r0, [r0]
	mov	r8, r1
	ldrb	r4, [r1]
	cmp	r0, r4
	bcc	.LCB11230
	b	.L1220	@long jump
.LCB11230:
	ldr	r5, .L1249+0x8
	ldr	r4, .L1249+0xc
	ldr	r7, .L1249+0x10
	mov	ip, r7
	ldr	r0, .L1249+0x14
	mov	r9, r0
.L1221:
	ldr	r1, .L1249+0x18
	ldr	r0, [r3]
	add	r3, r0, r2
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, r9
	strb	r0, [r1]
	strb	r0, [r5]
	ldr	r0, .L1249+0x1c
	ldrb	r1, [r0]
	ldr	r2, .L1249+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1222	@cond_branch
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	b	.L1219
.L1250:
	.align	2, 0
.L1249:
	.word	0x19d
	.word	gBattlersCount
	.word	gActiveBattler
	.word	gBattleTextBuff1
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L1222:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	ldr	r7, .L1251
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1219	@cond_branch
	mov	r0, #0xfd
	strb	r0, [r4]
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	strb	r0, [r4, #0x3]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	ldrb	r0, [r0, #0x12]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	strb	r0, [r4, #0x4]
	mov	r0, #0xff
	strb	r0, [r4, #0x5]
	ldrb	r0, [r5]
	lsl	r2, r0, #0x2
	add	r0, r2, r0
	lsl	r0, r0, #0x3
	mov	r3, ip
	add	r4, r0, r3
	ldrb	r3, [r4, #0x12]
	lsl	r1, r3, #0x1c
	cmp	r1, #0
	bne	.L1224	@cond_branch
	add	r2, r2, r7
	ldr	r0, [r2]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r3, .L1251+0x4
	ldr	r2, .L1251+0x8
	ldrb	r1, [r5]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	str	r0, [r3]
	ldr	r1, .L1251+0xc
	ldr	r0, .L1251+0x10
	b	.L1239
.L1252:
	.align	2, 0
.L1251:
	.word	gStatuses3
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PerishSongTakesLife
.L1224:
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r7, #0x10
	neg	r7, r7
	add	r0, r7, #0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r4, #0x12]
	ldr	r1, .L1253
	ldr	r0, .L1253+0x4
.L1239:
	str	r0, [r1]
	ldr	r0, [r1]
	bl	BattleScriptExecute
.L1240:
	mov	r0, #0x1
	b	.L1237
.L1254:
	.align	2, 0
.L1253:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PerishSongCountGoesDown
.L1219:
	add	r3, r6, #0
	ldr	r0, [r6]
	ldr	r2, .L1255
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r1, r8
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.LCB11410
	b	.L1221	@long jump
.LCB11410:
.L1220:
	ldr	r0, [r6]
	mov	r2, #0xce
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0]
	ldr	r0, [r6]
	ldr	r3, .L1255
	add	r1, r0, r3
	mov	r0, #0x0
	strb	r0, [r1]
.L1227:
	ldr	r0, .L1255+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1207	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, #0xd6
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L1207	@cond_branch
	ldr	r1, .L1255+0x8
	ldrh	r0, [r1, #0x2a]
	cmp	r0, #0
	beq	.L1207	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x86
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L1207	@cond_branch
	mov	r4, #0x0
.L1232:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	CancelMultiTurnMoves
	add	r4, r4, #0x1
	cmp	r4, #0x1
	ble	.L1232	@cond_branch
	ldr	r1, .L1255+0xc
	ldr	r0, .L1255+0x10
	str	r0, [r1]
	bl	BattleScriptExecute
	ldr	r0, .L1255+0x14
	ldr	r1, [r0]
	mov	r4, #0xce
	lsl	r4, r4, #0x1
	add	r1, r1, r4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L1240
.L1256:
	.align	2, 0
.L1255:
	.word	0x19d
	.word	gBattleTypeFlags
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ArenaDoJudgment
	.word	gBattleStruct
.L1207:
	ldr	r7, .L1257
	ldr	r0, [r7]
	ldr	r1, .L1257+0x4
	and	r0, r0, r1
	str	r0, [r7]
	mov	r0, #0x0
.L1237:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1258:
	.align	2, 0
.L1257:
	.word	gHitMarker
	.word	-0x1000021
.Lfe42:
	.size	 HandleWishPerishSongOnTurnEnd,.Lfe42-HandleWishPerishSongOnTurnEnd
	.align	2, 0
	.globl	HandleFaintedMonActions
	.type	 HandleFaintedMonActions,function
	.thumb_func
HandleFaintedMonActions:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1312
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1260	@cond_branch
	b	.L1307
.L1313:
	.align	2, 0
.L1312:
	.word	gBattleTypeFlags
.L1303:
	ldr	r0, .L1314
	bl	BattleScriptExecute
	ldr	r0, [r4]
	add	r0, r0, #0x4d
	mov	r1, #0x2
	b	.L1308
.L1315:
	.align	2, 0
.L1314:
	.word	BattleScript_GiveExp
.L1305:
	ldr	r0, .L1316
	bl	BattleScriptExecute
	ldr	r0, [r4]
	add	r0, r0, #0x4d
	mov	r1, #0x5
.L1308:
	strb	r1, [r0]
.L1309:
	mov	r0, #0x1
	b	.L1302
.L1317:
	.align	2, 0
.L1316:
	.word	BattleScript_HandleFaintedMon
.L1260:
	ldr	r2, .L1318
.L1261:
	ldr	r0, [r2]
	add	r0, r0, #0x4d
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bls	.LCB11592
	b	.L1263	@long jump
.LCB11592:
	lsl	r0, r0, #0x2
	ldr	r1, .L1318+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1319:
	.align	2, 0
.L1318:
	.word	gBattleStruct
	.word	.L1298
	.align	2, 0
	.align	2, 0
.L1298:
	.word	.L1265
	.word	.L1272
	.word	.L1279
	.word	.L1283
	.word	.L1285
	.word	.L1292
	.word	.L1295
	.word	.L1263
.L1265:
	ldr	r0, [r2]
	add	r0, r0, #0x4e
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, [r2]
	add	r1, r1, #0x4d
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r5, #0x0
	ldr	r0, .L1320
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L1272	@cond_branch
	ldr	r6, .L1320+0x4
.L1269:
	ldrb	r0, [r6]
	ldr	r2, .L1320+0x8
	lsl	r1, r5, #0x2
	add	r1, r1, r2
	ldr	r4, [r1]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1268	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1268	@cond_branch
	ldrb	r0, [r6]
	bic	r0, r0, r4
	strb	r0, [r6]
.L1268:
	add	r5, r5, #0x1
	ldr	r0, .L1320
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L1269	@cond_branch
.L1272:
	ldr	r0, .L1320+0xc
	mov	ip, r0
	ldr	r7, .L1320+0x10
	ldr	r4, .L1320+0x14
	ldr	r6, .L1320+0x18
	ldr	r5, .L1320+0x1c
.L1273:
	ldr	r2, [r4]
	add	r1, r2, #0
	add	r1, r1, #0x4e
	ldrb	r0, [r1]
	strb	r0, [r7]
	mov	r3, ip
	strb	r0, [r3]
	ldrb	r3, [r1]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L1275	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xd8
	ldrb	r1, [r0]
	ldr	r2, .L1320+0x8
	lsl	r0, r3, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1275	@cond_branch
	ldr	r0, .L1320+0x4
	ldrb	r1, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB11712
	b	.L1303	@long jump
.LCB11712:
.L1275:
	ldr	r0, [r4]
	add	r0, r0, #0x4e
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L1320
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L1273	@cond_branch
	ldr	r0, .L1320+0x14
	ldr	r0, [r0]
	add	r0, r0, #0x4d
	mov	r1, #0x3
	strb	r1, [r0]
	b	.L1263
.L1321:
	.align	2, 0
.L1320:
	.word	gBattlersCount
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlerFainted
	.word	gBattlerTarget
	.word	gBattleStruct
	.word	gBattleMons
	.word	gBattlerPartyIndexes
.L1279:
	ldr	r0, .L1322
	ldrb	r0, [r0]
	bl	OpponentSwitchInResetSentPokesToOpponentValue
	ldr	r2, .L1322+0x4
	ldr	r1, [r2]
	add	r1, r1, #0x4e
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L1322+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L1280	@cond_branch
	ldr	r0, [r2]
	add	r0, r0, #0x4d
	mov	r1, #0x3
	b	.L1310
.L1323:
	.align	2, 0
.L1322:
	.word	gBattlerFainted
	.word	gBattleStruct
	.word	gBattlersCount
.L1280:
	ldr	r0, [r2]
	add	r0, r0, #0x4d
	mov	r1, #0x1
.L1310:
	strb	r1, [r0]
	ldr	r0, .L1324
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB11798
	b	.L1263	@long jump
.LCB11798:
	bl	NoAliveMonsForEitherParty
	cmp	r0, #0
	beq	.LCB11802
	b	.L1263	@long jump
.LCB11802:
	ldr	r0, .L1324+0x4
	ldr	r1, .L1324+0x8
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.LCB11813
	b	.L1263	@long jump
.LCB11813:
	ldr	r2, .L1324+0xc
	ldr	r1, .L1324+0x10
	ldr	r0, .L1324+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L1307
.L1325:
	.align	2, 0
.L1324:
	.word	gBattleOutcome
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlerFainted
.L1283:
	ldr	r0, .L1326
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1284	@cond_branch
	bl	NoAliveMonsForEitherParty
	cmp	r0, #0
	bne	.L1284	@cond_branch
	ldr	r0, .L1326+0x4
	ldr	r1, .L1326+0x8
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L1307	@cond_branch
.L1284:
	ldr	r2, .L1326+0xc
	ldr	r0, [r2]
	add	r0, r0, #0x4e
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, [r2]
	add	r1, r1, #0x4d
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L1285:
	ldr	r0, .L1326+0x10
	mov	ip, r0
	ldr	r7, .L1326+0x14
	ldr	r4, .L1326+0xc
	ldr	r6, .L1326+0x18
	ldr	r5, .L1326+0x1c
.L1286:
	ldr	r0, [r4]
	add	r3, r0, #0
	add	r3, r3, #0x4e
	ldrb	r0, [r3]
	strb	r0, [r7]
	mov	r1, ip
	strb	r0, [r1]
	ldrb	r2, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.L1288	@cond_branch
	ldr	r0, .L1326+0x20
	ldrb	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB11905
	b	.L1305	@long jump
.LCB11905:
.L1288:
	add	r0, r2, #0x1
	strb	r0, [r3]
	ldr	r1, .L1326+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L1286	@cond_branch
	ldr	r0, .L1326+0xc
	ldr	r0, [r0]
	b	.L1311
.L1327:
	.align	2, 0
.L1326:
	.word	gBattleOutcome
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	gBattleStruct
	.word	gBattlerFainted
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBitTable
	.word	gAbsentBattlerFlags
.L1292:
	ldr	r2, .L1328
	ldr	r0, [r2]
	add	r0, r0, #0x4e
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L1328+0x4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L1293	@cond_branch
	ldr	r0, [r2]
.L1311:
	add	r0, r0, #0x4d
	mov	r1, #0x6
	strb	r1, [r0]
	b	.L1263
.L1329:
	.align	2, 0
.L1328:
	.word	gBattleStruct
	.word	gBattlersCount
.L1293:
	ldr	r0, [r2]
	add	r0, r0, #0x4d
	mov	r1, #0x4
	strb	r1, [r0]
	b	.L1263
.L1295:
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x1
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB11991
	b	.L1309	@long jump
.LCB11991:
	ldr	r0, .L1330
	ldr	r1, [r0]
	add	r1, r1, #0x4d
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L1263:
	ldr	r0, .L1330
	ldr	r1, [r0]
	add	r1, r1, #0x4d
	ldrb	r1, [r1]
	add	r2, r0, #0
	cmp	r1, #0x7
	beq	.LCB12008
	b	.L1261	@long jump
.LCB12008:
.L1307:
	mov	r0, #0x0
.L1302:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1331:
	.align	2, 0
.L1330:
	.word	gBattleStruct
.Lfe43:
	.size	 HandleFaintedMonActions,.Lfe43-HandleFaintedMonActions
	.align	2, 0
	.globl	TryClearRageAndFuryCutter
	.type	 TryClearRageAndFuryCutter,function
	.thumb_func
TryClearRageAndFuryCutter:
	push	{r4, r5, r6, r7, lr}
	mov	r5, #0x0
	ldr	r0, .L1340
	add	r6, r0, #0
	ldrb	r0, [r6]
	cmp	r5, r0
	bge	.L1334	@cond_branch
	ldr	r7, .L1340+0x4
	ldr	r0, .L1340+0x8
	add	r4, r0, #0
	add	r4, r4, #0x13
	ldr	r3, .L1340+0xc
.L1336:
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r2, r0, r7
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1337	@cond_branch
	ldrh	r0, [r3]
	cmp	r0, #0x63
	beq	.L1337	@cond_branch
	ldr	r0, .L1340+0x10
	and	r1, r1, r0
	str	r1, [r2]
.L1337:
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L1335	@cond_branch
	ldrh	r0, [r3]
	cmp	r0, #0xd2
	beq	.L1335	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4]
.L1335:
	add	r4, r4, #0x28
	add	r3, r3, #0x2
	add	r5, r5, #0x1
	ldrb	r0, [r6]
	cmp	r5, r0
	blt	.L1336	@cond_branch
.L1334:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1341:
	.align	2, 0
.L1340:
	.word	gBattlersCount
	.word	gBattleMons+0x54
	.word	gDisableStructs
	.word	gChosenMoveByBattler
	.word	-0x800001
.Lfe44:
	.size	 TryClearRageAndFuryCutter,.Lfe44-TryClearRageAndFuryCutter
	.align	2, 0
	.globl	AtkCanceller_UnableToUseMove
	.type	 AtkCanceller_UnableToUseMove,function
	.thumb_func
AtkCanceller_UnableToUseMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, .L1433
	mov	sl, r1
	ldr	r2, .L1433+0x4
	mov	r8, r2
	b	.L1343
.L1434:
	.align	2, 0
.L1433:
	.word	gBattleScripting+0x4
	.word	gBattleStruct
.L1423:
	cmp	r0, #0x15
	bne	.LCB12141
	bl	.L1344	@far jump
.LCB12141:
	mov	r3, r9
	cmp	r3, #0
	beq	.LCB12144
	bl	.L1344	@far jump
.LCB12144:
.L1343:
	mov	r4, r8
	ldr	r0, [r4]
	ldr	r7, .L1435
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r0, #0x13
	bls	.LCB12155
	bl	.L1345	@far jump
.LCB12155:
	lsl	r0, r0, #0x2
	ldr	r1, .L1435+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1436:
	.align	2, 0
.L1435:
	.word	0x19f
	.word	.L1419
	.align	2, 0
	.align	2, 0
.L1419:
	.word	.L1347
	.word	.L1348
	.word	.L1359
	.word	.L1365
	.word	.L1367
	.word	.L1369
	.word	.L1371
	.word	.L1375
	.word	.L1373
	.word	.L1377
	.word	.L1379
	.word	.L1381
	.word	.L1387
	.word	.L1389
	.word	.L1393
	.word	.L1400
	.word	.L1404
	.word	.L1411
	.word	.L1416
	.word	.L1345
.L1347:
	ldr	r1, .L1437
	ldr	r3, .L1437+0x4
	ldrb	r2, [r3]
	mov	r0, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r0, [r2]
	ldr	r1, .L1437+0x8
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1437+0xc
	ldrb	r2, [r3]
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L1437+0x10
	and	r0, r0, r1
	str	r0, [r2]
	bl	.L1412	@ far jump
.L1438:
	.align	2, 0
.L1437:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	-0x2000001
	.word	gStatuses3
	.word	-0x4001
.L1348:
	ldr	r7, .L1439
	ldr	r4, .L1439+0x4
	ldrb	r1, [r4]
	mov	r5, #0x5c
	mov	r0, r1
	mul	r0, r0, r5
	add	r6, r7, #0
	add	r6, r6, #0x50
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r3, #0x7
	mov	r8, r3
	and	r0, r0, r3
	cmp	r0, #0
	bne	.LCB12222
	b	.L1349	@long jump
.LCB12222:
	add	r0, r1, #0
	bl	UproarWakeUpCheck
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1350	@cond_branch
	ldrb	r0, [r4]
	mov	r2, r0
	mul	r2, r2, r5
	add	r2, r2, r6
	ldr	r0, [r2]
	mov	r1, #0x8
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r4]
	mov	r2, r0
	mul	r2, r2, r5
	add	r0, r7, #0
	add	r0, r0, #0x54
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L1439+0x8
	and	r0, r0, r1
	str	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L1439+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	ldr	r1, .L1439+0x10
	ldr	r0, .L1439+0x14
	str	r0, [r1]
	mov	r4, #0x2
	mov	r9, r4
	b	.L1349
.L1440:
	.align	2, 0
.L1439:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	-0x8000001
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedWokeUp
.L1350:
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r5
	add	r0, r1, r7
	ldrh	r0, [r0, #0x20]
	mov	r3, #0x1
	cmp	r0, #0x30
	bne	.L1352	@cond_branch
	mov	r3, #0x2
.L1352:
	add	r2, r1, r6
	ldr	r1, [r2]
	add	r0, r1, #0
	mov	r7, r8
	and	r0, r0, r7
	cmp	r0, r3
	bcs	.L1354	@cond_branch
	mov	r0, #0x8
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	b	.L1355
.L1354:
	sub	r0, r1, r3
	str	r0, [r2]
.L1355:
	ldr	r2, .L1441
	ldr	r0, .L1441+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r0, r1, r0
	ldr	r4, [r0]
	mov	r0, #0x7
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L1356	@cond_branch
	ldr	r0, .L1441+0x8
	ldrh	r0, [r0]
	cmp	r0, #0xad
	beq	.L1349	@cond_branch
	cmp	r0, #0xd6
	beq	.L1349	@cond_branch
	ldr	r1, .L1441+0xc
	ldr	r0, .L1441+0x10
	str	r0, [r1]
	ldr	r2, .L1441+0x14
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x2
	mov	r9, r0
	b	.L1349
.L1442:
	.align	2, 0
.L1441:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsAsleep
	.word	gHitMarker
.L1356:
	add	r2, r2, #0x54
	add	r2, r1, r2
	ldr	r0, [r2]
	ldr	r1, .L1443
	and	r0, r0, r1
	str	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r0, .L1443+0x4
	strb	r4, [r0, #0x5]
	ldr	r1, .L1443+0x8
	ldr	r0, .L1443+0xc
	str	r0, [r1]
	mov	r1, #0x2
	mov	r9, r1
.L1349:
	ldr	r1, .L1443+0x10
	ldr	r0, [r1]
	ldr	r3, .L1443+0x14
	add	r2, r0, r3
	bl	.L1426	@ far jump
.L1444:
	.align	2, 0
.L1443:
	.word	-0x8000001
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedWokeUp
	.word	gBattleStruct
	.word	0x19f
.L1359:
	ldr	r1, .L1445
	ldr	r7, .L1445+0x4
	ldrb	r0, [r7]
	mov	r6, #0x5c
	mul	r0, r0, r6
	add	r5, r1, #0
	add	r5, r5, #0x50
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB12395
	bl	.L1412	@far jump
.LCB12395:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	beq	.L1361	@cond_branch
	ldr	r2, .L1445+0x8
	ldr	r0, .L1445+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, #0x7d
	bne	.LCB12421
	bl	.L1417	@far jump
.LCB12421:
	ldr	r1, .L1445+0x10
	ldr	r0, .L1445+0x14
	str	r0, [r1]
	ldr	r2, .L1445+0x18
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L1364
.L1446:
	.align	2, 0
.L1445:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsFrozen
	.word	gHitMarker
.L1361:
	ldrb	r0, [r7]
	mov	r2, r0
	mul	r2, r2, r6
	add	r2, r2, r5
	ldr	r0, [r2]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L1447
	ldr	r0, .L1447+0x4
	str	r0, [r1]
	ldr	r0, .L1447+0x8
	strb	r4, [r0, #0x5]
.L1364:
	mov	r7, #0x2
	b	.L1430
.L1448:
	.align	2, 0
.L1447:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedUnfroze
	.word	gBattleCommunication
.L1365:
	ldr	r1, .L1449
	ldr	r4, .L1449+0x4
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x36
	beq	.LCB12489
	bl	.L1417	@far jump
.LCB12489:
	ldr	r0, .L1449+0x8
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1a]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.LCB12501
	bl	.L1417	@far jump
.LCB12501:
	add	r0, r2, #0
	bl	CancelMultiTurnMoves
	ldr	r2, .L1449+0xc
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L1449+0x10
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	ldr	r1, .L1449+0x14
	ldrb	r0, [r4]
	strb	r0, [r1]
	ldr	r1, .L1449+0x18
	ldr	r0, .L1449+0x1c
	str	r0, [r1]
	ldr	r2, .L1449+0x20
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	.L1431	@ far jump
.L1450:
	.align	2, 0
.L1449:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleCommunication
	.word	gBattlerAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TruantLoafingAround
	.word	gMoveResultFlags
.L1367:
	ldr	r1, .L1451
	ldr	r3, .L1451+0x4
	ldrb	r2, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1368	@cond_branch
	ldr	r0, .L1451+0x8
	and	r1, r1, r0
	str	r1, [r2]
	ldr	r2, .L1451+0xc
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x1b]
	ldrb	r0, [r3]
	bl	CancelMultiTurnMoves
	ldr	r1, .L1451+0x10
	ldr	r0, .L1451+0x14
	str	r0, [r1]
	ldr	r2, .L1451+0x18
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r7, #0x1
	mov	r9, r7
.L1368:
	ldr	r1, .L1451+0x1c
	ldr	r0, [r1]
	ldr	r3, .L1451+0x20
	add	r2, r0, r3
	bl	.L1426	@ far jump
.L1452:
	.align	2, 0
.L1451:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	-0x400001
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedMustRecharge
	.word	gHitMarker
	.word	gBattleStruct
	.word	0x19f
.L1369:
	ldr	r1, .L1453
	ldr	r3, .L1453+0x4
	ldrb	r2, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1370	@cond_branch
	ldr	r0, .L1453+0x8
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x2]
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r2, #0x2]
	ldrb	r0, [r3]
	bl	CancelMultiTurnMoves
	ldr	r1, .L1453+0xc
	ldr	r0, .L1453+0x10
	str	r0, [r1]
	ldr	r2, .L1453+0x14
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r4, #0x1
	mov	r9, r4
.L1370:
	ldr	r1, .L1453+0x18
	ldr	r0, [r1]
	ldr	r7, .L1453+0x1c
	add	r2, r0, r7
	bl	.L1426	@ far jump
.L1454:
	.align	2, 0
.L1453:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedFlinched
	.word	gHitMarker
	.word	gBattleStruct
	.word	0x19f
.L1371:
	ldr	r0, .L1455
	ldr	r3, .L1455+0x4
	ldrb	r2, [r3]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1455+0x8
	ldrh	r1, [r1, #0x4]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L1372	@cond_branch
	cmp	r1, #0
	beq	.L1372	@cond_branch
	ldr	r0, .L1455+0xc
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x2]
	ldr	r1, .L1455+0x10
	ldrb	r0, [r3]
	strb	r0, [r1, #0x17]
	ldrb	r0, [r3]
	bl	CancelMultiTurnMoves
	ldr	r1, .L1455+0x14
	ldr	r0, .L1455+0x18
	str	r0, [r1]
	ldr	r2, .L1455+0x1c
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x1
	mov	r9, r0
.L1372:
	ldr	r1, .L1455+0x20
	ldr	r0, [r1]
	ldr	r3, .L1455+0x24
	add	r2, r0, r3
	b	.L1426
.L1456:
	.align	2, 0
.L1455:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsDisabled
	.word	gHitMarker
	.word	gBattleStruct
	.word	0x19f
.L1373:
	ldr	r1, .L1457
	ldr	r4, .L1457+0x4
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1374	@cond_branch
	ldr	r0, .L1457+0x8
	ldrh	r1, [r0]
	add	r0, r2, #0
	bl	IsHealBlockPreventingMove
	cmp	r0, #0
	beq	.L1374	@cond_branch
	ldr	r0, .L1457+0xc
	ldrb	r2, [r4]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x3]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x3]
	ldr	r1, .L1457+0x10
	ldrb	r0, [r4]
	strb	r0, [r1, #0x17]
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
	ldr	r1, .L1457+0x14
	ldr	r0, .L1457+0x18
	str	r0, [r1]
	ldr	r2, .L1457+0x1c
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r4, #0x1
	mov	r9, r4
.L1374:
	ldr	r1, .L1457+0x20
	ldr	r0, [r1]
	ldr	r7, .L1457+0x24
	add	r2, r0, r7
	b	.L1426
.L1458:
	.align	2, 0
.L1457:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedHealBlockPrevents
	.word	gHitMarker
	.word	gBattleStruct
	.word	0x19f
.L1375:
	ldr	r0, .L1459
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1376	@cond_branch
	ldr	r0, .L1459+0x4
	ldrh	r0, [r0]
	bl	IsGravityPreventingMove
	cmp	r0, #0
	beq	.L1376	@cond_branch
	ldr	r0, .L1459+0x8
	ldr	r3, .L1459+0xc
	ldrb	r2, [r3]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x3]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x3]
	ldr	r1, .L1459+0x10
	ldrb	r0, [r3]
	strb	r0, [r1, #0x17]
	ldrb	r0, [r3]
	bl	CancelMultiTurnMoves
	ldr	r1, .L1459+0x14
	ldr	r0, .L1459+0x18
	str	r0, [r1]
	ldr	r2, .L1459+0x1c
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x1
	mov	r9, r0
.L1376:
	ldr	r1, .L1459+0x20
	ldr	r0, [r1]
	ldr	r3, .L1459+0x24
	add	r2, r0, r3
	b	.L1426
.L1460:
	.align	2, 0
.L1459:
	.word	gFieldStatuses
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedGravityPrevents
	.word	gHitMarker
	.word	gBattleStruct
	.word	0x19f
.L1377:
	ldr	r0, .L1461
	ldr	r4, .L1461+0x4
	ldrb	r3, [r4]
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x16]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L1378	@cond_branch
	ldr	r2, .L1461+0x8
	ldr	r0, .L1461+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L1378	@cond_branch
	ldr	r0, .L1461+0x10
	lsl	r2, r3, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x2]
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
	ldr	r1, .L1461+0x14
	ldr	r0, .L1461+0x18
	str	r0, [r1]
	ldr	r2, .L1461+0x1c
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r4, #0x1
	mov	r9, r4
.L1378:
	ldr	r1, .L1461+0x20
	ldr	r0, [r1]
	ldr	r7, .L1461+0x24
	add	r2, r0, r7
	b	.L1426
.L1462:
	.align	2, 0
.L1461:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsTaunted
	.word	gHitMarker
	.word	gBattleStruct
	.word	0x19f
.L1379:
	ldr	r4, .L1463
	ldrb	r0, [r4]
	ldr	r1, .L1463+0x4
	ldrh	r1, [r1]
	bl	GetImprisonedMovesCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1380	@cond_branch
	ldr	r0, .L1463+0x8
	ldrb	r2, [r4]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
	ldr	r1, .L1463+0xc
	ldr	r0, .L1463+0x10
	str	r0, [r1]
	ldr	r2, .L1463+0x14
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x1
	mov	r9, r0
.L1380:
	ldr	r1, .L1463+0x18
	ldr	r0, [r1]
	ldr	r3, .L1463+0x1c
	add	r2, r0, r3
	b	.L1426
.L1464:
	.align	2, 0
.L1463:
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsImprisoned
	.word	gHitMarker
	.word	gBattleStruct
	.word	0x19f
.L1381:
	ldr	r1, .L1465
	ldr	r6, .L1465+0x4
	ldrb	r0, [r6]
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r1, r1, #0x54
	add	r3, r0, r1
	ldr	r2, [r3]
	mov	r4, #0x7
	add	r0, r2, #0
	and	r0, r0, r4
	cmp	r0, #0
	bne	.LCB13003
	b	.L1412	@long jump
.LCB13003:
	sub	r0, r2, #0x1
	str	r0, [r3]
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1383	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	bne	.L1384	@cond_branch
	ldr	r0, .L1465+0x8
	mov	r3, #0x1
	strb	r3, [r0, #0x5]
	ldr	r1, .L1465+0xc
	ldrb	r0, [r6]
	strb	r0, [r1]
	ldrb	r2, [r6]
	mov	r0, #0x28
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	str	r3, [sp, #0xc]
	mov	r0, #0x0
	add	r1, r2, #0
	mov	r3, #0x9
	bl	CalculateMoveDamage
	ldr	r1, .L1465+0x10
	str	r0, [r1]
	ldr	r0, .L1465+0x14
	ldrb	r2, [r6]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r2, .L1465+0x18
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L1385
.L1466:
	.align	2, 0
.L1465:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gBattlerTarget
	.word	gBattleMoveDamage
	.word	gProtectStructs
	.word	gHitMarker
.L1384:
	ldr	r1, .L1467
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	bl	BattleScriptPushCursor
.L1385:
	ldr	r1, .L1467+0x4
	ldr	r0, .L1467+0x8
	b	.L1427
.L1468:
	.align	2, 0
.L1467:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsConfused
.L1383:
	bl	BattleScriptPushCursor
	ldr	r1, .L1469
	ldr	r0, .L1469+0x4
.L1427:
	str	r0, [r1]
	mov	r4, #0x1
	mov	r9, r4
	ldr	r7, .L1469+0x8
	mov	r8, r7
	b	.L1412
.L1470:
	.align	2, 0
.L1469:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsConfusedNoMore
	.word	gBattleStruct
.L1387:
	ldr	r1, .L1471
	ldr	r4, .L1471+0x4
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB13131
	b	.L1417	@long jump
.LCB13131:
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB13142
	b	.L1417	@long jump
.LCB13142:
	ldr	r0, .L1471+0x8
	ldrb	r2, [r4]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r1, .L1471+0xc
	ldr	r0, .L1471+0x10
	b	.L1432
.L1472:
	.align	2, 0
.L1471:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsParalyzed
.L1389:
	ldr	r1, .L1473
	ldr	r4, .L1473+0x4
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB13180
	b	.L1412	@long jump
.LCB13180:
	lsr	r0, r1, #0x10
	bl	CountTrailingZeroBits
	ldr	r1, .L1473+0x8
	strb	r0, [r1, #0x17]
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1391	@cond_branch
	bl	BattleScriptPushCursor
	b	.L1392
.L1474:
	.align	2, 0
.L1473:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleScripting
.L1391:
	ldr	r0, .L1475
	bl	BattleScriptPush
	ldr	r2, .L1475+0x4
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1475+0x8
	ldrb	r2, [r4]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x2]
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
.L1392:
	ldr	r1, .L1475+0xc
	ldr	r0, .L1475+0x10
	str	r0, [r1]
	mov	r7, #0x1
.L1430:
	mov	r9, r7
	ldr	r0, .L1475+0x14
	mov	r8, r0
	b	.L1412
.L1476:
	.align	2, 0
.L1475:
	.word	BattleScript_MoveUsedIsInLoveCantAttack
	.word	gHitMarker
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsInLove
	.word	gBattleStruct
.L1393:
	ldr	r1, .L1477
	ldr	r6, .L1477+0x4
	ldrb	r0, [r6]
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r1, r1, #0x54
	add	r3, r0, r1
	ldr	r2, [r3]
	mov	r4, #0xc0
	lsl	r4, r4, #0x2
	add	r0, r2, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1394	@cond_branch
	ldr	r7, .L1477+0x8
	add	r0, r2, r7
	str	r0, [r3]
	ldrb	r2, [r6]
	mov	r0, r2
	mul	r0, r0, r5
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1395	@cond_branch
	ldr	r1, .L1477+0xc
	ldr	r0, .L1477+0x10
	b	.L1428
.L1478:
	.align	2, 0
.L1477:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	-0x100
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BideStoringEnergy
.L1395:
	ldr	r3, .L1479
	lsl	r0, r2, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L1397	@cond_branch
	ldr	r1, .L1479+0x4
	mov	r0, #0x75
	strh	r0, [r1]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, sl
	str	r0, [r1]
	ldr	r4, .L1479+0x8
	ldr	r1, .L1479+0xc
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r0, .L1479+0x10
	ldrb	r1, [r0]
	ldr	r2, .L1479+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1398	@cond_branch
	mov	r0, #0x75
	mov	r1, #0x1
	bl	GetMoveTarget
	strb	r0, [r4]
.L1398:
	ldr	r1, .L1479+0x18
	ldr	r0, .L1479+0x1c
	str	r0, [r1]
	ldr	r2, .L1479+0x20
	mov	r8, r2
	b	.L1396
.L1480:
	.align	2, 0
.L1479:
	.word	gTakenDmg
	.word	gCurrentMove
	.word	gBattlerTarget
	.word	gTakenDmgByBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BideAttack
	.word	gBattleStruct
.L1397:
	ldr	r1, .L1481
	ldr	r0, .L1481+0x4
.L1428:
	str	r0, [r1]
.L1396:
	mov	r3, #0x1
	mov	r9, r3
.L1394:
	mov	r4, r8
	ldr	r0, [r4]
	ldr	r7, .L1481+0x8
	add	r1, r0, r7
	b	.L1429
.L1482:
	.align	2, 0
.L1481:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BideNoEnergyToAttack
	.word	0x19f
.L1400:
	ldr	r2, .L1483
	ldr	r3, .L1483+0x4
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mov	r4, r1
	mul	r4, r4, r0
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0x20
	and	r1, r1, r0
	add	r5, r2, #0
	cmp	r1, #0
	beq	.L1401	@cond_branch
	ldr	r2, .L1483+0x8
	ldr	r0, .L1483+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0]
	cmp	r1, #0x7d
	beq	.L1403	@cond_branch
	mov	r0, #0xab
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L1402	@cond_branch
	add	r1, r4, r5
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xa
	beq	.L1403	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xa
	beq	.L1403	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.L1402	@cond_branch
.L1403:
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L1483+0x10
	ldr	r0, .L1483+0x14
	str	r0, [r1]
	ldr	r1, .L1483+0x18
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L1402:
	mov	r0, #0x2
	mov	r9, r0
	ldr	r1, .L1483+0x1c
	mov	r8, r1
.L1401:
	mov	r2, r8
	ldr	r0, [r2]
	ldr	r3, .L1483+0x20
	add	r1, r0, r3
	b	.L1429
.L1484:
	.align	2, 0
.L1483:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedUnfroze
	.word	gBattleCommunication
	.word	gBattleStruct
	.word	0x19f
.L1404:
	ldr	r2, .L1485
	ldr	r0, .L1485+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1405	@cond_branch
	ldr	r1, .L1485+0x8
	ldr	r4, .L1485+0xc
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xc
	beq	.L1407	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xc
	beq	.L1407	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xc
	beq	.L1407	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerAbility
	cmp	r0, #0x8e
	bne	.L1406	@cond_branch
.L1407:
	ldr	r0, .L1485+0x10
	ldr	r1, .L1485+0xc
	ldrb	r1, [r1]
	strb	r1, [r0]
	mov	r4, #0x1
	mov	r9, r4
	b	.L1425
.L1486:
	.align	2, 0
.L1485:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAbility
.L1406:
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x83
	bne	.L1408	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0x83
	bl	RecordItemEffectBattle
	mov	r7, #0x1
	mov	r9, r7
.L1408:
	ldr	r0, .L1487
	mov	r8, r0
	mov	r1, r9
	cmp	r1, #0
	beq	.L1405	@cond_branch
.L1425:
	ldr	r1, .L1487+0x4
	ldr	r0, .L1487+0x8
	str	r0, [r1]
	ldr	r2, .L1487
	mov	r8, r2
.L1405:
	mov	r3, r8
	ldr	r0, [r3]
	ldr	r4, .L1487+0xc
	add	r1, r0, r4
	b	.L1429
.L1488:
	.align	2, 0
.L1487:
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PowderMoveNoEffect
	.word	0x19f
.L1411:
	ldr	r2, .L1489
	ldr	r3, .L1489+0x4
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r2, #0
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	and	r1, r1, r0
	add	r5, r2, #0
	cmp	r1, #0
	beq	.L1412	@cond_branch
	mov	r7, r8
	ldr	r0, [r7]
	ldrb	r1, [r0, #0x12]
	cmp	r1, #0
	beq	.L1413	@cond_branch
	mov	r0, #0x3f
	and	r0, r0, r1
	b	.L1414
.L1490:
	.align	2, 0
.L1489:
	.word	gBattleMons
	.word	gBattlerAttacker
.L1413:
	ldr	r2, .L1491
	ldr	r0, .L1491+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
.L1414:
	cmp	r0, #0xa
	bne	.L1412	@cond_branch
	ldr	r0, .L1491+0x8
	ldrb	r2, [r3]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x3]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x3]
	ldr	r2, .L1491+0xc
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x2
	str	r0, [r2]
	ldr	r1, .L1491+0x10
	ldr	r0, .L1491+0x14
	str	r0, [r1]
	mov	r0, #0x1
	mov	r9, r0
.L1412:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r2, .L1491+0x18
	add	r1, r0, r2
.L1429:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L1345
.L1492:
	.align	2, 0
.L1491:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedPowder
	.word	0x19f
.L1416:
	ldr	r0, .L1493
	ldr	r4, .L1493+0x4
	ldrb	r3, [r4]
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	add	r1, r1, #0x23
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1417	@cond_branch
	ldr	r2, .L1493+0x8
	ldr	r0, .L1493+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1417	@cond_branch
	ldr	r0, .L1493+0x10
	lsl	r2, r3, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x3]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x3]
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
	ldr	r1, .L1493+0x14
	ldr	r0, .L1493+0x18
.L1432:
	str	r0, [r1]
	ldr	r2, .L1493+0x1c
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
.L1431:
	mov	r3, #0x1
	mov	r9, r3
.L1417:
	ldr	r1, .L1493+0x20
	ldr	r0, [r1]
	ldr	r4, .L1493+0x24
	add	r2, r0, r4
.L1426:
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	mov	r8, r1
.L1345:
	mov	r7, r8
	ldr	r0, [r7]
	ldr	r1, .L1493+0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x13
	beq	.LCB13782
	bl	.L1423	@far jump
.LCB13782:
.L1344:
	mov	r2, r9
	cmp	r2, #0x2
	bne	.L1424	@cond_branch
	ldr	r4, .L1493+0x28
	ldr	r0, .L1493+0x4
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r1, .L1493+0x2c
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1424:
	mov	r0, r9
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1494:
	.align	2, 0
.L1493:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsThroatChopPrevented
	.word	gHitMarker
	.word	gBattleStruct
	.word	0x19f
	.word	gActiveBattler
	.word	gBattleMons+0x50
.Lfe45:
	.size	 AtkCanceller_UnableToUseMove,.Lfe45-AtkCanceller_UnableToUseMove
	.align	2, 0
	.globl	AtkCanceller_UnableToUseMove2
	.type	 AtkCanceller_UnableToUseMove2,function
	.thumb_func
AtkCanceller_UnableToUseMove2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, #0x0
	ldr	r1, .L1510
	b	.L1496
.L1511:
	.align	2, 0
.L1510:
	.word	gBattleStruct
.L1509:
	cmp	r7, #0
	bne	.L1497	@cond_branch
.L1496:
	ldr	r0, [r1]
	ldr	r3, .L1512
	add	r2, r0, r3
	ldrb	r0, [r2]
	cmp	r0, #0x14
	beq	.L1501	@cond_branch
	cmp	r0, #0x14
	bgt	.L1498	@cond_branch
	cmp	r0, #0x13
	bne	.L1498	@cond_branch
	mov	r0, #0x14
	strb	r0, [r2]
.L1501:
	ldr	r0, .L1512+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1502	@cond_branch
	ldr	r6, .L1512+0x8
	ldrb	r0, [r6]
	bl	IsBattlerGrounded
	cmp	r0, #0
	beq	.L1502	@cond_branch
	ldr	r5, .L1512+0xc
	ldrb	r0, [r5]
	bl	GetChosenMovePriority
	lsl	r0, r0, #0x18
	cmp	r0, #0
	ble	.L1502	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L1502	@cond_branch
	ldrb	r0, [r5]
	bl	CancelMultiTurnMoves
	ldr	r1, .L1512+0x10
	ldr	r0, .L1512+0x14
	str	r0, [r1]
	ldr	r2, .L1512+0x18
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r7, #0x1
.L1502:
	ldr	r1, .L1512+0x1c
	ldr	r0, [r1]
	ldr	r3, .L1512
	add	r2, r0, r3
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
.L1498:
	ldr	r0, [r1]
	ldr	r2, .L1512
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x15
	bne	.L1509	@cond_branch
.L1497:
	add	r0, r7, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1513:
	.align	2, 0
.L1512:
	.word	0x19f
	.word	gFieldStatuses
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedPsychicTerrainPrevents
	.word	gHitMarker
	.word	gBattleStruct
.Lfe46:
	.size	 AtkCanceller_UnableToUseMove2,.Lfe46-AtkCanceller_UnableToUseMove2
	.align	2, 0
	.globl	HasNoMonsToSwitch
	.type	 HasNoMonsToSwitch,function
	.thumb_func
HasNoMonsToSwitch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r1, .L1582
	ldr	r2, [r1]
	mov	r0, #0x1
	and	r0, r0, r2
	add	r3, r1, #0
	cmp	r0, #0
	bne	.L1515	@cond_branch
	mov	r0, #0x0
	b	.L1577
.L1583:
	.align	2, 0
.L1582:
	.word	gBattleTypeFlags
.L1515:
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r2, r2, r0
	cmp	r2, #0
	bne	.LCB14007
	b	.L1527	@long jump
.LCB14007:
	ldr	r0, .L1584
	ldrh	r1, [r0]
	ldr	r0, .L1584+0x4
	cmp	r1, r0
	bne	.L1516	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1516	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L1584+0x8
	mov	sl, r0
	mov	r1, r9
	cmp	r1, #0x6
	bne	.L1517	@cond_branch
	ldr	r1, .L1584+0xc
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r9, r0
.L1517:
	mov	r2, r8
	cmp	r2, #0x6
	bne	.L1518	@cond_branch
	ldr	r1, .L1584+0xc
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r8, r0
.L1518:
	mov	r5, #0x0
.L1522:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, sl
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1521	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L1521	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L1584+0x10
	cmp	r0, r1
	beq	.L1521	@cond_branch
	cmp	r5, r9
	beq	.L1521	@cond_branch
	cmp	r5, r8
	beq	.L1521	@cond_branch
	ldr	r0, .L1584+0x14
	ldr	r1, [r0]
	add	r0, r7, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L1521	@cond_branch
	add	r0, r6, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.LCB14107
	b	.L1571	@long jump
.LCB14107:
.L1521:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L1522	@cond_branch
	b	.L1571
.L1585:
	.align	2, 0
.L1584:
	.word	gTrainerBattleOpponent_B
	.word	0xffff
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
	.word	0x4b7
	.word	gBattleStruct
.L1516:
	ldr	r0, .L1586
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0xf
	and	r1, r1, r2
	add	r3, r0, #0
	cmp	r1, #0
	beq	.L1527	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r2, .L1586+0x4
	mov	sl, r2
	cmp	r0, #0
	bne	.L1528	@cond_branch
	ldr	r0, .L1586+0x8
	mov	sl, r0
.L1528:
	mov	r0, #0x2
	and	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x19
	lsl	r0, r6, #0x1
	add	r5, r0, r6
	add	r0, r5, #0x3
	cmp	r5, r0
	bge	.L1531	@cond_branch
	add	r7, r0, #0
.L1533:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, sl
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1532	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L1532	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L1586+0xc
	cmp	r0, r1
	bne	.L1531	@cond_branch
.L1532:
	add	r5, r5, #0x1
	cmp	r5, r7
	blt	.L1533	@cond_branch
.L1531:
	mov	r1, #0x0
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	b	.L1581
.L1587:
	.align	2, 0
.L1586:
	.word	gBattleTypeFlags
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x4b7
.L1527:
	ldr	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1538	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x10
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1539	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1540	@cond_branch
	ldr	r2, .L1588
	mov	sl, r2
	add	r0, r4, #0
	bl	GetBattlerMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	b	.L1545
.L1589:
	.align	2, 0
.L1588:
	.word	gPlayerParty
.L1540:
	ldr	r0, .L1590
	mov	sl, r0
	mov	r1, #0x1
	eor	r1, r1, r4
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r6, r0, #0x1f
	b	.L1544
.L1591:
	.align	2, 0
.L1590:
	.word	gEnemyParty
.L1539:
	add	r0, r4, #0
	bl	GetBattlerMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L1592
	mov	sl, r1
	cmp	r0, #0
	bne	.L1545	@cond_branch
	ldr	r2, .L1592+0x4
	mov	sl, r2
.L1545:
	add	r0, r7, #0
	bl	GetLinkTrainerFlankId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L1544:
	lsl	r0, r6, #0x1
	add	r5, r0, r6
	add	r1, r5, #0x3
	mov	r8, r0
	cmp	r5, r1
	bge	.L1548	@cond_branch
	add	r7, r1, #0
.L1550:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, sl
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1549	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L1549	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L1592+0x8
	cmp	r0, r1
	bne	.L1548	@cond_branch
.L1549:
	add	r5, r5, #0x1
	cmp	r5, r7
	blt	.L1550	@cond_branch
.L1548:
	mov	r1, #0x0
	mov	r2, r8
	add	r0, r2, r6
.L1581:
	add	r0, r0, #0x3
	cmp	r5, r0
	bne	.L1553	@cond_branch
	mov	r1, #0x1
.L1553:
	add	r0, r1, #0
	b	.L1577
.L1593:
	.align	2, 0
.L1592:
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x4b7
.L1538:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1555	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1555	@cond_branch
	ldr	r0, .L1594
	mov	sl, r0
	mov	r6, #0x3
	cmp	r4, #0x1
	bne	.L1556	@cond_branch
	mov	r6, #0x0
.L1556:
	add	r5, r6, #0
	add	r6, r5, #0x3
	b	.L1558
.L1595:
	.align	2, 0
.L1594:
	.word	gEnemyParty
.L1560:
	add	r5, r5, #0x1
.L1558:
	cmp	r5, r6
	bge	.L1559	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, sl
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1560	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L1560	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L1596
	cmp	r0, r1
	beq	.L1560	@cond_branch
.L1559:
	mov	r0, #0x0
	cmp	r5, r6
	bne	.L1577	@cond_branch
	b	.L1580
.L1597:
	.align	2, 0
.L1596:
	.word	0x4b7
.L1555:
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1566	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, .L1598
	mov	sl, r2
	b	.L1567
.L1599:
	.align	2, 0
.L1598:
	.word	gEnemyParty
.L1566:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L1600
	mov	sl, r0
.L1567:
	mov	r1, r9
	cmp	r1, #0x6
	bne	.L1568	@cond_branch
	ldr	r1, .L1600+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r9, r0
.L1568:
	mov	r2, r8
	cmp	r2, #0x6
	bne	.L1569	@cond_branch
	ldr	r1, .L1600+0x4
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r8, r0
.L1569:
	mov	r5, #0x0
.L1573:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, sl
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1572	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L1572	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L1600+0x8
	cmp	r0, r1
	beq	.L1572	@cond_branch
	cmp	r5, r9
	beq	.L1572	@cond_branch
	cmp	r5, r8
	beq	.L1572	@cond_branch
	ldr	r0, .L1600+0xc
	ldr	r1, [r0]
	add	r0, r7, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L1572	@cond_branch
	add	r0, r6, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	bne	.L1571	@cond_branch
.L1572:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L1573	@cond_branch
.L1571:
	mov	r0, #0x0
	cmp	r5, #0x6
	bne	.L1577	@cond_branch
.L1580:
	mov	r0, #0x1
.L1577:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1601:
	.align	2, 0
.L1600:
	.word	gPlayerParty
	.word	gBattlerPartyIndexes
	.word	0x4b7
	.word	gBattleStruct
.Lfe47:
	.size	 HasNoMonsToSwitch,.Lfe47-HasNoMonsToSwitch
	.align	2, 0
	.globl	TryWeatherFormChange
	.type	 TryWeatherFormChange,function
	.thumb_func
TryWeatherFormChange:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r7, #0x0
	mov	r5, #0x0
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L1603	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L1603	@cond_branch
	mov	r5, #0x1
.L1603:
	ldr	r1, .L1630
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r2, r0, r1
	ldrh	r0, [r2]
	lsl	r3, r0, #0x15
	ldr	r0, .L1630+0x4
	add	r6, r1, #0
	cmp	r3, r0
	beq	.LCB14619
	b	.L1604	@long jump
.LCB14619:
	ldrh	r0, [r2, #0x20]
	cmp	r0, #0x3b
	beq	.LCB14625
	b	.L1622	@long jump
.LCB14625:
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	bne	.LCB14630
	b	.L1622	@long jump
.LCB14630:
	cmp	r5, #0
	bne	.L1610	@cond_branch
	mov	r0, #0x22
	add	r0, r0, r2
	mov	ip, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1608	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x23
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L1608	@cond_branch
	add	r1, r2, #0
	add	r1, r1, #0x24
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1608	@cond_branch
	mov	r0, ip
	strb	r5, [r0]
	strb	r5, [r3]
.L1629:
	mov	r0, #0x9
	strb	r0, [r1]
	b	.L1627
.L1631:
	.align	2, 0
.L1630:
	.word	gBattleMons
	.word	0x2be00000
.L1608:
	cmp	r5, #0
	bne	.LCB14675
	b	.L1622	@long jump
.LCB14675:
.L1610:
	ldr	r1, .L1632
	ldrh	r0, [r1]
	ldr	r2, .L1632+0x4
	and	r2, r2, r0
	add	r5, r1, #0
	cmp	r2, #0
	bne	.L1612	@cond_branch
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r0, r6
	mov	r3, #0x22
	add	r3, r3, r1
	mov	ip, r3
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L1612	@cond_branch
	add	r3, r1, #0
	add	r3, r3, #0x23
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L1612	@cond_branch
	add	r1, r1, #0x24
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1612	@cond_branch
	mov	r0, ip
	strb	r2, [r0]
	strb	r2, [r3]
	b	.L1629
.L1633:
	.align	2, 0
.L1632:
	.word	gBattleWeather
	.word	0x1e7
.L1612:
	ldrh	r1, [r5]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1614	@cond_branch
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r0, r6
	add	r3, r1, #0
	add	r3, r3, #0x22
	ldrb	r0, [r3]
	cmp	r0, #0xa
	beq	.L1614	@cond_branch
	add	r2, r1, #0
	add	r2, r2, #0x23
	ldrb	r0, [r2]
	cmp	r0, #0xa
	beq	.L1614	@cond_branch
	add	r1, r1, #0x24
	ldrb	r0, [r1]
	cmp	r0, #0xa
	beq	.L1614	@cond_branch
	mov	r0, #0xa
	strb	r0, [r3]
	strb	r0, [r2]
	mov	r0, #0x9
	strb	r0, [r1]
	mov	r7, #0x2
	b	.L1619
.L1614:
	ldrh	r1, [r5]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1616	@cond_branch
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r0, r6
	add	r3, r1, #0
	add	r3, r3, #0x22
	ldrb	r0, [r3]
	cmp	r0, #0xb
	beq	.L1616	@cond_branch
	add	r2, r1, #0
	add	r2, r2, #0x23
	ldrb	r0, [r2]
	cmp	r0, #0xb
	beq	.L1616	@cond_branch
	add	r1, r1, #0x24
	ldrb	r0, [r1]
	cmp	r0, #0xb
	beq	.L1616	@cond_branch
	mov	r0, #0xb
	strb	r0, [r3]
	strb	r0, [r2]
	mov	r0, #0x9
	strb	r0, [r1]
	mov	r7, #0x3
	b	.L1619
.L1616:
	ldrh	r1, [r5]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1619	@cond_branch
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r0, r6
	add	r3, r1, #0
	add	r3, r3, #0x22
	ldrb	r0, [r3]
	cmp	r0, #0xf
	beq	.L1619	@cond_branch
	add	r2, r1, #0
	add	r2, r2, #0x23
	ldrb	r0, [r2]
	cmp	r0, #0xf
	beq	.L1619	@cond_branch
	add	r1, r1, #0x24
	ldrb	r0, [r1]
	cmp	r0, #0xf
	beq	.L1619	@cond_branch
	mov	r0, #0xf
	strb	r0, [r3]
	strb	r0, [r2]
	mov	r0, #0x9
	strb	r0, [r1]
	mov	r7, #0x4
	b	.L1619
.L1604:
	ldr	r0, .L1634
	cmp	r3, r0
	bne	.L1619	@cond_branch
	ldrh	r0, [r2, #0x20]
	cmp	r0, #0x7a
	bne	.L1622	@cond_branch
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	bne	.L1621	@cond_branch
.L1622:
	mov	r7, #0x0
	b	.L1619
.L1635:
	.align	2, 0
.L1634:
	.word	0x34a00000
.L1621:
	ldr	r0, .L1636
	add	r1, r4, r0
	ldrb	r1, [r1]
	add	r2, r0, #0
	cmp	r1, #0
	bne	.L1628	@cond_branch
	cmp	r5, #0
	beq	.L1624	@cond_branch
	ldr	r0, .L1636+0x4
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1624	@cond_branch
	mov	r7, #0x2
	b	.L1619
.L1637:
	.align	2, 0
.L1636:
	.word	gBattleMonForms
	.word	gBattleWeather
.L1624:
	add	r0, r4, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1619	@cond_branch
.L1628:
	cmp	r5, #0
	beq	.L1627	@cond_branch
	ldr	r0, .L1638
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1619	@cond_branch
.L1627:
	mov	r7, #0x1
.L1619:
	add	r0, r7, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1639:
	.align	2, 0
.L1638:
	.word	gBattleWeather
.Lfe48:
	.size	 TryWeatherFormChange,.Lfe48-TryWeatherFormChange
	.section .rodata
	.align	1, 0
	.type	 sWeatherFlagsInfo,object
sWeatherFlagsInfo:
	.space	6
	.short	0x1
	.short	0x4
	.short	0x45
	.short	0x20
	.short	0x40
	.short	0x47
	.short	0x8
	.short	0x10
	.short	0x4a
	.short	0x80
	.short	0x100
	.short	0x48
	.size	 sWeatherFlagsInfo,30
.text
	.align	2, 0
	.globl	TryChangeBattleWeather
	.type	 TryChangeBattleWeather,function
	.thumb_func
TryChangeBattleWeather:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r6, .L1648
	ldr	r5, .L1648+0x4
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r4, r0, #0x1
	add	r1, r4, r5
	add	r0, r5, #0x2
	add	r0, r4, r0
	ldrh	r2, [r1]
	ldrh	r0, [r0]
	orr	r0, r0, r2
	ldrh	r1, [r6]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1642	@cond_branch
	strh	r2, [r6]
	add	r0, r3, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	add	r1, r5, #0x4
	add	r1, r4, r1
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L1644	@cond_branch
	ldr	r1, .L1648+0x8
	mov	r0, #0x8
	b	.L1647
.L1649:
	.align	2, 0
.L1648:
	.word	gBattleWeather
	.word	sWeatherFlagsInfo
	.word	gWishFutureKnock
.L1644:
	ldr	r1, .L1650
	mov	r0, #0x5
.L1647:
	strb	r0, [r1, #0x18]
	mov	r0, #0x1
	b	.L1646
.L1651:
	.align	2, 0
.L1650:
	.word	gWishFutureKnock
.L1642:
	mov	r0, #0x0
.L1646:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe49:
	.size	 TryChangeBattleWeather,.Lfe49-TryChangeBattleWeather
	.align	2, 0
	.type	 TryChangeBattleTerrain,function
	.thumb_func
TryChangeBattleTerrain:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r2, #0
	ldr	r3, .L1658
	ldr	r2, [r3]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1653	@cond_branch
	ldr	r0, .L1658+0x4
	and	r2, r2, r0
	orr	r2, r2, r1
	str	r2, [r3]
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x96
	bne	.L1654	@cond_branch
	mov	r0, #0x8
	b	.L1657
.L1659:
	.align	2, 0
.L1658:
	.word	gFieldStatuses
	.word	-0x1d0
.L1654:
	mov	r0, #0x5
.L1657:
	strb	r0, [r5]
	ldr	r1, .L1660
	ldr	r0, .L1660+0x4
	strb	r4, [r0, #0x17]
	strb	r4, [r1]
	mov	r0, #0x1
	b	.L1656
.L1661:
	.align	2, 0
.L1660:
	.word	gBattlerAttacker
	.word	gBattleScripting
.L1653:
	mov	r0, #0x0
.L1656:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe50:
	.size	 TryChangeBattleTerrain,.Lfe50-TryChangeBattleTerrain
	.section .rodata
	.align	1, 0
	.type	 forms.153,object
forms.153:
	.short	0xa1
	.short	0x22b
	.short	0x42a
	.short	0x2
	.short	0xc5
	.short	0x306
	.short	0x494
	.short	0x2
	.short	0xc5
	.short	0x491
	.short	0x498
	.short	0x2
	.short	0xc5
	.short	0x490
	.short	0x497
	.short	0x2
	.short	0xc5
	.short	0x492
	.short	0x499
	.short	0x2
	.short	0xc5
	.short	0x48e
	.short	0x495
	.short	0x2
	.short	0xc5
	.short	0x493
	.short	0x49a
	.short	0x2
	.short	0xc5
	.short	0x48f
	.short	0x496
	.short	0x2
	.short	0xd0
	.short	0x47c
	.short	0x2ea
	.short	0x4
.text
	.align	2, 0
	.type	 ShouldChangeFormHpBased,function
	.thumb_func
ShouldChangeFormHpBased:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r1, #0x0
	mov	r9, r1
	ldr	r3, .L1672
	mov	r1, #0x5c
	mov	r2, r0
	mul	r2, r2, r1
	mov	r8, r2
	ldr	r5, .L1672+0x4
	add	r5, r5, r8
	mov	sl, r3
	add	r2, r3, #0x2
	mov	r7, #0x0
.L1666:
	mov	r0, sl
	add	r1, r7, r0
	ldrh	r0, [r5, #0x20]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L1665	@cond_branch
	ldrh	r4, [r5]
	lsl	r1, r4, #0x15
	add	r0, r3, #0x4
	add	r0, r7, r0
	lsr	r1, r1, #0x15
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L1668	@cond_branch
	mov	r1, sl
	add	r1, r1, #0x6
	add	r1, r7, r1
	ldrh	r0, [r5, #0x2e]
	ldrh	r1, [r1]
	str	r2, [sp]
	str	r3, [sp, #0x4]
	bl	__udivsi3
	ldrh	r1, [r5, #0x2a]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, [sp]
	ldr	r3, [sp, #0x4]
	cmp	r1, r0
	bls	.L1668	@cond_branch
	ldrh	r1, [r2]
	ldr	r2, .L1672+0x8
	and	r1, r1, r2
	ldr	r2, .L1672+0xc
	add	r0, r2, #0
	and	r0, r0, r4
	orr	r0, r0, r1
	strh	r0, [r5]
	mov	r0, #0x1
	b	.L1671
.L1673:
	.align	2, 0
.L1672:
	.word	forms.153
	.word	gBattleMons
	.word	0x7ff
	.word	-0x800
.L1668:
	ldr	r4, .L1674
	add	r4, r4, r8
	ldrh	r6, [r4]
	lsl	r0, r6, #0x15
	lsr	r0, r0, #0x15
	ldrh	r1, [r2]
	cmp	r0, r1
	bne	.L1665	@cond_branch
	add	r1, r3, #0x6
	add	r1, r7, r1
	ldrh	r0, [r4, #0x2e]
	ldrh	r1, [r1]
	str	r2, [sp]
	str	r3, [sp, #0x4]
	bl	__udivsi3
	ldrh	r1, [r4, #0x2a]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, [sp]
	ldr	r3, [sp, #0x4]
	cmp	r1, r0
	bhi	.L1665	@cond_branch
	add	r0, r3, #0x4
	add	r0, r7, r0
	ldrh	r1, [r0]
	ldr	r2, .L1674+0x4
	and	r1, r1, r2
	ldr	r2, .L1674+0x8
	add	r0, r2, #0
	and	r0, r0, r6
	orr	r0, r0, r1
	strh	r0, [r4]
	mov	r0, #0x1
	b	.L1671
.L1675:
	.align	2, 0
.L1674:
	.word	gBattleMons
	.word	0x7ff
	.word	-0x800
.L1665:
	add	r2, r2, #0x8
	add	r7, r7, #0x8
	mov	r0, #0x1
	add	r9, r9, r0
	mov	r1, r9
	cmp	r1, #0x8
	bls	.L1666	@cond_branch
	mov	r0, #0x0
.L1671:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe51:
	.size	 ShouldChangeFormHpBased,.Lfe51-ShouldChangeFormHpBased
	.align	2, 0
	.type	 ForewarnChooseMove,function
	.thumb_func
ForewarnChooseMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	str	r0, [sp]
	mov	r0, #0x40
	bl	Alloc
	add	r7, r0, #0
	mov	r0, #0x0
	mov	r9, r0
	mov	r5, #0x0
	mov	r8, r5
.L1680:
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAlive
	add	r1, r5, #0x1
	mov	sl, r1
	cmp	r0, #0
	beq	.L1679	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	add	r4, r0, #0
	ldr	r1, [sp]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L1679	@cond_branch
	mov	r4, #0x0
	ldr	r6, .L1708
	mov	r0, #0x5c
	mul	r0, r0, r5
	ldr	r1, .L1708+0x4
	add	r3, r0, r1
	mov	r0, r8
	add	r2, r0, r7
.L1685:
	ldrh	r0, [r3]
	cmp	r0, #0
	beq	.L1684	@cond_branch
	strh	r0, [r2, #0x2]
	strb	r5, [r2]
	ldrh	r1, [r2, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r1, [r0]
	cmp	r1, #0x59
	beq	.L1691	@cond_branch
	cmp	r1, #0x59
	bgt	.L1696	@cond_branch
	cmp	r1, #0x26
	beq	.L1688	@cond_branch
	b	.L1692
.L1709:
	.align	2, 0
.L1708:
	.word	gBattleMoves
	.word	gBattleMons+0xc
.L1696:
	cmp	r1, #0x90
	beq	.L1691	@cond_branch
	ldr	r0, .L1710
	cmp	r1, r0
	beq	.L1691	@cond_branch
	b	.L1692
.L1711:
	.align	2, 0
.L1710:
	.word	0x101
.L1688:
	mov	r0, #0x96
	b	.L1693
.L1691:
	mov	r0, #0x78
	b	.L1693
.L1692:
	ldrh	r1, [r2, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x1
	bne	.L1693	@cond_branch
	mov	r0, #0x50
.L1693:
	strb	r0, [r2, #0x1]
	add	r2, r2, #0x4
	mov	r1, #0x4
	add	r8, r8, r1
	mov	r0, #0x1
	add	r9, r9, r0
.L1684:
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bls	.L1685	@cond_branch
.L1679:
	mov	r5, sl
	cmp	r5, #0x3
	bls	.L1680	@cond_branch
	mov	r6, #0x0
	mov	r5, #0x1
	cmp	r5, r9
	bcs	.L1700	@cond_branch
	add	r4, r7, #0x4
.L1702:
	lsl	r0, r6, #0x2
	add	r0, r0, r7
	ldrb	r1, [r4, #0x1]
	ldrb	r0, [r0, #0x1]
	cmp	r1, r0
	bhi	.L1707	@cond_branch
	cmp	r1, r0
	bne	.L1701	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1701	@cond_branch
.L1707:
	add	r6, r5, #0
.L1701:
	add	r4, r4, #0x4
	add	r5, r5, #0x1
	cmp	r5, r9
	bcc	.L1702	@cond_branch
.L1700:
	ldr	r3, .L1712
	lsl	r2, r6, #0x2
	add	r2, r2, r7
	ldrb	r0, [r2]
	strb	r0, [r3]
	ldr	r1, .L1712+0x4
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldrh	r0, [r2, #0x2]
	strb	r0, [r1, #0x2]
	ldrh	r0, [r2, #0x2]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldrb	r0, [r3]
	ldrh	r1, [r2, #0x2]
	bl	RecordKnownMove
	add	r0, r7, #0
	bl	Free
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1713:
	.align	2, 0
.L1712:
	.word	gBattlerTarget
	.word	gBattleTextBuff1
.Lfe52:
	.size	 ForewarnChooseMove,.Lfe52-ForewarnChooseMove
	.align	2, 0
	.globl	AbilityBattleEffects
	.type	 AbilityBattleEffects,function
	.thumb_func
AbilityBattleEffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	ldr	r2, [sp, #0x58]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	lsl	r2, r2, #0x10
	lsr	r6, r2, #0x10
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	ldr	r0, .L2168
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1715	@cond_branch
	mov	r0, #0x0
	bl	.L2151	@ far jump
.L2169:
	.align	2, 0
.L2168:
	.word	gBattleTypeFlags
.L1715:
	ldr	r3, .L2170
	ldr	r1, .L2170+0x4
	ldrb	r0, [r3]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1716	@cond_branch
	mov	r1, r9
	strb	r1, [r3]
.L1716:
	ldr	r2, .L2170+0x8
	ldrb	r0, [r3]
	mov	r4, #0x5c
	mov	r1, r0
	mul	r1, r1, r4
	add	r0, r1, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	str	r0, [sp, #0xc]
	add	r3, r2, #0
	add	r3, r3, #0x4c
	add	r1, r1, r3
	ldr	r1, [r1]
	str	r1, [sp, #0x14]
	ldr	r0, .L2170+0xc
	ldrb	r0, [r0]
	mov	r1, r0
	mul	r1, r1, r4
	add	r2, r1, r2
	ldrh	r0, [r2]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	str	r0, [sp, #0x10]
	add	r1, r1, r3
	ldr	r1, [r1]
	str	r1, [sp, #0x18]
	cmp	r5, #0
	beq	.L1717	@cond_branch
	ldr	r0, .L2170+0x10
	strh	r5, [r0]
	b	.L1718
.L2171:
	.align	2, 0
.L2170:
	.word	gBattlerAttacker
	.word	gBattlersCount
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastUsedAbility
.L1717:
	ldr	r4, .L2172
	mov	r0, r9
	bl	GetBattlerAbility
	strh	r0, [r4]
.L1718:
	cmp	r6, #0
	beq	.L1719	@cond_branch
	mov	r8, r6
	b	.L1720
.L2173:
	.align	2, 0
.L2172:
	.word	gLastUsedAbility
.L1719:
	ldr	r0, .L2174
	ldrh	r0, [r0]
	mov	r8, r0
.L1720:
	ldr	r1, .L2174+0x4
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x12]
	add	r6, r1, #0
	cmp	r0, #0
	beq	.L1721	@cond_branch
	mov	r5, #0x3f
	and	r5, r5, r0
	b	.L1722
.L2175:
	.align	2, 0
.L2174:
	.word	gCurrentMove
	.word	gBattleStruct
.L1721:
	ldr	r1, .L2176
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x3]
.L1722:
	ldr	r3, [sp, #0x4]
	cmp	r3, #0xe
	bls	.LCB15672
	bl	.L1723	@far jump
.LCB15672:
	lsl	r0, r3, #0x2
	ldr	r1, .L2176+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2177:
	.align	2, 0
.L2176:
	.word	gBattleMoves
	.word	.L2147
	.align	2, 0
	.align	2, 0
.L2147:
	.word	.L1724
	.word	.L1828
	.word	.L1906
	.word	.L1915
	.word	.L2056
	.word	.L1961
	.word	.L2069
	.word	.L2101
	.word	.L2110
	.word	.L2114
	.word	.L2119
	.word	.L2119
	.word	.L2129
	.word	.L2129
	.word	.L2062
.L1724:
	ldr	r0, .L2178
	mov	r4, r9
	strb	r4, [r0, #0x17]
	ldr	r0, .L2178+0x4
	ldrh	r0, [r0]
	sub	r0, r0, #0x2
	cmp	r0, #0xfd
	bls	.LCB15700
	bl	.L1723	@far jump
.LCB15700:
	lsl	r0, r0, #0x2
	ldr	r1, .L2178+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2179:
	.align	2, 0
.L2178:
	.word	gBattleScripting
	.word	gLastUsedAbility
	.word	.L1826
	.align	2, 0
	.align	2, 0
.L1826:
	.word	.L1796
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1820
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1812
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1817
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1798
	.word	.L1784
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1815
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1800
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1820
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1773
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1742
	.word	.L1723
	.word	.L1723
	.word	.L1752
	.word	.L1771
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1748
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1802
	.word	.L1723
	.word	.L1769
	.word	.L1723
	.word	.L1723
	.word	.L1815
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1750
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1740
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1746
	.word	.L1744
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1786
	.word	.L1788
	.word	.L1790
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1824
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1822
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1792
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1804
	.word	.L1810
	.word	.L1808
	.word	.L1806
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1794
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1726
.L1726:
	ldr	r0, .L2180
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1727	@cond_branch
	bl	GetCurrentWeather
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x3
	cmp	r0, #0xa
	bhi	.L1727	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L2180+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2181:
	.align	2, 0
.L2180:
	.word	gBattleTypeFlags
	.word	.L1737
	.align	2, 0
	.align	2, 0
.L1737:
	.word	.L1731
	.word	.L1727
	.word	.L1731
	.word	.L1727
	.word	.L1727
	.word	.L1733
	.word	.L1727
	.word	.L1727
	.word	.L1727
	.word	.L1735
	.word	.L1731
.L1731:
	ldr	r2, .L2182
	ldrh	r1, [r2]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1727	@cond_branch
	mov	r0, #0x5
	strh	r0, [r2]
	ldr	r1, .L2182+0x4
	mov	r0, #0xa
	b	.L2155
.L2183:
	.align	2, 0
.L2182:
	.word	gBattleWeather
	.word	gBattleScripting
.L1733:
	ldr	r3, .L2184
	ldrh	r1, [r3]
	mov	r2, #0x18
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1727	@cond_branch
	strh	r2, [r3]
	ldr	r1, .L2184+0x4
	mov	r0, #0xc
	b	.L2155
.L2185:
	.align	2, 0
.L2184:
	.word	gBattleWeather
	.word	gBattleScripting
.L1735:
	ldr	r3, .L2186
	ldrh	r1, [r3]
	mov	r2, #0x60
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1727	@cond_branch
	strh	r2, [r3]
	ldr	r1, .L2186+0x4
	mov	r0, #0xb
.L2155:
	strb	r0, [r1, #0x10]
	ldr	r0, [sp, #0x8]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
.L1727:
	ldr	r5, [sp, #0x8]
	cmp	r5, #0
	bne	.LCB15824
	bl	.L2150	@far jump
.LCB15824:
	bl	GetCurrentWeather
	ldr	r1, .L2186+0x8
	strb	r0, [r1, #0x5]
	ldr	r0, .L2186+0xc
	bl	BattleScriptPushCursorAndCallback
	bl	.L1723	@ far jump
.L2187:
	.align	2, 0
.L2186:
	.word	gBattleWeather
	.word	gBattleScripting
	.word	gBattleCommunication
	.word	BattleScript_OverworldWeatherStarts
.L1740:
	mov	r0, #0x1
	mov	r5, r9
	eor	r5, r5, r0
	add	r4, r5, #0
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB15854
	bl	.L1723	@far jump
.LCB15854:
	ldr	r1, .L2188
	mov	r3, #0x5c
	mov	r0, r4
	mul	r0, r0, r3
	add	r2, r1, #0
	add	r2, r2, #0x54
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x90
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB15866
	bl	.L1723	@far jump
.LCB15866:
	mov	r0, r9
	mul	r0, r0, r3
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB15874
	bl	.L1723	@far jump
.LCB15874:
	ldr	r0, .L2188+0x4
	ldr	r0, [r0]
	lsl	r1, r4, #0x3
	add	r0, r0, r1
	mov	r1, #0xb7
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB15887
	bl	.L1723	@far jump
.LCB15887:
	ldr	r1, .L2188+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L2188+0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB15895
	bl	.L1723	@far jump
.LCB15895:
	ldr	r0, .L2188+0x10
	strb	r5, [r0]
	ldr	r0, .L2188+0x14
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2189:
	.align	2, 0
.L2188:
	.word	gBattleMons
	.word	gBattleStruct
	.word	gStatuses3
	.word	0x10400c0
	.word	gBattlerTarget
	.word	BattleScript_ImposterActivates
.L1742:
	ldr	r0, .L2190
	mov	r2, r9
	lsl	r1, r2, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r2, r1, r0
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x1c
	lsr	r1, r0, #0x1f
	cmp	r1, #0
	beq	.LCB15928
	bl	.L1723	@far jump
.LCB15928:
	ldr	r0, .L2190+0x4
	strb	r1, [r0, #0x5]
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r0, .L2190+0x8
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2191:
	.align	2, 0
.L2190:
	.word	gSpecialStatuses
	.word	gBattleCommunication
	.word	BattleScript_SwitchInAbilityMsg
.L1744:
	ldr	r0, .L2192
	mov	r3, r9
	lsl	r1, r3, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r2, r1, r0
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB15962
	bl	.L1723	@far jump
.LCB15962:
	ldr	r1, .L2192+0x4
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r0, .L2192+0x8
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2193:
	.align	2, 0
.L2192:
	.word	gSpecialStatuses
	.word	gBattleCommunication
	.word	BattleScript_SwitchInAbilityMsg
.L1746:
	ldr	r0, .L2194
	mov	r4, r9
	lsl	r1, r4, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r2, r1, r0
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB15997
	bl	.L1723	@far jump
.LCB15997:
	ldr	r1, .L2194+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r0, .L2194+0x8
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2195:
	.align	2, 0
.L2194:
	.word	gSpecialStatuses
	.word	gBattleCommunication
	.word	BattleScript_SwitchInAbilityMsg
.L1748:
	ldr	r0, .L2196
	mov	r5, r9
	lsl	r1, r5, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r2, r1, r0
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB16032
	bl	.L1723	@far jump
.LCB16032:
	ldr	r1, .L2196+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x5
	strb	r1, [r0, #0x1d]
	ldr	r1, .L2196+0x8
	mov	r0, #0x3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r0, .L2196+0xc
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2197:
	.align	2, 0
.L2196:
	.word	gSpecialStatuses
	.word	gDisableStructs
	.word	gBattleCommunication
	.word	BattleScript_SwitchInAbilityMsg
.L1750:
	ldr	r0, .L2198
	mov	r2, r9
	lsl	r1, r2, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r2, r1, r0
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB16075
	bl	.L1723	@far jump
.LCB16075:
	ldr	r1, .L2198+0x4
	mov	r0, #0x4
	strb	r0, [r1, #0x5]
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r0, .L2198+0x8
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2199:
	.align	2, 0
.L2198:
	.word	gSpecialStatuses
	.word	gBattleCommunication
	.word	BattleScript_SwitchInAbilityMsg
.L1752:
	ldr	r1, .L2200
	mov	r3, r9
	lsl	r2, r3, #0x1
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1c
	str	r2, [sp, #0x24]
	cmp	r0, #0
	bge	.LCB16111
	bl	.L1723	@far jump
.LCB16111:
	mov	r0, r9
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x1c]
	mov	r6, #0x0
.L1757:
	lsl	r4, r6, #0x18
	lsr	r5, r4, #0x18
	add	r0, r5, #0
	bl	IsBattlerAlive
	mov	sl, r4
	add	r4, r6, #0x1
	str	r4, [sp, #0x2c]
	cmp	r0, #0
	beq	.L1756	@cond_branch
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, [sp, #0x1c]
	cmp	r5, r0
	beq	.L1756	@cond_branch
	mov	r7, #0x0
	ldr	r0, .L2200+0x4
	mov	r1, #0x5c
	mul	r1, r1, r6
	add	r4, r1, r0
.L1762:
	ldrh	r0, [r4]
	mov	r8, r0
	ldr	r0, .L2200+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L1763	@cond_branch
	mov	r5, #0x3f
	and	r5, r5, r0
	b	.L1764
.L2201:
	.align	2, 0
.L2200:
	.word	gSpecialStatuses
	.word	gBattleMons+0xc
	.word	gBattleStruct
.L1763:
	ldr	r1, .L2202
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x3]
.L1764:
	mov	r0, r8
	add	r1, r5, #0
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, sl
	lsr	r2, r3, #0x18
	mov	r3, r9
	bl	CalcTypeEffectivenessMultiplier
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r5, .L2202+0x4
	cmp	r0, r5
	bls	.L1761	@cond_branch
	ldr	r0, [sp, #0x8]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	b	.L1756
.L2203:
	.align	2, 0
.L2202:
	.word	gBattleMoves
	.word	0x1fff
.L1761:
	add	r4, r4, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bls	.L1762	@cond_branch
.L1756:
	ldr	r6, [sp, #0x2c]
	cmp	r6, #0x3
	bls	.L1757	@cond_branch
	ldr	r0, [sp, #0x8]
	cmp	r0, #0
	bne	.LCB16246
	bl	.L2150	@far jump
.LCB16246:
	ldr	r1, .L2204
	mov	r0, #0x5
	strb	r0, [r1, #0x5]
	ldr	r0, .L2204+0x4
	ldr	r1, [sp, #0x24]
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x8
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r0, .L2204+0x8
	bl	BattleScriptPushCursorAndCallback
	bl	.L1723	@ far jump
.L2205:
	.align	2, 0
.L2204:
	.word	gBattleCommunication
	.word	gSpecialStatuses
	.word	BattleScript_SwitchInAbilityMsg
.L1769:
	ldr	r0, .L2206
	mov	r2, r9
	lsl	r1, r2, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r4, [r1, #0x1]
	lsl	r0, r4, #0x1c
	cmp	r0, #0
	bge	.LCB16288
	bl	.L2150	@far jump
.LCB16288:
	mov	r0, #0x8
	orr	r0, r0, r4
	strb	r0, [r1, #0x1]
	ldr	r0, .L2206+0x4
	bl	BattleScriptPushCursorAndCallback
	ldr	r0, [sp, #0x8]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	bl	.L2150	@ far jump
.L2207:
	.align	2, 0
.L2206:
	.word	gSpecialStatuses
	.word	BattleScript_FriskActivates
.L1771:
	ldr	r0, .L2208
	mov	r3, r9
	lsl	r1, r3, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r4, r1, r0
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB16323
	bl	.L1723	@far jump
.LCB16323:
	mov	r0, r9
	bl	ForewarnChooseMove
	ldr	r1, .L2208+0x4
	mov	r0, #0x6
	strb	r0, [r1, #0x5]
	ldrb	r0, [r4, #0x1]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	ldr	r0, .L2208+0x8
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2209:
	.align	2, 0
.L2208:
	.word	gSpecialStatuses
	.word	gBattleCommunication
	.word	BattleScript_SwitchInAbilityMsg
.L1773:
	ldr	r1, .L2210
	mov	r4, r9
	lsl	r2, r4, #0x1
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1c
	str	r2, [sp, #0x24]
	cmp	r0, #0
	bge	.LCB16361
	bl	.L1723	@far jump
.LCB16361:
	mov	r5, #0x0
	str	r5, [sp, #0x20]
	mov	sl, r5
	mov	r0, #0x1
	mov	r5, r9
	eor	r5, r5, r0
	mov	r6, #0x0
	ldr	r7, .L2210+0x4
	add	r0, r7, #0x1
	mov	r8, r0
.L1778:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L1777	@cond_branch
	ldr	r1, .L2210+0x8
	mov	r0, #0x5c
	mov	r4, r5
	mul	r4, r4, r0
	add	r4, r4, r1
	ldrh	r2, [r4, #0x4]
	mov	r1, #0x1a
	ldrsb	r1, [r4, r1]
	lsl	r1, r1, #0x1
	add	r0, r1, r7
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r1, r1, r8
	ldrb	r1, [r1]
	bl	__divsi3
	ldr	r1, [sp, #0x20]
	add	r1, r1, r0
	str	r1, [sp, #0x20]
	ldrh	r2, [r4, #0xa]
	mov	r1, #0x1d
	ldrsb	r1, [r4, r1]
	lsl	r1, r1, #0x1
	add	r0, r1, r7
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r1, r1, r8
	ldrb	r1, [r1]
	bl	__divsi3
	add	sl, sl, r0
.L1777:
	mov	r0, #0x1
	eor	r5, r5, r0
	add	r6, r6, #0x1
	cmp	r6, #0x1
	bls	.L1778	@cond_branch
	mov	r3, #0x4
	ldr	r2, [sp, #0x20]
	cmp	r2, sl
	bcs	.L1781	@cond_branch
	mov	r3, #0x1
.L1781:
	ldr	r0, .L2210
	ldr	r1, [sp, #0x24]
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x8
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r1, .L2210+0x8
	mov	r0, #0x5c
	mov	r4, r9
	mul	r4, r4, r0
	add	r0, r4, #0
	add	r0, r3, r0
	add	r1, r1, #0x18
	add	r1, r0, r1
	ldrb	r2, [r1]
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xc
	bne	.LCB16456
	bl	.L1723	@far jump
.LCB16456:
	add	r0, r2, #0x1
	strb	r0, [r1]
	ldr	r1, .L2210+0xc
	add	r0, r3, #0
	add	r0, r0, #0x8
	strb	r0, [r1, #0x1a]
	ldr	r1, .L2210+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	strb	r3, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r0, .L2210+0x14
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2211:
	.align	2, 0
.L2210:
	.word	gSpecialStatuses
	.word	gStatStageRatios
	.word	gBattleMons
	.word	gBattleScripting
	.word	gBattleTextBuff1
	.word	BattleScript_AttackerAbilityStatRaiseEnd3
.L1784:
	ldr	r0, .L2212
	mov	r5, r9
	lsl	r1, r5, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r2, r1, r0
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB16506
	bl	.L1723	@far jump
.LCB16506:
	ldr	r1, .L2212+0x4
	mov	r0, #0x7
	strb	r0, [r1, #0x5]
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r0, .L2212+0x8
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2213:
	.align	2, 0
.L2212:
	.word	gSpecialStatuses
	.word	gBattleCommunication
	.word	BattleScript_SwitchInAbilityMsg
.L1786:
	ldr	r0, .L2214
	mov	r2, r9
	lsl	r1, r2, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r3, r1, r0
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB16541
	bl	.L1723	@far jump
.LCB16541:
	ldr	r1, .L2214+0x4
	mov	r2, #0x8
	mov	r0, #0x8
	strb	r0, [r1, #0x5]
	ldrb	r0, [r3, #0x1]
	orr	r0, r0, r2
	strb	r0, [r3, #0x1]
	ldr	r0, .L2214+0x8
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2215:
	.align	2, 0
.L2214:
	.word	gSpecialStatuses
	.word	gBattleCommunication
	.word	BattleScript_SwitchInAbilityMsg
.L1788:
	ldr	r0, .L2216
	mov	r3, r9
	lsl	r1, r3, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r2, r1, r0
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB16576
	bl	.L1723	@far jump
.LCB16576:
	ldr	r1, .L2216+0x4
	mov	r0, #0x9
	strb	r0, [r1, #0x5]
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r0, .L2216+0x8
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2217:
	.align	2, 0
.L2216:
	.word	gSpecialStatuses
	.word	gBattleCommunication
	.word	BattleScript_SwitchInAbilityMsg
.L1790:
	ldr	r0, .L2218
	mov	r4, r9
	lsl	r1, r4, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r2, r1, r0
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB16611
	bl	.L1723	@far jump
.LCB16611:
	ldr	r1, .L2218+0x4
	mov	r0, #0xa
	strb	r0, [r1, #0x5]
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r0, .L2218+0x8
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2219:
	.align	2, 0
.L2218:
	.word	gSpecialStatuses
	.word	gBattleCommunication
	.word	BattleScript_SwitchInAbilityMsg
.L1792:
	ldr	r0, .L2220
	mov	r5, r9
	lsl	r1, r5, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r2, r1, r0
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB16646
	bl	.L1723	@far jump
.LCB16646:
	ldr	r1, .L2220+0x4
	mov	r0, #0xb
	strb	r0, [r1, #0x5]
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r0, .L2220+0x8
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2221:
	.align	2, 0
.L2220:
	.word	gSpecialStatuses
	.word	gBattleCommunication
	.word	BattleScript_SwitchInAbilityMsg
.L1794:
	ldr	r0, .L2222
	mov	r2, r9
	lsl	r1, r2, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r2, r1, r0
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB16681
	bl	.L1723	@far jump
.LCB16681:
	ldr	r1, .L2222+0x4
	mov	r0, #0xc
	strb	r0, [r1, #0x5]
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r0, .L2222+0x8
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2223:
	.align	2, 0
.L2222:
	.word	gSpecialStatuses
	.word	gBattleCommunication
	.word	BattleScript_SwitchInAbilityMsg
.L1796:
	mov	r0, r9
	mov	r1, #0x1
	mov	r2, #0x1
	bl	TryChangeBattleWeather
	cmp	r0, #0
	bne	.LCB16710
	bl	.L1723	@far jump
.LCB16710:
	ldr	r0, .L2224
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2225:
	.align	2, 0
.L2224:
	.word	BattleScript_DrizzleActivates
.L1798:
	mov	r0, r9
	mov	r1, #0x3
	mov	r2, #0x1
	bl	TryChangeBattleWeather
	cmp	r0, #0
	bne	.LCB16730
	bl	.L1723	@far jump
.LCB16730:
	ldr	r0, .L2226
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2227:
	.align	2, 0
.L2226:
	.word	BattleScript_SandstreamActivates
.L1800:
	mov	r0, r9
	mov	r1, #0x2
	mov	r2, #0x1
	bl	TryChangeBattleWeather
	cmp	r0, #0
	bne	.LCB16750
	bl	.L1723	@far jump
.LCB16750:
	ldr	r0, .L2228
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2229:
	.align	2, 0
.L2228:
	.word	BattleScript_DroughtActivates
.L1802:
	mov	r0, r9
	mov	r1, #0x4
	mov	r2, #0x1
	bl	TryChangeBattleWeather
	cmp	r0, #0
	bne	.LCB16770
	bl	.L1723	@far jump
.LCB16770:
	ldr	r0, .L2230
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2231:
	.align	2, 0
.L2230:
	.word	BattleScript_SnowWarningActivates
.L1804:
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	ldr	r2, .L2232
	mov	r0, r9
	bl	TryChangeBattleTerrain
	cmp	r0, #0
	bne	.LCB16793
	bl	.L1723	@far jump
.LCB16793:
	ldr	r0, .L2232+0x4
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2233:
	.align	2, 0
.L2232:
	.word	gFieldTimers+0x7
	.word	BattleScript_ElectricSurgeActivates
.L1806:
	ldr	r2, .L2234
	mov	r0, r9
	mov	r1, #0x40
	bl	TryChangeBattleTerrain
	cmp	r0, #0
	bne	.LCB16815
	bl	.L1723	@far jump
.LCB16815:
	ldr	r0, .L2234+0x4
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2235:
	.align	2, 0
.L2234:
	.word	gFieldTimers+0x5
	.word	BattleScript_GrassySurgeActivates
.L1808:
	ldr	r2, .L2236
	mov	r0, r9
	mov	r1, #0x80
	bl	TryChangeBattleTerrain
	cmp	r0, #0
	bne	.LCB16837
	bl	.L1723	@far jump
.LCB16837:
	ldr	r0, .L2236+0x4
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2237:
	.align	2, 0
.L2236:
	.word	gFieldTimers+0x6
	.word	BattleScript_MistySurgeActivates
.L1810:
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	ldr	r2, .L2238
	mov	r0, r9
	bl	TryChangeBattleTerrain
	cmp	r0, #0
	bne	.LCB16861
	bl	.L1723	@far jump
.LCB16861:
	ldr	r0, .L2238+0x4
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2239:
	.align	2, 0
.L2238:
	.word	gFieldTimers+0x8
	.word	BattleScript_PsychicSurgeActivates
.L1812:
	ldr	r0, .L2240
	mov	r3, r9
	lsl	r1, r3, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r3, r1, r0
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB16888
	bl	.L1723	@far jump
.LCB16888:
	ldr	r0, .L2240+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x4]
	mov	r4, r9
	lsl	r0, r4, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x8
	b	.L2157
.L2241:
	.align	2, 0
.L2240:
	.word	gSpecialStatuses
	.word	gBattleResources
.L1815:
	mov	r0, r9
	bl	TryWeatherFormChange
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	cmp	r0, #0
	bne	.LCB16916
	bl	.L2150	@far jump
.LCB16916:
	ldr	r0, .L2242
	bl	BattleScriptPushCursorAndCallback
	ldr	r0, .L2242+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x7e
	ldr	r1, [sp, #0x8]
	sub	r1, r1, #0x1
	strb	r1, [r0]
	bl	.L1723	@ far jump
.L2243:
	.align	2, 0
.L2242:
	.word	BattleScript_CastformChange
	.word	gBattleStruct
.L1817:
	ldr	r0, .L2244
	mov	r5, r9
	lsl	r1, r5, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r3, r1, r0
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.LCB16949
	bl	.L1723	@far jump
.LCB16949:
	ldr	r0, .L2244+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x4]
	lsl	r0, r5, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x10
.L2157:
	orr	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r3]
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	.L1723	@ far jump
.L2245:
	.align	2, 0
.L2244:
	.word	gSpecialStatuses
	.word	gBattleResources
.L1820:
	ldr	r0, .L2246
	mov	r2, r9
	lsl	r1, r2, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	lsl	r0, r2, #0x1c
	cmp	r0, #0
	bge	.LCB16987
	bl	.L1723	@far jump
.LCB16987:
	mov	r0, #0x8
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r0, .L2246+0x4
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2247:
	.align	2, 0
.L2246:
	.word	gSpecialStatuses
	.word	BattleScript_AnnounceAirLockCloudNine
.L1822:
	ldr	r1, .L2248
	mov	r0, #0x5c
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r1
	add	r0, r0, #0x2c
	ldrb	r0, [r0]
	cmp	r0, #0x13
	bhi	.LCB17015
	bl	.L1723	@far jump
.LCB17015:
.L1824:
	mov	r0, r9
	bl	ShouldChangeFormHpBased
	cmp	r0, #0
	bne	.LCB17021
	bl	.L1723	@far jump
.LCB17021:
	ldr	r0, .L2248+0x4
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2249:
	.align	2, 0
.L2248:
	.word	gBattleMons
	.word	BattleScript_AttackerFormChangeEnd3
.L1828:
	ldr	r1, .L2250
	mov	r5, #0x5c
	mov	r4, r9
	mul	r4, r4, r5
	add	r3, r4, r1
	ldrh	r0, [r3, #0x2a]
	mov	r8, r1
	cmp	r0, #0
	bne	.LCB17045
	bl	.L1723	@far jump
.LCB17045:
	ldr	r1, .L2250+0x4
	mov	r0, r9
	strb	r0, [r1]
	ldr	r0, .L2250+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x7b
	bne	.LCB17054
	b	.L1881	@long jump
.LCB17054:
	cmp	r0, #0x7b
	bgt	.L1899	@cond_branch
	cmp	r0, #0x3d
	bne	.LCB17058
	b	.L1848	@long jump
.LCB17058:
	cmp	r0, #0x3d
	bgt	.L1900	@cond_branch
	cmp	r0, #0x2c
	bne	.LCB17062
	b	.L1838	@long jump
.LCB17062:
	cmp	r0, #0x2c
	bgt	.L1901	@cond_branch
	cmp	r0, #0x3
	bne	.LCB17066
	b	.L1855	@long jump
.LCB17066:
	bl	.L1723	@ far jump
.L2251:
	.align	2, 0
.L2250:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gLastUsedAbility
.L1901:
	cmp	r0, #0x36
	bne	.LCB17079
	b	.L1880	@long jump
.LCB17079:
	bl	.L1723	@ far jump
.L1900:
	cmp	r0, #0x5d
	bne	.LCB17084
	b	.L1845	@long jump
.LCB17084:
	cmp	r0, #0x5d
	bgt	.L1902	@cond_branch
	cmp	r0, #0x57
	bne	.LCB17088
	b	.L1835	@long jump
.LCB17088:
	bl	.L1723	@ far jump
.L1902:
	cmp	r0, #0x5e
	bne	.LCB17093
	b	.L1884	@long jump
.LCB17093:
	bl	.L1723	@ far jump
.L1899:
	cmp	r0, #0xa1
	bne	.LCB17098
	b	.L1892	@long jump
.LCB17098:
	cmp	r0, #0xa1
	bgt	.L1903	@cond_branch
	cmp	r0, #0x8b
	beq	.L1831	@cond_branch
	cmp	r0, #0x8b
	bgt	.L1904	@cond_branch
	cmp	r0, #0x83
	bne	.LCB17106
	b	.L1887	@long jump
.LCB17106:
	bl	.L1723	@ far jump
.L1904:
	cmp	r0, #0x8d
	bne	.LCB17111
	b	.L1857	@long jump
.LCB17111:
	bl	.L1723	@ far jump
.L1903:
	cmp	r0, #0xd0
	bne	.LCB17116
	b	.L1889	@long jump
.LCB17116:
	cmp	r0, #0xd0
	bgt	.L1905	@cond_branch
	cmp	r0, #0xc5
	bne	.LCB17120
	b	.L1892	@long jump
.LCB17120:
	bl	.L1723	@ far jump
.L1905:
	cmp	r0, #0xd3
	bne	.LCB17125
	b	.L1894	@long jump
.LCB17125:
	bl	.L1723	@ far jump
.L1831:
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L1834	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L1834	@cond_branch
	ldr	r0, .L2252
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1833	@cond_branch
.L1834:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB17159
	bl	.L1723	@far jump
.LCB17159:
.L1833:
	ldr	r1, .L2252+0x4
	mov	r0, #0x5c
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r1
	ldrh	r0, [r0, #0x30]
	cmp	r0, #0
	beq	.LCB17170
	bl	.L1723	@far jump
.LCB17170:
	ldr	r6, .L2252+0x8
	ldr	r1, [r6]
	mov	r3, r9
	lsl	r4, r3, #0x1
	add	r0, r1, #0
	add	r0, r0, #0xcc
	add	r0, r0, r4
	ldrh	r5, [r0]
	cmp	r5, #0
	beq	.LCB17182
	bl	.L1723	@far jump
.LCB17182:
	add	r0, r1, #0
	add	r0, r0, #0xb0
	add	r0, r0, r4
	ldrh	r0, [r0]
	bl	ItemId_GetPocket
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x7
	beq	.LCB17193
	bl	.L1723	@far jump
.LCB17193:
	ldr	r3, .L2252+0xc
	ldr	r0, [r6]
	add	r2, r0, #0
	add	r2, r2, #0xcc
	add	r2, r2, r4
	add	r0, r0, #0xb0
	add	r0, r0, r4
	ldrh	r1, [r0]
	strh	r1, [r2]
	ldrh	r1, [r0]
	strh	r1, [r3]
	strh	r5, [r0]
	ldr	r0, .L2252+0x10
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2253:
	.align	2, 0
.L2252:
	.word	gBattleWeather
	.word	gBattleMons
	.word	gBattleStruct
	.word	gLastUsedItem
	.word	BattleScript_HarvestActivates
.L1835:
	ldr	r0, .L2254
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB17233
	b	.L1884	@long jump
.LCB17233:
.L1838:
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.LCB17239
	bl	.L1723	@far jump
.LCB17239:
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.LCB17244
	bl	.L1723	@far jump
.LCB17244:
	ldr	r0, .L2254
	ldrh	r1, [r0]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB17252
	bl	.L1723	@far jump
.LCB17252:
	ldr	r1, .L2254+0x4
	mov	r0, #0x5c
	mov	r4, r9
	mul	r4, r4, r0
	add	r0, r4, #0
	add	r4, r0, r1
	ldrh	r0, [r4, #0x2a]
	ldrh	r5, [r4, #0x2e]
	cmp	r0, r5
	bne	.LCB17266
	bl	.L1723	@far jump
.LCB17266:
	ldr	r1, .L2254+0x8
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB17276
	bl	.L1723	@far jump
.LCB17276:
	ldr	r0, .L2254+0xc
	bl	BattleScriptPushCursorAndCallback
	ldr	r2, .L2254+0x10
	ldrh	r1, [r4, #0x2e]
	ldr	r0, .L2254+0x14
	ldrh	r0, [r0]
	cmp	r0, #0x2c
	bne	.L1840	@cond_branch
	add	r0, r1, #0
	asr	r0, r0, #0x4
	b	.L1841
.L2255:
	.align	2, 0
.L2254:
	.word	gBattleWeather
	.word	gBattleMons
	.word	gStatuses3
	.word	BattleScript_RainDishActivates
	.word	gBattleMoveDamage
	.word	gLastUsedAbility
.L1840:
	add	r0, r1, #0
	asr	r0, r0, #0x3
.L1841:
	str	r0, [r2]
	ldr	r1, .L2256
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L1844	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L1844:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2257:
	.align	2, 0
.L2256:
	.word	gBattleMoveDamage
.L1845:
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.LCB17337
	bl	.L1723	@far jump
.LCB17337:
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.LCB17342
	bl	.L1723	@far jump
.LCB17342:
	ldr	r0, .L2258
	ldrh	r1, [r0]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB17350
	bl	.L1723	@far jump
.LCB17350:
	mov	r0, r8
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1847	@cond_branch
	bl	.L1723	@ far jump
.L2259:
	.align	2, 0
.L2258:
	.word	gBattleWeather
.L1848:
	mov	r0, r8
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB17376
	bl	.L1723	@far jump
.LCB17376:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB17388
	bl	.L1723	@far jump
.LCB17388:
.L1847:
	ldr	r6, .L2260
	mov	r0, #0x5c
	mov	r4, r9
	mul	r4, r4, r0
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r5, r4, r0
	ldr	r0, [r5]
	mov	r1, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1850	@cond_branch
	ldr	r0, .L2260+0x4
	ldr	r1, .L2260+0x8
	bl	StringCopy
.L1850:
	ldr	r0, [r5]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1851	@cond_branch
	ldr	r0, .L2260+0x4
	ldr	r1, .L2260+0xc
	bl	StringCopy
.L1851:
	ldr	r0, [r5]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1852	@cond_branch
	ldr	r0, .L2260+0x4
	ldr	r1, .L2260+0x10
	bl	StringCopy
.L1852:
	ldr	r0, [r5]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1853	@cond_branch
	ldr	r0, .L2260+0x4
	ldr	r1, .L2260+0x14
	bl	StringCopy
.L1853:
	ldr	r0, [r5]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1854	@cond_branch
	ldr	r0, .L2260+0x4
	ldr	r1, .L2260+0x18
	bl	StringCopy
.L1854:
	mov	r0, #0x0
	str	r0, [r5]
	add	r1, r6, #0
	add	r1, r1, #0x54
	add	r1, r4, r1
	ldr	r0, [r1]
	ldr	r2, .L2260+0x1c
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r0, .L2260+0x20
	ldr	r4, .L2260+0x24
	mov	r3, r9
	strb	r3, [r4]
	strb	r3, [r0, #0x17]
	ldr	r0, .L2260+0x28
	bl	BattleScriptPushCursorAndCallback
	str	r5, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	bl	.L2156	@ far jump
.L2261:
	.align	2, 0
.L2260:
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gStatusConditionString_PoisonJpn
	.word	gStatusConditionString_SleepJpn
	.word	gStatusConditionString_ParalysisJpn
	.word	gStatusConditionString_BurnJpn
	.word	gStatusConditionString_IceJpn
	.word	-0x8000001
	.word	gBattleScripting
	.word	gActiveBattler
	.word	BattleScript_ShedSkinActivates
.L1855:
	ldrb	r2, [r3, #0x1b]
	mov	r0, #0x1b
	ldrsb	r0, [r3, r0]
	cmp	r0, #0xb
	ble	.LCB17506
	bl	.L1723	@far jump
.LCB17506:
	ldr	r0, .L2262
	mov	r4, r9
	lsl	r1, r4, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x19]
	cmp	r0, #0x2
	bne	.LCB17517
	bl	.L1723	@far jump
.LCB17517:
	add	r0, r2, #0x1
	mov	r1, #0x0
	strb	r0, [r3, #0x1b]
	ldr	r4, .L2262+0x4
	mov	r0, #0x11
	strb	r0, [r4, #0x10]
	strb	r1, [r4, #0x11]
	ldr	r0, .L2262+0x8
	bl	BattleScriptPushCursorAndCallback
	mov	r5, r9
	strb	r5, [r4, #0x17]
	bl	.L2156	@ far jump
.L2263:
	.align	2, 0
.L2262:
	.word	gDisableStructs
	.word	gBattleScripting
	.word	BattleScript_SpeedBoostActivates
.L1857:
	ldr	r0, .L2264
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x19]
	cmp	r0, #0x2
	bne	.LCB17552
	bl	.L1723	@far jump
.LCB17552:
	mov	r5, #0x0
	mov	r7, #0x0
	mov	r3, #0x6
	mov	sl, r3
	mov	r6, #0x1
	ldr	r0, .L2264+0x4
	add	r2, r0, #0x4
	mov	r1, r8
	add	r0, r1, r4
	add	r1, r0, #0
	add	r1, r1, #0x19
.L1862:
	mov	r3, #0x0
	ldrsb	r3, [r1, r3]
	cmp	r3, #0
	beq	.L1863	@cond_branch
	ldr	r0, [r2]
	orr	r7, r7, r0
.L1863:
	cmp	r3, #0xc
	beq	.L1861	@cond_branch
	ldr	r0, [r2]
	orr	r5, r5, r0
.L1861:
	add	r2, r2, #0x4
	add	r1, r1, #0x1
	add	r6, r6, #0x1
	cmp	r6, sl
	bcc	.L1862	@cond_branch
	cmp	r7, #0
	bne	.L1867	@cond_branch
	cmp	r5, #0
	bne	.LCB17598
	bl	.L1723	@far jump
.LCB17598:
.L1867:
	ldr	r1, .L2264+0x8
	mov	r0, #0x0
	strb	r0, [r1, #0x15]
	strb	r0, [r1, #0x1a]
	ldr	r2, [sp, #0x8]
	add	r2, r2, #0x1
	str	r2, [sp, #0x28]
	cmp	r5, #0
	beq	.L1868	@cond_branch
	ldr	r3, .L2264+0x4
	mov	r8, r3
.L1869:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, sl
	bl	__umodsi3
	add	r2, r0, #0
	add	r6, r2, #0x1
	lsl	r4, r6, #0x2
	mov	r1, r8
	add	r0, r4, r1
	ldr	r0, [r0]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1869	@cond_branch
	ldr	r1, .L2264+0x8
	add	r0, r2, #0
	add	r0, r0, #0x11
	strb	r0, [r1, #0x1a]
	ldr	r0, .L2264+0x4
	add	r0, r4, r0
	ldr	r0, [r0]
	bic	r7, r7, r0
.L1868:
	cmp	r7, #0
	beq	.L1874	@cond_branch
	ldr	r4, .L2264+0x4
.L1875:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, sl
	bl	__umodsi3
	add	r2, r0, #0
	add	r6, r2, #0x1
	lsl	r0, r6, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L1875	@cond_branch
	ldr	r1, .L2264+0x8
	add	r0, r2, #0
	add	r0, r0, #0x89
	strb	r0, [r1, #0x15]
.L1874:
	ldr	r0, .L2264+0xc
	bl	BattleScriptPushCursorAndCallback
	ldr	r2, [sp, #0x28]
	lsl	r0, r2, #0x18
	bl	.L2158	@ far jump
.L2265:
	.align	2, 0
.L2264:
	.word	gDisableStructs
	.word	gBitTable
	.word	gBattleScripting
	.word	BattleScript_MoodyActivates
.L1880:
	ldr	r2, .L2266
	ldrb	r0, [r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r3, [r1, #0x1a]
	lsl	r0, r3, #0x1f
	lsr	r0, r0, #0x1f
	mov	r2, #0x1
	eor	r2, r2, r0
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x1a]
	bl	.L1723	@ far jump
.L2267:
	.align	2, 0
.L2266:
	.word	gDisableStructs
.L1881:
	mov	r1, r8
	add	r1, r1, #0x50
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r3, #0x7
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L1883	@cond_branch
	mov	r0, #0x1
	mov	r4, r9
	eor	r4, r4, r0
	mov	r0, r4
	mul	r0, r0, r5
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L1883	@cond_branch
	mov	r0, r9
	bl	GetBattlerAbility
	cmp	r0, #0xd5
	beq	.L1883	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0xd5
	beq	.LCB17748
	bl	.L1723	@far jump
.LCB17748:
.L1883:
	ldr	r0, .L2268
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2269:
	.align	2, 0
.L2268:
	.word	BattleScript_BadDreamsActivates
.L1884:
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.LCB17768
	bl	.L1723	@far jump
.LCB17768:
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.LCB17773
	bl	.L1723	@far jump
.LCB17773:
	ldr	r0, .L2270
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB17781
	bl	.L1723	@far jump
.LCB17781:
	ldr	r0, .L2270+0x4
	bl	BattleScriptPushCursorAndCallback
	ldr	r2, .L2270+0x8
	ldr	r1, .L2270+0xc
	mov	r0, #0x5c
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x3
	str	r0, [r2]
	cmp	r0, #0
	beq	.LCB17798
	bl	.L2156	@far jump
.LCB17798:
	mov	r0, #0x1
	str	r0, [r2]
	bl	.L2156	@ far jump
.L2271:
	.align	2, 0
.L2270:
	.word	gBattleWeather
	.word	BattleScript_SolarPowerActivates
	.word	gBattleMoveDamage
	.word	gBattleMons
.L1887:
	ldr	r4, .L2272
	mov	r1, #0x2
	mov	r0, r9
	eor	r0, r0, r1
	strb	r0, [r4, #0x17]
	ldrb	r0, [r4, #0x17]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB17823
	bl	.L1723	@far jump
.LCB17823:
	ldrb	r0, [r4, #0x17]
	mul	r0, r0, r5
	mov	r1, r8
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB17833
	bl	.L1723	@far jump
.LCB17833:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1d
	bls	.LCB17845
	bl	.L1723	@far jump
.LCB17845:
	ldr	r0, .L2272+0x4
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2273:
	.align	2, 0
.L2272:
	.word	gBattleScripting
	.word	BattleScript_HealerActivates
.L1889:
	add	r0, r3, #0
	add	r0, r0, #0x2c
	ldrb	r0, [r0]
	cmp	r0, #0x13
	bhi	.LCB17866
	bl	.L1723	@far jump
.LCB17866:
.L1892:
	mov	r0, r9
	bl	ShouldChangeFormHpBased
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	cmp	r0, #0
	bne	.LCB17875
	bl	.L2150	@far jump
.LCB17875:
	ldr	r0, .L2274
	bl	BattleScriptPushCursorAndCallback
	bl	.L1723	@ far jump
.L2275:
	.align	2, 0
.L2274:
	.word	BattleScript_AttackerFormChangeEnd3
.L1894:
	ldrh	r0, [r3]
	lsl	r1, r0, #0x15
	lsr	r4, r1, #0x15
	ldr	r0, .L2276
	cmp	r4, r0
	beq	.L1896	@cond_branch
	ldr	r0, .L2276+0x4
	cmp	r1, r0
	beq	.LCB17905
	bl	.L1723	@far jump
.LCB17905:
.L1896:
	ldrh	r0, [r3, #0x2e]
	ldrh	r1, [r3, #0x2a]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB17915
	bl	.L1723	@far jump
.LCB17915:
	ldr	r1, [r6]
	ldr	r2, .L2276+0x8
	mov	r5, r9
	lsl	r0, r5, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	ldr	r2, .L2276+0xc
	add	r1, r1, r2
	add	r1, r1, r0
	strh	r4, [r1]
	ldrh	r1, [r3]
	ldr	r0, .L2276+0x10
	and	r0, r0, r1
	ldr	r4, .L2276+0x14
	add	r1, r4, #0
	orr	r0, r0, r1
	strh	r0, [r3]
	ldr	r0, .L2276+0x18
	bl	BattleScriptPushCursorAndCallback
	bl	.L2156	@ far jump
.L2277:
	.align	2, 0
.L2276:
	.word	0x2ce
	.word	-0x71e00000
	.word	gBattlerPartyIndexes
	.word	0x346
	.word	-0x800
	.word	0x474
	.word	BattleScript_AttackerFormChangeEnd3
.L1906:
	ldr	r0, .L2278
	ldrh	r2, [r0]
	add	r3, r0, #0
	cmp	r2, #0x2b
	bne	.L1909	@cond_branch
	ldr	r1, .L2278+0x4
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1908	@cond_branch
.L1909:
	cmp	r2, #0xab
	bne	.L1907	@cond_branch
	ldr	r1, .L2278+0x4
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1907	@cond_branch
.L1908:
	ldr	r1, .L2278+0x8
	ldr	r0, .L2278+0xc
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1910	@cond_branch
	ldr	r0, .L2278+0x10
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	orr	r1, r1, r2
	str	r1, [r0]
.L1910:
	ldr	r1, .L2278+0x14
	ldr	r0, .L2278+0x18
	str	r0, [r1]
	mov	r3, #0x1
	str	r3, [sp, #0x8]
	bl	.L2152	@ far jump
.L2279:
	.align	2, 0
.L2278:
	.word	gLastUsedAbility
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SoundproofProtected
.L1907:
	ldrh	r0, [r3]
	cmp	r0, #0xdb
	beq	.L1913	@cond_branch
	cmp	r0, #0xd6
	beq	.L1913	@cond_branch
	mov	r0, #0x2
	mov	r4, r9
	eor	r4, r4, r0
	mov	r9, r4
	mov	r0, r9
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB18053
	bl	.L1723	@far jump
.LCB18053:
	mov	r0, r9
	bl	GetBattlerAbility
	cmp	r0, #0xdb
	beq	.L1913	@cond_branch
	mov	r0, r9
	bl	GetBattlerAbility
	cmp	r0, #0xd6
	beq	.LCB18063
	bl	.L1723	@far jump
.LCB18063:
.L1913:
	ldr	r5, .L2280
	ldrb	r0, [r5]
	bl	GetChosenMovePriority
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bgt	.LCB18073
	bl	.L1723	@far jump
.LCB18073:
	ldrb	r0, [r5]
	bl	GetBattlerSide
	add	r4, r0, #0
	mov	r0, r9
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.LCB18086
	bl	.L1723	@far jump
.LCB18086:
	ldr	r1, .L2280+0x4
	ldrb	r2, [r5]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1914	@cond_branch
	ldr	r0, .L2280+0x8
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	orr	r1, r1, r2
	str	r1, [r0]
.L1914:
	ldr	r1, .L2280+0xc
	ldr	r0, .L2280+0x10
	str	r0, [r1]
	mov	r5, #0x1
	str	r5, [sp, #0x8]
	bl	.L2152	@ far jump
.L2281:
	.align	2, 0
.L2280:
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DazzlingProtected
.L1915:
	mov	r0, r8
	cmp	r0, #0
	bne	.LCB18127
	bl	.L1723	@far jump
.LCB18127:
	ldr	r0, .L2282
	ldrh	r0, [r0]
	cmp	r0, #0x1f
	beq	.L1925	@cond_branch
	cmp	r0, #0x1f
	bgt	.L1941	@cond_branch
	cmp	r0, #0xb
	beq	.L1921	@cond_branch
	cmp	r0, #0xb
	bgt	.L1942	@cond_branch
	cmp	r0, #0xa
	beq	.L1918	@cond_branch
	b	.L1917
.L2283:
	.align	2, 0
.L2282:
	.word	gLastUsedAbility
.L1942:
	cmp	r0, #0x12
	beq	.L1931	@cond_branch
	b	.L1917
.L1941:
	cmp	r0, #0x57
	beq	.L1921	@cond_branch
	cmp	r0, #0x57
	bgt	.L1943	@cond_branch
	cmp	r0, #0x4e
	beq	.L1923	@cond_branch
	b	.L1917
.L1943:
	cmp	r0, #0x72
	beq	.L1927	@cond_branch
	cmp	r0, #0x9d
	beq	.L1929	@cond_branch
	b	.L1917
.L1918:
	cmp	r5, #0xd
	bne	.L1917	@cond_branch
	mov	r1, #0x1
	str	r1, [sp, #0x8]
	b	.L1917
.L1921:
	cmp	r5, #0xb
	bne	.L1917	@cond_branch
	mov	r2, #0x1
	str	r2, [sp, #0x8]
	b	.L1917
.L1923:
	cmp	r5, #0xd
	bne	.L1917	@cond_branch
	mov	r3, #0x2
	str	r3, [sp, #0x8]
	mov	r7, #0x3
	b	.L1917
.L1925:
	cmp	r5, #0xd
	bne	.L1917	@cond_branch
	mov	r4, #0x2
	str	r4, [sp, #0x8]
	mov	r7, #0x4
	b	.L1917
.L1927:
	cmp	r5, #0xb
	bne	.L1917	@cond_branch
	mov	r5, #0x2
	str	r5, [sp, #0x8]
	mov	r7, #0x4
	b	.L1917
.L1929:
	cmp	r5, #0xc
	bne	.L1917	@cond_branch
	mov	r0, #0x2
	str	r0, [sp, #0x8]
	mov	r7, #0x1
	b	.L1917
.L1931:
	cmp	r5, #0xa
	bne	.L1917	@cond_branch
	ldr	r2, .L2284
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	mov	r3, r9
	lsl	r1, r3, #0x2
	add	r0, r0, r1
	ldr	r3, [r0]
	mov	r4, #0x1
	and	r3, r3, r4
	add	r5, r1, #0
	cmp	r3, #0
	bne	.L1933	@cond_branch
	ldr	r0, .L2284+0x4
	strb	r3, [r0, #0x5]
	ldr	r1, .L2284+0x8
	ldr	r0, .L2284+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L1934	@cond_branch
	ldr	r1, .L2284+0x10
	ldr	r0, .L2284+0x14
	b	.L2159
.L2285:
	.align	2, 0
.L2284:
	.word	gBattleResources
	.word	gBattleCommunication
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlashFireBoost
.L1934:
	ldr	r1, .L2286
	ldr	r0, .L2286+0x4
.L2159:
	str	r0, [r1]
	ldr	r0, [r2]
	ldr	r1, [r0, #0x4]
	add	r1, r1, r5
	ldr	r0, [r1]
	mov	r2, #0x1
	orr	r0, r0, r2
	str	r0, [r1]
	mov	r4, #0x3
	str	r4, [sp, #0x8]
	b	.L1917
.L2287:
	.align	2, 0
.L2286:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlashFireBoost_PPLoss
.L1933:
	ldr	r0, .L2288
	strb	r4, [r0, #0x5]
	ldr	r1, .L2288+0x4
	ldr	r0, .L2288+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L1937	@cond_branch
	ldr	r1, .L2288+0xc
	ldr	r0, .L2288+0x10
	b	.L2160
.L2289:
	.align	2, 0
.L2288:
	.word	gBattleCommunication
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlashFireBoost
.L1937:
	ldr	r1, .L2290
	ldr	r0, .L2290+0x4
.L2160:
	str	r0, [r1]
	mov	r5, #0x3
	str	r5, [sp, #0x8]
.L1917:
	ldr	r0, [sp, #0x8]
	cmp	r0, #0x1
	bne	.L1944	@cond_branch
	ldr	r2, .L2290+0x8
	mov	r0, #0x5c
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2a]
	mov	r8, r2
	ldrh	r0, [r0, #0x2e]
	cmp	r1, r0
	beq	.L1946	@cond_branch
	ldr	r1, .L2290+0xc
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1945	@cond_branch
.L1946:
	ldr	r1, .L2290+0x10
	ldr	r0, .L2290+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	blt	.L2161	@cond_branch
	b	.L1956
.L2291:
	.align	2, 0
.L2290:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlashFireBoost_PPLoss
	.word	gBattleMons
	.word	gStatuses3
	.word	gProtectStructs
	.word	gBattlerAttacker
.L1945:
	ldr	r1, .L2292
	ldr	r0, .L2292+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L1950	@cond_branch
	ldr	r1, .L2292+0x8
	ldr	r0, .L2292+0xc
	b	.L2162
.L2293:
	.align	2, 0
.L2292:
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveHPDrain
.L1950:
	ldr	r1, .L2294
	ldr	r0, .L2294+0x4
.L2162:
	str	r0, [r1]
	ldr	r1, .L2294+0x8
	mov	r0, #0x5c
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r8
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x2
	str	r0, [r1]
	cmp	r0, #0
	bne	.L1952	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L1952:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	bl	.L1723	@ far jump
.L2295:
	.align	2, 0
.L2294:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveHPDrain_PPLoss
	.word	gBattleMoveDamage
.L1944:
	ldr	r4, [sp, #0x8]
	cmp	r4, #0x2
	beq	.LCB18440
	bl	.L1723	@far jump
.LCB18440:
	ldr	r2, .L2296
	mov	r0, #0x5c
	mov	r5, r9
	mul	r5, r5, r0
	add	r0, r5, #0
	add	r0, r7, r0
	add	r1, r2, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r8, r2
	cmp	r0, #0xc
	bne	.L1955	@cond_branch
	ldr	r1, .L2296+0x4
	ldr	r0, .L2296+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L1956	@cond_branch
.L2161:
	ldr	r1, .L2296+0xc
	ldr	r0, .L2296+0x10
	str	r0, [r1]
	bl	.L1723	@ far jump
.L2297:
	.align	2, 0
.L2296:
	.word	gBattleMons
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MonMadeMoveUseless
.L1956:
	ldr	r1, .L2298
	ldr	r0, .L2298+0x4
	str	r0, [r1]
	bl	.L1723	@ far jump
.L2299:
	.align	2, 0
.L2298:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MonMadeMoveUseless_PPLoss
.L1955:
	ldr	r1, .L2300
	ldr	r0, .L2300+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L1959	@cond_branch
	ldr	r1, .L2300+0x8
	ldr	r0, .L2300+0xc
	b	.L2163
.L2301:
	.align	2, 0
.L2300:
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveStatDrain
.L1959:
	ldr	r1, .L2302
	ldr	r0, .L2302+0x4
.L2163:
	str	r0, [r1]
	ldr	r1, .L2302+0x8
	add	r0, r7, #0
	add	r0, r0, #0x8
	strb	r0, [r1, #0x1a]
	mov	r0, #0x5c
	mov	r1, r9
	mul	r1, r1, r0
	add	r1, r7, r1
	mov	r0, r8
	add	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L2302+0xc
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	strb	r7, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	bl	.L1723	@ far jump
.L2303:
	.align	2, 0
.L2302:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveStatDrain_PPLoss
	.word	gBattleScripting
	.word	gBattleTextBuff1
.L1961:
	ldr	r0, .L2304
	ldrh	r0, [r0]
	sub	r0, r0, #0x9
	cmp	r0, #0xd4
	bls	.LCB18570
	bl	.L1723	@far jump
.LCB18570:
	lsl	r0, r0, #0x2
	ldr	r1, .L2304+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2305:
	.align	2, 0
.L2304:
	.word	gLastUsedAbility
	.word	.L2054
	.align	2, 0
	.align	2, 0
.L2054:
	.word	.L2042
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L2014
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L2022
	.word	.L1723
	.word	.L1723
	.word	.L2031
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L2039
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L2045
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L2048
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L2011
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L2026
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1990
	.word	.L1723
	.word	.L1723
	.word	.L1986
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L2051
	.word	.L1723
	.word	.L1723
	.word	.L1993
	.word	.L1723
	.word	.L1963
	.word	.L1966
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L2022
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L2018
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1973
	.word	.L1981
	.word	.L1981
	.word	.L1970
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1976
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L2029
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L1723
	.word	.L2018
.L1963:
	ldr	r0, .L2306
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB18597
	bl	.L1723	@far jump
.LCB18597:
	ldr	r2, .L2306+0x4
	ldr	r0, .L2306+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1965	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB18615
	bl	.L1723	@far jump
.LCB18615:
.L1965:
	mov	r0, r9
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB18621
	bl	.L1723	@far jump
.LCB18621:
	cmp	r5, #0x11
	beq	.LCB18623
	bl	.L1723	@far jump
.LCB18623:
	ldr	r1, .L2306+0xc
	mov	r0, #0x5c
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r1
	ldrb	r0, [r0, #0x19]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	bne	.LCB18633
	bl	.L1723	@far jump
.LCB18633:
	ldr	r1, .L2306+0x10
	mov	r0, #0x9
	strb	r0, [r1, #0x1a]
	bl	BattleScriptPushCursor
	ldr	r1, .L2306+0x14
	ldr	r0, .L2306+0x18
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2307:
	.align	2, 0
.L2306:
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TargetAbilityStatRaise
.L1966:
	ldr	r0, .L2308
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB18664
	bl	.L1723	@far jump
.LCB18664:
	ldr	r2, .L2308+0x4
	ldr	r0, .L2308+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1968	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB18682
	bl	.L1723	@far jump
.LCB18682:
.L1968:
	mov	r0, r9
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB18688
	bl	.L1723	@far jump
.LCB18688:
	cmp	r5, #0x11
	beq	.L1969	@cond_branch
	cmp	r5, #0x6
	beq	.L1969	@cond_branch
	cmp	r5, #0x7
	beq	.LCB18694
	bl	.L1723	@far jump
.LCB18694:
.L1969:
	ldr	r1, .L2308+0xc
	mov	r0, #0x5c
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1b]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	bne	.LCB18705
	bl	.L1723	@far jump
.LCB18705:
	ldr	r1, .L2308+0x10
	mov	r0, #0xb
	strb	r0, [r1, #0x1a]
	bl	BattleScriptPushCursor
	ldr	r1, .L2308+0x14
	ldr	r0, .L2308+0x18
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2309:
	.align	2, 0
.L2308:
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TargetAbilityStatRaise
.L1970:
	ldr	r0, .L2310
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB18736
	bl	.L1723	@far jump
.LCB18736:
	ldr	r2, .L2310+0x4
	ldr	r0, .L2310+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1972	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB18754
	bl	.L1723	@far jump
.LCB18754:
.L1972:
	mov	r0, r9
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB18760
	bl	.L1723	@far jump
.LCB18760:
	cmp	r5, #0xb
	beq	.LCB18762
	bl	.L1723	@far jump
.LCB18762:
	ldr	r1, .L2310+0xc
	mov	r0, #0x5c
	mov	r4, r9
	mul	r4, r4, r0
	add	r0, r4, #0
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1a]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	bne	.LCB18772
	bl	.L1723	@far jump
.LCB18772:
	ldr	r1, .L2310+0x10
	mov	r0, #0x12
	strb	r0, [r1, #0x1a]
	bl	BattleScriptPushCursor
	ldr	r1, .L2310+0x14
	ldr	r0, .L2310+0x18
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2311:
	.align	2, 0
.L2310:
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TargetAbilityStatRaise
.L1973:
	ldr	r0, .L2312
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB18803
	bl	.L1723	@far jump
.LCB18803:
	ldr	r2, .L2312+0x4
	ldr	r0, .L2312+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1975	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB18821
	bl	.L1723	@far jump
.LCB18821:
.L1975:
	mov	r0, r9
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB18827
	bl	.L1723	@far jump
.LCB18827:
	ldr	r1, .L2312+0xc
	mov	r0, #0x5c
	mov	r5, r9
	mul	r5, r5, r0
	add	r0, r5, #0
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1a]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	bne	.LCB18837
	bl	.L1723	@far jump
.LCB18837:
	ldr	r1, .L2312+0x10
	mov	r0, #0xa
	strb	r0, [r1, #0x1a]
	bl	BattleScriptPushCursor
	ldr	r1, .L2312+0x14
	ldr	r0, .L2312+0x18
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2313:
	.align	2, 0
.L2312:
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TargetAbilityStatRaise
.L1976:
	ldr	r0, .L2314
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB18868
	bl	.L1723	@far jump
.LCB18868:
	ldr	r2, .L2314+0x4
	ldr	r0, .L2314+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1978	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB18886
	bl	.L1723	@far jump
.LCB18886:
.L1978:
	mov	r0, r9
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB18892
	bl	.L1723	@far jump
.LCB18892:
	ldr	r0, .L2314+0xc
	ldr	r1, [r0]
	mov	r2, r9
	lsl	r0, r2, #0x1
	ldr	r3, .L2314+0x10
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r2, .L2314+0x14
	mov	r0, #0x5c
	mov	r4, r9
	mul	r4, r4, r0
	add	r0, r4, #0
	add	r4, r0, r2
	ldrh	r0, [r4, #0x2e]
	ldrh	r1, [r1]
	lsr	r2, r0, #0x1
	cmp	r1, r2
	bhi	.LCB18914
	bl	.L1723	@far jump
.LCB18914:
	ldrh	r0, [r4, #0x2a]
	cmp	r0, r2
	bcc	.LCB18919
	bl	.L1723	@far jump
.LCB18919:
	ldr	r0, .L2314+0x18
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.LCB18925
	bl	.L1723	@far jump
.LCB18925:
	ldr	r0, .L2314+0x1c
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	cmp	r0, #0x7d
	bne	.L1979	@cond_branch
	ldr	r2, .L2314+0x20
	ldr	r0, .L2314+0x24
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB18946
	bl	.L1723	@far jump
.LCB18946:
.L1979:
	mov	r0, #0x1c
	ldrsb	r0, [r4, r0]
	cmp	r0, #0xc
	bne	.LCB18952
	bl	.L1723	@far jump
.LCB18952:
	ldr	r1, .L2314+0x28
	mov	r0, #0xc
	strb	r0, [r1, #0x1a]
	bl	BattleScriptPushCursor
	ldr	r1, .L2314+0x2c
	ldr	r0, .L2314+0x30
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2315:
	.align	2, 0
.L2314:
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleStruct
	.word	0x2d2
	.word	gBattleMons
	.word	gMultiHitCounter
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TargetAbilityStatRaise
.L1981:
	ldr	r0, .L2316
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB18989
	bl	.L1723	@far jump
.LCB18989:
	ldr	r2, .L2316+0x4
	ldr	r0, .L2316+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1983	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB19007
	bl	.L1723	@far jump
.LCB19007:
.L1983:
	mov	r0, r9
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB19013
	bl	.L1723	@far jump
.LCB19013:
	ldr	r0, .L2316+0xc
	ldr	r1, [r0]
	mov	r5, r9
	lsl	r0, r5, #0x1
	ldr	r2, .L2316+0x10
	add	r1, r1, r2
	add	r1, r1, r0
	ldr	r2, .L2316+0x14
	mov	r0, #0x5c
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r3, r0, r2
	ldrh	r0, [r3, #0x2e]
	ldrh	r1, [r1]
	lsr	r2, r0, #0x1
	cmp	r1, r2
	bhi	.LCB19035
	bl	.L1723	@far jump
.LCB19035:
	ldrh	r0, [r3, #0x2a]
	cmp	r0, r2
	bcc	.LCB19040
	bl	.L1723	@far jump
.LCB19040:
	ldr	r0, .L2316+0x18
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.LCB19046
	bl	.L1723	@far jump
.LCB19046:
	ldr	r0, .L2316+0x1c
	ldrb	r0, [r0]
	bl	GetBattlerAbility
	cmp	r0, #0x7d
	bne	.L1984	@cond_branch
	ldr	r2, .L2316+0x20
	ldr	r0, .L2316+0x24
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19067
	bl	.L1723	@far jump
.LCB19067:
.L1984:
	mov	r0, r9
	bl	CanBattlerSwitch
	cmp	r0, #0
	bne	.L1985	@cond_branch
	ldr	r0, .L2316+0x28
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19079
	bl	.L1723	@far jump
.LCB19079:
.L1985:
	ldr	r0, .L2316+0x28
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19087
	bl	.L1723	@far jump
.LCB19087:
	ldr	r0, .L2316+0x2c
	ldr	r0, [r0]
	ldr	r2, [r0, #0x4]
	mov	r4, r9
	lsl	r0, r4, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L2156	@ far jump
.L2317:
	.align	2, 0
.L2316:
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleStruct
	.word	0x2d2
	.word	gBattleMons
	.word	gMultiHitCounter
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleTypeFlags
	.word	gBattleResources
.L1986:
	ldr	r0, .L2318
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19126
	bl	.L1723	@far jump
.LCB19126:
	ldr	r2, .L2318+0x4
	ldr	r0, .L2318+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1988	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB19144
	bl	.L1723	@far jump
.LCB19144:
.L1988:
	mov	r0, r9
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB19150
	bl	.L1723	@far jump
.LCB19150:
	ldr	r0, .L2318+0xc
	ldrh	r0, [r0]
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB19159
	bl	.L1723	@far jump
.LCB19159:
	ldr	r1, .L2318+0x10
	mov	r0, #0x5c
	mov	r5, r9
	mul	r5, r5, r0
	add	r0, r5, #0
	add	r1, r0, r1
	mov	r0, #0x1b
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xc
	bne	.L1989	@cond_branch
	mov	r0, #0x1a
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bne	.LCB19174
	bl	.L1723	@far jump
.LCB19174:
.L1989:
	bl	BattleScriptPushCursor
	ldr	r1, .L2318+0x14
	ldr	r0, .L2318+0x18
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2319:
	.align	2, 0
.L2318:
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WeakArmorActivates
.L1990:
	ldr	r0, .L2320
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19203
	bl	.L1723	@far jump
.LCB19203:
	ldr	r2, .L2320+0x4
	ldr	r0, .L2320+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1992	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB19221
	bl	.L1723	@far jump
.LCB19221:
.L1992:
	ldr	r5, .L2320+0xc
	ldr	r4, .L2320+0x10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrh	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.LCB19234
	bl	.L1723	@far jump
.LCB19234:
	add	r0, r1, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB19239
	bl	.L1723	@far jump
.LCB19239:
	ldrb	r0, [r4]
	mov	r1, #0xa5
	bl	IsAbilityOnSide
	cmp	r0, #0
	beq	.LCB19246
	bl	.L1723	@far jump
.LCB19246:
	ldr	r1, .L2320+0x14
	ldr	r3, .L2320+0x18
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	ldrb	r3, [r3]
	add	r0, r0, r3
	add	r1, r1, #0x25
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB19261
	bl	.L1723	@far jump
.LCB19261:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB19273
	bl	.L1723	@far jump
.LCB19273:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldr	r3, .L2320+0x1c
	ldrh	r1, [r3]
	strh	r1, [r0, #0x4]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrb	r2, [r0, #0xf]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0, #0xf]
	ldr	r1, .L2320+0x20
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldrh	r2, [r3]
	strb	r2, [r1, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r2
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	bl	BattleScriptPushCursor
	ldr	r1, .L2320+0x24
	ldr	r0, .L2320+0x28
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2321:
	.align	2, 0
.L2320:
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gChosenMovePos
	.word	gChosenMove
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_CursedBodyActivates
.L1993:
	ldr	r0, .L2322
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19346
	bl	.L1723	@far jump
.LCB19346:
	ldr	r4, .L2322+0x4
	ldrb	r0, [r4]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB19353
	bl	.L1723	@far jump
.LCB19353:
	ldr	r1, .L2322+0x8
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB19365
	bl	.L1723	@far jump
.LCB19365:
	ldr	r2, .L2322+0xc
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x20]
	mov	r8, r2
	cmp	r0, #0xc5
	bne	.LCB19375
	bl	.L1723	@far jump
.LCB19375:
	cmp	r0, #0xc5
	bgt	.L2008	@cond_branch
	cmp	r0, #0x98
	bne	.LCB19379
	bl	.L1723	@far jump
.LCB19379:
	cmp	r0, #0x98
	bgt	.L2009	@cond_branch
	cmp	r0, #0x79
	bne	.LCB19383
	bl	.L1723	@far jump
.LCB19383:
	b	.L2006
.L2323:
	.align	2, 0
.L2322:
	.word	gMoveResultFlags
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gBattleMons
.L2009:
	cmp	r0, #0xb0
	bne	.LCB19397
	bl	.L1723	@far jump
.LCB19397:
	b	.L2006
.L2008:
	cmp	r0, #0xd5
	bne	.LCB19402
	bl	.L1723	@far jump
.LCB19402:
	cmp	r0, #0xd5
	bgt	.L2010	@cond_branch
	cmp	r0, #0xd3
	bgt	.L2006	@cond_branch
	cmp	r0, #0xd0
	blt	.L2006	@cond_branch
	bl	.L1723	@ far jump
.L2010:
	cmp	r0, #0xe1
	bne	.LCB19413
	bl	.L1723	@far jump
.LCB19413:
.L2006:
	ldr	r2, .L2324
	ldr	r0, .L2324+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r8
	mov	r1, #0x98
	strh	r1, [r0, #0x20]
	strh	r1, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L2324+0x8
	ldr	r0, .L2324+0xc
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2325:
	.align	2, 0
.L2324:
	.word	gLastUsedAbility
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MummyActivates
.L2011:
	ldr	r0, .L2326
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19450
	bl	.L1723	@far jump
.LCB19450:
	ldr	r0, .L2326+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB19456
	bl	.L1723	@far jump
.LCB19456:
	ldr	r2, .L2326+0x8
	ldr	r0, .L2326+0xc
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2013	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB19474
	bl	.L1723	@far jump
.LCB19474:
.L2013:
	mov	r0, r9
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB19480
	bl	.L1723	@far jump
.LCB19480:
	ldr	r1, .L2326+0x10
	mov	r0, #0x5c
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r1
	ldrb	r2, [r0, #0x19]
	ldrb	r0, [r0, #0x19]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	bne	.LCB19490
	bl	.L1723	@far jump
.LCB19490:
	ldr	r1, .L2326+0x14
	mov	r0, #0xc
	sub	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1a]
	bl	BattleScriptPushCursor
	ldr	r1, .L2326+0x18
	ldr	r0, .L2326+0x1c
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2327:
	.align	2, 0
.L2326:
	.word	gMoveResultFlags
	.word	gIsCriticalHit
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AngryPointActivates
.L2014:
	ldr	r0, .L2328
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19525
	bl	.L1723	@far jump
.LCB19525:
	mov	r4, r8
	cmp	r4, #0xa5
	bne	.LCB19528
	bl	.L1723	@far jump
.LCB19528:
	ldr	r0, .L2328+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.LCB19538
	bl	.L1723	@far jump
.LCB19538:
	ldr	r2, .L2328+0x8
	ldr	r0, .L2328+0xc
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2016	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB19556
	bl	.L1723	@far jump
.LCB19556:
.L2016:
	ldr	r1, .L2328+0x10
	mov	r0, #0x5c
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r1, r0, r1
	add	r4, r1, #0
	add	r4, r4, #0x22
	ldrb	r0, [r4]
	cmp	r0, r5
	bne	.LCB19567
	bl	.L1723	@far jump
.LCB19567:
	add	r3, r1, #0
	add	r3, r3, #0x23
	ldrb	r0, [r3]
	cmp	r0, r5
	bne	.LCB19572
	bl	.L1723	@far jump
.LCB19572:
	add	r2, r1, #0
	add	r2, r2, #0x24
	ldrb	r0, [r2]
	cmp	r0, r5
	bne	.LCB19577
	bl	.L1723	@far jump
.LCB19577:
	ldrh	r0, [r1, #0x2a]
	cmp	r0, #0
	bne	.LCB19582
	bl	.L1723	@far jump
.LCB19582:
	strb	r5, [r4]
	strb	r5, [r3]
	mov	r0, #0x9
	strb	r0, [r2]
	ldr	r1, .L2328+0x14
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	strb	r5, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	bl	BattleScriptPushCursor
	ldr	r1, .L2328+0x18
	ldr	r0, .L2328+0x1c
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2329:
	.align	2, 0
.L2328:
	.word	gMoveResultFlags
	.word	gBattleMoves
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ColorChangeActivates
.L2018:
	ldr	r0, .L2330
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19628
	bl	.L1723	@far jump
.LCB19628:
	ldr	r1, .L2330+0x4
	ldr	r0, .L2330+0x8
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2a]
	cmp	r0, #0
	bne	.LCB19639
	bl	.L1723	@far jump
.LCB19639:
	mov	r0, #0x1b
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bne	.LCB19644
	bl	.L1723	@far jump
.LCB19644:
	ldr	r0, .L2330+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.LCB19652
	bl	.L1723	@far jump
.LCB19652:
	ldr	r3, .L2330+0x10
	ldr	r0, .L2330+0x14
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r3, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2020	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB19670
	bl	.L1723	@far jump
.LCB19670:
.L2020:
	mov	r0, r8
	add	r1, r2, #0
	bl	IsMoveMakingContact
	cmp	r0, #0
	bne	.LCB19679
	bl	.L1723	@far jump
.LCB19679:
	ldr	r1, .L2330+0x18
	ldr	r0, .L2330+0x1c
	strh	r0, [r1, #0x2e]
	ldr	r2, .L2330+0x20
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x9
	strb	r0, [r2, #0x1]
	ldr	r0, .L2330+0x24
	ldrh	r1, [r0]
	strb	r1, [r2, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	bl	BattleScriptPushCursor
	ldr	r1, .L2330+0x28
	ldr	r0, .L2330+0x2c
	str	r0, [r1]
	ldr	r2, .L2330+0x30
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L2156	@ far jump
.L2331:
	.align	2, 0
.L2330:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleScripting
	.word	0x4018
	.word	gBattleTextBuff1
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityStatusEffect
	.word	gHitMarker
.L2022:
	ldr	r0, .L2332
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19745
	bl	.L1723	@far jump
.LCB19745:
	ldr	r6, .L2332+0x4
	ldr	r5, .L2332+0x8
	ldrb	r2, [r5]
	mov	r4, #0x5c
	mov	r0, r2
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.LCB19756
	bl	.L1723	@far jump
.LCB19756:
	ldr	r0, .L2332+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.LCB19764
	bl	.L1723	@far jump
.LCB19764:
	ldr	r3, .L2332+0x10
	ldr	r0, .L2332+0x14
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r3, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2024	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB19782
	bl	.L1723	@far jump
.LCB19782:
.L2024:
	mov	r0, r8
	add	r1, r2, #0
	bl	IsMoveMakingContact
	cmp	r0, #0
	bne	.LCB19791
	bl	.L1723	@far jump
.LCB19791:
	ldr	r1, .L2332+0x18
	ldrb	r0, [r5]
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x3
	str	r0, [r1]
	cmp	r0, #0
	bne	.L2025	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L2025:
	ldr	r2, .L2332+0x1c
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x9
	strb	r0, [r2, #0x1]
	ldr	r0, .L2332+0x20
	ldrh	r1, [r0]
	strb	r1, [r2, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	bl	BattleScriptPushCursor
	ldr	r1, .L2332+0x24
	ldr	r0, .L2332+0x28
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2333:
	.align	2, 0
.L2332:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMoveDamage
	.word	gBattleTextBuff1
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_RoughSkinActivates
.L2026:
	mov	r0, #0x6
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.LCB19855
	bl	.L1723	@far jump
.LCB19855:
	ldr	r0, .L2334
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19863
	bl	.L1723	@far jump
.LCB19863:
	ldr	r6, .L2334+0x4
	ldr	r0, .L2334+0x8
	ldrb	r0, [r0]
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.LCB19874
	bl	.L1723	@far jump
.LCB19874:
	ldr	r4, .L2334+0xc
	ldrb	r0, [r4]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB19881
	bl	.L1723	@far jump
.LCB19881:
	mov	r0, r8
	ldrb	r1, [r4]
	bl	IsMoveMakingContact
	cmp	r0, #0
	bne	.LCB19890
	bl	.L1723	@far jump
.LCB19890:
	ldr	r1, .L2334+0x10
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x2
	str	r0, [r1]
	cmp	r0, #0
	bne	.L2028	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L2028:
	bl	BattleScriptPushCursor
	ldr	r1, .L2334+0x14
	ldr	r0, .L2334+0x18
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2335:
	.align	2, 0
.L2334:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AftermathDmg
.L2029:
	ldr	r0, .L2336
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19932
	bl	.L1723	@far jump
.LCB19932:
	ldr	r2, .L2336+0x4
	ldr	r4, .L2336+0x8
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.LCB19943
	bl	.L1723	@far jump
.LCB19943:
	ldr	r0, .L2336+0xc
	ldrb	r0, [r0]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB19950
	bl	.L1723	@far jump
.LCB19950:
	ldr	r3, .L2336+0x10
	ldr	r2, .L2336+0x14
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, #0x8
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [r3]
	bl	BattleScriptPushCursor
	ldr	r1, .L2336+0x18
	ldr	r0, .L2336+0x1c
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2337:
	.align	2, 0
.L2336:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AftermathDmg
.L2031:
	ldr	r7, .L2338
	ldr	r4, .L2338+0x4
	ldrb	r2, [r4]
	mov	r5, #0x5c
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r0, r7
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xc
	bne	.LCB19994
	bl	.L1723	@far jump
.LCB19994:
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xc
	bne	.LCB20001
	bl	.L1723	@far jump
.LCB20001:
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xc
	bne	.LCB20008
	bl	.L1723	@far jump
.LCB20008:
	add	r0, r2, #0
	bl	GetBattlerAbility
	cmp	r0, #0x8e
	bne	.LCB20013
	bl	.L1723	@far jump
.LCB20013:
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x83
	bne	.LCB20020
	bl	.L1723	@far jump
.LCB20020:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0
	bne	.LCB20033
	b	.L2039	@long jump
.LCB20033:
	cmp	r6, #0x1
	bne	.LCB20035
	b	.L2042	@long jump
.LCB20035:
	ldr	r0, .L2338+0x8
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB20043
	bl	.L1723	@far jump
.LCB20043:
	ldrb	r2, [r4]
	mov	r0, r2
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.LCB20051
	bl	.L1723	@far jump
.LCB20051:
	ldr	r0, .L2338+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.LCB20059
	bl	.L1723	@far jump
.LCB20059:
	ldr	r3, .L2338+0x10
	ldr	r0, .L2338+0x14
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r3, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2038	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB20077
	bl	.L1723	@far jump
.LCB20077:
.L2038:
	add	r0, r2, #0
	bl	GetBattlerAbility
	cmp	r0, #0xf
	bne	.LCB20083
	bl	.L1723	@far jump
.LCB20083:
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x48
	bne	.LCB20089
	bl	.L1723	@far jump
.LCB20089:
	ldrb	r2, [r4]
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r7, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB20099
	bl	.L1723	@far jump
.LCB20099:
	add	r0, r2, #0
	bl	IsAbilityStatusProtected
	cmp	r0, #0
	beq	.LCB20104
	bl	.L1723	@far jump
.LCB20104:
	mov	r0, r8
	ldrb	r1, [r4]
	bl	IsMoveMakingContact
	cmp	r0, #0
	bne	.LCB20113
	bl	.L1723	@far jump
.LCB20113:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB20125
	bl	.L1723	@far jump
.LCB20125:
	ldr	r1, .L2338+0x18
	ldr	r0, .L2338+0x1c
	strh	r0, [r1, #0x2e]
	ldr	r2, .L2338+0x20
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x9
	strb	r0, [r2, #0x1]
	ldr	r0, .L2338+0x24
	ldrh	r1, [r0]
	strb	r1, [r2, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	bl	BattleScriptPushCursor
	ldr	r1, .L2338+0x28
	ldr	r0, .L2338+0x2c
	str	r0, [r1]
	ldr	r2, .L2338+0x30
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L2156	@ far jump
.L2339:
	.align	2, 0
.L2338:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gProtectStructs
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleScripting
	.word	0x4001
	.word	gBattleTextBuff1
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityStatusEffect
	.word	gHitMarker
.L2039:
	ldr	r0, .L2340
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB20192
	bl	.L1723	@far jump
.LCB20192:
	ldr	r7, .L2340+0x4
	ldr	r5, .L2340+0x8
	ldrb	r4, [r5]
	mov	r6, #0x5c
	mov	r0, r4
	mul	r0, r0, r6
	add	r2, r0, r7
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	bne	.LCB20203
	bl	.L1723	@far jump
.LCB20203:
	ldr	r0, .L2340+0xc
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.LCB20211
	bl	.L1723	@far jump
.LCB20211:
	ldr	r3, .L2340+0x10
	ldr	r0, .L2340+0x14
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r3, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2041	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB20229
	bl	.L1723	@far jump
.LCB20229:
.L2041:
	add	r0, r2, #0
	add	r0, r0, #0x22
	ldrb	r3, [r0]
	cmp	r3, #0x3
	bne	.LCB20237
	bl	.L1723	@far jump
.LCB20237:
	add	r0, r0, #0x1
	ldrb	r1, [r0]
	cmp	r1, #0x3
	bne	.LCB20244
	bl	.L1723	@far jump
.LCB20244:
	add	r0, r0, #0x1
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.LCB20251
	bl	.L1723	@far jump
.LCB20251:
	cmp	r3, #0x8
	bne	.LCB20253
	bl	.L1723	@far jump
.LCB20253:
	cmp	r1, #0x8
	bne	.LCB20255
	bl	.L1723	@far jump
.LCB20255:
	cmp	r0, #0x8
	bne	.LCB20257
	bl	.L1723	@far jump
.LCB20257:
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0x11
	bne	.LCB20262
	bl	.L1723	@far jump
.LCB20262:
	ldrb	r2, [r5]
	mov	r0, r2
	mul	r0, r0, r6
	add	r1, r7, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB20272
	bl	.L1723	@far jump
.LCB20272:
	add	r0, r2, #0
	bl	IsAbilityStatusProtected
	cmp	r0, #0
	beq	.LCB20277
	bl	.L1723	@far jump
.LCB20277:
	mov	r0, r8
	ldrb	r1, [r5]
	bl	IsMoveMakingContact
	cmp	r0, #0
	bne	.LCB20286
	bl	.L1723	@far jump
.LCB20286:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB20298
	bl	.L1723	@far jump
.LCB20298:
	ldr	r1, .L2340+0x18
	ldr	r0, .L2340+0x1c
	strh	r0, [r1, #0x2e]
	ldr	r2, .L2340+0x20
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x9
	strb	r0, [r2, #0x1]
	ldr	r0, .L2340+0x24
	ldrh	r1, [r0]
	strb	r1, [r2, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	bl	BattleScriptPushCursor
	ldr	r1, .L2340+0x28
	ldr	r0, .L2340+0x2c
	str	r0, [r1]
	ldr	r2, .L2340+0x30
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L2156	@ far jump
.L2341:
	.align	2, 0
.L2340:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleScripting
	.word	0x4002
	.word	gBattleTextBuff1
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityStatusEffect
	.word	gHitMarker
.L2042:
	ldr	r0, .L2342
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB20365
	bl	.L1723	@far jump
.LCB20365:
	ldr	r7, .L2342+0x4
	ldr	r5, .L2342+0x8
	ldrb	r3, [r5]
	mov	r6, #0x5c
	mov	r0, r3
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.LCB20376
	bl	.L1723	@far jump
.LCB20376:
	ldr	r0, .L2342+0xc
	lsl	r1, r3, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.LCB20384
	bl	.L1723	@far jump
.LCB20384:
	ldr	r4, .L2342+0x10
	ldr	r0, .L2342+0x14
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r2, r0, #0x3
	add	r0, r4, #0
	add	r0, r0, #0xc
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2044	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x10
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB20402
	bl	.L1723	@far jump
.LCB20402:
.L2044:
	add	r0, r1, #0
	add	r1, r3, #0
	bl	CanParalyzeType
	cmp	r0, #0
	bne	.LCB20409
	bl	.L1723	@far jump
.LCB20409:
	ldrb	r0, [r5]
	bl	GetBattlerAbility
	cmp	r0, #0x7
	bne	.LCB20415
	bl	.L1723	@far jump
.LCB20415:
	ldrb	r2, [r5]
	mov	r0, r2
	mul	r0, r0, r6
	add	r1, r7, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB20425
	bl	.L1723	@far jump
.LCB20425:
	add	r0, r2, #0
	bl	IsAbilityStatusProtected
	cmp	r0, #0
	beq	.LCB20430
	bl	.L1723	@far jump
.LCB20430:
	mov	r0, r8
	ldrb	r1, [r5]
	bl	IsMoveMakingContact
	cmp	r0, #0
	bne	.LCB20439
	bl	.L1723	@far jump
.LCB20439:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB20451
	bl	.L1723	@far jump
.LCB20451:
	ldr	r1, .L2342+0x18
	ldr	r0, .L2342+0x1c
	strh	r0, [r1, #0x2e]
	bl	BattleScriptPushCursor
	ldr	r1, .L2342+0x20
	ldr	r0, .L2342+0x24
	str	r0, [r1]
	ldr	r2, .L2342+0x28
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L2156	@ far jump
.L2343:
	.align	2, 0
.L2342:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleScripting
	.word	0x4005
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityStatusEffect
	.word	gHitMarker
.L2045:
	ldr	r0, .L2344
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB20494
	bl	.L1723	@far jump
.LCB20494:
	ldr	r7, .L2344+0x4
	ldr	r6, .L2344+0x8
	ldrb	r3, [r6]
	mov	r5, #0x5c
	mov	r0, r3
	mul	r0, r0, r5
	add	r2, r0, r7
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	bne	.LCB20505
	bl	.L1723	@far jump
.LCB20505:
	ldr	r0, .L2344+0xc
	lsl	r1, r3, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.LCB20513
	bl	.L1723	@far jump
.LCB20513:
	ldr	r1, .L2344+0x10
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB20525
	bl	.L1723	@far jump
.LCB20525:
	ldr	r4, .L2344+0x14
	ldr	r0, .L2344+0x18
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r4, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2047	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB20543
	bl	.L1723	@far jump
.LCB20543:
.L2047:
	add	r0, r2, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.LCB20551
	bl	.L1723	@far jump
.LCB20551:
	add	r0, r2, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.LCB20558
	bl	.L1723	@far jump
.LCB20558:
	add	r0, r2, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.LCB20565
	bl	.L1723	@far jump
.LCB20565:
	add	r0, r3, #0
	bl	GetBattlerAbility
	cmp	r0, #0x29
	bne	.LCB20570
	bl	.L1723	@far jump
.LCB20570:
	ldrb	r2, [r6]
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r7, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB20580
	bl	.L1723	@far jump
.LCB20580:
	add	r0, r2, #0
	bl	IsAbilityStatusProtected
	cmp	r0, #0
	beq	.LCB20585
	bl	.L1723	@far jump
.LCB20585:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB20597
	bl	.L1723	@far jump
.LCB20597:
	ldr	r1, .L2344+0x1c
	ldr	r0, .L2344+0x20
	strh	r0, [r1, #0x2e]
	bl	BattleScriptPushCursor
	ldr	r1, .L2344+0x24
	ldr	r0, .L2344+0x28
	str	r0, [r1]
	ldr	r2, .L2344+0x2c
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L2156	@ far jump
.L2345:
	.align	2, 0
.L2344:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattleMoves
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleScripting
	.word	0x4003
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityStatusEffect
	.word	gHitMarker
.L2048:
	ldr	r0, .L2346
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB20641
	bl	.L1723	@far jump
.LCB20641:
	ldr	r7, .L2346+0x4
	ldrb	r1, [r7]
	mov	r5, #0x5c
	mov	sl, r5
	mov	r0, sl
	mul	r0, r0, r1
	ldr	r2, .L2346+0x8
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.LCB20654
	bl	.L1723	@far jump
.LCB20654:
	ldr	r0, .L2346+0xc
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.LCB20662
	bl	.L1723	@far jump
.LCB20662:
	ldr	r1, .L2346+0x10
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB20674
	bl	.L1723	@far jump
.LCB20674:
	ldr	r3, .L2346+0x14
	ldr	r4, .L2346+0x18
	mov	r8, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r2, r0, #0x3
	add	r0, r3, #0
	add	r0, r0, #0xc
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2050	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x10
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB20693
	bl	.L1723	@far jump
.LCB20693:
.L2050:
	mov	r0, sl
	mul	r0, r0, r1
	ldr	r5, .L2346+0x8
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.LCB20702
	bl	.L1723	@far jump
.LCB20702:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB20714
	bl	.L1723	@far jump
.LCB20714:
	ldrb	r0, [r7]
	bl	GetBattlerAbility
	cmp	r0, #0xc
	bne	.LCB20720
	bl	.L1723	@far jump
.LCB20720:
	ldrb	r0, [r7]
	mov	r1, #0xa5
	bl	IsAbilityOnSide
	cmp	r0, #0
	beq	.LCB20727
	bl	.L1723	@far jump
.LCB20727:
	ldr	r5, [sp, #0xc]
	add	r0, r5, #0
	ldr	r1, [sp, #0x14]
	bl	GetGenderFromSpeciesAndPersonality
	add	r4, r0, #0
	ldr	r6, [sp, #0x10]
	add	r0, r6, #0
	ldr	r1, [sp, #0x18]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.LCB20745
	bl	.L1723	@far jump
.LCB20745:
	ldrb	r0, [r7]
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r4, .L2346+0x8
	add	r4, r4, #0x54
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0xf0
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB20757
	bl	.L1723	@far jump
.LCB20757:
	add	r0, r5, #0
	ldr	r1, [sp, #0x14]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.LCB20765
	bl	.L1723	@far jump
.LCB20765:
	add	r0, r6, #0
	ldr	r1, [sp, #0x18]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.LCB20773
	bl	.L1723	@far jump
.LCB20773:
	ldrb	r0, [r7]
	mov	r2, sl
	mul	r2, r2, r0
	add	r2, r2, r4
	ldr	r1, .L2346+0x1c
	mov	r3, r8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x10
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L2346+0x20
	ldr	r0, .L2346+0x24
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2347:
	.align	2, 0
.L2346:
	.word	gMoveResultFlags
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gProtectStructs
	.word	gBattleMoves
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBitTable
	.word	gBattlescriptCurrInstr
	.word	BattleScript_CuteCharmActivates
.L2051:
	ldr	r1, [r6]
	ldr	r0, .L2348
	ldrb	r2, [r0]
	lsl	r0, r2, #0x3
	add	r1, r1, r0
	mov	r4, #0xb7
	lsl	r4, r4, #0x2
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB20824
	bl	.L1723	@far jump
.LCB20824:
	ldr	r5, .L2348+0x4
	add	r0, r1, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB20832
	bl	.L1723	@far jump
.LCB20832:
	ldr	r3, .L2348+0x8
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r1, r0, #0x3
	add	r0, r3, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2053	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB20848
	bl	.L1723	@far jump
.LCB20848:
.L2053:
	bl	BattleScriptPushCursor
	ldr	r1, .L2348+0xc
	ldr	r0, .L2348+0x10
	str	r0, [r1]
	bl	.L2156	@ far jump
.L2349:
	.align	2, 0
.L2348:
	.word	gBattlerTarget
	.word	0x2de
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
	.word	BattleScript_IllusionOff
.L2056:
	ldr	r0, .L2350
	mov	sl, r0
	ldrh	r0, [r0]
	cmp	r0, #0x8f
	beq	.LCB20873
	bl	.L1723	@far jump
.LCB20873:
	ldr	r0, .L2350+0x4
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB20883
	bl	.L1723	@far jump
.LCB20883:
	ldr	r7, .L2350+0x8
	ldr	r6, .L2350+0xc
	ldrb	r3, [r6]
	mov	r5, #0x5c
	mov	r0, r3
	mul	r0, r0, r5
	add	r2, r0, r7
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	bne	.LCB20894
	bl	.L1723	@far jump
.LCB20894:
	ldr	r0, .L2350+0x10
	lsl	r1, r3, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.LCB20902
	bl	.L1723	@far jump
.LCB20902:
	add	r0, r2, #0
	add	r0, r0, #0x22
	ldrb	r4, [r0]
	cmp	r4, #0x3
	bne	.LCB20909
	bl	.L1723	@far jump
.LCB20909:
	add	r0, r0, #0x1
	ldrb	r1, [r0]
	cmp	r1, #0x3
	bne	.LCB20916
	bl	.L1723	@far jump
.LCB20916:
	add	r0, r0, #0x1
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.LCB20923
	bl	.L1723	@far jump
.LCB20923:
	cmp	r4, #0x8
	bne	.LCB20925
	bl	.L1723	@far jump
.LCB20925:
	cmp	r1, #0x8
	bne	.LCB20927
	bl	.L1723	@far jump
.LCB20927:
	cmp	r0, #0x8
	bne	.LCB20929
	bl	.L1723	@far jump
.LCB20929:
	add	r0, r3, #0
	bl	GetBattlerAbility
	cmp	r0, #0x11
	bne	.LCB20934
	bl	.L1723	@far jump
.LCB20934:
	ldrb	r2, [r6]
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r7, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB20944
	bl	.L1723	@far jump
.LCB20944:
	add	r0, r2, #0
	bl	IsAbilityStatusProtected
	cmp	r0, #0
	beq	.LCB20949
	bl	.L1723	@far jump
.LCB20949:
	mov	r0, r8
	ldr	r1, .L2350+0x14
	ldrb	r1, [r1]
	bl	IsMoveMakingContact
	cmp	r0, #0
	bne	.LCB20959
	bl	.L1723	@far jump
.LCB20959:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB20971
	bl	.L1723	@far jump
.LCB20971:
	ldr	r1, .L2350+0x18
	mov	r0, #0x2
	strh	r0, [r1, #0x2e]
	ldr	r1, .L2350+0x1c
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x9
	strb	r0, [r1, #0x1]
	mov	r3, sl
	ldrh	r2, [r3]
	strb	r2, [r1, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r2
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	bl	BattleScriptPushCursor
	ldr	r1, .L2350+0x20
	ldr	r0, .L2350+0x24
	str	r0, [r1]
	ldr	r2, .L2350+0x28
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L2156
.L2351:
	.align	2, 0
.L2350:
	.word	gLastUsedAbility
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityStatusEffect
	.word	gHitMarker
.L2062:
	mov	r0, r9
	bl	GetBattlerAbility
	cmp	r0, #0xd8
	beq	.LCB21031
	bl	.L1723	@far jump
.LCB21031:
	mov	r0, r9
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB21038
	bl	.L1723	@far jump
.LCB21038:
	ldr	r2, .L2352
	ldr	r7, .L2352+0x4
	ldrh	r1, [r7]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB21052
	bl	.L1723	@far jump
.LCB21052:
	ldr	r0, .L2352+0x8
	mov	r4, r9
	lsl	r1, r4, #0x1
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r4, r1, r0
	ldrb	r2, [r4, #0x4]
	lsl	r0, r2, #0x1b
	lsr	r5, r0, #0x1f
	cmp	r5, #0
	beq	.LCB21065
	bl	.L1723	@far jump
.LCB21065:
	ldr	r6, .L2352+0xc
	ldrb	r0, [r6]
	cmp	r0, r9
	bne	.LCB21071
	bl	.L1723	@far jump
.LCB21071:
	mov	r0, #0x10
	orr	r2, r2, r0
	strb	r2, [r4, #0x4]
	ldr	r3, .L2352+0x10
	ldr	r0, [r3]
	add	r0, r0, r9
	ldrb	r0, [r0, #0xc]
	mov	r1, #0x4
	orr	r0, r0, r1
	lsl	r0, r0, #0x5
	mov	r1, #0x1f
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r4, #0x4]
	ldr	r0, [r3]
	ldr	r1, .L2352+0x14
	add	r0, r0, r1
	strb	r5, [r0]
	ldr	r0, .L2352+0x18
	mov	r2, r9
	strb	r2, [r0]
	strb	r2, [r6]
	ldr	r1, .L2352+0x1c
	ldrh	r0, [r7]
	strh	r0, [r1]
	ldr	r5, .L2352+0x20
	ldr	r0, .L2352+0x24
	add	r7, r0, #0
	add	r7, r7, #0x20
	ldrb	r1, [r7]
	mov	r0, #0x3
	and	r0, r0, r1
	strb	r0, [r5]
	ldrb	r0, [r5]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L2066	@cond_branch
	ldrb	r0, [r7]
	lsr	r0, r0, #0x4
	strb	r0, [r5]
.L2066:
	ldr	r2, .L2352+0x28
	ldr	r0, [r2]
	ldr	r1, .L2352+0x2c
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L2352+0x30
	bl	BattleScriptExecute
	b	.L2156
.L2353:
	.align	2, 0
.L2352:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	0x19f
	.word	gBattlerAbility
	.word	gCalledMove
	.word	gBattlerTarget
	.word	gBattleScripting
	.word	gHitMarker
	.word	-0x401
	.word	BattleScript_DancerActivates
.L2069:
	mov	r3, #0x0
	mov	r9, r3
	ldr	r0, .L2354
	ldrb	r0, [r0]
	cmp	r9, r0
	bcc	.LCB21165
	bl	.L1723	@far jump
.LCB21165:
.L2073:
	ldr	r1, .L2354+0x4
	mov	r0, #0x5c
	mov	r4, r9
	mul	r4, r4, r0
	add	r0, r4, #0
	add	r0, r0, r1
	ldrh	r0, [r0, #0x20]
	sub	r0, r0, #0x7
	mov	r8, r1
	cmp	r0, #0x41
	bls	.LCB21178
	b	.L2074	@long jump
.LCB21178:
	lsl	r0, r0, #0x2
	ldr	r1, .L2354+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2355:
	.align	2, 0
.L2354:
	.word	gBattlersCount
	.word	gBattleMons
	.word	.L2090
	.align	2, 0
	.align	2, 0
.L2090:
	.word	.L2079
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2088
	.word	.L2074
	.word	.L2074
	.word	.L2082
	.word	.L2074
	.word	.L2075
	.word	.L2074
	.word	.L2074
	.word	.L2077
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2086
	.word	.L2084
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2074
	.word	.L2082
.L2075:
	mov	r0, #0x5c
	mov	r5, r9
	mul	r5, r5, r0
	add	r0, r5, #0
	mov	r1, r8
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L2356
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB21210
	b	.L2074	@long jump
.LCB21210:
	ldr	r0, .L2356+0x4
	ldr	r1, .L2356+0x8
	bl	StringCopy
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	b	.L2153
.L2357:
	.align	2, 0
.L2356:
	.word	0xf88
	.word	gBattleTextBuff1
	.word	gStatusConditionString_PoisonJpn
.L2077:
	mov	r0, #0x5c
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	mov	r1, r8
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB21241
	b	.L2074	@long jump
.LCB21241:
	ldr	r0, .L2358
	ldr	r1, .L2358+0x4
	bl	StringCopy
	mov	r2, #0x2
	str	r2, [sp, #0x8]
	b	.L2153
.L2359:
	.align	2, 0
.L2358:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_ConfusionJpn
.L2079:
	mov	r0, #0x5c
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	mov	r1, r8
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2074	@cond_branch
	ldr	r0, .L2360
	ldr	r1, .L2360+0x4
	b	.L2164
.L2361:
	.align	2, 0
.L2360:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_ParalysisJpn
.L2082:
	mov	r0, #0x5c
	mov	r3, r9
	mul	r3, r3, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2074	@cond_branch
	mov	r2, r8
	add	r2, r2, #0x54
	add	r2, r3, r2
	ldr	r0, [r2]
	ldr	r1, .L2362
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L2362+0x4
	ldr	r1, .L2362+0x8
	bl	StringCopy
	mov	r5, #0x1
	str	r5, [sp, #0x8]
	b	.L2153
.L2363:
	.align	2, 0
.L2362:
	.word	-0x8000001
	.word	gBattleTextBuff1
	.word	gStatusConditionString_SleepJpn
.L2084:
	mov	r0, #0x5c
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	mov	r1, r8
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2074	@cond_branch
	ldr	r0, .L2364
	ldr	r1, .L2364+0x4
	bl	StringCopy
	mov	r2, #0x1
	str	r2, [sp, #0x8]
	b	.L2153
.L2365:
	.align	2, 0
.L2364:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_BurnJpn
.L2086:
	mov	r0, #0x5c
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	mov	r1, r8
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2074	@cond_branch
	ldr	r0, .L2366
	ldr	r1, .L2366+0x4
.L2164:
	bl	StringCopy
	mov	r4, #0x1
	str	r4, [sp, #0x8]
	b	.L2153
.L2367:
	.align	2, 0
.L2366:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_IceJpn
.L2088:
	mov	r0, #0x5c
	mov	r5, r9
	mul	r5, r5, r0
	add	r0, r5, #0
	mov	r1, r8
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0xf0
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2074	@cond_branch
	ldr	r0, .L2368
	ldr	r1, .L2368+0x4
	bl	StringCopy
	mov	r0, #0x3
	str	r0, [sp, #0x8]
.L2074:
	ldr	r1, [sp, #0x8]
	cmp	r1, #0
	beq	.L2072	@cond_branch
.L2153:
	ldr	r2, [sp, #0x8]
	cmp	r2, #0x2
	beq	.L2095	@cond_branch
	cmp	r2, #0x2
	bgt	.L2099	@cond_branch
	cmp	r2, #0x1
	beq	.L2094	@cond_branch
	b	.L2093
.L2369:
	.align	2, 0
.L2368:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_LoveJpn
.L2099:
	ldr	r3, [sp, #0x8]
	cmp	r3, #0x3
	beq	.L2096	@cond_branch
	b	.L2093
.L2094:
	ldr	r1, .L2370
	mov	r0, #0x5c
	mov	r2, r9
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	mov	r0, #0x0
	b	.L2165
.L2371:
	.align	2, 0
.L2370:
	.word	gBattleMons
.L2095:
	ldr	r1, .L2372
	mov	r0, #0x5c
	mov	r2, r9
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x8
	neg	r1, r1
	b	.L2166
.L2373:
	.align	2, 0
.L2372:
	.word	gBattleMons
.L2096:
	ldr	r1, .L2374
	mov	r0, #0x5c
	mov	r2, r9
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r0, [r2]
	ldr	r1, .L2374+0x4
.L2166:
	and	r0, r0, r1
.L2165:
	str	r0, [r2]
.L2093:
	bl	BattleScriptPushCursor
	ldr	r1, .L2374+0x8
	ldr	r0, .L2374+0xc
	str	r0, [r1]
	ldr	r1, .L2374+0x10
	ldr	r4, .L2374+0x14
	ldr	r0, .L2374+0x18
	mov	r5, r9
	strb	r5, [r0]
	strb	r5, [r4]
	strb	r5, [r1, #0x17]
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	ldr	r1, .L2374+0x1c
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L2150
.L2375:
	.align	2, 0
.L2374:
	.word	gBattleMons
	.word	-0xf0001
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityCuredStatus
	.word	gBattleScripting
	.word	gActiveBattler
	.word	gBattlerAbility
	.word	gBattleMons+0x50
.L2072:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L2376
	ldrb	r0, [r0]
	cmp	r9, r0
	bcs	.LCB21535
	b	.L2073	@long jump
.LCB21535:
	b	.L1723
.L2377:
	.align	2, 0
.L2376:
	.word	gBattlersCount
.L2101:
	mov	r0, #0x0
	mov	r9, r0
	ldr	r0, .L2378
	ldrb	r0, [r0]
	cmp	r9, r0
	bcc	.LCB21554
	b	.L1723	@long jump
.LCB21554:
	ldr	r4, .L2378+0x4
.L2105:
	mov	r0, #0x5c
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r4
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x3b
	beq	.L2107	@cond_branch
	cmp	r0, #0x7a
	bne	.L2104	@cond_branch
.L2107:
	mov	r0, r9
	bl	TryWeatherFormChange
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	cmp	r0, #0
	beq	.LCB21579
	b	.L2154	@long jump
.LCB21579:
.L2104:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L2378
	ldrb	r0, [r0]
	cmp	r9, r0
	bcc	.L2105	@cond_branch
	b	.L1723
.L2379:
	.align	2, 0
.L2378:
	.word	gBattlersCount
	.word	gBattleMons
.L2110:
	ldr	r0, .L2380
	ldrh	r3, [r0]
	cmp	r3, #0x1c
	beq	.LCB21611
	b	.L1723	@long jump
.LCB21611:
	ldr	r4, .L2380+0x4
	ldr	r1, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0x7
	add	r0, r1, #0
	and	r0, r0, r5
	cmp	r0, #0
	bne	.LCB21619
	b	.L1723	@long jump
.LCB21619:
	ldr	r0, .L2380+0x8
	and	r1, r1, r0
	str	r1, [r4]
	ldr	r1, .L2380+0xc
	ldr	r0, .L2380+0x10
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB21635
	b	.L1723	@long jump
.LCB21635:
	ldr	r0, [r6]
	add	r2, r0, #0
	add	r2, r2, #0xa8
	ldrh	r1, [r2]
	ldr	r0, .L2380+0x14
	and	r0, r0, r1
	strh	r0, [r2]
	cmp	r0, #0x6
	bne	.L2113	@cond_branch
	mov	r0, #0x2
	strh	r0, [r2]
.L2113:
	ldr	r2, .L2380+0x18
	ldr	r0, [r6]
	add	r0, r0, #0xa8
	ldrh	r0, [r0]
	add	r0, r0, r5
	strh	r0, [r2, #0x2e]
	ldr	r1, .L2380+0x1c
	ldr	r0, .L2380+0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	strb	r0, [r2, #0x17]
	ldr	r1, .L2380+0x24
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x9
	strb	r0, [r1, #0x1]
	strb	r3, [r1, #0x2]
	mov	r0, #0x0
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	bl	BattleScriptPushCursor
	ldr	r1, .L2380+0x28
	ldr	r0, .L2380+0x2c
	str	r0, [r1]
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r4]
	b	.L2156
.L2381:
	.align	2, 0
.L2380:
	.word	gLastUsedAbility
	.word	gHitMarker
	.word	-0x4001
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	0x3fff
	.word	gBattleScripting
	.word	gBattlerAbility
	.word	gBattlerTarget
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SynchronizeActivates
.L2114:
	ldr	r0, .L2382
	ldrh	r3, [r0]
	cmp	r3, #0x1c
	beq	.LCB21714
	b	.L1723	@long jump
.LCB21714:
	ldr	r4, .L2382+0x4
	ldr	r1, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB21721
	b	.L1723	@long jump
.LCB21721:
	ldr	r0, .L2382+0x8
	and	r1, r1, r0
	str	r1, [r4]
	ldr	r1, .L2382+0xc
	ldr	r0, .L2382+0x10
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB21737
	b	.L1723	@long jump
.LCB21737:
	ldr	r0, [r6]
	add	r2, r0, #0
	add	r2, r2, #0xa8
	ldrh	r1, [r2]
	ldr	r0, .L2382+0x14
	and	r0, r0, r1
	strh	r0, [r2]
	cmp	r0, #0x6
	bne	.L2117	@cond_branch
	mov	r0, #0x2
	strh	r0, [r2]
.L2117:
	ldr	r2, .L2382+0x18
	ldr	r0, [r6]
	add	r0, r0, #0xa8
	ldrh	r0, [r0]
	strh	r0, [r2, #0x2e]
	ldr	r1, .L2382+0x1c
	ldr	r0, .L2382+0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	strb	r0, [r2, #0x17]
	ldr	r1, .L2382+0x24
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x9
	strb	r0, [r1, #0x1]
	strb	r3, [r1, #0x2]
	mov	r0, #0x0
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	bl	BattleScriptPushCursor
	ldr	r1, .L2382+0x28
	ldr	r0, .L2382+0x2c
	str	r0, [r1]
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r4]
	b	.L2156
.L2383:
	.align	2, 0
.L2382:
	.word	gLastUsedAbility
	.word	gHitMarker
	.word	-0x4001
	.word	gBattleMons
	.word	gBattlerTarget
	.word	0x3fff
	.word	gBattleScripting
	.word	gBattlerAbility
	.word	gBattlerAttacker
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SynchronizeActivates
.L2119:
	mov	r6, #0x0
	ldr	r0, .L2384
	add	r4, r0, #0
	ldrb	r2, [r4]
	cmp	r6, r2
	bcc	.LCB21816
	b	.L1723	@long jump
.LCB21816:
	ldr	r5, .L2384+0x4
.L2123:
	ldr	r1, .L2384+0x8
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r0, r0, r1
	ldrh	r3, [r0, #0x20]
	cmp	r3, #0x16
	bne	.L2122	@cond_branch
	ldr	r0, .L2384+0xc
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L2122	@cond_branch
	ldr	r0, .L2384+0x10
	strh	r3, [r0]
	mov	r0, #0x9
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r3, [sp, #0x4]
	cmp	r3, #0xa
	bne	.L2125	@cond_branch
	ldr	r0, .L2384+0x14
	bl	BattleScriptPushCursorAndCallback
	b	.L2126
.L2385:
	.align	2, 0
.L2384:
	.word	gBattlersCount
	.word	gBattlerAbility
	.word	gBattleMons
	.word	gBattleResources
	.word	gLastUsedAbility
	.word	BattleScript_IntimidateActivatesEnd3
.L2125:
	bl	BattleScriptPushCursor
	ldr	r1, .L2386
	ldr	r0, .L2386+0x4
	str	r0, [r1]
.L2126:
	ldr	r0, .L2386+0x8
	ldr	r0, [r0]
	add	r0, r0, #0xd4
	strb	r6, [r0]
	mov	r0, #0xff
	and	r0, r0, r6
	strb	r0, [r5]
	mov	r9, r0
.L2156:
	ldr	r0, [sp, #0x8]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
.L2158:
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	b	.L1723
.L2387:
	.align	2, 0
.L2386:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_IntimidateActivates
	.word	gBattleStruct
.L2122:
	add	r6, r6, #0x1
	ldrb	r0, [r4]
	cmp	r6, r0
	bcc	.L2123	@cond_branch
	b	.L1723
.L2154:
	ldr	r0, .L2388
	bl	BattleScriptPushCursorAndCallback
	ldr	r0, .L2388+0x4
	mov	r1, r9
	strb	r1, [r0, #0x17]
	ldr	r0, .L2388+0x8
	ldr	r0, [r0]
	ldr	r1, [sp, #0x8]
	sub	r1, r1, #0x1
	add	r0, r0, #0x7e
	strb	r1, [r0]
	b	.L2150
.L2389:
	.align	2, 0
.L2388:
	.word	BattleScript_CastformChange
	.word	gBattleScripting
	.word	gBattleStruct
.L2129:
	mov	r6, #0x0
	ldr	r0, .L2390
	ldrb	r0, [r0]
	cmp	r6, r0
	bcc	.LCB21943
	b	.L1723	@long jump
.LCB21943:
	ldr	r2, .L2390+0x4
	mov	sl, r2
	mov	r3, #0x0
	str	r3, [sp, #0x30]
	mov	r4, sl
	str	r4, [sp, #0x34]
.L2133:
	ldr	r5, [sp, #0x34]
	ldrh	r0, [r5, #0x20]
	cmp	r0, #0x24
	beq	.LCB21961
	b	.L2132	@long jump
.LCB21961:
	ldr	r0, .L2390+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	ldr	r1, [sp, #0x30]
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB21971
	b	.L2132	@long jump
.LCB21971:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	mov	r1, #0x1
	add	r4, r0, #0
	eor	r4, r4, r1
	and	r4, r4, r1
	add	r0, r4, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r5, #0
	add	r0, r4, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L2390+0xc
	ldr	r0, [r0]
	mov	r2, #0x1
	mov	r8, r2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L2135	@cond_branch
	ldr	r1, .L2390+0x10
	mov	r2, #0x5c
	mov	r0, r5
	mul	r0, r0, r2
	mov	r5, sl
	add	r2, r0, r5
	ldrh	r0, [r2, #0x20]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2138	@cond_branch
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	beq	.L2136	@cond_branch
	mov	r2, #0x5c
	mov	r0, r3
	mul	r0, r0, r2
	add	r2, r0, r5
	ldrh	r0, [r2, #0x20]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2136	@cond_branch
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	beq	.L2136	@cond_branch
	bl	Random
	mov	r1, r8
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	orr	r4, r4, r1
	add	r0, r4, #0
	bl	GetBattlerAtPosition
	ldr	r3, .L2390+0x14
	strb	r0, [r3]
	b	.L2167
.L2391:
	.align	2, 0
.L2390:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gBattleResources
	.word	gBattleTypeFlags
	.word	sAbilitiesNotTraced
	.word	gActiveBattler
.L2136:
	mov	r4, #0x5c
	mov	r0, r7
	mul	r0, r0, r4
	mov	r5, sl
	add	r2, r0, r5
	ldrh	r0, [r2, #0x20]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2138	@cond_branch
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	beq	.L2138	@cond_branch
	ldr	r0, .L2392
	strb	r7, [r0]
	b	.L2167
.L2393:
	.align	2, 0
.L2392:
	.word	gActiveBattler
.L2138:
	mov	r2, #0x5c
	mov	r0, r3
	mul	r0, r0, r2
	mov	r4, sl
	add	r2, r0, r4
	ldrh	r0, [r2, #0x20]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2141	@cond_branch
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	beq	.L2141	@cond_branch
	ldr	r5, .L2394
	strb	r3, [r5]
	b	.L2167
.L2395:
	.align	2, 0
.L2394:
	.word	gActiveBattler
.L2135:
	ldr	r1, .L2396
	mov	r2, #0x5c
	mov	r0, r7
	mul	r0, r0, r2
	mov	r3, sl
	add	r2, r0, r3
	ldrh	r0, [r2, #0x20]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2141	@cond_branch
	ldrh	r0, [r2, #0x2a]
	cmp	r0, #0
	beq	.L2141	@cond_branch
	ldr	r4, .L2396+0x4
	strb	r7, [r4]
.L2167:
	ldr	r0, [sp, #0x8]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
.L2141:
	ldr	r5, [sp, #0x8]
	cmp	r5, #0
	beq	.L2132	@cond_branch
	ldr	r0, [sp, #0x4]
	cmp	r0, #0xc
	bne	.L2144	@cond_branch
	ldr	r0, .L2396+0x8
	bl	BattleScriptPushCursorAndCallback
	b	.L2145
.L2397:
	.align	2, 0
.L2396:
	.word	sAbilitiesNotTraced
	.word	gActiveBattler
	.word	BattleScript_TraceActivatesEnd3
.L2144:
	bl	BattleScriptPushCursor
	ldr	r1, .L2398
	ldr	r0, .L2398+0x4
	str	r0, [r1]
.L2145:
	ldr	r0, .L2398+0x8
	ldr	r0, [r0]
	ldr	r2, [r0, #0x4]
	ldr	r1, [sp, #0x30]
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L2398+0xc
	ldr	r1, [r0]
	lsl	r0, r6, #0x1
	ldr	r2, .L2398+0x10
	add	r1, r1, r2
	add	r1, r1, r0
	ldr	r2, .L2398+0x14
	ldr	r3, .L2398+0x18
	ldrb	r0, [r3]
	mov	r4, #0x5c
	mul	r0, r0, r4
	add	r0, r0, sl
	ldrh	r3, [r0, #0x20]
	strh	r3, [r2]
	strh	r3, [r1]
	ldr	r1, .L2398+0x1c
	ldr	r0, .L2398+0x20
	strb	r6, [r0, #0x17]
	mov	r0, #0xff
	and	r0, r0, r6
	strb	r0, [r1]
	mov	r9, r0
	ldr	r1, .L2398+0x24
	mov	r4, #0xfd
	strb	r4, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r5, .L2398+0x18
	ldrb	r0, [r5]
	strb	r0, [r1, #0x2]
	ldr	r2, .L2398+0x28
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	ldrb	r0, [r1, #0x4]
	mov	r2, #0xff
	orr	r0, r0, r2
	strb	r0, [r1, #0x4]
	ldr	r1, .L2398+0x2c
	strb	r4, [r1]
	mov	r0, #0x9
	strb	r0, [r1, #0x1]
	strb	r3, [r1, #0x2]
	mov	r4, #0xff
	lsl	r4, r4, #0x8
	add	r0, r4, #0
	and	r3, r3, r0
	lsr	r3, r3, #0x8
	strb	r3, [r1, #0x3]
	ldrb	r0, [r1, #0x4]
	orr	r0, r0, r2
	strb	r0, [r1, #0x4]
	b	.L1723
.L2399:
	.align	2, 0
.L2398:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TraceActivates
	.word	gBattleResources
	.word	gBattleStruct
	.word	0x2ca
	.word	gLastUsedAbility
	.word	gActiveBattler
	.word	gBattlerAbility
	.word	gBattleScripting
	.word	gBattleTextBuff1
	.word	gBattlerPartyIndexes
	.word	gBattleTextBuff2
.L2132:
	ldr	r5, [sp, #0x30]
	add	r5, r5, #0x4
	str	r5, [sp, #0x30]
	ldr	r0, [sp, #0x34]
	add	r0, r0, #0x5c
	str	r0, [sp, #0x34]
	add	r6, r6, #0x1
	ldr	r0, .L2400
	ldrb	r0, [r0]
	cmp	r6, r0
	bcs	.LCB22284
	b	.L2133	@long jump
.LCB22284:
.L1723:
	ldr	r1, [sp, #0x8]
	cmp	r1, #0
	beq	.L2150	@cond_branch
.L2152:
	ldr	r1, .L2400+0x4
	ldrh	r0, [r1]
	cmp	r0, #0xff
	beq	.L2149	@cond_branch
	add	r1, r0, #0
	mov	r0, r9
	bl	RecordAbilityBattle
.L2149:
	ldr	r2, [sp, #0x8]
	cmp	r2, #0
	beq	.L2150	@cond_branch
	ldr	r3, [sp, #0x4]
	cmp	r3, #0x5
	bhi	.L2150	@cond_branch
	ldr	r0, .L2400+0x8
	mov	r4, r9
	strb	r4, [r0]
.L2150:
	ldr	r0, [sp, #0x8]
.L2151:
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2401:
	.align	2, 0
.L2400:
	.word	gBattlersCount
	.word	gLastUsedAbility
	.word	gBattlerAbility
.Lfe53:
	.size	 AbilityBattleEffects,.Lfe53-AbilityBattleEffects
	.align	2, 0
	.globl	GetBattlerAbility
	.type	 GetBattlerAbility,function
	.thumb_func
GetBattlerAbility:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r2, .L2412
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	and	r0, r0, r1
	add	r6, r2, #0
	cmp	r0, #0
	bne	.L2411	@cond_branch
	ldr	r2, .L2412+0x4
	ldr	r3, .L2412+0x8
	ldrb	r1, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x20]
	add	r7, r2, #0
	add	r5, r3, #0
	cmp	r0, #0x68
	beq	.L2408	@cond_branch
	cmp	r0, #0xa4
	beq	.L2408	@cond_branch
	cmp	r0, #0xa3
	bne	.L2407	@cond_branch
.L2408:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2406	@cond_branch
.L2407:
	ldr	r2, .L2412+0xc
	ldr	r0, .L2412+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2405	@cond_branch
.L2406:
	ldr	r1, .L2412+0x14
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r7
	ldrh	r0, [r0, #0x20]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L2405	@cond_branch
	ldr	r3, .L2412+0x18
	ldr	r0, .L2412+0x1c
	ldrb	r2, [r0]
	add	r0, r2, r3
	ldrb	r0, [r0]
	ldrb	r1, [r5]
	cmp	r0, r1
	bne	.L2405	@cond_branch
	ldr	r1, .L2412+0x20
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2405	@cond_branch
	ldr	r0, .L2412+0x24
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L2405	@cond_branch
.L2411:
	mov	r0, #0x0
	b	.L2410
.L2413:
	.align	2, 0
.L2412:
	.word	gStatuses3
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	sAbilitiesAffectedByMoldBreaker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gActionsByTurnOrder
	.word	gBattlersCount
.L2405:
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r7
	ldrh	r0, [r0, #0x20]
.L2410:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe54:
	.size	 GetBattlerAbility,.Lfe54-GetBattlerAbility
	.align	2, 0
	.globl	IsAbilityOnSide
	.type	 IsAbilityOnSide,function
	.thumb_func
IsAbilityOnSide:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L2415	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, r6
	bne	.L2415	@cond_branch
	add	r0, r5, #0x1
	b	.L2419
.L2415:
	mov	r0, #0x2
	add	r1, r5, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L2417	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, r6
	bne	.L2417	@cond_branch
	mov	r0, #0x2
	eor	r0, r0, r5
	add	r0, r0, #0x1
	b	.L2419
.L2417:
	mov	r0, #0x0
.L2419:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe55:
	.size	 IsAbilityOnSide,.Lfe55-IsAbilityOnSide
	.align	2, 0
	.globl	IsAbilityOnOpposingSide
	.type	 IsAbilityOnOpposingSide,function
	.thumb_func
IsAbilityOnOpposingSide:
	push	{lr}
	add	r2, r0, #0
	mov	r0, #0x1
	eor	r0, r0, r2
	bl	IsAbilityOnSide
	pop	{r1}
	bx	r1
.Lfe56:
	.size	 IsAbilityOnOpposingSide,.Lfe56-IsAbilityOnOpposingSide
	.align	2, 0
	.globl	IsAbilityOnField
	.type	 IsAbilityOnField,function
	.thumb_func
IsAbilityOnField:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r5, #0x0
	b	.L2429
.L2425:
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L2424	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, r6
	bne	.L2424	@cond_branch
	add	r0, r5, #0x1
	b	.L2428
.L2424:
	add	r5, r5, #0x1
.L2429:
	ldr	r0, .L2430
	ldrb	r0, [r0]
	cmp	r5, r0
	bcc	.L2425	@cond_branch
	mov	r0, #0x0
.L2428:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L2431:
	.align	2, 0
.L2430:
	.word	gBattlersCount
.Lfe57:
	.size	 IsAbilityOnField,.Lfe57-IsAbilityOnField
	.align	2, 0
	.globl	IsAbilityOnFieldExcept
	.type	 IsAbilityOnFieldExcept,function
	.thumb_func
IsAbilityOnFieldExcept:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	add	r6, r1, #0
	mov	r5, #0x0
	b	.L2440
.L2436:
	cmp	r5, r7
	beq	.L2435	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L2435	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, r6
	bne	.L2435	@cond_branch
	add	r0, r5, #0x1
	b	.L2439
.L2435:
	add	r5, r5, #0x1
.L2440:
	ldr	r0, .L2441
	ldrb	r0, [r0]
	cmp	r5, r0
	bcc	.L2436	@cond_branch
	mov	r0, #0x0
.L2439:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2442:
	.align	2, 0
.L2441:
	.word	gBattlersCount
.Lfe58:
	.size	 IsAbilityOnFieldExcept,.Lfe58-IsAbilityOnFieldExcept
	.align	2, 0
	.globl	IsAbilityPreventingEscape
	.type	 IsAbilityPreventingEscape,function
	.thumb_func
IsAbilityPreventingEscape:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r1, .L2451
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r5, r0, r1
	add	r0, r5, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L2448	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L2448	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L2448	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x17
	bl	IsAbilityOnOpposingSide
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L2446	@cond_branch
	ldrh	r0, [r5, #0x20]
	cmp	r0, #0x17
	bne	.L2449	@cond_branch
.L2446:
	add	r0, r6, #0
	mov	r1, #0x47
	bl	IsAbilityOnOpposingSide
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L2447	@cond_branch
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerGrounded
	cmp	r0, #0
	bne	.L2449	@cond_branch
.L2447:
	add	r0, r6, #0
	mov	r1, #0x2a
	bl	IsAbilityOnOpposingSide
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L2448	@cond_branch
	ldr	r1, .L2451
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x8
	beq	.L2449	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0x8
	beq	.L2449	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.L2448	@cond_branch
.L2449:
	add	r0, r4, #0
	b	.L2450
.L2452:
	.align	2, 0
.L2451:
	.word	gBattleMons
.L2448:
	mov	r0, #0x0
.L2450:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe59:
	.size	 IsAbilityPreventingEscape,.Lfe59-IsAbilityPreventingEscape
	.align	2, 0
	.globl	CanBattlerEscape
	.type	 CanBattlerEscape,function
	.thumb_func
CanBattlerEscape:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x5c
	beq	.L2455	@cond_branch
	ldr	r1, .L2456
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L2456+0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2454	@cond_branch
	ldr	r1, .L2456+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2454	@cond_branch
	ldr	r0, .L2456+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2454	@cond_branch
.L2455:
	mov	r5, #0x1
.L2454:
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L2457:
	.align	2, 0
.L2456:
	.word	gBattleMons
	.word	0x4002000
	.word	gStatuses3
	.word	gFieldStatuses
.Lfe60:
	.size	 CanBattlerEscape,.Lfe60-CanBattlerEscape
	.align	2, 0
	.globl	BattleScriptExecute
	.type	 BattleScriptExecute,function
	.thumb_func
BattleScriptExecute:
	ldr	r1, .L2459
	str	r0, [r1]
	ldr	r0, .L2459+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	add	r3, r2, #0
	add	r3, r3, #0x20
	ldrb	r0, [r3]
	add	r1, r0, #0x1
	strb	r1, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r2, r2, r0
	ldr	r1, .L2459+0x8
	ldr	r0, [r1]
	str	r0, [r2]
	ldr	r0, .L2459+0xc
	str	r0, [r1]
	ldr	r1, .L2459+0x10
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L2460:
	.align	2, 0
.L2459:
	.word	gBattlescriptCurrInstr
	.word	gBattleResources
	.word	gBattleMainFunc
	.word	RunBattleScriptCommands_PopCallbacksStack
	.word	gCurrentActionFuncId
.Lfe61:
	.size	 BattleScriptExecute,.Lfe61-BattleScriptExecute
	.align	2, 0
	.globl	BattleScriptPushCursorAndCallback
	.type	 BattleScriptPushCursorAndCallback,function
	.thumb_func
BattleScriptPushCursorAndCallback:
	push	{r4, lr}
	add	r4, r0, #0
	bl	BattleScriptPushCursor
	ldr	r0, .L2462
	str	r4, [r0]
	ldr	r0, .L2462+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0xc]
	add	r3, r2, #0
	add	r3, r3, #0x20
	ldrb	r0, [r3]
	add	r1, r0, #0x1
	strb	r1, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r2, r2, r0
	ldr	r1, .L2462+0x8
	ldr	r0, [r1]
	str	r0, [r2]
	ldr	r0, .L2462+0xc
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2463:
	.align	2, 0
.L2462:
	.word	gBattlescriptCurrInstr
	.word	gBattleResources
	.word	gBattleMainFunc
	.word	RunBattleScriptCommands
.Lfe62:
	.size	 BattleScriptPushCursorAndCallback,.Lfe62-BattleScriptPushCursorAndCallback
	.align	2, 0
	.type	 HasEnoughHpToEatBerry,function
	.thumb_func
HasEnoughHpToEatBerry:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	mov	r8, r1
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetPocket
	mov	r7, #0x0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x7
	bne	.L2465	@cond_branch
	mov	r7, #0x1
.L2465:
	ldr	r1, .L2471
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L2469	@cond_branch
	cmp	r7, #0
	beq	.L2467	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x7f
	bl	IsAbilityOnOpposingSide
	cmp	r0, #0
	bne	.L2469	@cond_branch
.L2467:
	ldr	r1, .L2471
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r5, r0, r1
	ldrh	r4, [r5, #0x2a]
	ldrh	r0, [r5, #0x2e]
	mov	r1, r8
	bl	__udivsi3
	cmp	r4, r0
	bhi	.L2468	@cond_branch
	mov	r0, #0x1
	b	.L2470
.L2472:
	.align	2, 0
.L2471:
	.word	gBattleMons
.L2468:
	mov	r0, r8
	cmp	r0, #0x4
	bhi	.L2469	@cond_branch
	lsl	r0, r6, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0x52
	bne	.L2469	@cond_branch
	cmp	r7, #0
	beq	.L2469	@cond_branch
	ldrh	r0, [r5, #0x2e]
	ldrh	r1, [r5, #0x2a]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bhi	.L2469	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x52
	bl	RecordAbilityBattle
	mov	r0, #0x1
	b	.L2470
.L2469:
	mov	r0, #0x0
.L2470:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe63:
	.size	 HasEnoughHpToEatBerry,.Lfe63-HasEnoughHpToEatBerry
	.align	2, 0
	.type	 HealConfuseBerry,function
	.thumb_func
HealConfuseBerry:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	add	r3, r1, #0
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	add	r7, r5, #0
	mov	r1, #0x2
	add	r2, r3, #0
	bl	HasEnoughHpToEatBerry
	cmp	r0, #0
	beq	.L2474	@cond_branch
	ldr	r1, .L2479
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x8
	strb	r0, [r1, #0x1]
	strb	r5, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r5, .L2479+0x4
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerHoldEffectParam
	add	r1, r0, #0
	ldr	r6, .L2479+0x8
	mov	r0, #0x5c
	mul	r4, r4, r0
	add	r0, r4, r6
	ldrh	r0, [r0, #0x2e]
	bl	__udivsi3
	str	r0, [r5]
	cmp	r0, #0
	bne	.L2475	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L2475:
	ldr	r0, [r5]
	neg	r0, r0
	str	r0, [r5]
	add	r0, r6, #0
	add	r0, r0, #0x4c
	add	r0, r4, r0
	ldr	r0, [r0]
	add	r1, r7, #0
	bl	GetFlavorRelationByPersonality
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bge	.L2476	@cond_branch
	ldr	r0, .L2479+0xc
	bl	BattleScriptExecute
	b	.L2477
.L2480:
	.align	2, 0
.L2479:
	.word	gBattleTextBuff1
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	BattleScript_BerryConfuseHealEnd2
.L2476:
	ldr	r0, .L2481
	bl	BattleScriptExecute
.L2477:
	mov	r0, #0x4
	b	.L2478
.L2482:
	.align	2, 0
.L2481:
	.word	BattleScript_ItemHealHP_RemoveItemEnd2
.L2474:
	mov	r0, #0x0
.L2478:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 HealConfuseBerry,.Lfe64-HealConfuseBerry
	.align	2, 0
	.type	 StatRaiseBerry,function
	.thumb_func
StatRaiseBerry:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	add	r5, r2, #0
	ldr	r1, .L2486
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r5, r0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xb
	bgt	.L2484	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerHoldEffectParam
	add	r1, r0, #0
	add	r0, r4, #0
	add	r2, r6, #0
	bl	HasEnoughHpToEatBerry
	cmp	r0, #0
	beq	.L2484	@cond_branch
	ldr	r1, .L2486+0x4
	mov	r3, #0x0
	mov	r2, #0xfd
	strb	r2, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	strb	r5, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L2486+0x8
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r0, #0xd2
	strb	r0, [r1, #0x2]
	strb	r3, [r1, #0x3]
	sub	r0, r0, #0xd3
	strb	r0, [r1, #0x4]
	ldr	r0, .L2486+0xc
	strb	r4, [r0]
	ldr	r1, .L2486+0x10
	add	r0, r5, #0
	add	r0, r0, #0x8
	strb	r0, [r1, #0x1a]
	add	r0, r0, #0x6
	strb	r0, [r1, #0x10]
	strb	r3, [r1, #0x11]
	ldr	r0, .L2486+0x14
	bl	BattleScriptExecute
	mov	r0, #0x5
	b	.L2485
.L2487:
	.align	2, 0
.L2486:
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gEffectBattler
	.word	gBattleScripting
	.word	BattleScript_BerryStatRaiseEnd2
.L2484:
	mov	r0, #0x0
.L2485:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 StatRaiseBerry,.Lfe65-StatRaiseBerry
	.align	2, 0
	.type	 RandomStatRaiseBerry,function
	.thumb_func
RandomStatRaiseBerry:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	mov	r4, #0x0
	ldr	r3, .L2502
	mov	r0, #0x5c
	mov	r2, r6
	mul	r2, r2, r0
	add	r0, r2, #0x1
	add	r1, r3, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xb
	ble	.L2490	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x19
	add	r1, r2, r0
.L2491:
	add	r1, r1, #0x1
	add	r4, r4, #0x1
	cmp	r4, #0x4
	bgt	.L2490	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xb
	bgt	.L2491	@cond_branch
.L2490:
	cmp	r4, #0x5
	beq	.L2495	@cond_branch
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerHoldEffectParam
	add	r1, r0, #0
	add	r0, r6, #0
	add	r2, r5, #0
	bl	HasEnoughHpToEatBerry
	cmp	r0, #0
	beq	.L2495	@cond_branch
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r5, r0, #0x1
	ldr	r7, .L2502+0x4
.L2496:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, r5
	add	r0, r0, r7
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	beq	.L2496	@cond_branch
	ldr	r1, .L2502+0x8
	mov	r2, #0x0
	mov	r3, #0xfd
	strb	r3, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	add	r0, r4, #0x1
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r0, .L2502+0xc
	strb	r3, [r0]
	strb	r2, [r0, #0x1]
	mov	r1, #0xd1
	strb	r1, [r0, #0x2]
	strb	r2, [r0, #0x3]
	strb	r2, [r0, #0x4]
	mov	r1, #0xd2
	strb	r1, [r0, #0x5]
	strb	r2, [r0, #0x6]
	sub	r1, r1, #0xd3
	strb	r1, [r0, #0x7]
	ldr	r0, .L2502+0x10
	strb	r6, [r0]
	ldr	r1, .L2502+0x14
	add	r0, r4, #0
	add	r0, r0, #0x11
	strb	r0, [r1, #0x1a]
	add	r0, r0, #0x16
	strb	r0, [r1, #0x10]
	strb	r2, [r1, #0x11]
	ldr	r0, .L2502+0x18
	bl	BattleScriptExecute
	mov	r0, #0x5
	b	.L2501
.L2503:
	.align	2, 0
.L2502:
	.word	gBattleMons
	.word	gBattleMons+0x18
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gEffectBattler
	.word	gBattleScripting
	.word	BattleScript_BerryStatRaiseEnd2
.L2495:
	mov	r0, #0x0
.L2501:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe66:
	.size	 RandomStatRaiseBerry,.Lfe66-RandomStatRaiseBerry
	.align	2, 0
	.type	 ItemHealHp,function
	.thumb_func
ItemHealHp:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	add	r7, r2, #0
	add	r6, r3, #0
	mov	r1, #0x2
	add	r2, r4, #0
	bl	HasEnoughHpToEatBerry
	cmp	r0, #0
	beq	.L2505	@cond_branch
	cmp	r6, #0
	beq	.L2506	@cond_branch
	ldr	r4, .L2512
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerHoldEffectParam
	ldr	r2, .L2512+0x4
	mov	r1, #0x5c
	mul	r1, r1, r5
	add	r1, r1, r2
	ldrh	r1, [r1, #0x2e]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__udivsi3
	b	.L2511
.L2513:
	.align	2, 0
.L2512:
	.word	gBattleMoveDamage
	.word	gBattleMons
.L2506:
	ldr	r4, .L2514
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerHoldEffectParam
.L2511:
	neg	r0, r0
	str	r0, [r4]
	cmp	r7, #0
	beq	.L2508	@cond_branch
	ldr	r0, .L2514+0x4
	bl	BattleScriptExecute
	b	.L2509
.L2515:
	.align	2, 0
.L2514:
	.word	gBattleMoveDamage
	.word	BattleScript_ItemHealHP_RemoveItemEnd2
.L2508:
	bl	BattleScriptPushCursor
	ldr	r1, .L2516
	ldr	r0, .L2516+0x4
	str	r0, [r1]
.L2509:
	mov	r0, #0x4
	b	.L2510
.L2517:
	.align	2, 0
.L2516:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ItemHealHP_RemoveItemRet
.L2505:
	mov	r0, #0x0
.L2510:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe67:
	.size	 ItemHealHp,.Lfe67-ItemHealHp
	.align	2, 0
	.type	 UnnerveOn,function
	.thumb_func
UnnerveOn:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetPocket
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x7
	bne	.L2519	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x7f
	bl	IsAbilityOnOpposingSide
	cmp	r0, #0
	beq	.L2519	@cond_branch
	mov	r0, #0x1
	b	.L2520
.L2519:
	mov	r0, #0x0
.L2520:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe68:
	.size	 UnnerveOn,.Lfe68-UnnerveOn
	.align	2, 0
	.globl	ItemBattleEffects
	.type	 ItemBattleEffects,function
	.thumb_func
ItemBattleEffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	mov	sl, r0
	add	r0, sp, #0x4
	mov	r1, sl
	strb	r1, [r0]
	ldr	r1, .L2806
	ldr	r6, .L2806+0x4
	mov	r5, #0x5c
	mov	r0, r8
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x30]
	strh	r0, [r1]
	mov	r0, r8
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r4, .L2806+0x8
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r6
	ldrh	r1, [r1, #0x30]
	str	r1, [sp, #0x14]
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r4]
	bl	GetBattlerHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x10]
	ldr	r2, [sp, #0x8]
	cmp	r2, #0x6
	bls	.LCB23541
	bl	.L2522	@far jump
.LCB23541:
	lsl	r0, r2, #0x2
	ldr	r1, .L2806+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2807:
	.align	2, 0
.L2806:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	.L2786
	.align	2, 0
	.align	2, 0
.L2786:
	.word	.L2523
	.word	.L2595
	.word	.L2522
	.word	.L2691
	.word	.L2737
	.word	.L2748
	.word	.L2777
.L2523:
	ldr	r1, .L2808
	mov	r3, r8
	lsl	r2, r3, #0x1
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1b
	str	r2, [sp, #0x18]
	cmp	r0, #0
	bge	.LCB23576
	bl	.L2522	@far jump
.LCB23576:
	mov	r0, r9
	sub	r0, r0, #0x1
	cmp	r0, #0x78
	bls	.LCB23581
	b	.L2525	@long jump
.LCB23581:
	lsl	r0, r0, #0x2
	ldr	r1, .L2808+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2809:
	.align	2, 0
.L2808:
	.word	gSpecialStatuses
	.word	.L2586
	.align	2, 0
	.align	2, 0
.L2586:
	.word	.L2581
	.word	.L2560
	.word	.L2568
	.word	.L2562
	.word	.L2564
	.word	.L2566
	.word	.L2525
	.word	.L2525
	.word	.L2570
	.word	.L2536
	.word	.L2538
	.word	.L2540
	.word	.L2542
	.word	.L2544
	.word	.L2546
	.word	.L2548
	.word	.L2550
	.word	.L2552
	.word	.L2554
	.word	.L2556
	.word	.L2558
	.word	.L2525
	.word	.L2528
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2526
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2583
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2525
	.word	.L2585
.L2526:
	mov	r0, r8
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB23607
	b	.L2525	@long jump
.LCB23607:
	ldr	r0, .L2810
	ldr	r1, [r0]
	add	r1, r1, #0x4a
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	strb	r0, [r1]
	b	.L2525
.L2811:
	.align	2, 0
.L2810:
	.word	gBattleStruct
.L2528:
	ldr	r6, .L2812
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r6, #0
	add	r0, r0, #0x18
	add	r1, r1, r0
	mov	r2, #0x6
	mov	r4, #0x7
	str	r4, [sp, #0xc]
.L2532:
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x5
	bgt	.L2531	@cond_branch
	strb	r2, [r1]
	mov	r5, #0x5
	mov	sl, r5
.L2531:
	add	r1, r1, #0x1
	ldr	r0, [sp, #0xc]
	sub	r0, r0, #0x1
	str	r0, [sp, #0xc]
	cmp	r0, #0
	bge	.L2532	@cond_branch
	mov	r1, #0x8
	str	r1, [sp, #0xc]
	mov	r2, sl
	cmp	r2, #0
	bne	.LCB23662
	bl	.L2788	@far jump
.LCB23662:
	ldr	r0, .L2812+0x4
	mov	r3, r8
	strb	r3, [r0, #0x17]
	ldr	r0, .L2812+0x8
	strb	r3, [r0]
	ldr	r1, .L2812+0xc
	ldr	r0, .L2812+0x10
	strb	r3, [r0]
	strb	r3, [r1]
	ldr	r0, .L2812+0x14
	bl	BattleScriptExecute
	b	.L2525
.L2813:
	.align	2, 0
.L2812:
	.word	gBattleMons
	.word	gBattleScripting
	.word	gPotentialItemEffectBattler
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	BattleScript_WhiteHerbEnd2
.L2536:
	ldr	r0, .L2814
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x0
	bl	HealConfuseBerry
	b	.L2793
.L2815:
	.align	2, 0
.L2814:
	.word	gLastUsedItem
.L2538:
	ldr	r0, .L2816
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x1
	bl	HealConfuseBerry
	b	.L2793
.L2817:
	.align	2, 0
.L2816:
	.word	gLastUsedItem
.L2540:
	ldr	r0, .L2818
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x2
	bl	HealConfuseBerry
	b	.L2793
.L2819:
	.align	2, 0
.L2818:
	.word	gLastUsedItem
.L2542:
	ldr	r0, .L2820
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x3
	bl	HealConfuseBerry
	b	.L2793
.L2821:
	.align	2, 0
.L2820:
	.word	gLastUsedItem
.L2544:
	ldr	r0, .L2822
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x4
	bl	HealConfuseBerry
	b	.L2793
.L2823:
	.align	2, 0
.L2822:
	.word	gLastUsedItem
.L2546:
	ldr	r0, .L2824
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x1
	bl	StatRaiseBerry
	b	.L2793
.L2825:
	.align	2, 0
.L2824:
	.word	gLastUsedItem
.L2548:
	ldr	r0, .L2826
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x2
	bl	StatRaiseBerry
	b	.L2793
.L2827:
	.align	2, 0
.L2826:
	.word	gLastUsedItem
.L2550:
	ldr	r0, .L2828
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x3
	bl	StatRaiseBerry
	b	.L2793
.L2829:
	.align	2, 0
.L2828:
	.word	gLastUsedItem
.L2552:
	ldr	r0, .L2830
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x4
	bl	StatRaiseBerry
	b	.L2793
.L2831:
	.align	2, 0
.L2830:
	.word	gLastUsedItem
.L2554:
	ldr	r0, .L2832
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x5
	bl	StatRaiseBerry
	b	.L2793
.L2833:
	.align	2, 0
.L2832:
	.word	gLastUsedItem
.L2556:
	ldr	r0, .L2834
	mov	r1, #0x5c
	mov	r4, r8
	mul	r4, r4, r1
	add	r1, r4, #0
	add	r0, r0, #0x54
	add	r4, r1, r0
	ldr	r0, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0xd
	and	r0, r0, r5
	cmp	r0, #0
	beq	.LCB23861
	b	.L2525	@long jump
.LCB23861:
	mov	r0, r8
	bl	GetBattlerHoldEffectParam
	add	r1, r0, #0
	ldr	r0, .L2834+0x4
	ldrh	r2, [r0]
	mov	r0, r8
	bl	HasEnoughHpToEatBerry
	cmp	r0, #0
	bne	.LCB23873
	b	.L2525	@long jump
.LCB23873:
	ldr	r0, [r4]
	orr	r0, r0, r5
	str	r0, [r4]
	ldr	r0, .L2834+0x8
	bl	BattleScriptExecute
	mov	r5, #0x2
	mov	sl, r5
	b	.L2789
.L2835:
	.align	2, 0
.L2834:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	BattleScript_BerryFocusEnergyEnd2
.L2558:
	ldr	r0, .L2836
	ldrh	r1, [r0]
	mov	r0, r8
	bl	RandomStatRaiseBerry
	b	.L2793
.L2837:
	.align	2, 0
.L2836:
	.word	gLastUsedItem
.L2560:
	ldr	r0, .L2838
	mov	r1, #0x5c
	mov	r2, r8
	mul	r2, r2, r1
	add	r1, r2, #0
	add	r0, r0, #0x50
	add	r4, r1, r0
	ldr	r0, [r4]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB23919
	b	.L2525	@long jump
.LCB23919:
	ldr	r0, .L2838+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB23927
	b	.L2525	@long jump
.LCB23927:
	ldr	r0, [r4]
	mov	r1, #0x41
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L2838+0x8
	b	.L2794
.L2839:
	.align	2, 0
.L2838:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	BattleScript_BerryCurePrlzEnd2
.L2562:
	ldr	r0, .L2840
	mov	r1, #0x5c
	mov	r4, r8
	mul	r4, r4, r1
	add	r1, r4, #0
	add	r0, r0, #0x50
	add	r4, r1, r0
	ldr	r0, [r4]
	mov	r1, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB23957
	b	.L2525	@long jump
.LCB23957:
	ldr	r0, .L2840+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB23965
	b	.L2525	@long jump
.LCB23965:
	ldr	r0, [r4]
	ldr	r1, .L2840+0x8
	and	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L2840+0xc
	b	.L2795
.L2841:
	.align	2, 0
.L2840:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	-0xf89
	.word	BattleScript_BerryCurePsnEnd2
.L2564:
	ldr	r0, .L2842
	mov	r1, #0x5c
	mov	r2, r8
	mul	r2, r2, r1
	add	r1, r2, #0
	add	r0, r0, #0x50
	add	r4, r1, r0
	ldr	r0, [r4]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB23995
	b	.L2525	@long jump
.LCB23995:
	ldr	r0, .L2842+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB24003
	b	.L2525	@long jump
.LCB24003:
	ldr	r0, [r4]
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L2842+0x8
.L2794:
	bl	BattleScriptExecute
	mov	r3, #0x1
	mov	sl, r3
	b	.L2789
.L2843:
	.align	2, 0
.L2842:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	BattleScript_BerryCureBrnEnd2
.L2566:
	ldr	r0, .L2844
	mov	r1, #0x5c
	mov	r4, r8
	mul	r4, r4, r1
	add	r1, r4, #0
	add	r0, r0, #0x50
	add	r4, r1, r0
	ldr	r0, [r4]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB24037
	b	.L2525	@long jump
.LCB24037:
	ldr	r0, .L2844+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB24045
	b	.L2525	@long jump
.LCB24045:
	ldr	r0, [r4]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L2844+0x8
.L2795:
	bl	BattleScriptExecute
	mov	r5, #0x1
	mov	sl, r5
	b	.L2789
.L2845:
	.align	2, 0
.L2844:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	BattleScript_BerryCureFrzEnd2
.L2568:
	ldr	r6, .L2846
	mov	r0, #0x5c
	mov	r5, r8
	mul	r5, r5, r0
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r4, r5, r0
	ldr	r0, [r4]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB24079
	b	.L2525	@long jump
.LCB24079:
	ldr	r0, .L2846+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB24087
	b	.L2525	@long jump
.LCB24087:
	ldr	r0, [r4]
	mov	r1, #0x8
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x54
	add	r1, r5, r1
	ldr	r0, [r1]
	ldr	r2, .L2846+0x8
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r0, .L2846+0xc
	bl	BattleScriptExecute
	mov	r0, #0x1
	mov	sl, r0
	b	.L2789
.L2847:
	.align	2, 0
.L2846:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	-0x8000001
	.word	BattleScript_BerryCureSlpEnd2
.L2570:
	ldr	r4, .L2848
	mov	r0, #0x5c
	mov	r6, r8
	mul	r6, r6, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r5, r6, r0
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L2572	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x54
	add	r0, r6, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB24137
	b	.L2525	@long jump
.LCB24137:
.L2572:
	ldr	r0, .L2848+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	add	r7, r0, #0
	cmp	r7, #0
	beq	.LCB24146
	b	.L2525	@long jump
.LCB24146:
	mov	r1, #0x0
	str	r1, [sp, #0xc]
	ldr	r0, [r5]
	mov	r1, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2573	@cond_branch
	ldr	r0, .L2848+0x8
	ldr	r1, .L2848+0xc
	bl	StringCopy
	mov	r2, #0x1
	str	r2, [sp, #0xc]
.L2573:
	ldr	r0, [r5]
	mov	r3, #0x7
	mov	r9, r3
	and	r0, r0, r3
	add	r4, r4, #0x54
	cmp	r0, #0
	beq	.L2574	@cond_branch
	add	r2, r6, r4
	ldr	r0, [r2]
	ldr	r1, .L2848+0x10
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L2848+0x8
	ldr	r1, .L2848+0x14
	bl	StringCopy
	ldr	r0, [sp, #0xc]
	add	r0, r0, #0x1
	str	r0, [sp, #0xc]
.L2574:
	ldr	r0, [r5]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2575	@cond_branch
	ldr	r0, .L2848+0x8
	ldr	r1, .L2848+0x18
	bl	StringCopy
	ldr	r1, [sp, #0xc]
	add	r1, r1, #0x1
	str	r1, [sp, #0xc]
.L2575:
	ldr	r0, [r5]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2576	@cond_branch
	ldr	r0, .L2848+0x8
	ldr	r1, .L2848+0x1c
	bl	StringCopy
	ldr	r2, [sp, #0xc]
	add	r2, r2, #0x1
	str	r2, [sp, #0xc]
.L2576:
	ldr	r0, [r5]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2577	@cond_branch
	ldr	r0, .L2848+0x8
	ldr	r1, .L2848+0x20
	bl	StringCopy
	ldr	r3, [sp, #0xc]
	add	r3, r3, #0x1
	str	r3, [sp, #0xc]
.L2577:
	add	r0, r6, r4
	ldr	r0, [r0]
	mov	r4, r9
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L2578	@cond_branch
	ldr	r0, .L2848+0x8
	ldr	r1, .L2848+0x24
	bl	StringCopy
	ldr	r5, [sp, #0xc]
	add	r5, r5, #0x1
	str	r5, [sp, #0xc]
.L2578:
	ldr	r0, [sp, #0xc]
	cmp	r0, #0x1
	bgt	.L2579	@cond_branch
	ldr	r0, .L2848+0x28
	strb	r7, [r0, #0x5]
	b	.L2580
.L2849:
	.align	2, 0
.L2848:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gBattleTextBuff1
	.word	gStatusConditionString_PoisonJpn
	.word	-0x8000001
	.word	gStatusConditionString_SleepJpn
	.word	gStatusConditionString_ParalysisJpn
	.word	gStatusConditionString_BurnJpn
	.word	gStatusConditionString_IceJpn
	.word	gStatusConditionString_ConfusionJpn
	.word	gBattleCommunication
.L2579:
	ldr	r1, .L2850
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L2580:
	ldr	r2, .L2850+0x4
	mov	r0, #0x5c
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r0, r3, r0
	mov	r1, #0x0
	str	r1, [r0]
	add	r2, r2, #0x54
	add	r3, r3, r2
	ldr	r0, [r3]
	sub	r1, r1, #0x8
	and	r0, r0, r1
	str	r0, [r3]
	ldr	r0, .L2850+0x8
	bl	BattleScriptExecute
	mov	r1, #0x1
	mov	sl, r1
	b	.L2789
.L2851:
	.align	2, 0
.L2850:
	.word	gBattleCommunication
	.word	gBattleMons
	.word	BattleScript_BerryCureChosenStatusEnd2
.L2581:
	ldr	r0, .L2852
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x1
	mov	r3, #0x0
	b	.L2796
.L2853:
	.align	2, 0
.L2852:
	.word	gLastUsedItem
.L2583:
	ldr	r0, .L2854
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x1
	mov	r3, #0x1
.L2796:
	bl	ItemHealHp
.L2793:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	b	.L2525
.L2855:
	.align	2, 0
.L2854:
	.word	gLastUsedItem
.L2585:
	mov	r2, #0x2
	mov	sl, r2
	ldr	r0, .L2856
	mov	r3, r8
	strb	r3, [r0, #0x17]
	ldr	r0, .L2856+0x4
	bl	BattleScriptPushCursorAndCallback
	mov	r0, r8
	mov	r1, #0x79
	bl	RecordItemEffectBattle
.L2525:
	mov	r4, sl
	cmp	r4, #0
	bne	.LCB24361
	bl	.L2788	@far jump
.LCB24361:
.L2789:
	ldr	r0, .L2856+0x8
	ldr	r1, [sp, #0x18]
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x10
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L2856+0xc
	ldr	r2, .L2856+0x10
	ldr	r1, .L2856+0x14
	ldr	r0, .L2856
	mov	r5, r8
	strb	r5, [r0, #0x17]
	mov	r0, r8
	strb	r0, [r1]
	strb	r0, [r2]
	strb	r0, [r4]
	mov	r0, sl
	cmp	r0, #0x1
	beq	.L2590	@cond_branch
	cmp	r0, #0x3
	beq	.L2591	@cond_branch
	bl	.L2522	@ far jump
.L2857:
	.align	2, 0
.L2856:
	.word	gBattleScripting
	.word	BattleScript_AirBaloonMsgIn
	.word	gSpecialStatuses
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gPotentialItemEffectBattler
.L2590:
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	bl	.L2797	@ far jump
.L2591:
	ldr	r4, .L2858
	mov	r0, #0x5c
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r4, #0
	add	r0, r0, #0x54
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB24427
	bl	.L2522	@far jump
.LCB24427:
	ldr	r1, .L2858+0x4
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1a]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1c
	ldr	r2, .L2858+0x8
	ldr	r5, [sp, #0xc]
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB24446
	bl	.L2522	@far jump
.LCB24446:
	add	r1, r5, r3
	add	r0, r4, #0
	add	r0, r0, #0x25
	add	r1, r1, r0
	add	r0, sp, #0x4
	ldrb	r0, [r0]
	strb	r0, [r1]
	bl	.L2522	@ far jump
.L2859:
	.align	2, 0
.L2858:
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBitTable
.L2595:
	ldr	r1, .L2860
	mov	r0, #0x5c
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	add	r6, r1, #0
	cmp	r0, #0
	bne	.LCB24477
	bl	.L2522	@far jump
.LCB24477:
	mov	r0, r9
	sub	r0, r0, #0x1
	cmp	r0, #0x63
	bls	.LCB24482
	bl	.L2597	@far jump
.LCB24482:
	lsl	r0, r0, #0x2
	ldr	r1, .L2860+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2861:
	.align	2, 0
.L2860:
	.word	gBattleMons
	.word	.L2682
	.align	2, 0
	.align	2, 0
.L2682:
	.word	.L2598
	.word	.L2657
	.word	.L2665
	.word	.L2659
	.word	.L2661
	.word	.L2663
	.word	.L2602
	.word	.L2667
	.word	.L2669
	.word	.L2633
	.word	.L2635
	.word	.L2637
	.word	.L2639
	.word	.L2641
	.word	.L2643
	.word	.L2645
	.word	.L2647
	.word	.L2649
	.word	.L2651
	.word	.L2653
	.word	.L2655
	.word	.L2597
	.word	.L2615
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2680
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2626
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2627
	.word	.L2597
	.word	.L2623
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2597
	.word	.L2600
.L2598:
	cmp	r7, #0
	beq	.LCB24503
	b	.L2597	@long jump
.LCB24503:
	ldr	r0, .L2862
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x1
	mov	r3, #0x0
	bl	ItemHealHp
	b	.L2798
.L2863:
	.align	2, 0
.L2862:
	.word	gLastUsedItem
.L2600:
	ldr	r0, .L2864
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x1
	mov	r3, #0x1
	bl	ItemHealHp
	b	.L2798
.L2865:
	.align	2, 0
.L2864:
	.word	gLastUsedItem
.L2602:
	cmp	r7, #0
	beq	.LCB24539
	b	.L2597	@long jump
.LCB24539:
	mov	r0, r8
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2604	@cond_branch
	ldr	r1, .L2866
	mov	r3, r8
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L2866+0x4
	b	.L2799
.L2867:
	.align	2, 0
.L2866:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L2604:
	ldr	r1, .L2868
	mov	r4, r8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L2868+0x4
.L2799:
	add	r4, r1, r0
	mov	r5, #0x0
	str	r5, [sp, #0xc]
	add	r5, sp, #0x4
.L2609:
	ldr	r1, [sp, #0xc]
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r1, [sp, #0xc]
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	strb	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r6, #0
	beq	.L2608	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L2607	@cond_branch
.L2608:
	ldr	r0, [sp, #0xc]
	add	r0, r0, #0x1
	str	r0, [sp, #0xc]
	cmp	r0, #0x3
	ble	.L2609	@cond_branch
.L2607:
	ldr	r2, [sp, #0xc]
	cmp	r2, #0x4
	bne	.LCB24626
	b	.L2597	@long jump
.LCB24626:
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r6, #0
	bl	CalculatePPWithBonus
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, r8
	bl	GetBattlerHoldEffectParam
	add	r1, sp, #0x4
	ldrb	r1, [r1]
	add	r1, r1, r0
	cmp	r1, r4
	bls	.L2613	@cond_branch
	add	r0, sp, #0x4
	strb	r4, [r0]
	b	.L2614
.L2869:
	.align	2, 0
.L2868:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L2613:
	mov	r0, r8
	bl	GetBattlerHoldEffectParam
	add	r1, sp, #0x4
	ldrb	r1, [r1]
	add	r1, r1, r0
	add	r0, sp, #0x4
	strb	r1, [r0]
.L2614:
	ldr	r1, .L2870
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	strb	r6, [r1, #0x2]
	lsr	r0, r6, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r0, .L2870+0x4
	bl	BattleScriptExecute
	ldr	r1, [sp, #0xc]
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r3, sp, #0x4
	str	r3, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldr	r0, .L2870+0x8
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	mov	r4, #0x3
	mov	sl, r4
	b	.L2790
.L2871:
	.align	2, 0
.L2870:
	.word	gBattleTextBuff1
	.word	BattleScript_BerryPPHealEnd2
	.word	gActiveBattler
.L2615:
	ldr	r0, .L2872
	mov	r1, #0x5c
	mov	r5, r8
	mul	r5, r5, r1
	add	r1, r5, #0
	add	r0, r0, #0x18
	add	r1, r1, r0
	mov	r2, #0x6
	mov	r0, #0x7
	str	r0, [sp, #0xc]
.L2619:
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x5
	bgt	.L2618	@cond_branch
	strb	r2, [r1]
	mov	r3, #0x5
	mov	sl, r3
.L2618:
	add	r1, r1, #0x1
	ldr	r4, [sp, #0xc]
	sub	r4, r4, #0x1
	str	r4, [sp, #0xc]
	cmp	r4, #0
	bge	.L2619	@cond_branch
	mov	r5, #0x8
	str	r5, [sp, #0xc]
	mov	r0, sl
	cmp	r0, #0
	bne	.LCB24761
	bl	.L2788	@far jump
.LCB24761:
	ldr	r0, .L2872+0x4
	mov	r1, r8
	strb	r1, [r0, #0x17]
	ldr	r0, .L2872+0x8
	strb	r1, [r0]
	ldr	r1, .L2872+0xc
	ldr	r0, .L2872+0x10
	mov	r2, r8
	strb	r2, [r0]
	strb	r2, [r1]
	ldr	r0, .L2872+0x14
	bl	BattleScriptExecute
	b	.L2597
.L2873:
	.align	2, 0
.L2872:
	.word	gBattleMons
	.word	gBattleScripting
	.word	gPotentialItemEffectBattler
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	BattleScript_WhiteHerbEnd2
.L2623:
	mov	r0, #0x5c
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r1, r0, r6
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x3
	beq	.L2626	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0x3
	beq	.L2626	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0x3
	beq	.L2626	@cond_branch
.L2627:
	cmp	r7, #0
	beq	.LCB24818
	b	.L2597	@long jump
.LCB24818:
	ldr	r1, .L2874
	mov	r0, #0x5c
	mov	r4, r8
	mul	r4, r4, r0
	add	r0, r4, #0
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2e]
	lsr	r0, r0, #0x3
	str	r0, [r1]
	cmp	r0, #0
	bne	.L2629	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L2629:
	ldr	r0, .L2874+0x4
	bl	BattleScriptExecute
	mov	r5, #0x4
	mov	sl, r5
	mov	r0, r8
	mov	r1, r9
	bl	RecordItemEffectBattle
	ldr	r2, .L2874+0x8
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0xa
	strb	r0, [r2, #0x1]
	ldr	r0, .L2874+0xc
	ldrh	r1, [r0]
	strb	r1, [r2, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	b	.L2597
.L2875:
	.align	2, 0
.L2874:
	.word	gBattleMoveDamage
	.word	BattleScript_ItemHurtEnd2
	.word	gBattleTextBuff1
	.word	gLastUsedItem
.L2626:
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r1, r0, r6
	ldrh	r0, [r1, #0x2a]
	ldrh	r2, [r1, #0x2e]
	cmp	r0, r2
	bcc	.LCB24890
	b	.L2597	@long jump
.LCB24890:
	cmp	r7, #0
	beq	.LCB24892
	b	.L2597	@long jump
.LCB24892:
	ldr	r2, .L2876
	ldrh	r0, [r1, #0x2e]
	lsr	r0, r0, #0x4
	str	r0, [r2]
	cmp	r0, #0
	bne	.L2632	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L2632:
	ldr	r0, [r2]
	neg	r0, r0
	str	r0, [r2]
	ldr	r0, .L2876+0x4
	bl	BattleScriptExecute
	mov	r3, #0x4
	mov	sl, r3
	mov	r0, r8
	mov	r1, r9
	bl	RecordItemEffectBattle
	b	.L2597
.L2877:
	.align	2, 0
.L2876:
	.word	gBattleMoveDamage
	.word	BattleScript_ItemHealHP_End2
.L2633:
	cmp	r7, #0
	beq	.LCB24927
	b	.L2597	@long jump
.LCB24927:
	ldr	r0, .L2878
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x0
	bl	HealConfuseBerry
	b	.L2798
.L2879:
	.align	2, 0
.L2878:
	.word	gLastUsedItem
.L2635:
	cmp	r7, #0
	beq	.LCB24945
	b	.L2597	@long jump
.LCB24945:
	ldr	r0, .L2880
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x1
	bl	HealConfuseBerry
	b	.L2798
.L2881:
	.align	2, 0
.L2880:
	.word	gLastUsedItem
.L2637:
	cmp	r7, #0
	beq	.LCB24963
	b	.L2597	@long jump
.LCB24963:
	ldr	r0, .L2882
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x2
	bl	HealConfuseBerry
	b	.L2798
.L2883:
	.align	2, 0
.L2882:
	.word	gLastUsedItem
.L2639:
	cmp	r7, #0
	beq	.LCB24981
	b	.L2597	@long jump
.LCB24981:
	ldr	r0, .L2884
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x3
	bl	HealConfuseBerry
	b	.L2798
.L2885:
	.align	2, 0
.L2884:
	.word	gLastUsedItem
.L2641:
	cmp	r7, #0
	beq	.LCB24999
	b	.L2597	@long jump
.LCB24999:
	ldr	r0, .L2886
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x4
	bl	HealConfuseBerry
	b	.L2798
.L2887:
	.align	2, 0
.L2886:
	.word	gLastUsedItem
.L2643:
	cmp	r7, #0
	beq	.LCB25017
	b	.L2597	@long jump
.LCB25017:
	ldr	r0, .L2888
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x1
	bl	StatRaiseBerry
	b	.L2798
.L2889:
	.align	2, 0
.L2888:
	.word	gLastUsedItem
.L2645:
	cmp	r7, #0
	beq	.LCB25035
	b	.L2597	@long jump
.LCB25035:
	ldr	r0, .L2890
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x2
	bl	StatRaiseBerry
	b	.L2798
.L2891:
	.align	2, 0
.L2890:
	.word	gLastUsedItem
.L2647:
	cmp	r7, #0
	beq	.LCB25053
	b	.L2597	@long jump
.LCB25053:
	ldr	r0, .L2892
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x3
	bl	StatRaiseBerry
	b	.L2798
.L2893:
	.align	2, 0
.L2892:
	.word	gLastUsedItem
.L2649:
	cmp	r7, #0
	beq	.LCB25071
	b	.L2597	@long jump
.LCB25071:
	ldr	r0, .L2894
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x4
	bl	StatRaiseBerry
	b	.L2798
.L2895:
	.align	2, 0
.L2894:
	.word	gLastUsedItem
.L2651:
	cmp	r7, #0
	beq	.LCB25089
	b	.L2597	@long jump
.LCB25089:
	ldr	r0, .L2896
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x5
	bl	StatRaiseBerry
	b	.L2798
.L2897:
	.align	2, 0
.L2896:
	.word	gLastUsedItem
.L2653:
	cmp	r7, #0
	beq	.LCB25107
	b	.L2597	@long jump
.LCB25107:
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r6, #0
	add	r0, r0, #0x54
	add	r4, r1, r0
	ldr	r0, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0xd
	and	r0, r0, r5
	cmp	r0, #0
	beq	.LCB25119
	b	.L2597	@long jump
.LCB25119:
	mov	r0, r8
	bl	GetBattlerHoldEffectParam
	add	r1, r0, #0
	ldr	r0, .L2898
	ldrh	r2, [r0]
	mov	r0, r8
	bl	HasEnoughHpToEatBerry
	cmp	r0, #0
	bne	.LCB25131
	b	.L2597	@long jump
.LCB25131:
	ldr	r0, [r4]
	orr	r0, r0, r5
	str	r0, [r4]
	ldr	r0, .L2898+0x4
	b	.L2800
.L2899:
	.align	2, 0
.L2898:
	.word	gLastUsedItem
	.word	BattleScript_BerryFocusEnergyEnd2
.L2655:
	cmp	r7, #0
	beq	.LCB25149
	b	.L2597	@long jump
.LCB25149:
	ldr	r0, .L2900
	ldrh	r1, [r0]
	mov	r0, r8
	bl	RandomStatRaiseBerry
.L2798:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	b	.L2597
.L2901:
	.align	2, 0
.L2900:
	.word	gLastUsedItem
.L2657:
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r4, r1, r0
	ldr	r0, [r4]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB25179
	b	.L2597	@long jump
.LCB25179:
	ldr	r0, .L2902
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB25187
	b	.L2597	@long jump
.LCB25187:
	ldr	r0, [r4]
	mov	r1, #0x41
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L2902+0x4
	bl	BattleScriptExecute
	mov	r5, #0x1
	mov	sl, r5
	b	.L2790
.L2903:
	.align	2, 0
.L2902:
	.word	gLastUsedItem
	.word	BattleScript_BerryCurePrlzEnd2
.L2659:
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r4, r1, r0
	ldr	r0, [r4]
	mov	r1, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB25219
	b	.L2597	@long jump
.LCB25219:
	ldr	r0, .L2904
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB25227
	b	.L2597	@long jump
.LCB25227:
	ldr	r0, [r4]
	ldr	r1, .L2904+0x4
	and	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L2904+0x8
	b	.L2801
.L2905:
	.align	2, 0
.L2904:
	.word	gLastUsedItem
	.word	-0xf89
	.word	BattleScript_BerryCurePsnEnd2
.L2661:
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r4, r1, r0
	ldr	r0, [r4]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB25256
	b	.L2597	@long jump
.LCB25256:
	ldr	r0, .L2906
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB25264
	b	.L2597	@long jump
.LCB25264:
	ldr	r0, [r4]
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L2906+0x4
	bl	BattleScriptExecute
	mov	r1, #0x1
	mov	sl, r1
	b	.L2790
.L2907:
	.align	2, 0
.L2906:
	.word	gLastUsedItem
	.word	BattleScript_BerryCureBrnEnd2
.L2663:
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r4, r1, r0
	ldr	r0, [r4]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB25296
	b	.L2597	@long jump
.LCB25296:
	ldr	r0, .L2908
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB25304
	b	.L2597	@long jump
.LCB25304:
	ldr	r0, [r4]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L2908+0x4
	bl	BattleScriptExecute
	mov	r2, #0x1
	mov	sl, r2
	b	.L2790
.L2909:
	.align	2, 0
.L2908:
	.word	gLastUsedItem
	.word	BattleScript_BerryCureFrzEnd2
.L2665:
	mov	r0, #0x5c
	mov	r5, r8
	mul	r5, r5, r0
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r4, r5, r0
	ldr	r0, [r4]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB25336
	b	.L2597	@long jump
.LCB25336:
	ldr	r0, .L2910
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB25344
	b	.L2597	@long jump
.LCB25344:
	ldr	r0, [r4]
	mov	r1, #0x8
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x54
	add	r1, r5, r1
	ldr	r0, [r1]
	ldr	r2, .L2910+0x4
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r0, .L2910+0x8
	bl	BattleScriptExecute
	mov	r3, #0x1
	mov	sl, r3
	b	.L2790
.L2911:
	.align	2, 0
.L2910:
	.word	gLastUsedItem
	.word	-0x8000001
	.word	BattleScript_BerryCureSlpEnd2
.L2667:
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r6, #0
	add	r0, r0, #0x54
	add	r4, r1, r0
	ldr	r0, [r4]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB25384
	b	.L2597	@long jump
.LCB25384:
	ldr	r0, .L2912
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB25392
	b	.L2597	@long jump
.LCB25392:
	ldr	r0, [r4]
	mov	r1, #0x8
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	ldr	r0, .L2912+0x4
.L2800:
	bl	BattleScriptExecute
	mov	r4, #0x2
	mov	sl, r4
	b	.L2790
.L2913:
	.align	2, 0
.L2912:
	.word	gLastUsedItem
	.word	BattleScript_BerryCureConfusionEnd2
.L2669:
	mov	r0, #0x5c
	mov	r5, r8
	mul	r5, r5, r0
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r4, r5, r0
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L2671	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0x54
	add	r0, r5, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB25434
	b	.L2597	@long jump
.LCB25434:
.L2671:
	ldr	r0, .L2914
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	add	r7, r0, #0
	cmp	r7, #0
	beq	.LCB25443
	b	.L2597	@long jump
.LCB25443:
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	ldr	r0, [r4]
	mov	r1, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2672	@cond_branch
	ldr	r0, .L2914+0x4
	ldr	r1, .L2914+0x8
	bl	StringCopy
	mov	r1, #0x1
	str	r1, [sp, #0xc]
.L2672:
	ldr	r0, [r4]
	mov	r2, #0x7
	mov	r9, r2
	and	r0, r0, r2
	add	r6, r6, #0x54
	cmp	r0, #0
	beq	.L2673	@cond_branch
	add	r2, r5, r6
	ldr	r0, [r2]
	ldr	r1, .L2914+0xc
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L2914+0x4
	ldr	r1, .L2914+0x10
	bl	StringCopy
	ldr	r3, [sp, #0xc]
	add	r3, r3, #0x1
	str	r3, [sp, #0xc]
.L2673:
	ldr	r0, [r4]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2674	@cond_branch
	ldr	r0, .L2914+0x4
	ldr	r1, .L2914+0x14
	bl	StringCopy
	ldr	r0, [sp, #0xc]
	add	r0, r0, #0x1
	str	r0, [sp, #0xc]
.L2674:
	ldr	r0, [r4]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2675	@cond_branch
	ldr	r0, .L2914+0x4
	ldr	r1, .L2914+0x18
	bl	StringCopy
	ldr	r1, [sp, #0xc]
	add	r1, r1, #0x1
	str	r1, [sp, #0xc]
.L2675:
	ldr	r0, [r4]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2676	@cond_branch
	ldr	r0, .L2914+0x4
	ldr	r1, .L2914+0x1c
	bl	StringCopy
	ldr	r2, [sp, #0xc]
	add	r2, r2, #0x1
	str	r2, [sp, #0xc]
.L2676:
	add	r0, r5, r6
	ldr	r0, [r0]
	mov	r3, r9
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L2677	@cond_branch
	ldr	r0, .L2914+0x4
	ldr	r1, .L2914+0x20
	bl	StringCopy
	ldr	r4, [sp, #0xc]
	add	r4, r4, #0x1
	str	r4, [sp, #0xc]
.L2677:
	ldr	r5, [sp, #0xc]
	cmp	r5, #0x1
	bgt	.L2678	@cond_branch
	ldr	r0, .L2914+0x24
	strb	r7, [r0, #0x5]
	b	.L2679
.L2915:
	.align	2, 0
.L2914:
	.word	gLastUsedItem
	.word	gBattleTextBuff1
	.word	gStatusConditionString_PoisonJpn
	.word	-0x8000001
	.word	gStatusConditionString_SleepJpn
	.word	gStatusConditionString_ParalysisJpn
	.word	gStatusConditionString_BurnJpn
	.word	gStatusConditionString_IceJpn
	.word	gStatusConditionString_ConfusionJpn
	.word	gBattleCommunication
.L2678:
	ldr	r1, .L2916
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L2679:
	ldr	r2, .L2916+0x4
	mov	r0, #0x5c
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r0, r3, r0
	mov	r1, #0x0
	str	r1, [r0]
	add	r2, r2, #0x54
	add	r3, r3, r2
	ldr	r0, [r3]
	sub	r1, r1, #0x8
	and	r0, r0, r1
	str	r0, [r3]
	ldr	r0, .L2916+0x8
.L2801:
	bl	BattleScriptExecute
	mov	r0, #0x1
	mov	sl, r0
	b	.L2790
.L2917:
	.align	2, 0
.L2916:
	.word	gBattleCommunication
	.word	gBattleMons
	.word	BattleScript_BerryCureChosenStatusEnd2
.L2680:
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r6, #0
	add	r0, r0, #0x54
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L2597	@cond_branch
	ldr	r0, .L2918
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r0, .L2918+0x4
	ldr	r1, .L2918+0x8
	bl	StringCopy
	ldr	r0, .L2918+0xc
	bl	BattleScriptExecute
	ldr	r1, .L2918+0x10
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	mov	r1, #0x2
	mov	sl, r1
.L2597:
	mov	r2, sl
	cmp	r2, #0
	bne	.LCB25637
	bl	.L2788	@far jump
.LCB25637:
.L2790:
	ldr	r4, .L2918+0x14
	ldr	r2, .L2918+0x18
	ldr	r1, .L2918+0x1c
	ldr	r0, .L2918+0x20
	mov	r3, r8
	strb	r3, [r0, #0x17]
	mov	r0, r8
	strb	r0, [r1]
	strb	r0, [r2]
	strb	r0, [r4]
	mov	r5, sl
	cmp	r5, #0x1
	beq	.L2686	@cond_branch
	cmp	r5, #0x3
	beq	.L2687	@cond_branch
	bl	.L2522	@ far jump
.L2919:
	.align	2, 0
.L2918:
	.word	-0xf0001
	.word	gBattleTextBuff1
	.word	gStatusConditionString_LoveJpn
	.word	BattleScript_BerryCureChosenStatusEnd2
	.word	gBattleCommunication
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gPotentialItemEffectBattler
	.word	gBattleScripting
.L2686:
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	b	.L2797
.L2687:
	ldr	r4, .L2920
	mov	r0, #0x5c
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r4, #0
	add	r0, r0, #0x54
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB25696
	bl	.L2522	@far jump
.LCB25696:
	ldr	r1, .L2920+0x4
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1a]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1c
	ldr	r2, .L2920+0x8
	ldr	r5, [sp, #0xc]
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB25715
	bl	.L2522	@far jump
.LCB25715:
	add	r1, r5, r3
	add	r0, r4, #0
	add	r0, r0, #0x25
	add	r1, r1, r0
	add	r0, sp, #0x4
	ldrb	r0, [r0]
	strb	r0, [r1]
	bl	.L2522	@ far jump
.L2921:
	.align	2, 0
.L2920:
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBitTable
.L2691:
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L2922
	ldrb	r0, [r0]
	cmp	r8, r0
	bcc	.LCB25742
	bl	.L2522	@far jump
.LCB25742:
.L2695:
	ldr	r2, .L2922+0x4
	ldr	r1, .L2922+0x8
	mov	r0, #0x5c
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r1
	ldrh	r0, [r0, #0x30]
	strh	r0, [r2]
	mov	r0, r8
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	sub	r0, r0, #0x1
	cmp	r0, #0x63
	bls	.LCB25766
	b	.L2696	@long jump
.LCB25766:
	lsl	r0, r0, #0x2
	ldr	r1, .L2922+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2923:
	.align	2, 0
.L2922:
	.word	gBattlersCount
	.word	gLastUsedItem
	.word	gBattleMons
	.word	.L2732
	.align	2, 0
	.align	2, 0
.L2732:
	.word	.L2697
	.word	.L2701
	.word	.L2709
	.word	.L2703
	.word	.L2705
	.word	.L2707
	.word	.L2696
	.word	.L2711
	.word	.L2715
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2724
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2713
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2696
	.word	.L2699
.L2697:
	ldr	r0, .L2924
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x0
	mov	r3, #0x0
	b	.L2802
.L2925:
	.align	2, 0
.L2924:
	.word	gLastUsedItem
.L2699:
	ldr	r0, .L2926
	ldrh	r1, [r0]
	mov	r0, r8
	mov	r2, #0x0
	mov	r3, #0x1
.L2802:
	bl	ItemHealHp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	b	.L2696
.L2927:
	.align	2, 0
.L2926:
	.word	gLastUsedItem
.L2701:
	ldr	r1, .L2928
	mov	r0, #0x5c
	mov	r4, r8
	mul	r4, r4, r0
	add	r0, r4, #0
	add	r1, r1, #0x50
	add	r4, r0, r1
	ldr	r0, [r4]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB25835
	b	.L2696	@long jump
.LCB25835:
	ldr	r0, .L2928+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB25843
	b	.L2696	@long jump
.LCB25843:
	ldr	r0, [r4]
	mov	r1, #0x41
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	bl	BattleScriptPushCursor
	ldr	r1, .L2928+0x8
	ldr	r0, .L2928+0xc
	b	.L2803
.L2929:
	.align	2, 0
.L2928:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureParRet
.L2703:
	ldr	r1, .L2930
	mov	r0, #0x5c
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r1, r1, #0x50
	add	r4, r0, r1
	ldr	r0, [r4]
	mov	r1, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB25875
	b	.L2696	@long jump
.LCB25875:
	ldr	r0, .L2930+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB25883
	b	.L2696	@long jump
.LCB25883:
	ldr	r0, [r4]
	ldr	r1, .L2930+0x8
	and	r0, r0, r1
	str	r0, [r4]
	bl	BattleScriptPushCursor
	ldr	r1, .L2930+0xc
	ldr	r0, .L2930+0x10
	b	.L2804
.L2931:
	.align	2, 0
.L2930:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	-0xf89
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCurePsnRet
.L2705:
	ldr	r1, .L2932
	mov	r0, #0x5c
	mov	r4, r8
	mul	r4, r4, r0
	add	r0, r4, #0
	add	r1, r1, #0x50
	add	r4, r0, r1
	ldr	r0, [r4]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB25915
	b	.L2696	@long jump
.LCB25915:
	ldr	r0, .L2932+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB25923
	b	.L2696	@long jump
.LCB25923:
	ldr	r0, [r4]
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	bl	BattleScriptPushCursor
	ldr	r1, .L2932+0x8
	ldr	r0, .L2932+0xc
.L2803:
	str	r0, [r1]
	mov	r5, #0x1
	mov	sl, r5
	b	.L2791
.L2933:
	.align	2, 0
.L2932:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureBrnRet
.L2707:
	ldr	r1, .L2934
	mov	r0, #0x5c
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r1, r1, #0x50
	add	r4, r0, r1
	ldr	r0, [r4]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB25959
	b	.L2696	@long jump
.LCB25959:
	ldr	r0, .L2934+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB25967
	b	.L2696	@long jump
.LCB25967:
	ldr	r0, [r4]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	bl	BattleScriptPushCursor
	ldr	r1, .L2934+0x8
	ldr	r0, .L2934+0xc
	b	.L2804
.L2935:
	.align	2, 0
.L2934:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureFrzRet
.L2709:
	ldr	r6, .L2936
	mov	r0, #0x5c
	mov	r5, r8
	mul	r5, r5, r0
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r4, r5, r0
	ldr	r0, [r4]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB25999
	b	.L2696	@long jump
.LCB25999:
	ldr	r0, .L2936+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB26007
	b	.L2696	@long jump
.LCB26007:
	ldr	r0, [r4]
	mov	r1, #0x8
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	add	r2, r6, #0
	add	r2, r2, #0x54
	add	r2, r5, r2
	ldr	r0, [r2]
	ldr	r1, .L2936+0x8
	and	r0, r0, r1
	str	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L2936+0xc
	ldr	r0, .L2936+0x10
	str	r0, [r1]
	mov	r4, #0x1
	mov	sl, r4
	b	.L2791
.L2937:
	.align	2, 0
.L2936:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	-0x8000001
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureSlpRet
.L2711:
	ldr	r1, .L2938
	mov	r0, #0x5c
	mov	r5, r8
	mul	r5, r5, r0
	add	r0, r5, #0
	add	r1, r1, #0x54
	add	r4, r0, r1
	ldr	r0, [r4]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB26050
	b	.L2696	@long jump
.LCB26050:
	ldr	r0, .L2938+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	cmp	r0, #0
	beq	.LCB26058
	b	.L2696	@long jump
.LCB26058:
	ldr	r0, [r4]
	mov	r1, #0x8
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	bl	BattleScriptPushCursor
	ldr	r1, .L2938+0x8
	ldr	r0, .L2938+0xc
	str	r0, [r1]
	mov	r0, #0x2
	mov	sl, r0
	b	.L2791
.L2939:
	.align	2, 0
.L2938:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureConfusionRet
.L2713:
	ldr	r1, .L2940
	mov	r0, #0x5c
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r1, r1, #0x54
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB26094
	b	.L2696	@long jump
.LCB26094:
	ldr	r0, .L2940+0x4
	and	r1, r1, r0
	str	r1, [r2]
	ldr	r0, .L2940+0x8
	ldr	r1, .L2940+0xc
	bl	StringCopy
	bl	BattleScriptPushCursor
	ldr	r1, .L2940+0x10
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	ldr	r1, .L2940+0x14
	ldr	r0, .L2940+0x18
	str	r0, [r1]
	mov	r3, #0x2
	mov	sl, r3
	b	.L2791
.L2941:
	.align	2, 0
.L2940:
	.word	gBattleMons
	.word	-0xf0001
	.word	gBattleTextBuff1
	.word	gStatusConditionString_LoveJpn
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureChosenStatusRet
.L2715:
	ldr	r4, .L2942
	mov	r0, #0x5c
	mov	r6, r8
	mul	r6, r6, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r5, r6, r0
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L2717	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x54
	add	r0, r6, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB26147
	b	.L2696	@long jump
.LCB26147:
.L2717:
	ldr	r0, .L2942+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	bl	UnnerveOn
	add	r7, r0, #0
	cmp	r7, #0
	beq	.LCB26156
	b	.L2696	@long jump
.LCB26156:
	ldr	r0, [r5]
	mov	r1, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2718	@cond_branch
	ldr	r0, .L2942+0x8
	ldr	r1, .L2942+0xc
	bl	StringCopy
.L2718:
	ldr	r0, [r5]
	mov	r1, #0x7
	mov	r9, r1
	and	r0, r0, r1
	add	r4, r4, #0x54
	cmp	r0, #0
	beq	.L2719	@cond_branch
	add	r2, r6, r4
	ldr	r0, [r2]
	ldr	r1, .L2942+0x10
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L2942+0x8
	ldr	r1, .L2942+0x14
	bl	StringCopy
.L2719:
	ldr	r0, [r5]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2720	@cond_branch
	ldr	r0, .L2942+0x8
	ldr	r1, .L2942+0x18
	bl	StringCopy
.L2720:
	ldr	r0, [r5]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2721	@cond_branch
	ldr	r0, .L2942+0x8
	ldr	r1, .L2942+0x1c
	bl	StringCopy
.L2721:
	ldr	r0, [r5]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2722	@cond_branch
	ldr	r0, .L2942+0x8
	ldr	r1, .L2942+0x20
	bl	StringCopy
.L2722:
	add	r4, r6, r4
	ldr	r0, [r4]
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L2723	@cond_branch
	ldr	r0, .L2942+0x8
	ldr	r1, .L2942+0x24
	bl	StringCopy
.L2723:
	str	r7, [r5]
	ldr	r0, [r4]
	mov	r1, #0x8
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r4]
	bl	BattleScriptPushCursor
	ldr	r0, .L2942+0x28
	strb	r7, [r0, #0x5]
	ldr	r1, .L2942+0x2c
	ldr	r0, .L2942+0x30
.L2804:
	str	r0, [r1]
	mov	r3, #0x1
	mov	sl, r3
	b	.L2791
.L2943:
	.align	2, 0
.L2942:
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gBattleTextBuff1
	.word	gStatusConditionString_PoisonJpn
	.word	-0x8000001
	.word	gStatusConditionString_SleepJpn
	.word	gStatusConditionString_ParalysisJpn
	.word	gStatusConditionString_BurnJpn
	.word	gStatusConditionString_IceJpn
	.word	gStatusConditionString_ConfusionJpn
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureChosenStatusRet
.L2724:
	ldr	r6, .L2944
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r6, #0
	add	r0, r0, #0x18
	add	r1, r1, r0
	mov	r2, #0x6
	mov	r4, #0x7
	str	r4, [sp, #0xc]
.L2728:
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x5
	bgt	.L2727	@cond_branch
	strb	r2, [r1]
	mov	r5, #0x5
	mov	sl, r5
.L2727:
	add	r1, r1, #0x1
	ldr	r0, [sp, #0xc]
	sub	r0, r0, #0x1
	str	r0, [sp, #0xc]
	cmp	r0, #0
	bge	.L2728	@cond_branch
	mov	r1, sl
	cmp	r1, #0
	beq	.L2694	@cond_branch
	ldr	r0, .L2944+0x4
	mov	r2, r8
	strb	r2, [r0, #0x17]
	ldr	r0, .L2944+0x8
	strb	r2, [r0]
	bl	BattleScriptPushCursor
	ldr	r1, .L2944+0xc
	ldr	r0, .L2944+0x10
	str	r0, [r1]
	b	.L2788
.L2945:
	.align	2, 0
.L2944:
	.word	gBattleMons
	.word	gBattleScripting
	.word	gPotentialItemEffectBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WhiteHerbRet
.L2696:
	mov	r3, sl
	cmp	r3, #0
	beq	.L2694	@cond_branch
.L2791:
	ldr	r4, .L2946
	ldr	r0, .L2946+0x4
	ldr	r1, .L2946+0x8
	mov	r5, r8
	strb	r5, [r1, #0x17]
	mov	r1, r8
	strb	r1, [r0]
	strb	r1, [r4]
	mov	r0, sl
	cmp	r0, #0x1
	beq	.LCB26363
	b	.L2522	@long jump
.LCB26363:
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
.L2797:
	ldr	r1, .L2946+0xc
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L2522
.L2947:
	.align	2, 0
.L2946:
	.word	gActiveBattler
	.word	gPotentialItemEffectBattler
	.word	gBattleScripting
	.word	gBattleMons+0x50
.L2694:
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L2948
	ldrb	r0, [r0]
	cmp	r8, r0
	bcs	.LCB26405
	b	.L2695	@long jump
.LCB26405:
	b	.L2522
.L2949:
	.align	2, 0
.L2948:
	.word	gBattlersCount
.L2737:
	ldr	r7, .L2950
	ldr	r0, [r7]
	cmp	r0, #0
	bne	.LCB26419
	b	.L2522	@long jump
.LCB26419:
	cmp	r5, #0x1e
	beq	.L2740	@cond_branch
	cmp	r5, #0x3e
	beq	.L2743	@cond_branch
	b	.L2522
.L2951:
	.align	2, 0
.L2950:
	.word	gBattleMoveDamage
.L2740:
	ldr	r0, .L2952
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB26443
	b	.L2522	@long jump
.LCB26443:
	ldr	r2, .L2952+0x4
	ldr	r4, .L2952+0x8
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2742	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB26461
	b	.L2522	@long jump
.LCB26461:
.L2742:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp, #0x10]
	cmp	r0, r1
	bcc	.LCB26477
	b	.L2522	@long jump
.LCB26477:
	ldr	r2, .L2952+0xc
	ldr	r0, .L2952+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB26490
	b	.L2522	@long jump
.LCB26490:
	ldr	r2, .L2952+0x14
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	bne	.LCB26500
	b	.L2522	@long jump
.LCB26500:
	ldr	r1, .L2952+0x18
	mov	r0, #0x8
	strh	r0, [r1, #0x2e]
	bl	BattleScriptPushCursor
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	bl	BattleScriptPop
	b	.L2522
.L2953:
	.align	2, 0
.L2952:
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattleScripting
.L2743:
	ldr	r0, .L2954
	ldrh	r0, [r0]
	mov	r5, #0x29
	and	r5, r5, r0
	cmp	r5, #0
	beq	.LCB26532
	b	.L2522	@long jump
.LCB26532:
	ldr	r1, .L2954+0x4
	ldr	r4, .L2954+0x8
	ldrb	r2, [r4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r6, r1, #0
	add	r6, r6, #0x8
	add	r0, r0, r6
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.LCB26544
	b	.L2522	@long jump
.LCB26544:
	ldr	r0, .L2954+0xc
	cmp	r1, r0
	bne	.LCB26547
	b	.L2522	@long jump
.LCB26547:
	ldr	r0, .L2954+0x10
	ldrb	r3, [r0]
	cmp	r3, r2
	bne	.LCB26556
	b	.L2522	@long jump
.LCB26556:
	ldr	r2, .L2954+0x14
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2a]
	ldrh	r0, [r0, #0x2e]
	cmp	r1, r0
	bne	.LCB26570
	b	.L2522	@long jump
.LCB26570:
	cmp	r1, #0
	bne	.LCB26572
	b	.L2522	@long jump
.LCB26572:
	ldr	r0, .L2954+0x18
	mov	r2, sp
	ldrh	r2, [r2, #0x14]
	strh	r2, [r0]
	ldr	r0, .L2954+0x1c
	strb	r3, [r0]
	ldr	r0, .L2954+0x20
	strb	r3, [r0, #0x17]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldr	r0, [r0]
	ldr	r1, [sp, #0x10]
	bl	__divsi3
	neg	r0, r0
	str	r0, [r7]
	ldrb	r1, [r4]
	cmp	r0, #0
	bne	.L2745	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r7]
.L2745:
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	str	r5, [r0]
	bl	BattleScriptPushCursor
	ldr	r1, .L2954+0x24
	ldr	r0, .L2954+0x28
	str	r0, [r1]
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	b	.L2522
.L2955:
	.align	2, 0
.L2954:
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	0xffff
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gPotentialItemEffectBattler
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ItemHealHP_Ret
.L2748:
	ldr	r0, .L2956
	ldrh	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB26643
	b	.L2522	@long jump
.LCB26643:
	ldr	r0, .L2956+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L2750	@cond_branch
	mov	r4, #0x3f
	and	r4, r4, r0
	b	.L2751
.L2957:
	.align	2, 0
.L2956:
	.word	gMoveResultFlags
	.word	gBattleStruct
.L2750:
	ldr	r2, .L2958
	ldr	r0, .L2958+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r4, [r0, #0x3]
.L2751:
	mov	r0, r9
	sub	r0, r0, #0x78
	cmp	r0, #0xe
	bls	.LCB26680
	b	.L2522	@long jump
.LCB26680:
	lsl	r0, r0, #0x2
	ldr	r1, .L2958+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2959:
	.align	2, 0
.L2958:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	.L2775
	.align	2, 0
	.align	2, 0
.L2775:
	.word	.L2756
	.word	.L2753
	.word	.L2522
	.word	.L2522
	.word	.L2522
	.word	.L2522
	.word	.L2772
	.word	.L2769
	.word	.L2522
	.word	.L2522
	.word	.L2522
	.word	.L2522
	.word	.L2766
	.word	.L2763
	.word	.L2760
.L2753:
	ldr	r2, .L2960
	ldr	r0, .L2960+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2755	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB26718
	b	.L2522	@long jump
.LCB26718:
.L2755:
	mov	r3, #0x2
	mov	sl, r3
	bl	BattleScriptPushCursor
	ldr	r1, .L2960+0x8
	ldr	r0, .L2960+0xc
	str	r0, [r1]
	b	.L2522
.L2961:
	.align	2, 0
.L2960:
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AirBaloonMsgPop
.L2756:
	ldr	r2, .L2962
	ldr	r0, .L2962+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2758	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB26756
	b	.L2522	@long jump
.LCB26756:
.L2758:
	ldr	r0, .L2962+0x8
	ldrh	r0, [r0]
	ldr	r4, .L2962+0xc
	ldrb	r1, [r4]
	bl	IsMoveMakingContact
	cmp	r0, #0
	bne	.LCB26767
	b	.L2522	@long jump
.LCB26767:
	ldrb	r0, [r4]
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB26773
	b	.L2522	@long jump
.LCB26773:
	ldrb	r0, [r4]
	bl	GetBattlerAbility
	cmp	r0, #0x62
	bne	.LCB26779
	b	.L2522	@long jump
.LCB26779:
	ldr	r5, .L2962+0x10
	ldr	r2, .L2962+0x14
	ldrb	r1, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	mov	r1, #0x6
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [r5]
	cmp	r0, #0
	bne	.L2759	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L2759:
	mov	r4, #0x4
	mov	sl, r4
	bl	BattleScriptPushCursor
	ldr	r1, .L2962+0x18
	ldr	r0, .L2962+0x1c
	str	r0, [r1]
	ldr	r2, .L2962+0x20
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0xa
	strb	r0, [r2, #0x1]
	ldr	r0, .L2962+0x24
	ldrh	r1, [r0]
	strb	r1, [r2, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	mov	r0, r8
	mov	r1, #0x78
	bl	RecordItemEffectBattle
	b	.L2522
.L2963:
	.align	2, 0
.L2962:
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_RockyHelmetActivates
	.word	gBattleTextBuff1
	.word	gLastUsedItem
.L2760:
	mov	r0, r8
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB26852
	b	.L2522	@long jump
.LCB26852:
	ldr	r2, .L2964
	ldr	r0, .L2964+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2762	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB26870
	b	.L2522	@long jump
.LCB26870:
.L2762:
	ldr	r0, .L2964+0x8
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB26879
	b	.L2522	@long jump
.LCB26879:
	mov	r5, #0x5
	mov	sl, r5
	bl	BattleScriptPushCursor
	ldr	r1, .L2964+0xc
	ldr	r0, .L2964+0x10
	str	r0, [r1]
	b	.L2522
.L2965:
	.align	2, 0
.L2964:
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WeaknessPolicy
.L2763:
	mov	r0, r8
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB26904
	b	.L2522	@long jump
.LCB26904:
	ldr	r2, .L2966
	ldr	r0, .L2966+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2765	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB26922
	b	.L2522	@long jump
.LCB26922:
.L2765:
	cmp	r4, #0xf
	beq	.LCB26925
	b	.L2522	@long jump
.LCB26925:
	mov	r0, #0x5
	mov	sl, r0
	b	.L2805
.L2967:
	.align	2, 0
.L2966:
	.word	gSpecialStatuses
	.word	gBattlerTarget
.L2766:
	mov	r0, r8
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB26944
	b	.L2522	@long jump
.LCB26944:
	ldr	r2, .L2968
	ldr	r0, .L2968+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2768	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB26962
	b	.L2522	@long jump
.LCB26962:
.L2768:
	cmp	r4, #0xb
	beq	.LCB26965
	b	.L2522	@long jump
.LCB26965:
	mov	r1, #0x5
	mov	sl, r1
	bl	BattleScriptPushCursor
	ldr	r1, .L2968+0x8
	ldr	r0, .L2968+0xc
	str	r0, [r1]
	ldr	r1, .L2968+0x10
	mov	r0, #0xd
	strb	r0, [r1, #0x1a]
	b	.L2522
.L2969:
	.align	2, 0
.L2968:
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TargetItemStatRaise
	.word	gBattleScripting
.L2769:
	mov	r0, r8
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB26994
	b	.L2522	@long jump
.LCB26994:
	ldr	r2, .L2970
	ldr	r0, .L2970+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2771	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB27012
	b	.L2522	@long jump
.LCB27012:
.L2771:
	cmp	r4, #0xd
	beq	.LCB27015
	b	.L2522	@long jump
.LCB27015:
	mov	r2, #0x5
	mov	sl, r2
.L2805:
	bl	BattleScriptPushCursor
	ldr	r1, .L2970+0x8
	ldr	r0, .L2970+0xc
	str	r0, [r1]
	ldr	r1, .L2970+0x10
	mov	r0, #0x9
	strb	r0, [r1, #0x1a]
	b	.L2522
.L2971:
	.align	2, 0
.L2970:
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TargetItemStatRaise
	.word	gBattleScripting
.L2772:
	mov	r0, r8
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.LCB27045
	b	.L2522	@long jump
.LCB27045:
	ldr	r2, .L2972
	ldr	r0, .L2972+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2774	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x10
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB27063
	b	.L2522	@long jump
.LCB27063:
.L2774:
	cmp	r4, #0xb
	beq	.LCB27066
	b	.L2522	@long jump
.LCB27066:
	mov	r3, #0x5
	mov	sl, r3
	bl	BattleScriptPushCursor
	ldr	r1, .L2972+0x8
	ldr	r0, .L2972+0xc
	str	r0, [r1]
	ldr	r1, .L2972+0x10
	mov	r0, #0xc
	strb	r0, [r1, #0x1a]
	b	.L2522
.L2973:
	.align	2, 0
.L2972:
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TargetItemStatRaise
	.word	gBattleScripting
.L2777:
	mov	r4, r9
	cmp	r4, #0x56
	beq	.L2781	@cond_branch
	cmp	r4, #0x57
	bne	.L2778	@cond_branch
	ldr	r0, .L2974
	mov	r1, #0x5c
	mov	r5, r8
	mul	r5, r5, r1
	add	r1, r5, #0
	add	r0, r0, #0x50
	add	r4, r1, r0
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L2778	@cond_branch
	mov	r0, r8
	mov	r1, r8
	bl	CanPoisonType
	cmp	r0, #0
	beq	.L2778	@cond_branch
	mov	r0, r8
	bl	GetBattlerAbility
	cmp	r0, #0x11
	beq	.L2778	@cond_branch
	mov	r0, #0x1
	mov	sl, r0
	mov	r0, #0x80
	str	r0, [r4]
	ldr	r0, .L2974+0x4
	bl	BattleScriptExecute
	mov	r0, r8
	mov	r1, #0x57
	bl	RecordItemEffectBattle
	b	.L2778
.L2975:
	.align	2, 0
.L2974:
	.word	gBattleMons
	.word	BattleScript_ToxicOrb
.L2781:
	ldr	r2, .L2976
	mov	r0, #0x5c
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r4, r1, r0
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L2778	@cond_branch
	add	r1, r1, r2
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xa
	beq	.L2778	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0xa
	beq	.L2778	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0xa
	beq	.L2778	@cond_branch
	mov	r0, r8
	bl	GetBattlerAbility
	cmp	r0, #0x29
	beq	.L2778	@cond_branch
	mov	r1, #0x1
	mov	sl, r1
	mov	r0, #0x10
	str	r0, [r4]
	ldr	r0, .L2976+0x4
	bl	BattleScriptExecute
	mov	r0, r8
	mov	r1, #0x56
	bl	RecordItemEffectBattle
.L2778:
	mov	r2, sl
	cmp	r2, #0x1
	bne	.L2522	@cond_branch
	ldr	r4, .L2976+0x8
	mov	r3, r8
	strb	r3, [r4]
	mov	r0, #0x5c
	mov	r5, r8
	mul	r5, r5, r0
	add	r0, r5, #0
	ldr	r1, .L2976+0xc
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L2522:
	mov	r0, sl
	cmp	r0, #0
	beq	.L2788	@cond_branch
	ldr	r0, .L2976+0x10
	ldrh	r0, [r0]
	sub	r0, r0, #0x90
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x42
	bhi	.L2788	@cond_branch
	ldr	r0, .L2976+0x14
	ldr	r2, [r0]
	mov	r0, #0x1
	mov	r1, r8
	and	r0, r0, r1
	ldr	r3, .L2976+0x18
	add	r2, r2, r3
	add	r2, r2, r0
	ldr	r3, .L2976+0x1c
	ldr	r1, .L2976+0x20
	mov	r4, r8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
.L2788:
	mov	r0, sl
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2977:
	.align	2, 0
.L2976:
	.word	gBattleMons
	.word	BattleScript_FlameOrb
	.word	gActiveBattler
	.word	gBattleMons+0x50
	.word	gLastUsedItem
	.word	gBattleStruct
	.word	0x2b6
	.word	gBitTable
	.word	gBattlerPartyIndexes
.Lfe69:
	.size	 ItemBattleEffects,.Lfe69-ItemBattleEffects
	.align	2, 0
	.globl	ClearFuryCutterDestinyBondGrudge
	.type	 ClearFuryCutterDestinyBondGrudge,function
	.thumb_func
ClearFuryCutterDestinyBondGrudge:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2979
	lsl	r3, r0, #0x2
	add	r1, r3, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strb	r2, [r1, #0x13]
	ldr	r1, .L2979+0x4
	mov	r2, #0x5c
	mul	r2, r2, r0
	add	r1, r1, #0x54
	add	r2, r2, r1
	ldr	r0, [r2]
	ldr	r1, .L2979+0x8
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L2979+0xc
	add	r3, r3, r0
	ldr	r0, [r3]
	ldr	r1, .L2979+0x10
	and	r0, r0, r1
	str	r0, [r3]
	bx	lr
.L2980:
	.align	2, 0
.L2979:
	.word	gDisableStructs
	.word	gBattleMons
	.word	-0x2000001
	.word	gStatuses3
	.word	-0x4001
.Lfe70:
	.size	 ClearFuryCutterDestinyBondGrudge,.Lfe70-ClearFuryCutterDestinyBondGrudge
	.align	2, 0
	.globl	HandleAction_RunBattleScript
	.type	 HandleAction_RunBattleScript,function
	.thumb_func
HandleAction_RunBattleScript:
	push	{lr}
	ldr	r0, .L2983
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2982	@cond_branch
	ldr	r1, .L2983+0x4
	ldr	r0, .L2983+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
.L2982:
	pop	{r0}
	bx	r0
.L2984:
	.align	2, 0
.L2983:
	.word	gBattleControllerExecFlags
	.word	gBattleScriptingCommandsTable
	.word	gBattlescriptCurrInstr
.Lfe71:
	.size	 HandleAction_RunBattleScript,.Lfe71-HandleAction_RunBattleScript
	.section .rodata
	.type	 targets.217,object
	.size	 targets.217,4
targets.217:
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0x2
.text
	.align	2, 0
	.globl	SetRandomTarget
	.type	 SetRandomTarget,function
	.thumb_func
SetRandomTarget:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldr	r0, .L2989
	ldr	r0, [r0]
	mov	r7, #0x1
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L2986	@cond_branch
	ldr	r5, .L2989+0x4
	bl	Random
	add	r4, r0, #0
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	add	r1, r7, #0
	and	r1, r1, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r1, r1, r0
	add	r1, r1, r5
	ldrb	r0, [r1]
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L2988	@cond_branch
	mov	r0, #0x2
	eor	r4, r4, r0
	b	.L2988
.L2990:
	.align	2, 0
.L2989:
	.word	gBattleTypeFlags
	.word	targets.217
.L2986:
	ldr	r4, .L2991
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L2988:
	add	r0, r4, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2992:
	.align	2, 0
.L2991:
	.word	targets.217
.Lfe72:
	.size	 SetRandomTarget,.Lfe72-SetRandomTarget
	.align	2, 0
	.globl	GetMoveTarget
	.type	 GetMoveTarget,function
	.thumb_func
GetMoveTarget:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0
	beq	.L2994	@cond_branch
	sub	r5, r1, #0x1
	b	.L2995
.L2994:
	ldr	r1, .L3024
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x7]
.L2995:
	cmp	r5, #0x8
	bne	.LCB27461
	b	.L3006	@long jump
.LCB27461:
	cmp	r5, #0x8
	bhi	.L3020	@cond_branch
	cmp	r5, #0x1
	bne	.LCB27465
	b	.L3006	@long jump
.LCB27465:
	cmp	r5, #0x1
	bcc	.L2997	@cond_branch
	cmp	r5, #0x2
	bne	.LCB27469
	b	.L3015	@long jump
.LCB27469:
	cmp	r5, #0x4
	bne	.LCB27471
	b	.L3008	@long jump
.LCB27471:
	b	.L3015
.L3025:
	.align	2, 0
.L3024:
	.word	gBattleMoves
.L3020:
	cmp	r5, #0x20
	bne	.LCB27482
	b	.L3006	@long jump
.LCB27482:
	cmp	r5, #0x20
	bhi	.LCB27484
	b	.L3015	@long jump
.LCB27484:
	cmp	r5, #0x40
	bne	.LCB27486
	b	.L3006	@long jump
.LCB27486:
	cmp	r5, #0x80
	bne	.LCB27488
	b	.L3016	@long jump
.LCB27488:
	b	.L3015
.L2997:
	ldr	r0, .L3026
	ldrb	r0, [r0]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L3026+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r0, [r2, #0x8]
	cmp	r0, #0
	beq	.L2998	@cond_branch
	ldr	r1, .L3026+0x8
	ldrb	r4, [r2, #0x9]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.LCB27522
	b	.L3022	@long jump
.LCB27522:
.L2998:
	ldr	r7, .L3026
	ldrb	r0, [r7]
	bl	SetRandomTarget
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L3026+0xc
	lsl	r1, r6, #0x2
	add	r0, r1, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
	add	r4, r1, #0
	cmp	r0, #0xd
	bne	.L3000	@cond_branch
	ldrb	r0, [r7]
	mov	r1, #0x1f
	bl	IsAbilityOnOpposingSide
	cmp	r0, #0
	beq	.L3000	@cond_branch
	ldr	r2, .L3026+0x8
	mov	r1, #0x5c
	mov	r0, r5
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x1f
	beq	.L3000	@cond_branch
	mov	r4, #0x2
	eor	r5, r5, r4
	mov	r0, r5
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	add	r0, r5, #0
	bl	RecordAbilityBattle
	ldr	r1, .L3026+0x10
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0]
	orr	r1, r1, r4
	strb	r1, [r0]
	b	.L2996
.L3027:
	.align	2, 0
.L3026:
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gBattleMons
	.word	gBattleMoves
	.word	gSpecialStatuses
.L3000:
	ldr	r0, .L3028
	add	r1, r4, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0xb
	beq	.LCB27601
	b	.L2996	@long jump
.LCB27601:
	ldr	r0, .L3028+0x4
	ldrb	r0, [r0]
	mov	r1, #0x72
	bl	IsAbilityOnOpposingSide
	cmp	r0, #0
	bne	.LCB27609
	b	.L2996	@long jump
.LCB27609:
	ldr	r2, .L3028+0x8
	mov	r1, #0x5c
	mov	r0, r5
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x72
	bne	.LCB27618
	b	.L2996	@long jump
.LCB27618:
	mov	r0, #0x2
	eor	r5, r5, r0
	lsl	r0, r5, #0x18
	lsr	r5, r0, #0x18
	mov	r0, r5
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	add	r0, r5, #0
	bl	RecordAbilityBattle
	ldr	r1, .L3028+0xc
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	b	.L2996
.L3029:
	.align	2, 0
.L3028:
	.word	gBattleMoves
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gSpecialStatuses
.L3006:
	ldr	r0, .L3030
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	add	r1, r0, #0
	mov	r2, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	eor	r0, r0, r2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	bne	.L2996	@cond_branch
	mov	r0, #0x2
	eor	r5, r5, r0
	b	.L2996
.L3031:
	.align	2, 0
.L3030:
	.word	gBattlerAttacker
.L3008:
	ldr	r0, .L3032
	ldrb	r0, [r0]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L3032+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r0, [r2, #0x8]
	cmp	r0, #0
	beq	.L3009	@cond_branch
	ldr	r1, .L3032+0x8
	ldrb	r4, [r2, #0x9]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L3009	@cond_branch
.L3022:
	add	r5, r4, #0
	b	.L2996
.L3033:
	.align	2, 0
.L3032:
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gBattleMons
.L3009:
	ldr	r0, .L3034
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3011	@cond_branch
	mov	r0, #0x4
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L3011	@cond_branch
	ldr	r0, .L3034+0x4
	ldrb	r0, [r0]
	bl	SetRandomTarget
	b	.L3023
.L3035:
	.align	2, 0
.L3034:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
.L3011:
	ldr	r0, .L3036
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	add	r1, r0, #0
	mov	r2, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	eor	r0, r0, r2
	bl	GetBattlerAtPosition
.L3023:
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L2996
.L3037:
	.align	2, 0
.L3036:
	.word	gBattlerAttacker
.L3015:
	ldr	r0, .L3038
	ldrb	r5, [r0]
	b	.L2996
.L3039:
	.align	2, 0
.L3038:
	.word	gBattlerAttacker
.L3016:
	ldr	r4, .L3040
	ldrb	r0, [r4]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L3017	@cond_branch
	ldrb	r0, [r4]
	eor	r5, r5, r0
	b	.L2996
.L3041:
	.align	2, 0
.L3040:
	.word	gBattlerAttacker
.L3017:
	ldrb	r5, [r4]
.L2996:
	ldr	r0, .L3042
	ldrb	r0, [r0]
	ldr	r1, .L3042+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	strb	r5, [r0, #0xc]
	add	r0, r5, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3043:
	.align	2, 0
.L3042:
	.word	gBattlerAttacker
	.word	gBattleStruct
.Lfe73:
	.size	 GetMoveTarget,.Lfe73-GetMoveTarget
	.align	2, 0
	.type	 HasObedientBitSet,function
	.thumb_func
HasObedientBitSet:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L3048	@cond_branch
	ldr	r0, .L3049
	lsl	r4, r4, #0x1
	add	r5, r4, r0
	ldrh	r0, [r5]
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r6, .L3049+0x4
	add	r0, r0, r6
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, #0xc1
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L3046	@cond_branch
	ldrh	r0, [r5]
	mul	r0, r0, r7
	add	r0, r0, r6
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	cmp	r0, #0x97
	beq	.L3046	@cond_branch
.L3048:
	mov	r0, #0x1
	b	.L3047
.L3050:
	.align	2, 0
.L3049:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L3046:
	ldr	r0, .L3051
	add	r0, r4, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L3051+0x4
	add	r0, r0, r1
	mov	r1, #0x50
	mov	r2, #0x0
	bl	GetMonData
.L3047:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3052:
	.align	2, 0
.L3051:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe74:
	.size	 HasObedientBitSet,.Lfe74-HasObedientBitSet
	.align	2, 0
	.globl	IsMonDisobedient
	.type	 IsMonDisobedient,function
	.thumb_func
IsMonDisobedient:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	mov	r6, #0x0
	ldr	r5, .L3094
	ldr	r0, [r5]
	ldr	r1, .L3094+0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3090	@cond_branch
	ldr	r4, .L3094+0x8
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L3090	@cond_branch
	ldrb	r0, [r4]
	bl	HasObedientBitSet
	cmp	r0, #0
	beq	.L3056	@cond_branch
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3057	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	beq	.L3090	@cond_branch
.L3057:
	ldr	r0, .L3094
	ldr	r1, [r0]
	ldr	r0, .L3094+0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3090	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3090	@cond_branch
	ldr	r2, .L3094+0x10
	ldr	r0, .L3094+0x8
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x58
	add	r0, r1, r0
	ldr	r0, [r0]
	add	r2, r2, #0x3e
	add	r1, r1, r2
	bl	IsOtherTrainer
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3090	@cond_branch
	ldr	r0, .L3094+0x14
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3090	@cond_branch
	mov	r6, #0xa
	ldr	r0, .L3094+0x18
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3062	@cond_branch
	mov	r6, #0x1e
.L3062:
	ldr	r0, .L3094+0x1c
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3063	@cond_branch
	mov	r6, #0x32
.L3063:
	ldr	r0, .L3094+0x20
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3056	@cond_branch
	mov	r6, #0x46
.L3056:
	ldr	r5, .L3094+0x10
	ldr	r0, .L3094+0x8
	mov	r8, r0
	ldrb	r0, [r0]
	mov	r7, #0x5c
	mul	r0, r0, r7
	add	r0, r0, r5
	add	r0, r0, #0x2c
	ldrb	r0, [r0]
	cmp	r0, r6
	bls	.L3090	@cond_branch
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	mov	r2, r8
	ldrb	r0, [r2]
	mov	r2, r0
	mul	r2, r2, r7
	add	r0, r2, r5
	add	r0, r0, #0x2c
	ldrb	r0, [r0]
	add	r0, r0, r6
	mul	r0, r0, r1
	asr	r4, r0, #0x8
	cmp	r4, r6
	bge	.L3066	@cond_branch
.L3090:
	mov	r0, #0x0
	b	.L3089
.L3095:
	.align	2, 0
.L3094:
	.word	gBattleTypeFlags
	.word	0x2000002
	.word	gBattlerAttacker
	.word	0x3f0100
	.word	gBattleMons
	.word	0x86e
	.word	0x868
	.word	0x86a
	.word	0x86c
.L3066:
	ldr	r3, .L3096
	ldrh	r0, [r3]
	cmp	r0, #0x63
	bne	.L3067	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x54
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r2, .L3096+0x4
	and	r1, r1, r2
	str	r1, [r0]
.L3067:
	mov	r1, r8
	ldrb	r0, [r1]
	mul	r0, r0, r7
	add	r1, r5, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3068	@cond_branch
	ldrh	r0, [r3]
	cmp	r0, #0xad
	beq	.L3069	@cond_branch
	cmp	r0, #0xd6
	bne	.L3068	@cond_branch
.L3069:
	ldr	r1, .L3096+0x8
	ldr	r0, .L3096+0xc
	b	.L3091
.L3097:
	.align	2, 0
.L3096:
	.word	gCurrentMove
	.word	-0x800001
	.word	gBattlescriptCurrInstr
	.word	BattleScript_IgnoresWhileAsleep
.L3068:
	bl	Random
	mov	r7, #0xff
	add	r1, r7, #0
	and	r1, r1, r0
	ldr	r5, .L3098
	ldr	r2, .L3098+0x4
	mov	r9, r2
	ldrb	r3, [r2]
	mov	r0, #0x5c
	mov	r8, r0
	mov	r0, r8
	mul	r0, r0, r3
	add	r0, r0, r5
	add	r0, r0, #0x2c
	ldrb	r2, [r0]
	add	r0, r2, r6
	mul	r0, r0, r1
	asr	r4, r0, #0x8
	cmp	r4, r6
	bge	.L3070	@cond_branch
	ldr	r6, .L3098+0x8
	ldr	r5, .L3098+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	add	r0, r3, #0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xf
	bne	.LCB28169
	b	.L3092	@long jump
.LCB28169:
	ldr	r1, .L3098+0x10
	mov	r8, r1
	mov	r7, #0x3
.L3073:
	bl	Random
	and	r0, r0, r7
	mov	r2, r8
	strb	r0, [r2]
	strb	r0, [r5]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L3073	@cond_branch
	ldr	r4, .L3098+0x14
	ldr	r3, .L3098
	ldr	r0, .L3098+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	ldr	r1, .L3098+0x4
	ldrb	r2, [r1]
	mov	r1, #0x5c
	mul	r1, r1, r2
	add	r0, r0, r1
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r4]
	ldr	r1, .L3098+0x18
	ldr	r0, .L3098+0x1c
	str	r0, [r1]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L3098+0x20
	strb	r0, [r1]
	ldr	r2, .L3098+0x24
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	b	.L3093
.L3099:
	.align	2, 0
.L3098:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBitTable
	.word	gCurrMovePos
	.word	gChosenMovePos
	.word	gCalledMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_IgnoresAndUsesRandomMove
	.word	gBattlerTarget
	.word	gHitMarker
.L3070:
	sub	r0, r2, r6
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	Random
	add	r4, r7, #0
	and	r4, r4, r0
	cmp	r4, r6
	bge	.L3079	@cond_branch
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r0, r1, r0
	ldr	r0, [r0]
	and	r0, r0, r7
	cmp	r0, #0
	bne	.L3079	@cond_branch
	add	r0, r1, r5
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x48
	beq	.L3079	@cond_branch
	cmp	r0, #0xf
	beq	.L3079	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L3100
	ldrb	r3, [r0]
	add	r7, r0, #0
	cmp	r2, r3
	bge	.L3081	@cond_branch
	ldr	r0, [r5, #0x54]
	mov	r1, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3081	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x54
	mov	r5, #0x70
.L3082:
	add	r1, r1, #0x5c
	add	r2, r2, #0x1
	cmp	r2, r3
	bge	.L3081	@cond_branch
	ldr	r0, [r1]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L3082	@cond_branch
.L3081:
	ldrb	r7, [r7]
	cmp	r2, r7
	bne	.L3079	@cond_branch
	ldr	r1, .L3100+0x4
	ldr	r0, .L3100+0x8
	b	.L3091
.L3101:
	.align	2, 0
.L3100:
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	BattleScript_IgnoresAndFallsAsleep
.L3079:
	sub	r4, r4, r6
	cmp	r4, r6
	blt	.L3087	@cond_branch
.L3092:
	bl	Random
	ldr	r2, .L3102
	mov	r1, #0x3
	and	r1, r1, r0
	strb	r1, [r2, #0x5]
	ldr	r1, .L3102+0x4
	ldr	r0, .L3102+0x8
.L3091:
	str	r0, [r1]
	mov	r0, #0x1
	b	.L3089
.L3103:
	.align	2, 0
.L3102:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedLoafingAround
.L3087:
	ldr	r4, .L3104
	ldrb	r2, [r4]
	mov	r0, #0x28
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	add	r1, r2, #0
	mov	r3, #0x9
	bl	CalculateMoveDamage
	ldr	r1, .L3104+0x4
	str	r0, [r1]
	ldr	r1, .L3104+0x8
	ldrb	r0, [r4]
	strb	r0, [r1]
	ldr	r1, .L3104+0xc
	ldr	r0, .L3104+0x10
	str	r0, [r1]
	ldr	r2, .L3104+0x14
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
.L3093:
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x2
.L3089:
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3105:
	.align	2, 0
.L3104:
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_IgnoresAndHitsItself
	.word	gHitMarker
.Lfe75:
	.size	 IsMonDisobedient,.Lfe75-IsMonDisobedient
	.align	2, 0
	.globl	GetBattlerHoldEffect
	.type	 GetBattlerHoldEffect,function
	.thumb_func
GetBattlerHoldEffect:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r1, #0
	beq	.L3107	@cond_branch
	ldr	r0, .L3118
	lsl	r1, r3, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x80
	lsl	r0, r0, #0xa
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L3116	@cond_branch
	ldr	r0, .L3118+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3116	@cond_branch
	ldr	r1, .L3118+0x8
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x67
	bne	.L3107	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L3107	@cond_branch
.L3116:
	mov	r0, #0x0
	b	.L3115
.L3119:
	.align	2, 0
.L3118:
	.word	gStatuses3
	.word	gFieldStatuses
	.word	gBattleMons
.L3107:
	ldr	r0, .L3120
	strb	r3, [r0]
	ldr	r0, .L3120+0x4
	ldr	r0, [r0]
	ldr	r1, .L3120+0x8
	add	r0, r0, r1
	add	r1, r0, r3
	ldrb	r0, [r1]
	ldr	r2, .L3120+0xc
	cmp	r0, #0
	beq	.L3111	@cond_branch
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x30]
	cmp	r0, #0
	beq	.L3111	@cond_branch
	ldrb	r0, [r1]
	b	.L3117
.L3121:
	.align	2, 0
.L3120:
	.word	gPotentialItemEffectBattler
	.word	gBattleStruct
	.word	0x2c5
	.word	gBattleMons
.L3111:
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r0, r2
	ldrh	r0, [r1, #0x30]
	cmp	r0, #0xcd
	beq	.L3113	@cond_branch
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L3117
.L3113:
	ldr	r0, .L3122
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x7]
.L3117:
.L3115:
	pop	{r1}
	bx	r1
.L3123:
	.align	2, 0
.L3122:
	.word	gEnigmaBerries
.Lfe76:
	.size	 GetBattlerHoldEffect,.Lfe76-GetBattlerHoldEffect
	.align	2, 0
	.globl	GetBattlerHoldEffectParam
	.type	 GetBattlerHoldEffectParam,function
	.thumb_func
GetBattlerHoldEffectParam:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L3129
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x30]
	cmp	r0, #0xcd
	beq	.L3125	@cond_branch
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L3128
.L3130:
	.align	2, 0
.L3129:
	.word	gBattleMons
.L3125:
	ldr	r0, .L3131
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1a]
.L3128:
	pop	{r1}
	bx	r1
.L3132:
	.align	2, 0
.L3131:
	.word	gEnigmaBerries
.Lfe77:
	.size	 GetBattlerHoldEffectParam,.Lfe77-GetBattlerHoldEffectParam
	.align	2, 0
	.globl	IsMoveMakingContact
	.type	 IsMoveMakingContact,function
	.thumb_func
IsMoveMakingContact:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	add	r4, r3, #0
	ldr	r2, .L3141
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r2, #0xc
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3138	@cond_branch
	add	r0, r3, #0
	bl	GetBattlerAbility
	cmp	r0, #0xcb
	beq	.L3138	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x95
	beq	.L3138	@cond_branch
	mov	r0, #0x1
	b	.L3140
.L3142:
	.align	2, 0
.L3141:
	.word	gBattleMoves
.L3138:
	mov	r0, #0x0
.L3140:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe78:
	.size	 IsMoveMakingContact,.Lfe78-IsMoveMakingContact
	.align	2, 0
	.globl	IsBattlerGrounded
	.type	 IsBattlerGrounded,function
	.thumb_func
IsBattlerGrounded:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x59
	beq	.L3160	@cond_branch
	ldr	r0, .L3164
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3160	@cond_branch
	ldr	r0, .L3164+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3160	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3160	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3161	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3161	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x79
	beq	.L3161	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0x1a
	beq	.L3161	@cond_branch
	ldr	r1, .L3164+0x8
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L3161	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L3161	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L3160	@cond_branch
.L3161:
	mov	r0, #0x0
	b	.L3163
.L3165:
	.align	2, 0
.L3164:
	.word	gFieldStatuses
	.word	gStatuses3
	.word	gBattleMons
.L3160:
	mov	r0, #0x1
.L3163:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe79:
	.size	 IsBattlerGrounded,.Lfe79-IsBattlerGrounded
	.align	2, 0
	.globl	IsBattlerAlive
	.type	 IsBattlerAlive,function
	.thumb_func
IsBattlerAlive:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r2, #0
	ldr	r1, .L3174
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2a]
	cmp	r0, #0
	beq	.L3171	@cond_branch
	ldr	r0, .L3174+0x4
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L3171	@cond_branch
	ldr	r0, .L3174+0x8
	ldrb	r1, [r0]
	ldr	r2, .L3174+0xc
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3171	@cond_branch
	mov	r0, #0x1
	b	.L3173
.L3175:
	.align	2, 0
.L3174:
	.word	gBattleMons
	.word	gBattlersCount
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L3171:
	mov	r0, #0x0
.L3173:
	pop	{r1}
	bx	r1
.Lfe80:
	.size	 IsBattlerAlive,.Lfe80-IsBattlerAlive
	.align	2, 0
	.globl	GetBattleMonMoveSlot
	.type	 GetBattleMonMoveSlot,function
	.thumb_func
GetBattleMonMoveSlot:
	push	{lr}
	add	r3, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r2, #0x0
	ldrh	r0, [r3, #0xc]
	cmp	r0, r1
	beq	.L3178	@cond_branch
	add	r3, r3, #0xc
.L3179:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bhi	.L3178	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r3, r0
	ldrh	r0, [r0]
	cmp	r0, r1
	bne	.L3179	@cond_branch
.L3178:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.Lfe81:
	.size	 GetBattleMonMoveSlot,.Lfe81-GetBattleMonMoveSlot
	.align	2, 0
	.globl	GetBattlerWeight
	.type	 GetBattlerWeight,function
	.thumb_func
GetBattlerWeight:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L3198
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetPokedexHeightWeight
	lsl	r7, r0, #0x10
	lsr	r4, r7, #0x10
	add	r0, r5, #0
	bl	GetBattlerAbility
	add	r6, r0, #0
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r6, #0x86
	bne	.L3184	@cond_branch
	lsl	r4, r4, #0x1
	b	.L3185
.L3199:
	.align	2, 0
.L3198:
	.word	gBattleMons
.L3184:
	cmp	r6, #0x87
	bne	.L3185	@cond_branch
	lsr	r4, r7, #0x11
.L3185:
	cmp	r0, #0x73
	bne	.L3187	@cond_branch
	lsr	r4, r4, #0x1
.L3187:
	mov	r2, #0x0
	ldr	r3, .L3200
	lsl	r1, r5, #0x2
.L3188:
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1c]
	cmp	r2, r0
	bcs	.L3189	@cond_branch
	mov	r0, #0xfa
	lsl	r0, r0, #0x2
	cmp	r4, r0
	bls	.L3197	@cond_branch
	ldr	r0, .L3200+0x4
	add	r4, r4, r0
	add	r2, r2, #0x1
	b	.L3188
.L3201:
	.align	2, 0
.L3200:
	.word	gDisableStructs
	.word	-0x3e8
.L3197:
	mov	r4, #0x1
.L3189:
	cmp	r4, #0
	bne	.L3196	@cond_branch
	mov	r4, #0x1
.L3196:
	add	r0, r4, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe82:
	.size	 GetBattlerWeight,.Lfe82-GetBattlerWeight
	.align	2, 0
	.globl	CountBattlerStatIncreases
	.type	 CountBattlerStatIncreases,function
	.thumb_func
CountBattlerStatIncreases:
	push	{r4, r5, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0x0
	mov	r3, #0x0
	ldr	r1, .L3210
	mov	r2, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x18
	add	r2, r0, r1
.L3206:
	sub	r0, r3, #0x6
	cmp	r0, #0x1
	bhi	.L3207	@cond_branch
	cmp	r5, #0
	beq	.L3205	@cond_branch
.L3207:
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r0, #0x6
	ble	.L3205	@cond_branch
	sub	r1, r4, #0x6
	add	r4, r1, r0
.L3205:
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x7
	bls	.L3206	@cond_branch
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L3211:
	.align	2, 0
.L3210:
	.word	gBattleMons
.Lfe83:
	.size	 CountBattlerStatIncreases,.Lfe83-CountBattlerStatIncreases
	.align	2, 0
	.globl	GetMoveTargetCount
	.type	 GetMoveTargetCount,function
	.thumb_func
GetMoveTargetCount:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	ldr	r2, .L3226
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0x40
	bls	.LCB29034
	b	.L3222	@long jump
.LCB29034:
	lsl	r0, r0, #0x2
	ldr	r1, .L3226+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L3227:
	.align	2, 0
.L3226:
	.word	gBattleMoves
	.word	.L3223
	.align	2, 0
	.align	2, 0
.L3223:
	.word	.L3220
	.word	.L3220
	.word	.L3220
	.word	.L3222
	.word	.L3220
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3214
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3221
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3215
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3222
	.word	.L3216
.L3214:
	add	r0, r6, #0
	bl	IsBattlerAlive
	add	r4, r0, #0
	mov	r1, #0x2
	add	r0, r6, #0
	eor	r0, r0, r1
	bl	IsBattlerAlive
	b	.L3225
.L3215:
	add	r0, r6, #0
	bl	IsBattlerAlive
	add	r4, r0, #0
	mov	r5, #0x2
	add	r0, r6, #0
	eor	r0, r0, r5
	bl	IsBattlerAlive
	add	r6, r0, #0
	add	r0, r7, #0
	eor	r0, r0, r5
	bl	IsBattlerAlive
	add	r4, r4, r6
.L3225:
	add	r4, r4, r0
	add	r0, r4, #0
	b	.L3224
.L3216:
	mov	r0, #0x1
	b	.L3224
.L3220:
	add	r0, r6, #0
	bl	IsBattlerAlive
	b	.L3224
.L3221:
	add	r0, r7, #0
	bl	IsBattlerAlive
	b	.L3224
.L3222:
	mov	r0, #0x0
.L3224:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe84:
	.size	 GetMoveTargetCount,.Lfe84-GetMoveTargetCount
	.align	2, 0
	.type	 MulModifier,function
	.thumb_func
MulModifier:
	push	{lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldrh	r0, [r2]
	mul	r1, r1, r0
	mov	r3, #0x80
	lsl	r3, r3, #0x4
	add	r0, r1, r3
	cmp	r0, #0
	bge	.L3229	@cond_branch
	ldr	r3, .L3230
	add	r0, r1, r3
.L3229:
	asr	r0, r0, #0xc
	strh	r0, [r2]
	pop	{r0}
	bx	r0
.L3231:
	.align	2, 0
.L3230:
	.word	0x17ff
.Lfe85:
	.size	 MulModifier,.Lfe85-MulModifier
	.align	2, 0
	.type	 ApplyModifier,function
	.thumb_func
ApplyModifier:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mul	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	lsr	r0, r0, #0xc
	bx	lr
.Lfe86:
	.size	 ApplyModifier,.Lfe86-ApplyModifier
	.section .rodata
	.type	 sFlailHpScaleToPowerTable,object
sFlailHpScaleToPowerTable:
	.byte	0x1
	.byte	0xc8
	.byte	0x4
	.byte	0x96
	.byte	0x9
	.byte	0x64
	.byte	0x10
	.byte	0x50
	.byte	0x20
	.byte	0x28
	.byte	0x30
	.byte	0x14
	.size	 sFlailHpScaleToPowerTable,12
	.align	1, 0
	.type	 sWeightToDamageTable,object
sWeightToDamageTable:
	.short	0x64
	.short	0x14
	.short	0xfa
	.short	0x28
	.short	0x1f4
	.short	0x3c
	.short	0x3e8
	.short	0x50
	.short	0x7d0
	.short	0x64
	.short	0xffff
	.short	0xffff
	.size	 sWeightToDamageTable,24
	.type	 sSpeedDiffPowerTable,object
sSpeedDiffPowerTable:
	.byte	0x28
	.byte	0x3c
	.byte	0x50
	.byte	0x78
	.byte	0x96
	.size	 sSpeedDiffPowerTable,5
	.type	 sHeatCrushPowerTable,object
sHeatCrushPowerTable:
	.byte	0x28
	.byte	0x28
	.byte	0x3c
	.byte	0x50
	.byte	0x64
	.byte	0x78
	.size	 sHeatCrushPowerTable,6
	.type	 sTrumpCardPowerTable,object
sTrumpCardPowerTable:
	.byte	0xc8
	.byte	0x50
	.byte	0x3c
	.byte	0x32
	.byte	0x28
	.size	 sTrumpCardPowerTable,5
	.globl	gNaturalGiftTable
	.align	2, 0
	.type	 gNaturalGiftTable,object
gNaturalGiftTable:
	.space	4
	.byte	0xa
	.byte	0x50
	.space	2
	.byte	0xb
	.byte	0x50
	.space	2
	.byte	0xd
	.byte	0x50
	.space	2
	.byte	0xc
	.byte	0x50
	.space	2
	.byte	0xf
	.byte	0x50
	.space	2
	.byte	0x1
	.byte	0x50
	.space	2
	.byte	0x3
	.byte	0x50
	.space	2
	.byte	0x4
	.byte	0x50
	.space	2
	.byte	0x2
	.byte	0x50
	.space	2
	.byte	0xe
	.byte	0x50
	.space	2
	.byte	0x6
	.byte	0x50
	.space	2
	.byte	0x5
	.byte	0x50
	.space	2
	.byte	0x7
	.byte	0x50
	.space	2
	.byte	0x10
	.byte	0x50
	.space	2
	.byte	0x11
	.byte	0x50
	.space	2
	.byte	0x8
	.byte	0x50
	.space	2
	.byte	0xa
	.byte	0x5a
	.space	2
	.byte	0xb
	.byte	0x5a
	.space	2
	.byte	0xd
	.byte	0x5a
	.space	2
	.byte	0xc
	.byte	0x5a
	.space	2
	.byte	0xf
	.byte	0x5a
	.space	2
	.byte	0x1
	.byte	0x5a
	.space	2
	.byte	0x3
	.byte	0x5a
	.space	2
	.byte	0x4
	.byte	0x5a
	.space	2
	.byte	0x2
	.byte	0x5a
	.space	2
	.byte	0xe
	.byte	0x5a
	.space	2
	.byte	0x6
	.byte	0x5a
	.space	2
	.byte	0x5
	.byte	0x5a
	.space	2
	.byte	0x7
	.byte	0x5a
	.space	2
	.byte	0x10
	.byte	0x5a
	.space	2
	.byte	0x11
	.byte	0x5a
	.space	2
	.byte	0x8
	.byte	0x5a
	.space	2
	.byte	0xa
	.byte	0x64
	.space	2
	.byte	0xb
	.byte	0x64
	.space	2
	.byte	0xd
	.byte	0x64
	.space	2
	.byte	0xa
	.byte	0x50
	.space	2
	.byte	0xb
	.byte	0x50
	.space	2
	.byte	0xd
	.byte	0x50
	.space	2
	.byte	0xc
	.byte	0x50
	.space	2
	.byte	0xf
	.byte	0x50
	.space	2
	.byte	0x1
	.byte	0x50
	.space	2
	.byte	0x3
	.byte	0x50
	.space	2
	.byte	0x4
	.byte	0x50
	.space	2
	.byte	0x2
	.byte	0x50
	.space	2
	.byte	0xe
	.byte	0x50
	.space	2
	.byte	0x6
	.byte	0x50
	.space	2
	.byte	0x5
	.byte	0x50
	.space	2
	.byte	0x7
	.byte	0x50
	.space	2
	.byte	0x10
	.byte	0x50
	.space	2
	.byte	0x11
	.byte	0x50
	.space	2
	.byte	0x8
	.byte	0x50
	.space	2
	.byte	0x0
	.byte	0x50
	.space	2
	.byte	0x12
	.byte	0x50
	.space	2
	.byte	0xc
	.byte	0x64
	.space	2
	.byte	0xf
	.byte	0x64
	.space	2
	.byte	0x1
	.byte	0x64
	.space	2
	.byte	0x3
	.byte	0x64
	.space	2
	.byte	0x4
	.byte	0x64
	.space	2
	.byte	0x2
	.byte	0x64
	.space	2
	.byte	0xe
	.byte	0x64
	.space	2
	.byte	0x5
	.byte	0x64
	.space	2
	.byte	0x6
	.byte	0x64
	.space	2
	.byte	0x7
	.byte	0x64
	.space	2
	.byte	0x10
	.byte	0x64
	.space	2
	.byte	0x11
	.byte	0x64
	.space	2
	.byte	0x12
	.byte	0x64
	.space	2
	.byte	0x11
	.byte	0x64
	.space	2
	.size	 gNaturalGiftTable,272
.text
	.align	2, 0
	.type	 CalcMoveBasePower,function
	.thumb_func
CalcMoveBasePower:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	ip, r0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	ldr	r1, .L3328
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x2]
	ldrh	r0, [r0]
	sub	r0, r0, #0x27
	add	r2, r1, #0
	cmp	r0, #0xbf
	bls	.LCB29201
	bl	.L3234	@far jump
.LCB29201:
	lsl	r0, r0, #0x2
	ldr	r1, .L3328+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L3329:
	.align	2, 0
.L3328:
	.word	gBattleMoves
	.word	.L3321
	.align	2, 0
	.align	2, 0
.L3321:
	.word	.L3319
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3238
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3262
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3253
	.word	.L3234
	.word	.L3247
	.word	.L3234
	.word	.L3245
	.word	.L3261
	.word	.L3246
	.word	.L3234
	.word	.L3234
	.word	.L3260
	.word	.L3234
	.word	.L3270
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3263
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3276
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3264
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3237
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3292
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3268
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3234
	.word	.L3272
	.word	.L3273
	.word	.L3278
	.word	.L3279
	.word	.L3282
	.word	.L3285
	.word	.L3289
	.word	.L3301
	.word	.L3304
	.word	.L3306
	.word	.L3307
	.word	.L3309
	.word	.L3311
	.word	.L3315
	.word	.L3317
.L3237:
	ldr	r2, .L3330
	mov	r0, #0x5c
	mov	r1, r6
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r0, [r1, #0x2a]
	mul	r0, r0, r5
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	lsl	r0, r0, #0x10
	b	.L3324
.L3331:
	.align	2, 0
.L3330:
	.word	gBattleMons
.L3238:
	ldr	r2, .L3332
	mov	r0, #0x5c
	mov	r1, r6
	mul	r1, r1, r0
	add	r1, r1, r2
	mov	r2, #0x2a
	ldrsh	r0, [r1, r2]
	mov	r2, #0x2e
	ldrsh	r1, [r1, r2]
	mov	r2, #0x30
	bl	GetScaledHPFraction
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r3, #0x0
	ldr	r0, .L3332+0x4
	ldrb	r2, [r0]
	cmp	r1, r2
	bls	.L3240	@cond_branch
	add	r2, r0, #0
.L3241:
	add	r3, r3, #0x2
	cmp	r3, #0xb
	bhi	.L3240	@cond_branch
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r1, r0
	bhi	.L3241	@cond_branch
.L3240:
	ldr	r1, .L3332+0x4
	add	r0, r3, #0x1
	b	.L3325
.L3333:
	.align	2, 0
.L3332:
	.word	gBattleMons
	.word	sFlailHpScaleToPowerTable
.L3245:
	ldr	r1, .L3334
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r0, r0, r1
	add	r0, r0, #0x2d
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, #0x19
	bl	__divsi3
	lsl	r0, r0, #0x10
	b	.L3324
.L3335:
	.align	2, 0
.L3334:
	.word	gBattleMons
.L3246:
	ldr	r1, .L3336
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r0, r0, r1
	add	r0, r0, #0x2d
	ldrb	r0, [r0]
	mov	r1, #0xff
	sub	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, #0x19
	bl	__divsi3
	lsl	r0, r0, #0x10
	b	.L3324
.L3337:
	.align	2, 0
.L3336:
	.word	gBattleMons
.L3247:
	mov	r3, #0x1
	ldr	r1, .L3338
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x13]
	cmp	r3, r0
	bcc	.LCB29349
	b	.L3234	@long jump
.LCB29349:
	add	r1, r0, #0
.L3251:
	lsl	r0, r5, #0x11
	lsr	r5, r0, #0x10
	add	r3, r3, #0x1
	cmp	r3, r1
	bcc	.L3251	@cond_branch
	b	.L3234
.L3339:
	.align	2, 0
.L3338:
	.word	gDisableStructs
.L3253:
	mov	r3, #0x1
	ldr	r1, .L3340
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x14]
	lsl	r2, r0, #0x1c
	lsr	r1, r2, #0x1c
	mov	r0, #0x5
	sub	r0, r0, r1
	ldr	r4, .L3340+0x4
	cmp	r3, r0
	bcs	.L3255	@cond_branch
	add	r1, r2, #0
	mov	r2, #0x5
.L3257:
	lsl	r0, r5, #0x11
	lsr	r5, r0, #0x10
	add	r3, r3, #0x1
	lsr	r0, r1, #0x1c
	sub	r0, r2, r0
	cmp	r3, r0
	bcc	.L3257	@cond_branch
.L3255:
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r1, r4, #0
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x17
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB29425
	b	.L3234	@long jump
.LCB29425:
	b	.L3326
.L3341:
	.align	2, 0
.L3340:
	.word	gDisableStructs
	.word	gBattleMons
.L3260:
	ldr	r0, .L3342
	ldr	r0, [r0]
	mov	r1, #0x9e
	lsl	r1, r1, #0x2
.L3325:
	add	r0, r0, r1
	ldrb	r5, [r0]
	b	.L3234
.L3343:
	.align	2, 0
.L3342:
	.word	gBattleStruct
.L3261:
	ldr	r0, .L3344
	ldr	r0, [r0]
	ldr	r2, .L3344+0x4
	add	r0, r0, r2
	ldrb	r5, [r0]
	b	.L3234
.L3345:
	.align	2, 0
.L3344:
	.word	gBattleStruct
	.word	0x279
.L3262:
	ldr	r0, .L3346
	ldrh	r0, [r0, #0x12]
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	b	.L3324
.L3347:
	.align	2, 0
.L3346:
	.word	gBattleScripting
.L3263:
	ldr	r1, .L3348
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x9]
	mov	r0, #0x64
	mov	r5, r1
	mul	r5, r5, r0
	b	.L3234
.L3349:
	.align	2, 0
.L3348:
	.word	gDisableStructs
.L3264:
	ldr	r2, .L3350
	lsl	r1, r6, #0x4
	add	r0, r2, #0x4
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L3267	@cond_branch
	add	r0, r1, r2
	ldrb	r0, [r0, #0xc]
	cmp	r0, r7
	bne	.LCB29514
	b	.L3326	@long jump
.LCB29514:
.L3267:
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB29521
	b	.L3234	@long jump
.LCB29521:
	add	r0, r1, r2
	ldrb	r0, [r0, #0xd]
	cmp	r0, r7
	beq	.LCB29527
	b	.L3234	@long jump
.LCB29527:
	b	.L3326
.L3351:
	.align	2, 0
.L3350:
	.word	gProtectStructs
.L3268:
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.LCB29542
	b	.L3234	@long jump
.LCB29542:
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.LCB29547
	b	.L3234	@long jump
.LCB29547:
	ldr	r0, .L3352
	ldrh	r1, [r0]
	ldr	r0, .L3352+0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB29556
	b	.L3234	@long jump
.LCB29556:
	b	.L3326
.L3353:
	.align	2, 0
.L3352:
	.word	gBattleWeather
	.word	0x1ff
.L3270:
	ldr	r4, .L3354
	ldr	r0, .L3354+0x4
	ldrb	r0, [r0]
	bl	GetBattlerTurnOrderNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.LCB29581
	b	.L3234	@long jump
.LCB29581:
	b	.L3326
.L3355:
	.align	2, 0
.L3354:
	.word	gActionsByTurnOrder
	.word	gBattlerTarget
.L3272:
	ldr	r2, .L3356
	ldr	r1, .L3356+0x4
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r0, r0, r1
	ldrh	r0, [r0, #0x30]
	sub	r0, r0, #0x8f
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r5, [r0, #0x1]
	b	.L3234
.L3357:
	.align	2, 0
.L3356:
	.word	gNaturalGiftTable
	.word	gBattleMons
.L3273:
	ldr	r1, .L3358
	mov	r0, #0x5c
	mul	r0, r0, r7
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB29622
	b	.L3326	@long jump
.LCB29622:
	add	r0, r7, #0
	bl	GetBattlerAbility
	cmp	r0, #0xd5
	beq	.LCB29627
	b	.L3234	@long jump
.LCB29627:
	b	.L3326
.L3359:
	.align	2, 0
.L3358:
	.word	gBattleMons
.L3276:
	ldr	r1, .L3360
	mov	r0, #0x5c
	mul	r0, r0, r7
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB29647
	b	.L3234	@long jump
.LCB29647:
	b	.L3326
.L3361:
	.align	2, 0
.L3360:
	.word	gBattleMons
.L3278:
	ldr	r2, .L3362
	mov	r0, #0x5c
	mov	r1, r7
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x2a]
	lsl	r0, r2, #0x4
	sub	r0, r0, r2
	lsl	r0, r0, #0x3
	ldrh	r1, [r1, #0x2e]
	bl	__divsi3
	lsl	r0, r0, #0x10
	b	.L3324
.L3363:
	.align	2, 0
.L3362:
	.word	gBattleMons
.L3279:
	ldr	r1, .L3364
	mov	r0, #0x5c
	mul	r0, r0, r7
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB29690
	b	.L3326	@long jump
.LCB29690:
	add	r0, r7, #0
	bl	GetBattlerAbility
	cmp	r0, #0xd5
	beq	.LCB29695
	b	.L3234	@long jump
.LCB29695:
	b	.L3326
.L3365:
	.align	2, 0
.L3364:
	.word	gBattleMons
.L3282:
	ldr	r2, .L3366
	lsl	r1, r7, #0x4
	add	r0, r2, #0x4
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB29712
	b	.L3326	@long jump
.LCB29712:
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB29718
	b	.L3326	@long jump
.LCB29718:
	add	r0, r1, r2
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.LCB29724
	b	.L3234	@long jump
.LCB29724:
	b	.L3326
.L3367:
	.align	2, 0
.L3366:
	.word	gProtectStructs
.L3285:
	mov	r0, #0x5c
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r6, .L3368
	add	r0, r4, r6
	mov	r1, ip
	bl	GetBattleMonMoveSlot
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x4
	bne	.LCB29746
	b	.L3234	@long jump
.LCB29746:
	add	r0, r3, r4
	add	r1, r6, #0
	add	r1, r1, #0x25
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bls	.L3287	@cond_branch
	ldr	r0, .L3368+0x4
	ldrb	r5, [r0, #0x4]
	b	.L3234
.L3369:
	.align	2, 0
.L3368:
	.word	gBattleMons
	.word	sTrumpCardPowerTable
.L3287:
	ldr	r0, .L3370
	b	.L3327
.L3371:
	.align	2, 0
.L3370:
	.word	sTrumpCardPowerTable
.L3289:
	ldr	r1, .L3372
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r0, r0, r1
	ldrh	r0, [r0, #0x30]
	cmp	r0, #0
	bne	.LCB29787
	b	.L3326	@long jump
.LCB29787:
	ldr	r0, .L3372+0x4
	lsl	r1, r6, #0x1
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	blt	.LCB29799
	b	.L3234	@long jump
.LCB29799:
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetBattlerHoldEffect
	cmp	r0, #0x77
	beq	.LCB29805
	b	.L3234	@long jump
.LCB29805:
	b	.L3326
.L3373:
	.align	2, 0
.L3372:
	.word	gBattleMons
	.word	gSpecialStatuses
.L3292:
	add	r0, r7, #0
	bl	GetBattlerWeight
	add	r2, r0, #0
	mov	r3, #0x0
	ldr	r1, .L3374
	ldrh	r0, [r1]
	ldr	r4, .L3374+0x4
	cmp	r0, r4
	beq	.L3299	@cond_branch
	add	r5, r1, #0
	cmp	r0, r2
	bhi	.L3294	@cond_branch
.L3295:
	add	r1, r1, #0x4
	add	r3, r3, #0x2
	ldrh	r0, [r1]
	cmp	r0, r4
	beq	.L3299	@cond_branch
	cmp	r0, r2
	bls	.L3295	@cond_branch
.L3294:
	lsl	r0, r3, #0x1
	add	r0, r0, r5
	ldrh	r1, [r0]
	ldr	r0, .L3374+0x4
	cmp	r1, r0
	beq	.L3299	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r5, [r0]
	b	.L3234
.L3375:
	.align	2, 0
.L3374:
	.word	sWeightToDamageTable
	.word	0xffff
.L3299:
	mov	r5, #0x78
	b	.L3323
.L3301:
	add	r0, r6, #0
	str	r3, [sp]
	bl	GetBattlerWeight
	add	r4, r0, #0
	add	r0, r7, #0
	bl	GetBattlerWeight
	add	r1, r0, #0
	add	r0, r4, #0
	bl	__udivsi3
	add	r2, r0, #0
	ldr	r3, [sp]
	cmp	r2, #0x5
	bls	.L3302	@cond_branch
	ldr	r0, .L3376
	ldrb	r5, [r0, #0x5]
	b	.L3234
.L3377:
	.align	2, 0
.L3376:
	.word	sHeatCrushPowerTable
.L3302:
	ldr	r0, .L3378
.L3327:
	add	r0, r3, r0
	ldrb	r5, [r0]
	b	.L3234
.L3379:
	.align	2, 0
.L3378:
	.word	sHeatCrushPowerTable
.L3304:
	add	r0, r7, #0
	mov	r1, #0x0
	bl	CountBattlerStatIncreases
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x12
	mov	r0, #0xf0
	lsl	r0, r0, #0xe
	add	r1, r1, r0
	lsr	r5, r1, #0x10
	cmp	r5, #0xc8
	bhi	.LCB29934
	b	.L3234	@long jump
.LCB29934:
	mov	r5, #0xc8
	b	.L3323
.L3306:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	CountBattlerStatIncreases
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r5, r1
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	b	.L3234
.L3307:
	add	r0, r6, #0
	bl	GetBattlerTotalSpeedStat
	add	r4, r0, #0
	add	r0, r7, #0
	bl	GetBattlerTotalSpeedStat
	add	r1, r0, #0
	add	r0, r4, #0
	bl	__udivsi3
	add	r1, r0, #0
	cmp	r1, #0x4
	bls	.L3308	@cond_branch
	mov	r1, #0x4
.L3308:
	ldr	r0, .L3380
	add	r0, r1, r0
	ldrb	r5, [r0]
	b	.L3234
.L3381:
	.align	2, 0
.L3380:
	.word	sSpeedDiffPowerTable
.L3309:
	add	r0, r7, #0
	bl	GetBattlerTotalSpeedStat
	add	r4, r0, #0
	add	r0, r6, #0
	bl	GetBattlerTotalSpeedStat
	add	r1, r0, #0
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	bl	__udivsi3
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x96
	bls	.L3234	@cond_branch
	mov	r5, #0x96
	b	.L3323
.L3311:
	ldr	r1, .L3382
	ldrb	r0, [r1, #0x9]
	cmp	r0, #0
	beq	.L3234	@cond_branch
	cmp	r0, #0x4
	bls	.L3313	@cond_branch
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x10
	b	.L3324
.L3383:
	.align	2, 0
.L3382:
	.word	gFieldTimers
.L3313:
	ldrb	r0, [r1, #0x9]
	mul	r0, r0, r5
	lsl	r0, r0, #0x10
	b	.L3324
.L3315:
	add	r0, r6, #0
	bl	GetBattlerTurnOrderNum
	add	r4, r0, #0
	add	r0, r7, #0
	bl	GetBattlerTurnOrderNum
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bls	.L3234	@cond_branch
	ldr	r0, .L3384
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x19]
	cmp	r0, #0x2
	beq	.L3234	@cond_branch
	b	.L3326
.L3385:
	.align	2, 0
.L3384:
	.word	gDisableStructs
.L3317:
	ldr	r1, .L3386
	mov	r0, #0x2
	add	r3, r6, #0
	eor	r3, r3, r0
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0xf8
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L3234	@cond_branch
	ldr	r0, .L3386+0x4
	ldrb	r1, [r0]
	ldr	r2, .L3386+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3234	@cond_branch
	b	.L3326
.L3387:
	.align	2, 0
.L3386:
	.word	gChosenMoveByBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L3319:
	ldr	r0, .L3388
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, #0x27
	bne	.L3234	@cond_branch
	cmp	ip, r1
	beq	.L3234	@cond_branch
.L3326:
	lsl	r0, r5, #0x11
.L3324:
	lsr	r5, r0, #0x10
.L3234:
	cmp	r5, #0
	bne	.L3323	@cond_branch
	mov	r5, #0x1
.L3323:
	add	r0, r5, #0
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3389:
	.align	2, 0
.L3388:
	.word	gLastUsedMove
.Lfe87:
	.size	 CalcMoveBasePower,.Lfe87-CalcMoveBasePower
	.align	2, 0
	.type	 CalcMoveBasePowerAfterModifiers,function
	.thumb_func
CalcMoveBasePowerAfterModifiers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x4]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x8]
	add	r0, r6, #0
	add	r1, r5, #0
	bl	CalcMoveBasePower
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0xc]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, sp
	strh	r1, [r0]
	add	r0, r5, #0
	bl	GetBattlerAbility
	sub	r0, r0, #0x4f
	cmp	r0, #0x7f
	bls	.LCB30180
	b	.L3391	@long jump
.LCB30180:
	lsl	r0, r0, #0x2
	ldr	r1, .L3545
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L3546:
	.align	2, 0
.L3545:
	.word	.L3433
	.align	2, 0
	.align	2, 0
.L3433:
	.word	.L3407
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3400
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3431
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3392
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3398
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3402
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3396
	.word	.L3394
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3411
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3404
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3415
	.word	.L3427
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3417
	.word	.L3391
	.word	.L3391
	.word	.L3413
	.word	.L3423
	.word	.L3391
	.word	.L3429
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3419
	.word	.L3421
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3391
	.word	.L3425
.L3392:
	ldr	r0, [sp, #0xc]
	cmp	r0, #0x3c
	bls	.LCB30201
	b	.L3391	@long jump
.LCB30201:
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3538
.L3394:
	ldr	r1, .L3547
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB30217
	b	.L3391	@long jump
.LCB30217:
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB30224
	b	.L3391	@long jump
.LCB30224:
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3538
.L3548:
	.align	2, 0
.L3547:
	.word	gBattleMons
.L3396:
	ldr	r1, .L3549
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB30246
	b	.L3391	@long jump
.LCB30246:
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB30253
	b	.L3391	@long jump
.LCB30253:
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3538
.L3550:
	.align	2, 0
.L3549:
	.word	gBattleMons
.L3398:
	ldr	r1, .L3551
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	b	.L3539
.L3552:
	.align	2, 0
.L3551:
	.word	gBattleMoves
.L3400:
	ldr	r1, .L3553
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	b	.L3539
.L3554:
	.align	2, 0
.L3553:
	.word	gBattleMoves
.L3402:
	ldr	r1, .L3555
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB30316
	b	.L3391	@long jump
.LCB30316:
	ldr	r1, .L3555+0x4
	b	.L3538
.L3556:
	.align	2, 0
.L3555:
	.word	gBattleMoves
	.word	0x14cc
.L3404:
	ldr	r1, [sp, #0x8]
	cmp	r1, #0x8
	beq	.L3406	@cond_branch
	cmp	r1, #0x5
	beq	.L3406	@cond_branch
	cmp	r1, #0x4
	beq	.LCB30335
	b	.L3391	@long jump
.LCB30335:
.L3406:
	ldr	r1, .L3557
	b	.L3538
.L3558:
	.align	2, 0
.L3557:
	.word	0x14cc
.L3407:
	ldr	r4, .L3559
	mov	r2, #0x5c
	mov	r8, r2
	mov	r1, r8
	mul	r1, r1, r5
	add	r3, r1, r4
	mov	sl, r3
	ldrh	r0, [r3]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	add	r7, r4, #0
	add	r7, r7, #0x4c
	add	r1, r1, r7
	mov	r9, r1
	ldr	r1, [r1]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.LCB30371
	b	.L3391	@long jump
.LCB30371:
	ldr	r0, [sp, #0x4]
	mov	r1, r8
	mul	r1, r1, r0
	add	r4, r4, r1
	mov	r8, r4
	ldrh	r0, [r4]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	add	r7, r1, r7
	ldr	r1, [r7]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.LCB30390
	b	.L3391	@long jump
.LCB30390:
	mov	r1, sl
	ldrh	r0, [r1]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	mov	r2, r9
	ldr	r1, [r2]
	bl	GetGenderFromSpeciesAndPersonality
	add	r4, r0, #0
	mov	r3, r8
	ldrh	r0, [r3]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	ldr	r1, [r7]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L3409	@cond_branch
	mov	r1, #0xa0
	lsl	r1, r1, #0x5
	b	.L3538
.L3560:
	.align	2, 0
.L3559:
	.word	gBattleMons
.L3409:
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	b	.L3538
.L3411:
	add	r0, r5, #0
	bl	GetBattlerTurnOrderNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L3561
	ldrb	r1, [r1]
	sub	r1, r1, #0x1
	cmp	r0, r1
	beq	.LCB30448
	b	.L3391	@long jump
.LCB30448:
	cmp	r6, #0xf8
	bne	.LCB30450
	b	.L3391	@long jump
.LCB30450:
	ldr	r0, .L3561+0x4
	cmp	r6, r0
	bne	.LCB30455
	b	.L3391	@long jump
.LCB30455:
	ldr	r1, .L3561+0x8
	b	.L3538
.L3562:
	.align	2, 0
.L3561:
	.word	gBattlersCount
	.word	0x161
	.word	0x14cc
.L3413:
	ldr	r1, .L3563
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB30479
	b	.L3391	@long jump
.LCB30479:
	ldr	r1, .L3563+0x4
	b	.L3538
.L3564:
	.align	2, 0
.L3563:
	.word	gBattleMoves
	.word	0x14cc
.L3415:
	ldr	r1, .L3565
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3391	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3538
.L3566:
	.align	2, 0
.L3565:
	.word	gBattleMoves
.L3417:
	ldr	r1, .L3567
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3391	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3538
.L3568:
	.align	2, 0
.L3567:
	.word	gBattleMoves
.L3419:
	ldr	r4, [sp, #0x8]
	cmp	r4, #0xb
	bne	.L3391	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	b	.L3538
.L3421:
	ldr	r0, [sp, #0x8]
	cmp	r0, #0x8
	bne	.L3391	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3538
.L3423:
	ldr	r1, [sp, #0x8]
	cmp	r1, #0x12
	bne	.L3391	@cond_branch
	ldr	r0, .L3569
	ldr	r0, [r0]
	ldr	r2, .L3569+0x4
	add	r0, r0, r2
	b	.L3540
.L3570:
	.align	2, 0
.L3569:
	.word	gBattleStruct
	.word	0x287
.L3425:
	ldr	r3, [sp, #0x8]
	cmp	r3, #0xd
	bne	.L3391	@cond_branch
	ldr	r0, .L3571
	ldr	r0, [r0]
	ldr	r4, .L3571+0x4
	add	r0, r0, r4
	b	.L3540
.L3572:
	.align	2, 0
.L3571:
	.word	gBattleStruct
	.word	0x287
.L3427:
	ldr	r0, [sp, #0x8]
	cmp	r0, #0xf
	bne	.L3391	@cond_branch
	ldr	r0, .L3573
	ldr	r0, [r0]
	ldr	r1, .L3573+0x4
	add	r0, r0, r1
	b	.L3540
.L3574:
	.align	2, 0
.L3573:
	.word	gBattleStruct
	.word	0x287
.L3429:
	ldr	r2, [sp, #0x8]
	cmp	r2, #0x2
	bne	.L3391	@cond_branch
	ldr	r0, .L3575
	ldr	r0, [r0]
	ldr	r3, .L3575+0x4
	add	r0, r0, r3
.L3540:
	add	r0, r0, r5
	ldrb	r0, [r0]
.L3539:
	cmp	r0, #0
	beq	.L3391	@cond_branch
	ldr	r1, .L3575+0x8
.L3538:
	mov	r0, sp
	bl	MulModifier
	b	.L3391
.L3576:
	.align	2, 0
.L3575:
	.word	gBattleStruct
	.word	0x287
	.word	0x1333
.L3431:
	ldr	r4, [sp, #0x8]
	cmp	r4, #0
	bne	.L3391	@cond_branch
	ldr	r0, .L3577
	ldr	r0, [r0]
	ldr	r1, .L3577+0x4
	add	r0, r0, r1
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L3391	@cond_branch
	ldr	r1, .L3577+0x8
	mov	r0, sp
	bl	MulModifier
.L3391:
	mov	r0, #0xba
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.L3437	@cond_branch
	ldr	r2, [sp, #0x8]
	cmp	r2, #0x11
	beq	.L3436	@cond_branch
.L3437:
	mov	r0, #0xbb
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.L3435	@cond_branch
	ldr	r3, [sp, #0x8]
	cmp	r3, #0x12
	bne	.L3435	@cond_branch
.L3436:
	mov	r0, #0xbc
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.L3438	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	mov	r0, sp
	bl	MulModifier
	b	.L3435
.L3578:
	.align	2, 0
.L3577:
	.word	gBattleStruct
	.word	0x287
	.word	0x1333
.L3438:
	mov	r1, #0xa0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
.L3435:
	mov	r0, #0x2
	add	r4, r5, #0
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L3440	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0xd9
	bne	.L3440	@cond_branch
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3440	@cond_branch
	ldr	r1, .L3579
	mov	r0, sp
	bl	MulModifier
.L3440:
	ldr	r0, [sp, #0x4]
	bl	GetBattlerAbility
	add	r4, r0, #0
	cmp	r4, #0x57
	beq	.L3451	@cond_branch
	cmp	r4, #0x57
	bhi	.L3459	@cond_branch
	cmp	r4, #0x55
	beq	.L3448	@cond_branch
	b	.L3446
.L3580:
	.align	2, 0
.L3579:
	.word	0x14cc
.L3459:
	cmp	r4, #0xc7
	beq	.L3448	@cond_branch
	cmp	r4, #0xda
	beq	.L3453	@cond_branch
	b	.L3446
.L3448:
	ldr	r0, [sp, #0x8]
	cmp	r0, #0xa
	bne	.L3446	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	mov	r0, sp
	bl	MulModifier
	ldr	r1, [sp, #0x30]
	cmp	r1, #0
	beq	.L3446	@cond_branch
	lsl	r1, r4, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x4]
	bl	RecordAbilityBattle
	b	.L3446
.L3451:
	ldr	r2, [sp, #0x8]
	cmp	r2, #0xa
	bne	.L3446	@cond_branch
	mov	r1, #0xa0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
	b	.L3446
.L3453:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	IsMoveMakingContact
	cmp	r0, #0
	beq	.L3454	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	mov	r0, sp
	bl	MulModifier
	ldr	r3, [sp, #0x30]
	cmp	r3, #0
	beq	.L3454	@cond_branch
	ldr	r0, [sp, #0x4]
	mov	r1, #0xda
	bl	RecordAbilityBattle
.L3454:
	ldr	r4, [sp, #0x8]
	cmp	r4, #0xa
	bne	.L3446	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, sp
	bl	MulModifier
.L3446:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	add	r7, r0, #0
	add	r0, r5, #0
	bl	GetBattlerHoldEffectParam
	cmp	r0, #0x64
	bls	.L3460	@cond_branch
	mov	r0, #0x64
.L3460:
	ldr	r2, .L3581
	lsl	r1, r0, #0x1
	add	r1, r1, r2
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	add	r0, r3, #0
	ldrh	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	add	r0, r7, #0
	sub	r0, r0, #0x1f
	lsl	r4, r6, #0x2
	lsl	r1, r5, #0x2
	mov	r8, r1
	lsl	r3, r5, #0x4
	mov	sl, r3
	cmp	r0, #0x7b
	bls	.LCB30873
	b	.L3461	@long jump
.LCB30873:
	lsl	r0, r0, #0x2
	ldr	r1, .L3581+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L3582:
	.align	2, 0
.L3581:
	.word	sPercentToModifier
	.word	.L3506
	.align	2, 0
	.align	2, 0
.L3506:
	.word	.L3496
	.word	.L3461
	.word	.L3461
	.word	.L3475
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3496
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3496
	.word	.L3496
	.word	.L3496
	.word	.L3496
	.word	.L3496
	.word	.L3496
	.word	.L3496
	.word	.L3496
	.word	.L3496
	.word	.L3496
	.word	.L3496
	.word	.L3496
	.word	.L3496
	.word	.L3496
	.word	.L3496
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3462
	.word	.L3461
	.word	.L3464
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3469
	.word	.L3466
	.word	.L3472
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3477
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3496
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3461
	.word	.L3504
.L3462:
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsl	r4, r6, #0x2
	lsl	r1, r5, #0x2
	mov	r8, r1
	lsl	r2, r5, #0x4
	mov	sl, r2
	cmp	r0, #0
	beq	.LCB30907
	b	.L3461	@long jump
.LCB30907:
	b	.L3541
.L3464:
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r6, #0x2
	lsl	r3, r5, #0x2
	mov	r8, r3
	lsl	r1, r5, #0x4
	mov	sl, r1
	cmp	r0, #0x1
	beq	.LCB30925
	b	.L3461	@long jump
.LCB30925:
	b	.L3541
.L3466:
	ldr	r1, .L3583
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	mov	r1, #0xf2
	lsl	r1, r1, #0x16
	lsl	r4, r6, #0x2
	lsl	r2, r5, #0x2
	mov	r8, r2
	lsl	r3, r5, #0x4
	mov	sl, r3
	cmp	r0, r1
	beq	.LCB30951
	b	.L3461	@long jump
.LCB30951:
	ldr	r0, [sp, #0x8]
	cmp	r0, #0xb
	beq	.L3474	@cond_branch
	b	.L3544
.L3584:
	.align	2, 0
.L3583:
	.word	gBattleMons
.L3469:
	ldr	r1, .L3585
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	ldr	r1, .L3585+0x4
	lsl	r4, r6, #0x2
	lsl	r3, r5, #0x2
	mov	r8, r3
	lsl	r2, r5, #0x4
	mov	sl, r2
	cmp	r0, r1
	beq	.LCB30985
	b	.L3461	@long jump
.LCB30985:
	ldr	r3, [sp, #0x8]
	cmp	r3, #0x8
	beq	.L3471	@cond_branch
	cmp	r3, #0x10
	beq	.LCB30993
	b	.L3461	@long jump
.LCB30993:
.L3471:
	mov	r0, sp
	mov	r1, r9
	bl	MulModifier
	lsl	r4, r6, #0x2
	lsl	r0, r5, #0x2
	mov	r8, r0
	lsl	r1, r5, #0x4
	mov	sl, r1
	b	.L3461
.L3586:
	.align	2, 0
.L3585:
	.word	gBattleMons
	.word	0x3c600000
.L3472:
	ldr	r1, .L3587
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	ldr	r1, .L3587+0x4
	lsl	r4, r6, #0x2
	lsl	r2, r5, #0x2
	mov	r8, r2
	lsl	r3, r5, #0x4
	mov	sl, r3
	cmp	r0, r1
	beq	.LCB31031
	b	.L3461	@long jump
.LCB31031:
	ldr	r0, [sp, #0x8]
	cmp	r0, #0x7
	beq	.L3474	@cond_branch
.L3544:
	cmp	r0, #0x10
	beq	.LCB31040
	b	.L3461	@long jump
.LCB31040:
.L3474:
	mov	r0, sp
	mov	r1, r9
	bl	MulModifier
	lsl	r4, r6, #0x2
	lsl	r1, r5, #0x2
	mov	r8, r1
	lsl	r2, r5, #0x4
	mov	sl, r2
	b	.L3461
.L3588:
	.align	2, 0
.L3587:
	.word	gBattleMons
	.word	0x3ce00000
.L3475:
	ldr	r1, .L3589
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x5
	ldr	r3, .L3589+0x4
	add	r0, r0, r3
	lsr	r0, r0, #0x10
	lsl	r4, r6, #0x2
	lsl	r1, r5, #0x2
	mov	r8, r1
	lsl	r2, r5, #0x4
	mov	sl, r2
	cmp	r0, #0x1
	bhi	.L3461	@cond_branch
	ldr	r0, .L3589+0x8
	ldr	r0, [r0]
	ldr	r1, .L3589+0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3461	@cond_branch
	b	.L3541
.L3590:
	.align	2, 0
.L3589:
	.word	gBattleMons
	.word	-0x17c0000
	.word	gBattleTypeFlags
	.word	0x3f0100
.L3477:
	ldr	r0, .L3591
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r3, r1, r0
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x1e
	lsl	r4, r6, #0x2
	lsl	r1, r5, #0x2
	mov	r8, r1
	lsl	r1, r5, #0x4
	mov	sl, r1
	cmp	r0, #0
	bge	.L3461	@cond_branch
	ldr	r1, .L3591+0x4
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0, #0x30]
	cmp	r0, #0
	beq	.L3461	@cond_branch
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r1, r2, #0
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, sp
	bl	MulModifier
	b	.L3461
.L3592:
	.align	2, 0
.L3591:
	.word	gSpecialStatuses
	.word	gBattleMons
.L3496:
	mov	r2, #0x0
	lsl	r4, r6, #0x2
	lsl	r3, r5, #0x2
	mov	r8, r3
	lsl	r0, r5, #0x4
	mov	sl, r0
	b	.L3497
.L3499:
	add	r2, r2, #0x1
.L3497:
	cmp	r2, #0x11
	bhi	.L3461	@cond_branch
	ldr	r3, .L3593
	lsl	r1, r2, #0x1
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r7, r0
	bne	.L3499	@cond_branch
	add	r0, r3, #0x1
	add	r0, r1, r0
	ldr	r1, [sp, #0x8]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L3461	@cond_branch
.L3541:
	mov	r0, sp
	mov	r1, r9
	bl	MulModifier
	b	.L3461
.L3594:
	.align	2, 0
.L3593:
	.word	sHoldEffectToType
.L3504:
	ldr	r1, .L3595
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0, #0x30]
	bl	ItemId_GetSecondaryId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r6, #0x2
	lsl	r2, r5, #0x2
	mov	r8, r2
	lsl	r3, r5, #0x4
	mov	sl, r3
	ldr	r1, [sp, #0x8]
	cmp	r1, r0
	bne	.L3461	@cond_branch
	mov	r0, sp
	mov	r1, r9
	bl	MulModifier
.L3461:
	ldr	r1, .L3595+0x4
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, #0xbc
	bne	.LCB31241
	b	.L3524	@long jump
.LCB31241:
	cmp	r1, #0xbc
	bgt	.L3528	@cond_branch
	cmp	r1, #0x93
	bne	.LCB31245
	b	.L3522	@long jump
.LCB31245:
	cmp	r1, #0x93
	bgt	.L3529	@cond_branch
	cmp	r1, #0x7e
	beq	.L3522	@cond_branch
	b	.L3508
.L3596:
	.align	2, 0
.L3595:
	.word	gBattleMons
	.word	gBattleMoves
.L3529:
	cmp	r1, #0x97
	beq	.L3516	@cond_branch
	cmp	r1, #0xa9
	beq	.L3509	@cond_branch
	b	.L3508
.L3528:
	cmp	r1, #0xe9
	bne	.LCB31268
	b	.L3508	@long jump
.LCB31268:
	cmp	r1, #0xe9
	bgt	.L3530	@cond_branch
	cmp	r1, #0xe7
	beq	.L3511	@cond_branch
	cmp	r1, #0xe8
	beq	.L3513	@cond_branch
	b	.L3508
.L3530:
	cmp	r1, #0xea
	beq	.L3522	@cond_branch
	mov	r0, #0xa5
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L3518	@cond_branch
	b	.L3508
.L3509:
	ldr	r1, .L3597
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0xd8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB31298
	b	.L3508	@long jump
.LCB31298:
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	b	.L3542
.L3598:
	.align	2, 0
.L3597:
	.word	gBattleMons
.L3511:
	ldr	r1, .L3599
	mov	r0, #0x5c
	ldr	r2, [sp, #0x4]
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2e]
	ldrh	r0, [r0, #0x2a]
	lsr	r1, r1, #0x1
	cmp	r0, r1
	bhi	.L3508	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	b	.L3542
.L3600:
	.align	2, 0
.L3599:
	.word	gBattleMons
.L3513:
	ldr	r1, .L3601
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3508	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	b	.L3542
.L3602:
	.align	2, 0
.L3601:
	.word	gBattleMons
.L3516:
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3508	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3508	@cond_branch
	ldr	r0, .L3603
	ldrh	r1, [r0]
	ldr	r0, .L3603+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3508	@cond_branch
	b	.L3543
.L3604:
	.align	2, 0
.L3603:
	.word	gBattleWeather
	.word	0x19f
.L3518:
	ldr	r0, .L3605
	ldr	r0, [r0]
	mov	r3, #0xb0
	lsl	r3, r3, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	ldr	r0, .L3605+0x4
	add	r0, r0, r8
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L3508	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	b	.L3542
.L3606:
	.align	2, 0
.L3605:
	.word	gBattleStruct
	.word	gBitTable
.L3522:
	ldr	r0, .L3607
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3508	@cond_branch
	ldr	r1, .L3607+0x4
	ldr	r4, [sp, #0x4]
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L3607+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3508	@cond_branch
.L3543:
	mov	r1, #0x80
	lsl	r1, r1, #0x4
.L3542:
	mov	r0, sp
	bl	MulModifier
	b	.L3508
.L3608:
	.align	2, 0
.L3607:
	.word	gFieldStatuses
	.word	gStatuses3
	.word	0x10400c0
.L3524:
	ldr	r1, .L3609
	mov	r0, #0x5c
	ldr	r2, [sp, #0x4]
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x30]
	cmp	r0, #0
	beq	.L3508	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerAbility
	cmp	r0, #0x3c
	beq	.L3508	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
.L3508:
	ldr	r0, .L3609+0x4
	add	r0, r0, sl
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	bge	.L3531	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
.L3531:
	ldr	r0, .L3609+0x8
	add	r0, r0, r8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3532	@cond_branch
	ldr	r3, [sp, #0x8]
	cmp	r3, #0xd
	bne	.L3532	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, sp
	bl	MulModifier
.L3532:
	ldr	r0, .L3609+0x8
	mov	r1, r8
	add	r4, r1, r0
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3533	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
.L3533:
	ldr	r0, .L3609+0xc
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3534	@cond_branch
	ldr	r2, [sp, #0x8]
	cmp	r2, #0xc
	bne	.L3534	@cond_branch
	add	r0, r5, #0
	bl	IsBattlerGrounded
	cmp	r0, #0
	beq	.L3534	@cond_branch
	ldr	r0, [r4]
	ldr	r1, .L3609+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3534	@cond_branch
	ldr	r1, .L3609+0x14
	mov	r0, sp
	bl	MulModifier
.L3534:
	ldr	r0, .L3609+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3535	@cond_branch
	ldr	r3, [sp, #0x8]
	cmp	r3, #0x10
	bne	.L3535	@cond_branch
	ldr	r0, [sp, #0x4]
	bl	IsBattlerGrounded
	cmp	r0, #0
	beq	.L3535	@cond_branch
	ldr	r1, .L3609+0x8
	ldr	r4, [sp, #0x4]
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L3609+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3535	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	mov	r0, sp
	bl	MulModifier
.L3535:
	ldr	r0, .L3609+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3536	@cond_branch
	ldr	r0, [sp, #0x8]
	cmp	r0, #0xd
	bne	.L3536	@cond_branch
	add	r0, r5, #0
	bl	IsBattlerGrounded
	cmp	r0, #0
	beq	.L3536	@cond_branch
	ldr	r0, .L3609+0x8
	add	r0, r0, r8
	ldr	r0, [r0]
	ldr	r1, .L3609+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3536	@cond_branch
	ldr	r1, .L3609+0x14
	mov	r0, sp
	bl	MulModifier
.L3536:
	ldr	r0, .L3609+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3537	@cond_branch
	ldr	r1, [sp, #0x8]
	cmp	r1, #0xe
	bne	.L3537	@cond_branch
	add	r0, r5, #0
	bl	IsBattlerGrounded
	cmp	r0, #0
	beq	.L3537	@cond_branch
	ldr	r0, .L3609+0x8
	add	r0, r0, r8
	ldr	r0, [r0]
	ldr	r1, .L3609+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3537	@cond_branch
	ldr	r1, .L3609+0x14
	mov	r0, sp
	bl	MulModifier
.L3537:
	mov	r0, sp
	ldrh	r0, [r0]
	ldr	r1, [sp, #0xc]
	bl	ApplyModifier
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3610:
	.align	2, 0
.L3609:
	.word	gBattleMons
	.word	gProtectStructs
	.word	gStatuses3
	.word	gFieldStatuses
	.word	0x10400c0
	.word	0x14cc
.Lfe88:
	.size	 CalcMoveBasePowerAfterModifiers,.Lfe88-CalcMoveBasePowerAfterModifiers
	.align	2, 0
	.type	 CalcAttackStat,function
	.thumb_func
CalcAttackStat:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	ldr	r1, .L3692
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0xeb
	bne	.L3612	@cond_branch
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3613	@cond_branch
	ldr	r1, .L3692+0x4
	mov	r0, #0x5c
	mul	r0, r0, r7
	b	.L3687
.L3693:
	.align	2, 0
.L3692:
	.word	gBattleMoves
	.word	gBattleMons
.L3613:
	ldr	r1, .L3694
	mov	r0, #0x5c
	mul	r0, r0, r7
	b	.L3688
.L3695:
	.align	2, 0
.L3694:
	.word	gBattleMons
.L3612:
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3616	@cond_branch
	ldr	r1, .L3696
	mov	r0, #0x5c
	mul	r0, r0, r5
.L3687:
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2]
	mov	r9, r1
	ldrb	r4, [r0, #0x19]
	b	.L3615
.L3697:
	.align	2, 0
.L3696:
	.word	gBattleMons
.L3616:
	ldr	r1, .L3698
	mov	r0, #0x5c
	mul	r0, r0, r5
.L3688:
	add	r0, r0, r1
	ldrh	r3, [r0, #0x8]
	mov	r9, r3
	ldrb	r4, [r0, #0x1c]
.L3615:
	ldr	r0, [sp, #0x20]
	cmp	r0, #0
	beq	.L3618	@cond_branch
	cmp	r4, #0x5
	bhi	.L3618	@cond_branch
	mov	r4, #0x6
.L3618:
	add	r0, r7, #0
	bl	GetBattlerAbility
	cmp	r0, #0x6d
	bne	.L3619	@cond_branch
	mov	r4, #0x6
.L3619:
	ldr	r1, .L3698+0x4
	lsl	r2, r4, #0x1
	add	r0, r2, r1
	ldrb	r0, [r0]
	mov	r3, r9
	mul	r3, r3, r0
	mov	r9, r3
	add	r1, r1, #0x1
	add	r2, r2, r1
	ldrb	r1, [r2]
	mov	r0, r9
	bl	__udivsi3
	mov	r9, r0
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, sp
	strh	r1, [r0]
	add	r0, r5, #0
	bl	GetBattlerAbility
	cmp	r0, #0x42
	bne	.LCB31800
	b	.L3636	@long jump
.LCB31800:
	cmp	r0, #0x42
	bhi	.L3654	@cond_branch
	cmp	r0, #0x3a
	bhi	.L3655	@cond_branch
	cmp	r0, #0x39
	bcc	.LCB31806
	b	.L3641	@long jump
.LCB31806:
	cmp	r0, #0x25
	beq	.L3622	@cond_branch
	cmp	r0, #0x25
	bhi	.L3656	@cond_branch
	cmp	r0, #0x12
	beq	.L3630	@cond_branch
	b	.L3620
.L3699:
	.align	2, 0
.L3698:
	.word	gBattleMons
	.word	gStatStageRatios
.L3656:
	cmp	r0, #0x37
	bne	.LCB31824
	b	.L3646	@long jump
.LCB31824:
	b	.L3620
.L3655:
	cmp	r0, #0x3e
	bne	.LCB31829
	b	.L3650	@long jump
.LCB31829:
	cmp	r0, #0x41
	bne	.LCB31831
	b	.L3638	@long jump
.LCB31831:
	b	.L3620
.L3654:
	cmp	r0, #0x5e
	beq	.L3626	@cond_branch
	cmp	r0, #0x5e
	bhi	.L3657	@cond_branch
	cmp	r0, #0x44
	beq	.L3632	@cond_branch
	cmp	r0, #0x44
	bcs	.LCB31842
	b	.L3634	@long jump
.LCB31842:
	cmp	r0, #0x4a
	beq	.L3622	@cond_branch
	b	.L3620
.L3657:
	cmp	r0, #0x7a
	bne	.LCB31849
	b	.L3644	@long jump
.LCB31849:
	cmp	r0, #0x7a
	bhi	.L3658	@cond_branch
	cmp	r0, #0x70
	beq	.L3624	@cond_branch
	b	.L3620
.L3658:
	cmp	r0, #0x81
	beq	.L3628	@cond_branch
	cmp	r0, #0xc6
	bne	.LCB31860
	b	.L3648	@long jump
.LCB31860:
	b	.L3620
.L3622:
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB31872
	b	.L3620	@long jump
.LCB31872:
	b	.L3689
.L3624:
	ldr	r0, .L3700
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1d]
	cmp	r0, #0
	bne	.LCB31886
	b	.L3620	@long jump
.LCB31886:
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	b	.L3690
.L3701:
	.align	2, 0
.L3700:
	.word	gDisableStructs
.L3626:
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB31905
	b	.L3620	@long jump
.LCB31905:
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.LCB31910
	b	.L3620	@long jump
.LCB31910:
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	beq	.LCB31915
	b	.L3620	@long jump
.LCB31915:
	ldr	r0, .L3702
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB31923
	b	.L3620	@long jump
.LCB31923:
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3690
.L3703:
	.align	2, 0
.L3702:
	.word	gBattleWeather
.L3628:
	ldr	r2, .L3704
	mov	r0, #0x5c
	mov	r1, r5
	mul	r1, r1, r0
	add	r1, r1, r2
	mul	r0, r0, r7
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	ldrh	r1, [r1, #0x2a]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB31950
	b	.L3620	@long jump
.LCB31950:
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	b	.L3690
.L3705:
	.align	2, 0
.L3704:
	.word	gBattleMons
.L3630:
	mov	r0, r8
	cmp	r0, #0xa
	beq	.LCB31965
	b	.L3620	@long jump
.LCB31965:
	ldr	r0, .L3706
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB31975
	b	.L3620	@long jump
.LCB31975:
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3690
.L3707:
	.align	2, 0
.L3706:
	.word	gBattleResources
.L3632:
	mov	r1, r8
	cmp	r1, #0x6
	beq	.LCB31990
	b	.L3620	@long jump
.LCB31990:
	ldr	r1, .L3708
	mov	r0, #0x5c
	mov	r4, r5
	mul	r4, r4, r0
	add	r4, r4, r1
	ldrh	r0, [r4, #0x2e]
	mov	r1, #0x3
	bl	__udivsi3
	ldrh	r1, [r4, #0x2a]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bls	.LCB32006
	b	.L3620	@long jump
.LCB32006:
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3690
.L3709:
	.align	2, 0
.L3708:
	.word	gBattleMons
.L3634:
	mov	r3, r8
	cmp	r3, #0xb
	beq	.LCB32021
	b	.L3620	@long jump
.LCB32021:
	ldr	r1, .L3710
	mov	r0, #0x5c
	mov	r4, r5
	mul	r4, r4, r0
	add	r4, r4, r1
	ldrh	r0, [r4, #0x2e]
	mov	r1, #0x3
	bl	__udivsi3
	ldrh	r1, [r4, #0x2a]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bls	.LCB32037
	b	.L3620	@long jump
.LCB32037:
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3690
.L3711:
	.align	2, 0
.L3710:
	.word	gBattleMons
.L3636:
	mov	r0, r8
	cmp	r0, #0xa
	beq	.LCB32052
	b	.L3620	@long jump
.LCB32052:
	ldr	r1, .L3712
	mov	r0, #0x5c
	mov	r4, r5
	mul	r4, r4, r0
	add	r4, r4, r1
	ldrh	r0, [r4, #0x2e]
	mov	r1, #0x3
	bl	__udivsi3
	ldrh	r1, [r4, #0x2a]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bls	.LCB32068
	b	.L3620	@long jump
.LCB32068:
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3690
.L3713:
	.align	2, 0
.L3712:
	.word	gBattleMons
.L3638:
	mov	r1, r8
	cmp	r1, #0xc
	bne	.L3620	@cond_branch
	ldr	r1, .L3714
	mov	r0, #0x5c
	mov	r4, r5
	mul	r4, r4, r0
	add	r4, r4, r1
	ldrh	r0, [r4, #0x2e]
	mov	r1, #0x3
	bl	__udivsi3
	ldrh	r1, [r4, #0x2a]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bhi	.L3620	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3690
.L3715:
	.align	2, 0
.L3714:
	.word	gBattleMons
.L3641:
	mov	r0, #0x2
	add	r4, r5, #0
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L3620	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	sub	r0, r0, #0x39
	cmp	r0, #0x1
	bhi	.L3620	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3690
.L3644:
	ldr	r1, .L3716
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	ldr	r1, .L3716+0x4
	cmp	r0, r1
	bne	.L3620	@cond_branch
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3620	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3620	@cond_branch
	ldr	r0, .L3716+0x8
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3620	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3690
.L3717:
	.align	2, 0
.L3716:
	.word	gBattleMons
	.word	0x34a00000
	.word	gBattleWeather
.L3646:
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3620	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	b	.L3690
.L3648:
	ldr	r0, .L3718
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x19]
	cmp	r0, #0x2
	bne	.L3620	@cond_branch
.L3689:
	mov	r1, #0x80
	lsl	r1, r1, #0x6
.L3690:
	mov	r0, sp
	bl	MulModifier
	b	.L3620
.L3719:
	.align	2, 0
.L3718:
	.word	gDisableStructs
.L3650:
	ldr	r1, .L3720
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L3620	@cond_branch
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3620	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
.L3620:
	add	r0, r7, #0
	bl	GetBattlerAbility
	cmp	r0, #0x2f
	bne	.L3659	@cond_branch
	mov	r3, r8
	cmp	r3, #0xa
	beq	.L3662	@cond_branch
	cmp	r3, #0xf
	bne	.L3659	@cond_branch
.L3662:
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	mov	r0, sp
	bl	MulModifier
	ldr	r0, [sp, #0x24]
	cmp	r0, #0
	beq	.L3659	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x2f
	bl	RecordAbilityBattle
.L3659:
	mov	r0, #0x2
	add	r4, r5, #0
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L3666	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0x7a
	bne	.L3666	@cond_branch
	ldr	r1, .L3720
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	ldr	r1, .L3720+0x4
	cmp	r0, r1
	bne	.L3666	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
.L3666:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	sub	r0, r0, #0x1d
	cmp	r0, #0x27
	bls	.LCB32319
	b	.L3672	@long jump
.LCB32319:
	lsl	r0, r0, #0x2
	ldr	r1, .L3720+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L3721:
	.align	2, 0
.L3720:
	.word	gBattleMons
	.word	0x34a00000
	.word	.L3683
	.align	2, 0
	.align	2, 0
.L3683:
	.word	.L3679
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3675
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3677
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3672
	.word	.L3673
	.word	.L3672
	.word	.L3672
	.word	.L3681
.L3673:
	ldr	r1, .L3722
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x5
	ldr	r1, .L3722+0x4
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L3672	@cond_branch
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3672	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	b	.L3691
.L3723:
	.align	2, 0
.L3722:
	.word	gBattleMons
	.word	-0x680000
.L3675:
	ldr	r1, .L3724
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	mov	r1, #0xb7
	lsl	r1, r1, #0x16
	cmp	r0, r1
	bne	.L3672	@cond_branch
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3672	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	b	.L3691
.L3725:
	.align	2, 0
.L3724:
	.word	gBattleMons
.L3677:
	ldr	r1, .L3726
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	cmp	r0, #0x19
	bne	.L3672	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	b	.L3691
.L3727:
	.align	2, 0
.L3726:
	.word	gBattleMons
.L3679:
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3672	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
.L3691:
	mov	r0, sp
	bl	MulModifier
	b	.L3672
.L3681:
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3672	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
.L3672:
	ldr	r0, .L3728
	add	r1, r5, #0
	bl	ShouldGetStatBadgeBoost
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3685	@cond_branch
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3685	@cond_branch
	ldr	r1, .L3728+0x4
	mov	r0, sp
	bl	MulModifier
.L3685:
	ldr	r0, .L3728+0x8
	add	r1, r5, #0
	bl	ShouldGetStatBadgeBoost
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3686	@cond_branch
	add	r0, r6, #0
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3686	@cond_branch
	ldr	r1, .L3728+0x4
	mov	r0, sp
	bl	MulModifier
.L3686:
	mov	r0, sp
	ldrh	r0, [r0]
	mov	r1, r9
	bl	ApplyModifier
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3729:
	.align	2, 0
.L3728:
	.word	0x867
	.word	0x1199
	.word	0x86d
.Lfe89:
	.size	 CalcAttackStat,.Lfe89-CalcAttackStat
	.align	2, 0
	.type	 CanEvolve,function
	.thumb_func
CanEvolve:
	push	{r4, lr}
	mov	r3, #0x0
	ldr	r2, .L3738
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x4
	ldr	r4, .L3738+0x4
	add	r1, r1, r2
.L3734:
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L3733	@cond_branch
	cmp	r0, r4
	beq	.L3733	@cond_branch
	mov	r0, #0x1
	b	.L3737
.L3739:
	.align	2, 0
.L3738:
	.word	gEvolutionTable
	.word	0xffff
.L3733:
	add	r1, r1, #0x8
	add	r3, r3, #0x1
	cmp	r3, #0x9
	bls	.L3734	@cond_branch
	mov	r0, #0x0
.L3737:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe90:
	.size	 CanEvolve,.Lfe90-CanEvolve
	.align	2, 0
	.type	 CalcDefenseStat,function
	.thumb_func
CalcDefenseStat:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	ldr	r0, .L3787
	ldr	r0, [r0]
	mov	r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3741	@cond_branch
	ldr	r1, .L3787+0x4
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r6, [r0, #0xa]
	ldrh	r4, [r0, #0x4]
	b	.L3742
.L3788:
	.align	2, 0
.L3787:
	.word	gFieldStatuses
	.word	gBattleMons
.L3741:
	ldr	r1, .L3789
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r6, [r0, #0x4]
	ldrh	r4, [r0, #0xa]
.L3742:
	ldr	r2, .L3789+0x4
	mov	r0, sl
	lsl	r1, r0, #0x2
	add	r0, r1, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	mov	r8, r1
	cmp	r0, #0xec
	beq	.L3744	@cond_branch
	mov	r0, sl
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3743	@cond_branch
.L3744:
	mov	r9, r6
	ldr	r1, .L3789
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrb	r4, [r0, #0x1a]
	mov	r7, #0x1
	b	.L3745
.L3790:
	.align	2, 0
.L3789:
	.word	gBattleMons
	.word	gBattleMoves
.L3743:
	mov	r9, r4
	ldr	r1, .L3791
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrb	r4, [r0, #0x1d]
	mov	r7, #0x0
.L3745:
	ldr	r0, [sp, #0x28]
	cmp	r0, #0
	beq	.L3746	@cond_branch
	cmp	r4, #0x6
	bls	.L3746	@cond_branch
	mov	r4, #0x6
.L3746:
	ldr	r0, [sp, #0x4]
	bl	GetBattlerAbility
	cmp	r0, #0x6d
	bne	.L3747	@cond_branch
	mov	r4, #0x6
.L3747:
	ldr	r0, .L3791+0x4
	mov	r1, r8
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r6, #0x80
	lsl	r6, r6, #0x5
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L3748	@cond_branch
	mov	r4, #0x6
.L3748:
	ldr	r1, .L3791+0x8
	lsl	r2, r4, #0x1
	add	r0, r2, r1
	ldrb	r0, [r0]
	mov	r3, r9
	mul	r3, r3, r0
	mov	r9, r3
	add	r1, r1, #0x1
	add	r2, r2, r1
	ldrb	r1, [r2]
	mov	r0, r9
	bl	__udivsi3
	mov	r9, r0
	mov	r0, sp
	strh	r6, [r0]
	add	r0, r5, #0
	bl	GetBattlerAbility
	cmp	r0, #0x7a
	beq	.L3759	@cond_branch
	cmp	r0, #0x7a
	bhi	.L3763	@cond_branch
	cmp	r0, #0x3f
	beq	.L3750	@cond_branch
	b	.L3749
.L3792:
	.align	2, 0
.L3791:
	.word	gBattleMons
	.word	gBattleMoves
	.word	gStatStageRatios
.L3763:
	cmp	r0, #0xa9
	beq	.L3753	@cond_branch
	cmp	r0, #0xb3
	beq	.L3756	@cond_branch
	b	.L3749
.L3750:
	ldr	r1, .L3793
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L3749	@cond_branch
	cmp	r7, #0
	beq	.L3749	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
	ldr	r0, [sp, #0x2c]
	cmp	r0, #0
	beq	.L3749	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3f
	bl	RecordAbilityBattle
	b	.L3749
.L3794:
	.align	2, 0
.L3793:
	.word	gBattleMons
.L3753:
	cmp	r7, #0
	beq	.L3749	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, sp
	bl	MulModifier
	ldr	r3, [sp, #0x2c]
	cmp	r3, #0
	beq	.L3749	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xa9
	bl	RecordAbilityBattle
	b	.L3749
.L3756:
	ldr	r0, .L3795
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3749	@cond_branch
	cmp	r7, #0
	beq	.L3749	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
	ldr	r0, [sp, #0x2c]
	cmp	r0, #0
	beq	.L3749	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xb3
	bl	RecordAbilityBattle
	b	.L3749
.L3796:
	.align	2, 0
.L3795:
	.word	gFieldStatuses
.L3759:
	ldr	r1, .L3797
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	ldr	r1, .L3797+0x4
	cmp	r0, r1
	bne	.L3749	@cond_branch
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3749	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3749	@cond_branch
	ldr	r0, .L3797+0x8
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3749	@cond_branch
	cmp	r7, #0
	bne	.L3749	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
.L3749:
	mov	r0, #0x2
	add	r4, r5, #0
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L3764	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0x7a
	bne	.L3764	@cond_branch
	ldr	r1, .L3797
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	ldr	r1, .L3797+0x4
	cmp	r0, r1
	bne	.L3764	@cond_branch
	cmp	r7, #0
	bne	.L3764	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
.L3764:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x74
	beq	.L3775	@cond_branch
	cmp	r0, #0x74
	bhi	.L3781	@cond_branch
	cmp	r0, #0x24
	beq	.L3771	@cond_branch
	cmp	r0, #0x40
	beq	.L3773	@cond_branch
	b	.L3770
.L3798:
	.align	2, 0
.L3797:
	.word	gBattleMons
	.word	0x34a00000
	.word	gBattleWeather
.L3781:
	cmp	r0, #0x75
	beq	.L3777	@cond_branch
	b	.L3770
.L3771:
	ldr	r1, .L3799
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	mov	r1, #0xb7
	lsl	r1, r1, #0x16
	cmp	r0, r1
	bne	.L3770	@cond_branch
	cmp	r7, #0
	bne	.L3770	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	b	.L3786
.L3800:
	.align	2, 0
.L3799:
	.word	gBattleMons
.L3773:
	ldr	r2, .L3801
	mov	r0, #0x5c
	mov	r1, r5
	mul	r1, r1, r0
	add	r0, r1, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	cmp	r0, #0x84
	bne	.L3770	@cond_branch
	cmp	r7, #0
	beq	.L3770	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x54
	add	r0, r1, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3770	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	b	.L3786
.L3802:
	.align	2, 0
.L3801:
	.word	gBattleMons
.L3775:
	ldr	r1, .L3803
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x15
	bl	CanEvolve
	cmp	r0, #0
	beq	.L3770	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
.L3786:
	mov	r0, sp
	bl	MulModifier
	b	.L3770
.L3804:
	.align	2, 0
.L3803:
	.word	gBattleMons
.L3777:
	cmp	r7, #0
	bne	.L3770	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
.L3770:
	ldr	r1, .L3805
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x5
	beq	.L3783	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, #0x5
	beq	.L3783	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bne	.L3782	@cond_branch
.L3783:
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3782	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3782	@cond_branch
	ldr	r0, .L3805+0x4
	ldrh	r1, [r0]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3782	@cond_branch
	cmp	r7, #0
	bne	.L3782	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
.L3782:
	ldr	r0, .L3805+0x8
	add	r1, r5, #0
	bl	ShouldGetStatBadgeBoost
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3784	@cond_branch
	mov	r0, sl
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3784	@cond_branch
	ldr	r1, .L3805+0xc
	mov	r0, sp
	bl	MulModifier
.L3784:
	ldr	r0, .L3805+0x10
	add	r1, r5, #0
	bl	ShouldGetStatBadgeBoost
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3785	@cond_branch
	mov	r0, sl
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3785	@cond_branch
	ldr	r1, .L3805+0xc
	mov	r0, sp
	bl	MulModifier
.L3785:
	mov	r0, sp
	ldrh	r0, [r0]
	mov	r1, r9
	bl	ApplyModifier
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3806:
	.align	2, 0
.L3805:
	.word	gBattleMons
	.word	gBattleWeather
	.word	0x86b
	.word	0x1199
	.word	0x86d
.Lfe91:
	.size	 CalcDefenseStat,.Lfe91-CalcDefenseStat
	.align	2, 0
	.type	 CalcFinalDmg,function
	.thumb_func
CalcFinalDmg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	ldr	r0, [sp, #0x30]
	ldr	r4, [sp, #0x34]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	str	r4, [sp, #0x4]
	add	r0, r7, #0
	bl	GetBattlerAbility
	add	r6, r0, #0
	mov	r0, r8
	bl	GetBattlerAbility
	str	r0, [sp, #0x8]
	mov	r0, r8
	bl	GetBattlerPosition
	mov	r4, #0x1
	and	r4, r4, r0
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, sp
	strh	r1, [r0]
	mov	r0, sl
	add	r1, r7, #0
	mov	r2, r8
	bl	GetMoveTargetCount
	cmp	r0, #0x1
	bls	.L3808	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	mov	r0, sp
	bl	MulModifier
.L3808:
	mov	r0, sp
	ldr	r1, [sp, #0x4]
	bl	MulModifier
	ldr	r0, [sp, #0x38]
	cmp	r0, #0
	beq	.L3809	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x5
	add	r1, r5, #0
	bl	ApplyModifier
	add	r5, r0, #0
.L3809:
	ldr	r1, .L3882
	mov	r0, #0x5c
	mul	r0, r0, r7
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	mov	r1, sl
	lsl	r1, r1, #0x2
	str	r1, [sp, #0xc]
	cmp	r0, #0
	beq	.L3810	@cond_branch
	mov	r0, sl
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3810	@cond_branch
	ldr	r0, .L3882+0x4
	ldr	r1, [sp, #0xc]
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0xa9
	beq	.L3810	@cond_branch
	cmp	r6, #0x3e
	beq	.L3810	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	add	r1, r5, #0
	bl	ApplyModifier
	add	r5, r0, #0
.L3810:
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3811	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3811	@cond_branch
	ldr	r0, .L3882+0x8
	ldrh	r1, [r0]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3811	@cond_branch
	mov	r2, r9
	cmp	r2, #0xa
	beq	.L3878	@cond_branch
	mov	r3, r9
	cmp	r3, #0xb
	bne	.L3815	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x5
	b	.L3879
.L3883:
	.align	2, 0
.L3882:
	.word	gBattleMons
	.word	gBattleMoves
	.word	gBattleWeather
.L3811:
	mov	r0, #0xd
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3815	@cond_branch
	mov	r0, #0x4c
	bl	IsAbilityOnField
	cmp	r0, #0
	bne	.L3815	@cond_branch
	ldr	r0, .L3884
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3815	@cond_branch
	mov	r0, r9
	cmp	r0, #0xa
	bne	.L3817	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x5
	b	.L3879
.L3885:
	.align	2, 0
.L3884:
	.word	gBattleWeather
.L3817:
	mov	r1, r9
	cmp	r1, #0xb
	bne	.L3815	@cond_branch
.L3878:
	mov	r0, #0x80
	lsl	r0, r0, #0x4
.L3879:
	add	r1, r5, #0
	bl	ApplyModifier
	add	r5, r0, #0
.L3815:
	ldr	r1, .L3886
	mov	r0, #0x5c
	mul	r0, r0, r7
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r9
	beq	.L3821	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	cmp	r0, r9
	beq	.L3821	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x24
	ldrb	r0, [r0]
	cmp	r0, r9
	bne	.L3820	@cond_branch
.L3821:
	mov	r2, sl
	cmp	r2, #0xa5
	beq	.L3820	@cond_branch
	cmp	r6, #0x5b
	bne	.L3822	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, sp
	bl	MulModifier
	b	.L3820
.L3887:
	.align	2, 0
.L3886:
	.word	gBattleMons
.L3822:
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
.L3820:
	ldr	r1, .L3888
	lsl	r0, r4, #0x2
	add	r4, r0, r1
	ldr	r0, [r4]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3826	@cond_branch
	mov	r0, sl
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3825	@cond_branch
.L3826:
	ldr	r0, [r4]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3827	@cond_branch
	mov	r0, sl
	bl	GetBattleMoveSplit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L3825	@cond_branch
.L3827:
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3824	@cond_branch
.L3825:
	cmp	r6, #0x97
	beq	.L3824	@cond_branch
	ldr	r0, .L3888+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3828	@cond_branch
	ldr	r1, .L3888+0x8
	mov	r0, sp
	bl	MulModifier
	b	.L3824
.L3889:
	.align	2, 0
.L3888:
	.word	gSideStatuses
	.word	gBattleTypeFlags
	.word	0xa8f
.L3828:
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	mov	r0, sp
	bl	MulModifier
.L3824:
	cmp	r6, #0x6e
	beq	.L3831	@cond_branch
	cmp	r6, #0x6e
	bhi	.L3839	@cond_branch
	cmp	r6, #0x61
	beq	.L3833	@cond_branch
	b	.L3830
.L3839:
	cmp	r6, #0xe9
	beq	.L3835	@cond_branch
	b	.L3830
.L3831:
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	ldr	r3, [sp, #0x4]
	cmp	r3, r0
	bhi	.L3830	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	b	.L3880
.L3833:
	ldr	r6, [sp, #0x38]
	cmp	r6, #0
	beq	.L3830	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x5
.L3880:
	mov	r0, sp
	bl	MulModifier
	b	.L3830
.L3835:
	ldr	r0, .L3890
	ldr	r1, [sp, #0x4]
	cmp	r1, r0
	bls	.L3830	@cond_branch
	mov	r1, #0xa0
	lsl	r1, r1, #0x5
	mov	r0, sp
	bl	MulModifier
.L3830:
	ldr	r2, [sp, #0x8]
	cmp	r2, #0x88
	beq	.L3842	@cond_branch
	cmp	r2, #0x88
	bhi	.L3850	@cond_branch
	cmp	r2, #0x6f
	beq	.L3846	@cond_branch
	cmp	r2, #0x74
	beq	.L3846	@cond_branch
	b	.L3840
.L3891:
	.align	2, 0
.L3890:
	.word	0x1fff
.L3850:
	ldr	r3, [sp, #0x8]
	cmp	r3, #0xe7
	beq	.L3842	@cond_branch
	cmp	r3, #0xe8
	beq	.L3846	@cond_branch
	b	.L3840
.L3842:
	ldr	r1, .L3892
	mov	r0, #0x5c
	mov	r6, r8
	mul	r6, r6, r0
	add	r0, r6, #0
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2a]
	ldrh	r0, [r0, #0x2e]
	cmp	r1, r0
	bne	.L3840	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	mov	r0, sp
	bl	MulModifier
	b	.L3840
.L3893:
	.align	2, 0
.L3892:
	.word	gBattleMons
.L3846:
	ldr	r0, .L3894
	ldr	r1, [sp, #0x4]
	cmp	r1, r0
	bls	.L3840	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	mov	r0, sp
	bl	MulModifier
.L3840:
	mov	r0, #0x2
	mov	r4, r8
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L3851	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerAbility
	cmp	r0, #0x84
	bne	.L3851	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	mov	r0, sp
	bl	MulModifier
.L3851:
	add	r0, r7, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x4e
	beq	.L3862	@cond_branch
	cmp	r0, #0x4e
	bhi	.L3865	@cond_branch
	cmp	r0, #0x4d
	beq	.L3860	@cond_branch
	b	.L3856
.L3895:
	.align	2, 0
.L3894:
	.word	0x1fff
.L3865:
	cmp	r0, #0x4f
	bne	.L3856	@cond_branch
	add	r0, r7, #0
	bl	GetBattlerHoldEffectParam
	ldr	r4, .L3896
	ldr	r1, [r4]
	ldr	r2, .L3896+0x4
	add	r1, r1, r2
	add	r1, r1, r7
	ldrb	r1, [r1]
	mul	r0, r0, r1
	cmp	r0, #0x63
	bhi	.L3858	@cond_branch
	add	r0, r7, #0
	bl	GetBattlerHoldEffectParam
	ldr	r1, [r4]
	ldr	r3, .L3896+0x4
	add	r1, r1, r3
	add	r1, r1, r7
	ldrb	r1, [r1]
	mul	r0, r0, r1
	b	.L3859
.L3897:
	.align	2, 0
.L3896:
	.word	gBattleStruct
	.word	0x33f
.L3858:
	mov	r0, #0x64
.L3859:
	ldr	r1, .L3898
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r6, #0x80
	lsl	r6, r6, #0x5
	add	r1, r6, #0
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	b	.L3881
.L3899:
	.align	2, 0
.L3898:
	.word	sPercentToModifier
.L3860:
	ldr	r0, .L3900
	ldr	r1, [sp, #0x4]
	cmp	r1, r0
	bls	.L3856	@cond_branch
	ldr	r1, .L3900+0x4
.L3881:
	mov	r0, sp
	bl	MulModifier
	b	.L3856
.L3901:
	.align	2, 0
.L3900:
	.word	0x1fff
	.word	0x1333
.L3862:
	ldr	r1, .L3902
	mov	r0, sp
	bl	MulModifier
.L3856:
	mov	r0, r8
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x62
	bne	.L3866	@cond_branch
	mov	r0, r8
	bl	GetBattlerHoldEffectParam
	cmp	r9, r0
	bne	.L3866	@cond_branch
	mov	r2, r9
	cmp	r2, #0
	beq	.L3869	@cond_branch
	ldr	r0, .L3902+0x4
	ldr	r3, [sp, #0x4]
	cmp	r3, r0
	bls	.L3866	@cond_branch
.L3869:
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	mov	r0, sp
	bl	MulModifier
	ldr	r0, [sp, #0x3c]
	cmp	r0, #0
	beq	.L3866	@cond_branch
	ldr	r1, .L3902+0x8
	mov	r6, r8
	lsl	r0, r6, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x2]
.L3866:
	ldr	r0, .L3902+0xc
	ldr	r1, [sp, #0xc]
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L3873	@cond_branch
	ldr	r1, .L3902+0x10
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3873	@cond_branch
	mov	r0, sp
	add	r1, r2, #0
	bl	MulModifier
.L3873:
	ldr	r1, .L3902+0xc
	ldr	r0, [sp, #0xc]
	add	r0, r0, sl
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3874	@cond_branch
	ldr	r1, .L3902+0x10
	mov	r6, r8
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3874	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, sp
	bl	MulModifier
.L3874:
	ldr	r1, .L3902+0xc
	ldr	r0, [sp, #0xc]
	add	r0, r0, sl
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3875	@cond_branch
	ldr	r1, .L3902+0x10
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3875	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, sp
	bl	MulModifier
.L3875:
	ldr	r1, .L3902+0xc
	ldr	r0, [sp, #0xc]
	add	r0, r0, sl
	lsl	r0, r0, #0x2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3876	@cond_branch
	ldr	r1, .L3902+0x10
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3876	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, sp
	bl	MulModifier
.L3876:
	mov	r0, sp
	ldrh	r0, [r0]
	add	r1, r5, #0
	bl	ApplyModifier
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L3877	@cond_branch
	mov	r5, #0x1
.L3877:
	add	r0, r5, #0
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3903:
	.align	2, 0
.L3902:
	.word	0x14cc
	.word	0x1fff
	.word	gSpecialStatuses
	.word	gBattleMoves
	.word	gStatuses3
.Lfe92:
	.size	 CalcFinalDmg,.Lfe92-CalcFinalDmg
	.align	2, 0
	.globl	CalculateMoveDamage
	.type	 CalculateMoveDamage,function
	.thumb_func
CalculateMoveDamage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x30]
	ldr	r5, [sp, #0x3c]
	mov	r9, r5
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	mov	r0, r9
	str	r0, [sp]
	mov	r0, r8
	add	r1, r6, #0
	add	r2, r5, #0
	add	r3, r7, #0
	bl	CalcTypeEffectivenessMultiplier
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	cmp	r0, #0
	bne	.L3905	@cond_branch
	mov	r0, #0x0
	b	.L3910
.L3905:
	cmp	r4, #0
	beq	.L3906	@cond_branch
	ldr	r0, .L3911
	strh	r4, [r0]
	b	.L3907
.L3912:
	.align	2, 0
.L3911:
	.word	gBattleMovePower
.L3906:
	ldr	r4, .L3913
	mov	r0, r9
	str	r0, [sp]
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r7, #0
	add	r3, r6, #0
	bl	CalcMoveBasePowerAfterModifiers
	strh	r0, [r4]
.L3907:
	ldr	r1, .L3913+0x4
	mov	r0, #0x5c
	mul	r0, r0, r5
	add	r0, r0, r1
	add	r0, r0, #0x2c
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x5
	bl	__divsi3
	add	r4, r0, #0x2
	ldr	r0, .L3913
	ldrh	r0, [r0]
	mul	r4, r4, r0
	ldr	r0, [sp, #0x34]
	str	r0, [sp]
	mov	r0, r9
	str	r0, [sp, #0x4]
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r7, #0
	add	r3, r6, #0
	bl	CalcAttackStat
	mul	r4, r4, r0
	ldr	r0, [sp, #0x34]
	str	r0, [sp]
	mov	r0, r9
	str	r0, [sp, #0x4]
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r7, #0
	add	r3, r6, #0
	bl	CalcDefenseStat
	add	r1, r0, #0
	add	r0, r4, #0
	bl	__udivsi3
	add	r4, r0, #0
	mov	r1, #0x32
	bl	__divsi3
	add	r4, r0, #0x2
	str	r6, [sp]
	mov	r0, sl
	str	r0, [sp, #0x4]
	ldr	r0, [sp, #0x34]
	str	r0, [sp, #0x8]
	mov	r0, r9
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	mov	r1, r8
	add	r2, r5, #0
	add	r3, r7, #0
	bl	CalcFinalDmg
	add	r4, r0, #0
	ldr	r0, [sp, #0x38]
	cmp	r0, #0
	beq	.L3908	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xf0
	lsl	r1, r1, #0xc
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	mov	r0, #0x64
	sub	r0, r0, r1
	mul	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x64
	bl	__divsi3
	add	r4, r0, #0
.L3908:
	cmp	r4, #0
	bne	.L3909	@cond_branch
	mov	r4, #0x1
.L3909:
	add	r0, r4, #0
.L3910:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3914:
	.align	2, 0
.L3913:
	.word	gBattleMovePower
	.word	gBattleMons
.Lfe93:
	.size	 CalculateMoveDamage,.Lfe93-CalculateMoveDamage
	.align	2, 0
	.type	 MulByTypeEffectiveness,function
	.thumb_func
MulByTypeEffectiveness:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r0
	ldr	r0, [sp, #0x20]
	ldr	r4, [sp, #0x24]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r8, r4
	add	r0, r7, #0
	add	r1, r5, #0
	bl	GetTypeModifier
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	bne	.L3916	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetBattlerHoldEffect
	cmp	r0, #0x7b
	bne	.L3916	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0x5
	ldr	r0, [sp, #0x28]
	cmp	r0, #0
	beq	.L3918	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x7b
	bl	RecordItemEffectBattle
	b	.L3918
.L3916:
	cmp	r7, #0x1
	bhi	.L3918	@cond_branch
	cmp	r5, #0x7
	bne	.L3919	@cond_branch
	ldr	r1, .L3927
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3919	@cond_branch
	cmp	r4, #0
	bne	.L3919	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0x5
	b	.L3918
.L3928:
	.align	2, 0
.L3927:
	.word	gBattleMons
.L3919:
	cmp	r7, #0x1
	bhi	.L3918	@cond_branch
	cmp	r5, #0x7
	bne	.L3918	@cond_branch
	mov	r0, r8
	bl	GetBattlerAbility
	cmp	r0, #0x71
	bne	.L3918	@cond_branch
	cmp	r4, #0
	bne	.L3918	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0x5
	ldr	r3, [sp, #0x28]
	cmp	r3, #0
	beq	.L3918	@cond_branch
	mov	r0, r8
	mov	r1, #0x71
	bl	RecordAbilityBattle
.L3918:
	cmp	r7, #0xe
	bne	.L3923	@cond_branch
	cmp	r5, #0x11
	bne	.L3923	@cond_branch
	ldr	r1, .L3929
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3923	@cond_branch
	cmp	r4, #0
	bne	.L3923	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0x5
.L3923:
	ldr	r1, .L3929+0x4
	mov	r0, r9
	lsl	r2, r0, #0x2
	add	r0, r2, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x85
	lsl	r0, r0, #0x1
	mov	r8, r2
	cmp	r1, r0
	bne	.L3924	@cond_branch
	cmp	r5, #0xb
	bne	.L3924	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0x6
.L3924:
	cmp	r7, #0x4
	bne	.L3925	@cond_branch
	cmp	r5, #0x2
	bne	.L3925	@cond_branch
	add	r0, r6, #0
	bl	IsBattlerGrounded
	cmp	r0, #0
	beq	.L3925	@cond_branch
	cmp	r4, #0
	bne	.L3925	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0x5
.L3925:
	ldr	r0, .L3929+0x8
	lsl	r1, r6, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L3926	@cond_branch
	ldr	r1, .L3929+0x4
	mov	r0, r8
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L3929+0xc
	cmp	r1, r0
	beq	.L3926	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0x5
.L3926:
	mov	r0, sl
	add	r1, r4, #0
	bl	MulModifier
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3930:
	.align	2, 0
.L3929:
	.word	gStatuses3
	.word	gBattleMoves
	.word	gProtectStructs
	.word	0x13f
.Lfe94:
	.size	 MulByTypeEffectiveness,.Lfe94-MulByTypeEffectiveness
	.align	2, 0
	.type	 UpdateMoveResultFlags,function
	.thumb_func
UpdateMoveResultFlags:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r2, r0, #0
	cmp	r0, #0
	bne	.L3932	@cond_branch
	ldr	r2, .L3939
	ldrh	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	ldr	r1, .L3939+0x4
	b	.L3938
.L3940:
	.align	2, 0
.L3939:
	.word	gMoveResultFlags
	.word	0xfff9
.L3932:
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	cmp	r0, r1
	bne	.L3934	@cond_branch
	ldr	r2, .L3941
	ldrh	r1, [r2]
	ldr	r0, .L3941+0x4
	b	.L3938
.L3942:
	.align	2, 0
.L3941:
	.word	gMoveResultFlags
	.word	0xfff1
.L3934:
	cmp	r2, r1
	bls	.L3936	@cond_branch
	ldr	r2, .L3943
	ldrh	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	ldr	r1, .L3943+0x4
	b	.L3938
.L3944:
	.align	2, 0
.L3943:
	.word	gMoveResultFlags
	.word	0xfff3
.L3936:
	ldr	r2, .L3945
	ldrh	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	ldr	r1, .L3945+0x4
.L3938:
	and	r0, r0, r1
	strh	r0, [r2]
	pop	{r0}
	bx	r0
.L3946:
	.align	2, 0
.L3945:
	.word	gMoveResultFlags
	.word	0xfff5
.Lfe95:
	.size	 UpdateMoveResultFlags,.Lfe95-UpdateMoveResultFlags
	.align	2, 0
	.type	 CalcTypeEffectivenessMultiplierInternal,function
	.thumb_func
CalcTypeEffectivenessMultiplierInternal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	ldr	r4, [sp, #0x38]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	str	r7, [sp, #0x10]
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	add	r0, sp, #0xc
	strh	r4, [r0]
	ldr	r1, .L3954
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r5, r0, r1
	mov	r0, #0x22
	add	r0, r0, r5
	mov	r8, r0
	ldrb	r0, [r0]
	str	r0, [sp]
	str	r7, [sp, #0x4]
	ldr	r1, [sp, #0x34]
	str	r1, [sp, #0x8]
	add	r0, sp, #0xc
	mov	r1, sl
	mov	r2, r9
	add	r3, r6, #0
	bl	MulByTypeEffectiveness
	add	r4, r5, #0
	add	r4, r4, #0x23
	ldrb	r0, [r4]
	mov	r2, r8
	ldrb	r2, [r2]
	cmp	r0, r2
	beq	.L3948	@cond_branch
	str	r0, [sp]
	str	r7, [sp, #0x4]
	ldr	r3, [sp, #0x34]
	str	r3, [sp, #0x8]
	add	r0, sp, #0xc
	mov	r1, sl
	mov	r2, r9
	add	r3, r6, #0
	bl	MulByTypeEffectiveness
.L3948:
	add	r0, r5, #0
	add	r0, r0, #0x24
	ldrb	r1, [r0]
	cmp	r1, #0x9
	beq	.L3949	@cond_branch
	ldrb	r4, [r4]
	cmp	r1, r4
	beq	.L3949	@cond_branch
	mov	r4, r8
	ldrb	r4, [r4]
	cmp	r1, r4
	beq	.L3949	@cond_branch
	add	r0, r1, #0
	str	r0, [sp]
	ldr	r0, [sp, #0x10]
	str	r0, [sp, #0x4]
	ldr	r1, [sp, #0x34]
	str	r1, [sp, #0x8]
	add	r0, sp, #0xc
	mov	r1, sl
	mov	r2, r9
	add	r3, r6, #0
	bl	MulByTypeEffectiveness
.L3949:
	mov	r2, r9
	cmp	r2, #0x4
	bne	.L3950	@cond_branch
	add	r0, r6, #0
	bl	IsBattlerGrounded
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L3950	@cond_branch
	add	r0, sp, #0xc
	strh	r4, [r0]
	ldr	r3, [sp, #0x34]
	cmp	r3, #0
	beq	.L3950	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerAbility
	add	r1, r0, #0
	cmp	r1, #0x1a
	bne	.L3950	@cond_branch
	ldr	r0, .L3954+0x4
	strh	r1, [r0]
	ldr	r2, .L3954+0x8
	ldrh	r0, [r2]
	mov	r1, #0x9
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L3954+0xc
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	strh	r4, [r0]
	ldr	r0, .L3954+0x10
	mov	r4, r9
	strb	r4, [r0, #0x6]
	add	r0, r6, #0
	mov	r1, #0x1a
	bl	RecordAbilityBattle
.L3950:
	add	r0, r6, #0
	bl	GetBattlerAbility
	add	r2, r0, #0
	cmp	r2, #0x19
	bne	.L3952	@cond_branch
	add	r0, sp, #0xc
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	bhi	.L3952	@cond_branch
	ldr	r0, .L3954+0x14
	mov	r3, sl
	lsl	r1, r3, #0x2
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L3952	@cond_branch
	add	r1, sp, #0xc
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r4, [sp, #0x34]
	cmp	r4, #0
	beq	.L3952	@cond_branch
	ldr	r0, .L3954+0x4
	strh	r2, [r0]
	ldr	r2, .L3954+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L3954+0xc
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r1, .L3954+0x10
	mov	r0, #0x3
	strb	r0, [r1, #0x6]
	add	r0, r6, #0
	mov	r1, #0x19
	bl	RecordAbilityBattle
.L3952:
	add	r0, sp, #0xc
	ldrh	r0, [r0]
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3955:
	.align	2, 0
.L3954:
	.word	gBattleMons
	.word	gLastUsedAbility
	.word	gMoveResultFlags
	.word	gLastLandedMoves
	.word	gBattleCommunication
	.word	gBattleMoves
.Lfe96:
	.size	 CalcTypeEffectivenessMultiplierInternal,.Lfe96-CalcTypeEffectivenessMultiplierInternal
	.align	2, 0
	.globl	CalcTypeEffectivenessMultiplier
	.type	 CalcTypeEffectivenessMultiplier,function
	.thumb_func
CalcTypeEffectivenessMultiplier:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	ldr	r7, [sp, #0x20]
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	cmp	r4, #0xa5
	beq	.L3957	@cond_branch
	cmp	r1, #0x9
	beq	.L3957	@cond_branch
	str	r7, [sp]
	str	r5, [sp, #0x4]
	add	r0, r4, #0
	add	r3, r6, #0
	bl	CalcTypeEffectivenessMultiplierInternal
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r1, .L3960
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrh	r1, [r2]
	ldr	r0, .L3960+0x4
	cmp	r1, r0
	bne	.L3957	@cond_branch
	ldrb	r1, [r2, #0x11]
	str	r7, [sp]
	str	r5, [sp, #0x4]
	add	r0, r4, #0
	mov	r2, r8
	add	r3, r6, #0
	bl	CalcTypeEffectivenessMultiplierInternal
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L3957:
	cmp	r7, #0
	beq	.L3959	@cond_branch
	add	r0, r5, #0
	bl	UpdateMoveResultFlags
.L3959:
	add	r0, r5, #0
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3961:
	.align	2, 0
.L3960:
	.word	gBattleMoves
	.word	0x113
.Lfe97:
	.size	 CalcTypeEffectivenessMultiplier,.Lfe97-CalcTypeEffectivenessMultiplier
	.align	2, 0
	.globl	CalcPartyMonTypeEffectivenessMultiplier
	.type	 CalcPartyMonTypeEffectivenessMultiplier,function
	.thumb_func
CalcPartyMonTypeEffectivenessMultiplier:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r3, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	sl, r2
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	add	r0, sp, #0xc
	strh	r1, [r0]
	ldr	r1, .L3967
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r7, [r0, #0x3]
	mov	r9, r7
	cmp	r6, #0xa5
	beq	.L3963	@cond_branch
	cmp	r7, #0x9
	beq	.L3963	@cond_branch
	ldr	r1, .L3967+0x4
	lsl	r0, r3, #0x3
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	ldrb	r4, [r5, #0x6]
	str	r4, [sp]
	mov	r0, #0x0
	mov	r8, r0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	add	r0, sp, #0xc
	add	r1, r6, #0
	add	r2, r7, #0
	mov	r3, #0x0
	bl	MulByTypeEffectiveness
	ldrb	r0, [r5, #0x7]
	cmp	r0, r4
	beq	.L3964	@cond_branch
	str	r0, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	add	r0, sp, #0xc
	add	r1, r6, #0
	add	r2, r7, #0
	mov	r3, #0x0
	bl	MulByTypeEffectiveness
.L3964:
	mov	r0, r9
	cmp	r0, #0x4
	bne	.L3965	@cond_branch
	mov	r0, sl
	cmp	r0, #0x1a
	bne	.L3965	@cond_branch
	ldr	r0, .L3967+0x8
	ldr	r1, [r0]
	mov	r0, #0x20
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3965	@cond_branch
	add	r0, sp, #0xc
	strh	r1, [r0]
.L3965:
	mov	r0, sl
	cmp	r0, #0x19
	bne	.L3963	@cond_branch
	add	r0, sp, #0xc
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	bhi	.L3963	@cond_branch
	ldr	r0, .L3967
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L3963	@cond_branch
	add	r1, sp, #0xc
	mov	r0, #0x0
	strh	r0, [r1]
.L3963:
	add	r0, sp, #0xc
	ldrh	r0, [r0]
	bl	UpdateMoveResultFlags
	add	r0, sp, #0xc
	ldrh	r0, [r0]
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3968:
	.align	2, 0
.L3967:
	.word	gBattleMoves
	.word	gBaseStats
	.word	gFieldStatuses
.Lfe98:
	.size	 CalcPartyMonTypeEffectivenessMultiplier,.Lfe98-CalcPartyMonTypeEffectivenessMultiplier
	.align	2, 0
	.globl	GetTypeModifier
	.type	 GetTypeModifier,function
	.thumb_func
GetTypeModifier:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	mov	r0, #0xed
	lsl	r0, r0, #0x1
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3970	@cond_branch
	ldr	r2, .L3975
	b	.L3974
.L3976:
	.align	2, 0
.L3975:
	.word	sTypeEffectivenessTable
.L3970:
	ldr	r2, .L3977
.L3974:
	lsl	r0, r4, #0x1
	mov	r1, #0x26
	mul	r1, r1, r5
	add	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L3978:
	.align	2, 0
.L3977:
	.word	sInverseTypeEffectivenessTable
.Lfe99:
	.size	 GetTypeModifier,.Lfe99-GetTypeModifier
	.align	2, 0
	.globl	GetStealthHazardDamage
	.type	 GetStealthHazardDamage,function
	.thumb_func
GetStealthHazardDamage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L3998
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	ldrb	r7, [r1]
	ldrh	r6, [r0, #0x2e]
	mov	r5, #0x0
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	mov	r9, r0
	mov	r0, sp
	mov	r1, r9
	strh	r1, [r0]
	mov	r0, r8
	add	r1, r4, #0
	bl	GetTypeModifier
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, sp
	bl	MulModifier
	cmp	r7, r4
	beq	.L3980	@cond_branch
	mov	r0, r8
	add	r1, r7, #0
	bl	GetTypeModifier
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, sp
	bl	MulModifier
.L3980:
	mov	r0, sp
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	cmp	r1, r0
	beq	.L3985	@cond_branch
	cmp	r1, r0
	bgt	.L3995	@cond_branch
	cmp	r1, #0
	beq	.L3981	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L3983	@cond_branch
	b	.L3981
.L3999:
	.align	2, 0
.L3998:
	.word	gBattleMons
.L3995:
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	cmp	r1, r0
	beq	.L3989	@cond_branch
	cmp	r1, r0
	bgt	.L3996	@cond_branch
	cmp	r1, r9
	beq	.L3987	@cond_branch
	b	.L3981
.L3996:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L3991	@cond_branch
	b	.L3981
.L3983:
	lsr	r5, r6, #0x5
	b	.L3997
.L3985:
	lsr	r5, r6, #0x4
	b	.L3997
.L3987:
	lsr	r5, r6, #0x3
	b	.L3997
.L3989:
	lsr	r5, r6, #0x2
	b	.L3997
.L3991:
	lsr	r5, r6, #0x1
.L3997:
	cmp	r5, #0
	bne	.L3981	@cond_branch
	mov	r5, #0x1
.L3981:
	add	r0, r5, #0
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe100:
	.size	 GetStealthHazardDamage,.Lfe100-GetStealthHazardDamage
	.align	2, 0
	.type	 IsPartnerMonFromSameTrainer,function
	.thumb_func
IsPartnerMonFromSameTrainer:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L4001	@cond_branch
	ldr	r0, .L4008
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4005	@cond_branch
.L4001:
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L4003	@cond_branch
	ldr	r0, .L4008
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4005	@cond_branch
.L4003:
	ldr	r0, .L4008
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4005	@cond_branch
	mov	r0, #0x1
	b	.L4007
.L4009:
	.align	2, 0
.L4008:
	.word	gBattleTypeFlags
.L4005:
	mov	r0, #0x0
.L4007:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe101:
	.size	 IsPartnerMonFromSameTrainer,.Lfe101-IsPartnerMonFromSameTrainer
	.align	2, 0
	.globl	GetMegaEvolutionSpecies
	.type	 GetMegaEvolutionSpecies,function
	.thumb_func
GetMegaEvolutionSpecies:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	mov	r3, #0x0
	ldr	r2, .L4018
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x4
	ldr	r5, .L4018+0x4
	add	r1, r1, r2
.L4014:
	ldrh	r0, [r1]
	cmp	r0, r5
	bne	.L4013	@cond_branch
	ldrh	r0, [r1, #0x2]
	cmp	r0, r4
	bne	.L4013	@cond_branch
	ldrh	r0, [r1, #0x4]
	b	.L4017
.L4019:
	.align	2, 0
.L4018:
	.word	gEvolutionTable
	.word	0xffff
.L4013:
	add	r1, r1, #0x8
	add	r3, r3, #0x1
	cmp	r3, #0x9
	bls	.L4014	@cond_branch
	mov	r0, #0x0
.L4017:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe102:
	.size	 GetMegaEvolutionSpecies,.Lfe102-GetMegaEvolutionSpecies
	.align	2, 0
	.globl	GetWishMegaEvolutionSpecies
	.type	 GetWishMegaEvolutionSpecies,function
	.thumb_func
GetWishMegaEvolutionSpecies:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, [sp, #0x14]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r6, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r5, r3, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r3, #0x0
	ldr	r2, .L4030
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x4
	ldr	r0, .L4030+0x4
	mov	ip, r0
	add	r1, r1, r2
.L4024:
	ldrh	r0, [r1]
	cmp	r0, ip
	bne	.L4023	@cond_branch
	ldrh	r0, [r1, #0x2]
	cmp	r0, r7
	beq	.L4027	@cond_branch
	cmp	r0, r6
	beq	.L4027	@cond_branch
	cmp	r0, r5
	beq	.L4027	@cond_branch
	cmp	r0, r4
	bne	.L4023	@cond_branch
.L4027:
	ldrh	r0, [r1, #0x4]
	b	.L4029
.L4031:
	.align	2, 0
.L4030:
	.word	gEvolutionTable
	.word	0xfffe
.L4023:
	add	r1, r1, #0x8
	add	r3, r3, #0x1
	cmp	r3, #0x9
	bls	.L4024	@cond_branch
	mov	r0, #0x0
.L4029:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe103:
	.size	 GetWishMegaEvolutionSpecies,.Lfe103-GetWishMegaEvolutionSpecies
	.align	2, 0
	.globl	CanMegaEvolve
	.type	 CanMegaEvolve,function
	.thumb_func
CanMegaEvolve:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	bl	GetBattlerPosition
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x2
	add	r6, r5, #0
	eor	r6, r6, r0
	add	r0, r6, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L4050
	ldr	r0, .L4050+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x20
	ldr	r1, [r1]
	add	r1, r1, r0
	mov	r8, r1
	mov	r7, r8
	add	r7, r7, #0x1f
	add	r4, r7, r4
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.LCB35251
	b	.L4047	@long jump
.LCB35251:
	ldr	r0, .L4050+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4034	@cond_branch
	add	r0, r5, #0
	bl	IsPartnerMonFromSameTrainer
	cmp	r0, #0
	beq	.L4034	@cond_branch
	mov	r1, r9
	add	r0, r7, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB35270
	b	.L4047	@long jump
.LCB35270:
	mov	r2, r8
	ldrb	r1, [r2, #0x1c]
	ldr	r2, .L4050+0xc
	lsl	r0, r6, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB35279
	b	.L4047	@long jump
.LCB35279:
.L4034:
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L4037	@cond_branch
	ldr	r1, .L4050+0x10
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L4050+0x14
	b	.L4048
.L4051:
	.align	2, 0
.L4050:
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L4037:
	ldr	r1, .L4052
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L4052+0x4
.L4048:
	add	r7, r1, r0
	add	r0, r7, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	add	r0, r7, #0
	mov	r1, #0xc
	bl	GetMonData
	add	r6, r0, #0
	mov	r1, r8
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r6, #0x10
	lsr	r4, r1, #0x10
	add	r1, r4, #0
	bl	GetMegaEvolutionSpecies
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L4039	@cond_branch
	mov	r0, #0xab
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4039	@cond_branch
	ldr	r0, .L4052+0x8
	ldr	r0, [r0]
	ldr	r2, .L4052+0xc
	add	r0, r0, r2
	add	r1, r0, r5
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L4041	@cond_branch
	cmp	r6, #0xcd
	bne	.L4042	@cond_branch
	ldr	r1, .L4052+0x10
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x7]
	b	.L4041
.L4053:
	.align	2, 0
.L4052:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleStruct
	.word	0x2c5
	.word	gEnigmaBerries
.L4042:
	add	r0, r4, #0
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L4041:
	cmp	r0, #0x82
	bne	.L4039	@cond_branch
	ldr	r0, .L4054
	ldr	r0, [r0]
	ldr	r1, .L4054+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L4049
.L4055:
	.align	2, 0
.L4054:
	.word	gBattleStruct
	.word	0x2ad
.L4039:
	add	r0, r7, #0
	mov	r1, #0xd
	bl	GetMonData
	add	r6, r0, #0
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	add	r0, r7, #0
	mov	r1, #0xe
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r7, #0
	mov	r1, #0xf
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r7, #0
	mov	r1, #0x10
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r2, r8
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x10
	str	r1, [sp]
	add	r1, r6, #0
	add	r2, r5, #0
	add	r3, r4, #0
	bl	GetWishMegaEvolutionSpecies
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L4045	@cond_branch
.L4047:
	mov	r0, #0x0
	b	.L4046
.L4045:
	ldr	r0, .L4056
	ldr	r0, [r0]
	ldr	r1, .L4056+0x4
	add	r0, r0, r1
	mov	r1, #0x1
.L4049:
	strb	r1, [r0]
	mov	r0, #0x1
.L4046:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L4057:
	.align	2, 0
.L4056:
	.word	gBattleStruct
	.word	0x2ad
.Lfe104:
	.size	 CanMegaEvolve,.Lfe104-CanMegaEvolve
	.align	2, 0
	.globl	UndoMegaEvolution
	.type	 UndoMegaEvolution,function
	.thumb_func
UndoMegaEvolution:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldr	r0, .L4062
	mov	r8, r0
	ldr	r2, [r0]
	ldr	r1, .L4062+0x4
	add	r0, r2, r1
	ldrb	r7, [r0]
	ldr	r1, .L4062+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r6, [r0]
	and	r7, r7, r6
	cmp	r7, #0
	beq	.L4059	@cond_branch
	mov	r5, #0xaa
	lsl	r5, r5, #0x2
	add	r0, r2, r5
	ldrh	r0, [r0]
	bl	GetFormIdFromFormSpeciesId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, r8
	ldr	r1, [r0]
	ldr	r0, .L4062+0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	bic	r0, r0, r6
	strb	r0, [r1]
	mov	r0, #0x64
	mul	r4, r4, r0
	ldr	r0, .L4062+0xc
	add	r4, r4, r0
	mov	r1, r8
	ldr	r2, [r1]
	add	r2, r2, r5
	add	r0, r4, #0
	mov	r1, #0xb
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x59
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	bl	CalculateMonStats
	b	.L4060
.L4063:
	.align	2, 0
.L4062:
	.word	gBattleStruct
	.word	0x299
	.word	gBitTable
	.word	gPlayerParty
.L4059:
	mov	r0, #0x64
	mov	r1, r4
	mul	r1, r1, r0
	ldr	r0, .L4064
	add	r6, r1, r0
	add	r0, r6, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	ldr	r1, .L4064+0x4
	cmp	r0, r1
	bne	.L4060	@cond_branch
	lsl	r5, r4, #0x1
	ldr	r4, .L4064+0x8
	add	r0, r5, r4
	mov	r1, r8
	ldr	r2, [r1]
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0xb
	bl	SetMonData
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r4
	add	r0, r0, r5
	strh	r7, [r0]
	add	r0, r6, #0
	bl	CalculateMonStats
.L4060:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4065:
	.align	2, 0
.L4064:
	.word	gPlayerParty
	.word	0x474
	.word	0x346
.Lfe105:
	.size	 UndoMegaEvolution,.Lfe105-UndoMegaEvolution
	.section .rodata
	.align	1, 0
	.type	 species.320,object
species.320:
	.short	0x469
	.short	0x2a9
	.short	0x49b
	.short	0x30a
	.short	0x42a
	.short	0x22b
	.short	0x306
	.short	0x494
	.short	0x491
	.short	0x498
	.short	0x490
	.short	0x497
	.short	0x492
	.short	0x499
	.short	0x48e
	.short	0x495
	.short	0x493
	.short	0x49a
	.short	0x48f
	.short	0x496
	.short	0x47c
	.short	0x2ea
.text
	.align	2, 0
	.globl	UndoFormChange
	.type	 UndoFormChange,function
	.thumb_func
UndoFormChange:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r2, .L4075
	cmp	r1, #0
	bne	.L4067	@cond_branch
	ldr	r2, .L4075+0x4
.L4067:
	mov	r0, #0x64
	mul	r4, r4, r0
	add	r4, r2, r4
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	add	r5, r0, #0
	mov	r3, #0x0
	b	.L4069
.L4076:
	.align	2, 0
.L4075:
	.word	gEnemyParty
	.word	gPlayerParty
.L4071:
	add	r3, r3, #0x1
.L4069:
	cmp	r3, #0xa
	bhi	.L4070	@cond_branch
	ldr	r2, .L4077
	lsl	r1, r3, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	cmp	r5, r0
	bne	.L4071	@cond_branch
	add	r2, r2, #0x2
	add	r2, r1, r2
	add	r0, r4, #0
	mov	r1, #0xb
	bl	SetMonData
	add	r0, r4, #0
	bl	CalculateMonStats
.L4070:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4078:
	.align	2, 0
.L4077:
	.word	species.320
.Lfe106:
	.size	 UndoFormChange,.Lfe106-UndoFormChange
	.align	2, 0
	.globl	DoBattlersShareType
	.type	 DoBattlersShareType,function
	.thumb_func
DoBattlersShareType:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0xc
	mov	r8, r1
	ldr	r6, .L4090
	mov	r5, #0x5c
	mul	r0, r0, r5
	add	r2, r0, r6
	add	r0, r2, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	add	r4, sp, #0x4
	strb	r0, [r4]
	add	r0, r2, #0
	add	r0, r0, #0x23
	ldrb	r1, [r0]
	mov	r0, sp
	add	r0, r0, #0x5
	strb	r1, [r0]
	add	r0, r2, #0
	add	r0, r0, #0x24
	ldrb	r1, [r0]
	mov	r0, sp
	add	r0, r0, #0x6
	strb	r1, [r0]
	mov	r0, sp
	add	r1, r4, #0
	mov	r2, #0x3
	bl	memcpy
	mov	r0, r8
	mul	r0, r0, r5
	add	r3, r0, r6
	add	r0, r3, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	add	r1, sp, #0x8
	strb	r0, [r1]
	add	r0, r3, #0
	add	r0, r0, #0x23
	ldrb	r2, [r0]
	mov	r0, sp
	add	r0, r0, #0x9
	strb	r2, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x24
	ldrb	r2, [r0]
	mov	r0, sp
	add	r0, r0, #0xa
	strb	r2, [r0]
	add	r0, r4, #0
	mov	r2, #0x3
	bl	memcpy
	mov	r0, sp
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x9
	bne	.L4080	@cond_branch
	mov	r0, sp
	mov	r1, sp
	ldrb	r1, [r1]
	strb	r1, [r0, #0x2]
.L4080:
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0x9
	bne	.L4081	@cond_branch
	ldrb	r0, [r4]
	strb	r0, [r4, #0x2]
.L4081:
	mov	r2, #0x0
	add	r3, r4, #0
	ldrb	r5, [r3]
.L4085:
	mov	r1, sp
	add	r0, r1, r2
	ldrb	r1, [r0]
	cmp	r1, r5
	beq	.L4087	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r1, r0
	beq	.L4087	@cond_branch
	ldrb	r0, [r3, #0x2]
	cmp	r1, r0
	bne	.L4084	@cond_branch
.L4087:
	mov	r0, #0x1
	b	.L4089
.L4091:
	.align	2, 0
.L4090:
	.word	gBattleMons
.L4084:
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L4085	@cond_branch
	mov	r0, #0x0
.L4089:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe107:
	.size	 DoBattlersShareType,.Lfe107-DoBattlersShareType
	.align	2, 0
	.globl	CanBattlerGetOrLoseItem
	.type	 CanBattlerGetOrLoseItem,function
	.thumb_func
CanBattlerGetOrLoseItem:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	ldr	r2, .L4112
	mov	r0, #0x5c
	mul	r0, r0, r6
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x15
	lsr	r5, r0, #0x15
	lsr	r4, r1, #0x10
	ldr	r0, .L4112+0x4
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	cmp	r1, #0xb
	bls	.L4111	@cond_branch
	cmp	r4, #0xcd
	beq	.L4111	@cond_branch
	mov	r0, #0xbf
	lsl	r0, r0, #0x1
	cmp	r5, r0
	bne	.L4097	@cond_branch
	add	r0, r0, #0x5a
	cmp	r4, r0
	beq	.L4111	@cond_branch
.L4097:
	ldr	r0, .L4112+0x8
	cmp	r5, r0
	bne	.L4099	@cond_branch
	add	r0, r0, #0x58
	cmp	r4, r0
	beq	.L4111	@cond_branch
.L4099:
	add	r0, r4, #0
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x82
	bne	.L4101	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetMegaEvolutionSpecies
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L4111	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSide
	ldr	r1, .L4112+0xc
	ldr	r1, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L4112+0x10
	add	r1, r1, r2
	add	r1, r1, r0
	ldrb	r2, [r1]
	ldr	r3, .L4112+0x14
	ldr	r1, .L4112+0x18
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L4111	@cond_branch
.L4101:
	ldr	r0, .L4112+0x1c
	cmp	r5, r0
	bne	.L4104	@cond_branch
	sub	r0, r0, #0x76
	cmp	r4, r0
	beq	.L4111	@cond_branch
.L4104:
	ldr	r0, .L4112+0x20
	cmp	r5, r0
	bne	.L4106	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetBattlerHoldEffect
	cmp	r0, #0x76
	beq	.L4111	@cond_branch
.L4106:
	ldr	r0, .L4112+0x24
	cmp	r5, r0
	bne	.L4108	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetBattlerHoldEffect
	cmp	r0, #0x99
	bne	.L4108	@cond_branch
.L4111:
	mov	r0, #0x0
	b	.L4110
.L4113:
	.align	2, 0
.L4112:
	.word	gBattleMons
	.word	-0x840000
	.word	0x17f
	.word	gBattleStruct
	.word	0x299
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	0x1e7
	.word	0x289
	.word	0x305
.L4108:
	mov	r0, #0x1
.L4110:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe108:
	.size	 CanBattlerGetOrLoseItem,.Lfe108-CanBattlerGetOrLoseItem
	.align	2, 0
	.globl	GetIllusionMonPtr
	.type	 GetIllusionMonPtr,function
	.thumb_func
GetIllusionMonPtr:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L4121
	ldr	r1, [r0]
	lsl	r0, r4, #0x3
	add	r1, r1, r0
	ldr	r2, .L4121+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L4119	@cond_branch
	ldr	r3, .L4121+0x8
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L4116	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L4117	@cond_branch
	ldr	r1, .L4121+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L4121+0x10
	add	r0, r0, r1
	add	r1, r4, #0
	bl	SetIllusionMon
	b	.L4116
.L4122:
	.align	2, 0
.L4121:
	.word	gBattleStruct
	.word	0x2de
	.word	0x2dd
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L4117:
	ldr	r1, .L4123
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L4123+0x4
	add	r0, r0, r1
	add	r1, r4, #0
	bl	SetIllusionMon
.L4116:
	ldr	r0, .L4123+0x8
	ldr	r2, [r0]
	lsl	r1, r4, #0x3
	add	r0, r2, r1
	mov	r3, #0xb7
	lsl	r3, r3, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L4119	@cond_branch
	add	r3, r3, #0x4
	add	r0, r2, r3
	add	r0, r0, r1
	ldr	r0, [r0]
	b	.L4120
.L4124:
	.align	2, 0
.L4123:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleStruct
.L4119:
	mov	r0, #0x0
.L4120:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe109:
	.size	 GetIllusionMonPtr,.Lfe109-GetIllusionMonPtr
	.align	2, 0
	.globl	ClearIllusionMon
	.type	 ClearIllusionMon,function
	.thumb_func
ClearIllusionMon:
	push	{lr}
	ldr	r1, .L4126
	ldr	r1, [r1]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xb7
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	pop	{r0}
	bx	r0
.L4127:
	.align	2, 0
.L4126:
	.word	gBattleStruct
.Lfe110:
	.size	 ClearIllusionMon,.Lfe110-ClearIllusionMon
	.align	2, 0
	.globl	SetIllusionMon
	.type	 SetIllusionMon,function
	.thumb_func
SetIllusionMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r8, r0
	add	r7, r1, #0
	ldr	r0, .L4143
	ldr	r0, [r0]
	lsl	r1, r7, #0x3
	add	r0, r0, r1
	ldr	r1, .L4143+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	mov	r0, r8
	bl	GetMonAbility
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x95
	bne	.L4142	@cond_branch
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L4143+0x8
	mov	r9, r1
	cmp	r0, #0
	bne	.L4130	@cond_branch
	ldr	r0, .L4143+0xc
	mov	r9, r0
.L4130:
	mov	r1, #0x2
	add	r0, r7, #0
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerAlive
	cmp	r0, #0
	beq	.L4132	@cond_branch
	ldr	r1, .L4143+0x10
	mov	r0, #0x2
	eor	r0, r0, r7
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	mov	r1, r9
	add	r4, r1, r0
	b	.L4133
.L4144:
	.align	2, 0
.L4143:
	.word	gBattleStruct
	.word	0x2dd
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattlerPartyIndexes
.L4141:
	ldr	r2, .L4145
	ldr	r0, [r2]
	lsl	r3, r7, #0x3
	add	r0, r0, r3
	mov	r1, #0xb7
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r4, #0x0
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r0, r3
	ldr	r1, .L4145+0x4
	add	r0, r0, r1
	strb	r4, [r0]
	ldr	r0, [r2]
	add	r0, r0, r3
	add	r1, r1, #0x1
	add	r0, r0, r1
	strb	r6, [r0]
	ldr	r0, [r2]
	add	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, r3
	str	r5, [r0]
	mov	r0, #0x1
	b	.L4140
.L4146:
	.align	2, 0
.L4145:
	.word	gBattleStruct
	.word	0x2de
.L4132:
	mov	r4, r8
.L4133:
	mov	r6, #0x5
.L4137:
	mov	r0, #0x64
	mul	r0, r0, r6
	mov	r1, r9
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetMonData
	cmp	r0, #0
	beq	.L4136	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L4136	@cond_branch
	cmp	r5, r8
	beq	.L4136	@cond_branch
	cmp	r5, r4
	bne	.L4141	@cond_branch
.L4136:
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L4137	@cond_branch
.L4142:
	mov	r0, #0x0
.L4140:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe111:
	.size	 SetIllusionMon,.Lfe111-SetIllusionMon
	.align	2, 0
	.globl	ShouldGetStatBadgeBoost
	.type	 ShouldGetStatBadgeBoost,function
	.thumb_func
ShouldGetStatBadgeBoost:
	mov	r0, #0x0
	bx	lr
.Lfe112:
	.size	 ShouldGetStatBadgeBoost,.Lfe112-ShouldGetStatBadgeBoost
	.align	2, 0
	.globl	GetBattleMoveSplit
	.type	 GetBattleMoveSplit,function
	.thumb_func
GetBattleMoveSplit:
	ldr	r2, .L4163
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x10]
	bx	lr
.L4164:
	.align	2, 0
.L4163:
	.word	gBattleMoves
.Lfe113:
	.size	 GetBattleMoveSplit,.Lfe113-GetBattleMoveSplit
.text
	.align	2, 0

