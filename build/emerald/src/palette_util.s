@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	RouletteFlash_Reset
	.type	 RouletteFlash_Reset,function
	.thumb_func
RouletteFlash_Reset:
	push	{lr}
	mov	r1, #0x0
	strb	r1, [r0]
	strh	r1, [r0, #0x2]
	add	r0, r0, #0x4
	mov	r2, #0xc0
	bl	memset
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 RouletteFlash_Reset,.Lfe1-RouletteFlash_Reset
	.align	2, 0
	.globl	RouletteFlash_Add
	.type	 RouletteFlash_Add,function
	.thumb_func
RouletteFlash_Add:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	cmp	r6, #0xf
	bhi	.L5	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r5, r3, r0
	ldrb	r7, [r5, #0x4]
	lsr	r0, r7, #0x7
	cmp	r0, #0
	beq	.L4	@cond_branch
.L5:
	mov	r0, #0xff
	b	.L8
.L4:
	ldrh	r0, [r2]
	mov	r4, #0x0
	strh	r0, [r5, #0x8]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r5, #0xa]
	ldrb	r0, [r2, #0x4]
	strb	r0, [r5, #0xc]
	ldrb	r0, [r2, #0x5]
	strb	r0, [r5, #0xd]
	ldrb	r0, [r2, #0x6]
	strb	r0, [r5, #0xe]
	ldrb	r3, [r2, #0x7]
	lsl	r0, r3, #0x1b
	lsr	r0, r0, #0x1b
	ldrb	r2, [r5, #0xf]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	mov	r0, #0x60
	and	r0, r0, r3
	mov	r2, #0x61
	neg	r2, r2
	and	r1, r1, r2
	orr	r1, r1, r0
	lsl	r3, r3, #0x18
	asr	r3, r3, #0x1f
	lsl	r3, r3, #0x7
	mov	r0, #0x7f
	and	r1, r1, r0
	orr	r1, r1, r3
	strb	r1, [r5, #0xf]
	sub	r0, r0, #0xff
	and	r0, r0, r7
	mov	r2, #0x80
	orr	r0, r0, r2
	strb	r0, [r5, #0x4]
	strb	r4, [r5, #0x6]
	strb	r4, [r5, #0x5]
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bge	.L6	@cond_branch
	mov	r0, #0xff
	b	.L9
.L6:
	mov	r0, #0x1
.L9:
	strb	r0, [r5, #0x7]
	add	r0, r6, #0
.L8:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 RouletteFlash_Add,.Lfe2-RouletteFlash_Add
	.align	2, 0
	.type	 RouletteFlash_Remove,function
	.thumb_func
RouletteFlash_Remove:
	push	{r4, lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r4, r1, #0
	cmp	r4, #0xf
	bhi	.L12	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r2, r0
	ldrb	r0, [r1, #0x4]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L12	@cond_branch
	add	r0, r1, #0x4
	mov	r1, #0x0
	mov	r2, #0xc
	bl	memset
	add	r0, r4, #0
	b	.L13
.L12:
	mov	r0, #0xff
.L13:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 RouletteFlash_Remove,.Lfe3-RouletteFlash_Remove
	.align	2, 0
	.type	 RouletteFlash_FadePalette,function
	.thumb_func
RouletteFlash_FadePalette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r5, r0, #0
	mov	r0, #0x0
	mov	ip, r0
	ldrb	r1, [r5, #0x8]
	cmp	ip, r1
	bcc	.LCB174
	b	.L16	@long jump
.LCB174:
	mov	r7, #0x1f
	ldr	r0, .L43
	mov	sl, r0
	mov	r1, #0x7d
	neg	r1, r1
	mov	r9, r1
	mov	r0, #0x1f
	mov	r8, r0
.L18:
	ldrh	r0, [r5, #0x6]
	add	r0, r0, ip
	lsl	r0, r0, #0x1
	ldr	r1, .L43+0x4
	add	r3, r0, r1
	ldr	r1, .L43+0x8
	add	r6, r0, r1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x19
	cmp	r0, #0x1
	beq	.L20	@cond_branch
	cmp	r0, #0x2
	beq	.L24	@cond_branch
	b	.L17
.L44:
	.align	2, 0
.L43:
	.word	-0x3e1
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
.L20:
	ldr	r0, [r3]
	lsl	r2, r0, #0x1b
	lsr	r0, r2, #0x1b
	mov	r1, #0x3
	ldrsb	r1, [r5, r1]
	add	r0, r0, r1
	cmp	r0, #0x1f
	bhi	.L21	@cond_branch
	lsr	r0, r2, #0x1b
	add	r0, r0, r1
	and	r0, r0, r7
	ldrb	r2, [r3]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3]
.L21:
	ldr	r0, [r3]
	lsl	r2, r0, #0x16
	lsr	r0, r2, #0x1b
	mov	r1, #0x3
	ldrsb	r1, [r5, r1]
	add	r0, r0, r1
	cmp	r0, #0x1f
	bhi	.L22	@cond_branch
	lsr	r0, r2, #0x1b
	add	r0, r0, r1
	mov	r1, r8
	and	r0, r0, r1
	lsl	r0, r0, #0x5
	ldrh	r2, [r3]
	mov	r1, sl
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3]
.L22:
	ldr	r0, [r3]
	lsl	r2, r0, #0x11
	lsr	r0, r2, #0x1b
	mov	r1, #0x3
	ldrsb	r1, [r5, r1]
	add	r0, r0, r1
	cmp	r0, #0x1f
	bls	.LCB275
	b	.L17	@long jump
.LCB275:
	lsr	r0, r2, #0x1b
	add	r0, r0, r1
	b	.L40
.L24:
	mov	r0, #0x3
	ldrsb	r0, [r5, r0]
	cmp	r0, #0
	bge	.L25	@cond_branch
	ldr	r0, [r3]
	lsl	r4, r0, #0x1b
	lsr	r1, r4, #0x1b
	mov	r2, #0x3
	ldrsb	r2, [r5, r2]
	add	r1, r1, r2
	ldr	r0, [r6]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	cmp	r1, r0
	blt	.L26	@cond_branch
	lsr	r0, r4, #0x1b
	add	r0, r0, r2
	and	r0, r0, r7
	ldrb	r2, [r3]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3]
.L26:
	ldr	r0, [r3]
	lsl	r4, r0, #0x16
	lsr	r1, r4, #0x1b
	mov	r2, #0x3
	ldrsb	r2, [r5, r2]
	add	r1, r1, r2
	ldr	r0, [r6]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	cmp	r1, r0
	blt	.L27	@cond_branch
	lsr	r0, r4, #0x1b
	add	r0, r0, r2
	mov	r1, r8
	and	r0, r0, r1
	lsl	r0, r0, #0x5
	ldrh	r2, [r3]
	mov	r1, sl
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3]
.L27:
	ldr	r0, [r3]
	lsl	r4, r0, #0x11
	lsr	r1, r4, #0x1b
	mov	r2, #0x3
	ldrsb	r2, [r5, r2]
	add	r1, r1, r2
	ldr	r0, [r6]
	lsl	r0, r0, #0x11
	lsr	r0, r0, #0x1b
	cmp	r1, r0
	blt	.L17	@cond_branch
	b	.L41
.L25:
	ldr	r0, [r3]
	lsl	r4, r0, #0x1b
	lsr	r1, r4, #0x1b
	mov	r2, #0x3
	ldrsb	r2, [r5, r2]
	add	r1, r1, r2
	ldr	r0, [r6]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	cmp	r1, r0
	bgt	.L30	@cond_branch
	lsr	r0, r4, #0x1b
	add	r0, r0, r2
	and	r0, r0, r7
	ldrb	r2, [r3]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3]
.L30:
	ldr	r0, [r3]
	lsl	r4, r0, #0x16
	lsr	r1, r4, #0x1b
	mov	r2, #0x3
	ldrsb	r2, [r5, r2]
	add	r1, r1, r2
	ldr	r0, [r6]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	cmp	r1, r0
	bgt	.L31	@cond_branch
	lsr	r0, r4, #0x1b
	add	r0, r0, r2
	mov	r1, r8
	and	r0, r0, r1
	lsl	r0, r0, #0x5
	ldrh	r2, [r3]
	mov	r1, sl
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3]
.L31:
	ldr	r0, [r3]
	lsl	r4, r0, #0x11
	lsr	r1, r4, #0x1b
	mov	r2, #0x3
	ldrsb	r2, [r5, r2]
	add	r1, r1, r2
	ldr	r0, [r6]
	lsl	r0, r0, #0x11
	lsr	r0, r0, #0x1b
	cmp	r1, r0
	bgt	.L17	@cond_branch
.L41:
	lsr	r0, r4, #0x1b
	add	r0, r0, r2
.L40:
	and	r0, r0, r7
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x1]
	mov	r1, r9
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
.L17:
	mov	r0, ip
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	ldrb	r0, [r5, #0x8]
	cmp	ip, r0
	bcs	.LCB456
	b	.L18	@long jump
.LCB456:
.L16:
	ldrb	r1, [r5, #0x2]
	add	r0, r1, #0x1
	strb	r0, [r5, #0x2]
	ldrb	r0, [r5, #0xb]
	lsl	r0, r0, #0x1b
	lsl	r1, r1, #0x18
	asr	r0, r0, #0x3
	cmp	r1, r0
	beq	.L36	@cond_branch
	mov	r0, #0x0
	b	.L37
.L36:
	mov	r0, #0x0
	strb	r0, [r5, #0x2]
	mov	r0, #0x3
	ldrsb	r0, [r5, r0]
	neg	r0, r0
	strb	r0, [r5, #0x3]
	ldrb	r2, [r5]
	mov	r1, #0x7f
	mov	r0, #0x7f
	and	r0, r0, r2
	cmp	r0, #0x1
	bne	.L38	@cond_branch
	lsl	r0, r2, #0x19
	lsr	r0, r0, #0x19
	add	r0, r0, #0x1
	b	.L42
.L38:
	lsl	r0, r2, #0x19
	lsr	r0, r0, #0x19
	sub	r0, r0, #0x1
.L42:
	and	r0, r0, r1
	mov	r1, #0x80
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5]
	mov	r0, #0x1
.L37:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 RouletteFlash_FadePalette,.Lfe4-RouletteFlash_FadePalette
	.align	2, 0
	.type	 RouletteFlash_FlashPalette,function
	.thumb_func
RouletteFlash_FlashPalette:
	push	{r4, r5, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	ldrb	r0, [r3]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x19
	cmp	r0, #0x1
	beq	.L47	@cond_branch
	cmp	r0, #0x2
	beq	.L53	@cond_branch
	b	.L46
.L47:
	ldrb	r0, [r3, #0x8]
	cmp	r2, r0
	bcs	.L49	@cond_branch
	ldr	r4, .L62
.L51:
	ldrh	r0, [r3, #0x6]
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r1, [r3, #0x4]
	strh	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r3, #0x8]
	cmp	r2, r0
	bcc	.L51	@cond_branch
.L49:
	ldrb	r2, [r3]
	lsl	r1, r2, #0x19
	lsr	r1, r1, #0x19
	add	r1, r1, #0x1
	b	.L61
.L63:
	.align	2, 0
.L62:
	.word	gPlttBufferFaded
.L53:
	ldrb	r0, [r3, #0x8]
	cmp	r2, r0
	bcs	.L55	@cond_branch
	ldr	r5, .L64
	ldr	r4, .L64+0x4
.L57:
	ldrh	r0, [r3, #0x6]
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r3, #0x8]
	cmp	r2, r0
	bcc	.L57	@cond_branch
.L55:
	ldrb	r2, [r3]
	lsl	r1, r2, #0x19
	lsr	r1, r1, #0x19
	sub	r1, r1, #0x1
.L61:
	mov	r0, #0x7f
	and	r1, r1, r0
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L46:
	mov	r0, #0x1
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L65:
	.align	2, 0
.L64:
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
.Lfe5:
	.size	 RouletteFlash_FlashPalette,.Lfe5-RouletteFlash_FlashPalette
	.align	2, 0
	.globl	RouletteFlash_Run
	.type	 RouletteFlash_Run,function
	.thumb_func
RouletteFlash_Run:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L67	@cond_branch
.L71:
	ldrh	r0, [r4, #0x2]
	asr	r0, r0, r5
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L70	@cond_branch
	lsl	r1, r5, #0x1
	add	r0, r1, r5
	lsl	r3, r0, #0x2
	add	r2, r4, r3
	ldrb	r0, [r2, #0x5]
	sub	r0, r0, #0x1
	strb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r1, #0
	cmp	r0, #0xff
	bne	.L70	@cond_branch
	ldrh	r0, [r2, #0x8]
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r1, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L74	@cond_branch
	add	r0, r3, #0x4
	add	r0, r4, r0
	bl	RouletteFlash_FadePalette
	b	.L75
.L74:
	add	r0, r3, #0x4
	add	r0, r4, r0
	bl	RouletteFlash_FlashPalette
.L75:
	add	r0, r6, r5
	lsl	r0, r0, #0x2
	add	r0, r4, r0
	ldrb	r1, [r0, #0xd]
	strb	r1, [r0, #0x5]
.L70:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xf
	bls	.L71	@cond_branch
.L67:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 RouletteFlash_Run,.Lfe6-RouletteFlash_Run
	.align	2, 0
	.globl	RouletteFlash_Enable
	.type	 RouletteFlash_Enable,function
	.thumb_func
RouletteFlash_Enable:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	mov	r4, #0x0
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	mov	r5, #0x1
	mov	r7, #0x80
	neg	r7, r7
.L81:
	add	r0, r6, #0
	asr	r0, r0, r4
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L80	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r2, r3, r0
	ldrb	r0, [r2, #0x4]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L80	@cond_branch
	add	r0, r5, #0
	lsl	r0, r0, r4
	ldrh	r1, [r3, #0x2]
	orr	r0, r0, r1
	strh	r0, [r3, #0x2]
	ldrb	r1, [r2, #0x4]
	add	r0, r7, #0
	and	r0, r0, r1
	orr	r0, r0, r5
	strb	r0, [r2, #0x4]
.L80:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xf
	bls	.L81	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 RouletteFlash_Enable,.Lfe7-RouletteFlash_Enable
	.align	2, 0
	.globl	RouletteFlash_Stop
	.type	 RouletteFlash_Stop,function
	.thumb_func
RouletteFlash_Stop:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	mov	r5, #0x0
	mov	r3, #0x1
.L89:
	ldrh	r0, [r6, #0x2]
	asr	r0, r0, r5
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L88	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r4, r6, r0
	ldrb	r0, [r4, #0x4]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L88	@cond_branch
	add	r0, r7, #0
	asr	r0, r0, r5
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L88	@cond_branch
	ldrh	r1, [r4, #0xa]
	lsl	r1, r1, #0x1
	ldr	r0, .L99
	add	r0, r1, r0
	ldr	r2, .L99+0x4
	add	r1, r1, r2
	ldrb	r2, [r4, #0xc]
	lsl	r2, r2, #0x1
	str	r3, [sp]
	bl	memcpy
	ldrb	r0, [r4, #0x4]
	mov	r2, #0x80
	neg	r2, r2
	add	r1, r2, #0
	and	r0, r0, r1
	strb	r0, [r4, #0x4]
	mov	r0, #0x0
	strb	r0, [r4, #0x6]
	strb	r0, [r4, #0x5]
	ldrb	r0, [r4, #0xf]
	lsl	r0, r0, #0x18
	ldr	r3, [sp]
	cmp	r0, #0
	bge	.L93	@cond_branch
	mov	r0, #0xff
	strb	r0, [r4, #0x7]
	b	.L88
.L100:
	.align	2, 0
.L99:
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
.L93:
	strb	r3, [r4, #0x7]
.L88:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xf
	bls	.L89	@cond_branch
	ldr	r0, .L101
	cmp	r7, r0
	bne	.L96	@cond_branch
	mov	r0, #0x0
	strb	r0, [r6]
	b	.L98
.L102:
	.align	2, 0
.L101:
	.word	0xffff
.L96:
	ldrh	r0, [r6, #0x2]
	bic	r0, r0, r7
.L98:
	strh	r0, [r6, #0x2]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 RouletteFlash_Stop,.Lfe8-RouletteFlash_Stop
	.align	2, 0
	.globl	InitPulseBlend
	.type	 InitPulseBlend,function
	.thumb_func
InitPulseBlend:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r4, #0x0
	strh	r4, [r5]
	add	r0, r5, #0x4
	mov	r1, #0x0
	mov	r2, #0xc0
	bl	memset
.L107:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r5, r0
	strb	r4, [r0, #0x4]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xf
	bls	.L107	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 InitPulseBlend,.Lfe9-InitPulseBlend
	.align	2, 0
	.globl	InitPulseBlendPaletteSettings
	.type	 InitPulseBlendPaletteSettings,function
	.thumb_func
InitPulseBlendPaletteSettings:
	push	{r4, r5, lr}
	add	r2, r0, #0
	add	r5, r1, #0
	mov	r3, #0x0
	mov	r4, #0x0
	ldrb	r0, [r2, #0x5]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	bne	.L112	@cond_branch
	add	r4, r2, #0x4
	b	.L111
.L112:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xf
	bhi	.L111	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r1, r0, #0x2
	add	r0, r2, r1
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	bne	.L112	@cond_branch
	add	r0, r1, #0x4
	add	r4, r2, r0
.L111:
	cmp	r4, #0
	beq	.L117	@cond_branch
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	mov	r0, #0x0
	strb	r0, [r4, #0x2]
	strb	r0, [r4, #0x3]
	add	r1, r4, #0x4
	add	r0, r5, #0
	ldmia	r0!, {r2, r4}
	stmia	r1!, {r2, r4}
	add	r0, r3, #0
	b	.L118
.L117:
	mov	r0, #0xff
.L118:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 InitPulseBlendPaletteSettings,.Lfe10-InitPulseBlendPaletteSettings
	.align	2, 0
	.type	 ClearPulseBlendPalettesSettings,function
	.thumb_func
ClearPulseBlendPalettesSettings:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrb	r1, [r4, #0x1]
	mov	r2, #0x40
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L120	@cond_branch
	ldrb	r1, [r4, #0xb]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L120	@cond_branch
	ldrh	r2, [r4, #0x6]
	ldrb	r0, [r4, #0x8]
	add	r0, r2, r0
	cmp	r2, r0
	bge	.L120	@cond_branch
	ldr	r5, .L126
	ldr	r3, .L126+0x4
.L124:
	lsl	r0, r2, #0x1
	add	r1, r0, r5
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrh	r0, [r4, #0x6]
	ldrb	r1, [r4, #0x8]
	add	r0, r0, r1
	cmp	r2, r0
	blt	.L124	@cond_branch
.L120:
	add	r0, r4, #0x4
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	sub	r1, r1, #0x10
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	mov	r1, #0x7f
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	mov	r0, #0x0
	strb	r0, [r4, #0x3]
	strb	r0, [r4, #0x2]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L127:
	.align	2, 0
.L126:
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
.Lfe11:
	.size	 ClearPulseBlendPalettesSettings,.Lfe11-ClearPulseBlendPalettesSettings
	.align	2, 0
	.globl	UnloadUsedPulseBlendPalettes
	.type	 UnloadUsedPulseBlendPalettes,function
	.thumb_func
UnloadUsedPulseBlendPalettes:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x18
	mov	r5, #0x0
	cmp	r2, #0
	bne	.L134	@cond_branch
	mov	r1, #0xf
	and	r1, r1, r4
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, #0x4
	add	r0, r6, r0
	bl	ClearPulseBlendPalettesSettings
	b	.L130
.L134:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L135	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r1, r0, #0x2
	add	r0, r6, r1
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L135	@cond_branch
	add	r0, r1, #0x4
	add	r0, r6, r0
	bl	ClearPulseBlendPalettesSettings
.L135:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xf
	bls	.L134	@cond_branch
.L130:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 UnloadUsedPulseBlendPalettes,.Lfe12-UnloadUsedPulseBlendPalettes
	.align	2, 0
	.globl	MarkUsedPulseBlendPalettes
	.type	 MarkUsedPulseBlendPalettes,function
	.thumb_func
MarkUsedPulseBlendPalettes:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x18
	mov	r3, #0x0
	cmp	r2, #0
	bne	.L138	@cond_branch
	mov	r0, #0xf
	add	r3, r0, #0
	and	r3, r3, r4
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r5, r1
	ldrb	r2, [r1, #0x5]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r0, #0x1
	lsl	r0, r0, r3
	ldrh	r1, [r5]
	orr	r0, r0, r1
	strh	r0, [r5]
	b	.L139
.L138:
	mov	r6, #0x1
	mov	r7, #0x41
	neg	r7, r7
.L143:
	add	r0, r4, #0
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L145	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r2, r5, r0
	ldrb	r1, [r2, #0x5]
	lsr	r0, r1, #0x7
	cmp	r0, #0
	beq	.L145	@cond_branch
	lsl	r0, r1, #0x19
	cmp	r0, #0
	blt	.L144	@cond_branch
.L145:
	lsl	r0, r4, #0x11
	lsr	r4, r0, #0x10
	b	.L142
.L144:
	add	r0, r7, #0
	and	r0, r0, r1
	strb	r0, [r2, #0x5]
	add	r0, r6, #0
	lsl	r0, r0, r3
	ldrh	r1, [r5]
	orr	r0, r0, r1
	strh	r0, [r5]
.L142:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xf
	bls	.L143	@cond_branch
.L139:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 MarkUsedPulseBlendPalettes,.Lfe13-MarkUsedPulseBlendPalettes
	.align	2, 0
	.globl	UnmarkUsedPulseBlendPalettes
	.type	 UnmarkUsedPulseBlendPalettes,function
	.thumb_func
UnmarkUsedPulseBlendPalettes:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r8, r0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x18
	mov	r0, #0x0
	mov	ip, r0
	cmp	r2, #0
	bne	.L149	@cond_branch
	mov	r1, #0xf
	and	r1, r1, r7
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, #0x4
	mov	r1, r8
	add	r3, r1, r0
	ldrb	r1, [r3, #0x1]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x80
	bne	.L157	@cond_branch
	ldrb	r1, [r3, #0xb]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L151	@cond_branch
	ldrh	r2, [r3, #0x6]
	ldrb	r0, [r3, #0x8]
	add	r0, r2, r0
	cmp	r2, r0
	bge	.L151	@cond_branch
	ldr	r5, .L172
	ldr	r4, .L172+0x4
.L155:
	lsl	r0, r2, #0x1
	add	r1, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrh	r0, [r3, #0x6]
	ldrb	r1, [r3, #0x8]
	add	r0, r0, r1
	cmp	r2, r0
	blt	.L155	@cond_branch
.L151:
	ldrb	r0, [r3, #0x1]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r3, #0x1]
	mov	r1, #0x1
	mov	r2, ip
	lsl	r1, r1, r2
	mov	r2, r8
	ldrh	r0, [r2]
	bic	r0, r0, r1
	strh	r0, [r2]
	b	.L157
.L173:
	.align	2, 0
.L172:
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
.L149:
	mov	r0, #0x1
	mov	r9, r0
	mov	r1, #0x40
	mov	sl, r1
.L161:
	mov	r2, ip
	lsl	r0, r2, #0x1
	add	r0, r0, ip
	lsl	r0, r0, #0x2
	add	r0, r0, #0x4
	mov	r1, r8
	add	r3, r1, r0
	add	r0, r7, #0
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L163	@cond_branch
	ldrb	r1, [r3, #0x1]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x80
	beq	.L162	@cond_branch
.L163:
	lsl	r0, r7, #0x11
	lsr	r7, r0, #0x10
	mov	r5, ip
	add	r5, r5, #0x1
	b	.L160
.L162:
	ldrb	r1, [r3, #0xb]
	mov	r0, sl
	and	r0, r0, r1
	mov	r5, ip
	add	r5, r5, #0x1
	cmp	r0, #0
	beq	.L165	@cond_branch
	ldrh	r2, [r3, #0x6]
	ldrb	r0, [r3, #0x8]
	add	r0, r2, r0
	cmp	r2, r0
	bge	.L165	@cond_branch
	ldr	r6, .L174
	ldr	r4, .L174+0x4
.L169:
	lsl	r0, r2, #0x1
	add	r1, r0, r6
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrh	r0, [r3, #0x6]
	ldrb	r1, [r3, #0x8]
	add	r0, r0, r1
	cmp	r2, r0
	blt	.L169	@cond_branch
.L165:
	ldrb	r1, [r3, #0x1]
	mov	r0, sl
	orr	r0, r0, r1
	strb	r0, [r3, #0x1]
	mov	r1, r9
	mov	r0, ip
	lsl	r1, r1, r0
	mov	r2, r8
	ldrh	r0, [r2]
	bic	r0, r0, r1
	strh	r0, [r2]
.L160:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	cmp	r0, #0xf
	bls	.L161	@cond_branch
.L157:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L175:
	.align	2, 0
.L174:
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
.Lfe14:
	.size	 UnmarkUsedPulseBlendPalettes,.Lfe14-UnmarkUsedPulseBlendPalettes
	.align	2, 0
	.globl	UpdatePulseBlend
	.type	 UpdatePulseBlend,function
	.thumb_func
UpdatePulseBlend:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	str	r0, [sp]
	mov	r0, #0x0
	mov	sl, r0
	ldr	r1, [sp]
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.LCB1525
	b	.L177	@long jump
.LCB1525:
	mov	r2, #0xf
	mov	r9, r2
	mov	r3, #0x10
	neg	r3, r3
	mov	r8, r3
	mov	r7, #0x1
.L181:
	mov	r5, sl
	lsl	r0, r5, #0x1
	add	r0, r0, sl
	lsl	r0, r0, #0x2
	add	r0, r0, #0x4
	ldr	r1, [sp]
	add	r4, r1, r0
	ldrb	r2, [r4, #0x1]
	mov	r3, #0xc0
	and	r3, r3, r2
	cmp	r3, #0x80
	beq	.LCB1551
	b	.L180	@long jump
.LCB1551:
	ldr	r0, .L202
	ldrb	r1, [r0, #0x7]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L183	@cond_branch
	ldrb	r0, [r4, #0xb]
	and	r3, r3, r0
	cmp	r3, #0
	beq	.LCB1565
	b	.L180	@long jump
.LCB1565:
.L183:
	ldrb	r0, [r4, #0x2]
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.LCB1576
	b	.L180	@long jump
.LCB1576:
	ldrb	r0, [r4, #0x9]
	strb	r0, [r4, #0x2]
	ldrh	r0, [r4, #0x6]
	ldrb	r1, [r4, #0x8]
	lsl	r2, r2, #0x1c
	lsr	r2, r2, #0x1c
	ldrh	r3, [r4, #0x4]
	bl	BlendPalette
	ldrb	r5, [r4, #0xb]
	lsl	r0, r5, #0x1a
	asr	r0, r0, #0x1e
	cmp	r0, #0x1
	beq	.L188	@cond_branch
	cmp	r0, #0x1
	bgt	.L198	@cond_branch
	cmp	r0, #0
	beq	.L186	@cond_branch
	b	.L185
.L203:
	.align	2, 0
.L202:
	.word	gPaletteFade
.L198:
	cmp	r0, #0x2
	beq	.L193	@cond_branch
	b	.L185
.L186:
	ldrb	r2, [r4, #0x1]
	lsl	r1, r2, #0x1c
	lsr	r0, r1, #0x1c
	add	r0, r0, #0x1
	mov	r3, r9
	and	r0, r0, r3
	mov	r6, r8
	add	r3, r6, #0
	and	r3, r3, r2
	orr	r3, r3, r0
	strb	r3, [r4, #0x1]
	lsr	r1, r1, #0x1c
	lsl	r0, r5, #0x1c
	asr	r0, r0, #0x1c
	cmp	r1, r0
	bne	.L185	@cond_branch
	ldrb	r0, [r4, #0x3]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x3]
	and	r3, r3, r6
	strb	r3, [r4, #0x1]
	b	.L185
.L188:
	ldrb	r3, [r4, #0x1]
	mov	r0, #0x10
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L189	@cond_branch
	lsl	r0, r3, #0x1c
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x1
	mov	r5, r9
	and	r0, r0, r5
	mov	r2, r8
	and	r2, r2, r3
	orr	r2, r2, r0
	strb	r2, [r4, #0x1]
	cmp	r0, #0
	bne	.L185	@cond_branch
	ldrb	r0, [r4, #0x3]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x3]
	lsl	r0, r2, #0x1b
	lsr	r0, r0, #0x1f
	eor	r0, r0, r7
	and	r0, r0, r7
	lsl	r0, r0, #0x4
	mov	r3, #0x11
	neg	r3, r3
	add	r1, r3, #0
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r4, #0x1]
	b	.L185
.L189:
	lsl	r0, r5, #0x1c
	asr	r0, r0, #0x1c
	sub	r0, r0, #0x1
	mov	r5, r9
	and	r0, r0, r5
	lsl	r2, r3, #0x1c
	lsr	r1, r2, #0x1c
	add	r1, r1, #0x1
	and	r1, r1, r5
	mov	r5, r8
	and	r3, r3, r5
	orr	r3, r3, r1
	strb	r3, [r4, #0x1]
	lsr	r2, r2, #0x1c
	cmp	r2, r0
	bne	.L185	@cond_branch
	ldrb	r0, [r4, #0x3]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x3]
	lsl	r0, r3, #0x1b
	lsr	r0, r0, #0x1f
	eor	r0, r0, r7
	and	r0, r0, r7
	lsl	r0, r0, #0x4
	mov	r2, #0x11
	neg	r2, r2
	add	r1, r2, #0
	and	r3, r3, r1
	orr	r3, r3, r0
	strb	r3, [r4, #0x1]
	b	.L185
.L193:
	ldrb	r2, [r4, #0x1]
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L194	@cond_branch
	mov	r0, r8
	and	r0, r0, r2
	b	.L201
.L194:
	lsl	r1, r5, #0x1c
	asr	r1, r1, #0x1c
	mov	r3, r9
	and	r1, r1, r3
	mov	r0, r8
	and	r0, r0, r2
	orr	r0, r0, r1
.L201:
	strb	r0, [r4, #0x1]
	ldrb	r2, [r4, #0x1]
	lsl	r0, r2, #0x1b
	lsr	r0, r0, #0x1f
	eor	r0, r0, r7
	and	r0, r0, r7
	lsl	r0, r0, #0x4
	mov	r5, #0x11
	neg	r5, r5
	add	r1, r5, #0
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r4, #0x1]
	ldrb	r0, [r4, #0x3]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x3]
.L185:
	ldrb	r1, [r4, #0xa]
	cmp	r1, #0xff
	beq	.L180	@cond_branch
	ldrb	r0, [r4, #0x3]
	cmp	r0, r1
	bne	.L180	@cond_branch
	ldrb	r1, [r4]
	ldr	r0, [sp]
	mov	r2, #0x0
	bl	UnmarkUsedPulseBlendPalettes
.L180:
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	cmp	r0, #0xf
	bhi	.LCB1798
	b	.L181	@long jump
.LCB1798:
.L177:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 UpdatePulseBlend,.Lfe15-UpdatePulseBlend
	.align	2, 0
	.globl	ClearTilemapRect
	.type	 ClearTilemapRect,function
	.thumb_func
ClearTilemapRect:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldr	r0, [sp, #0x14]
	ldr	r4, [sp, #0x18]
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x0
	lsr	r3, r3, #0x13
	add	r3, r3, r2
	lsl	r3, r3, #0x1
	add	r6, r6, r3
	cmp	r1, r4
	bcs	.L206	@cond_branch
.L208:
	lsl	r0, r1, #0x6
	add	r2, r6, r0
	mov	r0, #0x0
	add	r3, r1, #0x1
	cmp	r0, r5
	bcs	.L207	@cond_branch
.L212:
	strh	r7, [r2]
	add	r2, r2, #0x2
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r5
	bcc	.L212	@cond_branch
.L207:
	lsl	r0, r3, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r4
	bcc	.L208	@cond_branch
.L206:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 ClearTilemapRect,.Lfe16-ClearTilemapRect
	.align	2, 0
	.globl	SetTilemapRect
	.type	 SetTilemapRect,function
	.thumb_func
SetTilemapRect:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	ldr	r0, [sp, #0x14]
	ldr	r4, [sp, #0x18]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r6, r4, #0x18
	mov	r4, #0x0
	lsr	r3, r3, #0x13
	add	r3, r3, r2
	lsl	r3, r3, #0x1
	add	r7, r7, r3
	cmp	r4, r6
	bcs	.L217	@cond_branch
.L219:
	lsl	r0, r4, #0x6
	add	r2, r7, r0
	mov	r3, #0x0
	add	r4, r4, #0x1
	cmp	r3, r5
	bcs	.L218	@cond_branch
.L223:
	ldrh	r0, [r1]
	strh	r0, [r2]
	add	r1, r1, #0x2
	add	r2, r2, #0x2
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r5
	bcc	.L223	@cond_branch
.L218:
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r6
	bcc	.L219	@cond_branch
.L217:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 SetTilemapRect,.Lfe17-SetTilemapRect
.text
	.align	2, 0

