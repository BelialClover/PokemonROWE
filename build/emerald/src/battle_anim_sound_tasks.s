@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	sub_8158B30
	.type	 sub_8158B30,function
	.thumb_func
sub_8158B30:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L3
	lsl	r6, r0, #0x2
	add	r6, r6, r0
	lsl	r6, r6, #0x3
	add	r6, r6, r1
	ldr	r1, .L3+0x4
	ldrh	r0, [r1]
	strh	r0, [r6, #0x8]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r6, #0xa]
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r5, r0, #0
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x2
	bl	CalculatePanIncrement
	strh	r4, [r6, #0xc]
	strh	r5, [r6, #0xe]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r6, #0x10]
	mov	r0, #0xa
	strh	r0, [r6, #0x1c]
	ldr	r0, .L3+0x8
	str	r0, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	sub_8158B98
.Lfe1:
	.size	 sub_8158B30,.Lfe1-sub_8158B30
	.align	2, 0
	.type	 sub_8158B98,function
	.thumb_func
sub_8158B98:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L9
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r5, [r4, #0xc]
	ldrb	r6, [r4, #0x10]
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6f
	bne	.L6	@cond_branch
	mov	r0, #0x5
	strh	r0, [r4, #0x1c]
	strh	r1, [r4, #0x1e]
	ldr	r0, .L9+0x4
	str	r0, [r4]
	b	.L7
.L10:
	.align	2, 0
.L9:
	.word	gTasks
	.word	sub_8158C04
.L6:
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	bne	.L8	@cond_branch
	strh	r1, [r4, #0x1c]
	ldrh	r0, [r4, #0x8]
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
.L8:
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	bl	KeepPanInRange
	strh	r0, [r4, #0xc]
.L7:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 sub_8158B98,.Lfe2-sub_8158B98
	.align	2, 0
	.type	 sub_8158C04,function
	.thumb_func
sub_8158C04:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L14
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L12	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	ldrh	r0, [r4, #0xa]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L12	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimSoundTask
.L12:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gTasks
.Lfe3:
	.size	 sub_8158C04,.Lfe3-sub_8158C04
	.align	2, 0
	.globl	SoundTask_LoopSEAdjustPanning
	.type	 SoundTask_LoopSEAdjustPanning,function
	.thumb_func
SoundTask_LoopSEAdjustPanning:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L17
	ldrh	r1, [r0]
	str	r1, [sp]
	ldrb	r5, [r0, #0x4]
	ldrb	r6, [r0, #0x6]
	ldrb	r3, [r0, #0x8]
	mov	sl, r3
	ldrb	r7, [r0, #0xa]
	ldrb	r1, [r0, #0xc]
	mov	r9, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	BattleAnimAdjustPanning
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	add	r0, r5, #0
	bl	BattleAnimAdjustPanning
	add	r5, r0, #0
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CalculatePanIncrement
	ldr	r2, .L17+0x4
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	mov	r6, sp
	ldrh	r6, [r6]
	strh	r6, [r1, #0x8]
	strh	r4, [r1, #0xa]
	strh	r5, [r1, #0xc]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r1, #0xe]
	mov	r0, sl
	strh	r0, [r1, #0x10]
	strh	r7, [r1, #0x12]
	mov	r3, r9
	strh	r3, [r1, #0x14]
	strh	r2, [r1, #0x1c]
	strh	r4, [r1, #0x1e]
	strh	r3, [r1, #0x20]
	ldr	r2, .L17+0x8
	str	r2, [r1]
	mov	r0, r8
	bl	_call_via_r2
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	SoundTask_LoopSEAdjustPanning_Step
.Lfe4:
	.size	 SoundTask_LoopSEAdjustPanning,.Lfe4-SoundTask_LoopSEAdjustPanning
	.align	2, 0
	.type	 SoundTask_LoopSEAdjustPanning_Step,function
	.thumb_func
SoundTask_LoopSEAdjustPanning_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L23
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x20]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x14
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L20	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x8]
	mov	r1, #0x1e
	ldrsb	r1, [r4, r1]
	bl	PlaySE12WithPanning
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L20	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimSoundTask
	b	.L19
.L24:
	.align	2, 0
.L23:
	.word	gTasks
.L20:
	ldr	r1, .L25
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x12
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L19	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0xe]
	ldrh	r1, [r4, #0x1e]
	add	r0, r0, r1
	strh	r0, [r4, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r4, r2]
	bl	KeepPanInRange
	strh	r0, [r4, #0x1e]
.L19:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	gTasks
.Lfe5:
	.size	 SoundTask_LoopSEAdjustPanning_Step,.Lfe5-SoundTask_LoopSEAdjustPanning_Step
	.align	2, 0
	.globl	SoundTask_PlayCryHighPitch
	.type	 SoundTask_PlayCryHighPitch,function
	.thumb_func
SoundTask_PlayCryHighPitch:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L28	@cond_branch
	ldr	r0, .L45
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L29	@cond_branch
	ldr	r0, .L45+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldrh	r4, [r0]
	b	.L31
.L46:
	.align	2, 0
.L45:
	.word	gBattleAnimArgs
	.word	gContestResources
.L29:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L31
.L28:
	ldr	r0, .L47
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	add	r2, r0, #0
	cmp	r1, #0
	bne	.L32	@cond_branch
	ldr	r0, .L47+0x4
	ldrb	r4, [r0]
	b	.L33
.L48:
	.align	2, 0
.L47:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L32:
	cmp	r1, #0x1
	bne	.L34	@cond_branch
	ldr	r0, .L49
	ldrb	r4, [r0]
	b	.L33
.L50:
	.align	2, 0
.L49:
	.word	gBattleAnimTarget
.L34:
	cmp	r1, #0x2
	bne	.L36	@cond_branch
	ldr	r0, .L51
	b	.L43
.L52:
	.align	2, 0
.L51:
	.word	gBattleAnimAttacker
.L36:
	ldr	r0, .L53
.L43:
	ldrb	r1, [r0]
	mov	r0, #0x2
	add	r4, r0, #0
	eor	r4, r4, r1
.L33:
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x1
	beq	.L39	@cond_branch
	cmp	r0, #0x3
	bne	.L38	@cond_branch
.L39:
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L38	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L27
.L54:
	.align	2, 0
.L53:
	.word	gBattleAnimTarget
.L38:
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L40	@cond_branch
	ldr	r1, .L55
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L55+0x4
	b	.L44
.L56:
	.align	2, 0
.L55:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L40:
	ldr	r1, .L57
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L57+0x4
.L44:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L31:
	cmp	r4, #0
	beq	.L42	@cond_branch
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x3
	bl	PlayCry3
.L42:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L27:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe6:
	.size	 SoundTask_PlayCryHighPitch,.Lfe6-SoundTask_PlayCryHighPitch
	.align	2, 0
	.globl	SoundTask_PlayDoubleCry
	.type	 SoundTask_PlayDoubleCry,function
	.thumb_func
SoundTask_PlayDoubleCry:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L60	@cond_branch
	ldr	r0, .L80
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L61	@cond_branch
	ldr	r0, .L80+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldrh	r4, [r0]
	b	.L63
.L81:
	.align	2, 0
.L80:
	.word	gBattleAnimArgs
	.word	gContestResources
.L61:
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L63
.L60:
	ldr	r0, .L82
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	add	r2, r0, #0
	cmp	r1, #0
	bne	.L64	@cond_branch
	ldr	r0, .L82+0x4
	ldrb	r4, [r0]
	b	.L65
.L83:
	.align	2, 0
.L82:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L64:
	cmp	r1, #0x1
	bne	.L66	@cond_branch
	ldr	r0, .L84
	ldrb	r4, [r0]
	b	.L65
.L85:
	.align	2, 0
.L84:
	.word	gBattleAnimTarget
.L66:
	cmp	r1, #0x2
	bne	.L68	@cond_branch
	ldr	r0, .L86
	b	.L78
.L87:
	.align	2, 0
.L86:
	.word	gBattleAnimAttacker
.L68:
	ldr	r0, .L88
.L78:
	ldrb	r1, [r0]
	mov	r0, #0x2
	add	r4, r0, #0
	eor	r4, r4, r1
.L65:
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x1
	beq	.L71	@cond_branch
	cmp	r0, #0x3
	bne	.L70	@cond_branch
.L71:
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L70	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L59
.L89:
	.align	2, 0
.L88:
	.word	gBattleAnimTarget
.L70:
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L72	@cond_branch
	ldr	r1, .L90
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L90+0x4
	b	.L79
.L91:
	.align	2, 0
.L90:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L72:
	ldr	r1, .L92
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L92+0x4
.L79:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L63:
	ldr	r1, .L92+0x8
	lsl	r2, r6, #0x2
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r3, .L92+0xc
	ldrh	r1, [r3, #0x2]
	strh	r1, [r0, #0x8]
	strh	r4, [r0, #0xa]
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	strh	r1, [r0, #0xc]
	add	r5, r2, #0
	cmp	r4, #0
	beq	.L74	@cond_branch
	mov	r2, #0x2
	ldrsh	r0, [r3, r2]
	cmp	r0, #0xff
	bne	.L75	@cond_branch
	add	r0, r4, #0
	mov	r2, #0x9
	bl	PlayCry3
	b	.L76
.L93:
	.align	2, 0
.L92:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gTasks
	.word	gBattleAnimArgs
.L75:
	add	r0, r4, #0
	mov	r2, #0x7
	bl	PlayCry3
.L76:
	ldr	r0, .L94
	add	r1, r5, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L94+0x4
	str	r0, [r1]
	b	.L59
.L95:
	.align	2, 0
.L94:
	.word	gTasks
	.word	SoundTask_PlayDoubleCry_Step
.L74:
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L59:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 SoundTask_PlayDoubleCry,.Lfe7-SoundTask_PlayDoubleCry
	.align	2, 0
	.type	 SoundTask_PlayDoubleCry_Step,function
	.thumb_func
SoundTask_PlayDoubleCry_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r9, r4
	ldr	r1, .L103
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r6, [r1, #0xa]
	mov	r8, r6
	ldrb	r5, [r1, #0xc]
	add	r7, r5, #0
	ldrh	r2, [r1, #0x1a]
	mov	r3, #0x1a
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x1
	bgt	.L97	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x1a]
	b	.L98
.L104:
	.align	2, 0
.L103:
	.word	gTasks
.L97:
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0xff
	bne	.L99	@cond_branch
	bl	IsCryPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L98	@cond_branch
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	add	r0, r6, #0
	mov	r2, #0xa
	bl	PlayCry3
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L98
.L99:
	bl	IsCryPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L98	@cond_branch
	lsl	r1, r7, #0x18
	asr	r1, r1, #0x18
	mov	r0, r8
	mov	r2, #0x8
	bl	PlayCry3
	mov	r0, r9
	bl	DestroyAnimVisualTask
.L98:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 SoundTask_PlayDoubleCry_Step,.Lfe8-SoundTask_PlayDoubleCry_Step
	.align	2, 0
	.globl	SoundTask_WaitForCry
	.type	 SoundTask_WaitForCry,function
	.thumb_func
SoundTask_WaitForCry:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	ldr	r1, .L109
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0x1a]
	mov	r3, #0x1a
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x1
	bgt	.L106	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x1a]
	b	.L107
.L110:
	.align	2, 0
.L109:
	.word	gTasks
.L106:
	bl	IsCryPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L107	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L107:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 SoundTask_WaitForCry,.Lfe9-SoundTask_WaitForCry
	.align	2, 0
	.globl	SoundTask_PlayCryWithEcho
	.type	 SoundTask_PlayCryWithEcho,function
	.thumb_func
SoundTask_PlayCryWithEcho:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L117
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L117+0x4
	ldrh	r1, [r1]
	strh	r1, [r0, #0x1c]
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L112	@cond_branch
	ldr	r0, .L117+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	b	.L116
.L118:
	.align	2, 0
.L117:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gContestResources
.L112:
	ldr	r1, .L119
	ldr	r0, .L119+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
.L116:
	ldrh	r2, [r0]
	ldr	r0, .L119+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r2, [r1, #0xa]
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r1, #0xc]
	cmp	r2, #0
	beq	.L114	@cond_branch
	ldr	r0, .L119+0xc
	str	r0, [r1]
	b	.L115
.L120:
	.align	2, 0
.L119:
	.word	gAnimBattlerSpecies
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	SoundTask_PlayCryWithEcho_Step
.L114:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L115:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 SoundTask_PlayCryWithEcho,.Lfe10-SoundTask_PlayCryWithEcho
	.align	2, 0
	.type	 SoundTask_PlayCryWithEcho_Step,function
	.thumb_func
SoundTask_PlayCryWithEcho_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L135
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r6, [r0, #0xa]
	mov	r8, r6
	ldrb	r3, [r0, #0xc]
	add	r5, r3, #0
	mov	r7, #0x1a
	ldrsh	r2, [r0, r7]
	mov	ip, r1
	cmp	r2, #0x5
	bhi	.L130	@cond_branch
	lsl	r0, r2, #0x2
	ldr	r1, .L135+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L136:
	.align	2, 0
.L135:
	.word	gTasks
	.word	.L133
	.align	2, 0
	.align	2, 0
.L133:
	.word	.L129
	.word	.L126
	.word	.L123
	.word	.L126
	.word	.L126
	.word	.L127
.L123:
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	mov	r0, r8
	mov	r2, #0x4
	bl	PlayCry6
	ldr	r1, .L137
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	b	.L134
.L138:
	.align	2, 0
.L137:
	.word	gTasks
.L126:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, ip
.L134:
	ldrh	r1, [r0, #0x1a]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x1a]
	b	.L122
.L127:
	bl	IsCryPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L122	@cond_branch
.L129:
	bl	StopCryAndClearCrySongs
	ldr	r0, .L139
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1a]
	b	.L122
.L140:
	.align	2, 0
.L139:
	.word	gTasks
.L130:
	mov	r1, #0x1c
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L131	@cond_branch
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	add	r0, r6, #0
	mov	r2, #0x6
	bl	PlayCry6
	b	.L132
.L131:
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	mov	r0, r8
	mov	r2, #0x6
	bl	PlayCry3
.L132:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L122:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 SoundTask_PlayCryWithEcho_Step,.Lfe11-SoundTask_PlayCryWithEcho_Step
	.align	2, 0
	.globl	SoundTask_PlaySE1WithPanning
	.type	 SoundTask_PlaySE1WithPanning,function
	.thumb_func
SoundTask_PlaySE1WithPanning:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L142
	ldrh	r5, [r0]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	add	r0, r5, #0
	bl	PlaySE1WithPanning
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	gBattleAnimArgs
.Lfe12:
	.size	 SoundTask_PlaySE1WithPanning,.Lfe12-SoundTask_PlaySE1WithPanning
	.align	2, 0
	.globl	SoundTask_PlaySE2WithPanning
	.type	 SoundTask_PlaySE2WithPanning,function
	.thumb_func
SoundTask_PlaySE2WithPanning:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L145
	ldrh	r5, [r0]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	add	r0, r5, #0
	bl	PlaySE2WithPanning
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L146:
	.align	2, 0
.L145:
	.word	gBattleAnimArgs
.Lfe13:
	.size	 SoundTask_PlaySE2WithPanning,.Lfe13-SoundTask_PlaySE2WithPanning
	.align	2, 0
	.globl	SoundTask_AdjustPanningVar
	.type	 SoundTask_AdjustPanningVar,function
	.thumb_func
SoundTask_AdjustPanningVar:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L148
	ldrb	r5, [r0, #0x2]
	ldrb	r6, [r0, #0x4]
	ldrh	r1, [r0, #0x6]
	mov	r9, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	BattleAnimAdjustPanning
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	add	r0, r5, #0
	bl	BattleAnimAdjustPanning
	add	r5, r0, #0
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CalculatePanIncrement
	ldr	r2, .L148+0x4
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r4, [r1, #0xa]
	strh	r5, [r1, #0xc]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r1, #0xe]
	mov	r0, r9
	strh	r0, [r1, #0x12]
	strh	r2, [r1, #0x1c]
	strh	r4, [r1, #0x1e]
	ldr	r2, .L148+0x8
	str	r2, [r1]
	mov	r0, r8
	bl	_call_via_r2
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L149:
	.align	2, 0
.L148:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	SoundTask_AdjustPanningVar_Step
.Lfe14:
	.size	 SoundTask_AdjustPanningVar,.Lfe14-SoundTask_AdjustPanningVar
	.align	2, 0
	.type	 SoundTask_AdjustPanningVar_Step,function
	.thumb_func
SoundTask_AdjustPanningVar_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L153
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r2, [r4, #0xe]
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x12
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	bne	.L151	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	add	r0, r2, r1
	strh	r0, [r4, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r4, r2]
	bl	KeepPanInRange
	strh	r0, [r4, #0x1e]
.L151:
	ldr	r1, .L153+0x4
	ldrh	r0, [r4, #0x1e]
	strb	r0, [r1]
	mov	r3, #0x1e
	ldrsh	r1, [r4, r3]
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L152	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L152:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L154:
	.align	2, 0
.L153:
	.word	gTasks
	.word	gAnimCustomPanning
.Lfe15:
	.size	 SoundTask_AdjustPanningVar_Step,.Lfe15-SoundTask_AdjustPanningVar_Step
	.align	2, 0
	.globl	SoundTask_PlaySeChangingVolume
	.type	 SoundTask_PlaySeChangingVolume,function
	.thumb_func
SoundTask_PlaySeChangingVolume:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L158
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldr	r4, .L158+0x4
	ldrh	r0, [r4]
	strh	r0, [r5, #0x8]
	mov	r0, #0x2
	ldrsb	r0, [r4, r0]
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	strh	r1, [r5, #0xa]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x16]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0xc]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0xe]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x10]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r5, #0x12]
	ldrh	r0, [r5, #0x8]
	bl	PlaySE1WithPanning
	ldr	r0, .L158+0x8
	ldr	r1, .L158+0xc
	ldrh	r2, [r5, #0xc]
	bl	m4aMPlayVolumeControl
	mov	r1, #0xe
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L156	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimSoundTask
	b	.L157
.L159:
	.align	2, 0
.L158:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gMPlayInfo_SE1
	.word	0xffff
.L156:
	ldr	r0, .L160
	str	r0, [r5]
.L157:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L161:
	.align	2, 0
.L160:
	.word	SoundTask_SeVolumeChange
.Lfe16:
	.size	 SoundTask_PlaySeChangingVolume,.Lfe16-SoundTask_PlaySeChangingVolume
	.align	2, 0
	.type	 SoundTask_SeVolumeChange,function
	.thumb_func
SoundTask_SeVolumeChange:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r3, #0x0
	ldr	r1, .L172
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	ldrh	r0, [r2, #0x14]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x12
	ldrsh	r1, [r2, r5]
	cmp	r0, r1
	blt	.L163	@cond_branch
	strh	r3, [r2, #0x14]
	ldrh	r0, [r2, #0xe]
	ldrh	r1, [r2, #0xc]
	add	r0, r0, r1
	strh	r0, [r2, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L164	@cond_branch
	strh	r3, [r2, #0xc]
.L164:
	mov	r5, #0xc
	ldrsh	r0, [r2, r5]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	cmp	r0, r1
	ble	.L165	@cond_branch
	strh	r1, [r2, #0xc]
.L165:
	mov	r1, #0x16
	ldrsh	r0, [r2, r1]
	mov	r5, #0x10
	ldrsh	r1, [r2, r5]
	cmp	r0, r1
	bge	.L166	@cond_branch
	mov	r5, #0xc
	ldrsh	r0, [r2, r5]
	cmp	r0, r1
	blt	.L168	@cond_branch
	b	.L171
.L173:
	.align	2, 0
.L172:
	.word	gTasks
.L166:
	mov	r5, #0xc
	ldrsh	r0, [r2, r5]
	cmp	r0, r1
	bgt	.L168	@cond_branch
	mov	r3, #0x1
.L168:
	cmp	r3, #0
	beq	.L170	@cond_branch
.L171:
	add	r0, r4, #0
	bl	DestroyAnimSoundTask
.L170:
	ldr	r0, .L174
	ldr	r1, .L174+0x4
	ldr	r3, .L174+0x8
	lsl	r2, r4, #0x2
	add	r2, r2, r4
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	ldrh	r2, [r2, #0xc]
	bl	m4aMPlayVolumeControl
.L163:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L175:
	.align	2, 0
.L174:
	.word	gMPlayInfo_SE1
	.word	0xffff
	.word	gTasks
.Lfe17:
	.size	 SoundTask_SeVolumeChange,.Lfe17-SoundTask_SeVolumeChange
.text
	.align	2, 0

