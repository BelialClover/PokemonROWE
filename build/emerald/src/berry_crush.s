@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gUnknown_02022C90,object
	.size	 gUnknown_02022C90,4
gUnknown_02022C90:
	.word	0x0
	.section .rodata
	.type	 gUnknown_082F325C,object
gUnknown_082F325C:
	.byte	0x1
	.byte	0x2
	.byte	0x4
	.byte	0x8
	.byte	0x10
	.byte	0x20
	.byte	0x40
	.byte	0x80
	.size	 gUnknown_082F325C,8
	.type	 gUnknown_082F3264,object
gUnknown_082F3264:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 gUnknown_082F3264,8
	.type	 gUnknown_082F326C,object
gUnknown_082F326C:
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x2
	.byte	0x0
	.byte	-0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x2
	.byte	0x0
	.byte	-0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x3
	.byte	0x1
	.byte	-0x1
	.byte	-0x3
	.byte	-0x1
	.byte	0x0
	.byte	0x6
	.byte	0x4
	.byte	0x1
	.byte	-0x2
	.byte	-0x4
	.byte	-0x2
	.byte	0x0
	.size	 gUnknown_082F326C,35
	.type	 sUnusedZero,object
	.size	 sUnusedZero,1
sUnusedZero:
	.byte	0x0
	.type	 gUnknown_082F3290,object
gUnknown_082F3290:
	.byte	0x3
	.byte	0x2
	.byte	0x1
	.byte	0x0
	.byte	0x3
	.byte	0x3
	.byte	0x1
	.byte	0x0
	.byte	0x3
	.byte	0x3
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x5
	.byte	0x3
	.byte	0x0
	.size	 gUnknown_082F3290,20
	.align	2, 0
	.type	 gUnknown_082F32A4,object
gUnknown_082F32A4:
	.word	gText_ReadyToBerryCrush
	.word	gText_WaitForAllChooseBerry
	.word	gText_EndedWithXUnitsPowder
	.word	gText_RecordingGameResults
	.word	gText_PlayBerryCrushAgain
	.word	gText_YouHaveNoBerries
	.word	gText_MemberDroppedOut
	.word	gText_TimesUpNoGoodPowder
	.word	gText_CommunicationStandby2
	.size	 gUnknown_082F32A4,36
	.align	2, 0
	.type	 gUnknown_082F32C8,object
	.size	 gUnknown_082F32C8,16
gUnknown_082F32C8:
	.byte	0xf8
	.byte	0x0
	.byte	0x0
	.space	1
	.byte	0xd1
	.byte	0x14
	.byte	0x0
	.space	1
	.byte	0xc2
	.byte	0x20
	.byte	0x0
	.space	1
	.byte	0xb3
	.byte	0x30
	.byte	0x0
	.space	1
	.type	 sBerryCrushTextColorTable,object
sBerryCrushTextColorTable:
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x9
	.byte	0x1
	.byte	0x6
	.byte	0x7
	.byte	0x1
	.byte	0x4
	.byte	0x5
	.size	 sBerryCrushTextColorTable,18
	.align	2, 0
	.type	 sWindowTemplate_BerryCrushRankings,object
	.size	 sWindowTemplate_BerryCrushRankings,8
sWindowTemplate_BerryCrushRankings:
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x18
	.byte	0xd
	.byte	0xf
	.short	0x1
	.align	2, 0
	.type	 gUnknown_082F32F4,object
gUnknown_082F32F4:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x9
	.byte	0x2
	.byte	0x8
	.short	0x3ed
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x9
	.byte	0x2
	.byte	0x8
	.short	0x3db
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x9
	.byte	0x2
	.byte	0x8
	.short	0x3c9
	.byte	0x0
	.byte	0x15
	.byte	0x3
	.byte	0x9
	.byte	0x2
	.byte	0x8
	.short	0x3b7
	.byte	0x0
	.byte	0x15
	.byte	0x6
	.byte	0x9
	.byte	0x2
	.byte	0x8
	.short	0x3a5
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 gUnknown_082F32F4,48
	.align	2, 0
	.type	 gUnknown_082F3324,object
gUnknown_082F3324:
	.byte	0x0
	.byte	0x5
	.byte	0x2
	.byte	0x14
	.byte	0x10
	.byte	0xf
	.short	0x1
	.byte	0x0
	.byte	0x5
	.byte	0x2
	.byte	0x14
	.byte	0x10
	.byte	0xf
	.short	0x1
	.byte	0x0
	.byte	0x4
	.byte	0x2
	.byte	0x16
	.byte	0x10
	.byte	0xf
	.short	0x1
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 gUnknown_082F3324,32
	.type	 gUnknown_082F3344,object
gUnknown_082F3344:
	.byte	0x6
	.byte	0x8
	.byte	0x9
	.byte	0xb
	.byte	0xc
	.byte	0xe
	.byte	0xf
	.byte	0x10
	.size	 gUnknown_082F3344,8
	.align	2, 0
	.type	 sPressingSpeedConversionTable,object
sPressingSpeedConversionTable:
	.word	0x2faf080
	.word	0x17d7840
	.word	0xbebc20
	.word	0x5f5e10
	.word	0x2faf08
	.word	0x17d784
	.word	0xbebc2
	.word	0x5f5e1
	.size	 sPressingSpeedConversionTable,32
	.align	1, 0
	.type	 gBerryCrushGrinderBasePal,object
gBerryCrushGrinderBasePal:
	.short	0x5eff
	.short	0x2a12
	.short	0x3a96
	.short	0x4af9
	.short	0x573a
	.short	0x5f7c
	.short	0x67be
	.short	0x77ff
	.short	0x39ac
	.short	0x41ee
	.short	0x0
	.short	0x960
	.short	0x1f
	.short	0x6546
	.short	0x4295
	.short	0x2d28
	.size	 gBerryCrushGrinderBasePal,32
	.align	1, 0
	.type	 gBerryCrushMiscSpritesPal,object
gBerryCrushMiscSpritesPal:
	.short	0x5eff
	.short	0x57bf
	.short	0x3ff
	.short	0x279f
	.short	0x23f
	.short	0x7ff8
	.short	0x7f51
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x67f8
	.short	0x435f
	.short	0x4fff
	.short	0x7fff
	.size	 gBerryCrushMiscSpritesPal,32
	.align	1, 0
	.type	 gBerryCrushTimerDigitsPal,object
gBerryCrushTimerDigitsPal:
	.short	0x0
	.short	0x5372
	.short	0x5794
	.short	0x5fb6
	.short	0x67d8
	.short	0x6ffa
	.short	0x77fd
	.short	0x7db9
	.short	0x6d55
	.short	0x4a52
	.short	0x3def
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x5ef6
	.short	0x7fff
	.size	 gBerryCrushTimerDigitsPal,32
	.align	2, 0
	.type	 gBerryCrushGrinderBaseGfx,object
gBerryCrushGrinderBaseGfx:
	.word	0x80010
	.word	-0xfffffd0
	.word	-0xfe6fff
	.word	0x2343441
	.word	0x3344215f
	.word	0x700115f
	.word	0x33410415
	.word	0x11555f
	.word	0x211503
	.word	0x114555f0
	.word	0x245555f0
	.word	0x11111300
	.word	0x11233322
	.word	0x33330011
	.word	0x23331122
	.word	0xc62223
	.word	0x230f0007
	.word	0x7003122
	.word	-0x64dde600
	.word	0x21110110
	.word	0xd000b10
	.word	-0x2feeafee
	.word	0x1800f001
	.word	0x28000120
	.word	0x111101d0
	.word	0x11101131
	.word	0x65003332
	.word	0x32322233
	.word	0x505d10d0
	.word	0x1c101307
	.word	-0xebbcbd
	.word	0x12443300
	.word	0x114343f5
	.word	0x143300f5
	.word	0x1133f551
	.word	0x1200f555
	.word	0x11f55551
	.word	0xf0f5554
	.word	0xf555542
	.word	0x1f0d1f0
	.word	-0x7ffe10
	.word	0x45455200
	.word	0x4455325f
	.word	0x22405f
	.word	0x44522507
	.word	-0x6bddaaa1
	.word	0x32250300
	.word	0x22ff00
	.word	-0x7febcb01
	.word	0x2444d200
	.word	0x44441111
	.word	0x44110023
	.word	0x44333434
	.word	0x335d3344
	.word	0x420710
	.word	-0x7f54dff9
	.word	-0x19ffcc01
	.word	-0x4fccccc4
	.word	-0x2f003fff
	.word	0x1155011e
	.word	0x11110241
	.word	0x32114442
	.word	0x68435900
	.word	0x505d1043
	.word	0x3d102407
	.word	0x255454
	.word	0x235544ff
	.word	0x225454f5
	.word	0x2544f500
	.word	0x2244f552
	.word	0x23f50255
	.word	0x22f55552
	.word	-0xabc0100
	.word	0x1f0fff0
	.word	-0x1ffe10
	.word	0x6fff006f
	.word	0x6f01ff00
	.word	0x6f445226
	.word	0x3002266
	.word	-0xfcdda00
	.word	-0xfdda99a
	.word	0x35661066
	.word	0x44e40024
	.word	-0x51ddddcc
	.word	-0x1fdd6b00
	.word	-0x3cbfcd01
	.word	-0x1aeff900
	.word	0x11236f33
	.word	0x3301f011
	.word	0x1201810
	.word	0x20b13040
	.word	0x22224207
	.word	0x65004443
	.word	0x3700fff0
	.word	-0x900bf60
	.word	0x44f6ff00
	.word	0xf66225
	.word	-0x999ddbc
	.word	-0x9999ddd
	.word	0x66652201
	.word	0x6666530f
	.word	-0xf1f0010
	.word	-0x6ffe0fff
	.word	0x565662ff
	.word	0x6608326f
	.word	0x226f55
	.word	0x55622607
	.word	0xff00c1
	.word	0x2f322603
	.word	-0xff999a
	.word	0x25365618
	.word	0xa02d200
	.word	-0x75aaaade
	.word	0x45457901
	.word	0x44070044
	.word	-0x4badf8f0
	.word	0x11220700
	.word	0x34ff80b3
	.word	0x4444e600
	.word	-0x3ffe4f2f
	.word	0x1fe043ff
	.word	0x1522222
	.word	0x7502cde5
	.word	0x54545900
	.word	0x7505d10
	.word	0x730225
	.word	0x26656522
	.word	0x236655ff
	.word	0x6565f600
	.word	0x2655f622
	.word	0x55f62162
	.word	0x6666ff50
	.word	0x30163f2
	.word	-0xf2e0f08
	.word	0x7001f001
	.word	0x55e30101
	.word	0x560a6f00
	.word	0x2f0056
	.word	0x700f007
	.word	0x556f3300
	.word	0x3001500
	.word	0x1f10ff00
	.word	0x4416ff00
	.word	-0xefcaab
	.word	0x10ffa054
	.word	0xcf5f07
	.word	0x22c31007
	.word	-0xffcffbe
	.word	0x20180ff
	.word	-0xf1ebb
	.word	-0xdffed0
	.word	0x45225553
	.word	0x1090ffe0
	.word	0x155f507
	.word	-0x99a9a1d
	.word	0x66550000
	.word	0x656500f2
	.word	0x550f000f
	.word	0x120000f6
	.word	-0xf63df0b
	.word	-0xffe0fff
	.word	0x1f001f0
	.word	0x1f7101f0
	.word	0x44441f
	.word	0x44ffff02
	.word	0x98f000
	.word	-0x66a3608e
	.word	0x109f1100
	.word	0x501f5016
	.word	0x41ffc6
	.word	-0x77bbbc
	.word	-0x7770001
	.word	-0x700000ea
	.word	0xf00300
	.word	-0x5afff5
	.word	0x14e870ab
	.word	0xff1100
	.word	0x3108f22
	.word	-0xdfdf00
	.word	0x4421100f
	.word	0x440ff144
	.word	-0xf7ff80
	.word	-0x66fff077
	.word	0x3f00f9
	.word	-0xe24ff07
	.word	-0xffe0f2c
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f10
	.word	-0x6ffe0fff
	.word	0x1
	.size	 gBerryCrushGrinderBaseGfx,812
	.align	2, 0
	.type	 gBerryCrushBtnPressGfx,object
gBerryCrushBtnPressGfx:
	.word	0xe0010
	.word	-0xfffffc1
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0x5fe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0xf00120
	.word	-0x2f5000fe
	.word	0x3800f14
	.word	-0xfe21f01
	.word	-0x1ffe0fff
	.word	0x4510ff01
	.word	0x7206b00
	.word	0x1cb05610
	.word	0x18101100
	.word	-0xf00dbb0
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f18
	.word	0x1001c001
	.word	0x110340
	.word	0x11110511
	.word	0x111000
	.word	0xd10010d
	.word	0x300e00f9
	.word	0x100d0020
	.word	0x1e200e
	.word	-0xf2ffef
	.word	0x11401f10
	.word	0x1f04ef0
	.word	0x18001f0
	.word	-0x7edfbef0
	.word	0x205710ff
	.word	0x40582074
	.word	0x400a4015
	.word	0x107b0073
	.word	0x1140ff1e
	.word	0x1f00320
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf02fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x201e001
	.word	0x227d0340
	.word	0x1f01af0
	.word	0x1f001f0
	.word	0x10200130
	.word	-0xfdf9db1
	.word	0x20030013
	.word	0x1002222
	.word	0x2009700
	.word	0x79002200
	.word	-0x7ffcefe0
	.word	0x7f130084
	.word	0x101c0020
	.word	0x402f101d
	.word	0x601e2021
	.word	-0xfe0fd9
	.word	0x2e4001f0
	.word	0x10a04310
	.word	0x44001420
	.word	0x70200320
	.word	0x209620fb
	.word	0x40038009
	.word	0x22283066
	.word	-0x5cafd3f0
	.word	-0xf7f0f01
	.word	0x4001f001
	.word	-0xf13bf02
	.word	-0xff38eff
	.word	0x1f0ffe1
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf1dfe10
	.word	-0xffe0fff
	.word	0x30000001
	.word	0x330340
	.word	0x33333330
	.word	0x3333300
	.word	0x330001e
	.word	0x3101100
	.word	0xd002470
	.word	0x1900af00
	.word	0x3230000
	.word	0x1f402300
	.word	0x1f01510
	.word	-0xffe0f01
	.word	0x7db001
	.word	0x10761047
	.word	0x1005005b
	.word	-0x689f0896
	.word	0x72106750
	.word	0x20337a20
	.word	-0xffe0f75
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x209401f0
	.word	0x44001
	.word	0x4004404
	.word	0xcc4444
	.word	0x3000c
	.word	0x40038040
	.word	-0xbbbbed
	.word	0x2b100130
	.word	0xd100170
	.word	0x41403d20
	.word	0x1f04b30
	.word	0x300160ff
	.word	0x402e2040
	.word	0x60675003
	.word	0x4089204e
	.word	0x180af0c
	.word	-0xafcffb0
	.word	0x76070600
	.word	0x3b50a320
	.word	0x50120af
	.word	0x175f0300
	.word	0x80093
	.word	-0x236df5c
	.word	-0x2f2fb8b0
	.word	-0x57efa5d0
	.word	0x29000310
	.word	0x7f302040
	.word	0x10060044
	.word	0x176a102a
	.word	0x206b00da
	.word	-0x679f8d
	.word	0x6310e350
	.word	0x73106b10
	.word	0x2b714591
	.word	0x59613ca1
	.word	0x60fa10ff
	.word	0x7001f062
	.word	0x10270048
	.word	0x3096108b
	.word	-0x52bf00f5
	.word	0x1b102070
	.word	0x59101810
	.word	0x2ed1c740
	.word	-0xe00fe10
	.word	0x109c60f6
	.word	0x20ad4068
	.word	0x10bea046
	.word	0x5f08110a
	.word	0x55f01050
	.word	-0x689f040f
	.word	0x6bc001f0
	.word	0xf56721
	.word	0x40aaf009
	.word	0x555d3001
	.word	0x506800
	.word	0x5f50010a
	.word	-0xaafffb
	.word	0x30055
	.word	-0xaaaafa1
	.word	-0xaa01
	.word	0x600ff5d
	.word	0x108c20ff
	.word	0x5503001e
	.word	-0xaad77ff
	.word	0x20ff2600
	.word	0x55503
	.word	-0x4e00aadf
	.word	-0xf9f0fd4
	.word	0x4207319c
	.word	0x240006
	.word	-0x3097ff9d
	.word	0x7f100330
	.word	0x6b205555
	.word	0x6400ff59
	.word	0x40ff0200
	.word	0x833073
	.word	-0x3d48bf8b
	.word	0x424da115
	.word	-0xfe0ff8
	.word	0x739201f0
	.word	0x13a33712
	.word	-0x659d93f0
	.word	0xf637352
	.word	0x121b12ff
	.word	-0x2fd0afc1
	.word	0x603e3003
	.word	0x304941b0
	.word	0x22d1c710
	.word	0x5555f221
	.word	0x10df1005
	.word	-0x40227fe8
	.word	0x30508571
	.word	0x109450fd
	.word	0x7003f023
	.word	-0x20987ffd
	.word	0x56505250
	.word	-0xeb4fffb
	.word	-0xffe0fc0
	.word	-0x4c3fff
	.word	-0x37dfeb10
	.word	-0x51ff33e0
	.word	0x4461f740
	.word	0x380de22
	.word	0x503ef0ff
	.word	-0x2bbf0d50
	.word	0x2f02a3
	.word	-0x6f7b7fd3
	.word	0x3e40fffb
	.word	0x3012ff80
	.word	0x30703610
	.word	0x5bf06f21
	.word	0x30fe6580
	.word	-0x7f540f38
	.word	0x604e005c
	.word	0x502920e5
	.word	0x507d
	.size	 gBerryCrushBtnPressGfx,892
	.align	2, 0
	.type	 gBerryCrushSparkleGfx,object
gBerryCrushSparkleGfx:
	.word	0x70010
	.word	-0x3fffffe0
	.word	0xef001
	.word	0xd6be000
	.word	0x1f016e0
	.word	-0x21fcff11
	.word	0x1f016f0
	.word	-0xfa50f3a
	.word	-0x3fffffff
	.word	0x6002010
	.word	0xcf7fff
	.word	0x10240007
	.word	-0xffe0ff1
	.word	-0xffe0f81
	.word	0x7ff0e701
	.word	-0x7caffe10
	.word	0x7000cfc
	.word	0x1f024f0
	.word	-0xf800f01
	.word	-0xf800fff
	.word	-0xfdb0f81
	.word	0x19024
	.word	0xf002b9f
	.word	0xffa700
	.word	0x1ef0df08
	.word	-0xf05d010
	.word	-0xffe0fa6
	.word	-0x4ffe0f81
	.word	-0x58fe3fad
	.word	-0xe238900
	.word	0x512cf041
	.word	-0x250eff26
	.word	0x7ff001f0
	.word	-0xefe0f01
	.word	-0xffe0f81
	.word	-0xf250e7d
	.word	-0xf800fff
	.word	0x7ff0ff01
	.word	0x1f001f0
	.word	-0x5f0fa510
	.word	0x2800ff72
	.word	-0xf60db0f
	.word	-0xf11ff81
	.word	-0x4ffe0fea
	.word	-0xffcff81
	.word	-0x5fbe3085
	.word	-0x3dfff
	.word	0x28115702
	.word	-0x7c0ff0f0
	.word	-0xf800f08
	.word	-0xffe0fff
	.word	0xc4dd27f
	.word	-0x3803310
	.word	0x350fb20
	.word	0x17100f10
	.word	0x7ff02df0
	.word	-0xf00800e
	.word	-0xe809dec
	.word	-0xf000fa6
	.word	-0xffe0f01
	.word	0x6f01107f
	.word	0x605af0fc
	.word	0x5af0005a
	.word	-0x5bcdd310
	.word	-0xf01db0f
	.word	0x117f6001
	.word	0x50525023
	.word	0x410f1003
	.word	0x7f0c3b
	.word	-0x4dfb5ff
	.word	0xf100350
	.word	-0x5b0da50f
	.word	0x44cf01f0
	.word	-0x3f04fc85
	.word	0x14a811ff
	.word	-0x4f000ffd
	.word	0xf7fd2
	.word	-0xf08cf74
	.word	-0xffe0f01
	.word	-0xbfe0f81
	.word	0x1f0f07f
	.word	0x5af187f0
	.word	0x110
	.size	 gBerryCrushSparkleGfx,332
	.type	 gBerryCrushTimerDigitsGfx,object
gBerryCrushTimerDigitsGfx:
	.byte	0x10
	.byte	0xc0
	.byte	0x2
	.byte	0x0
	.byte	0x20
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x1
	.byte	0xee
	.byte	0xee
	.byte	0x0
	.byte	0xe0
	.byte	0xff
	.byte	0x1
	.byte	0xff
	.byte	0xe
	.byte	0xfe
	.byte	0xff
	.byte	0xff
	.byte	0xef
	.byte	0xfe
	.byte	0xf0
	.byte	0x1
	.byte	0xf8
	.byte	0xb0
	.byte	0x1
	.byte	0x0
	.byte	0x23
	.byte	0x10
	.byte	0x2b
	.byte	0x10
	.byte	0x33
	.byte	0x60
	.byte	0x3f
	.byte	0x0
	.byte	0xee
	.byte	0xe
	.byte	0x83
	.byte	0x0
	.byte	0x40
	.byte	0xe
	.byte	0x0
	.byte	0xfe
	.byte	0xff
	.byte	0xe
	.byte	0x10
	.byte	0x1b
	.byte	0x20
	.byte	0x3
	.byte	0x7e
	.byte	0xee
	.byte	0x0
	.byte	0xf
	.byte	0x10
	.byte	0x13
	.byte	0xf0
	.byte	0x3
	.byte	0x40
	.byte	0x3
	.byte	0x0
	.byte	0x33
	.byte	0x60
	.byte	0x7e
	.byte	0xee
	.byte	0xc0
	.byte	0x0
	.byte	0x3a
	.byte	0x30
	.byte	0x7f
	.byte	0xee
	.byte	0xee
	.byte	0xfe
	.byte	0xef
	.byte	0x0
	.byte	0x0
	.byte	0xf1
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x7
	.byte	0x0
	.byte	0x47
	.byte	0x10
	.byte	0x6f
	.byte	0xe
	.byte	0xfe
	.byte	0xef
	.byte	0x0
	.byte	0x1f
	.byte	0xff
	.byte	0x20
	.byte	0x15
	.byte	0x0
	.byte	0x1d
	.byte	0x30
	.byte	0x13
	.byte	0x0
	.byte	0x9
	.byte	0x80
	.byte	0x80
	.byte	0xf0
	.byte	0xbf
	.byte	0x30
	.byte	0x47
	.byte	0x0
	.byte	0x8f
	.byte	0xff
	.byte	0x10
	.byte	0x3
	.byte	0x10
	.byte	0xb
	.byte	0xf0
	.byte	0xbf
	.byte	0xa0
	.byte	0x3e
	.byte	0x50
	.byte	0x5f
	.byte	0x0
	.byte	0x6b
	.byte	0x10
	.byte	0x6f
	.byte	0x60
	.byte	0x3
	.byte	0xbf
	.byte	0x80
	.byte	0x6f
	.byte	0xff
	.byte	0x10
	.byte	0x64
	.byte	0xf0
	.byte	0xbf
	.byte	0x30
	.byte	0xbf
	.byte	0x60
	.byte	0x27
	.byte	0x40
	.byte	0x79
	.byte	0x10
	.byte	0x4b
	.byte	0xff
	.byte	0xe0
	.byte	0xd3
	.byte	0x20
	.byte	0x87
	.byte	0x40
	.byte	0xd3
	.byte	0x90
	.byte	0xbe
	.byte	0xf0
	.byte	0xbf
	.byte	0x40
	.byte	0xc1
	.byte	0xf1
	.byte	0x93
	.byte	0xf0
	.byte	0xbf
	.byte	0xcf
	.byte	0xc0
	.byte	0x7f
	.byte	0x20
	.byte	0x6b
	.byte	0xe0
	.byte	0xff
	.byte	0x10
	.byte	0x3
	.byte	0x20
	.byte	0xfb
	.byte	0x40
	.byte	0xd8
	.byte	0xf0
	.byte	0x3
	.byte	0xff
	.byte	0xf0
	.byte	0x7f
	.byte	0xe0
	.byte	0x6b
	.byte	0x51
	.byte	0xcb
	.byte	0xf0
	.byte	0x7f
	.byte	0xc1
	.byte	0xff
	.byte	0xf0
	.byte	0x3f
	.byte	0x90
	.byte	0x2b
	.byte	0x30
	.byte	0xf7
	.byte	0xf8
	.byte	0xf0
	.byte	0x3f
	.byte	0x82
	.byte	0x3f
	.byte	0xe1
	.byte	0x88
	.byte	0xe0
	.byte	0x9f
	.byte	0xf0
	.byte	0x17
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 gBerryCrushTimerDigitsGfx,204
	.type	 gBerryCrushGrinderTopTilemap,object
gBerryCrushGrinderTopTilemap:
	.byte	0x10
	.byte	0x80
	.byte	0x2
	.byte	0x0
	.byte	0x3e
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0x70
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x5
	.byte	0x0
	.byte	0x20
	.byte	0x6
	.byte	0x20
	.byte	0x7
	.byte	0x10
	.byte	0x8
	.byte	0x10
	.byte	0x9
	.byte	0xe
	.byte	0x10
	.byte	0xa
	.byte	0x0
	.byte	0xb
	.byte	0xf0
	.byte	0x26
	.byte	0xf0
	.byte	0x1
	.byte	0x20
	.byte	0x1
	.byte	0x10
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0x0
	.byte	0x12
	.byte	0x0
	.byte	0x13
	.byte	0x0
	.byte	0x14
	.byte	0x0
	.byte	0x0
	.byte	0x15
	.byte	0x20
	.byte	0x16
	.byte	0x20
	.byte	0x17
	.byte	0x0
	.byte	0x18
	.byte	0x1
	.byte	0x0
	.byte	0x19
	.byte	0x10
	.byte	0x1a
	.byte	0x10
	.byte	0x1b
	.byte	0x10
	.byte	0xf0
	.byte	0x29
	.byte	0xa0
	.byte	0xf0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x67
	.byte	0xc
	.byte	0x0
	.byte	0xd
	.byte	0x0
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x20
	.byte	0x20
	.byte	0x21
	.byte	0x20
	.byte	0x22
	.byte	0x0
	.byte	0x20
	.byte	0x23
	.byte	0x20
	.byte	0x24
	.byte	0x10
	.byte	0x25
	.byte	0x10
	.byte	0x26
	.byte	0x38
	.byte	0x10
	.byte	0x27
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x1
	.byte	0x20
	.byte	0x1
	.byte	0x1c
	.byte	0x0
	.byte	0x1d
	.byte	0x0
	.byte	0x0
	.byte	0x1e
	.byte	0x0
	.byte	0x1f
	.byte	0x0
	.byte	0x30
	.byte	0x20
	.byte	0x31
	.byte	0x0
	.byte	0x20
	.byte	0x32
	.byte	0x20
	.byte	0x33
	.byte	0x20
	.byte	0x34
	.byte	0x0
	.byte	0x35
	.byte	0xe
	.byte	0x10
	.byte	0x36
	.byte	0x10
	.byte	0x37
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x1
	.byte	0x20
	.byte	0x1
	.byte	0x28
	.byte	0x0
	.byte	0x0
	.byte	0x29
	.byte	0x0
	.byte	0x2a
	.byte	0x0
	.byte	0x2b
	.byte	0x0
	.byte	0x2c
	.byte	0x0
	.byte	0x0
	.byte	0x2d
	.byte	0x20
	.byte	0x2d
	.byte	0x24
	.byte	0x2c
	.byte	0x14
	.byte	0x2b
	.byte	0x3
	.byte	0x14
	.byte	0x2a
	.byte	0x14
	.byte	0x29
	.byte	0x4
	.byte	0x2e
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x1
	.byte	0x80
	.byte	0x20
	.byte	0x1
	.byte	0x38
	.byte	0x0
	.byte	0x39
	.byte	0x0
	.byte	0x3a
	.byte	0x0
	.byte	0x3b
	.byte	0x0
	.byte	0x0
	.byte	0x3c
	.byte	0x0
	.byte	0x3d
	.byte	0x0
	.byte	0x3d
	.byte	0x4
	.byte	0x3c
	.byte	0x0
	.byte	0x14
	.byte	0x3b
	.byte	0x14
	.byte	0x3a
	.byte	0x14
	.byte	0x39
	.byte	0x4
	.byte	0x38
	.byte	0x70
	.byte	0x4
	.byte	0xf0
	.byte	0x29
	.byte	0xf0
	.byte	0x1
	.byte	0x10
	.byte	0x1
	.byte	0x40
	.byte	0x0
	.byte	0x41
	.byte	0x0
	.byte	0x0
	.byte	0x42
	.byte	0x0
	.byte	0x43
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x45
	.byte	0x0
	.byte	0x0
	.byte	0x45
	.byte	0x4
	.byte	0x44
	.byte	0x14
	.byte	0x43
	.byte	0x14
	.byte	0x42
	.byte	0x14
	.byte	0x1c
	.byte	0x41
	.byte	0x4
	.byte	0x40
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x1
	.byte	0x20
	.byte	0x1
	.byte	0x50
	.byte	0x0
	.byte	0x0
	.byte	0x51
	.byte	0x0
	.byte	0x52
	.byte	0x0
	.byte	0x53
	.byte	0x0
	.byte	0x54
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x55
	.byte	0x4
	.byte	0x54
	.byte	0x4
	.byte	0x53
	.byte	0x4
	.byte	0x7
	.byte	0x52
	.byte	0x4
	.byte	0x51
	.byte	0x4
	.byte	0x50
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x1
	.byte	0x60
	.byte	0x1
	.byte	0x0
	.byte	0x46
	.byte	0x0
	.byte	0x47
	.byte	0x0
	.byte	0x48
	.byte	0x0
	.byte	0x49
	.byte	0x0
	.byte	0x0
	.byte	0x49
	.byte	0x4
	.byte	0x48
	.byte	0x4
	.byte	0x47
	.byte	0x4
	.byte	0x46
	.byte	0x4
	.byte	0xe0
	.byte	0x2
	.byte	0xc
	.byte	0xf0
	.byte	0x3f
	.byte	0x20
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 gBerryCrushGrinderTopTilemap,304
	.type	 gBerryCrushContainerCapTilemap,object
gBerryCrushContainerCapTilemap:
	.byte	0x10
	.byte	0x0
	.byte	0x5
	.byte	0x0
	.byte	0x3f
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xff
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xff
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xff
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xe0
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xb0
	.byte	0x1
	.byte	0x60
	.byte	0x50
	.byte	0x61
	.byte	0x50
	.byte	0x62
	.byte	0x0
	.byte	0x50
	.byte	0x63
	.byte	0x50
	.byte	0x64
	.byte	0x50
	.byte	0x65
	.byte	0x50
	.byte	0x0
	.byte	0x0
	.byte	0x50
	.byte	0x0
	.byte	0x54
	.byte	0x65
	.byte	0x54
	.byte	0x64
	.byte	0x54
	.byte	0x63
	.byte	0x1
	.byte	0x54
	.byte	0x62
	.byte	0x54
	.byte	0x61
	.byte	0x54
	.byte	0x60
	.byte	0x54
	.byte	0xf0
	.byte	0x2d
	.byte	0x80
	.byte	0xf0
	.byte	0x1
	.byte	0x70
	.byte	0x50
	.byte	0x71
	.byte	0x50
	.byte	0x72
	.byte	0x50
	.byte	0x73
	.byte	0x8
	.byte	0x50
	.byte	0x74
	.byte	0x50
	.byte	0x75
	.byte	0x20
	.byte	0x3f
	.byte	0x75
	.byte	0x54
	.byte	0x74
	.byte	0x0
	.byte	0x54
	.byte	0x73
	.byte	0x54
	.byte	0x72
	.byte	0x54
	.byte	0x71
	.byte	0x54
	.byte	0x70
	.byte	0xc0
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x1
	.byte	0x0
	.byte	0x66
	.byte	0x50
	.byte	0x67
	.byte	0x50
	.byte	0x68
	.byte	0x0
	.byte	0x50
	.byte	0x69
	.byte	0x50
	.byte	0x6a
	.byte	0x50
	.byte	0x6b
	.byte	0x50
	.byte	0x6c
	.byte	0x0
	.byte	0x50
	.byte	0x6c
	.byte	0x54
	.byte	0x6b
	.byte	0x54
	.byte	0x6a
	.byte	0x54
	.byte	0x69
	.byte	0x3
	.byte	0x54
	.byte	0x68
	.byte	0x54
	.byte	0x67
	.byte	0x54
	.byte	0x66
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x76
	.byte	0x50
	.byte	0x77
	.byte	0x50
	.byte	0x78
	.byte	0x50
	.byte	0x79
	.byte	0x0
	.byte	0x50
	.byte	0x7a
	.byte	0x50
	.byte	0x7b
	.byte	0x50
	.byte	0x7c
	.byte	0x50
	.byte	0x7c
	.byte	0x0
	.byte	0x54
	.byte	0x7b
	.byte	0x54
	.byte	0x7a
	.byte	0x54
	.byte	0x79
	.byte	0x54
	.byte	0x78
	.byte	0xc
	.byte	0x54
	.byte	0x77
	.byte	0x54
	.byte	0x76
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x1
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x50
	.byte	0x81
	.byte	0x50
	.byte	0x82
	.byte	0x50
	.byte	0x83
	.byte	0x50
	.byte	0x84
	.byte	0x0
	.byte	0x50
	.byte	0x85
	.byte	0x50
	.byte	0x86
	.byte	0x50
	.byte	0x86
	.byte	0x54
	.byte	0x85
	.byte	0x0
	.byte	0x54
	.byte	0x84
	.byte	0x54
	.byte	0x83
	.byte	0x54
	.byte	0x82
	.byte	0x54
	.byte	0x81
	.byte	0x30
	.byte	0x54
	.byte	0x80
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x1
	.byte	0x0
	.byte	0x90
	.byte	0x50
	.byte	0x91
	.byte	0x0
	.byte	0x50
	.byte	0x92
	.byte	0x50
	.byte	0x93
	.byte	0x50
	.byte	0x94
	.byte	0x50
	.byte	0x95
	.byte	0x0
	.byte	0x50
	.byte	0x96
	.byte	0x50
	.byte	0x96
	.byte	0x54
	.byte	0x95
	.byte	0x54
	.byte	0x94
	.byte	0x0
	.byte	0x54
	.byte	0x93
	.byte	0x54
	.byte	0x92
	.byte	0x54
	.byte	0x91
	.byte	0x54
	.byte	0x90
	.byte	0xc0
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x1
	.byte	0x0
	.byte	0x88
	.byte	0x50
	.byte	0x89
	.byte	0x50
	.byte	0x8a
	.byte	0x0
	.byte	0x50
	.byte	0x8b
	.byte	0x50
	.byte	0x8c
	.byte	0x50
	.byte	0x8d
	.byte	0x50
	.byte	0x8e
	.byte	0x0
	.byte	0x50
	.byte	0x8e
	.byte	0x54
	.byte	0x8d
	.byte	0x54
	.byte	0x8c
	.byte	0x54
	.byte	0x8b
	.byte	0x3
	.byte	0x54
	.byte	0x8a
	.byte	0x54
	.byte	0x89
	.byte	0x54
	.byte	0x88
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x98
	.byte	0x50
	.byte	0x99
	.byte	0x50
	.byte	0x9a
	.byte	0x50
	.byte	0x9b
	.byte	0x0
	.byte	0x50
	.byte	0x9c
	.byte	0x50
	.byte	0x9d
	.byte	0x50
	.byte	0x9e
	.byte	0x50
	.byte	0x9e
	.byte	0x0
	.byte	0x54
	.byte	0x9d
	.byte	0x54
	.byte	0x9c
	.byte	0x54
	.byte	0x9b
	.byte	0x54
	.byte	0x9a
	.byte	0xd
	.byte	0x54
	.byte	0x99
	.byte	0x54
	.byte	0x98
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0xb3
	.byte	0x80
	.byte	0x0
	.byte	0x1
	.byte	0x56
	.byte	0x50
	.byte	0x57
	.byte	0x50
	.byte	0x58
	.byte	0x50
	.byte	0xbb
	.byte	0x0
	.byte	0x50
	.byte	0xbc
	.byte	0x50
	.byte	0x58
	.byte	0x54
	.byte	0x57
	.byte	0x54
	.byte	0x56
	.byte	0x3d
	.byte	0x54
	.byte	0x0
	.byte	0x30
	.byte	0x1
	.byte	0xf0
	.byte	0x2d
	.byte	0xf0
	.byte	0x1
	.byte	0x50
	.byte	0x2b
	.byte	0x54
	.byte	0x30
	.byte	0x49
	.byte	0xfc
	.byte	0xa0
	.byte	0x1
	.byte	0xf0
	.byte	0x2d
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0x80
	.byte	0x1
	.byte	0x0
	.size	 gBerryCrushContainerCapTilemap,408
	.type	 gBerryCrushBackgroundTilemap,object
gBerryCrushBackgroundTilemap:
	.byte	0x10
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x36
	.byte	0xae
	.byte	0x40
	.byte	0xf0
	.byte	0x1
	.byte	0x30
	.byte	0x1
	.byte	0xaf
	.byte	0xf0
	.byte	0x3
	.byte	0xc0
	.byte	0x3
	.byte	0x0
	.byte	0x6
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xbe
	.byte	0x40
	.byte	0xf0
	.byte	0x1
	.byte	0x30
	.byte	0x1
	.byte	0xbf
	.byte	0xe5
	.byte	0xf0
	.byte	0x3
	.byte	0xc0
	.byte	0x3
	.byte	0x10
	.byte	0x3f
	.byte	0xce
	.byte	0x40
	.byte	0xd0
	.byte	0x1
	.byte	0xcf
	.byte	0xf0
	.byte	0x3
	.byte	0xe7
	.byte	0xf0
	.byte	0x3
	.byte	0x20
	.byte	0x3
	.byte	0x10
	.byte	0x3f
	.byte	0xde
	.byte	0x40
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xcf
	.byte	0x10
	.byte	0x1
	.byte	0x10
	.byte	0x3f
	.byte	0xef
	.byte	0x40
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0x10
	.byte	0x1
	.byte	0x97
	.byte	0x10
	.byte	0x3f
	.byte	0xff
	.byte	0x40
	.byte	0xf0
	.byte	0x1
	.byte	0xfe
	.byte	0xf0
	.byte	0x3
	.byte	0xf0
	.byte	0x3
	.byte	0x0
	.byte	0x3
	.byte	0x90
	.byte	0x10
	.byte	0x3f
	.byte	0xa2
	.byte	0x30
	.byte	0xf0
	.byte	0x1
	.byte	0xa2
	.byte	0x30
	.byte	0xa3
	.byte	0x30
	.byte	0x0
	.byte	0xa4
	.byte	0x30
	.byte	0xa5
	.byte	0x30
	.byte	0xa6
	.byte	0x30
	.byte	0xa6
	.byte	0x34
	.byte	0x1
	.byte	0xa5
	.byte	0x34
	.byte	0xa4
	.byte	0x34
	.byte	0xa3
	.byte	0x34
	.byte	0xa2
	.byte	0xf0
	.byte	0x1
	.byte	0xe0
	.byte	0x0
	.byte	0x1
	.byte	0xf0
	.byte	0x7f
	.byte	0x10
	.byte	0x1
	.byte	0xa8
	.byte	0x30
	.byte	0xa9
	.byte	0x30
	.byte	0xaa
	.byte	0x0
	.byte	0x30
	.byte	0xab
	.byte	0x30
	.byte	0xac
	.byte	0x30
	.byte	0xad
	.byte	0x30
	.byte	0xad
	.byte	0x0
	.byte	0x34
	.byte	0xac
	.byte	0x34
	.byte	0xab
	.byte	0x34
	.byte	0xaa
	.byte	0x34
	.byte	0xa9
	.byte	0x18
	.byte	0x34
	.byte	0xa8
	.byte	0x34
	.byte	0xf0
	.byte	0x29
	.byte	0xf0
	.byte	0x3f
	.byte	0xff
	.byte	0x40
	.byte	0xb0
	.byte	0x0
	.byte	0x30
	.byte	0xb1
	.byte	0x30
	.byte	0xb2
	.byte	0x30
	.byte	0xb3
	.byte	0x30
	.byte	0xb4
	.byte	0x0
	.byte	0x30
	.byte	0xb5
	.byte	0x30
	.byte	0xb6
	.byte	0x30
	.byte	0xb6
	.byte	0x34
	.byte	0xb5
	.byte	0x0
	.byte	0x34
	.byte	0xb4
	.byte	0x34
	.byte	0xb3
	.byte	0x34
	.byte	0xb2
	.byte	0x34
	.byte	0xb1
	.byte	0x30
	.byte	0x34
	.byte	0xb0
	.byte	0xe0
	.byte	0x41
	.byte	0xf0
	.byte	0x3f
	.byte	0xd0
	.byte	0x70
	.byte	0xd1
	.byte	0x70
	.byte	0x0
	.byte	0xc1
	.byte	0x30
	.byte	0xc2
	.byte	0x30
	.byte	0xc3
	.byte	0x30
	.byte	0xc4
	.byte	0x30
	.byte	0x0
	.byte	0xc5
	.byte	0x30
	.byte	0xc6
	.byte	0x30
	.byte	0xc6
	.byte	0x34
	.byte	0xc5
	.byte	0x34
	.byte	0x0
	.byte	0xc4
	.byte	0x34
	.byte	0xc3
	.byte	0x34
	.byte	0xc2
	.byte	0x34
	.byte	0xc1
	.byte	0x34
	.byte	0xc
	.byte	0xd1
	.byte	0x74
	.byte	0xd0
	.byte	0x74
	.byte	0xf0
	.byte	0x3f
	.byte	0xb0
	.byte	0x11
	.byte	0xe0
	.byte	0x70
	.byte	0x20
	.byte	0xe1
	.byte	0x70
	.byte	0x10
	.byte	0x7
	.byte	0xb7
	.byte	0x30
	.byte	0xb8
	.byte	0x30
	.byte	0xb9
	.byte	0x0
	.byte	0x30
	.byte	0xba
	.byte	0x30
	.byte	0xba
	.byte	0x34
	.byte	0xb9
	.byte	0x34
	.byte	0xb8
	.byte	0x0
	.byte	0x34
	.byte	0xb7
	.byte	0x34
	.byte	0xff
	.byte	0x44
	.byte	0xff
	.byte	0x44
	.byte	0xe1
	.byte	0x31
	.byte	0x74
	.byte	0xe0
	.byte	0xf0
	.byte	0x3f
	.byte	0xc0
	.byte	0x3f
	.byte	0xf0
	.byte	0x70
	.byte	0xf1
	.byte	0x20
	.byte	0x3f
	.byte	0x0
	.byte	0xff
	.byte	0x40
	.byte	0xc8
	.byte	0x30
	.byte	0xc9
	.byte	0x30
	.byte	0xca
	.byte	0x30
	.byte	0x4
	.byte	0xca
	.byte	0x34
	.byte	0xc9
	.byte	0x34
	.byte	0xc8
	.byte	0x20
	.byte	0x3d
	.byte	0xff
	.byte	0x44
	.byte	0x18
	.byte	0xf1
	.byte	0x74
	.byte	0xf0
	.byte	0xf0
	.byte	0x3f
	.byte	0xc0
	.byte	0x3f
	.byte	0xd2
	.byte	0x70
	.byte	0xd3
	.byte	0xf1
	.byte	0x40
	.byte	0x3f
	.byte	0x60
	.byte	0x1
	.byte	0x20
	.byte	0x3b
	.byte	0x10
	.byte	0x1
	.byte	0xd3
	.byte	0x74
	.byte	0xd2
	.byte	0xf0
	.byte	0x3f
	.byte	0x8c
	.byte	0xc0
	.byte	0x3f
	.byte	0xe2
	.byte	0x70
	.byte	0xe3
	.byte	0xf0
	.byte	0x3f
	.byte	0x40
	.byte	0x1
	.byte	0xe3
	.byte	0x74
	.byte	0x63
	.byte	0xe2
	.byte	0xf0
	.byte	0x3f
	.byte	0xc0
	.byte	0x3f
	.byte	0xf2
	.byte	0x70
	.byte	0xf3
	.byte	0xf0
	.byte	0x3f
	.byte	0x40
	.byte	0x1
	.byte	0x18
	.byte	0xf3
	.byte	0x74
	.byte	0xf2
	.byte	0xf0
	.byte	0x3f
	.byte	0xc0
	.byte	0x3f
	.byte	0xd4
	.byte	0x70
	.byte	0xd5
	.byte	0x0
	.byte	0x70
	.byte	0xf4
	.byte	0x70
	.byte	0xf5
	.byte	0x70
	.byte	0xf6
	.byte	0x70
	.byte	0xf7
	.byte	0x20
	.byte	0x70
	.byte	0xf8
	.byte	0x30
	.byte	0x1
	.byte	0x74
	.byte	0xf7
	.byte	0x74
	.byte	0xf6
	.byte	0x74
	.byte	0x1
	.byte	0xf5
	.byte	0x74
	.byte	0xf4
	.byte	0x74
	.byte	0xd5
	.byte	0x74
	.byte	0xd4
	.byte	0xf0
	.byte	0x3f
	.byte	0x8c
	.byte	0xc0
	.byte	0x3f
	.byte	0xe4
	.byte	0x70
	.byte	0xe5
	.byte	0xf0
	.byte	0x3f
	.byte	0x40
	.byte	0x3f
	.byte	0xe5
	.byte	0x74
	.byte	0x60
	.byte	0xe4
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x3f
	.byte	0x70
	.byte	0xf9
	.byte	0x70
	.byte	0xfa
	.byte	0x70
	.byte	0x4
	.byte	0xfb
	.byte	0x70
	.byte	0xfc
	.byte	0x70
	.byte	0xfd
	.byte	0x20
	.byte	0x3f
	.byte	0xfd
	.byte	0x74
	.byte	0x1
	.byte	0xfc
	.byte	0x74
	.byte	0xfb
	.byte	0x74
	.byte	0xfa
	.byte	0x74
	.byte	0xf9
	.byte	0xf0
	.byte	0x3f
	.byte	0xc0
	.byte	0xf0
	.byte	0x3f
	.byte	0x20
	.byte	0x3f
	.byte	0xd6
	.byte	0x70
	.byte	0xd7
	.byte	0x70
	.byte	0xd8
	.byte	0x70
	.byte	0x40
	.byte	0xe6
	.byte	0x60
	.byte	0x3f
	.byte	0xe6
	.byte	0x74
	.byte	0xd8
	.byte	0x74
	.byte	0xd7
	.byte	0x74
	.byte	0x7f
	.byte	0xd6
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x3f
	.byte	0xff
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x3f
	.byte	0xf0
	.byte	0x3f
	.byte	0xe0
	.byte	0x3f
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xff
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xff
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xff
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xf0
	.byte	0x1
	.byte	0xff
	.byte	0xf0
	.byte	0x1
	.byte	0x50
	.byte	0x1
	.byte	0xf7
	.byte	0x77
	.byte	0xf7
	.byte	0x7f
	.byte	0xf0
	.byte	0x3
	.byte	0x77
	.byte	0x7f
	.byte	0xf0
	.byte	0x37
	.byte	0xf0
	.byte	0x3f
	.byte	0xc0
	.byte	0xf0
	.byte	0x3
	.byte	0x70
	.byte	0x3f
	.size	 gBerryCrushBackgroundTilemap,552
	.type	 gUnknown_082F417C,object
gUnknown_082F417C:
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x4
	.size	 gUnknown_082F417C,20
	.align	2, 0
	.type	 gUnknown_082F4190,object
gUnknown_082F4190:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.short	0x0
	.short	-0x10
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x3
	.space	1
	.short	-0x1c
	.short	-0x4
	.short	-0x18
	.short	0x10
	.byte	0x2
	.byte	0x0
	.byte	0x6
	.space	1
	.short	-0x10
	.short	0x14
	.short	-0x8
	.short	0x10
	.byte	0x3
	.byte	0x14
	.byte	0x3
	.space	1
	.short	0x1c
	.short	-0x4
	.short	0x20
	.short	-0x8
	.byte	0x4
	.byte	0x14
	.byte	0x6
	.space	1
	.short	0x10
	.short	0x14
	.short	0x10
	.short	-0x8
	.size	 gUnknown_082F4190,60
	.type	 gUnknown_082F41CC,object
gUnknown_082F41CC:
	.byte	0x0
	.byte	0x0
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.size	 gUnknown_082F41CC,6
	.type	 gUnknown_082F41D2,object
gUnknown_082F41D2:
	.byte	0x0
	.byte	0x0
	.byte	-0x10
	.byte	-0x4
	.byte	0x10
	.byte	-0x4
	.byte	-0x8
	.byte	-0x2
	.byte	0x8
	.byte	-0x2
	.byte	-0x18
	.byte	-0x8
	.byte	0x18
	.byte	-0x8
	.byte	-0x20
	.byte	-0xc
	.byte	0x20
	.byte	-0xc
	.byte	-0x28
	.byte	-0x10
	.byte	0x28
	.byte	-0x10
	.size	 gUnknown_082F41D2,22
	.align	1, 0
	.type	 gUnknown_082F41E8,object
gUnknown_082F41E8:
	.short	0x5
	.short	0x6
	.short	0x7
	.short	0x8
	.short	0x9
	.short	0x0
	.size	 gUnknown_082F41E8,12
	.align	2, 0
	.type	 gUnknown_082F41F4,object
gUnknown_082F41F4:
	.word	gBerryCrushGrinderBaseGfx
	.short	0x800
	.short	0x1
	.word	gBerryCrushBtnPressGfx
	.short	0xe00
	.short	0x2
	.word	gBerryCrushSparkleGfx
	.short	0x700
	.short	0x3
	.size	 gUnknown_082F41F4,24
	.align	2, 0
	.type	 gUnknown_082F420C,object
gUnknown_082F420C:
	.word	gBerryCrushTimerDigitsGfx
	.short	0x2c0
	.short	0x4
	.space	8
	.size	 gUnknown_082F420C,16
	.align	2, 0
	.type	 gUnknown_082F421C,object
gUnknown_082F421C:
	.word	gBerryCrushGrinderBasePal
	.short	0x1
	.space	2
	.word	gBerryCrushMiscSpritesPal
	.short	0x2
	.space	2
	.size	 gUnknown_082F421C,16
	.align	2, 0
	.type	 gUnknown_082F422C,object
gUnknown_082F422C:
	.word	gBerryCrushTimerDigitsPal
	.short	0x4
	.space	2
	.space	8
	.size	 gUnknown_082F422C,16
	.align	2, 0
	.type	 gUnknown_082F423C,object
gUnknown_082F423C:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_082F423C,8
	.align	2, 0
	.type	 gUnknown_082F4244,object
gUnknown_082F4244:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_082F4244,16
	.align	2, 0
	.type	 gUnknown_082F4254,object
gUnknown_082F4254:
	.short	0x30
	.byte	0x2
	.space	1
	.short	0x40
	.byte	0x2
	.space	1
	.short	0x50
	.byte	0x2
	.space	1
	.short	0x60
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_082F4254,20
	.align	2, 0
	.type	 gUnknown_082F4268,object
gUnknown_082F4268:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x4
	.byte	0x2
	.space	1
	.short	0x8
	.byte	0x2
	.space	1
	.short	0xc
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x14
	.byte	0x2
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_082F4268,28
	.align	2, 0
	.type	 gUnknown_082F4284,object
gUnknown_082F4284:
	.short	0x18
	.byte	0x4
	.space	1
	.short	0x1c
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x24
	.byte	0x4
	.space	1
	.short	0x28
	.byte	0x4
	.space	1
	.short	0x2c
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	0x34
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_082F4284,36
	.align	2, 0
	.type	 gUnknown_082F42A8,object
gUnknown_082F42A8:
	.short	0x14
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_082F42A8,8
	.align	2, 0
	.type	 gUnknown_082F42B0,object
gUnknown_082F42B0:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_082F42B0,8
	.align	2, 0
	.type	 gUnknown_082F42B8,object
gUnknown_082F42B8:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x2
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_082F42B8,24
	.align	2, 0
	.type	 gUnknown_082F42D0,object
gUnknown_082F42D0:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfe
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_082F42D0,24
	.align	2, 0
	.type	 gUnknown_082F42E8,object
gUnknown_082F42E8:
	.word	gUnknown_082F423C
	.size	 gUnknown_082F42E8,4
	.align	2, 0
	.type	 gUnknown_082F42EC,object
gUnknown_082F42EC:
	.word	gUnknown_082F4244
	.word	gUnknown_082F4254
	.size	 gUnknown_082F42EC,8
	.align	2, 0
	.type	 gUnknown_082F42F4,object
gUnknown_082F42F4:
	.word	gUnknown_082F4268
	.word	gUnknown_082F4284
	.size	 gUnknown_082F42F4,8
	.align	2, 0
	.type	 gUnknown_082F42FC,object
gUnknown_082F42FC:
	.word	gUnknown_082F42A8
	.size	 gUnknown_082F42FC,4
	.align	2, 0
	.type	 gUnknown_082F4300,object
gUnknown_082F4300:
	.word	gUnknown_082F42B0
	.size	 gUnknown_082F4300,4
	.align	2, 0
	.type	 gUnknown_082F4304,object
gUnknown_082F4304:
	.word	gUnknown_082F42B8
	.word	gUnknown_082F42D0
	.size	 gUnknown_082F4304,8
	.align	2, 0
	.type	 gUnknown_082F430C,object
	.size	 gUnknown_082F430C,24
gUnknown_082F430C:
	.short	0x1
	.short	0x1
	.word	gOamData_AffineOff_ObjNormal_64x64
	.word	gUnknown_082F42E8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 gUnknown_082F4324,object
	.size	 gUnknown_082F4324,24
gUnknown_082F4324:
	.short	0x2
	.short	0x2
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gUnknown_082F42EC
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8022A20
	.align	2, 0
	.type	 gUnknown_082F433C,object
	.size	 gUnknown_082F433C,24
gUnknown_082F433C:
	.short	0x3
	.short	0x2
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gUnknown_082F42F4
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 gUnknown_082F4354,object
	.size	 gUnknown_082F4354,24
gUnknown_082F4354:
	.short	0x4
	.short	0x4
	.word	gOamData_AffineOff_ObjNormal_8x16
	.word	gUnknown_082F42FC
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 gUnknown_082F436C,object
	.size	 gUnknown_082F436C,24
gUnknown_082F436C:
	.short	0x5
	.short	0x5
	.word	gOamData_AffineDouble_ObjNormal_32x32
	.word	gUnknown_082F4300
	.word	0x0
	.word	gUnknown_082F4304
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 gUnknown_082F4384,object
	.size	 gUnknown_082F4384,48
gUnknown_082F4384:
	.byte	0x9
	.byte	0x2
	.byte	0x8
	.space	1
	.short	0x9c
	.short	0x0
	.word	gUnknown_082F420C
	.word	gUnknown_082F422C
	.byte	0x8
	.byte	0x2
	.byte	0x8
	.space	1
	.short	0xb4
	.short	0x0
	.word	gUnknown_082F420C
	.word	gUnknown_082F422C
	.byte	0x8
	.byte	0x2
	.byte	0x8
	.space	1
	.short	0xcc
	.short	0x0
	.word	gUnknown_082F420C
	.word	gUnknown_082F422C
	.align	2, 0
	.type	 gUnknown_082F43B4,object
gUnknown_082F43B4:
	.word	gText_SpaceTimes2
	.word	gText_XDotY
	.word	gText_Var1Berry
	.word	gText_NeatnessRankings
	.word	gText_CoopRankings
	.word	gText_PressingPowerRankings
	.size	 gUnknown_082F43B4,24
	.align	2, 0
	.type	 gUnknown_082F43CC,object
gUnknown_082F43CC:
	.word	0x0
	.word	BerryCrushCommand_BeginNormalPaletteFade
	.word	sub_8022CB0
	.word	sub_8022D14
	.word	sub_8022E1C
	.word	sub_8022E3C
	.word	sub_8022E5C
	.word	sub_8022EAC
	.word	sub_8022F04
	.word	sub_8022F1C
	.word	sub_8023070
	.word	sub_80231B8
	.word	sub_80232EC
	.word	sub_80238F0
	.word	sub_8023998
	.word	sub_8023A30
	.word	sub_8023BC0
	.word	sub_8023CAC
	.word	sub_8024048
	.word	sub_8024134
	.word	sub_8024228
	.word	sub_80242E0
	.word	sub_80243BC
	.word	sub_8024444
	.word	sub_8024508
	.word	sub_8024568
	.size	 gUnknown_082F43CC,104
	.type	 gUnknown_082F4434,object
gUnknown_082F4434:
	.byte	0x2
	.byte	0x4
	.byte	0x6
	.byte	0x7
	.byte	0x3
	.byte	0x5
	.byte	0x8
	.byte	0xb
	.byte	0x3
	.byte	0x7
	.byte	0xb
	.byte	0xf
	.byte	0x4
	.byte	0x8
	.byte	0xc
	.byte	0x11
	.size	 gUnknown_082F4434,16
	.type	 gUnknown_082F4444,object
gUnknown_082F4444:
	.byte	0x5
	.byte	0x7
	.byte	0x9
	.byte	0xc
	.size	 gUnknown_082F4444,4
	.type	 gUnknown_082F4448,object
gUnknown_082F4448:
	.byte	0x3
	.byte	0x7
	.byte	0xf
	.byte	0x1f
	.size	 gUnknown_082F4448,4
.text
	.align	2, 0
	.globl	sub_8020C00
	.type	 sub_8020C00,function
	.thumb_func
sub_8020C00:
	ldr	r0, .L3
	ldr	r0, [r0]
	bx	lr
.L4:
	.align	2, 0
.L3:
	.word	gUnknown_02022C90
.Lfe1:
	.size	 sub_8020C00,.Lfe1-sub_8020C00
	.align	2, 0
	.globl	sub_8020C0C
	.type	 sub_8020C0C,function
	.thumb_func
sub_8020C0C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L10
	ldr	r0, [r5]
	cmp	r0, #0
	bne	.L6	@cond_branch
	mov	r0, #0x2
	b	.L9
.L11:
	.align	2, 0
.L10:
	.word	gUnknown_02022C90
.L6:
	cmp	r4, #0
	bne	.L7	@cond_branch
	ldr	r4, [r0]
.L7:
	ldrb	r0, [r0, #0xa]
	bl	DestroyTask
	ldr	r0, [r5]
	bl	Free
	mov	r0, #0x0
	str	r0, [r5]
	add	r0, r4, #0
	bl	SetMainCallback2
	ldr	r0, .L12
	cmp	r4, r0
	bne	.L8	@cond_branch
	ldr	r2, .L12+0x4
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	bl	PlayNewMapMusic
	ldr	r0, .L12+0x8
	bl	SetMainCallback1
.L8:
	mov	r0, #0x0
.L9:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L13:
	.align	2, 0
.L12:
	.word	CB2_ReturnToField
	.word	gTextFlags
	.word	CB1_Overworld
.Lfe2:
	.size	 sub_8020C0C,.Lfe2-sub_8020C0C
	.align	2, 0
	.globl	StartBerryCrush
	.type	 StartBerryCrush,function
	.thumb_func
StartBerryCrush:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L21
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L16	@cond_branch
	ldr	r0, .L21+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L15	@cond_branch
.L16:
	add	r0, r4, #0
	bl	SetMainCallback2
	ldr	r0, .L21+0x8
	mov	r1, r8
	strh	r1, [r0, #0x10]
	strh	r1, [r0, #0x12]
	b	.L20
.L22:
	.align	2, 0
.L21:
	.word	gReceivedRemoteLinkPlayers
	.word	gWirelessCommType
	.word	Rfu
.L15:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, r8
	cmp	r0, #0x1
	bls	.L18	@cond_branch
	cmp	r7, r8
	bcc	.L17	@cond_branch
.L18:
	add	r0, r4, #0
	bl	SetMainCallback2
	ldr	r0, .L23
	mov	r1, #0x0
	strh	r1, [r0, #0x10]
	strh	r1, [r0, #0x12]
	b	.L20
.L24:
	.align	2, 0
.L23:
	.word	Rfu
.L17:
	ldr	r6, .L25
	ldr	r0, .L25+0x4
	bl	AllocZeroed
	add	r5, r0, #0
	str	r5, [r6]
	cmp	r5, #0
	bne	.L19	@cond_branch
	add	r0, r4, #0
	bl	SetMainCallback2
	ldr	r0, .L25+0x8
	strh	r5, [r0, #0x10]
	strh	r5, [r0, #0x12]
.L20:
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L14
.L26:
	.align	2, 0
.L25:
	.word	gUnknown_02022C90
	.word	0x41c0
	.word	Rfu
.L19:
	str	r4, [r5]
	mov	r4, #0x0
	strb	r7, [r5, #0x8]
	ldr	r0, [r6]
	mov	r1, r8
	strb	r1, [r0, #0x9]
	ldr	r0, [r6]
	bl	sub_8020FC4
	ldr	r1, [r6]
	mov	r2, #0x1
	mov	r0, #0x1
	strh	r0, [r1, #0x12]
	strb	r2, [r1, #0xe]
	ldr	r1, [r6]
	mov	r0, #0x6
	strb	r0, [r1, #0xf]
	ldr	r0, [r6]
	add	r0, r0, #0x36
	mov	r2, #0x1
	neg	r2, r2
	mov	r1, #0x10
	str	r1, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	BerryCrush_SetPaletteFadeParams
	ldr	r2, [r6]
	add	r2, r2, #0x36
	mov	r0, #0x4
	mov	r1, #0x1
	bl	sub_8022BEC
	ldr	r0, .L27
	bl	SetMainCallback2
	ldr	r0, .L27+0x4
	mov	r1, #0x8
	bl	CreateTask
	ldr	r1, [r6]
	strb	r0, [r1, #0xa]
	ldr	r2, .L27+0x8
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L14:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	sub_8020F88
	.word	sub_8020FA0
	.word	gTextFlags
.Lfe3:
	.size	 StartBerryCrush,.Lfe3-StartBerryCrush
	.align	2, 0
	.type	 sub_8020D8C,function
	.thumb_func
sub_8020D8C:
	push	{r4, lr}
	add	sp, sp, #-0xc
	ldr	r1, .L32
	ldrh	r0, [r1]
	sub	r0, r0, #0x90
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x43
	bls	.L30	@cond_branch
	mov	r0, #0x90
	strh	r0, [r1]
	b	.L31
.L33:
	.align	2, 0
.L32:
	.word	gSpecialVar_ItemId
.L30:
	ldrh	r0, [r1]
	mov	r1, #0x1
	bl	RemoveBagItem
.L31:
	ldr	r4, .L34
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x5
	add	r0, r2, r0
	ldr	r1, .L34+0x4
	ldrh	r1, [r1]
	sub	r1, r1, #0x90
	add	r0, r0, #0xa4
	mov	r3, #0x0
	strh	r1, [r0]
	mov	r0, #0x1
	strb	r0, [r2, #0xe]
	ldr	r1, [r4]
	mov	r0, #0x9
	strb	r0, [r1, #0xf]
	ldr	r0, [r4]
	add	r0, r0, #0x36
	mov	r2, #0x1
	neg	r2, r2
	mov	r1, #0x10
	str	r1, [sp]
	str	r3, [sp, #0x4]
	str	r3, [sp, #0x8]
	mov	r1, #0x0
	bl	BerryCrush_SetPaletteFadeParams
	ldr	r2, [r4]
	add	r2, r2, #0x36
	mov	r0, #0x4
	mov	r1, #0x1
	bl	sub_8022BEC
	ldr	r0, .L34+0x8
	mov	r1, #0x8
	bl	CreateTask
	ldr	r1, [r4]
	strb	r0, [r1, #0xa]
	ldr	r0, .L34+0xc
	bl	SetMainCallback2
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L35:
	.align	2, 0
.L34:
	.word	gUnknown_02022C90
	.word	gSpecialVar_ItemId
	.word	sub_8020FA0
	.word	sub_8020F88
.Lfe4:
	.size	 sub_8020D8C,.Lfe4-sub_8020D8C
	.align	2, 0
	.globl	sub_8020E1C
	.type	 sub_8020E1C,function
	.thumb_func
sub_8020E1C:
	push	{lr}
	ldr	r0, .L37
	ldr	r0, [r0]
	ldrb	r0, [r0, #0xa]
	bl	DestroyTask
	ldr	r0, .L37+0x4
	bl	ChooseBerryForMachine
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	gUnknown_02022C90
	.word	sub_8020D8C
.Lfe5:
	.size	 sub_8020E1C,.Lfe5-sub_8020E1C
	.align	2, 0
	.type	 sub_8020E3C,function
	.thumb_func
sub_8020E3C:
	push	{lr}
	ldr	r0, .L40
	bl	SetVBlankCallback
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	sub_8020F74
.Lfe6:
	.size	 sub_8020E3C,.Lfe6-sub_8020E3C
	.align	2, 0
	.globl	sub_8020E4C
	.type	 sub_8020E4C,function
	.thumb_func
sub_8020E4C:
	push	{lr}
	mov	r0, #0x0
	bl	SetVBlankCallback
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 sub_8020E4C,.Lfe7-sub_8020E4C
	.align	2, 0
	.globl	sub_8020E58
	.type	 sub_8020E58,function
	.thumb_func
sub_8020E58:
	push	{r4, r5, r6, lr}
	ldr	r4, .L59
	ldr	r0, [r4]
	add	r0, r0, #0x6c
	ldrh	r2, [r0]
	lsl	r2, r2, #0x8
	mov	r1, #0xf0
	lsl	r1, r1, #0x6
	add	r0, r2, #0
	bl	MathUtil_Div32
	add	r2, r0, #0
	ldr	r0, [r4]
	add	r0, r0, #0x72
	ldrh	r3, [r0]
	lsl	r3, r3, #0x8
	add	r0, r3, #0
	add	r1, r2, #0
	bl	MathUtil_Div32
	add	r3, r0, #0
	ldr	r0, .L59+0x4
	and	r3, r3, r0
	ldr	r2, [r4]
	strh	r3, [r2, #0x16]
	ldrb	r0, [r2, #0x9]
	cmp	r0, #0x3
	beq	.L47	@cond_branch
	cmp	r0, #0x3
	bgt	.L55	@cond_branch
	cmp	r0, #0x2
	beq	.L45	@cond_branch
	b	.L44
.L60:
	.align	2, 0
.L59:
	.word	gUnknown_02022C90
	.word	0xffff
.L55:
	cmp	r0, #0x4
	beq	.L49	@cond_branch
	cmp	r0, #0x5
	beq	.L51	@cond_branch
	b	.L44
.L45:
	ldr	r5, .L61
	ldr	r1, [r5]
	mov	r0, #0xc2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	cmp	r0, r1
	bls	.L44	@cond_branch
	add	r2, r2, #0x25
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	ldr	r1, [r4]
	ldrh	r1, [r1, #0x16]
	mov	r2, #0xc2
	lsl	r2, r2, #0x1
	b	.L57
.L62:
	.align	2, 0
.L61:
	.word	gSaveBlock2Ptr
.L47:
	ldr	r5, .L63
	ldr	r0, [r5]
	mov	r6, #0xc3
	lsl	r6, r6, #0x1
	b	.L58
.L64:
	.align	2, 0
.L63:
	.word	gSaveBlock2Ptr
.L49:
	ldr	r5, .L65
	ldr	r1, [r5]
	mov	r0, #0xc4
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	cmp	r0, r1
	bls	.L44	@cond_branch
	add	r2, r2, #0x25
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	ldr	r1, [r4]
	ldrh	r1, [r1, #0x16]
	mov	r2, #0xc4
	lsl	r2, r2, #0x1
.L57:
	add	r0, r0, r2
	strh	r1, [r0]
	b	.L44
.L66:
	.align	2, 0
.L65:
	.word	gSaveBlock2Ptr
.L51:
	ldr	r5, .L67
	ldr	r0, [r5]
	mov	r6, #0xc5
	lsl	r6, r6, #0x1
.L58:
	add	r1, r0, r6
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	cmp	r0, r1
	bls	.L44	@cond_branch
	add	r2, r2, #0x25
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r5]
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x16]
	add	r1, r1, r6
	strh	r0, [r1]
.L44:
	ldr	r4, .L67+0x4
	ldr	r1, [r4]
	ldr	r0, [r1, #0x68]
	str	r0, [r1, #0x1c]
	bl	GiveBerryPowder
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L43	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x25
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
.L43:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	gSaveBlock2Ptr
	.word	gUnknown_02022C90
.Lfe8:
	.size	 sub_8020E58,.Lfe8-sub_8020E58
	.align	2, 0
	.type	 sub_8020F74,function
	.thumb_func
sub_8020F74:
	push	{lr}
	bl	TransferPlttBuffer
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 sub_8020F74,.Lfe9-sub_8020F74
	.align	2, 0
	.type	 sub_8020F88,function
	.thumb_func
sub_8020F88:
	push	{lr}
	bl	RunTasks
	bl	RunTextPrinters
	bl	AnimateSprites
	bl	BuildOamBuffer
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 sub_8020F88,.Lfe10-sub_8020F88
	.align	2, 0
	.type	 sub_8020FA0,function
	.thumb_func
sub_8020FA0:
	push	{r4, lr}
	ldr	r4, .L73
	ldr	r0, [r4]
	ldr	r2, [r0, #0x4]
	cmp	r2, #0
	beq	.L72	@cond_branch
	add	r1, r0, #0
	add	r1, r1, #0x36
	bl	_call_via_r2
.L72:
	ldr	r0, [r4]
	bl	sub_8021450
	pop	{r4}
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	gUnknown_02022C90
.Lfe11:
	.size	 sub_8020FA0,.Lfe11-sub_8020FA0
	.align	2, 0
	.globl	sub_8020FC4
	.type	 sub_8020FC4,function
	.thumb_func
sub_8020FC4:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r5, #0x0
	b	.L94
.L79:
	lsl	r0, r5, #0x5
	add	r0, r0, #0x98
	add	r0, r6, r0
	lsl	r1, r5, #0x3
	sub	r1, r1, r5
	lsl	r1, r1, #0x2
	ldr	r2, .L96
	add	r1, r1, r2
	bl	StringCopy
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L94:
	ldrb	r0, [r6, #0x9]
	cmp	r5, r0
	bcc	.L79	@cond_branch
	cmp	r5, #0x4
	bhi	.L93	@cond_branch
.L84:
	lsl	r4, r5, #0x5
	add	r0, r4, #0
	add	r0, r0, #0x98
	add	r0, r6, r0
	mov	r1, #0x1
	mov	r2, #0x7
	bl	memset
	add	r4, r6, r4
	add	r4, r4, #0x9f
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bls	.L84	@cond_branch
.L93:
	ldr	r0, .L96+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	cmp	r0, #0x1
	beq	.L88	@cond_branch
	cmp	r0, #0x1
	bgt	.L92	@cond_branch
	cmp	r0, #0
	beq	.L87	@cond_branch
	b	.L86
.L97:
	.align	2, 0
.L96:
	.word	gLinkPlayers+0x8
	.word	gSaveBlock2Ptr
.L92:
	cmp	r0, #0x2
	beq	.L89	@cond_branch
	b	.L86
.L87:
	mov	r0, #0x8
	b	.L95
.L88:
	mov	r0, #0x4
	b	.L95
.L89:
	mov	r0, #0x1
.L95:
	strb	r0, [r6, #0xb]
.L86:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 sub_8020FC4,.Lfe12-sub_8020FC4
	.align	2, 0
	.globl	sub_802104C
	.type	 sub_802104C,function
	.thumb_func
sub_802104C:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	bl	sub_8020C00
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L99	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L114
.L99:
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x9
	bls	.LCB793
	b	.L100	@long jump
.LCB793:
	lsl	r0, r0, #0x2
	ldr	r1, .L116
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L117:
	.align	2, 0
.L116:
	.word	.L112
	.align	2, 0
	.align	2, 0
.L112:
	.word	.L101
	.word	.L102
	.word	.L103
	.word	.L104
	.word	.L105
	.word	.L106
	.word	.L107
	.word	.L109
	.word	.L110
	.word	.L111
.L101:
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	bl	ScanlineEffect_Stop
	bl	ResetTempTileDataBuffers
	b	.L100
.L102:
	add	r0, sp, #0x8
	mov	r4, #0x0
	strh	r4, [r0]
	mov	r1, #0xe0
	lsl	r1, r1, #0x13
	ldr	r2, .L118
	bl	CpuSet
	ldr	r0, .L118+0x4
	strb	r4, [r0]
	mov	r0, #0x3
	bl	DigitObjUtil_Init
	b	.L100
.L119:
	.align	2, 0
.L118:
	.word	0x1000200
	.word	gReservedSpritePaletteCount
.L103:
	bl	ResetPaletteFade
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	b	.L100
.L104:
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L120
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	mov	r0, #0xe0
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	mov	r0, #0x87
	lsl	r0, r0, #0x6
	add	r1, r5, r0
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	mov	r0, #0xc7
	lsl	r0, r0, #0x6
	add	r1, r5, r0
	mov	r0, #0x3
	bl	SetBgTilemapBuffer
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	b	.L100
.L121:
	.align	2, 0
.L120:
	.word	gUnknown_082F32C8
.L105:
	mov	r4, #0x20
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	mov	r0, #0x40
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	b	.L100
.L106:
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	ldr	r1, .L122
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	b	.L100
.L123:
	.align	2, 0
.L122:
	.word	gUnknown_08DE34B8
.L107:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB986
	b	.L115	@long jump
.LCB986:
	bl	InitStandardTextBoxWindows
	bl	InitTextBoxGfxAndPrinters
	add	r0, r5, #0
	bl	sub_8022588
	add	r0, r5, #0
	bl	sub_8022600
	ldr	r0, .L124
	ldrb	r1, [r0, #0x8]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0, #0x8]
	b	.L100
.L125:
	.align	2, 0
.L124:
	.word	gPaletteFade
.L109:
	ldr	r0, .L126
	mov	r2, #0xc0
	lsl	r2, r2, #0x1
	mov	r1, #0x0
	bl	LoadPalette
	ldr	r1, .L126+0x4
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	ldr	r1, .L126+0x8
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	ldr	r1, .L126+0xc
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	add	r0, r5, #0
	bl	sub_80226D0
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	b	.L100
.L127:
	.align	2, 0
.L126:
	.word	gUnknown_08DE3398
	.word	gBerryCrushGrinderTopTilemap
	.word	gBerryCrushContainerCapTilemap
	.word	gBerryCrushBackgroundTilemap
.L110:
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0x0
	mov	r1, #0x0
	bl	CreateWirelessStatusIndicatorSprite
	add	r0, r5, #0
	bl	sub_8022730
	ldr	r0, .L128
	ldrh	r1, [r0]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x16
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	b	.L100
.L129:
	.align	2, 0
.L128:
	.word	gSpriteCoordOffsetY
.L111:
	ldr	r2, .L130
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuRegBits
	bl	sub_8020E3C
	mov	r0, #0x0
	strb	r0, [r5, #0xc]
	mov	r0, #0x1
	b	.L114
.L131:
	.align	2, 0
.L130:
	.word	gPaletteFade
.L100:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L115:
	mov	r0, #0x0
.L114:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 sub_802104C,.Lfe13-sub_802104C
	.align	2, 0
	.globl	sub_802130C
	.type	 sub_802130C,function
	.thumb_func
sub_802130C:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	bl	sub_8020C00
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L133	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L147
.L133:
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x7
	bls	.LCB1153
	b	.L134	@long jump
.LCB1153:
	lsl	r0, r0, #0x2
	ldr	r1, .L149
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L150:
	.align	2, 0
.L149:
	.word	.L145
	.align	2, 0
	.align	2, 0
.L145:
	.word	.L135
	.word	.L136
	.word	.L138
	.word	.L139
	.word	.L141
	.word	.L142
	.word	.L143
	.word	.L144
.L135:
	bl	Rfu_SetLinkStandbyCallback
	b	.L134
.L136:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L148	@cond_branch
.L138:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	bl	UpdatePaletteFade
	b	.L134
.L139:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L134	@cond_branch
	b	.L148
.L141:
	mov	r4, #0x20
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	b	.L134
.L142:
	bl	FreeAllWindowBuffers
	mov	r0, #0x0
	bl	HideBg
	mov	r0, #0x0
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x1
	bl	HideBg
	mov	r0, #0x1
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x2
	bl	HideBg
	mov	r0, #0x2
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x3
	bl	HideBg
	mov	r0, #0x3
	bl	UnsetBgTilemapBuffer
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	ClearGpuRegBits
	b	.L134
.L143:
	bl	DestroyWirelessStatusIndicatorSprite
	add	r0, r5, #0
	bl	sub_8022960
	bl	DigitObjUtil_Free
	b	.L134
.L144:
	mov	r0, #0x0
	strb	r0, [r5, #0xc]
	mov	r0, #0x1
	b	.L147
.L134:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L148:
	mov	r0, #0x0
.L147:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 sub_802130C,.Lfe14-sub_802130C
	.align	2, 0
	.type	 sub_8021450,function
	.thumb_func
sub_8021450:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L153
	ldrh	r1, [r4, #0x2c]
	ldrh	r2, [r4, #0x2a]
	add	r1, r1, r2
	strh	r1, [r0]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x16
	bl	SetGpuReg
	ldrh	r0, [r4, #0x12]
	cmp	r0, #0x7
	bne	.L152	@cond_branch
	mov	r1, #0x9c
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	ldrh	r1, [r4, #0x28]
	bl	sub_8022524
.L152:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L154:
	.align	2, 0
.L153:
	.word	gSpriteCoordOffsetY
.Lfe15:
	.size	 sub_8021450,.Lfe15-sub_8021450
	.align	2, 0
	.globl	sub_8021488
	.type	 sub_8021488,function
	.thumb_func
sub_8021488:
	mov	r1, #0x0
	ldr	r2, .L156
	strh	r2, [r0, #0x2a]
	strh	r1, [r0, #0x2c]
	ldr	r0, .L156+0x4
	strh	r1, [r0]
	ldr	r0, .L156+0x8
	strh	r2, [r0]
	bx	lr
.L157:
	.align	2, 0
.L156:
	.word	0xff98
	.word	gSpriteCoordOffsetX
	.word	gSpriteCoordOffsetY
.Lfe16:
	.size	 sub_8021488,.Lfe16-sub_8021488
	.align	2, 0
	.globl	sub_80214A8
	.type	 sub_80214A8,function
	.thumb_func
sub_80214A8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	sl, r0
	str	r1, [sp]
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, sl
	ldrb	r1, [r1, #0x9]
	cmp	r9, r1
	bcc	.LCB1389
	b	.L160	@long jump
.LCB1389:
.L162:
	ldr	r1, .L166
	mov	r2, r9
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r2, [r0]
	mov	r1, r9
	lsl	r0, r1, #0x5
	add	r0, r0, sl
	add	r0, r0, #0xa4
	ldrh	r3, [r0]
	add	r3, r3, #0x85
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r0, .L166+0x4
	add	r1, r2, #0
	bl	AddCustomItemIconSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, r9
	lsl	r3, r2, #0x2
	ldr	r1, [sp]
	add	r1, r1, #0x38
	add	r6, r1, r3
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L166+0x8
	add	r1, r1, r0
	str	r1, [r6]
	ldrb	r0, [r1, #0x5]
	mov	r2, #0xc
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldr	r2, [r6]
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r6]
	ldr	r0, [sp]
	add	r0, r0, #0xc
	add	r0, r0, r3
	mov	r8, r0
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x8]
	add	r0, r0, #0x78
	strh	r0, [r1, #0x20]
	ldr	r1, [r6]
	ldr	r0, .L166+0xc
	strh	r0, [r1, #0x22]
	ldr	r3, [r6]
	add	r5, r3, #0
	add	r5, r5, #0x2e
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	strh	r0, [r5, #0x2]
	mov	r0, #0x20
	strh	r0, [r5, #0x4]
	mov	r0, #0x70
	strh	r0, [r5, #0xe]
	mov	r2, r8
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	ldrh	r1, [r1, #0x8]
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L163	@cond_branch
	add	r0, r1, #0x3
.L163:
	asr	r0, r0, #0x2
	strh	r0, [r5, #0xc]
	lsl	r0, r1, #0x17
	lsr	r7, r0, #0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r2, r2, #0x20
	lsr	r2, r2, #0x1
	mov	r0, #0x7
	mov	r1, #0xfe
	lsl	r1, r1, #0x6
	str	r3, [sp, #0x4]
	bl	MathUtil_Div16Shift
	add	r4, r0, #0
	ldr	r0, [r6]
	ldrh	r0, [r0, #0x20]
	lsl	r0, r0, #0x7
	ldr	r3, [sp, #0x4]
	strh	r0, [r3, #0x2e]
	lsl	r1, r7, #0x10
	asr	r1, r1, #0x10
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x7
	add	r2, r4, #0
	bl	MathUtil_Div16Shift
	strh	r0, [r5, #0x6]
	mov	r0, #0x7
	add	r1, r4, #0
	mov	r2, #0x55
	bl	MathUtil_Mul16Shift
	add	r2, r0, #0
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r0, #0x7
	mov	r1, #0xfe
	lsl	r1, r1, #0x6
	bl	MathUtil_Div16Shift
	strh	r0, [r5, #0xa]
	ldrh	r0, [r5, #0xe]
	ldr	r2, .L166+0x10
	add	r1, r2, #0
	orr	r0, r0, r1
	strh	r0, [r5, #0xe]
	mov	r1, r8
	ldr	r0, [r1]
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bge	.L161	@cond_branch
	ldr	r0, [r6]
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L161:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r0, sl
	ldrb	r0, [r0, #0x9]
	cmp	r9, r0
	bcs	.LCB1560
	b	.L162	@long jump
.LCB1560:
.L160:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L167:
	.align	2, 0
.L166:
	.word	gUnknown_082F41E8
	.word	gUnknown_082F436C
	.word	gSprites
	.word	0xfff0
	.word	-0x8000
.Lfe17:
	.size	 sub_80214A8,.Lfe17-sub_80214A8
	.align	2, 0
	.globl	sub_8021608
	.type	 sub_8021608,function
	.thumb_func
sub_8021608:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r4, r5, #0
	add	r4, r4, #0x2e
	ldrh	r0, [r4, #0x4]
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r5, #0x26]
	add	r0, r0, r2
	strh	r0, [r5, #0x26]
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	mov	r6, #0x80
	lsl	r6, r6, #0x8
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L169	@cond_branch
	ldrh	r0, [r4, #0x6]
	ldrh	r2, [r5, #0x2e]
	add	r0, r0, r2
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x8]
	add	r0, r0, r1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L169	@cond_branch
	ldrh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	cmp	r0, #0x7e
	ble	.L169	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x24]
	ldrh	r1, [r4, #0xe]
	ldr	r0, .L172
	and	r0, r0, r1
	strh	r0, [r4, #0xe]
.L169:
	ldrh	r0, [r4]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	strh	r0, [r5, #0x20]
	mov	r2, #0x22
	ldrsh	r1, [r5, r2]
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	add	r1, r1, r0
	ldrh	r2, [r4, #0xe]
	ldr	r0, .L172
	and	r0, r0, r2
	cmp	r1, r0
	blt	.L171	@cond_branch
	ldr	r0, .L172+0x4
	str	r0, [r5, #0x1c]
	add	r0, r5, #0
	bl	FreeSpriteOamMatrix
	add	r0, r5, #0
	bl	DestroySprite
.L171:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	0x7fff
	.word	SpriteCallbackDummy
.Lfe18:
	.size	 sub_8021608,.Lfe18-sub_8021608
	.align	2, 0
	.globl	sub_80216A8
	.type	 sub_80216A8,function
	.thumb_func
sub_80216A8:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	mov	r5, #0x0
	ldrb	r0, [r6, #0x9]
	cmp	r5, r0
	bcs	.L176	@cond_branch
	ldr	r7, .L180
.L178:
	lsl	r0, r5, #0x1
	add	r0, r0, r7
	ldrh	r4, [r0]
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r6, #0x9]
	cmp	r5, r0
	bcc	.L178	@cond_branch
.L176:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L181:
	.align	2, 0
.L180:
	.word	gUnknown_082F41E8
.Lfe19:
	.size	 sub_80216A8,.Lfe19-sub_80216A8
	.align	2, 0
	.globl	sub_80216E0
	.type	 sub_80216E0,function
	.thumb_func
sub_80216E0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r6, r0, #0
	str	r1, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r1, #0x4e
	add	r1, r1, r6
	mov	sl, r1
	mov	r9, r0
	ldrb	r2, [r6, #0x9]
	cmp	r0, r2
	bcs	.L184	@cond_branch
	ldr	r7, .L207
.L186:
	mov	r3, sl
	ldrh	r0, [r3, #0xa]
	mov	r4, r9
	lsl	r1, r4, #0x1
	add	r1, r1, r9
	asr	r0, r0, r1
	lsl	r0, r0, #0x10
	mov	r1, #0xe0
	lsl	r1, r1, #0xb
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	mov	r8, r1
	cmp	r1, #0
	beq	.L185	@cond_branch
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L188	@cond_branch
	lsl	r4, r4, #0x2
	ldr	r5, [sp]
	add	r5, r5, #0x24
	add	r0, r5, r4
	ldr	r0, [r0]
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L189
.L208:
	.align	2, 0
.L207:
	.word	gUnknown_082F41CC
.L188:
	mov	r0, r9
	lsl	r4, r0, #0x2
	ldr	r5, [sp]
	add	r5, r5, #0x24
	add	r0, r5, r4
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	StartSpriteAnim
.L189:
	add	r3, r5, r4
	ldr	r2, [r3]
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r4, #0x5
	neg	r4, r4
	add	r1, r4, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r3]
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	sub	r4, r4, #0x3c
	add	r1, r4, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r3]
	mov	r0, #0x3
	mov	r1, r8
	and	r1, r1, r0
	mov	r8, r1
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x1
	add	r0, r1, r7
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	strh	r0, [r2, #0x24]
	ldr	r2, [r3]
	ldr	r3, .L209
	add	r1, r1, r3
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	strh	r0, [r2, #0x26]
.L185:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldrb	r4, [r6, #0x9]
	cmp	r9, r4
	bcc	.L186	@cond_branch
.L184:
	ldr	r0, [sp, #0x4]
	cmp	r0, #0
	bne	.L191	@cond_branch
	add	r2, r6, #0
	add	r2, r2, #0x25
	ldrb	r1, [r2]
	b	.L206
.L210:
	.align	2, 0
.L209:
	.word	gUnknown_082F41CC+0x1
.L191:
	ldrh	r0, [r6, #0x28]
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r2, #0x0
	mov	r9, r2
	mov	r3, sl
	ldrh	r1, [r3, #0xc]
	lsl	r0, r1, #0x1
	add	r0, r0, #0x3
	add	r6, r6, #0x25
	str	r6, [sp, #0xc]
	add	r3, r1, #0
	cmp	r9, r0
	bge	.L194	@cond_branch
.L196:
	mov	r4, r9
	lsl	r1, r4, #0x2
	ldr	r0, [sp]
	add	r0, r0, #0x4c
	add	r7, r0, r1
	ldr	r2, [r7]
	add	r0, r2, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L195	@cond_branch
	ldr	r0, .L211
	str	r0, [r2, #0x1c]
	lsl	r1, r4, #0x1
	ldr	r3, .L211+0x4
	add	r0, r1, r3
	mov	r4, #0x0
	ldrsb	r4, [r0, r4]
	add	r0, r4, #0
	add	r0, r0, #0x78
	strh	r0, [r2, #0x20]
	ldr	r2, [r7]
	ldr	r0, .L211+0x8
	add	r1, r1, r0
	mov	r6, #0x0
	ldrsb	r6, [r1, r6]
	mov	r1, r8
	lsl	r0, r1, #0x2
	sub	r0, r0, #0x88
	sub	r0, r6, r0
	strh	r0, [r2, #0x22]
	ldr	r5, [r7]
	ldr	r2, [sp, #0x8]
	lsl	r1, r2, #0x2
	add	r0, r4, #0
	bl	__divsi3
	add	r4, r4, r0
	strh	r4, [r5, #0x24]
	ldr	r0, [r7]
	strh	r6, [r0, #0x26]
	mov	r3, sl
	ldrb	r1, [r3, #0x4]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L198	@cond_branch
	ldr	r0, [r7]
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L199
.L212:
	.align	2, 0
.L211:
	.word	sub_8022B28
	.word	gUnknown_082F41D2
	.word	gUnknown_082F41D2+0x1
.L198:
	ldr	r0, [r7]
	mov	r1, #0x0
	bl	StartSpriteAnim
.L199:
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	mov	r4, sl
	ldrh	r3, [r4, #0xc]
	cmp	r0, #0x3
	bls	.L195	@cond_branch
	mov	r0, #0x0
	mov	r8, r0
.L195:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r0, r3, #0x1
	add	r0, r0, #0x3
	cmp	r9, r0
	blt	.L196	@cond_branch
.L194:
	ldr	r2, [sp, #0xc]
	ldrb	r1, [r2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L202	@cond_branch
.L206:
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	b	.L192
.L202:
	ldr	r3, [sp, #0x4]
	cmp	r3, #0x1
	bne	.L204	@cond_branch
	mov	r0, #0x4e
	bl	PlaySE
	b	.L205
.L204:
	mov	r0, #0x4d
	bl	PlaySE
.L205:
	ldr	r4, [sp, #0xc]
	ldrb	r0, [r4]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4]
.L192:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 sub_80216E0,.Lfe20-sub_80216E0
	.align	2, 0
	.globl	sub_80218D4
	.type	 sub_80218D4,function
	.thumb_func
sub_80218D4:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r2, #0x0
	ldrb	r0, [r5, #0x9]
	cmp	r2, r0
	bcs	.L215	@cond_branch
	add	r4, r6, #0
	add	r4, r4, #0x24
	mov	r7, #0x4
	add	r3, r0, #0
.L217:
	lsl	r0, r2, #0x2
	add	r0, r4, r0
	ldr	r0, [r0]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L228	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r3
	bcc	.L217	@cond_branch
.L215:
	mov	r2, #0x0
	add	r3, r6, #0
	add	r3, r3, #0x4c
	mov	r4, #0x4
.L223:
	lsl	r0, r2, #0x2
	add	r0, r3, r0
	ldr	r0, [r0]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L222	@cond_branch
.L228:
	mov	r0, #0x0
	b	.L227
.L222:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xa
	bls	.L223	@cond_branch
	mov	r1, #0x2c
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L226	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2c]
.L226:
	mov	r0, #0x1
.L227:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 sub_80218D4,.Lfe21-sub_80218D4
	.align	2, 0
	.globl	sub_8021944
	.type	 sub_8021944,function
	.thumb_func
sub_8021944:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	lsl	r4, r1, #0x10
	lsr	r4, r4, #0x10
	mov	r7, #0x0
	mov	r5, #0xe1
	lsl	r5, r5, #0x4
	add	r0, r4, #0
	add	r1, r5, #0
	bl	__udivsi3
	strh	r0, [r6, #0x4]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3c
	bl	__udivsi3
	strh	r0, [r6, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	__umodsi3
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x10
	mov	r1, #0x4
	bl	MathUtil_Mul16
	add	r2, r7, #0
	lsl	r0, r0, #0x10
	asr	r3, r0, #0x10
	mov	r0, #0x7
	mov	ip, r0
	ldr	r5, .L236
	mov	r4, #0x1
.L233:
	mov	r0, ip
	sub	r1, r0, r2
	add	r0, r3, #0
	asr	r0, r0, r1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L232	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	add	r7, r7, r0
.L232:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L233	@cond_branch
	ldr	r1, .L236+0x4
	add	r0, r7, #0
	bl	__udivsi3
	strh	r0, [r6, #0x8]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L237:
	.align	2, 0
.L236:
	.word	sPressingSpeedConversionTable
	.word	0xf4240
.Lfe22:
	.size	 sub_8021944,.Lfe22-sub_8021944
	.align	2, 0
	.globl	sub_80219C8
	.type	 sub_80219C8,function
	.thumb_func
sub_80219C8:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	add	r4, r1, #0
	add	r5, r2, #0
	mov	r8, r3
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r2, #0x1
	neg	r2, r2
	mov	r0, #0x2
	mov	r1, r8
	bl	GetStringWidth
	lsl	r4, r4, #0x2
	lsr	r0, r0, #0x1
	sub	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	ldr	r1, .L239
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r0, r8
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	mov	r1, #0x2
	add	r2, r4, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L240:
	.align	2, 0
.L239:
	.word	sBerryCrushTextColorTable
.Lfe23:
	.size	 sub_80219C8,.Lfe23-sub_80219C8
	.align	2, 0
	.globl	sub_8021A28
	.type	 sub_8021A28,function
	.thumb_func
sub_8021A28:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x2c
	str	r0, [sp, #0xc]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x10]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x14]
	lsl	r3, r3, #0x18
	mov	r0, #0x0
	str	r0, [sp, #0x18]
	mov	r1, #0x0
	str	r1, [sp, #0x1c]
	ldr	r2, [sp, #0xc]
	add	r2, r2, #0x68
	str	r2, [sp, #0x20]
	mov	r4, #0xf0
	lsl	r4, r4, #0x18
	add	r3, r3, r4
	lsr	r3, r3, #0x18
	ldr	r0, [sp, #0x10]
	cmp	r0, #0x2
	bne	.L242	@cond_branch
	add	r0, r3, #0
	sub	r0, r0, #0x2a
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L242:
	ldr	r2, [sp, #0xc]
	ldrb	r1, [r2, #0x9]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	sub	r6, r3, r0
	cmp	r6, #0
	ble	.L243	@cond_branch
	lsr	r0, r6, #0x1f
	add	r0, r6, r0
	asr	r0, r0, #0x1
	add	r6, r0, #0
	add	r6, r6, #0x10
	b	.L244
.L243:
	mov	r6, #0x10
.L244:
	mov	r5, #0x0
	ldr	r3, [sp, #0xc]
	ldrb	r3, [r3, #0x9]
	cmp	r5, r3
	bcc	.LCB2368
	b	.L246	@long jump
.LCB2368:
	ldr	r4, [sp, #0x10]
	lsl	r4, r4, #0x2
	str	r4, [sp, #0x24]
.L248:
	bl	DynamicPlaceholderTextUtil_Reset
	ldr	r0, [sp, #0x10]
	cmp	r0, #0x1
	beq	.L252	@cond_branch
	cmp	r0, #0x1
	bgt	.L264	@cond_branch
	cmp	r0, #0
	beq	.L250	@cond_branch
	ldr	r4, [sp, #0x14]
	sub	r4, r4, #0x4
	lsl	r1, r6, #0x18
	mov	sl, r1
	ldr	r2, [sp, #0x1c]
	add	r2, r2, #0xa2
	mov	r9, r2
	ldr	r3, [sp, #0x18]
	lsl	r3, r3, #0x5
	mov	r8, r3
	b	.L268
.L264:
	ldr	r4, [sp, #0x10]
	cmp	r4, #0x2
	bne	.LCB2401
	b	.L260	@long jump
.LCB2401:
	ldr	r4, [sp, #0x14]
	sub	r4, r4, #0x4
	lsl	r0, r6, #0x18
	mov	sl, r0
	ldr	r1, [sp, #0x1c]
	add	r1, r1, #0xa2
	mov	r9, r1
	ldr	r2, [sp, #0x18]
	lsl	r2, r2, #0x5
	mov	r8, r2
	b	.L268
.L250:
	ldr	r0, [sp, #0x20]
	add	r0, r0, #0x20
	add	r0, r0, r5
	ldrb	r0, [r0]
	str	r0, [sp, #0x18]
	lsl	r3, r5, #0x1
	ldr	r2, [sp, #0x20]
	add	r2, r2, #0xc
	cmp	r5, #0
	beq	.L251	@cond_branch
	add	r0, r2, r3
	sub	r1, r5, #0x1
	lsl	r1, r1, #0x1
	add	r1, r2, r1
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L251	@cond_branch
	str	r5, [sp, #0x1c]
.L251:
	ldr	r4, [sp, #0x24]
	ldr	r1, [sp, #0x10]
	add	r0, r4, r1
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	add	r0, r2, r0
	ldrh	r1, [r0]
	ldr	r0, .L269
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L269+0x4
	add	r0, r4, r0
	ldr	r1, [r0]
	ldr	r0, .L269
	bl	StringAppend
	ldr	r4, [sp, #0x14]
	sub	r4, r4, #0x4
	lsl	r2, r6, #0x18
	mov	sl, r2
	ldr	r3, [sp, #0x1c]
	add	r3, r3, #0xa2
	mov	r9, r3
	ldr	r0, [sp, #0x18]
	lsl	r0, r0, #0x5
	mov	r8, r0
	b	.L268
.L270:
	.align	2, 0
.L269:
	.word	gStringVar4
	.word	gUnknown_082F43B4
.L252:
	ldr	r1, [sp, #0x20]
	add	r0, r1, r5
	add	r0, r0, #0x28
	ldrb	r0, [r0]
	str	r0, [sp, #0x18]
	lsl	r3, r5, #0x1
	add	r2, r1, #0
	add	r2, r2, #0xc
	cmp	r5, #0
	beq	.L253	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xa
	add	r0, r2, r0
	add	r1, r3, #0
	add	r1, r1, #0x8
	add	r1, r2, r1
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L253	@cond_branch
	str	r5, [sp, #0x1c]
.L253:
	ldr	r0, [sp, #0x24]
	ldr	r1, [sp, #0x10]
	add	r4, r0, r1
	lsl	r4, r4, #0x1
	add	r4, r3, r4
	add	r4, r2, r4
	ldrh	r1, [r4]
	lsr	r1, r1, #0x4
	ldr	r0, .L271
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r7, #0x0
	ldrb	r0, [r4]
	mov	r3, #0xf
	and	r3, r3, r0
	mov	r2, #0x0
	ldr	r4, [sp, #0x10]
	lsl	r4, r4, #0x2
	str	r4, [sp, #0x28]
	ldr	r4, [sp, #0x14]
	sub	r4, r4, #0x4
	lsl	r0, r6, #0x18
	mov	sl, r0
	ldr	r1, [sp, #0x1c]
	add	r1, r1, #0xa2
	mov	r9, r1
	ldr	r0, [sp, #0x18]
	lsl	r0, r0, #0x5
	mov	r8, r0
	add	r6, r6, #0xe
	add	r5, r5, #0x1
	ldr	r1, .L271+0x4
	mov	ip, r1
.L257:
	mov	r0, #0x3
	sub	r1, r0, r2
	add	r0, r3, #0
	asr	r0, r0, r1
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L256	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, ip
	ldr	r0, [r0]
	add	r7, r7, r0
.L256:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L257	@cond_branch
	add	r0, r7, #0
	ldr	r1, .L271+0x8
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L271+0xc
	add	r1, r3, #0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L271+0x10
	ldr	r2, [sp, #0x28]
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r0, .L271+0x14
	bl	StringExpandPlaceholders
	b	.L249
.L272:
	.align	2, 0
.L271:
	.word	gStringVar1
	.word	sPressingSpeedConversionTable
	.word	0xf4240
	.word	gStringVar2
	.word	gUnknown_082F43B4
	.word	gStringVar4
.L260:
	str	r5, [sp, #0x18]
	str	r5, [sp, #0x1c]
	lsl	r7, r5, #0x5
	ldr	r3, [sp, #0xc]
	add	r0, r3, r7
	add	r0, r0, #0xa4
	ldrb	r2, [r0]
	cmp	r2, #0x43
	bls	.L261	@cond_branch
	mov	r2, #0x0
.L261:
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r0, .L273
	add	r1, r1, r0
	ldr	r0, .L273+0x4
	bl	StringCopy
	ldr	r0, .L273+0x8
	ldr	r1, [r0, #0x8]
	ldr	r0, .L273+0xc
	bl	StringExpandPlaceholders
	ldr	r4, [sp, #0x14]
	sub	r4, r4, #0x4
	lsl	r0, r6, #0x18
	mov	sl, r0
	mov	r1, #0xa2
	add	r1, r1, r5
	mov	r9, r1
	mov	r8, r7
.L268:
	add	r6, r6, #0xe
	add	r5, r5, #0x1
.L249:
	mov	r0, #0x2
	ldr	r1, .L273+0xc
	add	r2, r4, #0
	bl	GetStringRightAlignXOffset
	add	r2, r0, #0
	ldr	r3, [sp, #0xc]
	mov	r4, #0xdd
	lsl	r4, r4, #0x1
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r1, sl
	lsr	r3, r1, #0x18
	ldr	r1, .L273+0x10
	str	r1, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r1, .L273+0xc
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	bl	AddTextPrinterParameterized3
	ldr	r3, [sp, #0x18]
	ldr	r2, [sp, #0xc]
	ldrb	r2, [r2, #0x8]
	cmp	r3, r2
	bne	.L265	@cond_branch
	ldr	r0, .L273+0x14
	ldr	r1, .L273+0x18
	bl	StringCopy
	b	.L266
.L274:
	.align	2, 0
.L273:
	.word	gBerries
	.word	gStringVar1
	.word	gUnknown_082F43B4
	.word	gStringVar4
	.word	sBerryCrushTextColorTable
	.word	gStringVar3
	.word	gText_1DotBlueF700
.L265:
	ldr	r0, .L275
	ldr	r1, .L275+0x4
	bl	StringCopy
.L266:
	ldr	r4, .L275
	mov	r3, r9
	strb	r3, [r4]
	mov	r1, r8
	add	r1, r1, #0x98
	ldr	r0, [sp, #0xc]
	add	r1, r0, r1
	mov	r0, #0x0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	ldr	r0, .L275+0x8
	add	r1, r4, #0
	bl	DynamicPlaceholderTextUtil_ExpandPlaceholders
	ldr	r1, [sp, #0xc]
	mov	r2, #0xdd
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	ldrb	r0, [r0]
	mov	r4, sl
	lsr	r3, r4, #0x18
	ldr	r1, .L275+0xc
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	ldr	r2, .L275+0x8
	str	r2, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x4
	bl	AddTextPrinterParameterized3
	lsl	r0, r5, #0x18
	lsr	r5, r0, #0x18
	ldr	r3, [sp, #0xc]
	ldrb	r3, [r3, #0x9]
	cmp	r5, r3
	bcs	.LCB2775
	b	.L248	@long jump
.LCB2775:
.L246:
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L276:
	.align	2, 0
.L275:
	.word	gStringVar3
	.word	gText_1DotF700
	.word	gStringVar4
	.word	sBerryCrushTextColorTable
.Lfe24:
	.size	 sub_8021A28,.Lfe24-sub_8021A28
	.align	2, 0
	.globl	sub_8021D34
	.type	 sub_8021D34,function
	.thumb_func
sub_8021D34:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	mov	r8, r0
	mov	r0, #0x0
	mov	sl, r0
	mov	r6, #0x0
	mov	r1, #0x0
	str	r1, [sp, #0xc]
	mov	r2, r8
	add	r2, r2, #0x68
	str	r2, [sp, #0x10]
	mov	r4, #0xdd
	lsl	r4, r4, #0x1
	add	r4, r4, r8
	mov	r9, r4
	ldrb	r0, [r4]
	mov	r1, #0x4
	bl	GetWindowAttribute
	lsl	r0, r0, #0x1b
	mov	r1, #0xd6
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r7, r0, #0x18
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldr	r2, [sp, #0x10]
	ldrh	r1, [r2, #0x4]
	bl	sub_8021944
	ldrb	r0, [r4]
	ldr	r4, .L286
	str	r4, [sp]
	str	r6, [sp, #0x4]
	ldr	r1, .L286+0x4
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	ldr	r4, .L286+0x8
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x1
	neg	r2, r2
	bl	GetStringWidth
	mov	r1, #0xb0
	sub	r0, r1, r0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r2, r9
	ldrb	r0, [r2]
	ldr	r1, .L286
	str	r1, [sp]
	mov	r2, sl
	str	r2, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	mov	r0, #0x9f
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r4, #0x0
	ldrsh	r1, [r0, r4]
	ldr	r0, .L286+0xc
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L286+0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	mov	r2, #0x0
	ldrsh	r1, [r1, r2]
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r5, .L286+0x14
	ldr	r1, .L286+0x18
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x2
	add	r1, r5, #0
	mov	r2, #0x1
	neg	r2, r2
	bl	GetStringWidth
	sub	r0, r6, r0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, r9
	ldrb	r0, [r4]
	ldr	r1, .L286
	str	r1, [sp]
	mov	r2, sl
	str	r2, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	ldr	r4, .L286+0x1c
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x1
	neg	r2, r2
	bl	GetStringWidth
	sub	r0, r6, r0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r2, .L286
	str	r2, [sp]
	mov	r1, sl
	str	r1, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	mov	r0, #0x9e
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	ldr	r0, .L286+0xc
	mov	r2, #0x2
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L286+0x20
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x2
	add	r1, r5, #0
	mov	r2, #0x1
	neg	r2, r2
	bl	GetStringWidth
	sub	r0, r6, r0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, r9
	ldrb	r0, [r4]
	ldr	r1, .L286
	str	r1, [sp]
	mov	r2, sl
	str	r2, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	add	r0, r7, #0
	add	r0, r0, #0xe
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r4]
	ldr	r4, .L286
	str	r4, [sp]
	mov	r1, sl
	str	r1, [sp, #0x4]
	ldr	r1, .L286+0x24
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	ldr	r4, .L286+0x28
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x1
	neg	r2, r2
	bl	GetStringWidth
	mov	r2, #0xb0
	sub	r0, r2, r0
	lsl	r0, r0, #0x18
	str	r0, [sp, #0x18]
	lsr	r6, r0, #0x18
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r2, .L286
	str	r2, [sp]
	mov	r1, sl
	str	r1, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	mov	r4, r8
	ldrb	r2, [r4, #0x16]
	ldrh	r0, [r4, #0x16]
	mov	ip, r0
	mov	r1, #0x7
	mov	r9, r1
	mov	r5, #0x1
	ldr	r3, .L286+0x2c
.L281:
	mov	r4, r9
	mov	r0, sl
	sub	r1, r4, r0
	add	r0, r2, #0
	asr	r0, r0, r1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L280	@cond_branch
	mov	r1, sl
	lsl	r0, r1, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldr	r4, [sp, #0xc]
	add	r4, r4, r0
	str	r4, [sp, #0xc]
.L280:
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	cmp	r0, #0x7
	bls	.L281	@cond_branch
	ldr	r0, .L286+0xc
	mov	r2, ip
	lsr	r1, r2, #0x8
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L286+0x10
	ldr	r1, .L286+0x30
	ldr	r0, [sp, #0xc]
	bl	__udivsi3
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L286+0x14
	ldr	r1, .L286+0x34
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r2, #0x1
	neg	r2, r2
	mov	r0, #0x2
	add	r1, r4, #0
	bl	GetStringWidth
	sub	r0, r6, r0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, r8
	add	r0, r0, #0x25
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L284	@cond_branch
	mov	r0, #0xdd
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrb	r0, [r0]
	ldr	r1, .L286+0x38
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	b	.L285
.L287:
	.align	2, 0
.L286:
	.word	sBerryCrushTextColorTable
	.word	gText_TimeColon
	.word	gText_SpaceSec
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_XDotY2
	.word	gText_SpaceMin
	.word	gText_StrVar1
	.word	gText_PressingSpeed
	.word	gText_TimesPerSec
	.word	sPressingSpeedConversionTable
	.word	0xf4240
	.word	gText_XDotY3
	.word	sBerryCrushTextColorTable+0xf
.L284:
	mov	r0, #0xdd
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrb	r0, [r0]
	ldr	r1, .L288
	str	r1, [sp]
	str	r2, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
.L285:
	add	r0, r7, #0
	add	r0, r0, #0xe
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0xdd
	lsl	r4, r4, #0x1
	add	r8, r8, r4
	mov	r1, r8
	ldrb	r0, [r1]
	ldr	r2, .L288
	mov	r9, r2
	str	r2, [sp]
	mov	r5, #0x0
	str	r5, [sp, #0x4]
	ldr	r1, .L288+0x4
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	ldr	r0, .L288+0x8
	ldr	r4, [sp, #0x10]
	ldrh	r1, [r4, #0x8]
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L288+0xc
	ldr	r1, .L288+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r2, #0x1
	neg	r2, r2
	mov	r0, #0x2
	add	r1, r4, #0
	bl	GetStringWidth
	mov	r1, #0xb0
	sub	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r2, r9
	str	r2, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L289:
	.align	2, 0
.L288:
	.word	sBerryCrushTextColorTable
	.word	gText_Silkiness
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_Var1Percent
.Lfe25:
	.size	 sub_8021D34,.Lfe25-sub_8021D34
	.align	2, 0
	.globl	sub_8022070
	.type	 sub_8022070,function
	.thumb_func
sub_8022070:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	add	r6, r1, #0
	add	r0, r6, #0
	add	r0, r0, #0x80
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bls	.LCB3246
	b	.L291	@long jump
.LCB3246:
	lsl	r0, r0, #0x2
	ldr	r1, .L312
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L313:
	.align	2, 0
.L312:
	.word	.L307
	.align	2, 0
	.align	2, 0
.L307:
	.word	.L292
	.word	.L295
	.word	.L296
	.word	.L297
	.word	.L305
	.word	.L306
.L292:
	ldrb	r0, [r4, #0x9]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r6, #0
	bl	sub_8022554
	ldrh	r0, [r4, #0x12]
	lsl	r0, r0, #0x3
	ldr	r2, .L314
	mov	r1, sp
	add	r0, r0, r2
	ldmia	r0!, {r2, r3}
	stmia	r1!, {r2, r3}
	ldrh	r0, [r4, #0x12]
	cmp	r0, #0xd
	bne	.L293	@cond_branch
	ldr	r0, .L314+0x4
	add	r0, r0, #0x4
	b	.L310
.L315:
	.align	2, 0
.L314:
	.word	gUnknown_082F3324+-0x58
	.word	gUnknown_082F3344
.L293:
	ldr	r0, .L316
.L310:
	add	r0, r5, r0
	ldrb	r1, [r0]
	mov	r0, sp
	strb	r1, [r0, #0x4]
	mov	r0, sp
	bl	AddWindow
	add	r1, r6, #0
	add	r1, r1, #0x82
	strb	r0, [r1]
	b	.L291
.L317:
	.align	2, 0
.L316:
	.word	gUnknown_082F3344
.L295:
	add	r4, r6, #0
	add	r4, r4, #0x82
	ldrb	r0, [r4]
	bl	PutWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	b	.L291
.L296:
	add	r5, r6, #0
	add	r5, r5, #0x82
	ldrb	r0, [r5]
	ldr	r4, .L318
	add	r1, r4, #0
	mov	r2, #0xd0
	bl	LoadUserWindowBorderGfx_
	ldrb	r0, [r5]
	mov	r1, #0x0
	add	r2, r4, #0
	mov	r3, #0xd
	bl	DrawStdFrameWithCustomTileAndPalette
	b	.L291
.L319:
	.align	2, 0
.L318:
	.word	0x21d
.L297:
	ldrb	r0, [r4, #0x9]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrh	r0, [r4, #0x12]
	cmp	r0, #0xc
	beq	.L300	@cond_branch
	cmp	r0, #0xc
	bgt	.L304	@cond_branch
	cmp	r0, #0xb
	beq	.L299	@cond_branch
	b	.L291
.L304:
	cmp	r0, #0xd
	beq	.L301	@cond_branch
	b	.L291
.L299:
	add	r0, r6, #0
	add	r0, r0, #0x82
	ldrb	r0, [r0]
	ldr	r3, .L320
	mov	r1, #0x14
	mov	r2, #0x3
	bl	sub_80219C8
	ldr	r0, .L320+0x4
	add	r0, r5, r0
	ldrb	r3, [r0]
	lsl	r3, r3, #0x1b
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0xa0
	bl	sub_8021A28
	add	r1, r6, #0
	add	r1, r1, #0x80
	mov	r0, #0x5
	b	.L311
.L321:
	.align	2, 0
.L320:
	.word	gText_PressesRankings
	.word	gUnknown_082F3344
.L300:
	add	r0, r6, #0
	add	r0, r0, #0x82
	ldrb	r0, [r0]
	ldr	r2, .L322
	add	r1, r4, #0
	add	r1, r1, #0x8f
	ldrb	r1, [r1]
	add	r1, r1, #0x3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r3, [r1]
	mov	r1, #0x14
	mov	r2, #0x4
	bl	sub_80219C8
	ldr	r0, .L322+0x4
	add	r0, r5, r0
	ldrb	r3, [r0]
	lsl	r3, r3, #0x1b
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0xa0
	bl	sub_8021A28
	add	r1, r6, #0
	add	r1, r1, #0x80
	mov	r0, #0x5
	b	.L311
.L323:
	.align	2, 0
.L322:
	.word	gUnknown_082F43B4
	.word	gUnknown_082F3344
.L301:
	add	r0, r6, #0
	add	r0, r0, #0x82
	ldrb	r0, [r0]
	ldr	r3, .L324
	mov	r1, #0x16
	mov	r2, #0x3
	bl	sub_80219C8
	ldr	r0, .L324+0x4
	add	r0, r0, #0x4
	add	r0, r5, r0
	ldrb	r3, [r0]
	lsl	r3, r3, #0x1b
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	mov	r1, #0x2
	mov	r2, #0xb0
	bl	sub_8021A28
	b	.L291
.L325:
	.align	2, 0
.L324:
	.word	gText_CrushingResults
	.word	gUnknown_082F3344
.L305:
	add	r0, r4, #0
	bl	sub_8021D34
	b	.L291
.L306:
	add	r0, r6, #0
	add	r0, r0, #0x82
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r1, r6, #0
	add	r1, r1, #0x80
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0x1
	b	.L309
.L291:
	add	r1, r6, #0
	add	r1, r1, #0x80
	ldrb	r0, [r1]
	add	r0, r0, #0x1
.L311:
	strb	r0, [r1]
	mov	r0, #0x0
.L309:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 sub_8022070,.Lfe26-sub_8022070
	.align	2, 0
	.globl	sub_802222C
	.type	 sub_802222C,function
	.thumb_func
sub_802222C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0xdd
	lsl	r0, r0, #0x1
	add	r5, r4, r0
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r5]
	bl	RemoveWindow
	add	r0, r4, #0
	bl	sub_8022600
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 sub_802222C,.Lfe27-sub_802222C
	.align	2, 0
	.type	 Task_ShowBerryCrushRankings,function
	.thumb_func
Task_ShowBerryCrushRankings:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, #0x0
	str	r1, [sp, #0xc]
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L350
	add	r6, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	beq	.L330	@cond_branch
	cmp	r0, #0x1
	bgt	.L348	@cond_branch
	cmp	r0, #0
	beq	.L329	@cond_branch
	b	.L328
.L351:
	.align	2, 0
.L350:
	.word	gTasks+0x8
.L348:
	cmp	r0, #0x2
	bne	.LCB3573
	b	.L342	@long jump
.LCB3573:
	cmp	r0, #0x3
	bne	.LCB3575
	b	.L345	@long jump
.LCB3575:
	b	.L328
.L329:
	ldr	r0, .L352
	bl	AddWindow
	strh	r0, [r6, #0x2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	PutWindowTilemap
	ldrb	r0, [r6, #0x2]
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldrb	r0, [r6, #0x2]
	ldr	r4, .L352+0x4
	add	r1, r4, #0
	mov	r2, #0xd0
	bl	LoadUserWindowBorderGfx_
	ldrb	r0, [r6, #0x2]
	mov	r1, #0x0
	add	r2, r4, #0
	mov	r3, #0xd
	bl	DrawStdFrameWithCustomTileAndPalette
	b	.L328
.L353:
	.align	2, 0
.L352:
	.word	sWindowTemplate_BerryCrushRankings
	.word	0x21d
.L330:
	ldr	r0, .L354
	mov	sl, r0
	mov	r1, #0x1
	neg	r1, r1
	mov	r8, r1
	mov	r0, #0x1
	mov	r1, sl
	mov	r2, r8
	bl	GetStringWidth
	lsr	r0, r0, #0x1
	mov	r4, #0x60
	sub	r0, r4, r0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r6, #0x2]
	ldr	r5, .L354+0x4
	str	r5, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	mov	r1, sl
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r7, #0
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	ldr	r0, .L354+0x8
	mov	sl, r0
	mov	r0, #0x1
	mov	r1, sl
	mov	r2, r8
	bl	GetStringWidth
	lsr	r0, r0, #0x1
	sub	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r7, r4, #0x18
	ldrb	r0, [r6, #0x2]
	str	r5, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	mov	r1, sl
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r7, #0
	mov	r3, #0x11
	bl	AddTextPrinterParameterized3
	mov	r0, #0x29
	mov	sl, r0
.L334:
	mov	r1, r9
	add	r1, r1, #0x2
	ldr	r0, .L354+0xc
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L354+0x10
	ldr	r1, .L354+0x14
	bl	StringExpandPlaceholders
	ldrb	r0, [r6, #0x2]
	ldr	r1, .L354+0x18
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	ldr	r1, .L354+0x10
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, sl
	bl	AddTextPrinterParameterized3
	mov	r0, #0x1
	ldr	r1, .L354+0x1c
	mov	r2, #0x1
	neg	r2, r2
	bl	GetStringWidth
	mov	r1, #0xc0
	sub	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldrb	r0, [r6, #0x2]
	ldr	r1, .L354+0x18
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	ldr	r1, .L354+0x1c
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r7, #0
	mov	r3, sl
	bl	AddTextPrinterParameterized3
	mov	r2, #0x0
	mov	r0, r9
	lsl	r4, r0, #0x1
	mov	r1, sl
	add	r1, r1, #0x10
	str	r1, [sp, #0x10]
	mov	r0, #0x1
	add	r9, r9, r0
	add	r0, r4, r6
	ldrb	r3, [r0, #0x4]
	mov	r1, #0x7
	mov	ip, r1
	mov	r0, #0x1
	mov	r8, r0
	ldr	r5, .L354+0x20
.L338:
	mov	r0, ip
	sub	r1, r0, r2
	add	r0, r3, #0
	asr	r0, r0, r1
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L337	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	ldr	r1, [sp, #0xc]
	add	r1, r1, r0
	str	r1, [sp, #0xc]
.L337:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L338	@cond_branch
	add	r0, r4, r6
	ldrh	r1, [r0, #0x4]
	lsr	r1, r1, #0x8
	ldr	r0, .L354+0xc
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, [sp, #0xc]
	ldr	r1, .L354+0x24
	bl	__udivsi3
	add	r1, r0, #0
	ldr	r0, .L354+0x28
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L354+0x10
	ldr	r1, .L354+0x2c
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	ldr	r1, .L354+0x10
	mov	r2, #0x1
	neg	r2, r2
	bl	GetStringWidth
	sub	r0, r7, r0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r6, #0x2]
	ldr	r1, .L354+0x18
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	ldr	r1, .L354+0x10
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r7, #0
	mov	r3, sl
	bl	AddTextPrinterParameterized3
	ldr	r1, [sp, #0x10]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	cmp	r0, #0x3
	bhi	.LCB3862
	b	.L334	@long jump
.LCB3862:
	ldrb	r0, [r6, #0x2]
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L328
.L355:
	.align	2, 0
.L354:
	.word	gText_BerryCrush2
	.word	sBerryCrushTextColorTable+0x9
	.word	gText_PressingSpeedRankings
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_Var1Players
	.word	sBerryCrushTextColorTable
	.word	gText_TimesPerSec
	.word	sPressingSpeedConversionTable
	.word	0xf4240
	.word	gStringVar2
	.word	gText_XDotY3
.L342:
	ldr	r0, .L356
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L328	@cond_branch
	b	.L327
.L357:
	.align	2, 0
.L356:
	.word	gMain
.L345:
	ldrb	r0, [r6, #0x2]
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r6, #0x2]
	bl	ClearWindowTilemap
	ldrb	r0, [r6, #0x2]
	bl	RemoveWindow
	add	r0, r4, #0
	bl	DestroyTask
	bl	EnableBothScriptContexts
	bl	ScriptContext2_Disable
	mov	r0, r9
	b	.L349
.L328:
	ldrh	r0, [r6]
	add	r0, r0, #0x1
.L349:
	strh	r0, [r6]
.L327:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 Task_ShowBerryCrushRankings,.Lfe28-Task_ShowBerryCrushRankings
	.align	2, 0
	.globl	ShowBerryCrushRankings
	.type	 ShowBerryCrushRankings,function
	.thumb_func
ShowBerryCrushRankings:
	push	{lr}
	bl	ScriptContext2_Enable
	ldr	r0, .L359
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L359+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L359+0x8
	ldr	r2, [r0]
	mov	r3, #0xc2
	lsl	r3, r3, #0x1
	add	r0, r2, r3
	ldrh	r0, [r0]
	strh	r0, [r1, #0xc]
	add	r3, r3, #0x2
	add	r0, r2, r3
	ldrh	r0, [r0]
	strh	r0, [r1, #0xe]
	add	r3, r3, #0x2
	add	r0, r2, r3
	ldrh	r0, [r0]
	strh	r0, [r1, #0x10]
	add	r3, r3, #0x2
	add	r0, r2, r3
	ldrh	r0, [r0]
	strh	r0, [r1, #0x12]
	pop	{r0}
	bx	r0
.L360:
	.align	2, 0
.L359:
	.word	Task_ShowBerryCrushRankings
	.word	gTasks
	.word	gSaveBlock2Ptr
.Lfe29:
	.size	 ShowBerryCrushRankings,.Lfe29-ShowBerryCrushRankings
	.align	2, 0
	.globl	sub_8022524
	.type	 sub_8022524,function
	.thumb_func
sub_8022524:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	sub_8021944
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
	mov	r0, #0x0
	bl	DigitObjUtil_PrintNumOn
	mov	r0, #0x6
	ldrsh	r1, [r4, r0]
	mov	r0, #0x1
	bl	DigitObjUtil_PrintNumOn
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	mov	r0, #0x2
	bl	DigitObjUtil_PrintNumOn
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 sub_8022524,.Lfe30-sub_8022524
	.align	2, 0
	.globl	sub_8022554
	.type	 sub_8022554,function
	.thumb_func
sub_8022554:
	push	{lr}
	ldr	r2, [r0, #0x78]
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r3, #0x4
	orr	r1, r1, r3
	strb	r1, [r2]
	ldr	r1, [r0, #0x7c]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r3
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x1
	bl	DigitObjUtil_HideOrShow
	mov	r0, #0x1
	mov	r1, #0x1
	bl	DigitObjUtil_HideOrShow
	mov	r0, #0x0
	mov	r1, #0x1
	bl	DigitObjUtil_HideOrShow
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 sub_8022554,.Lfe31-sub_8022554
	.align	2, 0
	.globl	sub_8022588
	.type	 sub_8022588,function
	.thumb_func
sub_8022588:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	mov	r6, #0x0
	ldrb	r0, [r5, #0x9]
	cmp	r6, r0
	bcs	.L365	@cond_branch
	ldr	r7, .L369
.L367:
	lsl	r0, r6, #0x2
	mov	r1, #0xa2
	lsl	r1, r1, #0x1
	add	r2, r5, r1
	add	r2, r2, r0
	ldrb	r1, [r5, #0x9]
	sub	r1, r1, #0x2
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	add	r0, r6, r0
	add	r0, r0, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L369+0x4
	add	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	ldr	r1, .L369+0x8
	add	r0, r0, r1
	bl	AddWindow
	ldr	r1, .L369+0xc
	add	r4, r5, r1
	add	r4, r4, r6
	strb	r0, [r4]
	ldrb	r0, [r4]
	bl	PutWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r5, #0x9]
	cmp	r6, r0
	bcc	.L367	@cond_branch
.L365:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L370:
	.align	2, 0
.L369:
	.word	gUnknown_082F417C
	.word	gUnknown_082F4190
	.word	gUnknown_082F32F4
	.word	0x1bb
.Lfe32:
	.size	 sub_8022588,.Lfe32-sub_8022588
	.align	2, 0
	.globl	sub_8022600
	.type	 sub_8022600,function
	.thumb_func
sub_8022600:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	add	r6, r0, #0
	mov	r7, #0x0
	ldrb	r0, [r6, #0x9]
	cmp	r7, r0
	bcs	.L373	@cond_branch
	mov	r1, #0x0
	mov	r8, r1
.L375:
	ldr	r1, .L379
	add	r0, r6, r1
	add	r5, r0, r7
	ldrb	r0, [r5]
	bl	PutWindowTilemap
	ldrb	r0, [r6, #0x8]
	cmp	r7, r0
	bne	.L376	@cond_branch
	lsl	r4, r7, #0x5
	add	r4, r4, #0x98
	add	r4, r6, r4
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x0
	bl	GetStringWidth
	lsr	r0, r0, #0x1
	mov	r2, #0x24
	sub	r2, r2, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r0, [r5]
	mov	r1, r8
	str	r1, [sp]
	str	r1, [sp, #0x4]
	ldr	r1, .L379+0x4
	str	r1, [sp, #0x8]
	mov	r1, r8
	str	r1, [sp, #0xc]
	str	r4, [sp, #0x10]
	mov	r1, #0x2
	mov	r3, #0x1
	bl	AddTextPrinterParameterized4
	b	.L377
.L380:
	.align	2, 0
.L379:
	.word	0x1bb
	.word	sBerryCrushTextColorTable+0x3
.L376:
	lsl	r4, r7, #0x5
	add	r4, r4, #0x98
	add	r4, r6, r4
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x0
	bl	GetStringWidth
	lsr	r0, r0, #0x1
	mov	r2, #0x24
	sub	r2, r2, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r0, [r5]
	mov	r1, r8
	str	r1, [sp]
	str	r1, [sp, #0x4]
	ldr	r1, .L381
	str	r1, [sp, #0x8]
	mov	r1, r8
	str	r1, [sp, #0xc]
	str	r4, [sp, #0x10]
	mov	r1, #0x2
	mov	r3, #0x1
	bl	AddTextPrinterParameterized4
.L377:
	ldr	r1, .L381+0x4
	add	r0, r6, r1
	add	r0, r0, r7
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r6, #0x9]
	cmp	r7, r0
	bcc	.L375	@cond_branch
.L373:
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L382:
	.align	2, 0
.L381:
	.word	sBerryCrushTextColorTable+0x6
	.word	0x1bb
.Lfe33:
	.size	 sub_8022600,.Lfe33-sub_8022600
	.align	2, 0
	.globl	sub_80226D0
	.type	 sub_80226D0,function
	.thumb_func
sub_80226D0:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	mov	r5, #0x0
	ldr	r0, .L390
	ldr	r4, .L390+0x4
	add	r1, r4, #0
	bl	LZ77UnCompWram
	b	.L389
.L391:
	.align	2, 0
.L390:
	.word	gUnknown_08DE3FD4
	.word	gDecompressionBuffer
.L387:
	lsl	r1, r5, #0x2
	mov	r2, #0xa2
	lsl	r2, r2, #0x1
	add	r0, r6, r2
	add	r0, r0, r1
	ldr	r3, [r0]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r4, r1
	ldrb	r2, [r3, #0x1]
	ldrb	r3, [r3, #0x2]
	mov	r0, #0xa
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x3
	bl	CopyToBgTilemapBufferRect
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L389:
	ldrb	r0, [r6, #0x9]
	cmp	r5, r0
	bcc	.L387	@cond_branch
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 sub_80226D0,.Lfe34-sub_80226D0
	.align	2, 0
	.globl	sub_8022730
	.type	 sub_8022730,function
	.thumb_func
sub_8022730:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	mov	r5, #0x0
	ldr	r0, .L414
	strh	r0, [r6, #0x2a]
	strh	r5, [r6, #0x2c]
	ldr	r1, .L414+0x4
	strh	r5, [r1]
	ldr	r1, .L414+0x8
	strh	r0, [r1]
	ldr	r4, .L414+0xc
.L396:
	lsl	r0, r5, #0x3
	add	r0, r0, r4
	bl	LoadCompressedSpriteSheet
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L396	@cond_branch
	ldr	r0, .L414+0x10
	bl	LoadSpritePalettes
	ldr	r0, .L414+0x14
	mov	r1, #0x78
	mov	r2, #0x58
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r0, #0xac
	lsl	r0, r0, #0x1
	add	r3, r6, r0
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L414+0x18
	add	r0, r0, r1
	str	r0, [r3]
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xc
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	ldr	r1, [r3]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r3]
	add	r1, r1, #0x2c
	ldrb	r0, [r1]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1]
	mov	r5, #0x0
	ldrb	r1, [r6, #0x9]
	cmp	r5, r1
	bcs	.L399	@cond_branch
	mov	r7, #0x4
.L401:
	lsl	r4, r5, #0x2
	mov	r3, #0xa2
	lsl	r3, r3, #0x1
	add	r0, r6, r3
	add	r0, r0, r4
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	add	r1, r1, #0x78
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldrh	r2, [r0, #0x6]
	add	r2, r2, #0x20
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldr	r0, .L414+0x1c
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r0, #0xae
	lsl	r0, r0, #0x1
	add	r3, r6, r0
	add	r3, r3, r4
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r0, .L414+0x18
	add	r1, r1, r0
	str	r1, [r3]
	ldrb	r0, [r1, #0x5]
	mov	r4, #0xd
	neg	r4, r4
	add	r2, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r7
	strb	r0, [r1, #0x5]
	ldr	r1, [r3]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r7
	strb	r0, [r1]
	ldr	r2, [r3]
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r3]
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r6, #0x9]
	cmp	r5, r0
	bcc	.L401	@cond_branch
.L399:
	mov	r5, #0x0
	ldr	r4, .L414+0x20
	add	r7, r4, #0x1
.L406:
	lsl	r2, r5, #0x1
	add	r0, r2, r4
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	add	r1, r1, #0x78
	add	r2, r2, r7
	ldrb	r2, [r2, #0]
	lsl	r2, r2, #24
	asr	r2, r2, #24
	add	r2, r2, #0x88
	ldr	r0, .L414+0x24
	mov	r3, #0x6
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r5, #0x2
	mov	r1, #0xc2
	lsl	r1, r1, #0x1
	add	r3, r6, r1
	add	r3, r3, r0
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L414+0x18
	add	r0, r0, r1
	str	r0, [r3]
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xc
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	ldr	r2, [r3]
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r3]
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r3]
	strh	r5, [r0, #0x2e]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xa
	bls	.L406	@cond_branch
	mov	r5, #0x0
.L411:
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x13
	mov	r3, #0xb0
	lsl	r3, r3, #0x10
	add	r1, r1, r3
	asr	r1, r1, #0x10
	ldr	r0, .L414+0x28
	mov	r2, #0x8
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r5, #0x2
	mov	r4, #0xd8
	lsl	r4, r4, #0x1
	add	r3, r6, r4
	add	r3, r3, r0
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L414+0x18
	add	r0, r0, r1
	str	r0, [r3]
	ldrb	r1, [r0, #0x5]
	mov	r4, #0xd
	neg	r4, r4
	add	r2, r4, #0
	and	r1, r1, r2
	strb	r1, [r0, #0x5]
	ldr	r2, [r3]
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	add	r4, r4, #0x8
	add	r1, r4, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r3]
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r3, #0x41
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x1
	bls	.L411	@cond_branch
	ldr	r4, .L414+0x2c
	mov	r0, #0x0
	mov	r1, #0x0
	add	r2, r4, #0
	bl	DigitObjUtil_CreatePrinter
	add	r2, r4, #0
	add	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0x0
	bl	DigitObjUtil_CreatePrinter
	add	r4, r4, #0x20
	mov	r0, #0x2
	mov	r1, #0x0
	add	r2, r4, #0
	bl	DigitObjUtil_CreatePrinter
	ldrh	r0, [r6, #0x12]
	cmp	r0, #0x1
	bne	.L413	@cond_branch
	mov	r4, #0x9c
	lsl	r4, r4, #0x1
	add	r0, r6, r4
	bl	sub_8022554
.L413:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L415:
	.align	2, 0
.L414:
	.word	0xff98
	.word	gSpriteCoordOffsetX
	.word	gSpriteCoordOffsetY
	.word	gUnknown_082F41F4
	.word	gUnknown_082F421C
	.word	gUnknown_082F430C
	.word	gSprites
	.word	gUnknown_082F4324
	.word	gUnknown_082F41D2
	.word	gUnknown_082F433C
	.word	gUnknown_082F4354
	.word	gUnknown_082F4384
.Lfe35:
	.size	 sub_8022730,.Lfe35-sub_8022730
	.align	2, 0
	.globl	sub_8022960
	.type	 sub_8022960,function
	.thumb_func
sub_8022960:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r4, #0x0
	mov	r0, #0x4
	bl	FreeSpriteTilesByTag
	mov	r0, #0x3
	bl	FreeSpriteTilesByTag
	mov	r0, #0x2
	bl	FreeSpriteTilesByTag
	mov	r0, #0x1
	bl	FreeSpriteTilesByTag
	mov	r0, #0x4
	bl	FreeSpritePaletteByTag
	mov	r0, #0x2
	bl	FreeSpritePaletteByTag
	mov	r0, #0x1
	bl	FreeSpritePaletteByTag
	mov	r0, #0xd8
	lsl	r0, r0, #0x1
	add	r6, r5, r0
.L420:
	lsl	r0, r4, #0x2
	add	r0, r6, r0
	ldr	r0, [r0]
	bl	DestroySprite
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bls	.L420	@cond_branch
	mov	r0, #0x2
	bl	DigitObjUtil_DeletePrinter
	mov	r0, #0x1
	bl	DigitObjUtil_DeletePrinter
	mov	r0, #0x0
	bl	DigitObjUtil_DeletePrinter
	mov	r4, #0x0
	mov	r1, #0xc2
	lsl	r1, r1, #0x1
	add	r6, r5, r1
.L425:
	lsl	r0, r4, #0x2
	add	r0, r6, r0
	ldr	r0, [r0]
	bl	DestroySprite
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xa
	bls	.L425	@cond_branch
	mov	r4, #0x0
	ldrb	r2, [r5, #0x9]
	cmp	r4, r2
	bcs	.L428	@cond_branch
.L430:
	lsl	r1, r4, #0x2
	mov	r2, #0xae
	lsl	r2, r2, #0x1
	add	r0, r5, r2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	DestroySprite
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r5, #0x9]
	cmp	r4, r0
	bcc	.L430	@cond_branch
.L428:
	mov	r1, #0xac
	lsl	r1, r1, #0x1
	add	r0, r5, r1
	ldr	r2, [r0]
	add	r0, r2, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L432	@cond_branch
	add	r0, r2, #0
	bl	DestroySprite
.L432:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 sub_8022960,.Lfe36-sub_8022960
	.align	2, 0
	.type	 sub_8022A20,function
	.thumb_func
sub_8022A20:
	push	{lr}
	add	r3, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L434	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	sub	r2, r2, #0x12
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
.L434:
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 sub_8022A20,.Lfe37-sub_8022A20
	.align	2, 0
	.globl	sub_8022A4C
	.type	 sub_8022A4C,function
	.thumb_func
sub_8022A4C:
	push	{r4, r5, lr}
	add	r3, r0, #0
	mov	r1, #0x0
	ldr	r5, .L441
	add	r2, r3, #0
	add	r2, r2, #0x2e
	mov	r4, #0x0
.L439:
	lsl	r0, r1, #0x1
	add	r0, r2, r0
	strh	r4, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x7
	bls	.L439	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x24]
	strh	r0, [r3, #0x26]
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	sub	r2, r2, #0x12
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	str	r5, [r3, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L442:
	.align	2, 0
.L441:
	.word	SpriteCallbackDummy
.Lfe38:
	.size	 sub_8022A4C,.Lfe38-sub_8022A4C
	.align	2, 0
	.globl	sub_8022A94
	.type	 sub_8022A94,function
	.thumb_func
sub_8022A94:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r4, r5, #0
	add	r4, r4, #0x2e
	ldrh	r0, [r4, #0x4]
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r5, #0x26]
	add	r0, r0, r2
	strh	r0, [r5, #0x26]
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	mov	r6, #0x80
	lsl	r6, r6, #0x8
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L444	@cond_branch
	ldrh	r0, [r4, #0x6]
	ldrh	r2, [r5, #0x2e]
	add	r0, r0, r2
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x8]
	add	r0, r0, r1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L444	@cond_branch
	ldrh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	cmp	r0, #0x7e
	ble	.L444	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x24]
	ldrh	r1, [r4, #0xe]
	ldr	r0, .L447
	and	r0, r0, r1
	strh	r0, [r4, #0xe]
.L444:
	ldrh	r0, [r4]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	strh	r0, [r5, #0x20]
	mov	r2, #0x22
	ldrsh	r1, [r5, r2]
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	add	r1, r1, r0
	ldrh	r2, [r4, #0xe]
	ldr	r0, .L447
	and	r0, r0, r2
	cmp	r1, r0
	ble	.L446	@cond_branch
	ldr	r0, .L447+0x4
	str	r0, [r5, #0x1c]
.L446:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L448:
	.align	2, 0
.L447:
	.word	0x7fff
	.word	sub_8022A4C
.Lfe39:
	.size	 sub_8022A94,.Lfe39-sub_8022A94
	.align	2, 0
	.globl	sub_8022B28
	.type	 sub_8022B28,function
	.thumb_func
sub_8022B28:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	add	r7, r6, #0
	add	r7, r7, #0x2e
	mov	r0, #0x0
	mov	r8, r0
	mov	r2, #0xa0
	lsl	r2, r2, #0x2
	strh	r2, [r7, #0x2]
	mov	r0, #0x20
	strh	r0, [r7, #0x4]
	mov	r1, #0xa8
	strh	r1, [r7, #0xe]
	mov	r0, #0x24
	ldrsh	r4, [r6, r0]
	lsl	r4, r4, #0x17
	lsr	r4, r4, #0x10
	ldrh	r0, [r6, #0x22]
	sub	r1, r1, r0
	lsl	r1, r1, #0x17
	asr	r1, r1, #0x10
	add	r2, r2, #0x20
	asr	r2, r2, #0x1
	mov	r0, #0x7
	bl	MathUtil_Div16Shift
	add	r5, r0, #0
	ldrh	r0, [r6, #0x20]
	lsl	r0, r0, #0x7
	strh	r0, [r6, #0x2e]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	mov	r0, #0x7
	add	r1, r4, #0
	add	r2, r5, #0
	bl	MathUtil_Div16Shift
	strh	r0, [r7, #0x6]
	mov	r0, #0x7
	add	r1, r5, #0
	mov	r2, #0x55
	bl	MathUtil_Mul16Shift
	add	r2, r0, #0
	mov	r1, r8
	strh	r1, [r7, #0x8]
	mov	r1, #0xfe
	lsl	r1, r1, #0x6
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r0, #0x7
	bl	MathUtil_Div16Shift
	strh	r0, [r7, #0xa]
	mov	r2, #0x24
	ldrsh	r0, [r6, r2]
	cmp	r0, #0
	bge	.L450	@cond_branch
	add	r0, r0, #0x3
.L450:
	asr	r0, r0, #0x2
	strh	r0, [r7, #0xc]
	ldrh	r0, [r7, #0xe]
	ldr	r2, .L451
	add	r1, r2, #0
	orr	r0, r0, r1
	strh	r0, [r7, #0xe]
	mov	r0, r8
	strh	r0, [r6, #0x26]
	strh	r0, [r6, #0x24]
	ldr	r0, .L451+0x4
	str	r0, [r6, #0x1c]
	add	r2, r6, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r2, r2, #0x12
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L452:
	.align	2, 0
.L451:
	.word	-0x8000
	.word	sub_8022A94
.Lfe40:
	.size	 sub_8022B28,.Lfe40-sub_8022B28
	.align	2, 0
	.globl	sub_8022BEC
	.type	 sub_8022BEC,function
	.thumb_func
sub_8022BEC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r2, #0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	mov	r8, r4
	bl	sub_8020C00
	add	r6, r0, #0
	cmp	r5, #0x19
	bls	.L454	@cond_branch
	mov	r5, #0x0
.L454:
	cmp	r4, #0
	beq	.L456	@cond_branch
	cmp	r4, #0x1
	beq	.L459	@cond_branch
	b	.L455
.L456:
	cmp	r5, #0
	beq	.L457	@cond_branch
	ldr	r0, .L463
	lsl	r1, r5, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	add	r0, r6, #0
	add	r1, r7, #0
	bl	_call_via_r2
.L457:
	ldrb	r0, [r6, #0xe]
	cmp	r0, #0x19
	bls	.L458	@cond_branch
	mov	r0, r8
	strb	r0, [r6, #0xe]
.L458:
	ldr	r0, .L463
	ldrb	r1, [r6, #0xe]
	lsl	r1, r1, #0x2
	b	.L462
.L464:
	.align	2, 0
.L463:
	.word	gUnknown_082F43CC
.L459:
	ldr	r0, .L465
	lsl	r1, r5, #0x2
.L462:
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r6, #0x4]
.L455:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L466:
	.align	2, 0
.L465:
	.word	gUnknown_082F43CC
.Lfe41:
	.size	 sub_8022BEC,.Lfe41-sub_8022BEC
	.align	2, 0
	.type	 BerryCrushCommand_BeginNormalPaletteFade,function
	.thumb_func
BerryCrushCommand_BeginNormalPaletteFade:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldrb	r2, [r1]
	ldrb	r3, [r1, #0x1]
	lsl	r3, r3, #0x8
	orr	r2, r2, r3
	ldrb	r3, [r1, #0x2]
	lsl	r3, r3, #0x10
	orr	r2, r2, r3
	ldrb	r3, [r1, #0x3]
	lsl	r3, r3, #0x18
	add	r0, r2, #0
	orr	r0, r0, r3
	ldrb	r2, [r1, #0x9]
	strb	r2, [r1]
	ldrb	r4, [r1, #0x8]
	lsl	r4, r4, #0x8
	ldrb	r2, [r1, #0x7]
	orr	r4, r4, r2
	ldr	r5, .L468
	ldrb	r3, [r5, #0x8]
	mov	r2, #0x7f
	and	r2, r2, r3
	strb	r2, [r5, #0x8]
	mov	r5, #0x4
	ldrsb	r5, [r1, r5]
	ldrb	r2, [r1, #0x5]
	ldrb	r3, [r1, #0x6]
	str	r4, [sp]
	add	r1, r5, #0
	bl	BeginNormalPaletteFade
	bl	UpdatePaletteFade
	mov	r0, #0x2
	strb	r0, [r6, #0xe]
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L469:
	.align	2, 0
.L468:
	.word	gPaletteFade
.Lfe42:
	.size	 BerryCrushCommand_BeginNormalPaletteFade,.Lfe42-BerryCrushCommand_BeginNormalPaletteFade
	.align	2, 0
	.type	 sub_8022CB0,function
	.thumb_func
sub_8022CB0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	beq	.L476	@cond_branch
	cmp	r0, #0x1
	bgt	.L482	@cond_branch
	cmp	r0, #0
	beq	.L472	@cond_branch
	b	.L480
.L482:
	cmp	r0, #0x2
	beq	.L477	@cond_branch
	cmp	r0, #0x3
	beq	.L479	@cond_branch
	b	.L480
.L472:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L484	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L480	@cond_branch
	mov	r0, #0x3
	b	.L486
.L476:
	bl	Rfu_SetLinkStandbyCallback
	b	.L480
.L477:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L480	@cond_branch
	b	.L484
.L479:
	ldrb	r0, [r4, #0xf]
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	mov	r0, #0x0
	strb	r0, [r4, #0xc]
	b	.L483
.L480:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
.L486:
	strb	r0, [r4, #0xc]
.L484:
	mov	r0, #0x0
.L483:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe43:
	.size	 sub_8022CB0,.Lfe43-sub_8022CB0
	.align	2, 0
	.type	 sub_8022D14,function
	.thumb_func
sub_8022D14:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	add	r7, r0, #0
	add	r5, r1, #0
	ldrb	r4, [r5, #0x3]
	lsl	r4, r4, #0x8
	ldrb	r0, [r5, #0x2]
	orr	r4, r4, r0
	ldrb	r6, [r7, #0xc]
	cmp	r6, #0x1
	beq	.L492	@cond_branch
	cmp	r6, #0x1
	bgt	.L501	@cond_branch
	cmp	r6, #0
	beq	.L489	@cond_branch
	b	.L488
.L501:
	cmp	r6, #0x2
	beq	.L495	@cond_branch
	cmp	r6, #0x3
	beq	.L497	@cond_branch
	b	.L488
.L489:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldrb	r1, [r5, #0x1]
	mov	r0, #0x2
	mov	r8, r0
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L490	@cond_branch
	ldr	r4, .L505
	ldr	r1, .L505+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldrb	r3, [r7, #0xb]
	str	r6, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	AddTextPrinterParameterized2
	b	.L491
.L506:
	.align	2, 0
.L505:
	.word	gStringVar4
	.word	gUnknown_082F32A4
.L490:
	ldr	r1, .L507
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	ldrb	r3, [r7, #0xb]
	str	r4, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	AddTextPrinterParameterized2
.L491:
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L488
.L508:
	.align	2, 0
.L507:
	.word	gUnknown_082F32A4
.L492:
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L503	@cond_branch
	cmp	r4, #0
	bne	.L488	@cond_branch
	ldrb	r0, [r7, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r7, #0xc]
	b	.L488
.L495:
	ldr	r0, .L509
	ldrh	r0, [r0, #0x2e]
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L488	@cond_branch
	b	.L503
.L510:
	.align	2, 0
.L509:
	.word	gMain
.L497:
	ldrb	r1, [r5, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L498	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
.L498:
	ldrb	r0, [r7, #0xe]
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	ldrb	r0, [r5, #0x4]
	b	.L504
.L488:
	ldrb	r0, [r7, #0xc]
	add	r0, r0, #0x1
.L504:
	strb	r0, [r7, #0xc]
.L503:
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe44:
	.size	 sub_8022D14,.Lfe44-sub_8022D14
	.align	2, 0
	.type	 sub_8022E1C,function
	.thumb_func
sub_8022E1C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_802104C
	cmp	r0, #0
	beq	.L512	@cond_branch
	ldrb	r0, [r4, #0xe]
	add	r2, r4, #0
	add	r2, r2, #0x36
	mov	r1, #0x0
	bl	sub_8022BEC
.L512:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 sub_8022E1C,.Lfe45-sub_8022E1C
	.align	2, 0
	.type	 sub_8022E3C,function
	.thumb_func
sub_8022E3C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_802130C
	cmp	r0, #0
	beq	.L514	@cond_branch
	ldrb	r0, [r4, #0xe]
	add	r2, r4, #0
	add	r2, r2, #0x36
	mov	r1, #0x0
	bl	sub_8022BEC
.L514:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 sub_8022E3C,.Lfe46-sub_8022E3C
	.align	2, 0
	.type	 sub_8022E5C,function
	.thumb_func
sub_8022E5C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0
	beq	.L517	@cond_branch
	cmp	r0, #0x1
	beq	.L518	@cond_branch
	b	.L516
.L517:
	bl	Rfu_SetLinkStandbyCallback
	b	.L516
.L518:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L523	@cond_branch
	ldr	r0, .L524
	bl	PlayNewMapMusic
	mov	r0, #0x7
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	mov	r1, #0x0
	mov	r0, #0x3
	strh	r0, [r4, #0x12]
	strb	r1, [r4, #0xc]
	b	.L523
.L525:
	.align	2, 0
.L524:
	.word	0x1e5
.L516:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xc]
.L523:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 sub_8022E5C,.Lfe47-sub_8022E5C
	.align	2, 0
	.type	 sub_8022EAC,function
	.thumb_func
sub_8022EAC:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r5, r1, #0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0
	beq	.L529	@cond_branch
	cmp	r0, #0x1
	beq	.L530	@cond_branch
	add	r0, r0, #0x1
	b	.L532
.L529:
	add	r0, r4, #0
	bl	sub_8024578
	mov	r0, #0x1
	str	r0, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	sub_8024644
	mov	r0, #0x7
	strb	r0, [r4, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	b	.L527
.L530:
	mov	r0, #0x8
	strb	r0, [r4, #0xe]
	mov	r0, #0x5
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	mov	r0, #0x2
.L532:
	strb	r0, [r4, #0xc]
.L527:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 sub_8022EAC,.Lfe48-sub_8022EAC
	.align	2, 0
	.type	 sub_8022F04,function
	.thumb_func
sub_8022F04:
	push	{lr}
	mov	r1, #0x0
	str	r1, [r0, #0x4]
	ldr	r0, .L534
	bl	SetMainCallback2
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L535:
	.align	2, 0
.L534:
	.word	sub_8020E1C
.Lfe49:
	.size	 sub_8022F04,.Lfe49-sub_8022F04
	.align	2, 0
	.type	 sub_8022F1C,function
	.thumb_func
sub_8022F1C:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r2, r1, #0
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x5
	bls	.LCB5725
	b	.L537	@long jump
.LCB5725:
	lsl	r0, r0, #0x2
	ldr	r1, .L557
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L558:
	.align	2, 0
.L557:
	.word	.L553
	.align	2, 0
	.align	2, 0
.L553:
	.word	.L538
	.word	.L539
	.word	.L540
	.word	.L542
	.word	.L544
	.word	.L552
.L538:
	mov	r0, #0x1
	str	r0, [sp]
	add	r0, r2, #0
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_8024644
	mov	r0, #0x9
	strb	r0, [r5, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	b	.L556
.L539:
	bl	Rfu_SetLinkStandbyCallback
	b	.L537
.L540:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L556	@cond_branch
	add	r4, r5, #0
	add	r4, r4, #0x42
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0xc
	bl	memset
	ldrb	r0, [r5, #0x8]
	lsl	r0, r0, #0x5
	add	r0, r5, r0
	add	r0, r0, #0xa4
	ldrh	r0, [r0]
	strh	r0, [r4]
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x2
	bl	SendBlock
	b	.L537
.L542:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L556	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x10]
	b	.L537
.L544:
	bl	GetBlockReceivedStatus
	ldr	r2, .L559
	ldrb	r4, [r5, #0x9]
	sub	r1, r4, #0x2
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L556	@cond_branch
	mov	r3, #0x0
	cmp	r3, r4
	bcs	.L547	@cond_branch
	ldr	r7, .L559+0x4
	mov	r6, #0x0
	ldr	r4, .L559+0x8
.L549:
	lsl	r0, r3, #0x5
	add	r0, r5, r0
	lsl	r1, r3, #0x8
	add	r1, r1, r7
	ldrh	r1, [r1]
	add	r2, r0, #0
	add	r2, r2, #0xa4
	strh	r1, [r2]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0xb0
	bls	.L550	@cond_branch
	strh	r6, [r2]
.L550:
	ldrh	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r5, #0x18]
	ldrb	r1, [r1]
	add	r0, r0, r1
	strh	r0, [r5, #0x18]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x2]
	ldr	r0, [r5, #0x1c]
	add	r0, r0, r1
	str	r0, [r5, #0x1c]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r0, [r5, #0x9]
	cmp	r3, r0
	bcc	.L549	@cond_branch
.L547:
	mov	r0, #0x0
	strh	r0, [r5, #0x10]
	bl	ResetBlockReceivedFlags
	mov	r1, #0x18
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x8
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	bl	MathUtil_Div32
	str	r0, [r5, #0x20]
	b	.L537
.L560:
	.align	2, 0
.L559:
	.word	gUnknown_082F4448
	.word	gBlockRecvBuffer
	.word	gUnknown_0858AB24
.L552:
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	mov	r0, #0xa
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	mov	r1, #0x0
	mov	r0, #0x4
	strh	r0, [r5, #0x12]
	strb	r1, [r5, #0xc]
	b	.L556
.L537:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L556:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe50:
	.size	 sub_8022F1C,.Lfe50-sub_8022F1C
	.align	2, 0
	.type	 sub_8023070,function
	.thumb_func
sub_8023070:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x6
	bls	.LCB5927
	b	.L562	@long jump
.LCB5927:
	lsl	r0, r0, #0x2
	ldr	r1, .L580
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L581:
	.align	2, 0
.L580:
	.word	.L575
	.align	2, 0
	.align	2, 0
.L575:
	.word	.L563
	.word	.L564
	.word	.L566
	.word	.L567
	.word	.L569
	.word	.L572
	.word	.L573
.L563:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r4, r0
	add	r0, r4, #0
	bl	sub_80214A8
	bl	Rfu_SetLinkStandbyCallback
	b	.L562
.L564:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L578	@cond_branch
	mov	r2, #0x9c
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r3, .L582
	add	r1, r4, r3
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r1, r4, r2
	strb	r0, [r1]
	add	r3, r3, #0x2
	add	r1, r4, r3
	strb	r0, [r1]
	b	.L562
.L583:
	.align	2, 0
.L582:
	.word	0x139
.L566:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r3, r4, r0
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	mov	r2, #0xb8
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	add	r0, r1, r0
	ldr	r2, [r0]
	ldr	r0, .L584
	str	r0, [r2, #0x1c]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r1, r1, #0x2c
	ldrb	r2, [r1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r0, #0x3d
	bl	PlaySE
	b	.L562
.L585:
	.align	2, 0
.L584:
	.word	sub_8021608
.L567:
	mov	r3, #0x9c
	lsl	r3, r3, #0x1
	add	r2, r4, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r3, r3, #0x38
	add	r1, r4, r3
	add	r3, r1, r0
	ldr	r0, [r3]
	ldr	r1, [r0, #0x1c]
	ldr	r0, .L586
	cmp	r1, r0
	beq	.L578	@cond_branch
	mov	r0, #0x0
	str	r0, [r3]
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	bl	Rfu_SetLinkStandbyCallback
	b	.L562
.L587:
	.align	2, 0
.L586:
	.word	sub_8021608
.L569:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L578	@cond_branch
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r4, r0
	ldrb	r0, [r1]
	ldrb	r2, [r4, #0x9]
	cmp	r0, r2
	bcs	.L571	@cond_branch
	mov	r0, #0x2
	b	.L579
.L571:
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L562
.L572:
	mov	r3, #0x9c
	lsl	r3, r3, #0x1
	add	r1, r4, r3
	add	r0, r4, #0
	bl	sub_80216A8
	bl	Rfu_SetLinkStandbyCallback
	b	.L562
.L573:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L578	@cond_branch
	mov	r0, #0x2b
	bl	PlaySE
	mov	r0, #0xb
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	mov	r1, #0x0
	mov	r0, #0x5
	strh	r0, [r4, #0x12]
	strb	r1, [r4, #0xc]
	b	.L578
.L562:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
.L579:
	strb	r0, [r4, #0xc]
.L578:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe51:
	.size	 sub_8023070,.Lfe51-sub_8023070
	.align	2, 0
	.type	 sub_80231B8,function
	.thumb_func
sub_80231B8:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldrb	r1, [r4, #0xc]
	cmp	r1, #0x1
	beq	.L592	@cond_branch
	cmp	r1, #0x1
	bgt	.L600	@cond_branch
	cmp	r1, #0
	beq	.L590	@cond_branch
	b	.L589
.L600:
	cmp	r1, #0x2
	beq	.L595	@cond_branch
	cmp	r1, #0x3
	beq	.L596	@cond_branch
	b	.L589
.L590:
	ldrh	r0, [r4, #0x2a]
	add	r0, r0, #0x4
	strh	r0, [r4, #0x2a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.LCB6158
	b	.L602	@long jump
.LCB6158:
	strh	r1, [r4, #0x2a]
	ldr	r0, .L603
	add	r3, r4, r0
	mov	r0, #0x4
	strb	r0, [r3]
	mov	r2, #0x9c
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r2, .L603+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r2, #0x9d
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	strb	r0, [r1]
	mov	r0, #0xd6
	bl	PlaySE
	b	.L589
.L604:
	.align	2, 0
.L603:
	.word	0x139
	.word	gUnknown_082F326C
.L592:
	ldr	r7, .L605
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r6, r4, r0
	ldr	r1, .L605+0x4
	add	r5, r4, r1
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	ldrb	r2, [r6]
	add	r0, r0, r2
	add	r0, r0, r7
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	strh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x12
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1a
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1e
	bl	SetGpuReg
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	mov	r1, #0x9d
	lsl	r1, r1, #0x1
	add	r2, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2]
	cmp	r0, r1
	bcc	.L602	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L589	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r5]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	add	r0, r0, r7
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r0, #0x0
	strb	r0, [r6]
	b	.L602
.L606:
	.align	2, 0
.L605:
	.word	gUnknown_082F326C
	.word	0x139
.L595:
	mov	r0, #0x0
	strh	r0, [r4, #0x2c]
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1e
	mov	r1, #0x0
	bl	SetGpuReg
	bl	Rfu_SetLinkStandbyCallback
	b	.L589
.L596:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L602	@cond_branch
	mov	r0, #0xc
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	mov	r1, #0x0
	mov	r0, #0x6
	strh	r0, [r4, #0x12]
	strb	r1, [r4, #0xc]
	b	.L602
.L589:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xc]
.L602:
	mov	r0, #0x0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe52:
	.size	 sub_80231B8,.Lfe52-sub_80231B8
	.align	2, 0
	.type	 sub_80232EC,function
	.thumb_func
sub_80232EC:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	beq	.L609	@cond_branch
	cmp	r0, #0x1
	bgt	.L620	@cond_branch
	cmp	r0, #0
	beq	.L613	@cond_branch
	b	.L608
.L620:
	cmp	r0, #0x2
	beq	.L611	@cond_branch
	cmp	r0, #0x3
	beq	.L614	@cond_branch
	b	.L608
.L609:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L622	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r1, #0
	mov	r2, #0x78
	mov	r3, #0x50
	bl	StartMinigameCountdown
	b	.L608
.L611:
	bl	IsMinigameCountdownRunning
	cmp	r0, #0
	bne	.L622	@cond_branch
.L613:
	bl	Rfu_SetLinkStandbyCallback
	b	.L608
.L614:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L622	@cond_branch
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r4, r0
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r2, .L623
	add	r1, r4, r2
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r4, r2
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r4, r2
	strb	r0, [r1]
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	cmp	r0, #0
	bne	.L616	@cond_branch
	mov	r0, #0xd
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	b	.L617
.L624:
	.align	2, 0
.L623:
	.word	0x139
.L616:
	mov	r0, #0xe
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
.L617:
	mov	r1, #0x0
	mov	r0, #0x7
	strh	r0, [r4, #0x12]
	strb	r1, [r4, #0xc]
	b	.L622
.L608:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xc]
.L622:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 sub_80232EC,.Lfe53-sub_80232EC
	.align	2, 0
	.globl	sub_802339C
	.type	 sub_802339C,function
	.thumb_func
sub_802339C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r4, r0, #0
	mov	r0, #0x0
	mov	r8, r0
	mov	r2, #0x0
	add	r7, r2, #0
	ldrb	r1, [r4, #0x9]
	cmp	r7, r1
	bcs	.L627	@cond_branch
	mov	r2, #0x5e
	add	r2, r2, r4
	mov	r9, r2
	ldr	r3, .L648
	mov	sl, r3
.L629:
	lsl	r0, r7, #0x4
	ldr	r1, .L648+0x4
	add	r2, r0, r1
	ldrh	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	mov	r3, #0xbc
	lsl	r3, r3, #0x6
	cmp	r0, r3
	bne	.L628	@cond_branch
	ldrh	r0, [r2, #0x2]
	cmp	r0, #0x2
	bne	.L628	@cond_branch
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L631	@cond_branch
	mov	r0, r9
	ldrb	r2, [r0]
	lsr	r1, r2, #0x3
	mov	r3, sl
	add	r0, r7, r3
	ldrb	r0, [r0]
	orr	r1, r1, r0
	lsl	r1, r1, #0x3
	mov	r0, #0x7
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, r9
	strb	r0, [r1]
	lsl	r2, r7, #0x5
	add	r3, r4, r2
	mov	ip, r3
	mov	r1, ip
	add	r1, r1, #0xb5
	mov	r0, #0x1
	strb	r0, [r1]
	sub	r1, r1, #0x7
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	sub	r1, r1, #0x8
	ldrh	r0, [r4, #0x28]
	ldrh	r1, [r1]
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r5, ip
	add	r5, r5, #0xaa
	ldrh	r1, [r5]
	sub	r0, r1, #0x1
	add	r6, r2, #0
	cmp	r3, r0
	blt	.L632	@cond_branch
	add	r0, r1, #0x1
	cmp	r3, r0
	bgt	.L632	@cond_branch
	mov	r1, ip
	add	r1, r1, #0xa8
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	strh	r3, [r5]
	mov	r0, ip
	add	r0, r0, #0xac
	ldrh	r1, [r1]
	ldrh	r2, [r0]
	cmp	r1, r2
	bls	.L634	@cond_branch
	strh	r1, [r0]
	b	.L634
.L649:
	.align	2, 0
.L648:
	.word	gUnknown_082F325C
	.word	gRecvCmds
.L632:
	add	r0, r4, r6
	add	r2, r0, #0
	add	r2, r2, #0xa8
	mov	r1, #0x0
	strh	r1, [r2]
	add	r0, r0, #0xaa
	strh	r3, [r0]
.L634:
	add	r1, r4, r6
	ldrh	r0, [r4, #0x28]
	add	r3, r1, #0
	add	r3, r3, #0xa6
	mov	r2, #0x0
	strh	r0, [r3]
	add	r1, r1, #0xb4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bls	.L628	@cond_branch
	strb	r2, [r1]
	b	.L628
.L631:
	lsl	r0, r7, #0x5
	add	r0, r4, r0
	add	r0, r0, #0xb5
	strb	r1, [r0]
.L628:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r3, [r4, #0x9]
	cmp	r7, r3
	bcc	.L629	@cond_branch
.L627:
	mov	r0, r8
	cmp	r0, #0x1
	bls	.L638	@cond_branch
	mov	r7, #0x0
	ldrb	r1, [r4, #0x9]
	cmp	r7, r1
	bcs	.L638	@cond_branch
	mov	r3, #0x2
.L642:
	lsl	r0, r7, #0x5
	add	r1, r4, r0
	add	r2, r1, #0
	add	r2, r2, #0xb5
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L641	@cond_branch
	orr	r0, r0, r3
	strb	r0, [r2]
	add	r1, r1, #0xb0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L641:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r2, [r4, #0x9]
	cmp	r7, r2
	bcc	.L642	@cond_branch
.L638:
	mov	r3, r8
	cmp	r3, #0
	beq	.L645	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, r8
	strh	r0, [r4, #0x2e]
	ldr	r1, .L650
	mov	r0, r8
	sub	r0, r0, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrh	r0, [r4, #0x34]
	add	r0, r0, r8
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x1a]
	add	r0, r0, r8
	strh	r0, [r4, #0x1a]
	mov	r1, #0x18
	ldrsh	r0, [r4, r1]
	mov	r3, #0x1a
	ldrsh	r2, [r4, r3]
	sub	r0, r0, r2
	cmp	r0, #0
	ble	.L646	@cond_branch
	lsl	r2, r2, #0x8
	ldr	r1, [r4, #0x20]
	add	r0, r2, #0
	bl	MathUtil_Div32
	add	r2, r0, #0
	asr	r2, r2, #0x8
	add	r0, r4, #0
	add	r0, r0, #0x24
	strb	r2, [r0]
	b	.L645
.L651:
	.align	2, 0
.L650:
	.word	gUnknown_082F3264
.L646:
	add	r1, r4, #0
	add	r1, r1, #0x24
	mov	r0, #0x20
	strb	r0, [r1]
	add	r2, r4, #0
	add	r2, r2, #0x5e
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L645:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 sub_802339C,.Lfe54-sub_802339C
	.align	2, 0
	.globl	sub_8023558
	.type	 sub_8023558,function
	.thumb_func
sub_8023558:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	mov	r6, #0x0
	mov	r1, #0x0
	add	r4, r1, #0
	ldrb	r0, [r3, #0x9]
	cmp	r4, r0
	bcs	.L654	@cond_branch
	add	r5, r3, #0
	add	r5, r5, #0x64
.L656:
	lsl	r0, r4, #0x5
	add	r1, r3, r0
	add	r0, r1, #0
	add	r0, r0, #0xb5
	ldrb	r2, [r0]
	cmp	r2, #0
	beq	.L655	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r1, #0
	add	r0, r0, #0xb4
	ldrb	r0, [r0]
	add	r1, r0, #0x1
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L658	@cond_branch
	mov	r0, #0x4
	orr	r1, r1, r0
.L658:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r1, r1, r0
	lsl	r0, r1, #0x10
	lsr	r1, r0, #0x10
	ldrh	r0, [r5]
	orr	r1, r1, r0
	strh	r1, [r5]
.L655:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r1, [r3, #0x9]
	cmp	r4, r1
	bcc	.L656	@cond_branch
.L654:
	add	r0, r3, #0
	add	r0, r0, #0x24
	ldrb	r1, [r0]
	add	r0, r0, #0x3c
	strh	r1, [r0]
	cmp	r6, #0
	bne	.L660	@cond_branch
	ldr	r2, .L674
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L663	@cond_branch
	mov	r4, #0x9c
	lsl	r4, r4, #0x1
	add	r1, r3, r4
	b	.L673
.L675:
	.align	2, 0
.L674:
	.word	0x13b
.L660:
	ldr	r5, .L676
	add	r2, r3, r5
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L665	@cond_branch
	ldr	r0, .L676+0x4
	add	r1, r3, r0
	ldrb	r2, [r1]
	cmp	r6, r2
	beq	.L666	@cond_branch
	sub	r0, r6, #0x1
	strb	r0, [r1]
	ldr	r1, .L676+0x8
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x9d
	lsl	r4, r4, #0x1
	add	r1, r3, r4
	strb	r0, [r1]
	b	.L664
.L677:
	.align	2, 0
.L676:
	.word	0x13b
	.word	0x139
	.word	gUnknown_082F3290
.L666:
	mov	r5, #0x9c
	lsl	r5, r5, #0x1
	add	r1, r3, r5
.L673:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L664
.L665:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r3, r0
	mov	r0, #0x0
	strb	r0, [r1]
	sub	r0, r6, #0x1
	ldr	r4, .L678
	add	r1, r3, r4
	strb	r0, [r1]
	ldr	r1, .L678+0x4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r5, #0x9d
	lsl	r5, r5, #0x1
	add	r1, r3, r5
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r2]
.L664:
	ldr	r0, .L678+0x8
	add	r4, r3, r0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L663	@cond_branch
	mov	r2, #0x9c
	lsl	r2, r2, #0x1
	add	r1, r3, r2
	mov	r5, #0x9d
	lsl	r5, r5, #0x1
	add	r2, r3, r5
	ldrb	r0, [r1]
	ldrb	r5, [r2]
	cmp	r0, r5
	bcc	.L670	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r5, .L678
	add	r1, r3, r5
	strb	r0, [r1]
	strb	r0, [r2]
	strb	r0, [r4]
	mov	r1, #0x0
	b	.L671
.L679:
	.align	2, 0
.L678:
	.word	0x139
	.word	gUnknown_082F3290
	.word	0x13b
.L670:
	ldr	r2, .L680
	ldrb	r1, [r1]
	ldr	r4, .L680+0x4
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r1, [r1]
.L671:
	add	r0, r3, #0
	add	r0, r0, #0x5f
	strb	r1, [r0]
	b	.L672
.L681:
	.align	2, 0
.L680:
	.word	gUnknown_082F3290
	.word	0x139
.L663:
	add	r1, r3, #0
	add	r1, r1, #0x5f
	mov	r0, #0x0
	strb	r0, [r1]
.L672:
	ldrh	r1, [r3, #0x26]
	add	r0, r3, #0
	add	r0, r0, #0x62
	strh	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 sub_8023558,.Lfe55-sub_8023558
	.align	2, 0
	.globl	sub_80236B8
	.type	 sub_80236B8,function
	.thumb_func
sub_80236B8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	ldr	r3, .L707
	ldrh	r1, [r3, #0x2e]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L683	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x5e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L683:
	ldrh	r1, [r3, #0x2c]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L684	@cond_branch
	ldrb	r0, [r5, #0x8]
	lsl	r0, r0, #0x5
	add	r0, r5, r0
	add	r1, r0, #0
	add	r1, r1, #0xb2
	ldrh	r0, [r1]
	ldrh	r2, [r5, #0x28]
	cmp	r0, r2
	bcs	.L684	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1]
.L684:
	ldrb	r0, [r5, #0x8]
	add	r7, r5, #0
	add	r7, r7, #0x5e
	cmp	r0, #0
	beq	.L686	@cond_branch
	ldrb	r1, [r7]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB7072
	b	.L682	@long jump
.LCB7072:
.L686:
	add	r4, r5, #0
	add	r4, r4, #0x5c
	mov	r0, #0x2
	strh	r0, [r4]
	ldrh	r0, [r5, #0x28]
	mov	r1, #0x1e
	bl	__umodsi3
	lsl	r0, r0, #0x10
	mov	r8, r4
	add	r6, r5, #0
	add	r6, r6, #0x25
	cmp	r0, #0
	bne	.L687	@cond_branch
	mov	r0, #0x2e
	ldrsh	r2, [r5, r0]
	ldr	r1, .L707+0x4
	ldrb	r0, [r5, #0x9]
	sub	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r2, r0
	ble	.L688	@cond_branch
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	ldrb	r0, [r6]
	mov	r1, #0x10
	orr	r0, r0, r1
	b	.L705
.L708:
	.align	2, 0
.L707:
	.word	gMain
	.word	gUnknown_082F4444
.L688:
	ldrb	r1, [r6]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r1
.L705:
	strb	r0, [r6]
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x32]
.L687:
	ldrh	r0, [r5, #0x28]
	mov	r1, #0xf
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L690	@cond_branch
	mov	r0, #0x34
	ldrsh	r2, [r5, r0]
	ldr	r3, .L709
	ldrb	r0, [r5, #0x9]
	sub	r0, r0, #0x2
	lsl	r1, r0, #0x2
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L691	@cond_branch
	ldrb	r1, [r6]
	mov	r0, #0x1f
	and	r0, r0, r1
	strb	r0, [r6]
	b	.L692
.L710:
	.align	2, 0
.L709:
	.word	gUnknown_082F4434
.L691:
	add	r0, r3, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L693	@cond_branch
	ldrb	r0, [r6]
	mov	r1, #0x1f
	and	r1, r1, r0
	mov	r0, #0x20
	b	.L706
.L693:
	add	r0, r3, #0x2
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L695	@cond_branch
	mov	r0, #0x2
	strh	r0, [r5, #0x34]
	b	.L692
.L695:
	add	r0, r3, #0x3
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L697	@cond_branch
	mov	r0, #0x3
	strh	r0, [r5, #0x34]
	b	.L692
.L697:
	ldrb	r0, [r6]
	mov	r1, #0x1f
	and	r1, r1, r0
	mov	r0, #0x80
.L706:
	orr	r1, r1, r0
	strb	r1, [r6]
.L692:
	mov	r0, #0x0
	strh	r0, [r5, #0x34]
	b	.L699
.L690:
	ldrh	r0, [r5, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x10]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3c
	bls	.L699	@cond_branch
	cmp	r0, #0x46
	bls	.L701	@cond_branch
	bl	sub_8011AC8
	mov	r0, #0x0
	strh	r0, [r5, #0x10]
	b	.L699
.L701:
	ldrb	r0, [r7]
	mov	r4, #0xf8
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L699	@cond_branch
	bl	sub_8011AC8
	strh	r4, [r5, #0x10]
.L699:
	ldrh	r1, [r5, #0x28]
	ldr	r0, .L711
	cmp	r1, r0
	bls	.L704	@cond_branch
	ldrb	r0, [r7]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r7]
.L704:
	ldrb	r1, [r6]
	lsl	r1, r1, #0x1b
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x1
	ldrb	r2, [r7]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r7]
	ldrb	r0, [r6]
	lsr	r0, r0, #0x5
	add	r2, r5, #0
	add	r2, r2, #0x66
	strh	r0, [r2]
	add	r4, r5, #0
	add	r4, r4, #0x42
	add	r0, r4, #0
	mov	r1, r8
	mov	r2, #0xc
	bl	memcpy
	add	r0, r4, #0
	bl	Rfu_SendPacket
.L682:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L712:
	.align	2, 0
.L711:
	.word	0x8c9f
.Lfe56:
	.size	 sub_80236B8,.Lfe56-sub_80236B8
	.align	2, 0
	.globl	sub_802385C
	.type	 sub_802385C,function
	.thumb_func
sub_802385C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r4, #0x0
	ldr	r3, .L723
	ldrb	r0, [r5, #0x9]
	cmp	r4, r0
	bcs	.L715	@cond_branch
	mov	r1, #0x0
.L717:
	lsl	r0, r4, #0x5
	add	r0, r5, r0
	add	r0, r0, #0xb5
	strb	r1, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r5, #0x9]
	cmp	r4, r0
	bcc	.L717	@cond_branch
.L715:
	add	r2, r3, #0
	ldrh	r0, [r2]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r1, r1, r0
	mov	r0, #0xbc
	lsl	r0, r0, #0x6
	cmp	r1, r0
	bne	.L720	@cond_branch
	ldrh	r0, [r2, #0x2]
	cmp	r0, #0x2
	beq	.L719	@cond_branch
.L720:
	add	r2, r5, #0
	add	r2, r2, #0x25
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	b	.L721
.L724:
	.align	2, 0
.L723:
	.word	gRecvCmds
.L719:
	add	r4, r5, #0
	add	r4, r4, #0x4e
	add	r0, r4, #0
	add	r1, r3, #0
	mov	r2, #0xe
	bl	memcpy
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x2a]
	mov	r0, #0x5
	ldrsb	r0, [r4, r0]
	strh	r0, [r5, #0x2c]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x28]
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	add	r0, r5, #0
	bl	sub_80216E0
	ldrb	r1, [r4, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L721	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x25
	ldrb	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
.L721:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 sub_802385C,.Lfe57-sub_802385C
	.align	2, 0
	.type	 sub_80238F0,function
	.thumb_func
sub_80238F0:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x5c
	mov	r1, #0x0
	mov	r2, #0xc
	bl	memset
	add	r0, r4, #0
	add	r0, r0, #0x4e
	mov	r1, #0x0
	mov	r2, #0xe
	bl	memset
	add	r0, r4, #0
	bl	sub_802385C
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x12
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1a
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1e
	bl	SetGpuReg
	add	r0, r4, #0
	add	r0, r0, #0x25
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L726	@cond_branch
	ldrh	r1, [r4, #0x28]
	ldr	r0, .L731
	cmp	r1, r0
	bls	.L727	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r4, #0x28]
	mov	r0, #0x10
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	b	.L728
.L732:
	.align	2, 0
.L731:
	.word	0x8c9f
.L727:
	mov	r0, #0xf
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
.L728:
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	strb	r1, [r4, #0xc]
	b	.L730
.L726:
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	bl	sub_802339C
	add	r0, r4, #0
	bl	sub_8023558
	add	r0, r4, #0
	bl	sub_80236B8
	mov	r0, #0x0
.L730:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe58:
	.size	 sub_80238F0,.Lfe58-sub_80238F0
	.align	2, 0
	.type	 sub_8023998,function
	.thumb_func
sub_8023998:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x5c
	mov	r1, #0x0
	mov	r2, #0xc
	bl	memset
	add	r0, r4, #0
	add	r0, r0, #0x4e
	mov	r1, #0x0
	mov	r2, #0xe
	bl	memset
	add	r0, r4, #0
	bl	sub_802385C
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x12
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1a
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1e
	bl	SetGpuReg
	add	r0, r4, #0
	add	r0, r0, #0x25
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L734	@cond_branch
	ldrh	r1, [r4, #0x28]
	ldr	r0, .L739
	cmp	r1, r0
	bls	.L735	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r4, #0x28]
	mov	r0, #0x10
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	b	.L736
.L740:
	.align	2, 0
.L739:
	.word	0x8c9f
.L735:
	mov	r0, #0xf
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
.L736:
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	strb	r1, [r4, #0xc]
	b	.L738
.L734:
	add	r0, r4, #0
	bl	sub_80236B8
	mov	r0, #0x0
.L738:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe59:
	.size	 sub_8023998,.Lfe59-sub_8023998
	.align	2, 0
	.type	 sub_8023A30,function
	.thumb_func
sub_8023A30:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x5
	bls	.LCB7640
	b	.L742	@long jump
.LCB7640:
	lsl	r0, r0, #0x2
	ldr	r1, .L758
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L759:
	.align	2, 0
.L758:
	.word	.L754
	.align	2, 0
	.align	2, 0
.L754:
	.word	.L743
	.word	.L744
	.word	.L746
	.word	.L749
	.word	.L750
	.word	.L752
.L743:
	mov	r0, #0x8
	strh	r0, [r4, #0x12]
	mov	r0, #0xd6
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	ldr	r2, .L760
	mov	r1, #0x8
	bl	BlendPalettes
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r4, r0
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L742
.L761:
	.align	2, 0
.L760:
	.word	0x3ff
.L744:
	mov	r1, #0x9c
	lsl	r1, r1, #0x1
	add	r5, r4, r1
	ldrb	r0, [r5]
	sub	r0, r0, #0x1
	strb	r0, [r5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.LCB7698
	b	.L757	@long jump
.LCB7698:
	mov	r0, #0x1
	neg	r0, r0
	ldr	r2, .L762
	mov	r1, #0x0
	bl	BlendPalettes
	ldr	r2, .L762+0x4
	add	r1, r4, r2
	mov	r0, #0x4
	strb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r5]
	ldr	r2, .L762+0x8
	ldrb	r1, [r1]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r2, #0x9d
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	strb	r0, [r1]
	b	.L742
.L763:
	.align	2, 0
.L762:
	.word	0x3ff
	.word	0x139
	.word	gUnknown_082F326C
.L746:
	ldr	r7, .L764
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r6, r4, r0
	ldr	r1, .L764+0x4
	add	r5, r4, r1
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	ldrb	r2, [r6]
	add	r0, r0, r2
	add	r0, r0, r7
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	strh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x12
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1a
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1e
	bl	SetGpuReg
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	mov	r1, #0x9d
	lsl	r1, r1, #0x1
	add	r2, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2]
	cmp	r0, r1
	bcc	.L757	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L742	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r5]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	add	r0, r0, r7
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r0, #0x0
	strb	r0, [r6]
	b	.L757
.L765:
	.align	2, 0
.L764:
	.word	gUnknown_082F326C
	.word	0x139
.L749:
	mov	r0, #0x0
	strh	r0, [r4, #0x2c]
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1e
	mov	r1, #0x0
	bl	SetGpuReg
	b	.L742
.L750:
	mov	r2, #0x9c
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	add	r0, r4, #0
	bl	sub_80218D4
	cmp	r0, #0
	beq	.L757	@cond_branch
	bl	Rfu_SetLinkStandbyCallback
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	b	.L742
.L752:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L757	@cond_branch
	mov	r0, #0x11
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	strb	r1, [r4, #0xc]
	b	.L756
.L742:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xc]
.L757:
	mov	r0, #0x0
.L756:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe60:
	.size	 sub_8023A30,.Lfe60-sub_8023A30
	.align	2, 0
	.type	 sub_8023BC0,function
	.thumb_func
sub_8023BC0:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r6, r1, #0
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x1
	beq	.L769	@cond_branch
	cmp	r0, #0x1
	bgt	.L777	@cond_branch
	cmp	r0, #0
	beq	.L768	@cond_branch
	b	.L767
.L777:
	cmp	r0, #0x2
	beq	.L771	@cond_branch
	cmp	r0, #0x3
	beq	.L773	@cond_branch
	b	.L767
.L768:
	mov	r0, #0x9
	strh	r0, [r5, #0x12]
	mov	r0, #0x20
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x8
	mov	r2, #0x1f
	bl	BlendPalettes
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	mov	r0, #0x4
	strb	r0, [r1]
	b	.L767
.L769:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r4, r5, r0
	ldrb	r0, [r4]
	sub	r0, r0, #0x1
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L779	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	mov	r2, #0x1f
	bl	BlendPalettes
	mov	r0, #0x0
	strb	r0, [r4]
	b	.L767
.L771:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	add	r0, r5, #0
	bl	sub_80218D4
	cmp	r0, #0
	beq	.L779	@cond_branch
	bl	Rfu_SetLinkStandbyCallback
	mov	r0, #0x0
	strh	r0, [r5, #0x10]
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1e
	mov	r1, #0x0
	bl	SetGpuReg
	b	.L767
.L773:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L779	@cond_branch
	ldr	r0, .L781
	ldr	r1, [r5, #0x1c]
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	mov	r4, #0x0
	str	r4, [sp]
	add	r0, r6, #0
	mov	r1, #0x7
	mov	r2, #0x1
	mov	r3, #0x0
	bl	sub_8024644
	mov	r0, #0x13
	strb	r0, [r5, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	mov	r0, #0x0
	strh	r4, [r5, #0x10]
	b	.L780
.L782:
	.align	2, 0
.L781:
	.word	gStringVar1
.L767:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
.L780:
	strb	r0, [r5, #0xc]
.L779:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe61:
	.size	 sub_8023BC0,.Lfe61-sub_8023BC0
	.align	2, 0
	.type	 sub_8023CAC,function
	.thumb_func
sub_8023CAC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r7, r0, #0
	ldrb	r0, [r7, #0xc]
	cmp	r0, #0x7
	bls	.LCB8032
	b	.L784	@long jump
.LCB8032:
	lsl	r0, r0, #0x2
	ldr	r1, .L846
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L847:
	.align	2, 0
.L846:
	.word	.L837
	.align	2, 0
	.align	2, 0
.L837:
	.word	.L785
	.word	.L787
	.word	.L789
	.word	.L798
	.word	.L819
	.word	.L832
	.word	.L834
	.word	.L836
.L785:
	add	r4, r7, #0
	add	r4, r4, #0x42
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x4
	bl	memset
	ldrb	r0, [r7, #0x8]
	lsl	r0, r0, #0x5
	add	r0, r7, r0
	add	r2, r0, #0
	add	r2, r2, #0xb2
	ldrh	r1, [r7, #0x28]
	ldrh	r0, [r2]
	cmp	r0, r1
	bls	.L786	@cond_branch
	strh	r1, [r2]
.L786:
	ldrb	r0, [r7, #0x8]
	lsl	r0, r0, #0x5
	add	r0, r7, r0
	add	r0, r0, #0xb2
	ldrh	r0, [r0]
	strh	r0, [r4]
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x2
	bl	SendBlock
	b	.L784
.L787:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB8090
	b	.L840	@long jump
.LCB8090:
	b	.L841
.L789:
	bl	GetBlockReceivedStatus
	ldr	r2, .L848
	ldrb	r3, [r7, #0x9]
	sub	r1, r3, #0x2
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.LCB8107
	b	.L840	@long jump
.LCB8107:
	mov	r0, #0x0
	mov	r8, r0
	add	r4, r7, #0
	add	r4, r4, #0x42
	cmp	r8, r3
	bcs	.L792	@cond_branch
	ldr	r2, .L848+0x4
.L794:
	mov	r3, r8
	lsl	r1, r3, #0x5
	add	r1, r7, r1
	lsl	r0, r3, #0x8
	add	r0, r0, r2
	ldrh	r0, [r0]
	add	r1, r1, #0xb2
	strh	r0, [r1]
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r6, [r7, #0x9]
	cmp	r8, r6
	bcc	.L794	@cond_branch
.L792:
	mov	r0, #0x0
	strh	r0, [r7, #0x10]
	strh	r0, [r4]
	bl	ResetBlockReceivedFlags
	ldrb	r0, [r7, #0x8]
	cmp	r0, #0
	bne	.L796	@cond_branch
	mov	r0, #0x3
	b	.L843
.L849:
	.align	2, 0
.L848:
	.word	gUnknown_082F4448
	.word	gBlockRecvBuffer
.L796:
	mov	r0, #0x6
	b	.L843
.L798:
	add	r0, r7, #0
	add	r0, r0, #0x68
	mov	r1, #0x0
	mov	r2, #0x30
	bl	memset
	ldrh	r1, [r7, #0x28]
	add	r0, r7, #0
	add	r0, r0, #0x6c
	strh	r1, [r0]
	mov	r0, #0x18
	ldrsh	r4, [r7, r0]
	ldrh	r0, [r7, #0x28]
	mov	r1, #0x3c
	bl	__udivsi3
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	__divsi3
	add	r1, r7, #0
	add	r1, r1, #0x6e
	strh	r0, [r1]
	mov	r1, #0x30
	ldrsh	r0, [r7, r1]
	lsl	r0, r0, #0x8
	mov	r4, #0xc8
	lsl	r4, r4, #0x6
	add	r1, r4, #0
	bl	MathUtil_Mul32
	add	r2, r0, #0
	mov	r3, #0x32
	ldrsh	r1, [r7, r3]
	lsl	r1, r1, #0x8
	bl	MathUtil_Div32
	add	r2, r0, r4
	asr	r2, r2, #0x8
	mov	r1, #0x7f
	add	r0, r2, #0
	and	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #0x70
	strh	r0, [r1]
	lsl	r2, r2, #0x8
	mov	r1, #0xc8
	lsl	r1, r1, #0x7
	add	r0, r2, #0
	bl	MathUtil_Div32
	add	r2, r0, #0
	ldrb	r1, [r7, #0x9]
	ldr	r0, [r7, #0x1c]
	mul	r0, r0, r1
	lsl	r4, r0, #0x8
	add	r0, r4, #0
	add	r1, r2, #0
	bl	MathUtil_Mul32
	add	r4, r0, #0
	asr	r0, r4, #0x8
	str	r0, [r7, #0x68]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	add	r1, r7, #0
	add	r1, r1, #0x8f
	strb	r0, [r1]
	mov	r6, #0x0
	mov	r8, r6
	mov	r9, r1
	ldrb	r0, [r7, #0x9]
	cmp	r8, r0
	bcc	.LCB8251
	b	.L784	@long jump
.LCB8251:
.L802:
	add	r0, r7, #0
	add	r0, r0, #0x88
	add	r0, r0, r8
	mov	r1, r8
	strb	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #0x90
	add	r0, r0, r8
	strb	r1, [r0]
	mov	r3, r8
	lsl	r2, r3, #0x1
	add	r1, r7, #0
	add	r1, r1, #0x74
	add	r1, r1, r2
	lsl	r0, r3, #0x5
	add	r3, r7, r0
	add	r5, r3, #0
	add	r5, r5, #0xae
	ldrh	r0, [r5]
	strh	r0, [r1]
	add	r1, r7, #0
	add	r1, r1, #0x72
	ldrh	r6, [r1]
	add	r0, r0, r6
	strh	r0, [r1]
	mov	r1, r9
	ldrb	r0, [r1]
	add	r6, r2, #0
	cmp	r0, #0x1
	beq	.L807	@cond_branch
	cmp	r0, #0x1
	bgt	.L817	@cond_branch
	cmp	r0, #0
	beq	.L804	@cond_branch
	b	.L803
.L817:
	cmp	r0, #0x2
	beq	.L810	@cond_branch
	b	.L803
.L804:
	ldrh	r0, [r5]
	cmp	r0, #0
	beq	.L845	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xac
	ldrh	r2, [r0]
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	mov	r1, #0xc8
	lsl	r1, r1, #0x7
	bl	MathUtil_Mul32
	add	r2, r0, #0
	ldrh	r4, [r5]
	b	.L844
.L807:
	ldrh	r0, [r5]
	cmp	r0, #0
	beq	.L845	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xb0
	ldrh	r2, [r0]
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	mov	r1, #0xc8
	lsl	r1, r1, #0x7
	bl	MathUtil_Mul32
	add	r2, r0, #0
	ldrh	r4, [r5]
	b	.L844
.L810:
	ldrh	r0, [r5]
	cmp	r0, #0
	bne	.L811	@cond_branch
.L845:
	mov	r4, #0x0
	b	.L803
.L811:
	add	r1, r3, #0
	add	r1, r1, #0xb2
	ldrh	r0, [r1]
	ldrh	r2, [r7, #0x28]
	cmp	r0, r2
	bcc	.L813	@cond_branch
	mov	r4, #0xc8
	lsl	r4, r4, #0x7
	b	.L803
.L813:
	ldrh	r2, [r1]
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	mov	r1, #0xc8
	lsl	r1, r1, #0x7
	bl	MathUtil_Mul32
	add	r2, r0, #0
	ldrh	r4, [r7, #0x28]
.L844:
	lsl	r4, r4, #0x8
	add	r1, r4, #0
	bl	MathUtil_Div32
	add	r4, r0, #0
.L803:
	asr	r4, r4, #0x4
	add	r0, r7, #0
	add	r0, r0, #0x7e
	add	r0, r0, r6
	strh	r4, [r0]
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r3, [r7, #0x9]
	cmp	r8, r3
	bcc	.L802	@cond_branch
	b	.L784
.L819:
	mov	r6, #0x0
	mov	r8, r6
	ldrb	r0, [r7, #0x9]
	sub	r0, r0, #0x1
	add	r1, r7, #0
	add	r1, r1, #0x68
	str	r1, [sp, #0xc]
	cmp	r8, r0
	bge	.L821	@cond_branch
.L823:
	ldrb	r0, [r7, #0x9]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r2, r8
	add	r2, r2, #0x1
	str	r2, [sp, #0x8]
	cmp	r4, r8
	bls	.L822	@cond_branch
	add	r3, r7, #0
	add	r3, r3, #0x74
	str	r3, [sp]
	add	r6, r7, #0
	add	r6, r6, #0x88
	str	r6, [sp, #0x4]
	mov	r0, #0x90
	add	r0, r0, r7
	mov	sl, r0
	mov	r1, #0x7e
	add	r1, r1, r7
	mov	r9, r1
.L827:
	sub	r2, r4, #0x1
	mov	ip, r2
	lsl	r6, r2, #0x1
	ldr	r0, [sp]
	add	r3, r0, r6
	lsl	r5, r4, #0x1
	add	r1, r0, r5
	ldrh	r2, [r3]
	ldrh	r0, [r1]
	cmp	r2, r0
	bcs	.L828	@cond_branch
	ldrh	r0, [r1]
	strh	r2, [r1]
	strh	r0, [r3]
	ldr	r1, [sp, #0x4]
	add	r2, r1, r4
	ldrb	r3, [r2]
	add	r1, r1, ip
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
.L828:
	mov	r2, r9
	add	r3, r2, r6
	add	r1, r2, r5
	ldrh	r2, [r3]
	ldrh	r6, [r1]
	cmp	r2, r6
	bcs	.L826	@cond_branch
	ldrh	r0, [r1]
	strh	r2, [r1]
	strh	r0, [r3]
	mov	r0, sl
	add	r2, r0, r4
	ldrb	r3, [r2]
	mov	r1, sl
	add	r1, r1, ip
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
.L826:
	mov	r1, ip
	lsl	r0, r1, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r8
	bhi	.L827	@cond_branch
.L822:
	ldr	r2, [sp, #0x8]
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r0, [r7, #0x9]
	sub	r0, r0, #0x1
	cmp	r8, r0
	blt	.L823	@cond_branch
.L821:
	mov	r0, #0x0
	ldr	r1, [sp, #0xc]
	mov	r2, #0x30
	bl	SendBlock
	b	.L784
.L832:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L840	@cond_branch
	b	.L841
.L834:
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L840	@cond_branch
	add	r4, r7, #0
	add	r4, r4, #0x68
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x30
	bl	memset
	ldr	r1, .L850
	add	r0, r4, #0
	mov	r2, #0x30
	bl	memcpy
	bl	ResetBlockReceivedFlags
.L841:
	mov	r0, #0x0
	strh	r0, [r7, #0x10]
	b	.L784
.L851:
	.align	2, 0
.L850:
	.word	gBlockRecvBuffer
.L836:
	bl	sub_8020E58
	mov	r0, #0x12
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	mov	r0, #0x0
	mov	r1, #0xb
	strh	r1, [r7, #0x12]
	strb	r0, [r7, #0xc]
	add	r1, r7, #0
	add	r1, r1, #0x24
	strb	r0, [r1]
	b	.L840
.L784:
	ldrb	r0, [r7, #0xc]
	add	r0, r0, #0x1
.L843:
	strb	r0, [r7, #0xc]
.L840:
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe62:
	.size	 sub_8023CAC,.Lfe62-sub_8023CAC
	.align	2, 0
	.type	 sub_8024048,function
	.thumb_func
sub_8024048:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r6, r1, #0
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x4
	bhi	.L853	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L867
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L868:
	.align	2, 0
.L867:
	.word	.L863
	.align	2, 0
	.align	2, 0
.L863:
	.word	.L854
	.word	.L856
	.word	.L857
	.word	.L860
	.word	.L862
.L854:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	add	r0, r5, #0
	bl	sub_8022070
	cmp	r0, #0
	bne	.L853	@cond_branch
	b	.L866
.L856:
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	mov	r0, #0x1e
	strb	r0, [r1]
	b	.L853
.L857:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L858	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	b	.L866
.L858:
	ldr	r0, .L869
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L866	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	sub_802222C
	b	.L853
.L870:
	.align	2, 0
.L869:
	.word	gMain
.L860:
	ldrh	r0, [r5, #0x12]
	cmp	r0, #0xc
	bhi	.L853	@cond_branch
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r5, #0x12]
	strb	r1, [r5, #0xc]
	b	.L866
.L862:
	ldr	r0, .L871
	ldr	r1, [r5, #0x1c]
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L871+0x4
	bl	GetBerryPowder
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	mov	r4, #0x0
	str	r4, [sp]
	add	r0, r6, #0
	mov	r1, #0x2
	mov	r2, #0x3
	mov	r3, #0x0
	bl	sub_8024644
	mov	r0, #0x13
	strb	r0, [r5, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	strb	r4, [r5, #0xc]
	b	.L866
.L872:
	.align	2, 0
.L871:
	.word	gStringVar1
	.word	gStringVar2
.L853:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L866:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe63:
	.size	 sub_8024048,.Lfe63-sub_8024048
	.align	2, 0
	.type	 sub_8024134,function
	.thumb_func
sub_8024134:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	add	r4, r1, #0
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x4
	bhi	.L874	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L887
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L888:
	.align	2, 0
.L887:
	.word	.L883
	.align	2, 0
	.align	2, 0
.L883:
	.word	.L875
	.word	.L877
	.word	.L878
	.word	.L880
	.word	.L882
.L875:
	ldrh	r1, [r5, #0x28]
	ldr	r0, .L889
	cmp	r1, r0
	bls	.L876	@cond_branch
	mov	r1, #0x9c
	lsl	r1, r1, #0x1
	add	r0, r5, r1
	bl	sub_8022554
.L876:
	mov	r0, #0x1
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x8
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_8024644
	mov	r4, #0x0
	mov	r0, #0x13
	strb	r0, [r5, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	strb	r4, [r5, #0xc]
	b	.L886
.L890:
	.align	2, 0
.L889:
	.word	0x8c9f
.L877:
	bl	Rfu_SetLinkStandbyCallback
	b	.L874
.L878:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L886	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldr	r2, .L891
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized2
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r0, .L891+0x4
	mov	r1, #0x0
	bl	CreateTask
	b	.L874
.L892:
	.align	2, 0
.L891:
	.word	gText_SavingDontTurnOffPower
	.word	Task_LinkSave
.L880:
	ldr	r0, .L893
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L874	@cond_branch
	b	.L886
.L894:
	.align	2, 0
.L893:
	.word	Task_LinkSave
.L882:
	mov	r0, #0x14
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	mov	r1, #0x0
	mov	r0, #0xf
	strh	r0, [r5, #0x12]
	strb	r1, [r5, #0xc]
	b	.L886
.L874:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L886:
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 sub_8024134,.Lfe64-sub_8024134
	.align	2, 0
	.type	 sub_8024228,function
	.thumb_func
sub_8024228:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r6, r1, #0
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x1
	beq	.L898	@cond_branch
	cmp	r0, #0x1
	bgt	.L907	@cond_branch
	cmp	r0, #0
	beq	.L897	@cond_branch
	b	.L896
.L907:
	cmp	r0, #0x2
	beq	.L899	@cond_branch
	b	.L896
.L897:
	mov	r0, #0x1
	str	r0, [sp]
	add	r0, r6, #0
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_8024644
	mov	r0, #0x14
	strb	r0, [r5, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	mov	r0, #0x0
	strb	r0, [r5, #0xc]
	b	.L908
.L898:
	bl	DisplayYesNoMenuDefaultYes
	b	.L896
.L899:
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L910	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x42
	mov	r1, #0x0
	mov	r2, #0xc
	bl	memset
	cmp	r4, #0
	bne	.L901	@cond_branch
	bl	HasAtLeastOneBerry
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L902	@cond_branch
	strh	r4, [r5, #0x14]
	b	.L904
.L902:
	mov	r0, #0x3
	b	.L909
.L901:
	mov	r0, #0x1
.L909:
	strh	r0, [r5, #0x14]
.L904:
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	mov	r4, #0x0
	str	r4, [sp]
	add	r0, r6, #0
	mov	r1, #0x8
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_8024644
	mov	r0, #0x15
	strb	r0, [r5, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	strb	r4, [r5, #0xc]
	b	.L910
.L896:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L910:
	mov	r0, #0x0
.L908:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 sub_8024228,.Lfe65-sub_8024228
	.align	2, 0
	.type	 sub_80242E0,function
	.thumb_func
sub_80242E0:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	beq	.L914	@cond_branch
	cmp	r0, #0x1
	bgt	.L929	@cond_branch
	cmp	r0, #0
	beq	.L913	@cond_branch
	b	.L912
.L929:
	cmp	r0, #0x2
	beq	.L916	@cond_branch
	cmp	r0, #0x3
	beq	.L918	@cond_branch
	b	.L912
.L913:
	bl	Rfu_SetLinkStandbyCallback
	b	.L912
.L914:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L931	@cond_branch
	ldrh	r0, [r4, #0x14]
	add	r1, r4, #0
	add	r1, r1, #0x42
	strh	r0, [r1]
	add	r0, r4, #0
	add	r0, r0, #0x4e
	strh	r5, [r0]
	mov	r0, #0x0
	mov	r2, #0x2
	bl	SendBlock
	b	.L912
.L916:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L931	@cond_branch
	strh	r5, [r4, #0x10]
	b	.L912
.L918:
	bl	GetBlockReceivedStatus
	ldr	r2, .L932
	ldrb	r3, [r4, #0x9]
	sub	r1, r3, #0x2
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L931	@cond_branch
	add	r7, r4, #0
	add	r7, r7, #0x42
	add	r6, r4, #0
	add	r6, r6, #0x4e
	cmp	r5, r3
	bcs	.L921	@cond_branch
	add	r1, r6, #0
	ldr	r2, .L932+0x4
.L923:
	lsl	r0, r5, #0x8
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldrh	r3, [r1]
	add	r0, r0, r3
	strh	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r4, #0x9]
	cmp	r5, r0
	bcc	.L923	@cond_branch
.L921:
	ldrh	r0, [r6]
	cmp	r0, #0
	beq	.L925	@cond_branch
	mov	r0, #0x17
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	b	.L926
.L933:
	.align	2, 0
.L932:
	.word	gUnknown_082F4448
	.word	gBlockRecvBuffer
.L925:
	mov	r0, #0x16
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
.L926:
	bl	ResetBlockReceivedFlags
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r7]
	strh	r0, [r6]
	strh	r0, [r4, #0x10]
	strb	r1, [r4, #0xc]
	b	.L930
.L912:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xc]
.L931:
	mov	r0, #0x0
.L930:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe66:
	.size	 sub_80242E0,.Lfe66-sub_80242E0
	.align	2, 0
	.type	 sub_80243BC,function
	.thumb_func
sub_80243BC:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	ldrb	r4, [r5, #0xc]
	cmp	r4, #0x1
	beq	.L937	@cond_branch
	cmp	r4, #0x1
	bgt	.L944	@cond_branch
	cmp	r4, #0
	beq	.L936	@cond_branch
	b	.L935
.L944:
	cmp	r4, #0x2
	beq	.L939	@cond_branch
	cmp	r4, #0x3
	beq	.L940	@cond_branch
	b	.L935
.L936:
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x10
	b	.L946
.L937:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L935	@cond_branch
	b	.L947
.L939:
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	add	r0, r5, #0
	bl	sub_8021488
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
.L946:
	bl	BeginNormalPaletteFade
	bl	UpdatePaletteFade
	b	.L935
.L940:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L947	@cond_branch
	mov	r0, #0x7
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	mov	r0, #0x0
	strh	r4, [r5, #0x12]
	b	.L948
.L935:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
.L948:
	strb	r0, [r5, #0xc]
.L947:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe67:
	.size	 sub_80243BC,.Lfe67-sub_80243BC
	.align	2, 0
	.type	 sub_8024444,function
	.thumb_func
sub_8024444:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	ldrb	r4, [r5, #0xc]
	cmp	r4, #0x1
	beq	.L954	@cond_branch
	cmp	r4, #0x1
	bgt	.L961	@cond_branch
	cmp	r4, #0
	beq	.L951	@cond_branch
	b	.L950
.L961:
	cmp	r4, #0x2
	beq	.L956	@cond_branch
	b	.L950
.L951:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldrh	r1, [r5, #0x14]
	cmp	r1, #0x3
	bne	.L952	@cond_branch
	ldr	r0, .L964
	ldr	r2, [r0, #0x14]
	ldrb	r3, [r5, #0xb]
	str	r4, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	str	r1, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	AddTextPrinterParameterized2
	b	.L953
.L965:
	.align	2, 0
.L964:
	.word	gUnknown_082F32A4
.L952:
	ldr	r0, .L966
	ldr	r2, [r0, #0x18]
	ldrb	r3, [r5, #0xb]
	str	r4, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	AddTextPrinterParameterized2
.L953:
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L950
.L967:
	.align	2, 0
.L966:
	.word	gUnknown_082F32A4
.L954:
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L963	@cond_branch
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	mov	r0, #0x78
	strb	r0, [r1]
	b	.L950
.L956:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	ldrb	r0, [r1]
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L957	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	b	.L963
.L957:
	mov	r0, #0x18
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	strb	r4, [r5, #0xc]
	b	.L963
.L950:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L963:
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe68:
	.size	 sub_8024444,.Lfe68-sub_8024444
	.align	2, 0
	.type	 sub_8024508,function
	.thumb_func
sub_8024508:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrb	r4, [r5, #0xc]
	cmp	r4, #0x1
	beq	.L971	@cond_branch
	cmp	r4, #0x1
	bgt	.L977	@cond_branch
	cmp	r4, #0
	beq	.L970	@cond_branch
	b	.L969
.L977:
	cmp	r4, #0x2
	beq	.L973	@cond_branch
	b	.L969
.L970:
	bl	Rfu_SetLinkStandbyCallback
	b	.L969
.L971:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L979	@cond_branch
	bl	SetCloseLinkCallback
	b	.L969
.L973:
	ldr	r0, .L980
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L979	@cond_branch
	mov	r0, #0x19
	strb	r0, [r5, #0xe]
	mov	r0, #0x5
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_8022BEC
	strb	r4, [r5, #0xc]
	b	.L979
.L981:
	.align	2, 0
.L980:
	.word	gReceivedRemoteLinkPlayers
.L969:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L979:
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe69:
	.size	 sub_8024508,.Lfe69-sub_8024508
	.align	2, 0
	.type	 sub_8024568,function
	.thumb_func
sub_8024568:
	push	{lr}
	mov	r0, #0x0
	bl	sub_8020C0C
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe70:
	.size	 sub_8024568,.Lfe70-sub_8024568
	.align	2, 0
	.globl	sub_8024578
	.type	 sub_8024578,function
	.thumb_func
sub_8024578:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	mov	r0, #0x33
	bl	IncrementGameStat
	strb	r5, [r4, #0xd]
	mov	r1, #0x0
	strh	r5, [r4, #0x10]
	mov	r0, #0x2
	strh	r0, [r4, #0x12]
	strh	r5, [r4, #0x14]
	str	r5, [r4, #0x1c]
	strh	r5, [r4, #0x18]
	strh	r5, [r4, #0x1a]
	str	r5, [r4, #0x20]
	add	r0, r4, #0
	add	r0, r0, #0x24
	strb	r1, [r0]
	add	r1, r4, #0
	add	r1, r1, #0x25
	mov	r0, #0x0
	strb	r0, [r1]
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x28]
	strh	r5, [r4, #0x2e]
	ldr	r0, .L989
	strh	r0, [r4, #0x32]
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x34]
	mov	r6, #0x0
	mov	r3, #0x0
.L987:
	lsl	r0, r5, #0x5
	add	r2, r4, r0
	add	r1, r2, #0
	add	r1, r1, #0xa4
	ldr	r0, .L989
	strh	r0, [r1]
	add	r0, r2, #0
	add	r0, r0, #0xa6
	strh	r3, [r0]
	add	r0, r0, #0x2
	strh	r3, [r0]
	add	r1, r1, #0x6
	mov	r0, #0x1
	strh	r0, [r1]
	add	r0, r2, #0
	add	r0, r0, #0xac
	strh	r3, [r0]
	add	r0, r0, #0x2
	strh	r3, [r0]
	add	r0, r0, #0x2
	strh	r3, [r0]
	add	r0, r0, #0x2
	strh	r3, [r0]
	add	r0, r0, #0x2
	strb	r6, [r0]
	add	r0, r0, #0x1
	strb	r6, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bls	.L987	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L990:
	.align	2, 0
.L989:
	.word	0xffff
.Lfe71:
	.size	 sub_8024578,.Lfe71-sub_8024578
	.align	2, 0
	.type	 BerryCrush_SetPaletteFadeParams,function
	.thumb_func
BerryCrush_SetPaletteFadeParams:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	str	r2, [sp, #0x4]
	ldr	r5, [sp, #0x18]
	ldr	r6, [sp, #0x1c]
	ldr	r4, [sp, #0x20]
	mov	r2, sp
	strh	r4, [r2]
	add	r4, sp, #0x4
	ldrb	r2, [r4]
	strb	r2, [r0]
	ldrb	r2, [r4, #0x1]
	strb	r2, [r0, #0x1]
	ldrb	r2, [r4, #0x2]
	strb	r2, [r0, #0x2]
	ldrb	r2, [r4, #0x3]
	strb	r2, [r0, #0x3]
	strb	r3, [r0, #0x4]
	strb	r5, [r0, #0x5]
	strb	r6, [r0, #0x6]
	mov	r2, sp
	ldrb	r2, [r2]
	strb	r2, [r0, #0x7]
	mov	r2, sp
	ldrb	r2, [r2, #0x1]
	strb	r2, [r0, #0x8]
	strb	r1, [r0, #0x9]
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe72:
	.size	 BerryCrush_SetPaletteFadeParams,.Lfe72-BerryCrush_SetPaletteFadeParams
	.align	2, 0
	.globl	sub_8024644
	.type	 sub_8024644,function
	.thumb_func
sub_8024644:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r5, [sp, #0x10]
	mov	r4, sp
	strh	r3, [r4]
	strb	r1, [r0]
	strb	r2, [r0, #0x1]
	mov	r1, sp
	ldrb	r1, [r1]
	strb	r1, [r0, #0x2]
	mov	r1, sp
	ldrb	r1, [r1, #0x1]
	strb	r1, [r0, #0x3]
	strb	r5, [r0, #0x4]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 sub_8024644,.Lfe73-sub_8024644
.text
	.align	2, 0

